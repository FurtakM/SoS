// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9048 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36562 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36562 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36562 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36562 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36562 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36562 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36562 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36562 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36562 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36562 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36562 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// if ingame_video then
6129: LD_OWVAR 52
6133: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// until not ingame_video ;
6142: LD_OWVAR 52
6146: NOT
6147: IFFALSE 6135
// wait ( 0 0$5 ) ;
6149: LD_INT 175
6151: PPUSH
6152: CALL_OW 67
// end ; IncomingAttack ;
6156: CALL 15057 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6160: LD_INT 2100
6162: PPUSH
6163: LD_INT 3500
6165: PPUSH
6166: CALL_OW 12
6170: PPUSH
6171: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 3
6187: PUSH
6188: LD_INT 4
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_OWVAR 67
6203: ARRAY
6204: PUSH
6205: LD_EXP 19
6209: PUSH
6210: LD_INT 3
6212: DIV
6213: PLUS
6214: PUSH
6215: FOR_TO
6216: IFFALSE 6328
// begin uc_side := 1 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// uc_nation := 1 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 1
6239: PPUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_OWVAR 67
6258: ARRAY
6259: PPUSH
6260: CALL_OW 380
// un := CreateHuman ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: CALL_OW 44
6273: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 37
6281: PPUSH
6282: LD_INT 70
6284: PPUSH
6285: LD_INT 3
6287: PPUSH
6288: LD_INT 0
6290: PPUSH
6291: CALL_OW 50
// usAttackers := usAttackers union un ;
6295: LD_ADDR_EXP 47
6299: PUSH
6300: LD_EXP 47
6304: PUSH
6305: LD_VAR 0 2
6309: UNION
6310: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6311: LD_VAR 0 2
6315: PPUSH
6316: LD_INT 40
6318: PPUSH
6319: LD_INT 65
6321: PPUSH
6322: CALL_OW 111
// end ;
6326: GO 6215
6328: POP
6329: POP
// uc_side := 1 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// uc_nation := 1 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 4
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 380
// un := CreateHuman ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: CALL_OW 44
6368: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_INT 70
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 0
6385: PPUSH
6386: CALL_OW 50
// usAttackers := usAttackers union un ;
6390: LD_ADDR_EXP 47
6394: PUSH
6395: LD_EXP 47
6399: PUSH
6400: LD_VAR 0 2
6404: UNION
6405: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6406: LD_VAR 0 2
6410: PPUSH
6411: LD_INT 40
6413: PPUSH
6414: LD_INT 65
6416: PPUSH
6417: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: DOUBLE
6427: LD_INT 1
6429: DEC
6430: ST_TO_ADDR
6431: LD_OWVAR 67
6435: PUSH
6436: LD_EXP 19
6440: PUSH
6441: LD_INT 4
6443: DIV
6444: PLUS
6445: PUSH
6446: FOR_TO
6447: IFFALSE 6620
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: CALL_OW 12
6493: ARRAY
6494: PPUSH
6495: LD_INT 90
6497: PPUSH
6498: CALL 313 0 7
6502: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6503: LD_VAR 0 3
6507: PPUSH
6508: LD_INT 35
6510: PPUSH
6511: LD_INT 65
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 3
6526: PPUSH
6527: LD_OWVAR 67
6531: PUSH
6532: LD_INT 1
6534: PLUS
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_VAR 0 3
6559: PPUSH
6560: CALL_OW 52
// usAttackers := usAttackers union un ;
6564: LD_ADDR_EXP 47
6568: PUSH
6569: LD_EXP 47
6573: PUSH
6574: LD_VAR 0 2
6578: UNION
6579: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_INT 39
6587: PPUSH
6588: LD_INT 60
6590: PPUSH
6591: CALL_OW 111
// wait ( 0 0$3 ) ;
6595: LD_INT 105
6597: PPUSH
6598: CALL_OW 67
// usAttackers := usAttackers union veh ;
6602: LD_ADDR_EXP 47
6606: PUSH
6607: LD_EXP 47
6611: PUSH
6612: LD_VAR 0 3
6616: UNION
6617: ST_TO_ADDR
// end ;
6618: GO 6446
6620: POP
6621: POP
// attackWave := attackWave + 1 ;
6622: LD_ADDR_EXP 19
6626: PUSH
6627: LD_EXP 19
6631: PUSH
6632: LD_INT 1
6634: PLUS
6635: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6636: LD_EXP 24
6640: PPUSH
6641: CALL_OW 427
// end ;
6645: LD_VAR 0 1
6649: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if retreatAllowed then
6663: LD_EXP 11
6667: IFFALSE 6679
// strategy := 2 else
6669: LD_ADDR_VAR 0 5
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
6677: GO 6695
// strategy := rand ( 0 , 2 ) ;
6679: LD_ADDR_VAR 0 5
6683: PUSH
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 2
6689: PPUSH
6690: CALL_OW 12
6694: ST_TO_ADDR
// attackFormula := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// case strategy of 0 :
6702: LD_VAR 0 5
6706: PUSH
6707: LD_INT 0
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 7045
6715: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6716: LD_INT 11
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 30
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 70
6747: NOT
6748: IFFALSE 6820
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6750: LD_ADDR_VAR 0 6
6754: PUSH
6755: LD_INT 41
6757: PUSH
6758: LD_INT 34
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: LD_INT 53
6770: PUSH
6771: LD_INT 62
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 37
6780: PUSH
6781: LD_INT 63
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 44
6790: PUSH
6791: LD_INT 45
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 37
6800: PUSH
6801: LD_INT 28
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7043
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6820: LD_INT 12
6822: PPUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 30
6848: PUSH
6849: LD_INT 31
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 32
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: IFFALSE 6964
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 27
6890: PUSH
6891: LD_INT 42
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 27
6900: PUSH
6901: LD_INT 32
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 53
6914: PUSH
6915: LD_INT 62
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 37
6924: PUSH
6925: LD_INT 63
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 44
6934: PUSH
6935: LD_INT 45
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 37
6944: PUSH
6945: LD_INT 28
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
6962: GO 7043
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6964: LD_ADDR_VAR 0 6
6968: PUSH
6969: LD_INT 71
6971: PUSH
6972: LD_INT 67
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 54
6981: PUSH
6982: LD_INT 35
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 63
6995: PUSH
6996: LD_INT 40
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 37
7005: PUSH
7006: LD_INT 63
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 44
7015: PUSH
7016: LD_INT 45
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 37
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; 1 :
7043: GO 7248
7045: LD_INT 1
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7157
7053: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7054: LD_ADDR_VAR 0 6
7058: PUSH
7059: LD_INT 71
7061: PUSH
7062: LD_INT 67
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 82
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 53
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 43
7091: PUSH
7092: LD_INT 10
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 53
7107: PUSH
7108: LD_INT 62
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 37
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 44
7127: PUSH
7128: LD_INT 45
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 37
7137: PUSH
7138: LD_INT 28
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7248
7157: LD_INT 2
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7247
7165: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7166: LD_ADDR_VAR 0 6
7170: PUSH
7171: LD_INT 90
7173: PUSH
7174: LD_INT 59
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 64
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 82
7197: PUSH
7198: LD_INT 75
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 73
7207: PUSH
7208: LD_INT 67
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 101
7217: PUSH
7218: LD_INT 65
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 108
7227: PUSH
7228: LD_INT 62
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7248
7247: POP
// if not attackFormula then
7248: LD_VAR 0 6
7252: NOT
7253: IFFALSE 7257
// exit ;
7255: GO 8935
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7257: LD_ADDR_VAR 0 7
7261: PUSH
7262: LD_EXP 47
7266: PPUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 72
7281: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7282: LD_ADDR_VAR 0 8
7286: PUSH
7287: LD_EXP 47
7291: PPUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 72
7306: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7307: LD_ADDR_VAR 0 9
7311: PUSH
7312: LD_EXP 47
7316: PPUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PPUSH
7327: CALL_OW 72
7331: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7332: LD_ADDR_VAR 0 10
7336: PUSH
7337: LD_EXP 47
7341: PPUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 72
7356: ST_TO_ADDR
// if sci then
7357: LD_VAR 0 8
7361: IFFALSE 7398
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7363: LD_VAR 0 8
7367: PPUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_INT 2
7375: ARRAY
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: LD_VAR 0 6
7385: PUSH
7386: LD_INT 2
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: CALL_OW 111
// repeat wait ( 10 ) ;
7398: LD_INT 10
7400: PPUSH
7401: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7405: LD_ADDR_VAR 0 7
7409: PUSH
7410: LD_EXP 47
7414: PPUSH
7415: LD_INT 25
7417: PUSH
7418: LD_INT 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 72
7429: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7430: LD_ADDR_VAR 0 8
7434: PUSH
7435: LD_EXP 47
7439: PPUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 72
7454: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7455: LD_ADDR_VAR 0 9
7459: PUSH
7460: LD_EXP 47
7464: PPUSH
7465: LD_INT 25
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PPUSH
7475: CALL_OW 72
7479: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7480: LD_ADDR_VAR 0 10
7484: PUSH
7485: LD_EXP 47
7489: PPUSH
7490: LD_INT 21
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 72
7504: ST_TO_ADDR
// if sol then
7505: LD_VAR 0 7
7509: IFFALSE 7930
// begin for i in sol do
7511: LD_ADDR_VAR 0 2
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: FOR_IN
7522: IFFALSE 7928
// begin tag := GetTag ( i ) ;
7524: LD_ADDR_VAR 0 4
7528: PUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 110
7538: ST_TO_ADDR
// if not tag then
7539: LD_VAR 0 4
7543: NOT
7544: IFFALSE 7653
// begin if GetLives ( i ) = 1000 then
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL_OW 256
7555: PUSH
7556: LD_INT 1000
7558: EQUAL
7559: IFFALSE 7575
// SetTag ( i , 1 ) else
7561: LD_VAR 0 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 109
7573: GO 7651
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7575: LD_VAR 0 2
7579: PPUSH
7580: LD_VAR 0 6
7584: PUSH
7585: LD_INT 2
7587: ARRAY
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: LD_VAR 0 6
7597: PUSH
7598: LD_INT 2
7600: ARRAY
7601: PUSH
7602: LD_INT 2
7604: ARRAY
7605: PPUSH
7606: CALL_OW 297
7610: PUSH
7611: LD_INT 10
7613: GREATER
7614: IFFALSE 7651
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_VAR 0 6
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: PPUSH
7634: LD_VAR 0 6
7638: PUSH
7639: LD_INT 2
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PPUSH
7647: CALL_OW 111
// end else
7651: GO 7926
// begin if GetLives ( i ) < 760 then
7653: LD_VAR 0 2
7657: PPUSH
7658: CALL_OW 256
7662: PUSH
7663: LD_INT 760
7665: LESS
7666: IFFALSE 7717
// begin SetTag ( i , 0 ) ;
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7680: LD_VAR 0 2
7684: PPUSH
7685: LD_VAR 0 6
7689: PUSH
7690: LD_INT 2
7692: ARRAY
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: PPUSH
7698: LD_VAR 0 6
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: CALL_OW 111
// end else
7715: GO 7926
// if tag <= attackFormula [ 1 ] then
7717: LD_VAR 0 4
7721: PUSH
7722: LD_VAR 0 6
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: LESSEQUAL
7731: IFFALSE 7892
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 6
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PUSH
7747: LD_VAR 0 4
7751: ARRAY
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PUSH
7766: LD_VAR 0 4
7770: ARRAY
7771: PUSH
7772: LD_INT 2
7774: ARRAY
7775: PPUSH
7776: CALL_OW 297
7780: PUSH
7781: LD_INT 6
7783: GREATER
7784: IFFALSE 7835
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7786: LD_VAR 0 2
7790: PPUSH
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: PUSH
7800: LD_VAR 0 4
7804: ARRAY
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 6
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PUSH
7819: LD_VAR 0 4
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 114
7833: GO 7890
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7835: LD_INT 81
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 91
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PPUSH
7865: CALL_OW 69
7869: NOT
7870: IFFALSE 7890
// SetTag ( i , tag + 1 ) ;
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_VAR 0 4
7881: PUSH
7882: LD_INT 1
7884: PLUS
7885: PPUSH
7886: CALL_OW 109
// end else
7890: GO 7926
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 81
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 74
7921: PPUSH
7922: CALL_OW 115
// end ; end ;
7926: GO 7521
7928: POP
7929: POP
// end ; if sci then
7930: LD_VAR 0 8
7934: IFFALSE 8203
// begin if not sol and not mech then
7936: LD_VAR 0 7
7940: NOT
7941: PUSH
7942: LD_VAR 0 9
7946: NOT
7947: AND
7948: IFFALSE 8000
// begin for i in sci do
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_VAR 0 8
7959: PUSH
7960: FOR_IN
7961: IFFALSE 7996
// begin usForces := usForces union i ;
7963: LD_ADDR_EXP 44
7967: PUSH
7968: LD_EXP 44
7972: PUSH
7973: LD_VAR 0 2
7977: UNION
7978: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 34
7986: PPUSH
7987: LD_INT 68
7989: PPUSH
7990: CALL_OW 111
// end ;
7994: GO 7960
7996: POP
7997: POP
// end else
7998: GO 8203
// for i in sci do
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_VAR 0 8
8009: PUSH
8010: FOR_IN
8011: IFFALSE 8201
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: LD_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ARRAY
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 10
8051: GREATER
8052: IFFALSE 8091
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PPUSH
8072: LD_VAR 0 6
8076: PUSH
8077: LD_INT 2
8079: ARRAY
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: CALL_OW 111
8089: GO 8199
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 24
8101: PUSH
8102: LD_INT 1000
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 91
8115: PUSH
8116: LD_VAR 0 2
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 72
8137: IFFALSE 8199
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 24
8154: PUSH
8155: LD_INT 1000
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 91
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 10
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 72
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: CALL_OW 128
8199: GO 8010
8201: POP
8202: POP
// end ; if mech then
8203: LD_VAR 0 9
8207: IFFALSE 8917
// begin for i in mech do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_VAR 0 9
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8915
// begin tag := GetTag ( i ) ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 110
8236: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8237: LD_ADDR_VAR 0 11
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 310
8251: ST_TO_ADDR
// if not tag then
8252: LD_VAR 0 4
8256: NOT
8257: IFFALSE 8628
// begin if veh then
8259: LD_VAR 0 11
8263: IFFALSE 8434
// begin if GetLives ( veh ) = 1000 then
8265: LD_VAR 0 11
8269: PPUSH
8270: CALL_OW 256
8274: PUSH
8275: LD_INT 1000
8277: EQUAL
8278: IFFALSE 8294
// SetTag ( i , 1 ) else
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 109
8292: GO 8432
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8294: LD_VAR 0 11
8298: PPUSH
8299: LD_VAR 0 6
8303: PUSH
8304: LD_INT 3
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 6
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PPUSH
8325: CALL_OW 297
8329: PUSH
8330: LD_INT 7
8332: GREATER
8333: IFFALSE 8372
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8335: LD_VAR 0 11
8339: PPUSH
8340: LD_VAR 0 6
8344: PUSH
8345: LD_INT 3
8347: ARRAY
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 3
8360: ARRAY
8361: PUSH
8362: LD_INT 2
8364: ARRAY
8365: PPUSH
8366: CALL_OW 111
8370: GO 8432
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8372: LD_INT 81
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: NOT
8407: IFFALSE 8432
// begin ComExitVehicle ( i ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 11
8427: PPUSH
8428: CALL_OW 189
// end ; end else
8432: GO 8626
// if GetLives ( i ) < 400 then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 256
8443: PUSH
8444: LD_INT 400
8446: LESS
8447: IFFALSE 8498
// begin usAttackers := usAttackers diff i ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: LD_EXP 47
8458: PUSH
8459: LD_VAR 0 2
8463: DIFF
8464: ST_TO_ADDR
// usForces := usForces union i ;
8465: LD_ADDR_EXP 44
8469: PUSH
8470: LD_EXP 44
8474: PUSH
8475: LD_VAR 0 2
8479: UNION
8480: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_INT 34
8488: PPUSH
8489: LD_INT 68
8491: PPUSH
8492: CALL_OW 111
// end else
8496: GO 8626
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8498: LD_VAR 0 10
8502: PPUSH
8503: LD_INT 58
8505: PUSH
8506: EMPTY
8507: LIST
8508: PUSH
8509: LD_INT 24
8511: PUSH
8512: LD_INT 1000
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_VAR 0 2
8532: PPUSH
8533: CALL_OW 314
8537: NOT
8538: AND
8539: PUSH
8540: LD_INT 81
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 91
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: OR
8575: IFFALSE 8626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 10
8586: PPUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: LD_INT 250
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 72
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 120
// end else
8626: GO 8913
// begin if veh and GetLives ( veh ) < 760 then
8628: LD_VAR 0 11
8632: PUSH
8633: LD_VAR 0 11
8637: PPUSH
8638: CALL_OW 256
8642: PUSH
8643: LD_INT 760
8645: LESS
8646: AND
8647: IFFALSE 8698
// begin SetTag ( i , 0 ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 0
8656: PPUSH
8657: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8661: LD_VAR 0 11
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 2
8690: ARRAY
8691: PPUSH
8692: CALL_OW 111
// end else
8696: GO 8913
// if veh then
8698: LD_VAR 0 11
8702: IFFALSE 8913
// if tag <= attackFormula [ 4 ] then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_VAR 0 6
8713: PUSH
8714: LD_INT 4
8716: ARRAY
8717: LESSEQUAL
8718: IFFALSE 8879
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8720: LD_VAR 0 11
8724: PPUSH
8725: LD_VAR 0 6
8729: PUSH
8730: LD_INT 4
8732: ARRAY
8733: PUSH
8734: LD_VAR 0 4
8738: ARRAY
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_VAR 0 6
8748: PUSH
8749: LD_INT 4
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 2
8761: ARRAY
8762: PPUSH
8763: CALL_OW 297
8767: PUSH
8768: LD_INT 6
8770: GREATER
8771: IFFALSE 8822
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8773: LD_VAR 0 11
8777: PPUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_INT 4
8785: ARRAY
8786: PUSH
8787: LD_VAR 0 4
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_VAR 0 6
8801: PUSH
8802: LD_INT 4
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 4
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 114
8820: GO 8877
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8822: LD_INT 81
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 91
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: LD_INT 10
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: NOT
8857: IFFALSE 8877
// SetTag ( i , tag + 1 ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_VAR 0 4
8868: PUSH
8869: LD_INT 1
8871: PLUS
8872: PPUSH
8873: CALL_OW 109
// end else
8877: GO 8913
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8879: LD_VAR 0 11
8883: PPUSH
8884: LD_INT 81
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// end ; end ;
8913: GO 8219
8915: POP
8916: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8917: LD_EXP 47
8921: PPUSH
8922: LD_INT 52
8924: PUSH
8925: EMPTY
8926: LIST
8927: PPUSH
8928: CALL_OW 72
8932: NOT
8933: IFFALSE 7398
// end ;
8935: LD_VAR 0 1
8939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8940: LD_INT 22
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: IFFALSE 9045
8970: GO 8972
8972: DISABLE
8973: LD_INT 0
8975: PPUSH
// begin enable ;
8976: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 32
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 69
9010: PUSH
9011: FOR_IN
9012: IFFALSE 9043
// if GetFuel ( i ) < 10 then
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 261
9023: PUSH
9024: LD_INT 10
9026: LESS
9027: IFFALSE 9041
// SetFuel ( i , 10 ) ;
9029: LD_VAR 0 1
9033: PPUSH
9034: LD_INT 10
9036: PPUSH
9037: CALL_OW 240
9041: GO 9011
9043: POP
9044: POP
// end ; end_of_file
9045: PPOPN 1
9047: END
// export function Action ; var hasAll , i , tmp ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9054: LD_ADDR_VAR 0 2
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PUSH
9099: LD_INT 7
9101: GREATEREQUAL
9102: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_STRING 03_HasAll
9110: PPUSH
9111: CALL_OW 39
// Video ( true ) ;
9115: LD_INT 1
9117: PPUSH
9118: CALL 72826 0 1
// CenterNowOnUnits ( Heike ) ;
9122: LD_EXP 28
9126: PPUSH
9127: CALL_OW 87
// wait ( 0 0$2 ) ;
9131: LD_INT 70
9133: PPUSH
9134: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9138: LD_EXP 36
9142: PPUSH
9143: LD_STRING DF-1-start
9145: PPUSH
9146: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9150: LD_EXP 28
9154: PPUSH
9155: LD_EXP 36
9159: PPUSH
9160: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9164: LD_EXP 28
9168: PPUSH
9169: LD_STRING DH-1-start
9171: PPUSH
9172: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9176: LD_EXP 37
9180: PPUSH
9181: LD_INT 92
9183: PPUSH
9184: LD_INT 21
9186: PPUSH
9187: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9191: LD_EXP 32
9195: PPUSH
9196: LD_INT 94
9198: PPUSH
9199: LD_INT 23
9201: PPUSH
9202: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9206: LD_EXP 40
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PPUSH
9215: LD_INT 90
9217: PPUSH
9218: LD_INT 23
9220: PPUSH
9221: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9225: LD_EXP 40
9229: PUSH
9230: LD_INT 2
9232: ARRAY
9233: PPUSH
9234: LD_INT 93
9236: PPUSH
9237: LD_INT 25
9239: PPUSH
9240: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9244: LD_EXP 40
9248: PPUSH
9249: LD_EXP 37
9253: PPUSH
9254: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9258: LD_EXP 37
9262: PUSH
9263: LD_EXP 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: LD_EXP 28
9276: PPUSH
9277: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9281: LD_EXP 28
9285: PPUSH
9286: LD_EXP 37
9290: PPUSH
9291: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9302: LD_EXP 37
9306: PPUSH
9307: LD_INT 92
9309: PPUSH
9310: LD_INT 21
9312: PPUSH
9313: CALL_OW 307
9317: IFFALSE 9295
// Say ( Omar , DO-1-start ) ;
9319: LD_EXP 37
9323: PPUSH
9324: LD_STRING DO-1-start
9326: PPUSH
9327: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9331: LD_EXP 28
9335: PPUSH
9336: LD_STRING DH-2-start
9338: PPUSH
9339: CALL_OW 88
// if hasAll then
9343: LD_VAR 0 2
9347: IFFALSE 9475
// begin Say ( Omar , DO-2-start ) ;
9349: LD_EXP 37
9353: PPUSH
9354: LD_STRING DO-2-start
9356: PPUSH
9357: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9361: LD_EXP 37
9365: PPUSH
9366: LD_STRING DO-3-start
9368: PPUSH
9369: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9373: LD_EXP 28
9377: PPUSH
9378: LD_STRING DH-3-start
9380: PPUSH
9381: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9385: LD_EXP 36
9389: PPUSH
9390: LD_STRING DF-2-start
9392: PPUSH
9393: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_EXP 36
9406: PPUSH
9407: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9411: LD_EXP 37
9415: PPUSH
9416: LD_STRING DO-4-start
9418: PPUSH
9419: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9423: LD_EXP 36
9427: PPUSH
9428: LD_STRING DF-3-start
9430: PPUSH
9431: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9435: LD_EXP 37
9439: PPUSH
9440: LD_STRING DO-5-start
9442: PPUSH
9443: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9447: LD_EXP 36
9451: PPUSH
9452: LD_STRING DF-4-start
9454: PPUSH
9455: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_EXP 28
9468: PPUSH
9469: CALL_OW 119
// end else
9473: GO 9575
// begin Say ( Omar , DO-2-start-a ) ;
9475: LD_EXP 37
9479: PPUSH
9480: LD_STRING DO-2-start-a
9482: PPUSH
9483: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9487: LD_EXP 37
9491: PPUSH
9492: LD_STRING DO-3-start-a
9494: PPUSH
9495: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9499: LD_EXP 28
9503: PPUSH
9504: LD_STRING DH-3-start-a
9506: PPUSH
9507: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9511: LD_EXP 36
9515: PPUSH
9516: LD_STRING DF-2-start-a
9518: PPUSH
9519: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_EXP 36
9532: PPUSH
9533: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9537: LD_EXP 37
9541: PPUSH
9542: LD_STRING DO-4-start-a
9544: PPUSH
9545: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9549: LD_EXP 36
9553: PPUSH
9554: LD_STRING DF-3-start-a
9556: PPUSH
9557: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 28
9570: PPUSH
9571: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9575: LD_INT 10
9577: PPUSH
9578: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9582: LD_EXP 37
9586: PPUSH
9587: LD_STRING DO-1-mission
9589: PPUSH
9590: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9594: LD_EXP 37
9598: PPUSH
9599: LD_STRING DO-2-mission
9601: PPUSH
9602: CALL_OW 88
// if not hasAll then
9606: LD_VAR 0 2
9610: NOT
9611: IFFALSE 9625
// Say ( Omar , DO-3-mission ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING DO-3-mission
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9625: LD_EXP 37
9629: PPUSH
9630: LD_STRING DO-4-mission
9632: PPUSH
9633: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9637: LD_EXP 28
9641: PPUSH
9642: LD_STRING DH-1-mission
9644: PPUSH
9645: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9649: LD_EXP 36
9653: PPUSH
9654: LD_STRING DF-1-mission
9656: PPUSH
9657: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-5-mission
9668: PPUSH
9669: CALL_OW 88
// if not hasAll then
9673: LD_VAR 0 2
9677: NOT
9678: IFFALSE 9813
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9680: LD_ADDR_VAR 0 4
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 21
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 23
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: ST_TO_ADDR
// for i := 7 downto tmp do
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: DOUBLE
9731: LD_INT 7
9733: INC
9734: ST_TO_ADDR
9735: LD_VAR 0 4
9739: PUSH
9740: FOR_DOWNTO
9741: IFFALSE 9811
// begin if omarSquad < 3 then
9743: LD_EXP 40
9747: PUSH
9748: LD_INT 3
9750: LESS
9751: IFFALSE 9755
// break ;
9753: GO 9811
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9755: LD_EXP 40
9759: PUSH
9760: LD_INT 3
9762: ARRAY
9763: PPUSH
9764: LD_INT 2
9766: PPUSH
9767: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9771: LD_ADDR_EXP 42
9775: PUSH
9776: LD_EXP 42
9780: PUSH
9781: LD_EXP 40
9785: PUSH
9786: LD_INT 3
9788: ARRAY
9789: UNION
9790: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9791: LD_ADDR_EXP 40
9795: PUSH
9796: LD_EXP 40
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: CALL_OW 3
9808: ST_TO_ADDR
// end ;
9809: GO 9740
9811: POP
9812: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9813: LD_EXP 37
9817: PUSH
9818: LD_EXP 40
9822: ADD
9823: PPUSH
9824: LD_INT 103
9826: PPUSH
9827: LD_INT 9
9829: PPUSH
9830: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9834: LD_VAR 0 2
9838: PUSH
9839: LD_EXP 33
9843: PPUSH
9844: CALL_OW 302
9848: AND
9849: IFFALSE 9910
// begin wait ( 0 0$3 ) ;
9851: LD_INT 105
9853: PPUSH
9854: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9858: LD_EXP 33
9862: PPUSH
9863: LD_EXP 36
9867: PPUSH
9868: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9872: LD_EXP 33
9876: PPUSH
9877: LD_STRING DK-1-side
9879: PPUSH
9880: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9884: LD_EXP 36
9888: PPUSH
9889: LD_EXP 33
9893: PPUSH
9894: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9898: LD_EXP 36
9902: PPUSH
9903: LD_STRING DF-1-side
9905: PPUSH
9906: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9910: LD_INT 22
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9929: LD_EXP 36
9933: PUSH
9934: LD_EXP 39
9938: ADD
9939: PPUSH
9940: LD_INT 108
9942: PPUSH
9943: LD_INT 62
9945: PPUSH
9946: CALL_OW 111
// gameStarted := true ;
9950: LD_ADDR_EXP 3
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9958: LD_INT 105
9960: PPUSH
9961: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9965: LD_EXP 28
9969: PPUSH
9970: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9974: LD_EXP 28
9978: PPUSH
9979: LD_EXP 32
9983: PPUSH
9984: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9988: LD_INT 22
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: PUSH
10003: LD_EXP 28
10007: DIFF
10008: PPUSH
10009: LD_EXP 28
10013: PPUSH
10014: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10018: LD_EXP 28
10022: PPUSH
10023: LD_STRING DH-1-explore
10025: PPUSH
10026: CALL_OW 88
// if Givi then
10030: LD_EXP 29
10034: IFFALSE 10050
// Say ( Givi , DG-1-explore ) else
10036: LD_EXP 29
10040: PPUSH
10041: LD_STRING DG-1-explore
10043: PPUSH
10044: CALL_OW 88
10048: GO 10087
// if heikeSecondSquad then
10050: LD_EXP 42
10054: IFFALSE 10087
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10056: LD_EXP 42
10060: PPUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: LD_STRING DArm-1-explore
10082: PPUSH
10083: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10087: LD_EXP 32
10091: PPUSH
10092: LD_STRING DA-1-explore
10094: PPUSH
10095: CALL_OW 88
// if Sophia then
10099: LD_EXP 34
10103: IFFALSE 10181
// begin Say ( Sophia , DS-2-explore ) ;
10105: LD_EXP 34
10109: PPUSH
10110: LD_STRING DS-2-explore
10112: PPUSH
10113: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10117: LD_EXP 32
10121: PPUSH
10122: LD_STRING DA-2-explore
10124: PPUSH
10125: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10129: LD_EXP 34
10133: PPUSH
10134: LD_EXP 32
10138: PPUSH
10139: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10143: LD_EXP 32
10147: PPUSH
10148: LD_EXP 34
10152: PPUSH
10153: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10157: LD_EXP 34
10161: PPUSH
10162: LD_STRING DS-3-explore
10164: PPUSH
10165: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10169: LD_EXP 32
10173: PPUSH
10174: LD_STRING DA-3-explore
10176: PPUSH
10177: CALL_OW 88
// end ; if Mike then
10181: LD_EXP 30
10185: IFFALSE 10241
// begin Say ( Mike , DM-1-explore ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DM-1-explore
10194: PPUSH
10195: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10199: LD_EXP 28
10203: PPUSH
10204: LD_STRING DH-2-explore
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DM-2-explore
10218: PPUSH
10219: CALL_OW 88
// if Kaia then
10223: LD_EXP 33
10227: IFFALSE 10241
// Say ( Kaia , DK-1-explore ) ;
10229: LD_EXP 33
10233: PPUSH
10234: LD_STRING DK-1-explore
10236: PPUSH
10237: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10241: LD_INT 22
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: PPUSH
10256: CALL_OW 139
// Video ( false ) ;
10260: LD_INT 0
10262: PPUSH
10263: CALL 72826 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10267: LD_STRING BuildBase
10269: PPUSH
10270: CALL_OW 337
// SaveForQuickRestart ;
10274: CALL_OW 22
// end ;
10278: LD_VAR 0 1
10282: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10283: LD_EXP 5
10287: NOT
10288: PUSH
10289: LD_EXP 6
10293: NOT
10294: AND
10295: PUSH
10296: LD_INT 5
10298: PPUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 70
10313: AND
10314: PUSH
10315: LD_EXP 6
10319: NOT
10320: AND
10321: IFFALSE 10406
10323: GO 10325
10325: DISABLE
// begin if Mike then
10326: LD_EXP 30
10330: IFFALSE 10346
// Say ( Mike , DM-1-scout ) else
10332: LD_EXP 30
10336: PPUSH
10337: LD_STRING DM-1-scout
10339: PPUSH
10340: CALL_OW 88
10344: GO 10377
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10346: LD_EXP 42
10350: PPUSH
10351: LD_INT 26
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 72
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_STRING DArm-1-explore
10372: PPUSH
10373: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10377: LD_INT 54
10379: PPUSH
10380: LD_INT 35
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10393: LD_INT 54
10395: PPUSH
10396: LD_INT 35
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 331
// end ;
10406: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10407: LD_INT 6
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 70
10424: PUSH
10425: LD_EXP 6
10429: NOT
10430: AND
10431: IFFALSE 10685
10433: GO 10435
10435: DISABLE
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
10440: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_EXP 42
10450: PPUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PPUSH
10461: CALL_OW 72
10465: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_EXP 42
10475: PPUSH
10476: LD_INT 26
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: ST_TO_ADDR
// DialogueOn ;
10491: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10495: LD_INT 36
10497: PPUSH
10498: LD_INT 22
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: LD_INT 8
10506: PPUSH
10507: CALL_OW 330
// dwait ( 0 0$1 ) ;
10511: LD_INT 35
10513: PPUSH
10514: CALL_OW 68
// speakerOk := false ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// if Mike then
10526: LD_EXP 30
10530: IFFALSE 10552
// speakerOk := Say ( Mike , DM-1-spot ) else
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_EXP 30
10541: PPUSH
10542: LD_STRING DM-1-spot
10544: PPUSH
10545: CALL_OW 88
10549: ST_TO_ADDR
10550: GO 10580
// if randomMen then
10552: LD_VAR 0 1
10556: IFFALSE 10580
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_STRING DArm-1-spot-a
10574: PPUSH
10575: CALL_OW 88
10579: ST_TO_ADDR
// if speakerOk then
10580: LD_VAR 0 3
10584: IFFALSE 10628
// begin if Givi then
10586: LD_EXP 29
10590: IFFALSE 10606
// Say ( Givi , DG-1-spot ) else
10592: LD_EXP 29
10596: PPUSH
10597: LD_STRING DG-1-spot
10599: PPUSH
10600: CALL_OW 88
10604: GO 10628
// if randomWomen then
10606: LD_VAR 0 2
10610: IFFALSE 10628
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10612: LD_VAR 0 2
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PPUSH
10621: LD_STRING DArf-1-spot-a
10623: PPUSH
10624: CALL_OW 88
// end ; if Mike then
10628: LD_EXP 30
10632: IFFALSE 10648
// Say ( Heike , DH-1-spot ) else
10634: LD_EXP 28
10638: PPUSH
10639: LD_STRING DH-1-spot
10641: PPUSH
10642: CALL_OW 88
10646: GO 10660
// Say ( Heike , DH-1-spot-a ) ;
10648: LD_EXP 28
10652: PPUSH
10653: LD_STRING DH-1-spot-a
10655: PPUSH
10656: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10660: LD_INT 36
10662: PPUSH
10663: LD_INT 22
10665: PPUSH
10666: LD_INT 2
10668: PPUSH
10669: CALL_OW 331
// DialogueOff ;
10673: CALL_OW 7
// americanBaseSpoted := true ;
10677: LD_ADDR_EXP 5
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: PPOPN 3
10687: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10688: LD_EXP 5
10692: NOT
10693: PUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: AND
10723: PUSH
10724: LD_EXP 6
10728: NOT
10729: AND
10730: IFFALSE 10816
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
// begin americanBaseSpoted := true ;
10738: LD_ADDR_EXP 5
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_EXP 42
10755: PPUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 72
10770: ST_TO_ADDR
// if not randomMen then
10771: LD_VAR 0 1
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10816
// DialogueOn ;
10780: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10784: LD_VAR 0 1
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: LD_STRING DArm-1-spot-a
10795: PPUSH
10796: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10800: LD_EXP 28
10804: PPUSH
10805: LD_STRING DH-1-spot-a
10807: PPUSH
10808: CALL_OW 88
// DialogueOff ;
10812: CALL_OW 7
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10819: LD_INT 11
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: PUSH
10831: LD_INT 7
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 50
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 31
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 70
10876: OR
10877: PUSH
10878: LD_INT 7
10880: PPUSH
10881: LD_INT 22
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 70
10895: PUSH
10896: LD_INT 1
10898: GREATER
10899: OR
10900: PUSH
10901: LD_EXP 44
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: OR
10910: IFFALSE 11489
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
// begin wait ( 0 0$3 ) ;
10919: LD_INT 105
10921: PPUSH
10922: CALL_OW 67
// americanStartRun := true ;
10926: LD_ADDR_EXP 14
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// if IsOk ( usCommander ) then
10934: LD_EXP 45
10938: PPUSH
10939: CALL_OW 302
10943: IFFALSE 10973
// begin usForces := usForces union usCommander ;
10945: LD_ADDR_EXP 44
10949: PUSH
10950: LD_EXP 44
10954: PUSH
10955: LD_EXP 45
10959: UNION
10960: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10961: LD_EXP 45
10965: PPUSH
10966: LD_STRING DUsm-1-assault
10968: PPUSH
10969: CALL_OW 88
// end ; for i in usForces do
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_EXP 44
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11030
// begin if IsInUnit ( i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: CALL_OW 310
10995: IFFALSE 11006
// ComExitBuilding ( i ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 122
// wait ( 3 ) ;
11006: LD_INT 3
11008: PPUSH
11009: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: LD_INT 34
11020: PPUSH
11021: LD_INT 67
11023: PPUSH
11024: CALL_OW 111
// end ;
11028: GO 10983
11030: POP
11031: POP
// Say ( Heike , DH-1-assault ) ;
11032: LD_EXP 28
11036: PPUSH
11037: LD_STRING DH-1-assault
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_INT 34
11058: PPUSH
11059: LD_INT 67
11061: PPUSH
11062: CALL_OW 111
// until not usForces ;
11066: LD_EXP 44
11070: NOT
11071: IFFALSE 11044
// music_nat := 2 ;
11073: LD_ADDR_OWVAR 71
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// music_class := music_victory ;
11081: LD_ADDR_OWVAR 72
11085: PUSH
11086: LD_INT 4
11088: ST_TO_ADDR
// if not americanHasEscaped then
11089: LD_EXP 8
11093: NOT
11094: IFFALSE 11115
// begin Say ( Heike , DH-2-assault ) ;
11096: LD_EXP 28
11100: PPUSH
11101: LD_STRING DH-2-assault
11103: PPUSH
11104: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11108: LD_STRING ACH_CLEAN
11110: PPUSH
11111: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11115: LD_INT 70
11117: PPUSH
11118: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11122: LD_INT 35
11124: PPUSH
11125: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11129: LD_INT 22
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: NOT
11172: IFFALSE 11122
// InGameOn ;
11174: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11178: LD_INT 11
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: NOT
11190: IFFALSE 11202
// SetSide ( usDepot , 2 ) ;
11192: LD_INT 11
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11202: LD_INT 35
11204: PPUSH
11205: LD_INT 22
11207: PPUSH
11208: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11212: LD_EXP 28
11216: PPUSH
11217: LD_INT 35
11219: PPUSH
11220: LD_INT 22
11222: PPUSH
11223: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11227: LD_EXP 28
11231: PPUSH
11232: LD_INT 38
11234: PPUSH
11235: LD_INT 25
11237: PPUSH
11238: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11242: LD_EXP 41
11246: PUSH
11247: LD_EXP 42
11251: UNION
11252: PPUSH
11253: LD_INT 39
11255: PPUSH
11256: LD_INT 26
11258: PPUSH
11259: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11263: LD_EXP 41
11267: PUSH
11268: LD_EXP 42
11272: UNION
11273: PPUSH
11274: LD_EXP 28
11278: PPUSH
11279: CALL_OW 179
// p := 0 ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11291: LD_INT 35
11293: PPUSH
11294: CALL_OW 67
// p := p + 1 ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11312: LD_EXP 28
11316: PPUSH
11317: CALL_OW 314
11321: NOT
11322: PUSH
11323: LD_VAR 0 2
11327: PUSH
11328: LD_INT 10
11330: GREATER
11331: OR
11332: IFFALSE 11291
// Say ( Heike , DH-1-capture ) ;
11334: LD_EXP 28
11338: PPUSH
11339: LD_STRING DH-1-capture
11341: PPUSH
11342: CALL_OW 88
// if Markov then
11346: LD_EXP 35
11350: IFFALSE 11364
// Say ( Markov , DMar-1-capture ) ;
11352: LD_EXP 35
11356: PPUSH
11357: LD_STRING DMar-1-capture
11359: PPUSH
11360: CALL_OW 88
// if Sophia then
11364: LD_EXP 34
11368: IFFALSE 11394
// begin Say ( Heike , DH-2-capture ) ;
11370: LD_EXP 28
11374: PPUSH
11375: LD_STRING DH-2-capture
11377: PPUSH
11378: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11382: LD_EXP 34
11386: PPUSH
11387: LD_STRING DS-1-capture
11389: PPUSH
11390: CALL_OW 88
// end ; InGameOff ;
11394: CALL_OW 9
// music_nat := music_auto ;
11398: LD_ADDR_OWVAR 71
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// music_class := music_auto ;
11406: LD_ADDR_OWVAR 72
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11414: LD_STRING ConstructBase
11416: PPUSH
11417: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11472
// SetSide ( i , 2 ) ;
11458: LD_VAR 0 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 235
11470: GO 11455
11472: POP
11473: POP
// wait ( 0 0$3 ) ;
11474: LD_INT 105
11476: PPUSH
11477: CALL_OW 67
// americanBaseCaptured := true ;
11481: LD_ADDR_EXP 6
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// end ;
11489: PPOPN 2
11491: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11492: LD_EXP 13
11496: PUSH
11497: LD_INT 3
11499: GREATEREQUAL
11500: IFFALSE 11512
11502: GO 11504
11504: DISABLE
// SetAchievement ( ACH_ENG ) ;
11505: LD_STRING ACH_ENG
11507: PPUSH
11508: CALL_OW 543
11512: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11513: LD_INT 22
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 15
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: PUSH
11542: LD_INT 4
11544: GREATEREQUAL
11545: IFFALSE 11557
11547: GO 11549
11549: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11550: LD_STRING ACH_APEGEN
11552: PPUSH
11553: CALL_OW 543
11557: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11558: LD_INT 22
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: LD_INT 57
11583: PUSH
11584: EMPTY
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: IFFALSE 11843
11602: GO 11604
11604: DISABLE
// begin workshopBuilded := true ;
11605: LD_ADDR_EXP 10
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if IsOk ( Markov ) then
11613: LD_EXP 35
11617: PPUSH
11618: CALL_OW 302
11622: IFFALSE 11681
// begin Say ( Heike , DH-1-shop-a ) ;
11624: LD_EXP 28
11628: PPUSH
11629: LD_STRING DH-1-shop-a
11631: PPUSH
11632: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11636: LD_INT 47
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 321
11646: PUSH
11647: LD_INT 2
11649: EQUAL
11650: PUSH
11651: LD_INT 45
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: CALL_OW 321
11661: PUSH
11662: LD_INT 2
11664: EQUAL
11665: AND
11666: NOT
11667: IFFALSE 11681
// Say ( Markov , DMar-1-shop-a ) ;
11669: LD_EXP 35
11673: PPUSH
11674: LD_STRING DMar-1-shop-a
11676: PPUSH
11677: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11688: LD_INT 47
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: PUSH
11703: LD_INT 45
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 321
11713: PUSH
11714: LD_INT 2
11716: EQUAL
11717: OR
11718: IFFALSE 11681
// DialogueOn ;
11720: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11724: LD_EXP 35
11728: PPUSH
11729: LD_STRING DMar-1-shop
11731: PPUSH
11732: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11736: LD_EXP 28
11740: PPUSH
11741: LD_STRING DH-1-shop
11743: PPUSH
11744: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11748: LD_EXP 35
11752: PPUSH
11753: LD_STRING DMar-2-shop
11755: PPUSH
11756: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11760: LD_EXP 35
11764: PPUSH
11765: LD_STRING DMar-3-shop
11767: PPUSH
11768: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11772: LD_EXP 28
11776: PPUSH
11777: LD_STRING DH-2-shop
11779: PPUSH
11780: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11784: LD_EXP 35
11788: PPUSH
11789: LD_STRING DMar-4-shop
11791: PPUSH
11792: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11796: LD_EXP 28
11800: PPUSH
11801: LD_STRING DH-3-shop
11803: PPUSH
11804: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11808: LD_EXP 35
11812: PPUSH
11813: LD_STRING DMar-5-shop
11815: PPUSH
11816: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11820: LD_EXP 28
11824: PPUSH
11825: LD_STRING DH-4-shop
11827: PPUSH
11828: CALL_OW 88
// DialogueOff ;
11832: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11836: LD_STRING ConstructVeh
11838: PPUSH
11839: CALL_OW 337
// end ;
11843: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11844: LD_INT 2
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL 36625 0 3
11857: PUSH
11858: LD_INT 0
11860: EQUAL
11861: IFFALSE 11873
11863: GO 11865
11865: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11866: LD_STRING Techs
11868: PPUSH
11869: CALL_OW 337
11873: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11874: LD_EXP 35
11878: PPUSH
11879: CALL_OW 302
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: LD_INT 34
11899: PUSH
11900: LD_INT 22
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 35
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: AND
11931: IFFALSE 12038
11933: GO 11935
11935: DISABLE
// begin DialogueOn ;
11936: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11940: LD_INT 22
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 35
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: PPUSH
11987: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11991: LD_INT 10
11993: PPUSH
11994: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11998: LD_EXP 28
12002: PPUSH
12003: LD_STRING DH-1-bal
12005: PPUSH
12006: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING DMar-1-bal
12017: PPUSH
12018: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12022: LD_EXP 28
12026: PPUSH
12027: LD_STRING DH-2-bal
12029: PPUSH
12030: CALL_OW 88
// DialogueOff ;
12034: CALL_OW 7
// end ;
12038: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12039: LD_EXP 32
12043: PPUSH
12044: CALL_OW 302
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 30
12061: PUSH
12062: LD_INT 6
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: AND
12078: IFFALSE 12139
12080: GO 12082
12082: DISABLE
// begin DialogueOn ;
12083: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12087: LD_EXP 32
12091: PPUSH
12092: LD_STRING DA-1-lab
12094: PPUSH
12095: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12099: LD_EXP 28
12103: PPUSH
12104: LD_STRING DH-1-lab
12106: PPUSH
12107: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12111: LD_EXP 32
12115: PPUSH
12116: LD_STRING DA-2-lab
12118: PPUSH
12119: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12123: LD_EXP 28
12127: PPUSH
12128: LD_STRING DH-2-lab
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// end ;
12139: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12140: LD_EXP 33
12144: PPUSH
12145: CALL_OW 302
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 15
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 69
12178: AND
12179: PUSH
12180: LD_INT 81
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 69
12194: NOT
12195: AND
12196: IFFALSE 12378
12198: GO 12200
12200: DISABLE
12201: LD_INT 0
12203: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 22
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 15
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: ST_TO_ADDR
// InGameOn ;
12238: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12255: LD_VAR 0 1
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12268: LD_EXP 33
12272: PPUSH
12273: LD_STRING DK-1-apesol
12275: PPUSH
12276: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 1
12287: ARRAY
12288: PPUSH
12289: LD_INT 35
12291: PPUSH
12292: LD_INT 28
12294: PPUSH
12295: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_INT 36
12310: PPUSH
12311: LD_INT 17
12313: PPUSH
12314: CALL_OW 171
// DialogueOn ;
12318: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12322: LD_EXP 32
12326: PPUSH
12327: LD_STRING DA-1-apesol
12329: PPUSH
12330: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12334: LD_EXP 33
12338: PPUSH
12339: LD_STRING DK-2-apesol
12341: PPUSH
12342: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12346: LD_EXP 32
12350: PPUSH
12351: LD_STRING DA-2-apesol
12353: PPUSH
12354: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12358: LD_EXP 33
12362: PPUSH
12363: LD_STRING DK-3-apesol
12365: PPUSH
12366: CALL_OW 88
// DialogueOff ;
12370: CALL_OW 7
// InGameOff ;
12374: CALL_OW 9
// end ;
12378: PPOPN 1
12380: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12381: LD_EXP 34
12385: PPUSH
12386: CALL_OW 302
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 16
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: AND
12420: PUSH
12421: LD_INT 81
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 69
12435: NOT
12436: AND
12437: IFFALSE 12710
12439: GO 12441
12441: DISABLE
12442: LD_INT 0
12444: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12445: LD_ADDR_VAR 0 1
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// InGameOn ;
12479: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12483: LD_INT 35
12485: PPUSH
12486: LD_INT 22
12488: PPUSH
12489: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12493: LD_INT 5
12495: PPUSH
12496: LD_INT 35
12498: PPUSH
12499: LD_INT 22
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12509: LD_EXP 34
12513: PPUSH
12514: LD_VAR 0 1
12518: PUSH
12519: LD_INT 1
12521: ARRAY
12522: PPUSH
12523: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12527: LD_VAR 0 1
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: CALL_OW 122
// wait ( 0 0$2 ) ;
12553: LD_INT 70
12555: PPUSH
12556: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12560: LD_EXP 34
12564: PPUSH
12565: LD_STRING DS-1-apeeng
12567: PPUSH
12568: CALL_OW 88
// if IsOk ( Kamil ) then
12572: LD_EXP 31
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12706
// begin Say ( Kamil , DKam-1-apeeng ) ;
12583: LD_EXP 31
12587: PPUSH
12588: LD_STRING DKam-1-apeeng
12590: PPUSH
12591: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12595: LD_EXP 34
12599: PPUSH
12600: LD_STRING DS-2-apeeng
12602: PPUSH
12603: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12607: LD_EXP 31
12611: PPUSH
12612: LD_STRING DKam-2-apeeng
12614: PPUSH
12615: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12619: LD_EXP 34
12623: PPUSH
12624: LD_STRING DS-3-apeeng
12626: PPUSH
12627: CALL_OW 88
// if not IsOK ( Kaia ) then
12631: LD_EXP 33
12635: PPUSH
12636: CALL_OW 302
12640: NOT
12641: IFFALSE 12649
// begin InGameOff ;
12643: CALL_OW 9
// exit ;
12647: GO 12710
// end ; Say ( Kaia , DK-1-apeeng ) ;
12649: LD_EXP 33
12653: PPUSH
12654: LD_STRING DK-1-apeeng
12656: PPUSH
12657: CALL_OW 88
// if not IsOk ( Givi ) then
12661: LD_EXP 29
12665: PPUSH
12666: CALL_OW 302
12670: NOT
12671: IFFALSE 12682
// begin Video ( false ) ;
12673: LD_INT 0
12675: PPUSH
12676: CALL 72826 0 1
// exit ;
12680: GO 12710
// end ; Say ( Givi , DG-1-apeeng ) ;
12682: LD_EXP 29
12686: PPUSH
12687: LD_STRING DG-1-apeeng
12689: PPUSH
12690: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12694: LD_EXP 33
12698: PPUSH
12699: LD_STRING DK-2-apeeng
12701: PPUSH
12702: CALL_OW 88
// end ; InGameOff ;
12706: CALL_OW 9
// end ;
12710: PPOPN 1
12712: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12713: LD_EXP 4
12717: PUSH
12718: LD_INT 22
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 30
12730: PUSH
12731: LD_INT 0
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 69
12746: AND
12747: IFFALSE 12912
12749: GO 12751
12751: DISABLE
// begin wait ( 0 0$10 ) ;
12752: LD_INT 350
12754: PPUSH
12755: CALL_OW 67
// DialogueOn ;
12759: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12763: LD_EXP 36
12767: PPUSH
12768: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12772: LD_EXP 36
12776: PPUSH
12777: LD_STRING DF-1-distribution
12779: PPUSH
12780: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12784: LD_EXP 28
12788: PPUSH
12789: LD_STRING DH-2-distribution
12791: PPUSH
12792: CALL_OW 88
// if IsOk ( Kaia ) then
12796: LD_EXP 33
12800: PPUSH
12801: CALL_OW 302
12805: IFFALSE 12866
// begin Say ( Kaia , DK-1-distribution ) ;
12807: LD_EXP 33
12811: PPUSH
12812: LD_STRING DK-1-distribution
12814: PPUSH
12815: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12819: LD_EXP 28
12823: PPUSH
12824: LD_STRING DH-1-distribution
12826: PPUSH
12827: CALL_OW 88
// if IsOk ( Givi ) then
12831: LD_EXP 29
12835: PPUSH
12836: CALL_OW 302
12840: IFFALSE 12866
// begin Say ( Givi , DG-1-distribution ) ;
12842: LD_EXP 29
12846: PPUSH
12847: LD_STRING DG-1-distribution
12849: PPUSH
12850: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12854: LD_EXP 28
12858: PPUSH
12859: LD_STRING DH-3-distribution
12861: PPUSH
12862: CALL_OW 88
// end ; end ; DialogueOff ;
12866: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12870: LD_STRING Crates1
12872: PPUSH
12873: CALL_OW 337
// farmerRequestedCrates := 300 ;
12877: LD_ADDR_EXP 16
12881: PUSH
12882: LD_INT 300
12884: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12885: LD_STRING FarmerCrates
12887: PPUSH
12888: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12892: LD_INT 10
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12902: LD_INT 108
12904: PPUSH
12905: LD_INT 61
12907: PPUSH
12908: CALL_OW 86
// end ;
12912: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12913: LD_EXP 6
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: LD_INT 57
12933: PUSH
12934: EMPTY
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 2
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 6
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 7
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: PPUSH
12974: CALL_OW 69
12978: AND
12979: PUSH
12980: LD_INT 22
12982: PUSH
12983: LD_INT 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: LD_INT 57
12995: PUSH
12996: EMPTY
12997: LIST
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 4
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: PPUSH
13018: CALL_OW 69
13022: AND
13023: IFFALSE 13187
13025: GO 13027
13027: DISABLE
13028: LD_INT 0
13030: PPUSH
// begin wait ( 0 0$10 ) ;
13031: LD_INT 350
13033: PPUSH
13034: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13038: LD_ADDR_VAR 0 1
13042: PUSH
13043: LD_EXP 42
13047: PPUSH
13048: LD_INT 26
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 72
13076: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13077: LD_EXP 28
13081: PPUSH
13082: LD_STRING DH-1-task
13084: PPUSH
13085: CALL_OW 88
// if IsOk ( Sophia ) then
13089: LD_EXP 34
13093: PPUSH
13094: CALL_OW 302
13098: IFFALSE 13138
// begin Say ( Sophia , DS-1-task ) ;
13100: LD_EXP 34
13104: PPUSH
13105: LD_STRING DS-1-task
13107: PPUSH
13108: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13112: LD_EXP 34
13116: PPUSH
13117: LD_STRING DS-2-task
13119: PPUSH
13120: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13124: LD_EXP 28
13128: PPUSH
13129: LD_STRING DH-2-task
13131: PPUSH
13132: CALL_OW 88
// end else
13136: GO 13172
// if eng then
13138: LD_VAR 0 1
13142: IFFALSE 13172
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: LD_STRING DArm-1-task
13155: PPUSH
13156: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13160: LD_EXP 28
13164: PPUSH
13165: LD_STRING DH-2-task
13167: PPUSH
13168: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13172: LD_STRING BaseConstructed
13174: PPUSH
13175: CALL_OW 337
// allowConvoys := true ;
13179: LD_ADDR_EXP 12
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// end ;
13187: PPOPN 1
13189: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13190: LD_INT 22
13192: PUSH
13193: LD_INT 4
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 34
13202: PUSH
13203: LD_INT 12
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: IFFALSE 13386
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
13227: PPUSH
// begin wait ( 0 0$2 ) ;
13228: LD_INT 70
13230: PPUSH
13231: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_INT 22
13242: PUSH
13243: LD_INT 4
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 12
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PPUSH
13283: CALL_OW 250
13287: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_VAR 0 1
13297: PUSH
13298: LD_INT 1
13300: ARRAY
13301: PPUSH
13302: CALL_OW 251
13306: ST_TO_ADDR
// DialogueOn ;
13307: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13311: LD_VAR 0 2
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13325: LD_VAR 0 2
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 2
13337: PPUSH
13338: LD_INT 6
13340: NEG
13341: PPUSH
13342: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13346: LD_INT 10
13348: PPUSH
13349: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13353: LD_EXP 28
13357: PPUSH
13358: LD_STRING DH-1-seecargo
13360: PPUSH
13361: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13365: LD_VAR 0 2
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 2
13377: PPUSH
13378: CALL_OW 331
// DialogueOff ;
13382: CALL_OW 7
// end ;
13386: PPOPN 3
13388: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13389: LD_EXP 4
13393: PUSH
13394: LD_EXP 15
13398: PUSH
13399: LD_INT 300
13401: GREATEREQUAL
13402: AND
13403: IFFALSE 13475
13405: GO 13407
13407: DISABLE
// begin DialogueOn ;
13408: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13412: LD_EXP 36
13416: PPUSH
13417: LD_STRING DF-1-delivery-2
13419: PPUSH
13420: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13424: LD_EXP 28
13428: PPUSH
13429: LD_STRING DH-1-delivery-2
13431: PPUSH
13432: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13436: LD_EXP 36
13440: PPUSH
13441: LD_STRING DF-2-delivery-2
13443: PPUSH
13444: CALL_OW 94
// DialogueOff ;
13448: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13452: LD_STRING Crates2
13454: PPUSH
13455: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13459: LD_ADDR_EXP 17
13463: PUSH
13464: LD_INT 63000
13466: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13467: LD_ADDR_EXP 16
13471: PUSH
13472: LD_INT 600
13474: ST_TO_ADDR
// end ;
13475: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13476: LD_EXP 4
13480: PUSH
13481: LD_EXP 15
13485: PUSH
13486: LD_INT 600
13488: GREATEREQUAL
13489: AND
13490: PUSH
13491: LD_OWVAR 67
13495: PUSH
13496: LD_INT 1
13498: GREATER
13499: AND
13500: IFFALSE 13666
13502: GO 13504
13504: DISABLE
// begin DialogueOn ;
13505: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13509: LD_EXP 36
13513: PPUSH
13514: LD_STRING DF-1-delivery-3
13516: PPUSH
13517: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13521: LD_EXP 28
13525: PPUSH
13526: LD_STRING DH-1-delivery-3
13528: PPUSH
13529: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13533: LD_EXP 36
13537: PPUSH
13538: LD_STRING DF-2-delivery-3
13540: PPUSH
13541: CALL_OW 94
// if IsOk ( Kaia ) then
13545: LD_EXP 33
13549: PPUSH
13550: CALL_OW 302
13554: IFFALSE 13604
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13556: LD_EXP 33
13560: PPUSH
13561: LD_STRING DK-1-delivery-3
13563: PPUSH
13564: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13568: LD_EXP 28
13572: PPUSH
13573: LD_STRING DH-2-delivery-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13580: LD_EXP 29
13584: PPUSH
13585: LD_STRING DG-1-delivery-3
13587: PPUSH
13588: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13592: LD_EXP 30
13596: PPUSH
13597: LD_STRING DM-1-delivery-3
13599: PPUSH
13600: CALL_OW 88
// end ; DialogueOff ;
13604: CALL_OW 7
// if Difficulty = 2 then
13608: LD_OWVAR 67
13612: PUSH
13613: LD_INT 2
13615: EQUAL
13616: IFFALSE 13643
// begin ChangeMissionObjectives ( Crates3 ) ;
13618: LD_STRING Crates3
13620: PPUSH
13621: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13625: LD_ADDR_EXP 17
13629: PUSH
13630: LD_INT 63000
13632: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13633: LD_ADDR_EXP 16
13637: PUSH
13638: LD_INT 900
13640: ST_TO_ADDR
// end else
13641: GO 13666
// begin ChangeMissionObjectives ( Crates4 ) ;
13643: LD_STRING Crates4
13645: PPUSH
13646: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13650: LD_ADDR_EXP 17
13654: PUSH
13655: LD_INT 63000
13657: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13658: LD_ADDR_EXP 16
13662: PUSH
13663: LD_INT 1200
13665: ST_TO_ADDR
// end ; end ;
13666: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13667: LD_EXP 4
13671: PUSH
13672: LD_EXP 15
13676: PUSH
13677: LD_INT 600
13679: PUSH
13680: LD_INT 900
13682: PUSH
13683: LD_INT 1200
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: LD_OWVAR 67
13695: ARRAY
13696: GREATEREQUAL
13697: AND
13698: PUSH
13699: LD_EXP 16
13703: PUSH
13704: LD_EXP 17
13708: LESSEQUAL
13709: AND
13710: IFFALSE 13796
13712: GO 13714
13714: DISABLE
// begin retreatAllowed := true ;
13715: LD_ADDR_EXP 11
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// display_strings := [ ] ;
13723: LD_ADDR_OWVAR 47
13727: PUSH
13728: EMPTY
13729: ST_TO_ADDR
// DialogueOn ;
13730: CALL_OW 6
// InGameOn ;
13734: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13738: LD_EXP 37
13742: PPUSH
13743: LD_STRING DO-radio-end
13745: PPUSH
13746: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13750: LD_EXP 28
13754: PPUSH
13755: LD_STRING DH-1-radio-end
13757: PPUSH
13758: CALL_OW 88
// InGameOff ;
13762: CALL_OW 9
// DialogueOff ;
13766: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13770: LD_STRING Retreat
13772: PPUSH
13773: CALL_OW 337
// wait ( 0 0$2 ) ;
13777: LD_INT 70
13779: PPUSH
13780: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13784: LD_EXP 28
13788: PPUSH
13789: LD_STRING DH-2-radio-end
13791: PPUSH
13792: CALL_OW 88
// end ;
13796: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13797: LD_EXP 11
13801: IFFALSE 13932
13803: GO 13805
13805: DISABLE
13806: LD_INT 0
13808: PPUSH
13809: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13810: LD_INT 10
13812: PPUSH
13813: LD_INT 0
13815: PPUSH
13816: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_EXP 39
13829: PPUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 2
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 72
13844: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13845: LD_VAR 0 1
13849: PUSH
13850: LD_INT 102
13852: PPUSH
13853: LD_INT 69
13855: PPUSH
13856: CALL_OW 428
13860: PUSH
13861: LD_INT 0
13863: EQUAL
13864: AND
13865: IFFALSE 13932
// begin for i in tmp do
13867: LD_ADDR_VAR 0 2
13871: PUSH
13872: LD_VAR 0 1
13876: PUSH
13877: FOR_IN
13878: IFFALSE 13902
// if IsInUnit ( i ) then
13880: LD_VAR 0 2
13884: PPUSH
13885: CALL_OW 310
13889: IFFALSE 13900
// ComExitBuilding ( i ) ;
13891: LD_VAR 0 2
13895: PPUSH
13896: CALL_OW 122
13900: GO 13877
13902: POP
13903: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_INT 31
13911: PPUSH
13912: LD_INT 102
13914: PPUSH
13915: LD_INT 69
13917: PPUSH
13918: LD_INT 2
13920: PPUSH
13921: CALL_OW 205
// wait ( 0 0$3 ) ;
13925: LD_INT 105
13927: PPUSH
13928: CALL_OW 67
// end ; end ;
13932: PPOPN 2
13934: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13935: LD_EXP 11
13939: NOT
13940: PUSH
13941: LD_INT 5
13943: PPUSH
13944: CALL_OW 301
13948: AND
13949: IFFALSE 13981
13951: GO 13953
13953: DISABLE
// begin DialogueOn ;
13954: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13958: LD_EXP 36
13962: PPUSH
13963: LD_STRING DF-1-failure
13965: PPUSH
13966: CALL_OW 94
// DialogueOff ;
13970: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13974: LD_STRING FarmerDepot
13976: PPUSH
13977: CALL_OW 104
// end ;
13981: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13982: LD_EXP 11
13986: PUSH
13987: LD_EXP 28
13991: PPUSH
13992: LD_EXP 36
13996: PPUSH
13997: CALL_OW 296
14001: PUSH
14002: LD_INT 12
14004: LESS
14005: AND
14006: PUSH
14007: LD_INT 81
14009: PUSH
14010: LD_INT 2
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: NOT
14036: AND
14037: IFFALSE 14689
14039: GO 14041
14041: DISABLE
14042: LD_INT 0
14044: PPUSH
14045: PPUSH
14046: PPUSH
// begin allowConvoys := false ;
14047: LD_ADDR_EXP 12
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// InGameOn ;
14055: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14059: LD_EXP 28
14063: PPUSH
14064: LD_EXP 36
14068: PPUSH
14069: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14073: LD_EXP 36
14077: PPUSH
14078: LD_EXP 28
14082: PPUSH
14083: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14087: LD_EXP 36
14091: PPUSH
14092: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14096: LD_EXP 28
14100: PPUSH
14101: LD_STRING DH-1-end
14103: PPUSH
14104: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14108: LD_EXP 36
14112: PPUSH
14113: LD_STRING DF-1-end
14115: PPUSH
14116: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DF-2-end
14127: PPUSH
14128: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14132: LD_EXP 28
14136: PPUSH
14137: LD_STRING DH-2-end
14139: PPUSH
14140: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14144: LD_EXP 36
14148: PPUSH
14149: LD_STRING DF-3-end
14151: PPUSH
14152: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14156: LD_EXP 28
14160: PPUSH
14161: LD_STRING DH-3-end
14163: PPUSH
14164: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14168: LD_EXP 29
14172: PPUSH
14173: LD_STRING DG-1-end
14175: PPUSH
14176: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14180: LD_EXP 28
14184: PPUSH
14185: LD_STRING DH-4-end
14187: PPUSH
14188: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14192: LD_EXP 36
14196: PPUSH
14197: LD_STRING DF-4-end
14199: PPUSH
14200: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14204: LD_EXP 28
14208: PPUSH
14209: LD_STRING DH-5-end
14211: PPUSH
14212: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14216: LD_EXP 36
14220: PPUSH
14221: LD_STRING DF-5-end
14223: PPUSH
14224: CALL_OW 88
// InGameOff ;
14228: CALL_OW 9
// allowCargoEvacuation := true ;
14232: LD_ADDR_EXP 7
14236: PUSH
14237: LD_INT 1
14239: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: LD_INT 4
14247: PUSH
14248: LD_INT 3
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: LD_OWVAR 67
14263: ARRAY
14264: ST_TO_ADDR
// if farmerSquad < max then
14265: LD_EXP 39
14269: PUSH
14270: LD_VAR 0 2
14274: LESS
14275: IFFALSE 14287
// max := farmerSquad ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_EXP 39
14286: ST_TO_ADDR
// for i := 1 to max do
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: DOUBLE
14293: LD_INT 1
14295: DEC
14296: ST_TO_ADDR
14297: LD_VAR 0 2
14301: PUSH
14302: FOR_TO
14303: IFFALSE 14341
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14305: LD_EXP 39
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14321: LD_ADDR_EXP 39
14325: PUSH
14326: LD_EXP 39
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 3
14338: ST_TO_ADDR
// end ;
14339: GO 14302
14341: POP
14342: POP
// for i in Farmer ^ farmerSquad do
14343: LD_ADDR_VAR 0 1
14347: PUSH
14348: LD_EXP 36
14352: PUSH
14353: LD_EXP 39
14357: ADD
14358: PUSH
14359: FOR_IN
14360: IFFALSE 14399
// begin if IsInUnit ( i ) then
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 310
14371: IFFALSE 14382
// ComExitBuilding ( i ) ;
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14382: LD_VAR 0 1
14386: PPUSH
14387: LD_INT 102
14389: PPUSH
14390: LD_INT 7
14392: PPUSH
14393: CALL_OW 171
// end ;
14397: GO 14359
14399: POP
14400: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14401: LD_ADDR_VAR 0 1
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 5
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 69
14434: PUSH
14435: LD_INT 5
14437: DIFF
14438: PUSH
14439: FOR_IN
14440: IFFALSE 14456
// SetSide ( i , 2 ) ;
14442: LD_VAR 0 1
14446: PPUSH
14447: LD_INT 2
14449: PPUSH
14450: CALL_OW 235
14454: GO 14439
14456: POP
14457: POP
// wait ( 0 0$2 ) ;
14458: LD_INT 70
14460: PPUSH
14461: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14465: LD_EXP 28
14469: PPUSH
14470: LD_STRING DH-6-end
14472: PPUSH
14473: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14477: LD_INT 35
14479: PPUSH
14480: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_EXP 36
14493: PUSH
14494: LD_EXP 39
14498: ADD
14499: PPUSH
14500: LD_INT 95
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 72
14514: ST_TO_ADDR
// if tmp then
14515: LD_VAR 0 3
14519: IFFALSE 14563
// for i in tmp do
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_VAR 0 3
14530: PUSH
14531: FOR_IN
14532: IFFALSE 14561
// begin farmerSquad := farmerSquad diff i ;
14534: LD_ADDR_EXP 39
14538: PUSH
14539: LD_EXP 39
14543: PUSH
14544: LD_VAR 0 1
14548: DIFF
14549: ST_TO_ADDR
// RemoveUnit ( i ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL_OW 64
// end ;
14559: GO 14531
14561: POP
14562: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14563: LD_EXP 39
14567: PUSH
14568: EMPTY
14569: EQUAL
14570: PUSH
14571: LD_EXP 36
14575: PPUSH
14576: CALL_OW 305
14580: NOT
14581: AND
14582: IFFALSE 14477
// if farmerHumanLoseCounter = 0 then
14584: LD_EXP 20
14588: PUSH
14589: LD_INT 0
14591: EQUAL
14592: IFFALSE 14601
// SetAchievement ( ACH_BABY ) ;
14594: LD_STRING ACH_BABY
14596: PPUSH
14597: CALL_OW 543
// wait ( 1 1$00 ) ;
14601: LD_INT 2100
14603: PPUSH
14604: CALL_OW 67
// SendAttack ;
14608: CALL 6123 0 0
// Say ( Heike , DH-7-end ) ;
14612: LD_EXP 28
14616: PPUSH
14617: LD_STRING DH-7-end
14619: PPUSH
14620: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: DOUBLE
14630: LD_INT 1
14632: DEC
14633: ST_TO_ADDR
14634: LD_INT 2
14636: PUSH
14637: LD_INT 3
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: LD_OWVAR 67
14652: ARRAY
14653: PUSH
14654: FOR_TO
14655: IFFALSE 14687
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14657: LD_INT 4200
14659: PUSH
14660: LD_INT 3500
14662: PUSH
14663: LD_INT 3150
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: PUSH
14671: LD_OWVAR 67
14675: ARRAY
14676: PPUSH
14677: CALL_OW 67
// SendAttack ;
14681: CALL 6123 0 0
// end ;
14685: GO 14654
14687: POP
14688: POP
// end ;
14689: PPOPN 3
14691: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14692: LD_EXP 7
14696: PUSH
14697: LD_EXP 21
14701: PUSH
14702: LD_INT 0
14704: GREATER
14705: AND
14706: IFFALSE 14716
14708: GO 14710
14710: DISABLE
// begin enable ;
14711: ENABLE
// CargoEvacuation ;
14712: CALL 3644 0 0
// end ;
14716: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14717: LD_EXP 17
14721: PUSH
14722: LD_INT 18900
14724: LESSEQUAL
14725: IFFALSE 14774
14727: GO 14729
14729: DISABLE
// begin DialogueOn ;
14730: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14734: LD_EXP 36
14738: PPUSH
14739: LD_STRING DF-1-distribution-a
14741: PPUSH
14742: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14746: LD_EXP 28
14750: PPUSH
14751: LD_STRING DH-1-distribution-a
14753: PPUSH
14754: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14758: LD_EXP 36
14762: PPUSH
14763: LD_STRING DF-2-distribution-a
14765: PPUSH
14766: CALL_OW 94
// DialogueOff ;
14770: CALL_OW 7
// end ;
14774: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14775: LD_EXP 17
14779: PUSH
14780: LD_INT 0
14782: LESSEQUAL
14783: IFFALSE 14815
14785: GO 14787
14787: DISABLE
// begin DialogueOn ;
14788: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14792: LD_EXP 36
14796: PPUSH
14797: LD_STRING DF-3-distribution-a
14799: PPUSH
14800: CALL_OW 94
// YouLost ( Distribution ) ;
14804: LD_STRING Distribution
14806: PPUSH
14807: CALL_OW 104
// DialogueOff ;
14811: CALL_OW 7
// end ;
14815: END
// every 0 0$1 trigger vehCounter >= 2 do
14816: LD_EXP 22
14820: PUSH
14821: LD_INT 2
14823: GREATEREQUAL
14824: IFFALSE 14836
14826: GO 14828
14828: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14829: LD_STRING VehConstructed
14831: PPUSH
14832: CALL_OW 337
14836: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14837: LD_INT 22
14839: PUSH
14840: LD_INT 2
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 34
14849: PUSH
14850: LD_INT 12
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 69
14865: IFFALSE 14925
14867: GO 14869
14869: DISABLE
// begin DialogueOn ;
14870: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14874: LD_EXP 28
14878: PPUSH
14879: LD_STRING DH-1-truck
14881: PPUSH
14882: CALL_OW 88
// if IsOk ( Markov ) then
14886: LD_EXP 35
14890: PPUSH
14891: CALL_OW 302
14895: IFFALSE 14921
// begin Say ( Markov , DMar-1-truck ) ;
14897: LD_EXP 35
14901: PPUSH
14902: LD_STRING DMar-1-truck
14904: PPUSH
14905: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14909: LD_EXP 28
14913: PPUSH
14914: LD_STRING DH-2-truck
14916: PPUSH
14917: CALL_OW 88
// end ; DialogueOff ;
14921: CALL_OW 7
// end ;
14925: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14926: LD_INT 0
14928: PPUSH
14929: PPUSH
14930: PPUSH
// if IsOk ( Givi ) then
14931: LD_EXP 29
14935: PPUSH
14936: CALL_OW 302
14940: IFFALSE 14956
// begin Say ( Givi , DG-1-nocargo ) ;
14942: LD_EXP 29
14946: PPUSH
14947: LD_STRING DG-1-nocargo
14949: PPUSH
14950: CALL_OW 88
// exit ;
14954: GO 15052
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_EXP 42
14965: PPUSH
14966: LD_INT 26
14968: PUSH
14969: LD_INT 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PPUSH
14976: CALL_OW 72
14980: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14981: LD_ADDR_VAR 0 3
14985: PUSH
14986: LD_EXP 42
14990: PPUSH
14991: LD_INT 26
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 72
15005: ST_TO_ADDR
// if randomMen then
15006: LD_VAR 0 2
15010: IFFALSE 15030
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15012: LD_VAR 0 2
15016: PUSH
15017: LD_INT 1
15019: ARRAY
15020: PPUSH
15021: LD_STRING DArm-1-nocargo
15023: PPUSH
15024: CALL_OW 88
15028: GO 15052
// if randomWomen then
15030: LD_VAR 0 3
15034: IFFALSE 15052
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15036: LD_VAR 0 3
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: LD_STRING DArf-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// end ;
15052: LD_VAR 0 1
15056: RET
// export function IncomingAttack ; begin
15057: LD_INT 0
15059: PPUSH
// if attackWave = 1 then
15060: LD_EXP 19
15064: PUSH
15065: LD_INT 1
15067: EQUAL
15068: IFFALSE 15139
// begin DialogueOn ;
15070: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15074: LD_EXP 37
15078: PPUSH
15079: LD_STRING DO-1-radio-1
15081: PPUSH
15082: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15086: LD_EXP 28
15090: PPUSH
15091: LD_STRING DH-1-radio-1-
15093: PPUSH
15094: CALL_OW 88
// if IsOk ( Markov ) then
15098: LD_EXP 35
15102: PPUSH
15103: CALL_OW 302
15107: IFFALSE 15133
// begin Say ( Markov , DMar-1-radio-1 ) ;
15109: LD_EXP 35
15113: PPUSH
15114: LD_STRING DMar-1-radio-1
15116: PPUSH
15117: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15121: LD_EXP 28
15125: PPUSH
15126: LD_STRING DH-2-radio-1
15128: PPUSH
15129: CALL_OW 88
// end ; DialogueOff ;
15133: CALL_OW 7
// end else
15137: GO 15163
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15139: LD_EXP 37
15143: PPUSH
15144: LD_STRING DO-1-radio-u
15146: PPUSH
15147: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15151: LD_EXP 28
15155: PPUSH
15156: LD_STRING DH-1-radio-u
15158: PPUSH
15159: CALL_OW 88
// end ; end ;
15163: LD_VAR 0 1
15167: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15168: LD_EXP 44
15172: PPUSH
15173: LD_INT 95
15175: PUSH
15176: LD_INT 8
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PPUSH
15183: CALL_OW 72
15187: IFFALSE 15290
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
// begin enable ;
15195: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15196: LD_ADDR_VAR 0 1
15200: PUSH
15201: LD_EXP 44
15205: PPUSH
15206: LD_INT 95
15208: PUSH
15209: LD_INT 8
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 72
15220: PUSH
15221: FOR_IN
15222: IFFALSE 15251
// begin usForces := usForces diff i ;
15224: LD_ADDR_EXP 44
15228: PUSH
15229: LD_EXP 44
15233: PUSH
15234: LD_VAR 0 1
15238: DIFF
15239: ST_TO_ADDR
// RemoveUnit ( i ) ;
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 64
// end ;
15249: GO 15221
15251: POP
15252: POP
// if not americanHasEscaped and attackWave = 1 then
15253: LD_EXP 8
15257: NOT
15258: PUSH
15259: LD_EXP 19
15263: PUSH
15264: LD_INT 1
15266: EQUAL
15267: AND
15268: IFFALSE 15290
// begin americanHasEscaped := true ;
15270: LD_ADDR_EXP 8
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15278: LD_EXP 28
15282: PPUSH
15283: LD_STRING DH-2-assault-a
15285: PPUSH
15286: CALL_OW 88
// end ; end ;
15290: PPOPN 1
15292: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15293: LD_INT 4
15295: PPUSH
15296: LD_INT 22
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 70
15310: PUSH
15311: LD_EXP 11
15315: NOT
15316: AND
15317: IFFALSE 15334
15319: GO 15321
15321: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15322: LD_EXP 36
15326: PPUSH
15327: LD_STRING DF-1-attack
15329: PPUSH
15330: CALL_OW 94
15334: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15335: LD_INT 5
15337: PPUSH
15338: CALL_OW 255
15342: PUSH
15343: LD_INT 2
15345: EQUAL
15346: IFFALSE 15358
15348: GO 15350
15350: DISABLE
// YouLost ( Attack ) ;
15351: LD_STRING Attack
15353: PPUSH
15354: CALL_OW 104
15358: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15359: LD_INT 22
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 21
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: NOT
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 4
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: NOT
15404: AND
15405: PUSH
15406: LD_EXP 11
15410: NOT
15411: AND
15412: PUSH
15413: LD_EXP 15
15417: PUSH
15418: LD_INT 90
15420: GREATER
15421: AND
15422: PUSH
15423: LD_INT 7
15425: PPUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 21
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 70
15454: AND
15455: PUSH
15456: LD_INT 22
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 50
15468: PUSH
15469: EMPTY
15470: LIST
15471: PUSH
15472: LD_INT 30
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: AND
15492: IFFALSE 16285
15494: GO 15496
15496: DISABLE
15497: LD_INT 0
15499: PPUSH
15500: PPUSH
15501: PPUSH
15502: PPUSH
15503: PPUSH
// begin depot := usDepot ;
15504: LD_ADDR_VAR 0 5
15508: PUSH
15509: LD_INT 11
15511: ST_TO_ADDR
// if not depot then
15512: LD_VAR 0 5
15516: NOT
15517: IFFALSE 15557
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15519: LD_ADDR_VAR 0 5
15523: PUSH
15524: LD_INT 22
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 0
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: LD_EXP 42
15566: PPUSH
15567: LD_INT 26
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 72
15581: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_EXP 42
15591: PPUSH
15592: LD_INT 26
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 72
15606: ST_TO_ADDR
// if IsOk ( Kaia ) then
15607: LD_EXP 33
15611: PPUSH
15612: CALL_OW 302
15616: IFFALSE 15637
// speaker := [ Kaia , DK ] else
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: LD_EXP 33
15627: PUSH
15628: LD_STRING DK
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 15717
// if randomMen then
15637: LD_VAR 0 1
15641: IFFALSE 15676
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15643: LD_ADDR_VAR 0 3
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 1
15655: PPUSH
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 12
15665: ARRAY
15666: PUSH
15667: LD_STRING DArm
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: ST_TO_ADDR
15674: GO 15717
// if randomWomen then
15676: LD_VAR 0 2
15680: IFFALSE 15715
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15682: LD_ADDR_VAR 0 3
15686: PUSH
15687: LD_VAR 0 2
15691: PUSH
15692: LD_INT 1
15694: PPUSH
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 12
15704: ARRAY
15705: PUSH
15706: LD_STRING DArf
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: ST_TO_ADDR
15713: GO 15717
// exit ;
15715: GO 16285
// if IsInUnit ( speaker [ 1 ] ) then
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 1
15724: ARRAY
15725: PPUSH
15726: CALL_OW 310
15730: IFFALSE 15753
// place := IsInUnit ( speaker [ 1 ] ) else
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: CALL_OW 310
15750: ST_TO_ADDR
15751: GO 15767
// place := speaker [ 1 ] ;
15753: LD_ADDR_VAR 0 4
15757: PUSH
15758: LD_VAR 0 3
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15767: LD_VAR 0 4
15771: PPUSH
15772: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: CALL_OW 250
15785: PPUSH
15786: LD_VAR 0 4
15790: PPUSH
15791: CALL_OW 251
15795: PPUSH
15796: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15800: LD_INT 70
15802: PPUSH
15803: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15807: LD_EXP 38
15811: PPUSH
15812: CALL_OW 305
15816: NOT
15817: IFFALSE 15821
// exit ;
15819: GO 16285
// allowConvoys := false ;
15821: LD_ADDR_EXP 12
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
// InGameOn ;
15829: CALL_OW 8
// wait ( 0 0$1 ) ;
15833: LD_INT 35
15835: PPUSH
15836: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15840: LD_EXP 38
15844: PPUSH
15845: LD_STRING DI-1-land
15847: PPUSH
15848: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PPUSH
15861: CALL_OW 310
15865: IFFALSE 15880
// ComExit ( speaker [ 1 ] ) ;
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL 73242 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PPUSH
15889: LD_EXP 38
15893: PPUSH
15894: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15898: LD_VAR 0 3
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: PPUSH
15907: LD_EXP 38
15911: PPUSH
15912: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15916: LD_EXP 38
15920: PPUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: CALL_OW 119
// wait ( 0 0$1 ) ;
15934: LD_INT 35
15936: PPUSH
15937: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 1
15948: ARRAY
15949: PPUSH
15950: LD_VAR 0 3
15954: PUSH
15955: LD_INT 2
15957: ARRAY
15958: PUSH
15959: LD_STRING -1-land
15961: STR
15962: PPUSH
15963: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15967: LD_EXP 38
15971: PPUSH
15972: LD_STRING DI-2-land
15974: PPUSH
15975: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 1
15986: ARRAY
15987: PPUSH
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 2
15995: ARRAY
15996: PUSH
15997: LD_STRING -2-land
15999: STR
16000: PPUSH
16001: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 1
16012: ARRAY
16013: PPUSH
16014: LD_VAR 0 3
16018: PUSH
16019: LD_INT 2
16021: ARRAY
16022: PUSH
16023: LD_STRING -3-land
16025: STR
16026: PPUSH
16027: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16031: LD_EXP 28
16035: PPUSH
16036: LD_STRING DH-1-land
16038: PPUSH
16039: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16043: LD_VAR 0 5
16047: PPUSH
16048: CALL_OW 313
16052: PUSH
16053: LD_INT 6
16055: EQUAL
16056: IFFALSE 16076
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16058: LD_VAR 0 5
16062: PPUSH
16063: CALL_OW 313
16067: PUSH
16068: LD_INT 1
16070: ARRAY
16071: PPUSH
16072: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16076: LD_EXP 38
16080: PPUSH
16081: LD_INT 2
16083: PPUSH
16084: CALL_OW 235
// CenterOnUnits ( depot ) ;
16088: LD_VAR 0 5
16092: PPUSH
16093: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16097: LD_EXP 38
16101: PPUSH
16102: LD_VAR 0 5
16106: PPUSH
16107: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: PPUSH
16120: LD_VAR 0 5
16124: PPUSH
16125: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16129: LD_INT 35
16131: PPUSH
16132: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16136: LD_EXP 38
16140: PPUSH
16141: CALL_OW 310
16145: PUSH
16146: LD_EXP 38
16150: PPUSH
16151: CALL_OW 302
16155: NOT
16156: OR
16157: PUSH
16158: LD_VAR 0 5
16162: PPUSH
16163: CALL_OW 302
16167: NOT
16168: OR
16169: IFFALSE 16129
// InGameOff ;
16171: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16175: LD_EXP 38
16179: PPUSH
16180: CALL_OW 302
16184: NOT
16185: IFFALSE 16189
// exit ;
16187: GO 16285
// if not IsOk ( depot ) then
16189: LD_VAR 0 5
16193: PPUSH
16194: CALL_OW 302
16198: NOT
16199: IFFALSE 16262
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16201: LD_EXP 38
16205: PPUSH
16206: LD_INT 30
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16216: LD_INT 35
16218: PPUSH
16219: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16223: LD_EXP 38
16227: PPUSH
16228: LD_INT 30
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 307
16238: PUSH
16239: LD_EXP 38
16243: PPUSH
16244: CALL_OW 301
16248: OR
16249: IFFALSE 16216
// RemoveUnit ( Ibrahim ) ;
16251: LD_EXP 38
16255: PPUSH
16256: CALL_OW 64
// exit ;
16260: GO 16285
// end ; ibrahimInDepot := true ;
16262: LD_ADDR_EXP 25
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// allowConvoys := true ;
16270: LD_ADDR_EXP 12
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16278: LD_STRING IbrahimInDepot
16280: PPUSH
16281: CALL_OW 97
// end ;
16285: PPOPN 5
16287: END
// export function IbrahimQuery ; begin
16288: LD_INT 0
16290: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16291: LD_STRING IbrahimQuery
16293: PPUSH
16294: CALL_OW 97
16298: PUSH
16299: LD_INT 1
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16583
16307: POP
// begin allowConvoys := false ;
16308: LD_ADDR_EXP 12
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// ibrahimInDepot := false ;
16316: LD_ADDR_EXP 25
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16328: LD_EXP 28
16332: PPUSH
16333: CALL_OW 87
// wait ( 0 0$1 ) ;
16337: LD_INT 35
16339: PPUSH
16340: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16344: LD_EXP 28
16348: PPUSH
16349: LD_STRING DH-1-interrogation
16351: PPUSH
16352: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16356: LD_EXP 38
16360: PPUSH
16361: LD_STRING DI-1-interrogation
16363: PPUSH
16364: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16368: LD_EXP 28
16372: PPUSH
16373: LD_STRING DH-2-interrogation
16375: PPUSH
16376: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16380: LD_EXP 38
16384: PPUSH
16385: LD_STRING DI-2-interrogation
16387: PPUSH
16388: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16392: LD_EXP 28
16396: PPUSH
16397: LD_STRING DH-3-interrogation
16399: PPUSH
16400: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16404: LD_EXP 38
16408: PPUSH
16409: LD_STRING DI-3-interrogation
16411: PPUSH
16412: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16416: LD_EXP 28
16420: PPUSH
16421: LD_STRING DH-4-interrogation
16423: PPUSH
16424: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16428: LD_EXP 38
16432: PPUSH
16433: LD_STRING DI-4-interrogation
16435: PPUSH
16436: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16440: LD_EXP 28
16444: PPUSH
16445: LD_STRING DH-5-interrogation
16447: PPUSH
16448: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16452: LD_EXP 38
16456: PPUSH
16457: LD_STRING DI-5-interrogation
16459: PPUSH
16460: CALL_OW 88
// wait ( 0 0$1 ) ;
16464: LD_INT 35
16466: PPUSH
16467: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16471: LD_STRING IbrahimDecisionQuery
16473: PPUSH
16474: CALL_OW 97
16478: PUSH
16479: LD_INT 1
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16511
16487: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16488: LD_EXP 38
16492: PPUSH
16493: LD_STRING DI-1-kill
16495: PPUSH
16496: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16500: LD_EXP 38
16504: PPUSH
16505: CALL_OW 66
// end ; 2 :
16509: GO 16577
16511: LD_INT 2
16513: DOUBLE
16514: EQUAL
16515: IFTRUE 16519
16517: GO 16576
16519: POP
// begin SetSide ( Ibrahim , 6 ) ;
16520: LD_EXP 38
16524: PPUSH
16525: LD_INT 6
16527: PPUSH
16528: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16532: LD_EXP 38
16536: PPUSH
16537: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16541: LD_EXP 38
16545: PPUSH
16546: LD_INT 66
16548: PPUSH
16549: LD_INT 2
16551: PPUSH
16552: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16556: LD_EXP 38
16560: PPUSH
16561: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16565: LD_EXP 28
16569: PPUSH
16570: CALL_OW 122
// end ; end ;
16574: GO 16577
16576: POP
// InGameOff ;
16577: CALL_OW 9
// end ; 2 :
16581: GO 16597
16583: LD_INT 2
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16596
16591: POP
// exit ; end ;
16592: GO 16673
16594: GO 16597
16596: POP
// allowConvoys := true ;
16597: LD_ADDR_EXP 12
16601: PUSH
16602: LD_INT 1
16604: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16605: LD_INT 5250
16607: PPUSH
16608: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16612: LD_INT 35
16614: PPUSH
16615: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16619: LD_INT 81
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 21
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PPUSH
16643: CALL_OW 69
16647: NOT
16648: IFFALSE 16612
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16650: LD_EXP 38
16654: PPUSH
16655: LD_INT 38
16657: PPUSH
16658: LD_INT 28
16660: PPUSH
16661: CALL_OW 111
// ibrahimIsFree := true ;
16665: LD_ADDR_EXP 26
16669: PUSH
16670: LD_INT 1
16672: ST_TO_ADDR
// end ;
16673: LD_VAR 0 1
16677: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16678: LD_EXP 26
16682: PUSH
16683: LD_EXP 38
16687: PPUSH
16688: CALL_OW 302
16692: AND
16693: PUSH
16694: LD_INT 2
16696: PPUSH
16697: LD_EXP 38
16701: PPUSH
16702: CALL_OW 292
16706: AND
16707: IFFALSE 17467
16709: GO 16711
16711: DISABLE
16712: LD_INT 0
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin allowConvoys := false ;
16720: LD_ADDR_EXP 12
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// depot := usDepot ;
16728: LD_ADDR_VAR 0 4
16732: PUSH
16733: LD_INT 11
16735: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16736: LD_INT 11
16738: NOT
16739: PUSH
16740: LD_INT 22
16742: PUSH
16743: LD_INT 2
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 50
16752: PUSH
16753: EMPTY
16754: LIST
16755: PUSH
16756: LD_INT 30
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: AND
16776: IFFALSE 16823
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16778: LD_ADDR_VAR 0 4
16782: PUSH
16783: LD_INT 22
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 50
16795: PUSH
16796: EMPTY
16797: LIST
16798: PUSH
16799: LD_INT 30
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: PPUSH
16814: CALL_OW 69
16818: PUSH
16819: LD_INT 1
16821: ARRAY
16822: ST_TO_ADDR
// InGameOn ;
16823: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16827: LD_EXP 38
16831: PPUSH
16832: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16836: LD_EXP 28
16840: PPUSH
16841: LD_EXP 38
16845: PPUSH
16846: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16850: LD_EXP 38
16854: PPUSH
16855: LD_EXP 28
16859: PPUSH
16860: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16864: LD_EXP 38
16868: PPUSH
16869: LD_STRING DI-1-free
16871: PPUSH
16872: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16876: LD_EXP 28
16880: PPUSH
16881: LD_STRING DH-1-free
16883: PPUSH
16884: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16888: LD_EXP 38
16892: PPUSH
16893: LD_STRING DI-2-free
16895: PPUSH
16896: CALL_OW 88
// changeClass := 0 ;
16900: LD_ADDR_VAR 0 1
16904: PUSH
16905: LD_INT 0
16907: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16908: LD_STRING IbrahimJoinQuery
16910: PPUSH
16911: CALL_OW 97
16915: PUSH
16916: LD_INT 1
16918: DOUBLE
16919: EQUAL
16920: IFTRUE 16924
16922: GO 16935
16924: POP
// begin changeClass := 1 ;
16925: LD_ADDR_VAR 0 1
16929: PUSH
16930: LD_INT 1
16932: ST_TO_ADDR
// end ; 2 :
16933: GO 17175
16935: LD_INT 2
16937: DOUBLE
16938: EQUAL
16939: IFTRUE 16943
16941: GO 17095
16943: POP
// begin Say ( Heike , DH-1-decline ) ;
16944: LD_EXP 28
16948: PPUSH
16949: LD_STRING DH-1-decline
16951: PPUSH
16952: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16956: LD_EXP 38
16960: PPUSH
16961: LD_STRING DI-1-decline
16963: PPUSH
16964: CALL_OW 88
// InGameOff ;
16968: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16972: LD_EXP 38
16976: PPUSH
16977: LD_INT 30
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 111
// p := 0 ;
16987: LD_ADDR_VAR 0 3
16991: PUSH
16992: LD_INT 0
16994: ST_TO_ADDR
// repeat p := p + 1 ;
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_VAR 0 3
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17009: LD_INT 35
17011: PPUSH
17012: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17016: LD_EXP 38
17020: PPUSH
17021: LD_INT 30
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 307
17031: PUSH
17032: LD_INT 22
17034: PUSH
17035: LD_INT 2
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 101
17044: PUSH
17045: LD_INT 6
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: NOT
17061: OR
17062: PUSH
17063: LD_VAR 0 3
17067: PUSH
17068: LD_INT 10
17070: GREATER
17071: OR
17072: IFFALSE 16995
// RemoveUnit ( Ibrahim ) ;
17074: LD_EXP 38
17078: PPUSH
17079: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17083: LD_INT 1
17085: PPUSH
17086: LD_STRING 03_IbrahimHasEscaped
17088: PPUSH
17089: CALL_OW 39
// end ; 3 :
17093: GO 17175
17095: LD_INT 3
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17174
17103: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17104: LD_EXP 28
17108: PPUSH
17109: LD_STRING DH-1-radio-hq
17111: PPUSH
17112: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17116: LD_EXP 37
17120: PPUSH
17121: LD_STRING DO-1-radio-hq
17123: PPUSH
17124: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17128: LD_EXP 28
17132: PPUSH
17133: LD_STRING DH-2-radio-hq
17135: PPUSH
17136: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17140: LD_EXP 37
17144: PPUSH
17145: LD_STRING DO-2-radio-hq
17147: PPUSH
17148: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17152: LD_EXP 28
17156: PPUSH
17157: LD_STRING DH-3-radio-hq
17159: PPUSH
17160: CALL_OW 88
// changeClass := 1 ;
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_INT 1
17171: ST_TO_ADDR
// end ; end ;
17172: GO 17175
17174: POP
// if changeClass then
17175: LD_VAR 0 1
17179: IFFALSE 17467
// begin Say ( Heike , DH-1-agree ) ;
17181: LD_EXP 28
17185: PPUSH
17186: LD_STRING DH-1-agree
17188: PPUSH
17189: CALL_OW 88
// if IsOk ( Givi ) then
17193: LD_EXP 29
17197: PPUSH
17198: CALL_OW 302
17202: IFFALSE 17240
// begin Say ( Givi , DG-1-agree ) ;
17204: LD_EXP 29
17208: PPUSH
17209: LD_STRING DG-1-agree
17211: PPUSH
17212: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17216: LD_EXP 28
17220: PPUSH
17221: LD_STRING DH-2-agree
17223: PPUSH
17224: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17228: LD_EXP 29
17232: PPUSH
17233: LD_STRING DG-2-agree
17235: PPUSH
17236: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17240: LD_VAR 0 4
17244: PPUSH
17245: CALL_OW 313
17249: PUSH
17250: LD_INT 6
17252: EQUAL
17253: IFFALSE 17273
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17255: LD_VAR 0 4
17259: PPUSH
17260: CALL_OW 313
17264: PUSH
17265: LD_INT 1
17267: ARRAY
17268: PPUSH
17269: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17273: LD_EXP 38
17277: PPUSH
17278: LD_INT 2
17280: PPUSH
17281: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17285: LD_ADDR_VAR 0 5
17289: PUSH
17290: LD_EXP 38
17294: PPUSH
17295: CALL_OW 250
17299: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17300: LD_ADDR_VAR 0 6
17304: PUSH
17305: LD_EXP 38
17309: PPUSH
17310: CALL_OW 251
17314: ST_TO_ADDR
// if depot then
17315: LD_VAR 0 4
17319: IFFALSE 17368
// begin ComEnterUnit ( Ibrahim , depot ) ;
17321: LD_EXP 38
17325: PPUSH
17326: LD_VAR 0 4
17330: PPUSH
17331: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17335: LD_INT 35
17337: PPUSH
17338: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17342: LD_EXP 38
17346: PPUSH
17347: CALL_OW 310
17351: IFFALSE 17335
// b := IsInUnit ( Ibrahim ) ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_EXP 38
17362: PPUSH
17363: CALL_OW 310
17367: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17368: LD_EXP 38
17372: PPUSH
17373: CALL_OW 64
// uc_side := 2 ;
17377: LD_ADDR_OWVAR 20
17381: PUSH
17382: LD_INT 2
17384: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17385: LD_ADDR_EXP 38
17389: PUSH
17390: LD_STRING Ibrahim
17392: PPUSH
17393: LD_INT 0
17395: PPUSH
17396: LD_STRING 
17398: PPUSH
17399: CALL 36562 0 3
17403: ST_TO_ADDR
// if depot then
17404: LD_VAR 0 4
17408: IFFALSE 17426
// PlaceHumanInUnit ( Ibrahim , b ) else
17410: LD_EXP 38
17414: PPUSH
17415: LD_VAR 0 2
17419: PPUSH
17420: CALL_OW 52
17424: GO 17448
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17426: LD_EXP 38
17430: PPUSH
17431: LD_VAR 0 5
17435: PPUSH
17436: LD_VAR 0 6
17440: PPUSH
17441: LD_INT 0
17443: PPUSH
17444: CALL_OW 48
// InGameOff ;
17448: CALL_OW 9
// allowConvoys := true ;
17452: LD_ADDR_EXP 12
17456: PUSH
17457: LD_INT 1
17459: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17460: LD_STRING ACH_IBRAHIM
17462: PPUSH
17463: CALL_OW 543
// end ; end ;
17467: PPOPN 6
17469: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17470: LD_EXP 33
17474: PPUSH
17475: CALL_OW 256
17479: PUSH
17480: LD_INT 3
17482: LESS
17483: IFFALSE 17550
17485: GO 17487
17487: DISABLE
// begin DialogueOn ;
17488: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17492: LD_EXP 33
17496: PPUSH
17497: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17501: LD_EXP 33
17505: PPUSH
17506: LD_STRING DK-keydeath-1
17508: PPUSH
17509: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17513: LD_EXP 28
17517: PPUSH
17518: LD_STRING DH-keydeath-2
17520: PPUSH
17521: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17525: LD_EXP 28
17529: PPUSH
17530: LD_STRING DH-keydeath-3
17532: PPUSH
17533: CALL_OW 88
// DialogueOff ;
17537: CALL_OW 7
// KillUnit ( Kaia ) ;
17541: LD_EXP 33
17545: PPUSH
17546: CALL_OW 66
// end ;
17550: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17551: LD_EXP 11
17555: PUSH
17556: LD_EXP 21
17560: PUSH
17561: LD_INT 1
17563: LESS
17564: AND
17565: IFFALSE 18007
17567: GO 17569
17569: DISABLE
// begin ChangeSideFog ( 1 , 2 ) ;
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 2
17575: PPUSH
17576: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ;
17587: LD_INT 22
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 25
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: PUSH
17616: LD_INT 0
17618: EQUAL
17619: IFFALSE 17580
// DialogueOn ;
17621: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17625: LD_EXP 28
17629: PPUSH
17630: LD_STRING DH-1-final
17632: PPUSH
17633: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17637: LD_OWVAR 1
17641: PUSH
17642: LD_INT 126000
17644: PUSH
17645: LD_INT 115500
17647: PUSH
17648: LD_INT 105000
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: PUSH
17656: LD_OWVAR 67
17660: ARRAY
17661: LESSEQUAL
17662: IFFALSE 17676
// AddMedal ( med1 , 1 ) else
17664: LD_STRING med1
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: CALL_OW 101
17674: GO 17687
// AddMedal ( med1 , - 1 ) ;
17676: LD_STRING med1
17678: PPUSH
17679: LD_INT 1
17681: NEG
17682: PPUSH
17683: CALL_OW 101
// if vehCounter >= 2 then
17687: LD_EXP 22
17691: PUSH
17692: LD_INT 2
17694: GREATEREQUAL
17695: IFFALSE 17709
// AddMedal ( med2 , 1 ) else
17697: LD_STRING med2
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 101
17707: GO 17720
// AddMedal ( med2 , - 1 ) ;
17709: LD_STRING med2
17711: PPUSH
17712: LD_INT 1
17714: NEG
17715: PPUSH
17716: CALL_OW 101
// if deadCounter = 0 then
17720: LD_EXP 9
17724: PUSH
17725: LD_INT 0
17727: EQUAL
17728: IFFALSE 17742
// AddMedal ( med3 , 1 ) else
17730: LD_STRING med3
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 101
17740: GO 17753
// AddMedal ( med3 , - 1 ) ;
17742: LD_STRING med3
17744: PPUSH
17745: LD_INT 1
17747: NEG
17748: PPUSH
17749: CALL_OW 101
// GiveMedals ( MAIN ) ;
17753: LD_STRING MAIN
17755: PPUSH
17756: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17760: LD_INT 22
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: PPUSH
17800: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17804: LD_EXP 28
17808: PPUSH
17809: LD_STRING 03_Heike
17811: PPUSH
17812: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17816: LD_EXP 32
17820: PPUSH
17821: LD_STRING 03_Aviradze
17823: PPUSH
17824: CALL_OW 38
// if Givi then
17828: LD_EXP 29
17832: IFFALSE 17846
// SaveCharacters ( Givi , 03_Givi ) ;
17834: LD_EXP 29
17838: PPUSH
17839: LD_STRING 03_Givi
17841: PPUSH
17842: CALL_OW 38
// if Mike then
17846: LD_EXP 30
17850: IFFALSE 17864
// SaveCharacters ( Mike , 03_Mike ) ;
17852: LD_EXP 30
17856: PPUSH
17857: LD_STRING 03_Mike
17859: PPUSH
17860: CALL_OW 38
// if Kamil then
17864: LD_EXP 31
17868: IFFALSE 17882
// SaveCharacters ( Kamil , 03_Kamil ) ;
17870: LD_EXP 31
17874: PPUSH
17875: LD_STRING 03_Kamil
17877: PPUSH
17878: CALL_OW 38
// if Kaia then
17882: LD_EXP 33
17886: IFFALSE 17900
// SaveCharacters ( Kaia , 03_Kaia ) ;
17888: LD_EXP 33
17892: PPUSH
17893: LD_STRING 03_Kaia
17895: PPUSH
17896: CALL_OW 38
// if Sophia then
17900: LD_EXP 34
17904: IFFALSE 17918
// SaveCharacters ( Sophia , 03_Sophia ) ;
17906: LD_EXP 34
17910: PPUSH
17911: LD_STRING 03_Sophia
17913: PPUSH
17914: CALL_OW 38
// if Markov then
17918: LD_EXP 35
17922: IFFALSE 17936
// SaveCharacters ( Markov , 03_Markov ) ;
17924: LD_EXP 35
17928: PPUSH
17929: LD_STRING 03_Markov
17931: PPUSH
17932: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17936: LD_EXP 38
17940: PUSH
17941: LD_EXP 38
17945: PPUSH
17946: CALL_OW 255
17950: PUSH
17951: LD_INT 2
17953: EQUAL
17954: AND
17955: IFFALSE 17969
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17957: LD_EXP 38
17961: PPUSH
17962: LD_STRING 03_Ibrahim
17964: PPUSH
17965: CALL_OW 38
// if heikeSecondSquad then
17969: LD_EXP 42
17973: IFFALSE 17987
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17975: LD_EXP 42
17979: PPUSH
17980: LD_STRING 03_others
17982: PPUSH
17983: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17987: LD_EXP 9
17991: PPUSH
17992: LD_STRING 03_DeadCounter
17994: PPUSH
17995: CALL_OW 39
// YouWin ;
17999: CALL_OW 103
// DialogueOff ;
18003: CALL_OW 7
// end ; end_of_file
18007: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18008: LD_VAR 0 1
18012: PUSH
18013: LD_EXP 28
18017: EQUAL
18018: IFFALSE 18027
// YouLost ( Heike ) ;
18020: LD_STRING Heike
18022: PPUSH
18023: CALL_OW 104
// if un = Aviradze then
18027: LD_VAR 0 1
18031: PUSH
18032: LD_EXP 32
18036: EQUAL
18037: IFFALSE 18046
// YouLost ( Aviradze ) ;
18039: LD_STRING Aviradze
18041: PPUSH
18042: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 11
18053: EQUAL
18054: PUSH
18055: LD_EXP 11
18059: NOT
18060: AND
18061: IFFALSE 18070
// YouLost ( Depot ) ;
18063: LD_STRING Depot
18065: PPUSH
18066: CALL_OW 104
// if un = arDepot then
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 5
18077: EQUAL
18078: IFFALSE 18087
// YouLost ( FarmerDepot ) ;
18080: LD_STRING FarmerDepot
18082: PPUSH
18083: CALL_OW 104
// if un = Farmer then
18087: LD_VAR 0 1
18091: PUSH
18092: LD_EXP 36
18096: EQUAL
18097: IFFALSE 18106
// YouLost ( Farmer ) ;
18099: LD_STRING Farmer
18101: PPUSH
18102: CALL_OW 104
// if un in usForces then
18106: LD_VAR 0 1
18110: PUSH
18111: LD_EXP 44
18115: IN
18116: IFFALSE 18134
// usForces := usForces diff un ;
18118: LD_ADDR_EXP 44
18122: PUSH
18123: LD_EXP 44
18127: PUSH
18128: LD_VAR 0 1
18132: DIFF
18133: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 23
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 21
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IN
18179: IFFALSE 18195
// deadCounter := deadCounter + 1 ;
18181: LD_ADDR_EXP 9
18185: PUSH
18186: LD_EXP 9
18190: PUSH
18191: LD_INT 1
18193: PLUS
18194: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18195: LD_VAR 0 1
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_INT 4
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 34
18212: PUSH
18213: LD_INT 12
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PPUSH
18224: CALL_OW 69
18228: IN
18229: PUSH
18230: LD_EXP 18
18234: NOT
18235: AND
18236: IFFALSE 18246
// firstConvoyDestroyed := true ;
18238: LD_ADDR_EXP 18
18242: PUSH
18243: LD_INT 1
18245: ST_TO_ADDR
// if un in usAttackers then
18246: LD_VAR 0 1
18250: PUSH
18251: LD_EXP 47
18255: IN
18256: IFFALSE 18274
// usAttackers := usAttackers diff un ;
18258: LD_ADDR_EXP 47
18262: PUSH
18263: LD_EXP 47
18267: PUSH
18268: LD_VAR 0 1
18272: DIFF
18273: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18274: LD_VAR 0 1
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_INT 5
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: IN
18308: IFFALSE 18324
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18310: LD_ADDR_EXP 20
18314: PUSH
18315: LD_EXP 20
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: ST_TO_ADDR
// end ;
18324: PPOPN 1
18326: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18327: LD_VAR 0 2
18331: PUSH
18332: LD_EXP 38
18336: EQUAL
18337: PUSH
18338: LD_EXP 25
18342: AND
18343: IFFALSE 18528
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18345: LD_INT 22
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 30
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 50
18367: PUSH
18368: EMPTY
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: IFFALSE 18434
// begin InGameOn ;
18382: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18386: LD_EXP 38
18390: PPUSH
18391: LD_INT 11
18393: PPUSH
18394: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18398: LD_INT 35
18400: PPUSH
18401: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18405: LD_EXP 38
18409: PPUSH
18410: LD_INT 11
18412: PPUSH
18413: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18417: LD_EXP 38
18421: PPUSH
18422: CALL_OW 310
18426: IFFALSE 18398
// InGameOff ;
18428: CALL_OW 9
// end else
18432: GO 18528
// begin SetSide ( Ibrahim , 6 ) ;
18434: LD_EXP 38
18438: PPUSH
18439: LD_INT 6
18441: PPUSH
18442: CALL_OW 235
// ibrahimInDepot := false ;
18446: LD_ADDR_EXP 25
18450: PUSH
18451: LD_INT 0
18453: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18454: LD_EXP 38
18458: PPUSH
18459: LD_INT 30
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18469: LD_INT 35
18471: PPUSH
18472: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18476: LD_EXP 38
18480: PPUSH
18481: LD_INT 30
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18491: LD_EXP 38
18495: PPUSH
18496: LD_INT 30
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: CALL_OW 307
18506: PUSH
18507: LD_EXP 38
18511: PPUSH
18512: CALL_OW 301
18516: OR
18517: IFFALSE 18469
// RemoveUnit ( Ibrahim ) ;
18519: LD_EXP 38
18523: PPUSH
18524: CALL_OW 64
// end ; end ; end ;
18528: PPOPN 2
18530: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18531: LD_VAR 0 2
18535: PUSH
18536: LD_EXP 28
18540: EQUAL
18541: PUSH
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 11
18549: EQUAL
18550: AND
18551: PUSH
18552: LD_EXP 25
18556: AND
18557: IFFALSE 18563
// IbrahimQuery ;
18559: CALL 16288 0 0
// end ;
18563: PPOPN 2
18565: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 141
// if oldId in usAttackers then
18575: LD_VAR 0 2
18579: PUSH
18580: LD_EXP 47
18584: IN
18585: IFFALSE 18603
// usAttackers := usAttackers diff oldId ;
18587: LD_ADDR_EXP 47
18591: PUSH
18592: LD_EXP 47
18596: PUSH
18597: LD_VAR 0 2
18601: DIFF
18602: ST_TO_ADDR
// if newId in usAttackers then
18603: LD_VAR 0 1
18607: PUSH
18608: LD_EXP 47
18612: IN
18613: IFFALSE 18631
// usAttackers := usAttackers diff newId ;
18615: LD_ADDR_EXP 47
18619: PUSH
18620: LD_EXP 47
18624: PUSH
18625: LD_VAR 0 1
18629: DIFF
18630: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_INT 4
18638: EQUAL
18639: PUSH
18640: LD_EXP 18
18644: NOT
18645: AND
18646: IFFALSE 18656
// firstConvoyDestroyed := true ;
18648: LD_ADDR_EXP 18
18652: PUSH
18653: LD_INT 1
18655: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 264
18665: PUSH
18666: LD_INT 12
18668: EQUAL
18669: IFFALSE 18707
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18671: LD_ADDR_EXP 13
18675: PUSH
18676: LD_EXP 13
18680: PUSH
18681: LD_INT 1
18683: PLUS
18684: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18685: LD_VAR 0 1
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: CALL_OW 289
18697: PUSH
18698: LD_INT 0
18700: EQUAL
18701: IFFALSE 18707
// EmptyCargoDialog ;
18703: CALL 14926 0 0
// end ; end ;
18707: PPOPN 4
18709: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 2
18717: EQUAL
18718: PUSH
18719: LD_VAR 0 2
18723: PUSH
18724: LD_INT 5
18726: EQUAL
18727: AND
18728: IFFALSE 18737
// YouLost ( Attack ) ;
18730: LD_STRING Attack
18732: PPUSH
18733: CALL_OW 104
// end ;
18737: PPOPN 2
18739: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL_OW 255
18749: PUSH
18750: LD_INT 1
18752: EQUAL
18753: PUSH
18754: LD_EXP 6
18758: NOT
18759: AND
18760: IFFALSE 18894
// begin if GetBType ( b ) = b_lab then
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 266
18771: PUSH
18772: LD_INT 6
18774: EQUAL
18775: IFFALSE 18815
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18777: LD_EXP 44
18781: PPUSH
18782: LD_INT 25
18784: PUSH
18785: LD_INT 4
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PPUSH
18792: CALL_OW 72
18796: PPUSH
18797: LD_VAR 0 1
18801: PPUSH
18802: CALL_OW 120
// AmLabResearch ( b ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18815: LD_VAR 0 1
18819: PPUSH
18820: CALL_OW 266
18824: PUSH
18825: LD_INT 4
18827: EQUAL
18828: IFFALSE 18876
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18830: LD_EXP 44
18834: PPUSH
18835: LD_INT 25
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: LD_INT 54
18850: PUSH
18851: EMPTY
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 72
18866: PPUSH
18867: LD_VAR 0 1
18871: PPUSH
18872: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18876: LD_ADDR_EXP 46
18880: PUSH
18881: LD_EXP 46
18885: PPUSH
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 3
18893: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 255
18903: PUSH
18904: LD_INT 5
18906: EQUAL
18907: IFFALSE 18921
// SetBLevel ( b , 5 ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_INT 5
18916: PPUSH
18917: CALL_OW 241
// end ;
18921: PPOPN 1
18923: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 255
18933: PUSH
18934: LD_INT 2
18936: EQUAL
18937: IFFALSE 18953
// vehCounter := vehCounter + 1 ;
18939: LD_ADDR_EXP 22
18943: PUSH
18944: LD_EXP 22
18948: PUSH
18949: LD_INT 1
18951: PLUS
18952: ST_TO_ADDR
// end ;
18953: PPOPN 2
18955: END
// on SailEvent ( event ) do begin if event = eventAttack then
18956: LD_VAR 0 1
18960: PUSH
18961: LD_EXP 24
18965: EQUAL
18966: IFFALSE 18972
// AmericanAttack ;
18968: CALL 6650 0 0
// end ; end_of_file
18972: PPOPN 1
18974: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18975: LD_OWVAR 1
18979: PUSH
18980: LD_INT 10500
18982: PUSH
18983: LD_INT 9800
18985: PUSH
18986: LD_INT 9450
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_OWVAR 67
18998: ARRAY
18999: LESSEQUAL
19000: IFFALSE 19027
19002: GO 19004
19004: DISABLE
// begin enable ;
19005: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 5
19011: PPUSH
19012: CALL_OW 12
19016: PPUSH
19017: LD_INT 9
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 55
// end ;
19027: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
19028: LD_EXP 6
19032: PUSH
19033: LD_OWVAR 1
19037: PUSH
19038: LD_INT 56700
19040: PUSH
19041: LD_INT 55650
19043: PUSH
19044: LD_INT 54600
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_OWVAR 67
19056: ARRAY
19057: LESSEQUAL
19058: AND
19059: IFFALSE 19086
19061: GO 19063
19063: DISABLE
// begin enable ;
19064: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19065: LD_INT 3
19067: PPUSH
19068: LD_INT 5
19070: PPUSH
19071: CALL_OW 12
19075: PPUSH
19076: LD_INT 9
19078: PPUSH
19079: LD_INT 1
19081: PPUSH
19082: CALL_OW 55
// end ; end_of_file
19086: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19087: LD_EXP 11
19091: NOT
19092: PUSH
19093: LD_EXP 16
19097: AND
19098: PUSH
19099: LD_EXP 4
19103: AND
19104: PUSH
19105: LD_EXP 15
19109: PUSH
19110: LD_EXP 16
19114: LESSEQUAL
19115: AND
19116: IFFALSE 19206
19118: GO 19120
19120: DISABLE
// begin enable ;
19121: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19122: LD_ADDR_OWVAR 47
19126: PUSH
19127: LD_STRING #X103-1
19129: PUSH
19130: LD_EXP 16
19134: PUSH
19135: LD_EXP 15
19139: MINUS
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19145: LD_ADDR_EXP 15
19149: PUSH
19150: LD_INT 5
19152: PPUSH
19153: CALL_OW 274
19157: PPUSH
19158: LD_INT 1
19160: PPUSH
19161: CALL_OW 275
19165: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19166: LD_INT 10
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 287
19176: PUSH
19177: LD_INT 0
19179: EQUAL
19180: IFFALSE 19198
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19182: LD_ADDR_EXP 17
19186: PUSH
19187: LD_EXP 17
19191: PUSH
19192: LD_INT 35
19194: MINUS
19195: ST_TO_ADDR
19196: GO 19206
// farmerCratesCounter := 30 30$00 ;
19198: LD_ADDR_EXP 17
19202: PUSH
19203: LD_INT 63000
19205: ST_TO_ADDR
// end ; end_of_file
19206: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19207: LD_INT 0
19209: PPUSH
// ar_miner := 81 ;
19210: LD_ADDR_EXP 55
19214: PUSH
19215: LD_INT 81
19217: ST_TO_ADDR
// ar_crane := 88 ;
19218: LD_ADDR_EXP 54
19222: PUSH
19223: LD_INT 88
19225: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19226: LD_ADDR_EXP 49
19230: PUSH
19231: LD_INT 89
19233: ST_TO_ADDR
// us_hack := 99 ;
19234: LD_ADDR_EXP 50
19238: PUSH
19239: LD_INT 99
19241: ST_TO_ADDR
// us_artillery := 97 ;
19242: LD_ADDR_EXP 51
19246: PUSH
19247: LD_INT 97
19249: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19250: LD_ADDR_EXP 52
19254: PUSH
19255: LD_INT 91
19257: ST_TO_ADDR
// ar_mortar := 92 ;
19258: LD_ADDR_EXP 53
19262: PUSH
19263: LD_INT 92
19265: ST_TO_ADDR
// ru_radar := 98 ;
19266: LD_ADDR_EXP 48
19270: PUSH
19271: LD_INT 98
19273: ST_TO_ADDR
// tech_Artillery := 80 ;
19274: LD_ADDR_EXP 56
19278: PUSH
19279: LD_INT 80
19281: ST_TO_ADDR
// tech_RadMat := 81 ;
19282: LD_ADDR_EXP 57
19286: PUSH
19287: LD_INT 81
19289: ST_TO_ADDR
// tech_BasicTools := 82 ;
19290: LD_ADDR_EXP 58
19294: PUSH
19295: LD_INT 82
19297: ST_TO_ADDR
// tech_Cargo := 83 ;
19298: LD_ADDR_EXP 59
19302: PUSH
19303: LD_INT 83
19305: ST_TO_ADDR
// tech_Track := 84 ;
19306: LD_ADDR_EXP 60
19310: PUSH
19311: LD_INT 84
19313: ST_TO_ADDR
// tech_Crane := 85 ;
19314: LD_ADDR_EXP 61
19318: PUSH
19319: LD_INT 85
19321: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19322: LD_ADDR_EXP 62
19326: PUSH
19327: LD_INT 86
19329: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19330: LD_ADDR_EXP 63
19334: PUSH
19335: LD_INT 87
19337: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19338: LD_ADDR_EXP 64
19342: PUSH
19343: LD_INT 88
19345: ST_TO_ADDR
// class_mastodont := 31 ;
19346: LD_ADDR_EXP 65
19350: PUSH
19351: LD_INT 31
19353: ST_TO_ADDR
// class_horse := 21 ;
19354: LD_ADDR_EXP 66
19358: PUSH
19359: LD_INT 21
19361: ST_TO_ADDR
// end ;
19362: LD_VAR 0 1
19366: RET
// every 1 do
19367: GO 19369
19369: DISABLE
// InitGlobalVariables ; end_of_file
19370: CALL 19207 0 0
19374: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19375: LD_INT 0
19377: PPUSH
// if p2 = 100 then
19378: LD_VAR 0 2
19382: PUSH
19383: LD_INT 100
19385: EQUAL
19386: IFFALSE 20335
// begin if not StreamModeActive then
19388: LD_EXP 67
19392: NOT
19393: IFFALSE 19403
// StreamModeActive := true ;
19395: LD_ADDR_EXP 67
19399: PUSH
19400: LD_INT 1
19402: ST_TO_ADDR
// if p3 = 0 then
19403: LD_VAR 0 3
19407: PUSH
19408: LD_INT 0
19410: EQUAL
19411: IFFALSE 19417
// InitStreamMode ;
19413: CALL 20495 0 0
// if p3 = 1 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 1
19424: EQUAL
19425: IFFALSE 19435
// sRocket := true ;
19427: LD_ADDR_EXP 72
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 2 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 2
19442: EQUAL
19443: IFFALSE 19453
// sSpeed := true ;
19445: LD_ADDR_EXP 71
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 3 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 3
19460: EQUAL
19461: IFFALSE 19471
// sEngine := true ;
19463: LD_ADDR_EXP 73
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 4 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 4
19478: EQUAL
19479: IFFALSE 19489
// sSpec := true ;
19481: LD_ADDR_EXP 70
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 5 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 5
19496: EQUAL
19497: IFFALSE 19507
// sLevel := true ;
19499: LD_ADDR_EXP 74
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 6 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 6
19514: EQUAL
19515: IFFALSE 19525
// sArmoury := true ;
19517: LD_ADDR_EXP 75
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 7 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 7
19532: EQUAL
19533: IFFALSE 19543
// sRadar := true ;
19535: LD_ADDR_EXP 76
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 8 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 8
19550: EQUAL
19551: IFFALSE 19561
// sBunker := true ;
19553: LD_ADDR_EXP 77
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 9 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 9
19568: EQUAL
19569: IFFALSE 19579
// sHack := true ;
19571: LD_ADDR_EXP 78
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 10 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 10
19586: EQUAL
19587: IFFALSE 19597
// sFire := true ;
19589: LD_ADDR_EXP 79
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 11 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 11
19604: EQUAL
19605: IFFALSE 19615
// sRefresh := true ;
19607: LD_ADDR_EXP 80
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 12 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 12
19622: EQUAL
19623: IFFALSE 19633
// sExp := true ;
19625: LD_ADDR_EXP 81
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 13 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 13
19640: EQUAL
19641: IFFALSE 19651
// sDepot := true ;
19643: LD_ADDR_EXP 82
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 14 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 14
19658: EQUAL
19659: IFFALSE 19669
// sFlag := true ;
19661: LD_ADDR_EXP 83
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 15 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 15
19676: EQUAL
19677: IFFALSE 19687
// sKamikadze := true ;
19679: LD_ADDR_EXP 91
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 16 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 16
19694: EQUAL
19695: IFFALSE 19705
// sTroll := true ;
19697: LD_ADDR_EXP 92
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 17 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 17
19712: EQUAL
19713: IFFALSE 19723
// sSlow := true ;
19715: LD_ADDR_EXP 93
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 18 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 18
19730: EQUAL
19731: IFFALSE 19741
// sLack := true ;
19733: LD_ADDR_EXP 94
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 19 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 19
19748: EQUAL
19749: IFFALSE 19759
// sTank := true ;
19751: LD_ADDR_EXP 96
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 20 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 20
19766: EQUAL
19767: IFFALSE 19777
// sRemote := true ;
19769: LD_ADDR_EXP 97
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 21 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 21
19784: EQUAL
19785: IFFALSE 19795
// sPowell := true ;
19787: LD_ADDR_EXP 98
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 22 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 22
19802: EQUAL
19803: IFFALSE 19813
// sTeleport := true ;
19805: LD_ADDR_EXP 101
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 23 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 23
19820: EQUAL
19821: IFFALSE 19831
// sOilTower := true ;
19823: LD_ADDR_EXP 103
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 24 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 24
19838: EQUAL
19839: IFFALSE 19849
// sShovel := true ;
19841: LD_ADDR_EXP 104
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 25 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 25
19856: EQUAL
19857: IFFALSE 19867
// sSheik := true ;
19859: LD_ADDR_EXP 105
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 26 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 26
19874: EQUAL
19875: IFFALSE 19885
// sEarthquake := true ;
19877: LD_ADDR_EXP 107
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 27 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 27
19892: EQUAL
19893: IFFALSE 19903
// sAI := true ;
19895: LD_ADDR_EXP 108
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 28 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 28
19910: EQUAL
19911: IFFALSE 19921
// sCargo := true ;
19913: LD_ADDR_EXP 111
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 29 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 29
19928: EQUAL
19929: IFFALSE 19939
// sDLaser := true ;
19931: LD_ADDR_EXP 112
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 30 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 30
19946: EQUAL
19947: IFFALSE 19957
// sExchange := true ;
19949: LD_ADDR_EXP 113
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 31 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 31
19964: EQUAL
19965: IFFALSE 19975
// sFac := true ;
19967: LD_ADDR_EXP 114
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 32 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 32
19982: EQUAL
19983: IFFALSE 19993
// sPower := true ;
19985: LD_ADDR_EXP 115
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 33 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 33
20000: EQUAL
20001: IFFALSE 20011
// sRandom := true ;
20003: LD_ADDR_EXP 116
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 34 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 34
20018: EQUAL
20019: IFFALSE 20029
// sShield := true ;
20021: LD_ADDR_EXP 117
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 35 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 35
20036: EQUAL
20037: IFFALSE 20047
// sTime := true ;
20039: LD_ADDR_EXP 118
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 36 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 36
20054: EQUAL
20055: IFFALSE 20065
// sTools := true ;
20057: LD_ADDR_EXP 119
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 101 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 101
20072: EQUAL
20073: IFFALSE 20083
// sSold := true ;
20075: LD_ADDR_EXP 84
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 102 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 102
20090: EQUAL
20091: IFFALSE 20101
// sDiff := true ;
20093: LD_ADDR_EXP 85
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 103 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 103
20108: EQUAL
20109: IFFALSE 20119
// sFog := true ;
20111: LD_ADDR_EXP 88
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 104 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 104
20126: EQUAL
20127: IFFALSE 20137
// sReset := true ;
20129: LD_ADDR_EXP 89
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 105 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 105
20144: EQUAL
20145: IFFALSE 20155
// sSun := true ;
20147: LD_ADDR_EXP 90
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 106 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 106
20162: EQUAL
20163: IFFALSE 20173
// sTiger := true ;
20165: LD_ADDR_EXP 86
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 107 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 107
20180: EQUAL
20181: IFFALSE 20191
// sBomb := true ;
20183: LD_ADDR_EXP 87
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 108 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 108
20198: EQUAL
20199: IFFALSE 20209
// sWound := true ;
20201: LD_ADDR_EXP 95
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 109 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 109
20216: EQUAL
20217: IFFALSE 20227
// sBetray := true ;
20219: LD_ADDR_EXP 99
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 110 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 110
20234: EQUAL
20235: IFFALSE 20245
// sContamin := true ;
20237: LD_ADDR_EXP 100
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 111 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 111
20252: EQUAL
20253: IFFALSE 20263
// sOil := true ;
20255: LD_ADDR_EXP 102
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 112 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 112
20270: EQUAL
20271: IFFALSE 20281
// sStu := true ;
20273: LD_ADDR_EXP 106
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 113 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 113
20288: EQUAL
20289: IFFALSE 20299
// sBazooka := true ;
20291: LD_ADDR_EXP 109
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 114 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 114
20306: EQUAL
20307: IFFALSE 20317
// sMortar := true ;
20309: LD_ADDR_EXP 110
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 115 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 115
20324: EQUAL
20325: IFFALSE 20335
// sRanger := true ;
20327: LD_ADDR_EXP 120
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// end ; if p2 = 101 then
20335: LD_VAR 0 2
20339: PUSH
20340: LD_INT 101
20342: EQUAL
20343: IFFALSE 20471
// begin case p3 of 1 :
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 1
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20365
20358: POP
// hHackUnlimitedResources ; 2 :
20359: CALL 31508 0 0
20363: GO 20471
20365: LD_INT 2
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20380
20373: POP
// hHackSetLevel10 ; 3 :
20374: CALL 31641 0 0
20378: GO 20471
20380: LD_INT 3
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20395
20388: POP
// hHackSetLevel10YourUnits ; 4 :
20389: CALL 31726 0 0
20393: GO 20471
20395: LD_INT 4
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20410
20403: POP
// hHackInvincible ; 5 :
20404: CALL 32174 0 0
20408: GO 20471
20410: LD_INT 5
20412: DOUBLE
20413: EQUAL
20414: IFTRUE 20418
20416: GO 20425
20418: POP
// hHackInvisible ; 6 :
20419: CALL 32285 0 0
20423: GO 20471
20425: LD_INT 6
20427: DOUBLE
20428: EQUAL
20429: IFTRUE 20433
20431: GO 20440
20433: POP
// hHackChangeYourSide ; 7 :
20434: CALL 32342 0 0
20438: GO 20471
20440: LD_INT 7
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20455
20448: POP
// hHackChangeUnitSide ; 8 :
20449: CALL 32384 0 0
20453: GO 20471
20455: LD_INT 8
20457: DOUBLE
20458: EQUAL
20459: IFTRUE 20463
20461: GO 20470
20463: POP
// hHackFog ; end ;
20464: CALL 32485 0 0
20468: GO 20471
20470: POP
// end ; end ;
20471: LD_VAR 0 7
20475: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20476: GO 20478
20478: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20479: LD_STRING initStreamRollete();
20481: PPUSH
20482: CALL_OW 559
// InitStreamMode ;
20486: CALL 20495 0 0
// DefineStreamItems ( ) ;
20490: CALL 20935 0 0
// end ;
20494: END
// function InitStreamMode ; begin
20495: LD_INT 0
20497: PPUSH
// streamModeActive := false ;
20498: LD_ADDR_EXP 67
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// normalCounter := 36 ;
20506: LD_ADDR_EXP 68
20510: PUSH
20511: LD_INT 36
20513: ST_TO_ADDR
// hardcoreCounter := 16 ;
20514: LD_ADDR_EXP 69
20518: PUSH
20519: LD_INT 16
20521: ST_TO_ADDR
// sRocket := false ;
20522: LD_ADDR_EXP 72
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sSpeed := false ;
20530: LD_ADDR_EXP 71
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sEngine := false ;
20538: LD_ADDR_EXP 73
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sSpec := false ;
20546: LD_ADDR_EXP 70
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sLevel := false ;
20554: LD_ADDR_EXP 74
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sArmoury := false ;
20562: LD_ADDR_EXP 75
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sRadar := false ;
20570: LD_ADDR_EXP 76
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sBunker := false ;
20578: LD_ADDR_EXP 77
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sHack := false ;
20586: LD_ADDR_EXP 78
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sFire := false ;
20594: LD_ADDR_EXP 79
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sRefresh := false ;
20602: LD_ADDR_EXP 80
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sExp := false ;
20610: LD_ADDR_EXP 81
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sDepot := false ;
20618: LD_ADDR_EXP 82
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sFlag := false ;
20626: LD_ADDR_EXP 83
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sKamikadze := false ;
20634: LD_ADDR_EXP 91
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sTroll := false ;
20642: LD_ADDR_EXP 92
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sSlow := false ;
20650: LD_ADDR_EXP 93
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sLack := false ;
20658: LD_ADDR_EXP 94
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sTank := false ;
20666: LD_ADDR_EXP 96
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sRemote := false ;
20674: LD_ADDR_EXP 97
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sPowell := false ;
20682: LD_ADDR_EXP 98
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sTeleport := false ;
20690: LD_ADDR_EXP 101
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sOilTower := false ;
20698: LD_ADDR_EXP 103
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sShovel := false ;
20706: LD_ADDR_EXP 104
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sSheik := false ;
20714: LD_ADDR_EXP 105
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sEarthquake := false ;
20722: LD_ADDR_EXP 107
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sAI := false ;
20730: LD_ADDR_EXP 108
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sCargo := false ;
20738: LD_ADDR_EXP 111
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sDLaser := false ;
20746: LD_ADDR_EXP 112
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sExchange := false ;
20754: LD_ADDR_EXP 113
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sFac := false ;
20762: LD_ADDR_EXP 114
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// sPower := false ;
20770: LD_ADDR_EXP 115
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// sRandom := false ;
20778: LD_ADDR_EXP 116
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// sShield := false ;
20786: LD_ADDR_EXP 117
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// sTime := false ;
20794: LD_ADDR_EXP 118
20798: PUSH
20799: LD_INT 0
20801: ST_TO_ADDR
// sTools := false ;
20802: LD_ADDR_EXP 119
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
// sSold := false ;
20810: LD_ADDR_EXP 84
20814: PUSH
20815: LD_INT 0
20817: ST_TO_ADDR
// sDiff := false ;
20818: LD_ADDR_EXP 85
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// sFog := false ;
20826: LD_ADDR_EXP 88
20830: PUSH
20831: LD_INT 0
20833: ST_TO_ADDR
// sReset := false ;
20834: LD_ADDR_EXP 89
20838: PUSH
20839: LD_INT 0
20841: ST_TO_ADDR
// sSun := false ;
20842: LD_ADDR_EXP 90
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// sTiger := false ;
20850: LD_ADDR_EXP 86
20854: PUSH
20855: LD_INT 0
20857: ST_TO_ADDR
// sBomb := false ;
20858: LD_ADDR_EXP 87
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
// sWound := false ;
20866: LD_ADDR_EXP 95
20870: PUSH
20871: LD_INT 0
20873: ST_TO_ADDR
// sBetray := false ;
20874: LD_ADDR_EXP 99
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
// sContamin := false ;
20882: LD_ADDR_EXP 100
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// sOil := false ;
20890: LD_ADDR_EXP 102
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// sStu := false ;
20898: LD_ADDR_EXP 106
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// sBazooka := false ;
20906: LD_ADDR_EXP 109
20910: PUSH
20911: LD_INT 0
20913: ST_TO_ADDR
// sMortar := false ;
20914: LD_ADDR_EXP 110
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// sRanger := false ;
20922: LD_ADDR_EXP 120
20926: PUSH
20927: LD_INT 0
20929: ST_TO_ADDR
// end ;
20930: LD_VAR 0 1
20934: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20935: LD_INT 0
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
// result := [ ] ;
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: EMPTY
20948: ST_TO_ADDR
// if campaign_id = 1 then
20949: LD_OWVAR 69
20953: PUSH
20954: LD_INT 1
20956: EQUAL
20957: IFFALSE 23895
// begin case mission_number of 1 :
20959: LD_OWVAR 70
20963: PUSH
20964: LD_INT 1
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 21036
20972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 4
20983: PUSH
20984: LD_INT 11
20986: PUSH
20987: LD_INT 12
20989: PUSH
20990: LD_INT 15
20992: PUSH
20993: LD_INT 16
20995: PUSH
20996: LD_INT 22
20998: PUSH
20999: LD_INT 23
21001: PUSH
21002: LD_INT 26
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 101
21018: PUSH
21019: LD_INT 102
21021: PUSH
21022: LD_INT 106
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: ST_TO_ADDR
21034: GO 23893
21036: LD_INT 2
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21116
21044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 16
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_INT 23
21073: PUSH
21074: LD_INT 26
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 101
21090: PUSH
21091: LD_INT 102
21093: PUSH
21094: LD_INT 105
21096: PUSH
21097: LD_INT 106
21099: PUSH
21100: LD_INT 108
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: ST_TO_ADDR
21114: GO 23893
21116: LD_INT 3
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21200
21124: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21125: LD_ADDR_VAR 0 1
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 4
21135: PUSH
21136: LD_INT 5
21138: PUSH
21139: LD_INT 11
21141: PUSH
21142: LD_INT 12
21144: PUSH
21145: LD_INT 15
21147: PUSH
21148: LD_INT 16
21150: PUSH
21151: LD_INT 22
21153: PUSH
21154: LD_INT 26
21156: PUSH
21157: LD_INT 36
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 101
21174: PUSH
21175: LD_INT 102
21177: PUSH
21178: LD_INT 105
21180: PUSH
21181: LD_INT 106
21183: PUSH
21184: LD_INT 108
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: ST_TO_ADDR
21198: GO 23893
21200: LD_INT 4
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21292
21208: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: LD_INT 4
21219: PUSH
21220: LD_INT 5
21222: PUSH
21223: LD_INT 8
21225: PUSH
21226: LD_INT 11
21228: PUSH
21229: LD_INT 12
21231: PUSH
21232: LD_INT 15
21234: PUSH
21235: LD_INT 16
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_INT 23
21243: PUSH
21244: LD_INT 26
21246: PUSH
21247: LD_INT 36
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 101
21266: PUSH
21267: LD_INT 102
21269: PUSH
21270: LD_INT 105
21272: PUSH
21273: LD_INT 106
21275: PUSH
21276: LD_INT 108
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: ST_TO_ADDR
21290: GO 23893
21292: LD_INT 5
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21400
21300: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21301: LD_ADDR_VAR 0 1
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 4
21311: PUSH
21312: LD_INT 5
21314: PUSH
21315: LD_INT 6
21317: PUSH
21318: LD_INT 8
21320: PUSH
21321: LD_INT 11
21323: PUSH
21324: LD_INT 12
21326: PUSH
21327: LD_INT 15
21329: PUSH
21330: LD_INT 16
21332: PUSH
21333: LD_INT 22
21335: PUSH
21336: LD_INT 23
21338: PUSH
21339: LD_INT 25
21341: PUSH
21342: LD_INT 26
21344: PUSH
21345: LD_INT 36
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 101
21366: PUSH
21367: LD_INT 102
21369: PUSH
21370: LD_INT 105
21372: PUSH
21373: LD_INT 106
21375: PUSH
21376: LD_INT 108
21378: PUSH
21379: LD_INT 109
21381: PUSH
21382: LD_INT 112
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: ST_TO_ADDR
21398: GO 23893
21400: LD_INT 6
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21528
21408: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21409: LD_ADDR_VAR 0 1
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 4
21419: PUSH
21420: LD_INT 5
21422: PUSH
21423: LD_INT 6
21425: PUSH
21426: LD_INT 8
21428: PUSH
21429: LD_INT 11
21431: PUSH
21432: LD_INT 12
21434: PUSH
21435: LD_INT 15
21437: PUSH
21438: LD_INT 16
21440: PUSH
21441: LD_INT 20
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 22
21449: PUSH
21450: LD_INT 23
21452: PUSH
21453: LD_INT 25
21455: PUSH
21456: LD_INT 26
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 31
21464: PUSH
21465: LD_INT 32
21467: PUSH
21468: LD_INT 36
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 101
21494: PUSH
21495: LD_INT 102
21497: PUSH
21498: LD_INT 105
21500: PUSH
21501: LD_INT 106
21503: PUSH
21504: LD_INT 108
21506: PUSH
21507: LD_INT 109
21509: PUSH
21510: LD_INT 112
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 23893
21528: LD_INT 7
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21636
21536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21537: LD_ADDR_VAR 0 1
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 7
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 20
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 22
21574: PUSH
21575: LD_INT 23
21577: PUSH
21578: LD_INT 25
21580: PUSH
21581: LD_INT 26
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 103
21608: PUSH
21609: LD_INT 105
21611: PUSH
21612: LD_INT 106
21614: PUSH
21615: LD_INT 108
21617: PUSH
21618: LD_INT 112
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: ST_TO_ADDR
21634: GO 23893
21636: LD_INT 8
21638: DOUBLE
21639: EQUAL
21640: IFTRUE 21644
21642: GO 21772
21644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21645: LD_ADDR_VAR 0 1
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 4
21655: PUSH
21656: LD_INT 5
21658: PUSH
21659: LD_INT 6
21661: PUSH
21662: LD_INT 7
21664: PUSH
21665: LD_INT 8
21667: PUSH
21668: LD_INT 11
21670: PUSH
21671: LD_INT 12
21673: PUSH
21674: LD_INT 15
21676: PUSH
21677: LD_INT 16
21679: PUSH
21680: LD_INT 20
21682: PUSH
21683: LD_INT 21
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 25
21694: PUSH
21695: LD_INT 26
21697: PUSH
21698: LD_INT 30
21700: PUSH
21701: LD_INT 31
21703: PUSH
21704: LD_INT 32
21706: PUSH
21707: LD_INT 36
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 101
21734: PUSH
21735: LD_INT 102
21737: PUSH
21738: LD_INT 103
21740: PUSH
21741: LD_INT 105
21743: PUSH
21744: LD_INT 106
21746: PUSH
21747: LD_INT 108
21749: PUSH
21750: LD_INT 109
21752: PUSH
21753: LD_INT 112
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: ST_TO_ADDR
21770: GO 23893
21772: LD_INT 9
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21916
21780: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21781: LD_ADDR_VAR 0 1
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: LD_INT 5
21794: PUSH
21795: LD_INT 6
21797: PUSH
21798: LD_INT 7
21800: PUSH
21801: LD_INT 8
21803: PUSH
21804: LD_INT 11
21806: PUSH
21807: LD_INT 12
21809: PUSH
21810: LD_INT 15
21812: PUSH
21813: LD_INT 16
21815: PUSH
21816: LD_INT 20
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_INT 23
21827: PUSH
21828: LD_INT 25
21830: PUSH
21831: LD_INT 26
21833: PUSH
21834: LD_INT 28
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 36
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 101
21874: PUSH
21875: LD_INT 102
21877: PUSH
21878: LD_INT 103
21880: PUSH
21881: LD_INT 105
21883: PUSH
21884: LD_INT 106
21886: PUSH
21887: LD_INT 108
21889: PUSH
21890: LD_INT 109
21892: PUSH
21893: LD_INT 112
21895: PUSH
21896: LD_INT 114
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: ST_TO_ADDR
21914: GO 23893
21916: LD_INT 10
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 22108
21924: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21925: LD_ADDR_VAR 0 1
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: LD_INT 6
21941: PUSH
21942: LD_INT 7
21944: PUSH
21945: LD_INT 8
21947: PUSH
21948: LD_INT 9
21950: PUSH
21951: LD_INT 10
21953: PUSH
21954: LD_INT 11
21956: PUSH
21957: LD_INT 12
21959: PUSH
21960: LD_INT 13
21962: PUSH
21963: LD_INT 14
21965: PUSH
21966: LD_INT 15
21968: PUSH
21969: LD_INT 16
21971: PUSH
21972: LD_INT 17
21974: PUSH
21975: LD_INT 18
21977: PUSH
21978: LD_INT 19
21980: PUSH
21981: LD_INT 20
21983: PUSH
21984: LD_INT 21
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 23
21992: PUSH
21993: LD_INT 24
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 26
22001: PUSH
22002: LD_INT 28
22004: PUSH
22005: LD_INT 30
22007: PUSH
22008: LD_INT 31
22010: PUSH
22011: LD_INT 32
22013: PUSH
22014: LD_INT 36
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 101
22050: PUSH
22051: LD_INT 102
22053: PUSH
22054: LD_INT 103
22056: PUSH
22057: LD_INT 104
22059: PUSH
22060: LD_INT 105
22062: PUSH
22063: LD_INT 106
22065: PUSH
22066: LD_INT 107
22068: PUSH
22069: LD_INT 108
22071: PUSH
22072: LD_INT 109
22074: PUSH
22075: LD_INT 110
22077: PUSH
22078: LD_INT 111
22080: PUSH
22081: LD_INT 112
22083: PUSH
22084: LD_INT 114
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: ST_TO_ADDR
22106: GO 23893
22108: LD_INT 11
22110: DOUBLE
22111: EQUAL
22112: IFTRUE 22116
22114: GO 22308
22116: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22117: LD_ADDR_VAR 0 1
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: LD_INT 4
22130: PUSH
22131: LD_INT 5
22133: PUSH
22134: LD_INT 6
22136: PUSH
22137: LD_INT 7
22139: PUSH
22140: LD_INT 8
22142: PUSH
22143: LD_INT 9
22145: PUSH
22146: LD_INT 10
22148: PUSH
22149: LD_INT 11
22151: PUSH
22152: LD_INT 12
22154: PUSH
22155: LD_INT 13
22157: PUSH
22158: LD_INT 14
22160: PUSH
22161: LD_INT 15
22163: PUSH
22164: LD_INT 16
22166: PUSH
22167: LD_INT 17
22169: PUSH
22170: LD_INT 18
22172: PUSH
22173: LD_INT 19
22175: PUSH
22176: LD_INT 20
22178: PUSH
22179: LD_INT 21
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_INT 23
22187: PUSH
22188: LD_INT 24
22190: PUSH
22191: LD_INT 25
22193: PUSH
22194: LD_INT 26
22196: PUSH
22197: LD_INT 28
22199: PUSH
22200: LD_INT 30
22202: PUSH
22203: LD_INT 31
22205: PUSH
22206: LD_INT 32
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 36
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 101
22250: PUSH
22251: LD_INT 102
22253: PUSH
22254: LD_INT 103
22256: PUSH
22257: LD_INT 104
22259: PUSH
22260: LD_INT 105
22262: PUSH
22263: LD_INT 106
22265: PUSH
22266: LD_INT 107
22268: PUSH
22269: LD_INT 108
22271: PUSH
22272: LD_INT 109
22274: PUSH
22275: LD_INT 110
22277: PUSH
22278: LD_INT 111
22280: PUSH
22281: LD_INT 112
22283: PUSH
22284: LD_INT 114
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: ST_TO_ADDR
22306: GO 23893
22308: LD_INT 12
22310: DOUBLE
22311: EQUAL
22312: IFTRUE 22316
22314: GO 22524
22316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22317: LD_ADDR_VAR 0 1
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: LD_INT 2
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: LD_INT 4
22333: PUSH
22334: LD_INT 5
22336: PUSH
22337: LD_INT 6
22339: PUSH
22340: LD_INT 7
22342: PUSH
22343: LD_INT 8
22345: PUSH
22346: LD_INT 9
22348: PUSH
22349: LD_INT 10
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 13
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 33
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 101
22462: PUSH
22463: LD_INT 102
22465: PUSH
22466: LD_INT 103
22468: PUSH
22469: LD_INT 104
22471: PUSH
22472: LD_INT 105
22474: PUSH
22475: LD_INT 106
22477: PUSH
22478: LD_INT 107
22480: PUSH
22481: LD_INT 108
22483: PUSH
22484: LD_INT 109
22486: PUSH
22487: LD_INT 110
22489: PUSH
22490: LD_INT 111
22492: PUSH
22493: LD_INT 112
22495: PUSH
22496: LD_INT 113
22498: PUSH
22499: LD_INT 114
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: ST_TO_ADDR
22522: GO 23893
22524: LD_INT 13
22526: DOUBLE
22527: EQUAL
22528: IFTRUE 22532
22530: GO 22728
22532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 3
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 8
22555: PUSH
22556: LD_INT 9
22558: PUSH
22559: LD_INT 10
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 14
22570: PUSH
22571: LD_INT 15
22573: PUSH
22574: LD_INT 16
22576: PUSH
22577: LD_INT 17
22579: PUSH
22580: LD_INT 18
22582: PUSH
22583: LD_INT 19
22585: PUSH
22586: LD_INT 20
22588: PUSH
22589: LD_INT 21
22591: PUSH
22592: LD_INT 22
22594: PUSH
22595: LD_INT 23
22597: PUSH
22598: LD_INT 24
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: LD_INT 27
22609: PUSH
22610: LD_INT 28
22612: PUSH
22613: LD_INT 30
22615: PUSH
22616: LD_INT 31
22618: PUSH
22619: LD_INT 32
22621: PUSH
22622: LD_INT 33
22624: PUSH
22625: LD_INT 34
22627: PUSH
22628: LD_INT 36
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: ST_TO_ADDR
22726: GO 23893
22728: LD_INT 14
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22736
22734: GO 22948
22736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22737: LD_ADDR_VAR 0 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: LD_INT 4
22753: PUSH
22754: LD_INT 5
22756: PUSH
22757: LD_INT 6
22759: PUSH
22760: LD_INT 7
22762: PUSH
22763: LD_INT 8
22765: PUSH
22766: LD_INT 9
22768: PUSH
22769: LD_INT 10
22771: PUSH
22772: LD_INT 11
22774: PUSH
22775: LD_INT 12
22777: PUSH
22778: LD_INT 13
22780: PUSH
22781: LD_INT 14
22783: PUSH
22784: LD_INT 15
22786: PUSH
22787: LD_INT 16
22789: PUSH
22790: LD_INT 17
22792: PUSH
22793: LD_INT 18
22795: PUSH
22796: LD_INT 19
22798: PUSH
22799: LD_INT 20
22801: PUSH
22802: LD_INT 21
22804: PUSH
22805: LD_INT 22
22807: PUSH
22808: LD_INT 23
22810: PUSH
22811: LD_INT 24
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 26
22819: PUSH
22820: LD_INT 27
22822: PUSH
22823: LD_INT 28
22825: PUSH
22826: LD_INT 29
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 31
22834: PUSH
22835: LD_INT 32
22837: PUSH
22838: LD_INT 33
22840: PUSH
22841: LD_INT 34
22843: PUSH
22844: LD_INT 36
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 101
22886: PUSH
22887: LD_INT 102
22889: PUSH
22890: LD_INT 103
22892: PUSH
22893: LD_INT 104
22895: PUSH
22896: LD_INT 105
22898: PUSH
22899: LD_INT 106
22901: PUSH
22902: LD_INT 107
22904: PUSH
22905: LD_INT 108
22907: PUSH
22908: LD_INT 109
22910: PUSH
22911: LD_INT 110
22913: PUSH
22914: LD_INT 111
22916: PUSH
22917: LD_INT 112
22919: PUSH
22920: LD_INT 113
22922: PUSH
22923: LD_INT 114
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: ST_TO_ADDR
22946: GO 23893
22948: LD_INT 15
22950: DOUBLE
22951: EQUAL
22952: IFTRUE 22956
22954: GO 23168
22956: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22957: LD_ADDR_VAR 0 1
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 3
22970: PUSH
22971: LD_INT 4
22973: PUSH
22974: LD_INT 5
22976: PUSH
22977: LD_INT 6
22979: PUSH
22980: LD_INT 7
22982: PUSH
22983: LD_INT 8
22985: PUSH
22986: LD_INT 9
22988: PUSH
22989: LD_INT 10
22991: PUSH
22992: LD_INT 11
22994: PUSH
22995: LD_INT 12
22997: PUSH
22998: LD_INT 13
23000: PUSH
23001: LD_INT 14
23003: PUSH
23004: LD_INT 15
23006: PUSH
23007: LD_INT 16
23009: PUSH
23010: LD_INT 17
23012: PUSH
23013: LD_INT 18
23015: PUSH
23016: LD_INT 19
23018: PUSH
23019: LD_INT 20
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 22
23027: PUSH
23028: LD_INT 23
23030: PUSH
23031: LD_INT 24
23033: PUSH
23034: LD_INT 25
23036: PUSH
23037: LD_INT 26
23039: PUSH
23040: LD_INT 27
23042: PUSH
23043: LD_INT 28
23045: PUSH
23046: LD_INT 29
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 31
23054: PUSH
23055: LD_INT 32
23057: PUSH
23058: LD_INT 33
23060: PUSH
23061: LD_INT 34
23063: PUSH
23064: LD_INT 36
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 101
23106: PUSH
23107: LD_INT 102
23109: PUSH
23110: LD_INT 103
23112: PUSH
23113: LD_INT 104
23115: PUSH
23116: LD_INT 105
23118: PUSH
23119: LD_INT 106
23121: PUSH
23122: LD_INT 107
23124: PUSH
23125: LD_INT 108
23127: PUSH
23128: LD_INT 109
23130: PUSH
23131: LD_INT 110
23133: PUSH
23134: LD_INT 111
23136: PUSH
23137: LD_INT 112
23139: PUSH
23140: LD_INT 113
23142: PUSH
23143: LD_INT 114
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: ST_TO_ADDR
23166: GO 23893
23168: LD_INT 16
23170: DOUBLE
23171: EQUAL
23172: IFTRUE 23176
23174: GO 23300
23176: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23177: LD_ADDR_VAR 0 1
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 4
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: LD_INT 7
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 15
23202: PUSH
23203: LD_INT 16
23205: PUSH
23206: LD_INT 20
23208: PUSH
23209: LD_INT 21
23211: PUSH
23212: LD_INT 22
23214: PUSH
23215: LD_INT 23
23217: PUSH
23218: LD_INT 25
23220: PUSH
23221: LD_INT 26
23223: PUSH
23224: LD_INT 30
23226: PUSH
23227: LD_INT 31
23229: PUSH
23230: LD_INT 32
23232: PUSH
23233: LD_INT 33
23235: PUSH
23236: LD_INT 34
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 101
23262: PUSH
23263: LD_INT 102
23265: PUSH
23266: LD_INT 103
23268: PUSH
23269: LD_INT 106
23271: PUSH
23272: LD_INT 108
23274: PUSH
23275: LD_INT 112
23277: PUSH
23278: LD_INT 113
23280: PUSH
23281: LD_INT 114
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: ST_TO_ADDR
23298: GO 23893
23300: LD_INT 17
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23308
23306: GO 23520
23308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23309: LD_ADDR_VAR 0 1
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: LD_INT 4
23325: PUSH
23326: LD_INT 5
23328: PUSH
23329: LD_INT 6
23331: PUSH
23332: LD_INT 7
23334: PUSH
23335: LD_INT 8
23337: PUSH
23338: LD_INT 9
23340: PUSH
23341: LD_INT 10
23343: PUSH
23344: LD_INT 11
23346: PUSH
23347: LD_INT 12
23349: PUSH
23350: LD_INT 13
23352: PUSH
23353: LD_INT 14
23355: PUSH
23356: LD_INT 15
23358: PUSH
23359: LD_INT 16
23361: PUSH
23362: LD_INT 17
23364: PUSH
23365: LD_INT 18
23367: PUSH
23368: LD_INT 19
23370: PUSH
23371: LD_INT 20
23373: PUSH
23374: LD_INT 21
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_INT 23
23382: PUSH
23383: LD_INT 24
23385: PUSH
23386: LD_INT 25
23388: PUSH
23389: LD_INT 26
23391: PUSH
23392: LD_INT 27
23394: PUSH
23395: LD_INT 28
23397: PUSH
23398: LD_INT 29
23400: PUSH
23401: LD_INT 30
23403: PUSH
23404: LD_INT 31
23406: PUSH
23407: LD_INT 32
23409: PUSH
23410: LD_INT 33
23412: PUSH
23413: LD_INT 34
23415: PUSH
23416: LD_INT 36
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 101
23458: PUSH
23459: LD_INT 102
23461: PUSH
23462: LD_INT 103
23464: PUSH
23465: LD_INT 104
23467: PUSH
23468: LD_INT 105
23470: PUSH
23471: LD_INT 106
23473: PUSH
23474: LD_INT 107
23476: PUSH
23477: LD_INT 108
23479: PUSH
23480: LD_INT 109
23482: PUSH
23483: LD_INT 110
23485: PUSH
23486: LD_INT 111
23488: PUSH
23489: LD_INT 112
23491: PUSH
23492: LD_INT 113
23494: PUSH
23495: LD_INT 114
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: ST_TO_ADDR
23518: GO 23893
23520: LD_INT 18
23522: DOUBLE
23523: EQUAL
23524: IFTRUE 23528
23526: GO 23664
23528: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23529: LD_ADDR_VAR 0 1
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: LD_INT 4
23539: PUSH
23540: LD_INT 5
23542: PUSH
23543: LD_INT 7
23545: PUSH
23546: LD_INT 11
23548: PUSH
23549: LD_INT 12
23551: PUSH
23552: LD_INT 15
23554: PUSH
23555: LD_INT 16
23557: PUSH
23558: LD_INT 20
23560: PUSH
23561: LD_INT 21
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_INT 23
23569: PUSH
23570: LD_INT 25
23572: PUSH
23573: LD_INT 26
23575: PUSH
23576: LD_INT 30
23578: PUSH
23579: LD_INT 31
23581: PUSH
23582: LD_INT 32
23584: PUSH
23585: LD_INT 33
23587: PUSH
23588: LD_INT 34
23590: PUSH
23591: LD_INT 35
23593: PUSH
23594: LD_INT 36
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 101
23622: PUSH
23623: LD_INT 102
23625: PUSH
23626: LD_INT 103
23628: PUSH
23629: LD_INT 106
23631: PUSH
23632: LD_INT 108
23634: PUSH
23635: LD_INT 112
23637: PUSH
23638: LD_INT 113
23640: PUSH
23641: LD_INT 114
23643: PUSH
23644: LD_INT 115
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 23893
23664: LD_INT 19
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23892
23672: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23673: LD_ADDR_VAR 0 1
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 3
23686: PUSH
23687: LD_INT 4
23689: PUSH
23690: LD_INT 5
23692: PUSH
23693: LD_INT 6
23695: PUSH
23696: LD_INT 7
23698: PUSH
23699: LD_INT 8
23701: PUSH
23702: LD_INT 9
23704: PUSH
23705: LD_INT 10
23707: PUSH
23708: LD_INT 11
23710: PUSH
23711: LD_INT 12
23713: PUSH
23714: LD_INT 13
23716: PUSH
23717: LD_INT 14
23719: PUSH
23720: LD_INT 15
23722: PUSH
23723: LD_INT 16
23725: PUSH
23726: LD_INT 17
23728: PUSH
23729: LD_INT 18
23731: PUSH
23732: LD_INT 19
23734: PUSH
23735: LD_INT 20
23737: PUSH
23738: LD_INT 21
23740: PUSH
23741: LD_INT 22
23743: PUSH
23744: LD_INT 23
23746: PUSH
23747: LD_INT 24
23749: PUSH
23750: LD_INT 25
23752: PUSH
23753: LD_INT 26
23755: PUSH
23756: LD_INT 27
23758: PUSH
23759: LD_INT 28
23761: PUSH
23762: LD_INT 29
23764: PUSH
23765: LD_INT 30
23767: PUSH
23768: LD_INT 31
23770: PUSH
23771: LD_INT 32
23773: PUSH
23774: LD_INT 33
23776: PUSH
23777: LD_INT 34
23779: PUSH
23780: LD_INT 35
23782: PUSH
23783: LD_INT 36
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 101
23826: PUSH
23827: LD_INT 102
23829: PUSH
23830: LD_INT 103
23832: PUSH
23833: LD_INT 104
23835: PUSH
23836: LD_INT 105
23838: PUSH
23839: LD_INT 106
23841: PUSH
23842: LD_INT 107
23844: PUSH
23845: LD_INT 108
23847: PUSH
23848: LD_INT 109
23850: PUSH
23851: LD_INT 110
23853: PUSH
23854: LD_INT 111
23856: PUSH
23857: LD_INT 112
23859: PUSH
23860: LD_INT 113
23862: PUSH
23863: LD_INT 114
23865: PUSH
23866: LD_INT 115
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 23893
23892: POP
// end else
23893: GO 24112
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23895: LD_ADDR_VAR 0 1
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 3
23908: PUSH
23909: LD_INT 4
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 6
23917: PUSH
23918: LD_INT 7
23920: PUSH
23921: LD_INT 8
23923: PUSH
23924: LD_INT 9
23926: PUSH
23927: LD_INT 10
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: LD_INT 12
23935: PUSH
23936: LD_INT 13
23938: PUSH
23939: LD_INT 14
23941: PUSH
23942: LD_INT 15
23944: PUSH
23945: LD_INT 16
23947: PUSH
23948: LD_INT 17
23950: PUSH
23951: LD_INT 18
23953: PUSH
23954: LD_INT 19
23956: PUSH
23957: LD_INT 20
23959: PUSH
23960: LD_INT 21
23962: PUSH
23963: LD_INT 22
23965: PUSH
23966: LD_INT 23
23968: PUSH
23969: LD_INT 24
23971: PUSH
23972: LD_INT 25
23974: PUSH
23975: LD_INT 26
23977: PUSH
23978: LD_INT 27
23980: PUSH
23981: LD_INT 28
23983: PUSH
23984: LD_INT 29
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: LD_INT 31
23992: PUSH
23993: LD_INT 32
23995: PUSH
23996: LD_INT 33
23998: PUSH
23999: LD_INT 34
24001: PUSH
24002: LD_INT 35
24004: PUSH
24005: LD_INT 36
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 101
24048: PUSH
24049: LD_INT 102
24051: PUSH
24052: LD_INT 103
24054: PUSH
24055: LD_INT 104
24057: PUSH
24058: LD_INT 105
24060: PUSH
24061: LD_INT 106
24063: PUSH
24064: LD_INT 107
24066: PUSH
24067: LD_INT 108
24069: PUSH
24070: LD_INT 109
24072: PUSH
24073: LD_INT 110
24075: PUSH
24076: LD_INT 111
24078: PUSH
24079: LD_INT 112
24081: PUSH
24082: LD_INT 113
24084: PUSH
24085: LD_INT 114
24087: PUSH
24088: LD_INT 115
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// if result then
24112: LD_VAR 0 1
24116: IFFALSE 24405
// begin normal :=  ;
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_STRING 
24125: ST_TO_ADDR
// hardcore :=  ;
24126: LD_ADDR_VAR 0 4
24130: PUSH
24131: LD_STRING 
24133: ST_TO_ADDR
// for i = 1 to normalCounter do
24134: LD_ADDR_VAR 0 5
24138: PUSH
24139: DOUBLE
24140: LD_INT 1
24142: DEC
24143: ST_TO_ADDR
24144: LD_EXP 68
24148: PUSH
24149: FOR_TO
24150: IFFALSE 24251
// begin tmp := 0 ;
24152: LD_ADDR_VAR 0 2
24156: PUSH
24157: LD_STRING 0
24159: ST_TO_ADDR
// if result [ 1 ] then
24160: LD_VAR 0 1
24164: PUSH
24165: LD_INT 1
24167: ARRAY
24168: IFFALSE 24233
// if result [ 1 ] [ 1 ] = i then
24170: LD_VAR 0 1
24174: PUSH
24175: LD_INT 1
24177: ARRAY
24178: PUSH
24179: LD_INT 1
24181: ARRAY
24182: PUSH
24183: LD_VAR 0 5
24187: EQUAL
24188: IFFALSE 24233
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24190: LD_ADDR_VAR 0 1
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: LD_VAR 0 1
24207: PUSH
24208: LD_INT 1
24210: ARRAY
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 3
24219: PPUSH
24220: CALL_OW 1
24224: ST_TO_ADDR
// tmp := 1 ;
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_STRING 1
24232: ST_TO_ADDR
// end ; normal := normal & tmp ;
24233: LD_ADDR_VAR 0 3
24237: PUSH
24238: LD_VAR 0 3
24242: PUSH
24243: LD_VAR 0 2
24247: STR
24248: ST_TO_ADDR
// end ;
24249: GO 24149
24251: POP
24252: POP
// for i = 1 to hardcoreCounter do
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: DOUBLE
24259: LD_INT 1
24261: DEC
24262: ST_TO_ADDR
24263: LD_EXP 69
24267: PUSH
24268: FOR_TO
24269: IFFALSE 24374
// begin tmp := 0 ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_STRING 0
24278: ST_TO_ADDR
// if result [ 2 ] then
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 2
24286: ARRAY
24287: IFFALSE 24356
// if result [ 2 ] [ 1 ] = 100 + i then
24289: LD_VAR 0 1
24293: PUSH
24294: LD_INT 2
24296: ARRAY
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PUSH
24302: LD_INT 100
24304: PUSH
24305: LD_VAR 0 5
24309: PLUS
24310: EQUAL
24311: IFFALSE 24356
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24313: LD_ADDR_VAR 0 1
24317: PUSH
24318: LD_VAR 0 1
24322: PPUSH
24323: LD_INT 2
24325: PPUSH
24326: LD_VAR 0 1
24330: PUSH
24331: LD_INT 2
24333: ARRAY
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 3
24342: PPUSH
24343: CALL_OW 1
24347: ST_TO_ADDR
// tmp := 1 ;
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_STRING 1
24355: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 4
24365: PUSH
24366: LD_VAR 0 2
24370: STR
24371: ST_TO_ADDR
// end ;
24372: GO 24268
24374: POP
24375: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24376: LD_STRING getStreamItemsFromMission("
24378: PUSH
24379: LD_VAR 0 3
24383: STR
24384: PUSH
24385: LD_STRING ","
24387: STR
24388: PUSH
24389: LD_VAR 0 4
24393: STR
24394: PUSH
24395: LD_STRING ")
24397: STR
24398: PPUSH
24399: CALL_OW 559
// end else
24403: GO 24412
// ToLua ( getStreamItemsFromMission("","") ) ;
24405: LD_STRING getStreamItemsFromMission("","")
24407: PPUSH
24408: CALL_OW 559
// end ;
24412: LD_VAR 0 1
24416: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24417: LD_EXP 67
24421: PUSH
24422: LD_EXP 72
24426: AND
24427: IFFALSE 24551
24429: GO 24431
24431: DISABLE
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
// begin enable ;
24436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 34
24459: PUSH
24460: LD_INT 7
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 34
24469: PUSH
24470: LD_INT 45
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 34
24479: PUSH
24480: LD_INT 28
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 34
24489: PUSH
24490: LD_INT 47
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PPUSH
24508: CALL_OW 69
24512: ST_TO_ADDR
// if not tmp then
24513: LD_VAR 0 2
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 24551
// for i in tmp do
24522: LD_ADDR_VAR 0 1
24526: PUSH
24527: LD_VAR 0 2
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24549
// begin SetLives ( i , 0 ) ;
24535: LD_VAR 0 1
24539: PPUSH
24540: LD_INT 0
24542: PPUSH
24543: CALL_OW 234
// end ;
24547: GO 24532
24549: POP
24550: POP
// end ;
24551: PPOPN 2
24553: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24554: LD_EXP 67
24558: PUSH
24559: LD_EXP 73
24563: AND
24564: IFFALSE 24648
24566: GO 24568
24568: DISABLE
24569: LD_INT 0
24571: PPUSH
24572: PPUSH
// begin enable ;
24573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_INT 22
24581: PUSH
24582: LD_OWVAR 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 32
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PPUSH
24605: CALL_OW 69
24609: ST_TO_ADDR
// if not tmp then
24610: LD_VAR 0 2
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24648
// for i in tmp do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24646
// begin SetLives ( i , 0 ) ;
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_INT 0
24639: PPUSH
24640: CALL_OW 234
// end ;
24644: GO 24629
24646: POP
24647: POP
// end ;
24648: PPOPN 2
24650: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24651: LD_EXP 67
24655: PUSH
24656: LD_EXP 70
24660: AND
24661: IFFALSE 24754
24663: GO 24665
24665: DISABLE
24666: LD_INT 0
24668: PPUSH
// begin enable ;
24669: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24670: LD_ADDR_VAR 0 1
24674: PUSH
24675: LD_INT 22
24677: PUSH
24678: LD_OWVAR 2
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: LD_INT 25
24692: PUSH
24693: LD_INT 5
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 25
24702: PUSH
24703: LD_INT 9
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 25
24712: PUSH
24713: LD_INT 8
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: CALL_OW 69
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// begin SetClass ( i , 1 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 1
24745: PPUSH
24746: CALL_OW 336
// end ;
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 1
24756: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24757: LD_EXP 67
24761: PUSH
24762: LD_EXP 71
24766: AND
24767: PUSH
24768: LD_OWVAR 65
24772: PUSH
24773: LD_INT 7
24775: LESS
24776: AND
24777: IFFALSE 24791
24779: GO 24781
24781: DISABLE
// begin enable ;
24782: ENABLE
// game_speed := 7 ;
24783: LD_ADDR_OWVAR 65
24787: PUSH
24788: LD_INT 7
24790: ST_TO_ADDR
// end ;
24791: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24792: LD_EXP 67
24796: PUSH
24797: LD_EXP 74
24801: AND
24802: IFFALSE 25004
24804: GO 24806
24806: DISABLE
24807: LD_INT 0
24809: PPUSH
24810: PPUSH
24811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_INT 81
24819: PUSH
24820: LD_OWVAR 2
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 21
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PPUSH
24843: CALL_OW 69
24847: ST_TO_ADDR
// if not tmp then
24848: LD_VAR 0 3
24852: NOT
24853: IFFALSE 24857
// exit ;
24855: GO 25004
// if tmp > 5 then
24857: LD_VAR 0 3
24861: PUSH
24862: LD_INT 5
24864: GREATER
24865: IFFALSE 24877
// k := 5 else
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: LD_INT 5
24874: ST_TO_ADDR
24875: GO 24887
// k := tmp ;
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: LD_VAR 0 3
24886: ST_TO_ADDR
// for i := 1 to k do
24887: LD_ADDR_VAR 0 1
24891: PUSH
24892: DOUBLE
24893: LD_INT 1
24895: DEC
24896: ST_TO_ADDR
24897: LD_VAR 0 2
24901: PUSH
24902: FOR_TO
24903: IFFALSE 25002
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24905: LD_VAR 0 3
24909: PUSH
24910: LD_VAR 0 1
24914: ARRAY
24915: PPUSH
24916: LD_VAR 0 1
24920: PUSH
24921: LD_INT 4
24923: MOD
24924: PUSH
24925: LD_INT 1
24927: PLUS
24928: PPUSH
24929: CALL_OW 259
24933: PUSH
24934: LD_INT 10
24936: LESS
24937: IFFALSE 25000
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24939: LD_VAR 0 3
24943: PUSH
24944: LD_VAR 0 1
24948: ARRAY
24949: PPUSH
24950: LD_VAR 0 1
24954: PUSH
24955: LD_INT 4
24957: MOD
24958: PUSH
24959: LD_INT 1
24961: PLUS
24962: PPUSH
24963: LD_VAR 0 3
24967: PUSH
24968: LD_VAR 0 1
24972: ARRAY
24973: PPUSH
24974: LD_VAR 0 1
24978: PUSH
24979: LD_INT 4
24981: MOD
24982: PUSH
24983: LD_INT 1
24985: PLUS
24986: PPUSH
24987: CALL_OW 259
24991: PUSH
24992: LD_INT 1
24994: PLUS
24995: PPUSH
24996: CALL_OW 237
25000: GO 24902
25002: POP
25003: POP
// end ;
25004: PPOPN 3
25006: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25007: LD_EXP 67
25011: PUSH
25012: LD_EXP 75
25016: AND
25017: IFFALSE 25037
25019: GO 25021
25021: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25022: LD_INT 4
25024: PPUSH
25025: LD_OWVAR 2
25029: PPUSH
25030: LD_INT 0
25032: PPUSH
25033: CALL_OW 324
25037: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25038: LD_EXP 67
25042: PUSH
25043: LD_EXP 104
25047: AND
25048: IFFALSE 25068
25050: GO 25052
25052: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25053: LD_INT 19
25055: PPUSH
25056: LD_OWVAR 2
25060: PPUSH
25061: LD_INT 0
25063: PPUSH
25064: CALL_OW 324
25068: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25069: LD_EXP 67
25073: PUSH
25074: LD_EXP 76
25078: AND
25079: IFFALSE 25181
25081: GO 25083
25083: DISABLE
25084: LD_INT 0
25086: PPUSH
25087: PPUSH
// begin enable ;
25088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_INT 22
25096: PUSH
25097: LD_OWVAR 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 34
25111: PUSH
25112: LD_INT 11
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 34
25121: PUSH
25122: LD_INT 30
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if not tmp then
25143: LD_VAR 0 2
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25181
// for i in tmp do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: LD_VAR 0 2
25161: PUSH
25162: FOR_IN
25163: IFFALSE 25179
// begin SetLives ( i , 0 ) ;
25165: LD_VAR 0 1
25169: PPUSH
25170: LD_INT 0
25172: PPUSH
25173: CALL_OW 234
// end ;
25177: GO 25162
25179: POP
25180: POP
// end ;
25181: PPOPN 2
25183: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25184: LD_EXP 67
25188: PUSH
25189: LD_EXP 77
25193: AND
25194: IFFALSE 25214
25196: GO 25198
25198: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25199: LD_INT 32
25201: PPUSH
25202: LD_OWVAR 2
25206: PPUSH
25207: LD_INT 0
25209: PPUSH
25210: CALL_OW 324
25214: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25215: LD_EXP 67
25219: PUSH
25220: LD_EXP 78
25224: AND
25225: IFFALSE 25406
25227: GO 25229
25229: DISABLE
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25235: LD_ADDR_VAR 0 2
25239: PUSH
25240: LD_INT 22
25242: PUSH
25243: LD_OWVAR 2
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 33
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 69
25270: ST_TO_ADDR
// if not tmp then
25271: LD_VAR 0 2
25275: NOT
25276: IFFALSE 25280
// exit ;
25278: GO 25406
// side := 0 ;
25280: LD_ADDR_VAR 0 3
25284: PUSH
25285: LD_INT 0
25287: ST_TO_ADDR
// for i := 1 to 8 do
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: DOUBLE
25294: LD_INT 1
25296: DEC
25297: ST_TO_ADDR
25298: LD_INT 8
25300: PUSH
25301: FOR_TO
25302: IFFALSE 25350
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25304: LD_OWVAR 2
25308: PUSH
25309: LD_VAR 0 1
25313: NONEQUAL
25314: PUSH
25315: LD_OWVAR 2
25319: PPUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: CALL_OW 81
25329: PUSH
25330: LD_INT 2
25332: EQUAL
25333: AND
25334: IFFALSE 25348
// begin side := i ;
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_VAR 0 1
25345: ST_TO_ADDR
// break ;
25346: GO 25350
// end ;
25348: GO 25301
25350: POP
25351: POP
// if not side then
25352: LD_VAR 0 3
25356: NOT
25357: IFFALSE 25361
// exit ;
25359: GO 25406
// for i := 1 to tmp do
25361: LD_ADDR_VAR 0 1
25365: PUSH
25366: DOUBLE
25367: LD_INT 1
25369: DEC
25370: ST_TO_ADDR
25371: LD_VAR 0 2
25375: PUSH
25376: FOR_TO
25377: IFFALSE 25404
// if Prob ( 60 ) then
25379: LD_INT 60
25381: PPUSH
25382: CALL_OW 13
25386: IFFALSE 25402
// SetSide ( i , side ) ;
25388: LD_VAR 0 1
25392: PPUSH
25393: LD_VAR 0 3
25397: PPUSH
25398: CALL_OW 235
25402: GO 25376
25404: POP
25405: POP
// end ;
25406: PPOPN 3
25408: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25409: LD_EXP 67
25413: PUSH
25414: LD_EXP 80
25418: AND
25419: IFFALSE 25538
25421: GO 25423
25423: DISABLE
25424: LD_INT 0
25426: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25427: LD_ADDR_VAR 0 1
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_OWVAR 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 21
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: PUSH
25457: LD_INT 23
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 69
25480: PUSH
25481: FOR_IN
25482: IFFALSE 25536
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 257
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 4
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: IN
25512: IFFALSE 25534
// SetClass ( un , rand ( 1 , 4 ) ) ;
25514: LD_VAR 0 1
25518: PPUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_INT 4
25524: PPUSH
25525: CALL_OW 12
25529: PPUSH
25530: CALL_OW 336
25534: GO 25481
25536: POP
25537: POP
// end ;
25538: PPOPN 1
25540: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25541: LD_EXP 67
25545: PUSH
25546: LD_EXP 79
25550: AND
25551: IFFALSE 25630
25553: GO 25555
25555: DISABLE
25556: LD_INT 0
25558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25559: LD_ADDR_VAR 0 1
25563: PUSH
25564: LD_INT 22
25566: PUSH
25567: LD_OWVAR 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 21
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PPUSH
25590: CALL_OW 69
25594: ST_TO_ADDR
// if not tmp then
25595: LD_VAR 0 1
25599: NOT
25600: IFFALSE 25604
// exit ;
25602: GO 25630
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25604: LD_VAR 0 1
25608: PUSH
25609: LD_INT 1
25611: PPUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL_OW 12
25621: ARRAY
25622: PPUSH
25623: LD_INT 100
25625: PPUSH
25626: CALL_OW 234
// end ;
25630: PPOPN 1
25632: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25633: LD_EXP 67
25637: PUSH
25638: LD_EXP 81
25642: AND
25643: IFFALSE 25741
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25651: LD_ADDR_VAR 0 1
25655: PUSH
25656: LD_INT 22
25658: PUSH
25659: LD_OWVAR 2
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PPUSH
25682: CALL_OW 69
25686: ST_TO_ADDR
// if not tmp then
25687: LD_VAR 0 1
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 25741
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25696: LD_VAR 0 1
25700: PUSH
25701: LD_INT 1
25703: PPUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 12
25713: ARRAY
25714: PPUSH
25715: LD_INT 1
25717: PPUSH
25718: LD_INT 4
25720: PPUSH
25721: CALL_OW 12
25725: PPUSH
25726: LD_INT 3000
25728: PPUSH
25729: LD_INT 9000
25731: PPUSH
25732: CALL_OW 12
25736: PPUSH
25737: CALL_OW 492
// end ;
25741: PPOPN 1
25743: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25744: LD_EXP 67
25748: PUSH
25749: LD_EXP 82
25753: AND
25754: IFFALSE 25774
25756: GO 25758
25758: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25759: LD_INT 1
25761: PPUSH
25762: LD_OWVAR 2
25766: PPUSH
25767: LD_INT 0
25769: PPUSH
25770: CALL_OW 324
25774: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25775: LD_EXP 67
25779: PUSH
25780: LD_EXP 83
25784: AND
25785: IFFALSE 25868
25787: GO 25789
25789: DISABLE
25790: LD_INT 0
25792: PPUSH
25793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25794: LD_ADDR_VAR 0 2
25798: PUSH
25799: LD_INT 22
25801: PUSH
25802: LD_OWVAR 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 21
25813: PUSH
25814: LD_INT 3
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PPUSH
25825: CALL_OW 69
25829: ST_TO_ADDR
// if not tmp then
25830: LD_VAR 0 2
25834: NOT
25835: IFFALSE 25839
// exit ;
25837: GO 25868
// for i in tmp do
25839: LD_ADDR_VAR 0 1
25843: PUSH
25844: LD_VAR 0 2
25848: PUSH
25849: FOR_IN
25850: IFFALSE 25866
// SetBLevel ( i , 10 ) ;
25852: LD_VAR 0 1
25856: PPUSH
25857: LD_INT 10
25859: PPUSH
25860: CALL_OW 241
25864: GO 25849
25866: POP
25867: POP
// end ;
25868: PPOPN 2
25870: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25871: LD_EXP 67
25875: PUSH
25876: LD_EXP 84
25880: AND
25881: IFFALSE 25992
25883: GO 25885
25885: DISABLE
25886: LD_INT 0
25888: PPUSH
25889: PPUSH
25890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_OWVAR 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 25
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 3
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 25992
// un := tmp [ rand ( 1 , tmp ) ] ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 1
25948: PPUSH
25949: LD_VAR 0 3
25953: PPUSH
25954: CALL_OW 12
25958: ARRAY
25959: ST_TO_ADDR
// if Crawls ( un ) then
25960: LD_VAR 0 2
25964: PPUSH
25965: CALL_OW 318
25969: IFFALSE 25980
// ComWalk ( un ) ;
25971: LD_VAR 0 2
25975: PPUSH
25976: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25980: LD_VAR 0 2
25984: PPUSH
25985: LD_INT 5
25987: PPUSH
25988: CALL_OW 336
// end ;
25992: PPOPN 3
25994: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25995: LD_EXP 67
25999: PUSH
26000: LD_EXP 85
26004: AND
26005: PUSH
26006: LD_OWVAR 67
26010: PUSH
26011: LD_INT 3
26013: LESS
26014: AND
26015: IFFALSE 26034
26017: GO 26019
26019: DISABLE
// Difficulty := Difficulty + 1 ;
26020: LD_ADDR_OWVAR 67
26024: PUSH
26025: LD_OWVAR 67
26029: PUSH
26030: LD_INT 1
26032: PLUS
26033: ST_TO_ADDR
26034: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26035: LD_EXP 67
26039: PUSH
26040: LD_EXP 86
26044: AND
26045: IFFALSE 26148
26047: GO 26049
26049: DISABLE
26050: LD_INT 0
26052: PPUSH
// begin for i := 1 to 5 do
26053: LD_ADDR_VAR 0 1
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_INT 5
26065: PUSH
26066: FOR_TO
26067: IFFALSE 26146
// begin uc_nation := nation_nature ;
26069: LD_ADDR_OWVAR 21
26073: PUSH
26074: LD_INT 0
26076: ST_TO_ADDR
// uc_side := 0 ;
26077: LD_ADDR_OWVAR 20
26081: PUSH
26082: LD_INT 0
26084: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26085: LD_ADDR_OWVAR 29
26089: PUSH
26090: LD_INT 12
26092: PUSH
26093: LD_INT 12
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// hc_agressivity := 20 ;
26100: LD_ADDR_OWVAR 35
26104: PUSH
26105: LD_INT 20
26107: ST_TO_ADDR
// hc_class := class_tiger ;
26108: LD_ADDR_OWVAR 28
26112: PUSH
26113: LD_INT 14
26115: ST_TO_ADDR
// hc_gallery :=  ;
26116: LD_ADDR_OWVAR 33
26120: PUSH
26121: LD_STRING 
26123: ST_TO_ADDR
// hc_name :=  ;
26124: LD_ADDR_OWVAR 26
26128: PUSH
26129: LD_STRING 
26131: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26132: CALL_OW 44
26136: PPUSH
26137: LD_INT 0
26139: PPUSH
26140: CALL_OW 51
// end ;
26144: GO 26066
26146: POP
26147: POP
// end ;
26148: PPOPN 1
26150: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26151: LD_EXP 67
26155: PUSH
26156: LD_EXP 87
26160: AND
26161: IFFALSE 26170
26163: GO 26165
26165: DISABLE
// StreamSibBomb ;
26166: CALL 26171 0 0
26170: END
// export function StreamSibBomb ; var i , x , y ; begin
26171: LD_INT 0
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
// result := false ;
26177: LD_ADDR_VAR 0 1
26181: PUSH
26182: LD_INT 0
26184: ST_TO_ADDR
// for i := 1 to 16 do
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: DOUBLE
26191: LD_INT 1
26193: DEC
26194: ST_TO_ADDR
26195: LD_INT 16
26197: PUSH
26198: FOR_TO
26199: IFFALSE 26398
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26201: LD_ADDR_VAR 0 3
26205: PUSH
26206: LD_INT 10
26208: PUSH
26209: LD_INT 20
26211: PUSH
26212: LD_INT 30
26214: PUSH
26215: LD_INT 40
26217: PUSH
26218: LD_INT 50
26220: PUSH
26221: LD_INT 60
26223: PUSH
26224: LD_INT 70
26226: PUSH
26227: LD_INT 80
26229: PUSH
26230: LD_INT 90
26232: PUSH
26233: LD_INT 100
26235: PUSH
26236: LD_INT 110
26238: PUSH
26239: LD_INT 120
26241: PUSH
26242: LD_INT 130
26244: PUSH
26245: LD_INT 140
26247: PUSH
26248: LD_INT 150
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: PPUSH
26271: LD_INT 15
26273: PPUSH
26274: CALL_OW 12
26278: ARRAY
26279: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 10
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 40
26296: PUSH
26297: LD_INT 50
26299: PUSH
26300: LD_INT 60
26302: PUSH
26303: LD_INT 70
26305: PUSH
26306: LD_INT 80
26308: PUSH
26309: LD_INT 90
26311: PUSH
26312: LD_INT 100
26314: PUSH
26315: LD_INT 110
26317: PUSH
26318: LD_INT 120
26320: PUSH
26321: LD_INT 130
26323: PUSH
26324: LD_INT 140
26326: PUSH
26327: LD_INT 150
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: PPUSH
26350: LD_INT 15
26352: PPUSH
26353: CALL_OW 12
26357: ARRAY
26358: ST_TO_ADDR
// if ValidHex ( x , y ) then
26359: LD_VAR 0 3
26363: PPUSH
26364: LD_VAR 0 4
26368: PPUSH
26369: CALL_OW 488
26373: IFFALSE 26396
// begin result := [ x , y ] ;
26375: LD_ADDR_VAR 0 1
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_VAR 0 4
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: ST_TO_ADDR
// break ;
26394: GO 26398
// end ; end ;
26396: GO 26198
26398: POP
26399: POP
// if result then
26400: LD_VAR 0 1
26404: IFFALSE 26464
// begin ToLua ( playSibBomb() ) ;
26406: LD_STRING playSibBomb()
26408: PPUSH
26409: CALL_OW 559
// wait ( 0 0$14 ) ;
26413: LD_INT 490
26415: PPUSH
26416: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26420: LD_VAR 0 1
26424: PUSH
26425: LD_INT 1
26427: ARRAY
26428: PPUSH
26429: LD_VAR 0 1
26433: PUSH
26434: LD_INT 2
26436: ARRAY
26437: PPUSH
26438: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26442: LD_VAR 0 1
26446: PUSH
26447: LD_INT 1
26449: ARRAY
26450: PPUSH
26451: LD_VAR 0 1
26455: PUSH
26456: LD_INT 2
26458: ARRAY
26459: PPUSH
26460: CALL_OW 429
// end ; end ;
26464: LD_VAR 0 1
26468: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26469: LD_EXP 67
26473: PUSH
26474: LD_EXP 89
26478: AND
26479: IFFALSE 26491
26481: GO 26483
26483: DISABLE
// YouLost (  ) ;
26484: LD_STRING 
26486: PPUSH
26487: CALL_OW 104
26491: END
// every 0 0$1 trigger StreamModeActive and sFog do
26492: LD_EXP 67
26496: PUSH
26497: LD_EXP 88
26501: AND
26502: IFFALSE 26516
26504: GO 26506
26506: DISABLE
// FogOff ( your_side ) ;
26507: LD_OWVAR 2
26511: PPUSH
26512: CALL_OW 344
26516: END
// every 0 0$1 trigger StreamModeActive and sSun do
26517: LD_EXP 67
26521: PUSH
26522: LD_EXP 90
26526: AND
26527: IFFALSE 26555
26529: GO 26531
26531: DISABLE
// begin solar_recharge_percent := 0 ;
26532: LD_ADDR_OWVAR 79
26536: PUSH
26537: LD_INT 0
26539: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26540: LD_INT 10500
26542: PPUSH
26543: CALL_OW 67
// solar_recharge_percent := 100 ;
26547: LD_ADDR_OWVAR 79
26551: PUSH
26552: LD_INT 100
26554: ST_TO_ADDR
// end ;
26555: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26556: LD_EXP 67
26560: PUSH
26561: LD_EXP 91
26565: AND
26566: IFFALSE 26805
26568: GO 26570
26570: DISABLE
26571: LD_INT 0
26573: PPUSH
26574: PPUSH
26575: PPUSH
// begin tmp := [ ] ;
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: EMPTY
26582: ST_TO_ADDR
// for i := 1 to 6 do
26583: LD_ADDR_VAR 0 1
26587: PUSH
26588: DOUBLE
26589: LD_INT 1
26591: DEC
26592: ST_TO_ADDR
26593: LD_INT 6
26595: PUSH
26596: FOR_TO
26597: IFFALSE 26702
// begin uc_nation := nation_nature ;
26599: LD_ADDR_OWVAR 21
26603: PUSH
26604: LD_INT 0
26606: ST_TO_ADDR
// uc_side := 0 ;
26607: LD_ADDR_OWVAR 20
26611: PUSH
26612: LD_INT 0
26614: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26615: LD_ADDR_OWVAR 29
26619: PUSH
26620: LD_INT 12
26622: PUSH
26623: LD_INT 12
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// hc_agressivity := 20 ;
26630: LD_ADDR_OWVAR 35
26634: PUSH
26635: LD_INT 20
26637: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26638: LD_ADDR_OWVAR 28
26642: PUSH
26643: LD_INT 17
26645: ST_TO_ADDR
// hc_gallery :=  ;
26646: LD_ADDR_OWVAR 33
26650: PUSH
26651: LD_STRING 
26653: ST_TO_ADDR
// hc_name :=  ;
26654: LD_ADDR_OWVAR 26
26658: PUSH
26659: LD_STRING 
26661: ST_TO_ADDR
// un := CreateHuman ;
26662: LD_ADDR_VAR 0 2
26666: PUSH
26667: CALL_OW 44
26671: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26672: LD_VAR 0 2
26676: PPUSH
26677: LD_INT 1
26679: PPUSH
26680: CALL_OW 51
// tmp := tmp ^ un ;
26684: LD_ADDR_VAR 0 3
26688: PUSH
26689: LD_VAR 0 3
26693: PUSH
26694: LD_VAR 0 2
26698: ADD
26699: ST_TO_ADDR
// end ;
26700: GO 26596
26702: POP
26703: POP
// repeat wait ( 0 0$1 ) ;
26704: LD_INT 35
26706: PPUSH
26707: CALL_OW 67
// for un in tmp do
26711: LD_ADDR_VAR 0 2
26715: PUSH
26716: LD_VAR 0 3
26720: PUSH
26721: FOR_IN
26722: IFFALSE 26796
// begin if IsDead ( un ) then
26724: LD_VAR 0 2
26728: PPUSH
26729: CALL_OW 301
26733: IFFALSE 26753
// begin tmp := tmp diff un ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_VAR 0 3
26744: PUSH
26745: LD_VAR 0 2
26749: DIFF
26750: ST_TO_ADDR
// continue ;
26751: GO 26721
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26753: LD_VAR 0 2
26757: PPUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 69
26779: PPUSH
26780: LD_VAR 0 2
26784: PPUSH
26785: CALL_OW 74
26789: PPUSH
26790: CALL_OW 115
// end ;
26794: GO 26721
26796: POP
26797: POP
// until not tmp ;
26798: LD_VAR 0 3
26802: NOT
26803: IFFALSE 26704
// end ;
26805: PPOPN 3
26807: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26808: LD_EXP 67
26812: PUSH
26813: LD_EXP 92
26817: AND
26818: IFFALSE 26872
26820: GO 26822
26822: DISABLE
// begin ToLua ( displayTroll(); ) ;
26823: LD_STRING displayTroll();
26825: PPUSH
26826: CALL_OW 559
// wait ( 3 3$00 ) ;
26830: LD_INT 6300
26832: PPUSH
26833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26837: LD_STRING hideTroll();
26839: PPUSH
26840: CALL_OW 559
// wait ( 1 1$00 ) ;
26844: LD_INT 2100
26846: PPUSH
26847: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26851: LD_STRING displayTroll();
26853: PPUSH
26854: CALL_OW 559
// wait ( 1 1$00 ) ;
26858: LD_INT 2100
26860: PPUSH
26861: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26865: LD_STRING hideTroll();
26867: PPUSH
26868: CALL_OW 559
// end ;
26872: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26873: LD_EXP 67
26877: PUSH
26878: LD_EXP 93
26882: AND
26883: IFFALSE 26946
26885: GO 26887
26887: DISABLE
26888: LD_INT 0
26890: PPUSH
// begin p := 0 ;
26891: LD_ADDR_VAR 0 1
26895: PUSH
26896: LD_INT 0
26898: ST_TO_ADDR
// repeat game_speed := 1 ;
26899: LD_ADDR_OWVAR 65
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26907: LD_INT 35
26909: PPUSH
26910: CALL_OW 67
// p := p + 1 ;
26914: LD_ADDR_VAR 0 1
26918: PUSH
26919: LD_VAR 0 1
26923: PUSH
26924: LD_INT 1
26926: PLUS
26927: ST_TO_ADDR
// until p >= 60 ;
26928: LD_VAR 0 1
26932: PUSH
26933: LD_INT 60
26935: GREATEREQUAL
26936: IFFALSE 26899
// game_speed := 4 ;
26938: LD_ADDR_OWVAR 65
26942: PUSH
26943: LD_INT 4
26945: ST_TO_ADDR
// end ;
26946: PPOPN 1
26948: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26949: LD_EXP 67
26953: PUSH
26954: LD_EXP 94
26958: AND
26959: IFFALSE 27105
26961: GO 26963
26963: DISABLE
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26968: LD_ADDR_VAR 0 1
26972: PUSH
26973: LD_INT 22
26975: PUSH
26976: LD_OWVAR 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: LD_INT 30
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 30
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 69
27021: ST_TO_ADDR
// if not depot then
27022: LD_VAR 0 1
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 27105
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27031: LD_ADDR_VAR 0 2
27035: PUSH
27036: LD_VAR 0 1
27040: PUSH
27041: LD_INT 1
27043: PPUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 12
27053: ARRAY
27054: PPUSH
27055: CALL_OW 274
27059: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_INT 1
27067: PPUSH
27068: LD_INT 0
27070: PPUSH
27071: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27075: LD_VAR 0 2
27079: PPUSH
27080: LD_INT 2
27082: PPUSH
27083: LD_INT 0
27085: PPUSH
27086: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27090: LD_VAR 0 2
27094: PPUSH
27095: LD_INT 3
27097: PPUSH
27098: LD_INT 0
27100: PPUSH
27101: CALL_OW 277
// end ;
27105: PPOPN 2
27107: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27108: LD_EXP 67
27112: PUSH
27113: LD_EXP 95
27117: AND
27118: IFFALSE 27215
27120: GO 27122
27122: DISABLE
27123: LD_INT 0
27125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27126: LD_ADDR_VAR 0 1
27130: PUSH
27131: LD_INT 22
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 21
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: LD_INT 23
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: ST_TO_ADDR
// if not tmp then
27180: LD_VAR 0 1
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27189: LD_VAR 0 1
27193: PUSH
27194: LD_INT 1
27196: PPUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: CALL_OW 12
27206: ARRAY
27207: PPUSH
27208: LD_INT 200
27210: PPUSH
27211: CALL_OW 234
// end ;
27215: PPOPN 1
27217: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27218: LD_EXP 67
27222: PUSH
27223: LD_EXP 96
27227: AND
27228: IFFALSE 27307
27230: GO 27232
27232: DISABLE
27233: LD_INT 0
27235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27236: LD_ADDR_VAR 0 1
27240: PUSH
27241: LD_INT 22
27243: PUSH
27244: LD_OWVAR 2
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 21
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 69
27271: ST_TO_ADDR
// if not tmp then
27272: LD_VAR 0 1
27276: NOT
27277: IFFALSE 27281
// exit ;
27279: GO 27307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 1
27288: PPUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 12
27298: ARRAY
27299: PPUSH
27300: LD_INT 60
27302: PPUSH
27303: CALL_OW 234
// end ;
27307: PPOPN 1
27309: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27310: LD_EXP 67
27314: PUSH
27315: LD_EXP 97
27319: AND
27320: IFFALSE 27419
27322: GO 27324
27324: DISABLE
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
// begin enable ;
27329: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27330: LD_ADDR_VAR 0 1
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 61
27349: PUSH
27350: EMPTY
27351: LIST
27352: PUSH
27353: LD_INT 33
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: PPUSH
27368: CALL_OW 69
27372: ST_TO_ADDR
// if not tmp then
27373: LD_VAR 0 1
27377: NOT
27378: IFFALSE 27382
// exit ;
27380: GO 27419
// for i in tmp do
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 1
27391: PUSH
27392: FOR_IN
27393: IFFALSE 27417
// if IsControledBy ( i ) then
27395: LD_VAR 0 2
27399: PPUSH
27400: CALL_OW 312
27404: IFFALSE 27415
// ComUnlink ( i ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: CALL_OW 136
27415: GO 27392
27417: POP
27418: POP
// end ;
27419: PPOPN 2
27421: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27422: LD_EXP 67
27426: PUSH
27427: LD_EXP 98
27431: AND
27432: IFFALSE 27572
27434: GO 27436
27436: DISABLE
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
// begin ToLua ( displayPowell(); ) ;
27441: LD_STRING displayPowell();
27443: PPUSH
27444: CALL_OW 559
// uc_side := 0 ;
27448: LD_ADDR_OWVAR 20
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// uc_nation := 2 ;
27456: LD_ADDR_OWVAR 21
27460: PUSH
27461: LD_INT 2
27463: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27464: LD_ADDR_OWVAR 37
27468: PUSH
27469: LD_INT 14
27471: ST_TO_ADDR
// vc_engine := engine_siberite ;
27472: LD_ADDR_OWVAR 39
27476: PUSH
27477: LD_INT 3
27479: ST_TO_ADDR
// vc_control := control_apeman ;
27480: LD_ADDR_OWVAR 38
27484: PUSH
27485: LD_INT 5
27487: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27488: LD_ADDR_OWVAR 40
27492: PUSH
27493: LD_INT 29
27495: ST_TO_ADDR
// un := CreateVehicle ;
27496: LD_ADDR_VAR 0 2
27500: PUSH
27501: CALL_OW 45
27505: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27518: LD_INT 35
27520: PPUSH
27521: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27525: LD_VAR 0 2
27529: PPUSH
27530: LD_INT 22
27532: PUSH
27533: LD_OWVAR 2
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PPUSH
27547: LD_VAR 0 2
27551: PPUSH
27552: CALL_OW 74
27556: PPUSH
27557: CALL_OW 115
// until IsDead ( un ) ;
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL_OW 301
27570: IFFALSE 27518
// end ;
27572: PPOPN 2
27574: END
// every 0 0$1 trigger StreamModeActive and sStu do
27575: LD_EXP 67
27579: PUSH
27580: LD_EXP 106
27584: AND
27585: IFFALSE 27601
27587: GO 27589
27589: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27590: LD_STRING displayStucuk();
27592: PPUSH
27593: CALL_OW 559
// ResetFog ;
27597: CALL_OW 335
// end ;
27601: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27602: LD_EXP 67
27606: PUSH
27607: LD_EXP 99
27611: AND
27612: IFFALSE 27753
27614: GO 27616
27616: DISABLE
27617: LD_INT 0
27619: PPUSH
27620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27621: LD_ADDR_VAR 0 2
27625: PUSH
27626: LD_INT 22
27628: PUSH
27629: LD_OWVAR 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 21
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 69
27656: ST_TO_ADDR
// if not tmp then
27657: LD_VAR 0 2
27661: NOT
27662: IFFALSE 27666
// exit ;
27664: GO 27753
// un := tmp [ rand ( 1 , tmp ) ] ;
27666: LD_ADDR_VAR 0 1
27670: PUSH
27671: LD_VAR 0 2
27675: PUSH
27676: LD_INT 1
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL_OW 12
27688: ARRAY
27689: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27690: LD_VAR 0 1
27694: PPUSH
27695: LD_INT 0
27697: PPUSH
27698: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27702: LD_VAR 0 1
27706: PPUSH
27707: LD_OWVAR 3
27711: PUSH
27712: LD_VAR 0 1
27716: DIFF
27717: PPUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 74
27727: PPUSH
27728: CALL_OW 115
// wait ( 0 0$20 ) ;
27732: LD_INT 700
27734: PPUSH
27735: CALL_OW 67
// SetSide ( un , your_side ) ;
27739: LD_VAR 0 1
27743: PPUSH
27744: LD_OWVAR 2
27748: PPUSH
27749: CALL_OW 235
// end ;
27753: PPOPN 2
27755: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27756: LD_EXP 67
27760: PUSH
27761: LD_EXP 100
27765: AND
27766: IFFALSE 27872
27768: GO 27770
27770: DISABLE
27771: LD_INT 0
27773: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27774: LD_ADDR_VAR 0 1
27778: PUSH
27779: LD_INT 22
27781: PUSH
27782: LD_OWVAR 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 30
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 30
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PPUSH
27823: CALL_OW 69
27827: ST_TO_ADDR
// if not depot then
27828: LD_VAR 0 1
27832: NOT
27833: IFFALSE 27837
// exit ;
27835: GO 27872
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27837: LD_VAR 0 1
27841: PUSH
27842: LD_INT 1
27844: ARRAY
27845: PPUSH
27846: CALL_OW 250
27850: PPUSH
27851: LD_VAR 0 1
27855: PUSH
27856: LD_INT 1
27858: ARRAY
27859: PPUSH
27860: CALL_OW 251
27864: PPUSH
27865: LD_INT 70
27867: PPUSH
27868: CALL_OW 495
// end ;
27872: PPOPN 1
27874: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27875: LD_EXP 67
27879: PUSH
27880: LD_EXP 101
27884: AND
27885: IFFALSE 28096
27887: GO 27889
27889: DISABLE
27890: LD_INT 0
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27897: LD_ADDR_VAR 0 5
27901: PUSH
27902: LD_INT 22
27904: PUSH
27905: LD_OWVAR 2
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 21
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: ST_TO_ADDR
// if not tmp then
27933: LD_VAR 0 5
27937: NOT
27938: IFFALSE 27942
// exit ;
27940: GO 28096
// for i in tmp do
27942: LD_ADDR_VAR 0 1
27946: PUSH
27947: LD_VAR 0 5
27951: PUSH
27952: FOR_IN
27953: IFFALSE 28094
// begin d := rand ( 0 , 5 ) ;
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: LD_INT 0
27962: PPUSH
27963: LD_INT 5
27965: PPUSH
27966: CALL_OW 12
27970: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27971: LD_ADDR_VAR 0 2
27975: PUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 250
27985: PPUSH
27986: LD_VAR 0 4
27990: PPUSH
27991: LD_INT 3
27993: PPUSH
27994: LD_INT 12
27996: PPUSH
27997: CALL_OW 12
28001: PPUSH
28002: CALL_OW 272
28006: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_VAR 0 1
28016: PPUSH
28017: CALL_OW 251
28021: PPUSH
28022: LD_VAR 0 4
28026: PPUSH
28027: LD_INT 3
28029: PPUSH
28030: LD_INT 12
28032: PPUSH
28033: CALL_OW 12
28037: PPUSH
28038: CALL_OW 273
28042: ST_TO_ADDR
// if ValidHex ( x , y ) then
28043: LD_VAR 0 2
28047: PPUSH
28048: LD_VAR 0 3
28052: PPUSH
28053: CALL_OW 488
28057: IFFALSE 28092
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_VAR 0 2
28068: PPUSH
28069: LD_VAR 0 3
28073: PPUSH
28074: LD_INT 3
28076: PPUSH
28077: LD_INT 6
28079: PPUSH
28080: CALL_OW 12
28084: PPUSH
28085: LD_INT 1
28087: PPUSH
28088: CALL_OW 483
// end ;
28092: GO 27952
28094: POP
28095: POP
// end ;
28096: PPOPN 5
28098: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28099: LD_EXP 67
28103: PUSH
28104: LD_EXP 102
28108: AND
28109: IFFALSE 28203
28111: GO 28113
28113: DISABLE
28114: LD_INT 0
28116: PPUSH
28117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28118: LD_ADDR_VAR 0 2
28122: PUSH
28123: LD_INT 22
28125: PUSH
28126: LD_OWVAR 2
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 32
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 21
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: ST_TO_ADDR
// if not tmp then
28165: LD_VAR 0 2
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28203
// for i in tmp do
28174: LD_ADDR_VAR 0 1
28178: PUSH
28179: LD_VAR 0 2
28183: PUSH
28184: FOR_IN
28185: IFFALSE 28201
// SetFuel ( i , 0 ) ;
28187: LD_VAR 0 1
28191: PPUSH
28192: LD_INT 0
28194: PPUSH
28195: CALL_OW 240
28199: GO 28184
28201: POP
28202: POP
// end ;
28203: PPOPN 2
28205: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28206: LD_EXP 67
28210: PUSH
28211: LD_EXP 103
28215: AND
28216: IFFALSE 28282
28218: GO 28220
28220: DISABLE
28221: LD_INT 0
28223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28224: LD_ADDR_VAR 0 1
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_OWVAR 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 30
28243: PUSH
28244: LD_INT 29
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PPUSH
28255: CALL_OW 69
28259: ST_TO_ADDR
// if not tmp then
28260: LD_VAR 0 1
28264: NOT
28265: IFFALSE 28269
// exit ;
28267: GO 28282
// DestroyUnit ( tmp [ 1 ] ) ;
28269: LD_VAR 0 1
28273: PUSH
28274: LD_INT 1
28276: ARRAY
28277: PPUSH
28278: CALL_OW 65
// end ;
28282: PPOPN 1
28284: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28285: LD_EXP 67
28289: PUSH
28290: LD_EXP 105
28294: AND
28295: IFFALSE 28424
28297: GO 28299
28299: DISABLE
28300: LD_INT 0
28302: PPUSH
// begin uc_side := 0 ;
28303: LD_ADDR_OWVAR 20
28307: PUSH
28308: LD_INT 0
28310: ST_TO_ADDR
// uc_nation := nation_arabian ;
28311: LD_ADDR_OWVAR 21
28315: PUSH
28316: LD_INT 2
28318: ST_TO_ADDR
// hc_gallery :=  ;
28319: LD_ADDR_OWVAR 33
28323: PUSH
28324: LD_STRING 
28326: ST_TO_ADDR
// hc_name :=  ;
28327: LD_ADDR_OWVAR 26
28331: PUSH
28332: LD_STRING 
28334: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28335: LD_INT 1
28337: PPUSH
28338: LD_INT 11
28340: PPUSH
28341: LD_INT 10
28343: PPUSH
28344: CALL_OW 380
// un := CreateHuman ;
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: CALL_OW 44
28357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28358: LD_VAR 0 1
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28370: LD_INT 35
28372: PPUSH
28373: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28377: LD_VAR 0 1
28381: PPUSH
28382: LD_INT 22
28384: PUSH
28385: LD_OWVAR 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 69
28398: PPUSH
28399: LD_VAR 0 1
28403: PPUSH
28404: CALL_OW 74
28408: PPUSH
28409: CALL_OW 115
// until IsDead ( un ) ;
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 301
28422: IFFALSE 28370
// end ;
28424: PPOPN 1
28426: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28427: LD_EXP 67
28431: PUSH
28432: LD_EXP 107
28436: AND
28437: IFFALSE 28449
28439: GO 28441
28441: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28442: LD_STRING earthquake(getX(game), 0, 32)
28444: PPUSH
28445: CALL_OW 559
28449: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28450: LD_EXP 67
28454: PUSH
28455: LD_EXP 108
28459: AND
28460: IFFALSE 28551
28462: GO 28464
28464: DISABLE
28465: LD_INT 0
28467: PPUSH
// begin enable ;
28468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28469: LD_ADDR_VAR 0 1
28473: PUSH
28474: LD_INT 22
28476: PUSH
28477: LD_OWVAR 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 21
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 33
28498: PUSH
28499: LD_INT 3
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: PPUSH
28511: CALL_OW 69
28515: ST_TO_ADDR
// if not tmp then
28516: LD_VAR 0 1
28520: NOT
28521: IFFALSE 28525
// exit ;
28523: GO 28551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28525: LD_VAR 0 1
28529: PUSH
28530: LD_INT 1
28532: PPUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL_OW 12
28542: ARRAY
28543: PPUSH
28544: LD_INT 1
28546: PPUSH
28547: CALL_OW 234
// end ;
28551: PPOPN 1
28553: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28554: LD_EXP 67
28558: PUSH
28559: LD_EXP 109
28563: AND
28564: IFFALSE 28705
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: LD_INT 22
28581: PUSH
28582: LD_OWVAR 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 25
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PPUSH
28605: CALL_OW 69
28609: ST_TO_ADDR
// if not tmp then
28610: LD_VAR 0 3
28614: NOT
28615: IFFALSE 28619
// exit ;
28617: GO 28705
// un := tmp [ rand ( 1 , tmp ) ] ;
28619: LD_ADDR_VAR 0 2
28623: PUSH
28624: LD_VAR 0 3
28628: PUSH
28629: LD_INT 1
28631: PPUSH
28632: LD_VAR 0 3
28636: PPUSH
28637: CALL_OW 12
28641: ARRAY
28642: ST_TO_ADDR
// if Crawls ( un ) then
28643: LD_VAR 0 2
28647: PPUSH
28648: CALL_OW 318
28652: IFFALSE 28663
// ComWalk ( un ) ;
28654: LD_VAR 0 2
28658: PPUSH
28659: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28663: LD_VAR 0 2
28667: PPUSH
28668: LD_INT 9
28670: PPUSH
28671: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28675: LD_INT 28
28677: PPUSH
28678: LD_OWVAR 2
28682: PPUSH
28683: LD_INT 2
28685: PPUSH
28686: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28690: LD_INT 29
28692: PPUSH
28693: LD_OWVAR 2
28697: PPUSH
28698: LD_INT 2
28700: PPUSH
28701: CALL_OW 322
// end ;
28705: PPOPN 3
28707: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28708: LD_EXP 67
28712: PUSH
28713: LD_EXP 110
28717: AND
28718: IFFALSE 28829
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
28727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 22
28735: PUSH
28736: LD_OWVAR 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 25
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: ST_TO_ADDR
// if not tmp then
28764: LD_VAR 0 3
28768: NOT
28769: IFFALSE 28773
// exit ;
28771: GO 28829
// un := tmp [ rand ( 1 , tmp ) ] ;
28773: LD_ADDR_VAR 0 2
28777: PUSH
28778: LD_VAR 0 3
28782: PUSH
28783: LD_INT 1
28785: PPUSH
28786: LD_VAR 0 3
28790: PPUSH
28791: CALL_OW 12
28795: ARRAY
28796: ST_TO_ADDR
// if Crawls ( un ) then
28797: LD_VAR 0 2
28801: PPUSH
28802: CALL_OW 318
28806: IFFALSE 28817
// ComWalk ( un ) ;
28808: LD_VAR 0 2
28812: PPUSH
28813: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28817: LD_VAR 0 2
28821: PPUSH
28822: LD_INT 8
28824: PPUSH
28825: CALL_OW 336
// end ;
28829: PPOPN 3
28831: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28832: LD_EXP 67
28836: PUSH
28837: LD_EXP 111
28841: AND
28842: IFFALSE 28986
28844: GO 28846
28846: DISABLE
28847: LD_INT 0
28849: PPUSH
28850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28851: LD_ADDR_VAR 0 2
28855: PUSH
28856: LD_INT 22
28858: PUSH
28859: LD_OWVAR 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 21
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 34
28883: PUSH
28884: LD_INT 12
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 34
28893: PUSH
28894: LD_INT 51
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 34
28903: PUSH
28904: LD_INT 32
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 69
28926: ST_TO_ADDR
// if not tmp then
28927: LD_VAR 0 2
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 28986
// for i in tmp do
28936: LD_ADDR_VAR 0 1
28940: PUSH
28941: LD_VAR 0 2
28945: PUSH
28946: FOR_IN
28947: IFFALSE 28984
// if GetCargo ( i , mat_artifact ) = 0 then
28949: LD_VAR 0 1
28953: PPUSH
28954: LD_INT 4
28956: PPUSH
28957: CALL_OW 289
28961: PUSH
28962: LD_INT 0
28964: EQUAL
28965: IFFALSE 28982
// SetCargo ( i , mat_siberit , 100 ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_INT 3
28974: PPUSH
28975: LD_INT 100
28977: PPUSH
28978: CALL_OW 290
28982: GO 28946
28984: POP
28985: POP
// end ;
28986: PPOPN 2
28988: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28989: LD_EXP 67
28993: PUSH
28994: LD_EXP 112
28998: AND
28999: IFFALSE 29182
29001: GO 29003
29003: DISABLE
29004: LD_INT 0
29006: PPUSH
29007: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29008: LD_ADDR_VAR 0 2
29012: PUSH
29013: LD_INT 22
29015: PUSH
29016: LD_OWVAR 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 69
29029: ST_TO_ADDR
// if not tmp then
29030: LD_VAR 0 2
29034: NOT
29035: IFFALSE 29039
// exit ;
29037: GO 29182
// for i := 1 to 2 do
29039: LD_ADDR_VAR 0 1
29043: PUSH
29044: DOUBLE
29045: LD_INT 1
29047: DEC
29048: ST_TO_ADDR
29049: LD_INT 2
29051: PUSH
29052: FOR_TO
29053: IFFALSE 29180
// begin uc_side := your_side ;
29055: LD_ADDR_OWVAR 20
29059: PUSH
29060: LD_OWVAR 2
29064: ST_TO_ADDR
// uc_nation := nation_american ;
29065: LD_ADDR_OWVAR 21
29069: PUSH
29070: LD_INT 1
29072: ST_TO_ADDR
// vc_chassis := us_morphling ;
29073: LD_ADDR_OWVAR 37
29077: PUSH
29078: LD_INT 5
29080: ST_TO_ADDR
// vc_engine := engine_siberite ;
29081: LD_ADDR_OWVAR 39
29085: PUSH
29086: LD_INT 3
29088: ST_TO_ADDR
// vc_control := control_computer ;
29089: LD_ADDR_OWVAR 38
29093: PUSH
29094: LD_INT 3
29096: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29097: LD_ADDR_OWVAR 40
29101: PUSH
29102: LD_INT 10
29104: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29105: LD_VAR 0 2
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: CALL_OW 310
29118: NOT
29119: IFFALSE 29166
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29121: CALL_OW 45
29125: PPUSH
29126: LD_VAR 0 2
29130: PUSH
29131: LD_INT 1
29133: ARRAY
29134: PPUSH
29135: CALL_OW 250
29139: PPUSH
29140: LD_VAR 0 2
29144: PUSH
29145: LD_INT 1
29147: ARRAY
29148: PPUSH
29149: CALL_OW 251
29153: PPUSH
29154: LD_INT 12
29156: PPUSH
29157: LD_INT 1
29159: PPUSH
29160: CALL_OW 50
29164: GO 29178
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29166: CALL_OW 45
29170: PPUSH
29171: LD_INT 1
29173: PPUSH
29174: CALL_OW 51
// end ;
29178: GO 29052
29180: POP
29181: POP
// end ;
29182: PPOPN 2
29184: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29185: LD_EXP 67
29189: PUSH
29190: LD_EXP 113
29194: AND
29195: IFFALSE 29417
29197: GO 29199
29199: DISABLE
29200: LD_INT 0
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
29207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29208: LD_ADDR_VAR 0 6
29212: PUSH
29213: LD_INT 22
29215: PUSH
29216: LD_OWVAR 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 21
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 3
29237: PUSH
29238: LD_INT 23
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 69
29261: ST_TO_ADDR
// if not tmp then
29262: LD_VAR 0 6
29266: NOT
29267: IFFALSE 29271
// exit ;
29269: GO 29417
// s1 := rand ( 1 , 4 ) ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: LD_INT 1
29278: PPUSH
29279: LD_INT 4
29281: PPUSH
29282: CALL_OW 12
29286: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29287: LD_ADDR_VAR 0 4
29291: PUSH
29292: LD_VAR 0 6
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: LD_VAR 0 2
29305: PPUSH
29306: CALL_OW 259
29310: ST_TO_ADDR
// if s1 = 1 then
29311: LD_VAR 0 2
29315: PUSH
29316: LD_INT 1
29318: EQUAL
29319: IFFALSE 29339
// s2 := rand ( 2 , 4 ) else
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 2
29328: PPUSH
29329: LD_INT 4
29331: PPUSH
29332: CALL_OW 12
29336: ST_TO_ADDR
29337: GO 29347
// s2 := 1 ;
29339: LD_ADDR_VAR 0 3
29343: PUSH
29344: LD_INT 1
29346: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29347: LD_ADDR_VAR 0 5
29351: PUSH
29352: LD_VAR 0 6
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: CALL_OW 259
29370: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29371: LD_VAR 0 6
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: PPUSH
29380: LD_VAR 0 2
29384: PPUSH
29385: LD_VAR 0 5
29389: PPUSH
29390: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29394: LD_VAR 0 6
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: CALL_OW 237
// end ;
29417: PPOPN 6
29419: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29420: LD_EXP 67
29424: PUSH
29425: LD_EXP 114
29429: AND
29430: IFFALSE 29509
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_OWVAR 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 30
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 1
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 29509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29483: LD_VAR 0 1
29487: PUSH
29488: LD_INT 1
29490: PPUSH
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL_OW 12
29500: ARRAY
29501: PPUSH
29502: LD_INT 1
29504: PPUSH
29505: CALL_OW 234
// end ;
29509: PPOPN 1
29511: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29512: LD_EXP 67
29516: PUSH
29517: LD_EXP 115
29521: AND
29522: IFFALSE 29634
29524: GO 29526
29526: DISABLE
29527: LD_INT 0
29529: PPUSH
29530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29531: LD_ADDR_VAR 0 2
29535: PUSH
29536: LD_INT 22
29538: PUSH
29539: LD_OWVAR 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 30
29553: PUSH
29554: LD_INT 27
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 30
29563: PUSH
29564: LD_INT 26
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 30
29573: PUSH
29574: LD_INT 28
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: ST_TO_ADDR
// if not tmp then
29596: LD_VAR 0 2
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 29634
// for i in tmp do
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: FOR_IN
29616: IFFALSE 29632
// SetLives ( i , 1 ) ;
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: CALL_OW 234
29630: GO 29615
29632: POP
29633: POP
// end ;
29634: PPOPN 2
29636: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29637: LD_EXP 67
29641: PUSH
29642: LD_EXP 116
29646: AND
29647: IFFALSE 29921
29649: GO 29651
29651: DISABLE
29652: LD_INT 0
29654: PPUSH
29655: PPUSH
29656: PPUSH
// begin i := rand ( 1 , 7 ) ;
29657: LD_ADDR_VAR 0 1
29661: PUSH
29662: LD_INT 1
29664: PPUSH
29665: LD_INT 7
29667: PPUSH
29668: CALL_OW 12
29672: ST_TO_ADDR
// case i of 1 :
29673: LD_VAR 0 1
29677: PUSH
29678: LD_INT 1
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29696
29686: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29687: LD_STRING earthquake(getX(game), 0, 32)
29689: PPUSH
29690: CALL_OW 559
29694: GO 29921
29696: LD_INT 2
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29718
29704: POP
// begin ToLua ( displayStucuk(); ) ;
29705: LD_STRING displayStucuk();
29707: PPUSH
29708: CALL_OW 559
// ResetFog ;
29712: CALL_OW 335
// end ; 3 :
29716: GO 29921
29718: LD_INT 3
29720: DOUBLE
29721: EQUAL
29722: IFTRUE 29726
29724: GO 29830
29726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29727: LD_ADDR_VAR 0 2
29731: PUSH
29732: LD_INT 22
29734: PUSH
29735: LD_OWVAR 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 25
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 69
29762: ST_TO_ADDR
// if not tmp then
29763: LD_VAR 0 2
29767: NOT
29768: IFFALSE 29772
// exit ;
29770: GO 29921
// un := tmp [ rand ( 1 , tmp ) ] ;
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_VAR 0 2
29781: PUSH
29782: LD_INT 1
29784: PPUSH
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 12
29794: ARRAY
29795: ST_TO_ADDR
// if Crawls ( un ) then
29796: LD_VAR 0 3
29800: PPUSH
29801: CALL_OW 318
29805: IFFALSE 29816
// ComWalk ( un ) ;
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29816: LD_VAR 0 3
29820: PPUSH
29821: LD_INT 8
29823: PPUSH
29824: CALL_OW 336
// end ; 4 :
29828: GO 29921
29830: LD_INT 4
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29899
29838: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29839: LD_ADDR_VAR 0 2
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_OWVAR 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 30
29858: PUSH
29859: LD_INT 29
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL_OW 69
29874: ST_TO_ADDR
// if not tmp then
29875: LD_VAR 0 2
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 29921
// DestroyUnit ( tmp [ 1 ] ) ;
29884: LD_VAR 0 2
29888: PUSH
29889: LD_INT 1
29891: ARRAY
29892: PPUSH
29893: CALL_OW 65
// end ; 5 .. 7 :
29897: GO 29921
29899: LD_INT 5
29901: DOUBLE
29902: GREATEREQUAL
29903: IFFALSE 29911
29905: LD_INT 7
29907: DOUBLE
29908: LESSEQUAL
29909: IFTRUE 29913
29911: GO 29920
29913: POP
// StreamSibBomb ; end ;
29914: CALL 26171 0 0
29918: GO 29921
29920: POP
// end ;
29921: PPOPN 3
29923: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29924: LD_EXP 67
29928: PUSH
29929: LD_EXP 117
29933: AND
29934: IFFALSE 30090
29936: GO 29938
29938: DISABLE
29939: LD_INT 0
29941: PPUSH
29942: PPUSH
29943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29944: LD_ADDR_VAR 0 2
29948: PUSH
29949: LD_INT 81
29951: PUSH
29952: LD_OWVAR 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 21
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 21
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PPUSH
29993: CALL_OW 69
29997: ST_TO_ADDR
// if not tmp then
29998: LD_VAR 0 2
30002: NOT
30003: IFFALSE 30007
// exit ;
30005: GO 30090
// p := 0 ;
30007: LD_ADDR_VAR 0 3
30011: PUSH
30012: LD_INT 0
30014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30015: LD_INT 35
30017: PPUSH
30018: CALL_OW 67
// p := p + 1 ;
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_VAR 0 3
30031: PUSH
30032: LD_INT 1
30034: PLUS
30035: ST_TO_ADDR
// for i in tmp do
30036: LD_ADDR_VAR 0 1
30040: PUSH
30041: LD_VAR 0 2
30045: PUSH
30046: FOR_IN
30047: IFFALSE 30078
// if GetLives ( i ) < 1000 then
30049: LD_VAR 0 1
30053: PPUSH
30054: CALL_OW 256
30058: PUSH
30059: LD_INT 1000
30061: LESS
30062: IFFALSE 30076
// SetLives ( i , 1000 ) ;
30064: LD_VAR 0 1
30068: PPUSH
30069: LD_INT 1000
30071: PPUSH
30072: CALL_OW 234
30076: GO 30046
30078: POP
30079: POP
// until p > 20 ;
30080: LD_VAR 0 3
30084: PUSH
30085: LD_INT 20
30087: GREATER
30088: IFFALSE 30015
// end ;
30090: PPOPN 3
30092: END
// every 0 0$1 trigger StreamModeActive and sTime do
30093: LD_EXP 67
30097: PUSH
30098: LD_EXP 118
30102: AND
30103: IFFALSE 30138
30105: GO 30107
30107: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30108: LD_INT 28
30110: PPUSH
30111: LD_OWVAR 2
30115: PPUSH
30116: LD_INT 2
30118: PPUSH
30119: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30123: LD_INT 30
30125: PPUSH
30126: LD_OWVAR 2
30130: PPUSH
30131: LD_INT 2
30133: PPUSH
30134: CALL_OW 322
// end ;
30138: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30139: LD_EXP 67
30143: PUSH
30144: LD_EXP 119
30148: AND
30149: IFFALSE 30270
30151: GO 30153
30153: DISABLE
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30158: LD_ADDR_VAR 0 2
30162: PUSH
30163: LD_INT 22
30165: PUSH
30166: LD_OWVAR 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 3
30187: PUSH
30188: LD_INT 23
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: PPUSH
30207: CALL_OW 69
30211: ST_TO_ADDR
// if not tmp then
30212: LD_VAR 0 2
30216: NOT
30217: IFFALSE 30221
// exit ;
30219: GO 30270
// for i in tmp do
30221: LD_ADDR_VAR 0 1
30225: PUSH
30226: LD_VAR 0 2
30230: PUSH
30231: FOR_IN
30232: IFFALSE 30268
// begin if Crawls ( i ) then
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 318
30243: IFFALSE 30254
// ComWalk ( i ) ;
30245: LD_VAR 0 1
30249: PPUSH
30250: CALL_OW 138
// SetClass ( i , 2 ) ;
30254: LD_VAR 0 1
30258: PPUSH
30259: LD_INT 2
30261: PPUSH
30262: CALL_OW 336
// end ;
30266: GO 30231
30268: POP
30269: POP
// end ;
30270: PPOPN 2
30272: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30273: LD_EXP 67
30277: PUSH
30278: LD_EXP 120
30282: AND
30283: IFFALSE 30564
30285: GO 30287
30287: DISABLE
30288: LD_INT 0
30290: PPUSH
30291: PPUSH
30292: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30293: LD_OWVAR 2
30297: PPUSH
30298: LD_INT 9
30300: PPUSH
30301: LD_INT 1
30303: PPUSH
30304: LD_INT 1
30306: PPUSH
30307: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30311: LD_INT 9
30313: PPUSH
30314: LD_OWVAR 2
30318: PPUSH
30319: CALL_OW 343
// uc_side := 9 ;
30323: LD_ADDR_OWVAR 20
30327: PUSH
30328: LD_INT 9
30330: ST_TO_ADDR
// uc_nation := 2 ;
30331: LD_ADDR_OWVAR 21
30335: PUSH
30336: LD_INT 2
30338: ST_TO_ADDR
// hc_name := Dark Warrior ;
30339: LD_ADDR_OWVAR 26
30343: PUSH
30344: LD_STRING Dark Warrior
30346: ST_TO_ADDR
// hc_gallery :=  ;
30347: LD_ADDR_OWVAR 33
30351: PUSH
30352: LD_STRING 
30354: ST_TO_ADDR
// hc_noskilllimit := true ;
30355: LD_ADDR_OWVAR 76
30359: PUSH
30360: LD_INT 1
30362: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30363: LD_ADDR_OWVAR 31
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 30
30373: PUSH
30374: LD_INT 30
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// un := CreateHuman ;
30386: LD_ADDR_VAR 0 3
30390: PUSH
30391: CALL_OW 44
30395: ST_TO_ADDR
// hc_noskilllimit := false ;
30396: LD_ADDR_OWVAR 76
30400: PUSH
30401: LD_INT 0
30403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30404: LD_VAR 0 3
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: CALL_OW 51
// p := 0 ;
30416: LD_ADDR_VAR 0 2
30420: PUSH
30421: LD_INT 0
30423: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30424: LD_INT 35
30426: PPUSH
30427: CALL_OW 67
// p := p + 1 ;
30431: LD_ADDR_VAR 0 2
30435: PUSH
30436: LD_VAR 0 2
30440: PUSH
30441: LD_INT 1
30443: PLUS
30444: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30445: LD_VAR 0 3
30449: PPUSH
30450: CALL_OW 256
30454: PUSH
30455: LD_INT 1000
30457: LESS
30458: IFFALSE 30472
// SetLives ( un , 1000 ) ;
30460: LD_VAR 0 3
30464: PPUSH
30465: LD_INT 1000
30467: PPUSH
30468: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30472: LD_VAR 0 3
30476: PPUSH
30477: LD_INT 81
30479: PUSH
30480: LD_OWVAR 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 91
30491: PUSH
30492: LD_VAR 0 3
30496: PUSH
30497: LD_INT 30
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PPUSH
30509: CALL_OW 69
30513: PPUSH
30514: LD_VAR 0 3
30518: PPUSH
30519: CALL_OW 74
30523: PPUSH
30524: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30528: LD_VAR 0 2
30532: PUSH
30533: LD_INT 60
30535: GREATER
30536: PUSH
30537: LD_VAR 0 3
30541: PPUSH
30542: CALL_OW 301
30546: OR
30547: IFFALSE 30424
// if un then
30549: LD_VAR 0 3
30553: IFFALSE 30564
// RemoveUnit ( un ) ;
30555: LD_VAR 0 3
30559: PPUSH
30560: CALL_OW 64
// end ;
30564: PPOPN 3
30566: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30567: LD_INT 0
30569: PPUSH
// case cmd of 301 :
30570: LD_VAR 0 1
30574: PUSH
30575: LD_INT 301
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30615
30583: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30584: LD_VAR 0 6
30588: PPUSH
30589: LD_VAR 0 7
30593: PPUSH
30594: LD_VAR 0 8
30598: PPUSH
30599: LD_VAR 0 4
30603: PPUSH
30604: LD_VAR 0 5
30608: PPUSH
30609: CALL 31816 0 5
30613: GO 30736
30615: LD_INT 302
30617: DOUBLE
30618: EQUAL
30619: IFTRUE 30623
30621: GO 30660
30623: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30624: LD_VAR 0 6
30628: PPUSH
30629: LD_VAR 0 7
30633: PPUSH
30634: LD_VAR 0 8
30638: PPUSH
30639: LD_VAR 0 9
30643: PPUSH
30644: LD_VAR 0 4
30648: PPUSH
30649: LD_VAR 0 5
30653: PPUSH
30654: CALL 31907 0 6
30658: GO 30736
30660: LD_INT 303
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30705
30668: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30669: LD_VAR 0 6
30673: PPUSH
30674: LD_VAR 0 7
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: LD_VAR 0 9
30688: PPUSH
30689: LD_VAR 0 4
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL 30741 0 6
30703: GO 30736
30705: LD_INT 304
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30735
30713: POP
// hHackTeleport ( unit , x , y ) ; end ;
30714: LD_VAR 0 2
30718: PPUSH
30719: LD_VAR 0 4
30723: PPUSH
30724: LD_VAR 0 5
30728: PPUSH
30729: CALL 32500 0 3
30733: GO 30736
30735: POP
// end ;
30736: LD_VAR 0 12
30740: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30741: LD_INT 0
30743: PPUSH
30744: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30745: LD_VAR 0 1
30749: PUSH
30750: LD_INT 1
30752: LESS
30753: PUSH
30754: LD_VAR 0 1
30758: PUSH
30759: LD_INT 3
30761: GREATER
30762: OR
30763: PUSH
30764: LD_VAR 0 5
30768: PPUSH
30769: LD_VAR 0 6
30773: PPUSH
30774: CALL_OW 428
30778: OR
30779: IFFALSE 30783
// exit ;
30781: GO 31503
// uc_side := your_side ;
30783: LD_ADDR_OWVAR 20
30787: PUSH
30788: LD_OWVAR 2
30792: ST_TO_ADDR
// uc_nation := nation ;
30793: LD_ADDR_OWVAR 21
30797: PUSH
30798: LD_VAR 0 1
30802: ST_TO_ADDR
// bc_level = 1 ;
30803: LD_ADDR_OWVAR 43
30807: PUSH
30808: LD_INT 1
30810: ST_TO_ADDR
// case btype of 1 :
30811: LD_VAR 0 2
30815: PUSH
30816: LD_INT 1
30818: DOUBLE
30819: EQUAL
30820: IFTRUE 30824
30822: GO 30835
30824: POP
// bc_type := b_depot ; 2 :
30825: LD_ADDR_OWVAR 42
30829: PUSH
30830: LD_INT 0
30832: ST_TO_ADDR
30833: GO 31447
30835: LD_INT 2
30837: DOUBLE
30838: EQUAL
30839: IFTRUE 30843
30841: GO 30854
30843: POP
// bc_type := b_warehouse ; 3 :
30844: LD_ADDR_OWVAR 42
30848: PUSH
30849: LD_INT 1
30851: ST_TO_ADDR
30852: GO 31447
30854: LD_INT 3
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30873
30862: POP
// bc_type := b_lab ; 4 .. 9 :
30863: LD_ADDR_OWVAR 42
30867: PUSH
30868: LD_INT 6
30870: ST_TO_ADDR
30871: GO 31447
30873: LD_INT 4
30875: DOUBLE
30876: GREATEREQUAL
30877: IFFALSE 30885
30879: LD_INT 9
30881: DOUBLE
30882: LESSEQUAL
30883: IFTRUE 30887
30885: GO 30939
30887: POP
// begin bc_type := b_lab_half ;
30888: LD_ADDR_OWVAR 42
30892: PUSH
30893: LD_INT 7
30895: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30896: LD_ADDR_OWVAR 44
30900: PUSH
30901: LD_INT 10
30903: PUSH
30904: LD_INT 11
30906: PUSH
30907: LD_INT 12
30909: PUSH
30910: LD_INT 15
30912: PUSH
30913: LD_INT 14
30915: PUSH
30916: LD_INT 13
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: LD_VAR 0 2
30931: PUSH
30932: LD_INT 3
30934: MINUS
30935: ARRAY
30936: ST_TO_ADDR
// end ; 10 .. 13 :
30937: GO 31447
30939: LD_INT 10
30941: DOUBLE
30942: GREATEREQUAL
30943: IFFALSE 30951
30945: LD_INT 13
30947: DOUBLE
30948: LESSEQUAL
30949: IFTRUE 30953
30951: GO 31030
30953: POP
// begin bc_type := b_lab_full ;
30954: LD_ADDR_OWVAR 42
30958: PUSH
30959: LD_INT 8
30961: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30962: LD_ADDR_OWVAR 44
30966: PUSH
30967: LD_INT 10
30969: PUSH
30970: LD_INT 12
30972: PUSH
30973: LD_INT 14
30975: PUSH
30976: LD_INT 13
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: LD_VAR 0 2
30989: PUSH
30990: LD_INT 9
30992: MINUS
30993: ARRAY
30994: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30995: LD_ADDR_OWVAR 45
30999: PUSH
31000: LD_INT 11
31002: PUSH
31003: LD_INT 15
31005: PUSH
31006: LD_INT 12
31008: PUSH
31009: LD_INT 15
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: PUSH
31018: LD_VAR 0 2
31022: PUSH
31023: LD_INT 9
31025: MINUS
31026: ARRAY
31027: ST_TO_ADDR
// end ; 14 :
31028: GO 31447
31030: LD_INT 14
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31049
31038: POP
// bc_type := b_workshop ; 15 :
31039: LD_ADDR_OWVAR 42
31043: PUSH
31044: LD_INT 2
31046: ST_TO_ADDR
31047: GO 31447
31049: LD_INT 15
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31068
31057: POP
// bc_type := b_factory ; 16 :
31058: LD_ADDR_OWVAR 42
31062: PUSH
31063: LD_INT 3
31065: ST_TO_ADDR
31066: GO 31447
31068: LD_INT 16
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31087
31076: POP
// bc_type := b_ext_gun ; 17 :
31077: LD_ADDR_OWVAR 42
31081: PUSH
31082: LD_INT 17
31084: ST_TO_ADDR
31085: GO 31447
31087: LD_INT 17
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31123
31095: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31096: LD_ADDR_OWVAR 42
31100: PUSH
31101: LD_INT 19
31103: PUSH
31104: LD_INT 23
31106: PUSH
31107: LD_INT 19
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: PUSH
31115: LD_VAR 0 1
31119: ARRAY
31120: ST_TO_ADDR
31121: GO 31447
31123: LD_INT 18
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31142
31131: POP
// bc_type := b_ext_radar ; 19 :
31132: LD_ADDR_OWVAR 42
31136: PUSH
31137: LD_INT 20
31139: ST_TO_ADDR
31140: GO 31447
31142: LD_INT 19
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31161
31150: POP
// bc_type := b_ext_radio ; 20 :
31151: LD_ADDR_OWVAR 42
31155: PUSH
31156: LD_INT 22
31158: ST_TO_ADDR
31159: GO 31447
31161: LD_INT 20
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31180
31169: POP
// bc_type := b_ext_siberium ; 21 :
31170: LD_ADDR_OWVAR 42
31174: PUSH
31175: LD_INT 21
31177: ST_TO_ADDR
31178: GO 31447
31180: LD_INT 21
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_ext_computer ; 22 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 24
31196: ST_TO_ADDR
31197: GO 31447
31199: LD_INT 22
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_ext_track ; 23 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 16
31215: ST_TO_ADDR
31216: GO 31447
31218: LD_INT 23
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_ext_laser ; 24 :
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 25
31234: ST_TO_ADDR
31235: GO 31447
31237: LD_INT 24
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31256
31245: POP
// bc_type := b_control_tower ; 25 :
31246: LD_ADDR_OWVAR 42
31250: PUSH
31251: LD_INT 36
31253: ST_TO_ADDR
31254: GO 31447
31256: LD_INT 25
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31275
31264: POP
// bc_type := b_breastwork ; 26 :
31265: LD_ADDR_OWVAR 42
31269: PUSH
31270: LD_INT 31
31272: ST_TO_ADDR
31273: GO 31447
31275: LD_INT 26
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31294
31283: POP
// bc_type := b_bunker ; 27 :
31284: LD_ADDR_OWVAR 42
31288: PUSH
31289: LD_INT 32
31291: ST_TO_ADDR
31292: GO 31447
31294: LD_INT 27
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31313
31302: POP
// bc_type := b_turret ; 28 :
31303: LD_ADDR_OWVAR 42
31307: PUSH
31308: LD_INT 33
31310: ST_TO_ADDR
31311: GO 31447
31313: LD_INT 28
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31332
31321: POP
// bc_type := b_armoury ; 29 :
31322: LD_ADDR_OWVAR 42
31326: PUSH
31327: LD_INT 4
31329: ST_TO_ADDR
31330: GO 31447
31332: LD_INT 29
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31351
31340: POP
// bc_type := b_barracks ; 30 :
31341: LD_ADDR_OWVAR 42
31345: PUSH
31346: LD_INT 5
31348: ST_TO_ADDR
31349: GO 31447
31351: LD_INT 30
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31370
31359: POP
// bc_type := b_solar_power ; 31 :
31360: LD_ADDR_OWVAR 42
31364: PUSH
31365: LD_INT 27
31367: ST_TO_ADDR
31368: GO 31447
31370: LD_INT 31
31372: DOUBLE
31373: EQUAL
31374: IFTRUE 31378
31376: GO 31389
31378: POP
// bc_type := b_oil_power ; 32 :
31379: LD_ADDR_OWVAR 42
31383: PUSH
31384: LD_INT 26
31386: ST_TO_ADDR
31387: GO 31447
31389: LD_INT 32
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31408
31397: POP
// bc_type := b_siberite_power ; 33 :
31398: LD_ADDR_OWVAR 42
31402: PUSH
31403: LD_INT 28
31405: ST_TO_ADDR
31406: GO 31447
31408: LD_INT 33
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31427
31416: POP
// bc_type := b_oil_mine ; 34 :
31417: LD_ADDR_OWVAR 42
31421: PUSH
31422: LD_INT 29
31424: ST_TO_ADDR
31425: GO 31447
31427: LD_INT 34
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31446
31435: POP
// bc_type := b_siberite_mine ; end ;
31436: LD_ADDR_OWVAR 42
31440: PUSH
31441: LD_INT 30
31443: ST_TO_ADDR
31444: GO 31447
31446: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31447: LD_ADDR_VAR 0 8
31451: PUSH
31452: LD_VAR 0 5
31456: PPUSH
31457: LD_VAR 0 6
31461: PPUSH
31462: LD_VAR 0 3
31466: PPUSH
31467: CALL_OW 47
31471: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31472: LD_OWVAR 42
31476: PUSH
31477: LD_INT 32
31479: PUSH
31480: LD_INT 33
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: IN
31487: IFFALSE 31503
// PlaceWeaponTurret ( b , weapon ) ;
31489: LD_VAR 0 8
31493: PPUSH
31494: LD_VAR 0 4
31498: PPUSH
31499: CALL_OW 431
// end ;
31503: LD_VAR 0 7
31507: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31508: LD_INT 0
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: LD_INT 22
31521: PUSH
31522: LD_OWVAR 2
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 30
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 30
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PPUSH
31563: CALL_OW 69
31567: ST_TO_ADDR
// if not tmp then
31568: LD_VAR 0 4
31572: NOT
31573: IFFALSE 31577
// exit ;
31575: GO 31636
// for i in tmp do
31577: LD_ADDR_VAR 0 2
31581: PUSH
31582: LD_VAR 0 4
31586: PUSH
31587: FOR_IN
31588: IFFALSE 31634
// for j = 1 to 3 do
31590: LD_ADDR_VAR 0 3
31594: PUSH
31595: DOUBLE
31596: LD_INT 1
31598: DEC
31599: ST_TO_ADDR
31600: LD_INT 3
31602: PUSH
31603: FOR_TO
31604: IFFALSE 31630
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31606: LD_VAR 0 2
31610: PPUSH
31611: CALL_OW 274
31615: PPUSH
31616: LD_VAR 0 3
31620: PPUSH
31621: LD_INT 99999
31623: PPUSH
31624: CALL_OW 277
31628: GO 31603
31630: POP
31631: POP
31632: GO 31587
31634: POP
31635: POP
// end ;
31636: LD_VAR 0 1
31640: RET
// export function hHackSetLevel10 ; var i , j ; begin
31641: LD_INT 0
31643: PPUSH
31644: PPUSH
31645: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31646: LD_ADDR_VAR 0 2
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 69
31665: PUSH
31666: FOR_IN
31667: IFFALSE 31719
// if IsSelected ( i ) then
31669: LD_VAR 0 2
31673: PPUSH
31674: CALL_OW 306
31678: IFFALSE 31717
// begin for j := 1 to 4 do
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: DOUBLE
31686: LD_INT 1
31688: DEC
31689: ST_TO_ADDR
31690: LD_INT 4
31692: PUSH
31693: FOR_TO
31694: IFFALSE 31715
// SetSkill ( i , j , 10 ) ;
31696: LD_VAR 0 2
31700: PPUSH
31701: LD_VAR 0 3
31705: PPUSH
31706: LD_INT 10
31708: PPUSH
31709: CALL_OW 237
31713: GO 31693
31715: POP
31716: POP
// end ;
31717: GO 31666
31719: POP
31720: POP
// end ;
31721: LD_VAR 0 1
31725: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31726: LD_INT 0
31728: PPUSH
31729: PPUSH
31730: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31731: LD_ADDR_VAR 0 2
31735: PUSH
31736: LD_INT 22
31738: PUSH
31739: LD_OWVAR 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 21
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: PUSH
31767: FOR_IN
31768: IFFALSE 31809
// begin for j := 1 to 4 do
31770: LD_ADDR_VAR 0 3
31774: PUSH
31775: DOUBLE
31776: LD_INT 1
31778: DEC
31779: ST_TO_ADDR
31780: LD_INT 4
31782: PUSH
31783: FOR_TO
31784: IFFALSE 31805
// SetSkill ( i , j , 10 ) ;
31786: LD_VAR 0 2
31790: PPUSH
31791: LD_VAR 0 3
31795: PPUSH
31796: LD_INT 10
31798: PPUSH
31799: CALL_OW 237
31803: GO 31783
31805: POP
31806: POP
// end ;
31807: GO 31767
31809: POP
31810: POP
// end ;
31811: LD_VAR 0 1
31815: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31816: LD_INT 0
31818: PPUSH
// uc_side := your_side ;
31819: LD_ADDR_OWVAR 20
31823: PUSH
31824: LD_OWVAR 2
31828: ST_TO_ADDR
// uc_nation := nation ;
31829: LD_ADDR_OWVAR 21
31833: PUSH
31834: LD_VAR 0 1
31838: ST_TO_ADDR
// InitHc ;
31839: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31843: LD_INT 0
31845: PPUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 3
31855: PPUSH
31856: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31860: LD_VAR 0 4
31864: PPUSH
31865: LD_VAR 0 5
31869: PPUSH
31870: CALL_OW 428
31874: PUSH
31875: LD_INT 0
31877: EQUAL
31878: IFFALSE 31902
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31880: CALL_OW 44
31884: PPUSH
31885: LD_VAR 0 4
31889: PPUSH
31890: LD_VAR 0 5
31894: PPUSH
31895: LD_INT 1
31897: PPUSH
31898: CALL_OW 48
// end ;
31902: LD_VAR 0 6
31906: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
// uc_side := your_side ;
31911: LD_ADDR_OWVAR 20
31915: PUSH
31916: LD_OWVAR 2
31920: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31921: LD_VAR 0 1
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: IN
31948: IFFALSE 31960
// uc_nation := nation_american else
31950: LD_ADDR_OWVAR 21
31954: PUSH
31955: LD_INT 1
31957: ST_TO_ADDR
31958: GO 32003
// if chassis in [ 11 , 12 , 13 , 14 ] then
31960: LD_VAR 0 1
31964: PUSH
31965: LD_INT 11
31967: PUSH
31968: LD_INT 12
31970: PUSH
31971: LD_INT 13
31973: PUSH
31974: LD_INT 14
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: IN
31983: IFFALSE 31995
// uc_nation := nation_arabian else
31985: LD_ADDR_OWVAR 21
31989: PUSH
31990: LD_INT 2
31992: ST_TO_ADDR
31993: GO 32003
// uc_nation := nation_russian ;
31995: LD_ADDR_OWVAR 21
31999: PUSH
32000: LD_INT 3
32002: ST_TO_ADDR
// vc_chassis := chassis ;
32003: LD_ADDR_OWVAR 37
32007: PUSH
32008: LD_VAR 0 1
32012: ST_TO_ADDR
// vc_engine := engine ;
32013: LD_ADDR_OWVAR 39
32017: PUSH
32018: LD_VAR 0 2
32022: ST_TO_ADDR
// vc_control := control ;
32023: LD_ADDR_OWVAR 38
32027: PUSH
32028: LD_VAR 0 3
32032: ST_TO_ADDR
// vc_weapon := weapon ;
32033: LD_ADDR_OWVAR 40
32037: PUSH
32038: LD_VAR 0 4
32042: ST_TO_ADDR
// un := CreateVehicle ;
32043: LD_ADDR_VAR 0 8
32047: PUSH
32048: CALL_OW 45
32052: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32053: LD_VAR 0 8
32057: PPUSH
32058: LD_INT 0
32060: PPUSH
32061: LD_INT 5
32063: PPUSH
32064: CALL_OW 12
32068: PPUSH
32069: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32073: LD_VAR 0 8
32077: PPUSH
32078: LD_VAR 0 5
32082: PPUSH
32083: LD_VAR 0 6
32087: PPUSH
32088: LD_INT 1
32090: PPUSH
32091: CALL_OW 48
// end ;
32095: LD_VAR 0 7
32099: RET
// export hInvincible ; every 1 do
32100: GO 32102
32102: DISABLE
// hInvincible := [ ] ;
32103: LD_ADDR_EXP 121
32107: PUSH
32108: EMPTY
32109: ST_TO_ADDR
32110: END
// every 10 do var i ;
32111: GO 32113
32113: DISABLE
32114: LD_INT 0
32116: PPUSH
// begin enable ;
32117: ENABLE
// if not hInvincible then
32118: LD_EXP 121
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32171
// for i in hInvincible do
32127: LD_ADDR_VAR 0 1
32131: PUSH
32132: LD_EXP 121
32136: PUSH
32137: FOR_IN
32138: IFFALSE 32169
// if GetLives ( i ) < 1000 then
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 256
32149: PUSH
32150: LD_INT 1000
32152: LESS
32153: IFFALSE 32167
// SetLives ( i , 1000 ) ;
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_INT 1000
32162: PPUSH
32163: CALL_OW 234
32167: GO 32137
32169: POP
32170: POP
// end ;
32171: PPOPN 1
32173: END
// export function hHackInvincible ; var i ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32178: LD_ADDR_VAR 0 2
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 21
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 21
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: PPUSH
32211: CALL_OW 69
32215: PUSH
32216: FOR_IN
32217: IFFALSE 32278
// if IsSelected ( i ) then
32219: LD_VAR 0 2
32223: PPUSH
32224: CALL_OW 306
32228: IFFALSE 32276
// begin if i in hInvincible then
32230: LD_VAR 0 2
32234: PUSH
32235: LD_EXP 121
32239: IN
32240: IFFALSE 32260
// hInvincible := hInvincible diff i else
32242: LD_ADDR_EXP 121
32246: PUSH
32247: LD_EXP 121
32251: PUSH
32252: LD_VAR 0 2
32256: DIFF
32257: ST_TO_ADDR
32258: GO 32276
// hInvincible := hInvincible union i ;
32260: LD_ADDR_EXP 121
32264: PUSH
32265: LD_EXP 121
32269: PUSH
32270: LD_VAR 0 2
32274: UNION
32275: ST_TO_ADDR
// end ;
32276: GO 32216
32278: POP
32279: POP
// end ;
32280: LD_VAR 0 1
32284: RET
// export function hHackInvisible ; var i , j ; begin
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
32289: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32290: LD_ADDR_VAR 0 2
32294: PUSH
32295: LD_INT 21
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 69
32309: PUSH
32310: FOR_IN
32311: IFFALSE 32335
// if IsSelected ( i ) then
32313: LD_VAR 0 2
32317: PPUSH
32318: CALL_OW 306
32322: IFFALSE 32333
// ComForceInvisible ( i ) ;
32324: LD_VAR 0 2
32328: PPUSH
32329: CALL_OW 496
32333: GO 32310
32335: POP
32336: POP
// end ;
32337: LD_VAR 0 1
32341: RET
// export function hHackChangeYourSide ; begin
32342: LD_INT 0
32344: PPUSH
// if your_side = 8 then
32345: LD_OWVAR 2
32349: PUSH
32350: LD_INT 8
32352: EQUAL
32353: IFFALSE 32365
// your_side := 0 else
32355: LD_ADDR_OWVAR 2
32359: PUSH
32360: LD_INT 0
32362: ST_TO_ADDR
32363: GO 32379
// your_side := your_side + 1 ;
32365: LD_ADDR_OWVAR 2
32369: PUSH
32370: LD_OWVAR 2
32374: PUSH
32375: LD_INT 1
32377: PLUS
32378: ST_TO_ADDR
// end ;
32379: LD_VAR 0 1
32383: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32384: LD_INT 0
32386: PPUSH
32387: PPUSH
32388: PPUSH
// for i in all_units do
32389: LD_ADDR_VAR 0 2
32393: PUSH
32394: LD_OWVAR 3
32398: PUSH
32399: FOR_IN
32400: IFFALSE 32478
// if IsSelected ( i ) then
32402: LD_VAR 0 2
32406: PPUSH
32407: CALL_OW 306
32411: IFFALSE 32476
// begin j := GetSide ( i ) ;
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_VAR 0 2
32422: PPUSH
32423: CALL_OW 255
32427: ST_TO_ADDR
// if j = 8 then
32428: LD_VAR 0 3
32432: PUSH
32433: LD_INT 8
32435: EQUAL
32436: IFFALSE 32448
// j := 0 else
32438: LD_ADDR_VAR 0 3
32442: PUSH
32443: LD_INT 0
32445: ST_TO_ADDR
32446: GO 32462
// j := j + 1 ;
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_VAR 0 3
32457: PUSH
32458: LD_INT 1
32460: PLUS
32461: ST_TO_ADDR
// SetSide ( i , j ) ;
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: CALL_OW 235
// end ;
32476: GO 32399
32478: POP
32479: POP
// end ;
32480: LD_VAR 0 1
32484: RET
// export function hHackFog ; begin
32485: LD_INT 0
32487: PPUSH
// FogOff ( true ) ;
32488: LD_INT 1
32490: PPUSH
32491: CALL_OW 344
// end ;
32495: LD_VAR 0 1
32499: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32500: LD_INT 0
32502: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32503: LD_VAR 0 1
32507: PPUSH
32508: LD_VAR 0 2
32512: PPUSH
32513: LD_VAR 0 3
32517: PPUSH
32518: LD_INT 1
32520: PPUSH
32521: LD_INT 1
32523: PPUSH
32524: CALL_OW 483
// CenterOnXY ( x , y ) ;
32528: LD_VAR 0 2
32532: PPUSH
32533: LD_VAR 0 3
32537: PPUSH
32538: CALL_OW 84
// end ; end_of_file
32542: LD_VAR 0 4
32546: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32547: LD_INT 0
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32553: LD_VAR 0 1
32557: PPUSH
32558: CALL_OW 264
32562: PUSH
32563: LD_EXP 52
32567: EQUAL
32568: IFFALSE 32640
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32570: LD_INT 68
32572: PPUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 255
32582: PPUSH
32583: CALL_OW 321
32587: PUSH
32588: LD_INT 2
32590: EQUAL
32591: IFFALSE 32603
// eff := 70 else
32593: LD_ADDR_VAR 0 4
32597: PUSH
32598: LD_INT 70
32600: ST_TO_ADDR
32601: GO 32611
// eff := 30 ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_INT 30
32610: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 250
32620: PPUSH
32621: LD_VAR 0 1
32625: PPUSH
32626: CALL_OW 251
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: CALL_OW 495
// end ; end ;
32640: LD_VAR 0 2
32644: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32645: LD_INT 0
32647: PPUSH
// end ;
32648: LD_VAR 0 4
32652: RET
// export function SOS_Command ( cmd ) ; begin
32653: LD_INT 0
32655: PPUSH
// end ;
32656: LD_VAR 0 2
32660: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32661: LD_INT 0
32663: PPUSH
// if cmd = 121 then
32664: LD_VAR 0 1
32668: PUSH
32669: LD_INT 121
32671: EQUAL
32672: IFFALSE 32674
// end ;
32674: LD_VAR 0 6
32678: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32679: LD_INT 0
32681: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32682: LD_VAR 0 1
32686: PUSH
32687: LD_INT 250
32689: EQUAL
32690: PUSH
32691: LD_VAR 0 2
32695: PPUSH
32696: CALL_OW 264
32700: PUSH
32701: LD_EXP 55
32705: EQUAL
32706: AND
32707: IFFALSE 32728
// MinerPlaceMine ( unit , x , y ) ;
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 4
32718: PPUSH
32719: LD_VAR 0 5
32723: PPUSH
32724: CALL 35077 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32728: LD_VAR 0 1
32732: PUSH
32733: LD_INT 251
32735: EQUAL
32736: PUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: CALL_OW 264
32746: PUSH
32747: LD_EXP 55
32751: EQUAL
32752: AND
32753: IFFALSE 32774
// MinerDetonateMine ( unit , x , y ) ;
32755: LD_VAR 0 2
32759: PPUSH
32760: LD_VAR 0 4
32764: PPUSH
32765: LD_VAR 0 5
32769: PPUSH
32770: CALL 35354 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32774: LD_VAR 0 1
32778: PUSH
32779: LD_INT 252
32781: EQUAL
32782: PUSH
32783: LD_VAR 0 2
32787: PPUSH
32788: CALL_OW 264
32792: PUSH
32793: LD_EXP 55
32797: EQUAL
32798: AND
32799: IFFALSE 32820
// MinerCreateMinefield ( unit , x , y ) ;
32801: LD_VAR 0 2
32805: PPUSH
32806: LD_VAR 0 4
32810: PPUSH
32811: LD_VAR 0 5
32815: PPUSH
32816: CALL 35771 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32820: LD_VAR 0 1
32824: PUSH
32825: LD_INT 253
32827: EQUAL
32828: PUSH
32829: LD_VAR 0 2
32833: PPUSH
32834: CALL_OW 257
32838: PUSH
32839: LD_INT 5
32841: EQUAL
32842: AND
32843: IFFALSE 32864
// ComBinocular ( unit , x , y ) ;
32845: LD_VAR 0 2
32849: PPUSH
32850: LD_VAR 0 4
32854: PPUSH
32855: LD_VAR 0 5
32859: PPUSH
32860: CALL 36142 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32864: LD_VAR 0 1
32868: PUSH
32869: LD_INT 254
32871: EQUAL
32872: PUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: CALL_OW 264
32882: PUSH
32883: LD_EXP 50
32887: EQUAL
32888: AND
32889: PUSH
32890: LD_VAR 0 3
32894: PPUSH
32895: CALL_OW 263
32899: PUSH
32900: LD_INT 3
32902: EQUAL
32903: AND
32904: IFFALSE 32920
// HackDestroyVehicle ( unit , selectedUnit ) ;
32906: LD_VAR 0 2
32910: PPUSH
32911: LD_VAR 0 3
32915: PPUSH
32916: CALL 34437 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32920: LD_VAR 0 1
32924: PUSH
32925: LD_INT 255
32927: EQUAL
32928: PUSH
32929: LD_VAR 0 2
32933: PPUSH
32934: CALL_OW 264
32938: PUSH
32939: LD_INT 14
32941: PUSH
32942: LD_INT 53
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: IN
32949: AND
32950: PUSH
32951: LD_VAR 0 4
32955: PPUSH
32956: LD_VAR 0 5
32960: PPUSH
32961: CALL_OW 488
32965: AND
32966: IFFALSE 32990
// CutTreeXYR ( unit , x , y , 12 ) ;
32968: LD_VAR 0 2
32972: PPUSH
32973: LD_VAR 0 4
32977: PPUSH
32978: LD_VAR 0 5
32982: PPUSH
32983: LD_INT 12
32985: PPUSH
32986: CALL 33003 0 4
// end ;
32990: LD_VAR 0 6
32994: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32995: LD_INT 0
32997: PPUSH
// end ;
32998: LD_VAR 0 4
33002: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33003: LD_INT 0
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33014: LD_VAR 0 1
33018: NOT
33019: PUSH
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: CALL_OW 488
33034: NOT
33035: OR
33036: PUSH
33037: LD_VAR 0 4
33041: NOT
33042: OR
33043: IFFALSE 33047
// exit ;
33045: GO 33387
// list := [ ] ;
33047: LD_ADDR_VAR 0 13
33051: PUSH
33052: EMPTY
33053: ST_TO_ADDR
// if x - r < 0 then
33054: LD_VAR 0 2
33058: PUSH
33059: LD_VAR 0 4
33063: MINUS
33064: PUSH
33065: LD_INT 0
33067: LESS
33068: IFFALSE 33080
// min_x := 0 else
33070: LD_ADDR_VAR 0 7
33074: PUSH
33075: LD_INT 0
33077: ST_TO_ADDR
33078: GO 33096
// min_x := x - r ;
33080: LD_ADDR_VAR 0 7
33084: PUSH
33085: LD_VAR 0 2
33089: PUSH
33090: LD_VAR 0 4
33094: MINUS
33095: ST_TO_ADDR
// if y - r < 0 then
33096: LD_VAR 0 3
33100: PUSH
33101: LD_VAR 0 4
33105: MINUS
33106: PUSH
33107: LD_INT 0
33109: LESS
33110: IFFALSE 33122
// min_y := 0 else
33112: LD_ADDR_VAR 0 8
33116: PUSH
33117: LD_INT 0
33119: ST_TO_ADDR
33120: GO 33138
// min_y := y - r ;
33122: LD_ADDR_VAR 0 8
33126: PUSH
33127: LD_VAR 0 3
33131: PUSH
33132: LD_VAR 0 4
33136: MINUS
33137: ST_TO_ADDR
// max_x := x + r ;
33138: LD_ADDR_VAR 0 9
33142: PUSH
33143: LD_VAR 0 2
33147: PUSH
33148: LD_VAR 0 4
33152: PLUS
33153: ST_TO_ADDR
// max_y := y + r ;
33154: LD_ADDR_VAR 0 10
33158: PUSH
33159: LD_VAR 0 3
33163: PUSH
33164: LD_VAR 0 4
33168: PLUS
33169: ST_TO_ADDR
// for _x = min_x to max_x do
33170: LD_ADDR_VAR 0 11
33174: PUSH
33175: DOUBLE
33176: LD_VAR 0 7
33180: DEC
33181: ST_TO_ADDR
33182: LD_VAR 0 9
33186: PUSH
33187: FOR_TO
33188: IFFALSE 33305
// for _y = min_y to max_y do
33190: LD_ADDR_VAR 0 12
33194: PUSH
33195: DOUBLE
33196: LD_VAR 0 8
33200: DEC
33201: ST_TO_ADDR
33202: LD_VAR 0 10
33206: PUSH
33207: FOR_TO
33208: IFFALSE 33301
// begin if not ValidHex ( _x , _y ) then
33210: LD_VAR 0 11
33214: PPUSH
33215: LD_VAR 0 12
33219: PPUSH
33220: CALL_OW 488
33224: NOT
33225: IFFALSE 33229
// continue ;
33227: GO 33207
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33229: LD_VAR 0 11
33233: PPUSH
33234: LD_VAR 0 12
33238: PPUSH
33239: CALL_OW 351
33243: PUSH
33244: LD_VAR 0 11
33248: PPUSH
33249: LD_VAR 0 12
33253: PPUSH
33254: CALL_OW 554
33258: AND
33259: IFFALSE 33299
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33261: LD_ADDR_VAR 0 13
33265: PUSH
33266: LD_VAR 0 13
33270: PPUSH
33271: LD_VAR 0 13
33275: PUSH
33276: LD_INT 1
33278: PLUS
33279: PPUSH
33280: LD_VAR 0 11
33284: PUSH
33285: LD_VAR 0 12
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PPUSH
33294: CALL_OW 2
33298: ST_TO_ADDR
// end ;
33299: GO 33207
33301: POP
33302: POP
33303: GO 33187
33305: POP
33306: POP
// if not list then
33307: LD_VAR 0 13
33311: NOT
33312: IFFALSE 33316
// exit ;
33314: GO 33387
// for i in list do
33316: LD_ADDR_VAR 0 6
33320: PUSH
33321: LD_VAR 0 13
33325: PUSH
33326: FOR_IN
33327: IFFALSE 33385
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33329: LD_VAR 0 1
33333: PPUSH
33334: LD_STRING M
33336: PUSH
33337: LD_VAR 0 6
33341: PUSH
33342: LD_INT 1
33344: ARRAY
33345: PUSH
33346: LD_VAR 0 6
33350: PUSH
33351: LD_INT 2
33353: ARRAY
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: PUSH
33376: EMPTY
33377: LIST
33378: PPUSH
33379: CALL_OW 447
33383: GO 33326
33385: POP
33386: POP
// end ;
33387: LD_VAR 0 5
33391: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33392: LD_EXP 124
33396: NOT
33397: IFFALSE 33447
33399: GO 33401
33401: DISABLE
// begin initHack := true ;
33402: LD_ADDR_EXP 124
33406: PUSH
33407: LD_INT 1
33409: ST_TO_ADDR
// hackTanks := [ ] ;
33410: LD_ADDR_EXP 125
33414: PUSH
33415: EMPTY
33416: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33417: LD_ADDR_EXP 126
33421: PUSH
33422: EMPTY
33423: ST_TO_ADDR
// hackLimit := 3 ;
33424: LD_ADDR_EXP 127
33428: PUSH
33429: LD_INT 3
33431: ST_TO_ADDR
// hackDist := 12 ;
33432: LD_ADDR_EXP 128
33436: PUSH
33437: LD_INT 12
33439: ST_TO_ADDR
// hackCounter := [ ] ;
33440: LD_ADDR_EXP 129
33444: PUSH
33445: EMPTY
33446: ST_TO_ADDR
// end ;
33447: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33448: LD_EXP 124
33452: PUSH
33453: LD_INT 34
33455: PUSH
33456: LD_EXP 50
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PPUSH
33465: CALL_OW 69
33469: AND
33470: IFFALSE 33725
33472: GO 33474
33474: DISABLE
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
// begin enable ;
33479: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33480: LD_ADDR_VAR 0 1
33484: PUSH
33485: LD_INT 34
33487: PUSH
33488: LD_EXP 50
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PPUSH
33497: CALL_OW 69
33501: PUSH
33502: FOR_IN
33503: IFFALSE 33723
// begin if not i in hackTanks then
33505: LD_VAR 0 1
33509: PUSH
33510: LD_EXP 125
33514: IN
33515: NOT
33516: IFFALSE 33599
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33518: LD_ADDR_EXP 125
33522: PUSH
33523: LD_EXP 125
33527: PPUSH
33528: LD_EXP 125
33532: PUSH
33533: LD_INT 1
33535: PLUS
33536: PPUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 1
33546: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33547: LD_ADDR_EXP 126
33551: PUSH
33552: LD_EXP 126
33556: PPUSH
33557: LD_EXP 126
33561: PUSH
33562: LD_INT 1
33564: PLUS
33565: PPUSH
33566: EMPTY
33567: PPUSH
33568: CALL_OW 1
33572: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33573: LD_ADDR_EXP 129
33577: PUSH
33578: LD_EXP 129
33582: PPUSH
33583: LD_EXP 129
33587: PUSH
33588: LD_INT 1
33590: PLUS
33591: PPUSH
33592: EMPTY
33593: PPUSH
33594: CALL_OW 1
33598: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33599: LD_VAR 0 1
33603: PPUSH
33604: CALL_OW 302
33608: NOT
33609: IFFALSE 33622
// begin HackUnlinkAll ( i ) ;
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL 33728 0 1
// continue ;
33620: GO 33502
// end ; HackCheckCapturedStatus ( i ) ;
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL 34171 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33631: LD_ADDR_VAR 0 2
33635: PUSH
33636: LD_INT 81
33638: PUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 255
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 33
33655: PUSH
33656: LD_INT 3
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 91
33665: PUSH
33666: LD_VAR 0 1
33670: PUSH
33671: LD_EXP 128
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 50
33683: PUSH
33684: EMPTY
33685: LIST
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: PPUSH
33693: CALL_OW 69
33697: ST_TO_ADDR
// if not tmp then
33698: LD_VAR 0 2
33702: NOT
33703: IFFALSE 33707
// continue ;
33705: GO 33502
// HackLink ( i , tmp ) ;
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 2
33716: PPUSH
33717: CALL 33864 0 2
// end ;
33721: GO 33502
33723: POP
33724: POP
// end ;
33725: PPOPN 2
33727: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33728: LD_INT 0
33730: PPUSH
33731: PPUSH
33732: PPUSH
// if not hack in hackTanks then
33733: LD_VAR 0 1
33737: PUSH
33738: LD_EXP 125
33742: IN
33743: NOT
33744: IFFALSE 33748
// exit ;
33746: GO 33859
// index := GetElementIndex ( hackTanks , hack ) ;
33748: LD_ADDR_VAR 0 4
33752: PUSH
33753: LD_EXP 125
33757: PPUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL 41293 0 2
33767: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33768: LD_EXP 126
33772: PUSH
33773: LD_VAR 0 4
33777: ARRAY
33778: IFFALSE 33859
// begin for i in hackTanksCaptured [ index ] do
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_EXP 126
33789: PUSH
33790: LD_VAR 0 4
33794: ARRAY
33795: PUSH
33796: FOR_IN
33797: IFFALSE 33823
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33799: LD_VAR 0 3
33803: PUSH
33804: LD_INT 1
33806: ARRAY
33807: PPUSH
33808: LD_VAR 0 3
33812: PUSH
33813: LD_INT 2
33815: ARRAY
33816: PPUSH
33817: CALL_OW 235
33821: GO 33796
33823: POP
33824: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33825: LD_ADDR_EXP 126
33829: PUSH
33830: LD_EXP 126
33834: PPUSH
33835: LD_VAR 0 4
33839: PPUSH
33840: EMPTY
33841: PPUSH
33842: CALL_OW 1
33846: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33847: LD_VAR 0 1
33851: PPUSH
33852: LD_INT 0
33854: PPUSH
33855: CALL_OW 505
// end ; end ;
33859: LD_VAR 0 2
33863: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33864: LD_INT 0
33866: PPUSH
33867: PPUSH
33868: PPUSH
// if not hack in hackTanks or not vehicles then
33869: LD_VAR 0 1
33873: PUSH
33874: LD_EXP 125
33878: IN
33879: NOT
33880: PUSH
33881: LD_VAR 0 2
33885: NOT
33886: OR
33887: IFFALSE 33891
// exit ;
33889: GO 34166
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33891: LD_ADDR_VAR 0 2
33895: PUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: LD_VAR 0 2
33905: PPUSH
33906: LD_INT 1
33908: PPUSH
33909: LD_INT 1
33911: PPUSH
33912: CALL 41943 0 4
33916: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33917: LD_ADDR_VAR 0 5
33921: PUSH
33922: LD_EXP 125
33926: PPUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL 41293 0 2
33936: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33937: LD_EXP 126
33941: PUSH
33942: LD_VAR 0 5
33946: ARRAY
33947: PUSH
33948: LD_EXP 127
33952: LESS
33953: IFFALSE 34142
// begin for i := 1 to vehicles do
33955: LD_ADDR_VAR 0 4
33959: PUSH
33960: DOUBLE
33961: LD_INT 1
33963: DEC
33964: ST_TO_ADDR
33965: LD_VAR 0 2
33969: PUSH
33970: FOR_TO
33971: IFFALSE 34140
// begin if hackTanksCaptured [ index ] = hackLimit then
33973: LD_EXP 126
33977: PUSH
33978: LD_VAR 0 5
33982: ARRAY
33983: PUSH
33984: LD_EXP 127
33988: EQUAL
33989: IFFALSE 33993
// break ;
33991: GO 34140
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33993: LD_ADDR_EXP 129
33997: PUSH
33998: LD_EXP 129
34002: PPUSH
34003: LD_VAR 0 5
34007: PPUSH
34008: LD_EXP 129
34012: PUSH
34013: LD_VAR 0 5
34017: ARRAY
34018: PUSH
34019: LD_INT 1
34021: PLUS
34022: PPUSH
34023: CALL_OW 1
34027: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34028: LD_ADDR_EXP 126
34032: PUSH
34033: LD_EXP 126
34037: PPUSH
34038: LD_VAR 0 5
34042: PUSH
34043: LD_EXP 126
34047: PUSH
34048: LD_VAR 0 5
34052: ARRAY
34053: PUSH
34054: LD_INT 1
34056: PLUS
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PPUSH
34062: LD_VAR 0 2
34066: PUSH
34067: LD_VAR 0 4
34071: ARRAY
34072: PUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_VAR 0 4
34082: ARRAY
34083: PPUSH
34084: CALL_OW 255
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PPUSH
34093: CALL 41508 0 3
34097: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34098: LD_VAR 0 2
34102: PUSH
34103: LD_VAR 0 4
34107: ARRAY
34108: PPUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 255
34118: PPUSH
34119: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34123: LD_VAR 0 2
34127: PUSH
34128: LD_VAR 0 4
34132: ARRAY
34133: PPUSH
34134: CALL_OW 141
// end ;
34138: GO 33970
34140: POP
34141: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34142: LD_VAR 0 1
34146: PPUSH
34147: LD_EXP 126
34151: PUSH
34152: LD_VAR 0 5
34156: ARRAY
34157: PUSH
34158: LD_INT 0
34160: PLUS
34161: PPUSH
34162: CALL_OW 505
// end ;
34166: LD_VAR 0 3
34170: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34171: LD_INT 0
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
// if not hack in hackTanks then
34177: LD_VAR 0 1
34181: PUSH
34182: LD_EXP 125
34186: IN
34187: NOT
34188: IFFALSE 34192
// exit ;
34190: GO 34432
// index := GetElementIndex ( hackTanks , hack ) ;
34192: LD_ADDR_VAR 0 4
34196: PUSH
34197: LD_EXP 125
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL 41293 0 2
34211: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: DOUBLE
34218: LD_EXP 126
34222: PUSH
34223: LD_VAR 0 4
34227: ARRAY
34228: INC
34229: ST_TO_ADDR
34230: LD_INT 1
34232: PUSH
34233: FOR_DOWNTO
34234: IFFALSE 34406
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: LD_EXP 126
34245: PUSH
34246: LD_VAR 0 4
34250: ARRAY
34251: PUSH
34252: LD_VAR 0 3
34256: ARRAY
34257: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34258: LD_VAR 0 5
34262: PUSH
34263: LD_INT 1
34265: ARRAY
34266: PPUSH
34267: CALL_OW 302
34271: NOT
34272: PUSH
34273: LD_VAR 0 5
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: PPUSH
34282: CALL_OW 255
34286: PUSH
34287: LD_VAR 0 1
34291: PPUSH
34292: CALL_OW 255
34296: NONEQUAL
34297: OR
34298: IFFALSE 34404
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34300: LD_VAR 0 5
34304: PUSH
34305: LD_INT 1
34307: ARRAY
34308: PPUSH
34309: CALL_OW 305
34313: PUSH
34314: LD_VAR 0 5
34318: PUSH
34319: LD_INT 1
34321: ARRAY
34322: PPUSH
34323: CALL_OW 255
34327: PUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL_OW 255
34337: EQUAL
34338: AND
34339: IFFALSE 34363
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34341: LD_VAR 0 5
34345: PUSH
34346: LD_INT 1
34348: ARRAY
34349: PPUSH
34350: LD_VAR 0 5
34354: PUSH
34355: LD_INT 2
34357: ARRAY
34358: PPUSH
34359: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34363: LD_ADDR_EXP 126
34367: PUSH
34368: LD_EXP 126
34372: PPUSH
34373: LD_VAR 0 4
34377: PPUSH
34378: LD_EXP 126
34382: PUSH
34383: LD_VAR 0 4
34387: ARRAY
34388: PPUSH
34389: LD_VAR 0 3
34393: PPUSH
34394: CALL_OW 3
34398: PPUSH
34399: CALL_OW 1
34403: ST_TO_ADDR
// end ; end ;
34404: GO 34233
34406: POP
34407: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34408: LD_VAR 0 1
34412: PPUSH
34413: LD_EXP 126
34417: PUSH
34418: LD_VAR 0 4
34422: ARRAY
34423: PUSH
34424: LD_INT 0
34426: PLUS
34427: PPUSH
34428: CALL_OW 505
// end ;
34432: LD_VAR 0 2
34436: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34437: LD_INT 0
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
// if not hack in hackTanks then
34443: LD_VAR 0 1
34447: PUSH
34448: LD_EXP 125
34452: IN
34453: NOT
34454: IFFALSE 34458
// exit ;
34456: GO 34543
// index := GetElementIndex ( hackTanks , hack ) ;
34458: LD_ADDR_VAR 0 5
34462: PUSH
34463: LD_EXP 125
34467: PPUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL 41293 0 2
34477: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34478: LD_ADDR_VAR 0 4
34482: PUSH
34483: DOUBLE
34484: LD_INT 1
34486: DEC
34487: ST_TO_ADDR
34488: LD_EXP 126
34492: PUSH
34493: LD_VAR 0 5
34497: ARRAY
34498: PUSH
34499: FOR_TO
34500: IFFALSE 34541
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34502: LD_EXP 126
34506: PUSH
34507: LD_VAR 0 5
34511: ARRAY
34512: PUSH
34513: LD_VAR 0 4
34517: ARRAY
34518: PUSH
34519: LD_INT 1
34521: ARRAY
34522: PUSH
34523: LD_VAR 0 2
34527: EQUAL
34528: IFFALSE 34539
// KillUnit ( vehicle ) ;
34530: LD_VAR 0 2
34534: PPUSH
34535: CALL_OW 66
34539: GO 34499
34541: POP
34542: POP
// end ;
34543: LD_VAR 0 3
34547: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34548: LD_EXP 130
34552: NOT
34553: IFFALSE 34588
34555: GO 34557
34557: DISABLE
// begin initMiner := true ;
34558: LD_ADDR_EXP 130
34562: PUSH
34563: LD_INT 1
34565: ST_TO_ADDR
// minersList := [ ] ;
34566: LD_ADDR_EXP 131
34570: PUSH
34571: EMPTY
34572: ST_TO_ADDR
// minerMinesList := [ ] ;
34573: LD_ADDR_EXP 132
34577: PUSH
34578: EMPTY
34579: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34580: LD_ADDR_EXP 133
34584: PUSH
34585: LD_INT 5
34587: ST_TO_ADDR
// end ;
34588: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34589: LD_EXP 130
34593: PUSH
34594: LD_INT 34
34596: PUSH
34597: LD_EXP 55
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PPUSH
34606: CALL_OW 69
34610: AND
34611: IFFALSE 35074
34613: GO 34615
34615: DISABLE
34616: LD_INT 0
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
// begin enable ;
34622: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34623: LD_ADDR_VAR 0 1
34627: PUSH
34628: LD_INT 34
34630: PUSH
34631: LD_EXP 55
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PPUSH
34640: CALL_OW 69
34644: PUSH
34645: FOR_IN
34646: IFFALSE 34718
// begin if not i in minersList then
34648: LD_VAR 0 1
34652: PUSH
34653: LD_EXP 131
34657: IN
34658: NOT
34659: IFFALSE 34716
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34661: LD_ADDR_EXP 131
34665: PUSH
34666: LD_EXP 131
34670: PPUSH
34671: LD_EXP 131
34675: PUSH
34676: LD_INT 1
34678: PLUS
34679: PPUSH
34680: LD_VAR 0 1
34684: PPUSH
34685: CALL_OW 1
34689: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34690: LD_ADDR_EXP 132
34694: PUSH
34695: LD_EXP 132
34699: PPUSH
34700: LD_EXP 132
34704: PUSH
34705: LD_INT 1
34707: PLUS
34708: PPUSH
34709: EMPTY
34710: PPUSH
34711: CALL_OW 1
34715: ST_TO_ADDR
// end end ;
34716: GO 34645
34718: POP
34719: POP
// for i := minerMinesList downto 1 do
34720: LD_ADDR_VAR 0 1
34724: PUSH
34725: DOUBLE
34726: LD_EXP 132
34730: INC
34731: ST_TO_ADDR
34732: LD_INT 1
34734: PUSH
34735: FOR_DOWNTO
34736: IFFALSE 35072
// begin if IsLive ( minersList [ i ] ) then
34738: LD_EXP 131
34742: PUSH
34743: LD_VAR 0 1
34747: ARRAY
34748: PPUSH
34749: CALL_OW 300
34753: IFFALSE 34781
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34755: LD_EXP 131
34759: PUSH
34760: LD_VAR 0 1
34764: ARRAY
34765: PPUSH
34766: LD_EXP 132
34770: PUSH
34771: LD_VAR 0 1
34775: ARRAY
34776: PPUSH
34777: CALL_OW 505
// if not minerMinesList [ i ] then
34781: LD_EXP 132
34785: PUSH
34786: LD_VAR 0 1
34790: ARRAY
34791: NOT
34792: IFFALSE 34796
// continue ;
34794: GO 34735
// for j := minerMinesList [ i ] downto 1 do
34796: LD_ADDR_VAR 0 2
34800: PUSH
34801: DOUBLE
34802: LD_EXP 132
34806: PUSH
34807: LD_VAR 0 1
34811: ARRAY
34812: INC
34813: ST_TO_ADDR
34814: LD_INT 1
34816: PUSH
34817: FOR_DOWNTO
34818: IFFALSE 35068
// begin side := GetSide ( minersList [ i ] ) ;
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_EXP 131
34829: PUSH
34830: LD_VAR 0 1
34834: ARRAY
34835: PPUSH
34836: CALL_OW 255
34840: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34841: LD_ADDR_VAR 0 4
34845: PUSH
34846: LD_EXP 132
34850: PUSH
34851: LD_VAR 0 1
34855: ARRAY
34856: PUSH
34857: LD_VAR 0 2
34861: ARRAY
34862: PUSH
34863: LD_INT 1
34865: ARRAY
34866: PPUSH
34867: LD_EXP 132
34871: PUSH
34872: LD_VAR 0 1
34876: ARRAY
34877: PUSH
34878: LD_VAR 0 2
34882: ARRAY
34883: PUSH
34884: LD_INT 2
34886: ARRAY
34887: PPUSH
34888: CALL_OW 428
34892: ST_TO_ADDR
// if not tmp then
34893: LD_VAR 0 4
34897: NOT
34898: IFFALSE 34902
// continue ;
34900: GO 34817
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34902: LD_VAR 0 4
34906: PUSH
34907: LD_INT 81
34909: PUSH
34910: LD_VAR 0 3
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PPUSH
34919: CALL_OW 69
34923: IN
34924: PUSH
34925: LD_EXP 132
34929: PUSH
34930: LD_VAR 0 1
34934: ARRAY
34935: PUSH
34936: LD_VAR 0 2
34940: ARRAY
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: PPUSH
34946: LD_EXP 132
34950: PUSH
34951: LD_VAR 0 1
34955: ARRAY
34956: PUSH
34957: LD_VAR 0 2
34961: ARRAY
34962: PUSH
34963: LD_INT 2
34965: ARRAY
34966: PPUSH
34967: CALL_OW 458
34971: AND
34972: IFFALSE 35066
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34974: LD_EXP 132
34978: PUSH
34979: LD_VAR 0 1
34983: ARRAY
34984: PUSH
34985: LD_VAR 0 2
34989: ARRAY
34990: PUSH
34991: LD_INT 1
34993: ARRAY
34994: PPUSH
34995: LD_EXP 132
34999: PUSH
35000: LD_VAR 0 1
35004: ARRAY
35005: PUSH
35006: LD_VAR 0 2
35010: ARRAY
35011: PUSH
35012: LD_INT 2
35014: ARRAY
35015: PPUSH
35016: LD_VAR 0 3
35020: PPUSH
35021: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35025: LD_ADDR_EXP 132
35029: PUSH
35030: LD_EXP 132
35034: PPUSH
35035: LD_VAR 0 1
35039: PPUSH
35040: LD_EXP 132
35044: PUSH
35045: LD_VAR 0 1
35049: ARRAY
35050: PPUSH
35051: LD_VAR 0 2
35055: PPUSH
35056: CALL_OW 3
35060: PPUSH
35061: CALL_OW 1
35065: ST_TO_ADDR
// end ; end ;
35066: GO 34817
35068: POP
35069: POP
// end ;
35070: GO 34735
35072: POP
35073: POP
// end ;
35074: PPOPN 4
35076: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
// result := false ;
35081: LD_ADDR_VAR 0 4
35085: PUSH
35086: LD_INT 0
35088: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 264
35098: PUSH
35099: LD_EXP 55
35103: EQUAL
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 35349
// index := GetElementIndex ( minersList , unit ) ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_EXP 131
35118: PPUSH
35119: LD_VAR 0 1
35123: PPUSH
35124: CALL 41293 0 2
35128: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35129: LD_EXP 132
35133: PUSH
35134: LD_VAR 0 5
35138: ARRAY
35139: PUSH
35140: LD_EXP 133
35144: GREATEREQUAL
35145: IFFALSE 35149
// exit ;
35147: GO 35349
// ComMoveXY ( unit , x , y ) ;
35149: LD_VAR 0 1
35153: PPUSH
35154: LD_VAR 0 2
35158: PPUSH
35159: LD_VAR 0 3
35163: PPUSH
35164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35168: LD_INT 35
35170: PPUSH
35171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35175: LD_VAR 0 1
35179: PPUSH
35180: LD_VAR 0 2
35184: PPUSH
35185: LD_VAR 0 3
35189: PPUSH
35190: CALL 71660 0 3
35194: NOT
35195: PUSH
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 314
35205: AND
35206: IFFALSE 35210
// exit ;
35208: GO 35349
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35210: LD_VAR 0 2
35214: PPUSH
35215: LD_VAR 0 3
35219: PPUSH
35220: CALL_OW 428
35224: PUSH
35225: LD_VAR 0 1
35229: EQUAL
35230: PUSH
35231: LD_VAR 0 1
35235: PPUSH
35236: CALL_OW 314
35240: NOT
35241: AND
35242: IFFALSE 35168
// PlaySoundXY ( x , y , PlantMine ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 3
35253: PPUSH
35254: LD_STRING PlantMine
35256: PPUSH
35257: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35261: LD_VAR 0 2
35265: PPUSH
35266: LD_VAR 0 3
35270: PPUSH
35271: LD_VAR 0 1
35275: PPUSH
35276: CALL_OW 255
35280: PPUSH
35281: LD_INT 0
35283: PPUSH
35284: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35288: LD_ADDR_EXP 132
35292: PUSH
35293: LD_EXP 132
35297: PPUSH
35298: LD_VAR 0 5
35302: PUSH
35303: LD_EXP 132
35307: PUSH
35308: LD_VAR 0 5
35312: ARRAY
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PPUSH
35322: LD_VAR 0 2
35326: PUSH
35327: LD_VAR 0 3
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PPUSH
35336: CALL 41508 0 3
35340: ST_TO_ADDR
// result := true ;
35341: LD_ADDR_VAR 0 4
35345: PUSH
35346: LD_INT 1
35348: ST_TO_ADDR
// end ;
35349: LD_VAR 0 4
35353: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
// if not unit in minersList then
35359: LD_VAR 0 1
35363: PUSH
35364: LD_EXP 131
35368: IN
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 35766
// index := GetElementIndex ( minersList , unit ) ;
35374: LD_ADDR_VAR 0 6
35378: PUSH
35379: LD_EXP 131
35383: PPUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL 41293 0 2
35393: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35394: LD_ADDR_VAR 0 5
35398: PUSH
35399: DOUBLE
35400: LD_EXP 132
35404: PUSH
35405: LD_VAR 0 6
35409: ARRAY
35410: INC
35411: ST_TO_ADDR
35412: LD_INT 1
35414: PUSH
35415: FOR_DOWNTO
35416: IFFALSE 35577
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35418: LD_EXP 132
35422: PUSH
35423: LD_VAR 0 6
35427: ARRAY
35428: PUSH
35429: LD_VAR 0 5
35433: ARRAY
35434: PUSH
35435: LD_INT 1
35437: ARRAY
35438: PUSH
35439: LD_VAR 0 2
35443: EQUAL
35444: PUSH
35445: LD_EXP 132
35449: PUSH
35450: LD_VAR 0 6
35454: ARRAY
35455: PUSH
35456: LD_VAR 0 5
35460: ARRAY
35461: PUSH
35462: LD_INT 2
35464: ARRAY
35465: PUSH
35466: LD_VAR 0 3
35470: EQUAL
35471: AND
35472: IFFALSE 35575
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35474: LD_EXP 132
35478: PUSH
35479: LD_VAR 0 6
35483: ARRAY
35484: PUSH
35485: LD_VAR 0 5
35489: ARRAY
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: PPUSH
35495: LD_EXP 132
35499: PUSH
35500: LD_VAR 0 6
35504: ARRAY
35505: PUSH
35506: LD_VAR 0 5
35510: ARRAY
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: PPUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 255
35525: PPUSH
35526: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35530: LD_ADDR_EXP 132
35534: PUSH
35535: LD_EXP 132
35539: PPUSH
35540: LD_VAR 0 6
35544: PPUSH
35545: LD_EXP 132
35549: PUSH
35550: LD_VAR 0 6
35554: ARRAY
35555: PPUSH
35556: LD_VAR 0 5
35560: PPUSH
35561: CALL_OW 3
35565: PPUSH
35566: CALL_OW 1
35570: ST_TO_ADDR
// exit ;
35571: POP
35572: POP
35573: GO 35766
// end ; end ;
35575: GO 35415
35577: POP
35578: POP
// for i := minerMinesList [ index ] downto 1 do
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: DOUBLE
35585: LD_EXP 132
35589: PUSH
35590: LD_VAR 0 6
35594: ARRAY
35595: INC
35596: ST_TO_ADDR
35597: LD_INT 1
35599: PUSH
35600: FOR_DOWNTO
35601: IFFALSE 35764
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35603: LD_EXP 132
35607: PUSH
35608: LD_VAR 0 6
35612: ARRAY
35613: PUSH
35614: LD_VAR 0 5
35618: ARRAY
35619: PUSH
35620: LD_INT 1
35622: ARRAY
35623: PPUSH
35624: LD_EXP 132
35628: PUSH
35629: LD_VAR 0 6
35633: ARRAY
35634: PUSH
35635: LD_VAR 0 5
35639: ARRAY
35640: PUSH
35641: LD_INT 2
35643: ARRAY
35644: PPUSH
35645: LD_VAR 0 2
35649: PPUSH
35650: LD_VAR 0 3
35654: PPUSH
35655: CALL_OW 298
35659: PUSH
35660: LD_INT 6
35662: LESS
35663: IFFALSE 35762
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35665: LD_EXP 132
35669: PUSH
35670: LD_VAR 0 6
35674: ARRAY
35675: PUSH
35676: LD_VAR 0 5
35680: ARRAY
35681: PUSH
35682: LD_INT 1
35684: ARRAY
35685: PPUSH
35686: LD_EXP 132
35690: PUSH
35691: LD_VAR 0 6
35695: ARRAY
35696: PUSH
35697: LD_VAR 0 5
35701: ARRAY
35702: PUSH
35703: LD_INT 2
35705: ARRAY
35706: PPUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 255
35716: PPUSH
35717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35721: LD_ADDR_EXP 132
35725: PUSH
35726: LD_EXP 132
35730: PPUSH
35731: LD_VAR 0 6
35735: PPUSH
35736: LD_EXP 132
35740: PUSH
35741: LD_VAR 0 6
35745: ARRAY
35746: PPUSH
35747: LD_VAR 0 5
35751: PPUSH
35752: CALL_OW 3
35756: PPUSH
35757: CALL_OW 1
35761: ST_TO_ADDR
// end ; end ;
35762: GO 35600
35764: POP
35765: POP
// end ;
35766: LD_VAR 0 4
35770: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35771: LD_INT 0
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 264
35791: PUSH
35792: LD_EXP 55
35796: EQUAL
35797: NOT
35798: PUSH
35799: LD_VAR 0 1
35803: PUSH
35804: LD_EXP 131
35808: IN
35809: NOT
35810: OR
35811: IFFALSE 35815
// exit ;
35813: GO 36137
// index := GetElementIndex ( minersList , unit ) ;
35815: LD_ADDR_VAR 0 6
35819: PUSH
35820: LD_EXP 131
35824: PPUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL 41293 0 2
35834: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35835: LD_ADDR_VAR 0 8
35839: PUSH
35840: LD_EXP 133
35844: PUSH
35845: LD_EXP 132
35849: PUSH
35850: LD_VAR 0 6
35854: ARRAY
35855: MINUS
35856: ST_TO_ADDR
// if not minesFreeAmount then
35857: LD_VAR 0 8
35861: NOT
35862: IFFALSE 35866
// exit ;
35864: GO 36137
// tmp := [ ] ;
35866: LD_ADDR_VAR 0 7
35870: PUSH
35871: EMPTY
35872: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35873: LD_ADDR_VAR 0 5
35877: PUSH
35878: DOUBLE
35879: LD_INT 1
35881: DEC
35882: ST_TO_ADDR
35883: LD_VAR 0 8
35887: PUSH
35888: FOR_TO
35889: IFFALSE 36084
// begin _d := rand ( 0 , 5 ) ;
35891: LD_ADDR_VAR 0 11
35895: PUSH
35896: LD_INT 0
35898: PPUSH
35899: LD_INT 5
35901: PPUSH
35902: CALL_OW 12
35906: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35907: LD_ADDR_VAR 0 12
35911: PUSH
35912: LD_INT 2
35914: PPUSH
35915: LD_INT 6
35917: PPUSH
35918: CALL_OW 12
35922: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35923: LD_ADDR_VAR 0 9
35927: PUSH
35928: LD_VAR 0 2
35932: PPUSH
35933: LD_VAR 0 11
35937: PPUSH
35938: LD_VAR 0 12
35942: PPUSH
35943: CALL_OW 272
35947: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35948: LD_ADDR_VAR 0 10
35952: PUSH
35953: LD_VAR 0 3
35957: PPUSH
35958: LD_VAR 0 11
35962: PPUSH
35963: LD_VAR 0 12
35967: PPUSH
35968: CALL_OW 273
35972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35973: LD_VAR 0 9
35977: PPUSH
35978: LD_VAR 0 10
35982: PPUSH
35983: CALL_OW 488
35987: PUSH
35988: LD_VAR 0 9
35992: PUSH
35993: LD_VAR 0 10
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_VAR 0 7
36006: IN
36007: NOT
36008: AND
36009: PUSH
36010: LD_VAR 0 9
36014: PPUSH
36015: LD_VAR 0 10
36019: PPUSH
36020: CALL_OW 458
36024: NOT
36025: AND
36026: IFFALSE 36068
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36028: LD_ADDR_VAR 0 7
36032: PUSH
36033: LD_VAR 0 7
36037: PPUSH
36038: LD_VAR 0 7
36042: PUSH
36043: LD_INT 1
36045: PLUS
36046: PPUSH
36047: LD_VAR 0 9
36051: PUSH
36052: LD_VAR 0 10
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PPUSH
36061: CALL_OW 1
36065: ST_TO_ADDR
36066: GO 36082
// i := i - 1 ;
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 5
36077: PUSH
36078: LD_INT 1
36080: MINUS
36081: ST_TO_ADDR
// end ;
36082: GO 35888
36084: POP
36085: POP
// for i in tmp do
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: LD_VAR 0 7
36095: PUSH
36096: FOR_IN
36097: IFFALSE 36135
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36099: LD_VAR 0 1
36103: PPUSH
36104: LD_VAR 0 5
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: LD_VAR 0 5
36117: PUSH
36118: LD_INT 2
36120: ARRAY
36121: PPUSH
36122: CALL 35077 0 3
36126: NOT
36127: IFFALSE 36133
// exit ;
36129: POP
36130: POP
36131: GO 36137
36133: GO 36096
36135: POP
36136: POP
// end ;
36137: LD_VAR 0 4
36141: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36142: LD_INT 0
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
36150: PPUSH
// if not GetClass ( unit ) = class_sniper then
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 257
36160: PUSH
36161: LD_INT 5
36163: EQUAL
36164: NOT
36165: IFFALSE 36169
// exit ;
36167: GO 36557
// dist := 8 ;
36169: LD_ADDR_VAR 0 5
36173: PUSH
36174: LD_INT 8
36176: ST_TO_ADDR
// viewRange := 12 ;
36177: LD_ADDR_VAR 0 7
36181: PUSH
36182: LD_INT 12
36184: ST_TO_ADDR
// side := GetSide ( unit ) ;
36185: LD_ADDR_VAR 0 6
36189: PUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 255
36199: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36200: LD_INT 61
36202: PPUSH
36203: LD_VAR 0 6
36207: PPUSH
36208: CALL_OW 321
36212: PUSH
36213: LD_INT 2
36215: EQUAL
36216: IFFALSE 36226
// viewRange := 16 ;
36218: LD_ADDR_VAR 0 7
36222: PUSH
36223: LD_INT 16
36225: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36226: LD_VAR 0 1
36230: PPUSH
36231: LD_VAR 0 2
36235: PPUSH
36236: LD_VAR 0 3
36240: PPUSH
36241: CALL_OW 297
36245: PUSH
36246: LD_VAR 0 5
36250: GREATER
36251: IFFALSE 36330
// begin ComMoveXY ( unit , x , y ) ;
36253: LD_VAR 0 1
36257: PPUSH
36258: LD_VAR 0 2
36262: PPUSH
36263: LD_VAR 0 3
36267: PPUSH
36268: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36272: LD_INT 35
36274: PPUSH
36275: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36279: LD_VAR 0 1
36283: PPUSH
36284: LD_VAR 0 2
36288: PPUSH
36289: LD_VAR 0 3
36293: PPUSH
36294: CALL 71660 0 3
36298: NOT
36299: IFFALSE 36303
// exit ;
36301: GO 36557
// until GetDistUnitXY ( unit , x , y ) < dist ;
36303: LD_VAR 0 1
36307: PPUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: LD_VAR 0 3
36317: PPUSH
36318: CALL_OW 297
36322: PUSH
36323: LD_VAR 0 5
36327: LESS
36328: IFFALSE 36272
// end ; ComTurnXY ( unit , x , y ) ;
36330: LD_VAR 0 1
36334: PPUSH
36335: LD_VAR 0 2
36339: PPUSH
36340: LD_VAR 0 3
36344: PPUSH
36345: CALL_OW 118
// wait ( 5 ) ;
36349: LD_INT 5
36351: PPUSH
36352: CALL_OW 67
// _d := GetDir ( unit ) ;
36356: LD_ADDR_VAR 0 10
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 254
36370: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36371: LD_ADDR_VAR 0 8
36375: PUSH
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL_OW 250
36385: PPUSH
36386: LD_VAR 0 10
36390: PPUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: CALL_OW 272
36400: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: CALL_OW 251
36415: PPUSH
36416: LD_VAR 0 10
36420: PPUSH
36421: LD_VAR 0 5
36425: PPUSH
36426: CALL_OW 273
36430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36431: LD_VAR 0 8
36435: PPUSH
36436: LD_VAR 0 9
36440: PPUSH
36441: CALL_OW 488
36445: NOT
36446: IFFALSE 36450
// exit ;
36448: GO 36557
// ComAnimCustom ( unit , 1 ) ;
36450: LD_VAR 0 1
36454: PPUSH
36455: LD_INT 1
36457: PPUSH
36458: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36462: LD_VAR 0 8
36466: PPUSH
36467: LD_VAR 0 9
36471: PPUSH
36472: LD_VAR 0 6
36476: PPUSH
36477: LD_VAR 0 7
36481: PPUSH
36482: CALL_OW 330
// repeat wait ( 1 ) ;
36486: LD_INT 1
36488: PPUSH
36489: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36493: LD_VAR 0 1
36497: PPUSH
36498: CALL_OW 316
36502: PUSH
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 314
36512: OR
36513: PUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL_OW 302
36523: NOT
36524: OR
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 301
36535: OR
36536: IFFALSE 36486
// RemoveSeeing ( _x , _y , side ) ;
36538: LD_VAR 0 8
36542: PPUSH
36543: LD_VAR 0 9
36547: PPUSH
36548: LD_VAR 0 6
36552: PPUSH
36553: CALL_OW 331
// end ; end_of_file
36557: LD_VAR 0 4
36561: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36562: LD_INT 0
36564: PPUSH
36565: PPUSH
// if exist_mode then
36566: LD_VAR 0 2
36570: IFFALSE 36595
// unit := CreateCharacter ( prefix & ident ) else
36572: LD_ADDR_VAR 0 5
36576: PUSH
36577: LD_VAR 0 3
36581: PUSH
36582: LD_VAR 0 1
36586: STR
36587: PPUSH
36588: CALL_OW 34
36592: ST_TO_ADDR
36593: GO 36610
// unit := NewCharacter ( ident ) ;
36595: LD_ADDR_VAR 0 5
36599: PUSH
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL_OW 25
36609: ST_TO_ADDR
// result := unit ;
36610: LD_ADDR_VAR 0 4
36614: PUSH
36615: LD_VAR 0 5
36619: ST_TO_ADDR
// end ;
36620: LD_VAR 0 4
36624: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36625: LD_INT 0
36627: PPUSH
36628: PPUSH
// if not side or not nation then
36629: LD_VAR 0 1
36633: NOT
36634: PUSH
36635: LD_VAR 0 2
36639: NOT
36640: OR
36641: IFFALSE 36645
// exit ;
36643: GO 37409
// case nation of nation_american :
36645: LD_VAR 0 2
36649: PUSH
36650: LD_INT 1
36652: DOUBLE
36653: EQUAL
36654: IFTRUE 36658
36656: GO 36872
36658: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36659: LD_ADDR_VAR 0 4
36663: PUSH
36664: LD_INT 35
36666: PUSH
36667: LD_INT 45
36669: PUSH
36670: LD_INT 46
36672: PUSH
36673: LD_INT 47
36675: PUSH
36676: LD_INT 82
36678: PUSH
36679: LD_INT 83
36681: PUSH
36682: LD_INT 84
36684: PUSH
36685: LD_INT 85
36687: PUSH
36688: LD_INT 86
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: LD_INT 2
36696: PUSH
36697: LD_INT 6
36699: PUSH
36700: LD_INT 15
36702: PUSH
36703: LD_INT 16
36705: PUSH
36706: LD_INT 7
36708: PUSH
36709: LD_INT 12
36711: PUSH
36712: LD_INT 13
36714: PUSH
36715: LD_INT 10
36717: PUSH
36718: LD_INT 14
36720: PUSH
36721: LD_INT 20
36723: PUSH
36724: LD_INT 21
36726: PUSH
36727: LD_INT 22
36729: PUSH
36730: LD_INT 25
36732: PUSH
36733: LD_INT 32
36735: PUSH
36736: LD_INT 27
36738: PUSH
36739: LD_INT 36
36741: PUSH
36742: LD_INT 69
36744: PUSH
36745: LD_INT 39
36747: PUSH
36748: LD_INT 34
36750: PUSH
36751: LD_INT 40
36753: PUSH
36754: LD_INT 48
36756: PUSH
36757: LD_INT 49
36759: PUSH
36760: LD_INT 50
36762: PUSH
36763: LD_INT 51
36765: PUSH
36766: LD_INT 52
36768: PUSH
36769: LD_INT 53
36771: PUSH
36772: LD_INT 54
36774: PUSH
36775: LD_INT 55
36777: PUSH
36778: LD_INT 56
36780: PUSH
36781: LD_INT 57
36783: PUSH
36784: LD_INT 58
36786: PUSH
36787: LD_INT 59
36789: PUSH
36790: LD_INT 60
36792: PUSH
36793: LD_INT 61
36795: PUSH
36796: LD_INT 62
36798: PUSH
36799: LD_INT 80
36801: PUSH
36802: LD_INT 82
36804: PUSH
36805: LD_INT 83
36807: PUSH
36808: LD_INT 84
36810: PUSH
36811: LD_INT 85
36813: PUSH
36814: LD_INT 86
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
36870: GO 37333
36872: LD_INT 2
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 37102
36880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36881: LD_ADDR_VAR 0 4
36885: PUSH
36886: LD_INT 35
36888: PUSH
36889: LD_INT 45
36891: PUSH
36892: LD_INT 46
36894: PUSH
36895: LD_INT 47
36897: PUSH
36898: LD_INT 82
36900: PUSH
36901: LD_INT 83
36903: PUSH
36904: LD_INT 84
36906: PUSH
36907: LD_INT 85
36909: PUSH
36910: LD_INT 87
36912: PUSH
36913: LD_INT 70
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 11
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 4
36927: PUSH
36928: LD_INT 5
36930: PUSH
36931: LD_INT 6
36933: PUSH
36934: LD_INT 15
36936: PUSH
36937: LD_INT 18
36939: PUSH
36940: LD_INT 7
36942: PUSH
36943: LD_INT 17
36945: PUSH
36946: LD_INT 8
36948: PUSH
36949: LD_INT 20
36951: PUSH
36952: LD_INT 21
36954: PUSH
36955: LD_INT 22
36957: PUSH
36958: LD_INT 72
36960: PUSH
36961: LD_INT 26
36963: PUSH
36964: LD_INT 69
36966: PUSH
36967: LD_INT 39
36969: PUSH
36970: LD_INT 40
36972: PUSH
36973: LD_INT 41
36975: PUSH
36976: LD_INT 42
36978: PUSH
36979: LD_INT 43
36981: PUSH
36982: LD_INT 48
36984: PUSH
36985: LD_INT 49
36987: PUSH
36988: LD_INT 50
36990: PUSH
36991: LD_INT 51
36993: PUSH
36994: LD_INT 52
36996: PUSH
36997: LD_INT 53
36999: PUSH
37000: LD_INT 54
37002: PUSH
37003: LD_INT 55
37005: PUSH
37006: LD_INT 56
37008: PUSH
37009: LD_INT 60
37011: PUSH
37012: LD_INT 61
37014: PUSH
37015: LD_INT 62
37017: PUSH
37018: LD_INT 66
37020: PUSH
37021: LD_INT 67
37023: PUSH
37024: LD_INT 68
37026: PUSH
37027: LD_INT 81
37029: PUSH
37030: LD_INT 82
37032: PUSH
37033: LD_INT 83
37035: PUSH
37036: LD_INT 84
37038: PUSH
37039: LD_INT 85
37041: PUSH
37042: LD_INT 87
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
37100: GO 37333
37102: LD_INT 3
37104: DOUBLE
37105: EQUAL
37106: IFTRUE 37110
37108: GO 37332
37110: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37111: LD_ADDR_VAR 0 4
37115: PUSH
37116: LD_INT 46
37118: PUSH
37119: LD_INT 47
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 82
37130: PUSH
37131: LD_INT 83
37133: PUSH
37134: LD_INT 84
37136: PUSH
37137: LD_INT 85
37139: PUSH
37140: LD_INT 86
37142: PUSH
37143: LD_INT 11
37145: PUSH
37146: LD_INT 9
37148: PUSH
37149: LD_INT 20
37151: PUSH
37152: LD_INT 19
37154: PUSH
37155: LD_INT 21
37157: PUSH
37158: LD_INT 24
37160: PUSH
37161: LD_INT 22
37163: PUSH
37164: LD_INT 25
37166: PUSH
37167: LD_INT 28
37169: PUSH
37170: LD_INT 29
37172: PUSH
37173: LD_INT 30
37175: PUSH
37176: LD_INT 31
37178: PUSH
37179: LD_INT 37
37181: PUSH
37182: LD_INT 38
37184: PUSH
37185: LD_INT 32
37187: PUSH
37188: LD_INT 27
37190: PUSH
37191: LD_INT 33
37193: PUSH
37194: LD_INT 69
37196: PUSH
37197: LD_INT 39
37199: PUSH
37200: LD_INT 34
37202: PUSH
37203: LD_INT 40
37205: PUSH
37206: LD_INT 71
37208: PUSH
37209: LD_INT 23
37211: PUSH
37212: LD_INT 44
37214: PUSH
37215: LD_INT 48
37217: PUSH
37218: LD_INT 49
37220: PUSH
37221: LD_INT 50
37223: PUSH
37224: LD_INT 51
37226: PUSH
37227: LD_INT 52
37229: PUSH
37230: LD_INT 53
37232: PUSH
37233: LD_INT 54
37235: PUSH
37236: LD_INT 55
37238: PUSH
37239: LD_INT 56
37241: PUSH
37242: LD_INT 57
37244: PUSH
37245: LD_INT 58
37247: PUSH
37248: LD_INT 59
37250: PUSH
37251: LD_INT 63
37253: PUSH
37254: LD_INT 64
37256: PUSH
37257: LD_INT 65
37259: PUSH
37260: LD_INT 82
37262: PUSH
37263: LD_INT 83
37265: PUSH
37266: LD_INT 84
37268: PUSH
37269: LD_INT 85
37271: PUSH
37272: LD_INT 86
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
37330: GO 37333
37332: POP
// if state > - 1 and state < 3 then
37333: LD_VAR 0 3
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: GREATER
37342: PUSH
37343: LD_VAR 0 3
37347: PUSH
37348: LD_INT 3
37350: LESS
37351: AND
37352: IFFALSE 37409
// for i in result do
37354: LD_ADDR_VAR 0 5
37358: PUSH
37359: LD_VAR 0 4
37363: PUSH
37364: FOR_IN
37365: IFFALSE 37407
// if GetTech ( i , side ) <> state then
37367: LD_VAR 0 5
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 321
37381: PUSH
37382: LD_VAR 0 3
37386: NONEQUAL
37387: IFFALSE 37405
// result := result diff i ;
37389: LD_ADDR_VAR 0 4
37393: PUSH
37394: LD_VAR 0 4
37398: PUSH
37399: LD_VAR 0 5
37403: DIFF
37404: ST_TO_ADDR
37405: GO 37364
37407: POP
37408: POP
// end ;
37409: LD_VAR 0 4
37413: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37414: LD_INT 0
37416: PPUSH
37417: PPUSH
37418: PPUSH
// result := true ;
37419: LD_ADDR_VAR 0 3
37423: PUSH
37424: LD_INT 1
37426: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL_OW 480
37441: ST_TO_ADDR
// if not tmp then
37442: LD_VAR 0 5
37446: NOT
37447: IFFALSE 37451
// exit ;
37449: GO 37500
// for i in tmp do
37451: LD_ADDR_VAR 0 4
37455: PUSH
37456: LD_VAR 0 5
37460: PUSH
37461: FOR_IN
37462: IFFALSE 37498
// if GetTech ( i , side ) <> state_researched then
37464: LD_VAR 0 4
37468: PPUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 321
37478: PUSH
37479: LD_INT 2
37481: NONEQUAL
37482: IFFALSE 37496
// begin result := false ;
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_INT 0
37491: ST_TO_ADDR
// exit ;
37492: POP
37493: POP
37494: GO 37500
// end ;
37496: GO 37461
37498: POP
37499: POP
// end ;
37500: LD_VAR 0 3
37504: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37505: LD_INT 0
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37520: LD_VAR 0 1
37524: NOT
37525: PUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL_OW 257
37535: PUSH
37536: LD_INT 9
37538: NONEQUAL
37539: OR
37540: IFFALSE 37544
// exit ;
37542: GO 38117
// side := GetSide ( unit ) ;
37544: LD_ADDR_VAR 0 9
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: ST_TO_ADDR
// tech_space := tech_spacanom ;
37559: LD_ADDR_VAR 0 12
37563: PUSH
37564: LD_INT 29
37566: ST_TO_ADDR
// tech_time := tech_taurad ;
37567: LD_ADDR_VAR 0 13
37571: PUSH
37572: LD_INT 28
37574: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37575: LD_ADDR_VAR 0 11
37579: PUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 310
37589: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37590: LD_VAR 0 11
37594: PPUSH
37595: CALL_OW 247
37599: PUSH
37600: LD_INT 2
37602: EQUAL
37603: IFFALSE 37607
// exit ;
37605: GO 38117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37607: LD_ADDR_VAR 0 8
37611: PUSH
37612: LD_INT 81
37614: PUSH
37615: LD_VAR 0 9
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: LD_INT 21
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 69
37649: ST_TO_ADDR
// if not tmp then
37650: LD_VAR 0 8
37654: NOT
37655: IFFALSE 37659
// exit ;
37657: GO 38117
// if in_unit then
37659: LD_VAR 0 11
37663: IFFALSE 37687
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37665: LD_ADDR_VAR 0 10
37669: PUSH
37670: LD_VAR 0 8
37674: PPUSH
37675: LD_VAR 0 11
37679: PPUSH
37680: CALL_OW 74
37684: ST_TO_ADDR
37685: GO 37707
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37687: LD_ADDR_VAR 0 10
37691: PUSH
37692: LD_VAR 0 8
37696: PPUSH
37697: LD_VAR 0 1
37701: PPUSH
37702: CALL_OW 74
37706: ST_TO_ADDR
// if not enemy then
37707: LD_VAR 0 10
37711: NOT
37712: IFFALSE 37716
// exit ;
37714: GO 38117
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37716: LD_VAR 0 11
37720: PUSH
37721: LD_VAR 0 11
37725: PPUSH
37726: LD_VAR 0 10
37730: PPUSH
37731: CALL_OW 296
37735: PUSH
37736: LD_INT 13
37738: GREATER
37739: AND
37740: PUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: LD_VAR 0 10
37750: PPUSH
37751: CALL_OW 296
37755: PUSH
37756: LD_INT 12
37758: GREATER
37759: OR
37760: IFFALSE 37764
// exit ;
37762: GO 38117
// missile := [ 1 ] ;
37764: LD_ADDR_VAR 0 14
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37775: LD_VAR 0 9
37779: PPUSH
37780: LD_VAR 0 12
37784: PPUSH
37785: CALL_OW 325
37789: IFFALSE 37818
// missile := Insert ( missile , missile + 1 , 2 ) ;
37791: LD_ADDR_VAR 0 14
37795: PUSH
37796: LD_VAR 0 14
37800: PPUSH
37801: LD_VAR 0 14
37805: PUSH
37806: LD_INT 1
37808: PLUS
37809: PPUSH
37810: LD_INT 2
37812: PPUSH
37813: CALL_OW 2
37817: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37818: LD_VAR 0 9
37822: PPUSH
37823: LD_VAR 0 13
37827: PPUSH
37828: CALL_OW 325
37832: PUSH
37833: LD_VAR 0 10
37837: PPUSH
37838: CALL_OW 255
37842: PPUSH
37843: LD_VAR 0 13
37847: PPUSH
37848: CALL_OW 325
37852: NOT
37853: AND
37854: IFFALSE 37883
// missile := Insert ( missile , missile + 1 , 3 ) ;
37856: LD_ADDR_VAR 0 14
37860: PUSH
37861: LD_VAR 0 14
37865: PPUSH
37866: LD_VAR 0 14
37870: PUSH
37871: LD_INT 1
37873: PLUS
37874: PPUSH
37875: LD_INT 3
37877: PPUSH
37878: CALL_OW 2
37882: ST_TO_ADDR
// if missile < 2 then
37883: LD_VAR 0 14
37887: PUSH
37888: LD_INT 2
37890: LESS
37891: IFFALSE 37895
// exit ;
37893: GO 38117
// x := GetX ( enemy ) ;
37895: LD_ADDR_VAR 0 4
37899: PUSH
37900: LD_VAR 0 10
37904: PPUSH
37905: CALL_OW 250
37909: ST_TO_ADDR
// y := GetY ( enemy ) ;
37910: LD_ADDR_VAR 0 5
37914: PUSH
37915: LD_VAR 0 10
37919: PPUSH
37920: CALL_OW 251
37924: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37925: LD_ADDR_VAR 0 6
37929: PUSH
37930: LD_VAR 0 4
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PPUSH
37939: LD_INT 1
37941: PPUSH
37942: CALL_OW 12
37946: PLUS
37947: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37948: LD_ADDR_VAR 0 7
37952: PUSH
37953: LD_VAR 0 5
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PPUSH
37962: LD_INT 1
37964: PPUSH
37965: CALL_OW 12
37969: PLUS
37970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37971: LD_VAR 0 6
37975: PPUSH
37976: LD_VAR 0 7
37980: PPUSH
37981: CALL_OW 488
37985: NOT
37986: IFFALSE 38008
// begin _x := x ;
37988: LD_ADDR_VAR 0 6
37992: PUSH
37993: LD_VAR 0 4
37997: ST_TO_ADDR
// _y := y ;
37998: LD_ADDR_VAR 0 7
38002: PUSH
38003: LD_VAR 0 5
38007: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38008: LD_ADDR_VAR 0 3
38012: PUSH
38013: LD_INT 1
38015: PPUSH
38016: LD_VAR 0 14
38020: PPUSH
38021: CALL_OW 12
38025: ST_TO_ADDR
// case i of 1 :
38026: LD_VAR 0 3
38030: PUSH
38031: LD_INT 1
38033: DOUBLE
38034: EQUAL
38035: IFTRUE 38039
38037: GO 38056
38039: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38040: LD_VAR 0 1
38044: PPUSH
38045: LD_VAR 0 10
38049: PPUSH
38050: CALL_OW 115
38054: GO 38117
38056: LD_INT 2
38058: DOUBLE
38059: EQUAL
38060: IFTRUE 38064
38062: GO 38086
38064: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38065: LD_VAR 0 1
38069: PPUSH
38070: LD_VAR 0 6
38074: PPUSH
38075: LD_VAR 0 7
38079: PPUSH
38080: CALL_OW 153
38084: GO 38117
38086: LD_INT 3
38088: DOUBLE
38089: EQUAL
38090: IFTRUE 38094
38092: GO 38116
38094: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38095: LD_VAR 0 1
38099: PPUSH
38100: LD_VAR 0 6
38104: PPUSH
38105: LD_VAR 0 7
38109: PPUSH
38110: CALL_OW 154
38114: GO 38117
38116: POP
// end ;
38117: LD_VAR 0 2
38121: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38122: LD_INT 0
38124: PPUSH
38125: PPUSH
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
// if not unit or not building then
38130: LD_VAR 0 1
38134: NOT
38135: PUSH
38136: LD_VAR 0 2
38140: NOT
38141: OR
38142: IFFALSE 38146
// exit ;
38144: GO 38304
// x := GetX ( building ) ;
38146: LD_ADDR_VAR 0 5
38150: PUSH
38151: LD_VAR 0 2
38155: PPUSH
38156: CALL_OW 250
38160: ST_TO_ADDR
// y := GetY ( building ) ;
38161: LD_ADDR_VAR 0 6
38165: PUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL_OW 251
38175: ST_TO_ADDR
// for i = 0 to 5 do
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: DOUBLE
38182: LD_INT 0
38184: DEC
38185: ST_TO_ADDR
38186: LD_INT 5
38188: PUSH
38189: FOR_TO
38190: IFFALSE 38302
// begin _x := ShiftX ( x , i , 3 ) ;
38192: LD_ADDR_VAR 0 7
38196: PUSH
38197: LD_VAR 0 5
38201: PPUSH
38202: LD_VAR 0 4
38206: PPUSH
38207: LD_INT 3
38209: PPUSH
38210: CALL_OW 272
38214: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38215: LD_ADDR_VAR 0 8
38219: PUSH
38220: LD_VAR 0 6
38224: PPUSH
38225: LD_VAR 0 4
38229: PPUSH
38230: LD_INT 3
38232: PPUSH
38233: CALL_OW 273
38237: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38238: LD_VAR 0 7
38242: PPUSH
38243: LD_VAR 0 8
38247: PPUSH
38248: CALL_OW 488
38252: NOT
38253: IFFALSE 38257
// continue ;
38255: GO 38189
// if HexInfo ( _x , _y ) = 0 then
38257: LD_VAR 0 7
38261: PPUSH
38262: LD_VAR 0 8
38266: PPUSH
38267: CALL_OW 428
38271: PUSH
38272: LD_INT 0
38274: EQUAL
38275: IFFALSE 38300
// begin ComMoveXY ( unit , _x , _y ) ;
38277: LD_VAR 0 1
38281: PPUSH
38282: LD_VAR 0 7
38286: PPUSH
38287: LD_VAR 0 8
38291: PPUSH
38292: CALL_OW 111
// exit ;
38296: POP
38297: POP
38298: GO 38304
// end ; end ;
38300: GO 38189
38302: POP
38303: POP
// end ;
38304: LD_VAR 0 3
38308: RET
// export function ScanBase ( side , base_area ) ; begin
38309: LD_INT 0
38311: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38312: LD_ADDR_VAR 0 3
38316: PUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_INT 81
38324: PUSH
38325: LD_VAR 0 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PPUSH
38334: CALL_OW 70
38338: ST_TO_ADDR
// end ;
38339: LD_VAR 0 3
38343: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38344: LD_INT 0
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
// result := false ;
38350: LD_ADDR_VAR 0 2
38354: PUSH
38355: LD_INT 0
38357: ST_TO_ADDR
// side := GetSide ( unit ) ;
38358: LD_ADDR_VAR 0 3
38362: PUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 255
38372: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38373: LD_ADDR_VAR 0 4
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 248
38387: ST_TO_ADDR
// case nat of 1 :
38388: LD_VAR 0 4
38392: PUSH
38393: LD_INT 1
38395: DOUBLE
38396: EQUAL
38397: IFTRUE 38401
38399: GO 38412
38401: POP
// tech := tech_lassight ; 2 :
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_INT 12
38409: ST_TO_ADDR
38410: GO 38451
38412: LD_INT 2
38414: DOUBLE
38415: EQUAL
38416: IFTRUE 38420
38418: GO 38431
38420: POP
// tech := tech_mortar ; 3 :
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_INT 41
38428: ST_TO_ADDR
38429: GO 38451
38431: LD_INT 3
38433: DOUBLE
38434: EQUAL
38435: IFTRUE 38439
38437: GO 38450
38439: POP
// tech := tech_bazooka ; end ;
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: LD_INT 44
38447: ST_TO_ADDR
38448: GO 38451
38450: POP
// if Researched ( side , tech ) then
38451: LD_VAR 0 3
38455: PPUSH
38456: LD_VAR 0 5
38460: PPUSH
38461: CALL_OW 325
38465: IFFALSE 38492
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38467: LD_ADDR_VAR 0 2
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: LD_INT 8
38477: PUSH
38478: LD_INT 9
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: PUSH
38486: LD_VAR 0 4
38490: ARRAY
38491: ST_TO_ADDR
// end ;
38492: LD_VAR 0 2
38496: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
// if not mines then
38502: LD_VAR 0 2
38506: NOT
38507: IFFALSE 38511
// exit ;
38509: GO 38655
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38511: LD_ADDR_VAR 0 5
38515: PUSH
38516: LD_INT 81
38518: PUSH
38519: LD_VAR 0 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: LD_INT 21
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 69
38553: ST_TO_ADDR
// for i in mines do
38554: LD_ADDR_VAR 0 4
38558: PUSH
38559: LD_VAR 0 2
38563: PUSH
38564: FOR_IN
38565: IFFALSE 38653
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38567: LD_VAR 0 4
38571: PUSH
38572: LD_INT 1
38574: ARRAY
38575: PPUSH
38576: LD_VAR 0 4
38580: PUSH
38581: LD_INT 2
38583: ARRAY
38584: PPUSH
38585: CALL_OW 458
38589: NOT
38590: IFFALSE 38594
// continue ;
38592: GO 38564
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38594: LD_VAR 0 4
38598: PUSH
38599: LD_INT 1
38601: ARRAY
38602: PPUSH
38603: LD_VAR 0 4
38607: PUSH
38608: LD_INT 2
38610: ARRAY
38611: PPUSH
38612: CALL_OW 428
38616: PUSH
38617: LD_VAR 0 5
38621: IN
38622: IFFALSE 38651
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38624: LD_VAR 0 4
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: LD_VAR 0 4
38637: PUSH
38638: LD_INT 2
38640: ARRAY
38641: PPUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 456
// end ;
38651: GO 38564
38653: POP
38654: POP
// end ;
38655: LD_VAR 0 3
38659: RET
// export function Count ( array ) ; var i ; begin
38660: LD_INT 0
38662: PPUSH
38663: PPUSH
// result := 0 ;
38664: LD_ADDR_VAR 0 2
38668: PUSH
38669: LD_INT 0
38671: ST_TO_ADDR
// for i in array do
38672: LD_ADDR_VAR 0 3
38676: PUSH
38677: LD_VAR 0 1
38681: PUSH
38682: FOR_IN
38683: IFFALSE 38707
// if i then
38685: LD_VAR 0 3
38689: IFFALSE 38705
// result := result + 1 ;
38691: LD_ADDR_VAR 0 2
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 1
38703: PLUS
38704: ST_TO_ADDR
38705: GO 38682
38707: POP
38708: POP
// end ;
38709: LD_VAR 0 2
38713: RET
// export function IsEmpty ( building ) ; begin
38714: LD_INT 0
38716: PPUSH
// if not building then
38717: LD_VAR 0 1
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 38769
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38726: LD_ADDR_VAR 0 2
38730: PUSH
38731: LD_VAR 0 1
38735: PUSH
38736: LD_INT 22
38738: PUSH
38739: LD_VAR 0 1
38743: PPUSH
38744: CALL_OW 255
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 58
38755: PUSH
38756: EMPTY
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PPUSH
38763: CALL_OW 69
38767: IN
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 2
38773: RET
// export function IsNotFull ( building ) ; begin
38774: LD_INT 0
38776: PPUSH
// if not building then
38777: LD_VAR 0 1
38781: NOT
38782: IFFALSE 38786
// exit ;
38784: GO 38805
// result := UnitsInside ( building ) < 6 ;
38786: LD_ADDR_VAR 0 2
38790: PUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 313
38800: PUSH
38801: LD_INT 6
38803: LESS
38804: ST_TO_ADDR
// end ;
38805: LD_VAR 0 2
38809: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38810: LD_INT 0
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
// tmp := [ ] ;
38816: LD_ADDR_VAR 0 3
38820: PUSH
38821: EMPTY
38822: ST_TO_ADDR
// list := [ ] ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: EMPTY
38829: ST_TO_ADDR
// for i = 16 to 25 do
38830: LD_ADDR_VAR 0 4
38834: PUSH
38835: DOUBLE
38836: LD_INT 16
38838: DEC
38839: ST_TO_ADDR
38840: LD_INT 25
38842: PUSH
38843: FOR_TO
38844: IFFALSE 38917
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38846: LD_ADDR_VAR 0 3
38850: PUSH
38851: LD_VAR 0 3
38855: PUSH
38856: LD_INT 22
38858: PUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 255
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 91
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_INT 6
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 30
38891: PUSH
38892: LD_VAR 0 4
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: PUSH
38906: EMPTY
38907: LIST
38908: PPUSH
38909: CALL_OW 69
38913: ADD
38914: ST_TO_ADDR
38915: GO 38843
38917: POP
38918: POP
// for i = 1 to tmp do
38919: LD_ADDR_VAR 0 4
38923: PUSH
38924: DOUBLE
38925: LD_INT 1
38927: DEC
38928: ST_TO_ADDR
38929: LD_VAR 0 3
38933: PUSH
38934: FOR_TO
38935: IFFALSE 39023
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38937: LD_ADDR_VAR 0 5
38941: PUSH
38942: LD_VAR 0 5
38946: PUSH
38947: LD_VAR 0 3
38951: PUSH
38952: LD_VAR 0 4
38956: ARRAY
38957: PPUSH
38958: CALL_OW 266
38962: PUSH
38963: LD_VAR 0 3
38967: PUSH
38968: LD_VAR 0 4
38972: ARRAY
38973: PPUSH
38974: CALL_OW 250
38978: PUSH
38979: LD_VAR 0 3
38983: PUSH
38984: LD_VAR 0 4
38988: ARRAY
38989: PPUSH
38990: CALL_OW 251
38994: PUSH
38995: LD_VAR 0 3
38999: PUSH
39000: LD_VAR 0 4
39004: ARRAY
39005: PPUSH
39006: CALL_OW 254
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: ADD
39020: ST_TO_ADDR
39021: GO 38934
39023: POP
39024: POP
// result := list ;
39025: LD_ADDR_VAR 0 2
39029: PUSH
39030: LD_VAR 0 5
39034: ST_TO_ADDR
// end ;
39035: LD_VAR 0 2
39039: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39040: LD_INT 0
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
// if not factory then
39049: LD_VAR 0 1
39053: NOT
39054: IFFALSE 39058
// exit ;
39056: GO 39651
// if control = control_apeman then
39058: LD_VAR 0 4
39062: PUSH
39063: LD_INT 5
39065: EQUAL
39066: IFFALSE 39175
// begin tmp := UnitsInside ( factory ) ;
39068: LD_ADDR_VAR 0 8
39072: PUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: CALL_OW 313
39082: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39083: LD_VAR 0 8
39087: PPUSH
39088: LD_INT 25
39090: PUSH
39091: LD_INT 12
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PPUSH
39098: CALL_OW 72
39102: NOT
39103: IFFALSE 39113
// control := control_manual ;
39105: LD_ADDR_VAR 0 4
39109: PUSH
39110: LD_INT 1
39112: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39113: LD_ADDR_VAR 0 8
39117: PUSH
39118: LD_VAR 0 1
39122: PPUSH
39123: CALL 38810 0 1
39127: ST_TO_ADDR
// if tmp then
39128: LD_VAR 0 8
39132: IFFALSE 39175
// begin for i in tmp do
39134: LD_ADDR_VAR 0 7
39138: PUSH
39139: LD_VAR 0 8
39143: PUSH
39144: FOR_IN
39145: IFFALSE 39173
// if i [ 1 ] = b_ext_radio then
39147: LD_VAR 0 7
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PUSH
39156: LD_INT 22
39158: EQUAL
39159: IFFALSE 39171
// begin control := control_remote ;
39161: LD_ADDR_VAR 0 4
39165: PUSH
39166: LD_INT 2
39168: ST_TO_ADDR
// break ;
39169: GO 39173
// end ;
39171: GO 39144
39173: POP
39174: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39175: LD_VAR 0 1
39179: PPUSH
39180: LD_VAR 0 2
39184: PPUSH
39185: LD_VAR 0 3
39189: PPUSH
39190: LD_VAR 0 4
39194: PPUSH
39195: LD_VAR 0 5
39199: PPUSH
39200: CALL_OW 448
39204: IFFALSE 39239
// begin result := [ chassis , engine , control , weapon ] ;
39206: LD_ADDR_VAR 0 6
39210: PUSH
39211: LD_VAR 0 2
39215: PUSH
39216: LD_VAR 0 3
39220: PUSH
39221: LD_VAR 0 4
39225: PUSH
39226: LD_VAR 0 5
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: ST_TO_ADDR
// exit ;
39237: GO 39651
// end ; _chassis := AvailableChassisList ( factory ) ;
39239: LD_ADDR_VAR 0 9
39243: PUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 475
39253: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39254: LD_ADDR_VAR 0 11
39258: PUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: CALL_OW 476
39268: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39269: LD_ADDR_VAR 0 12
39273: PUSH
39274: LD_VAR 0 1
39278: PPUSH
39279: CALL_OW 477
39283: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39284: LD_ADDR_VAR 0 10
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 478
39298: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39299: LD_VAR 0 9
39303: NOT
39304: PUSH
39305: LD_VAR 0 11
39309: NOT
39310: OR
39311: PUSH
39312: LD_VAR 0 12
39316: NOT
39317: OR
39318: PUSH
39319: LD_VAR 0 10
39323: NOT
39324: OR
39325: IFFALSE 39360
// begin result := [ chassis , engine , control , weapon ] ;
39327: LD_ADDR_VAR 0 6
39331: PUSH
39332: LD_VAR 0 2
39336: PUSH
39337: LD_VAR 0 3
39341: PUSH
39342: LD_VAR 0 4
39346: PUSH
39347: LD_VAR 0 5
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// exit ;
39358: GO 39651
// end ; if not chassis in _chassis then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_VAR 0 9
39369: IN
39370: NOT
39371: IFFALSE 39397
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39373: LD_ADDR_VAR 0 2
39377: PUSH
39378: LD_VAR 0 9
39382: PUSH
39383: LD_INT 1
39385: PPUSH
39386: LD_VAR 0 9
39390: PPUSH
39391: CALL_OW 12
39395: ARRAY
39396: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39397: LD_VAR 0 2
39401: PPUSH
39402: LD_VAR 0 3
39406: PPUSH
39407: CALL 39656 0 2
39411: NOT
39412: IFFALSE 39471
// repeat engine := _engine [ 1 ] ;
39414: LD_ADDR_VAR 0 3
39418: PUSH
39419: LD_VAR 0 11
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39428: LD_ADDR_VAR 0 11
39432: PUSH
39433: LD_VAR 0 11
39437: PPUSH
39438: LD_INT 1
39440: PPUSH
39441: CALL_OW 3
39445: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39446: LD_VAR 0 2
39450: PPUSH
39451: LD_VAR 0 3
39455: PPUSH
39456: CALL 39656 0 2
39460: PUSH
39461: LD_VAR 0 11
39465: PUSH
39466: EMPTY
39467: EQUAL
39468: OR
39469: IFFALSE 39414
// if not control in _control then
39471: LD_VAR 0 4
39475: PUSH
39476: LD_VAR 0 12
39480: IN
39481: NOT
39482: IFFALSE 39508
// control := _control [ rand ( 1 , _control ) ] ;
39484: LD_ADDR_VAR 0 4
39488: PUSH
39489: LD_VAR 0 12
39493: PUSH
39494: LD_INT 1
39496: PPUSH
39497: LD_VAR 0 12
39501: PPUSH
39502: CALL_OW 12
39506: ARRAY
39507: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39508: LD_VAR 0 2
39512: PPUSH
39513: LD_VAR 0 5
39517: PPUSH
39518: CALL 39876 0 2
39522: NOT
39523: IFFALSE 39582
// repeat weapon := _weapon [ 1 ] ;
39525: LD_ADDR_VAR 0 5
39529: PUSH
39530: LD_VAR 0 10
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39539: LD_ADDR_VAR 0 10
39543: PUSH
39544: LD_VAR 0 10
39548: PPUSH
39549: LD_INT 1
39551: PPUSH
39552: CALL_OW 3
39556: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39557: LD_VAR 0 2
39561: PPUSH
39562: LD_VAR 0 5
39566: PPUSH
39567: CALL 39876 0 2
39571: PUSH
39572: LD_VAR 0 10
39576: PUSH
39577: EMPTY
39578: EQUAL
39579: OR
39580: IFFALSE 39525
// result := [ ] ;
39582: LD_ADDR_VAR 0 6
39586: PUSH
39587: EMPTY
39588: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39589: LD_VAR 0 1
39593: PPUSH
39594: LD_VAR 0 2
39598: PPUSH
39599: LD_VAR 0 3
39603: PPUSH
39604: LD_VAR 0 4
39608: PPUSH
39609: LD_VAR 0 5
39613: PPUSH
39614: CALL_OW 448
39618: IFFALSE 39651
// result := [ chassis , engine , control , weapon ] ;
39620: LD_ADDR_VAR 0 6
39624: PUSH
39625: LD_VAR 0 2
39629: PUSH
39630: LD_VAR 0 3
39634: PUSH
39635: LD_VAR 0 4
39639: PUSH
39640: LD_VAR 0 5
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: ST_TO_ADDR
// end ;
39651: LD_VAR 0 6
39655: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39656: LD_INT 0
39658: PPUSH
// if not chassis or not engine then
39659: LD_VAR 0 1
39663: NOT
39664: PUSH
39665: LD_VAR 0 2
39669: NOT
39670: OR
39671: IFFALSE 39675
// exit ;
39673: GO 39871
// case engine of engine_solar :
39675: LD_VAR 0 2
39679: PUSH
39680: LD_INT 2
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39688
39686: GO 39726
39688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 11
39696: PUSH
39697: LD_INT 12
39699: PUSH
39700: LD_INT 13
39702: PUSH
39703: LD_INT 14
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
39724: GO 39855
39726: LD_INT 1
39728: DOUBLE
39729: EQUAL
39730: IFTRUE 39734
39732: GO 39796
39734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_INT 11
39742: PUSH
39743: LD_INT 12
39745: PUSH
39746: LD_INT 13
39748: PUSH
39749: LD_INT 14
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: LD_INT 5
39766: PUSH
39767: LD_INT 21
39769: PUSH
39770: LD_INT 23
39772: PUSH
39773: LD_INT 22
39775: PUSH
39776: LD_INT 24
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
39794: GO 39855
39796: LD_INT 3
39798: DOUBLE
39799: EQUAL
39800: IFTRUE 39804
39802: GO 39854
39804: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39805: LD_ADDR_VAR 0 3
39809: PUSH
39810: LD_INT 13
39812: PUSH
39813: LD_INT 14
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: LD_INT 5
39827: PUSH
39828: LD_INT 21
39830: PUSH
39831: LD_INT 22
39833: PUSH
39834: LD_INT 23
39836: PUSH
39837: LD_INT 24
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: ST_TO_ADDR
39852: GO 39855
39854: POP
// result := ( chassis in result ) ;
39855: LD_ADDR_VAR 0 3
39859: PUSH
39860: LD_VAR 0 1
39864: PUSH
39865: LD_VAR 0 3
39869: IN
39870: ST_TO_ADDR
// end ;
39871: LD_VAR 0 3
39875: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39876: LD_INT 0
39878: PPUSH
// if not chassis or not weapon then
39879: LD_VAR 0 1
39883: NOT
39884: PUSH
39885: LD_VAR 0 2
39889: NOT
39890: OR
39891: IFFALSE 39895
// exit ;
39893: GO 40921
// case weapon of us_machine_gun :
39895: LD_VAR 0 2
39899: PUSH
39900: LD_INT 2
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39908
39906: GO 39938
39908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39909: LD_ADDR_VAR 0 3
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: LD_INT 5
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: ST_TO_ADDR
39936: GO 40905
39938: LD_INT 3
39940: DOUBLE
39941: EQUAL
39942: IFTRUE 39946
39944: GO 39976
39946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: LD_INT 4
39963: PUSH
39964: LD_INT 5
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: ST_TO_ADDR
39974: GO 40905
39976: LD_INT 11
39978: DOUBLE
39979: EQUAL
39980: IFTRUE 39984
39982: GO 40014
39984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39985: LD_ADDR_VAR 0 3
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: LD_INT 4
40001: PUSH
40002: LD_INT 5
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: ST_TO_ADDR
40012: GO 40905
40014: LD_INT 4
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40048
40022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40023: LD_ADDR_VAR 0 3
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: LD_INT 4
40036: PUSH
40037: LD_INT 5
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 40905
40048: LD_INT 5
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40082
40056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: LD_INT 4
40070: PUSH
40071: LD_INT 5
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
40080: GO 40905
40082: LD_INT 9
40084: DOUBLE
40085: EQUAL
40086: IFTRUE 40090
40088: GO 40116
40090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 4
40104: PUSH
40105: LD_INT 5
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
40114: GO 40905
40116: LD_INT 7
40118: DOUBLE
40119: EQUAL
40120: IFTRUE 40124
40122: GO 40150
40124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 5
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
40148: GO 40905
40150: LD_INT 12
40152: DOUBLE
40153: EQUAL
40154: IFTRUE 40158
40156: GO 40184
40158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 4
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: ST_TO_ADDR
40182: GO 40905
40184: LD_INT 13
40186: DOUBLE
40187: EQUAL
40188: IFTRUE 40192
40190: GO 40218
40192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: LD_INT 5
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
40216: GO 40905
40218: LD_INT 14
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40226
40224: GO 40244
40226: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_INT 4
40234: PUSH
40235: LD_INT 5
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: ST_TO_ADDR
40242: GO 40905
40244: LD_INT 6
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40270
40252: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40253: LD_ADDR_VAR 0 3
40257: PUSH
40258: LD_INT 4
40260: PUSH
40261: LD_INT 5
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: ST_TO_ADDR
40268: GO 40905
40270: LD_INT 10
40272: DOUBLE
40273: EQUAL
40274: IFTRUE 40278
40276: GO 40296
40278: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40279: LD_ADDR_VAR 0 3
40283: PUSH
40284: LD_INT 4
40286: PUSH
40287: LD_INT 5
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: ST_TO_ADDR
40294: GO 40905
40296: LD_INT 22
40298: DOUBLE
40299: EQUAL
40300: IFTRUE 40304
40302: GO 40330
40304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_INT 11
40312: PUSH
40313: LD_INT 12
40315: PUSH
40316: LD_INT 13
40318: PUSH
40319: LD_INT 14
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
40328: GO 40905
40330: LD_INT 23
40332: DOUBLE
40333: EQUAL
40334: IFTRUE 40338
40336: GO 40364
40338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40339: LD_ADDR_VAR 0 3
40343: PUSH
40344: LD_INT 11
40346: PUSH
40347: LD_INT 12
40349: PUSH
40350: LD_INT 13
40352: PUSH
40353: LD_INT 14
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: ST_TO_ADDR
40362: GO 40905
40364: LD_INT 24
40366: DOUBLE
40367: EQUAL
40368: IFTRUE 40372
40370: GO 40398
40372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: LD_INT 11
40380: PUSH
40381: LD_INT 12
40383: PUSH
40384: LD_INT 13
40386: PUSH
40387: LD_INT 14
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: ST_TO_ADDR
40396: GO 40905
40398: LD_INT 30
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40432
40406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40407: LD_ADDR_VAR 0 3
40411: PUSH
40412: LD_INT 11
40414: PUSH
40415: LD_INT 12
40417: PUSH
40418: LD_INT 13
40420: PUSH
40421: LD_INT 14
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
40430: GO 40905
40432: LD_INT 25
40434: DOUBLE
40435: EQUAL
40436: IFTRUE 40440
40438: GO 40458
40440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_INT 13
40448: PUSH
40449: LD_INT 14
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: ST_TO_ADDR
40456: GO 40905
40458: LD_INT 27
40460: DOUBLE
40461: EQUAL
40462: IFTRUE 40466
40464: GO 40484
40466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40467: LD_ADDR_VAR 0 3
40471: PUSH
40472: LD_INT 13
40474: PUSH
40475: LD_INT 14
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: ST_TO_ADDR
40482: GO 40905
40484: LD_INT 28
40486: DOUBLE
40487: EQUAL
40488: IFTRUE 40492
40490: GO 40510
40492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40493: LD_ADDR_VAR 0 3
40497: PUSH
40498: LD_INT 13
40500: PUSH
40501: LD_INT 14
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: ST_TO_ADDR
40508: GO 40905
40510: LD_INT 29
40512: DOUBLE
40513: EQUAL
40514: IFTRUE 40518
40516: GO 40536
40518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_INT 13
40526: PUSH
40527: LD_INT 14
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: ST_TO_ADDR
40534: GO 40905
40536: LD_INT 31
40538: DOUBLE
40539: EQUAL
40540: IFTRUE 40544
40542: GO 40562
40544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40545: LD_ADDR_VAR 0 3
40549: PUSH
40550: LD_INT 13
40552: PUSH
40553: LD_INT 14
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: ST_TO_ADDR
40560: GO 40905
40562: LD_INT 26
40564: DOUBLE
40565: EQUAL
40566: IFTRUE 40570
40568: GO 40588
40570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40571: LD_ADDR_VAR 0 3
40575: PUSH
40576: LD_INT 13
40578: PUSH
40579: LD_INT 14
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: ST_TO_ADDR
40586: GO 40905
40588: LD_INT 42
40590: DOUBLE
40591: EQUAL
40592: IFTRUE 40596
40594: GO 40622
40596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40597: LD_ADDR_VAR 0 3
40601: PUSH
40602: LD_INT 21
40604: PUSH
40605: LD_INT 22
40607: PUSH
40608: LD_INT 23
40610: PUSH
40611: LD_INT 24
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: ST_TO_ADDR
40620: GO 40905
40622: LD_INT 43
40624: DOUBLE
40625: EQUAL
40626: IFTRUE 40630
40628: GO 40656
40630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40631: LD_ADDR_VAR 0 3
40635: PUSH
40636: LD_INT 21
40638: PUSH
40639: LD_INT 22
40641: PUSH
40642: LD_INT 23
40644: PUSH
40645: LD_INT 24
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
40654: GO 40905
40656: LD_INT 44
40658: DOUBLE
40659: EQUAL
40660: IFTRUE 40664
40662: GO 40690
40664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 21
40672: PUSH
40673: LD_INT 22
40675: PUSH
40676: LD_INT 23
40678: PUSH
40679: LD_INT 24
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
40688: GO 40905
40690: LD_INT 45
40692: DOUBLE
40693: EQUAL
40694: IFTRUE 40698
40696: GO 40724
40698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40699: LD_ADDR_VAR 0 3
40703: PUSH
40704: LD_INT 21
40706: PUSH
40707: LD_INT 22
40709: PUSH
40710: LD_INT 23
40712: PUSH
40713: LD_INT 24
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: ST_TO_ADDR
40722: GO 40905
40724: LD_INT 49
40726: DOUBLE
40727: EQUAL
40728: IFTRUE 40732
40730: GO 40758
40732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: LD_INT 21
40740: PUSH
40741: LD_INT 22
40743: PUSH
40744: LD_INT 23
40746: PUSH
40747: LD_INT 24
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
40756: GO 40905
40758: LD_INT 51
40760: DOUBLE
40761: EQUAL
40762: IFTRUE 40766
40764: GO 40792
40766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: LD_INT 21
40774: PUSH
40775: LD_INT 22
40777: PUSH
40778: LD_INT 23
40780: PUSH
40781: LD_INT 24
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
40790: GO 40905
40792: LD_INT 52
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40800
40798: GO 40826
40800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40801: LD_ADDR_VAR 0 3
40805: PUSH
40806: LD_INT 21
40808: PUSH
40809: LD_INT 22
40811: PUSH
40812: LD_INT 23
40814: PUSH
40815: LD_INT 24
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
40824: GO 40905
40826: LD_INT 53
40828: DOUBLE
40829: EQUAL
40830: IFTRUE 40834
40832: GO 40852
40834: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40835: LD_ADDR_VAR 0 3
40839: PUSH
40840: LD_INT 23
40842: PUSH
40843: LD_INT 24
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: ST_TO_ADDR
40850: GO 40905
40852: LD_INT 46
40854: DOUBLE
40855: EQUAL
40856: IFTRUE 40860
40858: GO 40878
40860: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_INT 23
40868: PUSH
40869: LD_INT 24
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: ST_TO_ADDR
40876: GO 40905
40878: LD_INT 47
40880: DOUBLE
40881: EQUAL
40882: IFTRUE 40886
40884: GO 40904
40886: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_INT 23
40894: PUSH
40895: LD_INT 24
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: ST_TO_ADDR
40902: GO 40905
40904: POP
// result := ( chassis in result ) ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_VAR 0 1
40914: PUSH
40915: LD_VAR 0 3
40919: IN
40920: ST_TO_ADDR
// end ;
40921: LD_VAR 0 3
40925: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
// result := array ;
40935: LD_ADDR_VAR 0 5
40939: PUSH
40940: LD_VAR 0 1
40944: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40945: LD_VAR 0 1
40949: NOT
40950: PUSH
40951: LD_VAR 0 2
40955: NOT
40956: OR
40957: PUSH
40958: LD_VAR 0 3
40962: NOT
40963: OR
40964: PUSH
40965: LD_VAR 0 2
40969: PUSH
40970: LD_VAR 0 1
40974: GREATER
40975: OR
40976: PUSH
40977: LD_VAR 0 3
40981: PUSH
40982: LD_VAR 0 1
40986: GREATER
40987: OR
40988: IFFALSE 40992
// exit ;
40990: GO 41288
// if direction then
40992: LD_VAR 0 4
40996: IFFALSE 41060
// begin d := 1 ;
40998: LD_ADDR_VAR 0 9
41002: PUSH
41003: LD_INT 1
41005: ST_TO_ADDR
// if i_from > i_to then
41006: LD_VAR 0 2
41010: PUSH
41011: LD_VAR 0 3
41015: GREATER
41016: IFFALSE 41042
// length := ( array - i_from ) + i_to else
41018: LD_ADDR_VAR 0 11
41022: PUSH
41023: LD_VAR 0 1
41027: PUSH
41028: LD_VAR 0 2
41032: MINUS
41033: PUSH
41034: LD_VAR 0 3
41038: PLUS
41039: ST_TO_ADDR
41040: GO 41058
// length := i_to - i_from ;
41042: LD_ADDR_VAR 0 11
41046: PUSH
41047: LD_VAR 0 3
41051: PUSH
41052: LD_VAR 0 2
41056: MINUS
41057: ST_TO_ADDR
// end else
41058: GO 41121
// begin d := - 1 ;
41060: LD_ADDR_VAR 0 9
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: ST_TO_ADDR
// if i_from > i_to then
41069: LD_VAR 0 2
41073: PUSH
41074: LD_VAR 0 3
41078: GREATER
41079: IFFALSE 41099
// length := i_from - i_to else
41081: LD_ADDR_VAR 0 11
41085: PUSH
41086: LD_VAR 0 2
41090: PUSH
41091: LD_VAR 0 3
41095: MINUS
41096: ST_TO_ADDR
41097: GO 41121
// length := ( array - i_to ) + i_from ;
41099: LD_ADDR_VAR 0 11
41103: PUSH
41104: LD_VAR 0 1
41108: PUSH
41109: LD_VAR 0 3
41113: MINUS
41114: PUSH
41115: LD_VAR 0 2
41119: PLUS
41120: ST_TO_ADDR
// end ; if not length then
41121: LD_VAR 0 11
41125: NOT
41126: IFFALSE 41130
// exit ;
41128: GO 41288
// tmp := array ;
41130: LD_ADDR_VAR 0 10
41134: PUSH
41135: LD_VAR 0 1
41139: ST_TO_ADDR
// for i = 1 to length do
41140: LD_ADDR_VAR 0 6
41144: PUSH
41145: DOUBLE
41146: LD_INT 1
41148: DEC
41149: ST_TO_ADDR
41150: LD_VAR 0 11
41154: PUSH
41155: FOR_TO
41156: IFFALSE 41276
// begin for j = 1 to array do
41158: LD_ADDR_VAR 0 7
41162: PUSH
41163: DOUBLE
41164: LD_INT 1
41166: DEC
41167: ST_TO_ADDR
41168: LD_VAR 0 1
41172: PUSH
41173: FOR_TO
41174: IFFALSE 41262
// begin k := j + d ;
41176: LD_ADDR_VAR 0 8
41180: PUSH
41181: LD_VAR 0 7
41185: PUSH
41186: LD_VAR 0 9
41190: PLUS
41191: ST_TO_ADDR
// if k > array then
41192: LD_VAR 0 8
41196: PUSH
41197: LD_VAR 0 1
41201: GREATER
41202: IFFALSE 41212
// k := 1 ;
41204: LD_ADDR_VAR 0 8
41208: PUSH
41209: LD_INT 1
41211: ST_TO_ADDR
// if not k then
41212: LD_VAR 0 8
41216: NOT
41217: IFFALSE 41229
// k := array ;
41219: LD_ADDR_VAR 0 8
41223: PUSH
41224: LD_VAR 0 1
41228: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41229: LD_ADDR_VAR 0 10
41233: PUSH
41234: LD_VAR 0 10
41238: PPUSH
41239: LD_VAR 0 8
41243: PPUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_VAR 0 7
41253: ARRAY
41254: PPUSH
41255: CALL_OW 1
41259: ST_TO_ADDR
// end ;
41260: GO 41173
41262: POP
41263: POP
// array := tmp ;
41264: LD_ADDR_VAR 0 1
41268: PUSH
41269: LD_VAR 0 10
41273: ST_TO_ADDR
// end ;
41274: GO 41155
41276: POP
41277: POP
// result := array ;
41278: LD_ADDR_VAR 0 5
41282: PUSH
41283: LD_VAR 0 1
41287: ST_TO_ADDR
// end ;
41288: LD_VAR 0 5
41292: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
// result := 0 ;
41297: LD_ADDR_VAR 0 3
41301: PUSH
41302: LD_INT 0
41304: ST_TO_ADDR
// if not array or not value in array then
41305: LD_VAR 0 1
41309: NOT
41310: PUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_VAR 0 1
41320: IN
41321: NOT
41322: OR
41323: IFFALSE 41327
// exit ;
41325: GO 41381
// for i = 1 to array do
41327: LD_ADDR_VAR 0 4
41331: PUSH
41332: DOUBLE
41333: LD_INT 1
41335: DEC
41336: ST_TO_ADDR
41337: LD_VAR 0 1
41341: PUSH
41342: FOR_TO
41343: IFFALSE 41379
// if value = array [ i ] then
41345: LD_VAR 0 2
41349: PUSH
41350: LD_VAR 0 1
41354: PUSH
41355: LD_VAR 0 4
41359: ARRAY
41360: EQUAL
41361: IFFALSE 41377
// begin result := i ;
41363: LD_ADDR_VAR 0 3
41367: PUSH
41368: LD_VAR 0 4
41372: ST_TO_ADDR
// exit ;
41373: POP
41374: POP
41375: GO 41381
// end ;
41377: GO 41342
41379: POP
41380: POP
// end ;
41381: LD_VAR 0 3
41385: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41386: LD_INT 0
41388: PPUSH
// vc_chassis := chassis ;
41389: LD_ADDR_OWVAR 37
41393: PUSH
41394: LD_VAR 0 1
41398: ST_TO_ADDR
// vc_engine := engine ;
41399: LD_ADDR_OWVAR 39
41403: PUSH
41404: LD_VAR 0 2
41408: ST_TO_ADDR
// vc_control := control ;
41409: LD_ADDR_OWVAR 38
41413: PUSH
41414: LD_VAR 0 3
41418: ST_TO_ADDR
// vc_weapon := weapon ;
41419: LD_ADDR_OWVAR 40
41423: PUSH
41424: LD_VAR 0 4
41428: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41429: LD_ADDR_OWVAR 41
41433: PUSH
41434: LD_VAR 0 5
41438: ST_TO_ADDR
// end ;
41439: LD_VAR 0 6
41443: RET
// export function WantPlant ( unit ) ; var task ; begin
41444: LD_INT 0
41446: PPUSH
41447: PPUSH
// result := false ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_INT 0
41455: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: CALL_OW 437
41470: ST_TO_ADDR
// if task then
41471: LD_VAR 0 3
41475: IFFALSE 41503
// if task [ 1 ] [ 1 ] = p then
41477: LD_VAR 0 3
41481: PUSH
41482: LD_INT 1
41484: ARRAY
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: PUSH
41490: LD_STRING p
41492: EQUAL
41493: IFFALSE 41503
// result := true ;
41495: LD_ADDR_VAR 0 2
41499: PUSH
41500: LD_INT 1
41502: ST_TO_ADDR
// end ;
41503: LD_VAR 0 2
41507: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41508: LD_INT 0
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
// if pos < 1 then
41514: LD_VAR 0 2
41518: PUSH
41519: LD_INT 1
41521: LESS
41522: IFFALSE 41526
// exit ;
41524: GO 41829
// if pos = 1 then
41526: LD_VAR 0 2
41530: PUSH
41531: LD_INT 1
41533: EQUAL
41534: IFFALSE 41567
// result := Replace ( arr , pos [ 1 ] , value ) else
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: LD_VAR 0 2
41550: PUSH
41551: LD_INT 1
41553: ARRAY
41554: PPUSH
41555: LD_VAR 0 3
41559: PPUSH
41560: CALL_OW 1
41564: ST_TO_ADDR
41565: GO 41829
// begin tmp := arr ;
41567: LD_ADDR_VAR 0 6
41571: PUSH
41572: LD_VAR 0 1
41576: ST_TO_ADDR
// s_arr := [ tmp ] ;
41577: LD_ADDR_VAR 0 7
41581: PUSH
41582: LD_VAR 0 6
41586: PUSH
41587: EMPTY
41588: LIST
41589: ST_TO_ADDR
// for i = 1 to pos - 1 do
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 2
41604: PUSH
41605: LD_INT 1
41607: MINUS
41608: PUSH
41609: FOR_TO
41610: IFFALSE 41655
// begin tmp := tmp [ pos [ i ] ] ;
41612: LD_ADDR_VAR 0 6
41616: PUSH
41617: LD_VAR 0 6
41621: PUSH
41622: LD_VAR 0 2
41626: PUSH
41627: LD_VAR 0 5
41631: ARRAY
41632: ARRAY
41633: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41634: LD_ADDR_VAR 0 7
41638: PUSH
41639: LD_VAR 0 7
41643: PUSH
41644: LD_VAR 0 6
41648: PUSH
41649: EMPTY
41650: LIST
41651: ADD
41652: ST_TO_ADDR
// end ;
41653: GO 41609
41655: POP
41656: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41657: LD_ADDR_VAR 0 6
41661: PUSH
41662: LD_VAR 0 6
41666: PPUSH
41667: LD_VAR 0 2
41671: PUSH
41672: LD_VAR 0 2
41676: ARRAY
41677: PPUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: CALL_OW 1
41687: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41688: LD_ADDR_VAR 0 7
41692: PUSH
41693: LD_VAR 0 7
41697: PPUSH
41698: LD_VAR 0 7
41702: PPUSH
41703: LD_VAR 0 6
41707: PPUSH
41708: CALL_OW 1
41712: ST_TO_ADDR
// for i = s_arr downto 2 do
41713: LD_ADDR_VAR 0 5
41717: PUSH
41718: DOUBLE
41719: LD_VAR 0 7
41723: INC
41724: ST_TO_ADDR
41725: LD_INT 2
41727: PUSH
41728: FOR_DOWNTO
41729: IFFALSE 41813
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41731: LD_ADDR_VAR 0 6
41735: PUSH
41736: LD_VAR 0 7
41740: PUSH
41741: LD_VAR 0 5
41745: PUSH
41746: LD_INT 1
41748: MINUS
41749: ARRAY
41750: PPUSH
41751: LD_VAR 0 2
41755: PUSH
41756: LD_VAR 0 5
41760: PUSH
41761: LD_INT 1
41763: MINUS
41764: ARRAY
41765: PPUSH
41766: LD_VAR 0 7
41770: PUSH
41771: LD_VAR 0 5
41775: ARRAY
41776: PPUSH
41777: CALL_OW 1
41781: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41782: LD_ADDR_VAR 0 7
41786: PUSH
41787: LD_VAR 0 7
41791: PPUSH
41792: LD_VAR 0 5
41796: PUSH
41797: LD_INT 1
41799: MINUS
41800: PPUSH
41801: LD_VAR 0 6
41805: PPUSH
41806: CALL_OW 1
41810: ST_TO_ADDR
// end ;
41811: GO 41728
41813: POP
41814: POP
// result := s_arr [ 1 ] ;
41815: LD_ADDR_VAR 0 4
41819: PUSH
41820: LD_VAR 0 7
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: ST_TO_ADDR
// end ; end ;
41829: LD_VAR 0 4
41833: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41834: LD_INT 0
41836: PPUSH
41837: PPUSH
// if not list then
41838: LD_VAR 0 1
41842: NOT
41843: IFFALSE 41847
// exit ;
41845: GO 41938
// i := list [ pos1 ] ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 1
41856: PUSH
41857: LD_VAR 0 2
41861: ARRAY
41862: ST_TO_ADDR
// if not i then
41863: LD_VAR 0 5
41867: NOT
41868: IFFALSE 41872
// exit ;
41870: GO 41938
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41872: LD_ADDR_VAR 0 1
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: LD_VAR 0 1
41891: PUSH
41892: LD_VAR 0 3
41896: ARRAY
41897: PPUSH
41898: CALL_OW 1
41902: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41903: LD_ADDR_VAR 0 1
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: LD_VAR 0 3
41917: PPUSH
41918: LD_VAR 0 5
41922: PPUSH
41923: CALL_OW 1
41927: ST_TO_ADDR
// result := list ;
41928: LD_ADDR_VAR 0 4
41932: PUSH
41933: LD_VAR 0 1
41937: ST_TO_ADDR
// end ;
41938: LD_VAR 0 4
41942: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41943: LD_INT 0
41945: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41946: LD_ADDR_VAR 0 5
41950: PUSH
41951: LD_VAR 0 1
41955: PPUSH
41956: CALL_OW 250
41960: PPUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: CALL_OW 251
41970: PPUSH
41971: LD_VAR 0 2
41975: PPUSH
41976: LD_VAR 0 3
41980: PPUSH
41981: LD_VAR 0 4
41985: PPUSH
41986: CALL 41996 0 5
41990: ST_TO_ADDR
// end ;
41991: LD_VAR 0 5
41995: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
// if not list then
42002: LD_VAR 0 3
42006: NOT
42007: IFFALSE 42011
// exit ;
42009: GO 42399
// result := [ ] ;
42011: LD_ADDR_VAR 0 6
42015: PUSH
42016: EMPTY
42017: ST_TO_ADDR
// for i in list do
42018: LD_ADDR_VAR 0 7
42022: PUSH
42023: LD_VAR 0 3
42027: PUSH
42028: FOR_IN
42029: IFFALSE 42231
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_VAR 0 7
42040: PPUSH
42041: LD_VAR 0 1
42045: PPUSH
42046: LD_VAR 0 2
42050: PPUSH
42051: CALL_OW 297
42055: ST_TO_ADDR
// if not result then
42056: LD_VAR 0 6
42060: NOT
42061: IFFALSE 42087
// result := [ [ i , tmp ] ] else
42063: LD_ADDR_VAR 0 6
42067: PUSH
42068: LD_VAR 0 7
42072: PUSH
42073: LD_VAR 0 9
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: ST_TO_ADDR
42085: GO 42229
// begin if result [ result ] [ 2 ] < tmp then
42087: LD_VAR 0 6
42091: PUSH
42092: LD_VAR 0 6
42096: ARRAY
42097: PUSH
42098: LD_INT 2
42100: ARRAY
42101: PUSH
42102: LD_VAR 0 9
42106: LESS
42107: IFFALSE 42149
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42109: LD_ADDR_VAR 0 6
42113: PUSH
42114: LD_VAR 0 6
42118: PPUSH
42119: LD_VAR 0 6
42123: PUSH
42124: LD_INT 1
42126: PLUS
42127: PPUSH
42128: LD_VAR 0 7
42132: PUSH
42133: LD_VAR 0 9
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PPUSH
42142: CALL_OW 2
42146: ST_TO_ADDR
42147: GO 42229
// for j = 1 to result do
42149: LD_ADDR_VAR 0 8
42153: PUSH
42154: DOUBLE
42155: LD_INT 1
42157: DEC
42158: ST_TO_ADDR
42159: LD_VAR 0 6
42163: PUSH
42164: FOR_TO
42165: IFFALSE 42227
// begin if tmp < result [ j ] [ 2 ] then
42167: LD_VAR 0 9
42171: PUSH
42172: LD_VAR 0 6
42176: PUSH
42177: LD_VAR 0 8
42181: ARRAY
42182: PUSH
42183: LD_INT 2
42185: ARRAY
42186: LESS
42187: IFFALSE 42225
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42189: LD_ADDR_VAR 0 6
42193: PUSH
42194: LD_VAR 0 6
42198: PPUSH
42199: LD_VAR 0 8
42203: PPUSH
42204: LD_VAR 0 7
42208: PUSH
42209: LD_VAR 0 9
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PPUSH
42218: CALL_OW 2
42222: ST_TO_ADDR
// break ;
42223: GO 42227
// end ; end ;
42225: GO 42164
42227: POP
42228: POP
// end ; end ;
42229: GO 42028
42231: POP
42232: POP
// if result and not asc then
42233: LD_VAR 0 6
42237: PUSH
42238: LD_VAR 0 4
42242: NOT
42243: AND
42244: IFFALSE 42319
// begin tmp := result ;
42246: LD_ADDR_VAR 0 9
42250: PUSH
42251: LD_VAR 0 6
42255: ST_TO_ADDR
// for i = tmp downto 1 do
42256: LD_ADDR_VAR 0 7
42260: PUSH
42261: DOUBLE
42262: LD_VAR 0 9
42266: INC
42267: ST_TO_ADDR
42268: LD_INT 1
42270: PUSH
42271: FOR_DOWNTO
42272: IFFALSE 42317
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42274: LD_ADDR_VAR 0 6
42278: PUSH
42279: LD_VAR 0 6
42283: PPUSH
42284: LD_VAR 0 9
42288: PUSH
42289: LD_VAR 0 7
42293: MINUS
42294: PUSH
42295: LD_INT 1
42297: PLUS
42298: PPUSH
42299: LD_VAR 0 9
42303: PUSH
42304: LD_VAR 0 7
42308: ARRAY
42309: PPUSH
42310: CALL_OW 1
42314: ST_TO_ADDR
42315: GO 42271
42317: POP
42318: POP
// end ; tmp := [ ] ;
42319: LD_ADDR_VAR 0 9
42323: PUSH
42324: EMPTY
42325: ST_TO_ADDR
// if mode then
42326: LD_VAR 0 5
42330: IFFALSE 42399
// begin for i = 1 to result do
42332: LD_ADDR_VAR 0 7
42336: PUSH
42337: DOUBLE
42338: LD_INT 1
42340: DEC
42341: ST_TO_ADDR
42342: LD_VAR 0 6
42346: PUSH
42347: FOR_TO
42348: IFFALSE 42387
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42350: LD_ADDR_VAR 0 9
42354: PUSH
42355: LD_VAR 0 9
42359: PPUSH
42360: LD_VAR 0 7
42364: PPUSH
42365: LD_VAR 0 6
42369: PUSH
42370: LD_VAR 0 7
42374: ARRAY
42375: PUSH
42376: LD_INT 1
42378: ARRAY
42379: PPUSH
42380: CALL_OW 1
42384: ST_TO_ADDR
42385: GO 42347
42387: POP
42388: POP
// result := tmp ;
42389: LD_ADDR_VAR 0 6
42393: PUSH
42394: LD_VAR 0 9
42398: ST_TO_ADDR
// end ; end ;
42399: LD_VAR 0 6
42403: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42404: LD_INT 0
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42412: LD_ADDR_VAR 0 5
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// if not x or not y then
42434: LD_VAR 0 2
42438: NOT
42439: PUSH
42440: LD_VAR 0 3
42444: NOT
42445: OR
42446: IFFALSE 42450
// exit ;
42448: GO 44096
// if not range then
42450: LD_VAR 0 4
42454: NOT
42455: IFFALSE 42465
// range := 10 ;
42457: LD_ADDR_VAR 0 4
42461: PUSH
42462: LD_INT 10
42464: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42465: LD_ADDR_VAR 0 8
42469: PUSH
42470: LD_INT 81
42472: PUSH
42473: LD_VAR 0 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 92
42484: PUSH
42485: LD_VAR 0 2
42489: PUSH
42490: LD_VAR 0 3
42494: PUSH
42495: LD_VAR 0 4
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 21
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: PPUSH
42528: CALL_OW 69
42532: ST_TO_ADDR
// if not tmp then
42533: LD_VAR 0 8
42537: NOT
42538: IFFALSE 42542
// exit ;
42540: GO 44096
// for i in tmp do
42542: LD_ADDR_VAR 0 6
42546: PUSH
42547: LD_VAR 0 8
42551: PUSH
42552: FOR_IN
42553: IFFALSE 44071
// begin points := [ 0 , 0 , 0 ] ;
42555: LD_ADDR_VAR 0 9
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// bpoints := 1 ;
42574: LD_ADDR_VAR 0 10
42578: PUSH
42579: LD_INT 1
42581: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42582: LD_VAR 0 6
42586: PPUSH
42587: CALL_OW 247
42591: PUSH
42592: LD_INT 1
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 43178
42600: POP
// begin if GetClass ( i ) = 1 then
42601: LD_VAR 0 6
42605: PPUSH
42606: CALL_OW 257
42610: PUSH
42611: LD_INT 1
42613: EQUAL
42614: IFFALSE 42635
// points := [ 10 , 5 , 3 ] ;
42616: LD_ADDR_VAR 0 9
42620: PUSH
42621: LD_INT 10
42623: PUSH
42624: LD_INT 5
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42635: LD_VAR 0 6
42639: PPUSH
42640: CALL_OW 257
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: IN
42659: IFFALSE 42680
// points := [ 3 , 2 , 1 ] ;
42661: LD_ADDR_VAR 0 9
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42680: LD_VAR 0 6
42684: PPUSH
42685: CALL_OW 257
42689: PUSH
42690: LD_INT 5
42692: EQUAL
42693: IFFALSE 42714
// points := [ 130 , 5 , 2 ] ;
42695: LD_ADDR_VAR 0 9
42699: PUSH
42700: LD_INT 130
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42714: LD_VAR 0 6
42718: PPUSH
42719: CALL_OW 257
42723: PUSH
42724: LD_INT 8
42726: EQUAL
42727: IFFALSE 42748
// points := [ 35 , 35 , 30 ] ;
42729: LD_ADDR_VAR 0 9
42733: PUSH
42734: LD_INT 35
42736: PUSH
42737: LD_INT 35
42739: PUSH
42740: LD_INT 30
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42748: LD_VAR 0 6
42752: PPUSH
42753: CALL_OW 257
42757: PUSH
42758: LD_INT 9
42760: EQUAL
42761: IFFALSE 42782
// points := [ 20 , 55 , 40 ] ;
42763: LD_ADDR_VAR 0 9
42767: PUSH
42768: LD_INT 20
42770: PUSH
42771: LD_INT 55
42773: PUSH
42774: LD_INT 40
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42782: LD_VAR 0 6
42786: PPUSH
42787: CALL_OW 257
42791: PUSH
42792: LD_INT 12
42794: PUSH
42795: LD_INT 16
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: IN
42802: IFFALSE 42823
// points := [ 5 , 3 , 2 ] ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: LD_INT 5
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42823: LD_VAR 0 6
42827: PPUSH
42828: CALL_OW 257
42832: PUSH
42833: LD_INT 17
42835: EQUAL
42836: IFFALSE 42857
// points := [ 100 , 50 , 75 ] ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_INT 100
42845: PUSH
42846: LD_INT 50
42848: PUSH
42849: LD_INT 75
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42857: LD_VAR 0 6
42861: PPUSH
42862: CALL_OW 257
42866: PUSH
42867: LD_INT 15
42869: EQUAL
42870: IFFALSE 42891
// points := [ 10 , 5 , 3 ] ;
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: LD_INT 10
42879: PUSH
42880: LD_INT 5
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 257
42900: PUSH
42901: LD_INT 14
42903: EQUAL
42904: IFFALSE 42925
// points := [ 10 , 0 , 0 ] ;
42906: LD_ADDR_VAR 0 9
42910: PUSH
42911: LD_INT 10
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42925: LD_VAR 0 6
42929: PPUSH
42930: CALL_OW 257
42934: PUSH
42935: LD_INT 11
42937: EQUAL
42938: IFFALSE 42959
// points := [ 30 , 10 , 5 ] ;
42940: LD_ADDR_VAR 0 9
42944: PUSH
42945: LD_INT 30
42947: PUSH
42948: LD_INT 10
42950: PUSH
42951: LD_INT 5
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42959: LD_VAR 0 1
42963: PPUSH
42964: LD_INT 5
42966: PPUSH
42967: CALL_OW 321
42971: PUSH
42972: LD_INT 2
42974: EQUAL
42975: IFFALSE 42992
// bpoints := bpoints * 1.8 ;
42977: LD_ADDR_VAR 0 10
42981: PUSH
42982: LD_VAR 0 10
42986: PUSH
42987: LD_REAL  1.80000000000000E+0000
42990: MUL
42991: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42992: LD_VAR 0 6
42996: PPUSH
42997: CALL_OW 257
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 3
43010: PUSH
43011: LD_INT 4
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: IN
43020: PUSH
43021: LD_VAR 0 1
43025: PPUSH
43026: LD_INT 51
43028: PPUSH
43029: CALL_OW 321
43033: PUSH
43034: LD_INT 2
43036: EQUAL
43037: AND
43038: IFFALSE 43055
// bpoints := bpoints * 1.2 ;
43040: LD_ADDR_VAR 0 10
43044: PUSH
43045: LD_VAR 0 10
43049: PUSH
43050: LD_REAL  1.20000000000000E+0000
43053: MUL
43054: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43055: LD_VAR 0 6
43059: PPUSH
43060: CALL_OW 257
43064: PUSH
43065: LD_INT 5
43067: PUSH
43068: LD_INT 7
43070: PUSH
43071: LD_INT 9
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: IN
43079: PUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_INT 52
43087: PPUSH
43088: CALL_OW 321
43092: PUSH
43093: LD_INT 2
43095: EQUAL
43096: AND
43097: IFFALSE 43114
// bpoints := bpoints * 1.5 ;
43099: LD_ADDR_VAR 0 10
43103: PUSH
43104: LD_VAR 0 10
43108: PUSH
43109: LD_REAL  1.50000000000000E+0000
43112: MUL
43113: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_INT 66
43121: PPUSH
43122: CALL_OW 321
43126: PUSH
43127: LD_INT 2
43129: EQUAL
43130: IFFALSE 43147
// bpoints := bpoints * 1.1 ;
43132: LD_ADDR_VAR 0 10
43136: PUSH
43137: LD_VAR 0 10
43141: PUSH
43142: LD_REAL  1.10000000000000E+0000
43145: MUL
43146: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43147: LD_ADDR_VAR 0 10
43151: PUSH
43152: LD_VAR 0 10
43156: PUSH
43157: LD_VAR 0 6
43161: PPUSH
43162: LD_INT 1
43164: PPUSH
43165: CALL_OW 259
43169: PUSH
43170: LD_REAL  1.15000000000000E+0000
43173: MUL
43174: MUL
43175: ST_TO_ADDR
// end ; unit_vehicle :
43176: GO 44000
43178: LD_INT 2
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43186
43184: GO 43988
43186: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43187: LD_VAR 0 6
43191: PPUSH
43192: CALL_OW 264
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 42
43202: PUSH
43203: LD_INT 24
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: IN
43211: IFFALSE 43232
// points := [ 25 , 5 , 3 ] ;
43213: LD_ADDR_VAR 0 9
43217: PUSH
43218: LD_INT 25
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: LD_INT 3
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43232: LD_VAR 0 6
43236: PPUSH
43237: CALL_OW 264
43241: PUSH
43242: LD_INT 4
43244: PUSH
43245: LD_INT 43
43247: PUSH
43248: LD_INT 25
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: IN
43256: IFFALSE 43277
// points := [ 40 , 15 , 5 ] ;
43258: LD_ADDR_VAR 0 9
43262: PUSH
43263: LD_INT 40
43265: PUSH
43266: LD_INT 15
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43277: LD_VAR 0 6
43281: PPUSH
43282: CALL_OW 264
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 23
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: IN
43297: IFFALSE 43318
// points := [ 7 , 25 , 8 ] ;
43299: LD_ADDR_VAR 0 9
43303: PUSH
43304: LD_INT 7
43306: PUSH
43307: LD_INT 25
43309: PUSH
43310: LD_INT 8
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43318: LD_VAR 0 6
43322: PPUSH
43323: CALL_OW 264
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: LD_INT 27
43333: PUSH
43334: LD_INT 44
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: IN
43342: IFFALSE 43363
// points := [ 14 , 50 , 16 ] ;
43344: LD_ADDR_VAR 0 9
43348: PUSH
43349: LD_INT 14
43351: PUSH
43352: LD_INT 50
43354: PUSH
43355: LD_INT 16
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43363: LD_VAR 0 6
43367: PPUSH
43368: CALL_OW 264
43372: PUSH
43373: LD_INT 6
43375: PUSH
43376: LD_INT 46
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: IN
43383: IFFALSE 43404
// points := [ 32 , 120 , 70 ] ;
43385: LD_ADDR_VAR 0 9
43389: PUSH
43390: LD_INT 32
43392: PUSH
43393: LD_INT 120
43395: PUSH
43396: LD_INT 70
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43404: LD_VAR 0 6
43408: PPUSH
43409: CALL_OW 264
43413: PUSH
43414: LD_INT 7
43416: PUSH
43417: LD_INT 28
43419: PUSH
43420: LD_INT 45
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: IN
43428: IFFALSE 43449
// points := [ 35 , 20 , 45 ] ;
43430: LD_ADDR_VAR 0 9
43434: PUSH
43435: LD_INT 35
43437: PUSH
43438: LD_INT 20
43440: PUSH
43441: LD_INT 45
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43449: LD_VAR 0 6
43453: PPUSH
43454: CALL_OW 264
43458: PUSH
43459: LD_INT 47
43461: PUSH
43462: EMPTY
43463: LIST
43464: IN
43465: IFFALSE 43486
// points := [ 67 , 45 , 75 ] ;
43467: LD_ADDR_VAR 0 9
43471: PUSH
43472: LD_INT 67
43474: PUSH
43475: LD_INT 45
43477: PUSH
43478: LD_INT 75
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43486: LD_VAR 0 6
43490: PPUSH
43491: CALL_OW 264
43495: PUSH
43496: LD_INT 26
43498: PUSH
43499: EMPTY
43500: LIST
43501: IN
43502: IFFALSE 43523
// points := [ 120 , 30 , 80 ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_INT 120
43511: PUSH
43512: LD_INT 30
43514: PUSH
43515: LD_INT 80
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43523: LD_VAR 0 6
43527: PPUSH
43528: CALL_OW 264
43532: PUSH
43533: LD_INT 22
43535: PUSH
43536: EMPTY
43537: LIST
43538: IN
43539: IFFALSE 43560
// points := [ 40 , 1 , 1 ] ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_INT 40
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43560: LD_VAR 0 6
43564: PPUSH
43565: CALL_OW 264
43569: PUSH
43570: LD_INT 29
43572: PUSH
43573: EMPTY
43574: LIST
43575: IN
43576: IFFALSE 43597
// points := [ 70 , 200 , 400 ] ;
43578: LD_ADDR_VAR 0 9
43582: PUSH
43583: LD_INT 70
43585: PUSH
43586: LD_INT 200
43588: PUSH
43589: LD_INT 400
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43597: LD_VAR 0 6
43601: PPUSH
43602: CALL_OW 264
43606: PUSH
43607: LD_INT 14
43609: PUSH
43610: LD_INT 53
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: IN
43617: IFFALSE 43638
// points := [ 40 , 10 , 20 ] ;
43619: LD_ADDR_VAR 0 9
43623: PUSH
43624: LD_INT 40
43626: PUSH
43627: LD_INT 10
43629: PUSH
43630: LD_INT 20
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43638: LD_VAR 0 6
43642: PPUSH
43643: CALL_OW 264
43647: PUSH
43648: LD_INT 9
43650: PUSH
43651: EMPTY
43652: LIST
43653: IN
43654: IFFALSE 43675
// points := [ 5 , 70 , 20 ] ;
43656: LD_ADDR_VAR 0 9
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: LD_INT 70
43666: PUSH
43667: LD_INT 20
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43675: LD_VAR 0 6
43679: PPUSH
43680: CALL_OW 264
43684: PUSH
43685: LD_INT 10
43687: PUSH
43688: EMPTY
43689: LIST
43690: IN
43691: IFFALSE 43712
// points := [ 35 , 110 , 70 ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: LD_INT 35
43700: PUSH
43701: LD_INT 110
43703: PUSH
43704: LD_INT 70
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43712: LD_VAR 0 6
43716: PPUSH
43717: CALL_OW 265
43721: PUSH
43722: LD_INT 25
43724: EQUAL
43725: IFFALSE 43746
// points := [ 80 , 65 , 100 ] ;
43727: LD_ADDR_VAR 0 9
43731: PUSH
43732: LD_INT 80
43734: PUSH
43735: LD_INT 65
43737: PUSH
43738: LD_INT 100
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43746: LD_VAR 0 6
43750: PPUSH
43751: CALL_OW 263
43755: PUSH
43756: LD_INT 1
43758: EQUAL
43759: IFFALSE 43794
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43761: LD_ADDR_VAR 0 10
43765: PUSH
43766: LD_VAR 0 10
43770: PUSH
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL_OW 311
43780: PPUSH
43781: LD_INT 3
43783: PPUSH
43784: CALL_OW 259
43788: PUSH
43789: LD_INT 4
43791: MUL
43792: MUL
43793: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43794: LD_VAR 0 6
43798: PPUSH
43799: CALL_OW 263
43803: PUSH
43804: LD_INT 2
43806: EQUAL
43807: IFFALSE 43858
// begin j := IsControledBy ( i ) ;
43809: LD_ADDR_VAR 0 7
43813: PUSH
43814: LD_VAR 0 6
43818: PPUSH
43819: CALL_OW 312
43823: ST_TO_ADDR
// if j then
43824: LD_VAR 0 7
43828: IFFALSE 43858
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43830: LD_ADDR_VAR 0 10
43834: PUSH
43835: LD_VAR 0 10
43839: PUSH
43840: LD_VAR 0 7
43844: PPUSH
43845: LD_INT 3
43847: PPUSH
43848: CALL_OW 259
43852: PUSH
43853: LD_INT 3
43855: MUL
43856: MUL
43857: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43858: LD_VAR 0 6
43862: PPUSH
43863: CALL_OW 264
43867: PUSH
43868: LD_INT 5
43870: PUSH
43871: LD_INT 6
43873: PUSH
43874: LD_INT 46
43876: PUSH
43877: LD_INT 44
43879: PUSH
43880: LD_INT 47
43882: PUSH
43883: LD_INT 45
43885: PUSH
43886: LD_INT 28
43888: PUSH
43889: LD_INT 7
43891: PUSH
43892: LD_INT 27
43894: PUSH
43895: LD_INT 29
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: IN
43910: PUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: LD_INT 52
43918: PPUSH
43919: CALL_OW 321
43923: PUSH
43924: LD_INT 2
43926: EQUAL
43927: AND
43928: IFFALSE 43945
// bpoints := bpoints * 1.2 ;
43930: LD_ADDR_VAR 0 10
43934: PUSH
43935: LD_VAR 0 10
43939: PUSH
43940: LD_REAL  1.20000000000000E+0000
43943: MUL
43944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43945: LD_VAR 0 6
43949: PPUSH
43950: CALL_OW 264
43954: PUSH
43955: LD_INT 6
43957: PUSH
43958: LD_INT 46
43960: PUSH
43961: LD_INT 47
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: IN
43969: IFFALSE 43986
// bpoints := bpoints * 1.2 ;
43971: LD_ADDR_VAR 0 10
43975: PUSH
43976: LD_VAR 0 10
43980: PUSH
43981: LD_REAL  1.20000000000000E+0000
43984: MUL
43985: ST_TO_ADDR
// end ; unit_building :
43986: GO 44000
43988: LD_INT 3
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 43999
43996: POP
// ; end ;
43997: GO 44000
43999: POP
// for j = 1 to 3 do
44000: LD_ADDR_VAR 0 7
44004: PUSH
44005: DOUBLE
44006: LD_INT 1
44008: DEC
44009: ST_TO_ADDR
44010: LD_INT 3
44012: PUSH
44013: FOR_TO
44014: IFFALSE 44067
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44016: LD_ADDR_VAR 0 5
44020: PUSH
44021: LD_VAR 0 5
44025: PPUSH
44026: LD_VAR 0 7
44030: PPUSH
44031: LD_VAR 0 5
44035: PUSH
44036: LD_VAR 0 7
44040: ARRAY
44041: PUSH
44042: LD_VAR 0 9
44046: PUSH
44047: LD_VAR 0 7
44051: ARRAY
44052: PUSH
44053: LD_VAR 0 10
44057: MUL
44058: PLUS
44059: PPUSH
44060: CALL_OW 1
44064: ST_TO_ADDR
44065: GO 44013
44067: POP
44068: POP
// end ;
44069: GO 42552
44071: POP
44072: POP
// result := Replace ( result , 4 , tmp ) ;
44073: LD_ADDR_VAR 0 5
44077: PUSH
44078: LD_VAR 0 5
44082: PPUSH
44083: LD_INT 4
44085: PPUSH
44086: LD_VAR 0 8
44090: PPUSH
44091: CALL_OW 1
44095: ST_TO_ADDR
// end ;
44096: LD_VAR 0 5
44100: RET
// export function DangerAtRange ( unit , range ) ; begin
44101: LD_INT 0
44103: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_VAR 0 1
44113: PPUSH
44114: CALL_OW 255
44118: PPUSH
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 250
44128: PPUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 251
44138: PPUSH
44139: LD_VAR 0 2
44143: PPUSH
44144: CALL 42404 0 4
44148: ST_TO_ADDR
// end ;
44149: LD_VAR 0 3
44153: RET
// export function DangerInArea ( side , area ) ; begin
44154: LD_INT 0
44156: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44157: LD_ADDR_VAR 0 3
44161: PUSH
44162: LD_VAR 0 2
44166: PPUSH
44167: LD_INT 81
44169: PUSH
44170: LD_VAR 0 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PPUSH
44179: CALL_OW 70
44183: ST_TO_ADDR
// end ;
44184: LD_VAR 0 3
44188: RET
// export function IsExtension ( b ) ; begin
44189: LD_INT 0
44191: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44192: LD_ADDR_VAR 0 2
44196: PUSH
44197: LD_VAR 0 1
44201: PUSH
44202: LD_INT 23
44204: PUSH
44205: LD_INT 20
44207: PUSH
44208: LD_INT 22
44210: PUSH
44211: LD_INT 17
44213: PUSH
44214: LD_INT 24
44216: PUSH
44217: LD_INT 21
44219: PUSH
44220: LD_INT 19
44222: PUSH
44223: LD_INT 16
44225: PUSH
44226: LD_INT 25
44228: PUSH
44229: LD_INT 18
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: IN
44244: ST_TO_ADDR
// end ;
44245: LD_VAR 0 2
44249: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44250: LD_INT 0
44252: PPUSH
44253: PPUSH
44254: PPUSH
// result := [ ] ;
44255: LD_ADDR_VAR 0 4
44259: PUSH
44260: EMPTY
44261: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44262: LD_ADDR_VAR 0 5
44266: PUSH
44267: LD_VAR 0 2
44271: PPUSH
44272: LD_INT 21
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PPUSH
44282: CALL_OW 70
44286: ST_TO_ADDR
// if not tmp then
44287: LD_VAR 0 5
44291: NOT
44292: IFFALSE 44296
// exit ;
44294: GO 44360
// if checkLink then
44296: LD_VAR 0 3
44300: IFFALSE 44350
// begin for i in tmp do
44302: LD_ADDR_VAR 0 6
44306: PUSH
44307: LD_VAR 0 5
44311: PUSH
44312: FOR_IN
44313: IFFALSE 44348
// if GetBase ( i ) <> base then
44315: LD_VAR 0 6
44319: PPUSH
44320: CALL_OW 274
44324: PUSH
44325: LD_VAR 0 1
44329: NONEQUAL
44330: IFFALSE 44346
// ComLinkToBase ( base , i ) ;
44332: LD_VAR 0 1
44336: PPUSH
44337: LD_VAR 0 6
44341: PPUSH
44342: CALL_OW 169
44346: GO 44312
44348: POP
44349: POP
// end ; result := tmp ;
44350: LD_ADDR_VAR 0 4
44354: PUSH
44355: LD_VAR 0 5
44359: ST_TO_ADDR
// end ;
44360: LD_VAR 0 4
44364: RET
// export function ComComplete ( units , b ) ; var i ; begin
44365: LD_INT 0
44367: PPUSH
44368: PPUSH
// if not units then
44369: LD_VAR 0 1
44373: NOT
44374: IFFALSE 44378
// exit ;
44376: GO 44468
// for i in units do
44378: LD_ADDR_VAR 0 4
44382: PUSH
44383: LD_VAR 0 1
44387: PUSH
44388: FOR_IN
44389: IFFALSE 44466
// if BuildingStatus ( b ) = bs_build then
44391: LD_VAR 0 2
44395: PPUSH
44396: CALL_OW 461
44400: PUSH
44401: LD_INT 1
44403: EQUAL
44404: IFFALSE 44464
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44406: LD_VAR 0 4
44410: PPUSH
44411: LD_STRING h
44413: PUSH
44414: LD_VAR 0 2
44418: PPUSH
44419: CALL_OW 250
44423: PUSH
44424: LD_VAR 0 2
44428: PPUSH
44429: CALL_OW 251
44433: PUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: PPUSH
44460: CALL_OW 446
44464: GO 44388
44466: POP
44467: POP
// end ;
44468: LD_VAR 0 3
44472: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44473: LD_INT 0
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44481: LD_VAR 0 1
44485: NOT
44486: PUSH
44487: LD_VAR 0 1
44491: PPUSH
44492: CALL_OW 263
44496: PUSH
44497: LD_INT 2
44499: EQUAL
44500: NOT
44501: OR
44502: IFFALSE 44506
// exit ;
44504: GO 44822
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44506: LD_ADDR_VAR 0 6
44510: PUSH
44511: LD_INT 22
44513: PUSH
44514: LD_VAR 0 1
44518: PPUSH
44519: CALL_OW 255
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 30
44533: PUSH
44534: LD_INT 36
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 34
44543: PUSH
44544: LD_INT 31
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PPUSH
44560: CALL_OW 69
44564: ST_TO_ADDR
// if not tmp then
44565: LD_VAR 0 6
44569: NOT
44570: IFFALSE 44574
// exit ;
44572: GO 44822
// result := [ ] ;
44574: LD_ADDR_VAR 0 2
44578: PUSH
44579: EMPTY
44580: ST_TO_ADDR
// for i in tmp do
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_VAR 0 6
44590: PUSH
44591: FOR_IN
44592: IFFALSE 44663
// begin t := UnitsInside ( i ) ;
44594: LD_ADDR_VAR 0 4
44598: PUSH
44599: LD_VAR 0 3
44603: PPUSH
44604: CALL_OW 313
44608: ST_TO_ADDR
// if t then
44609: LD_VAR 0 4
44613: IFFALSE 44661
// for j in t do
44615: LD_ADDR_VAR 0 7
44619: PUSH
44620: LD_VAR 0 4
44624: PUSH
44625: FOR_IN
44626: IFFALSE 44659
// result := Insert ( result , result + 1 , j ) ;
44628: LD_ADDR_VAR 0 2
44632: PUSH
44633: LD_VAR 0 2
44637: PPUSH
44638: LD_VAR 0 2
44642: PUSH
44643: LD_INT 1
44645: PLUS
44646: PPUSH
44647: LD_VAR 0 7
44651: PPUSH
44652: CALL_OW 2
44656: ST_TO_ADDR
44657: GO 44625
44659: POP
44660: POP
// end ;
44661: GO 44591
44663: POP
44664: POP
// if not result then
44665: LD_VAR 0 2
44669: NOT
44670: IFFALSE 44674
// exit ;
44672: GO 44822
// mech := result [ 1 ] ;
44674: LD_ADDR_VAR 0 5
44678: PUSH
44679: LD_VAR 0 2
44683: PUSH
44684: LD_INT 1
44686: ARRAY
44687: ST_TO_ADDR
// if result > 1 then
44688: LD_VAR 0 2
44692: PUSH
44693: LD_INT 1
44695: GREATER
44696: IFFALSE 44808
// for i = 2 to result do
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: DOUBLE
44704: LD_INT 2
44706: DEC
44707: ST_TO_ADDR
44708: LD_VAR 0 2
44712: PUSH
44713: FOR_TO
44714: IFFALSE 44806
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44716: LD_ADDR_VAR 0 4
44720: PUSH
44721: LD_VAR 0 2
44725: PUSH
44726: LD_VAR 0 3
44730: ARRAY
44731: PPUSH
44732: LD_INT 3
44734: PPUSH
44735: CALL_OW 259
44739: PUSH
44740: LD_VAR 0 2
44744: PUSH
44745: LD_VAR 0 3
44749: ARRAY
44750: PPUSH
44751: CALL_OW 432
44755: MINUS
44756: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44757: LD_VAR 0 4
44761: PUSH
44762: LD_VAR 0 5
44766: PPUSH
44767: LD_INT 3
44769: PPUSH
44770: CALL_OW 259
44774: PUSH
44775: LD_VAR 0 5
44779: PPUSH
44780: CALL_OW 432
44784: MINUS
44785: GREATEREQUAL
44786: IFFALSE 44804
// mech := result [ i ] ;
44788: LD_ADDR_VAR 0 5
44792: PUSH
44793: LD_VAR 0 2
44797: PUSH
44798: LD_VAR 0 3
44802: ARRAY
44803: ST_TO_ADDR
// end ;
44804: GO 44713
44806: POP
44807: POP
// ComLinkTo ( vehicle , mech ) ;
44808: LD_VAR 0 1
44812: PPUSH
44813: LD_VAR 0 5
44817: PPUSH
44818: CALL_OW 135
// end ;
44822: LD_VAR 0 2
44826: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44827: LD_INT 0
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
// result := [ ] ;
44842: LD_ADDR_VAR 0 7
44846: PUSH
44847: EMPTY
44848: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44849: LD_VAR 0 1
44853: PPUSH
44854: CALL_OW 266
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: IN
44869: NOT
44870: IFFALSE 44874
// exit ;
44872: GO 46508
// if name then
44874: LD_VAR 0 3
44878: IFFALSE 44894
// SetBName ( base_dep , name ) ;
44880: LD_VAR 0 1
44884: PPUSH
44885: LD_VAR 0 3
44889: PPUSH
44890: CALL_OW 500
// base := GetBase ( base_dep ) ;
44894: LD_ADDR_VAR 0 15
44898: PUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: CALL_OW 274
44908: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44909: LD_ADDR_VAR 0 16
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: CALL_OW 255
44923: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44924: LD_ADDR_VAR 0 17
44928: PUSH
44929: LD_VAR 0 1
44933: PPUSH
44934: CALL_OW 248
44938: ST_TO_ADDR
// if sources then
44939: LD_VAR 0 5
44943: IFFALSE 44990
// for i = 1 to 3 do
44945: LD_ADDR_VAR 0 8
44949: PUSH
44950: DOUBLE
44951: LD_INT 1
44953: DEC
44954: ST_TO_ADDR
44955: LD_INT 3
44957: PUSH
44958: FOR_TO
44959: IFFALSE 44988
// AddResourceType ( base , i , sources [ i ] ) ;
44961: LD_VAR 0 15
44965: PPUSH
44966: LD_VAR 0 8
44970: PPUSH
44971: LD_VAR 0 5
44975: PUSH
44976: LD_VAR 0 8
44980: ARRAY
44981: PPUSH
44982: CALL_OW 276
44986: GO 44958
44988: POP
44989: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44990: LD_ADDR_VAR 0 18
44994: PUSH
44995: LD_VAR 0 15
44999: PPUSH
45000: LD_VAR 0 2
45004: PPUSH
45005: LD_INT 1
45007: PPUSH
45008: CALL 44250 0 3
45012: ST_TO_ADDR
// InitHc ;
45013: CALL_OW 19
// InitUc ;
45017: CALL_OW 18
// uc_side := side ;
45021: LD_ADDR_OWVAR 20
45025: PUSH
45026: LD_VAR 0 16
45030: ST_TO_ADDR
// uc_nation := nation ;
45031: LD_ADDR_OWVAR 21
45035: PUSH
45036: LD_VAR 0 17
45040: ST_TO_ADDR
// if buildings then
45041: LD_VAR 0 18
45045: IFFALSE 46367
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45047: LD_ADDR_VAR 0 19
45051: PUSH
45052: LD_VAR 0 18
45056: PPUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 30
45062: PUSH
45063: LD_INT 29
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 30
45072: PUSH
45073: LD_INT 30
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: PPUSH
45085: CALL_OW 72
45089: ST_TO_ADDR
// if tmp then
45090: LD_VAR 0 19
45094: IFFALSE 45142
// for i in tmp do
45096: LD_ADDR_VAR 0 8
45100: PUSH
45101: LD_VAR 0 19
45105: PUSH
45106: FOR_IN
45107: IFFALSE 45140
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45109: LD_VAR 0 8
45113: PPUSH
45114: CALL_OW 250
45118: PPUSH
45119: LD_VAR 0 8
45123: PPUSH
45124: CALL_OW 251
45128: PPUSH
45129: LD_VAR 0 16
45133: PPUSH
45134: CALL_OW 441
45138: GO 45106
45140: POP
45141: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45142: LD_VAR 0 18
45146: PPUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 30
45152: PUSH
45153: LD_INT 32
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 30
45162: PUSH
45163: LD_INT 33
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: PPUSH
45175: CALL_OW 72
45179: IFFALSE 45267
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45181: LD_ADDR_VAR 0 8
45185: PUSH
45186: LD_VAR 0 18
45190: PPUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 30
45196: PUSH
45197: LD_INT 32
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 30
45206: PUSH
45207: LD_INT 33
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: PPUSH
45219: CALL_OW 72
45223: PUSH
45224: FOR_IN
45225: IFFALSE 45265
// begin if not GetBWeapon ( i ) then
45227: LD_VAR 0 8
45231: PPUSH
45232: CALL_OW 269
45236: NOT
45237: IFFALSE 45263
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45239: LD_VAR 0 8
45243: PPUSH
45244: LD_VAR 0 8
45248: PPUSH
45249: LD_VAR 0 2
45253: PPUSH
45254: CALL 46513 0 2
45258: PPUSH
45259: CALL_OW 431
// end ;
45263: GO 45224
45265: POP
45266: POP
// end ; for i = 1 to personel do
45267: LD_ADDR_VAR 0 8
45271: PUSH
45272: DOUBLE
45273: LD_INT 1
45275: DEC
45276: ST_TO_ADDR
45277: LD_VAR 0 6
45281: PUSH
45282: FOR_TO
45283: IFFALSE 46347
// begin if i > 4 then
45285: LD_VAR 0 8
45289: PUSH
45290: LD_INT 4
45292: GREATER
45293: IFFALSE 45297
// break ;
45295: GO 46347
// case i of 1 :
45297: LD_VAR 0 8
45301: PUSH
45302: LD_INT 1
45304: DOUBLE
45305: EQUAL
45306: IFTRUE 45310
45308: GO 45390
45310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45311: LD_ADDR_VAR 0 12
45315: PUSH
45316: LD_VAR 0 18
45320: PPUSH
45321: LD_INT 22
45323: PUSH
45324: LD_VAR 0 16
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 58
45335: PUSH
45336: EMPTY
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 30
45344: PUSH
45345: LD_INT 32
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 30
45354: PUSH
45355: LD_INT 4
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: LD_INT 5
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: PPUSH
45383: CALL_OW 72
45387: ST_TO_ADDR
45388: GO 45612
45390: LD_INT 2
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45460
45398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45399: LD_ADDR_VAR 0 12
45403: PUSH
45404: LD_VAR 0 18
45408: PPUSH
45409: LD_INT 22
45411: PUSH
45412: LD_VAR 0 16
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 30
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 30
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PPUSH
45453: CALL_OW 72
45457: ST_TO_ADDR
45458: GO 45612
45460: LD_INT 3
45462: DOUBLE
45463: EQUAL
45464: IFTRUE 45468
45466: GO 45530
45468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45469: LD_ADDR_VAR 0 12
45473: PUSH
45474: LD_VAR 0 18
45478: PPUSH
45479: LD_INT 22
45481: PUSH
45482: LD_VAR 0 16
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 30
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 30
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PPUSH
45523: CALL_OW 72
45527: ST_TO_ADDR
45528: GO 45612
45530: LD_INT 4
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45611
45538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45539: LD_ADDR_VAR 0 12
45543: PUSH
45544: LD_VAR 0 18
45548: PPUSH
45549: LD_INT 22
45551: PUSH
45552: LD_VAR 0 16
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 30
45566: PUSH
45567: LD_INT 6
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 30
45576: PUSH
45577: LD_INT 7
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 30
45586: PUSH
45587: LD_INT 8
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PPUSH
45604: CALL_OW 72
45608: ST_TO_ADDR
45609: GO 45612
45611: POP
// if i = 1 then
45612: LD_VAR 0 8
45616: PUSH
45617: LD_INT 1
45619: EQUAL
45620: IFFALSE 45731
// begin tmp := [ ] ;
45622: LD_ADDR_VAR 0 19
45626: PUSH
45627: EMPTY
45628: ST_TO_ADDR
// for j in f do
45629: LD_ADDR_VAR 0 9
45633: PUSH
45634: LD_VAR 0 12
45638: PUSH
45639: FOR_IN
45640: IFFALSE 45713
// if GetBType ( j ) = b_bunker then
45642: LD_VAR 0 9
45646: PPUSH
45647: CALL_OW 266
45651: PUSH
45652: LD_INT 32
45654: EQUAL
45655: IFFALSE 45682
// tmp := Insert ( tmp , 1 , j ) else
45657: LD_ADDR_VAR 0 19
45661: PUSH
45662: LD_VAR 0 19
45666: PPUSH
45667: LD_INT 1
45669: PPUSH
45670: LD_VAR 0 9
45674: PPUSH
45675: CALL_OW 2
45679: ST_TO_ADDR
45680: GO 45711
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45682: LD_ADDR_VAR 0 19
45686: PUSH
45687: LD_VAR 0 19
45691: PPUSH
45692: LD_VAR 0 19
45696: PUSH
45697: LD_INT 1
45699: PLUS
45700: PPUSH
45701: LD_VAR 0 9
45705: PPUSH
45706: CALL_OW 2
45710: ST_TO_ADDR
45711: GO 45639
45713: POP
45714: POP
// if tmp then
45715: LD_VAR 0 19
45719: IFFALSE 45731
// f := tmp ;
45721: LD_ADDR_VAR 0 12
45725: PUSH
45726: LD_VAR 0 19
45730: ST_TO_ADDR
// end ; x := personel [ i ] ;
45731: LD_ADDR_VAR 0 13
45735: PUSH
45736: LD_VAR 0 6
45740: PUSH
45741: LD_VAR 0 8
45745: ARRAY
45746: ST_TO_ADDR
// if x = - 1 then
45747: LD_VAR 0 13
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: EQUAL
45756: IFFALSE 45965
// begin for j in f do
45758: LD_ADDR_VAR 0 9
45762: PUSH
45763: LD_VAR 0 12
45767: PUSH
45768: FOR_IN
45769: IFFALSE 45961
// repeat InitHc ;
45771: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45775: LD_VAR 0 9
45779: PPUSH
45780: CALL_OW 266
45784: PUSH
45785: LD_INT 5
45787: EQUAL
45788: IFFALSE 45858
// begin if UnitsInside ( j ) < 3 then
45790: LD_VAR 0 9
45794: PPUSH
45795: CALL_OW 313
45799: PUSH
45800: LD_INT 3
45802: LESS
45803: IFFALSE 45839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45805: LD_INT 0
45807: PPUSH
45808: LD_INT 5
45810: PUSH
45811: LD_INT 8
45813: PUSH
45814: LD_INT 9
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: PUSH
45822: LD_VAR 0 17
45826: ARRAY
45827: PPUSH
45828: LD_VAR 0 4
45832: PPUSH
45833: CALL_OW 380
45837: GO 45856
// PrepareHuman ( false , i , skill ) ;
45839: LD_INT 0
45841: PPUSH
45842: LD_VAR 0 8
45846: PPUSH
45847: LD_VAR 0 4
45851: PPUSH
45852: CALL_OW 380
// end else
45856: GO 45875
// PrepareHuman ( false , i , skill ) ;
45858: LD_INT 0
45860: PPUSH
45861: LD_VAR 0 8
45865: PPUSH
45866: LD_VAR 0 4
45870: PPUSH
45871: CALL_OW 380
// un := CreateHuman ;
45875: LD_ADDR_VAR 0 14
45879: PUSH
45880: CALL_OW 44
45884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45885: LD_ADDR_VAR 0 7
45889: PUSH
45890: LD_VAR 0 7
45894: PPUSH
45895: LD_INT 1
45897: PPUSH
45898: LD_VAR 0 14
45902: PPUSH
45903: CALL_OW 2
45907: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45908: LD_VAR 0 14
45912: PPUSH
45913: LD_VAR 0 9
45917: PPUSH
45918: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45922: LD_VAR 0 9
45926: PPUSH
45927: CALL_OW 313
45931: PUSH
45932: LD_INT 6
45934: EQUAL
45935: PUSH
45936: LD_VAR 0 9
45940: PPUSH
45941: CALL_OW 266
45945: PUSH
45946: LD_INT 32
45948: PUSH
45949: LD_INT 31
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: IN
45956: OR
45957: IFFALSE 45771
45959: GO 45768
45961: POP
45962: POP
// end else
45963: GO 46345
// for j = 1 to x do
45965: LD_ADDR_VAR 0 9
45969: PUSH
45970: DOUBLE
45971: LD_INT 1
45973: DEC
45974: ST_TO_ADDR
45975: LD_VAR 0 13
45979: PUSH
45980: FOR_TO
45981: IFFALSE 46343
// begin InitHc ;
45983: CALL_OW 19
// if not f then
45987: LD_VAR 0 12
45991: NOT
45992: IFFALSE 46081
// begin PrepareHuman ( false , i , skill ) ;
45994: LD_INT 0
45996: PPUSH
45997: LD_VAR 0 8
46001: PPUSH
46002: LD_VAR 0 4
46006: PPUSH
46007: CALL_OW 380
// un := CreateHuman ;
46011: LD_ADDR_VAR 0 14
46015: PUSH
46016: CALL_OW 44
46020: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46021: LD_ADDR_VAR 0 7
46025: PUSH
46026: LD_VAR 0 7
46030: PPUSH
46031: LD_INT 1
46033: PPUSH
46034: LD_VAR 0 14
46038: PPUSH
46039: CALL_OW 2
46043: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46044: LD_VAR 0 14
46048: PPUSH
46049: LD_VAR 0 1
46053: PPUSH
46054: CALL_OW 250
46058: PPUSH
46059: LD_VAR 0 1
46063: PPUSH
46064: CALL_OW 251
46068: PPUSH
46069: LD_INT 10
46071: PPUSH
46072: LD_INT 0
46074: PPUSH
46075: CALL_OW 50
// continue ;
46079: GO 45980
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46081: LD_VAR 0 12
46085: PUSH
46086: LD_INT 1
46088: ARRAY
46089: PPUSH
46090: CALL_OW 313
46094: PUSH
46095: LD_VAR 0 12
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: PPUSH
46104: CALL_OW 266
46108: PUSH
46109: LD_INT 32
46111: PUSH
46112: LD_INT 31
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: IN
46119: AND
46120: PUSH
46121: LD_VAR 0 12
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PPUSH
46130: CALL_OW 313
46134: PUSH
46135: LD_INT 6
46137: EQUAL
46138: OR
46139: IFFALSE 46159
// f := Delete ( f , 1 ) ;
46141: LD_ADDR_VAR 0 12
46145: PUSH
46146: LD_VAR 0 12
46150: PPUSH
46151: LD_INT 1
46153: PPUSH
46154: CALL_OW 3
46158: ST_TO_ADDR
// if not f then
46159: LD_VAR 0 12
46163: NOT
46164: IFFALSE 46182
// begin x := x + 2 ;
46166: LD_ADDR_VAR 0 13
46170: PUSH
46171: LD_VAR 0 13
46175: PUSH
46176: LD_INT 2
46178: PLUS
46179: ST_TO_ADDR
// continue ;
46180: GO 45980
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46182: LD_VAR 0 12
46186: PUSH
46187: LD_INT 1
46189: ARRAY
46190: PPUSH
46191: CALL_OW 266
46195: PUSH
46196: LD_INT 5
46198: EQUAL
46199: IFFALSE 46273
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46201: LD_VAR 0 12
46205: PUSH
46206: LD_INT 1
46208: ARRAY
46209: PPUSH
46210: CALL_OW 313
46214: PUSH
46215: LD_INT 3
46217: LESS
46218: IFFALSE 46254
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46220: LD_INT 0
46222: PPUSH
46223: LD_INT 5
46225: PUSH
46226: LD_INT 8
46228: PUSH
46229: LD_INT 9
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: PUSH
46237: LD_VAR 0 17
46241: ARRAY
46242: PPUSH
46243: LD_VAR 0 4
46247: PPUSH
46248: CALL_OW 380
46252: GO 46271
// PrepareHuman ( false , i , skill ) ;
46254: LD_INT 0
46256: PPUSH
46257: LD_VAR 0 8
46261: PPUSH
46262: LD_VAR 0 4
46266: PPUSH
46267: CALL_OW 380
// end else
46271: GO 46290
// PrepareHuman ( false , i , skill ) ;
46273: LD_INT 0
46275: PPUSH
46276: LD_VAR 0 8
46280: PPUSH
46281: LD_VAR 0 4
46285: PPUSH
46286: CALL_OW 380
// un := CreateHuman ;
46290: LD_ADDR_VAR 0 14
46294: PUSH
46295: CALL_OW 44
46299: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46300: LD_ADDR_VAR 0 7
46304: PUSH
46305: LD_VAR 0 7
46309: PPUSH
46310: LD_INT 1
46312: PPUSH
46313: LD_VAR 0 14
46317: PPUSH
46318: CALL_OW 2
46322: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46323: LD_VAR 0 14
46327: PPUSH
46328: LD_VAR 0 12
46332: PUSH
46333: LD_INT 1
46335: ARRAY
46336: PPUSH
46337: CALL_OW 52
// end ;
46341: GO 45980
46343: POP
46344: POP
// end ;
46345: GO 45282
46347: POP
46348: POP
// result := result ^ buildings ;
46349: LD_ADDR_VAR 0 7
46353: PUSH
46354: LD_VAR 0 7
46358: PUSH
46359: LD_VAR 0 18
46363: ADD
46364: ST_TO_ADDR
// end else
46365: GO 46508
// begin for i = 1 to personel do
46367: LD_ADDR_VAR 0 8
46371: PUSH
46372: DOUBLE
46373: LD_INT 1
46375: DEC
46376: ST_TO_ADDR
46377: LD_VAR 0 6
46381: PUSH
46382: FOR_TO
46383: IFFALSE 46506
// begin if i > 4 then
46385: LD_VAR 0 8
46389: PUSH
46390: LD_INT 4
46392: GREATER
46393: IFFALSE 46397
// break ;
46395: GO 46506
// x := personel [ i ] ;
46397: LD_ADDR_VAR 0 13
46401: PUSH
46402: LD_VAR 0 6
46406: PUSH
46407: LD_VAR 0 8
46411: ARRAY
46412: ST_TO_ADDR
// if x = - 1 then
46413: LD_VAR 0 13
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: EQUAL
46422: IFFALSE 46426
// continue ;
46424: GO 46382
// PrepareHuman ( false , i , skill ) ;
46426: LD_INT 0
46428: PPUSH
46429: LD_VAR 0 8
46433: PPUSH
46434: LD_VAR 0 4
46438: PPUSH
46439: CALL_OW 380
// un := CreateHuman ;
46443: LD_ADDR_VAR 0 14
46447: PUSH
46448: CALL_OW 44
46452: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46453: LD_VAR 0 14
46457: PPUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: CALL_OW 250
46467: PPUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 251
46477: PPUSH
46478: LD_INT 10
46480: PPUSH
46481: LD_INT 0
46483: PPUSH
46484: CALL_OW 50
// result := result ^ un ;
46488: LD_ADDR_VAR 0 7
46492: PUSH
46493: LD_VAR 0 7
46497: PUSH
46498: LD_VAR 0 14
46502: ADD
46503: ST_TO_ADDR
// end ;
46504: GO 46382
46506: POP
46507: POP
// end ; end ;
46508: LD_VAR 0 7
46512: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46513: LD_INT 0
46515: PPUSH
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
46520: PPUSH
46521: PPUSH
46522: PPUSH
46523: PPUSH
46524: PPUSH
46525: PPUSH
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
46530: PPUSH
// result := false ;
46531: LD_ADDR_VAR 0 3
46535: PUSH
46536: LD_INT 0
46538: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46539: LD_VAR 0 1
46543: NOT
46544: PUSH
46545: LD_VAR 0 1
46549: PPUSH
46550: CALL_OW 266
46554: PUSH
46555: LD_INT 32
46557: PUSH
46558: LD_INT 33
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: IN
46565: NOT
46566: OR
46567: IFFALSE 46571
// exit ;
46569: GO 47680
// nat := GetNation ( tower ) ;
46571: LD_ADDR_VAR 0 12
46575: PUSH
46576: LD_VAR 0 1
46580: PPUSH
46581: CALL_OW 248
46585: ST_TO_ADDR
// side := GetSide ( tower ) ;
46586: LD_ADDR_VAR 0 16
46590: PUSH
46591: LD_VAR 0 1
46595: PPUSH
46596: CALL_OW 255
46600: ST_TO_ADDR
// x := GetX ( tower ) ;
46601: LD_ADDR_VAR 0 10
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 250
46615: ST_TO_ADDR
// y := GetY ( tower ) ;
46616: LD_ADDR_VAR 0 11
46620: PUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: CALL_OW 251
46630: ST_TO_ADDR
// if not x or not y then
46631: LD_VAR 0 10
46635: NOT
46636: PUSH
46637: LD_VAR 0 11
46641: NOT
46642: OR
46643: IFFALSE 46647
// exit ;
46645: GO 47680
// weapon := 0 ;
46647: LD_ADDR_VAR 0 18
46651: PUSH
46652: LD_INT 0
46654: ST_TO_ADDR
// fac_list := [ ] ;
46655: LD_ADDR_VAR 0 17
46659: PUSH
46660: EMPTY
46661: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46662: LD_ADDR_VAR 0 6
46666: PUSH
46667: LD_VAR 0 1
46671: PPUSH
46672: CALL_OW 274
46676: PPUSH
46677: LD_VAR 0 2
46681: PPUSH
46682: LD_INT 0
46684: PPUSH
46685: CALL 44250 0 3
46689: PPUSH
46690: LD_INT 30
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PPUSH
46700: CALL_OW 72
46704: ST_TO_ADDR
// if not factories then
46705: LD_VAR 0 6
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 47680
// for i in factories do
46714: LD_ADDR_VAR 0 8
46718: PUSH
46719: LD_VAR 0 6
46723: PUSH
46724: FOR_IN
46725: IFFALSE 46750
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46727: LD_ADDR_VAR 0 17
46731: PUSH
46732: LD_VAR 0 17
46736: PUSH
46737: LD_VAR 0 8
46741: PPUSH
46742: CALL_OW 478
46746: UNION
46747: ST_TO_ADDR
46748: GO 46724
46750: POP
46751: POP
// if not fac_list then
46752: LD_VAR 0 17
46756: NOT
46757: IFFALSE 46761
// exit ;
46759: GO 47680
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46761: LD_ADDR_VAR 0 5
46765: PUSH
46766: LD_INT 4
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: LD_INT 9
46774: PUSH
46775: LD_INT 10
46777: PUSH
46778: LD_INT 6
46780: PUSH
46781: LD_INT 7
46783: PUSH
46784: LD_INT 11
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 27
46798: PUSH
46799: LD_INT 28
46801: PUSH
46802: LD_INT 26
46804: PUSH
46805: LD_INT 30
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 43
46816: PUSH
46817: LD_INT 44
46819: PUSH
46820: LD_INT 46
46822: PUSH
46823: LD_INT 45
46825: PUSH
46826: LD_INT 47
46828: PUSH
46829: LD_INT 49
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: PUSH
46845: LD_VAR 0 12
46849: ARRAY
46850: ST_TO_ADDR
// list := list isect fac_list ;
46851: LD_ADDR_VAR 0 5
46855: PUSH
46856: LD_VAR 0 5
46860: PUSH
46861: LD_VAR 0 17
46865: ISECT
46866: ST_TO_ADDR
// if not list then
46867: LD_VAR 0 5
46871: NOT
46872: IFFALSE 46876
// exit ;
46874: GO 47680
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46876: LD_VAR 0 12
46880: PUSH
46881: LD_INT 3
46883: EQUAL
46884: PUSH
46885: LD_INT 49
46887: PUSH
46888: LD_VAR 0 5
46892: IN
46893: AND
46894: PUSH
46895: LD_INT 31
46897: PPUSH
46898: LD_VAR 0 16
46902: PPUSH
46903: CALL_OW 321
46907: PUSH
46908: LD_INT 2
46910: EQUAL
46911: AND
46912: IFFALSE 46972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46914: LD_INT 22
46916: PUSH
46917: LD_VAR 0 16
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 35
46928: PUSH
46929: LD_INT 49
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 91
46938: PUSH
46939: LD_VAR 0 1
46943: PUSH
46944: LD_INT 10
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: PPUSH
46957: CALL_OW 69
46961: NOT
46962: IFFALSE 46972
// weapon := ru_time_lapser ;
46964: LD_ADDR_VAR 0 18
46968: PUSH
46969: LD_INT 49
46971: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46972: LD_VAR 0 12
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: IN
46987: PUSH
46988: LD_INT 11
46990: PUSH
46991: LD_VAR 0 5
46995: IN
46996: PUSH
46997: LD_INT 30
46999: PUSH
47000: LD_VAR 0 5
47004: IN
47005: OR
47006: AND
47007: PUSH
47008: LD_INT 6
47010: PPUSH
47011: LD_VAR 0 16
47015: PPUSH
47016: CALL_OW 321
47020: PUSH
47021: LD_INT 2
47023: EQUAL
47024: AND
47025: IFFALSE 47190
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47027: LD_INT 22
47029: PUSH
47030: LD_VAR 0 16
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 35
47044: PUSH
47045: LD_INT 11
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 35
47054: PUSH
47055: LD_INT 30
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 91
47069: PUSH
47070: LD_VAR 0 1
47074: PUSH
47075: LD_INT 18
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: PPUSH
47088: CALL_OW 69
47092: NOT
47093: PUSH
47094: LD_INT 22
47096: PUSH
47097: LD_VAR 0 16
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 30
47111: PUSH
47112: LD_INT 32
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 30
47121: PUSH
47122: LD_INT 33
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 91
47136: PUSH
47137: LD_VAR 0 1
47141: PUSH
47142: LD_INT 12
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: PPUSH
47158: CALL_OW 69
47162: PUSH
47163: LD_INT 2
47165: GREATER
47166: AND
47167: IFFALSE 47190
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47169: LD_ADDR_VAR 0 18
47173: PUSH
47174: LD_INT 11
47176: PUSH
47177: LD_INT 30
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_VAR 0 12
47188: ARRAY
47189: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47190: LD_VAR 0 18
47194: NOT
47195: PUSH
47196: LD_INT 40
47198: PPUSH
47199: LD_VAR 0 16
47203: PPUSH
47204: CALL_OW 321
47208: PUSH
47209: LD_INT 2
47211: EQUAL
47212: AND
47213: PUSH
47214: LD_INT 7
47216: PUSH
47217: LD_VAR 0 5
47221: IN
47222: PUSH
47223: LD_INT 28
47225: PUSH
47226: LD_VAR 0 5
47230: IN
47231: OR
47232: PUSH
47233: LD_INT 45
47235: PUSH
47236: LD_VAR 0 5
47240: IN
47241: OR
47242: AND
47243: IFFALSE 47497
// begin hex := GetHexInfo ( x , y ) ;
47245: LD_ADDR_VAR 0 4
47249: PUSH
47250: LD_VAR 0 10
47254: PPUSH
47255: LD_VAR 0 11
47259: PPUSH
47260: CALL_OW 546
47264: ST_TO_ADDR
// if hex [ 1 ] then
47265: LD_VAR 0 4
47269: PUSH
47270: LD_INT 1
47272: ARRAY
47273: IFFALSE 47277
// exit ;
47275: GO 47680
// height := hex [ 2 ] ;
47277: LD_ADDR_VAR 0 15
47281: PUSH
47282: LD_VAR 0 4
47286: PUSH
47287: LD_INT 2
47289: ARRAY
47290: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47291: LD_ADDR_VAR 0 14
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 5
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// for i in tmp do
47314: LD_ADDR_VAR 0 8
47318: PUSH
47319: LD_VAR 0 14
47323: PUSH
47324: FOR_IN
47325: IFFALSE 47495
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47327: LD_ADDR_VAR 0 9
47331: PUSH
47332: LD_VAR 0 10
47336: PPUSH
47337: LD_VAR 0 8
47341: PPUSH
47342: LD_INT 5
47344: PPUSH
47345: CALL_OW 272
47349: PUSH
47350: LD_VAR 0 11
47354: PPUSH
47355: LD_VAR 0 8
47359: PPUSH
47360: LD_INT 5
47362: PPUSH
47363: CALL_OW 273
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47372: LD_VAR 0 9
47376: PUSH
47377: LD_INT 1
47379: ARRAY
47380: PPUSH
47381: LD_VAR 0 9
47385: PUSH
47386: LD_INT 2
47388: ARRAY
47389: PPUSH
47390: CALL_OW 488
47394: IFFALSE 47493
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47396: LD_ADDR_VAR 0 4
47400: PUSH
47401: LD_VAR 0 9
47405: PUSH
47406: LD_INT 1
47408: ARRAY
47409: PPUSH
47410: LD_VAR 0 9
47414: PUSH
47415: LD_INT 2
47417: ARRAY
47418: PPUSH
47419: CALL_OW 546
47423: ST_TO_ADDR
// if hex [ 1 ] then
47424: LD_VAR 0 4
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: IFFALSE 47436
// continue ;
47434: GO 47324
// h := hex [ 2 ] ;
47436: LD_ADDR_VAR 0 13
47440: PUSH
47441: LD_VAR 0 4
47445: PUSH
47446: LD_INT 2
47448: ARRAY
47449: ST_TO_ADDR
// if h + 7 < height then
47450: LD_VAR 0 13
47454: PUSH
47455: LD_INT 7
47457: PLUS
47458: PUSH
47459: LD_VAR 0 15
47463: LESS
47464: IFFALSE 47493
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47466: LD_ADDR_VAR 0 18
47470: PUSH
47471: LD_INT 7
47473: PUSH
47474: LD_INT 28
47476: PUSH
47477: LD_INT 45
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: PUSH
47485: LD_VAR 0 12
47489: ARRAY
47490: ST_TO_ADDR
// break ;
47491: GO 47495
// end ; end ; end ;
47493: GO 47324
47495: POP
47496: POP
// end ; if not weapon then
47497: LD_VAR 0 18
47501: NOT
47502: IFFALSE 47562
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47504: LD_ADDR_VAR 0 5
47508: PUSH
47509: LD_VAR 0 5
47513: PUSH
47514: LD_INT 11
47516: PUSH
47517: LD_INT 30
47519: PUSH
47520: LD_INT 49
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: DIFF
47528: ST_TO_ADDR
// if not list then
47529: LD_VAR 0 5
47533: NOT
47534: IFFALSE 47538
// exit ;
47536: GO 47680
// weapon := list [ rand ( 1 , list ) ] ;
47538: LD_ADDR_VAR 0 18
47542: PUSH
47543: LD_VAR 0 5
47547: PUSH
47548: LD_INT 1
47550: PPUSH
47551: LD_VAR 0 5
47555: PPUSH
47556: CALL_OW 12
47560: ARRAY
47561: ST_TO_ADDR
// end ; if weapon then
47562: LD_VAR 0 18
47566: IFFALSE 47680
// begin tmp := CostOfWeapon ( weapon ) ;
47568: LD_ADDR_VAR 0 14
47572: PUSH
47573: LD_VAR 0 18
47577: PPUSH
47578: CALL_OW 451
47582: ST_TO_ADDR
// j := GetBase ( tower ) ;
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 274
47597: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47598: LD_VAR 0 9
47602: PPUSH
47603: LD_INT 1
47605: PPUSH
47606: CALL_OW 275
47610: PUSH
47611: LD_VAR 0 14
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: GREATEREQUAL
47620: PUSH
47621: LD_VAR 0 9
47625: PPUSH
47626: LD_INT 2
47628: PPUSH
47629: CALL_OW 275
47633: PUSH
47634: LD_VAR 0 14
47638: PUSH
47639: LD_INT 2
47641: ARRAY
47642: GREATEREQUAL
47643: AND
47644: PUSH
47645: LD_VAR 0 9
47649: PPUSH
47650: LD_INT 3
47652: PPUSH
47653: CALL_OW 275
47657: PUSH
47658: LD_VAR 0 14
47662: PUSH
47663: LD_INT 3
47665: ARRAY
47666: GREATEREQUAL
47667: AND
47668: IFFALSE 47680
// result := weapon ;
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: LD_VAR 0 18
47679: ST_TO_ADDR
// end ; end ;
47680: LD_VAR 0 3
47684: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47685: LD_INT 0
47687: PPUSH
47688: PPUSH
// result := true ;
47689: LD_ADDR_VAR 0 3
47693: PUSH
47694: LD_INT 1
47696: ST_TO_ADDR
// if array1 = array2 then
47697: LD_VAR 0 1
47701: PUSH
47702: LD_VAR 0 2
47706: EQUAL
47707: IFFALSE 47767
// begin for i = 1 to array1 do
47709: LD_ADDR_VAR 0 4
47713: PUSH
47714: DOUBLE
47715: LD_INT 1
47717: DEC
47718: ST_TO_ADDR
47719: LD_VAR 0 1
47723: PUSH
47724: FOR_TO
47725: IFFALSE 47763
// if array1 [ i ] <> array2 [ i ] then
47727: LD_VAR 0 1
47731: PUSH
47732: LD_VAR 0 4
47736: ARRAY
47737: PUSH
47738: LD_VAR 0 2
47742: PUSH
47743: LD_VAR 0 4
47747: ARRAY
47748: NONEQUAL
47749: IFFALSE 47761
// begin result := false ;
47751: LD_ADDR_VAR 0 3
47755: PUSH
47756: LD_INT 0
47758: ST_TO_ADDR
// break ;
47759: GO 47763
// end ;
47761: GO 47724
47763: POP
47764: POP
// end else
47765: GO 47775
// result := false ;
47767: LD_ADDR_VAR 0 3
47771: PUSH
47772: LD_INT 0
47774: ST_TO_ADDR
// end ;
47775: LD_VAR 0 3
47779: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47780: LD_INT 0
47782: PPUSH
47783: PPUSH
// if not array1 or not array2 then
47784: LD_VAR 0 1
47788: NOT
47789: PUSH
47790: LD_VAR 0 2
47794: NOT
47795: OR
47796: IFFALSE 47800
// exit ;
47798: GO 47864
// result := true ;
47800: LD_ADDR_VAR 0 3
47804: PUSH
47805: LD_INT 1
47807: ST_TO_ADDR
// for i = 1 to array1 do
47808: LD_ADDR_VAR 0 4
47812: PUSH
47813: DOUBLE
47814: LD_INT 1
47816: DEC
47817: ST_TO_ADDR
47818: LD_VAR 0 1
47822: PUSH
47823: FOR_TO
47824: IFFALSE 47862
// if array1 [ i ] <> array2 [ i ] then
47826: LD_VAR 0 1
47830: PUSH
47831: LD_VAR 0 4
47835: ARRAY
47836: PUSH
47837: LD_VAR 0 2
47841: PUSH
47842: LD_VAR 0 4
47846: ARRAY
47847: NONEQUAL
47848: IFFALSE 47860
// begin result := false ;
47850: LD_ADDR_VAR 0 3
47854: PUSH
47855: LD_INT 0
47857: ST_TO_ADDR
// break ;
47858: GO 47862
// end ;
47860: GO 47823
47862: POP
47863: POP
// end ;
47864: LD_VAR 0 3
47868: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47869: LD_INT 0
47871: PPUSH
47872: PPUSH
47873: PPUSH
// pom := GetBase ( fac ) ;
47874: LD_ADDR_VAR 0 5
47878: PUSH
47879: LD_VAR 0 1
47883: PPUSH
47884: CALL_OW 274
47888: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47889: LD_ADDR_VAR 0 4
47893: PUSH
47894: LD_VAR 0 2
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: PPUSH
47903: LD_VAR 0 2
47907: PUSH
47908: LD_INT 2
47910: ARRAY
47911: PPUSH
47912: LD_VAR 0 2
47916: PUSH
47917: LD_INT 3
47919: ARRAY
47920: PPUSH
47921: LD_VAR 0 2
47925: PUSH
47926: LD_INT 4
47928: ARRAY
47929: PPUSH
47930: CALL_OW 449
47934: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47935: LD_ADDR_VAR 0 3
47939: PUSH
47940: LD_VAR 0 5
47944: PPUSH
47945: LD_INT 1
47947: PPUSH
47948: CALL_OW 275
47952: PUSH
47953: LD_VAR 0 4
47957: PUSH
47958: LD_INT 1
47960: ARRAY
47961: GREATEREQUAL
47962: PUSH
47963: LD_VAR 0 5
47967: PPUSH
47968: LD_INT 2
47970: PPUSH
47971: CALL_OW 275
47975: PUSH
47976: LD_VAR 0 4
47980: PUSH
47981: LD_INT 2
47983: ARRAY
47984: GREATEREQUAL
47985: AND
47986: PUSH
47987: LD_VAR 0 5
47991: PPUSH
47992: LD_INT 3
47994: PPUSH
47995: CALL_OW 275
47999: PUSH
48000: LD_VAR 0 4
48004: PUSH
48005: LD_INT 3
48007: ARRAY
48008: GREATEREQUAL
48009: AND
48010: ST_TO_ADDR
// end ;
48011: LD_VAR 0 3
48015: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48016: LD_INT 0
48018: PPUSH
48019: PPUSH
48020: PPUSH
48021: PPUSH
// pom := GetBase ( building ) ;
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL_OW 274
48036: ST_TO_ADDR
// if not pom then
48037: LD_VAR 0 3
48041: NOT
48042: IFFALSE 48046
// exit ;
48044: GO 48216
// btype := GetBType ( building ) ;
48046: LD_ADDR_VAR 0 5
48050: PUSH
48051: LD_VAR 0 1
48055: PPUSH
48056: CALL_OW 266
48060: ST_TO_ADDR
// if btype = b_armoury then
48061: LD_VAR 0 5
48065: PUSH
48066: LD_INT 4
48068: EQUAL
48069: IFFALSE 48079
// btype := b_barracks ;
48071: LD_ADDR_VAR 0 5
48075: PUSH
48076: LD_INT 5
48078: ST_TO_ADDR
// if btype = b_depot then
48079: LD_VAR 0 5
48083: PUSH
48084: LD_INT 0
48086: EQUAL
48087: IFFALSE 48097
// btype := b_warehouse ;
48089: LD_ADDR_VAR 0 5
48093: PUSH
48094: LD_INT 1
48096: ST_TO_ADDR
// if btype = b_workshop then
48097: LD_VAR 0 5
48101: PUSH
48102: LD_INT 2
48104: EQUAL
48105: IFFALSE 48115
// btype := b_factory ;
48107: LD_ADDR_VAR 0 5
48111: PUSH
48112: LD_INT 3
48114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48115: LD_ADDR_VAR 0 4
48119: PUSH
48120: LD_VAR 0 5
48124: PPUSH
48125: LD_VAR 0 1
48129: PPUSH
48130: CALL_OW 248
48134: PPUSH
48135: CALL_OW 450
48139: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48140: LD_ADDR_VAR 0 2
48144: PUSH
48145: LD_VAR 0 3
48149: PPUSH
48150: LD_INT 1
48152: PPUSH
48153: CALL_OW 275
48157: PUSH
48158: LD_VAR 0 4
48162: PUSH
48163: LD_INT 1
48165: ARRAY
48166: GREATEREQUAL
48167: PUSH
48168: LD_VAR 0 3
48172: PPUSH
48173: LD_INT 2
48175: PPUSH
48176: CALL_OW 275
48180: PUSH
48181: LD_VAR 0 4
48185: PUSH
48186: LD_INT 2
48188: ARRAY
48189: GREATEREQUAL
48190: AND
48191: PUSH
48192: LD_VAR 0 3
48196: PPUSH
48197: LD_INT 3
48199: PPUSH
48200: CALL_OW 275
48204: PUSH
48205: LD_VAR 0 4
48209: PUSH
48210: LD_INT 3
48212: ARRAY
48213: GREATEREQUAL
48214: AND
48215: ST_TO_ADDR
// end ;
48216: LD_VAR 0 2
48220: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48221: LD_INT 0
48223: PPUSH
48224: PPUSH
48225: PPUSH
// pom := GetBase ( building ) ;
48226: LD_ADDR_VAR 0 4
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: CALL_OW 274
48240: ST_TO_ADDR
// if not pom then
48241: LD_VAR 0 4
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48351
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48250: LD_ADDR_VAR 0 5
48254: PUSH
48255: LD_VAR 0 2
48259: PPUSH
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 248
48269: PPUSH
48270: CALL_OW 450
48274: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48275: LD_ADDR_VAR 0 3
48279: PUSH
48280: LD_VAR 0 4
48284: PPUSH
48285: LD_INT 1
48287: PPUSH
48288: CALL_OW 275
48292: PUSH
48293: LD_VAR 0 5
48297: PUSH
48298: LD_INT 1
48300: ARRAY
48301: GREATEREQUAL
48302: PUSH
48303: LD_VAR 0 4
48307: PPUSH
48308: LD_INT 2
48310: PPUSH
48311: CALL_OW 275
48315: PUSH
48316: LD_VAR 0 5
48320: PUSH
48321: LD_INT 2
48323: ARRAY
48324: GREATEREQUAL
48325: AND
48326: PUSH
48327: LD_VAR 0 4
48331: PPUSH
48332: LD_INT 3
48334: PPUSH
48335: CALL_OW 275
48339: PUSH
48340: LD_VAR 0 5
48344: PUSH
48345: LD_INT 3
48347: ARRAY
48348: GREATEREQUAL
48349: AND
48350: ST_TO_ADDR
// end ;
48351: LD_VAR 0 3
48355: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48356: LD_INT 0
48358: PPUSH
48359: PPUSH
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
// result := false ;
48369: LD_ADDR_VAR 0 8
48373: PUSH
48374: LD_INT 0
48376: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48377: LD_VAR 0 5
48381: NOT
48382: PUSH
48383: LD_VAR 0 1
48387: NOT
48388: OR
48389: PUSH
48390: LD_VAR 0 2
48394: NOT
48395: OR
48396: PUSH
48397: LD_VAR 0 3
48401: NOT
48402: OR
48403: IFFALSE 48407
// exit ;
48405: GO 49221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48407: LD_ADDR_VAR 0 14
48411: PUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: LD_VAR 0 2
48421: PPUSH
48422: LD_VAR 0 3
48426: PPUSH
48427: LD_VAR 0 4
48431: PPUSH
48432: LD_VAR 0 5
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: PPUSH
48441: CALL_OW 248
48445: PPUSH
48446: LD_INT 0
48448: PPUSH
48449: CALL 50058 0 6
48453: ST_TO_ADDR
// if not hexes then
48454: LD_VAR 0 14
48458: NOT
48459: IFFALSE 48463
// exit ;
48461: GO 49221
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48463: LD_ADDR_VAR 0 17
48467: PUSH
48468: LD_VAR 0 5
48472: PPUSH
48473: LD_INT 22
48475: PUSH
48476: LD_VAR 0 13
48480: PPUSH
48481: CALL_OW 255
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 30
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 30
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PPUSH
48522: CALL_OW 72
48526: ST_TO_ADDR
// for i = 1 to hexes do
48527: LD_ADDR_VAR 0 9
48531: PUSH
48532: DOUBLE
48533: LD_INT 1
48535: DEC
48536: ST_TO_ADDR
48537: LD_VAR 0 14
48541: PUSH
48542: FOR_TO
48543: IFFALSE 49219
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48545: LD_ADDR_VAR 0 13
48549: PUSH
48550: LD_VAR 0 14
48554: PUSH
48555: LD_VAR 0 9
48559: ARRAY
48560: PUSH
48561: LD_INT 1
48563: ARRAY
48564: PPUSH
48565: LD_VAR 0 14
48569: PUSH
48570: LD_VAR 0 9
48574: ARRAY
48575: PUSH
48576: LD_INT 2
48578: ARRAY
48579: PPUSH
48580: CALL_OW 428
48584: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48585: LD_VAR 0 14
48589: PUSH
48590: LD_VAR 0 9
48594: ARRAY
48595: PUSH
48596: LD_INT 1
48598: ARRAY
48599: PPUSH
48600: LD_VAR 0 14
48604: PUSH
48605: LD_VAR 0 9
48609: ARRAY
48610: PUSH
48611: LD_INT 2
48613: ARRAY
48614: PPUSH
48615: CALL_OW 351
48619: PUSH
48620: LD_VAR 0 14
48624: PUSH
48625: LD_VAR 0 9
48629: ARRAY
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: LD_VAR 0 14
48639: PUSH
48640: LD_VAR 0 9
48644: ARRAY
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: PPUSH
48650: CALL_OW 488
48654: NOT
48655: OR
48656: PUSH
48657: LD_VAR 0 13
48661: PPUSH
48662: CALL_OW 247
48666: PUSH
48667: LD_INT 3
48669: EQUAL
48670: OR
48671: IFFALSE 48677
// exit ;
48673: POP
48674: POP
48675: GO 49221
// if not tmp then
48677: LD_VAR 0 13
48681: NOT
48682: IFFALSE 48686
// continue ;
48684: GO 48542
// result := true ;
48686: LD_ADDR_VAR 0 8
48690: PUSH
48691: LD_INT 1
48693: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48694: LD_VAR 0 6
48698: PUSH
48699: LD_VAR 0 13
48703: PPUSH
48704: CALL_OW 247
48708: PUSH
48709: LD_INT 2
48711: EQUAL
48712: AND
48713: PUSH
48714: LD_VAR 0 13
48718: PPUSH
48719: CALL_OW 263
48723: PUSH
48724: LD_INT 1
48726: EQUAL
48727: AND
48728: IFFALSE 48892
// begin if IsDrivenBy ( tmp ) then
48730: LD_VAR 0 13
48734: PPUSH
48735: CALL_OW 311
48739: IFFALSE 48743
// continue ;
48741: GO 48542
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48743: LD_VAR 0 6
48747: PPUSH
48748: LD_INT 3
48750: PUSH
48751: LD_INT 60
48753: PUSH
48754: EMPTY
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 55
48766: PUSH
48767: EMPTY
48768: LIST
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PPUSH
48778: CALL_OW 72
48782: IFFALSE 48890
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48784: LD_ADDR_VAR 0 18
48788: PUSH
48789: LD_VAR 0 6
48793: PPUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 60
48799: PUSH
48800: EMPTY
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 55
48812: PUSH
48813: EMPTY
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PPUSH
48824: CALL_OW 72
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: ST_TO_ADDR
// if IsInUnit ( driver ) then
48833: LD_VAR 0 18
48837: PPUSH
48838: CALL_OW 310
48842: IFFALSE 48853
// ComExit ( driver ) ;
48844: LD_VAR 0 18
48848: PPUSH
48849: CALL 73242 0 1
// AddComEnterUnit ( driver , tmp ) ;
48853: LD_VAR 0 18
48857: PPUSH
48858: LD_VAR 0 13
48862: PPUSH
48863: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48867: LD_VAR 0 18
48871: PPUSH
48872: LD_VAR 0 7
48876: PPUSH
48877: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48881: LD_VAR 0 18
48885: PPUSH
48886: CALL_OW 181
// end ; continue ;
48890: GO 48542
// end ; if not cleaners or not tmp in cleaners then
48892: LD_VAR 0 6
48896: NOT
48897: PUSH
48898: LD_VAR 0 13
48902: PUSH
48903: LD_VAR 0 6
48907: IN
48908: NOT
48909: OR
48910: IFFALSE 49217
// begin if dep then
48912: LD_VAR 0 17
48916: IFFALSE 49052
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48918: LD_ADDR_VAR 0 16
48922: PUSH
48923: LD_VAR 0 17
48927: PUSH
48928: LD_INT 1
48930: ARRAY
48931: PPUSH
48932: CALL_OW 250
48936: PPUSH
48937: LD_VAR 0 17
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: CALL_OW 254
48950: PPUSH
48951: LD_INT 5
48953: PPUSH
48954: CALL_OW 272
48958: PUSH
48959: LD_VAR 0 17
48963: PUSH
48964: LD_INT 1
48966: ARRAY
48967: PPUSH
48968: CALL_OW 251
48972: PPUSH
48973: LD_VAR 0 17
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: PPUSH
48982: CALL_OW 254
48986: PPUSH
48987: LD_INT 5
48989: PPUSH
48990: CALL_OW 273
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48999: LD_VAR 0 16
49003: PUSH
49004: LD_INT 1
49006: ARRAY
49007: PPUSH
49008: LD_VAR 0 16
49012: PUSH
49013: LD_INT 2
49015: ARRAY
49016: PPUSH
49017: CALL_OW 488
49021: IFFALSE 49052
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49023: LD_VAR 0 13
49027: PPUSH
49028: LD_VAR 0 16
49032: PUSH
49033: LD_INT 1
49035: ARRAY
49036: PPUSH
49037: LD_VAR 0 16
49041: PUSH
49042: LD_INT 2
49044: ARRAY
49045: PPUSH
49046: CALL_OW 111
// continue ;
49050: GO 48542
// end ; end ; r := GetDir ( tmp ) ;
49052: LD_ADDR_VAR 0 15
49056: PUSH
49057: LD_VAR 0 13
49061: PPUSH
49062: CALL_OW 254
49066: ST_TO_ADDR
// if r = 5 then
49067: LD_VAR 0 15
49071: PUSH
49072: LD_INT 5
49074: EQUAL
49075: IFFALSE 49085
// r := 0 ;
49077: LD_ADDR_VAR 0 15
49081: PUSH
49082: LD_INT 0
49084: ST_TO_ADDR
// for j = r to 5 do
49085: LD_ADDR_VAR 0 10
49089: PUSH
49090: DOUBLE
49091: LD_VAR 0 15
49095: DEC
49096: ST_TO_ADDR
49097: LD_INT 5
49099: PUSH
49100: FOR_TO
49101: IFFALSE 49215
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49103: LD_ADDR_VAR 0 11
49107: PUSH
49108: LD_VAR 0 13
49112: PPUSH
49113: CALL_OW 250
49117: PPUSH
49118: LD_VAR 0 10
49122: PPUSH
49123: LD_INT 2
49125: PPUSH
49126: CALL_OW 272
49130: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49131: LD_ADDR_VAR 0 12
49135: PUSH
49136: LD_VAR 0 13
49140: PPUSH
49141: CALL_OW 251
49145: PPUSH
49146: LD_VAR 0 10
49150: PPUSH
49151: LD_INT 2
49153: PPUSH
49154: CALL_OW 273
49158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49159: LD_VAR 0 11
49163: PPUSH
49164: LD_VAR 0 12
49168: PPUSH
49169: CALL_OW 488
49173: PUSH
49174: LD_VAR 0 11
49178: PPUSH
49179: LD_VAR 0 12
49183: PPUSH
49184: CALL_OW 428
49188: NOT
49189: AND
49190: IFFALSE 49213
// begin ComMoveXY ( tmp , _x , _y ) ;
49192: LD_VAR 0 13
49196: PPUSH
49197: LD_VAR 0 11
49201: PPUSH
49202: LD_VAR 0 12
49206: PPUSH
49207: CALL_OW 111
// break ;
49211: GO 49215
// end ; end ;
49213: GO 49100
49215: POP
49216: POP
// end ; end ;
49217: GO 48542
49219: POP
49220: POP
// end ;
49221: LD_VAR 0 8
49225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49226: LD_INT 0
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
// result := false ;
49238: LD_ADDR_VAR 0 6
49242: PUSH
49243: LD_INT 0
49245: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49246: LD_VAR 0 1
49250: NOT
49251: PUSH
49252: LD_VAR 0 1
49256: PPUSH
49257: CALL_OW 266
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: IN
49272: NOT
49273: OR
49274: PUSH
49275: LD_VAR 0 2
49279: NOT
49280: OR
49281: PUSH
49282: LD_VAR 0 5
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: LD_INT 4
49301: PUSH
49302: LD_INT 5
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: IN
49313: NOT
49314: OR
49315: PUSH
49316: LD_VAR 0 3
49320: PPUSH
49321: LD_VAR 0 4
49325: PPUSH
49326: CALL_OW 488
49330: NOT
49331: OR
49332: IFFALSE 49336
// exit ;
49334: GO 50053
// pom := GetBase ( depot ) ;
49336: LD_ADDR_VAR 0 10
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 274
49350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49351: LD_ADDR_VAR 0 11
49355: PUSH
49356: LD_VAR 0 2
49360: PPUSH
49361: LD_VAR 0 1
49365: PPUSH
49366: CALL_OW 248
49370: PPUSH
49371: CALL_OW 450
49375: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49376: LD_VAR 0 10
49380: PPUSH
49381: LD_INT 1
49383: PPUSH
49384: CALL_OW 275
49388: PUSH
49389: LD_VAR 0 11
49393: PUSH
49394: LD_INT 1
49396: ARRAY
49397: GREATEREQUAL
49398: PUSH
49399: LD_VAR 0 10
49403: PPUSH
49404: LD_INT 2
49406: PPUSH
49407: CALL_OW 275
49411: PUSH
49412: LD_VAR 0 11
49416: PUSH
49417: LD_INT 2
49419: ARRAY
49420: GREATEREQUAL
49421: AND
49422: PUSH
49423: LD_VAR 0 10
49427: PPUSH
49428: LD_INT 3
49430: PPUSH
49431: CALL_OW 275
49435: PUSH
49436: LD_VAR 0 11
49440: PUSH
49441: LD_INT 3
49443: ARRAY
49444: GREATEREQUAL
49445: AND
49446: NOT
49447: IFFALSE 49451
// exit ;
49449: GO 50053
// if GetBType ( depot ) = b_depot then
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 266
49460: PUSH
49461: LD_INT 0
49463: EQUAL
49464: IFFALSE 49476
// dist := 28 else
49466: LD_ADDR_VAR 0 14
49470: PUSH
49471: LD_INT 28
49473: ST_TO_ADDR
49474: GO 49484
// dist := 36 ;
49476: LD_ADDR_VAR 0 14
49480: PUSH
49481: LD_INT 36
49483: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49484: LD_VAR 0 1
49488: PPUSH
49489: LD_VAR 0 3
49493: PPUSH
49494: LD_VAR 0 4
49498: PPUSH
49499: CALL_OW 297
49503: PUSH
49504: LD_VAR 0 14
49508: GREATER
49509: IFFALSE 49513
// exit ;
49511: GO 50053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49513: LD_ADDR_VAR 0 12
49517: PUSH
49518: LD_VAR 0 2
49522: PPUSH
49523: LD_VAR 0 3
49527: PPUSH
49528: LD_VAR 0 4
49532: PPUSH
49533: LD_VAR 0 5
49537: PPUSH
49538: LD_VAR 0 1
49542: PPUSH
49543: CALL_OW 248
49547: PPUSH
49548: LD_INT 0
49550: PPUSH
49551: CALL 50058 0 6
49555: ST_TO_ADDR
// if not hexes then
49556: LD_VAR 0 12
49560: NOT
49561: IFFALSE 49565
// exit ;
49563: GO 50053
// hex := GetHexInfo ( x , y ) ;
49565: LD_ADDR_VAR 0 15
49569: PUSH
49570: LD_VAR 0 3
49574: PPUSH
49575: LD_VAR 0 4
49579: PPUSH
49580: CALL_OW 546
49584: ST_TO_ADDR
// if hex [ 1 ] then
49585: LD_VAR 0 15
49589: PUSH
49590: LD_INT 1
49592: ARRAY
49593: IFFALSE 49597
// exit ;
49595: GO 50053
// height := hex [ 2 ] ;
49597: LD_ADDR_VAR 0 13
49601: PUSH
49602: LD_VAR 0 15
49606: PUSH
49607: LD_INT 2
49609: ARRAY
49610: ST_TO_ADDR
// for i = 1 to hexes do
49611: LD_ADDR_VAR 0 7
49615: PUSH
49616: DOUBLE
49617: LD_INT 1
49619: DEC
49620: ST_TO_ADDR
49621: LD_VAR 0 12
49625: PUSH
49626: FOR_TO
49627: IFFALSE 49957
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49629: LD_VAR 0 12
49633: PUSH
49634: LD_VAR 0 7
49638: ARRAY
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: LD_VAR 0 12
49648: PUSH
49649: LD_VAR 0 7
49653: ARRAY
49654: PUSH
49655: LD_INT 2
49657: ARRAY
49658: PPUSH
49659: CALL_OW 488
49663: NOT
49664: PUSH
49665: LD_VAR 0 12
49669: PUSH
49670: LD_VAR 0 7
49674: ARRAY
49675: PUSH
49676: LD_INT 1
49678: ARRAY
49679: PPUSH
49680: LD_VAR 0 12
49684: PUSH
49685: LD_VAR 0 7
49689: ARRAY
49690: PUSH
49691: LD_INT 2
49693: ARRAY
49694: PPUSH
49695: CALL_OW 428
49699: PUSH
49700: LD_INT 0
49702: GREATER
49703: OR
49704: PUSH
49705: LD_VAR 0 12
49709: PUSH
49710: LD_VAR 0 7
49714: ARRAY
49715: PUSH
49716: LD_INT 1
49718: ARRAY
49719: PPUSH
49720: LD_VAR 0 12
49724: PUSH
49725: LD_VAR 0 7
49729: ARRAY
49730: PUSH
49731: LD_INT 2
49733: ARRAY
49734: PPUSH
49735: CALL_OW 351
49739: OR
49740: IFFALSE 49746
// exit ;
49742: POP
49743: POP
49744: GO 50053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49746: LD_ADDR_VAR 0 8
49750: PUSH
49751: LD_VAR 0 12
49755: PUSH
49756: LD_VAR 0 7
49760: ARRAY
49761: PUSH
49762: LD_INT 1
49764: ARRAY
49765: PPUSH
49766: LD_VAR 0 12
49770: PUSH
49771: LD_VAR 0 7
49775: ARRAY
49776: PUSH
49777: LD_INT 2
49779: ARRAY
49780: PPUSH
49781: CALL_OW 546
49785: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49786: LD_VAR 0 8
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PUSH
49795: LD_VAR 0 8
49799: PUSH
49800: LD_INT 2
49802: ARRAY
49803: PUSH
49804: LD_VAR 0 13
49808: PUSH
49809: LD_INT 2
49811: PLUS
49812: GREATER
49813: OR
49814: PUSH
49815: LD_VAR 0 8
49819: PUSH
49820: LD_INT 2
49822: ARRAY
49823: PUSH
49824: LD_VAR 0 13
49828: PUSH
49829: LD_INT 2
49831: MINUS
49832: LESS
49833: OR
49834: PUSH
49835: LD_VAR 0 8
49839: PUSH
49840: LD_INT 3
49842: ARRAY
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 8
49849: PUSH
49850: LD_INT 9
49852: PUSH
49853: LD_INT 10
49855: PUSH
49856: LD_INT 11
49858: PUSH
49859: LD_INT 12
49861: PUSH
49862: LD_INT 13
49864: PUSH
49865: LD_INT 16
49867: PUSH
49868: LD_INT 17
49870: PUSH
49871: LD_INT 18
49873: PUSH
49874: LD_INT 19
49876: PUSH
49877: LD_INT 20
49879: PUSH
49880: LD_INT 21
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: IN
49898: NOT
49899: OR
49900: PUSH
49901: LD_VAR 0 8
49905: PUSH
49906: LD_INT 5
49908: ARRAY
49909: NOT
49910: OR
49911: PUSH
49912: LD_VAR 0 8
49916: PUSH
49917: LD_INT 6
49919: ARRAY
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 7
49929: PUSH
49930: LD_INT 9
49932: PUSH
49933: LD_INT 10
49935: PUSH
49936: LD_INT 11
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: IN
49947: NOT
49948: OR
49949: IFFALSE 49955
// exit ;
49951: POP
49952: POP
49953: GO 50053
// end ;
49955: GO 49626
49957: POP
49958: POP
// side := GetSide ( depot ) ;
49959: LD_ADDR_VAR 0 9
49963: PUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 255
49973: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49974: LD_VAR 0 9
49978: PPUSH
49979: LD_VAR 0 3
49983: PPUSH
49984: LD_VAR 0 4
49988: PPUSH
49989: LD_INT 20
49991: PPUSH
49992: CALL 42404 0 4
49996: PUSH
49997: LD_INT 4
49999: ARRAY
50000: IFFALSE 50004
// exit ;
50002: GO 50053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50004: LD_VAR 0 2
50008: PUSH
50009: LD_INT 29
50011: PUSH
50012: LD_INT 30
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: IN
50019: PUSH
50020: LD_VAR 0 3
50024: PPUSH
50025: LD_VAR 0 4
50029: PPUSH
50030: LD_VAR 0 9
50034: PPUSH
50035: CALL_OW 440
50039: NOT
50040: AND
50041: IFFALSE 50045
// exit ;
50043: GO 50053
// result := true ;
50045: LD_ADDR_VAR 0 6
50049: PUSH
50050: LD_INT 1
50052: ST_TO_ADDR
// end ;
50053: LD_VAR 0 6
50057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50058: LD_INT 0
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
// result = [ ] ;
50118: LD_ADDR_VAR 0 7
50122: PUSH
50123: EMPTY
50124: ST_TO_ADDR
// temp_list = [ ] ;
50125: LD_ADDR_VAR 0 9
50129: PUSH
50130: EMPTY
50131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50132: LD_VAR 0 4
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 4
50151: PUSH
50152: LD_INT 5
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: IN
50163: NOT
50164: PUSH
50165: LD_VAR 0 1
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: IN
50180: PUSH
50181: LD_VAR 0 5
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: IN
50200: NOT
50201: AND
50202: OR
50203: IFFALSE 50207
// exit ;
50205: GO 68598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50207: LD_VAR 0 1
50211: PUSH
50212: LD_INT 6
50214: PUSH
50215: LD_INT 7
50217: PUSH
50218: LD_INT 8
50220: PUSH
50221: LD_INT 13
50223: PUSH
50224: LD_INT 12
50226: PUSH
50227: LD_INT 15
50229: PUSH
50230: LD_INT 11
50232: PUSH
50233: LD_INT 14
50235: PUSH
50236: LD_INT 10
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: IN
50250: IFFALSE 50260
// btype = b_lab ;
50252: LD_ADDR_VAR 0 1
50256: PUSH
50257: LD_INT 6
50259: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50260: LD_VAR 0 6
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: IN
50279: NOT
50280: PUSH
50281: LD_VAR 0 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 6
50300: PUSH
50301: LD_INT 36
50303: PUSH
50304: LD_INT 4
50306: PUSH
50307: LD_INT 5
50309: PUSH
50310: LD_INT 31
50312: PUSH
50313: LD_INT 32
50315: PUSH
50316: LD_INT 33
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: IN
50332: NOT
50333: PUSH
50334: LD_VAR 0 6
50338: PUSH
50339: LD_INT 1
50341: EQUAL
50342: AND
50343: OR
50344: PUSH
50345: LD_VAR 0 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: IN
50360: NOT
50361: PUSH
50362: LD_VAR 0 6
50366: PUSH
50367: LD_INT 2
50369: EQUAL
50370: AND
50371: OR
50372: IFFALSE 50382
// mode = 0 ;
50374: LD_ADDR_VAR 0 6
50378: PUSH
50379: LD_INT 0
50381: ST_TO_ADDR
// case mode of 0 :
50382: LD_VAR 0 6
50386: PUSH
50387: LD_INT 0
50389: DOUBLE
50390: EQUAL
50391: IFTRUE 50395
50393: GO 61848
50395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50396: LD_ADDR_VAR 0 11
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50589: LD_ADDR_VAR 0 12
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50785: LD_ADDR_VAR 0 13
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50984: LD_ADDR_VAR 0 14
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51180: LD_ADDR_VAR 0 15
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51373: LD_ADDR_VAR 0 16
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51566: LD_ADDR_VAR 0 17
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51796: LD_ADDR_VAR 0 18
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52026: LD_ADDR_VAR 0 19
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52256: LD_ADDR_VAR 0 20
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52486: LD_ADDR_VAR 0 21
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52716: LD_ADDR_VAR 0 22
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 23
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53226: LD_ADDR_VAR 0 24
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53502: LD_ADDR_VAR 0 25
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53776: LD_ADDR_VAR 0 26
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54052: LD_ADDR_VAR 0 27
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: NEG
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54332: LD_ADDR_VAR 0 28
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 29
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54893: LD_ADDR_VAR 0 30
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55171: LD_ADDR_VAR 0 31
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55449: LD_ADDR_VAR 0 32
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 3
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55727: LD_ADDR_VAR 0 33
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 3
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 3
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56006: LD_ADDR_VAR 0 34
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56286: LD_ADDR_VAR 0 35
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56398: LD_ADDR_VAR 0 36
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56510: LD_ADDR_VAR 0 37
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56622: LD_ADDR_VAR 0 38
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56734: LD_ADDR_VAR 0 39
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56846: LD_ADDR_VAR 0 40
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56958: LD_ADDR_VAR 0 41
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57308: LD_ADDR_VAR 0 42
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57658: LD_ADDR_VAR 0 43
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58006: LD_ADDR_VAR 0 44
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58356: LD_ADDR_VAR 0 45
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58706: LD_ADDR_VAR 0 46
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59054: LD_ADDR_VAR 0 47
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59205: LD_ADDR_VAR 0 48
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59352: LD_ADDR_VAR 0 49
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59496: LD_ADDR_VAR 0 50
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59640: LD_ADDR_VAR 0 51
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59787: LD_ADDR_VAR 0 52
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59938: LD_ADDR_VAR 0 53
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60168: LD_ADDR_VAR 0 54
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60398: LD_ADDR_VAR 0 55
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60628: LD_ADDR_VAR 0 56
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60858: LD_ADDR_VAR 0 57
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61088: LD_ADDR_VAR 0 58
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61318: LD_ADDR_VAR 0 59
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61406: LD_ADDR_VAR 0 60
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61494: LD_ADDR_VAR 0 61
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61582: LD_ADDR_VAR 0 62
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61670: LD_ADDR_VAR 0 63
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61758: LD_ADDR_VAR 0 64
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: ST_TO_ADDR
// end ; 1 :
61846: GO 67743
61848: LD_INT 1
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61856
61854: GO 64479
61856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61857: LD_ADDR_VAR 0 11
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61901: LD_ADDR_VAR 0 12
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61942: LD_ADDR_VAR 0 13
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61982: LD_ADDR_VAR 0 14
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62023: LD_ADDR_VAR 0 15
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62067: LD_ADDR_VAR 0 16
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62113: LD_ADDR_VAR 0 17
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62157: LD_ADDR_VAR 0 18
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62198: LD_ADDR_VAR 0 19
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62238: LD_ADDR_VAR 0 20
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 3
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62279: LD_ADDR_VAR 0 21
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62323: LD_ADDR_VAR 0 22
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: LD_INT 3
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 3
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62369: LD_ADDR_VAR 0 23
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 3
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62413: LD_ADDR_VAR 0 24
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62454: LD_ADDR_VAR 0 25
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62494: LD_ADDR_VAR 0 26
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 3
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62535: LD_ADDR_VAR 0 27
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 4
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62579: LD_ADDR_VAR 0 28
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62625: LD_ADDR_VAR 0 29
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 3
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 4
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 5
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 5
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 4
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 6
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 6
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 5
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62780: LD_ADDR_VAR 0 30
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 4
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 4
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 5
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 5
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 5
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 6
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 6
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62923: LD_ADDR_VAR 0 31
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 3
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 4
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 4
62970: PUSH
62971: LD_INT 4
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: LD_INT 4
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 5
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 5
63000: PUSH
63001: LD_INT 5
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 4
63010: PUSH
63011: LD_INT 5
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 6
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 6
63030: PUSH
63031: LD_INT 6
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 5
63040: PUSH
63041: LD_INT 6
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63062: LD_ADDR_VAR 0 32
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 5
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 6
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 6
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: LD_INT 5
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63205: LD_ADDR_VAR 0 33
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: NEG
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 4
63268: NEG
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 4
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 5
63291: NEG
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 5
63302: NEG
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 5
63314: NEG
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 6
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 6
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63360: LD_ADDR_VAR 0 34
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: LD_INT 3
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: LD_INT 4
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 4
63427: NEG
63428: PUSH
63429: LD_INT 4
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 4
63439: NEG
63440: PUSH
63441: LD_INT 5
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 5
63451: NEG
63452: PUSH
63453: LD_INT 4
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 5
63463: NEG
63464: PUSH
63465: LD_INT 5
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 5
63475: NEG
63476: PUSH
63477: LD_INT 6
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 6
63487: NEG
63488: PUSH
63489: LD_INT 5
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 6
63499: NEG
63500: PUSH
63501: LD_INT 6
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63523: LD_ADDR_VAR 0 41
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 2
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63567: LD_ADDR_VAR 0 42
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 3
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63608: LD_ADDR_VAR 0 43
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: LIST
63647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63648: LD_ADDR_VAR 0 44
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 3
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63689: LD_ADDR_VAR 0 45
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63733: LD_ADDR_VAR 0 46
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: LD_INT 3
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63779: LD_ADDR_VAR 0 47
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: LD_INT 3
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63812: LD_ADDR_VAR 0 48
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63843: LD_ADDR_VAR 0 49
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63872: LD_ADDR_VAR 0 50
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63901: LD_ADDR_VAR 0 51
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63932: LD_ADDR_VAR 0 52
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63965: LD_ADDR_VAR 0 53
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 3
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64009: LD_ADDR_VAR 0 54
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64050: LD_ADDR_VAR 0 55
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64090: LD_ADDR_VAR 0 56
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64131: LD_ADDR_VAR 0 57
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64175: LD_ADDR_VAR 0 58
64179: PUSH
64180: LD_INT 2
64182: NEG
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64221: LD_ADDR_VAR 0 59
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64265: LD_ADDR_VAR 0 60
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64306: LD_ADDR_VAR 0 61
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64346: LD_ADDR_VAR 0 62
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: LIST
64386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64387: LD_ADDR_VAR 0 63
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64431: LD_ADDR_VAR 0 64
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// end ; 2 :
64477: GO 67743
64479: LD_INT 2
64481: DOUBLE
64482: EQUAL
64483: IFTRUE 64487
64485: GO 67742
64487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64488: LD_ADDR_VAR 0 29
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 4
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 5
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 5
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 5
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 4
64608: PUSH
64609: LD_INT 3
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 4
64618: PUSH
64619: LD_INT 4
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: LD_INT 4
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: PUSH
64639: LD_INT 3
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 4
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: LD_INT 4
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 5
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 5
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 4
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: LD_INT 5
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 4
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 4
64850: NEG
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: LD_INT 4
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 4
64885: NEG
64886: PUSH
64887: LD_INT 5
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 4
64921: NEG
64922: PUSH
64923: LD_INT 3
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 5
64933: NEG
64934: PUSH
64935: LD_INT 4
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 5
64945: NEG
64946: PUSH
64947: LD_INT 5
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: NEG
64958: PUSH
64959: LD_INT 5
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 5
64969: NEG
64970: PUSH
64971: LD_INT 3
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65026: LD_ADDR_VAR 0 30
65030: PUSH
65031: LD_INT 4
65033: PUSH
65034: LD_INT 4
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 4
65043: PUSH
65044: LD_INT 3
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 5
65053: PUSH
65054: LD_INT 4
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 5
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 4
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: LD_INT 4
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 5
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: LD_INT 5
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 3
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 4
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 4
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 4
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 5
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 5
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: LD_INT 4
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 3
65366: NEG
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: LD_INT 3
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 4
65390: NEG
65391: PUSH
65392: LD_INT 4
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: LD_INT 4
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 5
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 4
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 4
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 5
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: LD_INT 5
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65573: LD_ADDR_VAR 0 31
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 4
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 4
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: LD_INT 5
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: NEG
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: NEG
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: NEG
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: NEG
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 4
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 4
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 4
65775: NEG
65776: PUSH
65777: LD_INT 4
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: LD_INT 5
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: LD_INT 4
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 3
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 4
65823: NEG
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 4
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 5
65847: NEG
65848: PUSH
65849: LD_INT 5
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 5
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 5
65871: NEG
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 4
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: LD_INT 3
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 3
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: LD_INT 4
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 4
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 4
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 5
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 5
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 5
66068: PUSH
66069: LD_INT 2
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66123: LD_ADDR_VAR 0 32
66127: PUSH
66128: LD_INT 4
66130: NEG
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 5
66186: NEG
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 5
66197: NEG
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: LD_INT 4
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: LD_INT 3
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 4
66304: NEG
66305: PUSH
66306: LD_INT 4
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 4
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 4
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 5
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: LD_INT 4
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: LD_INT 4
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 5
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: NEG
66431: PUSH
66432: LD_INT 5
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 4
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 4
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: LD_INT 4
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: LD_INT 3
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 5
66555: PUSH
66556: LD_INT 4
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 5
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: LD_INT 4
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 5
66605: PUSH
66606: LD_INT 3
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: LD_INT 5
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66670: LD_ADDR_VAR 0 33
66674: PUSH
66675: LD_INT 4
66677: NEG
66678: PUSH
66679: LD_INT 4
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: LD_INT 5
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 3
66701: NEG
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: LD_INT 4
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 5
66749: NEG
66750: PUSH
66751: LD_INT 5
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: LD_INT 5
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 5
66773: NEG
66774: PUSH
66775: LD_INT 3
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: LD_INT 3
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 4
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 4
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 2
66875: NEG
66876: PUSH
66877: LD_INT 4
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 4
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 5
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 3
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 3
66948: PUSH
66949: LD_INT 1
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 5
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: LD_INT 3
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: PUSH
67011: LD_INT 4
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: LD_INT 4
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: LD_INT 5
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 5
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67208: LD_ADDR_VAR 0 34
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 4
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 5
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 4
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: LD_INT 5
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 5
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 3
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 4
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 4
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 3
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 2
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 5
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 5
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 4
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 5
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 4
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: LD_INT 3
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 4
67604: NEG
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 5
67649: NEG
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 5
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 5
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 3
67684: NEG
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// end ; end ;
67740: GO 67743
67742: POP
// case btype of b_depot , b_warehouse :
67743: LD_VAR 0 1
67747: PUSH
67748: LD_INT 0
67750: DOUBLE
67751: EQUAL
67752: IFTRUE 67762
67754: LD_INT 1
67756: DOUBLE
67757: EQUAL
67758: IFTRUE 67762
67760: GO 67963
67762: POP
// case nation of nation_american :
67763: LD_VAR 0 5
67767: PUSH
67768: LD_INT 1
67770: DOUBLE
67771: EQUAL
67772: IFTRUE 67776
67774: GO 67832
67776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67777: LD_ADDR_VAR 0 9
67781: PUSH
67782: LD_VAR 0 11
67786: PUSH
67787: LD_VAR 0 12
67791: PUSH
67792: LD_VAR 0 13
67796: PUSH
67797: LD_VAR 0 14
67801: PUSH
67802: LD_VAR 0 15
67806: PUSH
67807: LD_VAR 0 16
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: PUSH
67820: LD_VAR 0 4
67824: PUSH
67825: LD_INT 1
67827: PLUS
67828: ARRAY
67829: ST_TO_ADDR
67830: GO 67961
67832: LD_INT 2
67834: DOUBLE
67835: EQUAL
67836: IFTRUE 67840
67838: GO 67896
67840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67841: LD_ADDR_VAR 0 9
67845: PUSH
67846: LD_VAR 0 17
67850: PUSH
67851: LD_VAR 0 18
67855: PUSH
67856: LD_VAR 0 19
67860: PUSH
67861: LD_VAR 0 20
67865: PUSH
67866: LD_VAR 0 21
67870: PUSH
67871: LD_VAR 0 22
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: PUSH
67884: LD_VAR 0 4
67888: PUSH
67889: LD_INT 1
67891: PLUS
67892: ARRAY
67893: ST_TO_ADDR
67894: GO 67961
67896: LD_INT 3
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67904
67902: GO 67960
67904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67905: LD_ADDR_VAR 0 9
67909: PUSH
67910: LD_VAR 0 23
67914: PUSH
67915: LD_VAR 0 24
67919: PUSH
67920: LD_VAR 0 25
67924: PUSH
67925: LD_VAR 0 26
67929: PUSH
67930: LD_VAR 0 27
67934: PUSH
67935: LD_VAR 0 28
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: PUSH
67948: LD_VAR 0 4
67952: PUSH
67953: LD_INT 1
67955: PLUS
67956: ARRAY
67957: ST_TO_ADDR
67958: GO 67961
67960: POP
67961: GO 68516
67963: LD_INT 2
67965: DOUBLE
67966: EQUAL
67967: IFTRUE 67977
67969: LD_INT 3
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 67977
67975: GO 68033
67977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67978: LD_ADDR_VAR 0 9
67982: PUSH
67983: LD_VAR 0 29
67987: PUSH
67988: LD_VAR 0 30
67992: PUSH
67993: LD_VAR 0 31
67997: PUSH
67998: LD_VAR 0 32
68002: PUSH
68003: LD_VAR 0 33
68007: PUSH
68008: LD_VAR 0 34
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: PUSH
68021: LD_VAR 0 4
68025: PUSH
68026: LD_INT 1
68028: PLUS
68029: ARRAY
68030: ST_TO_ADDR
68031: GO 68516
68033: LD_INT 16
68035: DOUBLE
68036: EQUAL
68037: IFTRUE 68095
68039: LD_INT 17
68041: DOUBLE
68042: EQUAL
68043: IFTRUE 68095
68045: LD_INT 18
68047: DOUBLE
68048: EQUAL
68049: IFTRUE 68095
68051: LD_INT 19
68053: DOUBLE
68054: EQUAL
68055: IFTRUE 68095
68057: LD_INT 22
68059: DOUBLE
68060: EQUAL
68061: IFTRUE 68095
68063: LD_INT 20
68065: DOUBLE
68066: EQUAL
68067: IFTRUE 68095
68069: LD_INT 21
68071: DOUBLE
68072: EQUAL
68073: IFTRUE 68095
68075: LD_INT 23
68077: DOUBLE
68078: EQUAL
68079: IFTRUE 68095
68081: LD_INT 24
68083: DOUBLE
68084: EQUAL
68085: IFTRUE 68095
68087: LD_INT 25
68089: DOUBLE
68090: EQUAL
68091: IFTRUE 68095
68093: GO 68151
68095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68096: LD_ADDR_VAR 0 9
68100: PUSH
68101: LD_VAR 0 35
68105: PUSH
68106: LD_VAR 0 36
68110: PUSH
68111: LD_VAR 0 37
68115: PUSH
68116: LD_VAR 0 38
68120: PUSH
68121: LD_VAR 0 39
68125: PUSH
68126: LD_VAR 0 40
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: PUSH
68139: LD_VAR 0 4
68143: PUSH
68144: LD_INT 1
68146: PLUS
68147: ARRAY
68148: ST_TO_ADDR
68149: GO 68516
68151: LD_INT 6
68153: DOUBLE
68154: EQUAL
68155: IFTRUE 68207
68157: LD_INT 7
68159: DOUBLE
68160: EQUAL
68161: IFTRUE 68207
68163: LD_INT 8
68165: DOUBLE
68166: EQUAL
68167: IFTRUE 68207
68169: LD_INT 13
68171: DOUBLE
68172: EQUAL
68173: IFTRUE 68207
68175: LD_INT 12
68177: DOUBLE
68178: EQUAL
68179: IFTRUE 68207
68181: LD_INT 15
68183: DOUBLE
68184: EQUAL
68185: IFTRUE 68207
68187: LD_INT 11
68189: DOUBLE
68190: EQUAL
68191: IFTRUE 68207
68193: LD_INT 14
68195: DOUBLE
68196: EQUAL
68197: IFTRUE 68207
68199: LD_INT 10
68201: DOUBLE
68202: EQUAL
68203: IFTRUE 68207
68205: GO 68263
68207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68208: LD_ADDR_VAR 0 9
68212: PUSH
68213: LD_VAR 0 41
68217: PUSH
68218: LD_VAR 0 42
68222: PUSH
68223: LD_VAR 0 43
68227: PUSH
68228: LD_VAR 0 44
68232: PUSH
68233: LD_VAR 0 45
68237: PUSH
68238: LD_VAR 0 46
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: PUSH
68251: LD_VAR 0 4
68255: PUSH
68256: LD_INT 1
68258: PLUS
68259: ARRAY
68260: ST_TO_ADDR
68261: GO 68516
68263: LD_INT 36
68265: DOUBLE
68266: EQUAL
68267: IFTRUE 68271
68269: GO 68327
68271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68272: LD_ADDR_VAR 0 9
68276: PUSH
68277: LD_VAR 0 47
68281: PUSH
68282: LD_VAR 0 48
68286: PUSH
68287: LD_VAR 0 49
68291: PUSH
68292: LD_VAR 0 50
68296: PUSH
68297: LD_VAR 0 51
68301: PUSH
68302: LD_VAR 0 52
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: PUSH
68315: LD_VAR 0 4
68319: PUSH
68320: LD_INT 1
68322: PLUS
68323: ARRAY
68324: ST_TO_ADDR
68325: GO 68516
68327: LD_INT 4
68329: DOUBLE
68330: EQUAL
68331: IFTRUE 68353
68333: LD_INT 5
68335: DOUBLE
68336: EQUAL
68337: IFTRUE 68353
68339: LD_INT 34
68341: DOUBLE
68342: EQUAL
68343: IFTRUE 68353
68345: LD_INT 37
68347: DOUBLE
68348: EQUAL
68349: IFTRUE 68353
68351: GO 68409
68353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68354: LD_ADDR_VAR 0 9
68358: PUSH
68359: LD_VAR 0 53
68363: PUSH
68364: LD_VAR 0 54
68368: PUSH
68369: LD_VAR 0 55
68373: PUSH
68374: LD_VAR 0 56
68378: PUSH
68379: LD_VAR 0 57
68383: PUSH
68384: LD_VAR 0 58
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: PUSH
68397: LD_VAR 0 4
68401: PUSH
68402: LD_INT 1
68404: PLUS
68405: ARRAY
68406: ST_TO_ADDR
68407: GO 68516
68409: LD_INT 31
68411: DOUBLE
68412: EQUAL
68413: IFTRUE 68459
68415: LD_INT 32
68417: DOUBLE
68418: EQUAL
68419: IFTRUE 68459
68421: LD_INT 33
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68459
68427: LD_INT 27
68429: DOUBLE
68430: EQUAL
68431: IFTRUE 68459
68433: LD_INT 26
68435: DOUBLE
68436: EQUAL
68437: IFTRUE 68459
68439: LD_INT 28
68441: DOUBLE
68442: EQUAL
68443: IFTRUE 68459
68445: LD_INT 29
68447: DOUBLE
68448: EQUAL
68449: IFTRUE 68459
68451: LD_INT 30
68453: DOUBLE
68454: EQUAL
68455: IFTRUE 68459
68457: GO 68515
68459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68460: LD_ADDR_VAR 0 9
68464: PUSH
68465: LD_VAR 0 59
68469: PUSH
68470: LD_VAR 0 60
68474: PUSH
68475: LD_VAR 0 61
68479: PUSH
68480: LD_VAR 0 62
68484: PUSH
68485: LD_VAR 0 63
68489: PUSH
68490: LD_VAR 0 64
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: PUSH
68503: LD_VAR 0 4
68507: PUSH
68508: LD_INT 1
68510: PLUS
68511: ARRAY
68512: ST_TO_ADDR
68513: GO 68516
68515: POP
// temp_list2 = [ ] ;
68516: LD_ADDR_VAR 0 10
68520: PUSH
68521: EMPTY
68522: ST_TO_ADDR
// for i in temp_list do
68523: LD_ADDR_VAR 0 8
68527: PUSH
68528: LD_VAR 0 9
68532: PUSH
68533: FOR_IN
68534: IFFALSE 68586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68536: LD_ADDR_VAR 0 10
68540: PUSH
68541: LD_VAR 0 10
68545: PUSH
68546: LD_VAR 0 8
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: PUSH
68555: LD_VAR 0 2
68559: PLUS
68560: PUSH
68561: LD_VAR 0 8
68565: PUSH
68566: LD_INT 2
68568: ARRAY
68569: PUSH
68570: LD_VAR 0 3
68574: PLUS
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: ADD
68583: ST_TO_ADDR
68584: GO 68533
68586: POP
68587: POP
// result = temp_list2 ;
68588: LD_ADDR_VAR 0 7
68592: PUSH
68593: LD_VAR 0 10
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 7
68602: RET
// export function EnemyInRange ( unit , dist ) ; begin
68603: LD_INT 0
68605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68606: LD_ADDR_VAR 0 3
68610: PUSH
68611: LD_VAR 0 1
68615: PPUSH
68616: CALL_OW 255
68620: PPUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 250
68630: PPUSH
68631: LD_VAR 0 1
68635: PPUSH
68636: CALL_OW 251
68640: PPUSH
68641: LD_VAR 0 2
68645: PPUSH
68646: CALL 42404 0 4
68650: PUSH
68651: LD_INT 4
68653: ARRAY
68654: ST_TO_ADDR
// end ;
68655: LD_VAR 0 3
68659: RET
// export function PlayerSeeMe ( unit ) ; begin
68660: LD_INT 0
68662: PPUSH
// result := See ( your_side , unit ) ;
68663: LD_ADDR_VAR 0 2
68667: PUSH
68668: LD_OWVAR 2
68672: PPUSH
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL_OW 292
68682: ST_TO_ADDR
// end ;
68683: LD_VAR 0 2
68687: RET
// export function ReverseDir ( unit ) ; begin
68688: LD_INT 0
68690: PPUSH
// if not unit then
68691: LD_VAR 0 1
68695: NOT
68696: IFFALSE 68700
// exit ;
68698: GO 68723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68700: LD_ADDR_VAR 0 2
68704: PUSH
68705: LD_VAR 0 1
68709: PPUSH
68710: CALL_OW 254
68714: PUSH
68715: LD_INT 3
68717: PLUS
68718: PUSH
68719: LD_INT 6
68721: MOD
68722: ST_TO_ADDR
// end ;
68723: LD_VAR 0 2
68727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68728: LD_INT 0
68730: PPUSH
68731: PPUSH
68732: PPUSH
68733: PPUSH
68734: PPUSH
// if not hexes then
68735: LD_VAR 0 2
68739: NOT
68740: IFFALSE 68744
// exit ;
68742: GO 68892
// dist := 9999 ;
68744: LD_ADDR_VAR 0 5
68748: PUSH
68749: LD_INT 9999
68751: ST_TO_ADDR
// for i = 1 to hexes do
68752: LD_ADDR_VAR 0 4
68756: PUSH
68757: DOUBLE
68758: LD_INT 1
68760: DEC
68761: ST_TO_ADDR
68762: LD_VAR 0 2
68766: PUSH
68767: FOR_TO
68768: IFFALSE 68880
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68770: LD_VAR 0 1
68774: PPUSH
68775: LD_VAR 0 2
68779: PUSH
68780: LD_VAR 0 4
68784: ARRAY
68785: PUSH
68786: LD_INT 1
68788: ARRAY
68789: PPUSH
68790: LD_VAR 0 2
68794: PUSH
68795: LD_VAR 0 4
68799: ARRAY
68800: PUSH
68801: LD_INT 2
68803: ARRAY
68804: PPUSH
68805: CALL_OW 297
68809: PUSH
68810: LD_VAR 0 5
68814: LESS
68815: IFFALSE 68878
// begin hex := hexes [ i ] ;
68817: LD_ADDR_VAR 0 7
68821: PUSH
68822: LD_VAR 0 2
68826: PUSH
68827: LD_VAR 0 4
68831: ARRAY
68832: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68833: LD_ADDR_VAR 0 5
68837: PUSH
68838: LD_VAR 0 1
68842: PPUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_VAR 0 4
68852: ARRAY
68853: PUSH
68854: LD_INT 1
68856: ARRAY
68857: PPUSH
68858: LD_VAR 0 2
68862: PUSH
68863: LD_VAR 0 4
68867: ARRAY
68868: PUSH
68869: LD_INT 2
68871: ARRAY
68872: PPUSH
68873: CALL_OW 297
68877: ST_TO_ADDR
// end ; end ;
68878: GO 68767
68880: POP
68881: POP
// result := hex ;
68882: LD_ADDR_VAR 0 3
68886: PUSH
68887: LD_VAR 0 7
68891: ST_TO_ADDR
// end ;
68892: LD_VAR 0 3
68896: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68897: LD_INT 0
68899: PPUSH
68900: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68901: LD_VAR 0 1
68905: NOT
68906: PUSH
68907: LD_VAR 0 1
68911: PUSH
68912: LD_INT 21
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 23
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PPUSH
68936: CALL_OW 69
68940: IN
68941: NOT
68942: OR
68943: IFFALSE 68947
// exit ;
68945: GO 68994
// for i = 1 to 3 do
68947: LD_ADDR_VAR 0 3
68951: PUSH
68952: DOUBLE
68953: LD_INT 1
68955: DEC
68956: ST_TO_ADDR
68957: LD_INT 3
68959: PUSH
68960: FOR_TO
68961: IFFALSE 68992
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68963: LD_VAR 0 1
68967: PPUSH
68968: CALL_OW 250
68972: PPUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 251
68982: PPUSH
68983: LD_INT 1
68985: PPUSH
68986: CALL_OW 453
68990: GO 68960
68992: POP
68993: POP
// end ;
68994: LD_VAR 0 2
68998: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68999: LD_INT 0
69001: PPUSH
69002: PPUSH
69003: PPUSH
69004: PPUSH
69005: PPUSH
69006: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69007: LD_VAR 0 1
69011: NOT
69012: PUSH
69013: LD_VAR 0 2
69017: NOT
69018: OR
69019: PUSH
69020: LD_VAR 0 1
69024: PPUSH
69025: CALL_OW 314
69029: OR
69030: IFFALSE 69034
// exit ;
69032: GO 69475
// x := GetX ( enemy_unit ) ;
69034: LD_ADDR_VAR 0 7
69038: PUSH
69039: LD_VAR 0 2
69043: PPUSH
69044: CALL_OW 250
69048: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69049: LD_ADDR_VAR 0 8
69053: PUSH
69054: LD_VAR 0 2
69058: PPUSH
69059: CALL_OW 251
69063: ST_TO_ADDR
// if not x or not y then
69064: LD_VAR 0 7
69068: NOT
69069: PUSH
69070: LD_VAR 0 8
69074: NOT
69075: OR
69076: IFFALSE 69080
// exit ;
69078: GO 69475
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69080: LD_ADDR_VAR 0 6
69084: PUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_INT 0
69092: PPUSH
69093: LD_INT 4
69095: PPUSH
69096: CALL_OW 272
69100: PUSH
69101: LD_VAR 0 8
69105: PPUSH
69106: LD_INT 0
69108: PPUSH
69109: LD_INT 4
69111: PPUSH
69112: CALL_OW 273
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_VAR 0 7
69125: PPUSH
69126: LD_INT 1
69128: PPUSH
69129: LD_INT 4
69131: PPUSH
69132: CALL_OW 272
69136: PUSH
69137: LD_VAR 0 8
69141: PPUSH
69142: LD_INT 1
69144: PPUSH
69145: LD_INT 4
69147: PPUSH
69148: CALL_OW 273
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 7
69161: PPUSH
69162: LD_INT 2
69164: PPUSH
69165: LD_INT 4
69167: PPUSH
69168: CALL_OW 272
69172: PUSH
69173: LD_VAR 0 8
69177: PPUSH
69178: LD_INT 2
69180: PPUSH
69181: LD_INT 4
69183: PPUSH
69184: CALL_OW 273
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_VAR 0 7
69197: PPUSH
69198: LD_INT 3
69200: PPUSH
69201: LD_INT 4
69203: PPUSH
69204: CALL_OW 272
69208: PUSH
69209: LD_VAR 0 8
69213: PPUSH
69214: LD_INT 3
69216: PPUSH
69217: LD_INT 4
69219: PPUSH
69220: CALL_OW 273
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_VAR 0 7
69233: PPUSH
69234: LD_INT 4
69236: PPUSH
69237: LD_INT 4
69239: PPUSH
69240: CALL_OW 272
69244: PUSH
69245: LD_VAR 0 8
69249: PPUSH
69250: LD_INT 4
69252: PPUSH
69253: LD_INT 4
69255: PPUSH
69256: CALL_OW 273
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_VAR 0 7
69269: PPUSH
69270: LD_INT 5
69272: PPUSH
69273: LD_INT 4
69275: PPUSH
69276: CALL_OW 272
69280: PUSH
69281: LD_VAR 0 8
69285: PPUSH
69286: LD_INT 5
69288: PPUSH
69289: LD_INT 4
69291: PPUSH
69292: CALL_OW 273
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: ST_TO_ADDR
// for i = tmp downto 1 do
69309: LD_ADDR_VAR 0 4
69313: PUSH
69314: DOUBLE
69315: LD_VAR 0 6
69319: INC
69320: ST_TO_ADDR
69321: LD_INT 1
69323: PUSH
69324: FOR_DOWNTO
69325: IFFALSE 69426
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69327: LD_VAR 0 6
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PUSH
69338: LD_INT 1
69340: ARRAY
69341: PPUSH
69342: LD_VAR 0 6
69346: PUSH
69347: LD_VAR 0 4
69351: ARRAY
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 488
69361: NOT
69362: PUSH
69363: LD_VAR 0 6
69367: PUSH
69368: LD_VAR 0 4
69372: ARRAY
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: PPUSH
69378: LD_VAR 0 6
69382: PUSH
69383: LD_VAR 0 4
69387: ARRAY
69388: PUSH
69389: LD_INT 2
69391: ARRAY
69392: PPUSH
69393: CALL_OW 428
69397: PUSH
69398: LD_INT 0
69400: NONEQUAL
69401: OR
69402: IFFALSE 69424
// tmp := Delete ( tmp , i ) ;
69404: LD_ADDR_VAR 0 6
69408: PUSH
69409: LD_VAR 0 6
69413: PPUSH
69414: LD_VAR 0 4
69418: PPUSH
69419: CALL_OW 3
69423: ST_TO_ADDR
69424: GO 69324
69426: POP
69427: POP
// j := GetClosestHex ( unit , tmp ) ;
69428: LD_ADDR_VAR 0 5
69432: PUSH
69433: LD_VAR 0 1
69437: PPUSH
69438: LD_VAR 0 6
69442: PPUSH
69443: CALL 68728 0 2
69447: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69448: LD_VAR 0 1
69452: PPUSH
69453: LD_VAR 0 5
69457: PUSH
69458: LD_INT 1
69460: ARRAY
69461: PPUSH
69462: LD_VAR 0 5
69466: PUSH
69467: LD_INT 2
69469: ARRAY
69470: PPUSH
69471: CALL_OW 111
// end ;
69475: LD_VAR 0 3
69479: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69480: LD_INT 0
69482: PPUSH
69483: PPUSH
69484: PPUSH
// uc_side = 0 ;
69485: LD_ADDR_OWVAR 20
69489: PUSH
69490: LD_INT 0
69492: ST_TO_ADDR
// uc_nation = 0 ;
69493: LD_ADDR_OWVAR 21
69497: PUSH
69498: LD_INT 0
69500: ST_TO_ADDR
// InitHc_All ( ) ;
69501: CALL_OW 584
// InitVc ;
69505: CALL_OW 20
// if mastodonts then
69509: LD_VAR 0 6
69513: IFFALSE 69580
// for i = 1 to mastodonts do
69515: LD_ADDR_VAR 0 11
69519: PUSH
69520: DOUBLE
69521: LD_INT 1
69523: DEC
69524: ST_TO_ADDR
69525: LD_VAR 0 6
69529: PUSH
69530: FOR_TO
69531: IFFALSE 69578
// begin vc_chassis := 31 ;
69533: LD_ADDR_OWVAR 37
69537: PUSH
69538: LD_INT 31
69540: ST_TO_ADDR
// vc_control := control_rider ;
69541: LD_ADDR_OWVAR 38
69545: PUSH
69546: LD_INT 4
69548: ST_TO_ADDR
// animal := CreateVehicle ;
69549: LD_ADDR_VAR 0 12
69553: PUSH
69554: CALL_OW 45
69558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69559: LD_VAR 0 12
69563: PPUSH
69564: LD_VAR 0 8
69568: PPUSH
69569: LD_INT 0
69571: PPUSH
69572: CALL 71768 0 3
// end ;
69576: GO 69530
69578: POP
69579: POP
// if horses then
69580: LD_VAR 0 5
69584: IFFALSE 69651
// for i = 1 to horses do
69586: LD_ADDR_VAR 0 11
69590: PUSH
69591: DOUBLE
69592: LD_INT 1
69594: DEC
69595: ST_TO_ADDR
69596: LD_VAR 0 5
69600: PUSH
69601: FOR_TO
69602: IFFALSE 69649
// begin hc_class := 21 ;
69604: LD_ADDR_OWVAR 28
69608: PUSH
69609: LD_INT 21
69611: ST_TO_ADDR
// hc_gallery :=  ;
69612: LD_ADDR_OWVAR 33
69616: PUSH
69617: LD_STRING 
69619: ST_TO_ADDR
// animal := CreateHuman ;
69620: LD_ADDR_VAR 0 12
69624: PUSH
69625: CALL_OW 44
69629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69630: LD_VAR 0 12
69634: PPUSH
69635: LD_VAR 0 8
69639: PPUSH
69640: LD_INT 0
69642: PPUSH
69643: CALL 71768 0 3
// end ;
69647: GO 69601
69649: POP
69650: POP
// if birds then
69651: LD_VAR 0 1
69655: IFFALSE 69722
// for i = 1 to birds do
69657: LD_ADDR_VAR 0 11
69661: PUSH
69662: DOUBLE
69663: LD_INT 1
69665: DEC
69666: ST_TO_ADDR
69667: LD_VAR 0 1
69671: PUSH
69672: FOR_TO
69673: IFFALSE 69720
// begin hc_class = 18 ;
69675: LD_ADDR_OWVAR 28
69679: PUSH
69680: LD_INT 18
69682: ST_TO_ADDR
// hc_gallery =  ;
69683: LD_ADDR_OWVAR 33
69687: PUSH
69688: LD_STRING 
69690: ST_TO_ADDR
// animal := CreateHuman ;
69691: LD_ADDR_VAR 0 12
69695: PUSH
69696: CALL_OW 44
69700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69701: LD_VAR 0 12
69705: PPUSH
69706: LD_VAR 0 8
69710: PPUSH
69711: LD_INT 0
69713: PPUSH
69714: CALL 71768 0 3
// end ;
69718: GO 69672
69720: POP
69721: POP
// if tigers then
69722: LD_VAR 0 2
69726: IFFALSE 69810
// for i = 1 to tigers do
69728: LD_ADDR_VAR 0 11
69732: PUSH
69733: DOUBLE
69734: LD_INT 1
69736: DEC
69737: ST_TO_ADDR
69738: LD_VAR 0 2
69742: PUSH
69743: FOR_TO
69744: IFFALSE 69808
// begin hc_class = class_tiger ;
69746: LD_ADDR_OWVAR 28
69750: PUSH
69751: LD_INT 14
69753: ST_TO_ADDR
// hc_gallery =  ;
69754: LD_ADDR_OWVAR 33
69758: PUSH
69759: LD_STRING 
69761: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69762: LD_ADDR_OWVAR 35
69766: PUSH
69767: LD_INT 7
69769: NEG
69770: PPUSH
69771: LD_INT 7
69773: PPUSH
69774: CALL_OW 12
69778: ST_TO_ADDR
// animal := CreateHuman ;
69779: LD_ADDR_VAR 0 12
69783: PUSH
69784: CALL_OW 44
69788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69789: LD_VAR 0 12
69793: PPUSH
69794: LD_VAR 0 8
69798: PPUSH
69799: LD_INT 0
69801: PPUSH
69802: CALL 71768 0 3
// end ;
69806: GO 69743
69808: POP
69809: POP
// if apemans then
69810: LD_VAR 0 3
69814: IFFALSE 69937
// for i = 1 to apemans do
69816: LD_ADDR_VAR 0 11
69820: PUSH
69821: DOUBLE
69822: LD_INT 1
69824: DEC
69825: ST_TO_ADDR
69826: LD_VAR 0 3
69830: PUSH
69831: FOR_TO
69832: IFFALSE 69935
// begin hc_class = class_apeman ;
69834: LD_ADDR_OWVAR 28
69838: PUSH
69839: LD_INT 12
69841: ST_TO_ADDR
// hc_gallery =  ;
69842: LD_ADDR_OWVAR 33
69846: PUSH
69847: LD_STRING 
69849: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69850: LD_ADDR_OWVAR 35
69854: PUSH
69855: LD_INT 5
69857: NEG
69858: PPUSH
69859: LD_INT 5
69861: PPUSH
69862: CALL_OW 12
69866: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69867: LD_ADDR_OWVAR 31
69871: PUSH
69872: LD_INT 1
69874: PPUSH
69875: LD_INT 3
69877: PPUSH
69878: CALL_OW 12
69882: PUSH
69883: LD_INT 1
69885: PPUSH
69886: LD_INT 3
69888: PPUSH
69889: CALL_OW 12
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: ST_TO_ADDR
// animal := CreateHuman ;
69906: LD_ADDR_VAR 0 12
69910: PUSH
69911: CALL_OW 44
69915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69916: LD_VAR 0 12
69920: PPUSH
69921: LD_VAR 0 8
69925: PPUSH
69926: LD_INT 0
69928: PPUSH
69929: CALL 71768 0 3
// end ;
69933: GO 69831
69935: POP
69936: POP
// if enchidnas then
69937: LD_VAR 0 4
69941: IFFALSE 70008
// for i = 1 to enchidnas do
69943: LD_ADDR_VAR 0 11
69947: PUSH
69948: DOUBLE
69949: LD_INT 1
69951: DEC
69952: ST_TO_ADDR
69953: LD_VAR 0 4
69957: PUSH
69958: FOR_TO
69959: IFFALSE 70006
// begin hc_class = 13 ;
69961: LD_ADDR_OWVAR 28
69965: PUSH
69966: LD_INT 13
69968: ST_TO_ADDR
// hc_gallery =  ;
69969: LD_ADDR_OWVAR 33
69973: PUSH
69974: LD_STRING 
69976: ST_TO_ADDR
// animal := CreateHuman ;
69977: LD_ADDR_VAR 0 12
69981: PUSH
69982: CALL_OW 44
69986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69987: LD_VAR 0 12
69991: PPUSH
69992: LD_VAR 0 8
69996: PPUSH
69997: LD_INT 0
69999: PPUSH
70000: CALL 71768 0 3
// end ;
70004: GO 69958
70006: POP
70007: POP
// if fishes then
70008: LD_VAR 0 7
70012: IFFALSE 70079
// for i = 1 to fishes do
70014: LD_ADDR_VAR 0 11
70018: PUSH
70019: DOUBLE
70020: LD_INT 1
70022: DEC
70023: ST_TO_ADDR
70024: LD_VAR 0 7
70028: PUSH
70029: FOR_TO
70030: IFFALSE 70077
// begin hc_class = 20 ;
70032: LD_ADDR_OWVAR 28
70036: PUSH
70037: LD_INT 20
70039: ST_TO_ADDR
// hc_gallery =  ;
70040: LD_ADDR_OWVAR 33
70044: PUSH
70045: LD_STRING 
70047: ST_TO_ADDR
// animal := CreateHuman ;
70048: LD_ADDR_VAR 0 12
70052: PUSH
70053: CALL_OW 44
70057: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70058: LD_VAR 0 12
70062: PPUSH
70063: LD_VAR 0 9
70067: PPUSH
70068: LD_INT 0
70070: PPUSH
70071: CALL 71768 0 3
// end ;
70075: GO 70029
70077: POP
70078: POP
// end ;
70079: LD_VAR 0 10
70083: RET
// export function WantHeal ( sci , unit ) ; begin
70084: LD_INT 0
70086: PPUSH
// if GetTaskList ( sci ) > 0 then
70087: LD_VAR 0 1
70091: PPUSH
70092: CALL_OW 437
70096: PUSH
70097: LD_INT 0
70099: GREATER
70100: IFFALSE 70170
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70102: LD_VAR 0 1
70106: PPUSH
70107: CALL_OW 437
70111: PUSH
70112: LD_INT 1
70114: ARRAY
70115: PUSH
70116: LD_INT 1
70118: ARRAY
70119: PUSH
70120: LD_STRING l
70122: EQUAL
70123: PUSH
70124: LD_VAR 0 1
70128: PPUSH
70129: CALL_OW 437
70133: PUSH
70134: LD_INT 1
70136: ARRAY
70137: PUSH
70138: LD_INT 4
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 2
70146: EQUAL
70147: AND
70148: IFFALSE 70160
// result := true else
70150: LD_ADDR_VAR 0 3
70154: PUSH
70155: LD_INT 1
70157: ST_TO_ADDR
70158: GO 70168
// result := false ;
70160: LD_ADDR_VAR 0 3
70164: PUSH
70165: LD_INT 0
70167: ST_TO_ADDR
// end else
70168: GO 70178
// result := false ;
70170: LD_ADDR_VAR 0 3
70174: PUSH
70175: LD_INT 0
70177: ST_TO_ADDR
// end ;
70178: LD_VAR 0 3
70182: RET
// export function HealTarget ( sci ) ; begin
70183: LD_INT 0
70185: PPUSH
// if not sci then
70186: LD_VAR 0 1
70190: NOT
70191: IFFALSE 70195
// exit ;
70193: GO 70260
// result := 0 ;
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: LD_INT 0
70202: ST_TO_ADDR
// if GetTaskList ( sci ) then
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 437
70212: IFFALSE 70260
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 437
70223: PUSH
70224: LD_INT 1
70226: ARRAY
70227: PUSH
70228: LD_INT 1
70230: ARRAY
70231: PUSH
70232: LD_STRING l
70234: EQUAL
70235: IFFALSE 70260
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70237: LD_ADDR_VAR 0 2
70241: PUSH
70242: LD_VAR 0 1
70246: PPUSH
70247: CALL_OW 437
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PUSH
70256: LD_INT 4
70258: ARRAY
70259: ST_TO_ADDR
// end ;
70260: LD_VAR 0 2
70264: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70265: LD_INT 0
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
// if not base_units then
70271: LD_VAR 0 1
70275: NOT
70276: IFFALSE 70280
// exit ;
70278: GO 70367
// result := false ;
70280: LD_ADDR_VAR 0 2
70284: PUSH
70285: LD_INT 0
70287: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70288: LD_ADDR_VAR 0 5
70292: PUSH
70293: LD_VAR 0 1
70297: PPUSH
70298: LD_INT 21
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PPUSH
70308: CALL_OW 72
70312: ST_TO_ADDR
// if not tmp then
70313: LD_VAR 0 5
70317: NOT
70318: IFFALSE 70322
// exit ;
70320: GO 70367
// for i in tmp do
70322: LD_ADDR_VAR 0 3
70326: PUSH
70327: LD_VAR 0 5
70331: PUSH
70332: FOR_IN
70333: IFFALSE 70365
// begin result := EnemyInRange ( i , 22 ) ;
70335: LD_ADDR_VAR 0 2
70339: PUSH
70340: LD_VAR 0 3
70344: PPUSH
70345: LD_INT 22
70347: PPUSH
70348: CALL 68603 0 2
70352: ST_TO_ADDR
// if result then
70353: LD_VAR 0 2
70357: IFFALSE 70363
// exit ;
70359: POP
70360: POP
70361: GO 70367
// end ;
70363: GO 70332
70365: POP
70366: POP
// end ;
70367: LD_VAR 0 2
70371: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70372: LD_INT 0
70374: PPUSH
70375: PPUSH
// if not units then
70376: LD_VAR 0 1
70380: NOT
70381: IFFALSE 70385
// exit ;
70383: GO 70455
// result := [ ] ;
70385: LD_ADDR_VAR 0 3
70389: PUSH
70390: EMPTY
70391: ST_TO_ADDR
// for i in units do
70392: LD_ADDR_VAR 0 4
70396: PUSH
70397: LD_VAR 0 1
70401: PUSH
70402: FOR_IN
70403: IFFALSE 70453
// if GetTag ( i ) = tag then
70405: LD_VAR 0 4
70409: PPUSH
70410: CALL_OW 110
70414: PUSH
70415: LD_VAR 0 2
70419: EQUAL
70420: IFFALSE 70451
// result := Insert ( result , result + 1 , i ) ;
70422: LD_ADDR_VAR 0 3
70426: PUSH
70427: LD_VAR 0 3
70431: PPUSH
70432: LD_VAR 0 3
70436: PUSH
70437: LD_INT 1
70439: PLUS
70440: PPUSH
70441: LD_VAR 0 4
70445: PPUSH
70446: CALL_OW 2
70450: ST_TO_ADDR
70451: GO 70402
70453: POP
70454: POP
// end ;
70455: LD_VAR 0 3
70459: RET
// export function IsDriver ( un ) ; begin
70460: LD_INT 0
70462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70463: LD_ADDR_VAR 0 2
70467: PUSH
70468: LD_VAR 0 1
70472: PUSH
70473: LD_INT 55
70475: PUSH
70476: EMPTY
70477: LIST
70478: PPUSH
70479: CALL_OW 69
70483: IN
70484: ST_TO_ADDR
// end ;
70485: LD_VAR 0 2
70489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70490: LD_INT 0
70492: PPUSH
70493: PPUSH
// list := [ ] ;
70494: LD_ADDR_VAR 0 5
70498: PUSH
70499: EMPTY
70500: ST_TO_ADDR
// case d of 0 :
70501: LD_VAR 0 3
70505: PUSH
70506: LD_INT 0
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70514
70512: GO 70647
70514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70515: LD_ADDR_VAR 0 5
70519: PUSH
70520: LD_VAR 0 1
70524: PUSH
70525: LD_INT 4
70527: MINUS
70528: PUSH
70529: LD_VAR 0 2
70533: PUSH
70534: LD_INT 4
70536: MINUS
70537: PUSH
70538: LD_INT 2
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: LIST
70545: PUSH
70546: LD_VAR 0 1
70550: PUSH
70551: LD_INT 3
70553: MINUS
70554: PUSH
70555: LD_VAR 0 2
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: PUSH
70568: LD_VAR 0 1
70572: PUSH
70573: LD_INT 4
70575: PLUS
70576: PUSH
70577: LD_VAR 0 2
70581: PUSH
70582: LD_INT 4
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: PUSH
70590: LD_VAR 0 1
70594: PUSH
70595: LD_INT 3
70597: PLUS
70598: PUSH
70599: LD_VAR 0 2
70603: PUSH
70604: LD_INT 3
70606: PLUS
70607: PUSH
70608: LD_INT 5
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: PUSH
70616: LD_VAR 0 1
70620: PUSH
70621: LD_VAR 0 2
70625: PUSH
70626: LD_INT 4
70628: PLUS
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: LIST
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: ST_TO_ADDR
// end ; 1 :
70645: GO 71345
70647: LD_INT 1
70649: DOUBLE
70650: EQUAL
70651: IFTRUE 70655
70653: GO 70788
70655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70656: LD_ADDR_VAR 0 5
70660: PUSH
70661: LD_VAR 0 1
70665: PUSH
70666: LD_VAR 0 2
70670: PUSH
70671: LD_INT 4
70673: MINUS
70674: PUSH
70675: LD_INT 3
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: LIST
70682: PUSH
70683: LD_VAR 0 1
70687: PUSH
70688: LD_INT 3
70690: MINUS
70691: PUSH
70692: LD_VAR 0 2
70696: PUSH
70697: LD_INT 3
70699: MINUS
70700: PUSH
70701: LD_INT 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: LIST
70708: PUSH
70709: LD_VAR 0 1
70713: PUSH
70714: LD_INT 4
70716: MINUS
70717: PUSH
70718: LD_VAR 0 2
70722: PUSH
70723: LD_INT 1
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: PUSH
70731: LD_VAR 0 1
70735: PUSH
70736: LD_VAR 0 2
70740: PUSH
70741: LD_INT 3
70743: PLUS
70744: PUSH
70745: LD_INT 0
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: LIST
70752: PUSH
70753: LD_VAR 0 1
70757: PUSH
70758: LD_INT 4
70760: PLUS
70761: PUSH
70762: LD_VAR 0 2
70766: PUSH
70767: LD_INT 4
70769: PLUS
70770: PUSH
70771: LD_INT 5
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: LIST
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: ST_TO_ADDR
// end ; 2 :
70786: GO 71345
70788: LD_INT 2
70790: DOUBLE
70791: EQUAL
70792: IFTRUE 70796
70794: GO 70925
70796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70797: LD_ADDR_VAR 0 5
70801: PUSH
70802: LD_VAR 0 1
70806: PUSH
70807: LD_VAR 0 2
70811: PUSH
70812: LD_INT 3
70814: MINUS
70815: PUSH
70816: LD_INT 3
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: PUSH
70824: LD_VAR 0 1
70828: PUSH
70829: LD_INT 4
70831: PLUS
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: LD_INT 4
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: LIST
70845: PUSH
70846: LD_VAR 0 1
70850: PUSH
70851: LD_VAR 0 2
70855: PUSH
70856: LD_INT 4
70858: PLUS
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: PUSH
70868: LD_VAR 0 1
70872: PUSH
70873: LD_INT 3
70875: MINUS
70876: PUSH
70877: LD_VAR 0 2
70881: PUSH
70882: LD_INT 1
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: LIST
70889: PUSH
70890: LD_VAR 0 1
70894: PUSH
70895: LD_INT 4
70897: MINUS
70898: PUSH
70899: LD_VAR 0 2
70903: PUSH
70904: LD_INT 4
70906: MINUS
70907: PUSH
70908: LD_INT 2
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: LIST
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: ST_TO_ADDR
// end ; 3 :
70923: GO 71345
70925: LD_INT 3
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70933
70931: GO 71066
70933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70934: LD_ADDR_VAR 0 5
70938: PUSH
70939: LD_VAR 0 1
70943: PUSH
70944: LD_INT 3
70946: PLUS
70947: PUSH
70948: LD_VAR 0 2
70952: PUSH
70953: LD_INT 4
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: PUSH
70961: LD_VAR 0 1
70965: PUSH
70966: LD_INT 4
70968: PLUS
70969: PUSH
70970: LD_VAR 0 2
70974: PUSH
70975: LD_INT 4
70977: PLUS
70978: PUSH
70979: LD_INT 5
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: LIST
70986: PUSH
70987: LD_VAR 0 1
70991: PUSH
70992: LD_INT 4
70994: MINUS
70995: PUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: LIST
71008: PUSH
71009: LD_VAR 0 1
71013: PUSH
71014: LD_VAR 0 2
71018: PUSH
71019: LD_INT 4
71021: MINUS
71022: PUSH
71023: LD_INT 3
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: PUSH
71031: LD_VAR 0 1
71035: PUSH
71036: LD_INT 3
71038: MINUS
71039: PUSH
71040: LD_VAR 0 2
71044: PUSH
71045: LD_INT 3
71047: MINUS
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: LIST
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: ST_TO_ADDR
// end ; 4 :
71064: GO 71345
71066: LD_INT 4
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71074
71072: GO 71207
71074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71075: LD_ADDR_VAR 0 5
71079: PUSH
71080: LD_VAR 0 1
71084: PUSH
71085: LD_VAR 0 2
71089: PUSH
71090: LD_INT 4
71092: PLUS
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: LIST
71101: PUSH
71102: LD_VAR 0 1
71106: PUSH
71107: LD_INT 3
71109: PLUS
71110: PUSH
71111: LD_VAR 0 2
71115: PUSH
71116: LD_INT 3
71118: PLUS
71119: PUSH
71120: LD_INT 5
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: PUSH
71128: LD_VAR 0 1
71132: PUSH
71133: LD_INT 4
71135: PLUS
71136: PUSH
71137: LD_VAR 0 2
71141: PUSH
71142: LD_INT 4
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: LIST
71149: PUSH
71150: LD_VAR 0 1
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: LD_INT 3
71162: MINUS
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: LIST
71171: PUSH
71172: LD_VAR 0 1
71176: PUSH
71177: LD_INT 4
71179: MINUS
71180: PUSH
71181: LD_VAR 0 2
71185: PUSH
71186: LD_INT 4
71188: MINUS
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: LIST
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: ST_TO_ADDR
// end ; 5 :
71205: GO 71345
71207: LD_INT 5
71209: DOUBLE
71210: EQUAL
71211: IFTRUE 71215
71213: GO 71344
71215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71216: LD_ADDR_VAR 0 5
71220: PUSH
71221: LD_VAR 0 1
71225: PUSH
71226: LD_INT 4
71228: MINUS
71229: PUSH
71230: LD_VAR 0 2
71234: PUSH
71235: LD_INT 1
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: LIST
71242: PUSH
71243: LD_VAR 0 1
71247: PUSH
71248: LD_VAR 0 2
71252: PUSH
71253: LD_INT 4
71255: MINUS
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: LIST
71264: PUSH
71265: LD_VAR 0 1
71269: PUSH
71270: LD_INT 4
71272: PLUS
71273: PUSH
71274: LD_VAR 0 2
71278: PUSH
71279: LD_INT 4
71281: PLUS
71282: PUSH
71283: LD_INT 5
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: LIST
71290: PUSH
71291: LD_VAR 0 1
71295: PUSH
71296: LD_INT 3
71298: PLUS
71299: PUSH
71300: LD_VAR 0 2
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: LIST
71312: PUSH
71313: LD_VAR 0 1
71317: PUSH
71318: LD_VAR 0 2
71322: PUSH
71323: LD_INT 3
71325: PLUS
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: ST_TO_ADDR
// end ; end ;
71342: GO 71345
71344: POP
// result := list ;
71345: LD_ADDR_VAR 0 4
71349: PUSH
71350: LD_VAR 0 5
71354: ST_TO_ADDR
// end ;
71355: LD_VAR 0 4
71359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71360: LD_INT 0
71362: PPUSH
71363: PPUSH
71364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71365: LD_VAR 0 1
71369: NOT
71370: PUSH
71371: LD_VAR 0 2
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: LD_INT 4
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: IN
71394: NOT
71395: OR
71396: IFFALSE 71400
// exit ;
71398: GO 71492
// tmp := [ ] ;
71400: LD_ADDR_VAR 0 5
71404: PUSH
71405: EMPTY
71406: ST_TO_ADDR
// for i in units do
71407: LD_ADDR_VAR 0 4
71411: PUSH
71412: LD_VAR 0 1
71416: PUSH
71417: FOR_IN
71418: IFFALSE 71461
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: LD_VAR 0 5
71429: PPUSH
71430: LD_VAR 0 5
71434: PUSH
71435: LD_INT 1
71437: PLUS
71438: PPUSH
71439: LD_VAR 0 4
71443: PPUSH
71444: LD_VAR 0 2
71448: PPUSH
71449: CALL_OW 259
71453: PPUSH
71454: CALL_OW 2
71458: ST_TO_ADDR
71459: GO 71417
71461: POP
71462: POP
// if not tmp then
71463: LD_VAR 0 5
71467: NOT
71468: IFFALSE 71472
// exit ;
71470: GO 71492
// result := SortListByListDesc ( units , tmp ) ;
71472: LD_ADDR_VAR 0 3
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 5
71486: PPUSH
71487: CALL_OW 77
71491: ST_TO_ADDR
// end ;
71492: LD_VAR 0 3
71496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71497: LD_INT 0
71499: PPUSH
71500: PPUSH
71501: PPUSH
// result := false ;
71502: LD_ADDR_VAR 0 3
71506: PUSH
71507: LD_INT 0
71509: ST_TO_ADDR
// x := GetX ( building ) ;
71510: LD_ADDR_VAR 0 4
71514: PUSH
71515: LD_VAR 0 2
71519: PPUSH
71520: CALL_OW 250
71524: ST_TO_ADDR
// y := GetY ( building ) ;
71525: LD_ADDR_VAR 0 5
71529: PUSH
71530: LD_VAR 0 2
71534: PPUSH
71535: CALL_OW 251
71539: ST_TO_ADDR
// if not building or not x or not y then
71540: LD_VAR 0 2
71544: NOT
71545: PUSH
71546: LD_VAR 0 4
71550: NOT
71551: OR
71552: PUSH
71553: LD_VAR 0 5
71557: NOT
71558: OR
71559: IFFALSE 71563
// exit ;
71561: GO 71655
// if GetTaskList ( unit ) then
71563: LD_VAR 0 1
71567: PPUSH
71568: CALL_OW 437
71572: IFFALSE 71655
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71574: LD_STRING e
71576: PUSH
71577: LD_VAR 0 1
71581: PPUSH
71582: CALL_OW 437
71586: PUSH
71587: LD_INT 1
71589: ARRAY
71590: PUSH
71591: LD_INT 1
71593: ARRAY
71594: EQUAL
71595: PUSH
71596: LD_VAR 0 4
71600: PUSH
71601: LD_VAR 0 1
71605: PPUSH
71606: CALL_OW 437
71610: PUSH
71611: LD_INT 1
71613: ARRAY
71614: PUSH
71615: LD_INT 2
71617: ARRAY
71618: EQUAL
71619: AND
71620: PUSH
71621: LD_VAR 0 5
71625: PUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 437
71635: PUSH
71636: LD_INT 1
71638: ARRAY
71639: PUSH
71640: LD_INT 3
71642: ARRAY
71643: EQUAL
71644: AND
71645: IFFALSE 71655
// result := true end ;
71647: LD_ADDR_VAR 0 3
71651: PUSH
71652: LD_INT 1
71654: ST_TO_ADDR
// end ;
71655: LD_VAR 0 3
71659: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71660: LD_INT 0
71662: PPUSH
// result := false ;
71663: LD_ADDR_VAR 0 4
71667: PUSH
71668: LD_INT 0
71670: ST_TO_ADDR
// if GetTaskList ( unit ) then
71671: LD_VAR 0 1
71675: PPUSH
71676: CALL_OW 437
71680: IFFALSE 71763
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71682: LD_STRING M
71684: PUSH
71685: LD_VAR 0 1
71689: PPUSH
71690: CALL_OW 437
71694: PUSH
71695: LD_INT 1
71697: ARRAY
71698: PUSH
71699: LD_INT 1
71701: ARRAY
71702: EQUAL
71703: PUSH
71704: LD_VAR 0 2
71708: PUSH
71709: LD_VAR 0 1
71713: PPUSH
71714: CALL_OW 437
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_INT 2
71725: ARRAY
71726: EQUAL
71727: AND
71728: PUSH
71729: LD_VAR 0 3
71733: PUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: CALL_OW 437
71743: PUSH
71744: LD_INT 1
71746: ARRAY
71747: PUSH
71748: LD_INT 3
71750: ARRAY
71751: EQUAL
71752: AND
71753: IFFALSE 71763
// result := true ;
71755: LD_ADDR_VAR 0 4
71759: PUSH
71760: LD_INT 1
71762: ST_TO_ADDR
// end ; end ;
71763: LD_VAR 0 4
71767: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71768: LD_INT 0
71770: PPUSH
71771: PPUSH
71772: PPUSH
71773: PPUSH
// if not unit or not area then
71774: LD_VAR 0 1
71778: NOT
71779: PUSH
71780: LD_VAR 0 2
71784: NOT
71785: OR
71786: IFFALSE 71790
// exit ;
71788: GO 71954
// tmp := AreaToList ( area , i ) ;
71790: LD_ADDR_VAR 0 6
71794: PUSH
71795: LD_VAR 0 2
71799: PPUSH
71800: LD_VAR 0 5
71804: PPUSH
71805: CALL_OW 517
71809: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71810: LD_ADDR_VAR 0 5
71814: PUSH
71815: DOUBLE
71816: LD_INT 1
71818: DEC
71819: ST_TO_ADDR
71820: LD_VAR 0 6
71824: PUSH
71825: LD_INT 1
71827: ARRAY
71828: PUSH
71829: FOR_TO
71830: IFFALSE 71952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71832: LD_ADDR_VAR 0 7
71836: PUSH
71837: LD_VAR 0 6
71841: PUSH
71842: LD_INT 1
71844: ARRAY
71845: PUSH
71846: LD_VAR 0 5
71850: ARRAY
71851: PUSH
71852: LD_VAR 0 6
71856: PUSH
71857: LD_INT 2
71859: ARRAY
71860: PUSH
71861: LD_VAR 0 5
71865: ARRAY
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71871: LD_VAR 0 7
71875: PUSH
71876: LD_INT 1
71878: ARRAY
71879: PPUSH
71880: LD_VAR 0 7
71884: PUSH
71885: LD_INT 2
71887: ARRAY
71888: PPUSH
71889: CALL_OW 428
71893: PUSH
71894: LD_INT 0
71896: EQUAL
71897: IFFALSE 71950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_VAR 0 7
71908: PUSH
71909: LD_INT 1
71911: ARRAY
71912: PPUSH
71913: LD_VAR 0 7
71917: PUSH
71918: LD_INT 2
71920: ARRAY
71921: PPUSH
71922: LD_VAR 0 3
71926: PPUSH
71927: CALL_OW 48
// result := IsPlaced ( unit ) ;
71931: LD_ADDR_VAR 0 4
71935: PUSH
71936: LD_VAR 0 1
71940: PPUSH
71941: CALL_OW 305
71945: ST_TO_ADDR
// exit ;
71946: POP
71947: POP
71948: GO 71954
// end ; end ;
71950: GO 71829
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 4
71958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71959: LD_INT 0
71961: PPUSH
71962: PPUSH
71963: PPUSH
// if not side or side > 8 then
71964: LD_VAR 0 1
71968: NOT
71969: PUSH
71970: LD_VAR 0 1
71974: PUSH
71975: LD_INT 8
71977: GREATER
71978: OR
71979: IFFALSE 71983
// exit ;
71981: GO 72170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71983: LD_ADDR_VAR 0 4
71987: PUSH
71988: LD_INT 22
71990: PUSH
71991: LD_VAR 0 1
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 21
72002: PUSH
72003: LD_INT 3
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PPUSH
72014: CALL_OW 69
72018: ST_TO_ADDR
// if not tmp then
72019: LD_VAR 0 4
72023: NOT
72024: IFFALSE 72028
// exit ;
72026: GO 72170
// enable_addtolog := true ;
72028: LD_ADDR_OWVAR 81
72032: PUSH
72033: LD_INT 1
72035: ST_TO_ADDR
// AddToLog ( [ ) ;
72036: LD_STRING [
72038: PPUSH
72039: CALL_OW 561
// for i in tmp do
72043: LD_ADDR_VAR 0 3
72047: PUSH
72048: LD_VAR 0 4
72052: PUSH
72053: FOR_IN
72054: IFFALSE 72161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72056: LD_STRING [
72058: PUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: CALL_OW 266
72068: STR
72069: PUSH
72070: LD_STRING , 
72072: STR
72073: PUSH
72074: LD_VAR 0 3
72078: PPUSH
72079: CALL_OW 250
72083: STR
72084: PUSH
72085: LD_STRING , 
72087: STR
72088: PUSH
72089: LD_VAR 0 3
72093: PPUSH
72094: CALL_OW 251
72098: STR
72099: PUSH
72100: LD_STRING , 
72102: STR
72103: PUSH
72104: LD_VAR 0 3
72108: PPUSH
72109: CALL_OW 254
72113: STR
72114: PUSH
72115: LD_STRING , 
72117: STR
72118: PUSH
72119: LD_VAR 0 3
72123: PPUSH
72124: LD_INT 1
72126: PPUSH
72127: CALL_OW 268
72131: STR
72132: PUSH
72133: LD_STRING , 
72135: STR
72136: PUSH
72137: LD_VAR 0 3
72141: PPUSH
72142: LD_INT 2
72144: PPUSH
72145: CALL_OW 268
72149: STR
72150: PUSH
72151: LD_STRING ],
72153: STR
72154: PPUSH
72155: CALL_OW 561
// end ;
72159: GO 72053
72161: POP
72162: POP
// AddToLog ( ]; ) ;
72163: LD_STRING ];
72165: PPUSH
72166: CALL_OW 561
// end ;
72170: LD_VAR 0 2
72174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72175: LD_INT 0
72177: PPUSH
72178: PPUSH
72179: PPUSH
72180: PPUSH
72181: PPUSH
// if not area or not rate or not max then
72182: LD_VAR 0 1
72186: NOT
72187: PUSH
72188: LD_VAR 0 2
72192: NOT
72193: OR
72194: PUSH
72195: LD_VAR 0 4
72199: NOT
72200: OR
72201: IFFALSE 72205
// exit ;
72203: GO 72397
// while 1 do
72205: LD_INT 1
72207: IFFALSE 72397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72209: LD_ADDR_VAR 0 9
72213: PUSH
72214: LD_VAR 0 1
72218: PPUSH
72219: LD_INT 1
72221: PPUSH
72222: CALL_OW 287
72226: PUSH
72227: LD_INT 10
72229: MUL
72230: ST_TO_ADDR
// r := rate / 10 ;
72231: LD_ADDR_VAR 0 7
72235: PUSH
72236: LD_VAR 0 2
72240: PUSH
72241: LD_INT 10
72243: DIVREAL
72244: ST_TO_ADDR
// time := 1 1$00 ;
72245: LD_ADDR_VAR 0 8
72249: PUSH
72250: LD_INT 2100
72252: ST_TO_ADDR
// if amount < min then
72253: LD_VAR 0 9
72257: PUSH
72258: LD_VAR 0 3
72262: LESS
72263: IFFALSE 72281
// r := r * 2 else
72265: LD_ADDR_VAR 0 7
72269: PUSH
72270: LD_VAR 0 7
72274: PUSH
72275: LD_INT 2
72277: MUL
72278: ST_TO_ADDR
72279: GO 72307
// if amount > max then
72281: LD_VAR 0 9
72285: PUSH
72286: LD_VAR 0 4
72290: GREATER
72291: IFFALSE 72307
// r := r / 2 ;
72293: LD_ADDR_VAR 0 7
72297: PUSH
72298: LD_VAR 0 7
72302: PUSH
72303: LD_INT 2
72305: DIVREAL
72306: ST_TO_ADDR
// time := time / r ;
72307: LD_ADDR_VAR 0 8
72311: PUSH
72312: LD_VAR 0 8
72316: PUSH
72317: LD_VAR 0 7
72321: DIVREAL
72322: ST_TO_ADDR
// if time < 0 then
72323: LD_VAR 0 8
72327: PUSH
72328: LD_INT 0
72330: LESS
72331: IFFALSE 72348
// time := time * - 1 ;
72333: LD_ADDR_VAR 0 8
72337: PUSH
72338: LD_VAR 0 8
72342: PUSH
72343: LD_INT 1
72345: NEG
72346: MUL
72347: ST_TO_ADDR
// wait ( time ) ;
72348: LD_VAR 0 8
72352: PPUSH
72353: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72357: LD_INT 35
72359: PPUSH
72360: LD_INT 875
72362: PPUSH
72363: CALL_OW 12
72367: PPUSH
72368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72372: LD_INT 1
72374: PPUSH
72375: LD_INT 5
72377: PPUSH
72378: CALL_OW 12
72382: PPUSH
72383: LD_VAR 0 1
72387: PPUSH
72388: LD_INT 1
72390: PPUSH
72391: CALL_OW 55
// end ;
72395: GO 72205
// end ;
72397: LD_VAR 0 5
72401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72402: LD_INT 0
72404: PPUSH
72405: PPUSH
72406: PPUSH
72407: PPUSH
72408: PPUSH
72409: PPUSH
72410: PPUSH
72411: PPUSH
// if not turrets or not factories then
72412: LD_VAR 0 1
72416: NOT
72417: PUSH
72418: LD_VAR 0 2
72422: NOT
72423: OR
72424: IFFALSE 72428
// exit ;
72426: GO 72735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72428: LD_ADDR_VAR 0 10
72432: PUSH
72433: LD_INT 5
72435: PUSH
72436: LD_INT 6
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: LD_INT 4
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 3
72455: PUSH
72456: LD_INT 5
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 24
72470: PUSH
72471: LD_INT 25
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 23
72480: PUSH
72481: LD_INT 27
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 42
72494: PUSH
72495: LD_INT 43
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 44
72504: PUSH
72505: LD_INT 46
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 45
72514: PUSH
72515: LD_INT 47
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: LIST
72531: ST_TO_ADDR
// result := [ ] ;
72532: LD_ADDR_VAR 0 3
72536: PUSH
72537: EMPTY
72538: ST_TO_ADDR
// for i in turrets do
72539: LD_ADDR_VAR 0 4
72543: PUSH
72544: LD_VAR 0 1
72548: PUSH
72549: FOR_IN
72550: IFFALSE 72733
// begin nat := GetNation ( i ) ;
72552: LD_ADDR_VAR 0 7
72556: PUSH
72557: LD_VAR 0 4
72561: PPUSH
72562: CALL_OW 248
72566: ST_TO_ADDR
// weapon := 0 ;
72567: LD_ADDR_VAR 0 8
72571: PUSH
72572: LD_INT 0
72574: ST_TO_ADDR
// if not nat then
72575: LD_VAR 0 7
72579: NOT
72580: IFFALSE 72584
// continue ;
72582: GO 72549
// for j in list [ nat ] do
72584: LD_ADDR_VAR 0 5
72588: PUSH
72589: LD_VAR 0 10
72593: PUSH
72594: LD_VAR 0 7
72598: ARRAY
72599: PUSH
72600: FOR_IN
72601: IFFALSE 72642
// if GetBWeapon ( i ) = j [ 1 ] then
72603: LD_VAR 0 4
72607: PPUSH
72608: CALL_OW 269
72612: PUSH
72613: LD_VAR 0 5
72617: PUSH
72618: LD_INT 1
72620: ARRAY
72621: EQUAL
72622: IFFALSE 72640
// begin weapon := j [ 2 ] ;
72624: LD_ADDR_VAR 0 8
72628: PUSH
72629: LD_VAR 0 5
72633: PUSH
72634: LD_INT 2
72636: ARRAY
72637: ST_TO_ADDR
// break ;
72638: GO 72642
// end ;
72640: GO 72600
72642: POP
72643: POP
// if not weapon then
72644: LD_VAR 0 8
72648: NOT
72649: IFFALSE 72653
// continue ;
72651: GO 72549
// for k in factories do
72653: LD_ADDR_VAR 0 6
72657: PUSH
72658: LD_VAR 0 2
72662: PUSH
72663: FOR_IN
72664: IFFALSE 72729
// begin weapons := AvailableWeaponList ( k ) ;
72666: LD_ADDR_VAR 0 9
72670: PUSH
72671: LD_VAR 0 6
72675: PPUSH
72676: CALL_OW 478
72680: ST_TO_ADDR
// if not weapons then
72681: LD_VAR 0 9
72685: NOT
72686: IFFALSE 72690
// continue ;
72688: GO 72663
// if weapon in weapons then
72690: LD_VAR 0 8
72694: PUSH
72695: LD_VAR 0 9
72699: IN
72700: IFFALSE 72727
// begin result := [ i , weapon ] ;
72702: LD_ADDR_VAR 0 3
72706: PUSH
72707: LD_VAR 0 4
72711: PUSH
72712: LD_VAR 0 8
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: ST_TO_ADDR
// exit ;
72721: POP
72722: POP
72723: POP
72724: POP
72725: GO 72735
// end ; end ;
72727: GO 72663
72729: POP
72730: POP
// end ;
72731: GO 72549
72733: POP
72734: POP
// end ;
72735: LD_VAR 0 3
72739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72740: LD_INT 0
72742: PPUSH
// if not side or side > 8 then
72743: LD_VAR 0 3
72747: NOT
72748: PUSH
72749: LD_VAR 0 3
72753: PUSH
72754: LD_INT 8
72756: GREATER
72757: OR
72758: IFFALSE 72762
// exit ;
72760: GO 72821
// if not range then
72762: LD_VAR 0 4
72766: NOT
72767: IFFALSE 72778
// range := - 12 ;
72769: LD_ADDR_VAR 0 4
72773: PUSH
72774: LD_INT 12
72776: NEG
72777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72778: LD_VAR 0 1
72782: PPUSH
72783: LD_VAR 0 2
72787: PPUSH
72788: LD_VAR 0 3
72792: PPUSH
72793: LD_VAR 0 4
72797: PPUSH
72798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72802: LD_VAR 0 1
72806: PPUSH
72807: LD_VAR 0 2
72811: PPUSH
72812: LD_VAR 0 3
72816: PPUSH
72817: CALL_OW 331
// end ;
72821: LD_VAR 0 5
72825: RET
// export function Video ( mode ) ; begin
72826: LD_INT 0
72828: PPUSH
// ingame_video = mode ;
72829: LD_ADDR_OWVAR 52
72833: PUSH
72834: LD_VAR 0 1
72838: ST_TO_ADDR
// interface_hidden = mode ;
72839: LD_ADDR_OWVAR 54
72843: PUSH
72844: LD_VAR 0 1
72848: ST_TO_ADDR
// end ;
72849: LD_VAR 0 2
72853: RET
// export function Join ( array , element ) ; begin
72854: LD_INT 0
72856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72857: LD_ADDR_VAR 0 3
72861: PUSH
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_VAR 0 1
72871: PUSH
72872: LD_INT 1
72874: PLUS
72875: PPUSH
72876: LD_VAR 0 2
72880: PPUSH
72881: CALL_OW 1
72885: ST_TO_ADDR
// end ;
72886: LD_VAR 0 3
72890: RET
// export function JoinUnion ( array , element ) ; begin
72891: LD_INT 0
72893: PPUSH
// result := array union element ;
72894: LD_ADDR_VAR 0 3
72898: PUSH
72899: LD_VAR 0 1
72903: PUSH
72904: LD_VAR 0 2
72908: UNION
72909: ST_TO_ADDR
// end ;
72910: LD_VAR 0 3
72914: RET
// export function GetBehemoths ( side ) ; begin
72915: LD_INT 0
72917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72918: LD_ADDR_VAR 0 2
72922: PUSH
72923: LD_INT 22
72925: PUSH
72926: LD_VAR 0 1
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 31
72937: PUSH
72938: LD_INT 25
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PPUSH
72949: CALL_OW 69
72953: ST_TO_ADDR
// end ;
72954: LD_VAR 0 2
72958: RET
// export function Shuffle ( array ) ; var i , index ; begin
72959: LD_INT 0
72961: PPUSH
72962: PPUSH
72963: PPUSH
// result := [ ] ;
72964: LD_ADDR_VAR 0 2
72968: PUSH
72969: EMPTY
72970: ST_TO_ADDR
// if not array then
72971: LD_VAR 0 1
72975: NOT
72976: IFFALSE 72980
// exit ;
72978: GO 73079
// Randomize ;
72980: CALL_OW 10
// for i = array downto 1 do
72984: LD_ADDR_VAR 0 3
72988: PUSH
72989: DOUBLE
72990: LD_VAR 0 1
72994: INC
72995: ST_TO_ADDR
72996: LD_INT 1
72998: PUSH
72999: FOR_DOWNTO
73000: IFFALSE 73077
// begin index := rand ( 1 , array ) ;
73002: LD_ADDR_VAR 0 4
73006: PUSH
73007: LD_INT 1
73009: PPUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: CALL_OW 12
73019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73020: LD_ADDR_VAR 0 2
73024: PUSH
73025: LD_VAR 0 2
73029: PPUSH
73030: LD_VAR 0 2
73034: PUSH
73035: LD_INT 1
73037: PLUS
73038: PPUSH
73039: LD_VAR 0 1
73043: PUSH
73044: LD_VAR 0 4
73048: ARRAY
73049: PPUSH
73050: CALL_OW 2
73054: ST_TO_ADDR
// array := Delete ( array , index ) ;
73055: LD_ADDR_VAR 0 1
73059: PUSH
73060: LD_VAR 0 1
73064: PPUSH
73065: LD_VAR 0 4
73069: PPUSH
73070: CALL_OW 3
73074: ST_TO_ADDR
// end ;
73075: GO 72999
73077: POP
73078: POP
// end ;
73079: LD_VAR 0 2
73083: RET
// export function GetBaseMaterials ( base ) ; begin
73084: LD_INT 0
73086: PPUSH
// result := [ 0 , 0 , 0 ] ;
73087: LD_ADDR_VAR 0 2
73091: PUSH
73092: LD_INT 0
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: LIST
73105: ST_TO_ADDR
// if not base then
73106: LD_VAR 0 1
73110: NOT
73111: IFFALSE 73115
// exit ;
73113: GO 73164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73115: LD_ADDR_VAR 0 2
73119: PUSH
73120: LD_VAR 0 1
73124: PPUSH
73125: LD_INT 1
73127: PPUSH
73128: CALL_OW 275
73132: PUSH
73133: LD_VAR 0 1
73137: PPUSH
73138: LD_INT 2
73140: PPUSH
73141: CALL_OW 275
73145: PUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: LD_INT 3
73153: PPUSH
73154: CALL_OW 275
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: LIST
73163: ST_TO_ADDR
// end ;
73164: LD_VAR 0 2
73168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73169: LD_INT 0
73171: PPUSH
73172: PPUSH
// result := array ;
73173: LD_ADDR_VAR 0 3
73177: PUSH
73178: LD_VAR 0 1
73182: ST_TO_ADDR
// if size > 0 then
73183: LD_VAR 0 2
73187: PUSH
73188: LD_INT 0
73190: GREATER
73191: IFFALSE 73237
// for i := array downto size do
73193: LD_ADDR_VAR 0 4
73197: PUSH
73198: DOUBLE
73199: LD_VAR 0 1
73203: INC
73204: ST_TO_ADDR
73205: LD_VAR 0 2
73209: PUSH
73210: FOR_DOWNTO
73211: IFFALSE 73235
// result := Delete ( result , result ) ;
73213: LD_ADDR_VAR 0 3
73217: PUSH
73218: LD_VAR 0 3
73222: PPUSH
73223: LD_VAR 0 3
73227: PPUSH
73228: CALL_OW 3
73232: ST_TO_ADDR
73233: GO 73210
73235: POP
73236: POP
// end ;
73237: LD_VAR 0 3
73241: RET
// export function ComExit ( unit ) ; var tmp ; begin
73242: LD_INT 0
73244: PPUSH
73245: PPUSH
// if not IsInUnit ( unit ) then
73246: LD_VAR 0 1
73250: PPUSH
73251: CALL_OW 310
73255: NOT
73256: IFFALSE 73260
// exit ;
73258: GO 73320
// tmp := IsInUnit ( unit ) ;
73260: LD_ADDR_VAR 0 3
73264: PUSH
73265: LD_VAR 0 1
73269: PPUSH
73270: CALL_OW 310
73274: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73275: LD_VAR 0 3
73279: PPUSH
73280: CALL_OW 247
73284: PUSH
73285: LD_INT 2
73287: EQUAL
73288: IFFALSE 73301
// ComExitVehicle ( unit ) else
73290: LD_VAR 0 1
73294: PPUSH
73295: CALL_OW 121
73299: GO 73310
// ComExitBuilding ( unit ) ;
73301: LD_VAR 0 1
73305: PPUSH
73306: CALL_OW 122
// result := tmp ;
73310: LD_ADDR_VAR 0 2
73314: PUSH
73315: LD_VAR 0 3
73319: ST_TO_ADDR
// end ;
73320: LD_VAR 0 2
73324: RET
// export function ComExitAll ( units ) ; var i ; begin
73325: LD_INT 0
73327: PPUSH
73328: PPUSH
// if not units then
73329: LD_VAR 0 1
73333: NOT
73334: IFFALSE 73338
// exit ;
73336: GO 73364
// for i in units do
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: LD_VAR 0 1
73347: PUSH
73348: FOR_IN
73349: IFFALSE 73362
// ComExit ( i ) ;
73351: LD_VAR 0 3
73355: PPUSH
73356: CALL 73242 0 1
73360: GO 73348
73362: POP
73363: POP
// end ;
73364: LD_VAR 0 2
73368: RET
// export function ResetHc ; begin
73369: LD_INT 0
73371: PPUSH
// InitHc ;
73372: CALL_OW 19
// hc_importance := 0 ;
73376: LD_ADDR_OWVAR 32
73380: PUSH
73381: LD_INT 0
73383: ST_TO_ADDR
// end ;
73384: LD_VAR 0 1
73388: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73389: LD_INT 0
73391: PPUSH
73392: PPUSH
73393: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73394: LD_ADDR_VAR 0 6
73398: PUSH
73399: LD_VAR 0 1
73403: PUSH
73404: LD_VAR 0 3
73408: PLUS
73409: PUSH
73410: LD_INT 2
73412: DIV
73413: ST_TO_ADDR
// if _x < 0 then
73414: LD_VAR 0 6
73418: PUSH
73419: LD_INT 0
73421: LESS
73422: IFFALSE 73439
// _x := _x * - 1 ;
73424: LD_ADDR_VAR 0 6
73428: PUSH
73429: LD_VAR 0 6
73433: PUSH
73434: LD_INT 1
73436: NEG
73437: MUL
73438: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73439: LD_ADDR_VAR 0 7
73443: PUSH
73444: LD_VAR 0 2
73448: PUSH
73449: LD_VAR 0 4
73453: PLUS
73454: PUSH
73455: LD_INT 2
73457: DIV
73458: ST_TO_ADDR
// if _y < 0 then
73459: LD_VAR 0 7
73463: PUSH
73464: LD_INT 0
73466: LESS
73467: IFFALSE 73484
// _y := _y * - 1 ;
73469: LD_ADDR_VAR 0 7
73473: PUSH
73474: LD_VAR 0 7
73478: PUSH
73479: LD_INT 1
73481: NEG
73482: MUL
73483: ST_TO_ADDR
// result := [ _x , _y ] ;
73484: LD_ADDR_VAR 0 5
73488: PUSH
73489: LD_VAR 0 6
73493: PUSH
73494: LD_VAR 0 7
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: ST_TO_ADDR
// end ;
73503: LD_VAR 0 5
73507: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73508: LD_INT 0
73510: PPUSH
73511: PPUSH
73512: PPUSH
73513: PPUSH
// task := GetTaskList ( unit ) ;
73514: LD_ADDR_VAR 0 7
73518: PUSH
73519: LD_VAR 0 1
73523: PPUSH
73524: CALL_OW 437
73528: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73529: LD_VAR 0 7
73533: NOT
73534: PUSH
73535: LD_VAR 0 1
73539: PPUSH
73540: LD_VAR 0 2
73544: PPUSH
73545: CALL_OW 308
73549: NOT
73550: AND
73551: IFFALSE 73555
// exit ;
73553: GO 73673
// if IsInArea ( unit , area ) then
73555: LD_VAR 0 1
73559: PPUSH
73560: LD_VAR 0 2
73564: PPUSH
73565: CALL_OW 308
73569: IFFALSE 73587
// begin ComMoveToArea ( unit , goAway ) ;
73571: LD_VAR 0 1
73575: PPUSH
73576: LD_VAR 0 3
73580: PPUSH
73581: CALL_OW 113
// exit ;
73585: GO 73673
// end ; if task [ 1 ] [ 1 ] <> M then
73587: LD_VAR 0 7
73591: PUSH
73592: LD_INT 1
73594: ARRAY
73595: PUSH
73596: LD_INT 1
73598: ARRAY
73599: PUSH
73600: LD_STRING M
73602: NONEQUAL
73603: IFFALSE 73607
// exit ;
73605: GO 73673
// x := task [ 1 ] [ 2 ] ;
73607: LD_ADDR_VAR 0 5
73611: PUSH
73612: LD_VAR 0 7
73616: PUSH
73617: LD_INT 1
73619: ARRAY
73620: PUSH
73621: LD_INT 2
73623: ARRAY
73624: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73625: LD_ADDR_VAR 0 6
73629: PUSH
73630: LD_VAR 0 7
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: PUSH
73639: LD_INT 3
73641: ARRAY
73642: ST_TO_ADDR
// if InArea ( x , y , area ) then
73643: LD_VAR 0 5
73647: PPUSH
73648: LD_VAR 0 6
73652: PPUSH
73653: LD_VAR 0 2
73657: PPUSH
73658: CALL_OW 309
73662: IFFALSE 73673
// ComStop ( unit ) ;
73664: LD_VAR 0 1
73668: PPUSH
73669: CALL_OW 141
// end ;
73673: LD_VAR 0 4
73677: RET
// export function Abs ( value ) ; begin
73678: LD_INT 0
73680: PPUSH
// result := value ;
73681: LD_ADDR_VAR 0 2
73685: PUSH
73686: LD_VAR 0 1
73690: ST_TO_ADDR
// if value < 0 then
73691: LD_VAR 0 1
73695: PUSH
73696: LD_INT 0
73698: LESS
73699: IFFALSE 73716
// result := value * - 1 ;
73701: LD_ADDR_VAR 0 2
73705: PUSH
73706: LD_VAR 0 1
73710: PUSH
73711: LD_INT 1
73713: NEG
73714: MUL
73715: ST_TO_ADDR
// end ;
73716: LD_VAR 0 2
73720: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73721: LD_INT 0
73723: PPUSH
73724: PPUSH
73725: PPUSH
73726: PPUSH
73727: PPUSH
73728: PPUSH
73729: PPUSH
73730: PPUSH
// if not unit or not building then
73731: LD_VAR 0 1
73735: NOT
73736: PUSH
73737: LD_VAR 0 2
73741: NOT
73742: OR
73743: IFFALSE 73747
// exit ;
73745: GO 73973
// x := GetX ( building ) ;
73747: LD_ADDR_VAR 0 4
73751: PUSH
73752: LD_VAR 0 2
73756: PPUSH
73757: CALL_OW 250
73761: ST_TO_ADDR
// y := GetY ( building ) ;
73762: LD_ADDR_VAR 0 6
73766: PUSH
73767: LD_VAR 0 2
73771: PPUSH
73772: CALL_OW 251
73776: ST_TO_ADDR
// d := GetDir ( building ) ;
73777: LD_ADDR_VAR 0 8
73781: PUSH
73782: LD_VAR 0 2
73786: PPUSH
73787: CALL_OW 254
73791: ST_TO_ADDR
// r := 4 ;
73792: LD_ADDR_VAR 0 9
73796: PUSH
73797: LD_INT 4
73799: ST_TO_ADDR
// for i := 1 to 5 do
73800: LD_ADDR_VAR 0 10
73804: PUSH
73805: DOUBLE
73806: LD_INT 1
73808: DEC
73809: ST_TO_ADDR
73810: LD_INT 5
73812: PUSH
73813: FOR_TO
73814: IFFALSE 73971
// begin _x := ShiftX ( x , d , r + i ) ;
73816: LD_ADDR_VAR 0 5
73820: PUSH
73821: LD_VAR 0 4
73825: PPUSH
73826: LD_VAR 0 8
73830: PPUSH
73831: LD_VAR 0 9
73835: PUSH
73836: LD_VAR 0 10
73840: PLUS
73841: PPUSH
73842: CALL_OW 272
73846: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73847: LD_ADDR_VAR 0 7
73851: PUSH
73852: LD_VAR 0 6
73856: PPUSH
73857: LD_VAR 0 8
73861: PPUSH
73862: LD_VAR 0 9
73866: PUSH
73867: LD_VAR 0 10
73871: PLUS
73872: PPUSH
73873: CALL_OW 273
73877: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73878: LD_VAR 0 5
73882: PPUSH
73883: LD_VAR 0 7
73887: PPUSH
73888: CALL_OW 488
73892: PUSH
73893: LD_VAR 0 5
73897: PPUSH
73898: LD_VAR 0 7
73902: PPUSH
73903: CALL_OW 428
73907: PPUSH
73908: CALL_OW 247
73912: PUSH
73913: LD_INT 3
73915: PUSH
73916: LD_INT 2
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: IN
73923: NOT
73924: AND
73925: IFFALSE 73969
// begin ComMoveXY ( unit , _x , _y ) ;
73927: LD_VAR 0 1
73931: PPUSH
73932: LD_VAR 0 5
73936: PPUSH
73937: LD_VAR 0 7
73941: PPUSH
73942: CALL_OW 111
// result := [ _x , _y ] ;
73946: LD_ADDR_VAR 0 3
73950: PUSH
73951: LD_VAR 0 5
73955: PUSH
73956: LD_VAR 0 7
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: ST_TO_ADDR
// exit ;
73965: POP
73966: POP
73967: GO 73973
// end ; end ;
73969: GO 73813
73971: POP
73972: POP
// end ;
73973: LD_VAR 0 3
73977: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73978: LD_INT 0
73980: PPUSH
73981: PPUSH
73982: PPUSH
// result := 0 ;
73983: LD_ADDR_VAR 0 3
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73991: LD_VAR 0 1
73995: PUSH
73996: LD_INT 0
73998: LESS
73999: PUSH
74000: LD_VAR 0 1
74004: PUSH
74005: LD_INT 8
74007: GREATER
74008: OR
74009: PUSH
74010: LD_VAR 0 2
74014: PUSH
74015: LD_INT 0
74017: LESS
74018: OR
74019: PUSH
74020: LD_VAR 0 2
74024: PUSH
74025: LD_INT 8
74027: GREATER
74028: OR
74029: IFFALSE 74033
// exit ;
74031: GO 74108
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74033: LD_ADDR_VAR 0 4
74037: PUSH
74038: LD_INT 22
74040: PUSH
74041: LD_VAR 0 2
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PPUSH
74050: CALL_OW 69
74054: PUSH
74055: FOR_IN
74056: IFFALSE 74106
// begin un := UnitShoot ( i ) ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: LD_VAR 0 4
74067: PPUSH
74068: CALL_OW 504
74072: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74073: LD_VAR 0 5
74077: PPUSH
74078: CALL_OW 255
74082: PUSH
74083: LD_VAR 0 1
74087: EQUAL
74088: IFFALSE 74104
// begin result := un ;
74090: LD_ADDR_VAR 0 3
74094: PUSH
74095: LD_VAR 0 5
74099: ST_TO_ADDR
// exit ;
74100: POP
74101: POP
74102: GO 74108
// end ; end ;
74104: GO 74055
74106: POP
74107: POP
// end ;
74108: LD_VAR 0 3
74112: RET
// export function GetCargoBay ( units ) ; begin
74113: LD_INT 0
74115: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74116: LD_ADDR_VAR 0 2
74120: PUSH
74121: LD_VAR 0 1
74125: PPUSH
74126: LD_INT 2
74128: PUSH
74129: LD_INT 34
74131: PUSH
74132: LD_INT 12
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 34
74141: PUSH
74142: LD_INT 51
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 34
74151: PUSH
74152: LD_INT 32
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 34
74161: PUSH
74162: LD_EXP 49
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: PPUSH
74178: CALL_OW 72
74182: ST_TO_ADDR
// end ;
74183: LD_VAR 0 2
74187: RET
// export function Negate ( value ) ; begin
74188: LD_INT 0
74190: PPUSH
// result := not value ;
74191: LD_ADDR_VAR 0 2
74195: PUSH
74196: LD_VAR 0 1
74200: NOT
74201: ST_TO_ADDR
// end ;
74202: LD_VAR 0 2
74206: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74207: LD_INT 0
74209: PPUSH
// if x1 = x2 then
74210: LD_VAR 0 1
74214: PUSH
74215: LD_VAR 0 3
74219: EQUAL
74220: IFFALSE 74254
// begin if y1 > y2 then
74222: LD_VAR 0 2
74226: PUSH
74227: LD_VAR 0 4
74231: GREATER
74232: IFFALSE 74244
// result := 0 else
74234: LD_ADDR_VAR 0 5
74238: PUSH
74239: LD_INT 0
74241: ST_TO_ADDR
74242: GO 74252
// result := 3 ;
74244: LD_ADDR_VAR 0 5
74248: PUSH
74249: LD_INT 3
74251: ST_TO_ADDR
// exit ;
74252: GO 74340
// end ; if y1 = y2 then
74254: LD_VAR 0 2
74258: PUSH
74259: LD_VAR 0 4
74263: EQUAL
74264: IFFALSE 74298
// begin if x1 > x2 then
74266: LD_VAR 0 1
74270: PUSH
74271: LD_VAR 0 3
74275: GREATER
74276: IFFALSE 74288
// result := 1 else
74278: LD_ADDR_VAR 0 5
74282: PUSH
74283: LD_INT 1
74285: ST_TO_ADDR
74286: GO 74296
// result := 4 ;
74288: LD_ADDR_VAR 0 5
74292: PUSH
74293: LD_INT 4
74295: ST_TO_ADDR
// exit ;
74296: GO 74340
// end ; if x1 > x2 and y1 > y2 then
74298: LD_VAR 0 1
74302: PUSH
74303: LD_VAR 0 3
74307: GREATER
74308: PUSH
74309: LD_VAR 0 2
74313: PUSH
74314: LD_VAR 0 4
74318: GREATER
74319: AND
74320: IFFALSE 74332
// result := 2 else
74322: LD_ADDR_VAR 0 5
74326: PUSH
74327: LD_INT 2
74329: ST_TO_ADDR
74330: GO 74340
// result := 5 ;
74332: LD_ADDR_VAR 0 5
74336: PUSH
74337: LD_INT 5
74339: ST_TO_ADDR
// end ; end_of_file
74340: LD_VAR 0 5
74344: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74345: LD_VAR 0 1
74349: PUSH
74350: LD_INT 200
74352: DOUBLE
74353: GREATEREQUAL
74354: IFFALSE 74362
74356: LD_INT 299
74358: DOUBLE
74359: LESSEQUAL
74360: IFTRUE 74364
74362: GO 74396
74364: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74365: LD_VAR 0 1
74369: PPUSH
74370: LD_VAR 0 2
74374: PPUSH
74375: LD_VAR 0 3
74379: PPUSH
74380: LD_VAR 0 4
74384: PPUSH
74385: LD_VAR 0 5
74389: PPUSH
74390: CALL 32679 0 5
74394: GO 74473
74396: LD_INT 300
74398: DOUBLE
74399: GREATEREQUAL
74400: IFFALSE 74408
74402: LD_INT 399
74404: DOUBLE
74405: LESSEQUAL
74406: IFTRUE 74410
74408: GO 74472
74410: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74411: LD_VAR 0 1
74415: PPUSH
74416: LD_VAR 0 2
74420: PPUSH
74421: LD_VAR 0 3
74425: PPUSH
74426: LD_VAR 0 4
74430: PPUSH
74431: LD_VAR 0 5
74435: PPUSH
74436: LD_VAR 0 6
74440: PPUSH
74441: LD_VAR 0 7
74445: PPUSH
74446: LD_VAR 0 8
74450: PPUSH
74451: LD_VAR 0 9
74455: PPUSH
74456: LD_VAR 0 10
74460: PPUSH
74461: LD_VAR 0 11
74465: PPUSH
74466: CALL 30567 0 11
74470: GO 74473
74472: POP
// end ;
74473: PPOPN 11
74475: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74476: LD_VAR 0 1
74480: PPUSH
74481: LD_VAR 0 2
74485: PPUSH
74486: LD_VAR 0 3
74490: PPUSH
74491: LD_VAR 0 4
74495: PPUSH
74496: LD_VAR 0 5
74500: PPUSH
74501: CALL 32661 0 5
// end ; end_of_file
74505: PPOPN 5
74507: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74508: LD_VAR 0 1
74512: PPUSH
74513: LD_VAR 0 2
74517: PPUSH
74518: LD_VAR 0 3
74522: PPUSH
74523: LD_VAR 0 4
74527: PPUSH
74528: LD_VAR 0 5
74532: PPUSH
74533: LD_VAR 0 6
74537: PPUSH
74538: CALL 19375 0 6
// end ;
74542: PPOPN 6
74544: END
