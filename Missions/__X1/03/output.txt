// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 40129 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 40129 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 40129 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 40129 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 40129 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 40129 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 40129 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 40129 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 40129 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 40129 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 40129 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5281: LD_INT 16100
5283: PUSH
5284: LD_INT 14000
5286: PUSH
5287: LD_INT 13300
5289: PUSH
5290: LD_INT 12250
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72739 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77422 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77422 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 40192 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77848 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17180
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// DialogueOn ;
16831: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16835: LD_EXP 30
16839: PPUSH
16840: CALL_OW 87
// wait ( 0 0$1 ) ;
16844: LD_INT 35
16846: PPUSH
16847: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16851: LD_EXP 30
16855: PPUSH
16856: LD_STRING DH-1-interrogation
16858: PPUSH
16859: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16863: LD_EXP 40
16867: PPUSH
16868: LD_STRING DI-1-interrogation
16870: PPUSH
16871: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16875: LD_EXP 30
16879: PPUSH
16880: LD_STRING DH-2-interrogation
16882: PPUSH
16883: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16887: LD_EXP 40
16891: PPUSH
16892: LD_STRING DI-2-interrogation
16894: PPUSH
16895: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16899: LD_EXP 30
16903: PPUSH
16904: LD_STRING DH-3-interrogation
16906: PPUSH
16907: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16911: LD_EXP 40
16915: PPUSH
16916: LD_STRING DI-3-interrogation
16918: PPUSH
16919: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16923: LD_EXP 30
16927: PPUSH
16928: LD_STRING DH-4-interrogation
16930: PPUSH
16931: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16935: LD_EXP 40
16939: PPUSH
16940: LD_STRING DI-4-interrogation
16942: PPUSH
16943: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16947: LD_EXP 30
16951: PPUSH
16952: LD_STRING DH-5-interrogation
16954: PPUSH
16955: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16959: LD_EXP 40
16963: PPUSH
16964: LD_STRING DI-5-interrogation
16966: PPUSH
16967: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16971: LD_INT 10
16973: PPUSH
16974: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16978: LD_EXP 30
16982: PPUSH
16983: LD_STRING DH-6-interrogation
16985: PPUSH
16986: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16990: LD_EXP 40
16994: PPUSH
16995: LD_STRING DI-6-interrogation
16997: PPUSH
16998: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17002: LD_EXP 40
17006: PPUSH
17007: LD_STRING DI-7-interrogation
17009: PPUSH
17010: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17014: LD_EXP 30
17018: PPUSH
17019: LD_STRING DH-7-interrogation
17021: PPUSH
17022: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17026: LD_INT 10
17028: PPUSH
17029: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17033: LD_EXP 30
17037: PPUSH
17038: LD_STRING DH-8-interrogation
17040: PPUSH
17041: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17045: LD_EXP 40
17049: PPUSH
17050: LD_STRING DI-8-interrogation
17052: PPUSH
17053: CALL_OW 88
// wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// DialogueOff ;
17064: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17068: LD_STRING IbrahimDecisionQuery
17070: PPUSH
17071: CALL_OW 97
17075: PUSH
17076: LD_INT 1
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17108
17084: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17085: LD_EXP 40
17089: PPUSH
17090: LD_STRING DI-1-kill
17092: PPUSH
17093: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17097: LD_EXP 40
17101: PPUSH
17102: CALL_OW 66
// end ; 2 :
17106: GO 17174
17108: LD_INT 2
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17173
17116: POP
// begin SetSide ( Ibrahim , 6 ) ;
17117: LD_EXP 40
17121: PPUSH
17122: LD_INT 6
17124: PPUSH
17125: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17129: LD_EXP 40
17133: PPUSH
17134: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17138: LD_EXP 40
17142: PPUSH
17143: LD_INT 66
17145: PPUSH
17146: LD_INT 2
17148: PPUSH
17149: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17153: LD_EXP 40
17157: PPUSH
17158: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17162: LD_EXP 30
17166: PPUSH
17167: CALL_OW 122
// end ; end ;
17171: GO 17174
17173: POP
// InGameOff ;
17174: CALL_OW 9
// end ; 2 :
17178: GO 17194
17180: LD_INT 2
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17193
17188: POP
// exit ; end ;
17189: GO 17278
17191: GO 17194
17193: POP
// allowConvoys := true ;
17194: LD_ADDR_EXP 13
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// blockAttack := false ;
17202: LD_ADDR_EXP 29
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17210: LD_INT 5250
17212: PPUSH
17213: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17217: LD_INT 35
17219: PPUSH
17220: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17224: LD_INT 81
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: NOT
17253: IFFALSE 17217
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17255: LD_EXP 40
17259: PPUSH
17260: LD_INT 34
17262: PPUSH
17263: LD_INT 21
17265: PPUSH
17266: CALL_OW 111
// ibrahimIsFree := true ;
17270: LD_ADDR_EXP 27
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// end ;
17278: LD_VAR 0 1
17282: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17283: LD_EXP 27
17287: PUSH
17288: LD_EXP 40
17292: PPUSH
17293: CALL_OW 302
17297: AND
17298: PUSH
17299: LD_INT 2
17301: PPUSH
17302: LD_EXP 40
17306: PPUSH
17307: CALL_OW 292
17311: AND
17312: IFFALSE 18124
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
// begin wait ( 0 0$10 ) ;
17325: LD_INT 350
17327: PPUSH
17328: CALL_OW 67
// allowConvoys := false ;
17332: LD_ADDR_EXP 13
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// blockAttack := true ;
17340: LD_ADDR_EXP 29
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
// depot := usDepot ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_INT 11
17355: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17356: LD_INT 11
17358: NOT
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 50
17372: PUSH
17373: EMPTY
17374: LIST
17375: PUSH
17376: LD_INT 30
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: AND
17396: IFFALSE 17443
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17398: LD_ADDR_VAR 0 4
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 50
17415: PUSH
17416: EMPTY
17417: LIST
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: ST_TO_ADDR
// InGameOn ;
17443: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17447: LD_EXP 40
17451: PPUSH
17452: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17456: LD_EXP 30
17460: PPUSH
17461: LD_EXP 40
17465: PPUSH
17466: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17470: LD_EXP 40
17474: PPUSH
17475: LD_EXP 30
17479: PPUSH
17480: CALL_OW 119
// DialogueOn ;
17484: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17488: LD_EXP 40
17492: PPUSH
17493: LD_STRING DI-1-free
17495: PPUSH
17496: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17500: LD_EXP 30
17504: PPUSH
17505: LD_STRING DH-1-free
17507: PPUSH
17508: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17512: LD_EXP 40
17516: PPUSH
17517: LD_STRING DI-2-free
17519: PPUSH
17520: CALL_OW 88
// changeClass := 0 ;
17524: LD_ADDR_VAR 0 1
17528: PUSH
17529: LD_INT 0
17531: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17532: LD_STRING IbrahimJoinQuery
17534: PPUSH
17535: CALL_OW 97
17539: PUSH
17540: LD_INT 1
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 17559
17548: POP
// begin changeClass := 1 ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 1
17556: ST_TO_ADDR
// end ; 2 :
17557: GO 17811
17559: LD_INT 2
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17731
17567: POP
// begin Say ( Heike , DH-1-decline ) ;
17568: LD_EXP 30
17572: PPUSH
17573: LD_STRING DH-1-decline
17575: PPUSH
17576: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17580: LD_EXP 40
17584: PPUSH
17585: LD_STRING DI-1-decline
17587: PPUSH
17588: CALL_OW 88
// DialogueOff ;
17592: CALL_OW 7
// InGameOff ;
17596: CALL_OW 9
// blockAttack := false ;
17600: LD_ADDR_EXP 29
17604: PUSH
17605: LD_INT 0
17607: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17608: LD_EXP 40
17612: PPUSH
17613: LD_INT 30
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 111
// p := 0 ;
17623: LD_ADDR_VAR 0 3
17627: PUSH
17628: LD_INT 0
17630: ST_TO_ADDR
// repeat p := p + 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 1
17643: PLUS
17644: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17645: LD_INT 35
17647: PPUSH
17648: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17652: LD_EXP 40
17656: PPUSH
17657: LD_INT 30
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 307
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 101
17680: PUSH
17681: LD_INT 6
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: NOT
17697: OR
17698: PUSH
17699: LD_VAR 0 3
17703: PUSH
17704: LD_INT 10
17706: GREATER
17707: OR
17708: IFFALSE 17631
// RemoveUnit ( Ibrahim ) ;
17710: LD_EXP 40
17714: PPUSH
17715: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_STRING 03_IbrahimHasEscaped
17724: PPUSH
17725: CALL_OW 39
// end ; 3 :
17729: GO 17811
17731: LD_INT 3
17733: DOUBLE
17734: EQUAL
17735: IFTRUE 17739
17737: GO 17810
17739: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17740: LD_EXP 30
17744: PPUSH
17745: LD_STRING DH-1-radio-hq
17747: PPUSH
17748: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17752: LD_EXP 39
17756: PPUSH
17757: LD_STRING DO-1-radio-hq
17759: PPUSH
17760: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17764: LD_EXP 30
17768: PPUSH
17769: LD_STRING DH-2-radio-hq
17771: PPUSH
17772: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17776: LD_EXP 39
17780: PPUSH
17781: LD_STRING DO-2-radio-hq
17783: PPUSH
17784: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17788: LD_EXP 30
17792: PPUSH
17793: LD_STRING DH-3-radio-hq
17795: PPUSH
17796: CALL_OW 88
// changeClass := 1 ;
17800: LD_ADDR_VAR 0 1
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// end ; end ;
17808: GO 17811
17810: POP
// if changeClass then
17811: LD_VAR 0 1
17815: IFFALSE 18124
// begin Say ( Heike , DH-1-agree ) ;
17817: LD_EXP 30
17821: PPUSH
17822: LD_STRING DH-1-agree
17824: PPUSH
17825: CALL_OW 88
// if IsOk ( Givi ) then
17829: LD_EXP 31
17833: PPUSH
17834: CALL_OW 302
17838: IFFALSE 17876
// begin Say ( Givi , DG-1-agree ) ;
17840: LD_EXP 31
17844: PPUSH
17845: LD_STRING DG-1-agree
17847: PPUSH
17848: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17852: LD_EXP 30
17856: PPUSH
17857: LD_STRING DH-2-agree
17859: PPUSH
17860: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17864: LD_EXP 31
17868: PPUSH
17869: LD_STRING DG-2-agree
17871: PPUSH
17872: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17876: LD_EXP 40
17880: PPUSH
17881: CALL_OW 87
// DialogueOff ;
17885: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17889: LD_VAR 0 4
17893: PPUSH
17894: CALL_OW 313
17898: PUSH
17899: LD_INT 6
17901: EQUAL
17902: IFFALSE 17922
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 313
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17922: LD_EXP 40
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17934: LD_ADDR_VAR 0 5
17938: PUSH
17939: LD_EXP 40
17943: PPUSH
17944: CALL_OW 250
17948: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17949: LD_ADDR_VAR 0 6
17953: PUSH
17954: LD_EXP 40
17958: PPUSH
17959: CALL_OW 251
17963: ST_TO_ADDR
// if depot then
17964: LD_VAR 0 4
17968: IFFALSE 18017
// begin ComEnterUnit ( Ibrahim , depot ) ;
17970: LD_EXP 40
17974: PPUSH
17975: LD_VAR 0 4
17979: PPUSH
17980: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17984: LD_INT 35
17986: PPUSH
17987: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17991: LD_EXP 40
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 17984
// b := IsInUnit ( Ibrahim ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_EXP 40
18011: PPUSH
18012: CALL_OW 310
18016: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18017: LD_EXP 40
18021: PPUSH
18022: CALL_OW 64
// uc_side := 2 ;
18026: LD_ADDR_OWVAR 20
18030: PUSH
18031: LD_INT 2
18033: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18034: LD_ADDR_EXP 40
18038: PUSH
18039: LD_STRING Ibrahim
18041: PPUSH
18042: LD_INT 0
18044: PPUSH
18045: LD_STRING 
18047: PPUSH
18048: CALL 40129 0 3
18052: ST_TO_ADDR
// if depot then
18053: LD_VAR 0 4
18057: IFFALSE 18075
// PlaceHumanInUnit ( Ibrahim , b ) else
18059: LD_EXP 40
18063: PPUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 52
18073: GO 18097
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18075: LD_EXP 40
18079: PPUSH
18080: LD_VAR 0 5
18084: PPUSH
18085: LD_VAR 0 6
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 48
// InGameOff ;
18097: CALL_OW 9
// allowConvoys := true ;
18101: LD_ADDR_EXP 13
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// blockAttack := false ;
18109: LD_ADDR_EXP 29
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18117: LD_STRING ACH_IBRAHIM
18119: PPUSH
18120: CALL_OW 543
// end ; end ;
18124: PPOPN 6
18126: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18127: LD_EXP 35
18131: PPUSH
18132: CALL_OW 256
18136: PUSH
18137: LD_INT 3
18139: LESS
18140: IFFALSE 18207
18142: GO 18144
18144: DISABLE
// begin DialogueOn ;
18145: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18149: LD_EXP 35
18153: PPUSH
18154: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18158: LD_EXP 35
18162: PPUSH
18163: LD_STRING DK-keydeath-1
18165: PPUSH
18166: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18170: LD_EXP 30
18174: PPUSH
18175: LD_STRING DH-keydeath-2
18177: PPUSH
18178: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18182: LD_EXP 30
18186: PPUSH
18187: LD_STRING DH-keydeath-3
18189: PPUSH
18190: CALL_OW 88
// DialogueOff ;
18194: CALL_OW 7
// KillUnit ( Kaia ) ;
18198: LD_EXP 35
18202: PPUSH
18203: CALL_OW 66
// end ;
18207: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18208: LD_EXP 12
18212: PUSH
18213: LD_EXP 22
18217: PUSH
18218: LD_INT 1
18220: LESS
18221: AND
18222: IFFALSE 18779
18224: GO 18226
18226: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18227: LD_INT 22
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: IFFALSE 18351
// begin ChangeSideFog ( 1 , 2 ) ;
18275: LD_INT 1
18277: PPUSH
18278: LD_INT 2
18280: PPUSH
18281: CALL_OW 343
// Query ( DestroyEnemy ) ;
18285: LD_STRING DestroyEnemy
18287: PPUSH
18288: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18292: LD_INT 35
18294: PPUSH
18295: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18299: LD_INT 22
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 25
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 69
18345: PUSH
18346: LD_INT 0
18348: EQUAL
18349: IFFALSE 18292
// end ; if tick <= 45 45$00 then
18351: LD_OWVAR 1
18355: PUSH
18356: LD_INT 94500
18358: LESSEQUAL
18359: IFFALSE 18368
// SetAchievement ( ACH_HSPEED_3 ) ;
18361: LD_STRING ACH_HSPEED_3
18363: PPUSH
18364: CALL_OW 543
// DialogueOn ;
18368: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18372: LD_EXP 30
18376: PPUSH
18377: LD_STRING DH-1-final
18379: PPUSH
18380: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18384: LD_OWVAR 1
18388: PUSH
18389: LD_INT 138600
18391: PUSH
18392: LD_INT 134400
18394: PUSH
18395: LD_INT 130200
18397: PUSH
18398: LD_INT 126000
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_OWVAR 67
18411: ARRAY
18412: LESSEQUAL
18413: IFFALSE 18427
// AddMedal ( med1 , 1 ) else
18415: LD_STRING med1
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 101
18425: GO 18438
// AddMedal ( med1 , - 1 ) ;
18427: LD_STRING med1
18429: PPUSH
18430: LD_INT 1
18432: NEG
18433: PPUSH
18434: CALL_OW 101
// if vehCounter >= 2 then
18438: LD_EXP 23
18442: PUSH
18443: LD_INT 2
18445: GREATEREQUAL
18446: IFFALSE 18460
// AddMedal ( med2 , 1 ) else
18448: LD_STRING med2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 101
18458: GO 18471
// AddMedal ( med2 , - 1 ) ;
18460: LD_STRING med2
18462: PPUSH
18463: LD_INT 1
18465: NEG
18466: PPUSH
18467: CALL_OW 101
// if deadCounter = 0 then
18471: LD_EXP 10
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: IFFALSE 18493
// AddMedal ( med3 , 1 ) else
18481: LD_STRING med3
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 101
18491: GO 18504
// AddMedal ( med3 , - 1 ) ;
18493: LD_STRING med3
18495: PPUSH
18496: LD_INT 1
18498: NEG
18499: PPUSH
18500: CALL_OW 101
// GiveMedals ( MAIN ) ;
18504: LD_STRING MAIN
18506: PPUSH
18507: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18511: LD_INT 22
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 23
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 21
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: PPUSH
18551: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18555: LD_EXP 30
18559: PPUSH
18560: LD_STRING 03_Heike
18562: PPUSH
18563: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18567: LD_EXP 34
18571: PPUSH
18572: LD_STRING 03_Aviradze
18574: PPUSH
18575: CALL_OW 38
// if Givi then
18579: LD_EXP 31
18583: IFFALSE 18597
// SaveCharacters ( Givi , 03_Givi ) ;
18585: LD_EXP 31
18589: PPUSH
18590: LD_STRING 03_Givi
18592: PPUSH
18593: CALL_OW 38
// if Mike then
18597: LD_EXP 32
18601: IFFALSE 18615
// SaveCharacters ( Mike , 03_Mike ) ;
18603: LD_EXP 32
18607: PPUSH
18608: LD_STRING 03_Mike
18610: PPUSH
18611: CALL_OW 38
// if Kamil then
18615: LD_EXP 33
18619: IFFALSE 18633
// SaveCharacters ( Kamil , 03_Kamil ) ;
18621: LD_EXP 33
18625: PPUSH
18626: LD_STRING 03_Kamil
18628: PPUSH
18629: CALL_OW 38
// if Kaia then
18633: LD_EXP 35
18637: IFFALSE 18651
// SaveCharacters ( Kaia , 03_Kaia ) ;
18639: LD_EXP 35
18643: PPUSH
18644: LD_STRING 03_Kaia
18646: PPUSH
18647: CALL_OW 38
// if Sophia then
18651: LD_EXP 36
18655: IFFALSE 18669
// SaveCharacters ( Sophia , 03_Sophia ) ;
18657: LD_EXP 36
18661: PPUSH
18662: LD_STRING 03_Sophia
18664: PPUSH
18665: CALL_OW 38
// if Markov then
18669: LD_EXP 37
18673: IFFALSE 18687
// SaveCharacters ( Markov , 03_Markov ) ;
18675: LD_EXP 37
18679: PPUSH
18680: LD_STRING 03_Markov
18682: PPUSH
18683: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18687: LD_EXP 40
18691: PUSH
18692: LD_EXP 40
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 2
18704: EQUAL
18705: AND
18706: IFFALSE 18727
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18708: LD_STRING enableBioCharacter(BIO_IBRA)
18710: PPUSH
18711: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18715: LD_EXP 40
18719: PPUSH
18720: LD_STRING 03_Ibrahim
18722: PPUSH
18723: CALL_OW 38
// end ; if heikeSecondSquad then
18727: LD_EXP 44
18731: IFFALSE 18745
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18733: LD_EXP 44
18737: PPUSH
18738: LD_STRING 03_others
18740: PPUSH
18741: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18745: LD_EXP 10
18749: PPUSH
18750: LD_STRING 03_DeadCounter
18752: PPUSH
18753: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18757: LD_STRING enableBioCharacter(BIO_OMAR)
18759: PPUSH
18760: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18764: LD_STRING enableBioCharacter(BIO_FARM)
18766: PPUSH
18767: CALL_OW 559
// YouWin ;
18771: CALL_OW 103
// DialogueOff ;
18775: CALL_OW 7
// end ; end_of_file
18779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL 35840 0 1
// if un = Heike then
18789: LD_VAR 0 1
18793: PUSH
18794: LD_EXP 30
18798: EQUAL
18799: IFFALSE 18808
// YouLost ( Heike ) ;
18801: LD_STRING Heike
18803: PPUSH
18804: CALL_OW 104
// if un = Aviradze then
18808: LD_VAR 0 1
18812: PUSH
18813: LD_EXP 34
18817: EQUAL
18818: IFFALSE 18827
// YouLost ( Aviradze ) ;
18820: LD_STRING Aviradze
18822: PPUSH
18823: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18827: LD_VAR 0 1
18831: PUSH
18832: LD_INT 11
18834: EQUAL
18835: PUSH
18836: LD_EXP 12
18840: NOT
18841: AND
18842: IFFALSE 18851
// YouLost ( Depot ) ;
18844: LD_STRING Depot
18846: PPUSH
18847: CALL_OW 104
// if un = arDepot then
18851: LD_VAR 0 1
18855: PUSH
18856: LD_INT 5
18858: EQUAL
18859: IFFALSE 18868
// YouLost ( FarmerDepot ) ;
18861: LD_STRING FarmerDepot
18863: PPUSH
18864: CALL_OW 104
// if un = Farmer then
18868: LD_VAR 0 1
18872: PUSH
18873: LD_EXP 38
18877: EQUAL
18878: IFFALSE 18887
// YouLost ( Farmer ) ;
18880: LD_STRING Farmer
18882: PPUSH
18883: CALL_OW 104
// if un in usForces then
18887: LD_VAR 0 1
18891: PUSH
18892: LD_EXP 46
18896: IN
18897: IFFALSE 18915
// usForces := usForces diff un ;
18899: LD_ADDR_EXP 46
18903: PUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_VAR 0 1
18913: DIFF
18914: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18915: LD_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 23
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: IN
18960: IFFALSE 18976
// deadCounter := deadCounter + 1 ;
18962: LD_ADDR_EXP 10
18966: PUSH
18967: LD_EXP 10
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18976: LD_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 4
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 34
18993: PUSH
18994: LD_INT 12
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: IN
19010: PUSH
19011: LD_EXP 19
19015: NOT
19016: AND
19017: IFFALSE 19027
// firstConvoyDestroyed := true ;
19019: LD_ADDR_EXP 19
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if un in usAttackers then
19027: LD_VAR 0 1
19031: PUSH
19032: LD_EXP 49
19036: IN
19037: IFFALSE 19055
// usAttackers := usAttackers diff un ;
19039: LD_ADDR_EXP 49
19043: PUSH
19044: LD_EXP 49
19048: PUSH
19049: LD_VAR 0 1
19053: DIFF
19054: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19055: LD_VAR 0 1
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: IN
19089: IFFALSE 19105
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19091: LD_ADDR_EXP 21
19095: PUSH
19096: LD_EXP 21
19100: PUSH
19101: LD_INT 1
19103: PLUS
19104: ST_TO_ADDR
// end ;
19105: PPOPN 1
19107: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19108: LD_VAR 0 2
19112: PUSH
19113: LD_EXP 40
19117: EQUAL
19118: PUSH
19119: LD_EXP 26
19123: AND
19124: IFFALSE 19309
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19126: LD_INT 22
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 30
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 50
19148: PUSH
19149: EMPTY
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: IFFALSE 19215
// begin InGameOn ;
19163: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19167: LD_EXP 40
19171: PPUSH
19172: LD_INT 11
19174: PPUSH
19175: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19179: LD_INT 35
19181: PPUSH
19182: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19186: LD_EXP 40
19190: PPUSH
19191: LD_INT 11
19193: PPUSH
19194: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19198: LD_EXP 40
19202: PPUSH
19203: CALL_OW 310
19207: IFFALSE 19179
// InGameOff ;
19209: CALL_OW 9
// end else
19213: GO 19309
// begin SetSide ( Ibrahim , 6 ) ;
19215: LD_EXP 40
19219: PPUSH
19220: LD_INT 6
19222: PPUSH
19223: CALL_OW 235
// ibrahimInDepot := false ;
19227: LD_ADDR_EXP 26
19231: PUSH
19232: LD_INT 0
19234: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19235: LD_EXP 40
19239: PPUSH
19240: LD_INT 30
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19250: LD_INT 35
19252: PPUSH
19253: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19257: LD_EXP 40
19261: PPUSH
19262: LD_INT 30
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19272: LD_EXP 40
19276: PPUSH
19277: LD_INT 30
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 307
19287: PUSH
19288: LD_EXP 40
19292: PPUSH
19293: CALL_OW 301
19297: OR
19298: IFFALSE 19250
// RemoveUnit ( Ibrahim ) ;
19300: LD_EXP 40
19304: PPUSH
19305: CALL_OW 64
// end ; end ; end ;
19309: PPOPN 2
19311: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_EXP 30
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 1
19327: PUSH
19328: LD_INT 11
19330: EQUAL
19331: AND
19332: PUSH
19333: LD_EXP 26
19337: AND
19338: IFFALSE 19344
// IbrahimQuery ;
19340: CALL 16791 0 0
// end ;
19344: PPOPN 2
19346: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 141
// if oldId in usAttackers then
19356: LD_VAR 0 2
19360: PUSH
19361: LD_EXP 49
19365: IN
19366: IFFALSE 19384
// usAttackers := usAttackers diff oldId ;
19368: LD_ADDR_EXP 49
19372: PUSH
19373: LD_EXP 49
19377: PUSH
19378: LD_VAR 0 2
19382: DIFF
19383: ST_TO_ADDR
// if newId in usAttackers then
19384: LD_VAR 0 1
19388: PUSH
19389: LD_EXP 49
19393: IN
19394: IFFALSE 19412
// usAttackers := usAttackers diff newId ;
19396: LD_ADDR_EXP 49
19400: PUSH
19401: LD_EXP 49
19405: PUSH
19406: LD_VAR 0 1
19410: DIFF
19411: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 4
19419: EQUAL
19420: PUSH
19421: LD_EXP 19
19425: NOT
19426: AND
19427: IFFALSE 19437
// firstConvoyDestroyed := true ;
19429: LD_ADDR_EXP 19
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 264
19446: PUSH
19447: LD_INT 12
19449: EQUAL
19450: IFFALSE 19488
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19452: LD_ADDR_EXP 14
19456: PUSH
19457: LD_EXP 14
19461: PUSH
19462: LD_INT 1
19464: PLUS
19465: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 289
19478: PUSH
19479: LD_INT 0
19481: EQUAL
19482: IFFALSE 19488
// EmptyCargoDialog ;
19484: CALL 15409 0 0
// end ; end ;
19488: PPOPN 4
19490: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19491: LD_VAR 0 1
19495: PUSH
19496: LD_INT 2
19498: EQUAL
19499: PUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 5
19507: EQUAL
19508: AND
19509: IFFALSE 19518
// YouLost ( Attack ) ;
19511: LD_STRING Attack
19513: PPUSH
19514: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 2
19525: EQUAL
19526: PUSH
19527: LD_VAR 0 2
19531: PUSH
19532: LD_INT 1
19534: EQUAL
19535: AND
19536: IFFALSE 19546
// americanContact := true ;
19538: LD_ADDR_EXP 5
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// end ;
19546: PPOPN 2
19548: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 255
19558: PUSH
19559: LD_INT 1
19561: EQUAL
19562: PUSH
19563: LD_EXP 7
19567: NOT
19568: AND
19569: IFFALSE 19703
// begin if GetBType ( b ) = b_lab then
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 266
19580: PUSH
19581: LD_INT 6
19583: EQUAL
19584: IFFALSE 19624
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19586: LD_EXP 46
19590: PPUSH
19591: LD_INT 25
19593: PUSH
19594: LD_INT 4
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 72
19605: PPUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 120
// AmLabResearch ( b ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 266
19633: PUSH
19634: LD_INT 4
19636: EQUAL
19637: IFFALSE 19685
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19639: LD_EXP 46
19643: PPUSH
19644: LD_INT 25
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: PUSH
19657: LD_INT 54
19659: PUSH
19660: EMPTY
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 72
19675: PPUSH
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19685: LD_ADDR_EXP 48
19689: PUSH
19690: LD_EXP 48
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 3
19702: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 255
19712: PUSH
19713: LD_INT 5
19715: EQUAL
19716: IFFALSE 19730
// SetBLevel ( b , 5 ) ;
19718: LD_VAR 0 1
19722: PPUSH
19723: LD_INT 5
19725: PPUSH
19726: CALL_OW 241
// end ;
19730: PPOPN 1
19732: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 255
19742: PUSH
19743: LD_INT 2
19745: EQUAL
19746: IFFALSE 19762
// vehCounter := vehCounter + 1 ;
19748: LD_ADDR_EXP 23
19752: PUSH
19753: LD_EXP 23
19757: PUSH
19758: LD_INT 1
19760: PLUS
19761: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 2
19771: PPUSH
19772: CALL 35960 0 2
// end ;
19776: PPOPN 2
19778: END
// on SailEvent ( event ) do begin if event = eventAttack then
19779: LD_VAR 0 1
19783: PUSH
19784: LD_EXP 25
19788: EQUAL
19789: IFFALSE 19795
// AmericanAttack ;
19791: CALL 6778 0 0
// end ; end_of_file
19795: PPOPN 1
19797: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19798: LD_OWVAR 1
19802: PUSH
19803: LD_INT 10500
19805: PUSH
19806: LD_INT 9800
19808: PUSH
19809: LD_INT 9450
19811: PUSH
19812: LD_INT 9100
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: LD_OWVAR 67
19825: ARRAY
19826: LESSEQUAL
19827: IFFALSE 19854
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19833: LD_INT 1
19835: PPUSH
19836: LD_INT 5
19838: PPUSH
19839: CALL_OW 12
19843: PPUSH
19844: LD_INT 9
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 55
// end ;
19854: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19855: LD_EXP 7
19859: PUSH
19860: LD_OWVAR 1
19864: PUSH
19865: LD_INT 94500
19867: LESSEQUAL
19868: AND
19869: IFFALSE 19896
19871: GO 19873
19873: DISABLE
// begin enable ;
19874: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 5
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: LD_INT 9
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: CALL_OW 55
// end ; end_of_file
19896: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19897: LD_EXP 12
19901: NOT
19902: PUSH
19903: LD_EXP 17
19907: AND
19908: PUSH
19909: LD_EXP 4
19913: AND
19914: PUSH
19915: LD_EXP 16
19919: PUSH
19920: LD_EXP 17
19924: LESSEQUAL
19925: AND
19926: IFFALSE 20037
19928: GO 19930
19930: DISABLE
// begin enable ;
19931: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19932: LD_ADDR_OWVAR 47
19936: PUSH
19937: LD_STRING #X103-1
19939: PUSH
19940: LD_EXP 17
19944: PUSH
19945: LD_EXP 16
19949: MINUS
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19955: LD_ADDR_EXP 16
19959: PUSH
19960: LD_INT 5
19962: PPUSH
19963: CALL_OW 274
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 275
19975: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19976: LD_INT 10
19978: PPUSH
19979: LD_INT 1
19981: PPUSH
19982: CALL_OW 287
19986: PUSH
19987: LD_INT 0
19989: EQUAL
19990: IFFALSE 20008
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19992: LD_ADDR_EXP 18
19996: PUSH
19997: LD_EXP 18
20001: PUSH
20002: LD_INT 35
20004: MINUS
20005: ST_TO_ADDR
20006: GO 20037
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20008: LD_ADDR_EXP 18
20012: PUSH
20013: LD_INT 42000
20015: PUSH
20016: LD_INT 31500
20018: PUSH
20019: LD_INT 25200
20021: PUSH
20022: LD_INT 21000
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: LD_OWVAR 67
20035: ARRAY
20036: ST_TO_ADDR
// end ; end_of_file
20037: END
// export globalGameSaveCounter ; every 0 0$1 do
20038: GO 20040
20040: DISABLE
// begin enable ;
20041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20042: LD_STRING updateTimer(
20044: PUSH
20045: LD_OWVAR 1
20049: STR
20050: PUSH
20051: LD_STRING );
20053: STR
20054: PPUSH
20055: CALL_OW 559
// end ;
20059: END
// every 0 0$1 do
20060: GO 20062
20062: DISABLE
// begin globalGameSaveCounter := 0 ;
20063: LD_ADDR_EXP 50
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20071: LD_STRING setGameSaveCounter(0)
20073: PPUSH
20074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20078: LD_STRING initStreamRollete();
20080: PPUSH
20081: CALL_OW 559
// InitStreamMode ;
20085: CALL 21411 0 0
// DefineStreamItems ( false ) ;
20089: LD_INT 0
20091: PPUSH
20092: CALL 21875 0 1
// end ;
20096: END
// export function SOS_MapStart ( ) ; begin
20097: LD_INT 0
20099: PPUSH
// if streamModeActive then
20100: LD_EXP 51
20104: IFFALSE 20113
// DefineStreamItems ( true ) ;
20106: LD_INT 1
20108: PPUSH
20109: CALL 21875 0 1
// UpdateLuaVariables ( ) ;
20113: CALL 20130 0 0
// UpdateFactoryWaypoints ( ) ;
20117: CALL 34744 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20121: CALL 35001 0 0
// end ;
20125: LD_VAR 0 1
20129: RET
// function UpdateLuaVariables ( ) ; begin
20130: LD_INT 0
20132: PPUSH
// if globalGameSaveCounter then
20133: LD_EXP 50
20137: IFFALSE 20171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20139: LD_ADDR_EXP 50
20143: PUSH
20144: LD_EXP 50
20148: PPUSH
20149: CALL 78811 0 1
20153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20154: LD_STRING setGameSaveCounter(
20156: PUSH
20157: LD_EXP 50
20161: STR
20162: PUSH
20163: LD_STRING )
20165: STR
20166: PPUSH
20167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20171: LD_STRING setGameDifficulty(
20173: PUSH
20174: LD_OWVAR 67
20178: STR
20179: PUSH
20180: LD_STRING )
20182: STR
20183: PPUSH
20184: CALL_OW 559
// end ;
20188: LD_VAR 0 1
20192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20193: LD_INT 0
20195: PPUSH
// if p2 = stream_mode then
20196: LD_VAR 0 2
20200: PUSH
20201: LD_INT 100
20203: EQUAL
20204: IFFALSE 21207
// begin if not StreamModeActive then
20206: LD_EXP 51
20210: NOT
20211: IFFALSE 20221
// StreamModeActive := true ;
20213: LD_ADDR_EXP 51
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 0 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 0
20228: EQUAL
20229: IFFALSE 20235
// InitStreamMode ;
20231: CALL 21411 0 0
// if p3 = 1 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 1
20242: EQUAL
20243: IFFALSE 20253
// sRocket := true ;
20245: LD_ADDR_EXP 56
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 2 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 2
20260: EQUAL
20261: IFFALSE 20271
// sSpeed := true ;
20263: LD_ADDR_EXP 55
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 3 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 3
20278: EQUAL
20279: IFFALSE 20289
// sEngine := true ;
20281: LD_ADDR_EXP 57
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 4 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 4
20296: EQUAL
20297: IFFALSE 20307
// sSpec := true ;
20299: LD_ADDR_EXP 54
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 5 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 5
20314: EQUAL
20315: IFFALSE 20325
// sLevel := true ;
20317: LD_ADDR_EXP 58
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 6 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 6
20332: EQUAL
20333: IFFALSE 20343
// sArmoury := true ;
20335: LD_ADDR_EXP 59
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 7 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 7
20350: EQUAL
20351: IFFALSE 20361
// sRadar := true ;
20353: LD_ADDR_EXP 60
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 8 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 8
20368: EQUAL
20369: IFFALSE 20379
// sBunker := true ;
20371: LD_ADDR_EXP 61
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 9 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 9
20386: EQUAL
20387: IFFALSE 20397
// sHack := true ;
20389: LD_ADDR_EXP 62
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 10 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 10
20404: EQUAL
20405: IFFALSE 20415
// sFire := true ;
20407: LD_ADDR_EXP 63
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 11 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 11
20422: EQUAL
20423: IFFALSE 20433
// sRefresh := true ;
20425: LD_ADDR_EXP 64
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 12 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 12
20440: EQUAL
20441: IFFALSE 20451
// sExp := true ;
20443: LD_ADDR_EXP 65
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 13 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 13
20458: EQUAL
20459: IFFALSE 20469
// sDepot := true ;
20461: LD_ADDR_EXP 66
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 14 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 14
20476: EQUAL
20477: IFFALSE 20487
// sFlag := true ;
20479: LD_ADDR_EXP 67
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 15 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 15
20494: EQUAL
20495: IFFALSE 20505
// sKamikadze := true ;
20497: LD_ADDR_EXP 75
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 16 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 16
20512: EQUAL
20513: IFFALSE 20523
// sTroll := true ;
20515: LD_ADDR_EXP 76
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 17 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 17
20530: EQUAL
20531: IFFALSE 20541
// sSlow := true ;
20533: LD_ADDR_EXP 77
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 18 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 18
20548: EQUAL
20549: IFFALSE 20559
// sLack := true ;
20551: LD_ADDR_EXP 78
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 19 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 19
20566: EQUAL
20567: IFFALSE 20577
// sTank := true ;
20569: LD_ADDR_EXP 80
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 20 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 20
20584: EQUAL
20585: IFFALSE 20595
// sRemote := true ;
20587: LD_ADDR_EXP 81
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 21 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 21
20602: EQUAL
20603: IFFALSE 20613
// sPowell := true ;
20605: LD_ADDR_EXP 82
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 22 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 22
20620: EQUAL
20621: IFFALSE 20631
// sTeleport := true ;
20623: LD_ADDR_EXP 85
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 23 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 23
20638: EQUAL
20639: IFFALSE 20649
// sOilTower := true ;
20641: LD_ADDR_EXP 87
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 24 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 24
20656: EQUAL
20657: IFFALSE 20667
// sShovel := true ;
20659: LD_ADDR_EXP 88
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 25 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 25
20674: EQUAL
20675: IFFALSE 20685
// sSheik := true ;
20677: LD_ADDR_EXP 89
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 26 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 26
20692: EQUAL
20693: IFFALSE 20703
// sEarthquake := true ;
20695: LD_ADDR_EXP 91
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 27 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 27
20710: EQUAL
20711: IFFALSE 20721
// sAI := true ;
20713: LD_ADDR_EXP 92
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 28 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 28
20728: EQUAL
20729: IFFALSE 20739
// sCargo := true ;
20731: LD_ADDR_EXP 95
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 29 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 29
20746: EQUAL
20747: IFFALSE 20757
// sDLaser := true ;
20749: LD_ADDR_EXP 96
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 30 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 30
20764: EQUAL
20765: IFFALSE 20775
// sExchange := true ;
20767: LD_ADDR_EXP 97
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 31 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 31
20782: EQUAL
20783: IFFALSE 20793
// sFac := true ;
20785: LD_ADDR_EXP 98
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 32 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 32
20800: EQUAL
20801: IFFALSE 20811
// sPower := true ;
20803: LD_ADDR_EXP 99
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 33 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 33
20818: EQUAL
20819: IFFALSE 20829
// sRandom := true ;
20821: LD_ADDR_EXP 100
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 34 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 34
20836: EQUAL
20837: IFFALSE 20847
// sShield := true ;
20839: LD_ADDR_EXP 101
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 35 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 35
20854: EQUAL
20855: IFFALSE 20865
// sTime := true ;
20857: LD_ADDR_EXP 102
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 36 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 36
20872: EQUAL
20873: IFFALSE 20883
// sTools := true ;
20875: LD_ADDR_EXP 103
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 101 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 101
20890: EQUAL
20891: IFFALSE 20901
// sSold := true ;
20893: LD_ADDR_EXP 68
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 102 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 102
20908: EQUAL
20909: IFFALSE 20919
// sDiff := true ;
20911: LD_ADDR_EXP 69
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 103 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 103
20926: EQUAL
20927: IFFALSE 20937
// sFog := true ;
20929: LD_ADDR_EXP 72
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 104 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 104
20944: EQUAL
20945: IFFALSE 20955
// sReset := true ;
20947: LD_ADDR_EXP 73
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 105 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 105
20962: EQUAL
20963: IFFALSE 20973
// sSun := true ;
20965: LD_ADDR_EXP 74
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 106 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 106
20980: EQUAL
20981: IFFALSE 20991
// sTiger := true ;
20983: LD_ADDR_EXP 70
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 107 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 107
20998: EQUAL
20999: IFFALSE 21009
// sBomb := true ;
21001: LD_ADDR_EXP 71
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 108 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 108
21016: EQUAL
21017: IFFALSE 21027
// sWound := true ;
21019: LD_ADDR_EXP 79
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 109 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 109
21034: EQUAL
21035: IFFALSE 21045
// sBetray := true ;
21037: LD_ADDR_EXP 83
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 110 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 110
21052: EQUAL
21053: IFFALSE 21063
// sContamin := true ;
21055: LD_ADDR_EXP 84
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 111 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 111
21070: EQUAL
21071: IFFALSE 21081
// sOil := true ;
21073: LD_ADDR_EXP 86
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 112 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 112
21088: EQUAL
21089: IFFALSE 21099
// sStu := true ;
21091: LD_ADDR_EXP 90
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 113 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 113
21106: EQUAL
21107: IFFALSE 21117
// sBazooka := true ;
21109: LD_ADDR_EXP 93
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 114 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 114
21124: EQUAL
21125: IFFALSE 21135
// sMortar := true ;
21127: LD_ADDR_EXP 94
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 115 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 115
21142: EQUAL
21143: IFFALSE 21153
// sRanger := true ;
21145: LD_ADDR_EXP 104
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 116 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 116
21160: EQUAL
21161: IFFALSE 21171
// sComputer := true ;
21163: LD_ADDR_EXP 105
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 117 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 117
21178: EQUAL
21179: IFFALSE 21189
// s30 := true ;
21181: LD_ADDR_EXP 106
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 118 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 118
21196: EQUAL
21197: IFFALSE 21207
// s60 := true ;
21199: LD_ADDR_EXP 107
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// end ; if p2 = hack_mode then
21207: LD_VAR 0 2
21211: PUSH
21212: LD_INT 101
21214: EQUAL
21215: IFFALSE 21343
// begin case p3 of 1 :
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 1
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackUnlimitedResources ; 2 :
21231: CALL 33490 0 0
21235: GO 21343
21237: LD_INT 2
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10 ; 3 :
21246: CALL 33623 0 0
21250: GO 21343
21252: LD_INT 3
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackSetLevel10YourUnits ; 4 :
21261: CALL 33708 0 0
21265: GO 21343
21267: LD_INT 4
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvincible ; 5 :
21276: CALL 34156 0 0
21280: GO 21343
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackInvisible ; 6 :
21291: CALL 34267 0 0
21295: GO 21343
21297: LD_INT 6
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeYourSide ; 7 :
21306: CALL 34324 0 0
21310: GO 21343
21312: LD_INT 7
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackChangeUnitSide ; 8 :
21321: CALL 34366 0 0
21325: GO 21343
21327: LD_INT 8
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21342
21335: POP
// hHackFog ; end ;
21336: CALL 34467 0 0
21340: GO 21343
21342: POP
// end ; if p2 = game_save_mode then
21343: LD_VAR 0 2
21347: PUSH
21348: LD_INT 102
21350: EQUAL
21351: IFFALSE 21406
// begin if p3 = 1 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 1
21360: EQUAL
21361: IFFALSE 21373
// globalGameSaveCounter := p4 ;
21363: LD_ADDR_EXP 50
21367: PUSH
21368: LD_VAR 0 4
21372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21373: LD_VAR 0 3
21377: PUSH
21378: LD_INT 2
21380: EQUAL
21381: PUSH
21382: LD_EXP 50
21386: AND
21387: IFFALSE 21406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21389: LD_STRING setGameSaveCounter(
21391: PUSH
21392: LD_EXP 50
21396: STR
21397: PUSH
21398: LD_STRING )
21400: STR
21401: PPUSH
21402: CALL_OW 559
// end ; end ;
21406: LD_VAR 0 7
21410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21411: LD_INT 0
21413: PPUSH
// streamModeActive := false ;
21414: LD_ADDR_EXP 51
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// normalCounter := 36 ;
21422: LD_ADDR_EXP 52
21426: PUSH
21427: LD_INT 36
21429: ST_TO_ADDR
// hardcoreCounter := 18 ;
21430: LD_ADDR_EXP 53
21434: PUSH
21435: LD_INT 18
21437: ST_TO_ADDR
// sRocket := false ;
21438: LD_ADDR_EXP 56
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sSpeed := false ;
21446: LD_ADDR_EXP 55
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sEngine := false ;
21454: LD_ADDR_EXP 57
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sSpec := false ;
21462: LD_ADDR_EXP 54
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sLevel := false ;
21470: LD_ADDR_EXP 58
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sArmoury := false ;
21478: LD_ADDR_EXP 59
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sRadar := false ;
21486: LD_ADDR_EXP 60
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sBunker := false ;
21494: LD_ADDR_EXP 61
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sHack := false ;
21502: LD_ADDR_EXP 62
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sFire := false ;
21510: LD_ADDR_EXP 63
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sRefresh := false ;
21518: LD_ADDR_EXP 64
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sExp := false ;
21526: LD_ADDR_EXP 65
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sDepot := false ;
21534: LD_ADDR_EXP 66
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sFlag := false ;
21542: LD_ADDR_EXP 67
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sKamikadze := false ;
21550: LD_ADDR_EXP 75
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sTroll := false ;
21558: LD_ADDR_EXP 76
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sSlow := false ;
21566: LD_ADDR_EXP 77
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sLack := false ;
21574: LD_ADDR_EXP 78
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sTank := false ;
21582: LD_ADDR_EXP 80
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sRemote := false ;
21590: LD_ADDR_EXP 81
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sPowell := false ;
21598: LD_ADDR_EXP 82
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sTeleport := false ;
21606: LD_ADDR_EXP 85
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sOilTower := false ;
21614: LD_ADDR_EXP 87
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sShovel := false ;
21622: LD_ADDR_EXP 88
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sSheik := false ;
21630: LD_ADDR_EXP 89
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sEarthquake := false ;
21638: LD_ADDR_EXP 91
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sAI := false ;
21646: LD_ADDR_EXP 92
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sCargo := false ;
21654: LD_ADDR_EXP 95
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sDLaser := false ;
21662: LD_ADDR_EXP 96
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sExchange := false ;
21670: LD_ADDR_EXP 97
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sFac := false ;
21678: LD_ADDR_EXP 98
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sPower := false ;
21686: LD_ADDR_EXP 99
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sRandom := false ;
21694: LD_ADDR_EXP 100
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sShield := false ;
21702: LD_ADDR_EXP 101
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sTime := false ;
21710: LD_ADDR_EXP 102
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sTools := false ;
21718: LD_ADDR_EXP 103
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sSold := false ;
21726: LD_ADDR_EXP 68
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sDiff := false ;
21734: LD_ADDR_EXP 69
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sFog := false ;
21742: LD_ADDR_EXP 72
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sReset := false ;
21750: LD_ADDR_EXP 73
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sSun := false ;
21758: LD_ADDR_EXP 74
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sTiger := false ;
21766: LD_ADDR_EXP 70
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sBomb := false ;
21774: LD_ADDR_EXP 71
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sWound := false ;
21782: LD_ADDR_EXP 79
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sBetray := false ;
21790: LD_ADDR_EXP 83
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sContamin := false ;
21798: LD_ADDR_EXP 84
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sOil := false ;
21806: LD_ADDR_EXP 86
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sStu := false ;
21814: LD_ADDR_EXP 90
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sBazooka := false ;
21822: LD_ADDR_EXP 93
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sMortar := false ;
21830: LD_ADDR_EXP 94
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sRanger := false ;
21838: LD_ADDR_EXP 104
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sComputer := false ;
21846: LD_ADDR_EXP 105
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// s30 := false ;
21854: LD_ADDR_EXP 106
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// s60 := false ;
21862: LD_ADDR_EXP 107
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// end ;
21870: LD_VAR 0 1
21874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
// result := [ ] ;
21884: LD_ADDR_VAR 0 2
21888: PUSH
21889: EMPTY
21890: ST_TO_ADDR
// if campaign_id = 1 then
21891: LD_OWVAR 69
21895: PUSH
21896: LD_INT 1
21898: EQUAL
21899: IFFALSE 25065
// begin case mission_number of 1 :
21901: LD_OWVAR 70
21905: PUSH
21906: LD_INT 1
21908: DOUBLE
21909: EQUAL
21910: IFTRUE 21914
21912: GO 21990
21914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: LD_INT 11
21928: PUSH
21929: LD_INT 12
21931: PUSH
21932: LD_INT 15
21934: PUSH
21935: LD_INT 16
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 26
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 101
21960: PUSH
21961: LD_INT 102
21963: PUSH
21964: LD_INT 106
21966: PUSH
21967: LD_INT 116
21969: PUSH
21970: LD_INT 117
21972: PUSH
21973: LD_INT 118
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: ST_TO_ADDR
21988: GO 25063
21990: LD_INT 2
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 21998
21996: GO 22082
21998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21999: LD_ADDR_VAR 0 2
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 4
22009: PUSH
22010: LD_INT 11
22012: PUSH
22013: LD_INT 12
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_INT 23
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 101
22044: PUSH
22045: LD_INT 102
22047: PUSH
22048: LD_INT 105
22050: PUSH
22051: LD_INT 106
22053: PUSH
22054: LD_INT 108
22056: PUSH
22057: LD_INT 116
22059: PUSH
22060: LD_INT 117
22062: PUSH
22063: LD_INT 118
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: ST_TO_ADDR
22080: GO 25063
22082: LD_INT 3
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22178
22090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: LD_INT 11
22107: PUSH
22108: LD_INT 12
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 16
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 36
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 105
22146: PUSH
22147: LD_INT 106
22149: PUSH
22150: LD_INT 108
22152: PUSH
22153: LD_INT 116
22155: PUSH
22156: LD_INT 117
22158: PUSH
22159: LD_INT 118
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 25063
22178: LD_INT 4
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22282
22186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 11
22206: PUSH
22207: LD_INT 12
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 16
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 26
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 101
22244: PUSH
22245: LD_INT 102
22247: PUSH
22248: LD_INT 105
22250: PUSH
22251: LD_INT 106
22253: PUSH
22254: LD_INT 108
22256: PUSH
22257: LD_INT 116
22259: PUSH
22260: LD_INT 117
22262: PUSH
22263: LD_INT 118
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: ST_TO_ADDR
22280: GO 25063
22282: LD_INT 5
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22402
22290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 8
22310: PUSH
22311: LD_INT 11
22313: PUSH
22314: LD_INT 12
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 22
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: LD_INT 25
22331: PUSH
22332: LD_INT 26
22334: PUSH
22335: LD_INT 36
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 101
22356: PUSH
22357: LD_INT 102
22359: PUSH
22360: LD_INT 105
22362: PUSH
22363: LD_INT 106
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 112
22374: PUSH
22375: LD_INT 116
22377: PUSH
22378: LD_INT 117
22380: PUSH
22381: LD_INT 118
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: ST_TO_ADDR
22400: GO 25063
22402: LD_INT 6
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22542
22410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22411: LD_ADDR_VAR 0 2
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 8
22430: PUSH
22431: LD_INT 11
22433: PUSH
22434: LD_INT 12
22436: PUSH
22437: LD_INT 15
22439: PUSH
22440: LD_INT 16
22442: PUSH
22443: LD_INT 20
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_INT 23
22454: PUSH
22455: LD_INT 25
22457: PUSH
22458: LD_INT 26
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 31
22466: PUSH
22467: LD_INT 32
22469: PUSH
22470: LD_INT 36
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 101
22496: PUSH
22497: LD_INT 102
22499: PUSH
22500: LD_INT 105
22502: PUSH
22503: LD_INT 106
22505: PUSH
22506: LD_INT 108
22508: PUSH
22509: LD_INT 109
22511: PUSH
22512: LD_INT 112
22514: PUSH
22515: LD_INT 116
22517: PUSH
22518: LD_INT 117
22520: PUSH
22521: LD_INT 118
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: ST_TO_ADDR
22540: GO 25063
22542: LD_INT 7
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22662
22550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 4
22561: PUSH
22562: LD_INT 5
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 20
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 23
22591: PUSH
22592: LD_INT 25
22594: PUSH
22595: LD_INT 26
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 101
22616: PUSH
22617: LD_INT 102
22619: PUSH
22620: LD_INT 103
22622: PUSH
22623: LD_INT 105
22625: PUSH
22626: LD_INT 106
22628: PUSH
22629: LD_INT 108
22631: PUSH
22632: LD_INT 112
22634: PUSH
22635: LD_INT 116
22637: PUSH
22638: LD_INT 117
22640: PUSH
22641: LD_INT 118
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 25063
22662: LD_INT 8
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22810
22670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 4
22681: PUSH
22682: LD_INT 5
22684: PUSH
22685: LD_INT 6
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: LD_INT 8
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 12
22699: PUSH
22700: LD_INT 15
22702: PUSH
22703: LD_INT 16
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 25
22720: PUSH
22721: LD_INT 26
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 31
22729: PUSH
22730: LD_INT 32
22732: PUSH
22733: LD_INT 36
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 101
22760: PUSH
22761: LD_INT 102
22763: PUSH
22764: LD_INT 103
22766: PUSH
22767: LD_INT 105
22769: PUSH
22770: LD_INT 106
22772: PUSH
22773: LD_INT 108
22775: PUSH
22776: LD_INT 109
22778: PUSH
22779: LD_INT 112
22781: PUSH
22782: LD_INT 116
22784: PUSH
22785: LD_INT 117
22787: PUSH
22788: LD_INT 118
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 25063
22810: LD_INT 9
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22966
22818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: LD_INT 6
22835: PUSH
22836: LD_INT 7
22838: PUSH
22839: LD_INT 8
22841: PUSH
22842: LD_INT 11
22844: PUSH
22845: LD_INT 12
22847: PUSH
22848: LD_INT 15
22850: PUSH
22851: LD_INT 16
22853: PUSH
22854: LD_INT 20
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 25
22868: PUSH
22869: LD_INT 26
22871: PUSH
22872: LD_INT 28
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 31
22880: PUSH
22881: LD_INT 32
22883: PUSH
22884: LD_INT 36
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 101
22912: PUSH
22913: LD_INT 102
22915: PUSH
22916: LD_INT 103
22918: PUSH
22919: LD_INT 105
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 108
22927: PUSH
22928: LD_INT 109
22930: PUSH
22931: LD_INT 112
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: LD_INT 116
22939: PUSH
22940: LD_INT 117
22942: PUSH
22943: LD_INT 118
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: ST_TO_ADDR
22964: GO 25063
22966: LD_INT 10
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 23170
22974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 6
22991: PUSH
22992: LD_INT 7
22994: PUSH
22995: LD_INT 8
22997: PUSH
22998: LD_INT 9
23000: PUSH
23001: LD_INT 10
23003: PUSH
23004: LD_INT 11
23006: PUSH
23007: LD_INT 12
23009: PUSH
23010: LD_INT 13
23012: PUSH
23013: LD_INT 14
23015: PUSH
23016: LD_INT 15
23018: PUSH
23019: LD_INT 16
23021: PUSH
23022: LD_INT 17
23024: PUSH
23025: LD_INT 18
23027: PUSH
23028: LD_INT 19
23030: PUSH
23031: LD_INT 20
23033: PUSH
23034: LD_INT 21
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_INT 23
23042: PUSH
23043: LD_INT 24
23045: PUSH
23046: LD_INT 25
23048: PUSH
23049: LD_INT 26
23051: PUSH
23052: LD_INT 28
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: LD_INT 31
23060: PUSH
23061: LD_INT 32
23063: PUSH
23064: LD_INT 36
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 101
23100: PUSH
23101: LD_INT 102
23103: PUSH
23104: LD_INT 103
23106: PUSH
23107: LD_INT 104
23109: PUSH
23110: LD_INT 105
23112: PUSH
23113: LD_INT 106
23115: PUSH
23116: LD_INT 107
23118: PUSH
23119: LD_INT 108
23121: PUSH
23122: LD_INT 109
23124: PUSH
23125: LD_INT 110
23127: PUSH
23128: LD_INT 111
23130: PUSH
23131: LD_INT 112
23133: PUSH
23134: LD_INT 114
23136: PUSH
23137: LD_INT 116
23139: PUSH
23140: LD_INT 117
23142: PUSH
23143: LD_INT 118
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 25063
23170: LD_INT 11
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23382
23178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: LD_INT 4
23192: PUSH
23193: LD_INT 5
23195: PUSH
23196: LD_INT 6
23198: PUSH
23199: LD_INT 7
23201: PUSH
23202: LD_INT 8
23204: PUSH
23205: LD_INT 9
23207: PUSH
23208: LD_INT 10
23210: PUSH
23211: LD_INT 11
23213: PUSH
23214: LD_INT 12
23216: PUSH
23217: LD_INT 13
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 15
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 17
23231: PUSH
23232: LD_INT 18
23234: PUSH
23235: LD_INT 19
23237: PUSH
23238: LD_INT 20
23240: PUSH
23241: LD_INT 21
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_INT 23
23249: PUSH
23250: LD_INT 24
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 26
23258: PUSH
23259: LD_INT 28
23261: PUSH
23262: LD_INT 30
23264: PUSH
23265: LD_INT 31
23267: PUSH
23268: LD_INT 32
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 36
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 101
23312: PUSH
23313: LD_INT 102
23315: PUSH
23316: LD_INT 103
23318: PUSH
23319: LD_INT 104
23321: PUSH
23322: LD_INT 105
23324: PUSH
23325: LD_INT 106
23327: PUSH
23328: LD_INT 107
23330: PUSH
23331: LD_INT 108
23333: PUSH
23334: LD_INT 109
23336: PUSH
23337: LD_INT 110
23339: PUSH
23340: LD_INT 111
23342: PUSH
23343: LD_INT 112
23345: PUSH
23346: LD_INT 114
23348: PUSH
23349: LD_INT 116
23351: PUSH
23352: LD_INT 117
23354: PUSH
23355: LD_INT 118
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: ST_TO_ADDR
23380: GO 25063
23382: LD_INT 12
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23610
23390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 6
23413: PUSH
23414: LD_INT 7
23416: PUSH
23417: LD_INT 8
23419: PUSH
23420: LD_INT 9
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 12
23431: PUSH
23432: LD_INT 13
23434: PUSH
23435: LD_INT 14
23437: PUSH
23438: LD_INT 15
23440: PUSH
23441: LD_INT 16
23443: PUSH
23444: LD_INT 17
23446: PUSH
23447: LD_INT 18
23449: PUSH
23450: LD_INT 19
23452: PUSH
23453: LD_INT 20
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 26
23473: PUSH
23474: LD_INT 27
23476: PUSH
23477: LD_INT 28
23479: PUSH
23480: LD_INT 30
23482: PUSH
23483: LD_INT 31
23485: PUSH
23486: LD_INT 32
23488: PUSH
23489: LD_INT 33
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_INT 36
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 101
23536: PUSH
23537: LD_INT 102
23539: PUSH
23540: LD_INT 103
23542: PUSH
23543: LD_INT 104
23545: PUSH
23546: LD_INT 105
23548: PUSH
23549: LD_INT 106
23551: PUSH
23552: LD_INT 107
23554: PUSH
23555: LD_INT 108
23557: PUSH
23558: LD_INT 109
23560: PUSH
23561: LD_INT 110
23563: PUSH
23564: LD_INT 111
23566: PUSH
23567: LD_INT 112
23569: PUSH
23570: LD_INT 113
23572: PUSH
23573: LD_INT 114
23575: PUSH
23576: LD_INT 116
23578: PUSH
23579: LD_INT 117
23581: PUSH
23582: LD_INT 118
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 25063
23610: LD_INT 13
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23826
23618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23619: LD_ADDR_VAR 0 2
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 5
23638: PUSH
23639: LD_INT 8
23641: PUSH
23642: LD_INT 9
23644: PUSH
23645: LD_INT 10
23647: PUSH
23648: LD_INT 11
23650: PUSH
23651: LD_INT 12
23653: PUSH
23654: LD_INT 14
23656: PUSH
23657: LD_INT 15
23659: PUSH
23660: LD_INT 16
23662: PUSH
23663: LD_INT 17
23665: PUSH
23666: LD_INT 18
23668: PUSH
23669: LD_INT 19
23671: PUSH
23672: LD_INT 20
23674: PUSH
23675: LD_INT 21
23677: PUSH
23678: LD_INT 22
23680: PUSH
23681: LD_INT 23
23683: PUSH
23684: LD_INT 24
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 26
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 28
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 32
23707: PUSH
23708: LD_INT 33
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 36
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 101
23752: PUSH
23753: LD_INT 102
23755: PUSH
23756: LD_INT 103
23758: PUSH
23759: LD_INT 104
23761: PUSH
23762: LD_INT 105
23764: PUSH
23765: LD_INT 106
23767: PUSH
23768: LD_INT 107
23770: PUSH
23771: LD_INT 108
23773: PUSH
23774: LD_INT 109
23776: PUSH
23777: LD_INT 110
23779: PUSH
23780: LD_INT 111
23782: PUSH
23783: LD_INT 112
23785: PUSH
23786: LD_INT 113
23788: PUSH
23789: LD_INT 114
23791: PUSH
23792: LD_INT 116
23794: PUSH
23795: LD_INT 117
23797: PUSH
23798: LD_INT 118
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: ST_TO_ADDR
23824: GO 25063
23826: LD_INT 14
23828: DOUBLE
23829: EQUAL
23830: IFTRUE 23834
23832: GO 24058
23834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: LD_INT 5
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: LD_INT 7
23860: PUSH
23861: LD_INT 8
23863: PUSH
23864: LD_INT 9
23866: PUSH
23867: LD_INT 10
23869: PUSH
23870: LD_INT 11
23872: PUSH
23873: LD_INT 12
23875: PUSH
23876: LD_INT 13
23878: PUSH
23879: LD_INT 14
23881: PUSH
23882: LD_INT 15
23884: PUSH
23885: LD_INT 16
23887: PUSH
23888: LD_INT 17
23890: PUSH
23891: LD_INT 18
23893: PUSH
23894: LD_INT 19
23896: PUSH
23897: LD_INT 20
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_INT 23
23908: PUSH
23909: LD_INT 24
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 26
23917: PUSH
23918: LD_INT 27
23920: PUSH
23921: LD_INT 28
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 31
23932: PUSH
23933: LD_INT 32
23935: PUSH
23936: LD_INT 33
23938: PUSH
23939: LD_INT 34
23941: PUSH
23942: LD_INT 36
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 116
24026: PUSH
24027: LD_INT 117
24029: PUSH
24030: LD_INT 118
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 25063
24058: LD_INT 15
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24290
24066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 6
24089: PUSH
24090: LD_INT 7
24092: PUSH
24093: LD_INT 8
24095: PUSH
24096: LD_INT 9
24098: PUSH
24099: LD_INT 10
24101: PUSH
24102: LD_INT 11
24104: PUSH
24105: LD_INT 12
24107: PUSH
24108: LD_INT 13
24110: PUSH
24111: LD_INT 14
24113: PUSH
24114: LD_INT 15
24116: PUSH
24117: LD_INT 16
24119: PUSH
24120: LD_INT 17
24122: PUSH
24123: LD_INT 18
24125: PUSH
24126: LD_INT 19
24128: PUSH
24129: LD_INT 20
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 26
24149: PUSH
24150: LD_INT 27
24152: PUSH
24153: LD_INT 28
24155: PUSH
24156: LD_INT 29
24158: PUSH
24159: LD_INT 30
24161: PUSH
24162: LD_INT 31
24164: PUSH
24165: LD_INT 32
24167: PUSH
24168: LD_INT 33
24170: PUSH
24171: LD_INT 34
24173: PUSH
24174: LD_INT 36
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 101
24216: PUSH
24217: LD_INT 102
24219: PUSH
24220: LD_INT 103
24222: PUSH
24223: LD_INT 104
24225: PUSH
24226: LD_INT 105
24228: PUSH
24229: LD_INT 106
24231: PUSH
24232: LD_INT 107
24234: PUSH
24235: LD_INT 108
24237: PUSH
24238: LD_INT 109
24240: PUSH
24241: LD_INT 110
24243: PUSH
24244: LD_INT 111
24246: PUSH
24247: LD_INT 112
24249: PUSH
24250: LD_INT 113
24252: PUSH
24253: LD_INT 114
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: ST_TO_ADDR
24288: GO 25063
24290: LD_INT 16
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24434
24298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: LD_INT 7
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 15
24324: PUSH
24325: LD_INT 16
24327: PUSH
24328: LD_INT 20
24330: PUSH
24331: LD_INT 21
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 23
24339: PUSH
24340: LD_INT 25
24342: PUSH
24343: LD_INT 26
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 31
24351: PUSH
24352: LD_INT 32
24354: PUSH
24355: LD_INT 33
24357: PUSH
24358: LD_INT 34
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 101
24384: PUSH
24385: LD_INT 102
24387: PUSH
24388: LD_INT 103
24390: PUSH
24391: LD_INT 106
24393: PUSH
24394: LD_INT 108
24396: PUSH
24397: LD_INT 112
24399: PUSH
24400: LD_INT 113
24402: PUSH
24403: LD_INT 114
24405: PUSH
24406: LD_INT 116
24408: PUSH
24409: LD_INT 117
24411: PUSH
24412: LD_INT 118
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 25063
24434: LD_INT 17
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24666
24442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24443: LD_ADDR_VAR 0 2
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 4
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: LD_INT 6
24465: PUSH
24466: LD_INT 7
24468: PUSH
24469: LD_INT 8
24471: PUSH
24472: LD_INT 9
24474: PUSH
24475: LD_INT 10
24477: PUSH
24478: LD_INT 11
24480: PUSH
24481: LD_INT 12
24483: PUSH
24484: LD_INT 13
24486: PUSH
24487: LD_INT 14
24489: PUSH
24490: LD_INT 15
24492: PUSH
24493: LD_INT 16
24495: PUSH
24496: LD_INT 17
24498: PUSH
24499: LD_INT 18
24501: PUSH
24502: LD_INT 19
24504: PUSH
24505: LD_INT 20
24507: PUSH
24508: LD_INT 21
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_INT 23
24516: PUSH
24517: LD_INT 24
24519: PUSH
24520: LD_INT 25
24522: PUSH
24523: LD_INT 26
24525: PUSH
24526: LD_INT 27
24528: PUSH
24529: LD_INT 28
24531: PUSH
24532: LD_INT 29
24534: PUSH
24535: LD_INT 30
24537: PUSH
24538: LD_INT 31
24540: PUSH
24541: LD_INT 32
24543: PUSH
24544: LD_INT 33
24546: PUSH
24547: LD_INT 34
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 101
24592: PUSH
24593: LD_INT 102
24595: PUSH
24596: LD_INT 103
24598: PUSH
24599: LD_INT 104
24601: PUSH
24602: LD_INT 105
24604: PUSH
24605: LD_INT 106
24607: PUSH
24608: LD_INT 107
24610: PUSH
24611: LD_INT 108
24613: PUSH
24614: LD_INT 109
24616: PUSH
24617: LD_INT 110
24619: PUSH
24620: LD_INT 111
24622: PUSH
24623: LD_INT 112
24625: PUSH
24626: LD_INT 113
24628: PUSH
24629: LD_INT 114
24631: PUSH
24632: LD_INT 116
24634: PUSH
24635: LD_INT 117
24637: PUSH
24638: LD_INT 118
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: ST_TO_ADDR
24664: GO 25063
24666: LD_INT 18
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24822
24674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24675: LD_ADDR_VAR 0 2
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 4
24685: PUSH
24686: LD_INT 5
24688: PUSH
24689: LD_INT 7
24691: PUSH
24692: LD_INT 11
24694: PUSH
24695: LD_INT 12
24697: PUSH
24698: LD_INT 15
24700: PUSH
24701: LD_INT 16
24703: PUSH
24704: LD_INT 20
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_INT 23
24715: PUSH
24716: LD_INT 25
24718: PUSH
24719: LD_INT 26
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 31
24727: PUSH
24728: LD_INT 32
24730: PUSH
24731: LD_INT 33
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 35
24739: PUSH
24740: LD_INT 36
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 101
24768: PUSH
24769: LD_INT 102
24771: PUSH
24772: LD_INT 103
24774: PUSH
24775: LD_INT 106
24777: PUSH
24778: LD_INT 108
24780: PUSH
24781: LD_INT 112
24783: PUSH
24784: LD_INT 113
24786: PUSH
24787: LD_INT 114
24789: PUSH
24790: LD_INT 115
24792: PUSH
24793: LD_INT 116
24795: PUSH
24796: LD_INT 117
24798: PUSH
24799: LD_INT 118
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25063
24822: LD_INT 19
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 25062
24830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: LD_INT 6
24853: PUSH
24854: LD_INT 7
24856: PUSH
24857: LD_INT 8
24859: PUSH
24860: LD_INT 9
24862: PUSH
24863: LD_INT 10
24865: PUSH
24866: LD_INT 11
24868: PUSH
24869: LD_INT 12
24871: PUSH
24872: LD_INT 13
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: LD_INT 15
24880: PUSH
24881: LD_INT 16
24883: PUSH
24884: LD_INT 17
24886: PUSH
24887: LD_INT 18
24889: PUSH
24890: LD_INT 19
24892: PUSH
24893: LD_INT 20
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_INT 23
24904: PUSH
24905: LD_INT 24
24907: PUSH
24908: LD_INT 25
24910: PUSH
24911: LD_INT 26
24913: PUSH
24914: LD_INT 27
24916: PUSH
24917: LD_INT 28
24919: PUSH
24920: LD_INT 29
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: LD_INT 31
24928: PUSH
24929: LD_INT 32
24931: PUSH
24932: LD_INT 33
24934: PUSH
24935: LD_INT 34
24937: PUSH
24938: LD_INT 35
24940: PUSH
24941: LD_INT 36
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 101
24984: PUSH
24985: LD_INT 102
24987: PUSH
24988: LD_INT 103
24990: PUSH
24991: LD_INT 104
24993: PUSH
24994: LD_INT 105
24996: PUSH
24997: LD_INT 106
24999: PUSH
25000: LD_INT 107
25002: PUSH
25003: LD_INT 108
25005: PUSH
25006: LD_INT 109
25008: PUSH
25009: LD_INT 110
25011: PUSH
25012: LD_INT 111
25014: PUSH
25015: LD_INT 112
25017: PUSH
25018: LD_INT 113
25020: PUSH
25021: LD_INT 114
25023: PUSH
25024: LD_INT 115
25026: PUSH
25027: LD_INT 116
25029: PUSH
25030: LD_INT 117
25032: PUSH
25033: LD_INT 118
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: ST_TO_ADDR
25060: GO 25063
25062: POP
// end else
25063: GO 25294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 6
25087: PUSH
25088: LD_INT 7
25090: PUSH
25091: LD_INT 8
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: LD_INT 10
25099: PUSH
25100: LD_INT 11
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 17
25120: PUSH
25121: LD_INT 18
25123: PUSH
25124: LD_INT 19
25126: PUSH
25127: LD_INT 20
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 24
25141: PUSH
25142: LD_INT 25
25144: PUSH
25145: LD_INT 26
25147: PUSH
25148: LD_INT 27
25150: PUSH
25151: LD_INT 28
25153: PUSH
25154: LD_INT 29
25156: PUSH
25157: LD_INT 30
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 35
25174: PUSH
25175: LD_INT 36
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 104
25227: PUSH
25228: LD_INT 105
25230: PUSH
25231: LD_INT 106
25233: PUSH
25234: LD_INT 107
25236: PUSH
25237: LD_INT 108
25239: PUSH
25240: LD_INT 109
25242: PUSH
25243: LD_INT 110
25245: PUSH
25246: LD_INT 111
25248: PUSH
25249: LD_INT 112
25251: PUSH
25252: LD_INT 113
25254: PUSH
25255: LD_INT 114
25257: PUSH
25258: LD_INT 115
25260: PUSH
25261: LD_INT 116
25263: PUSH
25264: LD_INT 117
25266: PUSH
25267: LD_INT 118
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// if result then
25294: LD_VAR 0 2
25298: IFFALSE 26084
// begin normal :=  ;
25300: LD_ADDR_VAR 0 5
25304: PUSH
25305: LD_STRING 
25307: ST_TO_ADDR
// hardcore :=  ;
25308: LD_ADDR_VAR 0 6
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// active :=  ;
25316: LD_ADDR_VAR 0 7
25320: PUSH
25321: LD_STRING 
25323: ST_TO_ADDR
// for i = 1 to normalCounter do
25324: LD_ADDR_VAR 0 8
25328: PUSH
25329: DOUBLE
25330: LD_INT 1
25332: DEC
25333: ST_TO_ADDR
25334: LD_EXP 52
25338: PUSH
25339: FOR_TO
25340: IFFALSE 25441
// begin tmp := 0 ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_STRING 0
25349: ST_TO_ADDR
// if result [ 1 ] then
25350: LD_VAR 0 2
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: IFFALSE 25423
// if result [ 1 ] [ 1 ] = i then
25360: LD_VAR 0 2
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PUSH
25373: LD_VAR 0 8
25377: EQUAL
25378: IFFALSE 25423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_VAR 0 2
25397: PUSH
25398: LD_INT 1
25400: ARRAY
25401: PPUSH
25402: LD_INT 1
25404: PPUSH
25405: CALL_OW 3
25409: PPUSH
25410: CALL_OW 1
25414: ST_TO_ADDR
// tmp := 1 ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_STRING 1
25422: ST_TO_ADDR
// end ; normal := normal & tmp ;
25423: LD_ADDR_VAR 0 5
25427: PUSH
25428: LD_VAR 0 5
25432: PUSH
25433: LD_VAR 0 3
25437: STR
25438: ST_TO_ADDR
// end ;
25439: GO 25339
25441: POP
25442: POP
// for i = 1 to hardcoreCounter do
25443: LD_ADDR_VAR 0 8
25447: PUSH
25448: DOUBLE
25449: LD_INT 1
25451: DEC
25452: ST_TO_ADDR
25453: LD_EXP 53
25457: PUSH
25458: FOR_TO
25459: IFFALSE 25564
// begin tmp := 0 ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_STRING 0
25468: ST_TO_ADDR
// if result [ 2 ] then
25469: LD_VAR 0 2
25473: PUSH
25474: LD_INT 2
25476: ARRAY
25477: IFFALSE 25546
// if result [ 2 ] [ 1 ] = 100 + i then
25479: LD_VAR 0 2
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PUSH
25492: LD_INT 100
25494: PUSH
25495: LD_VAR 0 8
25499: PLUS
25500: EQUAL
25501: IFFALSE 25546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 2
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: LD_VAR 0 2
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: LD_INT 1
25527: PPUSH
25528: CALL_OW 3
25532: PPUSH
25533: CALL_OW 1
25537: ST_TO_ADDR
// tmp := 1 ;
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_STRING 1
25545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25546: LD_ADDR_VAR 0 6
25550: PUSH
25551: LD_VAR 0 6
25555: PUSH
25556: LD_VAR 0 3
25560: STR
25561: ST_TO_ADDR
// end ;
25562: GO 25458
25564: POP
25565: POP
// if isGameLoad then
25566: LD_VAR 0 1
25570: IFFALSE 26045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_EXP 56
25581: PUSH
25582: LD_EXP 55
25586: PUSH
25587: LD_EXP 57
25591: PUSH
25592: LD_EXP 54
25596: PUSH
25597: LD_EXP 58
25601: PUSH
25602: LD_EXP 59
25606: PUSH
25607: LD_EXP 60
25611: PUSH
25612: LD_EXP 61
25616: PUSH
25617: LD_EXP 62
25621: PUSH
25622: LD_EXP 63
25626: PUSH
25627: LD_EXP 64
25631: PUSH
25632: LD_EXP 65
25636: PUSH
25637: LD_EXP 66
25641: PUSH
25642: LD_EXP 67
25646: PUSH
25647: LD_EXP 75
25651: PUSH
25652: LD_EXP 76
25656: PUSH
25657: LD_EXP 77
25661: PUSH
25662: LD_EXP 78
25666: PUSH
25667: LD_EXP 80
25671: PUSH
25672: LD_EXP 81
25676: PUSH
25677: LD_EXP 82
25681: PUSH
25682: LD_EXP 85
25686: PUSH
25687: LD_EXP 87
25691: PUSH
25692: LD_EXP 88
25696: PUSH
25697: LD_EXP 89
25701: PUSH
25702: LD_EXP 91
25706: PUSH
25707: LD_EXP 92
25711: PUSH
25712: LD_EXP 95
25716: PUSH
25717: LD_EXP 96
25721: PUSH
25722: LD_EXP 97
25726: PUSH
25727: LD_EXP 98
25731: PUSH
25732: LD_EXP 99
25736: PUSH
25737: LD_EXP 100
25741: PUSH
25742: LD_EXP 101
25746: PUSH
25747: LD_EXP 102
25751: PUSH
25752: LD_EXP 103
25756: PUSH
25757: LD_EXP 68
25761: PUSH
25762: LD_EXP 69
25766: PUSH
25767: LD_EXP 72
25771: PUSH
25772: LD_EXP 73
25776: PUSH
25777: LD_EXP 74
25781: PUSH
25782: LD_EXP 70
25786: PUSH
25787: LD_EXP 71
25791: PUSH
25792: LD_EXP 79
25796: PUSH
25797: LD_EXP 83
25801: PUSH
25802: LD_EXP 84
25806: PUSH
25807: LD_EXP 86
25811: PUSH
25812: LD_EXP 90
25816: PUSH
25817: LD_EXP 93
25821: PUSH
25822: LD_EXP 94
25826: PUSH
25827: LD_EXP 104
25831: PUSH
25832: LD_EXP 105
25836: PUSH
25837: LD_EXP 106
25841: PUSH
25842: LD_EXP 107
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// tmp :=  ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_STRING 
25910: ST_TO_ADDR
// for i = 1 to normalCounter do
25911: LD_ADDR_VAR 0 8
25915: PUSH
25916: DOUBLE
25917: LD_INT 1
25919: DEC
25920: ST_TO_ADDR
25921: LD_EXP 52
25925: PUSH
25926: FOR_TO
25927: IFFALSE 25963
// begin if flags [ i ] then
25929: LD_VAR 0 4
25933: PUSH
25934: LD_VAR 0 8
25938: ARRAY
25939: IFFALSE 25961
// tmp := tmp & i & ; ;
25941: LD_ADDR_VAR 0 3
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_VAR 0 8
25955: STR
25956: PUSH
25957: LD_STRING ;
25959: STR
25960: ST_TO_ADDR
// end ;
25961: GO 25926
25963: POP
25964: POP
// for i = 1 to hardcoreCounter do
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_EXP 53
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26027
// begin if flags [ normalCounter + i ] then
25983: LD_VAR 0 4
25987: PUSH
25988: LD_EXP 52
25992: PUSH
25993: LD_VAR 0 8
25997: PLUS
25998: ARRAY
25999: IFFALSE 26025
// tmp := tmp & ( 100 + i ) & ; ;
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_VAR 0 3
26010: PUSH
26011: LD_INT 100
26013: PUSH
26014: LD_VAR 0 8
26018: PLUS
26019: STR
26020: PUSH
26021: LD_STRING ;
26023: STR
26024: ST_TO_ADDR
// end ;
26025: GO 25980
26027: POP
26028: POP
// if tmp then
26029: LD_VAR 0 3
26033: IFFALSE 26045
// active := tmp ;
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: LD_VAR 0 3
26044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26045: LD_STRING getStreamItemsFromMission("
26047: PUSH
26048: LD_VAR 0 5
26052: STR
26053: PUSH
26054: LD_STRING ","
26056: STR
26057: PUSH
26058: LD_VAR 0 6
26062: STR
26063: PUSH
26064: LD_STRING ","
26066: STR
26067: PUSH
26068: LD_VAR 0 7
26072: STR
26073: PUSH
26074: LD_STRING ")
26076: STR
26077: PPUSH
26078: CALL_OW 559
// end else
26082: GO 26091
// ToLua ( getStreamItemsFromMission("","","") ) ;
26084: LD_STRING getStreamItemsFromMission("","","")
26086: PPUSH
26087: CALL_OW 559
// end ;
26091: LD_VAR 0 2
26095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26096: LD_EXP 51
26100: PUSH
26101: LD_EXP 56
26105: AND
26106: IFFALSE 26230
26108: GO 26110
26110: DISABLE
26111: LD_INT 0
26113: PPUSH
26114: PPUSH
// begin enable ;
26115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_OWVAR 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 34
26138: PUSH
26139: LD_INT 7
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 34
26148: PUSH
26149: LD_INT 45
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 34
26158: PUSH
26159: LD_INT 28
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 34
26168: PUSH
26169: LD_INT 47
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 2
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26230
// for i in tmp do
26201: LD_ADDR_VAR 0 1
26205: PUSH
26206: LD_VAR 0 2
26210: PUSH
26211: FOR_IN
26212: IFFALSE 26228
// begin SetLives ( i , 0 ) ;
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL_OW 234
// end ;
26226: GO 26211
26228: POP
26229: POP
// end ;
26230: PPOPN 2
26232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26233: LD_EXP 51
26237: PUSH
26238: LD_EXP 57
26242: AND
26243: IFFALSE 26327
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
26251: PPUSH
// begin enable ;
26252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_OWVAR 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 32
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ST_TO_ADDR
// if not tmp then
26289: LD_VAR 0 2
26293: NOT
26294: IFFALSE 26298
// exit ;
26296: GO 26327
// for i in tmp do
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_VAR 0 2
26307: PUSH
26308: FOR_IN
26309: IFFALSE 26325
// begin SetLives ( i , 0 ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: LD_INT 0
26318: PPUSH
26319: CALL_OW 234
// end ;
26323: GO 26308
26325: POP
26326: POP
// end ;
26327: PPOPN 2
26329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26330: LD_EXP 51
26334: PUSH
26335: LD_EXP 54
26339: AND
26340: IFFALSE 26433
26342: GO 26344
26344: DISABLE
26345: LD_INT 0
26347: PPUSH
// begin enable ;
26348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26349: LD_ADDR_VAR 0 1
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 25
26371: PUSH
26372: LD_INT 5
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 25
26381: PUSH
26382: LD_INT 9
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 25
26391: PUSH
26392: LD_INT 8
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26431
// begin SetClass ( i , 1 ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: CALL_OW 336
// end ;
26429: GO 26414
26431: POP
26432: POP
// end ;
26433: PPOPN 1
26435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26436: LD_EXP 51
26440: PUSH
26441: LD_EXP 55
26445: AND
26446: PUSH
26447: LD_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: LESS
26455: AND
26456: IFFALSE 26470
26458: GO 26460
26460: DISABLE
// begin enable ;
26461: ENABLE
// game_speed := 7 ;
26462: LD_ADDR_OWVAR 65
26466: PUSH
26467: LD_INT 7
26469: ST_TO_ADDR
// end ;
26470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26471: LD_EXP 51
26475: PUSH
26476: LD_EXP 58
26480: AND
26481: IFFALSE 26683
26483: GO 26485
26485: DISABLE
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
26490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26491: LD_ADDR_VAR 0 3
26495: PUSH
26496: LD_INT 81
26498: PUSH
26499: LD_OWVAR 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 21
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PPUSH
26522: CALL_OW 69
26526: ST_TO_ADDR
// if not tmp then
26527: LD_VAR 0 3
26531: NOT
26532: IFFALSE 26536
// exit ;
26534: GO 26683
// if tmp > 5 then
26536: LD_VAR 0 3
26540: PUSH
26541: LD_INT 5
26543: GREATER
26544: IFFALSE 26556
// k := 5 else
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_INT 5
26553: ST_TO_ADDR
26554: GO 26566
// k := tmp ;
26556: LD_ADDR_VAR 0 2
26560: PUSH
26561: LD_VAR 0 3
26565: ST_TO_ADDR
// for i := 1 to k do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 2
26580: PUSH
26581: FOR_TO
26582: IFFALSE 26681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 1
26593: ARRAY
26594: PPUSH
26595: LD_VAR 0 1
26599: PUSH
26600: LD_INT 4
26602: MOD
26603: PUSH
26604: LD_INT 1
26606: PLUS
26607: PPUSH
26608: CALL_OW 259
26612: PUSH
26613: LD_INT 10
26615: LESS
26616: IFFALSE 26679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26618: LD_VAR 0 3
26622: PUSH
26623: LD_VAR 0 1
26627: ARRAY
26628: PPUSH
26629: LD_VAR 0 1
26633: PUSH
26634: LD_INT 4
26636: MOD
26637: PUSH
26638: LD_INT 1
26640: PLUS
26641: PPUSH
26642: LD_VAR 0 3
26646: PUSH
26647: LD_VAR 0 1
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 1
26657: PUSH
26658: LD_INT 4
26660: MOD
26661: PUSH
26662: LD_INT 1
26664: PLUS
26665: PPUSH
26666: CALL_OW 259
26670: PUSH
26671: LD_INT 1
26673: PLUS
26674: PPUSH
26675: CALL_OW 237
26679: GO 26581
26681: POP
26682: POP
// end ;
26683: PPOPN 3
26685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26686: LD_EXP 51
26690: PUSH
26691: LD_EXP 59
26695: AND
26696: IFFALSE 26716
26698: GO 26700
26700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26701: LD_INT 4
26703: PPUSH
26704: LD_OWVAR 2
26708: PPUSH
26709: LD_INT 0
26711: PPUSH
26712: CALL_OW 324
26716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26717: LD_EXP 51
26721: PUSH
26722: LD_EXP 88
26726: AND
26727: IFFALSE 26747
26729: GO 26731
26731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26732: LD_INT 19
26734: PPUSH
26735: LD_OWVAR 2
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 324
26747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26748: LD_EXP 51
26752: PUSH
26753: LD_EXP 60
26757: AND
26758: IFFALSE 26860
26760: GO 26762
26762: DISABLE
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
// begin enable ;
26767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_OWVAR 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 34
26790: PUSH
26791: LD_INT 11
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 34
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 2
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26860
// for i in tmp do
26831: LD_ADDR_VAR 0 1
26835: PUSH
26836: LD_VAR 0 2
26840: PUSH
26841: FOR_IN
26842: IFFALSE 26858
// begin SetLives ( i , 0 ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 234
// end ;
26856: GO 26841
26858: POP
26859: POP
// end ;
26860: PPOPN 2
26862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26863: LD_EXP 51
26867: PUSH
26868: LD_EXP 61
26872: AND
26873: IFFALSE 26893
26875: GO 26877
26877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26878: LD_INT 32
26880: PPUSH
26881: LD_OWVAR 2
26885: PPUSH
26886: LD_INT 0
26888: PPUSH
26889: CALL_OW 324
26893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26894: LD_EXP 51
26898: PUSH
26899: LD_EXP 62
26903: AND
26904: IFFALSE 27085
26906: GO 26908
26908: DISABLE
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
26913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_OWVAR 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 33
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27085
// side := 0 ;
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: LD_INT 0
26966: ST_TO_ADDR
// for i := 1 to 8 do
26967: LD_ADDR_VAR 0 1
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_INT 8
26979: PUSH
26980: FOR_TO
26981: IFFALSE 27029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26983: LD_OWVAR 2
26987: PUSH
26988: LD_VAR 0 1
26992: NONEQUAL
26993: PUSH
26994: LD_OWVAR 2
26998: PPUSH
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 81
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: AND
27013: IFFALSE 27027
// begin side := i ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 1
27024: ST_TO_ADDR
// break ;
27025: GO 27029
// end ;
27027: GO 26980
27029: POP
27030: POP
// if not side then
27031: LD_VAR 0 3
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27085
// for i := 1 to tmp do
27040: LD_ADDR_VAR 0 1
27044: PUSH
27045: DOUBLE
27046: LD_INT 1
27048: DEC
27049: ST_TO_ADDR
27050: LD_VAR 0 2
27054: PUSH
27055: FOR_TO
27056: IFFALSE 27083
// if Prob ( 60 ) then
27058: LD_INT 60
27060: PPUSH
27061: CALL_OW 13
27065: IFFALSE 27081
// SetSide ( i , side ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 3
27076: PPUSH
27077: CALL_OW 235
27081: GO 27055
27083: POP
27084: POP
// end ;
27085: PPOPN 3
27087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27088: LD_EXP 51
27092: PUSH
27093: LD_EXP 64
27097: AND
27098: IFFALSE 27217
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27106: LD_ADDR_VAR 0 1
27110: PUSH
27111: LD_INT 22
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 21
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 23
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: PUSH
27160: FOR_IN
27161: IFFALSE 27215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 257
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 4
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: IN
27191: IFFALSE 27213
// SetClass ( un , rand ( 1 , 4 ) ) ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: LD_INT 4
27203: PPUSH
27204: CALL_OW 12
27208: PPUSH
27209: CALL_OW 336
27213: GO 27160
27215: POP
27216: POP
// end ;
27217: PPOPN 1
27219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27220: LD_EXP 51
27224: PUSH
27225: LD_EXP 63
27229: AND
27230: IFFALSE 27309
27232: GO 27234
27234: DISABLE
27235: LD_INT 0
27237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27238: LD_ADDR_VAR 0 1
27242: PUSH
27243: LD_INT 22
27245: PUSH
27246: LD_OWVAR 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 21
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not tmp then
27274: LD_VAR 0 1
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: PPUSH
27302: LD_INT 100
27304: PPUSH
27305: CALL_OW 234
// end ;
27309: PPOPN 1
27311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27312: LD_EXP 51
27316: PUSH
27317: LD_EXP 65
27321: AND
27322: IFFALSE 27420
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27330: LD_ADDR_VAR 0 1
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 69
27365: ST_TO_ADDR
// if not tmp then
27366: LD_VAR 0 1
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 1
27382: PPUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL_OW 12
27392: ARRAY
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_INT 4
27399: PPUSH
27400: CALL_OW 12
27404: PPUSH
27405: LD_INT 3000
27407: PPUSH
27408: LD_INT 9000
27410: PPUSH
27411: CALL_OW 12
27415: PPUSH
27416: CALL_OW 492
// end ;
27420: PPOPN 1
27422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27423: LD_EXP 51
27427: PUSH
27428: LD_EXP 66
27432: AND
27433: IFFALSE 27453
27435: GO 27437
27437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27438: LD_INT 1
27440: PPUSH
27441: LD_OWVAR 2
27445: PPUSH
27446: LD_INT 0
27448: PPUSH
27449: CALL_OW 324
27453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27454: LD_EXP 51
27458: PUSH
27459: LD_EXP 67
27463: AND
27464: IFFALSE 27547
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27473: LD_ADDR_VAR 0 2
27477: PUSH
27478: LD_INT 22
27480: PUSH
27481: LD_OWVAR 2
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 21
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PPUSH
27504: CALL_OW 69
27508: ST_TO_ADDR
// if not tmp then
27509: LD_VAR 0 2
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 27547
// for i in tmp do
27518: LD_ADDR_VAR 0 1
27522: PUSH
27523: LD_VAR 0 2
27527: PUSH
27528: FOR_IN
27529: IFFALSE 27545
// SetBLevel ( i , 10 ) ;
27531: LD_VAR 0 1
27535: PPUSH
27536: LD_INT 10
27538: PPUSH
27539: CALL_OW 241
27543: GO 27528
27545: POP
27546: POP
// end ;
27547: PPOPN 2
27549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27550: LD_EXP 51
27554: PUSH
27555: LD_EXP 68
27559: AND
27560: IFFALSE 27671
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
27569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_INT 22
27577: PUSH
27578: LD_OWVAR 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 25
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 3
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27671
// un := tmp [ rand ( 1 , tmp ) ] ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_VAR 0 3
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_VAR 0 3
27632: PPUSH
27633: CALL_OW 12
27637: ARRAY
27638: ST_TO_ADDR
// if Crawls ( un ) then
27639: LD_VAR 0 2
27643: PPUSH
27644: CALL_OW 318
27648: IFFALSE 27659
// ComWalk ( un ) ;
27650: LD_VAR 0 2
27654: PPUSH
27655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_INT 5
27666: PPUSH
27667: CALL_OW 336
// end ;
27671: PPOPN 3
27673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27674: LD_EXP 51
27678: PUSH
27679: LD_EXP 69
27683: AND
27684: PUSH
27685: LD_OWVAR 67
27689: PUSH
27690: LD_INT 4
27692: LESS
27693: AND
27694: IFFALSE 27713
27696: GO 27698
27698: DISABLE
// begin Difficulty := Difficulty + 1 ;
27699: LD_ADDR_OWVAR 67
27703: PUSH
27704: LD_OWVAR 67
27708: PUSH
27709: LD_INT 1
27711: PLUS
27712: ST_TO_ADDR
// end ;
27713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27714: LD_EXP 51
27718: PUSH
27719: LD_EXP 70
27723: AND
27724: IFFALSE 27827
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
// begin for i := 1 to 5 do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: DOUBLE
27738: LD_INT 1
27740: DEC
27741: ST_TO_ADDR
27742: LD_INT 5
27744: PUSH
27745: FOR_TO
27746: IFFALSE 27825
// begin uc_nation := nation_nature ;
27748: LD_ADDR_OWVAR 21
27752: PUSH
27753: LD_INT 0
27755: ST_TO_ADDR
// uc_side := 0 ;
27756: LD_ADDR_OWVAR 20
27760: PUSH
27761: LD_INT 0
27763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27764: LD_ADDR_OWVAR 29
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 12
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// hc_agressivity := 20 ;
27779: LD_ADDR_OWVAR 35
27783: PUSH
27784: LD_INT 20
27786: ST_TO_ADDR
// hc_class := class_tiger ;
27787: LD_ADDR_OWVAR 28
27791: PUSH
27792: LD_INT 14
27794: ST_TO_ADDR
// hc_gallery :=  ;
27795: LD_ADDR_OWVAR 33
27799: PUSH
27800: LD_STRING 
27802: ST_TO_ADDR
// hc_name :=  ;
27803: LD_ADDR_OWVAR 26
27807: PUSH
27808: LD_STRING 
27810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27811: CALL_OW 44
27815: PPUSH
27816: LD_INT 0
27818: PPUSH
27819: CALL_OW 51
// end ;
27823: GO 27745
27825: POP
27826: POP
// end ;
27827: PPOPN 1
27829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27830: LD_EXP 51
27834: PUSH
27835: LD_EXP 71
27839: AND
27840: IFFALSE 27849
27842: GO 27844
27844: DISABLE
// StreamSibBomb ;
27845: CALL 27850 0 0
27849: END
// export function StreamSibBomb ; var i , x , y ; begin
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
// result := false ;
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_INT 0
27863: ST_TO_ADDR
// for i := 1 to 16 do
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_INT 16
27876: PUSH
27877: FOR_TO
27878: IFFALSE 28077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 10
27887: PUSH
27888: LD_INT 20
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 40
27896: PUSH
27897: LD_INT 50
27899: PUSH
27900: LD_INT 60
27902: PUSH
27903: LD_INT 70
27905: PUSH
27906: LD_INT 80
27908: PUSH
27909: LD_INT 90
27911: PUSH
27912: LD_INT 100
27914: PUSH
27915: LD_INT 110
27917: PUSH
27918: LD_INT 120
27920: PUSH
27921: LD_INT 130
27923: PUSH
27924: LD_INT 140
27926: PUSH
27927: LD_INT 150
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PPUSH
27950: LD_INT 15
27952: PPUSH
27953: CALL_OW 12
27957: ARRAY
27958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27959: LD_ADDR_VAR 0 4
27963: PUSH
27964: LD_INT 10
27966: PUSH
27967: LD_INT 20
27969: PUSH
27970: LD_INT 30
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 50
27978: PUSH
27979: LD_INT 60
27981: PUSH
27982: LD_INT 70
27984: PUSH
27985: LD_INT 80
27987: PUSH
27988: LD_INT 90
27990: PUSH
27991: LD_INT 100
27993: PUSH
27994: LD_INT 110
27996: PUSH
27997: LD_INT 120
27999: PUSH
28000: LD_INT 130
28002: PUSH
28003: LD_INT 140
28005: PUSH
28006: LD_INT 150
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PPUSH
28029: LD_INT 15
28031: PPUSH
28032: CALL_OW 12
28036: ARRAY
28037: ST_TO_ADDR
// if ValidHex ( x , y ) then
28038: LD_VAR 0 3
28042: PPUSH
28043: LD_VAR 0 4
28047: PPUSH
28048: CALL_OW 488
28052: IFFALSE 28075
// begin result := [ x , y ] ;
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 4
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// break ;
28073: GO 28077
// end ; end ;
28075: GO 27877
28077: POP
28078: POP
// if result then
28079: LD_VAR 0 1
28083: IFFALSE 28143
// begin ToLua ( playSibBomb() ) ;
28085: LD_STRING playSibBomb()
28087: PPUSH
28088: CALL_OW 559
// wait ( 0 0$14 ) ;
28092: LD_INT 490
28094: PPUSH
28095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28099: LD_VAR 0 1
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: PPUSH
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 2
28115: ARRAY
28116: PPUSH
28117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 1
28128: ARRAY
28129: PPUSH
28130: LD_VAR 0 1
28134: PUSH
28135: LD_INT 2
28137: ARRAY
28138: PPUSH
28139: CALL_OW 429
// end ; end ;
28143: LD_VAR 0 1
28147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28148: LD_EXP 51
28152: PUSH
28153: LD_EXP 73
28157: AND
28158: IFFALSE 28170
28160: GO 28162
28162: DISABLE
// YouLost (  ) ;
28163: LD_STRING 
28165: PPUSH
28166: CALL_OW 104
28170: END
// every 0 0$1 trigger StreamModeActive and sFog do
28171: LD_EXP 51
28175: PUSH
28176: LD_EXP 72
28180: AND
28181: IFFALSE 28195
28183: GO 28185
28185: DISABLE
// FogOff ( your_side ) ;
28186: LD_OWVAR 2
28190: PPUSH
28191: CALL_OW 344
28195: END
// every 0 0$1 trigger StreamModeActive and sSun do
28196: LD_EXP 51
28200: PUSH
28201: LD_EXP 74
28205: AND
28206: IFFALSE 28234
28208: GO 28210
28210: DISABLE
// begin solar_recharge_percent := 0 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 0
28218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28219: LD_INT 10500
28221: PPUSH
28222: CALL_OW 67
// solar_recharge_percent := 100 ;
28226: LD_ADDR_OWVAR 79
28230: PUSH
28231: LD_INT 100
28233: ST_TO_ADDR
// end ;
28234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28235: LD_EXP 51
28239: PUSH
28240: LD_EXP 75
28244: AND
28245: IFFALSE 28484
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
// begin tmp := [ ] ;
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: EMPTY
28261: ST_TO_ADDR
// for i := 1 to 6 do
28262: LD_ADDR_VAR 0 1
28266: PUSH
28267: DOUBLE
28268: LD_INT 1
28270: DEC
28271: ST_TO_ADDR
28272: LD_INT 6
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28381
// begin uc_nation := nation_nature ;
28278: LD_ADDR_OWVAR 21
28282: PUSH
28283: LD_INT 0
28285: ST_TO_ADDR
// uc_side := 0 ;
28286: LD_ADDR_OWVAR 20
28290: PUSH
28291: LD_INT 0
28293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28294: LD_ADDR_OWVAR 29
28298: PUSH
28299: LD_INT 12
28301: PUSH
28302: LD_INT 12
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// hc_agressivity := 20 ;
28309: LD_ADDR_OWVAR 35
28313: PUSH
28314: LD_INT 20
28316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28317: LD_ADDR_OWVAR 28
28321: PUSH
28322: LD_INT 17
28324: ST_TO_ADDR
// hc_gallery :=  ;
28325: LD_ADDR_OWVAR 33
28329: PUSH
28330: LD_STRING 
28332: ST_TO_ADDR
// hc_name :=  ;
28333: LD_ADDR_OWVAR 26
28337: PUSH
28338: LD_STRING 
28340: ST_TO_ADDR
// un := CreateHuman ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: CALL_OW 44
28350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_INT 1
28358: PPUSH
28359: CALL_OW 51
// tmp := tmp ^ un ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 3
28372: PUSH
28373: LD_VAR 0 2
28377: ADD
28378: ST_TO_ADDR
// end ;
28379: GO 28275
28381: POP
28382: POP
// repeat wait ( 0 0$1 ) ;
28383: LD_INT 35
28385: PPUSH
28386: CALL_OW 67
// for un in tmp do
28390: LD_ADDR_VAR 0 2
28394: PUSH
28395: LD_VAR 0 3
28399: PUSH
28400: FOR_IN
28401: IFFALSE 28475
// begin if IsDead ( un ) then
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 301
28412: IFFALSE 28432
// begin tmp := tmp diff un ;
28414: LD_ADDR_VAR 0 3
28418: PUSH
28419: LD_VAR 0 3
28423: PUSH
28424: LD_VAR 0 2
28428: DIFF
28429: ST_TO_ADDR
// continue ;
28430: GO 28400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28432: LD_VAR 0 2
28436: PPUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 69
28458: PPUSH
28459: LD_VAR 0 2
28463: PPUSH
28464: CALL_OW 74
28468: PPUSH
28469: CALL_OW 115
// end ;
28473: GO 28400
28475: POP
28476: POP
// until not tmp ;
28477: LD_VAR 0 3
28481: NOT
28482: IFFALSE 28383
// end ;
28484: PPOPN 3
28486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28487: LD_EXP 51
28491: PUSH
28492: LD_EXP 76
28496: AND
28497: IFFALSE 28551
28499: GO 28501
28501: DISABLE
// begin ToLua ( displayTroll(); ) ;
28502: LD_STRING displayTroll();
28504: PPUSH
28505: CALL_OW 559
// wait ( 3 3$00 ) ;
28509: LD_INT 6300
28511: PPUSH
28512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28516: LD_STRING hideTroll();
28518: PPUSH
28519: CALL_OW 559
// wait ( 1 1$00 ) ;
28523: LD_INT 2100
28525: PPUSH
28526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28530: LD_STRING displayTroll();
28532: PPUSH
28533: CALL_OW 559
// wait ( 1 1$00 ) ;
28537: LD_INT 2100
28539: PPUSH
28540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28544: LD_STRING hideTroll();
28546: PPUSH
28547: CALL_OW 559
// end ;
28551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28552: LD_EXP 51
28556: PUSH
28557: LD_EXP 77
28561: AND
28562: IFFALSE 28625
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin p := 0 ;
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 0
28577: ST_TO_ADDR
// repeat game_speed := 1 ;
28578: LD_ADDR_OWVAR 65
28582: PUSH
28583: LD_INT 1
28585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28586: LD_INT 35
28588: PPUSH
28589: CALL_OW 67
// p := p + 1 ;
28593: LD_ADDR_VAR 0 1
28597: PUSH
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 1
28605: PLUS
28606: ST_TO_ADDR
// until p >= 60 ;
28607: LD_VAR 0 1
28611: PUSH
28612: LD_INT 60
28614: GREATEREQUAL
28615: IFFALSE 28578
// game_speed := 4 ;
28617: LD_ADDR_OWVAR 65
28621: PUSH
28622: LD_INT 4
28624: ST_TO_ADDR
// end ;
28625: PPOPN 1
28627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28628: LD_EXP 51
28632: PUSH
28633: LD_EXP 78
28637: AND
28638: IFFALSE 28784
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28647: LD_ADDR_VAR 0 1
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_OWVAR 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 30
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 30
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not depot then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_VAR 0 1
28719: PUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 12
28732: ARRAY
28733: PPUSH
28734: CALL_OW 274
28738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 1
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 2
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 3
28776: PPUSH
28777: LD_INT 0
28779: PPUSH
28780: CALL_OW 277
// end ;
28784: PPOPN 2
28786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28787: LD_EXP 51
28791: PUSH
28792: LD_EXP 79
28796: AND
28797: IFFALSE 28894
28799: GO 28801
28801: DISABLE
28802: LD_INT 0
28804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28805: LD_ADDR_VAR 0 1
28809: PUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: LD_INT 23
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: ST_TO_ADDR
// if not tmp then
28859: LD_VAR 0 1
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28868: LD_VAR 0 1
28872: PUSH
28873: LD_INT 1
28875: PPUSH
28876: LD_VAR 0 1
28880: PPUSH
28881: CALL_OW 12
28885: ARRAY
28886: PPUSH
28887: LD_INT 200
28889: PPUSH
28890: CALL_OW 234
// end ;
28894: PPOPN 1
28896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28897: LD_EXP 51
28901: PUSH
28902: LD_EXP 80
28906: AND
28907: IFFALSE 28986
28909: GO 28911
28911: DISABLE
28912: LD_INT 0
28914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28915: LD_ADDR_VAR 0 1
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_OWVAR 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 1
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 28986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28960: LD_VAR 0 1
28964: PUSH
28965: LD_INT 1
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 12
28977: ARRAY
28978: PPUSH
28979: LD_INT 60
28981: PPUSH
28982: CALL_OW 234
// end ;
28986: PPOPN 1
28988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28989: LD_EXP 51
28993: PUSH
28994: LD_EXP 81
28998: AND
28999: IFFALSE 29098
29001: GO 29003
29003: DISABLE
29004: LD_INT 0
29006: PPUSH
29007: PPUSH
// begin enable ;
29008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29009: LD_ADDR_VAR 0 1
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_OWVAR 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 61
29028: PUSH
29029: EMPTY
29030: LIST
29031: PUSH
29032: LD_INT 33
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 1
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29098
// for i in tmp do
29061: LD_ADDR_VAR 0 2
29065: PUSH
29066: LD_VAR 0 1
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29096
// if IsControledBy ( i ) then
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 312
29083: IFFALSE 29094
// ComUnlink ( i ) ;
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 136
29094: GO 29071
29096: POP
29097: POP
// end ;
29098: PPOPN 2
29100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29101: LD_EXP 51
29105: PUSH
29106: LD_EXP 82
29110: AND
29111: IFFALSE 29251
29113: GO 29115
29115: DISABLE
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
// begin ToLua ( displayPowell(); ) ;
29120: LD_STRING displayPowell();
29122: PPUSH
29123: CALL_OW 559
// uc_side := 0 ;
29127: LD_ADDR_OWVAR 20
29131: PUSH
29132: LD_INT 0
29134: ST_TO_ADDR
// uc_nation := 2 ;
29135: LD_ADDR_OWVAR 21
29139: PUSH
29140: LD_INT 2
29142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29143: LD_ADDR_OWVAR 37
29147: PUSH
29148: LD_INT 14
29150: ST_TO_ADDR
// vc_engine := engine_siberite ;
29151: LD_ADDR_OWVAR 39
29155: PUSH
29156: LD_INT 3
29158: ST_TO_ADDR
// vc_control := control_apeman ;
29159: LD_ADDR_OWVAR 38
29163: PUSH
29164: LD_INT 5
29166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29167: LD_ADDR_OWVAR 40
29171: PUSH
29172: LD_INT 29
29174: ST_TO_ADDR
// un := CreateVehicle ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: CALL_OW 45
29184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_INT 1
29192: PPUSH
29193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29197: LD_INT 35
29199: PPUSH
29200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: LD_INT 22
29211: PUSH
29212: LD_OWVAR 2
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: PPUSH
29226: LD_VAR 0 2
29230: PPUSH
29231: CALL_OW 74
29235: PPUSH
29236: CALL_OW 115
// until IsDead ( un ) ;
29240: LD_VAR 0 2
29244: PPUSH
29245: CALL_OW 301
29249: IFFALSE 29197
// end ;
29251: PPOPN 2
29253: END
// every 0 0$1 trigger StreamModeActive and sStu do
29254: LD_EXP 51
29258: PUSH
29259: LD_EXP 90
29263: AND
29264: IFFALSE 29280
29266: GO 29268
29268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29269: LD_STRING displayStucuk();
29271: PPUSH
29272: CALL_OW 559
// ResetFog ;
29276: CALL_OW 335
// end ;
29280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29281: LD_EXP 51
29285: PUSH
29286: LD_EXP 83
29290: AND
29291: IFFALSE 29432
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
29299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_INT 22
29307: PUSH
29308: LD_OWVAR 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 21
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PPUSH
29331: CALL_OW 69
29335: ST_TO_ADDR
// if not tmp then
29336: LD_VAR 0 2
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29432
// un := tmp [ rand ( 1 , tmp ) ] ;
29345: LD_ADDR_VAR 0 1
29349: PUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: CALL_OW 12
29367: ARRAY
29368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 0
29376: PPUSH
29377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_OWVAR 3
29390: PUSH
29391: LD_VAR 0 1
29395: DIFF
29396: PPUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 74
29406: PPUSH
29407: CALL_OW 115
// wait ( 0 0$20 ) ;
29411: LD_INT 700
29413: PPUSH
29414: CALL_OW 67
// SetSide ( un , your_side ) ;
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_OWVAR 2
29427: PPUSH
29428: CALL_OW 235
// end ;
29432: PPOPN 2
29434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29435: LD_EXP 51
29439: PUSH
29440: LD_EXP 84
29444: AND
29445: IFFALSE 29551
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_INT 22
29460: PUSH
29461: LD_OWVAR 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 30
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 30
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not depot then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 1
29523: ARRAY
29524: PPUSH
29525: CALL_OW 250
29529: PPUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: PPUSH
29539: CALL_OW 251
29543: PPUSH
29544: LD_INT 70
29546: PPUSH
29547: CALL_OW 495
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29554: LD_EXP 51
29558: PUSH
29559: LD_EXP 85
29563: AND
29564: IFFALSE 29775
29566: GO 29568
29568: DISABLE
29569: LD_INT 0
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_INT 22
29583: PUSH
29584: LD_OWVAR 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 21
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 5
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29775
// for i in tmp do
29621: LD_ADDR_VAR 0 1
29625: PUSH
29626: LD_VAR 0 5
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29773
// begin d := rand ( 0 , 5 ) ;
29634: LD_ADDR_VAR 0 4
29638: PUSH
29639: LD_INT 0
29641: PPUSH
29642: LD_INT 5
29644: PPUSH
29645: CALL_OW 12
29649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 250
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: LD_INT 3
29672: PPUSH
29673: LD_INT 12
29675: PPUSH
29676: CALL_OW 12
29680: PPUSH
29681: CALL_OW 272
29685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: CALL_OW 251
29700: PPUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: LD_INT 3
29708: PPUSH
29709: LD_INT 12
29711: PPUSH
29712: CALL_OW 12
29716: PPUSH
29717: CALL_OW 273
29721: ST_TO_ADDR
// if ValidHex ( x , y ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL_OW 488
29736: IFFALSE 29771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29738: LD_VAR 0 1
29742: PPUSH
29743: LD_VAR 0 2
29747: PPUSH
29748: LD_VAR 0 3
29752: PPUSH
29753: LD_INT 3
29755: PPUSH
29756: LD_INT 6
29758: PPUSH
29759: CALL_OW 12
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: CALL_OW 483
// end ;
29771: GO 29631
29773: POP
29774: POP
// end ;
29775: PPOPN 5
29777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29778: LD_EXP 51
29782: PUSH
29783: LD_EXP 86
29787: AND
29788: IFFALSE 29882
29790: GO 29792
29792: DISABLE
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29797: LD_ADDR_VAR 0 2
29801: PUSH
29802: LD_INT 22
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 32
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: PPUSH
29839: CALL_OW 69
29843: ST_TO_ADDR
// if not tmp then
29844: LD_VAR 0 2
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 29882
// for i in tmp do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 2
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29880
// SetFuel ( i , 0 ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_INT 0
29873: PPUSH
29874: CALL_OW 240
29878: GO 29863
29880: POP
29881: POP
// end ;
29882: PPOPN 2
29884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29885: LD_EXP 51
29889: PUSH
29890: LD_EXP 87
29894: AND
29895: IFFALSE 29961
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 30
29922: PUSH
29923: LD_INT 29
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 1
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 29961
// DestroyUnit ( tmp [ 1 ] ) ;
29948: LD_VAR 0 1
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PPUSH
29957: CALL_OW 65
// end ;
29961: PPOPN 1
29963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29964: LD_EXP 51
29968: PUSH
29969: LD_EXP 89
29973: AND
29974: IFFALSE 30103
29976: GO 29978
29978: DISABLE
29979: LD_INT 0
29981: PPUSH
// begin uc_side := 0 ;
29982: LD_ADDR_OWVAR 20
29986: PUSH
29987: LD_INT 0
29989: ST_TO_ADDR
// uc_nation := nation_arabian ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 2
29997: ST_TO_ADDR
// hc_gallery :=  ;
29998: LD_ADDR_OWVAR 33
30002: PUSH
30003: LD_STRING 
30005: ST_TO_ADDR
// hc_name :=  ;
30006: LD_ADDR_OWVAR 26
30010: PUSH
30011: LD_STRING 
30013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30014: LD_INT 1
30016: PPUSH
30017: LD_INT 11
30019: PPUSH
30020: LD_INT 10
30022: PPUSH
30023: CALL_OW 380
// un := CreateHuman ;
30027: LD_ADDR_VAR 0 1
30031: PUSH
30032: CALL_OW 44
30036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30037: LD_VAR 0 1
30041: PPUSH
30042: LD_INT 1
30044: PPUSH
30045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30049: LD_INT 35
30051: PPUSH
30052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30056: LD_VAR 0 1
30060: PPUSH
30061: LD_INT 22
30063: PUSH
30064: LD_OWVAR 2
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: CALL_OW 69
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 74
30087: PPUSH
30088: CALL_OW 115
// until IsDead ( un ) ;
30092: LD_VAR 0 1
30096: PPUSH
30097: CALL_OW 301
30101: IFFALSE 30049
// end ;
30103: PPOPN 1
30105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30106: LD_EXP 51
30110: PUSH
30111: LD_EXP 91
30115: AND
30116: IFFALSE 30128
30118: GO 30120
30120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30121: LD_STRING earthquake(getX(game), 0, 32)
30123: PPUSH
30124: CALL_OW 559
30128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30129: LD_EXP 51
30133: PUSH
30134: LD_EXP 92
30138: AND
30139: IFFALSE 30230
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
// begin enable ;
30147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30148: LD_ADDR_VAR 0 1
30152: PUSH
30153: LD_INT 22
30155: PUSH
30156: LD_OWVAR 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 21
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 33
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 1
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30204: LD_VAR 0 1
30208: PUSH
30209: LD_INT 1
30211: PPUSH
30212: LD_VAR 0 1
30216: PPUSH
30217: CALL_OW 12
30221: ARRAY
30222: PPUSH
30223: LD_INT 1
30225: PPUSH
30226: CALL_OW 234
// end ;
30230: PPOPN 1
30232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30233: LD_EXP 51
30237: PUSH
30238: LD_EXP 93
30242: AND
30243: IFFALSE 30384
30245: GO 30247
30247: DISABLE
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_INT 22
30260: PUSH
30261: LD_OWVAR 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 25
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 69
30288: ST_TO_ADDR
// if not tmp then
30289: LD_VAR 0 3
30293: NOT
30294: IFFALSE 30298
// exit ;
30296: GO 30384
// un := tmp [ rand ( 1 , tmp ) ] ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: LD_INT 1
30310: PPUSH
30311: LD_VAR 0 3
30315: PPUSH
30316: CALL_OW 12
30320: ARRAY
30321: ST_TO_ADDR
// if Crawls ( un ) then
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 318
30331: IFFALSE 30342
// ComWalk ( un ) ;
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30342: LD_VAR 0 2
30346: PPUSH
30347: LD_INT 9
30349: PPUSH
30350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30354: LD_INT 28
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30369: LD_INT 29
30371: PPUSH
30372: LD_OWVAR 2
30376: PPUSH
30377: LD_INT 2
30379: PPUSH
30380: CALL_OW 322
// end ;
30384: PPOPN 3
30386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30387: LD_EXP 51
30391: PUSH
30392: LD_EXP 94
30396: AND
30397: IFFALSE 30508
30399: GO 30401
30401: DISABLE
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
30406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30407: LD_ADDR_VAR 0 3
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 25
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 3
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30508
// un := tmp [ rand ( 1 , tmp ) ] ;
30452: LD_ADDR_VAR 0 2
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: LD_INT 1
30464: PPUSH
30465: LD_VAR 0 3
30469: PPUSH
30470: CALL_OW 12
30474: ARRAY
30475: ST_TO_ADDR
// if Crawls ( un ) then
30476: LD_VAR 0 2
30480: PPUSH
30481: CALL_OW 318
30485: IFFALSE 30496
// ComWalk ( un ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_INT 8
30503: PPUSH
30504: CALL_OW 336
// end ;
30508: PPOPN 3
30510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30511: LD_EXP 51
30515: PUSH
30516: LD_EXP 95
30520: AND
30521: IFFALSE 30665
30523: GO 30525
30525: DISABLE
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30530: LD_ADDR_VAR 0 2
30534: PUSH
30535: LD_INT 22
30537: PUSH
30538: LD_OWVAR 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 34
30562: PUSH
30563: LD_INT 12
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 34
30572: PUSH
30573: LD_INT 51
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 34
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 2
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30665
// for i in tmp do
30615: LD_ADDR_VAR 0 1
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: FOR_IN
30626: IFFALSE 30663
// if GetCargo ( i , mat_artifact ) = 0 then
30628: LD_VAR 0 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 289
30640: PUSH
30641: LD_INT 0
30643: EQUAL
30644: IFFALSE 30661
// SetCargo ( i , mat_siberit , 100 ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_INT 3
30653: PPUSH
30654: LD_INT 100
30656: PPUSH
30657: CALL_OW 290
30661: GO 30625
30663: POP
30664: POP
// end ;
30665: PPOPN 2
30667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30668: LD_EXP 51
30672: PUSH
30673: LD_EXP 96
30677: AND
30678: IFFALSE 30861
30680: GO 30682
30682: DISABLE
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_INT 22
30694: PUSH
30695: LD_OWVAR 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 69
30708: ST_TO_ADDR
// if not tmp then
30709: LD_VAR 0 2
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 30861
// for i := 1 to 2 do
30718: LD_ADDR_VAR 0 1
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_INT 2
30730: PUSH
30731: FOR_TO
30732: IFFALSE 30859
// begin uc_side := your_side ;
30734: LD_ADDR_OWVAR 20
30738: PUSH
30739: LD_OWVAR 2
30743: ST_TO_ADDR
// uc_nation := nation_american ;
30744: LD_ADDR_OWVAR 21
30748: PUSH
30749: LD_INT 1
30751: ST_TO_ADDR
// vc_chassis := us_morphling ;
30752: LD_ADDR_OWVAR 37
30756: PUSH
30757: LD_INT 5
30759: ST_TO_ADDR
// vc_engine := engine_siberite ;
30760: LD_ADDR_OWVAR 39
30764: PUSH
30765: LD_INT 3
30767: ST_TO_ADDR
// vc_control := control_computer ;
30768: LD_ADDR_OWVAR 38
30772: PUSH
30773: LD_INT 3
30775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30776: LD_ADDR_OWVAR 40
30780: PUSH
30781: LD_INT 10
30783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30784: LD_VAR 0 2
30788: PUSH
30789: LD_INT 1
30791: ARRAY
30792: PPUSH
30793: CALL_OW 310
30797: NOT
30798: IFFALSE 30845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30800: CALL_OW 45
30804: PPUSH
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: CALL_OW 250
30818: PPUSH
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 251
30832: PPUSH
30833: LD_INT 12
30835: PPUSH
30836: LD_INT 1
30838: PPUSH
30839: CALL_OW 50
30843: GO 30857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30845: CALL_OW 45
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 51
// end ;
30857: GO 30731
30859: POP
30860: POP
// end ;
30861: PPOPN 2
30863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30864: LD_EXP 51
30868: PUSH
30869: LD_EXP 97
30873: AND
30874: IFFALSE 31096
30876: GO 30878
30878: DISABLE
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30887: LD_ADDR_VAR 0 6
30891: PUSH
30892: LD_INT 22
30894: PUSH
30895: LD_OWVAR 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 21
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 23
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: PPUSH
30936: CALL_OW 69
30940: ST_TO_ADDR
// if not tmp then
30941: LD_VAR 0 6
30945: NOT
30946: IFFALSE 30950
// exit ;
30948: GO 31096
// s1 := rand ( 1 , 4 ) ;
30950: LD_ADDR_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: PPUSH
30958: LD_INT 4
30960: PPUSH
30961: CALL_OW 12
30965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30966: LD_ADDR_VAR 0 4
30970: PUSH
30971: LD_VAR 0 6
30975: PUSH
30976: LD_INT 1
30978: ARRAY
30979: PPUSH
30980: LD_VAR 0 2
30984: PPUSH
30985: CALL_OW 259
30989: ST_TO_ADDR
// if s1 = 1 then
30990: LD_VAR 0 2
30994: PUSH
30995: LD_INT 1
30997: EQUAL
30998: IFFALSE 31018
// s2 := rand ( 2 , 4 ) else
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_INT 2
31007: PPUSH
31008: LD_INT 4
31010: PPUSH
31011: CALL_OW 12
31015: ST_TO_ADDR
31016: GO 31026
// s2 := 1 ;
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 6
31035: PUSH
31036: LD_INT 1
31038: ARRAY
31039: PPUSH
31040: LD_VAR 0 3
31044: PPUSH
31045: CALL_OW 259
31049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31050: LD_VAR 0 6
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 2
31063: PPUSH
31064: LD_VAR 0 5
31068: PPUSH
31069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31073: LD_VAR 0 6
31077: PUSH
31078: LD_INT 1
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: CALL_OW 237
// end ;
31096: PPOPN 6
31098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31099: LD_EXP 51
31103: PUSH
31104: LD_EXP 98
31108: AND
31109: IFFALSE 31188
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31117: LD_ADDR_VAR 0 1
31121: PUSH
31122: LD_INT 22
31124: PUSH
31125: LD_OWVAR 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 30
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PPUSH
31148: CALL_OW 69
31152: ST_TO_ADDR
// if not tmp then
31153: LD_VAR 0 1
31157: NOT
31158: IFFALSE 31162
// exit ;
31160: GO 31188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 1
31169: PPUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 12
31179: ARRAY
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: CALL_OW 234
// end ;
31188: PPOPN 1
31190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31191: LD_EXP 51
31195: PUSH
31196: LD_EXP 99
31200: AND
31201: IFFALSE 31313
31203: GO 31205
31205: DISABLE
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31210: LD_ADDR_VAR 0 2
31214: PUSH
31215: LD_INT 22
31217: PUSH
31218: LD_OWVAR 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 27
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 26
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 28
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: ST_TO_ADDR
// if not tmp then
31275: LD_VAR 0 2
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31313
// for i in tmp do
31284: LD_ADDR_VAR 0 1
31288: PUSH
31289: LD_VAR 0 2
31293: PUSH
31294: FOR_IN
31295: IFFALSE 31311
// SetLives ( i , 1 ) ;
31297: LD_VAR 0 1
31301: PPUSH
31302: LD_INT 1
31304: PPUSH
31305: CALL_OW 234
31309: GO 31294
31311: POP
31312: POP
// end ;
31313: PPOPN 2
31315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31316: LD_EXP 51
31320: PUSH
31321: LD_EXP 100
31325: AND
31326: IFFALSE 31613
31328: GO 31330
31330: DISABLE
31331: LD_INT 0
31333: PPUSH
31334: PPUSH
31335: PPUSH
// begin i := rand ( 1 , 7 ) ;
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_INT 1
31343: PPUSH
31344: LD_INT 7
31346: PPUSH
31347: CALL_OW 12
31351: ST_TO_ADDR
// case i of 1 :
31352: LD_VAR 0 1
31356: PUSH
31357: LD_INT 1
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31375
31365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31366: LD_STRING earthquake(getX(game), 0, 32)
31368: PPUSH
31369: CALL_OW 559
31373: GO 31613
31375: LD_INT 2
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31397
31383: POP
// begin ToLua ( displayStucuk(); ) ;
31384: LD_STRING displayStucuk();
31386: PPUSH
31387: CALL_OW 559
// ResetFog ;
31391: CALL_OW 335
// end ; 3 :
31395: GO 31613
31397: LD_INT 3
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31509
31405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_OWVAR 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 25
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: ST_TO_ADDR
// if not tmp then
31442: LD_VAR 0 2
31446: NOT
31447: IFFALSE 31451
// exit ;
31449: GO 31613
// un := tmp [ rand ( 1 , tmp ) ] ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: PPUSH
31464: LD_VAR 0 2
31468: PPUSH
31469: CALL_OW 12
31473: ARRAY
31474: ST_TO_ADDR
// if Crawls ( un ) then
31475: LD_VAR 0 3
31479: PPUSH
31480: CALL_OW 318
31484: IFFALSE 31495
// ComWalk ( un ) ;
31486: LD_VAR 0 3
31490: PPUSH
31491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31495: LD_VAR 0 3
31499: PPUSH
31500: LD_INT 8
31502: PPUSH
31503: CALL_OW 336
// end ; 4 :
31507: GO 31613
31509: LD_INT 4
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31591
31517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_OWVAR 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: LD_INT 29
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31563: LD_VAR 0 2
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: PPUSH
31572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31576: LD_VAR 0 2
31580: PUSH
31581: LD_INT 1
31583: ARRAY
31584: PPUSH
31585: CALL_OW 65
// end ; 5 .. 7 :
31589: GO 31613
31591: LD_INT 5
31593: DOUBLE
31594: GREATEREQUAL
31595: IFFALSE 31603
31597: LD_INT 7
31599: DOUBLE
31600: LESSEQUAL
31601: IFTRUE 31605
31603: GO 31612
31605: POP
// StreamSibBomb ; end ;
31606: CALL 27850 0 0
31610: GO 31613
31612: POP
// end ;
31613: PPOPN 3
31615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31616: LD_EXP 51
31620: PUSH
31621: LD_EXP 101
31625: AND
31626: IFFALSE 31782
31628: GO 31630
31630: DISABLE
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_INT 81
31643: PUSH
31644: LD_OWVAR 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 21
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 21
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: CALL_OW 69
31689: ST_TO_ADDR
// if not tmp then
31690: LD_VAR 0 2
31694: NOT
31695: IFFALSE 31699
// exit ;
31697: GO 31782
// p := 0 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 0
31706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31707: LD_INT 35
31709: PPUSH
31710: CALL_OW 67
// p := p + 1 ;
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_VAR 0 3
31723: PUSH
31724: LD_INT 1
31726: PLUS
31727: ST_TO_ADDR
// for i in tmp do
31728: LD_ADDR_VAR 0 1
31732: PUSH
31733: LD_VAR 0 2
31737: PUSH
31738: FOR_IN
31739: IFFALSE 31770
// if GetLives ( i ) < 1000 then
31741: LD_VAR 0 1
31745: PPUSH
31746: CALL_OW 256
31750: PUSH
31751: LD_INT 1000
31753: LESS
31754: IFFALSE 31768
// SetLives ( i , 1000 ) ;
31756: LD_VAR 0 1
31760: PPUSH
31761: LD_INT 1000
31763: PPUSH
31764: CALL_OW 234
31768: GO 31738
31770: POP
31771: POP
// until p > 20 ;
31772: LD_VAR 0 3
31776: PUSH
31777: LD_INT 20
31779: GREATER
31780: IFFALSE 31707
// end ;
31782: PPOPN 3
31784: END
// every 0 0$1 trigger StreamModeActive and sTime do
31785: LD_EXP 51
31789: PUSH
31790: LD_EXP 102
31794: AND
31795: IFFALSE 31830
31797: GO 31799
31799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31800: LD_INT 28
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31815: LD_INT 30
31817: PPUSH
31818: LD_OWVAR 2
31822: PPUSH
31823: LD_INT 2
31825: PPUSH
31826: CALL_OW 322
// end ;
31830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31831: LD_EXP 51
31835: PUSH
31836: LD_EXP 103
31840: AND
31841: IFFALSE 31962
31843: GO 31845
31845: DISABLE
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_OWVAR 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 21
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 23
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: ST_TO_ADDR
// if not tmp then
31904: LD_VAR 0 2
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 31962
// for i in tmp do
31913: LD_ADDR_VAR 0 1
31917: PUSH
31918: LD_VAR 0 2
31922: PUSH
31923: FOR_IN
31924: IFFALSE 31960
// begin if Crawls ( i ) then
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 318
31935: IFFALSE 31946
// ComWalk ( i ) ;
31937: LD_VAR 0 1
31941: PPUSH
31942: CALL_OW 138
// SetClass ( i , 2 ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 2
31953: PPUSH
31954: CALL_OW 336
// end ;
31958: GO 31923
31960: POP
31961: POP
// end ;
31962: PPOPN 2
31964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31965: LD_EXP 51
31969: PUSH
31970: LD_EXP 104
31974: AND
31975: IFFALSE 32263
31977: GO 31979
31979: DISABLE
31980: LD_INT 0
31982: PPUSH
31983: PPUSH
31984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31985: LD_OWVAR 2
31989: PPUSH
31990: LD_INT 9
31992: PPUSH
31993: LD_INT 1
31995: PPUSH
31996: LD_INT 1
31998: PPUSH
31999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32003: LD_INT 9
32005: PPUSH
32006: LD_OWVAR 2
32010: PPUSH
32011: CALL_OW 343
// uc_side := 9 ;
32015: LD_ADDR_OWVAR 20
32019: PUSH
32020: LD_INT 9
32022: ST_TO_ADDR
// uc_nation := 2 ;
32023: LD_ADDR_OWVAR 21
32027: PUSH
32028: LD_INT 2
32030: ST_TO_ADDR
// hc_name := Dark Warrior ;
32031: LD_ADDR_OWVAR 26
32035: PUSH
32036: LD_STRING Dark Warrior
32038: ST_TO_ADDR
// hc_gallery :=  ;
32039: LD_ADDR_OWVAR 33
32043: PUSH
32044: LD_STRING 
32046: ST_TO_ADDR
// hc_noskilllimit := true ;
32047: LD_ADDR_OWVAR 76
32051: PUSH
32052: LD_INT 1
32054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32055: LD_ADDR_OWVAR 31
32059: PUSH
32060: LD_INT 30
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 30
32068: PUSH
32069: LD_INT 30
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// un := CreateHuman ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: CALL_OW 44
32087: ST_TO_ADDR
// hc_noskilllimit := false ;
32088: LD_ADDR_OWVAR 76
32092: PUSH
32093: LD_INT 0
32095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32096: LD_VAR 0 3
32100: PPUSH
32101: LD_INT 1
32103: PPUSH
32104: CALL_OW 51
// ToLua ( playRanger() ) ;
32108: LD_STRING playRanger()
32110: PPUSH
32111: CALL_OW 559
// p := 0 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32123: LD_INT 35
32125: PPUSH
32126: CALL_OW 67
// p := p + 1 ;
32130: LD_ADDR_VAR 0 2
32134: PUSH
32135: LD_VAR 0 2
32139: PUSH
32140: LD_INT 1
32142: PLUS
32143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32144: LD_VAR 0 3
32148: PPUSH
32149: CALL_OW 256
32153: PUSH
32154: LD_INT 1000
32156: LESS
32157: IFFALSE 32171
// SetLives ( un , 1000 ) ;
32159: LD_VAR 0 3
32163: PPUSH
32164: LD_INT 1000
32166: PPUSH
32167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32171: LD_VAR 0 3
32175: PPUSH
32176: LD_INT 81
32178: PUSH
32179: LD_OWVAR 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 91
32190: PUSH
32191: LD_VAR 0 3
32195: PUSH
32196: LD_INT 30
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 69
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 74
32222: PPUSH
32223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32227: LD_VAR 0 2
32231: PUSH
32232: LD_INT 80
32234: GREATER
32235: PUSH
32236: LD_VAR 0 3
32240: PPUSH
32241: CALL_OW 301
32245: OR
32246: IFFALSE 32123
// if un then
32248: LD_VAR 0 3
32252: IFFALSE 32263
// RemoveUnit ( un ) ;
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 64
// end ;
32263: PPOPN 3
32265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32266: LD_EXP 105
32270: IFFALSE 32386
32272: GO 32274
32274: DISABLE
32275: LD_INT 0
32277: PPUSH
32278: PPUSH
32279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32280: LD_ADDR_VAR 0 2
32284: PUSH
32285: LD_INT 81
32287: PUSH
32288: LD_OWVAR 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 21
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PPUSH
32311: CALL_OW 69
32315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32316: LD_STRING playComputer()
32318: PPUSH
32319: CALL_OW 559
// if not tmp then
32323: LD_VAR 0 2
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32386
// for i in tmp do
32332: LD_ADDR_VAR 0 1
32336: PUSH
32337: LD_VAR 0 2
32341: PUSH
32342: FOR_IN
32343: IFFALSE 32384
// for j := 1 to 4 do
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: DOUBLE
32351: LD_INT 1
32353: DEC
32354: ST_TO_ADDR
32355: LD_INT 4
32357: PUSH
32358: FOR_TO
32359: IFFALSE 32380
// SetSkill ( i , j , 10 ) ;
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 3
32370: PPUSH
32371: LD_INT 10
32373: PPUSH
32374: CALL_OW 237
32378: GO 32358
32380: POP
32381: POP
32382: GO 32342
32384: POP
32385: POP
// end ;
32386: PPOPN 3
32388: END
// every 0 0$1 trigger s30 do var i , tmp ;
32389: LD_EXP 106
32393: IFFALSE 32462
32395: GO 32397
32397: DISABLE
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32462
// for i in tmp do
32433: LD_ADDR_VAR 0 1
32437: PUSH
32438: LD_VAR 0 2
32442: PUSH
32443: FOR_IN
32444: IFFALSE 32460
// SetLives ( i , 300 ) ;
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_INT 300
32453: PPUSH
32454: CALL_OW 234
32458: GO 32443
32460: POP
32461: POP
// end ;
32462: PPOPN 2
32464: END
// every 0 0$1 trigger s60 do var i , tmp ;
32465: LD_EXP 107
32469: IFFALSE 32538
32471: GO 32473
32473: DISABLE
32474: LD_INT 0
32476: PPUSH
32477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32478: LD_ADDR_VAR 0 2
32482: PUSH
32483: LD_INT 22
32485: PUSH
32486: LD_OWVAR 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL_OW 69
32499: ST_TO_ADDR
// if not tmp then
32500: LD_VAR 0 2
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32538
// for i in tmp do
32509: LD_ADDR_VAR 0 1
32513: PUSH
32514: LD_VAR 0 2
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32536
// SetLives ( i , 600 ) ;
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_INT 600
32529: PPUSH
32530: CALL_OW 234
32534: GO 32519
32536: POP
32537: POP
// end ;
32538: PPOPN 2
32540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32541: LD_INT 0
32543: PPUSH
// case cmd of 301 :
32544: LD_VAR 0 1
32548: PUSH
32549: LD_INT 301
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32589
32557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32558: LD_VAR 0 6
32562: PPUSH
32563: LD_VAR 0 7
32567: PPUSH
32568: LD_VAR 0 8
32572: PPUSH
32573: LD_VAR 0 4
32577: PPUSH
32578: LD_VAR 0 5
32582: PPUSH
32583: CALL 33798 0 5
32587: GO 32710
32589: LD_INT 302
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32634
32597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32598: LD_VAR 0 6
32602: PPUSH
32603: LD_VAR 0 7
32607: PPUSH
32608: LD_VAR 0 8
32612: PPUSH
32613: LD_VAR 0 9
32617: PPUSH
32618: LD_VAR 0 4
32622: PPUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: CALL 33889 0 6
32632: GO 32710
32634: LD_INT 303
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32679
32642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32643: LD_VAR 0 6
32647: PPUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_VAR 0 9
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: LD_VAR 0 5
32672: PPUSH
32673: CALL 32715 0 6
32677: GO 32710
32679: LD_INT 304
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32709
32687: POP
// hHackTeleport ( unit , x , y ) ; end ;
32688: LD_VAR 0 2
32692: PPUSH
32693: LD_VAR 0 4
32697: PPUSH
32698: LD_VAR 0 5
32702: PPUSH
32703: CALL 34482 0 3
32707: GO 32710
32709: POP
// end ;
32710: LD_VAR 0 12
32714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32715: LD_INT 0
32717: PPUSH
32718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 1
32726: LESS
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_INT 3
32735: GREATER
32736: OR
32737: PUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 428
32752: OR
32753: IFFALSE 32757
// exit ;
32755: GO 33485
// uc_side := your_side ;
32757: LD_ADDR_OWVAR 20
32761: PUSH
32762: LD_OWVAR 2
32766: ST_TO_ADDR
// uc_nation := nation ;
32767: LD_ADDR_OWVAR 21
32771: PUSH
32772: LD_VAR 0 1
32776: ST_TO_ADDR
// bc_level = 1 ;
32777: LD_ADDR_OWVAR 43
32781: PUSH
32782: LD_INT 1
32784: ST_TO_ADDR
// case btype of 1 :
32785: LD_VAR 0 2
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_depot ; 2 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 0
32806: ST_TO_ADDR
32807: GO 33429
32809: LD_INT 2
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_warehouse ; 3 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
32826: GO 33429
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_lab ; 4 .. 9 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 6
32844: ST_TO_ADDR
32845: GO 33429
32847: LD_INT 4
32849: DOUBLE
32850: GREATEREQUAL
32851: IFFALSE 32859
32853: LD_INT 9
32855: DOUBLE
32856: LESSEQUAL
32857: IFTRUE 32861
32859: GO 32921
32861: POP
// begin bc_type := b_lab_half ;
32862: LD_ADDR_OWVAR 42
32866: PUSH
32867: LD_INT 7
32869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32870: LD_ADDR_OWVAR 44
32874: PUSH
32875: LD_INT 10
32877: PUSH
32878: LD_INT 11
32880: PUSH
32881: LD_INT 12
32883: PUSH
32884: LD_INT 15
32886: PUSH
32887: LD_INT 14
32889: PUSH
32890: LD_INT 13
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_INT 3
32908: MINUS
32909: ARRAY
32910: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32911: LD_ADDR_OWVAR 45
32915: PUSH
32916: LD_INT 9
32918: ST_TO_ADDR
// end ; 10 .. 13 :
32919: GO 33429
32921: LD_INT 10
32923: DOUBLE
32924: GREATEREQUAL
32925: IFFALSE 32933
32927: LD_INT 13
32929: DOUBLE
32930: LESSEQUAL
32931: IFTRUE 32935
32933: GO 33012
32935: POP
// begin bc_type := b_lab_full ;
32936: LD_ADDR_OWVAR 42
32940: PUSH
32941: LD_INT 8
32943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32944: LD_ADDR_OWVAR 44
32948: PUSH
32949: LD_INT 10
32951: PUSH
32952: LD_INT 12
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: LD_INT 13
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: PUSH
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 9
32974: MINUS
32975: ARRAY
32976: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32977: LD_ADDR_OWVAR 45
32981: PUSH
32982: LD_INT 11
32984: PUSH
32985: LD_INT 15
32987: PUSH
32988: LD_INT 12
32990: PUSH
32991: LD_INT 15
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: LD_VAR 0 2
33004: PUSH
33005: LD_INT 9
33007: MINUS
33008: ARRAY
33009: ST_TO_ADDR
// end ; 14 :
33010: GO 33429
33012: LD_INT 14
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33031
33020: POP
// bc_type := b_workshop ; 15 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 2
33028: ST_TO_ADDR
33029: GO 33429
33031: LD_INT 15
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33050
33039: POP
// bc_type := b_factory ; 16 :
33040: LD_ADDR_OWVAR 42
33044: PUSH
33045: LD_INT 3
33047: ST_TO_ADDR
33048: GO 33429
33050: LD_INT 16
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33069
33058: POP
// bc_type := b_ext_gun ; 17 :
33059: LD_ADDR_OWVAR 42
33063: PUSH
33064: LD_INT 17
33066: ST_TO_ADDR
33067: GO 33429
33069: LD_INT 17
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33105
33077: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33078: LD_ADDR_OWVAR 42
33082: PUSH
33083: LD_INT 19
33085: PUSH
33086: LD_INT 23
33088: PUSH
33089: LD_INT 19
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: PUSH
33097: LD_VAR 0 1
33101: ARRAY
33102: ST_TO_ADDR
33103: GO 33429
33105: LD_INT 18
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_ext_radar ; 19 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 20
33121: ST_TO_ADDR
33122: GO 33429
33124: LD_INT 19
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_ext_radio ; 20 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 22
33140: ST_TO_ADDR
33141: GO 33429
33143: LD_INT 20
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_ext_siberium ; 21 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 21
33159: ST_TO_ADDR
33160: GO 33429
33162: LD_INT 21
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_ext_computer ; 22 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 24
33178: ST_TO_ADDR
33179: GO 33429
33181: LD_INT 22
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_ext_track ; 23 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 16
33197: ST_TO_ADDR
33198: GO 33429
33200: LD_INT 23
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_ext_laser ; 24 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 25
33216: ST_TO_ADDR
33217: GO 33429
33219: LD_INT 24
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_control_tower ; 25 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 36
33235: ST_TO_ADDR
33236: GO 33429
33238: LD_INT 25
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_breastwork ; 26 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 31
33254: ST_TO_ADDR
33255: GO 33429
33257: LD_INT 26
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_bunker ; 27 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 32
33273: ST_TO_ADDR
33274: GO 33429
33276: LD_INT 27
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_turret ; 28 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 33
33292: ST_TO_ADDR
33293: GO 33429
33295: LD_INT 28
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_armoury ; 29 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 4
33311: ST_TO_ADDR
33312: GO 33429
33314: LD_INT 29
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_barracks ; 30 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 5
33330: ST_TO_ADDR
33331: GO 33429
33333: LD_INT 30
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_solar_power ; 31 :
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 27
33349: ST_TO_ADDR
33350: GO 33429
33352: LD_INT 31
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// bc_type := b_oil_power ; 32 :
33361: LD_ADDR_OWVAR 42
33365: PUSH
33366: LD_INT 26
33368: ST_TO_ADDR
33369: GO 33429
33371: LD_INT 32
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33390
33379: POP
// bc_type := b_siberite_power ; 33 :
33380: LD_ADDR_OWVAR 42
33384: PUSH
33385: LD_INT 28
33387: ST_TO_ADDR
33388: GO 33429
33390: LD_INT 33
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// bc_type := b_oil_mine ; 34 :
33399: LD_ADDR_OWVAR 42
33403: PUSH
33404: LD_INT 29
33406: ST_TO_ADDR
33407: GO 33429
33409: LD_INT 34
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33428
33417: POP
// bc_type := b_siberite_mine ; end ;
33418: LD_ADDR_OWVAR 42
33422: PUSH
33423: LD_INT 30
33425: ST_TO_ADDR
33426: GO 33429
33428: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33429: LD_ADDR_VAR 0 8
33433: PUSH
33434: LD_VAR 0 5
33438: PPUSH
33439: LD_VAR 0 6
33443: PPUSH
33444: LD_VAR 0 3
33448: PPUSH
33449: CALL_OW 47
33453: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33454: LD_OWVAR 42
33458: PUSH
33459: LD_INT 32
33461: PUSH
33462: LD_INT 33
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: IN
33469: IFFALSE 33485
// PlaceWeaponTurret ( b , weapon ) ;
33471: LD_VAR 0 8
33475: PPUSH
33476: LD_VAR 0 4
33480: PPUSH
33481: CALL_OW 431
// end ;
33485: LD_VAR 0 7
33489: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33490: LD_INT 0
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33496: LD_ADDR_VAR 0 4
33500: PUSH
33501: LD_INT 22
33503: PUSH
33504: LD_OWVAR 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 30
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 69
33549: ST_TO_ADDR
// if not tmp then
33550: LD_VAR 0 4
33554: NOT
33555: IFFALSE 33559
// exit ;
33557: GO 33618
// for i in tmp do
33559: LD_ADDR_VAR 0 2
33563: PUSH
33564: LD_VAR 0 4
33568: PUSH
33569: FOR_IN
33570: IFFALSE 33616
// for j = 1 to 3 do
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: DOUBLE
33578: LD_INT 1
33580: DEC
33581: ST_TO_ADDR
33582: LD_INT 3
33584: PUSH
33585: FOR_TO
33586: IFFALSE 33612
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33588: LD_VAR 0 2
33592: PPUSH
33593: CALL_OW 274
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: LD_INT 99999
33605: PPUSH
33606: CALL_OW 277
33610: GO 33585
33612: POP
33613: POP
33614: GO 33569
33616: POP
33617: POP
// end ;
33618: LD_VAR 0 1
33622: RET
// export function hHackSetLevel10 ; var i , j ; begin
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
33627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: PUSH
33648: FOR_IN
33649: IFFALSE 33701
// if IsSelected ( i ) then
33651: LD_VAR 0 2
33655: PPUSH
33656: CALL_OW 306
33660: IFFALSE 33699
// begin for j := 1 to 4 do
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: DOUBLE
33668: LD_INT 1
33670: DEC
33671: ST_TO_ADDR
33672: LD_INT 4
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33697
// SetSkill ( i , j , 10 ) ;
33678: LD_VAR 0 2
33682: PPUSH
33683: LD_VAR 0 3
33687: PPUSH
33688: LD_INT 10
33690: PPUSH
33691: CALL_OW 237
33695: GO 33675
33697: POP
33698: POP
// end ;
33699: GO 33648
33701: POP
33702: POP
// end ;
33703: LD_VAR 0 1
33707: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: LD_INT 22
33720: PUSH
33721: LD_OWVAR 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 21
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PPUSH
33744: CALL_OW 69
33748: PUSH
33749: FOR_IN
33750: IFFALSE 33791
// begin for j := 1 to 4 do
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: DOUBLE
33758: LD_INT 1
33760: DEC
33761: ST_TO_ADDR
33762: LD_INT 4
33764: PUSH
33765: FOR_TO
33766: IFFALSE 33787
// SetSkill ( i , j , 10 ) ;
33768: LD_VAR 0 2
33772: PPUSH
33773: LD_VAR 0 3
33777: PPUSH
33778: LD_INT 10
33780: PPUSH
33781: CALL_OW 237
33785: GO 33765
33787: POP
33788: POP
// end ;
33789: GO 33749
33791: POP
33792: POP
// end ;
33793: LD_VAR 0 1
33797: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33798: LD_INT 0
33800: PPUSH
// uc_side := your_side ;
33801: LD_ADDR_OWVAR 20
33805: PUSH
33806: LD_OWVAR 2
33810: ST_TO_ADDR
// uc_nation := nation ;
33811: LD_ADDR_OWVAR 21
33815: PUSH
33816: LD_VAR 0 1
33820: ST_TO_ADDR
// InitHc ;
33821: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33825: LD_INT 0
33827: PPUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33842: LD_VAR 0 4
33846: PPUSH
33847: LD_VAR 0 5
33851: PPUSH
33852: CALL_OW 428
33856: PUSH
33857: LD_INT 0
33859: EQUAL
33860: IFFALSE 33884
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33862: CALL_OW 44
33866: PPUSH
33867: LD_VAR 0 4
33871: PPUSH
33872: LD_VAR 0 5
33876: PPUSH
33877: LD_INT 1
33879: PPUSH
33880: CALL_OW 48
// end ;
33884: LD_VAR 0 6
33888: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
// uc_side := your_side ;
33893: LD_ADDR_OWVAR 20
33897: PUSH
33898: LD_OWVAR 2
33902: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33903: LD_VAR 0 1
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: IN
33930: IFFALSE 33942
// uc_nation := nation_american else
33932: LD_ADDR_OWVAR 21
33936: PUSH
33937: LD_INT 1
33939: ST_TO_ADDR
33940: GO 33985
// if chassis in [ 11 , 12 , 13 , 14 ] then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_INT 11
33949: PUSH
33950: LD_INT 12
33952: PUSH
33953: LD_INT 13
33955: PUSH
33956: LD_INT 14
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: IN
33965: IFFALSE 33977
// uc_nation := nation_arabian else
33967: LD_ADDR_OWVAR 21
33971: PUSH
33972: LD_INT 2
33974: ST_TO_ADDR
33975: GO 33985
// uc_nation := nation_russian ;
33977: LD_ADDR_OWVAR 21
33981: PUSH
33982: LD_INT 3
33984: ST_TO_ADDR
// vc_chassis := chassis ;
33985: LD_ADDR_OWVAR 37
33989: PUSH
33990: LD_VAR 0 1
33994: ST_TO_ADDR
// vc_engine := engine ;
33995: LD_ADDR_OWVAR 39
33999: PUSH
34000: LD_VAR 0 2
34004: ST_TO_ADDR
// vc_control := control ;
34005: LD_ADDR_OWVAR 38
34009: PUSH
34010: LD_VAR 0 3
34014: ST_TO_ADDR
// vc_weapon := weapon ;
34015: LD_ADDR_OWVAR 40
34019: PUSH
34020: LD_VAR 0 4
34024: ST_TO_ADDR
// un := CreateVehicle ;
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: CALL_OW 45
34034: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34035: LD_VAR 0 8
34039: PPUSH
34040: LD_INT 0
34042: PPUSH
34043: LD_INT 5
34045: PPUSH
34046: CALL_OW 12
34050: PPUSH
34051: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34055: LD_VAR 0 8
34059: PPUSH
34060: LD_VAR 0 5
34064: PPUSH
34065: LD_VAR 0 6
34069: PPUSH
34070: LD_INT 1
34072: PPUSH
34073: CALL_OW 48
// end ;
34077: LD_VAR 0 7
34081: RET
// export hInvincible ; every 1 do
34082: GO 34084
34084: DISABLE
// hInvincible := [ ] ;
34085: LD_ADDR_EXP 108
34089: PUSH
34090: EMPTY
34091: ST_TO_ADDR
34092: END
// every 10 do var i ;
34093: GO 34095
34095: DISABLE
34096: LD_INT 0
34098: PPUSH
// begin enable ;
34099: ENABLE
// if not hInvincible then
34100: LD_EXP 108
34104: NOT
34105: IFFALSE 34109
// exit ;
34107: GO 34153
// for i in hInvincible do
34109: LD_ADDR_VAR 0 1
34113: PUSH
34114: LD_EXP 108
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34151
// if GetLives ( i ) < 1000 then
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 256
34131: PUSH
34132: LD_INT 1000
34134: LESS
34135: IFFALSE 34149
// SetLives ( i , 1000 ) ;
34137: LD_VAR 0 1
34141: PPUSH
34142: LD_INT 1000
34144: PPUSH
34145: CALL_OW 234
34149: GO 34119
34151: POP
34152: POP
// end ;
34153: PPOPN 1
34155: END
// export function hHackInvincible ; var i ; begin
34156: LD_INT 0
34158: PPUSH
34159: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34160: LD_ADDR_VAR 0 2
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 21
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 21
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 69
34197: PUSH
34198: FOR_IN
34199: IFFALSE 34260
// if IsSelected ( i ) then
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 306
34210: IFFALSE 34258
// begin if i in hInvincible then
34212: LD_VAR 0 2
34216: PUSH
34217: LD_EXP 108
34221: IN
34222: IFFALSE 34242
// hInvincible := hInvincible diff i else
34224: LD_ADDR_EXP 108
34228: PUSH
34229: LD_EXP 108
34233: PUSH
34234: LD_VAR 0 2
34238: DIFF
34239: ST_TO_ADDR
34240: GO 34258
// hInvincible := hInvincible union i ;
34242: LD_ADDR_EXP 108
34246: PUSH
34247: LD_EXP 108
34251: PUSH
34252: LD_VAR 0 2
34256: UNION
34257: ST_TO_ADDR
// end ;
34258: GO 34198
34260: POP
34261: POP
// end ;
34262: LD_VAR 0 1
34266: RET
// export function hHackInvisible ; var i , j ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
34271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34272: LD_ADDR_VAR 0 2
34276: PUSH
34277: LD_INT 21
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: PUSH
34292: FOR_IN
34293: IFFALSE 34317
// if IsSelected ( i ) then
34295: LD_VAR 0 2
34299: PPUSH
34300: CALL_OW 306
34304: IFFALSE 34315
// ComForceInvisible ( i ) ;
34306: LD_VAR 0 2
34310: PPUSH
34311: CALL_OW 496
34315: GO 34292
34317: POP
34318: POP
// end ;
34319: LD_VAR 0 1
34323: RET
// export function hHackChangeYourSide ; begin
34324: LD_INT 0
34326: PPUSH
// if your_side = 8 then
34327: LD_OWVAR 2
34331: PUSH
34332: LD_INT 8
34334: EQUAL
34335: IFFALSE 34347
// your_side := 0 else
34337: LD_ADDR_OWVAR 2
34341: PUSH
34342: LD_INT 0
34344: ST_TO_ADDR
34345: GO 34361
// your_side := your_side + 1 ;
34347: LD_ADDR_OWVAR 2
34351: PUSH
34352: LD_OWVAR 2
34356: PUSH
34357: LD_INT 1
34359: PLUS
34360: ST_TO_ADDR
// end ;
34361: LD_VAR 0 1
34365: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34366: LD_INT 0
34368: PPUSH
34369: PPUSH
34370: PPUSH
// for i in all_units do
34371: LD_ADDR_VAR 0 2
34375: PUSH
34376: LD_OWVAR 3
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34460
// if IsSelected ( i ) then
34384: LD_VAR 0 2
34388: PPUSH
34389: CALL_OW 306
34393: IFFALSE 34458
// begin j := GetSide ( i ) ;
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_VAR 0 2
34404: PPUSH
34405: CALL_OW 255
34409: ST_TO_ADDR
// if j = 8 then
34410: LD_VAR 0 3
34414: PUSH
34415: LD_INT 8
34417: EQUAL
34418: IFFALSE 34430
// j := 0 else
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 0
34427: ST_TO_ADDR
34428: GO 34444
// j := j + 1 ;
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_VAR 0 3
34439: PUSH
34440: LD_INT 1
34442: PLUS
34443: ST_TO_ADDR
// SetSide ( i , j ) ;
34444: LD_VAR 0 2
34448: PPUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: CALL_OW 235
// end ;
34458: GO 34381
34460: POP
34461: POP
// end ;
34462: LD_VAR 0 1
34466: RET
// export function hHackFog ; begin
34467: LD_INT 0
34469: PPUSH
// FogOff ( true ) ;
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 344
// end ;
34477: LD_VAR 0 1
34481: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34482: LD_INT 0
34484: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: LD_INT 1
34502: PPUSH
34503: LD_INT 1
34505: PPUSH
34506: CALL_OW 483
// CenterOnXY ( x , y ) ;
34510: LD_VAR 0 2
34514: PPUSH
34515: LD_VAR 0 3
34519: PPUSH
34520: CALL_OW 84
// end ;
34524: LD_VAR 0 4
34528: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34533: LD_VAR 0 1
34537: NOT
34538: PUSH
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 488
34553: NOT
34554: OR
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 266
34565: PUSH
34566: LD_INT 3
34568: NONEQUAL
34569: PUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 247
34579: PUSH
34580: LD_INT 1
34582: EQUAL
34583: NOT
34584: AND
34585: OR
34586: IFFALSE 34590
// exit ;
34588: GO 34739
// if GetType ( factory ) = unit_human then
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 247
34599: PUSH
34600: LD_INT 1
34602: EQUAL
34603: IFFALSE 34620
// factory := IsInUnit ( factory ) ;
34605: LD_ADDR_VAR 0 1
34609: PUSH
34610: LD_VAR 0 1
34614: PPUSH
34615: CALL_OW 310
34619: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 266
34629: PUSH
34630: LD_INT 3
34632: NONEQUAL
34633: IFFALSE 34637
// exit ;
34635: GO 34739
// if HexInfo ( x , y ) = factory then
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_VAR 0 3
34646: PPUSH
34647: CALL_OW 428
34651: PUSH
34652: LD_VAR 0 1
34656: EQUAL
34657: IFFALSE 34684
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34659: LD_ADDR_EXP 109
34663: PUSH
34664: LD_EXP 109
34668: PPUSH
34669: LD_VAR 0 1
34673: PPUSH
34674: LD_INT 0
34676: PPUSH
34677: CALL_OW 1
34681: ST_TO_ADDR
34682: GO 34735
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34684: LD_ADDR_EXP 109
34688: PUSH
34689: LD_EXP 109
34693: PPUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 255
34708: PUSH
34709: LD_VAR 0 1
34713: PUSH
34714: LD_VAR 0 2
34718: PUSH
34719: LD_VAR 0 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34735: CALL 34744 0 0
// end ;
34739: LD_VAR 0 4
34743: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34749: LD_STRING resetFactoryWaypoint();
34751: PPUSH
34752: CALL_OW 559
// if factoryWaypoints then
34756: LD_EXP 109
34760: IFFALSE 34886
// begin list := PrepareArray ( factoryWaypoints ) ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_EXP 109
34771: PPUSH
34772: CALL 81208 0 1
34776: ST_TO_ADDR
// for i := 1 to list do
34777: LD_ADDR_VAR 0 2
34781: PUSH
34782: DOUBLE
34783: LD_INT 1
34785: DEC
34786: ST_TO_ADDR
34787: LD_VAR 0 3
34791: PUSH
34792: FOR_TO
34793: IFFALSE 34884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34795: LD_STRING setFactoryWaypointXY(
34797: PUSH
34798: LD_VAR 0 3
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: STR
34813: PUSH
34814: LD_STRING ,
34816: STR
34817: PUSH
34818: LD_VAR 0 3
34822: PUSH
34823: LD_VAR 0 2
34827: ARRAY
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: STR
34833: PUSH
34834: LD_STRING ,
34836: STR
34837: PUSH
34838: LD_VAR 0 3
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: PUSH
34849: LD_INT 3
34851: ARRAY
34852: STR
34853: PUSH
34854: LD_STRING ,
34856: STR
34857: PUSH
34858: LD_VAR 0 3
34862: PUSH
34863: LD_VAR 0 2
34867: ARRAY
34868: PUSH
34869: LD_INT 4
34871: ARRAY
34872: STR
34873: PUSH
34874: LD_STRING )
34876: STR
34877: PPUSH
34878: CALL_OW 559
34882: GO 34792
34884: POP
34885: POP
// end ; end ;
34886: LD_VAR 0 1
34890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34891: LD_INT 0
34893: PPUSH
// if HexInfo ( x , y ) = warehouse then
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: CALL_OW 428
34908: PUSH
34909: LD_VAR 0 1
34913: EQUAL
34914: IFFALSE 34941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34916: LD_ADDR_EXP 110
34920: PUSH
34921: LD_EXP 110
34925: PPUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_INT 0
34933: PPUSH
34934: CALL_OW 1
34938: ST_TO_ADDR
34939: GO 34992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34941: LD_ADDR_EXP 110
34945: PUSH
34946: LD_EXP 110
34950: PPUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 255
34965: PUSH
34966: LD_VAR 0 1
34970: PUSH
34971: LD_VAR 0 2
34975: PUSH
34976: LD_VAR 0 3
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: PPUSH
34987: CALL_OW 1
34991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34992: CALL 35001 0 0
// end ;
34996: LD_VAR 0 4
35000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
35005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35006: LD_STRING resetWarehouseGatheringPoints();
35008: PPUSH
35009: CALL_OW 559
// if warehouseGatheringPoints then
35013: LD_EXP 110
35017: IFFALSE 35143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_EXP 110
35028: PPUSH
35029: CALL 81208 0 1
35033: ST_TO_ADDR
// for i := 1 to list do
35034: LD_ADDR_VAR 0 2
35038: PUSH
35039: DOUBLE
35040: LD_INT 1
35042: DEC
35043: ST_TO_ADDR
35044: LD_VAR 0 3
35048: PUSH
35049: FOR_TO
35050: IFFALSE 35141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35052: LD_STRING setWarehouseGatheringPointXY(
35054: PUSH
35055: LD_VAR 0 3
35059: PUSH
35060: LD_VAR 0 2
35064: ARRAY
35065: PUSH
35066: LD_INT 1
35068: ARRAY
35069: STR
35070: PUSH
35071: LD_STRING ,
35073: STR
35074: PUSH
35075: LD_VAR 0 3
35079: PUSH
35080: LD_VAR 0 2
35084: ARRAY
35085: PUSH
35086: LD_INT 2
35088: ARRAY
35089: STR
35090: PUSH
35091: LD_STRING ,
35093: STR
35094: PUSH
35095: LD_VAR 0 3
35099: PUSH
35100: LD_VAR 0 2
35104: ARRAY
35105: PUSH
35106: LD_INT 3
35108: ARRAY
35109: STR
35110: PUSH
35111: LD_STRING ,
35113: STR
35114: PUSH
35115: LD_VAR 0 3
35119: PUSH
35120: LD_VAR 0 2
35124: ARRAY
35125: PUSH
35126: LD_INT 4
35128: ARRAY
35129: STR
35130: PUSH
35131: LD_STRING )
35133: STR
35134: PPUSH
35135: CALL_OW 559
35139: GO 35049
35141: POP
35142: POP
// end ; end ;
35143: LD_VAR 0 1
35147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35148: LD_EXP 110
35152: IFFALSE 35837
35154: GO 35156
35156: DISABLE
35157: LD_INT 0
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
// begin enable ;
35168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_EXP 110
35178: PPUSH
35179: CALL 81208 0 1
35183: ST_TO_ADDR
// if not list then
35184: LD_VAR 0 3
35188: NOT
35189: IFFALSE 35193
// exit ;
35191: GO 35837
// for i := 1 to list do
35193: LD_ADDR_VAR 0 1
35197: PUSH
35198: DOUBLE
35199: LD_INT 1
35201: DEC
35202: ST_TO_ADDR
35203: LD_VAR 0 3
35207: PUSH
35208: FOR_TO
35209: IFFALSE 35835
// begin depot := list [ i ] [ 2 ] ;
35211: LD_ADDR_VAR 0 8
35215: PUSH
35216: LD_VAR 0 3
35220: PUSH
35221: LD_VAR 0 1
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_VAR 0 3
35240: PUSH
35241: LD_VAR 0 1
35245: ARRAY
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35251: LD_VAR 0 8
35255: PPUSH
35256: CALL_OW 301
35260: PUSH
35261: LD_VAR 0 5
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: CALL_OW 255
35275: NONEQUAL
35276: OR
35277: IFFALSE 35306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35279: LD_ADDR_EXP 110
35283: PUSH
35284: LD_EXP 110
35288: PPUSH
35289: LD_VAR 0 8
35293: PPUSH
35294: LD_INT 0
35296: PPUSH
35297: CALL_OW 1
35301: ST_TO_ADDR
// exit ;
35302: POP
35303: POP
35304: GO 35837
// end ; x := list [ i ] [ 3 ] ;
35306: LD_ADDR_VAR 0 6
35310: PUSH
35311: LD_VAR 0 3
35315: PUSH
35316: LD_VAR 0 1
35320: ARRAY
35321: PUSH
35322: LD_INT 3
35324: ARRAY
35325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35326: LD_ADDR_VAR 0 7
35330: PUSH
35331: LD_VAR 0 3
35335: PUSH
35336: LD_VAR 0 1
35340: ARRAY
35341: PUSH
35342: LD_INT 4
35344: ARRAY
35345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35346: LD_ADDR_VAR 0 9
35350: PUSH
35351: LD_VAR 0 6
35355: PPUSH
35356: LD_VAR 0 7
35360: PPUSH
35361: LD_INT 16
35363: PPUSH
35364: CALL 79796 0 3
35368: ST_TO_ADDR
// if not cratesNearbyPoint then
35369: LD_VAR 0 9
35373: NOT
35374: IFFALSE 35380
// exit ;
35376: POP
35377: POP
35378: GO 35837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35380: LD_ADDR_VAR 0 4
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: LD_VAR 0 5
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 60
35402: PUSH
35403: EMPTY
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 91
35412: PUSH
35413: LD_VAR 0 8
35417: PUSH
35418: LD_INT 6
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 25
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 25
35441: PUSH
35442: LD_INT 16
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: PPUSH
35460: CALL_OW 69
35464: PUSH
35465: LD_VAR 0 8
35469: PPUSH
35470: CALL_OW 313
35474: PPUSH
35475: LD_INT 3
35477: PUSH
35478: LD_INT 60
35480: PUSH
35481: EMPTY
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 25
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 25
35503: PUSH
35504: LD_INT 16
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 72
35524: UNION
35525: ST_TO_ADDR
// if tmp then
35526: LD_VAR 0 4
35530: IFFALSE 35610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35532: LD_ADDR_VAR 0 4
35536: PUSH
35537: LD_VAR 0 4
35541: PPUSH
35542: LD_INT 3
35544: PPUSH
35545: CALL 77765 0 2
35549: ST_TO_ADDR
// for j in tmp do
35550: LD_ADDR_VAR 0 2
35554: PUSH
35555: LD_VAR 0 4
35559: PUSH
35560: FOR_IN
35561: IFFALSE 35604
// begin if IsInUnit ( j ) then
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL_OW 310
35572: IFFALSE 35583
// ComExit ( j ) ;
35574: LD_VAR 0 2
35578: PPUSH
35579: CALL 77848 0 1
// AddComCollect ( j , x , y ) ;
35583: LD_VAR 0 2
35587: PPUSH
35588: LD_VAR 0 6
35592: PPUSH
35593: LD_VAR 0 7
35597: PPUSH
35598: CALL_OW 177
// end ;
35602: GO 35560
35604: POP
35605: POP
// exit ;
35606: POP
35607: POP
35608: GO 35837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35610: LD_ADDR_VAR 0 4
35614: PUSH
35615: LD_INT 22
35617: PUSH
35618: LD_VAR 0 5
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 91
35629: PUSH
35630: LD_VAR 0 8
35634: PUSH
35635: LD_INT 8
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 34
35648: PUSH
35649: LD_INT 12
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 34
35658: PUSH
35659: LD_INT 51
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 34
35668: PUSH
35669: LD_INT 32
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 34
35678: PUSH
35679: LD_INT 89
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PPUSH
35698: CALL_OW 69
35702: ST_TO_ADDR
// if tmp then
35703: LD_VAR 0 4
35707: IFFALSE 35833
// begin for j in tmp do
35709: LD_ADDR_VAR 0 2
35713: PUSH
35714: LD_VAR 0 4
35718: PUSH
35719: FOR_IN
35720: IFFALSE 35831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35722: LD_VAR 0 2
35726: PPUSH
35727: CALL_OW 262
35731: PUSH
35732: LD_INT 3
35734: EQUAL
35735: PUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: CALL_OW 261
35745: PUSH
35746: LD_INT 20
35748: GREATER
35749: OR
35750: PUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 314
35760: NOT
35761: AND
35762: PUSH
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 263
35772: PUSH
35773: LD_INT 1
35775: NONEQUAL
35776: PUSH
35777: LD_VAR 0 2
35781: PPUSH
35782: CALL_OW 311
35786: OR
35787: AND
35788: IFFALSE 35829
// begin ComCollect ( j , x , y ) ;
35790: LD_VAR 0 2
35794: PPUSH
35795: LD_VAR 0 6
35799: PPUSH
35800: LD_VAR 0 7
35804: PPUSH
35805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35809: LD_VAR 0 2
35813: PPUSH
35814: LD_VAR 0 8
35818: PPUSH
35819: CALL_OW 172
// exit ;
35823: POP
35824: POP
35825: POP
35826: POP
35827: GO 35837
// end ;
35829: GO 35719
35831: POP
35832: POP
// end ; end ;
35833: GO 35208
35835: POP
35836: POP
// end ; end_of_file
35837: PPOPN 9
35839: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35840: LD_INT 0
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35846: LD_VAR 0 1
35850: PPUSH
35851: CALL_OW 264
35855: PUSH
35856: LD_INT 91
35858: EQUAL
35859: IFFALSE 35931
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35861: LD_INT 68
35863: PPUSH
35864: LD_VAR 0 1
35868: PPUSH
35869: CALL_OW 255
35873: PPUSH
35874: CALL_OW 321
35878: PUSH
35879: LD_INT 2
35881: EQUAL
35882: IFFALSE 35894
// eff := 70 else
35884: LD_ADDR_VAR 0 4
35888: PUSH
35889: LD_INT 70
35891: ST_TO_ADDR
35892: GO 35902
// eff := 30 ;
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: LD_INT 30
35901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 250
35911: PPUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 251
35921: PPUSH
35922: LD_VAR 0 4
35926: PPUSH
35927: CALL_OW 495
// end ; end ;
35931: LD_VAR 0 2
35935: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35936: LD_INT 0
35938: PPUSH
// end ;
35939: LD_VAR 0 4
35943: RET
// export function SOS_Command ( cmd ) ; begin
35944: LD_INT 0
35946: PPUSH
// end ;
35947: LD_VAR 0 2
35951: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35952: LD_INT 0
35954: PPUSH
// end ;
35955: LD_VAR 0 6
35959: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
// if not vehicle or not factory then
35964: LD_VAR 0 1
35968: NOT
35969: PUSH
35970: LD_VAR 0 2
35974: NOT
35975: OR
35976: IFFALSE 35980
// exit ;
35978: GO 36211
// if factoryWaypoints >= factory then
35980: LD_EXP 109
35984: PUSH
35985: LD_VAR 0 2
35989: GREATEREQUAL
35990: IFFALSE 36211
// if factoryWaypoints [ factory ] then
35992: LD_EXP 109
35996: PUSH
35997: LD_VAR 0 2
36001: ARRAY
36002: IFFALSE 36211
// begin if GetControl ( vehicle ) = control_manual then
36004: LD_VAR 0 1
36008: PPUSH
36009: CALL_OW 263
36013: PUSH
36014: LD_INT 1
36016: EQUAL
36017: IFFALSE 36098
// begin driver := IsDrivenBy ( vehicle ) ;
36019: LD_ADDR_VAR 0 4
36023: PUSH
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL_OW 311
36033: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_EXP 109
36043: PUSH
36044: LD_VAR 0 2
36048: ARRAY
36049: PUSH
36050: LD_INT 3
36052: ARRAY
36053: PPUSH
36054: LD_EXP 109
36058: PUSH
36059: LD_VAR 0 2
36063: ARRAY
36064: PUSH
36065: LD_INT 4
36067: ARRAY
36068: PPUSH
36069: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36073: LD_VAR 0 4
36077: PPUSH
36078: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36082: LD_VAR 0 4
36086: PPUSH
36087: LD_VAR 0 2
36091: PPUSH
36092: CALL_OW 180
// end else
36096: GO 36211
// if GetControl ( vehicle ) = control_remote then
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 263
36107: PUSH
36108: LD_INT 2
36110: EQUAL
36111: IFFALSE 36172
// begin wait ( 0 0$2 ) ;
36113: LD_INT 70
36115: PPUSH
36116: CALL_OW 67
// if Connect ( vehicle ) then
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL 48069 0 1
36129: IFFALSE 36170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36131: LD_VAR 0 1
36135: PPUSH
36136: LD_EXP 109
36140: PUSH
36141: LD_VAR 0 2
36145: ARRAY
36146: PUSH
36147: LD_INT 3
36149: ARRAY
36150: PPUSH
36151: LD_EXP 109
36155: PUSH
36156: LD_VAR 0 2
36160: ARRAY
36161: PUSH
36162: LD_INT 4
36164: ARRAY
36165: PPUSH
36166: CALL_OW 171
// end else
36170: GO 36211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_EXP 109
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 3
36190: ARRAY
36191: PPUSH
36192: LD_EXP 109
36196: PUSH
36197: LD_VAR 0 2
36201: ARRAY
36202: PUSH
36203: LD_INT 4
36205: ARRAY
36206: PPUSH
36207: CALL_OW 171
// end ; end ;
36211: LD_VAR 0 3
36215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36216: LD_INT 0
36218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36219: LD_VAR 0 1
36223: PUSH
36224: LD_INT 250
36226: EQUAL
36227: PUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: CALL_OW 264
36237: PUSH
36238: LD_INT 81
36240: EQUAL
36241: AND
36242: IFFALSE 36263
// MinerPlaceMine ( unit , x , y ) ;
36244: LD_VAR 0 2
36248: PPUSH
36249: LD_VAR 0 4
36253: PPUSH
36254: LD_VAR 0 5
36258: PPUSH
36259: CALL 38648 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36263: LD_VAR 0 1
36267: PUSH
36268: LD_INT 251
36270: EQUAL
36271: PUSH
36272: LD_VAR 0 2
36276: PPUSH
36277: CALL_OW 264
36281: PUSH
36282: LD_INT 81
36284: EQUAL
36285: AND
36286: IFFALSE 36307
// MinerDetonateMine ( unit , x , y ) ;
36288: LD_VAR 0 2
36292: PPUSH
36293: LD_VAR 0 4
36297: PPUSH
36298: LD_VAR 0 5
36302: PPUSH
36303: CALL 38923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36307: LD_VAR 0 1
36311: PUSH
36312: LD_INT 252
36314: EQUAL
36315: PUSH
36316: LD_VAR 0 2
36320: PPUSH
36321: CALL_OW 264
36325: PUSH
36326: LD_INT 81
36328: EQUAL
36329: AND
36330: IFFALSE 36351
// MinerCreateMinefield ( unit , x , y ) ;
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 4
36341: PPUSH
36342: LD_VAR 0 5
36346: PPUSH
36347: CALL 39340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36351: LD_VAR 0 1
36355: PUSH
36356: LD_INT 253
36358: EQUAL
36359: PUSH
36360: LD_VAR 0 2
36364: PPUSH
36365: CALL_OW 257
36369: PUSH
36370: LD_INT 5
36372: EQUAL
36373: AND
36374: IFFALSE 36395
// ComBinocular ( unit , x , y ) ;
36376: LD_VAR 0 2
36380: PPUSH
36381: LD_VAR 0 4
36385: PPUSH
36386: LD_VAR 0 5
36390: PPUSH
36391: CALL 39709 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36395: LD_VAR 0 1
36399: PUSH
36400: LD_INT 254
36402: EQUAL
36403: PUSH
36404: LD_VAR 0 2
36408: PPUSH
36409: CALL_OW 264
36413: PUSH
36414: LD_INT 99
36416: EQUAL
36417: AND
36418: PUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 263
36428: PUSH
36429: LD_INT 3
36431: EQUAL
36432: AND
36433: IFFALSE 36449
// HackDestroyVehicle ( unit , selectedUnit ) ;
36435: LD_VAR 0 2
36439: PPUSH
36440: LD_VAR 0 3
36444: PPUSH
36445: CALL 38012 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36449: LD_VAR 0 1
36453: PUSH
36454: LD_INT 255
36456: EQUAL
36457: PUSH
36458: LD_VAR 0 2
36462: PPUSH
36463: CALL_OW 264
36467: PUSH
36468: LD_INT 14
36470: PUSH
36471: LD_INT 53
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: IN
36478: AND
36479: PUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: LD_VAR 0 5
36489: PPUSH
36490: CALL_OW 488
36494: AND
36495: IFFALSE 36519
// CutTreeXYR ( unit , x , y , 12 ) ;
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: LD_VAR 0 5
36511: PPUSH
36512: LD_INT 12
36514: PPUSH
36515: CALL 36582 0 4
// if cmd = 256 then
36519: LD_VAR 0 1
36523: PUSH
36524: LD_INT 256
36526: EQUAL
36527: IFFALSE 36548
// SetFactoryWaypoint ( unit , x , y ) ;
36529: LD_VAR 0 2
36533: PPUSH
36534: LD_VAR 0 4
36538: PPUSH
36539: LD_VAR 0 5
36543: PPUSH
36544: CALL 34529 0 3
// if cmd = 257 then
36548: LD_VAR 0 1
36552: PUSH
36553: LD_INT 257
36555: EQUAL
36556: IFFALSE 36577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36558: LD_VAR 0 2
36562: PPUSH
36563: LD_VAR 0 4
36567: PPUSH
36568: LD_VAR 0 5
36572: PPUSH
36573: CALL 34891 0 3
// end ;
36577: LD_VAR 0 6
36581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36593: LD_VAR 0 1
36597: NOT
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 3
36608: PPUSH
36609: CALL_OW 488
36613: NOT
36614: OR
36615: PUSH
36616: LD_VAR 0 4
36620: NOT
36621: OR
36622: IFFALSE 36626
// exit ;
36624: GO 36966
// list := [ ] ;
36626: LD_ADDR_VAR 0 13
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// if x - r < 0 then
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 4
36642: MINUS
36643: PUSH
36644: LD_INT 0
36646: LESS
36647: IFFALSE 36659
// min_x := 0 else
36649: LD_ADDR_VAR 0 7
36653: PUSH
36654: LD_INT 0
36656: ST_TO_ADDR
36657: GO 36675
// min_x := x - r ;
36659: LD_ADDR_VAR 0 7
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_VAR 0 4
36673: MINUS
36674: ST_TO_ADDR
// if y - r < 0 then
36675: LD_VAR 0 3
36679: PUSH
36680: LD_VAR 0 4
36684: MINUS
36685: PUSH
36686: LD_INT 0
36688: LESS
36689: IFFALSE 36701
// min_y := 0 else
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: LD_INT 0
36698: ST_TO_ADDR
36699: GO 36717
// min_y := y - r ;
36701: LD_ADDR_VAR 0 8
36705: PUSH
36706: LD_VAR 0 3
36710: PUSH
36711: LD_VAR 0 4
36715: MINUS
36716: ST_TO_ADDR
// max_x := x + r ;
36717: LD_ADDR_VAR 0 9
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_VAR 0 4
36731: PLUS
36732: ST_TO_ADDR
// max_y := y + r ;
36733: LD_ADDR_VAR 0 10
36737: PUSH
36738: LD_VAR 0 3
36742: PUSH
36743: LD_VAR 0 4
36747: PLUS
36748: ST_TO_ADDR
// for _x = min_x to max_x do
36749: LD_ADDR_VAR 0 11
36753: PUSH
36754: DOUBLE
36755: LD_VAR 0 7
36759: DEC
36760: ST_TO_ADDR
36761: LD_VAR 0 9
36765: PUSH
36766: FOR_TO
36767: IFFALSE 36884
// for _y = min_y to max_y do
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: DOUBLE
36775: LD_VAR 0 8
36779: DEC
36780: ST_TO_ADDR
36781: LD_VAR 0 10
36785: PUSH
36786: FOR_TO
36787: IFFALSE 36880
// begin if not ValidHex ( _x , _y ) then
36789: LD_VAR 0 11
36793: PPUSH
36794: LD_VAR 0 12
36798: PPUSH
36799: CALL_OW 488
36803: NOT
36804: IFFALSE 36808
// continue ;
36806: GO 36786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36808: LD_VAR 0 11
36812: PPUSH
36813: LD_VAR 0 12
36817: PPUSH
36818: CALL_OW 351
36822: PUSH
36823: LD_VAR 0 11
36827: PPUSH
36828: LD_VAR 0 12
36832: PPUSH
36833: CALL_OW 554
36837: AND
36838: IFFALSE 36878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36840: LD_ADDR_VAR 0 13
36844: PUSH
36845: LD_VAR 0 13
36849: PPUSH
36850: LD_VAR 0 13
36854: PUSH
36855: LD_INT 1
36857: PLUS
36858: PPUSH
36859: LD_VAR 0 11
36863: PUSH
36864: LD_VAR 0 12
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PPUSH
36873: CALL_OW 2
36877: ST_TO_ADDR
// end ;
36878: GO 36786
36880: POP
36881: POP
36882: GO 36766
36884: POP
36885: POP
// if not list then
36886: LD_VAR 0 13
36890: NOT
36891: IFFALSE 36895
// exit ;
36893: GO 36966
// for i in list do
36895: LD_ADDR_VAR 0 6
36899: PUSH
36900: LD_VAR 0 13
36904: PUSH
36905: FOR_IN
36906: IFFALSE 36964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36908: LD_VAR 0 1
36912: PPUSH
36913: LD_STRING M
36915: PUSH
36916: LD_VAR 0 6
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PUSH
36925: LD_VAR 0 6
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: PPUSH
36958: CALL_OW 447
36962: GO 36905
36964: POP
36965: POP
// end ;
36966: LD_VAR 0 5
36970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36971: LD_EXP 112
36975: NOT
36976: IFFALSE 37026
36978: GO 36980
36980: DISABLE
// begin initHack := true ;
36981: LD_ADDR_EXP 112
36985: PUSH
36986: LD_INT 1
36988: ST_TO_ADDR
// hackTanks := [ ] ;
36989: LD_ADDR_EXP 113
36993: PUSH
36994: EMPTY
36995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36996: LD_ADDR_EXP 114
37000: PUSH
37001: EMPTY
37002: ST_TO_ADDR
// hackLimit := 3 ;
37003: LD_ADDR_EXP 115
37007: PUSH
37008: LD_INT 3
37010: ST_TO_ADDR
// hackDist := 12 ;
37011: LD_ADDR_EXP 116
37015: PUSH
37016: LD_INT 12
37018: ST_TO_ADDR
// hackCounter := [ ] ;
37019: LD_ADDR_EXP 117
37023: PUSH
37024: EMPTY
37025: ST_TO_ADDR
// end ;
37026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37027: LD_EXP 112
37031: PUSH
37032: LD_INT 34
37034: PUSH
37035: LD_INT 99
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PPUSH
37042: CALL_OW 69
37046: AND
37047: IFFALSE 37300
37049: GO 37051
37051: DISABLE
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
// begin enable ;
37056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37057: LD_ADDR_VAR 0 1
37061: PUSH
37062: LD_INT 34
37064: PUSH
37065: LD_INT 99
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PPUSH
37072: CALL_OW 69
37076: PUSH
37077: FOR_IN
37078: IFFALSE 37298
// begin if not i in hackTanks then
37080: LD_VAR 0 1
37084: PUSH
37085: LD_EXP 113
37089: IN
37090: NOT
37091: IFFALSE 37174
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37093: LD_ADDR_EXP 113
37097: PUSH
37098: LD_EXP 113
37102: PPUSH
37103: LD_EXP 113
37107: PUSH
37108: LD_INT 1
37110: PLUS
37111: PPUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL_OW 1
37121: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37122: LD_ADDR_EXP 114
37126: PUSH
37127: LD_EXP 114
37131: PPUSH
37132: LD_EXP 114
37136: PUSH
37137: LD_INT 1
37139: PLUS
37140: PPUSH
37141: EMPTY
37142: PPUSH
37143: CALL_OW 1
37147: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37148: LD_ADDR_EXP 117
37152: PUSH
37153: LD_EXP 117
37157: PPUSH
37158: LD_EXP 117
37162: PUSH
37163: LD_INT 1
37165: PLUS
37166: PPUSH
37167: EMPTY
37168: PPUSH
37169: CALL_OW 1
37173: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 302
37183: NOT
37184: IFFALSE 37197
// begin HackUnlinkAll ( i ) ;
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL 37303 0 1
// continue ;
37195: GO 37077
// end ; HackCheckCapturedStatus ( i ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL 37746 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37206: LD_ADDR_VAR 0 2
37210: PUSH
37211: LD_INT 81
37213: PUSH
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 255
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 33
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 91
37240: PUSH
37241: LD_VAR 0 1
37245: PUSH
37246: LD_EXP 116
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 50
37258: PUSH
37259: EMPTY
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: PPUSH
37268: CALL_OW 69
37272: ST_TO_ADDR
// if not tmp then
37273: LD_VAR 0 2
37277: NOT
37278: IFFALSE 37282
// continue ;
37280: GO 37077
// HackLink ( i , tmp ) ;
37282: LD_VAR 0 1
37286: PPUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: CALL 37439 0 2
// end ;
37296: GO 37077
37298: POP
37299: POP
// end ;
37300: PPOPN 2
37302: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// if not hack in hackTanks then
37308: LD_VAR 0 1
37312: PUSH
37313: LD_EXP 113
37317: IN
37318: NOT
37319: IFFALSE 37323
// exit ;
37321: GO 37434
// index := GetElementIndex ( hackTanks , hack ) ;
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_EXP 113
37332: PPUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL 44876 0 2
37342: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37343: LD_EXP 114
37347: PUSH
37348: LD_VAR 0 4
37352: ARRAY
37353: IFFALSE 37434
// begin for i in hackTanksCaptured [ index ] do
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_EXP 114
37364: PUSH
37365: LD_VAR 0 4
37369: ARRAY
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37398
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37374: LD_VAR 0 3
37378: PUSH
37379: LD_INT 1
37381: ARRAY
37382: PPUSH
37383: LD_VAR 0 3
37387: PUSH
37388: LD_INT 2
37390: ARRAY
37391: PPUSH
37392: CALL_OW 235
37396: GO 37371
37398: POP
37399: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37400: LD_ADDR_EXP 114
37404: PUSH
37405: LD_EXP 114
37409: PPUSH
37410: LD_VAR 0 4
37414: PPUSH
37415: EMPTY
37416: PPUSH
37417: CALL_OW 1
37421: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37422: LD_VAR 0 1
37426: PPUSH
37427: LD_INT 0
37429: PPUSH
37430: CALL_OW 505
// end ; end ;
37434: LD_VAR 0 2
37438: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37439: LD_INT 0
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not hack in hackTanks or not vehicles then
37444: LD_VAR 0 1
37448: PUSH
37449: LD_EXP 113
37453: IN
37454: NOT
37455: PUSH
37456: LD_VAR 0 2
37460: NOT
37461: OR
37462: IFFALSE 37466
// exit ;
37464: GO 37741
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37466: LD_ADDR_VAR 0 2
37470: PUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: LD_VAR 0 2
37480: PPUSH
37481: LD_INT 1
37483: PPUSH
37484: LD_INT 1
37486: PPUSH
37487: CALL 45526 0 4
37491: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37492: LD_ADDR_VAR 0 5
37496: PUSH
37497: LD_EXP 113
37501: PPUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL 44876 0 2
37511: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37512: LD_EXP 114
37516: PUSH
37517: LD_VAR 0 5
37521: ARRAY
37522: PUSH
37523: LD_EXP 115
37527: LESS
37528: IFFALSE 37717
// begin for i := 1 to vehicles do
37530: LD_ADDR_VAR 0 4
37534: PUSH
37535: DOUBLE
37536: LD_INT 1
37538: DEC
37539: ST_TO_ADDR
37540: LD_VAR 0 2
37544: PUSH
37545: FOR_TO
37546: IFFALSE 37715
// begin if hackTanksCaptured [ index ] = hackLimit then
37548: LD_EXP 114
37552: PUSH
37553: LD_VAR 0 5
37557: ARRAY
37558: PUSH
37559: LD_EXP 115
37563: EQUAL
37564: IFFALSE 37568
// break ;
37566: GO 37715
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37568: LD_ADDR_EXP 117
37572: PUSH
37573: LD_EXP 117
37577: PPUSH
37578: LD_VAR 0 5
37582: PPUSH
37583: LD_EXP 117
37587: PUSH
37588: LD_VAR 0 5
37592: ARRAY
37593: PUSH
37594: LD_INT 1
37596: PLUS
37597: PPUSH
37598: CALL_OW 1
37602: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37603: LD_ADDR_EXP 114
37607: PUSH
37608: LD_EXP 114
37612: PPUSH
37613: LD_VAR 0 5
37617: PUSH
37618: LD_EXP 114
37622: PUSH
37623: LD_VAR 0 5
37627: ARRAY
37628: PUSH
37629: LD_INT 1
37631: PLUS
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PPUSH
37637: LD_VAR 0 2
37641: PUSH
37642: LD_VAR 0 4
37646: ARRAY
37647: PUSH
37648: LD_VAR 0 2
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PPUSH
37659: CALL_OW 255
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PPUSH
37668: CALL 45091 0 3
37672: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37673: LD_VAR 0 2
37677: PUSH
37678: LD_VAR 0 4
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 255
37693: PPUSH
37694: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37698: LD_VAR 0 2
37702: PUSH
37703: LD_VAR 0 4
37707: ARRAY
37708: PPUSH
37709: CALL_OW 141
// end ;
37713: GO 37545
37715: POP
37716: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37717: LD_VAR 0 1
37721: PPUSH
37722: LD_EXP 114
37726: PUSH
37727: LD_VAR 0 5
37731: ARRAY
37732: PUSH
37733: LD_INT 0
37735: PLUS
37736: PPUSH
37737: CALL_OW 505
// end ;
37741: LD_VAR 0 3
37745: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
// if not hack in hackTanks then
37752: LD_VAR 0 1
37756: PUSH
37757: LD_EXP 113
37761: IN
37762: NOT
37763: IFFALSE 37767
// exit ;
37765: GO 38007
// index := GetElementIndex ( hackTanks , hack ) ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_EXP 113
37776: PPUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL 44876 0 2
37786: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: DOUBLE
37793: LD_EXP 114
37797: PUSH
37798: LD_VAR 0 4
37802: ARRAY
37803: INC
37804: ST_TO_ADDR
37805: LD_INT 1
37807: PUSH
37808: FOR_DOWNTO
37809: IFFALSE 37981
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: LD_EXP 114
37820: PUSH
37821: LD_VAR 0 4
37825: ARRAY
37826: PUSH
37827: LD_VAR 0 3
37831: ARRAY
37832: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37833: LD_VAR 0 5
37837: PUSH
37838: LD_INT 1
37840: ARRAY
37841: PPUSH
37842: CALL_OW 302
37846: NOT
37847: PUSH
37848: LD_VAR 0 5
37852: PUSH
37853: LD_INT 1
37855: ARRAY
37856: PPUSH
37857: CALL_OW 255
37861: PUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 255
37871: NONEQUAL
37872: OR
37873: IFFALSE 37979
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37875: LD_VAR 0 5
37879: PUSH
37880: LD_INT 1
37882: ARRAY
37883: PPUSH
37884: CALL_OW 305
37888: PUSH
37889: LD_VAR 0 5
37893: PUSH
37894: LD_INT 1
37896: ARRAY
37897: PPUSH
37898: CALL_OW 255
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 255
37912: EQUAL
37913: AND
37914: IFFALSE 37938
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37916: LD_VAR 0 5
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: LD_VAR 0 5
37929: PUSH
37930: LD_INT 2
37932: ARRAY
37933: PPUSH
37934: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37938: LD_ADDR_EXP 114
37942: PUSH
37943: LD_EXP 114
37947: PPUSH
37948: LD_VAR 0 4
37952: PPUSH
37953: LD_EXP 114
37957: PUSH
37958: LD_VAR 0 4
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 3
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end ; end ;
37979: GO 37808
37981: POP
37982: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37983: LD_VAR 0 1
37987: PPUSH
37988: LD_EXP 114
37992: PUSH
37993: LD_VAR 0 4
37997: ARRAY
37998: PUSH
37999: LD_INT 0
38001: PLUS
38002: PPUSH
38003: CALL_OW 505
// end ;
38007: LD_VAR 0 2
38011: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
// if not hack in hackTanks then
38018: LD_VAR 0 1
38022: PUSH
38023: LD_EXP 113
38027: IN
38028: NOT
38029: IFFALSE 38033
// exit ;
38031: GO 38118
// index := GetElementIndex ( hackTanks , hack ) ;
38033: LD_ADDR_VAR 0 5
38037: PUSH
38038: LD_EXP 113
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL 44876 0 2
38052: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: DOUBLE
38059: LD_INT 1
38061: DEC
38062: ST_TO_ADDR
38063: LD_EXP 114
38067: PUSH
38068: LD_VAR 0 5
38072: ARRAY
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38116
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38077: LD_EXP 114
38081: PUSH
38082: LD_VAR 0 5
38086: ARRAY
38087: PUSH
38088: LD_VAR 0 4
38092: ARRAY
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: PUSH
38098: LD_VAR 0 2
38102: EQUAL
38103: IFFALSE 38114
// KillUnit ( vehicle ) ;
38105: LD_VAR 0 2
38109: PPUSH
38110: CALL_OW 66
38114: GO 38074
38116: POP
38117: POP
// end ;
38118: LD_VAR 0 3
38122: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38123: LD_EXP 118
38127: NOT
38128: IFFALSE 38163
38130: GO 38132
38132: DISABLE
// begin initMiner := true ;
38133: LD_ADDR_EXP 118
38137: PUSH
38138: LD_INT 1
38140: ST_TO_ADDR
// minersList := [ ] ;
38141: LD_ADDR_EXP 119
38145: PUSH
38146: EMPTY
38147: ST_TO_ADDR
// minerMinesList := [ ] ;
38148: LD_ADDR_EXP 120
38152: PUSH
38153: EMPTY
38154: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38155: LD_ADDR_EXP 121
38159: PUSH
38160: LD_INT 5
38162: ST_TO_ADDR
// end ;
38163: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38164: LD_EXP 118
38168: PUSH
38169: LD_INT 34
38171: PUSH
38172: LD_INT 81
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 69
38183: AND
38184: IFFALSE 38645
38186: GO 38188
38188: DISABLE
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// begin enable ;
38195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38196: LD_ADDR_VAR 0 1
38200: PUSH
38201: LD_INT 34
38203: PUSH
38204: LD_INT 81
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PPUSH
38211: CALL_OW 69
38215: PUSH
38216: FOR_IN
38217: IFFALSE 38289
// begin if not i in minersList then
38219: LD_VAR 0 1
38223: PUSH
38224: LD_EXP 119
38228: IN
38229: NOT
38230: IFFALSE 38287
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38232: LD_ADDR_EXP 119
38236: PUSH
38237: LD_EXP 119
38241: PPUSH
38242: LD_EXP 119
38246: PUSH
38247: LD_INT 1
38249: PLUS
38250: PPUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 1
38260: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38261: LD_ADDR_EXP 120
38265: PUSH
38266: LD_EXP 120
38270: PPUSH
38271: LD_EXP 120
38275: PUSH
38276: LD_INT 1
38278: PLUS
38279: PPUSH
38280: EMPTY
38281: PPUSH
38282: CALL_OW 1
38286: ST_TO_ADDR
// end end ;
38287: GO 38216
38289: POP
38290: POP
// for i := minerMinesList downto 1 do
38291: LD_ADDR_VAR 0 1
38295: PUSH
38296: DOUBLE
38297: LD_EXP 120
38301: INC
38302: ST_TO_ADDR
38303: LD_INT 1
38305: PUSH
38306: FOR_DOWNTO
38307: IFFALSE 38643
// begin if IsLive ( minersList [ i ] ) then
38309: LD_EXP 119
38313: PUSH
38314: LD_VAR 0 1
38318: ARRAY
38319: PPUSH
38320: CALL_OW 300
38324: IFFALSE 38352
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38326: LD_EXP 119
38330: PUSH
38331: LD_VAR 0 1
38335: ARRAY
38336: PPUSH
38337: LD_EXP 120
38341: PUSH
38342: LD_VAR 0 1
38346: ARRAY
38347: PPUSH
38348: CALL_OW 505
// if not minerMinesList [ i ] then
38352: LD_EXP 120
38356: PUSH
38357: LD_VAR 0 1
38361: ARRAY
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38306
// for j := minerMinesList [ i ] downto 1 do
38367: LD_ADDR_VAR 0 2
38371: PUSH
38372: DOUBLE
38373: LD_EXP 120
38377: PUSH
38378: LD_VAR 0 1
38382: ARRAY
38383: INC
38384: ST_TO_ADDR
38385: LD_INT 1
38387: PUSH
38388: FOR_DOWNTO
38389: IFFALSE 38639
// begin side := GetSide ( minersList [ i ] ) ;
38391: LD_ADDR_VAR 0 3
38395: PUSH
38396: LD_EXP 119
38400: PUSH
38401: LD_VAR 0 1
38405: ARRAY
38406: PPUSH
38407: CALL_OW 255
38411: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38412: LD_ADDR_VAR 0 4
38416: PUSH
38417: LD_EXP 120
38421: PUSH
38422: LD_VAR 0 1
38426: ARRAY
38427: PUSH
38428: LD_VAR 0 2
38432: ARRAY
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: PPUSH
38438: LD_EXP 120
38442: PUSH
38443: LD_VAR 0 1
38447: ARRAY
38448: PUSH
38449: LD_VAR 0 2
38453: ARRAY
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PPUSH
38459: CALL_OW 428
38463: ST_TO_ADDR
// if not tmp then
38464: LD_VAR 0 4
38468: NOT
38469: IFFALSE 38473
// continue ;
38471: GO 38388
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38473: LD_VAR 0 4
38477: PUSH
38478: LD_INT 81
38480: PUSH
38481: LD_VAR 0 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 69
38494: IN
38495: PUSH
38496: LD_EXP 120
38500: PUSH
38501: LD_VAR 0 1
38505: ARRAY
38506: PUSH
38507: LD_VAR 0 2
38511: ARRAY
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PPUSH
38517: LD_EXP 120
38521: PUSH
38522: LD_VAR 0 1
38526: ARRAY
38527: PUSH
38528: LD_VAR 0 2
38532: ARRAY
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PPUSH
38538: CALL_OW 458
38542: AND
38543: IFFALSE 38637
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38545: LD_EXP 120
38549: PUSH
38550: LD_VAR 0 1
38554: ARRAY
38555: PUSH
38556: LD_VAR 0 2
38560: ARRAY
38561: PUSH
38562: LD_INT 1
38564: ARRAY
38565: PPUSH
38566: LD_EXP 120
38570: PUSH
38571: LD_VAR 0 1
38575: ARRAY
38576: PUSH
38577: LD_VAR 0 2
38581: ARRAY
38582: PUSH
38583: LD_INT 2
38585: ARRAY
38586: PPUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38596: LD_ADDR_EXP 120
38600: PUSH
38601: LD_EXP 120
38605: PPUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: LD_EXP 120
38615: PUSH
38616: LD_VAR 0 1
38620: ARRAY
38621: PPUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: CALL_OW 3
38631: PPUSH
38632: CALL_OW 1
38636: ST_TO_ADDR
// end ; end ;
38637: GO 38388
38639: POP
38640: POP
// end ;
38641: GO 38306
38643: POP
38644: POP
// end ;
38645: PPOPN 4
38647: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38648: LD_INT 0
38650: PPUSH
38651: PPUSH
// result := false ;
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: LD_INT 0
38659: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL_OW 264
38669: PUSH
38670: LD_INT 81
38672: EQUAL
38673: NOT
38674: IFFALSE 38678
// exit ;
38676: GO 38918
// index := GetElementIndex ( minersList , unit ) ;
38678: LD_ADDR_VAR 0 5
38682: PUSH
38683: LD_EXP 119
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL 44876 0 2
38697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38698: LD_EXP 120
38702: PUSH
38703: LD_VAR 0 5
38707: ARRAY
38708: PUSH
38709: LD_EXP 121
38713: GREATEREQUAL
38714: IFFALSE 38718
// exit ;
38716: GO 38918
// ComMoveXY ( unit , x , y ) ;
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_VAR 0 2
38727: PPUSH
38728: LD_VAR 0 3
38732: PPUSH
38733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38737: LD_INT 35
38739: PPUSH
38740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_VAR 0 2
38753: PPUSH
38754: LD_VAR 0 3
38758: PPUSH
38759: CALL 76260 0 3
38763: NOT
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 314
38774: AND
38775: IFFALSE 38779
// exit ;
38777: GO 38918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38779: LD_VAR 0 2
38783: PPUSH
38784: LD_VAR 0 3
38788: PPUSH
38789: CALL_OW 428
38793: PUSH
38794: LD_VAR 0 1
38798: EQUAL
38799: PUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 314
38809: NOT
38810: AND
38811: IFFALSE 38737
// PlaySoundXY ( x , y , PlantMine ) ;
38813: LD_VAR 0 2
38817: PPUSH
38818: LD_VAR 0 3
38822: PPUSH
38823: LD_STRING PlantMine
38825: PPUSH
38826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38830: LD_VAR 0 2
38834: PPUSH
38835: LD_VAR 0 3
38839: PPUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 255
38849: PPUSH
38850: LD_INT 0
38852: PPUSH
38853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38857: LD_ADDR_EXP 120
38861: PUSH
38862: LD_EXP 120
38866: PPUSH
38867: LD_VAR 0 5
38871: PUSH
38872: LD_EXP 120
38876: PUSH
38877: LD_VAR 0 5
38881: ARRAY
38882: PUSH
38883: LD_INT 1
38885: PLUS
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PPUSH
38891: LD_VAR 0 2
38895: PUSH
38896: LD_VAR 0 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PPUSH
38905: CALL 45091 0 3
38909: ST_TO_ADDR
// result := true ;
38910: LD_ADDR_VAR 0 4
38914: PUSH
38915: LD_INT 1
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 4
38922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
38927: PPUSH
// if not unit in minersList then
38928: LD_VAR 0 1
38932: PUSH
38933: LD_EXP 119
38937: IN
38938: NOT
38939: IFFALSE 38943
// exit ;
38941: GO 39335
// index := GetElementIndex ( minersList , unit ) ;
38943: LD_ADDR_VAR 0 6
38947: PUSH
38948: LD_EXP 119
38952: PPUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL 44876 0 2
38962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38963: LD_ADDR_VAR 0 5
38967: PUSH
38968: DOUBLE
38969: LD_EXP 120
38973: PUSH
38974: LD_VAR 0 6
38978: ARRAY
38979: INC
38980: ST_TO_ADDR
38981: LD_INT 1
38983: PUSH
38984: FOR_DOWNTO
38985: IFFALSE 39146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38987: LD_EXP 120
38991: PUSH
38992: LD_VAR 0 6
38996: ARRAY
38997: PUSH
38998: LD_VAR 0 5
39002: ARRAY
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PUSH
39008: LD_VAR 0 2
39012: EQUAL
39013: PUSH
39014: LD_EXP 120
39018: PUSH
39019: LD_VAR 0 6
39023: ARRAY
39024: PUSH
39025: LD_VAR 0 5
39029: ARRAY
39030: PUSH
39031: LD_INT 2
39033: ARRAY
39034: PUSH
39035: LD_VAR 0 3
39039: EQUAL
39040: AND
39041: IFFALSE 39144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39043: LD_EXP 120
39047: PUSH
39048: LD_VAR 0 6
39052: ARRAY
39053: PUSH
39054: LD_VAR 0 5
39058: ARRAY
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PPUSH
39064: LD_EXP 120
39068: PUSH
39069: LD_VAR 0 6
39073: ARRAY
39074: PUSH
39075: LD_VAR 0 5
39079: ARRAY
39080: PUSH
39081: LD_INT 2
39083: ARRAY
39084: PPUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 255
39094: PPUSH
39095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39099: LD_ADDR_EXP 120
39103: PUSH
39104: LD_EXP 120
39108: PPUSH
39109: LD_VAR 0 6
39113: PPUSH
39114: LD_EXP 120
39118: PUSH
39119: LD_VAR 0 6
39123: ARRAY
39124: PPUSH
39125: LD_VAR 0 5
39129: PPUSH
39130: CALL_OW 3
39134: PPUSH
39135: CALL_OW 1
39139: ST_TO_ADDR
// exit ;
39140: POP
39141: POP
39142: GO 39335
// end ; end ;
39144: GO 38984
39146: POP
39147: POP
// for i := minerMinesList [ index ] downto 1 do
39148: LD_ADDR_VAR 0 5
39152: PUSH
39153: DOUBLE
39154: LD_EXP 120
39158: PUSH
39159: LD_VAR 0 6
39163: ARRAY
39164: INC
39165: ST_TO_ADDR
39166: LD_INT 1
39168: PUSH
39169: FOR_DOWNTO
39170: IFFALSE 39333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39172: LD_EXP 120
39176: PUSH
39177: LD_VAR 0 6
39181: ARRAY
39182: PUSH
39183: LD_VAR 0 5
39187: ARRAY
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: PPUSH
39193: LD_EXP 120
39197: PUSH
39198: LD_VAR 0 6
39202: ARRAY
39203: PUSH
39204: LD_VAR 0 5
39208: ARRAY
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PPUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_VAR 0 3
39223: PPUSH
39224: CALL_OW 298
39228: PUSH
39229: LD_INT 6
39231: LESS
39232: IFFALSE 39331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39234: LD_EXP 120
39238: PUSH
39239: LD_VAR 0 6
39243: ARRAY
39244: PUSH
39245: LD_VAR 0 5
39249: ARRAY
39250: PUSH
39251: LD_INT 1
39253: ARRAY
39254: PPUSH
39255: LD_EXP 120
39259: PUSH
39260: LD_VAR 0 6
39264: ARRAY
39265: PUSH
39266: LD_VAR 0 5
39270: ARRAY
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 255
39285: PPUSH
39286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39290: LD_ADDR_EXP 120
39294: PUSH
39295: LD_EXP 120
39299: PPUSH
39300: LD_VAR 0 6
39304: PPUSH
39305: LD_EXP 120
39309: PUSH
39310: LD_VAR 0 6
39314: ARRAY
39315: PPUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL_OW 3
39325: PPUSH
39326: CALL_OW 1
39330: ST_TO_ADDR
// end ; end ;
39331: GO 39169
39333: POP
39334: POP
// end ;
39335: LD_VAR 0 4
39339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39340: LD_INT 0
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 81
39363: EQUAL
39364: NOT
39365: PUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_EXP 119
39375: IN
39376: NOT
39377: OR
39378: IFFALSE 39382
// exit ;
39380: GO 39704
// index := GetElementIndex ( minersList , unit ) ;
39382: LD_ADDR_VAR 0 6
39386: PUSH
39387: LD_EXP 119
39391: PPUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL 44876 0 2
39401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39402: LD_ADDR_VAR 0 8
39406: PUSH
39407: LD_EXP 121
39411: PUSH
39412: LD_EXP 120
39416: PUSH
39417: LD_VAR 0 6
39421: ARRAY
39422: MINUS
39423: ST_TO_ADDR
// if not minesFreeAmount then
39424: LD_VAR 0 8
39428: NOT
39429: IFFALSE 39433
// exit ;
39431: GO 39704
// tmp := [ ] ;
39433: LD_ADDR_VAR 0 7
39437: PUSH
39438: EMPTY
39439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39440: LD_ADDR_VAR 0 5
39444: PUSH
39445: DOUBLE
39446: LD_INT 1
39448: DEC
39449: ST_TO_ADDR
39450: LD_VAR 0 8
39454: PUSH
39455: FOR_TO
39456: IFFALSE 39651
// begin _d := rand ( 0 , 5 ) ;
39458: LD_ADDR_VAR 0 11
39462: PUSH
39463: LD_INT 0
39465: PPUSH
39466: LD_INT 5
39468: PPUSH
39469: CALL_OW 12
39473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39474: LD_ADDR_VAR 0 12
39478: PUSH
39479: LD_INT 2
39481: PPUSH
39482: LD_INT 6
39484: PPUSH
39485: CALL_OW 12
39489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39490: LD_ADDR_VAR 0 9
39494: PUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: LD_VAR 0 11
39504: PPUSH
39505: LD_VAR 0 12
39509: PPUSH
39510: CALL_OW 272
39514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39515: LD_ADDR_VAR 0 10
39519: PUSH
39520: LD_VAR 0 3
39524: PPUSH
39525: LD_VAR 0 11
39529: PPUSH
39530: LD_VAR 0 12
39534: PPUSH
39535: CALL_OW 273
39539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39540: LD_VAR 0 9
39544: PPUSH
39545: LD_VAR 0 10
39549: PPUSH
39550: CALL_OW 488
39554: PUSH
39555: LD_VAR 0 9
39559: PUSH
39560: LD_VAR 0 10
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_VAR 0 7
39573: IN
39574: NOT
39575: AND
39576: PUSH
39577: LD_VAR 0 9
39581: PPUSH
39582: LD_VAR 0 10
39586: PPUSH
39587: CALL_OW 458
39591: NOT
39592: AND
39593: IFFALSE 39635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39595: LD_ADDR_VAR 0 7
39599: PUSH
39600: LD_VAR 0 7
39604: PPUSH
39605: LD_VAR 0 7
39609: PUSH
39610: LD_INT 1
39612: PLUS
39613: PPUSH
39614: LD_VAR 0 9
39618: PUSH
39619: LD_VAR 0 10
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PPUSH
39628: CALL_OW 1
39632: ST_TO_ADDR
39633: GO 39649
// i := i - 1 ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 5
39644: PUSH
39645: LD_INT 1
39647: MINUS
39648: ST_TO_ADDR
// end ;
39649: GO 39455
39651: POP
39652: POP
// for i in tmp do
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: LD_VAR 0 7
39662: PUSH
39663: FOR_IN
39664: IFFALSE 39702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39666: LD_VAR 0 1
39670: PPUSH
39671: LD_VAR 0 5
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: PPUSH
39680: LD_VAR 0 5
39684: PUSH
39685: LD_INT 2
39687: ARRAY
39688: PPUSH
39689: CALL 38648 0 3
39693: NOT
39694: IFFALSE 39700
// exit ;
39696: POP
39697: POP
39698: GO 39704
39700: GO 39663
39702: POP
39703: POP
// end ;
39704: LD_VAR 0 4
39708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39709: LD_INT 0
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
// if not GetClass ( unit ) = class_sniper then
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 257
39727: PUSH
39728: LD_INT 5
39730: EQUAL
39731: NOT
39732: IFFALSE 39736
// exit ;
39734: GO 40124
// dist := 8 ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: LD_INT 8
39743: ST_TO_ADDR
// viewRange := 12 ;
39744: LD_ADDR_VAR 0 7
39748: PUSH
39749: LD_INT 12
39751: ST_TO_ADDR
// side := GetSide ( unit ) ;
39752: LD_ADDR_VAR 0 6
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 255
39766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39767: LD_INT 61
39769: PPUSH
39770: LD_VAR 0 6
39774: PPUSH
39775: CALL_OW 321
39779: PUSH
39780: LD_INT 2
39782: EQUAL
39783: IFFALSE 39793
// viewRange := 16 ;
39785: LD_ADDR_VAR 0 7
39789: PUSH
39790: LD_INT 16
39792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_VAR 0 2
39802: PPUSH
39803: LD_VAR 0 3
39807: PPUSH
39808: CALL_OW 297
39812: PUSH
39813: LD_VAR 0 5
39817: GREATER
39818: IFFALSE 39897
// begin ComMoveXY ( unit , x , y ) ;
39820: LD_VAR 0 1
39824: PPUSH
39825: LD_VAR 0 2
39829: PPUSH
39830: LD_VAR 0 3
39834: PPUSH
39835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39839: LD_INT 35
39841: PPUSH
39842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39846: LD_VAR 0 1
39850: PPUSH
39851: LD_VAR 0 2
39855: PPUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL 76260 0 3
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 40124
// until GetDistUnitXY ( unit , x , y ) < dist ;
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_VAR 0 2
39879: PPUSH
39880: LD_VAR 0 3
39884: PPUSH
39885: CALL_OW 297
39889: PUSH
39890: LD_VAR 0 5
39894: LESS
39895: IFFALSE 39839
// end ; ComTurnXY ( unit , x , y ) ;
39897: LD_VAR 0 1
39901: PPUSH
39902: LD_VAR 0 2
39906: PPUSH
39907: LD_VAR 0 3
39911: PPUSH
39912: CALL_OW 118
// wait ( 5 ) ;
39916: LD_INT 5
39918: PPUSH
39919: CALL_OW 67
// _d := GetDir ( unit ) ;
39923: LD_ADDR_VAR 0 10
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 254
39937: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39938: LD_ADDR_VAR 0 8
39942: PUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 250
39952: PPUSH
39953: LD_VAR 0 10
39957: PPUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 272
39967: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39968: LD_ADDR_VAR 0 9
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 251
39982: PPUSH
39983: LD_VAR 0 10
39987: PPUSH
39988: LD_VAR 0 5
39992: PPUSH
39993: CALL_OW 273
39997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39998: LD_VAR 0 8
40002: PPUSH
40003: LD_VAR 0 9
40007: PPUSH
40008: CALL_OW 488
40012: NOT
40013: IFFALSE 40017
// exit ;
40015: GO 40124
// ComAnimCustom ( unit , 1 ) ;
40017: LD_VAR 0 1
40021: PPUSH
40022: LD_INT 1
40024: PPUSH
40025: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40029: LD_VAR 0 8
40033: PPUSH
40034: LD_VAR 0 9
40038: PPUSH
40039: LD_VAR 0 6
40043: PPUSH
40044: LD_VAR 0 7
40048: PPUSH
40049: CALL_OW 330
// repeat wait ( 1 ) ;
40053: LD_INT 1
40055: PPUSH
40056: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 316
40069: PUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 314
40079: OR
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 302
40090: NOT
40091: OR
40092: PUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 301
40102: OR
40103: IFFALSE 40053
// RemoveSeeing ( _x , _y , side ) ;
40105: LD_VAR 0 8
40109: PPUSH
40110: LD_VAR 0 9
40114: PPUSH
40115: LD_VAR 0 6
40119: PPUSH
40120: CALL_OW 331
// end ; end_of_file
40124: LD_VAR 0 4
40128: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// if exist_mode then
40133: LD_VAR 0 2
40137: IFFALSE 40162
// unit := CreateCharacter ( prefix & ident ) else
40139: LD_ADDR_VAR 0 5
40143: PUSH
40144: LD_VAR 0 3
40148: PUSH
40149: LD_VAR 0 1
40153: STR
40154: PPUSH
40155: CALL_OW 34
40159: ST_TO_ADDR
40160: GO 40177
// unit := NewCharacter ( ident ) ;
40162: LD_ADDR_VAR 0 5
40166: PUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 25
40176: ST_TO_ADDR
// result := unit ;
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_VAR 0 5
40186: ST_TO_ADDR
// end ;
40187: LD_VAR 0 4
40191: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40192: LD_INT 0
40194: PPUSH
40195: PPUSH
// if not side or not nation then
40196: LD_VAR 0 1
40200: NOT
40201: PUSH
40202: LD_VAR 0 2
40206: NOT
40207: OR
40208: IFFALSE 40212
// exit ;
40210: GO 40980
// case nation of nation_american :
40212: LD_VAR 0 2
40216: PUSH
40217: LD_INT 1
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40439
40225: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40226: LD_ADDR_VAR 0 4
40230: PUSH
40231: LD_INT 35
40233: PUSH
40234: LD_INT 45
40236: PUSH
40237: LD_INT 46
40239: PUSH
40240: LD_INT 47
40242: PUSH
40243: LD_INT 82
40245: PUSH
40246: LD_INT 83
40248: PUSH
40249: LD_INT 84
40251: PUSH
40252: LD_INT 85
40254: PUSH
40255: LD_INT 86
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 6
40266: PUSH
40267: LD_INT 15
40269: PUSH
40270: LD_INT 16
40272: PUSH
40273: LD_INT 7
40275: PUSH
40276: LD_INT 12
40278: PUSH
40279: LD_INT 13
40281: PUSH
40282: LD_INT 10
40284: PUSH
40285: LD_INT 14
40287: PUSH
40288: LD_INT 20
40290: PUSH
40291: LD_INT 21
40293: PUSH
40294: LD_INT 22
40296: PUSH
40297: LD_INT 25
40299: PUSH
40300: LD_INT 32
40302: PUSH
40303: LD_INT 27
40305: PUSH
40306: LD_INT 36
40308: PUSH
40309: LD_INT 69
40311: PUSH
40312: LD_INT 39
40314: PUSH
40315: LD_INT 34
40317: PUSH
40318: LD_INT 40
40320: PUSH
40321: LD_INT 48
40323: PUSH
40324: LD_INT 49
40326: PUSH
40327: LD_INT 50
40329: PUSH
40330: LD_INT 51
40332: PUSH
40333: LD_INT 52
40335: PUSH
40336: LD_INT 53
40338: PUSH
40339: LD_INT 54
40341: PUSH
40342: LD_INT 55
40344: PUSH
40345: LD_INT 56
40347: PUSH
40348: LD_INT 57
40350: PUSH
40351: LD_INT 58
40353: PUSH
40354: LD_INT 59
40356: PUSH
40357: LD_INT 60
40359: PUSH
40360: LD_INT 61
40362: PUSH
40363: LD_INT 62
40365: PUSH
40366: LD_INT 80
40368: PUSH
40369: LD_INT 82
40371: PUSH
40372: LD_INT 83
40374: PUSH
40375: LD_INT 84
40377: PUSH
40378: LD_INT 85
40380: PUSH
40381: LD_INT 86
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: ST_TO_ADDR
40437: GO 40904
40439: LD_INT 2
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 40673
40447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_INT 35
40455: PUSH
40456: LD_INT 45
40458: PUSH
40459: LD_INT 46
40461: PUSH
40462: LD_INT 47
40464: PUSH
40465: LD_INT 82
40467: PUSH
40468: LD_INT 83
40470: PUSH
40471: LD_INT 84
40473: PUSH
40474: LD_INT 85
40476: PUSH
40477: LD_INT 87
40479: PUSH
40480: LD_INT 70
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 11
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: LD_INT 4
40494: PUSH
40495: LD_INT 5
40497: PUSH
40498: LD_INT 6
40500: PUSH
40501: LD_INT 15
40503: PUSH
40504: LD_INT 18
40506: PUSH
40507: LD_INT 7
40509: PUSH
40510: LD_INT 17
40512: PUSH
40513: LD_INT 8
40515: PUSH
40516: LD_INT 20
40518: PUSH
40519: LD_INT 21
40521: PUSH
40522: LD_INT 22
40524: PUSH
40525: LD_INT 72
40527: PUSH
40528: LD_INT 26
40530: PUSH
40531: LD_INT 69
40533: PUSH
40534: LD_INT 39
40536: PUSH
40537: LD_INT 40
40539: PUSH
40540: LD_INT 41
40542: PUSH
40543: LD_INT 42
40545: PUSH
40546: LD_INT 43
40548: PUSH
40549: LD_INT 48
40551: PUSH
40552: LD_INT 49
40554: PUSH
40555: LD_INT 50
40557: PUSH
40558: LD_INT 51
40560: PUSH
40561: LD_INT 52
40563: PUSH
40564: LD_INT 53
40566: PUSH
40567: LD_INT 54
40569: PUSH
40570: LD_INT 55
40572: PUSH
40573: LD_INT 56
40575: PUSH
40576: LD_INT 60
40578: PUSH
40579: LD_INT 61
40581: PUSH
40582: LD_INT 62
40584: PUSH
40585: LD_INT 66
40587: PUSH
40588: LD_INT 67
40590: PUSH
40591: LD_INT 68
40593: PUSH
40594: LD_INT 81
40596: PUSH
40597: LD_INT 82
40599: PUSH
40600: LD_INT 83
40602: PUSH
40603: LD_INT 84
40605: PUSH
40606: LD_INT 85
40608: PUSH
40609: LD_INT 87
40611: PUSH
40612: LD_INT 88
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
40671: GO 40904
40673: LD_INT 3
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40903
40681: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_INT 46
40689: PUSH
40690: LD_INT 47
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 82
40701: PUSH
40702: LD_INT 83
40704: PUSH
40705: LD_INT 84
40707: PUSH
40708: LD_INT 85
40710: PUSH
40711: LD_INT 86
40713: PUSH
40714: LD_INT 11
40716: PUSH
40717: LD_INT 9
40719: PUSH
40720: LD_INT 20
40722: PUSH
40723: LD_INT 19
40725: PUSH
40726: LD_INT 21
40728: PUSH
40729: LD_INT 24
40731: PUSH
40732: LD_INT 22
40734: PUSH
40735: LD_INT 25
40737: PUSH
40738: LD_INT 28
40740: PUSH
40741: LD_INT 29
40743: PUSH
40744: LD_INT 30
40746: PUSH
40747: LD_INT 31
40749: PUSH
40750: LD_INT 37
40752: PUSH
40753: LD_INT 38
40755: PUSH
40756: LD_INT 32
40758: PUSH
40759: LD_INT 27
40761: PUSH
40762: LD_INT 33
40764: PUSH
40765: LD_INT 69
40767: PUSH
40768: LD_INT 39
40770: PUSH
40771: LD_INT 34
40773: PUSH
40774: LD_INT 40
40776: PUSH
40777: LD_INT 71
40779: PUSH
40780: LD_INT 23
40782: PUSH
40783: LD_INT 44
40785: PUSH
40786: LD_INT 48
40788: PUSH
40789: LD_INT 49
40791: PUSH
40792: LD_INT 50
40794: PUSH
40795: LD_INT 51
40797: PUSH
40798: LD_INT 52
40800: PUSH
40801: LD_INT 53
40803: PUSH
40804: LD_INT 54
40806: PUSH
40807: LD_INT 55
40809: PUSH
40810: LD_INT 56
40812: PUSH
40813: LD_INT 57
40815: PUSH
40816: LD_INT 58
40818: PUSH
40819: LD_INT 59
40821: PUSH
40822: LD_INT 63
40824: PUSH
40825: LD_INT 64
40827: PUSH
40828: LD_INT 65
40830: PUSH
40831: LD_INT 82
40833: PUSH
40834: LD_INT 83
40836: PUSH
40837: LD_INT 84
40839: PUSH
40840: LD_INT 85
40842: PUSH
40843: LD_INT 86
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
40901: GO 40904
40903: POP
// if state > - 1 and state < 3 then
40904: LD_VAR 0 3
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: GREATER
40913: PUSH
40914: LD_VAR 0 3
40918: PUSH
40919: LD_INT 3
40921: LESS
40922: AND
40923: IFFALSE 40980
// for i in result do
40925: LD_ADDR_VAR 0 5
40929: PUSH
40930: LD_VAR 0 4
40934: PUSH
40935: FOR_IN
40936: IFFALSE 40978
// if GetTech ( i , side ) <> state then
40938: LD_VAR 0 5
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 321
40952: PUSH
40953: LD_VAR 0 3
40957: NONEQUAL
40958: IFFALSE 40976
// result := result diff i ;
40960: LD_ADDR_VAR 0 4
40964: PUSH
40965: LD_VAR 0 4
40969: PUSH
40970: LD_VAR 0 5
40974: DIFF
40975: ST_TO_ADDR
40976: GO 40935
40978: POP
40979: POP
// end ;
40980: LD_VAR 0 4
40984: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40985: LD_INT 0
40987: PPUSH
40988: PPUSH
40989: PPUSH
// result := true ;
40990: LD_ADDR_VAR 0 3
40994: PUSH
40995: LD_INT 1
40997: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40998: LD_ADDR_VAR 0 5
41002: PUSH
41003: LD_VAR 0 2
41007: PPUSH
41008: CALL_OW 480
41012: ST_TO_ADDR
// if not tmp then
41013: LD_VAR 0 5
41017: NOT
41018: IFFALSE 41022
// exit ;
41020: GO 41071
// for i in tmp do
41022: LD_ADDR_VAR 0 4
41026: PUSH
41027: LD_VAR 0 5
41031: PUSH
41032: FOR_IN
41033: IFFALSE 41069
// if GetTech ( i , side ) <> state_researched then
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 321
41049: PUSH
41050: LD_INT 2
41052: NONEQUAL
41053: IFFALSE 41067
// begin result := false ;
41055: LD_ADDR_VAR 0 3
41059: PUSH
41060: LD_INT 0
41062: ST_TO_ADDR
// exit ;
41063: POP
41064: POP
41065: GO 41071
// end ;
41067: GO 41032
41069: POP
41070: POP
// end ;
41071: LD_VAR 0 3
41075: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41076: LD_INT 0
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41091: LD_VAR 0 1
41095: NOT
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 257
41106: PUSH
41107: LD_INT 9
41109: NONEQUAL
41110: OR
41111: IFFALSE 41115
// exit ;
41113: GO 41688
// side := GetSide ( unit ) ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 255
41129: ST_TO_ADDR
// tech_space := tech_spacanom ;
41130: LD_ADDR_VAR 0 12
41134: PUSH
41135: LD_INT 29
41137: ST_TO_ADDR
// tech_time := tech_taurad ;
41138: LD_ADDR_VAR 0 13
41142: PUSH
41143: LD_INT 28
41145: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41146: LD_ADDR_VAR 0 11
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 310
41160: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41161: LD_VAR 0 11
41165: PPUSH
41166: CALL_OW 247
41170: PUSH
41171: LD_INT 2
41173: EQUAL
41174: IFFALSE 41178
// exit ;
41176: GO 41688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41178: LD_ADDR_VAR 0 8
41182: PUSH
41183: LD_INT 81
41185: PUSH
41186: LD_VAR 0 9
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 21
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PPUSH
41216: CALL_OW 69
41220: ST_TO_ADDR
// if not tmp then
41221: LD_VAR 0 8
41225: NOT
41226: IFFALSE 41230
// exit ;
41228: GO 41688
// if in_unit then
41230: LD_VAR 0 11
41234: IFFALSE 41258
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41236: LD_ADDR_VAR 0 10
41240: PUSH
41241: LD_VAR 0 8
41245: PPUSH
41246: LD_VAR 0 11
41250: PPUSH
41251: CALL_OW 74
41255: ST_TO_ADDR
41256: GO 41278
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41258: LD_ADDR_VAR 0 10
41262: PUSH
41263: LD_VAR 0 8
41267: PPUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 74
41277: ST_TO_ADDR
// if not enemy then
41278: LD_VAR 0 10
41282: NOT
41283: IFFALSE 41287
// exit ;
41285: GO 41688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41287: LD_VAR 0 11
41291: PUSH
41292: LD_VAR 0 11
41296: PPUSH
41297: LD_VAR 0 10
41301: PPUSH
41302: CALL_OW 296
41306: PUSH
41307: LD_INT 13
41309: GREATER
41310: AND
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: LD_VAR 0 10
41321: PPUSH
41322: CALL_OW 296
41326: PUSH
41327: LD_INT 12
41329: GREATER
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 41688
// missile := [ 1 ] ;
41335: LD_ADDR_VAR 0 14
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41346: LD_VAR 0 9
41350: PPUSH
41351: LD_VAR 0 12
41355: PPUSH
41356: CALL_OW 325
41360: IFFALSE 41389
// missile := Replace ( missile , missile + 1 , 2 ) ;
41362: LD_ADDR_VAR 0 14
41366: PUSH
41367: LD_VAR 0 14
41371: PPUSH
41372: LD_VAR 0 14
41376: PUSH
41377: LD_INT 1
41379: PLUS
41380: PPUSH
41381: LD_INT 2
41383: PPUSH
41384: CALL_OW 1
41388: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41389: LD_VAR 0 9
41393: PPUSH
41394: LD_VAR 0 13
41398: PPUSH
41399: CALL_OW 325
41403: PUSH
41404: LD_VAR 0 10
41408: PPUSH
41409: CALL_OW 255
41413: PPUSH
41414: LD_VAR 0 13
41418: PPUSH
41419: CALL_OW 325
41423: NOT
41424: AND
41425: IFFALSE 41454
// missile := Replace ( missile , missile + 1 , 3 ) ;
41427: LD_ADDR_VAR 0 14
41431: PUSH
41432: LD_VAR 0 14
41436: PPUSH
41437: LD_VAR 0 14
41441: PUSH
41442: LD_INT 1
41444: PLUS
41445: PPUSH
41446: LD_INT 3
41448: PPUSH
41449: CALL_OW 1
41453: ST_TO_ADDR
// if missile < 2 then
41454: LD_VAR 0 14
41458: PUSH
41459: LD_INT 2
41461: LESS
41462: IFFALSE 41466
// exit ;
41464: GO 41688
// x := GetX ( enemy ) ;
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: LD_VAR 0 10
41475: PPUSH
41476: CALL_OW 250
41480: ST_TO_ADDR
// y := GetY ( enemy ) ;
41481: LD_ADDR_VAR 0 5
41485: PUSH
41486: LD_VAR 0 10
41490: PPUSH
41491: CALL_OW 251
41495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: LD_VAR 0 4
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PPUSH
41510: LD_INT 1
41512: PPUSH
41513: CALL_OW 12
41517: PLUS
41518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41519: LD_ADDR_VAR 0 7
41523: PUSH
41524: LD_VAR 0 5
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PPUSH
41533: LD_INT 1
41535: PPUSH
41536: CALL_OW 12
41540: PLUS
41541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41542: LD_VAR 0 6
41546: PPUSH
41547: LD_VAR 0 7
41551: PPUSH
41552: CALL_OW 488
41556: NOT
41557: IFFALSE 41579
// begin _x := x ;
41559: LD_ADDR_VAR 0 6
41563: PUSH
41564: LD_VAR 0 4
41568: ST_TO_ADDR
// _y := y ;
41569: LD_ADDR_VAR 0 7
41573: PUSH
41574: LD_VAR 0 5
41578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41579: LD_ADDR_VAR 0 3
41583: PUSH
41584: LD_INT 1
41586: PPUSH
41587: LD_VAR 0 14
41591: PPUSH
41592: CALL_OW 12
41596: ST_TO_ADDR
// case i of 1 :
41597: LD_VAR 0 3
41601: PUSH
41602: LD_INT 1
41604: DOUBLE
41605: EQUAL
41606: IFTRUE 41610
41608: GO 41627
41610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41611: LD_VAR 0 1
41615: PPUSH
41616: LD_VAR 0 10
41620: PPUSH
41621: CALL_OW 115
41625: GO 41688
41627: LD_INT 2
41629: DOUBLE
41630: EQUAL
41631: IFTRUE 41635
41633: GO 41657
41635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41636: LD_VAR 0 1
41640: PPUSH
41641: LD_VAR 0 6
41645: PPUSH
41646: LD_VAR 0 7
41650: PPUSH
41651: CALL_OW 153
41655: GO 41688
41657: LD_INT 3
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41665
41663: GO 41687
41665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41666: LD_VAR 0 1
41670: PPUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: LD_VAR 0 7
41680: PPUSH
41681: CALL_OW 154
41685: GO 41688
41687: POP
// end ;
41688: LD_VAR 0 2
41692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
// if not unit or not building then
41701: LD_VAR 0 1
41705: NOT
41706: PUSH
41707: LD_VAR 0 2
41711: NOT
41712: OR
41713: IFFALSE 41717
// exit ;
41715: GO 41875
// x := GetX ( building ) ;
41717: LD_ADDR_VAR 0 5
41721: PUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: CALL_OW 250
41731: ST_TO_ADDR
// y := GetY ( building ) ;
41732: LD_ADDR_VAR 0 6
41736: PUSH
41737: LD_VAR 0 2
41741: PPUSH
41742: CALL_OW 251
41746: ST_TO_ADDR
// for i = 0 to 5 do
41747: LD_ADDR_VAR 0 4
41751: PUSH
41752: DOUBLE
41753: LD_INT 0
41755: DEC
41756: ST_TO_ADDR
41757: LD_INT 5
41759: PUSH
41760: FOR_TO
41761: IFFALSE 41873
// begin _x := ShiftX ( x , i , 3 ) ;
41763: LD_ADDR_VAR 0 7
41767: PUSH
41768: LD_VAR 0 5
41772: PPUSH
41773: LD_VAR 0 4
41777: PPUSH
41778: LD_INT 3
41780: PPUSH
41781: CALL_OW 272
41785: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41786: LD_ADDR_VAR 0 8
41790: PUSH
41791: LD_VAR 0 6
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: LD_INT 3
41803: PPUSH
41804: CALL_OW 273
41808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41809: LD_VAR 0 7
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: CALL_OW 488
41823: NOT
41824: IFFALSE 41828
// continue ;
41826: GO 41760
// if HexInfo ( _x , _y ) = 0 then
41828: LD_VAR 0 7
41832: PPUSH
41833: LD_VAR 0 8
41837: PPUSH
41838: CALL_OW 428
41842: PUSH
41843: LD_INT 0
41845: EQUAL
41846: IFFALSE 41871
// begin ComMoveXY ( unit , _x , _y ) ;
41848: LD_VAR 0 1
41852: PPUSH
41853: LD_VAR 0 7
41857: PPUSH
41858: LD_VAR 0 8
41862: PPUSH
41863: CALL_OW 111
// exit ;
41867: POP
41868: POP
41869: GO 41875
// end ; end ;
41871: GO 41760
41873: POP
41874: POP
// end ;
41875: LD_VAR 0 3
41879: RET
// export function ScanBase ( side , base_area ) ; begin
41880: LD_INT 0
41882: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_VAR 0 2
41892: PPUSH
41893: LD_INT 81
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PPUSH
41905: CALL_OW 70
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 3
41914: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
// result := false ;
41921: LD_ADDR_VAR 0 2
41925: PUSH
41926: LD_INT 0
41928: ST_TO_ADDR
// side := GetSide ( unit ) ;
41929: LD_ADDR_VAR 0 3
41933: PUSH
41934: LD_VAR 0 1
41938: PPUSH
41939: CALL_OW 255
41943: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41944: LD_ADDR_VAR 0 4
41948: PUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL_OW 248
41958: ST_TO_ADDR
// case nat of 1 :
41959: LD_VAR 0 4
41963: PUSH
41964: LD_INT 1
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 41983
41972: POP
// tech := tech_lassight ; 2 :
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_INT 12
41980: ST_TO_ADDR
41981: GO 42022
41983: LD_INT 2
41985: DOUBLE
41986: EQUAL
41987: IFTRUE 41991
41989: GO 42002
41991: POP
// tech := tech_mortar ; 3 :
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_INT 41
41999: ST_TO_ADDR
42000: GO 42022
42002: LD_INT 3
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42021
42010: POP
// tech := tech_bazooka ; end ;
42011: LD_ADDR_VAR 0 5
42015: PUSH
42016: LD_INT 44
42018: ST_TO_ADDR
42019: GO 42022
42021: POP
// if Researched ( side , tech ) then
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_VAR 0 5
42031: PPUSH
42032: CALL_OW 325
42036: IFFALSE 42063
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_INT 5
42045: PUSH
42046: LD_INT 8
42048: PUSH
42049: LD_INT 9
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: PUSH
42057: LD_VAR 0 4
42061: ARRAY
42062: ST_TO_ADDR
// end ;
42063: LD_VAR 0 2
42067: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42068: LD_INT 0
42070: PPUSH
42071: PPUSH
42072: PPUSH
// if not mines then
42073: LD_VAR 0 2
42077: NOT
42078: IFFALSE 42082
// exit ;
42080: GO 42226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_INT 81
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 21
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PPUSH
42120: CALL_OW 69
42124: ST_TO_ADDR
// for i in mines do
42125: LD_ADDR_VAR 0 4
42129: PUSH
42130: LD_VAR 0 2
42134: PUSH
42135: FOR_IN
42136: IFFALSE 42224
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42138: LD_VAR 0 4
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 4
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PPUSH
42156: CALL_OW 458
42160: NOT
42161: IFFALSE 42165
// continue ;
42163: GO 42135
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42165: LD_VAR 0 4
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: PPUSH
42174: LD_VAR 0 4
42178: PUSH
42179: LD_INT 2
42181: ARRAY
42182: PPUSH
42183: CALL_OW 428
42187: PUSH
42188: LD_VAR 0 5
42192: IN
42193: IFFALSE 42222
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42195: LD_VAR 0 4
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 4
42208: PUSH
42209: LD_INT 2
42211: ARRAY
42212: PPUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 456
// end ;
42222: GO 42135
42224: POP
42225: POP
// end ;
42226: LD_VAR 0 3
42230: RET
// export function Count ( array ) ; begin
42231: LD_INT 0
42233: PPUSH
// result := array + 0 ;
42234: LD_ADDR_VAR 0 2
42238: PUSH
42239: LD_VAR 0 1
42243: PUSH
42244: LD_INT 0
42246: PLUS
42247: ST_TO_ADDR
// end ;
42248: LD_VAR 0 2
42252: RET
// export function IsEmpty ( building ) ; begin
42253: LD_INT 0
42255: PPUSH
// if not building then
42256: LD_VAR 0 1
42260: NOT
42261: IFFALSE 42265
// exit ;
42263: GO 42308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42265: LD_ADDR_VAR 0 2
42269: PUSH
42270: LD_VAR 0 1
42274: PUSH
42275: LD_INT 22
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 255
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 58
42294: PUSH
42295: EMPTY
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PPUSH
42302: CALL_OW 69
42306: IN
42307: ST_TO_ADDR
// end ;
42308: LD_VAR 0 2
42312: RET
// export function IsNotFull ( building ) ; var places ; begin
42313: LD_INT 0
42315: PPUSH
42316: PPUSH
// if not building then
42317: LD_VAR 0 1
42321: NOT
42322: IFFALSE 42326
// exit ;
42324: GO 42354
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42326: LD_ADDR_VAR 0 2
42330: PUSH
42331: LD_VAR 0 1
42335: PPUSH
42336: LD_INT 3
42338: PUSH
42339: LD_INT 62
42341: PUSH
42342: EMPTY
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PPUSH
42349: CALL_OW 72
42353: ST_TO_ADDR
// end ;
42354: LD_VAR 0 2
42358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42359: LD_INT 0
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
// tmp := [ ] ;
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: EMPTY
42371: ST_TO_ADDR
// list := [ ] ;
42372: LD_ADDR_VAR 0 5
42376: PUSH
42377: EMPTY
42378: ST_TO_ADDR
// for i = 16 to 25 do
42379: LD_ADDR_VAR 0 4
42383: PUSH
42384: DOUBLE
42385: LD_INT 16
42387: DEC
42388: ST_TO_ADDR
42389: LD_INT 25
42391: PUSH
42392: FOR_TO
42393: IFFALSE 42466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_VAR 0 3
42404: PUSH
42405: LD_INT 22
42407: PUSH
42408: LD_VAR 0 1
42412: PPUSH
42413: CALL_OW 255
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 91
42424: PUSH
42425: LD_VAR 0 1
42429: PUSH
42430: LD_INT 6
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 30
42440: PUSH
42441: LD_VAR 0 4
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: PPUSH
42458: CALL_OW 69
42462: ADD
42463: ST_TO_ADDR
42464: GO 42392
42466: POP
42467: POP
// for i = 1 to tmp do
42468: LD_ADDR_VAR 0 4
42472: PUSH
42473: DOUBLE
42474: LD_INT 1
42476: DEC
42477: ST_TO_ADDR
42478: LD_VAR 0 3
42482: PUSH
42483: FOR_TO
42484: IFFALSE 42572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: LD_VAR 0 5
42495: PUSH
42496: LD_VAR 0 3
42500: PUSH
42501: LD_VAR 0 4
42505: ARRAY
42506: PPUSH
42507: CALL_OW 266
42511: PUSH
42512: LD_VAR 0 3
42516: PUSH
42517: LD_VAR 0 4
42521: ARRAY
42522: PPUSH
42523: CALL_OW 250
42527: PUSH
42528: LD_VAR 0 3
42532: PUSH
42533: LD_VAR 0 4
42537: ARRAY
42538: PPUSH
42539: CALL_OW 251
42543: PUSH
42544: LD_VAR 0 3
42548: PUSH
42549: LD_VAR 0 4
42553: ARRAY
42554: PPUSH
42555: CALL_OW 254
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: PUSH
42566: EMPTY
42567: LIST
42568: ADD
42569: ST_TO_ADDR
42570: GO 42483
42572: POP
42573: POP
// result := list ;
42574: LD_ADDR_VAR 0 2
42578: PUSH
42579: LD_VAR 0 5
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 2
42588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42589: LD_INT 0
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
// if not factory then
42598: LD_VAR 0 1
42602: NOT
42603: IFFALSE 42607
// exit ;
42605: GO 43200
// if control = control_apeman then
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 5
42614: EQUAL
42615: IFFALSE 42724
// begin tmp := UnitsInside ( factory ) ;
42617: LD_ADDR_VAR 0 8
42621: PUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 313
42631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42632: LD_VAR 0 8
42636: PPUSH
42637: LD_INT 25
42639: PUSH
42640: LD_INT 12
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PPUSH
42647: CALL_OW 72
42651: NOT
42652: IFFALSE 42662
// control := control_manual ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_INT 1
42661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42662: LD_ADDR_VAR 0 8
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL 42359 0 1
42676: ST_TO_ADDR
// if tmp then
42677: LD_VAR 0 8
42681: IFFALSE 42724
// begin for i in tmp do
42683: LD_ADDR_VAR 0 7
42687: PUSH
42688: LD_VAR 0 8
42692: PUSH
42693: FOR_IN
42694: IFFALSE 42722
// if i [ 1 ] = b_ext_radio then
42696: LD_VAR 0 7
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PUSH
42705: LD_INT 22
42707: EQUAL
42708: IFFALSE 42720
// begin control := control_remote ;
42710: LD_ADDR_VAR 0 4
42714: PUSH
42715: LD_INT 2
42717: ST_TO_ADDR
// break ;
42718: GO 42722
// end ;
42720: GO 42693
42722: POP
42723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42724: LD_VAR 0 1
42728: PPUSH
42729: LD_VAR 0 2
42733: PPUSH
42734: LD_VAR 0 3
42738: PPUSH
42739: LD_VAR 0 4
42743: PPUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: CALL_OW 448
42753: IFFALSE 42788
// begin result := [ chassis , engine , control , weapon ] ;
42755: LD_ADDR_VAR 0 6
42759: PUSH
42760: LD_VAR 0 2
42764: PUSH
42765: LD_VAR 0 3
42769: PUSH
42770: LD_VAR 0 4
42774: PUSH
42775: LD_VAR 0 5
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// exit ;
42786: GO 43200
// end ; _chassis := AvailableChassisList ( factory ) ;
42788: LD_ADDR_VAR 0 9
42792: PUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL_OW 475
42802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42803: LD_ADDR_VAR 0 11
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 476
42817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42818: LD_ADDR_VAR 0 12
42822: PUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 477
42832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42833: LD_ADDR_VAR 0 10
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 478
42847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42848: LD_VAR 0 9
42852: NOT
42853: PUSH
42854: LD_VAR 0 11
42858: NOT
42859: OR
42860: PUSH
42861: LD_VAR 0 12
42865: NOT
42866: OR
42867: PUSH
42868: LD_VAR 0 10
42872: NOT
42873: OR
42874: IFFALSE 42909
// begin result := [ chassis , engine , control , weapon ] ;
42876: LD_ADDR_VAR 0 6
42880: PUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_VAR 0 3
42890: PUSH
42891: LD_VAR 0 4
42895: PUSH
42896: LD_VAR 0 5
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// exit ;
42907: GO 43200
// end ; if not chassis in _chassis then
42909: LD_VAR 0 2
42913: PUSH
42914: LD_VAR 0 9
42918: IN
42919: NOT
42920: IFFALSE 42946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42922: LD_ADDR_VAR 0 2
42926: PUSH
42927: LD_VAR 0 9
42931: PUSH
42932: LD_INT 1
42934: PPUSH
42935: LD_VAR 0 9
42939: PPUSH
42940: CALL_OW 12
42944: ARRAY
42945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42946: LD_VAR 0 2
42950: PPUSH
42951: LD_VAR 0 3
42955: PPUSH
42956: CALL 43205 0 2
42960: NOT
42961: IFFALSE 43020
// repeat engine := _engine [ 1 ] ;
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_VAR 0 11
42972: PUSH
42973: LD_INT 1
42975: ARRAY
42976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42977: LD_ADDR_VAR 0 11
42981: PUSH
42982: LD_VAR 0 11
42986: PPUSH
42987: LD_INT 1
42989: PPUSH
42990: CALL_OW 3
42994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42995: LD_VAR 0 2
42999: PPUSH
43000: LD_VAR 0 3
43004: PPUSH
43005: CALL 43205 0 2
43009: PUSH
43010: LD_VAR 0 11
43014: PUSH
43015: EMPTY
43016: EQUAL
43017: OR
43018: IFFALSE 42963
// if not control in _control then
43020: LD_VAR 0 4
43024: PUSH
43025: LD_VAR 0 12
43029: IN
43030: NOT
43031: IFFALSE 43057
// control := _control [ rand ( 1 , _control ) ] ;
43033: LD_ADDR_VAR 0 4
43037: PUSH
43038: LD_VAR 0 12
43042: PUSH
43043: LD_INT 1
43045: PPUSH
43046: LD_VAR 0 12
43050: PPUSH
43051: CALL_OW 12
43055: ARRAY
43056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43057: LD_VAR 0 2
43061: PPUSH
43062: LD_VAR 0 5
43066: PPUSH
43067: CALL 43425 0 2
43071: NOT
43072: IFFALSE 43131
// repeat weapon := _weapon [ 1 ] ;
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: LD_VAR 0 10
43083: PUSH
43084: LD_INT 1
43086: ARRAY
43087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43088: LD_ADDR_VAR 0 10
43092: PUSH
43093: LD_VAR 0 10
43097: PPUSH
43098: LD_INT 1
43100: PPUSH
43101: CALL_OW 3
43105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43106: LD_VAR 0 2
43110: PPUSH
43111: LD_VAR 0 5
43115: PPUSH
43116: CALL 43425 0 2
43120: PUSH
43121: LD_VAR 0 10
43125: PUSH
43126: EMPTY
43127: EQUAL
43128: OR
43129: IFFALSE 43074
// result := [ ] ;
43131: LD_ADDR_VAR 0 6
43135: PUSH
43136: EMPTY
43137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43138: LD_VAR 0 1
43142: PPUSH
43143: LD_VAR 0 2
43147: PPUSH
43148: LD_VAR 0 3
43152: PPUSH
43153: LD_VAR 0 4
43157: PPUSH
43158: LD_VAR 0 5
43162: PPUSH
43163: CALL_OW 448
43167: IFFALSE 43200
// result := [ chassis , engine , control , weapon ] ;
43169: LD_ADDR_VAR 0 6
43173: PUSH
43174: LD_VAR 0 2
43178: PUSH
43179: LD_VAR 0 3
43183: PUSH
43184: LD_VAR 0 4
43188: PUSH
43189: LD_VAR 0 5
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 6
43204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43205: LD_INT 0
43207: PPUSH
// if not chassis or not engine then
43208: LD_VAR 0 1
43212: NOT
43213: PUSH
43214: LD_VAR 0 2
43218: NOT
43219: OR
43220: IFFALSE 43224
// exit ;
43222: GO 43420
// case engine of engine_solar :
43224: LD_VAR 0 2
43228: PUSH
43229: LD_INT 2
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43275
43237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 11
43245: PUSH
43246: LD_INT 12
43248: PUSH
43249: LD_INT 13
43251: PUSH
43252: LD_INT 14
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
43273: GO 43404
43275: LD_INT 1
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43283
43281: GO 43345
43283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 11
43291: PUSH
43292: LD_INT 12
43294: PUSH
43295: LD_INT 13
43297: PUSH
43298: LD_INT 14
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: LD_INT 21
43318: PUSH
43319: LD_INT 23
43321: PUSH
43322: LD_INT 22
43324: PUSH
43325: LD_INT 24
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 43404
43345: LD_INT 3
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43403
43353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 13
43361: PUSH
43362: LD_INT 14
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: LD_INT 21
43379: PUSH
43380: LD_INT 22
43382: PUSH
43383: LD_INT 23
43385: PUSH
43386: LD_INT 24
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
43401: GO 43404
43403: POP
// result := ( chassis in result ) ;
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_VAR 0 1
43413: PUSH
43414: LD_VAR 0 3
43418: IN
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 3
43424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43425: LD_INT 0
43427: PPUSH
// if not chassis or not weapon then
43428: LD_VAR 0 1
43432: NOT
43433: PUSH
43434: LD_VAR 0 2
43438: NOT
43439: OR
43440: IFFALSE 43444
// exit ;
43442: GO 44504
// case weapon of us_machine_gun :
43444: LD_VAR 0 2
43448: PUSH
43449: LD_INT 2
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43487
43457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
43485: GO 44488
43487: LD_INT 3
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43525
43495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 4
43512: PUSH
43513: LD_INT 5
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
43523: GO 44488
43525: LD_INT 11
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43533
43531: GO 43563
43533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43534: LD_ADDR_VAR 0 3
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 4
43550: PUSH
43551: LD_INT 5
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
43561: GO 44488
43563: LD_INT 4
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43597
43571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: LD_INT 4
43585: PUSH
43586: LD_INT 5
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
43595: GO 44488
43597: LD_INT 5
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43605
43603: GO 43631
43605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43606: LD_ADDR_VAR 0 3
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
43629: GO 44488
43631: LD_INT 9
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43639
43637: GO 43665
43639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 3
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
43663: GO 44488
43665: LD_INT 7
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 43699
43673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: LD_INT 4
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
43697: GO 44488
43699: LD_INT 12
43701: DOUBLE
43702: EQUAL
43703: IFTRUE 43707
43705: GO 43733
43707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43708: LD_ADDR_VAR 0 3
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 4
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
43731: GO 44488
43733: LD_INT 13
43735: DOUBLE
43736: EQUAL
43737: IFTRUE 43741
43739: GO 43767
43741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43742: LD_ADDR_VAR 0 3
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
43765: GO 44488
43767: LD_INT 14
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43793
43775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43776: LD_ADDR_VAR 0 3
43780: PUSH
43781: LD_INT 4
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: ST_TO_ADDR
43791: GO 44488
43793: LD_INT 6
43795: DOUBLE
43796: EQUAL
43797: IFTRUE 43801
43799: GO 43819
43801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43802: LD_ADDR_VAR 0 3
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: ST_TO_ADDR
43817: GO 44488
43819: LD_INT 10
43821: DOUBLE
43822: EQUAL
43823: IFTRUE 43827
43825: GO 43845
43827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_INT 4
43835: PUSH
43836: LD_INT 5
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: ST_TO_ADDR
43843: GO 44488
43845: LD_INT 22
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43879
43853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 11
43861: PUSH
43862: LD_INT 12
43864: PUSH
43865: LD_INT 13
43867: PUSH
43868: LD_INT 14
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
43877: GO 44488
43879: LD_INT 23
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43887
43885: GO 43913
43887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43888: LD_ADDR_VAR 0 3
43892: PUSH
43893: LD_INT 11
43895: PUSH
43896: LD_INT 12
43898: PUSH
43899: LD_INT 13
43901: PUSH
43902: LD_INT 14
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
43911: GO 44488
43913: LD_INT 24
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43947
43921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: LD_INT 11
43929: PUSH
43930: LD_INT 12
43932: PUSH
43933: LD_INT 13
43935: PUSH
43936: LD_INT 14
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
43945: GO 44488
43947: LD_INT 30
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43955
43953: GO 43981
43955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43956: LD_ADDR_VAR 0 3
43960: PUSH
43961: LD_INT 11
43963: PUSH
43964: LD_INT 12
43966: PUSH
43967: LD_INT 13
43969: PUSH
43970: LD_INT 14
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: ST_TO_ADDR
43979: GO 44488
43981: LD_INT 25
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44007
43989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 14
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: ST_TO_ADDR
44005: GO 44488
44007: LD_INT 27
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44015
44013: GO 44033
44015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_INT 13
44023: PUSH
44024: LD_INT 14
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: ST_TO_ADDR
44031: GO 44488
44033: LD_INT 92
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44067
44041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 11
44049: PUSH
44050: LD_INT 12
44052: PUSH
44053: LD_INT 13
44055: PUSH
44056: LD_INT 14
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
44065: GO 44488
44067: LD_INT 28
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44075
44073: GO 44093
44075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_INT 13
44083: PUSH
44084: LD_INT 14
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: ST_TO_ADDR
44091: GO 44488
44093: LD_INT 29
44095: DOUBLE
44096: EQUAL
44097: IFTRUE 44101
44099: GO 44119
44101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: LD_INT 13
44109: PUSH
44110: LD_INT 14
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: ST_TO_ADDR
44117: GO 44488
44119: LD_INT 31
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44127
44125: GO 44145
44127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44128: LD_ADDR_VAR 0 3
44132: PUSH
44133: LD_INT 13
44135: PUSH
44136: LD_INT 14
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: ST_TO_ADDR
44143: GO 44488
44145: LD_INT 26
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44171
44153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 13
44161: PUSH
44162: LD_INT 14
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: ST_TO_ADDR
44169: GO 44488
44171: LD_INT 42
44173: DOUBLE
44174: EQUAL
44175: IFTRUE 44179
44177: GO 44205
44179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_INT 21
44187: PUSH
44188: LD_INT 22
44190: PUSH
44191: LD_INT 23
44193: PUSH
44194: LD_INT 24
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: ST_TO_ADDR
44203: GO 44488
44205: LD_INT 43
44207: DOUBLE
44208: EQUAL
44209: IFTRUE 44213
44211: GO 44239
44213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_INT 21
44221: PUSH
44222: LD_INT 22
44224: PUSH
44225: LD_INT 23
44227: PUSH
44228: LD_INT 24
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
44237: GO 44488
44239: LD_INT 44
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44247
44245: GO 44273
44247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44248: LD_ADDR_VAR 0 3
44252: PUSH
44253: LD_INT 21
44255: PUSH
44256: LD_INT 22
44258: PUSH
44259: LD_INT 23
44261: PUSH
44262: LD_INT 24
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
44271: GO 44488
44273: LD_INT 45
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44307
44281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_INT 21
44289: PUSH
44290: LD_INT 22
44292: PUSH
44293: LD_INT 23
44295: PUSH
44296: LD_INT 24
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
44305: GO 44488
44307: LD_INT 49
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44341
44315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_INT 21
44323: PUSH
44324: LD_INT 22
44326: PUSH
44327: LD_INT 23
44329: PUSH
44330: LD_INT 24
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
44339: GO 44488
44341: LD_INT 51
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44375
44349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 21
44357: PUSH
44358: LD_INT 22
44360: PUSH
44361: LD_INT 23
44363: PUSH
44364: LD_INT 24
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
44373: GO 44488
44375: LD_INT 52
44377: DOUBLE
44378: EQUAL
44379: IFTRUE 44383
44381: GO 44409
44383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_INT 21
44391: PUSH
44392: LD_INT 22
44394: PUSH
44395: LD_INT 23
44397: PUSH
44398: LD_INT 24
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
44407: GO 44488
44409: LD_INT 53
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44417
44415: GO 44435
44417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 23
44425: PUSH
44426: LD_INT 24
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
44433: GO 44488
44435: LD_INT 46
44437: DOUBLE
44438: EQUAL
44439: IFTRUE 44443
44441: GO 44461
44443: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: LD_INT 23
44451: PUSH
44452: LD_INT 24
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 44488
44461: LD_INT 47
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44487
44469: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 23
44477: PUSH
44478: LD_INT 24
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: ST_TO_ADDR
44485: GO 44488
44487: POP
// result := ( chassis in result ) ;
44488: LD_ADDR_VAR 0 3
44492: PUSH
44493: LD_VAR 0 1
44497: PUSH
44498: LD_VAR 0 3
44502: IN
44503: ST_TO_ADDR
// end ;
44504: LD_VAR 0 3
44508: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44509: LD_INT 0
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
// result := array ;
44518: LD_ADDR_VAR 0 5
44522: PUSH
44523: LD_VAR 0 1
44527: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44528: LD_VAR 0 1
44532: NOT
44533: PUSH
44534: LD_VAR 0 2
44538: NOT
44539: OR
44540: PUSH
44541: LD_VAR 0 3
44545: NOT
44546: OR
44547: PUSH
44548: LD_VAR 0 2
44552: PUSH
44553: LD_VAR 0 1
44557: GREATER
44558: OR
44559: PUSH
44560: LD_VAR 0 3
44564: PUSH
44565: LD_VAR 0 1
44569: GREATER
44570: OR
44571: IFFALSE 44575
// exit ;
44573: GO 44871
// if direction then
44575: LD_VAR 0 4
44579: IFFALSE 44643
// begin d := 1 ;
44581: LD_ADDR_VAR 0 9
44585: PUSH
44586: LD_INT 1
44588: ST_TO_ADDR
// if i_from > i_to then
44589: LD_VAR 0 2
44593: PUSH
44594: LD_VAR 0 3
44598: GREATER
44599: IFFALSE 44625
// length := ( array - i_from ) + i_to else
44601: LD_ADDR_VAR 0 11
44605: PUSH
44606: LD_VAR 0 1
44610: PUSH
44611: LD_VAR 0 2
44615: MINUS
44616: PUSH
44617: LD_VAR 0 3
44621: PLUS
44622: ST_TO_ADDR
44623: GO 44641
// length := i_to - i_from ;
44625: LD_ADDR_VAR 0 11
44629: PUSH
44630: LD_VAR 0 3
44634: PUSH
44635: LD_VAR 0 2
44639: MINUS
44640: ST_TO_ADDR
// end else
44641: GO 44704
// begin d := - 1 ;
44643: LD_ADDR_VAR 0 9
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: ST_TO_ADDR
// if i_from > i_to then
44652: LD_VAR 0 2
44656: PUSH
44657: LD_VAR 0 3
44661: GREATER
44662: IFFALSE 44682
// length := i_from - i_to else
44664: LD_ADDR_VAR 0 11
44668: PUSH
44669: LD_VAR 0 2
44673: PUSH
44674: LD_VAR 0 3
44678: MINUS
44679: ST_TO_ADDR
44680: GO 44704
// length := ( array - i_to ) + i_from ;
44682: LD_ADDR_VAR 0 11
44686: PUSH
44687: LD_VAR 0 1
44691: PUSH
44692: LD_VAR 0 3
44696: MINUS
44697: PUSH
44698: LD_VAR 0 2
44702: PLUS
44703: ST_TO_ADDR
// end ; if not length then
44704: LD_VAR 0 11
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 44871
// tmp := array ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_VAR 0 1
44722: ST_TO_ADDR
// for i = 1 to length do
44723: LD_ADDR_VAR 0 6
44727: PUSH
44728: DOUBLE
44729: LD_INT 1
44731: DEC
44732: ST_TO_ADDR
44733: LD_VAR 0 11
44737: PUSH
44738: FOR_TO
44739: IFFALSE 44859
// begin for j = 1 to array do
44741: LD_ADDR_VAR 0 7
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_VAR 0 1
44755: PUSH
44756: FOR_TO
44757: IFFALSE 44845
// begin k := j + d ;
44759: LD_ADDR_VAR 0 8
44763: PUSH
44764: LD_VAR 0 7
44768: PUSH
44769: LD_VAR 0 9
44773: PLUS
44774: ST_TO_ADDR
// if k > array then
44775: LD_VAR 0 8
44779: PUSH
44780: LD_VAR 0 1
44784: GREATER
44785: IFFALSE 44795
// k := 1 ;
44787: LD_ADDR_VAR 0 8
44791: PUSH
44792: LD_INT 1
44794: ST_TO_ADDR
// if not k then
44795: LD_VAR 0 8
44799: NOT
44800: IFFALSE 44812
// k := array ;
44802: LD_ADDR_VAR 0 8
44806: PUSH
44807: LD_VAR 0 1
44811: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44812: LD_ADDR_VAR 0 10
44816: PUSH
44817: LD_VAR 0 10
44821: PPUSH
44822: LD_VAR 0 8
44826: PPUSH
44827: LD_VAR 0 1
44831: PUSH
44832: LD_VAR 0 7
44836: ARRAY
44837: PPUSH
44838: CALL_OW 1
44842: ST_TO_ADDR
// end ;
44843: GO 44756
44845: POP
44846: POP
// array := tmp ;
44847: LD_ADDR_VAR 0 1
44851: PUSH
44852: LD_VAR 0 10
44856: ST_TO_ADDR
// end ;
44857: GO 44738
44859: POP
44860: POP
// result := array ;
44861: LD_ADDR_VAR 0 5
44865: PUSH
44866: LD_VAR 0 1
44870: ST_TO_ADDR
// end ;
44871: LD_VAR 0 5
44875: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
// result := 0 ;
44880: LD_ADDR_VAR 0 3
44884: PUSH
44885: LD_INT 0
44887: ST_TO_ADDR
// if not array or not value in array then
44888: LD_VAR 0 1
44892: NOT
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_VAR 0 1
44903: IN
44904: NOT
44905: OR
44906: IFFALSE 44910
// exit ;
44908: GO 44964
// for i = 1 to array do
44910: LD_ADDR_VAR 0 4
44914: PUSH
44915: DOUBLE
44916: LD_INT 1
44918: DEC
44919: ST_TO_ADDR
44920: LD_VAR 0 1
44924: PUSH
44925: FOR_TO
44926: IFFALSE 44962
// if value = array [ i ] then
44928: LD_VAR 0 2
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_VAR 0 4
44942: ARRAY
44943: EQUAL
44944: IFFALSE 44960
// begin result := i ;
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_VAR 0 4
44955: ST_TO_ADDR
// exit ;
44956: POP
44957: POP
44958: GO 44964
// end ;
44960: GO 44925
44962: POP
44963: POP
// end ;
44964: LD_VAR 0 3
44968: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44969: LD_INT 0
44971: PPUSH
// vc_chassis := chassis ;
44972: LD_ADDR_OWVAR 37
44976: PUSH
44977: LD_VAR 0 1
44981: ST_TO_ADDR
// vc_engine := engine ;
44982: LD_ADDR_OWVAR 39
44986: PUSH
44987: LD_VAR 0 2
44991: ST_TO_ADDR
// vc_control := control ;
44992: LD_ADDR_OWVAR 38
44996: PUSH
44997: LD_VAR 0 3
45001: ST_TO_ADDR
// vc_weapon := weapon ;
45002: LD_ADDR_OWVAR 40
45006: PUSH
45007: LD_VAR 0 4
45011: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45012: LD_ADDR_OWVAR 41
45016: PUSH
45017: LD_VAR 0 5
45021: ST_TO_ADDR
// end ;
45022: LD_VAR 0 6
45026: RET
// export function WantPlant ( unit ) ; var task ; begin
45027: LD_INT 0
45029: PPUSH
45030: PPUSH
// result := false ;
45031: LD_ADDR_VAR 0 2
45035: PUSH
45036: LD_INT 0
45038: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 437
45053: ST_TO_ADDR
// if task then
45054: LD_VAR 0 3
45058: IFFALSE 45086
// if task [ 1 ] [ 1 ] = p then
45060: LD_VAR 0 3
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: PUSH
45069: LD_INT 1
45071: ARRAY
45072: PUSH
45073: LD_STRING p
45075: EQUAL
45076: IFFALSE 45086
// result := true ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_INT 1
45085: ST_TO_ADDR
// end ;
45086: LD_VAR 0 2
45090: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45091: LD_INT 0
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
// if pos < 1 then
45097: LD_VAR 0 2
45101: PUSH
45102: LD_INT 1
45104: LESS
45105: IFFALSE 45109
// exit ;
45107: GO 45412
// if pos = 1 then
45109: LD_VAR 0 2
45113: PUSH
45114: LD_INT 1
45116: EQUAL
45117: IFFALSE 45150
// result := Replace ( arr , pos [ 1 ] , value ) else
45119: LD_ADDR_VAR 0 4
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: LD_VAR 0 2
45133: PUSH
45134: LD_INT 1
45136: ARRAY
45137: PPUSH
45138: LD_VAR 0 3
45142: PPUSH
45143: CALL_OW 1
45147: ST_TO_ADDR
45148: GO 45412
// begin tmp := arr ;
45150: LD_ADDR_VAR 0 6
45154: PUSH
45155: LD_VAR 0 1
45159: ST_TO_ADDR
// s_arr := [ tmp ] ;
45160: LD_ADDR_VAR 0 7
45164: PUSH
45165: LD_VAR 0 6
45169: PUSH
45170: EMPTY
45171: LIST
45172: ST_TO_ADDR
// for i = 1 to pos - 1 do
45173: LD_ADDR_VAR 0 5
45177: PUSH
45178: DOUBLE
45179: LD_INT 1
45181: DEC
45182: ST_TO_ADDR
45183: LD_VAR 0 2
45187: PUSH
45188: LD_INT 1
45190: MINUS
45191: PUSH
45192: FOR_TO
45193: IFFALSE 45238
// begin tmp := tmp [ pos [ i ] ] ;
45195: LD_ADDR_VAR 0 6
45199: PUSH
45200: LD_VAR 0 6
45204: PUSH
45205: LD_VAR 0 2
45209: PUSH
45210: LD_VAR 0 5
45214: ARRAY
45215: ARRAY
45216: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45217: LD_ADDR_VAR 0 7
45221: PUSH
45222: LD_VAR 0 7
45226: PUSH
45227: LD_VAR 0 6
45231: PUSH
45232: EMPTY
45233: LIST
45234: ADD
45235: ST_TO_ADDR
// end ;
45236: GO 45192
45238: POP
45239: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45240: LD_ADDR_VAR 0 6
45244: PUSH
45245: LD_VAR 0 6
45249: PPUSH
45250: LD_VAR 0 2
45254: PUSH
45255: LD_VAR 0 2
45259: ARRAY
45260: PPUSH
45261: LD_VAR 0 3
45265: PPUSH
45266: CALL_OW 1
45270: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45271: LD_ADDR_VAR 0 7
45275: PUSH
45276: LD_VAR 0 7
45280: PPUSH
45281: LD_VAR 0 7
45285: PPUSH
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 1
45295: ST_TO_ADDR
// for i = s_arr downto 2 do
45296: LD_ADDR_VAR 0 5
45300: PUSH
45301: DOUBLE
45302: LD_VAR 0 7
45306: INC
45307: ST_TO_ADDR
45308: LD_INT 2
45310: PUSH
45311: FOR_DOWNTO
45312: IFFALSE 45396
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45314: LD_ADDR_VAR 0 6
45318: PUSH
45319: LD_VAR 0 7
45323: PUSH
45324: LD_VAR 0 5
45328: PUSH
45329: LD_INT 1
45331: MINUS
45332: ARRAY
45333: PPUSH
45334: LD_VAR 0 2
45338: PUSH
45339: LD_VAR 0 5
45343: PUSH
45344: LD_INT 1
45346: MINUS
45347: ARRAY
45348: PPUSH
45349: LD_VAR 0 7
45353: PUSH
45354: LD_VAR 0 5
45358: ARRAY
45359: PPUSH
45360: CALL_OW 1
45364: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45365: LD_ADDR_VAR 0 7
45369: PUSH
45370: LD_VAR 0 7
45374: PPUSH
45375: LD_VAR 0 5
45379: PUSH
45380: LD_INT 1
45382: MINUS
45383: PPUSH
45384: LD_VAR 0 6
45388: PPUSH
45389: CALL_OW 1
45393: ST_TO_ADDR
// end ;
45394: GO 45311
45396: POP
45397: POP
// result := s_arr [ 1 ] ;
45398: LD_ADDR_VAR 0 4
45402: PUSH
45403: LD_VAR 0 7
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: ST_TO_ADDR
// end ; end ;
45412: LD_VAR 0 4
45416: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45417: LD_INT 0
45419: PPUSH
45420: PPUSH
// if not list then
45421: LD_VAR 0 1
45425: NOT
45426: IFFALSE 45430
// exit ;
45428: GO 45521
// i := list [ pos1 ] ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 1
45439: PUSH
45440: LD_VAR 0 2
45444: ARRAY
45445: ST_TO_ADDR
// if not i then
45446: LD_VAR 0 5
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 45521
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45455: LD_ADDR_VAR 0 1
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 2
45469: PPUSH
45470: LD_VAR 0 1
45474: PUSH
45475: LD_VAR 0 3
45479: ARRAY
45480: PPUSH
45481: CALL_OW 1
45485: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45486: LD_ADDR_VAR 0 1
45490: PUSH
45491: LD_VAR 0 1
45495: PPUSH
45496: LD_VAR 0 3
45500: PPUSH
45501: LD_VAR 0 5
45505: PPUSH
45506: CALL_OW 1
45510: ST_TO_ADDR
// result := list ;
45511: LD_ADDR_VAR 0 4
45515: PUSH
45516: LD_VAR 0 1
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 4
45525: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45526: LD_INT 0
45528: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45529: LD_ADDR_VAR 0 5
45533: PUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 250
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 251
45553: PPUSH
45554: LD_VAR 0 2
45558: PPUSH
45559: LD_VAR 0 3
45563: PPUSH
45564: LD_VAR 0 4
45568: PPUSH
45569: CALL 45579 0 5
45573: ST_TO_ADDR
// end ;
45574: LD_VAR 0 5
45578: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45579: LD_INT 0
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
// if not list then
45585: LD_VAR 0 3
45589: NOT
45590: IFFALSE 45594
// exit ;
45592: GO 45982
// result := [ ] ;
45594: LD_ADDR_VAR 0 6
45598: PUSH
45599: EMPTY
45600: ST_TO_ADDR
// for i in list do
45601: LD_ADDR_VAR 0 7
45605: PUSH
45606: LD_VAR 0 3
45610: PUSH
45611: FOR_IN
45612: IFFALSE 45814
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45614: LD_ADDR_VAR 0 9
45618: PUSH
45619: LD_VAR 0 7
45623: PPUSH
45624: LD_VAR 0 1
45628: PPUSH
45629: LD_VAR 0 2
45633: PPUSH
45634: CALL_OW 297
45638: ST_TO_ADDR
// if not result then
45639: LD_VAR 0 6
45643: NOT
45644: IFFALSE 45670
// result := [ [ i , tmp ] ] else
45646: LD_ADDR_VAR 0 6
45650: PUSH
45651: LD_VAR 0 7
45655: PUSH
45656: LD_VAR 0 9
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: ST_TO_ADDR
45668: GO 45812
// begin if result [ result ] [ 2 ] < tmp then
45670: LD_VAR 0 6
45674: PUSH
45675: LD_VAR 0 6
45679: ARRAY
45680: PUSH
45681: LD_INT 2
45683: ARRAY
45684: PUSH
45685: LD_VAR 0 9
45689: LESS
45690: IFFALSE 45732
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_VAR 0 6
45701: PPUSH
45702: LD_VAR 0 6
45706: PUSH
45707: LD_INT 1
45709: PLUS
45710: PPUSH
45711: LD_VAR 0 7
45715: PUSH
45716: LD_VAR 0 9
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 2
45729: ST_TO_ADDR
45730: GO 45812
// for j = 1 to result do
45732: LD_ADDR_VAR 0 8
45736: PUSH
45737: DOUBLE
45738: LD_INT 1
45740: DEC
45741: ST_TO_ADDR
45742: LD_VAR 0 6
45746: PUSH
45747: FOR_TO
45748: IFFALSE 45810
// begin if tmp < result [ j ] [ 2 ] then
45750: LD_VAR 0 9
45754: PUSH
45755: LD_VAR 0 6
45759: PUSH
45760: LD_VAR 0 8
45764: ARRAY
45765: PUSH
45766: LD_INT 2
45768: ARRAY
45769: LESS
45770: IFFALSE 45808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_VAR 0 6
45781: PPUSH
45782: LD_VAR 0 8
45786: PPUSH
45787: LD_VAR 0 7
45791: PUSH
45792: LD_VAR 0 9
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PPUSH
45801: CALL_OW 2
45805: ST_TO_ADDR
// break ;
45806: GO 45810
// end ; end ;
45808: GO 45747
45810: POP
45811: POP
// end ; end ;
45812: GO 45611
45814: POP
45815: POP
// if result and not asc then
45816: LD_VAR 0 6
45820: PUSH
45821: LD_VAR 0 4
45825: NOT
45826: AND
45827: IFFALSE 45902
// begin tmp := result ;
45829: LD_ADDR_VAR 0 9
45833: PUSH
45834: LD_VAR 0 6
45838: ST_TO_ADDR
// for i = tmp downto 1 do
45839: LD_ADDR_VAR 0 7
45843: PUSH
45844: DOUBLE
45845: LD_VAR 0 9
45849: INC
45850: ST_TO_ADDR
45851: LD_INT 1
45853: PUSH
45854: FOR_DOWNTO
45855: IFFALSE 45900
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45857: LD_ADDR_VAR 0 6
45861: PUSH
45862: LD_VAR 0 6
45866: PPUSH
45867: LD_VAR 0 9
45871: PUSH
45872: LD_VAR 0 7
45876: MINUS
45877: PUSH
45878: LD_INT 1
45880: PLUS
45881: PPUSH
45882: LD_VAR 0 9
45886: PUSH
45887: LD_VAR 0 7
45891: ARRAY
45892: PPUSH
45893: CALL_OW 1
45897: ST_TO_ADDR
45898: GO 45854
45900: POP
45901: POP
// end ; tmp := [ ] ;
45902: LD_ADDR_VAR 0 9
45906: PUSH
45907: EMPTY
45908: ST_TO_ADDR
// if mode then
45909: LD_VAR 0 5
45913: IFFALSE 45982
// begin for i = 1 to result do
45915: LD_ADDR_VAR 0 7
45919: PUSH
45920: DOUBLE
45921: LD_INT 1
45923: DEC
45924: ST_TO_ADDR
45925: LD_VAR 0 6
45929: PUSH
45930: FOR_TO
45931: IFFALSE 45970
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45933: LD_ADDR_VAR 0 9
45937: PUSH
45938: LD_VAR 0 9
45942: PPUSH
45943: LD_VAR 0 7
45947: PPUSH
45948: LD_VAR 0 6
45952: PUSH
45953: LD_VAR 0 7
45957: ARRAY
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PPUSH
45963: CALL_OW 1
45967: ST_TO_ADDR
45968: GO 45930
45970: POP
45971: POP
// result := tmp ;
45972: LD_ADDR_VAR 0 6
45976: PUSH
45977: LD_VAR 0 9
45981: ST_TO_ADDR
// end ; end ;
45982: LD_VAR 0 6
45986: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45987: LD_INT 0
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45995: LD_ADDR_VAR 0 5
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// if not x or not y then
46017: LD_VAR 0 2
46021: NOT
46022: PUSH
46023: LD_VAR 0 3
46027: NOT
46028: OR
46029: IFFALSE 46033
// exit ;
46031: GO 47683
// if not range then
46033: LD_VAR 0 4
46037: NOT
46038: IFFALSE 46048
// range := 10 ;
46040: LD_ADDR_VAR 0 4
46044: PUSH
46045: LD_INT 10
46047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46048: LD_ADDR_VAR 0 8
46052: PUSH
46053: LD_INT 81
46055: PUSH
46056: LD_VAR 0 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 92
46067: PUSH
46068: LD_VAR 0 2
46072: PUSH
46073: LD_VAR 0 3
46077: PUSH
46078: LD_VAR 0 4
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 21
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: PPUSH
46111: CALL_OW 69
46115: ST_TO_ADDR
// if not tmp then
46116: LD_VAR 0 8
46120: NOT
46121: IFFALSE 46125
// exit ;
46123: GO 47683
// for i in tmp do
46125: LD_ADDR_VAR 0 6
46129: PUSH
46130: LD_VAR 0 8
46134: PUSH
46135: FOR_IN
46136: IFFALSE 47658
// begin points := [ 0 , 0 , 0 ] ;
46138: LD_ADDR_VAR 0 9
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// bpoints := 1 ;
46157: LD_ADDR_VAR 0 10
46161: PUSH
46162: LD_INT 1
46164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46165: LD_VAR 0 6
46169: PPUSH
46170: CALL_OW 247
46174: PUSH
46175: LD_INT 1
46177: DOUBLE
46178: EQUAL
46179: IFTRUE 46183
46181: GO 46761
46183: POP
// begin if GetClass ( i ) = 1 then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 257
46193: PUSH
46194: LD_INT 1
46196: EQUAL
46197: IFFALSE 46218
// points := [ 10 , 5 , 3 ] ;
46199: LD_ADDR_VAR 0 9
46203: PUSH
46204: LD_INT 10
46206: PUSH
46207: LD_INT 5
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46218: LD_VAR 0 6
46222: PPUSH
46223: CALL_OW 257
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: LD_INT 4
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: IN
46242: IFFALSE 46263
// points := [ 3 , 2 , 1 ] ;
46244: LD_ADDR_VAR 0 9
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46263: LD_VAR 0 6
46267: PPUSH
46268: CALL_OW 257
46272: PUSH
46273: LD_INT 5
46275: EQUAL
46276: IFFALSE 46297
// points := [ 130 , 5 , 2 ] ;
46278: LD_ADDR_VAR 0 9
46282: PUSH
46283: LD_INT 130
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46297: LD_VAR 0 6
46301: PPUSH
46302: CALL_OW 257
46306: PUSH
46307: LD_INT 8
46309: EQUAL
46310: IFFALSE 46331
// points := [ 35 , 35 , 30 ] ;
46312: LD_ADDR_VAR 0 9
46316: PUSH
46317: LD_INT 35
46319: PUSH
46320: LD_INT 35
46322: PUSH
46323: LD_INT 30
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46331: LD_VAR 0 6
46335: PPUSH
46336: CALL_OW 257
46340: PUSH
46341: LD_INT 9
46343: EQUAL
46344: IFFALSE 46365
// points := [ 20 , 55 , 40 ] ;
46346: LD_ADDR_VAR 0 9
46350: PUSH
46351: LD_INT 20
46353: PUSH
46354: LD_INT 55
46356: PUSH
46357: LD_INT 40
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46365: LD_VAR 0 6
46369: PPUSH
46370: CALL_OW 257
46374: PUSH
46375: LD_INT 12
46377: PUSH
46378: LD_INT 16
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: IN
46385: IFFALSE 46406
// points := [ 5 , 3 , 2 ] ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46406: LD_VAR 0 6
46410: PPUSH
46411: CALL_OW 257
46415: PUSH
46416: LD_INT 17
46418: EQUAL
46419: IFFALSE 46440
// points := [ 100 , 50 , 75 ] ;
46421: LD_ADDR_VAR 0 9
46425: PUSH
46426: LD_INT 100
46428: PUSH
46429: LD_INT 50
46431: PUSH
46432: LD_INT 75
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 257
46449: PUSH
46450: LD_INT 15
46452: EQUAL
46453: IFFALSE 46474
// points := [ 10 , 5 , 3 ] ;
46455: LD_ADDR_VAR 0 9
46459: PUSH
46460: LD_INT 10
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46474: LD_VAR 0 6
46478: PPUSH
46479: CALL_OW 257
46483: PUSH
46484: LD_INT 14
46486: EQUAL
46487: IFFALSE 46508
// points := [ 10 , 0 , 0 ] ;
46489: LD_ADDR_VAR 0 9
46493: PUSH
46494: LD_INT 10
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46508: LD_VAR 0 6
46512: PPUSH
46513: CALL_OW 257
46517: PUSH
46518: LD_INT 11
46520: EQUAL
46521: IFFALSE 46542
// points := [ 30 , 10 , 5 ] ;
46523: LD_ADDR_VAR 0 9
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 10
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46542: LD_VAR 0 1
46546: PPUSH
46547: LD_INT 5
46549: PPUSH
46550: CALL_OW 321
46554: PUSH
46555: LD_INT 2
46557: EQUAL
46558: IFFALSE 46575
// bpoints := bpoints * 1.8 ;
46560: LD_ADDR_VAR 0 10
46564: PUSH
46565: LD_VAR 0 10
46569: PUSH
46570: LD_REAL  1.80000000000000E+0000
46573: MUL
46574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46575: LD_VAR 0 6
46579: PPUSH
46580: CALL_OW 257
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: IN
46603: PUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: LD_INT 51
46611: PPUSH
46612: CALL_OW 321
46616: PUSH
46617: LD_INT 2
46619: EQUAL
46620: AND
46621: IFFALSE 46638
// bpoints := bpoints * 1.2 ;
46623: LD_ADDR_VAR 0 10
46627: PUSH
46628: LD_VAR 0 10
46632: PUSH
46633: LD_REAL  1.20000000000000E+0000
46636: MUL
46637: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46638: LD_VAR 0 6
46642: PPUSH
46643: CALL_OW 257
46647: PUSH
46648: LD_INT 5
46650: PUSH
46651: LD_INT 7
46653: PUSH
46654: LD_INT 9
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: IN
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_INT 52
46670: PPUSH
46671: CALL_OW 321
46675: PUSH
46676: LD_INT 2
46678: EQUAL
46679: AND
46680: IFFALSE 46697
// bpoints := bpoints * 1.5 ;
46682: LD_ADDR_VAR 0 10
46686: PUSH
46687: LD_VAR 0 10
46691: PUSH
46692: LD_REAL  1.50000000000000E+0000
46695: MUL
46696: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46697: LD_VAR 0 1
46701: PPUSH
46702: LD_INT 66
46704: PPUSH
46705: CALL_OW 321
46709: PUSH
46710: LD_INT 2
46712: EQUAL
46713: IFFALSE 46730
// bpoints := bpoints * 1.1 ;
46715: LD_ADDR_VAR 0 10
46719: PUSH
46720: LD_VAR 0 10
46724: PUSH
46725: LD_REAL  1.10000000000000E+0000
46728: MUL
46729: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46730: LD_ADDR_VAR 0 10
46734: PUSH
46735: LD_VAR 0 10
46739: PUSH
46740: LD_VAR 0 6
46744: PPUSH
46745: LD_INT 1
46747: PPUSH
46748: CALL_OW 259
46752: PUSH
46753: LD_REAL  1.15000000000000E+0000
46756: MUL
46757: MUL
46758: ST_TO_ADDR
// end ; unit_vehicle :
46759: GO 47587
46761: LD_INT 2
46763: DOUBLE
46764: EQUAL
46765: IFTRUE 46769
46767: GO 47575
46769: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46770: LD_VAR 0 6
46774: PPUSH
46775: CALL_OW 264
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 42
46785: PUSH
46786: LD_INT 24
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: IN
46794: IFFALSE 46815
// points := [ 25 , 5 , 3 ] ;
46796: LD_ADDR_VAR 0 9
46800: PUSH
46801: LD_INT 25
46803: PUSH
46804: LD_INT 5
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46815: LD_VAR 0 6
46819: PPUSH
46820: CALL_OW 264
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: LD_INT 43
46830: PUSH
46831: LD_INT 25
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: IN
46839: IFFALSE 46860
// points := [ 40 , 15 , 5 ] ;
46841: LD_ADDR_VAR 0 9
46845: PUSH
46846: LD_INT 40
46848: PUSH
46849: LD_INT 15
46851: PUSH
46852: LD_INT 5
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46860: LD_VAR 0 6
46864: PPUSH
46865: CALL_OW 264
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 23
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: IN
46880: IFFALSE 46901
// points := [ 7 , 25 , 8 ] ;
46882: LD_ADDR_VAR 0 9
46886: PUSH
46887: LD_INT 7
46889: PUSH
46890: LD_INT 25
46892: PUSH
46893: LD_INT 8
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46901: LD_VAR 0 6
46905: PPUSH
46906: CALL_OW 264
46910: PUSH
46911: LD_INT 5
46913: PUSH
46914: LD_INT 27
46916: PUSH
46917: LD_INT 44
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: IN
46925: IFFALSE 46946
// points := [ 14 , 50 , 16 ] ;
46927: LD_ADDR_VAR 0 9
46931: PUSH
46932: LD_INT 14
46934: PUSH
46935: LD_INT 50
46937: PUSH
46938: LD_INT 16
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46946: LD_VAR 0 6
46950: PPUSH
46951: CALL_OW 264
46955: PUSH
46956: LD_INT 6
46958: PUSH
46959: LD_INT 46
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: IN
46966: IFFALSE 46987
// points := [ 32 , 120 , 70 ] ;
46968: LD_ADDR_VAR 0 9
46972: PUSH
46973: LD_INT 32
46975: PUSH
46976: LD_INT 120
46978: PUSH
46979: LD_INT 70
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46987: LD_VAR 0 6
46991: PPUSH
46992: CALL_OW 264
46996: PUSH
46997: LD_INT 7
46999: PUSH
47000: LD_INT 28
47002: PUSH
47003: LD_INT 45
47005: PUSH
47006: LD_INT 92
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: IN
47015: IFFALSE 47036
// points := [ 35 , 20 , 45 ] ;
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_INT 35
47024: PUSH
47025: LD_INT 20
47027: PUSH
47028: LD_INT 45
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 264
47045: PUSH
47046: LD_INT 47
47048: PUSH
47049: EMPTY
47050: LIST
47051: IN
47052: IFFALSE 47073
// points := [ 67 , 45 , 75 ] ;
47054: LD_ADDR_VAR 0 9
47058: PUSH
47059: LD_INT 67
47061: PUSH
47062: LD_INT 45
47064: PUSH
47065: LD_INT 75
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47073: LD_VAR 0 6
47077: PPUSH
47078: CALL_OW 264
47082: PUSH
47083: LD_INT 26
47085: PUSH
47086: EMPTY
47087: LIST
47088: IN
47089: IFFALSE 47110
// points := [ 120 , 30 , 80 ] ;
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: LD_INT 120
47098: PUSH
47099: LD_INT 30
47101: PUSH
47102: LD_INT 80
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47110: LD_VAR 0 6
47114: PPUSH
47115: CALL_OW 264
47119: PUSH
47120: LD_INT 22
47122: PUSH
47123: EMPTY
47124: LIST
47125: IN
47126: IFFALSE 47147
// points := [ 40 , 1 , 1 ] ;
47128: LD_ADDR_VAR 0 9
47132: PUSH
47133: LD_INT 40
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47147: LD_VAR 0 6
47151: PPUSH
47152: CALL_OW 264
47156: PUSH
47157: LD_INT 29
47159: PUSH
47160: EMPTY
47161: LIST
47162: IN
47163: IFFALSE 47184
// points := [ 70 , 200 , 400 ] ;
47165: LD_ADDR_VAR 0 9
47169: PUSH
47170: LD_INT 70
47172: PUSH
47173: LD_INT 200
47175: PUSH
47176: LD_INT 400
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47184: LD_VAR 0 6
47188: PPUSH
47189: CALL_OW 264
47193: PUSH
47194: LD_INT 14
47196: PUSH
47197: LD_INT 53
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: IN
47204: IFFALSE 47225
// points := [ 40 , 10 , 20 ] ;
47206: LD_ADDR_VAR 0 9
47210: PUSH
47211: LD_INT 40
47213: PUSH
47214: LD_INT 10
47216: PUSH
47217: LD_INT 20
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 264
47234: PUSH
47235: LD_INT 9
47237: PUSH
47238: EMPTY
47239: LIST
47240: IN
47241: IFFALSE 47262
// points := [ 5 , 70 , 20 ] ;
47243: LD_ADDR_VAR 0 9
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: LD_INT 70
47253: PUSH
47254: LD_INT 20
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47262: LD_VAR 0 6
47266: PPUSH
47267: CALL_OW 264
47271: PUSH
47272: LD_INT 10
47274: PUSH
47275: EMPTY
47276: LIST
47277: IN
47278: IFFALSE 47299
// points := [ 35 , 110 , 70 ] ;
47280: LD_ADDR_VAR 0 9
47284: PUSH
47285: LD_INT 35
47287: PUSH
47288: LD_INT 110
47290: PUSH
47291: LD_INT 70
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47299: LD_VAR 0 6
47303: PPUSH
47304: CALL_OW 265
47308: PUSH
47309: LD_INT 25
47311: EQUAL
47312: IFFALSE 47333
// points := [ 80 , 65 , 100 ] ;
47314: LD_ADDR_VAR 0 9
47318: PUSH
47319: LD_INT 80
47321: PUSH
47322: LD_INT 65
47324: PUSH
47325: LD_INT 100
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47333: LD_VAR 0 6
47337: PPUSH
47338: CALL_OW 263
47342: PUSH
47343: LD_INT 1
47345: EQUAL
47346: IFFALSE 47381
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47348: LD_ADDR_VAR 0 10
47352: PUSH
47353: LD_VAR 0 10
47357: PUSH
47358: LD_VAR 0 6
47362: PPUSH
47363: CALL_OW 311
47367: PPUSH
47368: LD_INT 3
47370: PPUSH
47371: CALL_OW 259
47375: PUSH
47376: LD_INT 4
47378: MUL
47379: MUL
47380: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47381: LD_VAR 0 6
47385: PPUSH
47386: CALL_OW 263
47390: PUSH
47391: LD_INT 2
47393: EQUAL
47394: IFFALSE 47445
// begin j := IsControledBy ( i ) ;
47396: LD_ADDR_VAR 0 7
47400: PUSH
47401: LD_VAR 0 6
47405: PPUSH
47406: CALL_OW 312
47410: ST_TO_ADDR
// if j then
47411: LD_VAR 0 7
47415: IFFALSE 47445
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47417: LD_ADDR_VAR 0 10
47421: PUSH
47422: LD_VAR 0 10
47426: PUSH
47427: LD_VAR 0 7
47431: PPUSH
47432: LD_INT 3
47434: PPUSH
47435: CALL_OW 259
47439: PUSH
47440: LD_INT 3
47442: MUL
47443: MUL
47444: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47445: LD_VAR 0 6
47449: PPUSH
47450: CALL_OW 264
47454: PUSH
47455: LD_INT 5
47457: PUSH
47458: LD_INT 6
47460: PUSH
47461: LD_INT 46
47463: PUSH
47464: LD_INT 44
47466: PUSH
47467: LD_INT 47
47469: PUSH
47470: LD_INT 45
47472: PUSH
47473: LD_INT 28
47475: PUSH
47476: LD_INT 7
47478: PUSH
47479: LD_INT 27
47481: PUSH
47482: LD_INT 29
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: PUSH
47498: LD_VAR 0 1
47502: PPUSH
47503: LD_INT 52
47505: PPUSH
47506: CALL_OW 321
47510: PUSH
47511: LD_INT 2
47513: EQUAL
47514: AND
47515: IFFALSE 47532
// bpoints := bpoints * 1.2 ;
47517: LD_ADDR_VAR 0 10
47521: PUSH
47522: LD_VAR 0 10
47526: PUSH
47527: LD_REAL  1.20000000000000E+0000
47530: MUL
47531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47532: LD_VAR 0 6
47536: PPUSH
47537: CALL_OW 264
47541: PUSH
47542: LD_INT 6
47544: PUSH
47545: LD_INT 46
47547: PUSH
47548: LD_INT 47
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: IN
47556: IFFALSE 47573
// bpoints := bpoints * 1.2 ;
47558: LD_ADDR_VAR 0 10
47562: PUSH
47563: LD_VAR 0 10
47567: PUSH
47568: LD_REAL  1.20000000000000E+0000
47571: MUL
47572: ST_TO_ADDR
// end ; unit_building :
47573: GO 47587
47575: LD_INT 3
47577: DOUBLE
47578: EQUAL
47579: IFTRUE 47583
47581: GO 47586
47583: POP
// ; end ;
47584: GO 47587
47586: POP
// for j = 1 to 3 do
47587: LD_ADDR_VAR 0 7
47591: PUSH
47592: DOUBLE
47593: LD_INT 1
47595: DEC
47596: ST_TO_ADDR
47597: LD_INT 3
47599: PUSH
47600: FOR_TO
47601: IFFALSE 47654
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_VAR 0 5
47612: PPUSH
47613: LD_VAR 0 7
47617: PPUSH
47618: LD_VAR 0 5
47622: PUSH
47623: LD_VAR 0 7
47627: ARRAY
47628: PUSH
47629: LD_VAR 0 9
47633: PUSH
47634: LD_VAR 0 7
47638: ARRAY
47639: PUSH
47640: LD_VAR 0 10
47644: MUL
47645: PLUS
47646: PPUSH
47647: CALL_OW 1
47651: ST_TO_ADDR
47652: GO 47600
47654: POP
47655: POP
// end ;
47656: GO 46135
47658: POP
47659: POP
// result := Replace ( result , 4 , tmp ) ;
47660: LD_ADDR_VAR 0 5
47664: PUSH
47665: LD_VAR 0 5
47669: PPUSH
47670: LD_INT 4
47672: PPUSH
47673: LD_VAR 0 8
47677: PPUSH
47678: CALL_OW 1
47682: ST_TO_ADDR
// end ;
47683: LD_VAR 0 5
47687: RET
// export function DangerAtRange ( unit , range ) ; begin
47688: LD_INT 0
47690: PPUSH
// if not unit then
47691: LD_VAR 0 1
47695: NOT
47696: IFFALSE 47700
// exit ;
47698: GO 47745
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47700: LD_ADDR_VAR 0 3
47704: PUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 255
47714: PPUSH
47715: LD_VAR 0 1
47719: PPUSH
47720: CALL_OW 250
47724: PPUSH
47725: LD_VAR 0 1
47729: PPUSH
47730: CALL_OW 251
47734: PPUSH
47735: LD_VAR 0 2
47739: PPUSH
47740: CALL 45987 0 4
47744: ST_TO_ADDR
// end ;
47745: LD_VAR 0 3
47749: RET
// export function DangerInArea ( side , area ) ; begin
47750: LD_INT 0
47752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47753: LD_ADDR_VAR 0 3
47757: PUSH
47758: LD_VAR 0 2
47762: PPUSH
47763: LD_INT 81
47765: PUSH
47766: LD_VAR 0 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PPUSH
47775: CALL_OW 70
47779: ST_TO_ADDR
// end ;
47780: LD_VAR 0 3
47784: RET
// export function IsExtension ( b ) ; begin
47785: LD_INT 0
47787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47788: LD_ADDR_VAR 0 2
47792: PUSH
47793: LD_VAR 0 1
47797: PUSH
47798: LD_INT 23
47800: PUSH
47801: LD_INT 20
47803: PUSH
47804: LD_INT 22
47806: PUSH
47807: LD_INT 17
47809: PUSH
47810: LD_INT 24
47812: PUSH
47813: LD_INT 21
47815: PUSH
47816: LD_INT 19
47818: PUSH
47819: LD_INT 16
47821: PUSH
47822: LD_INT 25
47824: PUSH
47825: LD_INT 18
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: IN
47840: ST_TO_ADDR
// end ;
47841: LD_VAR 0 2
47845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47846: LD_INT 0
47848: PPUSH
47849: PPUSH
47850: PPUSH
// result := [ ] ;
47851: LD_ADDR_VAR 0 4
47855: PUSH
47856: EMPTY
47857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47858: LD_ADDR_VAR 0 5
47862: PUSH
47863: LD_VAR 0 2
47867: PPUSH
47868: LD_INT 21
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PPUSH
47878: CALL_OW 70
47882: ST_TO_ADDR
// if not tmp then
47883: LD_VAR 0 5
47887: NOT
47888: IFFALSE 47892
// exit ;
47890: GO 47956
// if checkLink then
47892: LD_VAR 0 3
47896: IFFALSE 47946
// begin for i in tmp do
47898: LD_ADDR_VAR 0 6
47902: PUSH
47903: LD_VAR 0 5
47907: PUSH
47908: FOR_IN
47909: IFFALSE 47944
// if GetBase ( i ) <> base then
47911: LD_VAR 0 6
47915: PPUSH
47916: CALL_OW 274
47920: PUSH
47921: LD_VAR 0 1
47925: NONEQUAL
47926: IFFALSE 47942
// ComLinkToBase ( base , i ) ;
47928: LD_VAR 0 1
47932: PPUSH
47933: LD_VAR 0 6
47937: PPUSH
47938: CALL_OW 169
47942: GO 47908
47944: POP
47945: POP
// end ; result := tmp ;
47946: LD_ADDR_VAR 0 4
47950: PUSH
47951: LD_VAR 0 5
47955: ST_TO_ADDR
// end ;
47956: LD_VAR 0 4
47960: RET
// export function ComComplete ( units , b ) ; var i ; begin
47961: LD_INT 0
47963: PPUSH
47964: PPUSH
// if not units then
47965: LD_VAR 0 1
47969: NOT
47970: IFFALSE 47974
// exit ;
47972: GO 48064
// for i in units do
47974: LD_ADDR_VAR 0 4
47978: PUSH
47979: LD_VAR 0 1
47983: PUSH
47984: FOR_IN
47985: IFFALSE 48062
// if BuildingStatus ( b ) = bs_build then
47987: LD_VAR 0 2
47991: PPUSH
47992: CALL_OW 461
47996: PUSH
47997: LD_INT 1
47999: EQUAL
48000: IFFALSE 48060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48002: LD_VAR 0 4
48006: PPUSH
48007: LD_STRING h
48009: PUSH
48010: LD_VAR 0 2
48014: PPUSH
48015: CALL_OW 250
48019: PUSH
48020: LD_VAR 0 2
48024: PPUSH
48025: CALL_OW 251
48029: PUSH
48030: LD_VAR 0 2
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: PPUSH
48056: CALL_OW 446
48060: GO 47984
48062: POP
48063: POP
// end ;
48064: LD_VAR 0 3
48068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48069: LD_INT 0
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48077: LD_VAR 0 1
48081: NOT
48082: PUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL_OW 263
48092: PUSH
48093: LD_INT 2
48095: NONEQUAL
48096: OR
48097: IFFALSE 48101
// exit ;
48099: GO 48417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48101: LD_ADDR_VAR 0 6
48105: PUSH
48106: LD_INT 22
48108: PUSH
48109: LD_VAR 0 1
48113: PPUSH
48114: CALL_OW 255
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 30
48128: PUSH
48129: LD_INT 36
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 34
48138: PUSH
48139: LD_INT 31
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PPUSH
48155: CALL_OW 69
48159: ST_TO_ADDR
// if not tmp then
48160: LD_VAR 0 6
48164: NOT
48165: IFFALSE 48169
// exit ;
48167: GO 48417
// result := [ ] ;
48169: LD_ADDR_VAR 0 2
48173: PUSH
48174: EMPTY
48175: ST_TO_ADDR
// for i in tmp do
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_VAR 0 6
48185: PUSH
48186: FOR_IN
48187: IFFALSE 48258
// begin t := UnitsInside ( i ) ;
48189: LD_ADDR_VAR 0 4
48193: PUSH
48194: LD_VAR 0 3
48198: PPUSH
48199: CALL_OW 313
48203: ST_TO_ADDR
// if t then
48204: LD_VAR 0 4
48208: IFFALSE 48256
// for j in t do
48210: LD_ADDR_VAR 0 7
48214: PUSH
48215: LD_VAR 0 4
48219: PUSH
48220: FOR_IN
48221: IFFALSE 48254
// result := Replace ( result , result + 1 , j ) ;
48223: LD_ADDR_VAR 0 2
48227: PUSH
48228: LD_VAR 0 2
48232: PPUSH
48233: LD_VAR 0 2
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: PPUSH
48242: LD_VAR 0 7
48246: PPUSH
48247: CALL_OW 1
48251: ST_TO_ADDR
48252: GO 48220
48254: POP
48255: POP
// end ;
48256: GO 48186
48258: POP
48259: POP
// if not result then
48260: LD_VAR 0 2
48264: NOT
48265: IFFALSE 48269
// exit ;
48267: GO 48417
// mech := result [ 1 ] ;
48269: LD_ADDR_VAR 0 5
48273: PUSH
48274: LD_VAR 0 2
48278: PUSH
48279: LD_INT 1
48281: ARRAY
48282: ST_TO_ADDR
// if result > 1 then
48283: LD_VAR 0 2
48287: PUSH
48288: LD_INT 1
48290: GREATER
48291: IFFALSE 48403
// begin for i = 2 to result do
48293: LD_ADDR_VAR 0 3
48297: PUSH
48298: DOUBLE
48299: LD_INT 2
48301: DEC
48302: ST_TO_ADDR
48303: LD_VAR 0 2
48307: PUSH
48308: FOR_TO
48309: IFFALSE 48401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48311: LD_ADDR_VAR 0 4
48315: PUSH
48316: LD_VAR 0 2
48320: PUSH
48321: LD_VAR 0 3
48325: ARRAY
48326: PPUSH
48327: LD_INT 3
48329: PPUSH
48330: CALL_OW 259
48334: PUSH
48335: LD_VAR 0 2
48339: PUSH
48340: LD_VAR 0 3
48344: ARRAY
48345: PPUSH
48346: CALL_OW 432
48350: MINUS
48351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48352: LD_VAR 0 4
48356: PUSH
48357: LD_VAR 0 5
48361: PPUSH
48362: LD_INT 3
48364: PPUSH
48365: CALL_OW 259
48369: PUSH
48370: LD_VAR 0 5
48374: PPUSH
48375: CALL_OW 432
48379: MINUS
48380: GREATEREQUAL
48381: IFFALSE 48399
// mech := result [ i ] ;
48383: LD_ADDR_VAR 0 5
48387: PUSH
48388: LD_VAR 0 2
48392: PUSH
48393: LD_VAR 0 3
48397: ARRAY
48398: ST_TO_ADDR
// end ;
48399: GO 48308
48401: POP
48402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48403: LD_VAR 0 1
48407: PPUSH
48408: LD_VAR 0 5
48412: PPUSH
48413: CALL_OW 135
// end ;
48417: LD_VAR 0 2
48421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48422: LD_INT 0
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
// result := [ ] ;
48437: LD_ADDR_VAR 0 7
48441: PUSH
48442: EMPTY
48443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48444: LD_VAR 0 1
48448: PPUSH
48449: CALL_OW 266
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: IN
48464: NOT
48465: IFFALSE 48469
// exit ;
48467: GO 50103
// if name then
48469: LD_VAR 0 3
48473: IFFALSE 48489
// SetBName ( base_dep , name ) ;
48475: LD_VAR 0 1
48479: PPUSH
48480: LD_VAR 0 3
48484: PPUSH
48485: CALL_OW 500
// base := GetBase ( base_dep ) ;
48489: LD_ADDR_VAR 0 15
48493: PUSH
48494: LD_VAR 0 1
48498: PPUSH
48499: CALL_OW 274
48503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48504: LD_ADDR_VAR 0 16
48508: PUSH
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 255
48518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48519: LD_ADDR_VAR 0 17
48523: PUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 248
48533: ST_TO_ADDR
// if sources then
48534: LD_VAR 0 5
48538: IFFALSE 48585
// for i = 1 to 3 do
48540: LD_ADDR_VAR 0 8
48544: PUSH
48545: DOUBLE
48546: LD_INT 1
48548: DEC
48549: ST_TO_ADDR
48550: LD_INT 3
48552: PUSH
48553: FOR_TO
48554: IFFALSE 48583
// AddResourceType ( base , i , sources [ i ] ) ;
48556: LD_VAR 0 15
48560: PPUSH
48561: LD_VAR 0 8
48565: PPUSH
48566: LD_VAR 0 5
48570: PUSH
48571: LD_VAR 0 8
48575: ARRAY
48576: PPUSH
48577: CALL_OW 276
48581: GO 48553
48583: POP
48584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48585: LD_ADDR_VAR 0 18
48589: PUSH
48590: LD_VAR 0 15
48594: PPUSH
48595: LD_VAR 0 2
48599: PPUSH
48600: LD_INT 1
48602: PPUSH
48603: CALL 47846 0 3
48607: ST_TO_ADDR
// InitHc ;
48608: CALL_OW 19
// InitUc ;
48612: CALL_OW 18
// uc_side := side ;
48616: LD_ADDR_OWVAR 20
48620: PUSH
48621: LD_VAR 0 16
48625: ST_TO_ADDR
// uc_nation := nation ;
48626: LD_ADDR_OWVAR 21
48630: PUSH
48631: LD_VAR 0 17
48635: ST_TO_ADDR
// if buildings then
48636: LD_VAR 0 18
48640: IFFALSE 49962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48642: LD_ADDR_VAR 0 19
48646: PUSH
48647: LD_VAR 0 18
48651: PPUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 30
48657: PUSH
48658: LD_INT 29
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 30
48667: PUSH
48668: LD_INT 30
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: PPUSH
48680: CALL_OW 72
48684: ST_TO_ADDR
// if tmp then
48685: LD_VAR 0 19
48689: IFFALSE 48737
// for i in tmp do
48691: LD_ADDR_VAR 0 8
48695: PUSH
48696: LD_VAR 0 19
48700: PUSH
48701: FOR_IN
48702: IFFALSE 48735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48704: LD_VAR 0 8
48708: PPUSH
48709: CALL_OW 250
48713: PPUSH
48714: LD_VAR 0 8
48718: PPUSH
48719: CALL_OW 251
48723: PPUSH
48724: LD_VAR 0 16
48728: PPUSH
48729: CALL_OW 441
48733: GO 48701
48735: POP
48736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48737: LD_VAR 0 18
48741: PPUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 30
48747: PUSH
48748: LD_INT 32
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 30
48757: PUSH
48758: LD_INT 33
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: LIST
48769: PPUSH
48770: CALL_OW 72
48774: IFFALSE 48862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48776: LD_ADDR_VAR 0 8
48780: PUSH
48781: LD_VAR 0 18
48785: PPUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 30
48791: PUSH
48792: LD_INT 32
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 30
48801: PUSH
48802: LD_INT 33
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: PPUSH
48814: CALL_OW 72
48818: PUSH
48819: FOR_IN
48820: IFFALSE 48860
// begin if not GetBWeapon ( i ) then
48822: LD_VAR 0 8
48826: PPUSH
48827: CALL_OW 269
48831: NOT
48832: IFFALSE 48858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48834: LD_VAR 0 8
48838: PPUSH
48839: LD_VAR 0 8
48843: PPUSH
48844: LD_VAR 0 2
48848: PPUSH
48849: CALL 50108 0 2
48853: PPUSH
48854: CALL_OW 431
// end ;
48858: GO 48819
48860: POP
48861: POP
// end ; for i = 1 to personel do
48862: LD_ADDR_VAR 0 8
48866: PUSH
48867: DOUBLE
48868: LD_INT 1
48870: DEC
48871: ST_TO_ADDR
48872: LD_VAR 0 6
48876: PUSH
48877: FOR_TO
48878: IFFALSE 49942
// begin if i > 4 then
48880: LD_VAR 0 8
48884: PUSH
48885: LD_INT 4
48887: GREATER
48888: IFFALSE 48892
// break ;
48890: GO 49942
// case i of 1 :
48892: LD_VAR 0 8
48896: PUSH
48897: LD_INT 1
48899: DOUBLE
48900: EQUAL
48901: IFTRUE 48905
48903: GO 48985
48905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48906: LD_ADDR_VAR 0 12
48910: PUSH
48911: LD_VAR 0 18
48915: PPUSH
48916: LD_INT 22
48918: PUSH
48919: LD_VAR 0 16
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 58
48930: PUSH
48931: EMPTY
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 30
48939: PUSH
48940: LD_INT 32
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 4
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 5
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: LIST
48977: PPUSH
48978: CALL_OW 72
48982: ST_TO_ADDR
48983: GO 49207
48985: LD_INT 2
48987: DOUBLE
48988: EQUAL
48989: IFTRUE 48993
48991: GO 49055
48993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48994: LD_ADDR_VAR 0 12
48998: PUSH
48999: LD_VAR 0 18
49003: PPUSH
49004: LD_INT 22
49006: PUSH
49007: LD_VAR 0 16
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 30
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 30
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PPUSH
49048: CALL_OW 72
49052: ST_TO_ADDR
49053: GO 49207
49055: LD_INT 3
49057: DOUBLE
49058: EQUAL
49059: IFTRUE 49063
49061: GO 49125
49063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49064: LD_ADDR_VAR 0 12
49068: PUSH
49069: LD_VAR 0 18
49073: PPUSH
49074: LD_INT 22
49076: PUSH
49077: LD_VAR 0 16
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 30
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 30
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PPUSH
49118: CALL_OW 72
49122: ST_TO_ADDR
49123: GO 49207
49125: LD_INT 4
49127: DOUBLE
49128: EQUAL
49129: IFTRUE 49133
49131: GO 49206
49133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49134: LD_ADDR_VAR 0 12
49138: PUSH
49139: LD_VAR 0 18
49143: PPUSH
49144: LD_INT 22
49146: PUSH
49147: LD_VAR 0 16
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 30
49161: PUSH
49162: LD_INT 6
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 30
49171: PUSH
49172: LD_INT 7
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 30
49181: PUSH
49182: LD_INT 8
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PPUSH
49199: CALL_OW 72
49203: ST_TO_ADDR
49204: GO 49207
49206: POP
// if i = 1 then
49207: LD_VAR 0 8
49211: PUSH
49212: LD_INT 1
49214: EQUAL
49215: IFFALSE 49326
// begin tmp := [ ] ;
49217: LD_ADDR_VAR 0 19
49221: PUSH
49222: EMPTY
49223: ST_TO_ADDR
// for j in f do
49224: LD_ADDR_VAR 0 9
49228: PUSH
49229: LD_VAR 0 12
49233: PUSH
49234: FOR_IN
49235: IFFALSE 49308
// if GetBType ( j ) = b_bunker then
49237: LD_VAR 0 9
49241: PPUSH
49242: CALL_OW 266
49246: PUSH
49247: LD_INT 32
49249: EQUAL
49250: IFFALSE 49277
// tmp := Insert ( tmp , 1 , j ) else
49252: LD_ADDR_VAR 0 19
49256: PUSH
49257: LD_VAR 0 19
49261: PPUSH
49262: LD_INT 1
49264: PPUSH
49265: LD_VAR 0 9
49269: PPUSH
49270: CALL_OW 2
49274: ST_TO_ADDR
49275: GO 49306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49277: LD_ADDR_VAR 0 19
49281: PUSH
49282: LD_VAR 0 19
49286: PPUSH
49287: LD_VAR 0 19
49291: PUSH
49292: LD_INT 1
49294: PLUS
49295: PPUSH
49296: LD_VAR 0 9
49300: PPUSH
49301: CALL_OW 2
49305: ST_TO_ADDR
49306: GO 49234
49308: POP
49309: POP
// if tmp then
49310: LD_VAR 0 19
49314: IFFALSE 49326
// f := tmp ;
49316: LD_ADDR_VAR 0 12
49320: PUSH
49321: LD_VAR 0 19
49325: ST_TO_ADDR
// end ; x := personel [ i ] ;
49326: LD_ADDR_VAR 0 13
49330: PUSH
49331: LD_VAR 0 6
49335: PUSH
49336: LD_VAR 0 8
49340: ARRAY
49341: ST_TO_ADDR
// if x = - 1 then
49342: LD_VAR 0 13
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: EQUAL
49351: IFFALSE 49560
// begin for j in f do
49353: LD_ADDR_VAR 0 9
49357: PUSH
49358: LD_VAR 0 12
49362: PUSH
49363: FOR_IN
49364: IFFALSE 49556
// repeat InitHc ;
49366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49370: LD_VAR 0 9
49374: PPUSH
49375: CALL_OW 266
49379: PUSH
49380: LD_INT 5
49382: EQUAL
49383: IFFALSE 49453
// begin if UnitsInside ( j ) < 3 then
49385: LD_VAR 0 9
49389: PPUSH
49390: CALL_OW 313
49394: PUSH
49395: LD_INT 3
49397: LESS
49398: IFFALSE 49434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49400: LD_INT 0
49402: PPUSH
49403: LD_INT 5
49405: PUSH
49406: LD_INT 8
49408: PUSH
49409: LD_INT 9
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: PUSH
49417: LD_VAR 0 17
49421: ARRAY
49422: PPUSH
49423: LD_VAR 0 4
49427: PPUSH
49428: CALL_OW 380
49432: GO 49451
// PrepareHuman ( false , i , skill ) ;
49434: LD_INT 0
49436: PPUSH
49437: LD_VAR 0 8
49441: PPUSH
49442: LD_VAR 0 4
49446: PPUSH
49447: CALL_OW 380
// end else
49451: GO 49470
// PrepareHuman ( false , i , skill ) ;
49453: LD_INT 0
49455: PPUSH
49456: LD_VAR 0 8
49460: PPUSH
49461: LD_VAR 0 4
49465: PPUSH
49466: CALL_OW 380
// un := CreateHuman ;
49470: LD_ADDR_VAR 0 14
49474: PUSH
49475: CALL_OW 44
49479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49480: LD_ADDR_VAR 0 7
49484: PUSH
49485: LD_VAR 0 7
49489: PPUSH
49490: LD_INT 1
49492: PPUSH
49493: LD_VAR 0 14
49497: PPUSH
49498: CALL_OW 2
49502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49503: LD_VAR 0 14
49507: PPUSH
49508: LD_VAR 0 9
49512: PPUSH
49513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49517: LD_VAR 0 9
49521: PPUSH
49522: CALL_OW 313
49526: PUSH
49527: LD_INT 6
49529: EQUAL
49530: PUSH
49531: LD_VAR 0 9
49535: PPUSH
49536: CALL_OW 266
49540: PUSH
49541: LD_INT 32
49543: PUSH
49544: LD_INT 31
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: IN
49551: OR
49552: IFFALSE 49366
49554: GO 49363
49556: POP
49557: POP
// end else
49558: GO 49940
// for j = 1 to x do
49560: LD_ADDR_VAR 0 9
49564: PUSH
49565: DOUBLE
49566: LD_INT 1
49568: DEC
49569: ST_TO_ADDR
49570: LD_VAR 0 13
49574: PUSH
49575: FOR_TO
49576: IFFALSE 49938
// begin InitHc ;
49578: CALL_OW 19
// if not f then
49582: LD_VAR 0 12
49586: NOT
49587: IFFALSE 49676
// begin PrepareHuman ( false , i , skill ) ;
49589: LD_INT 0
49591: PPUSH
49592: LD_VAR 0 8
49596: PPUSH
49597: LD_VAR 0 4
49601: PPUSH
49602: CALL_OW 380
// un := CreateHuman ;
49606: LD_ADDR_VAR 0 14
49610: PUSH
49611: CALL_OW 44
49615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49616: LD_ADDR_VAR 0 7
49620: PUSH
49621: LD_VAR 0 7
49625: PPUSH
49626: LD_INT 1
49628: PPUSH
49629: LD_VAR 0 14
49633: PPUSH
49634: CALL_OW 2
49638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49639: LD_VAR 0 14
49643: PPUSH
49644: LD_VAR 0 1
49648: PPUSH
49649: CALL_OW 250
49653: PPUSH
49654: LD_VAR 0 1
49658: PPUSH
49659: CALL_OW 251
49663: PPUSH
49664: LD_INT 10
49666: PPUSH
49667: LD_INT 0
49669: PPUSH
49670: CALL_OW 50
// continue ;
49674: GO 49575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49676: LD_VAR 0 12
49680: PUSH
49681: LD_INT 1
49683: ARRAY
49684: PPUSH
49685: CALL_OW 313
49689: PUSH
49690: LD_VAR 0 12
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: PPUSH
49699: CALL_OW 266
49703: PUSH
49704: LD_INT 32
49706: PUSH
49707: LD_INT 31
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: IN
49714: AND
49715: PUSH
49716: LD_VAR 0 12
49720: PUSH
49721: LD_INT 1
49723: ARRAY
49724: PPUSH
49725: CALL_OW 313
49729: PUSH
49730: LD_INT 6
49732: EQUAL
49733: OR
49734: IFFALSE 49754
// f := Delete ( f , 1 ) ;
49736: LD_ADDR_VAR 0 12
49740: PUSH
49741: LD_VAR 0 12
49745: PPUSH
49746: LD_INT 1
49748: PPUSH
49749: CALL_OW 3
49753: ST_TO_ADDR
// if not f then
49754: LD_VAR 0 12
49758: NOT
49759: IFFALSE 49777
// begin x := x + 2 ;
49761: LD_ADDR_VAR 0 13
49765: PUSH
49766: LD_VAR 0 13
49770: PUSH
49771: LD_INT 2
49773: PLUS
49774: ST_TO_ADDR
// continue ;
49775: GO 49575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49777: LD_VAR 0 12
49781: PUSH
49782: LD_INT 1
49784: ARRAY
49785: PPUSH
49786: CALL_OW 266
49790: PUSH
49791: LD_INT 5
49793: EQUAL
49794: IFFALSE 49868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49796: LD_VAR 0 12
49800: PUSH
49801: LD_INT 1
49803: ARRAY
49804: PPUSH
49805: CALL_OW 313
49809: PUSH
49810: LD_INT 3
49812: LESS
49813: IFFALSE 49849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49815: LD_INT 0
49817: PPUSH
49818: LD_INT 5
49820: PUSH
49821: LD_INT 8
49823: PUSH
49824: LD_INT 9
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: PUSH
49832: LD_VAR 0 17
49836: ARRAY
49837: PPUSH
49838: LD_VAR 0 4
49842: PPUSH
49843: CALL_OW 380
49847: GO 49866
// PrepareHuman ( false , i , skill ) ;
49849: LD_INT 0
49851: PPUSH
49852: LD_VAR 0 8
49856: PPUSH
49857: LD_VAR 0 4
49861: PPUSH
49862: CALL_OW 380
// end else
49866: GO 49885
// PrepareHuman ( false , i , skill ) ;
49868: LD_INT 0
49870: PPUSH
49871: LD_VAR 0 8
49875: PPUSH
49876: LD_VAR 0 4
49880: PPUSH
49881: CALL_OW 380
// un := CreateHuman ;
49885: LD_ADDR_VAR 0 14
49889: PUSH
49890: CALL_OW 44
49894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49895: LD_ADDR_VAR 0 7
49899: PUSH
49900: LD_VAR 0 7
49904: PPUSH
49905: LD_INT 1
49907: PPUSH
49908: LD_VAR 0 14
49912: PPUSH
49913: CALL_OW 2
49917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49918: LD_VAR 0 14
49922: PPUSH
49923: LD_VAR 0 12
49927: PUSH
49928: LD_INT 1
49930: ARRAY
49931: PPUSH
49932: CALL_OW 52
// end ;
49936: GO 49575
49938: POP
49939: POP
// end ;
49940: GO 48877
49942: POP
49943: POP
// result := result ^ buildings ;
49944: LD_ADDR_VAR 0 7
49948: PUSH
49949: LD_VAR 0 7
49953: PUSH
49954: LD_VAR 0 18
49958: ADD
49959: ST_TO_ADDR
// end else
49960: GO 50103
// begin for i = 1 to personel do
49962: LD_ADDR_VAR 0 8
49966: PUSH
49967: DOUBLE
49968: LD_INT 1
49970: DEC
49971: ST_TO_ADDR
49972: LD_VAR 0 6
49976: PUSH
49977: FOR_TO
49978: IFFALSE 50101
// begin if i > 4 then
49980: LD_VAR 0 8
49984: PUSH
49985: LD_INT 4
49987: GREATER
49988: IFFALSE 49992
// break ;
49990: GO 50101
// x := personel [ i ] ;
49992: LD_ADDR_VAR 0 13
49996: PUSH
49997: LD_VAR 0 6
50001: PUSH
50002: LD_VAR 0 8
50006: ARRAY
50007: ST_TO_ADDR
// if x = - 1 then
50008: LD_VAR 0 13
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: EQUAL
50017: IFFALSE 50021
// continue ;
50019: GO 49977
// PrepareHuman ( false , i , skill ) ;
50021: LD_INT 0
50023: PPUSH
50024: LD_VAR 0 8
50028: PPUSH
50029: LD_VAR 0 4
50033: PPUSH
50034: CALL_OW 380
// un := CreateHuman ;
50038: LD_ADDR_VAR 0 14
50042: PUSH
50043: CALL_OW 44
50047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50048: LD_VAR 0 14
50052: PPUSH
50053: LD_VAR 0 1
50057: PPUSH
50058: CALL_OW 250
50062: PPUSH
50063: LD_VAR 0 1
50067: PPUSH
50068: CALL_OW 251
50072: PPUSH
50073: LD_INT 10
50075: PPUSH
50076: LD_INT 0
50078: PPUSH
50079: CALL_OW 50
// result := result ^ un ;
50083: LD_ADDR_VAR 0 7
50087: PUSH
50088: LD_VAR 0 7
50092: PUSH
50093: LD_VAR 0 14
50097: ADD
50098: ST_TO_ADDR
// end ;
50099: GO 49977
50101: POP
50102: POP
// end ; end ;
50103: LD_VAR 0 7
50107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50108: LD_INT 0
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
50124: PPUSH
50125: PPUSH
// result := false ;
50126: LD_ADDR_VAR 0 3
50130: PUSH
50131: LD_INT 0
50133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50134: LD_VAR 0 1
50138: NOT
50139: PUSH
50140: LD_VAR 0 1
50144: PPUSH
50145: CALL_OW 266
50149: PUSH
50150: LD_INT 32
50152: PUSH
50153: LD_INT 33
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: IN
50160: NOT
50161: OR
50162: IFFALSE 50166
// exit ;
50164: GO 51275
// nat := GetNation ( tower ) ;
50166: LD_ADDR_VAR 0 12
50170: PUSH
50171: LD_VAR 0 1
50175: PPUSH
50176: CALL_OW 248
50180: ST_TO_ADDR
// side := GetSide ( tower ) ;
50181: LD_ADDR_VAR 0 16
50185: PUSH
50186: LD_VAR 0 1
50190: PPUSH
50191: CALL_OW 255
50195: ST_TO_ADDR
// x := GetX ( tower ) ;
50196: LD_ADDR_VAR 0 10
50200: PUSH
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 250
50210: ST_TO_ADDR
// y := GetY ( tower ) ;
50211: LD_ADDR_VAR 0 11
50215: PUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: CALL_OW 251
50225: ST_TO_ADDR
// if not x or not y then
50226: LD_VAR 0 10
50230: NOT
50231: PUSH
50232: LD_VAR 0 11
50236: NOT
50237: OR
50238: IFFALSE 50242
// exit ;
50240: GO 51275
// weapon := 0 ;
50242: LD_ADDR_VAR 0 18
50246: PUSH
50247: LD_INT 0
50249: ST_TO_ADDR
// fac_list := [ ] ;
50250: LD_ADDR_VAR 0 17
50254: PUSH
50255: EMPTY
50256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50257: LD_ADDR_VAR 0 6
50261: PUSH
50262: LD_VAR 0 1
50266: PPUSH
50267: CALL_OW 274
50271: PPUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: LD_INT 0
50279: PPUSH
50280: CALL 47846 0 3
50284: PPUSH
50285: LD_INT 30
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PPUSH
50295: CALL_OW 72
50299: ST_TO_ADDR
// if not factories then
50300: LD_VAR 0 6
50304: NOT
50305: IFFALSE 50309
// exit ;
50307: GO 51275
// for i in factories do
50309: LD_ADDR_VAR 0 8
50313: PUSH
50314: LD_VAR 0 6
50318: PUSH
50319: FOR_IN
50320: IFFALSE 50345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50322: LD_ADDR_VAR 0 17
50326: PUSH
50327: LD_VAR 0 17
50331: PUSH
50332: LD_VAR 0 8
50336: PPUSH
50337: CALL_OW 478
50341: UNION
50342: ST_TO_ADDR
50343: GO 50319
50345: POP
50346: POP
// if not fac_list then
50347: LD_VAR 0 17
50351: NOT
50352: IFFALSE 50356
// exit ;
50354: GO 51275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50356: LD_ADDR_VAR 0 5
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 5
50366: PUSH
50367: LD_INT 9
50369: PUSH
50370: LD_INT 10
50372: PUSH
50373: LD_INT 6
50375: PUSH
50376: LD_INT 7
50378: PUSH
50379: LD_INT 11
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 27
50393: PUSH
50394: LD_INT 28
50396: PUSH
50397: LD_INT 26
50399: PUSH
50400: LD_INT 30
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 43
50411: PUSH
50412: LD_INT 44
50414: PUSH
50415: LD_INT 46
50417: PUSH
50418: LD_INT 45
50420: PUSH
50421: LD_INT 47
50423: PUSH
50424: LD_INT 49
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: PUSH
50440: LD_VAR 0 12
50444: ARRAY
50445: ST_TO_ADDR
// list := list isect fac_list ;
50446: LD_ADDR_VAR 0 5
50450: PUSH
50451: LD_VAR 0 5
50455: PUSH
50456: LD_VAR 0 17
50460: ISECT
50461: ST_TO_ADDR
// if not list then
50462: LD_VAR 0 5
50466: NOT
50467: IFFALSE 50471
// exit ;
50469: GO 51275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50471: LD_VAR 0 12
50475: PUSH
50476: LD_INT 3
50478: EQUAL
50479: PUSH
50480: LD_INT 49
50482: PUSH
50483: LD_VAR 0 5
50487: IN
50488: AND
50489: PUSH
50490: LD_INT 31
50492: PPUSH
50493: LD_VAR 0 16
50497: PPUSH
50498: CALL_OW 321
50502: PUSH
50503: LD_INT 2
50505: EQUAL
50506: AND
50507: IFFALSE 50567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50509: LD_INT 22
50511: PUSH
50512: LD_VAR 0 16
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 35
50523: PUSH
50524: LD_INT 49
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 91
50533: PUSH
50534: LD_VAR 0 1
50538: PUSH
50539: LD_INT 10
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: PPUSH
50552: CALL_OW 69
50556: NOT
50557: IFFALSE 50567
// weapon := ru_time_lapser ;
50559: LD_ADDR_VAR 0 18
50563: PUSH
50564: LD_INT 49
50566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50567: LD_VAR 0 12
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: IN
50582: PUSH
50583: LD_INT 11
50585: PUSH
50586: LD_VAR 0 5
50590: IN
50591: PUSH
50592: LD_INT 30
50594: PUSH
50595: LD_VAR 0 5
50599: IN
50600: OR
50601: AND
50602: PUSH
50603: LD_INT 6
50605: PPUSH
50606: LD_VAR 0 16
50610: PPUSH
50611: CALL_OW 321
50615: PUSH
50616: LD_INT 2
50618: EQUAL
50619: AND
50620: IFFALSE 50785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50622: LD_INT 22
50624: PUSH
50625: LD_VAR 0 16
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 35
50639: PUSH
50640: LD_INT 11
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 35
50649: PUSH
50650: LD_INT 30
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 91
50664: PUSH
50665: LD_VAR 0 1
50669: PUSH
50670: LD_INT 18
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: PPUSH
50683: CALL_OW 69
50687: NOT
50688: PUSH
50689: LD_INT 22
50691: PUSH
50692: LD_VAR 0 16
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_INT 32
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 30
50716: PUSH
50717: LD_INT 33
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 91
50731: PUSH
50732: LD_VAR 0 1
50736: PUSH
50737: LD_INT 12
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: PPUSH
50753: CALL_OW 69
50757: PUSH
50758: LD_INT 2
50760: GREATER
50761: AND
50762: IFFALSE 50785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50764: LD_ADDR_VAR 0 18
50768: PUSH
50769: LD_INT 11
50771: PUSH
50772: LD_INT 30
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_VAR 0 12
50783: ARRAY
50784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50785: LD_VAR 0 18
50789: NOT
50790: PUSH
50791: LD_INT 40
50793: PPUSH
50794: LD_VAR 0 16
50798: PPUSH
50799: CALL_OW 321
50803: PUSH
50804: LD_INT 2
50806: EQUAL
50807: AND
50808: PUSH
50809: LD_INT 7
50811: PUSH
50812: LD_VAR 0 5
50816: IN
50817: PUSH
50818: LD_INT 28
50820: PUSH
50821: LD_VAR 0 5
50825: IN
50826: OR
50827: PUSH
50828: LD_INT 45
50830: PUSH
50831: LD_VAR 0 5
50835: IN
50836: OR
50837: AND
50838: IFFALSE 51092
// begin hex := GetHexInfo ( x , y ) ;
50840: LD_ADDR_VAR 0 4
50844: PUSH
50845: LD_VAR 0 10
50849: PPUSH
50850: LD_VAR 0 11
50854: PPUSH
50855: CALL_OW 546
50859: ST_TO_ADDR
// if hex [ 1 ] then
50860: LD_VAR 0 4
50864: PUSH
50865: LD_INT 1
50867: ARRAY
50868: IFFALSE 50872
// exit ;
50870: GO 51275
// height := hex [ 2 ] ;
50872: LD_ADDR_VAR 0 15
50876: PUSH
50877: LD_VAR 0 4
50881: PUSH
50882: LD_INT 2
50884: ARRAY
50885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50886: LD_ADDR_VAR 0 14
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 5
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: ST_TO_ADDR
// for i in tmp do
50909: LD_ADDR_VAR 0 8
50913: PUSH
50914: LD_VAR 0 14
50918: PUSH
50919: FOR_IN
50920: IFFALSE 51090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50922: LD_ADDR_VAR 0 9
50926: PUSH
50927: LD_VAR 0 10
50931: PPUSH
50932: LD_VAR 0 8
50936: PPUSH
50937: LD_INT 5
50939: PPUSH
50940: CALL_OW 272
50944: PUSH
50945: LD_VAR 0 11
50949: PPUSH
50950: LD_VAR 0 8
50954: PPUSH
50955: LD_INT 5
50957: PPUSH
50958: CALL_OW 273
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50967: LD_VAR 0 9
50971: PUSH
50972: LD_INT 1
50974: ARRAY
50975: PPUSH
50976: LD_VAR 0 9
50980: PUSH
50981: LD_INT 2
50983: ARRAY
50984: PPUSH
50985: CALL_OW 488
50989: IFFALSE 51088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50991: LD_ADDR_VAR 0 4
50995: PUSH
50996: LD_VAR 0 9
51000: PUSH
51001: LD_INT 1
51003: ARRAY
51004: PPUSH
51005: LD_VAR 0 9
51009: PUSH
51010: LD_INT 2
51012: ARRAY
51013: PPUSH
51014: CALL_OW 546
51018: ST_TO_ADDR
// if hex [ 1 ] then
51019: LD_VAR 0 4
51023: PUSH
51024: LD_INT 1
51026: ARRAY
51027: IFFALSE 51031
// continue ;
51029: GO 50919
// h := hex [ 2 ] ;
51031: LD_ADDR_VAR 0 13
51035: PUSH
51036: LD_VAR 0 4
51040: PUSH
51041: LD_INT 2
51043: ARRAY
51044: ST_TO_ADDR
// if h + 7 < height then
51045: LD_VAR 0 13
51049: PUSH
51050: LD_INT 7
51052: PLUS
51053: PUSH
51054: LD_VAR 0 15
51058: LESS
51059: IFFALSE 51088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51061: LD_ADDR_VAR 0 18
51065: PUSH
51066: LD_INT 7
51068: PUSH
51069: LD_INT 28
51071: PUSH
51072: LD_INT 45
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: LD_VAR 0 12
51084: ARRAY
51085: ST_TO_ADDR
// break ;
51086: GO 51090
// end ; end ; end ;
51088: GO 50919
51090: POP
51091: POP
// end ; if not weapon then
51092: LD_VAR 0 18
51096: NOT
51097: IFFALSE 51157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51099: LD_ADDR_VAR 0 5
51103: PUSH
51104: LD_VAR 0 5
51108: PUSH
51109: LD_INT 11
51111: PUSH
51112: LD_INT 30
51114: PUSH
51115: LD_INT 49
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: DIFF
51123: ST_TO_ADDR
// if not list then
51124: LD_VAR 0 5
51128: NOT
51129: IFFALSE 51133
// exit ;
51131: GO 51275
// weapon := list [ rand ( 1 , list ) ] ;
51133: LD_ADDR_VAR 0 18
51137: PUSH
51138: LD_VAR 0 5
51142: PUSH
51143: LD_INT 1
51145: PPUSH
51146: LD_VAR 0 5
51150: PPUSH
51151: CALL_OW 12
51155: ARRAY
51156: ST_TO_ADDR
// end ; if weapon then
51157: LD_VAR 0 18
51161: IFFALSE 51275
// begin tmp := CostOfWeapon ( weapon ) ;
51163: LD_ADDR_VAR 0 14
51167: PUSH
51168: LD_VAR 0 18
51172: PPUSH
51173: CALL_OW 451
51177: ST_TO_ADDR
// j := GetBase ( tower ) ;
51178: LD_ADDR_VAR 0 9
51182: PUSH
51183: LD_VAR 0 1
51187: PPUSH
51188: CALL_OW 274
51192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51193: LD_VAR 0 9
51197: PPUSH
51198: LD_INT 1
51200: PPUSH
51201: CALL_OW 275
51205: PUSH
51206: LD_VAR 0 14
51210: PUSH
51211: LD_INT 1
51213: ARRAY
51214: GREATEREQUAL
51215: PUSH
51216: LD_VAR 0 9
51220: PPUSH
51221: LD_INT 2
51223: PPUSH
51224: CALL_OW 275
51228: PUSH
51229: LD_VAR 0 14
51233: PUSH
51234: LD_INT 2
51236: ARRAY
51237: GREATEREQUAL
51238: AND
51239: PUSH
51240: LD_VAR 0 9
51244: PPUSH
51245: LD_INT 3
51247: PPUSH
51248: CALL_OW 275
51252: PUSH
51253: LD_VAR 0 14
51257: PUSH
51258: LD_INT 3
51260: ARRAY
51261: GREATEREQUAL
51262: AND
51263: IFFALSE 51275
// result := weapon ;
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_VAR 0 18
51274: ST_TO_ADDR
// end ; end ;
51275: LD_VAR 0 3
51279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51280: LD_INT 0
51282: PPUSH
51283: PPUSH
// result := true ;
51284: LD_ADDR_VAR 0 3
51288: PUSH
51289: LD_INT 1
51291: ST_TO_ADDR
// if array1 = array2 then
51292: LD_VAR 0 1
51296: PUSH
51297: LD_VAR 0 2
51301: EQUAL
51302: IFFALSE 51362
// begin for i = 1 to array1 do
51304: LD_ADDR_VAR 0 4
51308: PUSH
51309: DOUBLE
51310: LD_INT 1
51312: DEC
51313: ST_TO_ADDR
51314: LD_VAR 0 1
51318: PUSH
51319: FOR_TO
51320: IFFALSE 51358
// if array1 [ i ] <> array2 [ i ] then
51322: LD_VAR 0 1
51326: PUSH
51327: LD_VAR 0 4
51331: ARRAY
51332: PUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_VAR 0 4
51342: ARRAY
51343: NONEQUAL
51344: IFFALSE 51356
// begin result := false ;
51346: LD_ADDR_VAR 0 3
51350: PUSH
51351: LD_INT 0
51353: ST_TO_ADDR
// break ;
51354: GO 51358
// end ;
51356: GO 51319
51358: POP
51359: POP
// end else
51360: GO 51370
// result := false ;
51362: LD_ADDR_VAR 0 3
51366: PUSH
51367: LD_INT 0
51369: ST_TO_ADDR
// end ;
51370: LD_VAR 0 3
51374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51375: LD_INT 0
51377: PPUSH
51378: PPUSH
// if not array1 or not array2 then
51379: LD_VAR 0 1
51383: NOT
51384: PUSH
51385: LD_VAR 0 2
51389: NOT
51390: OR
51391: IFFALSE 51395
// exit ;
51393: GO 51459
// result := true ;
51395: LD_ADDR_VAR 0 3
51399: PUSH
51400: LD_INT 1
51402: ST_TO_ADDR
// for i = 1 to array1 do
51403: LD_ADDR_VAR 0 4
51407: PUSH
51408: DOUBLE
51409: LD_INT 1
51411: DEC
51412: ST_TO_ADDR
51413: LD_VAR 0 1
51417: PUSH
51418: FOR_TO
51419: IFFALSE 51457
// if array1 [ i ] <> array2 [ i ] then
51421: LD_VAR 0 1
51425: PUSH
51426: LD_VAR 0 4
51430: ARRAY
51431: PUSH
51432: LD_VAR 0 2
51436: PUSH
51437: LD_VAR 0 4
51441: ARRAY
51442: NONEQUAL
51443: IFFALSE 51455
// begin result := false ;
51445: LD_ADDR_VAR 0 3
51449: PUSH
51450: LD_INT 0
51452: ST_TO_ADDR
// break ;
51453: GO 51457
// end ;
51455: GO 51418
51457: POP
51458: POP
// end ;
51459: LD_VAR 0 3
51463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
51468: PPUSH
// pom := GetBase ( fac ) ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 274
51483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51484: LD_ADDR_VAR 0 4
51488: PUSH
51489: LD_VAR 0 2
51493: PUSH
51494: LD_INT 1
51496: ARRAY
51497: PPUSH
51498: LD_VAR 0 2
51502: PUSH
51503: LD_INT 2
51505: ARRAY
51506: PPUSH
51507: LD_VAR 0 2
51511: PUSH
51512: LD_INT 3
51514: ARRAY
51515: PPUSH
51516: LD_VAR 0 2
51520: PUSH
51521: LD_INT 4
51523: ARRAY
51524: PPUSH
51525: CALL_OW 449
51529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51530: LD_ADDR_VAR 0 3
51534: PUSH
51535: LD_VAR 0 5
51539: PPUSH
51540: LD_INT 1
51542: PPUSH
51543: CALL_OW 275
51547: PUSH
51548: LD_VAR 0 4
51552: PUSH
51553: LD_INT 1
51555: ARRAY
51556: GREATEREQUAL
51557: PUSH
51558: LD_VAR 0 5
51562: PPUSH
51563: LD_INT 2
51565: PPUSH
51566: CALL_OW 275
51570: PUSH
51571: LD_VAR 0 4
51575: PUSH
51576: LD_INT 2
51578: ARRAY
51579: GREATEREQUAL
51580: AND
51581: PUSH
51582: LD_VAR 0 5
51586: PPUSH
51587: LD_INT 3
51589: PPUSH
51590: CALL_OW 275
51594: PUSH
51595: LD_VAR 0 4
51599: PUSH
51600: LD_INT 3
51602: ARRAY
51603: GREATEREQUAL
51604: AND
51605: ST_TO_ADDR
// end ;
51606: LD_VAR 0 3
51610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51611: LD_INT 0
51613: PPUSH
51614: PPUSH
51615: PPUSH
51616: PPUSH
// pom := GetBase ( building ) ;
51617: LD_ADDR_VAR 0 3
51621: PUSH
51622: LD_VAR 0 1
51626: PPUSH
51627: CALL_OW 274
51631: ST_TO_ADDR
// if not pom then
51632: LD_VAR 0 3
51636: NOT
51637: IFFALSE 51641
// exit ;
51639: GO 51811
// btype := GetBType ( building ) ;
51641: LD_ADDR_VAR 0 5
51645: PUSH
51646: LD_VAR 0 1
51650: PPUSH
51651: CALL_OW 266
51655: ST_TO_ADDR
// if btype = b_armoury then
51656: LD_VAR 0 5
51660: PUSH
51661: LD_INT 4
51663: EQUAL
51664: IFFALSE 51674
// btype := b_barracks ;
51666: LD_ADDR_VAR 0 5
51670: PUSH
51671: LD_INT 5
51673: ST_TO_ADDR
// if btype = b_depot then
51674: LD_VAR 0 5
51678: PUSH
51679: LD_INT 0
51681: EQUAL
51682: IFFALSE 51692
// btype := b_warehouse ;
51684: LD_ADDR_VAR 0 5
51688: PUSH
51689: LD_INT 1
51691: ST_TO_ADDR
// if btype = b_workshop then
51692: LD_VAR 0 5
51696: PUSH
51697: LD_INT 2
51699: EQUAL
51700: IFFALSE 51710
// btype := b_factory ;
51702: LD_ADDR_VAR 0 5
51706: PUSH
51707: LD_INT 3
51709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51710: LD_ADDR_VAR 0 4
51714: PUSH
51715: LD_VAR 0 5
51719: PPUSH
51720: LD_VAR 0 1
51724: PPUSH
51725: CALL_OW 248
51729: PPUSH
51730: CALL_OW 450
51734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51735: LD_ADDR_VAR 0 2
51739: PUSH
51740: LD_VAR 0 3
51744: PPUSH
51745: LD_INT 1
51747: PPUSH
51748: CALL_OW 275
51752: PUSH
51753: LD_VAR 0 4
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: GREATEREQUAL
51762: PUSH
51763: LD_VAR 0 3
51767: PPUSH
51768: LD_INT 2
51770: PPUSH
51771: CALL_OW 275
51775: PUSH
51776: LD_VAR 0 4
51780: PUSH
51781: LD_INT 2
51783: ARRAY
51784: GREATEREQUAL
51785: AND
51786: PUSH
51787: LD_VAR 0 3
51791: PPUSH
51792: LD_INT 3
51794: PPUSH
51795: CALL_OW 275
51799: PUSH
51800: LD_VAR 0 4
51804: PUSH
51805: LD_INT 3
51807: ARRAY
51808: GREATEREQUAL
51809: AND
51810: ST_TO_ADDR
// end ;
51811: LD_VAR 0 2
51815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51816: LD_INT 0
51818: PPUSH
51819: PPUSH
51820: PPUSH
// pom := GetBase ( building ) ;
51821: LD_ADDR_VAR 0 4
51825: PUSH
51826: LD_VAR 0 1
51830: PPUSH
51831: CALL_OW 274
51835: ST_TO_ADDR
// if not pom then
51836: LD_VAR 0 4
51840: NOT
51841: IFFALSE 51845
// exit ;
51843: GO 51946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51845: LD_ADDR_VAR 0 5
51849: PUSH
51850: LD_VAR 0 2
51854: PPUSH
51855: LD_VAR 0 1
51859: PPUSH
51860: CALL_OW 248
51864: PPUSH
51865: CALL_OW 450
51869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51870: LD_ADDR_VAR 0 3
51874: PUSH
51875: LD_VAR 0 4
51879: PPUSH
51880: LD_INT 1
51882: PPUSH
51883: CALL_OW 275
51887: PUSH
51888: LD_VAR 0 5
51892: PUSH
51893: LD_INT 1
51895: ARRAY
51896: GREATEREQUAL
51897: PUSH
51898: LD_VAR 0 4
51902: PPUSH
51903: LD_INT 2
51905: PPUSH
51906: CALL_OW 275
51910: PUSH
51911: LD_VAR 0 5
51915: PUSH
51916: LD_INT 2
51918: ARRAY
51919: GREATEREQUAL
51920: AND
51921: PUSH
51922: LD_VAR 0 4
51926: PPUSH
51927: LD_INT 3
51929: PPUSH
51930: CALL_OW 275
51934: PUSH
51935: LD_VAR 0 5
51939: PUSH
51940: LD_INT 3
51942: ARRAY
51943: GREATEREQUAL
51944: AND
51945: ST_TO_ADDR
// end ;
51946: LD_VAR 0 3
51950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51951: LD_INT 0
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
// result := false ;
51964: LD_ADDR_VAR 0 8
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51972: LD_VAR 0 5
51976: NOT
51977: PUSH
51978: LD_VAR 0 1
51982: NOT
51983: OR
51984: PUSH
51985: LD_VAR 0 2
51989: NOT
51990: OR
51991: PUSH
51992: LD_VAR 0 3
51996: NOT
51997: OR
51998: IFFALSE 52002
// exit ;
52000: GO 52816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52002: LD_ADDR_VAR 0 14
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_VAR 0 2
52016: PPUSH
52017: LD_VAR 0 3
52021: PPUSH
52022: LD_VAR 0 4
52026: PPUSH
52027: LD_VAR 0 5
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: CALL_OW 248
52040: PPUSH
52041: LD_INT 0
52043: PPUSH
52044: CALL 54069 0 6
52048: ST_TO_ADDR
// if not hexes then
52049: LD_VAR 0 14
52053: NOT
52054: IFFALSE 52058
// exit ;
52056: GO 52816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52058: LD_ADDR_VAR 0 17
52062: PUSH
52063: LD_VAR 0 5
52067: PPUSH
52068: LD_INT 22
52070: PUSH
52071: LD_VAR 0 13
52075: PPUSH
52076: CALL_OW 255
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 30
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 30
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PPUSH
52117: CALL_OW 72
52121: ST_TO_ADDR
// for i = 1 to hexes do
52122: LD_ADDR_VAR 0 9
52126: PUSH
52127: DOUBLE
52128: LD_INT 1
52130: DEC
52131: ST_TO_ADDR
52132: LD_VAR 0 14
52136: PUSH
52137: FOR_TO
52138: IFFALSE 52814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52140: LD_ADDR_VAR 0 13
52144: PUSH
52145: LD_VAR 0 14
52149: PUSH
52150: LD_VAR 0 9
52154: ARRAY
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: PPUSH
52160: LD_VAR 0 14
52164: PUSH
52165: LD_VAR 0 9
52169: ARRAY
52170: PUSH
52171: LD_INT 2
52173: ARRAY
52174: PPUSH
52175: CALL_OW 428
52179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52180: LD_VAR 0 14
52184: PUSH
52185: LD_VAR 0 9
52189: ARRAY
52190: PUSH
52191: LD_INT 1
52193: ARRAY
52194: PPUSH
52195: LD_VAR 0 14
52199: PUSH
52200: LD_VAR 0 9
52204: ARRAY
52205: PUSH
52206: LD_INT 2
52208: ARRAY
52209: PPUSH
52210: CALL_OW 351
52214: PUSH
52215: LD_VAR 0 14
52219: PUSH
52220: LD_VAR 0 9
52224: ARRAY
52225: PUSH
52226: LD_INT 1
52228: ARRAY
52229: PPUSH
52230: LD_VAR 0 14
52234: PUSH
52235: LD_VAR 0 9
52239: ARRAY
52240: PUSH
52241: LD_INT 2
52243: ARRAY
52244: PPUSH
52245: CALL_OW 488
52249: NOT
52250: OR
52251: PUSH
52252: LD_VAR 0 13
52256: PPUSH
52257: CALL_OW 247
52261: PUSH
52262: LD_INT 3
52264: EQUAL
52265: OR
52266: IFFALSE 52272
// exit ;
52268: POP
52269: POP
52270: GO 52816
// if not tmp then
52272: LD_VAR 0 13
52276: NOT
52277: IFFALSE 52281
// continue ;
52279: GO 52137
// result := true ;
52281: LD_ADDR_VAR 0 8
52285: PUSH
52286: LD_INT 1
52288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52289: LD_VAR 0 6
52293: PUSH
52294: LD_VAR 0 13
52298: PPUSH
52299: CALL_OW 247
52303: PUSH
52304: LD_INT 2
52306: EQUAL
52307: AND
52308: PUSH
52309: LD_VAR 0 13
52313: PPUSH
52314: CALL_OW 263
52318: PUSH
52319: LD_INT 1
52321: EQUAL
52322: AND
52323: IFFALSE 52487
// begin if IsDrivenBy ( tmp ) then
52325: LD_VAR 0 13
52329: PPUSH
52330: CALL_OW 311
52334: IFFALSE 52338
// continue ;
52336: GO 52137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52338: LD_VAR 0 6
52342: PPUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 60
52348: PUSH
52349: EMPTY
52350: LIST
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: LD_INT 55
52361: PUSH
52362: EMPTY
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PPUSH
52373: CALL_OW 72
52377: IFFALSE 52485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52379: LD_ADDR_VAR 0 18
52383: PUSH
52384: LD_VAR 0 6
52388: PPUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 60
52394: PUSH
52395: EMPTY
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: LD_INT 55
52407: PUSH
52408: EMPTY
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PPUSH
52419: CALL_OW 72
52423: PUSH
52424: LD_INT 1
52426: ARRAY
52427: ST_TO_ADDR
// if IsInUnit ( driver ) then
52428: LD_VAR 0 18
52432: PPUSH
52433: CALL_OW 310
52437: IFFALSE 52448
// ComExit ( driver ) ;
52439: LD_VAR 0 18
52443: PPUSH
52444: CALL 77848 0 1
// AddComEnterUnit ( driver , tmp ) ;
52448: LD_VAR 0 18
52452: PPUSH
52453: LD_VAR 0 13
52457: PPUSH
52458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52462: LD_VAR 0 18
52466: PPUSH
52467: LD_VAR 0 7
52471: PPUSH
52472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52476: LD_VAR 0 18
52480: PPUSH
52481: CALL_OW 181
// end ; continue ;
52485: GO 52137
// end ; if not cleaners or not tmp in cleaners then
52487: LD_VAR 0 6
52491: NOT
52492: PUSH
52493: LD_VAR 0 13
52497: PUSH
52498: LD_VAR 0 6
52502: IN
52503: NOT
52504: OR
52505: IFFALSE 52812
// begin if dep then
52507: LD_VAR 0 17
52511: IFFALSE 52647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52513: LD_ADDR_VAR 0 16
52517: PUSH
52518: LD_VAR 0 17
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: PPUSH
52527: CALL_OW 250
52531: PPUSH
52532: LD_VAR 0 17
52536: PUSH
52537: LD_INT 1
52539: ARRAY
52540: PPUSH
52541: CALL_OW 254
52545: PPUSH
52546: LD_INT 5
52548: PPUSH
52549: CALL_OW 272
52553: PUSH
52554: LD_VAR 0 17
52558: PUSH
52559: LD_INT 1
52561: ARRAY
52562: PPUSH
52563: CALL_OW 251
52567: PPUSH
52568: LD_VAR 0 17
52572: PUSH
52573: LD_INT 1
52575: ARRAY
52576: PPUSH
52577: CALL_OW 254
52581: PPUSH
52582: LD_INT 5
52584: PPUSH
52585: CALL_OW 273
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52594: LD_VAR 0 16
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PPUSH
52603: LD_VAR 0 16
52607: PUSH
52608: LD_INT 2
52610: ARRAY
52611: PPUSH
52612: CALL_OW 488
52616: IFFALSE 52647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52618: LD_VAR 0 13
52622: PPUSH
52623: LD_VAR 0 16
52627: PUSH
52628: LD_INT 1
52630: ARRAY
52631: PPUSH
52632: LD_VAR 0 16
52636: PUSH
52637: LD_INT 2
52639: ARRAY
52640: PPUSH
52641: CALL_OW 111
// continue ;
52645: GO 52137
// end ; end ; r := GetDir ( tmp ) ;
52647: LD_ADDR_VAR 0 15
52651: PUSH
52652: LD_VAR 0 13
52656: PPUSH
52657: CALL_OW 254
52661: ST_TO_ADDR
// if r = 5 then
52662: LD_VAR 0 15
52666: PUSH
52667: LD_INT 5
52669: EQUAL
52670: IFFALSE 52680
// r := 0 ;
52672: LD_ADDR_VAR 0 15
52676: PUSH
52677: LD_INT 0
52679: ST_TO_ADDR
// for j = r to 5 do
52680: LD_ADDR_VAR 0 10
52684: PUSH
52685: DOUBLE
52686: LD_VAR 0 15
52690: DEC
52691: ST_TO_ADDR
52692: LD_INT 5
52694: PUSH
52695: FOR_TO
52696: IFFALSE 52810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52698: LD_ADDR_VAR 0 11
52702: PUSH
52703: LD_VAR 0 13
52707: PPUSH
52708: CALL_OW 250
52712: PPUSH
52713: LD_VAR 0 10
52717: PPUSH
52718: LD_INT 2
52720: PPUSH
52721: CALL_OW 272
52725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52726: LD_ADDR_VAR 0 12
52730: PUSH
52731: LD_VAR 0 13
52735: PPUSH
52736: CALL_OW 251
52740: PPUSH
52741: LD_VAR 0 10
52745: PPUSH
52746: LD_INT 2
52748: PPUSH
52749: CALL_OW 273
52753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52754: LD_VAR 0 11
52758: PPUSH
52759: LD_VAR 0 12
52763: PPUSH
52764: CALL_OW 488
52768: PUSH
52769: LD_VAR 0 11
52773: PPUSH
52774: LD_VAR 0 12
52778: PPUSH
52779: CALL_OW 428
52783: NOT
52784: AND
52785: IFFALSE 52808
// begin ComMoveXY ( tmp , _x , _y ) ;
52787: LD_VAR 0 13
52791: PPUSH
52792: LD_VAR 0 11
52796: PPUSH
52797: LD_VAR 0 12
52801: PPUSH
52802: CALL_OW 111
// break ;
52806: GO 52810
// end ; end ;
52808: GO 52695
52810: POP
52811: POP
// end ; end ;
52812: GO 52137
52814: POP
52815: POP
// end ;
52816: LD_VAR 0 8
52820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52821: LD_INT 0
52823: PPUSH
// result := true ;
52824: LD_ADDR_VAR 0 3
52828: PUSH
52829: LD_INT 1
52831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52832: LD_VAR 0 2
52836: PUSH
52837: LD_INT 24
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52851
52843: LD_INT 33
52845: DOUBLE
52846: EQUAL
52847: IFTRUE 52851
52849: GO 52876
52851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52852: LD_ADDR_VAR 0 3
52856: PUSH
52857: LD_INT 32
52859: PPUSH
52860: LD_VAR 0 1
52864: PPUSH
52865: CALL_OW 321
52869: PUSH
52870: LD_INT 2
52872: EQUAL
52873: ST_TO_ADDR
52874: GO 53192
52876: LD_INT 20
52878: DOUBLE
52879: EQUAL
52880: IFTRUE 52884
52882: GO 52909
52884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52885: LD_ADDR_VAR 0 3
52889: PUSH
52890: LD_INT 6
52892: PPUSH
52893: LD_VAR 0 1
52897: PPUSH
52898: CALL_OW 321
52902: PUSH
52903: LD_INT 2
52905: EQUAL
52906: ST_TO_ADDR
52907: GO 53192
52909: LD_INT 22
52911: DOUBLE
52912: EQUAL
52913: IFTRUE 52923
52915: LD_INT 36
52917: DOUBLE
52918: EQUAL
52919: IFTRUE 52923
52921: GO 52948
52923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52924: LD_ADDR_VAR 0 3
52928: PUSH
52929: LD_INT 15
52931: PPUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 321
52941: PUSH
52942: LD_INT 2
52944: EQUAL
52945: ST_TO_ADDR
52946: GO 53192
52948: LD_INT 30
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52956
52954: GO 52981
52956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52957: LD_ADDR_VAR 0 3
52961: PUSH
52962: LD_INT 20
52964: PPUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 321
52974: PUSH
52975: LD_INT 2
52977: EQUAL
52978: ST_TO_ADDR
52979: GO 53192
52981: LD_INT 28
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 52995
52987: LD_INT 21
52989: DOUBLE
52990: EQUAL
52991: IFTRUE 52995
52993: GO 53020
52995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52996: LD_ADDR_VAR 0 3
53000: PUSH
53001: LD_INT 21
53003: PPUSH
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL_OW 321
53013: PUSH
53014: LD_INT 2
53016: EQUAL
53017: ST_TO_ADDR
53018: GO 53192
53020: LD_INT 16
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53028
53026: GO 53053
53028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53029: LD_ADDR_VAR 0 3
53033: PUSH
53034: LD_INT 84
53036: PPUSH
53037: LD_VAR 0 1
53041: PPUSH
53042: CALL_OW 321
53046: PUSH
53047: LD_INT 2
53049: EQUAL
53050: ST_TO_ADDR
53051: GO 53192
53053: LD_INT 19
53055: DOUBLE
53056: EQUAL
53057: IFTRUE 53067
53059: LD_INT 23
53061: DOUBLE
53062: EQUAL
53063: IFTRUE 53067
53065: GO 53092
53067: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53068: LD_ADDR_VAR 0 3
53072: PUSH
53073: LD_INT 83
53075: PPUSH
53076: LD_VAR 0 1
53080: PPUSH
53081: CALL_OW 321
53085: PUSH
53086: LD_INT 2
53088: EQUAL
53089: ST_TO_ADDR
53090: GO 53192
53092: LD_INT 17
53094: DOUBLE
53095: EQUAL
53096: IFTRUE 53100
53098: GO 53125
53100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53101: LD_ADDR_VAR 0 3
53105: PUSH
53106: LD_INT 39
53108: PPUSH
53109: LD_VAR 0 1
53113: PPUSH
53114: CALL_OW 321
53118: PUSH
53119: LD_INT 2
53121: EQUAL
53122: ST_TO_ADDR
53123: GO 53192
53125: LD_INT 18
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53133
53131: GO 53158
53133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53134: LD_ADDR_VAR 0 3
53138: PUSH
53139: LD_INT 40
53141: PPUSH
53142: LD_VAR 0 1
53146: PPUSH
53147: CALL_OW 321
53151: PUSH
53152: LD_INT 2
53154: EQUAL
53155: ST_TO_ADDR
53156: GO 53192
53158: LD_INT 27
53160: DOUBLE
53161: EQUAL
53162: IFTRUE 53166
53164: GO 53191
53166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53167: LD_ADDR_VAR 0 3
53171: PUSH
53172: LD_INT 35
53174: PPUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: CALL_OW 321
53184: PUSH
53185: LD_INT 2
53187: EQUAL
53188: ST_TO_ADDR
53189: GO 53192
53191: POP
// end ;
53192: LD_VAR 0 3
53196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53197: LD_INT 0
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
// result := false ;
53210: LD_ADDR_VAR 0 6
53214: PUSH
53215: LD_INT 0
53217: ST_TO_ADDR
// if btype = b_depot then
53218: LD_VAR 0 2
53222: PUSH
53223: LD_INT 0
53225: EQUAL
53226: IFFALSE 53238
// begin result := true ;
53228: LD_ADDR_VAR 0 6
53232: PUSH
53233: LD_INT 1
53235: ST_TO_ADDR
// exit ;
53236: GO 54064
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53238: LD_VAR 0 1
53242: NOT
53243: PUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 266
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: IN
53264: NOT
53265: OR
53266: PUSH
53267: LD_VAR 0 2
53271: NOT
53272: OR
53273: PUSH
53274: LD_VAR 0 5
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: LD_INT 4
53293: PUSH
53294: LD_INT 5
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: IN
53305: NOT
53306: OR
53307: PUSH
53308: LD_VAR 0 3
53312: PPUSH
53313: LD_VAR 0 4
53317: PPUSH
53318: CALL_OW 488
53322: NOT
53323: OR
53324: IFFALSE 53328
// exit ;
53326: GO 54064
// side := GetSide ( depot ) ;
53328: LD_ADDR_VAR 0 9
53332: PUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 255
53342: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53343: LD_VAR 0 9
53347: PPUSH
53348: LD_VAR 0 2
53352: PPUSH
53353: CALL 52821 0 2
53357: NOT
53358: IFFALSE 53362
// exit ;
53360: GO 54064
// pom := GetBase ( depot ) ;
53362: LD_ADDR_VAR 0 10
53366: PUSH
53367: LD_VAR 0 1
53371: PPUSH
53372: CALL_OW 274
53376: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53377: LD_ADDR_VAR 0 11
53381: PUSH
53382: LD_VAR 0 2
53386: PPUSH
53387: LD_VAR 0 1
53391: PPUSH
53392: CALL_OW 248
53396: PPUSH
53397: CALL_OW 450
53401: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53402: LD_VAR 0 10
53406: PPUSH
53407: LD_INT 1
53409: PPUSH
53410: CALL_OW 275
53414: PUSH
53415: LD_VAR 0 11
53419: PUSH
53420: LD_INT 1
53422: ARRAY
53423: GREATEREQUAL
53424: PUSH
53425: LD_VAR 0 10
53429: PPUSH
53430: LD_INT 2
53432: PPUSH
53433: CALL_OW 275
53437: PUSH
53438: LD_VAR 0 11
53442: PUSH
53443: LD_INT 2
53445: ARRAY
53446: GREATEREQUAL
53447: AND
53448: PUSH
53449: LD_VAR 0 10
53453: PPUSH
53454: LD_INT 3
53456: PPUSH
53457: CALL_OW 275
53461: PUSH
53462: LD_VAR 0 11
53466: PUSH
53467: LD_INT 3
53469: ARRAY
53470: GREATEREQUAL
53471: AND
53472: NOT
53473: IFFALSE 53477
// exit ;
53475: GO 54064
// if GetBType ( depot ) = b_depot then
53477: LD_VAR 0 1
53481: PPUSH
53482: CALL_OW 266
53486: PUSH
53487: LD_INT 0
53489: EQUAL
53490: IFFALSE 53502
// dist := 28 else
53492: LD_ADDR_VAR 0 14
53496: PUSH
53497: LD_INT 28
53499: ST_TO_ADDR
53500: GO 53510
// dist := 36 ;
53502: LD_ADDR_VAR 0 14
53506: PUSH
53507: LD_INT 36
53509: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53510: LD_VAR 0 1
53514: PPUSH
53515: LD_VAR 0 3
53519: PPUSH
53520: LD_VAR 0 4
53524: PPUSH
53525: CALL_OW 297
53529: PUSH
53530: LD_VAR 0 14
53534: GREATER
53535: IFFALSE 53539
// exit ;
53537: GO 54064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53539: LD_ADDR_VAR 0 12
53543: PUSH
53544: LD_VAR 0 2
53548: PPUSH
53549: LD_VAR 0 3
53553: PPUSH
53554: LD_VAR 0 4
53558: PPUSH
53559: LD_VAR 0 5
53563: PPUSH
53564: LD_VAR 0 1
53568: PPUSH
53569: CALL_OW 248
53573: PPUSH
53574: LD_INT 0
53576: PPUSH
53577: CALL 54069 0 6
53581: ST_TO_ADDR
// if not hexes then
53582: LD_VAR 0 12
53586: NOT
53587: IFFALSE 53591
// exit ;
53589: GO 54064
// hex := GetHexInfo ( x , y ) ;
53591: LD_ADDR_VAR 0 15
53595: PUSH
53596: LD_VAR 0 3
53600: PPUSH
53601: LD_VAR 0 4
53605: PPUSH
53606: CALL_OW 546
53610: ST_TO_ADDR
// if hex [ 1 ] then
53611: LD_VAR 0 15
53615: PUSH
53616: LD_INT 1
53618: ARRAY
53619: IFFALSE 53623
// exit ;
53621: GO 54064
// height := hex [ 2 ] ;
53623: LD_ADDR_VAR 0 13
53627: PUSH
53628: LD_VAR 0 15
53632: PUSH
53633: LD_INT 2
53635: ARRAY
53636: ST_TO_ADDR
// for i = 1 to hexes do
53637: LD_ADDR_VAR 0 7
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_VAR 0 12
53651: PUSH
53652: FOR_TO
53653: IFFALSE 53983
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53655: LD_VAR 0 12
53659: PUSH
53660: LD_VAR 0 7
53664: ARRAY
53665: PUSH
53666: LD_INT 1
53668: ARRAY
53669: PPUSH
53670: LD_VAR 0 12
53674: PUSH
53675: LD_VAR 0 7
53679: ARRAY
53680: PUSH
53681: LD_INT 2
53683: ARRAY
53684: PPUSH
53685: CALL_OW 488
53689: NOT
53690: PUSH
53691: LD_VAR 0 12
53695: PUSH
53696: LD_VAR 0 7
53700: ARRAY
53701: PUSH
53702: LD_INT 1
53704: ARRAY
53705: PPUSH
53706: LD_VAR 0 12
53710: PUSH
53711: LD_VAR 0 7
53715: ARRAY
53716: PUSH
53717: LD_INT 2
53719: ARRAY
53720: PPUSH
53721: CALL_OW 428
53725: PUSH
53726: LD_INT 0
53728: GREATER
53729: OR
53730: PUSH
53731: LD_VAR 0 12
53735: PUSH
53736: LD_VAR 0 7
53740: ARRAY
53741: PUSH
53742: LD_INT 1
53744: ARRAY
53745: PPUSH
53746: LD_VAR 0 12
53750: PUSH
53751: LD_VAR 0 7
53755: ARRAY
53756: PUSH
53757: LD_INT 2
53759: ARRAY
53760: PPUSH
53761: CALL_OW 351
53765: OR
53766: IFFALSE 53772
// exit ;
53768: POP
53769: POP
53770: GO 54064
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53772: LD_ADDR_VAR 0 8
53776: PUSH
53777: LD_VAR 0 12
53781: PUSH
53782: LD_VAR 0 7
53786: ARRAY
53787: PUSH
53788: LD_INT 1
53790: ARRAY
53791: PPUSH
53792: LD_VAR 0 12
53796: PUSH
53797: LD_VAR 0 7
53801: ARRAY
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: PPUSH
53807: CALL_OW 546
53811: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53812: LD_VAR 0 8
53816: PUSH
53817: LD_INT 1
53819: ARRAY
53820: PUSH
53821: LD_VAR 0 8
53825: PUSH
53826: LD_INT 2
53828: ARRAY
53829: PUSH
53830: LD_VAR 0 13
53834: PUSH
53835: LD_INT 2
53837: PLUS
53838: GREATER
53839: OR
53840: PUSH
53841: LD_VAR 0 8
53845: PUSH
53846: LD_INT 2
53848: ARRAY
53849: PUSH
53850: LD_VAR 0 13
53854: PUSH
53855: LD_INT 2
53857: MINUS
53858: LESS
53859: OR
53860: PUSH
53861: LD_VAR 0 8
53865: PUSH
53866: LD_INT 3
53868: ARRAY
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 8
53875: PUSH
53876: LD_INT 9
53878: PUSH
53879: LD_INT 10
53881: PUSH
53882: LD_INT 11
53884: PUSH
53885: LD_INT 12
53887: PUSH
53888: LD_INT 13
53890: PUSH
53891: LD_INT 16
53893: PUSH
53894: LD_INT 17
53896: PUSH
53897: LD_INT 18
53899: PUSH
53900: LD_INT 19
53902: PUSH
53903: LD_INT 20
53905: PUSH
53906: LD_INT 21
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: IN
53924: NOT
53925: OR
53926: PUSH
53927: LD_VAR 0 8
53931: PUSH
53932: LD_INT 5
53934: ARRAY
53935: NOT
53936: OR
53937: PUSH
53938: LD_VAR 0 8
53942: PUSH
53943: LD_INT 6
53945: ARRAY
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 7
53955: PUSH
53956: LD_INT 9
53958: PUSH
53959: LD_INT 10
53961: PUSH
53962: LD_INT 11
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: IN
53973: NOT
53974: OR
53975: IFFALSE 53981
// exit ;
53977: POP
53978: POP
53979: GO 54064
// end ;
53981: GO 53652
53983: POP
53984: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53985: LD_VAR 0 9
53989: PPUSH
53990: LD_VAR 0 3
53994: PPUSH
53995: LD_VAR 0 4
53999: PPUSH
54000: LD_INT 20
54002: PPUSH
54003: CALL 45987 0 4
54007: PUSH
54008: LD_INT 4
54010: ARRAY
54011: IFFALSE 54015
// exit ;
54013: GO 54064
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54015: LD_VAR 0 2
54019: PUSH
54020: LD_INT 29
54022: PUSH
54023: LD_INT 30
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: IN
54030: PUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: LD_VAR 0 4
54040: PPUSH
54041: LD_VAR 0 9
54045: PPUSH
54046: CALL_OW 440
54050: NOT
54051: AND
54052: IFFALSE 54056
// exit ;
54054: GO 54064
// result := true ;
54056: LD_ADDR_VAR 0 6
54060: PUSH
54061: LD_INT 1
54063: ST_TO_ADDR
// end ;
54064: LD_VAR 0 6
54068: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54069: LD_INT 0
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
54110: PPUSH
54111: PPUSH
54112: PPUSH
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
// result = [ ] ;
54129: LD_ADDR_VAR 0 7
54133: PUSH
54134: EMPTY
54135: ST_TO_ADDR
// temp_list = [ ] ;
54136: LD_ADDR_VAR 0 9
54140: PUSH
54141: EMPTY
54142: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54143: LD_VAR 0 4
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: LD_INT 4
54162: PUSH
54163: LD_INT 5
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: IN
54174: NOT
54175: PUSH
54176: LD_VAR 0 1
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: IN
54191: PUSH
54192: LD_VAR 0 5
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: IN
54211: NOT
54212: AND
54213: OR
54214: IFFALSE 54218
// exit ;
54216: GO 72609
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54218: LD_VAR 0 1
54222: PUSH
54223: LD_INT 6
54225: PUSH
54226: LD_INT 7
54228: PUSH
54229: LD_INT 8
54231: PUSH
54232: LD_INT 13
54234: PUSH
54235: LD_INT 12
54237: PUSH
54238: LD_INT 15
54240: PUSH
54241: LD_INT 11
54243: PUSH
54244: LD_INT 14
54246: PUSH
54247: LD_INT 10
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: IN
54261: IFFALSE 54271
// btype = b_lab ;
54263: LD_ADDR_VAR 0 1
54267: PUSH
54268: LD_INT 6
54270: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54271: LD_VAR 0 6
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: IN
54290: NOT
54291: PUSH
54292: LD_VAR 0 1
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 6
54311: PUSH
54312: LD_INT 36
54314: PUSH
54315: LD_INT 4
54317: PUSH
54318: LD_INT 5
54320: PUSH
54321: LD_INT 31
54323: PUSH
54324: LD_INT 32
54326: PUSH
54327: LD_INT 33
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: IN
54343: NOT
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_INT 1
54352: EQUAL
54353: AND
54354: OR
54355: PUSH
54356: LD_VAR 0 1
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: IN
54371: NOT
54372: PUSH
54373: LD_VAR 0 6
54377: PUSH
54378: LD_INT 2
54380: EQUAL
54381: AND
54382: OR
54383: IFFALSE 54393
// mode = 0 ;
54385: LD_ADDR_VAR 0 6
54389: PUSH
54390: LD_INT 0
54392: ST_TO_ADDR
// case mode of 0 :
54393: LD_VAR 0 6
54397: PUSH
54398: LD_INT 0
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54406
54404: GO 65859
54406: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54407: LD_ADDR_VAR 0 11
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54600: LD_ADDR_VAR 0 12
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54796: LD_ADDR_VAR 0 13
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 3
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54995: LD_ADDR_VAR 0 14
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55191: LD_ADDR_VAR 0 15
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55384: LD_ADDR_VAR 0 16
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55577: LD_ADDR_VAR 0 17
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55807: LD_ADDR_VAR 0 18
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56037: LD_ADDR_VAR 0 19
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56267: LD_ADDR_VAR 0 20
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56497: LD_ADDR_VAR 0 21
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56727: LD_ADDR_VAR 0 22
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56957: LD_ADDR_VAR 0 23
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57237: LD_ADDR_VAR 0 24
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57513: LD_ADDR_VAR 0 25
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57787: LD_ADDR_VAR 0 26
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58063: LD_ADDR_VAR 0 27
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: NEG
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58343: LD_ADDR_VAR 0 28
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58625: LD_ADDR_VAR 0 29
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58904: LD_ADDR_VAR 0 30
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59182: LD_ADDR_VAR 0 31
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59460: LD_ADDR_VAR 0 32
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59738: LD_ADDR_VAR 0 33
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60017: LD_ADDR_VAR 0 34
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60297: LD_ADDR_VAR 0 35
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60409: LD_ADDR_VAR 0 36
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60521: LD_ADDR_VAR 0 37
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60633: LD_ADDR_VAR 0 38
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60745: LD_ADDR_VAR 0 39
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60857: LD_ADDR_VAR 0 40
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60969: LD_ADDR_VAR 0 41
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: LD_INT 3
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61319: LD_ADDR_VAR 0 42
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: LD_INT 3
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 2
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61669: LD_ADDR_VAR 0 43
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62017: LD_ADDR_VAR 0 44
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 3
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: LD_INT 3
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62367: LD_ADDR_VAR 0 45
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: NEG
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62717: LD_ADDR_VAR 0 46
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 3
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 3
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63065: LD_ADDR_VAR 0 47
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63216: LD_ADDR_VAR 0 48
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63363: LD_ADDR_VAR 0 49
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 2
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63507: LD_ADDR_VAR 0 50
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63651: LD_ADDR_VAR 0 51
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63798: LD_ADDR_VAR 0 52
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63949: LD_ADDR_VAR 0 53
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64179: LD_ADDR_VAR 0 54
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64409: LD_ADDR_VAR 0 55
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: NEG
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64639: LD_ADDR_VAR 0 56
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64869: LD_ADDR_VAR 0 57
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65099: LD_ADDR_VAR 0 58
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65329: LD_ADDR_VAR 0 59
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65417: LD_ADDR_VAR 0 60
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65505: LD_ADDR_VAR 0 61
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65593: LD_ADDR_VAR 0 62
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: LD_INT 1
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: NEG
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65681: LD_ADDR_VAR 0 63
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65769: LD_ADDR_VAR 0 64
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// end ; 1 :
65857: GO 71754
65859: LD_INT 1
65861: DOUBLE
65862: EQUAL
65863: IFTRUE 65867
65865: GO 68490
65867: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65868: LD_ADDR_VAR 0 11
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65912: LD_ADDR_VAR 0 12
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65953: LD_ADDR_VAR 0 13
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 3
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: LD_INT 3
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65993: LD_ADDR_VAR 0 14
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 3
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66034: LD_ADDR_VAR 0 15
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66078: LD_ADDR_VAR 0 16
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: NEG
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 3
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66124: LD_ADDR_VAR 0 17
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66168: LD_ADDR_VAR 0 18
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 3
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 3
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66209: LD_ADDR_VAR 0 19
66213: PUSH
66214: LD_INT 3
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: LD_INT 3
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 3
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66249: LD_ADDR_VAR 0 20
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 3
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: LD_INT 2
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66290: LD_ADDR_VAR 0 21
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66334: LD_ADDR_VAR 0 22
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 3
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 3
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66380: LD_ADDR_VAR 0 23
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 4
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66424: LD_ADDR_VAR 0 24
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 4
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66465: LD_ADDR_VAR 0 25
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 4
66482: PUSH
66483: LD_INT 3
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: LIST
66504: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66505: LD_ADDR_VAR 0 26
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66546: LD_ADDR_VAR 0 27
66550: PUSH
66551: LD_INT 3
66553: NEG
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: NEG
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66590: LD_ADDR_VAR 0 28
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: LD_INT 3
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 3
66609: NEG
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 4
66621: NEG
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66636: LD_ADDR_VAR 0 29
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: LD_INT 2
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 4
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 4
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: LD_INT 5
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 5
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 4
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: LD_INT 6
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 6
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: LD_INT 5
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66791: LD_ADDR_VAR 0 30
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 4
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 4
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 4
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 5
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 6
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 6
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66934: LD_ADDR_VAR 0 31
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 5
67001: PUSH
67002: LD_INT 4
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 5
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: LD_INT 5
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 6
67031: PUSH
67032: LD_INT 5
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 6
67041: PUSH
67042: LD_INT 6
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 5
67051: PUSH
67052: LD_INT 6
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67073: LD_ADDR_VAR 0 32
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 6
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 6
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 5
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67216: LD_ADDR_VAR 0 33
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: LD_INT 1
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 3
67234: NEG
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: NEG
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 4
67268: NEG
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 4
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 4
67291: NEG
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 5
67302: NEG
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 5
67313: NEG
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 6
67336: NEG
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 6
67347: NEG
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67371: LD_ADDR_VAR 0 34
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: LD_INT 2
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 4
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 4
67438: NEG
67439: PUSH
67440: LD_INT 4
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: LD_INT 5
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 5
67462: NEG
67463: PUSH
67464: LD_INT 4
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 5
67474: NEG
67475: PUSH
67476: LD_INT 5
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 5
67486: NEG
67487: PUSH
67488: LD_INT 6
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 6
67498: NEG
67499: PUSH
67500: LD_INT 5
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 6
67510: NEG
67511: PUSH
67512: LD_INT 6
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67534: LD_ADDR_VAR 0 41
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 1
67552: NEG
67553: PUSH
67554: LD_INT 3
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67578: LD_ADDR_VAR 0 42
67582: PUSH
67583: LD_INT 2
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 1
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67619: LD_ADDR_VAR 0 43
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: LD_INT 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: LIST
67658: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67659: LD_ADDR_VAR 0 44
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: LD_INT 3
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67700: LD_ADDR_VAR 0 45
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: LD_INT 1
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 3
67729: NEG
67730: PUSH
67731: LD_INT 1
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: LIST
67743: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67744: LD_ADDR_VAR 0 46
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67790: LD_ADDR_VAR 0 47
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67823: LD_ADDR_VAR 0 48
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67854: LD_ADDR_VAR 0 49
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67883: LD_ADDR_VAR 0 50
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67912: LD_ADDR_VAR 0 51
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: LD_INT 2
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67943: LD_ADDR_VAR 0 52
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 3
67962: NEG
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67976: LD_ADDR_VAR 0 53
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: LD_INT 3
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 3
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 1
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68020: LD_ADDR_VAR 0 54
68024: PUSH
68025: LD_INT 2
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68061: LD_ADDR_VAR 0 55
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: LD_INT 2
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68101: LD_ADDR_VAR 0 56
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: LD_INT 2
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68142: LD_ADDR_VAR 0 57
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: NEG
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68186: LD_ADDR_VAR 0 58
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: NEG
68206: PUSH
68207: LD_INT 2
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: NEG
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68232: LD_ADDR_VAR 0 59
68236: PUSH
68237: LD_INT 1
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: LD_INT 2
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68276: LD_ADDR_VAR 0 60
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68317: LD_ADDR_VAR 0 61
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: LIST
68356: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68357: LD_ADDR_VAR 0 62
68361: PUSH
68362: LD_INT 1
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 2
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68398: LD_ADDR_VAR 0 63
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 2
68416: NEG
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: LIST
68441: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68442: LD_ADDR_VAR 0 64
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: LD_INT 2
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 2
68461: NEG
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: LD_INT 2
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: LIST
68487: ST_TO_ADDR
// end ; 2 :
68488: GO 71754
68490: LD_INT 2
68492: DOUBLE
68493: EQUAL
68494: IFTRUE 68498
68496: GO 71753
68498: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68499: LD_ADDR_VAR 0 29
68503: PUSH
68504: LD_INT 4
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 4
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 5
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 5
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: PUSH
68548: LD_INT 1
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 3
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 5
68589: PUSH
68590: LD_INT 2
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: LD_INT 3
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: LD_INT 4
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 4
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 2
68679: PUSH
68680: LD_INT 4
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: LD_INT 4
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: LD_INT 5
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 5
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: LD_INT 4
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: LD_INT 5
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 4
68838: NEG
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 4
68849: NEG
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 4
68861: NEG
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 2
68873: NEG
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: LD_INT 4
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 4
68896: NEG
68897: PUSH
68898: LD_INT 5
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: LD_INT 4
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 5
68956: NEG
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: LD_INT 5
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69037: LD_ADDR_VAR 0 30
69041: PUSH
69042: LD_INT 4
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 4
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 5
69064: PUSH
69065: LD_INT 4
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 5
69074: PUSH
69075: LD_INT 5
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 5
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: PUSH
69125: LD_INT 5
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: LD_INT 4
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 4
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 3
69250: NEG
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 5
69283: NEG
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 5
69294: NEG
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 5
69306: NEG
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: NEG
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: LD_INT 3
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: LD_INT 4
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 2
69353: NEG
69354: PUSH
69355: LD_INT 3
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: LD_INT 2
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: LD_INT 2
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 4
69401: NEG
69402: PUSH
69403: LD_INT 4
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 4
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: NEG
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 5
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: LD_INT 4
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: LD_INT 4
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 2
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 2
69527: NEG
69528: PUSH
69529: LD_INT 5
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69584: LD_ADDR_VAR 0 31
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: LD_INT 3
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 1
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 1
69621: PUSH
69622: LD_INT 5
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: LD_INT 5
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: LD_INT 4
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: LD_INT 5
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 3
69684: NEG
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 2
69707: NEG
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 2
69718: NEG
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: LD_INT 1
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 4
69740: NEG
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 4
69751: NEG
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 4
69763: NEG
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 2
69775: NEG
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 4
69786: NEG
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 4
69798: NEG
69799: PUSH
69800: LD_INT 5
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 3
69810: NEG
69811: PUSH
69812: LD_INT 4
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 3
69822: NEG
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 4
69834: NEG
69835: PUSH
69836: LD_INT 3
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 5
69846: NEG
69847: PUSH
69848: LD_INT 4
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 5
69858: NEG
69859: PUSH
69860: LD_INT 5
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 3
69870: NEG
69871: PUSH
69872: LD_INT 5
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 5
69882: NEG
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: LD_INT 3
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: LD_INT 4
69908: NEG
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 1
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 1
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 0
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: LD_INT 4
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: LD_INT 2
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: NEG
69985: PUSH
69986: LD_INT 4
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 4
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 5
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 5
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: LD_INT 1
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 5
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70134: LD_ADDR_VAR 0 32
70138: PUSH
70139: LD_INT 4
70141: NEG
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 3
70175: NEG
70176: PUSH
70177: LD_INT 1
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 4
70186: NEG
70187: PUSH
70188: LD_INT 1
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 5
70197: NEG
70198: PUSH
70199: LD_INT 0
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 5
70208: NEG
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 5
70220: NEG
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 3
70232: NEG
70233: PUSH
70234: LD_INT 2
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: NEG
70244: PUSH
70245: LD_INT 3
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: LD_INT 4
70259: NEG
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: LD_INT 3
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: NEG
70280: PUSH
70281: LD_INT 2
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: NEG
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 4
70303: NEG
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 4
70315: NEG
70316: PUSH
70317: LD_INT 4
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 2
70327: NEG
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 4
70339: NEG
70340: PUSH
70341: LD_INT 2
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 0
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 5
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: LD_INT 4
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: LD_INT 3
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 3
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: LD_INT 4
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 1
70418: NEG
70419: PUSH
70420: LD_INT 5
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: LD_INT 5
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 3
70463: PUSH
70464: LD_INT 1
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 4
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 4
70484: PUSH
70485: LD_INT 1
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 3
70494: PUSH
70495: LD_INT 1
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 2
70514: PUSH
70515: LD_INT 1
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: LD_INT 2
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 4
70536: PUSH
70537: LD_INT 2
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 4
70556: PUSH
70557: LD_INT 3
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: LD_INT 4
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: LD_INT 5
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 4
70586: PUSH
70587: LD_INT 5
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 3
70596: PUSH
70597: LD_INT 4
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 3
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 5
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 3
70626: PUSH
70627: LD_INT 5
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70681: LD_ADDR_VAR 0 33
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: LD_INT 4
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 4
70700: NEG
70701: PUSH
70702: LD_INT 5
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: LD_INT 4
70716: NEG
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: LD_INT 3
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: NEG
70737: PUSH
70738: LD_INT 3
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 5
70748: NEG
70749: PUSH
70750: LD_INT 4
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 5
70760: NEG
70761: PUSH
70762: LD_INT 5
70764: NEG
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 3
70772: NEG
70773: PUSH
70774: LD_INT 5
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 5
70784: NEG
70785: PUSH
70786: LD_INT 3
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: LD_INT 3
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: LD_INT 4
70810: NEG
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 1
70818: PUSH
70819: LD_INT 3
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: LD_INT 2
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: LD_INT 2
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 1
70863: NEG
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: LD_INT 2
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 2
70886: NEG
70887: PUSH
70888: LD_INT 4
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 4
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 5
70919: PUSH
70920: LD_INT 0
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 5
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 4
70939: PUSH
70940: LD_INT 1
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: PUSH
70971: LD_INT 2
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 5
70981: PUSH
70982: LD_INT 2
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 3
70991: PUSH
70992: LD_INT 3
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: LD_INT 2
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 4
71011: PUSH
71012: LD_INT 3
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 4
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 3
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 4
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: LD_INT 4
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: LD_INT 3
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: LD_INT 4
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: LD_INT 5
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 0
71121: PUSH
71122: LD_INT 5
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: LD_INT 4
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 1
71142: NEG
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: LD_INT 5
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: NEG
71164: PUSH
71165: LD_INT 3
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71219: LD_ADDR_VAR 0 34
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: LD_INT 4
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: LD_INT 5
71240: NEG
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 1
71248: PUSH
71249: LD_INT 4
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 1
71259: PUSH
71260: LD_INT 3
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: LD_INT 3
71273: NEG
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: LD_INT 4
71285: NEG
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 1
71293: NEG
71294: PUSH
71295: LD_INT 5
71297: NEG
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: LD_INT 3
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 2
71316: NEG
71317: PUSH
71318: LD_INT 5
71320: NEG
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 3
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 3
71338: PUSH
71339: LD_INT 1
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 4
71349: PUSH
71350: LD_INT 0
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 4
71359: PUSH
71360: LD_INT 1
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: LD_INT 1
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 2
71389: PUSH
71390: LD_INT 1
71392: NEG
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 2
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 4
71411: PUSH
71412: LD_INT 2
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 4
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 4
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 5
71441: PUSH
71442: LD_INT 4
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 5
71451: PUSH
71452: LD_INT 5
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 4
71461: PUSH
71462: LD_INT 5
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 3
71471: PUSH
71472: LD_INT 4
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 3
71481: PUSH
71482: LD_INT 3
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 5
71491: PUSH
71492: LD_INT 3
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 3
71501: PUSH
71502: LD_INT 5
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: LD_INT 3
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 3
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 1
71541: PUSH
71542: LD_INT 4
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 4
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 1
71561: NEG
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 2
71583: PUSH
71584: LD_INT 4
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 2
71593: NEG
71594: PUSH
71595: LD_INT 2
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 4
71604: NEG
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 4
71615: NEG
71616: PUSH
71617: LD_INT 1
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 3
71627: NEG
71628: PUSH
71629: LD_INT 0
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 3
71638: NEG
71639: PUSH
71640: LD_INT 1
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 4
71649: NEG
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 5
71660: NEG
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 5
71671: NEG
71672: PUSH
71673: LD_INT 1
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 5
71683: NEG
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 3
71695: NEG
71696: PUSH
71697: LD_INT 2
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: ST_TO_ADDR
// end ; end ;
71751: GO 71754
71753: POP
// case btype of b_depot , b_warehouse :
71754: LD_VAR 0 1
71758: PUSH
71759: LD_INT 0
71761: DOUBLE
71762: EQUAL
71763: IFTRUE 71773
71765: LD_INT 1
71767: DOUBLE
71768: EQUAL
71769: IFTRUE 71773
71771: GO 71974
71773: POP
// case nation of nation_american :
71774: LD_VAR 0 5
71778: PUSH
71779: LD_INT 1
71781: DOUBLE
71782: EQUAL
71783: IFTRUE 71787
71785: GO 71843
71787: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71788: LD_ADDR_VAR 0 9
71792: PUSH
71793: LD_VAR 0 11
71797: PUSH
71798: LD_VAR 0 12
71802: PUSH
71803: LD_VAR 0 13
71807: PUSH
71808: LD_VAR 0 14
71812: PUSH
71813: LD_VAR 0 15
71817: PUSH
71818: LD_VAR 0 16
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 4
71835: PUSH
71836: LD_INT 1
71838: PLUS
71839: ARRAY
71840: ST_TO_ADDR
71841: GO 71972
71843: LD_INT 2
71845: DOUBLE
71846: EQUAL
71847: IFTRUE 71851
71849: GO 71907
71851: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71852: LD_ADDR_VAR 0 9
71856: PUSH
71857: LD_VAR 0 17
71861: PUSH
71862: LD_VAR 0 18
71866: PUSH
71867: LD_VAR 0 19
71871: PUSH
71872: LD_VAR 0 20
71876: PUSH
71877: LD_VAR 0 21
71881: PUSH
71882: LD_VAR 0 22
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: PUSH
71895: LD_VAR 0 4
71899: PUSH
71900: LD_INT 1
71902: PLUS
71903: ARRAY
71904: ST_TO_ADDR
71905: GO 71972
71907: LD_INT 3
71909: DOUBLE
71910: EQUAL
71911: IFTRUE 71915
71913: GO 71971
71915: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71916: LD_ADDR_VAR 0 9
71920: PUSH
71921: LD_VAR 0 23
71925: PUSH
71926: LD_VAR 0 24
71930: PUSH
71931: LD_VAR 0 25
71935: PUSH
71936: LD_VAR 0 26
71940: PUSH
71941: LD_VAR 0 27
71945: PUSH
71946: LD_VAR 0 28
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: LD_VAR 0 4
71963: PUSH
71964: LD_INT 1
71966: PLUS
71967: ARRAY
71968: ST_TO_ADDR
71969: GO 71972
71971: POP
71972: GO 72527
71974: LD_INT 2
71976: DOUBLE
71977: EQUAL
71978: IFTRUE 71988
71980: LD_INT 3
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 71988
71986: GO 72044
71988: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71989: LD_ADDR_VAR 0 9
71993: PUSH
71994: LD_VAR 0 29
71998: PUSH
71999: LD_VAR 0 30
72003: PUSH
72004: LD_VAR 0 31
72008: PUSH
72009: LD_VAR 0 32
72013: PUSH
72014: LD_VAR 0 33
72018: PUSH
72019: LD_VAR 0 34
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: LD_VAR 0 4
72036: PUSH
72037: LD_INT 1
72039: PLUS
72040: ARRAY
72041: ST_TO_ADDR
72042: GO 72527
72044: LD_INT 16
72046: DOUBLE
72047: EQUAL
72048: IFTRUE 72106
72050: LD_INT 17
72052: DOUBLE
72053: EQUAL
72054: IFTRUE 72106
72056: LD_INT 18
72058: DOUBLE
72059: EQUAL
72060: IFTRUE 72106
72062: LD_INT 19
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72106
72068: LD_INT 22
72070: DOUBLE
72071: EQUAL
72072: IFTRUE 72106
72074: LD_INT 20
72076: DOUBLE
72077: EQUAL
72078: IFTRUE 72106
72080: LD_INT 21
72082: DOUBLE
72083: EQUAL
72084: IFTRUE 72106
72086: LD_INT 23
72088: DOUBLE
72089: EQUAL
72090: IFTRUE 72106
72092: LD_INT 24
72094: DOUBLE
72095: EQUAL
72096: IFTRUE 72106
72098: LD_INT 25
72100: DOUBLE
72101: EQUAL
72102: IFTRUE 72106
72104: GO 72162
72106: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72107: LD_ADDR_VAR 0 9
72111: PUSH
72112: LD_VAR 0 35
72116: PUSH
72117: LD_VAR 0 36
72121: PUSH
72122: LD_VAR 0 37
72126: PUSH
72127: LD_VAR 0 38
72131: PUSH
72132: LD_VAR 0 39
72136: PUSH
72137: LD_VAR 0 40
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: PUSH
72150: LD_VAR 0 4
72154: PUSH
72155: LD_INT 1
72157: PLUS
72158: ARRAY
72159: ST_TO_ADDR
72160: GO 72527
72162: LD_INT 6
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72218
72168: LD_INT 7
72170: DOUBLE
72171: EQUAL
72172: IFTRUE 72218
72174: LD_INT 8
72176: DOUBLE
72177: EQUAL
72178: IFTRUE 72218
72180: LD_INT 13
72182: DOUBLE
72183: EQUAL
72184: IFTRUE 72218
72186: LD_INT 12
72188: DOUBLE
72189: EQUAL
72190: IFTRUE 72218
72192: LD_INT 15
72194: DOUBLE
72195: EQUAL
72196: IFTRUE 72218
72198: LD_INT 11
72200: DOUBLE
72201: EQUAL
72202: IFTRUE 72218
72204: LD_INT 14
72206: DOUBLE
72207: EQUAL
72208: IFTRUE 72218
72210: LD_INT 10
72212: DOUBLE
72213: EQUAL
72214: IFTRUE 72218
72216: GO 72274
72218: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72219: LD_ADDR_VAR 0 9
72223: PUSH
72224: LD_VAR 0 41
72228: PUSH
72229: LD_VAR 0 42
72233: PUSH
72234: LD_VAR 0 43
72238: PUSH
72239: LD_VAR 0 44
72243: PUSH
72244: LD_VAR 0 45
72248: PUSH
72249: LD_VAR 0 46
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: PUSH
72262: LD_VAR 0 4
72266: PUSH
72267: LD_INT 1
72269: PLUS
72270: ARRAY
72271: ST_TO_ADDR
72272: GO 72527
72274: LD_INT 36
72276: DOUBLE
72277: EQUAL
72278: IFTRUE 72282
72280: GO 72338
72282: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72283: LD_ADDR_VAR 0 9
72287: PUSH
72288: LD_VAR 0 47
72292: PUSH
72293: LD_VAR 0 48
72297: PUSH
72298: LD_VAR 0 49
72302: PUSH
72303: LD_VAR 0 50
72307: PUSH
72308: LD_VAR 0 51
72312: PUSH
72313: LD_VAR 0 52
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: PUSH
72326: LD_VAR 0 4
72330: PUSH
72331: LD_INT 1
72333: PLUS
72334: ARRAY
72335: ST_TO_ADDR
72336: GO 72527
72338: LD_INT 4
72340: DOUBLE
72341: EQUAL
72342: IFTRUE 72364
72344: LD_INT 5
72346: DOUBLE
72347: EQUAL
72348: IFTRUE 72364
72350: LD_INT 34
72352: DOUBLE
72353: EQUAL
72354: IFTRUE 72364
72356: LD_INT 37
72358: DOUBLE
72359: EQUAL
72360: IFTRUE 72364
72362: GO 72420
72364: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72365: LD_ADDR_VAR 0 9
72369: PUSH
72370: LD_VAR 0 53
72374: PUSH
72375: LD_VAR 0 54
72379: PUSH
72380: LD_VAR 0 55
72384: PUSH
72385: LD_VAR 0 56
72389: PUSH
72390: LD_VAR 0 57
72394: PUSH
72395: LD_VAR 0 58
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: PUSH
72408: LD_VAR 0 4
72412: PUSH
72413: LD_INT 1
72415: PLUS
72416: ARRAY
72417: ST_TO_ADDR
72418: GO 72527
72420: LD_INT 31
72422: DOUBLE
72423: EQUAL
72424: IFTRUE 72470
72426: LD_INT 32
72428: DOUBLE
72429: EQUAL
72430: IFTRUE 72470
72432: LD_INT 33
72434: DOUBLE
72435: EQUAL
72436: IFTRUE 72470
72438: LD_INT 27
72440: DOUBLE
72441: EQUAL
72442: IFTRUE 72470
72444: LD_INT 26
72446: DOUBLE
72447: EQUAL
72448: IFTRUE 72470
72450: LD_INT 28
72452: DOUBLE
72453: EQUAL
72454: IFTRUE 72470
72456: LD_INT 29
72458: DOUBLE
72459: EQUAL
72460: IFTRUE 72470
72462: LD_INT 30
72464: DOUBLE
72465: EQUAL
72466: IFTRUE 72470
72468: GO 72526
72470: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72471: LD_ADDR_VAR 0 9
72475: PUSH
72476: LD_VAR 0 59
72480: PUSH
72481: LD_VAR 0 60
72485: PUSH
72486: LD_VAR 0 61
72490: PUSH
72491: LD_VAR 0 62
72495: PUSH
72496: LD_VAR 0 63
72500: PUSH
72501: LD_VAR 0 64
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: PUSH
72514: LD_VAR 0 4
72518: PUSH
72519: LD_INT 1
72521: PLUS
72522: ARRAY
72523: ST_TO_ADDR
72524: GO 72527
72526: POP
// temp_list2 = [ ] ;
72527: LD_ADDR_VAR 0 10
72531: PUSH
72532: EMPTY
72533: ST_TO_ADDR
// for i in temp_list do
72534: LD_ADDR_VAR 0 8
72538: PUSH
72539: LD_VAR 0 9
72543: PUSH
72544: FOR_IN
72545: IFFALSE 72597
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72547: LD_ADDR_VAR 0 10
72551: PUSH
72552: LD_VAR 0 10
72556: PUSH
72557: LD_VAR 0 8
72561: PUSH
72562: LD_INT 1
72564: ARRAY
72565: PUSH
72566: LD_VAR 0 2
72570: PLUS
72571: PUSH
72572: LD_VAR 0 8
72576: PUSH
72577: LD_INT 2
72579: ARRAY
72580: PUSH
72581: LD_VAR 0 3
72585: PLUS
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: EMPTY
72592: LIST
72593: ADD
72594: ST_TO_ADDR
72595: GO 72544
72597: POP
72598: POP
// result = temp_list2 ;
72599: LD_ADDR_VAR 0 7
72603: PUSH
72604: LD_VAR 0 10
72608: ST_TO_ADDR
// end ;
72609: LD_VAR 0 7
72613: RET
// export function EnemyInRange ( unit , dist ) ; begin
72614: LD_INT 0
72616: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72617: LD_ADDR_VAR 0 3
72621: PUSH
72622: LD_VAR 0 1
72626: PPUSH
72627: CALL_OW 255
72631: PPUSH
72632: LD_VAR 0 1
72636: PPUSH
72637: CALL_OW 250
72641: PPUSH
72642: LD_VAR 0 1
72646: PPUSH
72647: CALL_OW 251
72651: PPUSH
72652: LD_VAR 0 2
72656: PPUSH
72657: CALL 45987 0 4
72661: PUSH
72662: LD_INT 4
72664: ARRAY
72665: ST_TO_ADDR
// end ;
72666: LD_VAR 0 3
72670: RET
// export function PlayerSeeMe ( unit ) ; begin
72671: LD_INT 0
72673: PPUSH
// result := See ( your_side , unit ) ;
72674: LD_ADDR_VAR 0 2
72678: PUSH
72679: LD_OWVAR 2
72683: PPUSH
72684: LD_VAR 0 1
72688: PPUSH
72689: CALL_OW 292
72693: ST_TO_ADDR
// end ;
72694: LD_VAR 0 2
72698: RET
// export function ReverseDir ( unit ) ; begin
72699: LD_INT 0
72701: PPUSH
// if not unit then
72702: LD_VAR 0 1
72706: NOT
72707: IFFALSE 72711
// exit ;
72709: GO 72734
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72711: LD_ADDR_VAR 0 2
72715: PUSH
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 254
72725: PUSH
72726: LD_INT 3
72728: PLUS
72729: PUSH
72730: LD_INT 6
72732: MOD
72733: ST_TO_ADDR
// end ;
72734: LD_VAR 0 2
72738: RET
// export function ReverseArray ( array ) ; var i ; begin
72739: LD_INT 0
72741: PPUSH
72742: PPUSH
// if not array then
72743: LD_VAR 0 1
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 72807
// result := [ ] ;
72752: LD_ADDR_VAR 0 2
72756: PUSH
72757: EMPTY
72758: ST_TO_ADDR
// for i := array downto 1 do
72759: LD_ADDR_VAR 0 3
72763: PUSH
72764: DOUBLE
72765: LD_VAR 0 1
72769: INC
72770: ST_TO_ADDR
72771: LD_INT 1
72773: PUSH
72774: FOR_DOWNTO
72775: IFFALSE 72805
// result := Join ( result , array [ i ] ) ;
72777: LD_ADDR_VAR 0 2
72781: PUSH
72782: LD_VAR 0 2
72786: PPUSH
72787: LD_VAR 0 1
72791: PUSH
72792: LD_VAR 0 3
72796: ARRAY
72797: PPUSH
72798: CALL 77450 0 2
72802: ST_TO_ADDR
72803: GO 72774
72805: POP
72806: POP
// end ;
72807: LD_VAR 0 2
72811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72812: LD_INT 0
72814: PPUSH
72815: PPUSH
72816: PPUSH
72817: PPUSH
72818: PPUSH
72819: PPUSH
// if not unit or not hexes then
72820: LD_VAR 0 1
72824: NOT
72825: PUSH
72826: LD_VAR 0 2
72830: NOT
72831: OR
72832: IFFALSE 72836
// exit ;
72834: GO 72959
// dist := 9999 ;
72836: LD_ADDR_VAR 0 5
72840: PUSH
72841: LD_INT 9999
72843: ST_TO_ADDR
// for i = 1 to hexes do
72844: LD_ADDR_VAR 0 4
72848: PUSH
72849: DOUBLE
72850: LD_INT 1
72852: DEC
72853: ST_TO_ADDR
72854: LD_VAR 0 2
72858: PUSH
72859: FOR_TO
72860: IFFALSE 72947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72862: LD_ADDR_VAR 0 6
72866: PUSH
72867: LD_VAR 0 1
72871: PPUSH
72872: LD_VAR 0 2
72876: PUSH
72877: LD_VAR 0 4
72881: ARRAY
72882: PUSH
72883: LD_INT 1
72885: ARRAY
72886: PPUSH
72887: LD_VAR 0 2
72891: PUSH
72892: LD_VAR 0 4
72896: ARRAY
72897: PUSH
72898: LD_INT 2
72900: ARRAY
72901: PPUSH
72902: CALL_OW 297
72906: ST_TO_ADDR
// if tdist < dist then
72907: LD_VAR 0 6
72911: PUSH
72912: LD_VAR 0 5
72916: LESS
72917: IFFALSE 72945
// begin hex := hexes [ i ] ;
72919: LD_ADDR_VAR 0 8
72923: PUSH
72924: LD_VAR 0 2
72928: PUSH
72929: LD_VAR 0 4
72933: ARRAY
72934: ST_TO_ADDR
// dist := tdist ;
72935: LD_ADDR_VAR 0 5
72939: PUSH
72940: LD_VAR 0 6
72944: ST_TO_ADDR
// end ; end ;
72945: GO 72859
72947: POP
72948: POP
// result := hex ;
72949: LD_ADDR_VAR 0 3
72953: PUSH
72954: LD_VAR 0 8
72958: ST_TO_ADDR
// end ;
72959: LD_VAR 0 3
72963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72964: LD_INT 0
72966: PPUSH
72967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72968: LD_VAR 0 1
72972: NOT
72973: PUSH
72974: LD_VAR 0 1
72978: PUSH
72979: LD_INT 21
72981: PUSH
72982: LD_INT 2
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 23
72991: PUSH
72992: LD_INT 2
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PPUSH
73003: CALL_OW 69
73007: IN
73008: NOT
73009: OR
73010: IFFALSE 73014
// exit ;
73012: GO 73061
// for i = 1 to 3 do
73014: LD_ADDR_VAR 0 3
73018: PUSH
73019: DOUBLE
73020: LD_INT 1
73022: DEC
73023: ST_TO_ADDR
73024: LD_INT 3
73026: PUSH
73027: FOR_TO
73028: IFFALSE 73059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73030: LD_VAR 0 1
73034: PPUSH
73035: CALL_OW 250
73039: PPUSH
73040: LD_VAR 0 1
73044: PPUSH
73045: CALL_OW 251
73049: PPUSH
73050: LD_INT 1
73052: PPUSH
73053: CALL_OW 453
73057: GO 73027
73059: POP
73060: POP
// end ;
73061: LD_VAR 0 2
73065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73066: LD_INT 0
73068: PPUSH
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
73073: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73074: LD_VAR 0 1
73078: NOT
73079: PUSH
73080: LD_VAR 0 2
73084: NOT
73085: OR
73086: PUSH
73087: LD_VAR 0 1
73091: PPUSH
73092: CALL_OW 314
73096: OR
73097: IFFALSE 73101
// exit ;
73099: GO 73568
// if GetLives ( i ) < 250 then
73101: LD_VAR 0 4
73105: PPUSH
73106: CALL_OW 256
73110: PUSH
73111: LD_INT 250
73113: LESS
73114: IFFALSE 73127
// begin ComAutodestruct ( i ) ;
73116: LD_VAR 0 4
73120: PPUSH
73121: CALL 72964 0 1
// exit ;
73125: GO 73568
// end ; x := GetX ( enemy_unit ) ;
73127: LD_ADDR_VAR 0 7
73131: PUSH
73132: LD_VAR 0 2
73136: PPUSH
73137: CALL_OW 250
73141: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73142: LD_ADDR_VAR 0 8
73146: PUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: CALL_OW 251
73156: ST_TO_ADDR
// if not x or not y then
73157: LD_VAR 0 7
73161: NOT
73162: PUSH
73163: LD_VAR 0 8
73167: NOT
73168: OR
73169: IFFALSE 73173
// exit ;
73171: GO 73568
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73173: LD_ADDR_VAR 0 6
73177: PUSH
73178: LD_VAR 0 7
73182: PPUSH
73183: LD_INT 0
73185: PPUSH
73186: LD_INT 4
73188: PPUSH
73189: CALL_OW 272
73193: PUSH
73194: LD_VAR 0 8
73198: PPUSH
73199: LD_INT 0
73201: PPUSH
73202: LD_INT 4
73204: PPUSH
73205: CALL_OW 273
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_VAR 0 7
73218: PPUSH
73219: LD_INT 1
73221: PPUSH
73222: LD_INT 4
73224: PPUSH
73225: CALL_OW 272
73229: PUSH
73230: LD_VAR 0 8
73234: PPUSH
73235: LD_INT 1
73237: PPUSH
73238: LD_INT 4
73240: PPUSH
73241: CALL_OW 273
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_VAR 0 7
73254: PPUSH
73255: LD_INT 2
73257: PPUSH
73258: LD_INT 4
73260: PPUSH
73261: CALL_OW 272
73265: PUSH
73266: LD_VAR 0 8
73270: PPUSH
73271: LD_INT 2
73273: PPUSH
73274: LD_INT 4
73276: PPUSH
73277: CALL_OW 273
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_VAR 0 7
73290: PPUSH
73291: LD_INT 3
73293: PPUSH
73294: LD_INT 4
73296: PPUSH
73297: CALL_OW 272
73301: PUSH
73302: LD_VAR 0 8
73306: PPUSH
73307: LD_INT 3
73309: PPUSH
73310: LD_INT 4
73312: PPUSH
73313: CALL_OW 273
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_VAR 0 7
73326: PPUSH
73327: LD_INT 4
73329: PPUSH
73330: LD_INT 4
73332: PPUSH
73333: CALL_OW 272
73337: PUSH
73338: LD_VAR 0 8
73342: PPUSH
73343: LD_INT 4
73345: PPUSH
73346: LD_INT 4
73348: PPUSH
73349: CALL_OW 273
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_VAR 0 7
73362: PPUSH
73363: LD_INT 5
73365: PPUSH
73366: LD_INT 4
73368: PPUSH
73369: CALL_OW 272
73373: PUSH
73374: LD_VAR 0 8
73378: PPUSH
73379: LD_INT 5
73381: PPUSH
73382: LD_INT 4
73384: PPUSH
73385: CALL_OW 273
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: ST_TO_ADDR
// for i = tmp downto 1 do
73402: LD_ADDR_VAR 0 4
73406: PUSH
73407: DOUBLE
73408: LD_VAR 0 6
73412: INC
73413: ST_TO_ADDR
73414: LD_INT 1
73416: PUSH
73417: FOR_DOWNTO
73418: IFFALSE 73519
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73420: LD_VAR 0 6
73424: PUSH
73425: LD_VAR 0 4
73429: ARRAY
73430: PUSH
73431: LD_INT 1
73433: ARRAY
73434: PPUSH
73435: LD_VAR 0 6
73439: PUSH
73440: LD_VAR 0 4
73444: ARRAY
73445: PUSH
73446: LD_INT 2
73448: ARRAY
73449: PPUSH
73450: CALL_OW 488
73454: NOT
73455: PUSH
73456: LD_VAR 0 6
73460: PUSH
73461: LD_VAR 0 4
73465: ARRAY
73466: PUSH
73467: LD_INT 1
73469: ARRAY
73470: PPUSH
73471: LD_VAR 0 6
73475: PUSH
73476: LD_VAR 0 4
73480: ARRAY
73481: PUSH
73482: LD_INT 2
73484: ARRAY
73485: PPUSH
73486: CALL_OW 428
73490: PUSH
73491: LD_INT 0
73493: NONEQUAL
73494: OR
73495: IFFALSE 73517
// tmp := Delete ( tmp , i ) ;
73497: LD_ADDR_VAR 0 6
73501: PUSH
73502: LD_VAR 0 6
73506: PPUSH
73507: LD_VAR 0 4
73511: PPUSH
73512: CALL_OW 3
73516: ST_TO_ADDR
73517: GO 73417
73519: POP
73520: POP
// j := GetClosestHex ( unit , tmp ) ;
73521: LD_ADDR_VAR 0 5
73525: PUSH
73526: LD_VAR 0 1
73530: PPUSH
73531: LD_VAR 0 6
73535: PPUSH
73536: CALL 72812 0 2
73540: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73541: LD_VAR 0 1
73545: PPUSH
73546: LD_VAR 0 5
73550: PUSH
73551: LD_INT 1
73553: ARRAY
73554: PPUSH
73555: LD_VAR 0 5
73559: PUSH
73560: LD_INT 2
73562: ARRAY
73563: PPUSH
73564: CALL_OW 111
// end ;
73568: LD_VAR 0 3
73572: RET
// export function PrepareApemanSoldier ( ) ; begin
73573: LD_INT 0
73575: PPUSH
// uc_nation := 0 ;
73576: LD_ADDR_OWVAR 21
73580: PUSH
73581: LD_INT 0
73583: ST_TO_ADDR
// hc_sex := sex_male ;
73584: LD_ADDR_OWVAR 27
73588: PUSH
73589: LD_INT 1
73591: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73592: LD_ADDR_OWVAR 28
73596: PUSH
73597: LD_INT 15
73599: ST_TO_ADDR
// hc_gallery :=  ;
73600: LD_ADDR_OWVAR 33
73604: PUSH
73605: LD_STRING 
73607: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73608: LD_ADDR_OWVAR 31
73612: PUSH
73613: LD_INT 0
73615: PPUSH
73616: LD_INT 3
73618: PPUSH
73619: CALL_OW 12
73623: PUSH
73624: LD_INT 0
73626: PPUSH
73627: LD_INT 3
73629: PPUSH
73630: CALL_OW 12
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: ST_TO_ADDR
// end ;
73647: LD_VAR 0 1
73651: RET
// export function PrepareApemanEngineer ( ) ; begin
73652: LD_INT 0
73654: PPUSH
// uc_nation := 0 ;
73655: LD_ADDR_OWVAR 21
73659: PUSH
73660: LD_INT 0
73662: ST_TO_ADDR
// hc_sex := sex_male ;
73663: LD_ADDR_OWVAR 27
73667: PUSH
73668: LD_INT 1
73670: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73671: LD_ADDR_OWVAR 28
73675: PUSH
73676: LD_INT 16
73678: ST_TO_ADDR
// hc_gallery :=  ;
73679: LD_ADDR_OWVAR 33
73683: PUSH
73684: LD_STRING 
73686: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73687: LD_ADDR_OWVAR 31
73691: PUSH
73692: LD_INT 0
73694: PPUSH
73695: LD_INT 3
73697: PPUSH
73698: CALL_OW 12
73702: PUSH
73703: LD_INT 0
73705: PPUSH
73706: LD_INT 3
73708: PPUSH
73709: CALL_OW 12
73713: PUSH
73714: LD_INT 0
73716: PUSH
73717: LD_INT 0
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: ST_TO_ADDR
// end ;
73726: LD_VAR 0 1
73730: RET
// export function PrepareApeman ( agressivity ) ; begin
73731: LD_INT 0
73733: PPUSH
// uc_side := 0 ;
73734: LD_ADDR_OWVAR 20
73738: PUSH
73739: LD_INT 0
73741: ST_TO_ADDR
// uc_nation := 0 ;
73742: LD_ADDR_OWVAR 21
73746: PUSH
73747: LD_INT 0
73749: ST_TO_ADDR
// hc_sex := sex_male ;
73750: LD_ADDR_OWVAR 27
73754: PUSH
73755: LD_INT 1
73757: ST_TO_ADDR
// hc_class := class_apeman ;
73758: LD_ADDR_OWVAR 28
73762: PUSH
73763: LD_INT 12
73765: ST_TO_ADDR
// hc_gallery :=  ;
73766: LD_ADDR_OWVAR 33
73770: PUSH
73771: LD_STRING 
73773: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73774: LD_ADDR_OWVAR 35
73778: PUSH
73779: LD_VAR 0 1
73783: NEG
73784: PPUSH
73785: LD_VAR 0 1
73789: PPUSH
73790: CALL_OW 12
73794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73795: LD_ADDR_OWVAR 31
73799: PUSH
73800: LD_INT 0
73802: PPUSH
73803: LD_INT 3
73805: PPUSH
73806: CALL_OW 12
73810: PUSH
73811: LD_INT 0
73813: PPUSH
73814: LD_INT 3
73816: PPUSH
73817: CALL_OW 12
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: LD_INT 0
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: ST_TO_ADDR
// end ;
73834: LD_VAR 0 2
73838: RET
// export function PrepareTiger ( agressivity ) ; begin
73839: LD_INT 0
73841: PPUSH
// uc_side := 0 ;
73842: LD_ADDR_OWVAR 20
73846: PUSH
73847: LD_INT 0
73849: ST_TO_ADDR
// uc_nation := 0 ;
73850: LD_ADDR_OWVAR 21
73854: PUSH
73855: LD_INT 0
73857: ST_TO_ADDR
// hc_class := class_tiger ;
73858: LD_ADDR_OWVAR 28
73862: PUSH
73863: LD_INT 14
73865: ST_TO_ADDR
// hc_gallery :=  ;
73866: LD_ADDR_OWVAR 33
73870: PUSH
73871: LD_STRING 
73873: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73874: LD_ADDR_OWVAR 35
73878: PUSH
73879: LD_VAR 0 1
73883: NEG
73884: PPUSH
73885: LD_VAR 0 1
73889: PPUSH
73890: CALL_OW 12
73894: ST_TO_ADDR
// end ;
73895: LD_VAR 0 2
73899: RET
// export function PrepareEnchidna ( ) ; begin
73900: LD_INT 0
73902: PPUSH
// uc_side := 0 ;
73903: LD_ADDR_OWVAR 20
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// uc_nation := 0 ;
73911: LD_ADDR_OWVAR 21
73915: PUSH
73916: LD_INT 0
73918: ST_TO_ADDR
// hc_class := class_baggie ;
73919: LD_ADDR_OWVAR 28
73923: PUSH
73924: LD_INT 13
73926: ST_TO_ADDR
// hc_gallery :=  ;
73927: LD_ADDR_OWVAR 33
73931: PUSH
73932: LD_STRING 
73934: ST_TO_ADDR
// end ;
73935: LD_VAR 0 1
73939: RET
// export function PrepareFrog ( ) ; begin
73940: LD_INT 0
73942: PPUSH
// uc_side := 0 ;
73943: LD_ADDR_OWVAR 20
73947: PUSH
73948: LD_INT 0
73950: ST_TO_ADDR
// uc_nation := 0 ;
73951: LD_ADDR_OWVAR 21
73955: PUSH
73956: LD_INT 0
73958: ST_TO_ADDR
// hc_class := class_frog ;
73959: LD_ADDR_OWVAR 28
73963: PUSH
73964: LD_INT 19
73966: ST_TO_ADDR
// hc_gallery :=  ;
73967: LD_ADDR_OWVAR 33
73971: PUSH
73972: LD_STRING 
73974: ST_TO_ADDR
// end ;
73975: LD_VAR 0 1
73979: RET
// export function PrepareFish ( ) ; begin
73980: LD_INT 0
73982: PPUSH
// uc_side := 0 ;
73983: LD_ADDR_OWVAR 20
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
// uc_nation := 0 ;
73991: LD_ADDR_OWVAR 21
73995: PUSH
73996: LD_INT 0
73998: ST_TO_ADDR
// hc_class := class_fish ;
73999: LD_ADDR_OWVAR 28
74003: PUSH
74004: LD_INT 20
74006: ST_TO_ADDR
// hc_gallery :=  ;
74007: LD_ADDR_OWVAR 33
74011: PUSH
74012: LD_STRING 
74014: ST_TO_ADDR
// end ;
74015: LD_VAR 0 1
74019: RET
// export function PrepareBird ( ) ; begin
74020: LD_INT 0
74022: PPUSH
// uc_side := 0 ;
74023: LD_ADDR_OWVAR 20
74027: PUSH
74028: LD_INT 0
74030: ST_TO_ADDR
// uc_nation := 0 ;
74031: LD_ADDR_OWVAR 21
74035: PUSH
74036: LD_INT 0
74038: ST_TO_ADDR
// hc_class := class_phororhacos ;
74039: LD_ADDR_OWVAR 28
74043: PUSH
74044: LD_INT 18
74046: ST_TO_ADDR
// hc_gallery :=  ;
74047: LD_ADDR_OWVAR 33
74051: PUSH
74052: LD_STRING 
74054: ST_TO_ADDR
// end ;
74055: LD_VAR 0 1
74059: RET
// export function PrepareHorse ( ) ; begin
74060: LD_INT 0
74062: PPUSH
// uc_side := 0 ;
74063: LD_ADDR_OWVAR 20
74067: PUSH
74068: LD_INT 0
74070: ST_TO_ADDR
// uc_nation := 0 ;
74071: LD_ADDR_OWVAR 21
74075: PUSH
74076: LD_INT 0
74078: ST_TO_ADDR
// hc_class := class_horse ;
74079: LD_ADDR_OWVAR 28
74083: PUSH
74084: LD_INT 21
74086: ST_TO_ADDR
// hc_gallery :=  ;
74087: LD_ADDR_OWVAR 33
74091: PUSH
74092: LD_STRING 
74094: ST_TO_ADDR
// end ;
74095: LD_VAR 0 1
74099: RET
// export function PrepareMastodont ( ) ; begin
74100: LD_INT 0
74102: PPUSH
// uc_side := 0 ;
74103: LD_ADDR_OWVAR 20
74107: PUSH
74108: LD_INT 0
74110: ST_TO_ADDR
// uc_nation := 0 ;
74111: LD_ADDR_OWVAR 21
74115: PUSH
74116: LD_INT 0
74118: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74119: LD_ADDR_OWVAR 37
74123: PUSH
74124: LD_INT 31
74126: ST_TO_ADDR
// vc_control := control_rider ;
74127: LD_ADDR_OWVAR 38
74131: PUSH
74132: LD_INT 4
74134: ST_TO_ADDR
// end ;
74135: LD_VAR 0 1
74139: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
74144: PPUSH
// uc_side = 0 ;
74145: LD_ADDR_OWVAR 20
74149: PUSH
74150: LD_INT 0
74152: ST_TO_ADDR
// uc_nation = 0 ;
74153: LD_ADDR_OWVAR 21
74157: PUSH
74158: LD_INT 0
74160: ST_TO_ADDR
// InitHc_All ( ) ;
74161: CALL_OW 584
// InitVc ;
74165: CALL_OW 20
// if mastodonts then
74169: LD_VAR 0 6
74173: IFFALSE 74240
// for i = 1 to mastodonts do
74175: LD_ADDR_VAR 0 11
74179: PUSH
74180: DOUBLE
74181: LD_INT 1
74183: DEC
74184: ST_TO_ADDR
74185: LD_VAR 0 6
74189: PUSH
74190: FOR_TO
74191: IFFALSE 74238
// begin vc_chassis := 31 ;
74193: LD_ADDR_OWVAR 37
74197: PUSH
74198: LD_INT 31
74200: ST_TO_ADDR
// vc_control := control_rider ;
74201: LD_ADDR_OWVAR 38
74205: PUSH
74206: LD_INT 4
74208: ST_TO_ADDR
// animal := CreateVehicle ;
74209: LD_ADDR_VAR 0 12
74213: PUSH
74214: CALL_OW 45
74218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74219: LD_VAR 0 12
74223: PPUSH
74224: LD_VAR 0 8
74228: PPUSH
74229: LD_INT 0
74231: PPUSH
74232: CALL 76368 0 3
// end ;
74236: GO 74190
74238: POP
74239: POP
// if horses then
74240: LD_VAR 0 5
74244: IFFALSE 74311
// for i = 1 to horses do
74246: LD_ADDR_VAR 0 11
74250: PUSH
74251: DOUBLE
74252: LD_INT 1
74254: DEC
74255: ST_TO_ADDR
74256: LD_VAR 0 5
74260: PUSH
74261: FOR_TO
74262: IFFALSE 74309
// begin hc_class := 21 ;
74264: LD_ADDR_OWVAR 28
74268: PUSH
74269: LD_INT 21
74271: ST_TO_ADDR
// hc_gallery :=  ;
74272: LD_ADDR_OWVAR 33
74276: PUSH
74277: LD_STRING 
74279: ST_TO_ADDR
// animal := CreateHuman ;
74280: LD_ADDR_VAR 0 12
74284: PUSH
74285: CALL_OW 44
74289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74290: LD_VAR 0 12
74294: PPUSH
74295: LD_VAR 0 8
74299: PPUSH
74300: LD_INT 0
74302: PPUSH
74303: CALL 76368 0 3
// end ;
74307: GO 74261
74309: POP
74310: POP
// if birds then
74311: LD_VAR 0 1
74315: IFFALSE 74382
// for i = 1 to birds do
74317: LD_ADDR_VAR 0 11
74321: PUSH
74322: DOUBLE
74323: LD_INT 1
74325: DEC
74326: ST_TO_ADDR
74327: LD_VAR 0 1
74331: PUSH
74332: FOR_TO
74333: IFFALSE 74380
// begin hc_class := 18 ;
74335: LD_ADDR_OWVAR 28
74339: PUSH
74340: LD_INT 18
74342: ST_TO_ADDR
// hc_gallery =  ;
74343: LD_ADDR_OWVAR 33
74347: PUSH
74348: LD_STRING 
74350: ST_TO_ADDR
// animal := CreateHuman ;
74351: LD_ADDR_VAR 0 12
74355: PUSH
74356: CALL_OW 44
74360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74361: LD_VAR 0 12
74365: PPUSH
74366: LD_VAR 0 8
74370: PPUSH
74371: LD_INT 0
74373: PPUSH
74374: CALL 76368 0 3
// end ;
74378: GO 74332
74380: POP
74381: POP
// if tigers then
74382: LD_VAR 0 2
74386: IFFALSE 74470
// for i = 1 to tigers do
74388: LD_ADDR_VAR 0 11
74392: PUSH
74393: DOUBLE
74394: LD_INT 1
74396: DEC
74397: ST_TO_ADDR
74398: LD_VAR 0 2
74402: PUSH
74403: FOR_TO
74404: IFFALSE 74468
// begin hc_class = class_tiger ;
74406: LD_ADDR_OWVAR 28
74410: PUSH
74411: LD_INT 14
74413: ST_TO_ADDR
// hc_gallery =  ;
74414: LD_ADDR_OWVAR 33
74418: PUSH
74419: LD_STRING 
74421: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74422: LD_ADDR_OWVAR 35
74426: PUSH
74427: LD_INT 7
74429: NEG
74430: PPUSH
74431: LD_INT 7
74433: PPUSH
74434: CALL_OW 12
74438: ST_TO_ADDR
// animal := CreateHuman ;
74439: LD_ADDR_VAR 0 12
74443: PUSH
74444: CALL_OW 44
74448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74449: LD_VAR 0 12
74453: PPUSH
74454: LD_VAR 0 8
74458: PPUSH
74459: LD_INT 0
74461: PPUSH
74462: CALL 76368 0 3
// end ;
74466: GO 74403
74468: POP
74469: POP
// if apemans then
74470: LD_VAR 0 3
74474: IFFALSE 74597
// for i = 1 to apemans do
74476: LD_ADDR_VAR 0 11
74480: PUSH
74481: DOUBLE
74482: LD_INT 1
74484: DEC
74485: ST_TO_ADDR
74486: LD_VAR 0 3
74490: PUSH
74491: FOR_TO
74492: IFFALSE 74595
// begin hc_class = class_apeman ;
74494: LD_ADDR_OWVAR 28
74498: PUSH
74499: LD_INT 12
74501: ST_TO_ADDR
// hc_gallery =  ;
74502: LD_ADDR_OWVAR 33
74506: PUSH
74507: LD_STRING 
74509: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74510: LD_ADDR_OWVAR 35
74514: PUSH
74515: LD_INT 2
74517: NEG
74518: PPUSH
74519: LD_INT 2
74521: PPUSH
74522: CALL_OW 12
74526: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74527: LD_ADDR_OWVAR 31
74531: PUSH
74532: LD_INT 1
74534: PPUSH
74535: LD_INT 3
74537: PPUSH
74538: CALL_OW 12
74542: PUSH
74543: LD_INT 1
74545: PPUSH
74546: LD_INT 3
74548: PPUSH
74549: CALL_OW 12
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: LD_INT 0
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: ST_TO_ADDR
// animal := CreateHuman ;
74566: LD_ADDR_VAR 0 12
74570: PUSH
74571: CALL_OW 44
74575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74576: LD_VAR 0 12
74580: PPUSH
74581: LD_VAR 0 8
74585: PPUSH
74586: LD_INT 0
74588: PPUSH
74589: CALL 76368 0 3
// end ;
74593: GO 74491
74595: POP
74596: POP
// if enchidnas then
74597: LD_VAR 0 4
74601: IFFALSE 74668
// for i = 1 to enchidnas do
74603: LD_ADDR_VAR 0 11
74607: PUSH
74608: DOUBLE
74609: LD_INT 1
74611: DEC
74612: ST_TO_ADDR
74613: LD_VAR 0 4
74617: PUSH
74618: FOR_TO
74619: IFFALSE 74666
// begin hc_class = 13 ;
74621: LD_ADDR_OWVAR 28
74625: PUSH
74626: LD_INT 13
74628: ST_TO_ADDR
// hc_gallery =  ;
74629: LD_ADDR_OWVAR 33
74633: PUSH
74634: LD_STRING 
74636: ST_TO_ADDR
// animal := CreateHuman ;
74637: LD_ADDR_VAR 0 12
74641: PUSH
74642: CALL_OW 44
74646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74647: LD_VAR 0 12
74651: PPUSH
74652: LD_VAR 0 8
74656: PPUSH
74657: LD_INT 0
74659: PPUSH
74660: CALL 76368 0 3
// end ;
74664: GO 74618
74666: POP
74667: POP
// if fishes then
74668: LD_VAR 0 7
74672: IFFALSE 74739
// for i = 1 to fishes do
74674: LD_ADDR_VAR 0 11
74678: PUSH
74679: DOUBLE
74680: LD_INT 1
74682: DEC
74683: ST_TO_ADDR
74684: LD_VAR 0 7
74688: PUSH
74689: FOR_TO
74690: IFFALSE 74737
// begin hc_class = 20 ;
74692: LD_ADDR_OWVAR 28
74696: PUSH
74697: LD_INT 20
74699: ST_TO_ADDR
// hc_gallery =  ;
74700: LD_ADDR_OWVAR 33
74704: PUSH
74705: LD_STRING 
74707: ST_TO_ADDR
// animal := CreateHuman ;
74708: LD_ADDR_VAR 0 12
74712: PUSH
74713: CALL_OW 44
74717: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74718: LD_VAR 0 12
74722: PPUSH
74723: LD_VAR 0 9
74727: PPUSH
74728: LD_INT 0
74730: PPUSH
74731: CALL 76368 0 3
// end ;
74735: GO 74689
74737: POP
74738: POP
// end ;
74739: LD_VAR 0 10
74743: RET
// export function WantHeal ( sci , unit ) ; begin
74744: LD_INT 0
74746: PPUSH
// if GetTaskList ( sci ) > 0 then
74747: LD_VAR 0 1
74751: PPUSH
74752: CALL_OW 437
74756: PUSH
74757: LD_INT 0
74759: GREATER
74760: IFFALSE 74830
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74762: LD_VAR 0 1
74766: PPUSH
74767: CALL_OW 437
74771: PUSH
74772: LD_INT 1
74774: ARRAY
74775: PUSH
74776: LD_INT 1
74778: ARRAY
74779: PUSH
74780: LD_STRING l
74782: EQUAL
74783: PUSH
74784: LD_VAR 0 1
74788: PPUSH
74789: CALL_OW 437
74793: PUSH
74794: LD_INT 1
74796: ARRAY
74797: PUSH
74798: LD_INT 4
74800: ARRAY
74801: PUSH
74802: LD_VAR 0 2
74806: EQUAL
74807: AND
74808: IFFALSE 74820
// result := true else
74810: LD_ADDR_VAR 0 3
74814: PUSH
74815: LD_INT 1
74817: ST_TO_ADDR
74818: GO 74828
// result := false ;
74820: LD_ADDR_VAR 0 3
74824: PUSH
74825: LD_INT 0
74827: ST_TO_ADDR
// end else
74828: GO 74838
// result := false ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: LD_INT 0
74837: ST_TO_ADDR
// end ;
74838: LD_VAR 0 3
74842: RET
// export function HealTarget ( sci ) ; begin
74843: LD_INT 0
74845: PPUSH
// if not sci then
74846: LD_VAR 0 1
74850: NOT
74851: IFFALSE 74855
// exit ;
74853: GO 74920
// result := 0 ;
74855: LD_ADDR_VAR 0 2
74859: PUSH
74860: LD_INT 0
74862: ST_TO_ADDR
// if GetTaskList ( sci ) then
74863: LD_VAR 0 1
74867: PPUSH
74868: CALL_OW 437
74872: IFFALSE 74920
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74874: LD_VAR 0 1
74878: PPUSH
74879: CALL_OW 437
74883: PUSH
74884: LD_INT 1
74886: ARRAY
74887: PUSH
74888: LD_INT 1
74890: ARRAY
74891: PUSH
74892: LD_STRING l
74894: EQUAL
74895: IFFALSE 74920
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74897: LD_ADDR_VAR 0 2
74901: PUSH
74902: LD_VAR 0 1
74906: PPUSH
74907: CALL_OW 437
74911: PUSH
74912: LD_INT 1
74914: ARRAY
74915: PUSH
74916: LD_INT 4
74918: ARRAY
74919: ST_TO_ADDR
// end ;
74920: LD_VAR 0 2
74924: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74925: LD_INT 0
74927: PPUSH
74928: PPUSH
74929: PPUSH
74930: PPUSH
// if not base_units then
74931: LD_VAR 0 1
74935: NOT
74936: IFFALSE 74940
// exit ;
74938: GO 75027
// result := false ;
74940: LD_ADDR_VAR 0 2
74944: PUSH
74945: LD_INT 0
74947: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74948: LD_ADDR_VAR 0 5
74952: PUSH
74953: LD_VAR 0 1
74957: PPUSH
74958: LD_INT 21
74960: PUSH
74961: LD_INT 3
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PPUSH
74968: CALL_OW 72
74972: ST_TO_ADDR
// if not tmp then
74973: LD_VAR 0 5
74977: NOT
74978: IFFALSE 74982
// exit ;
74980: GO 75027
// for i in tmp do
74982: LD_ADDR_VAR 0 3
74986: PUSH
74987: LD_VAR 0 5
74991: PUSH
74992: FOR_IN
74993: IFFALSE 75025
// begin result := EnemyInRange ( i , 22 ) ;
74995: LD_ADDR_VAR 0 2
74999: PUSH
75000: LD_VAR 0 3
75004: PPUSH
75005: LD_INT 22
75007: PPUSH
75008: CALL 72614 0 2
75012: ST_TO_ADDR
// if result then
75013: LD_VAR 0 2
75017: IFFALSE 75023
// exit ;
75019: POP
75020: POP
75021: GO 75027
// end ;
75023: GO 74992
75025: POP
75026: POP
// end ;
75027: LD_VAR 0 2
75031: RET
// export function FilterByTag ( units , tag ) ; begin
75032: LD_INT 0
75034: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75035: LD_ADDR_VAR 0 3
75039: PUSH
75040: LD_VAR 0 1
75044: PPUSH
75045: LD_INT 120
75047: PUSH
75048: LD_VAR 0 2
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PPUSH
75057: CALL_OW 72
75061: ST_TO_ADDR
// end ;
75062: LD_VAR 0 3
75066: RET
// export function IsDriver ( un ) ; begin
75067: LD_INT 0
75069: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75070: LD_ADDR_VAR 0 2
75074: PUSH
75075: LD_VAR 0 1
75079: PUSH
75080: LD_INT 55
75082: PUSH
75083: EMPTY
75084: LIST
75085: PPUSH
75086: CALL_OW 69
75090: IN
75091: ST_TO_ADDR
// end ;
75092: LD_VAR 0 2
75096: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75097: LD_INT 0
75099: PPUSH
75100: PPUSH
// list := [ ] ;
75101: LD_ADDR_VAR 0 5
75105: PUSH
75106: EMPTY
75107: ST_TO_ADDR
// case d of 0 :
75108: LD_VAR 0 3
75112: PUSH
75113: LD_INT 0
75115: DOUBLE
75116: EQUAL
75117: IFTRUE 75121
75119: GO 75254
75121: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75122: LD_ADDR_VAR 0 5
75126: PUSH
75127: LD_VAR 0 1
75131: PUSH
75132: LD_INT 4
75134: MINUS
75135: PUSH
75136: LD_VAR 0 2
75140: PUSH
75141: LD_INT 4
75143: MINUS
75144: PUSH
75145: LD_INT 2
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: LIST
75152: PUSH
75153: LD_VAR 0 1
75157: PUSH
75158: LD_INT 3
75160: MINUS
75161: PUSH
75162: LD_VAR 0 2
75166: PUSH
75167: LD_INT 1
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: LD_VAR 0 1
75179: PUSH
75180: LD_INT 4
75182: PLUS
75183: PUSH
75184: LD_VAR 0 2
75188: PUSH
75189: LD_INT 4
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: LIST
75196: PUSH
75197: LD_VAR 0 1
75201: PUSH
75202: LD_INT 3
75204: PLUS
75205: PUSH
75206: LD_VAR 0 2
75210: PUSH
75211: LD_INT 3
75213: PLUS
75214: PUSH
75215: LD_INT 5
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_VAR 0 1
75227: PUSH
75228: LD_VAR 0 2
75232: PUSH
75233: LD_INT 4
75235: PLUS
75236: PUSH
75237: LD_INT 0
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: LIST
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: ST_TO_ADDR
// end ; 1 :
75252: GO 75952
75254: LD_INT 1
75256: DOUBLE
75257: EQUAL
75258: IFTRUE 75262
75260: GO 75395
75262: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75263: LD_ADDR_VAR 0 5
75267: PUSH
75268: LD_VAR 0 1
75272: PUSH
75273: LD_VAR 0 2
75277: PUSH
75278: LD_INT 4
75280: MINUS
75281: PUSH
75282: LD_INT 3
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: LIST
75289: PUSH
75290: LD_VAR 0 1
75294: PUSH
75295: LD_INT 3
75297: MINUS
75298: PUSH
75299: LD_VAR 0 2
75303: PUSH
75304: LD_INT 3
75306: MINUS
75307: PUSH
75308: LD_INT 2
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: LIST
75315: PUSH
75316: LD_VAR 0 1
75320: PUSH
75321: LD_INT 4
75323: MINUS
75324: PUSH
75325: LD_VAR 0 2
75329: PUSH
75330: LD_INT 1
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: PUSH
75338: LD_VAR 0 1
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 3
75350: PLUS
75351: PUSH
75352: LD_INT 0
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: LIST
75359: PUSH
75360: LD_VAR 0 1
75364: PUSH
75365: LD_INT 4
75367: PLUS
75368: PUSH
75369: LD_VAR 0 2
75373: PUSH
75374: LD_INT 4
75376: PLUS
75377: PUSH
75378: LD_INT 5
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: LIST
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: ST_TO_ADDR
// end ; 2 :
75393: GO 75952
75395: LD_INT 2
75397: DOUBLE
75398: EQUAL
75399: IFTRUE 75403
75401: GO 75532
75403: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75404: LD_ADDR_VAR 0 5
75408: PUSH
75409: LD_VAR 0 1
75413: PUSH
75414: LD_VAR 0 2
75418: PUSH
75419: LD_INT 3
75421: MINUS
75422: PUSH
75423: LD_INT 3
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: LIST
75430: PUSH
75431: LD_VAR 0 1
75435: PUSH
75436: LD_INT 4
75438: PLUS
75439: PUSH
75440: LD_VAR 0 2
75444: PUSH
75445: LD_INT 4
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: LIST
75452: PUSH
75453: LD_VAR 0 1
75457: PUSH
75458: LD_VAR 0 2
75462: PUSH
75463: LD_INT 4
75465: PLUS
75466: PUSH
75467: LD_INT 0
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: LIST
75474: PUSH
75475: LD_VAR 0 1
75479: PUSH
75480: LD_INT 3
75482: MINUS
75483: PUSH
75484: LD_VAR 0 2
75488: PUSH
75489: LD_INT 1
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: LD_VAR 0 1
75501: PUSH
75502: LD_INT 4
75504: MINUS
75505: PUSH
75506: LD_VAR 0 2
75510: PUSH
75511: LD_INT 4
75513: MINUS
75514: PUSH
75515: LD_INT 2
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: ST_TO_ADDR
// end ; 3 :
75530: GO 75952
75532: LD_INT 3
75534: DOUBLE
75535: EQUAL
75536: IFTRUE 75540
75538: GO 75673
75540: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75541: LD_ADDR_VAR 0 5
75545: PUSH
75546: LD_VAR 0 1
75550: PUSH
75551: LD_INT 3
75553: PLUS
75554: PUSH
75555: LD_VAR 0 2
75559: PUSH
75560: LD_INT 4
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: LIST
75567: PUSH
75568: LD_VAR 0 1
75572: PUSH
75573: LD_INT 4
75575: PLUS
75576: PUSH
75577: LD_VAR 0 2
75581: PUSH
75582: LD_INT 4
75584: PLUS
75585: PUSH
75586: LD_INT 5
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: PUSH
75594: LD_VAR 0 1
75598: PUSH
75599: LD_INT 4
75601: MINUS
75602: PUSH
75603: LD_VAR 0 2
75607: PUSH
75608: LD_INT 1
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: LIST
75615: PUSH
75616: LD_VAR 0 1
75620: PUSH
75621: LD_VAR 0 2
75625: PUSH
75626: LD_INT 4
75628: MINUS
75629: PUSH
75630: LD_INT 3
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: LD_VAR 0 1
75642: PUSH
75643: LD_INT 3
75645: MINUS
75646: PUSH
75647: LD_VAR 0 2
75651: PUSH
75652: LD_INT 3
75654: MINUS
75655: PUSH
75656: LD_INT 2
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: LIST
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: ST_TO_ADDR
// end ; 4 :
75671: GO 75952
75673: LD_INT 4
75675: DOUBLE
75676: EQUAL
75677: IFTRUE 75681
75679: GO 75814
75681: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75682: LD_ADDR_VAR 0 5
75686: PUSH
75687: LD_VAR 0 1
75691: PUSH
75692: LD_VAR 0 2
75696: PUSH
75697: LD_INT 4
75699: PLUS
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: LIST
75708: PUSH
75709: LD_VAR 0 1
75713: PUSH
75714: LD_INT 3
75716: PLUS
75717: PUSH
75718: LD_VAR 0 2
75722: PUSH
75723: LD_INT 3
75725: PLUS
75726: PUSH
75727: LD_INT 5
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: PUSH
75735: LD_VAR 0 1
75739: PUSH
75740: LD_INT 4
75742: PLUS
75743: PUSH
75744: LD_VAR 0 2
75748: PUSH
75749: LD_INT 4
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: LIST
75756: PUSH
75757: LD_VAR 0 1
75761: PUSH
75762: LD_VAR 0 2
75766: PUSH
75767: LD_INT 3
75769: MINUS
75770: PUSH
75771: LD_INT 3
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: PUSH
75779: LD_VAR 0 1
75783: PUSH
75784: LD_INT 4
75786: MINUS
75787: PUSH
75788: LD_VAR 0 2
75792: PUSH
75793: LD_INT 4
75795: MINUS
75796: PUSH
75797: LD_INT 2
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: LIST
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: ST_TO_ADDR
// end ; 5 :
75812: GO 75952
75814: LD_INT 5
75816: DOUBLE
75817: EQUAL
75818: IFTRUE 75822
75820: GO 75951
75822: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75823: LD_ADDR_VAR 0 5
75827: PUSH
75828: LD_VAR 0 1
75832: PUSH
75833: LD_INT 4
75835: MINUS
75836: PUSH
75837: LD_VAR 0 2
75841: PUSH
75842: LD_INT 1
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: PUSH
75850: LD_VAR 0 1
75854: PUSH
75855: LD_VAR 0 2
75859: PUSH
75860: LD_INT 4
75862: MINUS
75863: PUSH
75864: LD_INT 3
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: LIST
75871: PUSH
75872: LD_VAR 0 1
75876: PUSH
75877: LD_INT 4
75879: PLUS
75880: PUSH
75881: LD_VAR 0 2
75885: PUSH
75886: LD_INT 4
75888: PLUS
75889: PUSH
75890: LD_INT 5
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: LIST
75897: PUSH
75898: LD_VAR 0 1
75902: PUSH
75903: LD_INT 3
75905: PLUS
75906: PUSH
75907: LD_VAR 0 2
75911: PUSH
75912: LD_INT 4
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: LIST
75919: PUSH
75920: LD_VAR 0 1
75924: PUSH
75925: LD_VAR 0 2
75929: PUSH
75930: LD_INT 3
75932: PLUS
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: LIST
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: LIST
75948: ST_TO_ADDR
// end ; end ;
75949: GO 75952
75951: POP
// result := list ;
75952: LD_ADDR_VAR 0 4
75956: PUSH
75957: LD_VAR 0 5
75961: ST_TO_ADDR
// end ;
75962: LD_VAR 0 4
75966: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75967: LD_INT 0
75969: PPUSH
75970: PPUSH
75971: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75972: LD_VAR 0 1
75976: NOT
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_INT 1
75985: PUSH
75986: LD_INT 2
75988: PUSH
75989: LD_INT 3
75991: PUSH
75992: LD_INT 4
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: IN
76001: NOT
76002: OR
76003: IFFALSE 76007
// exit ;
76005: GO 76090
// tmp := [ ] ;
76007: LD_ADDR_VAR 0 5
76011: PUSH
76012: EMPTY
76013: ST_TO_ADDR
// for i in units do
76014: LD_ADDR_VAR 0 4
76018: PUSH
76019: LD_VAR 0 1
76023: PUSH
76024: FOR_IN
76025: IFFALSE 76059
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76027: LD_ADDR_VAR 0 5
76031: PUSH
76032: LD_VAR 0 5
76036: PPUSH
76037: LD_VAR 0 4
76041: PPUSH
76042: LD_VAR 0 2
76046: PPUSH
76047: CALL_OW 259
76051: PPUSH
76052: CALL 77450 0 2
76056: ST_TO_ADDR
76057: GO 76024
76059: POP
76060: POP
// if not tmp then
76061: LD_VAR 0 5
76065: NOT
76066: IFFALSE 76070
// exit ;
76068: GO 76090
// result := SortListByListDesc ( units , tmp ) ;
76070: LD_ADDR_VAR 0 3
76074: PUSH
76075: LD_VAR 0 1
76079: PPUSH
76080: LD_VAR 0 5
76084: PPUSH
76085: CALL_OW 77
76089: ST_TO_ADDR
// end ;
76090: LD_VAR 0 3
76094: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76095: LD_INT 0
76097: PPUSH
76098: PPUSH
76099: PPUSH
// result := false ;
76100: LD_ADDR_VAR 0 3
76104: PUSH
76105: LD_INT 0
76107: ST_TO_ADDR
// if not building then
76108: LD_VAR 0 2
76112: NOT
76113: IFFALSE 76117
// exit ;
76115: GO 76255
// x := GetX ( building ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_VAR 0 2
76126: PPUSH
76127: CALL_OW 250
76131: ST_TO_ADDR
// y := GetY ( building ) ;
76132: LD_ADDR_VAR 0 5
76136: PUSH
76137: LD_VAR 0 2
76141: PPUSH
76142: CALL_OW 251
76146: ST_TO_ADDR
// if not x or not y then
76147: LD_VAR 0 4
76151: NOT
76152: PUSH
76153: LD_VAR 0 5
76157: NOT
76158: OR
76159: IFFALSE 76163
// exit ;
76161: GO 76255
// if GetTaskList ( unit ) then
76163: LD_VAR 0 1
76167: PPUSH
76168: CALL_OW 437
76172: IFFALSE 76255
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76174: LD_STRING e
76176: PUSH
76177: LD_VAR 0 1
76181: PPUSH
76182: CALL_OW 437
76186: PUSH
76187: LD_INT 1
76189: ARRAY
76190: PUSH
76191: LD_INT 1
76193: ARRAY
76194: EQUAL
76195: PUSH
76196: LD_VAR 0 4
76200: PUSH
76201: LD_VAR 0 1
76205: PPUSH
76206: CALL_OW 437
76210: PUSH
76211: LD_INT 1
76213: ARRAY
76214: PUSH
76215: LD_INT 2
76217: ARRAY
76218: EQUAL
76219: AND
76220: PUSH
76221: LD_VAR 0 5
76225: PUSH
76226: LD_VAR 0 1
76230: PPUSH
76231: CALL_OW 437
76235: PUSH
76236: LD_INT 1
76238: ARRAY
76239: PUSH
76240: LD_INT 3
76242: ARRAY
76243: EQUAL
76244: AND
76245: IFFALSE 76255
// result := true end ;
76247: LD_ADDR_VAR 0 3
76251: PUSH
76252: LD_INT 1
76254: ST_TO_ADDR
// end ;
76255: LD_VAR 0 3
76259: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76260: LD_INT 0
76262: PPUSH
// result := false ;
76263: LD_ADDR_VAR 0 4
76267: PUSH
76268: LD_INT 0
76270: ST_TO_ADDR
// if GetTaskList ( unit ) then
76271: LD_VAR 0 1
76275: PPUSH
76276: CALL_OW 437
76280: IFFALSE 76363
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76282: LD_STRING M
76284: PUSH
76285: LD_VAR 0 1
76289: PPUSH
76290: CALL_OW 437
76294: PUSH
76295: LD_INT 1
76297: ARRAY
76298: PUSH
76299: LD_INT 1
76301: ARRAY
76302: EQUAL
76303: PUSH
76304: LD_VAR 0 2
76308: PUSH
76309: LD_VAR 0 1
76313: PPUSH
76314: CALL_OW 437
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: EQUAL
76327: AND
76328: PUSH
76329: LD_VAR 0 3
76333: PUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: CALL_OW 437
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: PUSH
76348: LD_INT 3
76350: ARRAY
76351: EQUAL
76352: AND
76353: IFFALSE 76363
// result := true ;
76355: LD_ADDR_VAR 0 4
76359: PUSH
76360: LD_INT 1
76362: ST_TO_ADDR
// end ; end ;
76363: LD_VAR 0 4
76367: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76368: LD_INT 0
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
// if not unit or not area then
76374: LD_VAR 0 1
76378: NOT
76379: PUSH
76380: LD_VAR 0 2
76384: NOT
76385: OR
76386: IFFALSE 76390
// exit ;
76388: GO 76553
// tmp := AreaToList ( area , i ) ;
76390: LD_ADDR_VAR 0 6
76394: PUSH
76395: LD_VAR 0 2
76399: PPUSH
76400: LD_VAR 0 5
76404: PPUSH
76405: CALL_OW 517
76409: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76410: LD_ADDR_VAR 0 5
76414: PUSH
76415: DOUBLE
76416: LD_INT 1
76418: DEC
76419: ST_TO_ADDR
76420: LD_VAR 0 6
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PUSH
76429: FOR_TO
76430: IFFALSE 76551
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76432: LD_ADDR_VAR 0 7
76436: PUSH
76437: LD_VAR 0 6
76441: PUSH
76442: LD_INT 1
76444: ARRAY
76445: PUSH
76446: LD_VAR 0 5
76450: ARRAY
76451: PUSH
76452: LD_VAR 0 6
76456: PUSH
76457: LD_INT 2
76459: ARRAY
76460: PUSH
76461: LD_VAR 0 5
76465: ARRAY
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76471: LD_INT 92
76473: PUSH
76474: LD_VAR 0 7
76478: PUSH
76479: LD_INT 1
76481: ARRAY
76482: PUSH
76483: LD_VAR 0 7
76487: PUSH
76488: LD_INT 2
76490: ARRAY
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: PPUSH
76501: CALL_OW 69
76505: PUSH
76506: LD_INT 0
76508: EQUAL
76509: IFFALSE 76549
// begin PlaceUnitArea ( unit , area , mode ) ;
76511: LD_VAR 0 1
76515: PPUSH
76516: LD_VAR 0 2
76520: PPUSH
76521: LD_VAR 0 3
76525: PPUSH
76526: CALL_OW 49
// result := IsPlaced ( unit ) ;
76530: LD_ADDR_VAR 0 4
76534: PUSH
76535: LD_VAR 0 1
76539: PPUSH
76540: CALL_OW 305
76544: ST_TO_ADDR
// exit ;
76545: POP
76546: POP
76547: GO 76553
// end ; end ;
76549: GO 76429
76551: POP
76552: POP
// end ;
76553: LD_VAR 0 4
76557: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76558: LD_INT 0
76560: PPUSH
76561: PPUSH
76562: PPUSH
// if not side or side > 8 then
76563: LD_VAR 0 1
76567: NOT
76568: PUSH
76569: LD_VAR 0 1
76573: PUSH
76574: LD_INT 8
76576: GREATER
76577: OR
76578: IFFALSE 76582
// exit ;
76580: GO 76769
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76582: LD_ADDR_VAR 0 4
76586: PUSH
76587: LD_INT 22
76589: PUSH
76590: LD_VAR 0 1
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: PUSH
76599: LD_INT 21
76601: PUSH
76602: LD_INT 3
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PPUSH
76613: CALL_OW 69
76617: ST_TO_ADDR
// if not tmp then
76618: LD_VAR 0 4
76622: NOT
76623: IFFALSE 76627
// exit ;
76625: GO 76769
// enable_addtolog := true ;
76627: LD_ADDR_OWVAR 81
76631: PUSH
76632: LD_INT 1
76634: ST_TO_ADDR
// AddToLog ( [ ) ;
76635: LD_STRING [
76637: PPUSH
76638: CALL_OW 561
// for i in tmp do
76642: LD_ADDR_VAR 0 3
76646: PUSH
76647: LD_VAR 0 4
76651: PUSH
76652: FOR_IN
76653: IFFALSE 76760
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76655: LD_STRING [
76657: PUSH
76658: LD_VAR 0 3
76662: PPUSH
76663: CALL_OW 266
76667: STR
76668: PUSH
76669: LD_STRING , 
76671: STR
76672: PUSH
76673: LD_VAR 0 3
76677: PPUSH
76678: CALL_OW 250
76682: STR
76683: PUSH
76684: LD_STRING , 
76686: STR
76687: PUSH
76688: LD_VAR 0 3
76692: PPUSH
76693: CALL_OW 251
76697: STR
76698: PUSH
76699: LD_STRING , 
76701: STR
76702: PUSH
76703: LD_VAR 0 3
76707: PPUSH
76708: CALL_OW 254
76712: STR
76713: PUSH
76714: LD_STRING , 
76716: STR
76717: PUSH
76718: LD_VAR 0 3
76722: PPUSH
76723: LD_INT 1
76725: PPUSH
76726: CALL_OW 268
76730: STR
76731: PUSH
76732: LD_STRING , 
76734: STR
76735: PUSH
76736: LD_VAR 0 3
76740: PPUSH
76741: LD_INT 2
76743: PPUSH
76744: CALL_OW 268
76748: STR
76749: PUSH
76750: LD_STRING ],
76752: STR
76753: PPUSH
76754: CALL_OW 561
// end ;
76758: GO 76652
76760: POP
76761: POP
// AddToLog ( ]; ) ;
76762: LD_STRING ];
76764: PPUSH
76765: CALL_OW 561
// end ;
76769: LD_VAR 0 2
76773: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76774: LD_INT 0
76776: PPUSH
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
// if not area or not rate or not max then
76781: LD_VAR 0 1
76785: NOT
76786: PUSH
76787: LD_VAR 0 2
76791: NOT
76792: OR
76793: PUSH
76794: LD_VAR 0 4
76798: NOT
76799: OR
76800: IFFALSE 76804
// exit ;
76802: GO 76993
// while 1 do
76804: LD_INT 1
76806: IFFALSE 76993
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76808: LD_ADDR_VAR 0 9
76812: PUSH
76813: LD_VAR 0 1
76817: PPUSH
76818: LD_INT 1
76820: PPUSH
76821: CALL_OW 287
76825: PUSH
76826: LD_INT 10
76828: MUL
76829: ST_TO_ADDR
// r := rate / 10 ;
76830: LD_ADDR_VAR 0 7
76834: PUSH
76835: LD_VAR 0 2
76839: PUSH
76840: LD_INT 10
76842: DIVREAL
76843: ST_TO_ADDR
// time := 1 1$00 ;
76844: LD_ADDR_VAR 0 8
76848: PUSH
76849: LD_INT 2100
76851: ST_TO_ADDR
// if amount < min then
76852: LD_VAR 0 9
76856: PUSH
76857: LD_VAR 0 3
76861: LESS
76862: IFFALSE 76880
// r := r * 2 else
76864: LD_ADDR_VAR 0 7
76868: PUSH
76869: LD_VAR 0 7
76873: PUSH
76874: LD_INT 2
76876: MUL
76877: ST_TO_ADDR
76878: GO 76906
// if amount > max then
76880: LD_VAR 0 9
76884: PUSH
76885: LD_VAR 0 4
76889: GREATER
76890: IFFALSE 76906
// r := r / 2 ;
76892: LD_ADDR_VAR 0 7
76896: PUSH
76897: LD_VAR 0 7
76901: PUSH
76902: LD_INT 2
76904: DIVREAL
76905: ST_TO_ADDR
// time := time / r ;
76906: LD_ADDR_VAR 0 8
76910: PUSH
76911: LD_VAR 0 8
76915: PUSH
76916: LD_VAR 0 7
76920: DIVREAL
76921: ST_TO_ADDR
// if time < 0 then
76922: LD_VAR 0 8
76926: PUSH
76927: LD_INT 0
76929: LESS
76930: IFFALSE 76947
// time := time * - 1 ;
76932: LD_ADDR_VAR 0 8
76936: PUSH
76937: LD_VAR 0 8
76941: PUSH
76942: LD_INT 1
76944: NEG
76945: MUL
76946: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76947: LD_VAR 0 8
76951: PUSH
76952: LD_INT 35
76954: PPUSH
76955: LD_INT 875
76957: PPUSH
76958: CALL_OW 12
76962: PLUS
76963: PPUSH
76964: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76968: LD_INT 1
76970: PPUSH
76971: LD_INT 5
76973: PPUSH
76974: CALL_OW 12
76978: PPUSH
76979: LD_VAR 0 1
76983: PPUSH
76984: LD_INT 1
76986: PPUSH
76987: CALL_OW 55
// end ;
76991: GO 76804
// end ;
76993: LD_VAR 0 5
76997: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76998: LD_INT 0
77000: PPUSH
77001: PPUSH
77002: PPUSH
77003: PPUSH
77004: PPUSH
77005: PPUSH
77006: PPUSH
77007: PPUSH
// if not turrets or not factories then
77008: LD_VAR 0 1
77012: NOT
77013: PUSH
77014: LD_VAR 0 2
77018: NOT
77019: OR
77020: IFFALSE 77024
// exit ;
77022: GO 77331
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77024: LD_ADDR_VAR 0 10
77028: PUSH
77029: LD_INT 5
77031: PUSH
77032: LD_INT 6
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 2
77041: PUSH
77042: LD_INT 4
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: LD_INT 3
77051: PUSH
77052: LD_INT 5
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: LIST
77063: PUSH
77064: LD_INT 24
77066: PUSH
77067: LD_INT 25
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PUSH
77074: LD_INT 23
77076: PUSH
77077: LD_INT 27
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 42
77090: PUSH
77091: LD_INT 43
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 44
77100: PUSH
77101: LD_INT 46
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 45
77110: PUSH
77111: LD_INT 47
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: LIST
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: LIST
77127: ST_TO_ADDR
// result := [ ] ;
77128: LD_ADDR_VAR 0 3
77132: PUSH
77133: EMPTY
77134: ST_TO_ADDR
// for i in turrets do
77135: LD_ADDR_VAR 0 4
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: FOR_IN
77146: IFFALSE 77329
// begin nat := GetNation ( i ) ;
77148: LD_ADDR_VAR 0 7
77152: PUSH
77153: LD_VAR 0 4
77157: PPUSH
77158: CALL_OW 248
77162: ST_TO_ADDR
// weapon := 0 ;
77163: LD_ADDR_VAR 0 8
77167: PUSH
77168: LD_INT 0
77170: ST_TO_ADDR
// if not nat then
77171: LD_VAR 0 7
77175: NOT
77176: IFFALSE 77180
// continue ;
77178: GO 77145
// for j in list [ nat ] do
77180: LD_ADDR_VAR 0 5
77184: PUSH
77185: LD_VAR 0 10
77189: PUSH
77190: LD_VAR 0 7
77194: ARRAY
77195: PUSH
77196: FOR_IN
77197: IFFALSE 77238
// if GetBWeapon ( i ) = j [ 1 ] then
77199: LD_VAR 0 4
77203: PPUSH
77204: CALL_OW 269
77208: PUSH
77209: LD_VAR 0 5
77213: PUSH
77214: LD_INT 1
77216: ARRAY
77217: EQUAL
77218: IFFALSE 77236
// begin weapon := j [ 2 ] ;
77220: LD_ADDR_VAR 0 8
77224: PUSH
77225: LD_VAR 0 5
77229: PUSH
77230: LD_INT 2
77232: ARRAY
77233: ST_TO_ADDR
// break ;
77234: GO 77238
// end ;
77236: GO 77196
77238: POP
77239: POP
// if not weapon then
77240: LD_VAR 0 8
77244: NOT
77245: IFFALSE 77249
// continue ;
77247: GO 77145
// for k in factories do
77249: LD_ADDR_VAR 0 6
77253: PUSH
77254: LD_VAR 0 2
77258: PUSH
77259: FOR_IN
77260: IFFALSE 77325
// begin weapons := AvailableWeaponList ( k ) ;
77262: LD_ADDR_VAR 0 9
77266: PUSH
77267: LD_VAR 0 6
77271: PPUSH
77272: CALL_OW 478
77276: ST_TO_ADDR
// if not weapons then
77277: LD_VAR 0 9
77281: NOT
77282: IFFALSE 77286
// continue ;
77284: GO 77259
// if weapon in weapons then
77286: LD_VAR 0 8
77290: PUSH
77291: LD_VAR 0 9
77295: IN
77296: IFFALSE 77323
// begin result := [ i , weapon ] ;
77298: LD_ADDR_VAR 0 3
77302: PUSH
77303: LD_VAR 0 4
77307: PUSH
77308: LD_VAR 0 8
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: ST_TO_ADDR
// exit ;
77317: POP
77318: POP
77319: POP
77320: POP
77321: GO 77331
// end ; end ;
77323: GO 77259
77325: POP
77326: POP
// end ;
77327: GO 77145
77329: POP
77330: POP
// end ;
77331: LD_VAR 0 3
77335: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77336: LD_INT 0
77338: PPUSH
// if not side or side > 8 then
77339: LD_VAR 0 3
77343: NOT
77344: PUSH
77345: LD_VAR 0 3
77349: PUSH
77350: LD_INT 8
77352: GREATER
77353: OR
77354: IFFALSE 77358
// exit ;
77356: GO 77417
// if not range then
77358: LD_VAR 0 4
77362: NOT
77363: IFFALSE 77374
// range := - 12 ;
77365: LD_ADDR_VAR 0 4
77369: PUSH
77370: LD_INT 12
77372: NEG
77373: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77374: LD_VAR 0 1
77378: PPUSH
77379: LD_VAR 0 2
77383: PPUSH
77384: LD_VAR 0 3
77388: PPUSH
77389: LD_VAR 0 4
77393: PPUSH
77394: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77398: LD_VAR 0 1
77402: PPUSH
77403: LD_VAR 0 2
77407: PPUSH
77408: LD_VAR 0 3
77412: PPUSH
77413: CALL_OW 331
// end ;
77417: LD_VAR 0 5
77421: RET
// export function Video ( mode ) ; begin
77422: LD_INT 0
77424: PPUSH
// ingame_video = mode ;
77425: LD_ADDR_OWVAR 52
77429: PUSH
77430: LD_VAR 0 1
77434: ST_TO_ADDR
// interface_hidden = mode ;
77435: LD_ADDR_OWVAR 54
77439: PUSH
77440: LD_VAR 0 1
77444: ST_TO_ADDR
// end ;
77445: LD_VAR 0 2
77449: RET
// export function Join ( array , element ) ; begin
77450: LD_INT 0
77452: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77453: LD_ADDR_VAR 0 3
77457: PUSH
77458: LD_VAR 0 1
77462: PPUSH
77463: LD_VAR 0 1
77467: PUSH
77468: LD_INT 1
77470: PLUS
77471: PPUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: CALL_OW 1
77481: ST_TO_ADDR
// end ;
77482: LD_VAR 0 3
77486: RET
// export function JoinUnion ( array , element ) ; begin
77487: LD_INT 0
77489: PPUSH
// result := array union element ;
77490: LD_ADDR_VAR 0 3
77494: PUSH
77495: LD_VAR 0 1
77499: PUSH
77500: LD_VAR 0 2
77504: UNION
77505: ST_TO_ADDR
// end ;
77506: LD_VAR 0 3
77510: RET
// export function GetBehemoths ( side ) ; begin
77511: LD_INT 0
77513: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77514: LD_ADDR_VAR 0 2
77518: PUSH
77519: LD_INT 22
77521: PUSH
77522: LD_VAR 0 1
77526: PUSH
77527: EMPTY
77528: LIST
77529: LIST
77530: PUSH
77531: LD_INT 31
77533: PUSH
77534: LD_INT 25
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: PPUSH
77545: CALL_OW 69
77549: ST_TO_ADDR
// end ;
77550: LD_VAR 0 2
77554: RET
// export function Shuffle ( array ) ; var i , index ; begin
77555: LD_INT 0
77557: PPUSH
77558: PPUSH
77559: PPUSH
// result := [ ] ;
77560: LD_ADDR_VAR 0 2
77564: PUSH
77565: EMPTY
77566: ST_TO_ADDR
// if not array then
77567: LD_VAR 0 1
77571: NOT
77572: IFFALSE 77576
// exit ;
77574: GO 77675
// Randomize ;
77576: CALL_OW 10
// for i = array downto 1 do
77580: LD_ADDR_VAR 0 3
77584: PUSH
77585: DOUBLE
77586: LD_VAR 0 1
77590: INC
77591: ST_TO_ADDR
77592: LD_INT 1
77594: PUSH
77595: FOR_DOWNTO
77596: IFFALSE 77673
// begin index := rand ( 1 , array ) ;
77598: LD_ADDR_VAR 0 4
77602: PUSH
77603: LD_INT 1
77605: PPUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: CALL_OW 12
77615: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77616: LD_ADDR_VAR 0 2
77620: PUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 1
77633: PLUS
77634: PPUSH
77635: LD_VAR 0 1
77639: PUSH
77640: LD_VAR 0 4
77644: ARRAY
77645: PPUSH
77646: CALL_OW 2
77650: ST_TO_ADDR
// array := Delete ( array , index ) ;
77651: LD_ADDR_VAR 0 1
77655: PUSH
77656: LD_VAR 0 1
77660: PPUSH
77661: LD_VAR 0 4
77665: PPUSH
77666: CALL_OW 3
77670: ST_TO_ADDR
// end ;
77671: GO 77595
77673: POP
77674: POP
// end ;
77675: LD_VAR 0 2
77679: RET
// export function GetBaseMaterials ( base ) ; begin
77680: LD_INT 0
77682: PPUSH
// result := [ 0 , 0 , 0 ] ;
77683: LD_ADDR_VAR 0 2
77687: PUSH
77688: LD_INT 0
77690: PUSH
77691: LD_INT 0
77693: PUSH
77694: LD_INT 0
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: LIST
77701: ST_TO_ADDR
// if not base then
77702: LD_VAR 0 1
77706: NOT
77707: IFFALSE 77711
// exit ;
77709: GO 77760
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77711: LD_ADDR_VAR 0 2
77715: PUSH
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_INT 1
77723: PPUSH
77724: CALL_OW 275
77728: PUSH
77729: LD_VAR 0 1
77733: PPUSH
77734: LD_INT 2
77736: PPUSH
77737: CALL_OW 275
77741: PUSH
77742: LD_VAR 0 1
77746: PPUSH
77747: LD_INT 3
77749: PPUSH
77750: CALL_OW 275
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: LIST
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 2
77764: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77765: LD_INT 0
77767: PPUSH
77768: PPUSH
// result := array ;
77769: LD_ADDR_VAR 0 3
77773: PUSH
77774: LD_VAR 0 1
77778: ST_TO_ADDR
// if size >= result then
77779: LD_VAR 0 2
77783: PUSH
77784: LD_VAR 0 3
77788: GREATEREQUAL
77789: IFFALSE 77793
// exit ;
77791: GO 77843
// if size then
77793: LD_VAR 0 2
77797: IFFALSE 77843
// for i := array downto size do
77799: LD_ADDR_VAR 0 4
77803: PUSH
77804: DOUBLE
77805: LD_VAR 0 1
77809: INC
77810: ST_TO_ADDR
77811: LD_VAR 0 2
77815: PUSH
77816: FOR_DOWNTO
77817: IFFALSE 77841
// result := Delete ( result , result ) ;
77819: LD_ADDR_VAR 0 3
77823: PUSH
77824: LD_VAR 0 3
77828: PPUSH
77829: LD_VAR 0 3
77833: PPUSH
77834: CALL_OW 3
77838: ST_TO_ADDR
77839: GO 77816
77841: POP
77842: POP
// end ;
77843: LD_VAR 0 3
77847: RET
// export function ComExit ( unit ) ; var tmp ; begin
77848: LD_INT 0
77850: PPUSH
77851: PPUSH
// if not IsInUnit ( unit ) then
77852: LD_VAR 0 1
77856: PPUSH
77857: CALL_OW 310
77861: NOT
77862: IFFALSE 77866
// exit ;
77864: GO 77926
// tmp := IsInUnit ( unit ) ;
77866: LD_ADDR_VAR 0 3
77870: PUSH
77871: LD_VAR 0 1
77875: PPUSH
77876: CALL_OW 310
77880: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77881: LD_VAR 0 3
77885: PPUSH
77886: CALL_OW 247
77890: PUSH
77891: LD_INT 2
77893: EQUAL
77894: IFFALSE 77907
// ComExitVehicle ( unit ) else
77896: LD_VAR 0 1
77900: PPUSH
77901: CALL_OW 121
77905: GO 77916
// ComExitBuilding ( unit ) ;
77907: LD_VAR 0 1
77911: PPUSH
77912: CALL_OW 122
// result := tmp ;
77916: LD_ADDR_VAR 0 2
77920: PUSH
77921: LD_VAR 0 3
77925: ST_TO_ADDR
// end ;
77926: LD_VAR 0 2
77930: RET
// export function ComExitAll ( units ) ; var i ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
// if not units then
77935: LD_VAR 0 1
77939: NOT
77940: IFFALSE 77944
// exit ;
77942: GO 77970
// for i in units do
77944: LD_ADDR_VAR 0 3
77948: PUSH
77949: LD_VAR 0 1
77953: PUSH
77954: FOR_IN
77955: IFFALSE 77968
// ComExit ( i ) ;
77957: LD_VAR 0 3
77961: PPUSH
77962: CALL 77848 0 1
77966: GO 77954
77968: POP
77969: POP
// end ;
77970: LD_VAR 0 2
77974: RET
// export function ResetHc ; begin
77975: LD_INT 0
77977: PPUSH
// InitHc ;
77978: CALL_OW 19
// hc_importance := 0 ;
77982: LD_ADDR_OWVAR 32
77986: PUSH
77987: LD_INT 0
77989: ST_TO_ADDR
// end ;
77990: LD_VAR 0 1
77994: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77995: LD_INT 0
77997: PPUSH
77998: PPUSH
77999: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78000: LD_ADDR_VAR 0 6
78004: PUSH
78005: LD_VAR 0 1
78009: PUSH
78010: LD_VAR 0 3
78014: PLUS
78015: PUSH
78016: LD_INT 2
78018: DIV
78019: ST_TO_ADDR
// if _x < 0 then
78020: LD_VAR 0 6
78024: PUSH
78025: LD_INT 0
78027: LESS
78028: IFFALSE 78045
// _x := _x * - 1 ;
78030: LD_ADDR_VAR 0 6
78034: PUSH
78035: LD_VAR 0 6
78039: PUSH
78040: LD_INT 1
78042: NEG
78043: MUL
78044: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78045: LD_ADDR_VAR 0 7
78049: PUSH
78050: LD_VAR 0 2
78054: PUSH
78055: LD_VAR 0 4
78059: PLUS
78060: PUSH
78061: LD_INT 2
78063: DIV
78064: ST_TO_ADDR
// if _y < 0 then
78065: LD_VAR 0 7
78069: PUSH
78070: LD_INT 0
78072: LESS
78073: IFFALSE 78090
// _y := _y * - 1 ;
78075: LD_ADDR_VAR 0 7
78079: PUSH
78080: LD_VAR 0 7
78084: PUSH
78085: LD_INT 1
78087: NEG
78088: MUL
78089: ST_TO_ADDR
// result := [ _x , _y ] ;
78090: LD_ADDR_VAR 0 5
78094: PUSH
78095: LD_VAR 0 6
78099: PUSH
78100: LD_VAR 0 7
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: ST_TO_ADDR
// end ;
78109: LD_VAR 0 5
78113: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78114: LD_INT 0
78116: PPUSH
78117: PPUSH
78118: PPUSH
78119: PPUSH
// task := GetTaskList ( unit ) ;
78120: LD_ADDR_VAR 0 7
78124: PUSH
78125: LD_VAR 0 1
78129: PPUSH
78130: CALL_OW 437
78134: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78135: LD_VAR 0 7
78139: NOT
78140: PUSH
78141: LD_VAR 0 1
78145: PPUSH
78146: LD_VAR 0 2
78150: PPUSH
78151: CALL_OW 308
78155: NOT
78156: AND
78157: IFFALSE 78161
// exit ;
78159: GO 78279
// if IsInArea ( unit , area ) then
78161: LD_VAR 0 1
78165: PPUSH
78166: LD_VAR 0 2
78170: PPUSH
78171: CALL_OW 308
78175: IFFALSE 78193
// begin ComMoveToArea ( unit , goAway ) ;
78177: LD_VAR 0 1
78181: PPUSH
78182: LD_VAR 0 3
78186: PPUSH
78187: CALL_OW 113
// exit ;
78191: GO 78279
// end ; if task [ 1 ] [ 1 ] <> M then
78193: LD_VAR 0 7
78197: PUSH
78198: LD_INT 1
78200: ARRAY
78201: PUSH
78202: LD_INT 1
78204: ARRAY
78205: PUSH
78206: LD_STRING M
78208: NONEQUAL
78209: IFFALSE 78213
// exit ;
78211: GO 78279
// x := task [ 1 ] [ 2 ] ;
78213: LD_ADDR_VAR 0 5
78217: PUSH
78218: LD_VAR 0 7
78222: PUSH
78223: LD_INT 1
78225: ARRAY
78226: PUSH
78227: LD_INT 2
78229: ARRAY
78230: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78231: LD_ADDR_VAR 0 6
78235: PUSH
78236: LD_VAR 0 7
78240: PUSH
78241: LD_INT 1
78243: ARRAY
78244: PUSH
78245: LD_INT 3
78247: ARRAY
78248: ST_TO_ADDR
// if InArea ( x , y , area ) then
78249: LD_VAR 0 5
78253: PPUSH
78254: LD_VAR 0 6
78258: PPUSH
78259: LD_VAR 0 2
78263: PPUSH
78264: CALL_OW 309
78268: IFFALSE 78279
// ComStop ( unit ) ;
78270: LD_VAR 0 1
78274: PPUSH
78275: CALL_OW 141
// end ;
78279: LD_VAR 0 4
78283: RET
// export function Abs ( value ) ; begin
78284: LD_INT 0
78286: PPUSH
// result := value ;
78287: LD_ADDR_VAR 0 2
78291: PUSH
78292: LD_VAR 0 1
78296: ST_TO_ADDR
// if value < 0 then
78297: LD_VAR 0 1
78301: PUSH
78302: LD_INT 0
78304: LESS
78305: IFFALSE 78322
// result := value * - 1 ;
78307: LD_ADDR_VAR 0 2
78311: PUSH
78312: LD_VAR 0 1
78316: PUSH
78317: LD_INT 1
78319: NEG
78320: MUL
78321: ST_TO_ADDR
// end ;
78322: LD_VAR 0 2
78326: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78327: LD_INT 0
78329: PPUSH
78330: PPUSH
78331: PPUSH
78332: PPUSH
78333: PPUSH
78334: PPUSH
78335: PPUSH
78336: PPUSH
// if not unit or not building then
78337: LD_VAR 0 1
78341: NOT
78342: PUSH
78343: LD_VAR 0 2
78347: NOT
78348: OR
78349: IFFALSE 78353
// exit ;
78351: GO 78579
// x := GetX ( building ) ;
78353: LD_ADDR_VAR 0 4
78357: PUSH
78358: LD_VAR 0 2
78362: PPUSH
78363: CALL_OW 250
78367: ST_TO_ADDR
// y := GetY ( building ) ;
78368: LD_ADDR_VAR 0 6
78372: PUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: CALL_OW 251
78382: ST_TO_ADDR
// d := GetDir ( building ) ;
78383: LD_ADDR_VAR 0 8
78387: PUSH
78388: LD_VAR 0 2
78392: PPUSH
78393: CALL_OW 254
78397: ST_TO_ADDR
// r := 4 ;
78398: LD_ADDR_VAR 0 9
78402: PUSH
78403: LD_INT 4
78405: ST_TO_ADDR
// for i := 1 to 5 do
78406: LD_ADDR_VAR 0 10
78410: PUSH
78411: DOUBLE
78412: LD_INT 1
78414: DEC
78415: ST_TO_ADDR
78416: LD_INT 5
78418: PUSH
78419: FOR_TO
78420: IFFALSE 78577
// begin _x := ShiftX ( x , d , r + i ) ;
78422: LD_ADDR_VAR 0 5
78426: PUSH
78427: LD_VAR 0 4
78431: PPUSH
78432: LD_VAR 0 8
78436: PPUSH
78437: LD_VAR 0 9
78441: PUSH
78442: LD_VAR 0 10
78446: PLUS
78447: PPUSH
78448: CALL_OW 272
78452: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78453: LD_ADDR_VAR 0 7
78457: PUSH
78458: LD_VAR 0 6
78462: PPUSH
78463: LD_VAR 0 8
78467: PPUSH
78468: LD_VAR 0 9
78472: PUSH
78473: LD_VAR 0 10
78477: PLUS
78478: PPUSH
78479: CALL_OW 273
78483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78484: LD_VAR 0 5
78488: PPUSH
78489: LD_VAR 0 7
78493: PPUSH
78494: CALL_OW 488
78498: PUSH
78499: LD_VAR 0 5
78503: PPUSH
78504: LD_VAR 0 7
78508: PPUSH
78509: CALL_OW 428
78513: PPUSH
78514: CALL_OW 247
78518: PUSH
78519: LD_INT 3
78521: PUSH
78522: LD_INT 2
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: IN
78529: NOT
78530: AND
78531: IFFALSE 78575
// begin ComMoveXY ( unit , _x , _y ) ;
78533: LD_VAR 0 1
78537: PPUSH
78538: LD_VAR 0 5
78542: PPUSH
78543: LD_VAR 0 7
78547: PPUSH
78548: CALL_OW 111
// result := [ _x , _y ] ;
78552: LD_ADDR_VAR 0 3
78556: PUSH
78557: LD_VAR 0 5
78561: PUSH
78562: LD_VAR 0 7
78566: PUSH
78567: EMPTY
78568: LIST
78569: LIST
78570: ST_TO_ADDR
// exit ;
78571: POP
78572: POP
78573: GO 78579
// end ; end ;
78575: GO 78419
78577: POP
78578: POP
// end ;
78579: LD_VAR 0 3
78583: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78584: LD_INT 0
78586: PPUSH
78587: PPUSH
78588: PPUSH
// result := 0 ;
78589: LD_ADDR_VAR 0 3
78593: PUSH
78594: LD_INT 0
78596: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78597: LD_VAR 0 1
78601: PUSH
78602: LD_INT 0
78604: LESS
78605: PUSH
78606: LD_VAR 0 1
78610: PUSH
78611: LD_INT 8
78613: GREATER
78614: OR
78615: PUSH
78616: LD_VAR 0 2
78620: PUSH
78621: LD_INT 0
78623: LESS
78624: OR
78625: PUSH
78626: LD_VAR 0 2
78630: PUSH
78631: LD_INT 8
78633: GREATER
78634: OR
78635: IFFALSE 78639
// exit ;
78637: GO 78714
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78639: LD_ADDR_VAR 0 4
78643: PUSH
78644: LD_INT 22
78646: PUSH
78647: LD_VAR 0 2
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PPUSH
78656: CALL_OW 69
78660: PUSH
78661: FOR_IN
78662: IFFALSE 78712
// begin un := UnitShoot ( i ) ;
78664: LD_ADDR_VAR 0 5
78668: PUSH
78669: LD_VAR 0 4
78673: PPUSH
78674: CALL_OW 504
78678: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78679: LD_VAR 0 5
78683: PPUSH
78684: CALL_OW 255
78688: PUSH
78689: LD_VAR 0 1
78693: EQUAL
78694: IFFALSE 78710
// begin result := un ;
78696: LD_ADDR_VAR 0 3
78700: PUSH
78701: LD_VAR 0 5
78705: ST_TO_ADDR
// exit ;
78706: POP
78707: POP
78708: GO 78714
// end ; end ;
78710: GO 78661
78712: POP
78713: POP
// end ;
78714: LD_VAR 0 3
78718: RET
// export function GetCargoBay ( units ) ; begin
78719: LD_INT 0
78721: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78722: LD_ADDR_VAR 0 2
78726: PUSH
78727: LD_VAR 0 1
78731: PPUSH
78732: LD_INT 2
78734: PUSH
78735: LD_INT 34
78737: PUSH
78738: LD_INT 12
78740: PUSH
78741: EMPTY
78742: LIST
78743: LIST
78744: PUSH
78745: LD_INT 34
78747: PUSH
78748: LD_INT 51
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PUSH
78755: LD_INT 34
78757: PUSH
78758: LD_INT 32
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: PUSH
78765: LD_INT 34
78767: PUSH
78768: LD_INT 89
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: PPUSH
78782: CALL_OW 72
78786: ST_TO_ADDR
// end ;
78787: LD_VAR 0 2
78791: RET
// export function Negate ( value ) ; begin
78792: LD_INT 0
78794: PPUSH
// result := not value ;
78795: LD_ADDR_VAR 0 2
78799: PUSH
78800: LD_VAR 0 1
78804: NOT
78805: ST_TO_ADDR
// end ;
78806: LD_VAR 0 2
78810: RET
// export function Inc ( value ) ; begin
78811: LD_INT 0
78813: PPUSH
// result := value + 1 ;
78814: LD_ADDR_VAR 0 2
78818: PUSH
78819: LD_VAR 0 1
78823: PUSH
78824: LD_INT 1
78826: PLUS
78827: ST_TO_ADDR
// end ;
78828: LD_VAR 0 2
78832: RET
// export function Dec ( value ) ; begin
78833: LD_INT 0
78835: PPUSH
// result := value - 1 ;
78836: LD_ADDR_VAR 0 2
78840: PUSH
78841: LD_VAR 0 1
78845: PUSH
78846: LD_INT 1
78848: MINUS
78849: ST_TO_ADDR
// end ;
78850: LD_VAR 0 2
78854: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78855: LD_INT 0
78857: PPUSH
78858: PPUSH
78859: PPUSH
78860: PPUSH
78861: PPUSH
78862: PPUSH
78863: PPUSH
78864: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78865: LD_VAR 0 1
78869: PPUSH
78870: LD_VAR 0 2
78874: PPUSH
78875: CALL_OW 488
78879: NOT
78880: PUSH
78881: LD_VAR 0 3
78885: PPUSH
78886: LD_VAR 0 4
78890: PPUSH
78891: CALL_OW 488
78895: NOT
78896: OR
78897: IFFALSE 78910
// begin result := - 1 ;
78899: LD_ADDR_VAR 0 5
78903: PUSH
78904: LD_INT 1
78906: NEG
78907: ST_TO_ADDR
// exit ;
78908: GO 79145
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78910: LD_ADDR_VAR 0 12
78914: PUSH
78915: LD_VAR 0 1
78919: PPUSH
78920: LD_VAR 0 2
78924: PPUSH
78925: LD_VAR 0 3
78929: PPUSH
78930: LD_VAR 0 4
78934: PPUSH
78935: CALL 77995 0 4
78939: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78940: LD_ADDR_VAR 0 11
78944: PUSH
78945: LD_VAR 0 1
78949: PPUSH
78950: LD_VAR 0 2
78954: PPUSH
78955: LD_VAR 0 12
78959: PUSH
78960: LD_INT 1
78962: ARRAY
78963: PPUSH
78964: LD_VAR 0 12
78968: PUSH
78969: LD_INT 2
78971: ARRAY
78972: PPUSH
78973: CALL_OW 298
78977: ST_TO_ADDR
// distance := 9999 ;
78978: LD_ADDR_VAR 0 10
78982: PUSH
78983: LD_INT 9999
78985: ST_TO_ADDR
// for i := 0 to 5 do
78986: LD_ADDR_VAR 0 6
78990: PUSH
78991: DOUBLE
78992: LD_INT 0
78994: DEC
78995: ST_TO_ADDR
78996: LD_INT 5
78998: PUSH
78999: FOR_TO
79000: IFFALSE 79143
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79002: LD_ADDR_VAR 0 7
79006: PUSH
79007: LD_VAR 0 1
79011: PPUSH
79012: LD_VAR 0 6
79016: PPUSH
79017: LD_VAR 0 11
79021: PPUSH
79022: CALL_OW 272
79026: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79027: LD_ADDR_VAR 0 8
79031: PUSH
79032: LD_VAR 0 2
79036: PPUSH
79037: LD_VAR 0 6
79041: PPUSH
79042: LD_VAR 0 11
79046: PPUSH
79047: CALL_OW 273
79051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79052: LD_VAR 0 7
79056: PPUSH
79057: LD_VAR 0 8
79061: PPUSH
79062: CALL_OW 488
79066: NOT
79067: IFFALSE 79071
// continue ;
79069: GO 78999
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79071: LD_ADDR_VAR 0 9
79075: PUSH
79076: LD_VAR 0 12
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PPUSH
79085: LD_VAR 0 12
79089: PUSH
79090: LD_INT 2
79092: ARRAY
79093: PPUSH
79094: LD_VAR 0 7
79098: PPUSH
79099: LD_VAR 0 8
79103: PPUSH
79104: CALL_OW 298
79108: ST_TO_ADDR
// if tmp < distance then
79109: LD_VAR 0 9
79113: PUSH
79114: LD_VAR 0 10
79118: LESS
79119: IFFALSE 79141
// begin result := i ;
79121: LD_ADDR_VAR 0 5
79125: PUSH
79126: LD_VAR 0 6
79130: ST_TO_ADDR
// distance := tmp ;
79131: LD_ADDR_VAR 0 10
79135: PUSH
79136: LD_VAR 0 9
79140: ST_TO_ADDR
// end ; end ;
79141: GO 78999
79143: POP
79144: POP
// end ;
79145: LD_VAR 0 5
79149: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79150: LD_INT 0
79152: PPUSH
79153: PPUSH
// if not driver or not IsInUnit ( driver ) then
79154: LD_VAR 0 1
79158: NOT
79159: PUSH
79160: LD_VAR 0 1
79164: PPUSH
79165: CALL_OW 310
79169: NOT
79170: OR
79171: IFFALSE 79175
// exit ;
79173: GO 79265
// vehicle := IsInUnit ( driver ) ;
79175: LD_ADDR_VAR 0 3
79179: PUSH
79180: LD_VAR 0 1
79184: PPUSH
79185: CALL_OW 310
79189: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79190: LD_VAR 0 1
79194: PPUSH
79195: LD_STRING \
79197: PUSH
79198: LD_INT 0
79200: PUSH
79201: LD_INT 0
79203: PUSH
79204: LD_INT 0
79206: PUSH
79207: LD_INT 0
79209: PUSH
79210: LD_INT 0
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: LIST
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: PUSH
79225: LD_STRING E
79227: PUSH
79228: LD_INT 0
79230: PUSH
79231: LD_INT 0
79233: PUSH
79234: LD_VAR 0 3
79238: PUSH
79239: LD_INT 0
79241: PUSH
79242: LD_INT 0
79244: PUSH
79245: LD_INT 0
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: LIST
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: PPUSH
79261: CALL_OW 446
// end ;
79265: LD_VAR 0 2
79269: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79270: LD_INT 0
79272: PPUSH
79273: PPUSH
// if not driver or not IsInUnit ( driver ) then
79274: LD_VAR 0 1
79278: NOT
79279: PUSH
79280: LD_VAR 0 1
79284: PPUSH
79285: CALL_OW 310
79289: NOT
79290: OR
79291: IFFALSE 79295
// exit ;
79293: GO 79385
// vehicle := IsInUnit ( driver ) ;
79295: LD_ADDR_VAR 0 3
79299: PUSH
79300: LD_VAR 0 1
79304: PPUSH
79305: CALL_OW 310
79309: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79310: LD_VAR 0 1
79314: PPUSH
79315: LD_STRING \
79317: PUSH
79318: LD_INT 0
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: LD_INT 0
79326: PUSH
79327: LD_INT 0
79329: PUSH
79330: LD_INT 0
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: PUSH
79345: LD_STRING E
79347: PUSH
79348: LD_INT 0
79350: PUSH
79351: LD_INT 0
79353: PUSH
79354: LD_VAR 0 3
79358: PUSH
79359: LD_INT 0
79361: PUSH
79362: LD_INT 0
79364: PUSH
79365: LD_INT 0
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: LIST
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PPUSH
79381: CALL_OW 447
// end ;
79385: LD_VAR 0 2
79389: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79390: LD_INT 0
79392: PPUSH
79393: PPUSH
79394: PPUSH
// tmp := [ ] ;
79395: LD_ADDR_VAR 0 5
79399: PUSH
79400: EMPTY
79401: ST_TO_ADDR
// for i in units do
79402: LD_ADDR_VAR 0 4
79406: PUSH
79407: LD_VAR 0 1
79411: PUSH
79412: FOR_IN
79413: IFFALSE 79451
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79415: LD_ADDR_VAR 0 5
79419: PUSH
79420: LD_VAR 0 5
79424: PPUSH
79425: LD_VAR 0 5
79429: PUSH
79430: LD_INT 1
79432: PLUS
79433: PPUSH
79434: LD_VAR 0 4
79438: PPUSH
79439: CALL_OW 256
79443: PPUSH
79444: CALL_OW 2
79448: ST_TO_ADDR
79449: GO 79412
79451: POP
79452: POP
// if not tmp then
79453: LD_VAR 0 5
79457: NOT
79458: IFFALSE 79462
// exit ;
79460: GO 79510
// if asc then
79462: LD_VAR 0 2
79466: IFFALSE 79490
// result := SortListByListAsc ( units , tmp ) else
79468: LD_ADDR_VAR 0 3
79472: PUSH
79473: LD_VAR 0 1
79477: PPUSH
79478: LD_VAR 0 5
79482: PPUSH
79483: CALL_OW 76
79487: ST_TO_ADDR
79488: GO 79510
// result := SortListByListDesc ( units , tmp ) ;
79490: LD_ADDR_VAR 0 3
79494: PUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: LD_VAR 0 5
79504: PPUSH
79505: CALL_OW 77
79509: ST_TO_ADDR
// end ;
79510: LD_VAR 0 3
79514: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79515: LD_INT 0
79517: PPUSH
79518: PPUSH
// task := GetTaskList ( mech ) ;
79519: LD_ADDR_VAR 0 4
79523: PUSH
79524: LD_VAR 0 1
79528: PPUSH
79529: CALL_OW 437
79533: ST_TO_ADDR
// if not task then
79534: LD_VAR 0 4
79538: NOT
79539: IFFALSE 79543
// exit ;
79541: GO 79585
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79543: LD_ADDR_VAR 0 3
79547: PUSH
79548: LD_VAR 0 4
79552: PUSH
79553: LD_INT 1
79555: ARRAY
79556: PUSH
79557: LD_INT 1
79559: ARRAY
79560: PUSH
79561: LD_STRING r
79563: EQUAL
79564: PUSH
79565: LD_VAR 0 4
79569: PUSH
79570: LD_INT 1
79572: ARRAY
79573: PUSH
79574: LD_INT 4
79576: ARRAY
79577: PUSH
79578: LD_VAR 0 2
79582: EQUAL
79583: AND
79584: ST_TO_ADDR
// end ;
79585: LD_VAR 0 3
79589: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79590: LD_INT 0
79592: PPUSH
// SetDir ( unit , d ) ;
79593: LD_VAR 0 1
79597: PPUSH
79598: LD_VAR 0 4
79602: PPUSH
79603: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79607: LD_VAR 0 1
79611: PPUSH
79612: LD_VAR 0 2
79616: PPUSH
79617: LD_VAR 0 3
79621: PPUSH
79622: LD_VAR 0 5
79626: PPUSH
79627: CALL_OW 48
// end ;
79631: LD_VAR 0 6
79635: RET
// export function ToNaturalNumber ( number ) ; begin
79636: LD_INT 0
79638: PPUSH
// result := number div 1 ;
79639: LD_ADDR_VAR 0 2
79643: PUSH
79644: LD_VAR 0 1
79648: PUSH
79649: LD_INT 1
79651: DIV
79652: ST_TO_ADDR
// if number < 0 then
79653: LD_VAR 0 1
79657: PUSH
79658: LD_INT 0
79660: LESS
79661: IFFALSE 79671
// result := 0 ;
79663: LD_ADDR_VAR 0 2
79667: PUSH
79668: LD_INT 0
79670: ST_TO_ADDR
// end ;
79671: LD_VAR 0 2
79675: RET
// export function SortByClass ( units , class ) ; var un ; begin
79676: LD_INT 0
79678: PPUSH
79679: PPUSH
// if not units or not class then
79680: LD_VAR 0 1
79684: NOT
79685: PUSH
79686: LD_VAR 0 2
79690: NOT
79691: OR
79692: IFFALSE 79696
// exit ;
79694: GO 79791
// result := [ ] ;
79696: LD_ADDR_VAR 0 3
79700: PUSH
79701: EMPTY
79702: ST_TO_ADDR
// for un in units do
79703: LD_ADDR_VAR 0 4
79707: PUSH
79708: LD_VAR 0 1
79712: PUSH
79713: FOR_IN
79714: IFFALSE 79789
// if GetClass ( un ) = class then
79716: LD_VAR 0 4
79720: PPUSH
79721: CALL_OW 257
79725: PUSH
79726: LD_VAR 0 2
79730: EQUAL
79731: IFFALSE 79758
// result := Insert ( result , 1 , un ) else
79733: LD_ADDR_VAR 0 3
79737: PUSH
79738: LD_VAR 0 3
79742: PPUSH
79743: LD_INT 1
79745: PPUSH
79746: LD_VAR 0 4
79750: PPUSH
79751: CALL_OW 2
79755: ST_TO_ADDR
79756: GO 79787
// result := Replace ( result , result + 1 , un ) ;
79758: LD_ADDR_VAR 0 3
79762: PUSH
79763: LD_VAR 0 3
79767: PPUSH
79768: LD_VAR 0 3
79772: PUSH
79773: LD_INT 1
79775: PLUS
79776: PPUSH
79777: LD_VAR 0 4
79781: PPUSH
79782: CALL_OW 1
79786: ST_TO_ADDR
79787: GO 79713
79789: POP
79790: POP
// end ;
79791: LD_VAR 0 3
79795: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79796: LD_INT 0
79798: PPUSH
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
79803: PPUSH
79804: PPUSH
// result := [ ] ;
79805: LD_ADDR_VAR 0 4
79809: PUSH
79810: EMPTY
79811: ST_TO_ADDR
// if x - r < 0 then
79812: LD_VAR 0 1
79816: PUSH
79817: LD_VAR 0 3
79821: MINUS
79822: PUSH
79823: LD_INT 0
79825: LESS
79826: IFFALSE 79838
// min_x := 0 else
79828: LD_ADDR_VAR 0 8
79832: PUSH
79833: LD_INT 0
79835: ST_TO_ADDR
79836: GO 79854
// min_x := x - r ;
79838: LD_ADDR_VAR 0 8
79842: PUSH
79843: LD_VAR 0 1
79847: PUSH
79848: LD_VAR 0 3
79852: MINUS
79853: ST_TO_ADDR
// if y - r < 0 then
79854: LD_VAR 0 2
79858: PUSH
79859: LD_VAR 0 3
79863: MINUS
79864: PUSH
79865: LD_INT 0
79867: LESS
79868: IFFALSE 79880
// min_y := 0 else
79870: LD_ADDR_VAR 0 7
79874: PUSH
79875: LD_INT 0
79877: ST_TO_ADDR
79878: GO 79896
// min_y := y - r ;
79880: LD_ADDR_VAR 0 7
79884: PUSH
79885: LD_VAR 0 2
79889: PUSH
79890: LD_VAR 0 3
79894: MINUS
79895: ST_TO_ADDR
// max_x := x + r ;
79896: LD_ADDR_VAR 0 9
79900: PUSH
79901: LD_VAR 0 1
79905: PUSH
79906: LD_VAR 0 3
79910: PLUS
79911: ST_TO_ADDR
// max_y := y + r ;
79912: LD_ADDR_VAR 0 10
79916: PUSH
79917: LD_VAR 0 2
79921: PUSH
79922: LD_VAR 0 3
79926: PLUS
79927: ST_TO_ADDR
// for _x = min_x to max_x do
79928: LD_ADDR_VAR 0 5
79932: PUSH
79933: DOUBLE
79934: LD_VAR 0 8
79938: DEC
79939: ST_TO_ADDR
79940: LD_VAR 0 9
79944: PUSH
79945: FOR_TO
79946: IFFALSE 80047
// for _y = min_y to max_y do
79948: LD_ADDR_VAR 0 6
79952: PUSH
79953: DOUBLE
79954: LD_VAR 0 7
79958: DEC
79959: ST_TO_ADDR
79960: LD_VAR 0 10
79964: PUSH
79965: FOR_TO
79966: IFFALSE 80043
// begin if not ValidHex ( _x , _y ) then
79968: LD_VAR 0 5
79972: PPUSH
79973: LD_VAR 0 6
79977: PPUSH
79978: CALL_OW 488
79982: NOT
79983: IFFALSE 79987
// continue ;
79985: GO 79965
// if GetResourceTypeXY ( _x , _y ) then
79987: LD_VAR 0 5
79991: PPUSH
79992: LD_VAR 0 6
79996: PPUSH
79997: CALL_OW 283
80001: IFFALSE 80041
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80003: LD_ADDR_VAR 0 4
80007: PUSH
80008: LD_VAR 0 4
80012: PPUSH
80013: LD_VAR 0 4
80017: PUSH
80018: LD_INT 1
80020: PLUS
80021: PPUSH
80022: LD_VAR 0 5
80026: PUSH
80027: LD_VAR 0 6
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PPUSH
80036: CALL_OW 1
80040: ST_TO_ADDR
// end ;
80041: GO 79965
80043: POP
80044: POP
80045: GO 79945
80047: POP
80048: POP
// end ;
80049: LD_VAR 0 4
80053: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80054: LD_INT 0
80056: PPUSH
80057: PPUSH
80058: PPUSH
80059: PPUSH
80060: PPUSH
80061: PPUSH
80062: PPUSH
80063: PPUSH
// if not units then
80064: LD_VAR 0 1
80068: NOT
80069: IFFALSE 80073
// exit ;
80071: GO 80597
// result := UnitFilter ( units , [ f_ok ] ) ;
80073: LD_ADDR_VAR 0 3
80077: PUSH
80078: LD_VAR 0 1
80082: PPUSH
80083: LD_INT 50
80085: PUSH
80086: EMPTY
80087: LIST
80088: PPUSH
80089: CALL_OW 72
80093: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80094: LD_ADDR_VAR 0 8
80098: PUSH
80099: LD_VAR 0 1
80103: PUSH
80104: LD_INT 1
80106: ARRAY
80107: PPUSH
80108: CALL_OW 255
80112: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80113: LD_ADDR_VAR 0 10
80117: PUSH
80118: LD_INT 29
80120: PUSH
80121: LD_INT 91
80123: PUSH
80124: LD_INT 49
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: LIST
80131: ST_TO_ADDR
// if not result then
80132: LD_VAR 0 3
80136: NOT
80137: IFFALSE 80141
// exit ;
80139: GO 80597
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80141: LD_ADDR_VAR 0 5
80145: PUSH
80146: LD_INT 81
80148: PUSH
80149: LD_VAR 0 8
80153: PUSH
80154: EMPTY
80155: LIST
80156: LIST
80157: PPUSH
80158: CALL_OW 69
80162: ST_TO_ADDR
// for i in result do
80163: LD_ADDR_VAR 0 4
80167: PUSH
80168: LD_VAR 0 3
80172: PUSH
80173: FOR_IN
80174: IFFALSE 80595
// begin tag := GetTag ( i ) + 1 ;
80176: LD_ADDR_VAR 0 9
80180: PUSH
80181: LD_VAR 0 4
80185: PPUSH
80186: CALL_OW 110
80190: PUSH
80191: LD_INT 1
80193: PLUS
80194: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80195: LD_ADDR_VAR 0 7
80199: PUSH
80200: LD_VAR 0 4
80204: PPUSH
80205: CALL_OW 250
80209: PPUSH
80210: LD_VAR 0 4
80214: PPUSH
80215: CALL_OW 251
80219: PPUSH
80220: LD_INT 6
80222: PPUSH
80223: CALL 79796 0 3
80227: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80228: LD_VAR 0 4
80232: PPUSH
80233: CALL_OW 247
80237: PUSH
80238: LD_INT 2
80240: EQUAL
80241: PUSH
80242: LD_VAR 0 7
80246: AND
80247: PUSH
80248: LD_VAR 0 4
80252: PPUSH
80253: CALL_OW 264
80257: PUSH
80258: LD_VAR 0 10
80262: IN
80263: NOT
80264: AND
80265: IFFALSE 80304
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80267: LD_VAR 0 4
80271: PPUSH
80272: LD_VAR 0 7
80276: PUSH
80277: LD_INT 1
80279: ARRAY
80280: PUSH
80281: LD_INT 1
80283: ARRAY
80284: PPUSH
80285: LD_VAR 0 7
80289: PUSH
80290: LD_INT 1
80292: ARRAY
80293: PUSH
80294: LD_INT 2
80296: ARRAY
80297: PPUSH
80298: CALL_OW 116
80302: GO 80593
// if path > tag then
80304: LD_VAR 0 2
80308: PUSH
80309: LD_VAR 0 9
80313: GREATER
80314: IFFALSE 80522
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80316: LD_ADDR_VAR 0 6
80320: PUSH
80321: LD_VAR 0 5
80325: PPUSH
80326: LD_INT 91
80328: PUSH
80329: LD_VAR 0 4
80333: PUSH
80334: LD_INT 8
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: LIST
80341: PPUSH
80342: CALL_OW 72
80346: ST_TO_ADDR
// if nearEnemy then
80347: LD_VAR 0 6
80351: IFFALSE 80420
// begin if GetWeapon ( i ) = ru_time_lapser then
80353: LD_VAR 0 4
80357: PPUSH
80358: CALL_OW 264
80362: PUSH
80363: LD_INT 49
80365: EQUAL
80366: IFFALSE 80394
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80368: LD_VAR 0 4
80372: PPUSH
80373: LD_VAR 0 6
80377: PPUSH
80378: LD_VAR 0 4
80382: PPUSH
80383: CALL_OW 74
80387: PPUSH
80388: CALL_OW 112
80392: GO 80418
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80394: LD_VAR 0 4
80398: PPUSH
80399: LD_VAR 0 6
80403: PPUSH
80404: LD_VAR 0 4
80408: PPUSH
80409: CALL_OW 74
80413: PPUSH
80414: CALL 81522 0 2
// end else
80418: GO 80520
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80420: LD_VAR 0 4
80424: PPUSH
80425: LD_VAR 0 2
80429: PUSH
80430: LD_VAR 0 9
80434: ARRAY
80435: PUSH
80436: LD_INT 1
80438: ARRAY
80439: PPUSH
80440: LD_VAR 0 2
80444: PUSH
80445: LD_VAR 0 9
80449: ARRAY
80450: PUSH
80451: LD_INT 2
80453: ARRAY
80454: PPUSH
80455: CALL_OW 297
80459: PUSH
80460: LD_INT 6
80462: GREATER
80463: IFFALSE 80506
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80465: LD_VAR 0 4
80469: PPUSH
80470: LD_VAR 0 2
80474: PUSH
80475: LD_VAR 0 9
80479: ARRAY
80480: PUSH
80481: LD_INT 1
80483: ARRAY
80484: PPUSH
80485: LD_VAR 0 2
80489: PUSH
80490: LD_VAR 0 9
80494: ARRAY
80495: PUSH
80496: LD_INT 2
80498: ARRAY
80499: PPUSH
80500: CALL_OW 114
80504: GO 80520
// SetTag ( i , tag ) ;
80506: LD_VAR 0 4
80510: PPUSH
80511: LD_VAR 0 9
80515: PPUSH
80516: CALL_OW 109
// end else
80520: GO 80593
// if enemy then
80522: LD_VAR 0 5
80526: IFFALSE 80593
// begin if GetWeapon ( i ) = ru_time_lapser then
80528: LD_VAR 0 4
80532: PPUSH
80533: CALL_OW 264
80537: PUSH
80538: LD_INT 49
80540: EQUAL
80541: IFFALSE 80569
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80543: LD_VAR 0 4
80547: PPUSH
80548: LD_VAR 0 5
80552: PPUSH
80553: LD_VAR 0 4
80557: PPUSH
80558: CALL_OW 74
80562: PPUSH
80563: CALL_OW 112
80567: GO 80593
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80569: LD_VAR 0 4
80573: PPUSH
80574: LD_VAR 0 5
80578: PPUSH
80579: LD_VAR 0 4
80583: PPUSH
80584: CALL_OW 74
80588: PPUSH
80589: CALL 81522 0 2
// end ; end ;
80593: GO 80173
80595: POP
80596: POP
// end ;
80597: LD_VAR 0 3
80601: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80602: LD_INT 0
80604: PPUSH
80605: PPUSH
80606: PPUSH
// if not unit or IsInUnit ( unit ) then
80607: LD_VAR 0 1
80611: NOT
80612: PUSH
80613: LD_VAR 0 1
80617: PPUSH
80618: CALL_OW 310
80622: OR
80623: IFFALSE 80627
// exit ;
80625: GO 80718
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80627: LD_ADDR_VAR 0 4
80631: PUSH
80632: LD_VAR 0 1
80636: PPUSH
80637: CALL_OW 250
80641: PPUSH
80642: LD_VAR 0 2
80646: PPUSH
80647: LD_INT 1
80649: PPUSH
80650: CALL_OW 272
80654: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80655: LD_ADDR_VAR 0 5
80659: PUSH
80660: LD_VAR 0 1
80664: PPUSH
80665: CALL_OW 251
80669: PPUSH
80670: LD_VAR 0 2
80674: PPUSH
80675: LD_INT 1
80677: PPUSH
80678: CALL_OW 273
80682: ST_TO_ADDR
// if ValidHex ( x , y ) then
80683: LD_VAR 0 4
80687: PPUSH
80688: LD_VAR 0 5
80692: PPUSH
80693: CALL_OW 488
80697: IFFALSE 80718
// ComTurnXY ( unit , x , y ) ;
80699: LD_VAR 0 1
80703: PPUSH
80704: LD_VAR 0 4
80708: PPUSH
80709: LD_VAR 0 5
80713: PPUSH
80714: CALL_OW 118
// end ;
80718: LD_VAR 0 3
80722: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80723: LD_INT 0
80725: PPUSH
80726: PPUSH
// result := false ;
80727: LD_ADDR_VAR 0 3
80731: PUSH
80732: LD_INT 0
80734: ST_TO_ADDR
// if not units then
80735: LD_VAR 0 2
80739: NOT
80740: IFFALSE 80744
// exit ;
80742: GO 80789
// for i in units do
80744: LD_ADDR_VAR 0 4
80748: PUSH
80749: LD_VAR 0 2
80753: PUSH
80754: FOR_IN
80755: IFFALSE 80787
// if See ( side , i ) then
80757: LD_VAR 0 1
80761: PPUSH
80762: LD_VAR 0 4
80766: PPUSH
80767: CALL_OW 292
80771: IFFALSE 80785
// begin result := true ;
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: LD_INT 1
80780: ST_TO_ADDR
// exit ;
80781: POP
80782: POP
80783: GO 80789
// end ;
80785: GO 80754
80787: POP
80788: POP
// end ;
80789: LD_VAR 0 3
80793: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80794: LD_INT 0
80796: PPUSH
80797: PPUSH
80798: PPUSH
80799: PPUSH
// if not unit or not points then
80800: LD_VAR 0 1
80804: NOT
80805: PUSH
80806: LD_VAR 0 2
80810: NOT
80811: OR
80812: IFFALSE 80816
// exit ;
80814: GO 80906
// dist := 99999 ;
80816: LD_ADDR_VAR 0 5
80820: PUSH
80821: LD_INT 99999
80823: ST_TO_ADDR
// for i in points do
80824: LD_ADDR_VAR 0 4
80828: PUSH
80829: LD_VAR 0 2
80833: PUSH
80834: FOR_IN
80835: IFFALSE 80904
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80837: LD_ADDR_VAR 0 6
80841: PUSH
80842: LD_VAR 0 1
80846: PPUSH
80847: LD_VAR 0 4
80851: PUSH
80852: LD_INT 1
80854: ARRAY
80855: PPUSH
80856: LD_VAR 0 4
80860: PUSH
80861: LD_INT 2
80863: ARRAY
80864: PPUSH
80865: CALL_OW 297
80869: ST_TO_ADDR
// if tmpDist < dist then
80870: LD_VAR 0 6
80874: PUSH
80875: LD_VAR 0 5
80879: LESS
80880: IFFALSE 80902
// begin result := i ;
80882: LD_ADDR_VAR 0 3
80886: PUSH
80887: LD_VAR 0 4
80891: ST_TO_ADDR
// dist := tmpDist ;
80892: LD_ADDR_VAR 0 5
80896: PUSH
80897: LD_VAR 0 6
80901: ST_TO_ADDR
// end ; end ;
80902: GO 80834
80904: POP
80905: POP
// end ;
80906: LD_VAR 0 3
80910: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80911: LD_INT 0
80913: PPUSH
// uc_side := side ;
80914: LD_ADDR_OWVAR 20
80918: PUSH
80919: LD_VAR 0 1
80923: ST_TO_ADDR
// uc_nation := 3 ;
80924: LD_ADDR_OWVAR 21
80928: PUSH
80929: LD_INT 3
80931: ST_TO_ADDR
// vc_chassis := 25 ;
80932: LD_ADDR_OWVAR 37
80936: PUSH
80937: LD_INT 25
80939: ST_TO_ADDR
// vc_engine := engine_siberite ;
80940: LD_ADDR_OWVAR 39
80944: PUSH
80945: LD_INT 3
80947: ST_TO_ADDR
// vc_control := control_computer ;
80948: LD_ADDR_OWVAR 38
80952: PUSH
80953: LD_INT 3
80955: ST_TO_ADDR
// vc_weapon := 59 ;
80956: LD_ADDR_OWVAR 40
80960: PUSH
80961: LD_INT 59
80963: ST_TO_ADDR
// result := CreateVehicle ;
80964: LD_ADDR_VAR 0 5
80968: PUSH
80969: CALL_OW 45
80973: ST_TO_ADDR
// SetDir ( result , d ) ;
80974: LD_VAR 0 5
80978: PPUSH
80979: LD_VAR 0 4
80983: PPUSH
80984: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80988: LD_VAR 0 5
80992: PPUSH
80993: LD_VAR 0 2
80997: PPUSH
80998: LD_VAR 0 3
81002: PPUSH
81003: LD_INT 0
81005: PPUSH
81006: CALL_OW 48
// end ;
81010: LD_VAR 0 5
81014: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81015: LD_INT 0
81017: PPUSH
81018: PPUSH
81019: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81020: LD_ADDR_VAR 0 2
81024: PUSH
81025: LD_INT 0
81027: PUSH
81028: LD_INT 0
81030: PUSH
81031: LD_INT 0
81033: PUSH
81034: LD_INT 0
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: LIST
81041: LIST
81042: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81043: LD_VAR 0 1
81047: NOT
81048: PUSH
81049: LD_VAR 0 1
81053: PPUSH
81054: CALL_OW 264
81058: PUSH
81059: LD_INT 12
81061: PUSH
81062: LD_INT 51
81064: PUSH
81065: LD_INT 32
81067: PUSH
81068: LD_INT 89
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: LIST
81075: LIST
81076: IN
81077: NOT
81078: OR
81079: IFFALSE 81083
// exit ;
81081: GO 81181
// for i := 1 to 3 do
81083: LD_ADDR_VAR 0 3
81087: PUSH
81088: DOUBLE
81089: LD_INT 1
81091: DEC
81092: ST_TO_ADDR
81093: LD_INT 3
81095: PUSH
81096: FOR_TO
81097: IFFALSE 81179
// begin tmp := GetCargo ( cargo , i ) ;
81099: LD_ADDR_VAR 0 4
81103: PUSH
81104: LD_VAR 0 1
81108: PPUSH
81109: LD_VAR 0 3
81113: PPUSH
81114: CALL_OW 289
81118: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81119: LD_ADDR_VAR 0 2
81123: PUSH
81124: LD_VAR 0 2
81128: PPUSH
81129: LD_VAR 0 3
81133: PPUSH
81134: LD_VAR 0 4
81138: PPUSH
81139: CALL_OW 1
81143: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81144: LD_ADDR_VAR 0 2
81148: PUSH
81149: LD_VAR 0 2
81153: PPUSH
81154: LD_INT 4
81156: PPUSH
81157: LD_VAR 0 2
81161: PUSH
81162: LD_INT 4
81164: ARRAY
81165: PUSH
81166: LD_VAR 0 4
81170: PLUS
81171: PPUSH
81172: CALL_OW 1
81176: ST_TO_ADDR
// end ;
81177: GO 81096
81179: POP
81180: POP
// end ;
81181: LD_VAR 0 2
81185: RET
// export function Length ( array ) ; begin
81186: LD_INT 0
81188: PPUSH
// result := array + 0 ;
81189: LD_ADDR_VAR 0 2
81193: PUSH
81194: LD_VAR 0 1
81198: PUSH
81199: LD_INT 0
81201: PLUS
81202: ST_TO_ADDR
// end ;
81203: LD_VAR 0 2
81207: RET
// export function PrepareArray ( array ) ; begin
81208: LD_INT 0
81210: PPUSH
// result := array diff 0 ;
81211: LD_ADDR_VAR 0 2
81215: PUSH
81216: LD_VAR 0 1
81220: PUSH
81221: LD_INT 0
81223: DIFF
81224: ST_TO_ADDR
// if not result [ 1 ] then
81225: LD_VAR 0 2
81229: PUSH
81230: LD_INT 1
81232: ARRAY
81233: NOT
81234: IFFALSE 81254
// result := Delete ( result , 1 ) ;
81236: LD_ADDR_VAR 0 2
81240: PUSH
81241: LD_VAR 0 2
81245: PPUSH
81246: LD_INT 1
81248: PPUSH
81249: CALL_OW 3
81253: ST_TO_ADDR
// end ;
81254: LD_VAR 0 2
81258: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81259: LD_INT 0
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
// sibRocketRange := 25 ;
81265: LD_ADDR_VAR 0 6
81269: PUSH
81270: LD_INT 25
81272: ST_TO_ADDR
// result := false ;
81273: LD_ADDR_VAR 0 4
81277: PUSH
81278: LD_INT 0
81280: ST_TO_ADDR
// for i := 0 to 5 do
81281: LD_ADDR_VAR 0 5
81285: PUSH
81286: DOUBLE
81287: LD_INT 0
81289: DEC
81290: ST_TO_ADDR
81291: LD_INT 5
81293: PUSH
81294: FOR_TO
81295: IFFALSE 81362
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81297: LD_VAR 0 1
81301: PPUSH
81302: LD_VAR 0 5
81306: PPUSH
81307: LD_VAR 0 6
81311: PPUSH
81312: CALL_OW 272
81316: PPUSH
81317: LD_VAR 0 2
81321: PPUSH
81322: LD_VAR 0 5
81326: PPUSH
81327: LD_VAR 0 6
81331: PPUSH
81332: CALL_OW 273
81336: PPUSH
81337: LD_VAR 0 3
81341: PPUSH
81342: CALL_OW 309
81346: IFFALSE 81360
// begin result := true ;
81348: LD_ADDR_VAR 0 4
81352: PUSH
81353: LD_INT 1
81355: ST_TO_ADDR
// exit ;
81356: POP
81357: POP
81358: GO 81364
// end ;
81360: GO 81294
81362: POP
81363: POP
// end ;
81364: LD_VAR 0 4
81368: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81369: LD_INT 0
81371: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81372: LD_VAR 0 1
81376: PPUSH
81377: LD_VAR 0 2
81381: PPUSH
81382: LD_INT 0
81384: PPUSH
81385: LD_INT 0
81387: PPUSH
81388: LD_INT 1
81390: PPUSH
81391: LD_INT 0
81393: PPUSH
81394: CALL_OW 587
// end ;
81398: LD_VAR 0 3
81402: RET
// export function CenterOnNow ( unit ) ; begin
81403: LD_INT 0
81405: PPUSH
// result := IsInUnit ( unit ) ;
81406: LD_ADDR_VAR 0 2
81410: PUSH
81411: LD_VAR 0 1
81415: PPUSH
81416: CALL_OW 310
81420: ST_TO_ADDR
// if not result then
81421: LD_VAR 0 2
81425: NOT
81426: IFFALSE 81438
// result := unit ;
81428: LD_ADDR_VAR 0 2
81432: PUSH
81433: LD_VAR 0 1
81437: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81438: LD_VAR 0 1
81442: PPUSH
81443: CALL_OW 87
// end ;
81447: LD_VAR 0 2
81451: RET
// export function ComMoveHex ( unit , hex ) ; begin
81452: LD_INT 0
81454: PPUSH
// if not hex then
81455: LD_VAR 0 2
81459: NOT
81460: IFFALSE 81464
// exit ;
81462: GO 81517
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81464: LD_VAR 0 2
81468: PUSH
81469: LD_INT 1
81471: ARRAY
81472: PPUSH
81473: LD_VAR 0 2
81477: PUSH
81478: LD_INT 2
81480: ARRAY
81481: PPUSH
81482: CALL_OW 428
81486: IFFALSE 81490
// exit ;
81488: GO 81517
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81490: LD_VAR 0 1
81494: PPUSH
81495: LD_VAR 0 2
81499: PUSH
81500: LD_INT 1
81502: ARRAY
81503: PPUSH
81504: LD_VAR 0 2
81508: PUSH
81509: LD_INT 2
81511: ARRAY
81512: PPUSH
81513: CALL_OW 111
// end ;
81517: LD_VAR 0 3
81521: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81522: LD_INT 0
81524: PPUSH
81525: PPUSH
81526: PPUSH
// if not unit or not enemy then
81527: LD_VAR 0 1
81531: NOT
81532: PUSH
81533: LD_VAR 0 2
81537: NOT
81538: OR
81539: IFFALSE 81543
// exit ;
81541: GO 81667
// x := GetX ( enemy ) ;
81543: LD_ADDR_VAR 0 4
81547: PUSH
81548: LD_VAR 0 2
81552: PPUSH
81553: CALL_OW 250
81557: ST_TO_ADDR
// y := GetY ( enemy ) ;
81558: LD_ADDR_VAR 0 5
81562: PUSH
81563: LD_VAR 0 2
81567: PPUSH
81568: CALL_OW 251
81572: ST_TO_ADDR
// if ValidHex ( x , y ) then
81573: LD_VAR 0 4
81577: PPUSH
81578: LD_VAR 0 5
81582: PPUSH
81583: CALL_OW 488
81587: IFFALSE 81667
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81589: LD_VAR 0 2
81593: PPUSH
81594: CALL_OW 247
81598: PUSH
81599: LD_INT 3
81601: PUSH
81602: LD_INT 2
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: IN
81609: PUSH
81610: LD_VAR 0 1
81614: PPUSH
81615: CALL_OW 255
81619: PPUSH
81620: LD_VAR 0 2
81624: PPUSH
81625: CALL_OW 292
81629: AND
81630: IFFALSE 81648
// ComAttackUnit ( unit , enemy ) else
81632: LD_VAR 0 1
81636: PPUSH
81637: LD_VAR 0 2
81641: PPUSH
81642: CALL_OW 115
81646: GO 81667
// ComAgressiveMove ( unit , x , y ) ;
81648: LD_VAR 0 1
81652: PPUSH
81653: LD_VAR 0 4
81657: PPUSH
81658: LD_VAR 0 5
81662: PPUSH
81663: CALL_OW 114
// end ; end_of_file
81667: LD_VAR 0 3
81671: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81672: LD_VAR 0 1
81676: PUSH
81677: LD_INT 200
81679: DOUBLE
81680: GREATEREQUAL
81681: IFFALSE 81689
81683: LD_INT 299
81685: DOUBLE
81686: LESSEQUAL
81687: IFTRUE 81691
81689: GO 81723
81691: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81692: LD_VAR 0 1
81696: PPUSH
81697: LD_VAR 0 2
81701: PPUSH
81702: LD_VAR 0 3
81706: PPUSH
81707: LD_VAR 0 4
81711: PPUSH
81712: LD_VAR 0 5
81716: PPUSH
81717: CALL 36216 0 5
81721: GO 81800
81723: LD_INT 300
81725: DOUBLE
81726: GREATEREQUAL
81727: IFFALSE 81735
81729: LD_INT 399
81731: DOUBLE
81732: LESSEQUAL
81733: IFTRUE 81737
81735: GO 81799
81737: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81738: LD_VAR 0 1
81742: PPUSH
81743: LD_VAR 0 2
81747: PPUSH
81748: LD_VAR 0 3
81752: PPUSH
81753: LD_VAR 0 4
81757: PPUSH
81758: LD_VAR 0 5
81762: PPUSH
81763: LD_VAR 0 6
81767: PPUSH
81768: LD_VAR 0 7
81772: PPUSH
81773: LD_VAR 0 8
81777: PPUSH
81778: LD_VAR 0 9
81782: PPUSH
81783: LD_VAR 0 10
81787: PPUSH
81788: LD_VAR 0 11
81792: PPUSH
81793: CALL 32541 0 11
81797: GO 81800
81799: POP
// end ;
81800: PPOPN 11
81802: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81803: LD_VAR 0 1
81807: PPUSH
81808: LD_VAR 0 2
81812: PPUSH
81813: LD_VAR 0 3
81817: PPUSH
81818: LD_VAR 0 4
81822: PPUSH
81823: LD_VAR 0 5
81827: PPUSH
81828: CALL 35952 0 5
// end ; end_of_file
81832: PPOPN 5
81834: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81835: LD_VAR 0 1
81839: PPUSH
81840: LD_VAR 0 2
81844: PPUSH
81845: LD_VAR 0 3
81849: PPUSH
81850: LD_VAR 0 4
81854: PPUSH
81855: LD_VAR 0 5
81859: PPUSH
81860: LD_VAR 0 6
81864: PPUSH
81865: CALL 20193 0 6
// end ;
81869: PPOPN 6
81871: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81872: LD_INT 0
81874: PPUSH
// begin if not units then
81875: LD_VAR 0 1
81879: NOT
81880: IFFALSE 81884
// exit ;
81882: GO 81884
// end ;
81884: PPOPN 7
81886: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81887: CALL 20097 0 0
// end ;
81891: PPOPN 1
81893: END
