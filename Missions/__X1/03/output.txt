// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 621 0 0
// PrepareArabian ;
  12: CALL 1056 0 0
// PrepareAmerican ;
  16: CALL 4117 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9185 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 42000
 166: PUSH
 167: LD_INT 31500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 6
 216: PUSH
 217: LD_INT 7
 219: PUSH
 220: LD_INT 8
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 610
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := 0 ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 12
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 591: CALL_OW 44
 595: PPUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 49
// end ;
 608: GO 536
 610: POP
 611: POP
// InitHc ;
 612: CALL_OW 19
// end ;
 616: LD_VAR 0 3
 620: RET
// export function CreateNature ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 625: LD_INT 2
 627: PPUSH
 628: LD_INT 5
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: LD_INT 4
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: LD_OWVAR 67
 650: ARRAY
 651: PPUSH
 652: CALL 493 0 2
// for i := 1 to 2 do
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: DOUBLE
 662: LD_INT 1
 664: DEC
 665: ST_TO_ADDR
 666: LD_INT 2
 668: PUSH
 669: FOR_TO
 670: IFFALSE 705
// begin hc_class := 21 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 21
 679: ST_TO_ADDR
// hc_gallery :=  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 688: CALL_OW 44
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// end ;
 703: GO 669
 705: POP
 706: POP
// for i := 1 to 2 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 2
 719: PUSH
 720: FOR_TO
 721: IFFALSE 756
// begin hc_class := 18 ;
 723: LD_ADDR_OWVAR 28
 727: PUSH
 728: LD_INT 18
 730: ST_TO_ADDR
// hc_gallery :=  ;
 731: LD_ADDR_OWVAR 33
 735: PUSH
 736: LD_STRING 
 738: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 739: CALL_OW 44
 743: PPUSH
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: GO 720
 756: POP
 757: POP
// for i := 1 to 2 do
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: DOUBLE
 764: LD_INT 1
 766: DEC
 767: ST_TO_ADDR
 768: LD_INT 2
 770: PUSH
 771: FOR_TO
 772: IFFALSE 807
// begin hc_class := 13 ;
 774: LD_ADDR_OWVAR 28
 778: PUSH
 779: LD_INT 13
 781: ST_TO_ADDR
// hc_gallery :=  ;
 782: LD_ADDR_OWVAR 33
 786: PUSH
 787: LD_STRING 
 789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 790: CALL_OW 44
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 771
 807: POP
 808: POP
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 814: LD_INT 0
 816: PPUSH
 817: PPUSH
 818: PPUSH
// if not observer or not unit then
 819: LD_VAR 0 1
 823: NOT
 824: PUSH
 825: LD_VAR 0 2
 829: NOT
 830: OR
 831: IFFALSE 835
// exit ;
 833: GO 883
// if not See ( GetSide ( observer ) , unit ) then
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 255
 844: PPUSH
 845: LD_VAR 0 2
 849: PPUSH
 850: CALL_OW 292
 854: NOT
 855: IFFALSE 859
// exit ;
 857: GO 883
// result := GetDistUnits ( observer , unit ) < 12 ;
 859: LD_ADDR_VAR 0 3
 863: PUSH
 864: LD_VAR 0 1
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 296
 878: PUSH
 879: LD_INT 12
 881: LESS
 882: ST_TO_ADDR
// end ;
 883: LD_VAR 0 3
 887: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 888: LD_INT 0
 890: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PPUSH
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 2
 907: ARRAY
 908: PPUSH
 909: CALL_OW 488
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: PPUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: PPUSH
 932: CALL_OW 428
 936: PUSH
 937: LD_INT 0
 939: EQUAL
 940: AND
 941: IFFALSE 975
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 943: LD_VAR 0 1
 947: PPUSH
 948: LD_VAR 0 2
 952: PUSH
 953: LD_INT 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 2
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 3
 970: PPUSH
 971: CALL_OW 48
// end ;
 975: LD_VAR 0 4
 979: RET
// export function ReverseArray ( array ) ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// if not array then
 984: LD_VAR 0 1
 988: NOT
 989: IFFALSE 993
// exit ;
 991: GO 1051
// result := [ ] ;
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i := 1 to array do
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_VAR 0 1
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1049
// result := Insert ( result , 1 , array [ i ] ) ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: LD_VAR 0 1
1035: PUSH
1036: LD_VAR 0 3
1040: ARRAY
1041: PPUSH
1042: CALL_OW 2
1046: ST_TO_ADDR
1047: GO 1015
1049: POP
1050: POP
// end ; end_of_file
1051: LD_VAR 0 2
1055: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
1060: PPUSH
1061: PPUSH
// uc_side := 5 ;
1062: LD_ADDR_OWVAR 20
1066: PUSH
1067: LD_INT 5
1069: ST_TO_ADDR
// uc_nation := 2 ;
1070: LD_ADDR_OWVAR 21
1074: PUSH
1075: LD_INT 2
1077: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1078: LD_INT 5
1080: PPUSH
1081: CALL_OW 274
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: LD_INT 65
1091: PPUSH
1092: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_STRING Farmer
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_STRING 
1109: PPUSH
1110: CALL 38824 0 3
1114: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1115: LD_ADDR_EXP 37
1119: PUSH
1120: LD_STRING Omar
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_STRING 
1128: PPUSH
1129: CALL 38824 0 3
1133: ST_TO_ADDR
// omarSquad := [ ] ;
1134: LD_ADDR_EXP 40
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSquad := [ ] ;
1141: LD_ADDR_EXP 41
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1148: LD_ADDR_EXP 42
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// omarCargo := [ ] ;
1155: LD_ADDR_EXP 43
1159: PUSH
1160: EMPTY
1161: ST_TO_ADDR
// for i := 1 to 5 do
1162: LD_ADDR_VAR 0 2
1166: PUSH
1167: DOUBLE
1168: LD_INT 1
1170: DEC
1171: ST_TO_ADDR
1172: LD_INT 5
1174: PUSH
1175: FOR_TO
1176: IFFALSE 1334
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1178: LD_INT 0
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: CALL_OW 380
// un := CreateHuman ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: CALL_OW 44
1225: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1226: LD_ADDR_EXP 40
1230: PUSH
1231: LD_EXP 40
1235: PUSH
1236: LD_VAR 0 3
1240: UNION
1241: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_INT 87
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 91
1259: PUSH
1260: LD_INT 32
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 82
1269: PUSH
1270: LD_INT 15
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 79
1279: PUSH
1280: LD_INT 14
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 82
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_VAR 0 2
1308: ARRAY
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 888 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1317: LD_VAR 0 3
1321: PPUSH
1322: LD_INT 93
1324: PPUSH
1325: LD_INT 21
1327: PPUSH
1328: CALL_OW 118
// end ;
1332: GO 1175
1334: POP
1335: POP
// uc_side := 2 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 2
1343: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 28
1348: PUSH
1349: LD_STRING Heike
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 38824 0 3
1367: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 32
1372: PUSH
1373: LD_STRING Aviradze
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 38824 0 3
1391: ST_TO_ADDR
// tmp := [ ] ;
1392: LD_ADDR_VAR 0 4
1396: PUSH
1397: EMPTY
1398: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 29
1403: PUSH
1404: LD_STRING Givi
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 38824 0 3
1422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 30
1427: PUSH
1428: LD_STRING Mike
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 38824 0 3
1446: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 31
1451: PUSH
1452: LD_STRING Kamil
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 38824 0 3
1470: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 33
1475: PUSH
1476: LD_STRING Kaia
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 38824 0 3
1494: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 34
1499: PUSH
1500: LD_STRING Sophia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 38824 0 3
1518: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 35
1523: PUSH
1524: LD_STRING Markov
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 38824 0 3
1542: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1543: LD_ADDR_EXP 42
1547: PUSH
1548: LD_STRING 02_others
1550: PPUSH
1551: CALL_OW 31
1555: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1556: LD_ADDR_VAR 0 4
1560: PUSH
1561: LD_EXP 30
1565: PUSH
1566: LD_EXP 31
1570: PUSH
1571: LD_EXP 33
1575: PUSH
1576: LD_EXP 34
1580: PUSH
1581: LD_EXP 35
1585: PUSH
1586: LD_EXP 29
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_EXP 42
1603: ADD
1604: PUSH
1605: LD_INT 0
1607: DIFF
1608: ST_TO_ADDR
// heikeSquad := tmp ;
1609: LD_ADDR_EXP 41
1613: PUSH
1614: LD_VAR 0 4
1618: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1619: LD_EXP 41
1623: PPUSH
1624: LD_INT 25
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 72
1638: PUSH
1639: LD_INT 3
1641: LESS
1642: IFFALSE 1692
// begin SetClass ( Kaia , 1 ) ;
1644: LD_EXP 33
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1656: LD_EXP 30
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1668: LD_EXP 29
1672: PPUSH
1673: LD_INT 1
1675: PPUSH
1676: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1680: LD_EXP 28
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1692: LD_ADDR_VAR 0 4
1696: PUSH
1697: LD_VAR 0 4
1701: PUSH
1702: LD_STRING 02_ape
1704: PPUSH
1705: CALL_OW 31
1709: UNION
1710: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1711: LD_EXP 28
1715: PPUSH
1716: LD_INT 92
1718: PPUSH
1719: LD_INT 17
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1729: LD_EXP 36
1733: PPUSH
1734: LD_INT 95
1736: PPUSH
1737: LD_INT 19
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1747: LD_EXP 37
1751: PPUSH
1752: LD_INT 89
1754: PPUSH
1755: LD_INT 25
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1765: LD_EXP 32
1769: PPUSH
1770: LD_INT 92
1772: PPUSH
1773: LD_INT 27
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1783: LD_EXP 37
1787: PPUSH
1788: LD_EXP 32
1792: PPUSH
1793: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1797: LD_EXP 32
1801: PPUSH
1802: LD_EXP 37
1806: PPUSH
1807: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1811: LD_EXP 28
1815: PUSH
1816: LD_EXP 36
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: LD_EXP 37
1829: PPUSH
1830: CALL_OW 119
// if tmp then
1834: LD_VAR 0 4
1838: IFFALSE 1892
// for i in tmp do
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: FOR_IN
1851: IFFALSE 1890
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1853: LD_VAR 0 2
1857: PPUSH
1858: LD_INT 94
1860: PPUSH
1861: LD_INT 14
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: LD_INT 0
1869: PPUSH
1870: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_EXP 28
1883: PPUSH
1884: CALL_OW 119
// end ;
1888: GO 1850
1890: POP
1891: POP
// farmerSquad := [ ] ;
1892: LD_ADDR_EXP 39
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// uc_side := 5 ;
1899: LD_ADDR_OWVAR 20
1903: PUSH
1904: LD_INT 5
1906: ST_TO_ADDR
// uc_nation := 2 ;
1907: LD_ADDR_OWVAR 21
1911: PUSH
1912: LD_INT 2
1914: ST_TO_ADDR
// for i := 1 to 4 do
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: DOUBLE
1921: LD_INT 1
1923: DEC
1924: ST_TO_ADDR
1925: LD_INT 4
1927: PUSH
1928: FOR_TO
1929: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1931: LD_INT 0
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 2
1939: PPUSH
1940: CALL_OW 380
// un := CreateHuman ;
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: CALL_OW 44
1953: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1954: LD_VAR 0 3
1958: PPUSH
1959: LD_INT 102
1961: PPUSH
1962: LD_INT 27
1964: PPUSH
1965: LD_INT 4
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1975: LD_ADDR_EXP 39
1979: PUSH
1980: LD_EXP 39
1984: PUSH
1985: LD_VAR 0 3
1989: UNION
1990: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_EXP 37
2000: PPUSH
2001: CALL_OW 119
// end ;
2005: GO 1928
2007: POP
2008: POP
// for i := 1 to 2 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 2
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2101
// begin PrepareHuman ( false , 2 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 3
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_INT 108
2055: PPUSH
2056: LD_INT 62
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2069: LD_ADDR_EXP 39
2073: PUSH
2074: LD_EXP 39
2078: PUSH
2079: LD_VAR 0 3
2083: UNION
2084: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_EXP 37
2094: PPUSH
2095: CALL_OW 119
// end ;
2099: GO 2022
2101: POP
2102: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 63
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 15
2114: NEG
2115: PPUSH
2116: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2120: LD_INT 109
2122: PPUSH
2123: LD_INT 63
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: CALL_OW 331
// end ;
2133: LD_VAR 0 1
2137: RET
// export function PrepareIbrahim ( x , y ) ; begin
2138: LD_INT 0
2140: PPUSH
// uc_side := 6 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 6
2148: ST_TO_ADDR
// uc_nation := 3 ;
2149: LD_ADDR_OWVAR 21
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2157: LD_ADDR_EXP 38
2161: PUSH
2162: LD_STRING IbrahimRu
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: LD_STRING 
2170: PPUSH
2171: CALL 38824 0 3
2175: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2176: LD_EXP 38
2180: PPUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 50
// end ;
2201: LD_VAR 0 3
2205: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2206: LD_EXP 37
2210: PUSH
2211: LD_EXP 40
2215: ADD
2216: PPUSH
2217: LD_INT 95
2219: PUSH
2220: LD_INT 3
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 72
2231: IFFALSE 2287
2233: GO 2235
2235: DISABLE
2236: LD_INT 0
2238: PPUSH
// begin enable ;
2239: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2240: LD_ADDR_VAR 0 1
2244: PUSH
2245: LD_EXP 37
2249: PUSH
2250: LD_EXP 40
2254: ADD
2255: PPUSH
2256: LD_INT 95
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 72
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2285
// RemoveUnit ( i ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 64
2283: GO 2271
2285: POP
2286: POP
// end ;
2287: PPOPN 1
2289: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2290: LD_EXP 3
2294: PUSH
2295: LD_EXP 36
2299: PPUSH
2300: LD_INT 4
2302: PPUSH
2303: CALL_OW 308
2307: AND
2308: IFFALSE 3112
2310: GO 2312
2312: DISABLE
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2319: LD_EXP 36
2323: PPUSH
2324: LD_INT 110
2326: PPUSH
2327: LD_INT 60
2329: PPUSH
2330: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2334: LD_EXP 36
2338: PPUSH
2339: LD_INT 110
2341: PPUSH
2342: LD_INT 61
2344: PPUSH
2345: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_EXP 39
2358: PPUSH
2359: LD_INT 25
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 72
2373: ST_TO_ADDR
// if tmp then
2374: LD_VAR 0 2
2378: IFFALSE 2472
// begin for i := 1 to 2 do
2380: LD_ADDR_VAR 0 1
2384: PUSH
2385: DOUBLE
2386: LD_INT 1
2388: DEC
2389: ST_TO_ADDR
2390: LD_INT 2
2392: PUSH
2393: FOR_TO
2394: IFFALSE 2470
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2396: LD_VAR 0 2
2400: PUSH
2401: LD_VAR 0 1
2405: ARRAY
2406: PPUSH
2407: LD_INT 5
2409: PPUSH
2410: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2414: LD_VAR 0 2
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2432: LD_VAR 0 2
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PPUSH
2443: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2447: LD_VAR 0 2
2451: PUSH
2452: LD_VAR 0 1
2456: ARRAY
2457: PPUSH
2458: LD_INT 107
2460: PPUSH
2461: LD_INT 66
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2393
2470: POP
2471: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_EXP 39
2481: PPUSH
2482: LD_INT 25
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 72
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_EXP 39
2513: PPUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// until tmp ;
2529: LD_VAR 0 2
2533: IFFALSE 2497
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_INT 31
2542: PPUSH
2543: LD_INT 102
2545: PPUSH
2546: LD_INT 69
2548: PPUSH
2549: LD_INT 2
2551: PPUSH
2552: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2556: LD_INT 35
2558: PPUSH
2559: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2563: LD_EXP 39
2567: PPUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: EMPTY
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 25
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 72
2599: IFFALSE 2556
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_EXP 39
2610: PPUSH
2611: LD_INT 25
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 6
2633: PPUSH
2634: LD_INT 116
2636: PPUSH
2637: LD_INT 55
2639: PPUSH
2640: LD_INT 4
2642: PPUSH
2643: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_INT 4
2654: PPUSH
2655: LD_INT 116
2657: PPUSH
2658: LD_INT 70
2660: PPUSH
2661: LD_INT 5
2663: PPUSH
2664: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_INT 31
2675: PPUSH
2676: LD_INT 109
2678: PPUSH
2679: LD_INT 50
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2696: LD_INT 22
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 3
2718: PUSH
2719: LD_INT 57
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: IFFALSE 2689
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 5
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 30
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 57
2770: PUSH
2771: EMPTY
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2792: LD_ADDR_VAR 0 2
2796: PUSH
2797: LD_EXP 39
2801: PPUSH
2802: LD_INT 25
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 72
2816: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_VAR 0 3
2826: PPUSH
2827: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2838: LD_INT 22
2840: PUSH
2841: LD_INT 5
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 30
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 57
2863: PUSH
2864: EMPTY
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: PPUSH
2876: CALL_OW 69
2880: PUSH
2881: LD_INT 2
2883: GREATEREQUAL
2884: IFFALSE 2831
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: LD_EXP 39
2895: PPUSH
2896: LD_INT 25
2898: PUSH
2899: LD_INT 2
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 1
2918: ARRAY
2919: PPUSH
2920: LD_INT 5
2922: PPUSH
2923: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2958: LD_VAR 0 2
2962: PUSH
2963: LD_INT 2
2965: ARRAY
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2987: LD_VAR 0 2
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: ARRAY
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3013: LD_ADDR_VAR 0 4
3017: PUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 5
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 31
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: ST_TO_ADDR
// for i := 1 to 2 do
3047: LD_ADDR_VAR 0 1
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 2
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3095
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3063: LD_VAR 0 2
3067: PUSH
3068: LD_VAR 0 1
3072: PUSH
3073: LD_INT 1
3075: PLUS
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 4
3082: PUSH
3083: LD_VAR 0 1
3087: ARRAY
3088: PPUSH
3089: CALL_OW 180
3093: GO 3060
3095: POP
3096: POP
// wait ( 1 1$00 ) ;
3097: LD_INT 2100
3099: PPUSH
3100: CALL_OW 67
// farmerBaseReady := true ;
3104: LD_ADDR_EXP 4
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end ;
3112: PPOPN 4
3114: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3115: LD_EXP 4
3119: PUSH
3120: LD_EXP 11
3124: NOT
3125: AND
3126: IFFALSE 3648
3128: GO 3130
3130: DISABLE
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// begin enable ;
3138: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3139: LD_ADDR_VAR 0 3
3143: PUSH
3144: LD_EXP 39
3148: PPUSH
3149: LD_INT 25
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 72
3163: PUSH
3164: LD_EXP 36
3168: ADD
3169: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_EXP 39
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 72
3194: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: LD_INT 24
3225: PUSH
3226: LD_INT 1000
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 30
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 302
3294: IFFALSE 3358
// for i in sol do
3296: LD_ADDR_VAR 0 1
3300: PUSH
3301: LD_VAR 0 3
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3356
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 256
3318: PUSH
3319: LD_INT 999
3321: LESS
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 310
3332: NOT
3333: AND
3334: IFFALSE 3354
// ComEnterUnit ( i , arm [ 1 ] ) ;
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_VAR 0 4
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 120
3354: GO 3306
3356: POP
3357: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3358: LD_VAR 0 2
3362: NOT
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 69
3392: NOT
3393: AND
3394: IFFALSE 3486
// begin uc_side := 5 ;
3396: LD_ADDR_OWVAR 20
3400: PUSH
3401: LD_INT 5
3403: ST_TO_ADDR
// uc_nation := 2 ;
3404: LD_ADDR_OWVAR 21
3408: PUSH
3409: LD_INT 2
3411: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 380
// eng := CreateHuman ;
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3435: LD_VAR 0 2
3439: PPUSH
3440: LD_INT 102
3442: PPUSH
3443: LD_INT 8
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3453: LD_VAR 0 2
3457: PPUSH
3458: LD_INT 110
3460: PPUSH
3461: LD_INT 60
3463: PPUSH
3464: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3468: LD_ADDR_EXP 39
3472: PUSH
3473: LD_EXP 39
3477: PUSH
3478: LD_VAR 0 2
3482: UNION
3483: ST_TO_ADDR
// end else
3484: GO 3648
// begin for i in eng do
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3646
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3499: LD_INT 10
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: CALL_OW 287
3509: IFFALSE 3560
// begin if IsInUnit ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3531
// ComExitBuilding ( i ) ;
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_INT 10
3538: PPUSH
3539: CALL_OW 308
3543: NOT
3544: IFFALSE 3558
// AddComMoveToArea ( i , collectFarmerArea ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 10
3553: PPUSH
3554: CALL_OW 173
// end else
3558: GO 3644
// begin if damagedBuilding then
3560: LD_VAR 0 5
3564: IFFALSE 3608
// begin if IsInUnit ( i ) then
3566: LD_VAR 0 1
3570: PPUSH
3571: CALL_OW 310
3575: IFFALSE 3588
// ComExitBuilding ( i ) else
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 122
3586: GO 3606
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_VAR 0 5
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PPUSH
3602: CALL_OW 130
// end else
3606: GO 3644
// if not IsInUnit ( i ) and not HasTask ( i ) then
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 310
3617: NOT
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: AND
3630: IFFALSE 3644
// ComEnterUnit ( i , arDepot ) ;
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_INT 5
3639: PPUSH
3640: CALL_OW 120
// end ; end ;
3644: GO 3496
3646: POP
3647: POP
// end ; end ;
3648: PPOPN 5
3650: END
// export function CargoEvacuation ; begin
3651: LD_INT 0
3653: PPUSH
// wait ( 0 0$3 ) ;
3654: LD_INT 105
3656: PPUSH
3657: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3661: LD_ADDR_EXP 21
3665: PUSH
3666: LD_EXP 21
3670: PUSH
3671: LD_INT 1
3673: MINUS
3674: ST_TO_ADDR
// if omarCargoCounter = 0 then
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 0
3682: EQUAL
3683: IFFALSE 3687
// exit ;
3685: GO 3994
// if omarCargo then
3687: LD_EXP 43
3691: IFFALSE 3702
// RemoveUnit ( omarCargo ) ;
3693: LD_EXP 43
3697: PPUSH
3698: CALL_OW 64
// omarCargo := PrepareCargo ;
3702: LD_ADDR_EXP 43
3706: PUSH
3707: CALL 3999 0 0
3711: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3712: LD_EXP 43
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3724: LD_EXP 43
3728: PPUSH
3729: LD_INT 107
3731: PPUSH
3732: LD_INT 59
3734: PPUSH
3735: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3739: LD_INT 35
3741: PPUSH
3742: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3746: LD_EXP 43
3750: PPUSH
3751: LD_INT 107
3753: PPUSH
3754: LD_INT 59
3756: PPUSH
3757: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3761: LD_EXP 43
3765: PPUSH
3766: CALL_OW 302
3770: NOT
3771: PUSH
3772: LD_EXP 43
3776: PPUSH
3777: CALL_OW 301
3781: OR
3782: IFFALSE 3786
// exit ;
3784: GO 3994
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3786: LD_EXP 43
3790: PPUSH
3791: LD_INT 107
3793: PPUSH
3794: LD_INT 59
3796: PPUSH
3797: CALL_OW 307
3801: PUSH
3802: LD_EXP 43
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 296
3814: PUSH
3815: LD_INT 6
3817: LESS
3818: OR
3819: IFFALSE 3739
// SetTag ( omarCargo , 1 ) ;
3821: LD_EXP 43
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 109
// wait ( 0 0$03 ) ;
3833: LD_INT 105
3835: PPUSH
3836: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 5
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3855: LD_EXP 43
3859: PPUSH
3860: LD_INT 103
3862: PPUSH
3863: LD_INT 9
3865: PPUSH
3866: CALL_OW 171
// wait ( 0 0$1 ) ;
3870: LD_INT 35
3872: PPUSH
3873: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3877: LD_EXP 43
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 100
3887: PPUSH
3888: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3892: LD_INT 35
3894: PPUSH
3895: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3899: LD_EXP 43
3903: PPUSH
3904: LD_INT 103
3906: PPUSH
3907: LD_INT 9
3909: PPUSH
3910: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 302
3923: NOT
3924: PUSH
3925: LD_EXP 43
3929: PPUSH
3930: CALL_OW 301
3934: OR
3935: IFFALSE 3939
// exit ;
3937: GO 3994
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3939: LD_EXP 43
3943: PPUSH
3944: LD_INT 103
3946: PPUSH
3947: LD_INT 9
3949: PPUSH
3950: CALL_OW 307
3954: PUSH
3955: LD_EXP 43
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: CALL_OW 308
3967: OR
3968: PUSH
3969: LD_EXP 43
3973: PPUSH
3974: CALL_OW 110
3978: PUSH
3979: LD_INT 0
3981: GREATER
3982: AND
3983: IFFALSE 3892
// RemoveUnit ( omarCargo ) ;
3985: LD_EXP 43
3989: PPUSH
3990: CALL_OW 64
// end ;
3994: LD_VAR 0 1
3998: RET
// export function PrepareCargo ; var un , veh ; begin
3999: LD_INT 0
4001: PPUSH
4002: PPUSH
4003: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 32
4026: PPUSH
4027: LD_INT 80
4029: PPUSH
4030: CALL 325 0 7
4034: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 101
4054: PPUSH
4055: LD_INT 8
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4065: LD_INT 0
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 4
4073: PPUSH
4074: CALL_OW 380
// un := CreateHuman ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: CALL_OW 44
4087: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4088: LD_VAR 0 2
4092: PPUSH
4093: LD_VAR 0 3
4097: PPUSH
4098: CALL_OW 52
// result := veh ;
4102: LD_ADDR_VAR 0 1
4106: PUSH
4107: LD_VAR 0 3
4111: ST_TO_ADDR
// end ; end_of_file
4112: LD_VAR 0 1
4116: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
// usForces := [ ] ;
4122: LD_ADDR_EXP 44
4126: PUSH
4127: EMPTY
4128: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4129: LD_ADDR_EXP 46
4133: PUSH
4134: LD_INT 6
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 27
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 24
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 27
4172: PUSH
4173: LD_INT 29
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4193: LD_INT 11
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: LD_INT 150
4206: PUSH
4207: LD_INT 120
4209: PUSH
4210: LD_INT 100
4212: PUSH
4213: LD_INT 80
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL_OW 277
// if Difficulty = 1 then
4232: LD_OWVAR 67
4236: PUSH
4237: LD_INT 1
4239: EQUAL
4240: IFFALSE 4249
// RemoveUnit ( hillBun ) ;
4242: LD_INT 14
4244: PPUSH
4245: CALL_OW 64
// uc_side := 1 ;
4249: LD_ADDR_OWVAR 20
4253: PUSH
4254: LD_INT 1
4256: ST_TO_ADDR
// uc_nation := 1 ;
4257: LD_ADDR_OWVAR 21
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// hc_gallery :=  ;
4265: LD_ADDR_OWVAR 33
4269: PUSH
4270: LD_STRING 
4272: ST_TO_ADDR
// hc_name :=  ;
4273: LD_ADDR_OWVAR 26
4277: PUSH
4278: LD_STRING 
4280: ST_TO_ADDR
// hc_importance := 0 ;
4281: LD_ADDR_OWVAR 32
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: CALL_OW 380
// usCommander := CreateHuman ;
4302: LD_ADDR_EXP 45
4306: PUSH
4307: CALL_OW 44
4311: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4312: LD_EXP 45
4316: PPUSH
4317: LD_INT 11
4319: PPUSH
4320: CALL_OW 52
// if Difficulty > 1 then
4324: LD_OWVAR 67
4328: PUSH
4329: LD_INT 1
4331: GREATER
4332: IFFALSE 4414
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 1
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: LD_OWVAR 67
4358: ARRAY
4359: PPUSH
4360: CALL_OW 380
// un := CreateHuman ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: CALL_OW 44
4373: ST_TO_ADDR
// usForces := usForces union un ;
4374: LD_ADDR_EXP 44
4378: PUSH
4379: LD_EXP 44
4383: PUSH
4384: LD_VAR 0 3
4388: UNION
4389: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4390: LD_VAR 0 3
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4402: LD_VAR 0 3
4406: PPUSH
4407: LD_INT 14
4409: PPUSH
4410: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: LD_OWVAR 67
4446: ARRAY
4447: PUSH
4448: FOR_TO
4449: IFFALSE 4595
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 0
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 1
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 380
// un := CreateHuman ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 44
4494: ST_TO_ADDR
// usForces := usForces union un ;
4495: LD_ADDR_EXP 44
4499: PUSH
4500: LD_EXP 44
4504: PUSH
4505: LD_VAR 0 3
4509: UNION
4510: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 39
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: LD_INT 4
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// if i < 3 then
4532: LD_VAR 0 2
4536: PUSH
4537: LD_INT 3
4539: LESS
4540: IFFALSE 4593
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_INT 22
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 58
4559: PUSH
4560: EMPTY
4561: LIST
4562: PUSH
4563: LD_INT 30
4565: PUSH
4566: LD_INT 31
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: PPUSH
4578: CALL_OW 69
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: PPUSH
4589: CALL_OW 120
// end ;
4593: GO 4448
4595: POP
4596: POP
// for i := 1 to 2 do
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: DOUBLE
4603: LD_INT 1
4605: DEC
4606: ST_TO_ADDR
4607: LD_INT 2
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4675
// begin PrepareHuman ( false , 2 , 2 ) ;
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: LD_INT 2
4621: PPUSH
4622: CALL_OW 380
// un := CreateHuman ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: CALL_OW 44
4635: ST_TO_ADDR
// usForces := usForces union un ;
4636: LD_ADDR_EXP 44
4640: PUSH
4641: LD_EXP 44
4645: PUSH
4646: LD_VAR 0 3
4650: UNION
4651: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 39
4659: PPUSH
4660: LD_INT 24
4662: PPUSH
4663: LD_INT 4
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 50
// end ;
4673: GO 4610
4675: POP
4676: POP
// PrepareHuman ( false , 4 , 1 ) ;
4677: LD_INT 0
4679: PPUSH
4680: LD_INT 4
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// usForces := usForces union un ;
4700: LD_ADDR_EXP 44
4704: PUSH
4705: LD_EXP 44
4709: PUSH
4710: LD_VAR 0 3
4714: UNION
4715: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: LD_INT 39
4723: PPUSH
4724: LD_INT 24
4726: PPUSH
4727: LD_INT 4
4729: PPUSH
4730: LD_INT 0
4732: PPUSH
4733: CALL_OW 50
// end ;
4737: LD_VAR 0 1
4741: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4742: LD_EXP 44
4746: PUSH
4747: LD_EXP 6
4751: NOT
4752: AND
4753: PUSH
4754: LD_EXP 14
4758: NOT
4759: AND
4760: IFFALSE 5191
4762: GO 4764
4764: DISABLE
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
4770: PPUSH
4771: PPUSH
// begin enable ;
4772: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_EXP 44
4782: PPUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 72
4797: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_EXP 44
4807: PPUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PPUSH
4818: CALL_OW 72
4822: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_EXP 44
4832: PPUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 72
4847: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4848: LD_INT 7
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 70
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: IFFALSE 4945
// for i in sol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_VAR 0 4
4880: PUSH
4881: FOR_IN
4882: IFFALSE 4943
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: NOT
4894: PUSH
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 310
4904: PPUSH
4905: CALL_OW 266
4909: PUSH
4910: LD_INT 4
4912: EQUAL
4913: NOT
4914: OR
4915: IFFALSE 4941
// begin ComExitBuilding ( i ) ;
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: LD_INT 37
4933: PPUSH
4934: LD_INT 23
4936: PPUSH
4937: CALL_OW 174
// end ;
4941: GO 4881
4943: POP
4944: POP
// if eng then
4945: LD_VAR 0 3
4949: IFFALSE 5191
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 95
4968: PUSH
4969: LD_INT 7
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 21
4978: PUSH
4979: LD_INT 3
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: LD_INT 24
4991: PUSH
4992: LD_INT 1000
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// if b then
5014: LD_VAR 0 2
5018: IFFALSE 5049
// begin ComExitBuilding ( eng ) ;
5020: LD_VAR 0 3
5024: PPUSH
5025: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_VAR 0 2
5038: PUSH
5039: LD_INT 1
5041: ARRAY
5042: PPUSH
5043: CALL_OW 190
// end else
5047: GO 5191
// begin for i in eng do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 3
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5189
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5187
// begin if americanBuildList then
5074: LD_EXP 46
5078: IFFALSE 5163
// begin if IsInUnit ( i ) then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 310
5089: IFFALSE 5100
// ComExitBuilding ( i ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_EXP 46
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_EXP 46
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PPUSH
5131: LD_EXP 46
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 3
5142: ARRAY
5143: PPUSH
5144: LD_EXP 46
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PUSH
5153: LD_INT 4
5155: ARRAY
5156: PPUSH
5157: CALL_OW 205
// end else
5161: GO 5187
// if not IsInUnit ( i ) then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 310
5172: NOT
5173: IFFALSE 5187
// ComEnterUnit ( i , usDepot ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 120
// end ;
5187: GO 5059
5189: POP
5190: POP
// end ; end ; end ;
5191: PPOPN 5
5193: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5194: LD_INT 0
5196: PPUSH
5197: PPUSH
5198: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 35
5206: PUSH
5207: LD_INT 45
5209: PUSH
5210: LD_INT 48
5212: PUSH
5213: LD_EXP 59
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// for i in tech do
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: LD_VAR 0 3
5233: PUSH
5234: FOR_IN
5235: IFFALSE 5253
// AddComResearch ( lab , i ) ;
5237: LD_VAR 0 1
5241: PPUSH
5242: LD_VAR 0 4
5246: PPUSH
5247: CALL_OW 184
5251: GO 5234
5253: POP
5254: POP
// end ;
5255: LD_VAR 0 2
5259: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5260: LD_EXP 12
5264: PUSH
5265: LD_EXP 23
5269: PUSH
5270: LD_EXP 27
5274: LESSEQUAL
5275: AND
5276: IFFALSE 5301
5278: GO 5280
5280: DISABLE
// begin enable ;
5281: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5282: LD_INT 35
5284: PPUSH
5285: LD_INT 2065
5287: PPUSH
5288: CALL_OW 12
5292: PPUSH
5293: CALL_OW 67
// SendConvoy ;
5297: CALL 5407 0 0
// end ;
5301: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5302: LD_EXP 6
5306: PUSH
5307: LD_EXP 18
5311: AND
5312: IFFALSE 5406
5314: GO 5316
5316: DISABLE
// begin if americanHasEscaped then
5317: LD_EXP 8
5321: IFFALSE 5332
// wait ( 3 3$20 ) else
5323: LD_INT 7000
5325: PPUSH
5326: CALL_OW 67
5330: GO 5339
// wait ( 6 6$40 ) ;
5332: LD_INT 14000
5334: PPUSH
5335: CALL_OW 67
// SendAttack ;
5339: CALL 6154 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5343: LD_INT 14000
5345: PUSH
5346: LD_INT 11900
5348: PUSH
5349: LD_INT 11200
5351: PUSH
5352: LD_INT 10150
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_OWVAR 67
5365: ARRAY
5366: PPUSH
5367: CALL_OW 67
// SendAttack ;
5371: CALL 6154 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5375: LD_EXP 19
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: LD_INT 6
5385: PUSH
5386: LD_INT 7
5388: PUSH
5389: LD_INT 8
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_OWVAR 67
5402: ARRAY
5403: LESS
5404: IFFALSE 5343
// end ;
5406: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// road := rand ( 1 , 2 ) ;
5417: LD_ADDR_VAR 0 4
5421: PUSH
5422: LD_INT 1
5424: PPUSH
5425: LD_INT 2
5427: PPUSH
5428: CALL_OW 12
5432: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5433: LD_ADDR_VAR 0 8
5437: PUSH
5438: LD_INT 3
5440: PUSH
5441: LD_INT 8
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_VAR 0 4
5452: ARRAY
5453: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5454: LD_ADDR_VAR 0 5
5458: PUSH
5459: LD_INT 35
5461: PUSH
5462: LD_INT 66
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 101
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5491: LD_ADDR_VAR 0 6
5495: PUSH
5496: LD_INT 34
5498: PUSH
5499: LD_INT 67
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 38
5508: PUSH
5509: LD_INT 62
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 43
5518: PUSH
5519: LD_INT 54
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 57
5528: PUSH
5529: LD_INT 57
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 77
5538: PUSH
5539: LD_INT 71
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 86
5548: PUSH
5549: LD_INT 60
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 89
5558: PUSH
5559: LD_INT 35
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 93
5568: PUSH
5569: LD_INT 17
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 97
5578: PUSH
5579: LD_INT 10
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 103
5588: PUSH
5589: LD_INT 9
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// if road = 2 then
5608: LD_VAR 0 4
5612: PUSH
5613: LD_INT 2
5615: EQUAL
5616: IFFALSE 5633
// points := ReverseArray ( points ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_VAR 0 6
5627: PPUSH
5628: CALL 980 0 1
5632: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5633: LD_INT 4
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 12
5650: PPUSH
5651: LD_INT 80
5653: PPUSH
5654: CALL 325 0 7
// veh := CreateVehicle ;
5658: LD_ADDR_VAR 0 3
5662: PUSH
5663: CALL_OW 45
5667: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5668: LD_VAR 0 3
5672: PPUSH
5673: LD_VAR 0 5
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_INT 3
5686: ARRAY
5687: PPUSH
5688: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_VAR 0 5
5701: PUSH
5702: LD_VAR 0 4
5706: ARRAY
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: PPUSH
5712: LD_VAR 0 5
5716: PUSH
5717: LD_VAR 0 4
5721: ARRAY
5722: PUSH
5723: LD_INT 2
5725: ARRAY
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5734: LD_INT 0
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: LD_OWVAR 67
5744: PPUSH
5745: CALL_OW 380
// un := CreateHuman ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: CALL_OW 44
5758: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5773: LD_INT 70
5775: PUSH
5776: LD_INT 66
5778: PUSH
5779: LD_INT 62
5781: PUSH
5782: LD_INT 58
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_OWVAR 67
5795: ARRAY
5796: PPUSH
5797: CALL_OW 13
5801: PUSH
5802: LD_OWVAR 1
5806: PUSH
5807: LD_INT 30
5809: MOD
5810: PLUS
5811: PUSH
5812: LD_EXP 23
5816: PUSH
5817: LD_INT 4
5819: LESS
5820: OR
5821: IFFALSE 5838
// SetCargo ( veh , mat_cans , 100 ) ;
5823: LD_VAR 0 3
5827: PPUSH
5828: LD_INT 1
5830: PPUSH
5831: LD_INT 100
5833: PPUSH
5834: CALL_OW 290
// for i := 2 to points do
5838: LD_ADDR_VAR 0 7
5842: PUSH
5843: DOUBLE
5844: LD_INT 2
5846: DEC
5847: ST_TO_ADDR
5848: LD_VAR 0 6
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5897
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5856: LD_VAR 0 3
5860: PPUSH
5861: LD_VAR 0 6
5865: PUSH
5866: LD_VAR 0 7
5870: ARRAY
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: LD_VAR 0 6
5880: PUSH
5881: LD_VAR 0 7
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: CALL_OW 171
5895: GO 5853
5897: POP
5898: POP
// convoyCounter := convoyCounter + 1 ;
5899: LD_ADDR_EXP 23
5903: PUSH
5904: LD_EXP 23
5908: PUSH
5909: LD_INT 1
5911: PLUS
5912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5913: LD_INT 35
5915: PPUSH
5916: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5920: LD_VAR 0 3
5924: PPUSH
5925: CALL_OW 314
5929: NOT
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: CALL_OW 302
5940: AND
5941: IFFALSE 5982
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5943: LD_VAR 0 3
5947: PPUSH
5948: LD_VAR 0 6
5952: PUSH
5953: LD_VAR 0 6
5957: ARRAY
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 2
5976: ARRAY
5977: PPUSH
5978: CALL_OW 111
// if not IsInUnit ( un ) then
5982: LD_VAR 0 2
5986: PPUSH
5987: CALL_OW 310
5991: NOT
5992: IFFALSE 6033
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 6
6003: PUSH
6004: LD_VAR 0 6
6008: ARRAY
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_VAR 0 6
6018: PUSH
6019: LD_VAR 0 6
6023: ARRAY
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: PPUSH
6029: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6033: LD_VAR 0 3
6037: PPUSH
6038: LD_VAR 0 8
6042: PPUSH
6043: CALL_OW 308
6047: PUSH
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 8
6057: PPUSH
6058: CALL_OW 308
6062: OR
6063: IFFALSE 5913
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6065: LD_VAR 0 2
6069: PPUSH
6070: CALL_OW 302
6074: PUSH
6075: LD_VAR 0 3
6079: PPUSH
6080: CALL_OW 302
6084: NOT
6085: AND
6086: PUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_VAR 0 8
6096: PPUSH
6097: CALL_OW 308
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( un ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6113: LD_VAR 0 3
6117: PPUSH
6118: LD_VAR 0 8
6122: PPUSH
6123: CALL_OW 308
6127: PUSH
6128: LD_VAR 0 3
6132: PPUSH
6133: CALL_OW 302
6137: AND
6138: IFFALSE 6149
// RemoveUnit ( veh ) ;
6140: LD_VAR 0 3
6144: PPUSH
6145: CALL_OW 64
// end ;
6149: LD_VAR 0 1
6153: RET
// export function SendAttack ; var un , veh , i ; begin
6154: LD_INT 0
6156: PPUSH
6157: PPUSH
6158: PPUSH
6159: PPUSH
// if ingame_video then
6160: LD_OWVAR 52
6164: IFFALSE 6187
// begin repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// until not ingame_video ;
6173: LD_OWVAR 52
6177: NOT
6178: IFFALSE 6166
// wait ( 0 0$5 ) ;
6180: LD_INT 175
6182: PPUSH
6183: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6187: LD_INT 22
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 21
6199: PUSH
6200: LD_INT 1
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: PUSH
6216: LD_INT 10
6218: GREATER
6219: IFFALSE 6262
// begin repeat wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6228: LD_INT 22
6230: PUSH
6231: LD_INT 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 21
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: PUSH
6257: LD_INT 10
6259: LESSEQUAL
6260: IFFALSE 6221
// end ; IncomingAttack ;
6262: CALL 15298 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6266: LD_INT 2100
6268: PPUSH
6269: LD_INT 3500
6271: PPUSH
6272: CALL_OW 12
6276: PPUSH
6277: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6281: LD_ADDR_VAR 0 4
6285: PUSH
6286: DOUBLE
6287: LD_INT 1
6289: DEC
6290: ST_TO_ADDR
6291: LD_INT 3
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_OWVAR 67
6313: ARRAY
6314: PUSH
6315: LD_EXP 19
6319: PUSH
6320: LD_INT 3
6322: DIV
6323: PLUS
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6442
// begin uc_side := 1 ;
6328: LD_ADDR_OWVAR 20
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// uc_nation := 1 ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: LD_INT 1
6343: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6344: LD_INT 0
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 2
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: LD_INT 4
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: LD_OWVAR 67
6372: ARRAY
6373: PPUSH
6374: CALL_OW 380
// un := CreateHuman ;
6378: LD_ADDR_VAR 0 2
6382: PUSH
6383: CALL_OW 44
6387: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 37
6395: PPUSH
6396: LD_INT 70
6398: PPUSH
6399: LD_INT 3
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 50
// usAttackers := usAttackers union un ;
6409: LD_ADDR_EXP 47
6413: PUSH
6414: LD_EXP 47
6418: PUSH
6419: LD_VAR 0 2
6423: UNION
6424: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6425: LD_VAR 0 2
6429: PPUSH
6430: LD_INT 40
6432: PPUSH
6433: LD_INT 65
6435: PPUSH
6436: CALL_OW 111
// end ;
6440: GO 6325
6442: POP
6443: POP
// uc_side := 1 ;
6444: LD_ADDR_OWVAR 20
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// uc_nation := 1 ;
6452: LD_ADDR_OWVAR 21
6456: PUSH
6457: LD_INT 1
6459: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6460: LD_INT 0
6462: PPUSH
6463: LD_INT 4
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: CALL_OW 380
// un := CreateHuman ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: CALL_OW 44
6482: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 37
6490: PPUSH
6491: LD_INT 70
6493: PPUSH
6494: LD_INT 3
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL_OW 50
// usAttackers := usAttackers union un ;
6504: LD_ADDR_EXP 47
6508: PUSH
6509: LD_EXP 47
6513: PUSH
6514: LD_VAR 0 2
6518: UNION
6519: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6520: LD_VAR 0 2
6524: PPUSH
6525: LD_INT 40
6527: PPUSH
6528: LD_INT 65
6530: PPUSH
6531: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6535: LD_ADDR_VAR 0 4
6539: PUSH
6540: DOUBLE
6541: LD_INT 1
6543: DEC
6544: ST_TO_ADDR
6545: LD_OWVAR 67
6549: PUSH
6550: LD_EXP 19
6554: PUSH
6555: LD_INT 4
6557: DIV
6558: PLUS
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6757
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 1
6590: PPUSH
6591: LD_INT 3
6593: PPUSH
6594: CALL_OW 12
6598: ARRAY
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 4
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 1
6622: PPUSH
6623: LD_INT 3
6625: PPUSH
6626: CALL_OW 12
6630: ARRAY
6631: PPUSH
6632: LD_INT 90
6634: PPUSH
6635: CALL 325 0 7
6639: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6640: LD_VAR 0 3
6644: PPUSH
6645: LD_INT 35
6647: PPUSH
6648: LD_INT 65
6650: PPUSH
6651: LD_INT 0
6653: PPUSH
6654: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6658: LD_INT 0
6660: PPUSH
6661: LD_INT 3
6663: PPUSH
6664: LD_OWVAR 67
6668: PUSH
6669: LD_INT 1
6671: PLUS
6672: PPUSH
6673: CALL_OW 380
// un := CreateHuman ;
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: CALL_OW 44
6686: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_VAR 0 3
6696: PPUSH
6697: CALL_OW 52
// usAttackers := usAttackers union un ;
6701: LD_ADDR_EXP 47
6705: PUSH
6706: LD_EXP 47
6710: PUSH
6711: LD_VAR 0 2
6715: UNION
6716: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 39
6724: PPUSH
6725: LD_INT 60
6727: PPUSH
6728: CALL_OW 111
// wait ( 0 0$3 ) ;
6732: LD_INT 105
6734: PPUSH
6735: CALL_OW 67
// usAttackers := usAttackers union veh ;
6739: LD_ADDR_EXP 47
6743: PUSH
6744: LD_EXP 47
6748: PUSH
6749: LD_VAR 0 3
6753: UNION
6754: ST_TO_ADDR
// end ;
6755: GO 6560
6757: POP
6758: POP
// attackWave := attackWave + 1 ;
6759: LD_ADDR_EXP 19
6763: PUSH
6764: LD_EXP 19
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6773: LD_EXP 24
6777: PPUSH
6778: CALL_OW 427
// end ;
6782: LD_VAR 0 1
6786: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6787: LD_INT 0
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
// if retreatAllowed then
6800: LD_EXP 11
6804: IFFALSE 6816
// strategy := 2 else
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_INT 2
6813: ST_TO_ADDR
6814: GO 6832
// strategy := rand ( 0 , 2 ) ;
6816: LD_ADDR_VAR 0 5
6820: PUSH
6821: LD_INT 0
6823: PPUSH
6824: LD_INT 2
6826: PPUSH
6827: CALL_OW 12
6831: ST_TO_ADDR
// attackFormula := [ ] ;
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: EMPTY
6838: ST_TO_ADDR
// case strategy of 0 :
6839: LD_VAR 0 5
6843: PUSH
6844: LD_INT 0
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 7182
6852: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6853: LD_INT 11
6855: PPUSH
6856: LD_INT 22
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 4
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 70
6884: NOT
6885: IFFALSE 6957
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6887: LD_ADDR_VAR 0 6
6891: PUSH
6892: LD_INT 41
6894: PUSH
6895: LD_INT 34
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PUSH
6905: LD_INT 53
6907: PUSH
6908: LD_INT 62
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 37
6917: PUSH
6918: LD_INT 63
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 44
6927: PUSH
6928: LD_INT 45
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 37
6937: PUSH
6938: LD_INT 28
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
6955: GO 7180
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6957: LD_INT 12
6959: PPUSH
6960: LD_INT 22
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 30
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 30
6985: PUSH
6986: LD_INT 31
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 32
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PPUSH
7013: CALL_OW 70
7017: NOT
7018: IFFALSE 7101
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_INT 27
7027: PUSH
7028: LD_INT 42
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 27
7037: PUSH
7038: LD_INT 32
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 53
7051: PUSH
7052: LD_INT 62
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 37
7061: PUSH
7062: LD_INT 63
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 44
7071: PUSH
7072: LD_INT 45
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 37
7081: PUSH
7082: LD_INT 28
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
7099: GO 7180
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7101: LD_ADDR_VAR 0 6
7105: PUSH
7106: LD_INT 71
7108: PUSH
7109: LD_INT 67
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 54
7118: PUSH
7119: LD_INT 35
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 63
7132: PUSH
7133: LD_INT 40
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 37
7142: PUSH
7143: LD_INT 63
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 44
7152: PUSH
7153: LD_INT 45
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 37
7162: PUSH
7163: LD_INT 28
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: ST_TO_ADDR
// end ; 1 :
7180: GO 7385
7182: LD_INT 1
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7294
7190: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7191: LD_ADDR_VAR 0 6
7195: PUSH
7196: LD_INT 71
7198: PUSH
7199: LD_INT 67
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 82
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 53
7218: PUSH
7219: LD_INT 7
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 43
7228: PUSH
7229: LD_INT 10
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 53
7244: PUSH
7245: LD_INT 62
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 37
7254: PUSH
7255: LD_INT 63
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 44
7264: PUSH
7265: LD_INT 45
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 37
7274: PUSH
7275: LD_INT 28
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 7385
7294: LD_INT 2
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7384
7302: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7303: LD_ADDR_VAR 0 6
7307: PUSH
7308: LD_INT 90
7310: PUSH
7311: LD_INT 59
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 108
7320: PUSH
7321: LD_INT 64
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 82
7334: PUSH
7335: LD_INT 75
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 73
7344: PUSH
7345: LD_INT 67
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 101
7354: PUSH
7355: LD_INT 65
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 108
7364: PUSH
7365: LD_INT 62
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 7385
7384: POP
// if not attackFormula then
7385: LD_VAR 0 6
7389: NOT
7390: IFFALSE 7394
// exit ;
7392: GO 9072
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7394: LD_ADDR_VAR 0 7
7398: PUSH
7399: LD_EXP 47
7403: PPUSH
7404: LD_INT 25
7406: PUSH
7407: LD_INT 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 72
7418: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7419: LD_ADDR_VAR 0 8
7423: PUSH
7424: LD_EXP 47
7428: PPUSH
7429: LD_INT 25
7431: PUSH
7432: LD_INT 4
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 72
7443: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7444: LD_ADDR_VAR 0 9
7448: PUSH
7449: LD_EXP 47
7453: PPUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 72
7468: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7469: LD_ADDR_VAR 0 10
7473: PUSH
7474: LD_EXP 47
7478: PPUSH
7479: LD_INT 21
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 72
7493: ST_TO_ADDR
// if sci then
7494: LD_VAR 0 8
7498: IFFALSE 7535
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7500: LD_VAR 0 8
7504: PPUSH
7505: LD_VAR 0 6
7509: PUSH
7510: LD_INT 2
7512: ARRAY
7513: PUSH
7514: LD_INT 1
7516: ARRAY
7517: PPUSH
7518: LD_VAR 0 6
7522: PUSH
7523: LD_INT 2
7525: ARRAY
7526: PUSH
7527: LD_INT 2
7529: ARRAY
7530: PPUSH
7531: CALL_OW 111
// repeat wait ( 10 ) ;
7535: LD_INT 10
7537: PPUSH
7538: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7542: LD_ADDR_VAR 0 7
7546: PUSH
7547: LD_EXP 47
7551: PPUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 72
7566: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7567: LD_ADDR_VAR 0 8
7571: PUSH
7572: LD_EXP 47
7576: PPUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 4
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PPUSH
7587: CALL_OW 72
7591: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7592: LD_ADDR_VAR 0 9
7596: PUSH
7597: LD_EXP 47
7601: PPUSH
7602: LD_INT 25
7604: PUSH
7605: LD_INT 3
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 72
7616: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7617: LD_ADDR_VAR 0 10
7621: PUSH
7622: LD_EXP 47
7626: PPUSH
7627: LD_INT 21
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: ST_TO_ADDR
// if sol then
7642: LD_VAR 0 7
7646: IFFALSE 8067
// begin for i in sol do
7648: LD_ADDR_VAR 0 2
7652: PUSH
7653: LD_VAR 0 7
7657: PUSH
7658: FOR_IN
7659: IFFALSE 8065
// begin tag := GetTag ( i ) ;
7661: LD_ADDR_VAR 0 4
7665: PUSH
7666: LD_VAR 0 2
7670: PPUSH
7671: CALL_OW 110
7675: ST_TO_ADDR
// if not tag then
7676: LD_VAR 0 4
7680: NOT
7681: IFFALSE 7790
// begin if GetLives ( i ) = 1000 then
7683: LD_VAR 0 2
7687: PPUSH
7688: CALL_OW 256
7692: PUSH
7693: LD_INT 1000
7695: EQUAL
7696: IFFALSE 7712
// SetTag ( i , 1 ) else
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL_OW 109
7710: GO 7788
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7712: LD_VAR 0 2
7716: PPUSH
7717: LD_VAR 0 6
7721: PUSH
7722: LD_INT 2
7724: ARRAY
7725: PUSH
7726: LD_INT 1
7728: ARRAY
7729: PPUSH
7730: LD_VAR 0 6
7734: PUSH
7735: LD_INT 2
7737: ARRAY
7738: PUSH
7739: LD_INT 2
7741: ARRAY
7742: PPUSH
7743: CALL_OW 297
7747: PUSH
7748: LD_INT 10
7750: GREATER
7751: IFFALSE 7788
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7753: LD_VAR 0 2
7757: PPUSH
7758: LD_VAR 0 6
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: PPUSH
7771: LD_VAR 0 6
7775: PUSH
7776: LD_INT 2
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PPUSH
7784: CALL_OW 111
// end else
7788: GO 8063
// begin if GetLives ( i ) < 760 then
7790: LD_VAR 0 2
7794: PPUSH
7795: CALL_OW 256
7799: PUSH
7800: LD_INT 760
7802: LESS
7803: IFFALSE 7854
// begin SetTag ( i , 0 ) ;
7805: LD_VAR 0 2
7809: PPUSH
7810: LD_INT 0
7812: PPUSH
7813: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7817: LD_VAR 0 2
7821: PPUSH
7822: LD_VAR 0 6
7826: PUSH
7827: LD_INT 2
7829: ARRAY
7830: PUSH
7831: LD_INT 1
7833: ARRAY
7834: PPUSH
7835: LD_VAR 0 6
7839: PUSH
7840: LD_INT 2
7842: ARRAY
7843: PUSH
7844: LD_INT 2
7846: ARRAY
7847: PPUSH
7848: CALL_OW 111
// end else
7852: GO 8063
// if tag <= attackFormula [ 1 ] then
7854: LD_VAR 0 4
7858: PUSH
7859: LD_VAR 0 6
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: LESSEQUAL
7868: IFFALSE 8029
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7870: LD_VAR 0 2
7874: PPUSH
7875: LD_VAR 0 6
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PPUSH
7894: LD_VAR 0 6
7898: PUSH
7899: LD_INT 1
7901: ARRAY
7902: PUSH
7903: LD_VAR 0 4
7907: ARRAY
7908: PUSH
7909: LD_INT 2
7911: ARRAY
7912: PPUSH
7913: CALL_OW 297
7917: PUSH
7918: LD_INT 6
7920: GREATER
7921: IFFALSE 7972
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7923: LD_VAR 0 2
7927: PPUSH
7928: LD_VAR 0 6
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PPUSH
7947: LD_VAR 0 6
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PUSH
7956: LD_VAR 0 4
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: CALL_OW 114
7970: GO 8027
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7972: LD_INT 81
7974: PUSH
7975: LD_INT 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 91
7984: PUSH
7985: LD_VAR 0 2
7989: PUSH
7990: LD_INT 10
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: NOT
8007: IFFALSE 8027
// SetTag ( i , tag + 1 ) ;
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_VAR 0 4
8018: PUSH
8019: LD_INT 1
8021: PLUS
8022: PPUSH
8023: CALL_OW 109
// end else
8027: GO 8063
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8029: LD_VAR 0 2
8033: PPUSH
8034: LD_INT 81
8036: PUSH
8037: LD_INT 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 69
8048: PPUSH
8049: LD_VAR 0 2
8053: PPUSH
8054: CALL_OW 74
8058: PPUSH
8059: CALL_OW 115
// end ; end ;
8063: GO 7658
8065: POP
8066: POP
// end ; if sci then
8067: LD_VAR 0 8
8071: IFFALSE 8340
// begin if not sol and not mech then
8073: LD_VAR 0 7
8077: NOT
8078: PUSH
8079: LD_VAR 0 9
8083: NOT
8084: AND
8085: IFFALSE 8137
// begin for i in sci do
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_VAR 0 8
8096: PUSH
8097: FOR_IN
8098: IFFALSE 8133
// begin usForces := usForces union i ;
8100: LD_ADDR_EXP 44
8104: PUSH
8105: LD_EXP 44
8109: PUSH
8110: LD_VAR 0 2
8114: UNION
8115: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 34
8123: PPUSH
8124: LD_INT 68
8126: PPUSH
8127: CALL_OW 111
// end ;
8131: GO 8097
8133: POP
8134: POP
// end else
8135: GO 8340
// for i in sci do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: FOR_IN
8148: IFFALSE 8338
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8150: LD_VAR 0 2
8154: PPUSH
8155: LD_VAR 0 6
8159: PUSH
8160: LD_INT 2
8162: ARRAY
8163: PUSH
8164: LD_INT 1
8166: ARRAY
8167: PPUSH
8168: LD_VAR 0 6
8172: PUSH
8173: LD_INT 2
8175: ARRAY
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: CALL_OW 297
8185: PUSH
8186: LD_INT 10
8188: GREATER
8189: IFFALSE 8228
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8191: LD_VAR 0 2
8195: PPUSH
8196: LD_VAR 0 6
8200: PUSH
8201: LD_INT 2
8203: ARRAY
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_VAR 0 6
8213: PUSH
8214: LD_INT 2
8216: ARRAY
8217: PUSH
8218: LD_INT 2
8220: ARRAY
8221: PPUSH
8222: CALL_OW 111
8226: GO 8336
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8228: LD_VAR 0 7
8232: PPUSH
8233: LD_INT 3
8235: PUSH
8236: LD_INT 24
8238: PUSH
8239: LD_INT 1000
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 91
8252: PUSH
8253: LD_VAR 0 2
8257: PUSH
8258: LD_INT 10
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 72
8274: IFFALSE 8336
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8276: LD_VAR 0 2
8280: PPUSH
8281: LD_VAR 0 7
8285: PPUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 24
8291: PUSH
8292: LD_INT 1000
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 91
8305: PUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 10
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: PUSH
8328: LD_INT 1
8330: ARRAY
8331: PPUSH
8332: CALL_OW 128
8336: GO 8147
8338: POP
8339: POP
// end ; if mech then
8340: LD_VAR 0 9
8344: IFFALSE 9054
// begin for i in mech do
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 9
8355: PUSH
8356: FOR_IN
8357: IFFALSE 9052
// begin tag := GetTag ( i ) ;
8359: LD_ADDR_VAR 0 4
8363: PUSH
8364: LD_VAR 0 2
8368: PPUSH
8369: CALL_OW 110
8373: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8374: LD_ADDR_VAR 0 11
8378: PUSH
8379: LD_VAR 0 2
8383: PPUSH
8384: CALL_OW 310
8388: ST_TO_ADDR
// if not tag then
8389: LD_VAR 0 4
8393: NOT
8394: IFFALSE 8765
// begin if veh then
8396: LD_VAR 0 11
8400: IFFALSE 8571
// begin if GetLives ( veh ) = 1000 then
8402: LD_VAR 0 11
8406: PPUSH
8407: CALL_OW 256
8411: PUSH
8412: LD_INT 1000
8414: EQUAL
8415: IFFALSE 8431
// SetTag ( i , 1 ) else
8417: LD_VAR 0 2
8421: PPUSH
8422: LD_INT 1
8424: PPUSH
8425: CALL_OW 109
8429: GO 8569
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8431: LD_VAR 0 11
8435: PPUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_INT 3
8443: ARRAY
8444: PUSH
8445: LD_INT 1
8447: ARRAY
8448: PPUSH
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 3
8456: ARRAY
8457: PUSH
8458: LD_INT 2
8460: ARRAY
8461: PPUSH
8462: CALL_OW 297
8466: PUSH
8467: LD_INT 8
8469: GREATER
8470: IFFALSE 8509
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8472: LD_VAR 0 11
8476: PPUSH
8477: LD_VAR 0 6
8481: PUSH
8482: LD_INT 3
8484: ARRAY
8485: PUSH
8486: LD_INT 1
8488: ARRAY
8489: PPUSH
8490: LD_VAR 0 6
8494: PUSH
8495: LD_INT 3
8497: ARRAY
8498: PUSH
8499: LD_INT 2
8501: ARRAY
8502: PPUSH
8503: CALL_OW 111
8507: GO 8569
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8509: LD_INT 81
8511: PUSH
8512: LD_INT 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 91
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: LD_INT 10
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 69
8543: NOT
8544: IFFALSE 8569
// begin ComExitVehicle ( i ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8555: LD_VAR 0 2
8559: PPUSH
8560: LD_VAR 0 11
8564: PPUSH
8565: CALL_OW 189
// end ; end else
8569: GO 8763
// if GetLives ( i ) < 400 then
8571: LD_VAR 0 2
8575: PPUSH
8576: CALL_OW 256
8580: PUSH
8581: LD_INT 400
8583: LESS
8584: IFFALSE 8635
// begin usAttackers := usAttackers diff i ;
8586: LD_ADDR_EXP 47
8590: PUSH
8591: LD_EXP 47
8595: PUSH
8596: LD_VAR 0 2
8600: DIFF
8601: ST_TO_ADDR
// usForces := usForces union i ;
8602: LD_ADDR_EXP 44
8606: PUSH
8607: LD_EXP 44
8611: PUSH
8612: LD_VAR 0 2
8616: UNION
8617: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 34
8625: PPUSH
8626: LD_INT 68
8628: PPUSH
8629: CALL_OW 111
// end else
8633: GO 8763
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8635: LD_VAR 0 10
8639: PPUSH
8640: LD_INT 58
8642: PUSH
8643: EMPTY
8644: LIST
8645: PUSH
8646: LD_INT 24
8648: PUSH
8649: LD_INT 1000
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: PUSH
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 314
8674: NOT
8675: AND
8676: PUSH
8677: LD_INT 81
8679: PUSH
8680: LD_INT 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 91
8689: PUSH
8690: LD_VAR 0 2
8694: PUSH
8695: LD_INT 9
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: OR
8712: IFFALSE 8763
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_INT 58
8726: PUSH
8727: EMPTY
8728: LIST
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: LD_INT 250
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PPUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: CALL_OW 74
8758: PPUSH
8759: CALL_OW 120
// end else
8763: GO 9050
// begin if veh and GetLives ( veh ) < 760 then
8765: LD_VAR 0 11
8769: PUSH
8770: LD_VAR 0 11
8774: PPUSH
8775: CALL_OW 256
8779: PUSH
8780: LD_INT 760
8782: LESS
8783: AND
8784: IFFALSE 8835
// begin SetTag ( i , 0 ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_INT 0
8793: PPUSH
8794: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8798: LD_VAR 0 11
8802: PPUSH
8803: LD_VAR 0 6
8807: PUSH
8808: LD_INT 3
8810: ARRAY
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 6
8820: PUSH
8821: LD_INT 3
8823: ARRAY
8824: PUSH
8825: LD_INT 2
8827: ARRAY
8828: PPUSH
8829: CALL_OW 111
// end else
8833: GO 9050
// if veh then
8835: LD_VAR 0 11
8839: IFFALSE 9050
// if tag <= attackFormula [ 4 ] then
8841: LD_VAR 0 4
8845: PUSH
8846: LD_VAR 0 6
8850: PUSH
8851: LD_INT 4
8853: ARRAY
8854: LESSEQUAL
8855: IFFALSE 9016
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8857: LD_VAR 0 11
8861: PPUSH
8862: LD_VAR 0 6
8866: PUSH
8867: LD_INT 4
8869: ARRAY
8870: PUSH
8871: LD_VAR 0 4
8875: ARRAY
8876: PUSH
8877: LD_INT 1
8879: ARRAY
8880: PPUSH
8881: LD_VAR 0 6
8885: PUSH
8886: LD_INT 4
8888: ARRAY
8889: PUSH
8890: LD_VAR 0 4
8894: ARRAY
8895: PUSH
8896: LD_INT 2
8898: ARRAY
8899: PPUSH
8900: CALL_OW 297
8904: PUSH
8905: LD_INT 6
8907: GREATER
8908: IFFALSE 8959
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8910: LD_VAR 0 11
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 4
8922: ARRAY
8923: PUSH
8924: LD_VAR 0 4
8928: ARRAY
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: LD_VAR 0 6
8938: PUSH
8939: LD_INT 4
8941: ARRAY
8942: PUSH
8943: LD_VAR 0 4
8947: ARRAY
8948: PUSH
8949: LD_INT 2
8951: ARRAY
8952: PPUSH
8953: CALL_OW 114
8957: GO 9014
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8959: LD_INT 81
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 91
8971: PUSH
8972: LD_VAR 0 11
8976: PUSH
8977: LD_INT 10
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: NOT
8994: IFFALSE 9014
// SetTag ( i , tag + 1 ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: LD_VAR 0 4
9005: PUSH
9006: LD_INT 1
9008: PLUS
9009: PPUSH
9010: CALL_OW 109
// end else
9014: GO 9050
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9016: LD_VAR 0 11
9020: PPUSH
9021: LD_INT 81
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 69
9035: PPUSH
9036: LD_VAR 0 2
9040: PPUSH
9041: CALL_OW 74
9045: PPUSH
9046: CALL_OW 115
// end ; end ;
9050: GO 8356
9052: POP
9053: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9054: LD_EXP 47
9058: PPUSH
9059: LD_INT 52
9061: PUSH
9062: EMPTY
9063: LIST
9064: PPUSH
9065: CALL_OW 72
9069: NOT
9070: IFFALSE 7535
// end ;
9072: LD_VAR 0 1
9076: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9077: LD_INT 22
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 32
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 69
9105: IFFALSE 9182
9107: GO 9109
9109: DISABLE
9110: LD_INT 0
9112: PPUSH
// begin enable ;
9113: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9114: LD_ADDR_VAR 0 1
9118: PUSH
9119: LD_INT 22
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 32
9131: PUSH
9132: LD_INT 1
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: PUSH
9148: FOR_IN
9149: IFFALSE 9180
// if GetFuel ( i ) < 10 then
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 261
9160: PUSH
9161: LD_INT 10
9163: LESS
9164: IFFALSE 9178
// SetFuel ( i , 10 ) ;
9166: LD_VAR 0 1
9170: PPUSH
9171: LD_INT 10
9173: PPUSH
9174: CALL_OW 240
9178: GO 9148
9180: POP
9181: POP
// end ; end_of_file
9182: PPOPN 1
9184: END
// export function Action ; var hasAll , i , tmp ; begin
9185: LD_INT 0
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 22
9198: PUSH
9199: LD_INT 2
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 1
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 23
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: PUSH
9236: LD_INT 7
9238: GREATEREQUAL
9239: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9240: LD_VAR 0 2
9244: PPUSH
9245: LD_STRING 03_HasAll
9247: PPUSH
9248: CALL_OW 39
// Video ( true ) ;
9252: LD_INT 1
9254: PPUSH
9255: CALL 75477 0 1
// CenterNowOnUnits ( Heike ) ;
9259: LD_EXP 28
9263: PPUSH
9264: CALL_OW 87
// wait ( 0 0$2 ) ;
9268: LD_INT 70
9270: PPUSH
9271: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9275: LD_EXP 36
9279: PPUSH
9280: LD_STRING DF-1-start
9282: PPUSH
9283: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9287: LD_EXP 28
9291: PPUSH
9292: LD_EXP 36
9296: PPUSH
9297: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9301: LD_EXP 28
9305: PPUSH
9306: LD_STRING DH-1-start
9308: PPUSH
9309: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9313: LD_EXP 37
9317: PPUSH
9318: LD_INT 92
9320: PPUSH
9321: LD_INT 21
9323: PPUSH
9324: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9328: LD_EXP 32
9332: PPUSH
9333: LD_INT 94
9335: PPUSH
9336: LD_INT 23
9338: PPUSH
9339: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9343: LD_EXP 40
9347: PUSH
9348: LD_INT 1
9350: ARRAY
9351: PPUSH
9352: LD_INT 90
9354: PPUSH
9355: LD_INT 23
9357: PPUSH
9358: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9362: LD_EXP 40
9366: PUSH
9367: LD_INT 2
9369: ARRAY
9370: PPUSH
9371: LD_INT 93
9373: PPUSH
9374: LD_INT 25
9376: PPUSH
9377: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9381: LD_EXP 40
9385: PPUSH
9386: LD_EXP 37
9390: PPUSH
9391: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9395: LD_EXP 37
9399: PUSH
9400: LD_EXP 32
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PPUSH
9409: LD_EXP 28
9413: PPUSH
9414: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9418: LD_EXP 28
9422: PPUSH
9423: LD_EXP 37
9427: PPUSH
9428: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9432: LD_INT 35
9434: PPUSH
9435: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9439: LD_EXP 37
9443: PPUSH
9444: LD_INT 92
9446: PPUSH
9447: LD_INT 21
9449: PPUSH
9450: CALL_OW 307
9454: IFFALSE 9432
// Say ( Omar , DO-1-start ) ;
9456: LD_EXP 37
9460: PPUSH
9461: LD_STRING DO-1-start
9463: PPUSH
9464: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9468: LD_EXP 28
9472: PPUSH
9473: LD_STRING DH-2-start
9475: PPUSH
9476: CALL_OW 88
// if hasAll then
9480: LD_VAR 0 2
9484: IFFALSE 9612
// begin Say ( Omar , DO-2-start ) ;
9486: LD_EXP 37
9490: PPUSH
9491: LD_STRING DO-2-start
9493: PPUSH
9494: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9498: LD_EXP 37
9502: PPUSH
9503: LD_STRING DO-3-start
9505: PPUSH
9506: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9510: LD_EXP 28
9514: PPUSH
9515: LD_STRING DH-3-start
9517: PPUSH
9518: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9522: LD_EXP 36
9526: PPUSH
9527: LD_STRING DF-2-start
9529: PPUSH
9530: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9534: LD_EXP 37
9538: PPUSH
9539: LD_EXP 36
9543: PPUSH
9544: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9548: LD_EXP 37
9552: PPUSH
9553: LD_STRING DO-4-start
9555: PPUSH
9556: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9560: LD_EXP 36
9564: PPUSH
9565: LD_STRING DF-3-start
9567: PPUSH
9568: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9572: LD_EXP 37
9576: PPUSH
9577: LD_STRING DO-5-start
9579: PPUSH
9580: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DF-4-start
9591: PPUSH
9592: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9596: LD_EXP 37
9600: PPUSH
9601: LD_EXP 28
9605: PPUSH
9606: CALL_OW 119
// end else
9610: GO 9712
// begin Say ( Omar , DO-2-start-a ) ;
9612: LD_EXP 37
9616: PPUSH
9617: LD_STRING DO-2-start-a
9619: PPUSH
9620: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9624: LD_EXP 37
9628: PPUSH
9629: LD_STRING DO-3-start-a
9631: PPUSH
9632: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9636: LD_EXP 28
9640: PPUSH
9641: LD_STRING DH-3-start-a
9643: PPUSH
9644: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9648: LD_EXP 36
9652: PPUSH
9653: LD_STRING DF-2-start-a
9655: PPUSH
9656: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9660: LD_EXP 37
9664: PPUSH
9665: LD_EXP 36
9669: PPUSH
9670: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9674: LD_EXP 37
9678: PPUSH
9679: LD_STRING DO-4-start-a
9681: PPUSH
9682: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9686: LD_EXP 36
9690: PPUSH
9691: LD_STRING DF-3-start-a
9693: PPUSH
9694: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9698: LD_EXP 37
9702: PPUSH
9703: LD_EXP 28
9707: PPUSH
9708: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9712: LD_INT 10
9714: PPUSH
9715: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9719: LD_EXP 37
9723: PPUSH
9724: LD_STRING DO-1-mission
9726: PPUSH
9727: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9731: LD_EXP 37
9735: PPUSH
9736: LD_STRING DO-2-mission
9738: PPUSH
9739: CALL_OW 88
// if not hasAll then
9743: LD_VAR 0 2
9747: NOT
9748: IFFALSE 9762
// Say ( Omar , DO-3-mission ) ;
9750: LD_EXP 37
9754: PPUSH
9755: LD_STRING DO-3-mission
9757: PPUSH
9758: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9762: LD_EXP 37
9766: PPUSH
9767: LD_STRING DO-4-mission
9769: PPUSH
9770: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9774: LD_EXP 28
9778: PPUSH
9779: LD_STRING DH-1-mission
9781: PPUSH
9782: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9786: LD_EXP 36
9790: PPUSH
9791: LD_STRING DF-1-mission
9793: PPUSH
9794: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9798: LD_EXP 37
9802: PPUSH
9803: LD_STRING DO-5-mission
9805: PPUSH
9806: CALL_OW 88
// if not hasAll then
9810: LD_VAR 0 2
9814: NOT
9815: IFFALSE 9950
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9817: LD_ADDR_VAR 0 4
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 2
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 23
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: ST_TO_ADDR
// for i := 7 downto tmp do
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: DOUBLE
9868: LD_INT 7
9870: INC
9871: ST_TO_ADDR
9872: LD_VAR 0 4
9876: PUSH
9877: FOR_DOWNTO
9878: IFFALSE 9948
// begin if omarSquad < 3 then
9880: LD_EXP 40
9884: PUSH
9885: LD_INT 3
9887: LESS
9888: IFFALSE 9892
// break ;
9890: GO 9948
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9892: LD_EXP 40
9896: PUSH
9897: LD_INT 3
9899: ARRAY
9900: PPUSH
9901: LD_INT 2
9903: PPUSH
9904: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9908: LD_ADDR_EXP 42
9912: PUSH
9913: LD_EXP 42
9917: PUSH
9918: LD_EXP 40
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: UNION
9927: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9928: LD_ADDR_EXP 40
9932: PUSH
9933: LD_EXP 40
9937: PPUSH
9938: LD_INT 3
9940: PPUSH
9941: CALL_OW 3
9945: ST_TO_ADDR
// end ;
9946: GO 9877
9948: POP
9949: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9950: LD_EXP 37
9954: PUSH
9955: LD_EXP 40
9959: ADD
9960: PPUSH
9961: LD_INT 103
9963: PPUSH
9964: LD_INT 9
9966: PPUSH
9967: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9971: LD_VAR 0 2
9975: PUSH
9976: LD_EXP 33
9980: PPUSH
9981: CALL_OW 302
9985: AND
9986: IFFALSE 10047
// begin wait ( 0 0$3 ) ;
9988: LD_INT 105
9990: PPUSH
9991: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9995: LD_EXP 33
9999: PPUSH
10000: LD_EXP 36
10004: PPUSH
10005: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10009: LD_EXP 33
10013: PPUSH
10014: LD_STRING DK-1-side
10016: PPUSH
10017: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10021: LD_EXP 36
10025: PPUSH
10026: LD_EXP 33
10030: PPUSH
10031: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10035: LD_EXP 36
10039: PPUSH
10040: LD_STRING DF-1-side
10042: PPUSH
10043: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10047: LD_INT 22
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PPUSH
10062: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10066: LD_EXP 36
10070: PUSH
10071: LD_EXP 39
10075: ADD
10076: PPUSH
10077: LD_INT 108
10079: PPUSH
10080: LD_INT 62
10082: PPUSH
10083: CALL_OW 111
// gameStarted := true ;
10087: LD_ADDR_EXP 3
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10102: LD_EXP 28
10106: PPUSH
10107: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10111: LD_EXP 28
10115: PPUSH
10116: LD_EXP 32
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10125: LD_INT 22
10127: PUSH
10128: LD_INT 2
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PPUSH
10135: CALL_OW 69
10139: PUSH
10140: LD_EXP 28
10144: DIFF
10145: PPUSH
10146: LD_EXP 28
10150: PPUSH
10151: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10155: LD_EXP 28
10159: PPUSH
10160: LD_STRING DH-1-explore
10162: PPUSH
10163: CALL_OW 88
// if Givi then
10167: LD_EXP 29
10171: IFFALSE 10187
// Say ( Givi , DG-1-explore ) else
10173: LD_EXP 29
10177: PPUSH
10178: LD_STRING DG-1-explore
10180: PPUSH
10181: CALL_OW 88
10185: GO 10224
// if heikeSecondSquad then
10187: LD_EXP 42
10191: IFFALSE 10224
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10193: LD_EXP 42
10197: PPUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 72
10212: PUSH
10213: LD_INT 1
10215: ARRAY
10216: PPUSH
10217: LD_STRING DArm-1-explore
10219: PPUSH
10220: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10224: LD_EXP 32
10228: PPUSH
10229: LD_STRING DA-1-explore
10231: PPUSH
10232: CALL_OW 88
// if Sophia then
10236: LD_EXP 34
10240: IFFALSE 10318
// begin Say ( Sophia , DS-2-explore ) ;
10242: LD_EXP 34
10246: PPUSH
10247: LD_STRING DS-2-explore
10249: PPUSH
10250: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10254: LD_EXP 32
10258: PPUSH
10259: LD_STRING DA-2-explore
10261: PPUSH
10262: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10266: LD_EXP 34
10270: PPUSH
10271: LD_EXP 32
10275: PPUSH
10276: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10280: LD_EXP 32
10284: PPUSH
10285: LD_EXP 34
10289: PPUSH
10290: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10294: LD_EXP 34
10298: PPUSH
10299: LD_STRING DS-3-explore
10301: PPUSH
10302: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10306: LD_EXP 32
10310: PPUSH
10311: LD_STRING DA-3-explore
10313: PPUSH
10314: CALL_OW 88
// end ; if Mike then
10318: LD_EXP 30
10322: IFFALSE 10378
// begin Say ( Mike , DM-1-explore ) ;
10324: LD_EXP 30
10328: PPUSH
10329: LD_STRING DM-1-explore
10331: PPUSH
10332: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10336: LD_EXP 28
10340: PPUSH
10341: LD_STRING DH-2-explore
10343: PPUSH
10344: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10348: LD_EXP 30
10352: PPUSH
10353: LD_STRING DM-2-explore
10355: PPUSH
10356: CALL_OW 88
// if Kaia then
10360: LD_EXP 33
10364: IFFALSE 10378
// Say ( Kaia , DK-1-explore ) ;
10366: LD_EXP 33
10370: PPUSH
10371: LD_STRING DK-1-explore
10373: PPUSH
10374: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10378: LD_INT 22
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PPUSH
10393: CALL_OW 139
// Video ( false ) ;
10397: LD_INT 0
10399: PPUSH
10400: CALL 75477 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10404: LD_STRING BuildBase
10406: PPUSH
10407: CALL_OW 337
// SaveForQuickRestart ;
10411: CALL_OW 22
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10420: LD_EXP 5
10424: NOT
10425: PUSH
10426: LD_EXP 6
10430: NOT
10431: AND
10432: PUSH
10433: LD_INT 5
10435: PPUSH
10436: LD_INT 22
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 70
10450: AND
10451: PUSH
10452: LD_EXP 6
10456: NOT
10457: AND
10458: IFFALSE 10543
10460: GO 10462
10462: DISABLE
// begin if Mike then
10463: LD_EXP 30
10467: IFFALSE 10483
// Say ( Mike , DM-1-scout ) else
10469: LD_EXP 30
10473: PPUSH
10474: LD_STRING DM-1-scout
10476: PPUSH
10477: CALL_OW 88
10481: GO 10514
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10483: LD_EXP 42
10487: PPUSH
10488: LD_INT 26
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 72
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: PPUSH
10507: LD_STRING DArm-1-explore
10509: PPUSH
10510: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10514: LD_INT 54
10516: PPUSH
10517: LD_INT 35
10519: PPUSH
10520: LD_INT 2
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10530: LD_INT 54
10532: PPUSH
10533: LD_INT 35
10535: PPUSH
10536: LD_INT 2
10538: PPUSH
10539: CALL_OW 331
// end ;
10543: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10544: LD_INT 6
10546: PPUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 70
10561: PUSH
10562: LD_EXP 6
10566: NOT
10567: AND
10568: IFFALSE 10822
10570: GO 10572
10572: DISABLE
10573: LD_INT 0
10575: PPUSH
10576: PPUSH
10577: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10578: LD_ADDR_VAR 0 1
10582: PUSH
10583: LD_EXP 42
10587: PPUSH
10588: LD_INT 26
10590: PUSH
10591: LD_INT 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PPUSH
10598: CALL_OW 72
10602: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_EXP 42
10612: PPUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 72
10627: ST_TO_ADDR
// DialogueOn ;
10628: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10632: LD_INT 36
10634: PPUSH
10635: LD_INT 22
10637: PPUSH
10638: LD_INT 2
10640: PPUSH
10641: LD_INT 8
10643: PPUSH
10644: CALL_OW 330
// dwait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 68
// speakerOk := false ;
10655: LD_ADDR_VAR 0 3
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// if Mike then
10663: LD_EXP 30
10667: IFFALSE 10689
// speakerOk := Say ( Mike , DM-1-spot ) else
10669: LD_ADDR_VAR 0 3
10673: PUSH
10674: LD_EXP 30
10678: PPUSH
10679: LD_STRING DM-1-spot
10681: PPUSH
10682: CALL_OW 88
10686: ST_TO_ADDR
10687: GO 10717
// if randomMen then
10689: LD_VAR 0 1
10693: IFFALSE 10717
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: LD_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: LD_STRING DArm-1-spot-a
10711: PPUSH
10712: CALL_OW 88
10716: ST_TO_ADDR
// if speakerOk then
10717: LD_VAR 0 3
10721: IFFALSE 10765
// begin if Givi then
10723: LD_EXP 29
10727: IFFALSE 10743
// Say ( Givi , DG-1-spot ) else
10729: LD_EXP 29
10733: PPUSH
10734: LD_STRING DG-1-spot
10736: PPUSH
10737: CALL_OW 88
10741: GO 10765
// if randomWomen then
10743: LD_VAR 0 2
10747: IFFALSE 10765
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10749: LD_VAR 0 2
10753: PUSH
10754: LD_INT 1
10756: ARRAY
10757: PPUSH
10758: LD_STRING DArf-1-spot-a
10760: PPUSH
10761: CALL_OW 88
// end ; if Mike then
10765: LD_EXP 30
10769: IFFALSE 10785
// Say ( Heike , DH-1-spot ) else
10771: LD_EXP 28
10775: PPUSH
10776: LD_STRING DH-1-spot
10778: PPUSH
10779: CALL_OW 88
10783: GO 10797
// Say ( Heike , DH-1-spot-a ) ;
10785: LD_EXP 28
10789: PPUSH
10790: LD_STRING DH-1-spot-a
10792: PPUSH
10793: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10797: LD_INT 36
10799: PPUSH
10800: LD_INT 22
10802: PPUSH
10803: LD_INT 2
10805: PPUSH
10806: CALL_OW 331
// DialogueOff ;
10810: CALL_OW 7
// americanBaseSpoted := true ;
10814: LD_ADDR_EXP 5
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// end ;
10822: PPOPN 3
10824: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10825: LD_EXP 5
10829: NOT
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: AND
10860: PUSH
10861: LD_EXP 6
10865: NOT
10866: AND
10867: IFFALSE 10953
10869: GO 10871
10871: DISABLE
10872: LD_INT 0
10874: PPUSH
// begin americanBaseSpoted := true ;
10875: LD_ADDR_EXP 5
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_EXP 42
10892: PPUSH
10893: LD_INT 26
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: ST_TO_ADDR
// if not randomMen then
10908: LD_VAR 0 1
10912: NOT
10913: IFFALSE 10917
// exit ;
10915: GO 10953
// DialogueOn ;
10917: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10921: LD_VAR 0 1
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PPUSH
10930: LD_STRING DArm-1-spot-a
10932: PPUSH
10933: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10937: LD_EXP 28
10941: PPUSH
10942: LD_STRING DH-1-spot-a
10944: PPUSH
10945: CALL_OW 88
// DialogueOff ;
10949: CALL_OW 7
// end ;
10953: PPOPN 1
10955: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10956: LD_INT 11
10958: PPUSH
10959: CALL_OW 255
10963: PUSH
10964: LD_INT 2
10966: EQUAL
10967: PUSH
10968: LD_INT 7
10970: PPUSH
10971: LD_INT 22
10973: PUSH
10974: LD_INT 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: LD_INT 50
10986: PUSH
10987: EMPTY
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 31
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 70
11013: OR
11014: PUSH
11015: LD_INT 7
11017: PPUSH
11018: LD_INT 22
11020: PUSH
11021: LD_INT 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: CALL_OW 70
11032: PUSH
11033: LD_INT 1
11035: GREATER
11036: OR
11037: PUSH
11038: LD_EXP 44
11042: PUSH
11043: LD_INT 4
11045: LESSEQUAL
11046: OR
11047: IFFALSE 11638
11049: GO 11051
11051: DISABLE
11052: LD_INT 0
11054: PPUSH
11055: PPUSH
// begin wait ( 0 0$3 ) ;
11056: LD_INT 105
11058: PPUSH
11059: CALL_OW 67
// americanStartRun := true ;
11063: LD_ADDR_EXP 14
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if IsOk ( usCommander ) then
11071: LD_EXP 45
11075: PPUSH
11076: CALL_OW 302
11080: IFFALSE 11110
// begin usForces := usForces union usCommander ;
11082: LD_ADDR_EXP 44
11086: PUSH
11087: LD_EXP 44
11091: PUSH
11092: LD_EXP 45
11096: UNION
11097: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11098: LD_EXP 45
11102: PPUSH
11103: LD_STRING DUsm-1-assault
11105: PPUSH
11106: CALL_OW 88
// end ; for i in usForces do
11110: LD_ADDR_VAR 0 1
11114: PUSH
11115: LD_EXP 44
11119: PUSH
11120: FOR_IN
11121: IFFALSE 11167
// begin if IsInUnit ( i ) then
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 310
11132: IFFALSE 11143
// ComExitBuilding ( i ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 122
// wait ( 3 ) ;
11143: LD_INT 3
11145: PPUSH
11146: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11150: LD_VAR 0 1
11154: PPUSH
11155: LD_INT 34
11157: PPUSH
11158: LD_INT 67
11160: PPUSH
11161: CALL_OW 111
// end ;
11165: GO 11120
11167: POP
11168: POP
// Say ( Heike , DH-1-assault ) ;
11169: LD_EXP 28
11173: PPUSH
11174: LD_STRING DH-1-assault
11176: PPUSH
11177: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11181: LD_INT 35
11183: PPUSH
11184: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 34
11195: PPUSH
11196: LD_INT 67
11198: PPUSH
11199: CALL_OW 111
// until not usForces ;
11203: LD_EXP 44
11207: NOT
11208: IFFALSE 11181
// music_nat := 2 ;
11210: LD_ADDR_OWVAR 71
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// music_class := music_victory ;
11218: LD_ADDR_OWVAR 72
11222: PUSH
11223: LD_INT 4
11225: ST_TO_ADDR
// if not americanHasEscaped then
11226: LD_EXP 8
11230: NOT
11231: IFFALSE 11252
// begin Say ( Heike , DH-2-assault ) ;
11233: LD_EXP 28
11237: PPUSH
11238: LD_STRING DH-2-assault
11240: PPUSH
11241: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11245: LD_STRING ACH_CLEAN
11247: PPUSH
11248: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11252: LD_INT 70
11254: PPUSH
11255: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11266: LD_INT 22
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: LD_INT 50
11291: PUSH
11292: EMPTY
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: NOT
11309: IFFALSE 11259
// InGameOn ;
11311: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11315: LD_INT 11
11317: PPUSH
11318: CALL_OW 255
11322: PUSH
11323: LD_INT 2
11325: EQUAL
11326: NOT
11327: IFFALSE 11339
// SetSide ( usDepot , 2 ) ;
11329: LD_INT 11
11331: PPUSH
11332: LD_INT 2
11334: PPUSH
11335: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11339: LD_INT 35
11341: PPUSH
11342: LD_INT 22
11344: PPUSH
11345: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11349: LD_EXP 28
11353: PPUSH
11354: LD_INT 35
11356: PPUSH
11357: LD_INT 22
11359: PPUSH
11360: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11364: LD_EXP 28
11368: PPUSH
11369: LD_INT 38
11371: PPUSH
11372: LD_INT 25
11374: PPUSH
11375: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11379: LD_EXP 32
11383: PUSH
11384: LD_EXP 41
11388: UNION
11389: PUSH
11390: LD_EXP 42
11394: UNION
11395: PPUSH
11396: LD_INT 39
11398: PPUSH
11399: LD_INT 26
11401: PPUSH
11402: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11406: LD_EXP 32
11410: PUSH
11411: LD_EXP 41
11415: UNION
11416: PUSH
11417: LD_EXP 42
11421: UNION
11422: PPUSH
11423: LD_EXP 28
11427: PPUSH
11428: CALL_OW 179
// p := 0 ;
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11440: LD_INT 35
11442: PPUSH
11443: CALL_OW 67
// p := p + 1 ;
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: LD_VAR 0 2
11456: PUSH
11457: LD_INT 1
11459: PLUS
11460: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11461: LD_EXP 28
11465: PPUSH
11466: CALL_OW 314
11470: NOT
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_INT 10
11479: GREATER
11480: OR
11481: IFFALSE 11440
// Say ( Heike , DH-1-capture ) ;
11483: LD_EXP 28
11487: PPUSH
11488: LD_STRING DH-1-capture
11490: PPUSH
11491: CALL_OW 88
// if Markov then
11495: LD_EXP 35
11499: IFFALSE 11513
// Say ( Markov , DMar-1-capture ) ;
11501: LD_EXP 35
11505: PPUSH
11506: LD_STRING DMar-1-capture
11508: PPUSH
11509: CALL_OW 88
// if Sophia then
11513: LD_EXP 34
11517: IFFALSE 11543
// begin Say ( Heike , DH-2-capture ) ;
11519: LD_EXP 28
11523: PPUSH
11524: LD_STRING DH-2-capture
11526: PPUSH
11527: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11531: LD_EXP 34
11535: PPUSH
11536: LD_STRING DS-1-capture
11538: PPUSH
11539: CALL_OW 88
// end ; InGameOff ;
11543: CALL_OW 9
// music_nat := music_auto ;
11547: LD_ADDR_OWVAR 71
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// music_class := music_auto ;
11555: LD_ADDR_OWVAR 72
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11563: LD_STRING ConstructBase
11565: PPUSH
11566: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11570: LD_ADDR_VAR 0 1
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11621
// SetSide ( i , 2 ) ;
11607: LD_VAR 0 1
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: CALL_OW 235
11619: GO 11604
11621: POP
11622: POP
// wait ( 0 0$3 ) ;
11623: LD_INT 105
11625: PPUSH
11626: CALL_OW 67
// americanBaseCaptured := true ;
11630: LD_ADDR_EXP 6
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// end ;
11638: PPOPN 2
11640: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11641: LD_EXP 13
11645: PUSH
11646: LD_INT 3
11648: GREATEREQUAL
11649: IFFALSE 11661
11651: GO 11653
11653: DISABLE
// SetAchievement ( ACH_ENG ) ;
11654: LD_STRING ACH_ENG
11656: PPUSH
11657: CALL_OW 543
11661: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11662: LD_INT 22
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: PUSH
11691: LD_INT 4
11693: GREATEREQUAL
11694: IFFALSE 11706
11696: GO 11698
11698: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11699: LD_STRING ACH_APEGEN
11701: PPUSH
11702: CALL_OW 543
11706: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11707: LD_INT 22
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 30
11719: PUSH
11720: LD_INT 2
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 3
11729: PUSH
11730: LD_INT 57
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: IFFALSE 12014
11751: GO 11753
11753: DISABLE
// begin workshopBuilded := true ;
11754: LD_ADDR_EXP 10
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if IsOk ( Markov ) then
11762: LD_EXP 35
11766: PPUSH
11767: CALL_OW 302
11771: IFFALSE 11830
// begin Say ( Heike , DH-1-shop-a ) ;
11773: LD_EXP 28
11777: PPUSH
11778: LD_STRING DH-1-shop-a
11780: PPUSH
11781: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11785: LD_INT 47
11787: PPUSH
11788: LD_INT 2
11790: PPUSH
11791: CALL_OW 321
11795: PUSH
11796: LD_INT 2
11798: EQUAL
11799: PUSH
11800: LD_INT 45
11802: PPUSH
11803: LD_INT 2
11805: PPUSH
11806: CALL_OW 321
11810: PUSH
11811: LD_INT 2
11813: EQUAL
11814: AND
11815: NOT
11816: IFFALSE 11830
// Say ( Markov , DMar-1-shop-a ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-1-shop-a
11825: PPUSH
11826: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11830: LD_INT 35
11832: PPUSH
11833: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11837: LD_INT 47
11839: PPUSH
11840: LD_INT 2
11842: PPUSH
11843: CALL_OW 321
11847: PUSH
11848: LD_INT 2
11850: EQUAL
11851: PUSH
11852: LD_INT 45
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 321
11862: PUSH
11863: LD_INT 2
11865: EQUAL
11866: OR
11867: IFFALSE 11830
// if IsOk ( Markov ) and IsOk ( Heike ) then
11869: LD_EXP 35
11873: PPUSH
11874: CALL_OW 302
11878: PUSH
11879: LD_EXP 28
11883: PPUSH
11884: CALL_OW 302
11888: AND
11889: IFFALSE 12007
// begin DialogueOn ;
11891: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11895: LD_EXP 35
11899: PPUSH
11900: LD_STRING DMar-1-shop
11902: PPUSH
11903: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11907: LD_EXP 28
11911: PPUSH
11912: LD_STRING DH-1-shop
11914: PPUSH
11915: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11919: LD_EXP 35
11923: PPUSH
11924: LD_STRING DMar-2-shop
11926: PPUSH
11927: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11931: LD_EXP 35
11935: PPUSH
11936: LD_STRING DMar-3-shop
11938: PPUSH
11939: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11943: LD_EXP 28
11947: PPUSH
11948: LD_STRING DH-2-shop
11950: PPUSH
11951: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11955: LD_EXP 35
11959: PPUSH
11960: LD_STRING DMar-4-shop
11962: PPUSH
11963: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11967: LD_EXP 28
11971: PPUSH
11972: LD_STRING DH-3-shop
11974: PPUSH
11975: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11979: LD_EXP 35
11983: PPUSH
11984: LD_STRING DMar-5-shop
11986: PPUSH
11987: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11991: LD_EXP 28
11995: PPUSH
11996: LD_STRING DH-4-shop
11998: PPUSH
11999: CALL_OW 88
// DialogueOff ;
12003: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12007: LD_STRING ConstructVeh
12009: PPUSH
12010: CALL_OW 337
// end ;
12014: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12015: LD_INT 2
12017: PPUSH
12018: LD_INT 2
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL 38887 0 3
12028: PUSH
12029: LD_INT 0
12031: EQUAL
12032: IFFALSE 12044
12034: GO 12036
12036: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12037: LD_STRING Techs
12039: PPUSH
12040: CALL_OW 337
12044: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12045: LD_EXP 35
12049: PPUSH
12050: CALL_OW 302
12054: PUSH
12055: LD_INT 22
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: LD_INT 34
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 35
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: AND
12102: IFFALSE 12209
12104: GO 12106
12106: DISABLE
// begin DialogueOn ;
12107: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12111: LD_INT 22
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: LD_INT 34
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 35
12136: PUSH
12137: LD_INT 22
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PPUSH
12158: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12162: LD_INT 10
12164: PPUSH
12165: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-bal
12176: PPUSH
12177: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12181: LD_EXP 35
12185: PPUSH
12186: LD_STRING DMar-1-bal
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-bal
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12210: LD_EXP 32
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 6
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: IFFALSE 12310
12251: GO 12253
12253: DISABLE
// begin DialogueOn ;
12254: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12258: LD_EXP 32
12262: PPUSH
12263: LD_STRING DA-1-lab
12265: PPUSH
12266: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12270: LD_EXP 28
12274: PPUSH
12275: LD_STRING DH-1-lab
12277: PPUSH
12278: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12282: LD_EXP 32
12286: PPUSH
12287: LD_STRING DA-2-lab
12289: PPUSH
12290: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12294: LD_EXP 28
12298: PPUSH
12299: LD_STRING DH-2-lab
12301: PPUSH
12302: CALL_OW 88
// DialogueOff ;
12306: CALL_OW 7
// end ;
12310: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12311: LD_EXP 33
12315: PPUSH
12316: CALL_OW 302
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 15
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: AND
12350: PUSH
12351: LD_INT 81
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: NOT
12366: AND
12367: IFFALSE 12549
12369: GO 12371
12371: DISABLE
12372: LD_INT 0
12374: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12375: LD_ADDR_VAR 0 1
12379: PUSH
12380: LD_INT 22
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 15
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 69
12408: ST_TO_ADDR
// InGameOn ;
12409: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12426: LD_VAR 0 1
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: PPUSH
12435: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12439: LD_EXP 33
12443: PPUSH
12444: LD_STRING DK-1-apesol
12446: PPUSH
12447: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12451: LD_VAR 0 1
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: PPUSH
12460: LD_INT 35
12462: PPUSH
12463: LD_INT 28
12465: PPUSH
12466: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12470: LD_VAR 0 1
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_INT 36
12481: PPUSH
12482: LD_INT 17
12484: PPUSH
12485: CALL_OW 171
// DialogueOn ;
12489: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12493: LD_EXP 32
12497: PPUSH
12498: LD_STRING DA-1-apesol
12500: PPUSH
12501: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12505: LD_EXP 33
12509: PPUSH
12510: LD_STRING DK-2-apesol
12512: PPUSH
12513: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12517: LD_EXP 32
12521: PPUSH
12522: LD_STRING DA-2-apesol
12524: PPUSH
12525: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12529: LD_EXP 33
12533: PPUSH
12534: LD_STRING DK-3-apesol
12536: PPUSH
12537: CALL_OW 88
// DialogueOff ;
12541: CALL_OW 7
// InGameOff ;
12545: CALL_OW 9
// end ;
12549: PPOPN 1
12551: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12552: LD_EXP 34
12556: PPUSH
12557: CALL_OW 302
12561: PUSH
12562: LD_INT 22
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 25
12574: PUSH
12575: LD_INT 16
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: AND
12591: PUSH
12592: LD_INT 81
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 69
12606: NOT
12607: AND
12608: IFFALSE 12893
12610: GO 12612
12612: DISABLE
12613: LD_INT 0
12615: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 25
12633: PUSH
12634: LD_INT 16
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: ST_TO_ADDR
// InGameOn ;
12650: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12654: LD_INT 35
12656: PPUSH
12657: LD_INT 22
12659: PPUSH
12660: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12664: LD_INT 5
12666: PPUSH
12667: LD_INT 35
12669: PPUSH
12670: LD_INT 22
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12680: LD_EXP 34
12684: PPUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: ARRAY
12706: PPUSH
12707: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: CALL_OW 122
// wait ( 0 0$2 ) ;
12724: LD_INT 70
12726: PPUSH
12727: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12731: LD_EXP 34
12735: PPUSH
12736: LD_STRING DS-1-apeeng
12738: PPUSH
12739: CALL_OW 88
// if IsOk ( Kamil ) then
12743: LD_EXP 31
12747: PPUSH
12748: CALL_OW 302
12752: IFFALSE 12889
// begin Say ( Kamil , DKam-1-apeeng ) ;
12754: LD_EXP 31
12758: PPUSH
12759: LD_STRING DKam-1-apeeng
12761: PPUSH
12762: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12766: LD_EXP 34
12770: PPUSH
12771: LD_STRING DS-2-apeeng
12773: PPUSH
12774: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12778: LD_EXP 31
12782: PPUSH
12783: LD_STRING DKam-2-apeeng
12785: PPUSH
12786: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12790: LD_EXP 34
12794: PPUSH
12795: LD_STRING DS-3-apeeng
12797: PPUSH
12798: CALL_OW 88
// if not IsOK ( Kaia ) then
12802: LD_EXP 33
12806: PPUSH
12807: CALL_OW 302
12811: NOT
12812: IFFALSE 12820
// begin InGameOff ;
12814: CALL_OW 9
// exit ;
12818: GO 12893
// end ; Say ( Kaia , DK-1-apeeng ) ;
12820: LD_EXP 33
12824: PPUSH
12825: LD_STRING DK-1-apeeng
12827: PPUSH
12828: CALL_OW 88
// if not IsOk ( Givi ) then
12832: LD_EXP 29
12836: PPUSH
12837: CALL_OW 302
12841: NOT
12842: IFFALSE 12853
// begin Video ( false ) ;
12844: LD_INT 0
12846: PPUSH
12847: CALL 75477 0 1
// exit ;
12851: GO 12893
// end ; Say ( Givi , DG-1-apeeng ) ;
12853: LD_EXP 29
12857: PPUSH
12858: LD_STRING DG-1-apeeng
12860: PPUSH
12861: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12865: LD_EXP 33
12869: PPUSH
12870: LD_STRING DK-2-apeeng
12872: PPUSH
12873: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12877: LD_EXP 33
12881: PPUSH
12882: LD_STRING DK-3-apeeng
12884: PPUSH
12885: CALL_OW 88
// end ; InGameOff ;
12889: CALL_OW 9
// end ;
12893: PPOPN 1
12895: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12896: LD_EXP 4
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 2
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 0
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: AND
12930: IFFALSE 13095
12932: GO 12934
12934: DISABLE
// begin wait ( 0 0$10 ) ;
12935: LD_INT 350
12937: PPUSH
12938: CALL_OW 67
// DialogueOn ;
12942: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12946: LD_EXP 36
12950: PPUSH
12951: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12955: LD_EXP 36
12959: PPUSH
12960: LD_STRING DF-1-distribution
12962: PPUSH
12963: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12967: LD_EXP 28
12971: PPUSH
12972: LD_STRING DH-2-distribution
12974: PPUSH
12975: CALL_OW 88
// if IsOk ( Kaia ) then
12979: LD_EXP 33
12983: PPUSH
12984: CALL_OW 302
12988: IFFALSE 13049
// begin Say ( Kaia , DK-1-distribution ) ;
12990: LD_EXP 33
12994: PPUSH
12995: LD_STRING DK-1-distribution
12997: PPUSH
12998: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13002: LD_EXP 28
13006: PPUSH
13007: LD_STRING DH-1-distribution
13009: PPUSH
13010: CALL_OW 88
// if IsOk ( Givi ) then
13014: LD_EXP 29
13018: PPUSH
13019: CALL_OW 302
13023: IFFALSE 13049
// begin Say ( Givi , DG-1-distribution ) ;
13025: LD_EXP 29
13029: PPUSH
13030: LD_STRING DG-1-distribution
13032: PPUSH
13033: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13037: LD_EXP 28
13041: PPUSH
13042: LD_STRING DH-3-distribution
13044: PPUSH
13045: CALL_OW 88
// end ; end ; DialogueOff ;
13049: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13053: LD_STRING Crates1
13055: PPUSH
13056: CALL_OW 337
// farmerRequestedCrates := 300 ;
13060: LD_ADDR_EXP 16
13064: PUSH
13065: LD_INT 300
13067: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13068: LD_STRING FarmerCrates
13070: PPUSH
13071: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13075: LD_INT 10
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13085: LD_INT 108
13087: PPUSH
13088: LD_INT 61
13090: PPUSH
13091: CALL_OW 86
// end ;
13095: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13096: LD_EXP 6
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 57
13116: PUSH
13117: EMPTY
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: LD_INT 30
13129: PUSH
13130: LD_INT 6
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 7
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: PPUSH
13157: CALL_OW 69
13161: AND
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 3
13175: PUSH
13176: LD_INT 57
13178: PUSH
13179: EMPTY
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 69
13205: AND
13206: IFFALSE 13370
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
// begin wait ( 0 0$10 ) ;
13214: LD_INT 350
13216: PPUSH
13217: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: LD_EXP 42
13230: PPUSH
13231: LD_INT 26
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 72
13259: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13260: LD_EXP 28
13264: PPUSH
13265: LD_STRING DH-1-task
13267: PPUSH
13268: CALL_OW 88
// if IsOk ( Sophia ) then
13272: LD_EXP 34
13276: PPUSH
13277: CALL_OW 302
13281: IFFALSE 13321
// begin Say ( Sophia , DS-1-task ) ;
13283: LD_EXP 34
13287: PPUSH
13288: LD_STRING DS-1-task
13290: PPUSH
13291: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13295: LD_EXP 34
13299: PPUSH
13300: LD_STRING DS-2-task
13302: PPUSH
13303: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13307: LD_EXP 28
13311: PPUSH
13312: LD_STRING DH-2-task
13314: PPUSH
13315: CALL_OW 88
// end else
13319: GO 13355
// if eng then
13321: LD_VAR 0 1
13325: IFFALSE 13355
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13327: LD_VAR 0 1
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: LD_STRING DArm-1-task
13338: PPUSH
13339: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13343: LD_EXP 28
13347: PPUSH
13348: LD_STRING DH-2-task
13350: PPUSH
13351: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13355: LD_STRING BaseConstructed
13357: PPUSH
13358: CALL_OW 337
// allowConvoys := true ;
13362: LD_ADDR_EXP 12
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// end ;
13370: PPOPN 1
13372: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13373: LD_INT 22
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 34
13385: PUSH
13386: LD_INT 12
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PPUSH
13397: CALL_OW 69
13401: IFFALSE 13569
13403: GO 13405
13405: DISABLE
13406: LD_INT 0
13408: PPUSH
13409: PPUSH
13410: PPUSH
// begin wait ( 0 0$2 ) ;
13411: LD_INT 70
13413: PPUSH
13414: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 34
13435: PUSH
13436: LD_INT 12
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: CALL_OW 250
13470: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13471: LD_ADDR_VAR 0 3
13475: PUSH
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 251
13489: ST_TO_ADDR
// DialogueOn ;
13490: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13508: LD_VAR 0 2
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 2
13520: PPUSH
13521: LD_INT 6
13523: NEG
13524: PPUSH
13525: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13529: LD_INT 10
13531: PPUSH
13532: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13536: LD_EXP 28
13540: PPUSH
13541: LD_STRING DH-1-seecargo
13543: PPUSH
13544: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13548: LD_VAR 0 2
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_INT 2
13560: PPUSH
13561: CALL_OW 331
// DialogueOff ;
13565: CALL_OW 7
// end ;
13569: PPOPN 3
13571: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13572: LD_EXP 4
13576: PUSH
13577: LD_EXP 15
13581: PUSH
13582: LD_INT 300
13584: GREATEREQUAL
13585: AND
13586: IFFALSE 13658
13588: GO 13590
13590: DISABLE
// begin DialogueOn ;
13591: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13595: LD_EXP 36
13599: PPUSH
13600: LD_STRING DF-1-delivery-2
13602: PPUSH
13603: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13607: LD_EXP 28
13611: PPUSH
13612: LD_STRING DH-1-delivery-2
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13619: LD_EXP 36
13623: PPUSH
13624: LD_STRING DF-2-delivery-2
13626: PPUSH
13627: CALL_OW 94
// DialogueOff ;
13631: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13635: LD_STRING Crates2
13637: PPUSH
13638: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13642: LD_ADDR_EXP 17
13646: PUSH
13647: LD_INT 63000
13649: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13650: LD_ADDR_EXP 16
13654: PUSH
13655: LD_INT 600
13657: ST_TO_ADDR
// end ;
13658: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13659: LD_EXP 4
13663: PUSH
13664: LD_EXP 15
13668: PUSH
13669: LD_INT 600
13671: GREATEREQUAL
13672: AND
13673: PUSH
13674: LD_OWVAR 67
13678: PUSH
13679: LD_INT 1
13681: GREATER
13682: AND
13683: IFFALSE 13883
13685: GO 13687
13687: DISABLE
// begin DialogueOn ;
13688: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13692: LD_EXP 36
13696: PPUSH
13697: LD_STRING DF-1-delivery-3
13699: PPUSH
13700: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13704: LD_EXP 28
13708: PPUSH
13709: LD_STRING DH-1-delivery-3
13711: PPUSH
13712: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13716: LD_EXP 36
13720: PPUSH
13721: LD_STRING DF-2-delivery-3
13723: PPUSH
13724: CALL_OW 94
// if IsOk ( Kaia ) then
13728: LD_EXP 33
13732: PPUSH
13733: CALL_OW 302
13737: IFFALSE 13787
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13739: LD_EXP 33
13743: PPUSH
13744: LD_STRING DK-1-delivery-3
13746: PPUSH
13747: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13751: LD_EXP 28
13755: PPUSH
13756: LD_STRING DH-2-delivery-3
13758: PPUSH
13759: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13763: LD_EXP 29
13767: PPUSH
13768: LD_STRING DG-1-delivery-3
13770: PPUSH
13771: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13775: LD_EXP 30
13779: PPUSH
13780: LD_STRING DM-1-delivery-3
13782: PPUSH
13783: CALL_OW 88
// end ; DialogueOff ;
13787: CALL_OW 7
// case Difficulty of 2 :
13791: LD_OWVAR 67
13795: PUSH
13796: LD_INT 2
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 13822
13804: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13805: LD_STRING Crates3
13807: PPUSH
13808: CALL_OW 337
// farmerRequestedCrates := 900 ;
13812: LD_ADDR_EXP 16
13816: PUSH
13817: LD_INT 900
13819: ST_TO_ADDR
// end ; 3 :
13820: GO 13875
13822: LD_INT 3
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13848
13830: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13831: LD_STRING Crates4
13833: PPUSH
13834: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13838: LD_ADDR_EXP 16
13842: PUSH
13843: LD_INT 1200
13845: ST_TO_ADDR
// end ; 4 :
13846: GO 13875
13848: LD_INT 4
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13874
13856: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
13857: LD_STRING Crates5
13859: PPUSH
13860: CALL_OW 337
// farmerRequestedCrates := 1400 ;
13864: LD_ADDR_EXP 16
13868: PUSH
13869: LD_INT 1400
13871: ST_TO_ADDR
// end ; end ;
13872: GO 13875
13874: POP
// farmerCratesCounter := 30 30$00 ;
13875: LD_ADDR_EXP 17
13879: PUSH
13880: LD_INT 63000
13882: ST_TO_ADDR
// end ;
13883: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
13884: LD_EXP 4
13888: PUSH
13889: LD_EXP 15
13893: PUSH
13894: LD_INT 600
13896: PUSH
13897: LD_INT 900
13899: PUSH
13900: LD_INT 1200
13902: PUSH
13903: LD_INT 1400
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_OWVAR 67
13916: ARRAY
13917: GREATEREQUAL
13918: AND
13919: IFFALSE 14005
13921: GO 13923
13923: DISABLE
// begin retreatAllowed := true ;
13924: LD_ADDR_EXP 11
13928: PUSH
13929: LD_INT 1
13931: ST_TO_ADDR
// display_strings := [ ] ;
13932: LD_ADDR_OWVAR 47
13936: PUSH
13937: EMPTY
13938: ST_TO_ADDR
// DialogueOn ;
13939: CALL_OW 6
// InGameOn ;
13943: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13947: LD_EXP 37
13951: PPUSH
13952: LD_STRING DO-radio-end
13954: PPUSH
13955: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13959: LD_EXP 28
13963: PPUSH
13964: LD_STRING DH-1-radio-end
13966: PPUSH
13967: CALL_OW 88
// InGameOff ;
13971: CALL_OW 9
// DialogueOff ;
13975: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13979: LD_STRING Retreat
13981: PPUSH
13982: CALL_OW 337
// wait ( 0 0$2 ) ;
13986: LD_INT 70
13988: PPUSH
13989: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13993: LD_EXP 28
13997: PPUSH
13998: LD_STRING DH-2-radio-end
14000: PPUSH
14001: CALL_OW 88
// end ;
14005: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14006: LD_EXP 11
14010: IFFALSE 14141
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14019: LD_INT 10
14021: PPUSH
14022: LD_INT 0
14024: PPUSH
14025: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_EXP 39
14038: PPUSH
14039: LD_INT 25
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 72
14053: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 102
14061: PPUSH
14062: LD_INT 69
14064: PPUSH
14065: CALL_OW 428
14069: PUSH
14070: LD_INT 0
14072: EQUAL
14073: AND
14074: IFFALSE 14141
// begin for i in tmp do
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14111
// if IsInUnit ( i ) then
14089: LD_VAR 0 2
14093: PPUSH
14094: CALL_OW 310
14098: IFFALSE 14109
// ComExitBuilding ( i ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: CALL_OW 122
14109: GO 14086
14111: POP
14112: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 31
14120: PPUSH
14121: LD_INT 102
14123: PPUSH
14124: LD_INT 69
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: CALL_OW 205
// wait ( 0 0$3 ) ;
14134: LD_INT 105
14136: PPUSH
14137: CALL_OW 67
// end ; end ;
14141: PPOPN 2
14143: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14144: LD_EXP 11
14148: NOT
14149: PUSH
14150: LD_INT 5
14152: PPUSH
14153: CALL_OW 301
14157: AND
14158: IFFALSE 14190
14160: GO 14162
14162: DISABLE
// begin DialogueOn ;
14163: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14167: LD_EXP 36
14171: PPUSH
14172: LD_STRING DF-1-failure
14174: PPUSH
14175: CALL_OW 94
// DialogueOff ;
14179: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14183: LD_STRING FarmerDepot
14185: PPUSH
14186: CALL_OW 104
// end ;
14190: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14191: LD_EXP 11
14195: PUSH
14196: LD_EXP 28
14200: PPUSH
14201: LD_EXP 36
14205: PPUSH
14206: CALL_OW 296
14210: PUSH
14211: LD_INT 12
14213: LESS
14214: AND
14215: PUSH
14216: LD_INT 81
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: NOT
14245: AND
14246: IFFALSE 14930
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
14255: PPUSH
// begin allowConvoys := false ;
14256: LD_ADDR_EXP 12
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// InGameOn ;
14264: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14268: LD_EXP 28
14272: PPUSH
14273: LD_EXP 36
14277: PPUSH
14278: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14282: LD_EXP 36
14286: PPUSH
14287: LD_EXP 28
14291: PPUSH
14292: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14296: LD_EXP 36
14300: PPUSH
14301: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14305: LD_EXP 28
14309: PPUSH
14310: LD_STRING DH-1-end
14312: PPUSH
14313: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14317: LD_EXP 36
14321: PPUSH
14322: LD_STRING DF-1-end
14324: PPUSH
14325: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14329: LD_EXP 36
14333: PPUSH
14334: LD_STRING DF-2-end
14336: PPUSH
14337: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14341: LD_EXP 28
14345: PPUSH
14346: LD_STRING DH-2-end
14348: PPUSH
14349: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14353: LD_EXP 36
14357: PPUSH
14358: LD_STRING DF-3-end
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14365: LD_EXP 28
14369: PPUSH
14370: LD_STRING DH-3-end
14372: PPUSH
14373: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14377: LD_EXP 29
14381: PPUSH
14382: LD_STRING DG-1-end
14384: PPUSH
14385: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14389: LD_EXP 28
14393: PPUSH
14394: LD_STRING DH-4-end
14396: PPUSH
14397: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14401: LD_EXP 36
14405: PPUSH
14406: LD_STRING DF-4-end
14408: PPUSH
14409: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14413: LD_EXP 28
14417: PPUSH
14418: LD_STRING DH-5-end
14420: PPUSH
14421: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14425: LD_EXP 36
14429: PPUSH
14430: LD_STRING DF-5-end
14432: PPUSH
14433: CALL_OW 88
// InGameOff ;
14437: CALL_OW 9
// allowCargoEvacuation := true ;
14441: LD_ADDR_EXP 7
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14449: LD_ADDR_VAR 0 2
14453: PUSH
14454: LD_INT 4
14456: PUSH
14457: LD_INT 3
14459: PUSH
14460: LD_INT 2
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_OWVAR 67
14476: ARRAY
14477: ST_TO_ADDR
// if farmerSquad < max then
14478: LD_EXP 39
14482: PUSH
14483: LD_VAR 0 2
14487: LESS
14488: IFFALSE 14500
// max := farmerSquad ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_EXP 39
14499: ST_TO_ADDR
// for i := 1 to max do
14500: LD_ADDR_VAR 0 1
14504: PUSH
14505: DOUBLE
14506: LD_INT 1
14508: DEC
14509: ST_TO_ADDR
14510: LD_VAR 0 2
14514: PUSH
14515: FOR_TO
14516: IFFALSE 14554
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14518: LD_EXP 39
14522: PUSH
14523: LD_INT 1
14525: ARRAY
14526: PPUSH
14527: LD_INT 2
14529: PPUSH
14530: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14534: LD_ADDR_EXP 39
14538: PUSH
14539: LD_EXP 39
14543: PPUSH
14544: LD_INT 1
14546: PPUSH
14547: CALL_OW 3
14551: ST_TO_ADDR
// end ;
14552: GO 14515
14554: POP
14555: POP
// for i in Farmer ^ farmerSquad do
14556: LD_ADDR_VAR 0 1
14560: PUSH
14561: LD_EXP 36
14565: PUSH
14566: LD_EXP 39
14570: ADD
14571: PUSH
14572: FOR_IN
14573: IFFALSE 14612
// begin if IsInUnit ( i ) then
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 310
14584: IFFALSE 14595
// ComExitBuilding ( i ) ;
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_INT 102
14602: PPUSH
14603: LD_INT 7
14605: PPUSH
14606: CALL_OW 171
// end ;
14610: GO 14572
14612: POP
14613: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14614: LD_ADDR_VAR 0 1
14618: PUSH
14619: LD_INT 22
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: PUSH
14648: LD_INT 5
14650: DIFF
14651: PUSH
14652: FOR_IN
14653: IFFALSE 14669
// SetSide ( i , 2 ) ;
14655: LD_VAR 0 1
14659: PPUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 235
14667: GO 14652
14669: POP
14670: POP
// wait ( 0 0$2 ) ;
14671: LD_INT 70
14673: PPUSH
14674: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14678: LD_EXP 28
14682: PPUSH
14683: LD_STRING DH-6-end
14685: PPUSH
14686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14690: LD_INT 35
14692: PPUSH
14693: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_EXP 36
14706: PUSH
14707: LD_EXP 39
14711: ADD
14712: PPUSH
14713: LD_INT 95
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 72
14727: ST_TO_ADDR
// if tmp then
14728: LD_VAR 0 3
14732: IFFALSE 14776
// for i in tmp do
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: LD_VAR 0 3
14743: PUSH
14744: FOR_IN
14745: IFFALSE 14774
// begin farmerSquad := farmerSquad diff i ;
14747: LD_ADDR_EXP 39
14751: PUSH
14752: LD_EXP 39
14756: PUSH
14757: LD_VAR 0 1
14761: DIFF
14762: ST_TO_ADDR
// RemoveUnit ( i ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 64
// end ;
14772: GO 14744
14774: POP
14775: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14776: LD_EXP 39
14780: PUSH
14781: EMPTY
14782: EQUAL
14783: PUSH
14784: LD_EXP 36
14788: PPUSH
14789: CALL_OW 305
14793: NOT
14794: AND
14795: IFFALSE 14690
// if farmerHumanLoseCounter = 0 then
14797: LD_EXP 20
14801: PUSH
14802: LD_INT 0
14804: EQUAL
14805: IFFALSE 14814
// SetAchievement ( ACH_BABY ) ;
14807: LD_STRING ACH_BABY
14809: PPUSH
14810: CALL_OW 543
// wait ( 1 1$00 ) ;
14814: LD_INT 2100
14816: PPUSH
14817: CALL_OW 67
// SendAttack ;
14821: CALL 6154 0 0
// Say ( Heike , DH-7-end ) ;
14825: LD_EXP 28
14829: PPUSH
14830: LD_STRING DH-7-end
14832: PPUSH
14833: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
14837: LD_ADDR_VAR 0 1
14841: PUSH
14842: DOUBLE
14843: LD_INT 1
14845: DEC
14846: ST_TO_ADDR
14847: LD_INT 2
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 3
14855: PUSH
14856: LD_INT 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_OWVAR 67
14869: ARRAY
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14928
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14874: LD_INT 4200
14876: PUSH
14877: LD_INT 3500
14879: PUSH
14880: LD_INT 3150
14882: PUSH
14883: LD_INT 2800
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: LD_OWVAR 67
14896: ARRAY
14897: PPUSH
14898: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
14902: LD_EXP 11
14906: PUSH
14907: LD_EXP 21
14911: PUSH
14912: LD_INT 1
14914: LESS
14915: AND
14916: IFFALSE 14922
// exit ;
14918: POP
14919: POP
14920: GO 14930
// SendAttack ;
14922: CALL 6154 0 0
// end ;
14926: GO 14871
14928: POP
14929: POP
// end ;
14930: PPOPN 3
14932: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14933: LD_EXP 7
14937: PUSH
14938: LD_EXP 21
14942: PUSH
14943: LD_INT 0
14945: GREATER
14946: AND
14947: IFFALSE 14957
14949: GO 14951
14951: DISABLE
// begin enable ;
14952: ENABLE
// CargoEvacuation ;
14953: CALL 3651 0 0
// end ;
14957: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14958: LD_EXP 17
14962: PUSH
14963: LD_INT 18900
14965: LESSEQUAL
14966: IFFALSE 15015
14968: GO 14970
14970: DISABLE
// begin DialogueOn ;
14971: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14975: LD_EXP 36
14979: PPUSH
14980: LD_STRING DF-1-distribution-a
14982: PPUSH
14983: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14987: LD_EXP 28
14991: PPUSH
14992: LD_STRING DH-1-distribution-a
14994: PPUSH
14995: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14999: LD_EXP 36
15003: PPUSH
15004: LD_STRING DF-2-distribution-a
15006: PPUSH
15007: CALL_OW 94
// DialogueOff ;
15011: CALL_OW 7
// end ;
15015: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15016: LD_EXP 17
15020: PUSH
15021: LD_INT 0
15023: LESSEQUAL
15024: IFFALSE 15056
15026: GO 15028
15028: DISABLE
// begin DialogueOn ;
15029: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15033: LD_EXP 36
15037: PPUSH
15038: LD_STRING DF-3-distribution-a
15040: PPUSH
15041: CALL_OW 94
// YouLost ( Distribution ) ;
15045: LD_STRING Distribution
15047: PPUSH
15048: CALL_OW 104
// DialogueOff ;
15052: CALL_OW 7
// end ;
15056: END
// every 0 0$1 trigger vehCounter >= 2 do
15057: LD_EXP 22
15061: PUSH
15062: LD_INT 2
15064: GREATEREQUAL
15065: IFFALSE 15077
15067: GO 15069
15069: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15070: LD_STRING VehConstructed
15072: PPUSH
15073: CALL_OW 337
15077: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15078: LD_INT 22
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 34
15090: PUSH
15091: LD_INT 12
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 69
15106: IFFALSE 15166
15108: GO 15110
15110: DISABLE
// begin DialogueOn ;
15111: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15115: LD_EXP 28
15119: PPUSH
15120: LD_STRING DH-1-truck
15122: PPUSH
15123: CALL_OW 88
// if IsOk ( Markov ) then
15127: LD_EXP 35
15131: PPUSH
15132: CALL_OW 302
15136: IFFALSE 15162
// begin Say ( Markov , DMar-1-truck ) ;
15138: LD_EXP 35
15142: PPUSH
15143: LD_STRING DMar-1-truck
15145: PPUSH
15146: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15150: LD_EXP 28
15154: PPUSH
15155: LD_STRING DH-2-truck
15157: PPUSH
15158: CALL_OW 88
// end ; DialogueOff ;
15162: CALL_OW 7
// end ;
15166: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15167: LD_INT 0
15169: PPUSH
15170: PPUSH
15171: PPUSH
// if IsOk ( Givi ) then
15172: LD_EXP 29
15176: PPUSH
15177: CALL_OW 302
15181: IFFALSE 15197
// begin Say ( Givi , DG-1-nocargo ) ;
15183: LD_EXP 29
15187: PPUSH
15188: LD_STRING DG-1-nocargo
15190: PPUSH
15191: CALL_OW 88
// exit ;
15195: GO 15293
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_EXP 42
15206: PPUSH
15207: LD_INT 26
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 72
15221: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15222: LD_ADDR_VAR 0 3
15226: PUSH
15227: LD_EXP 42
15231: PPUSH
15232: LD_INT 26
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: ST_TO_ADDR
// if randomMen then
15247: LD_VAR 0 2
15251: IFFALSE 15271
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15253: LD_VAR 0 2
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_STRING DArm-1-nocargo
15264: PPUSH
15265: CALL_OW 88
15269: GO 15293
// if randomWomen then
15271: LD_VAR 0 3
15275: IFFALSE 15293
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: PPUSH
15286: LD_STRING DArf-1-nocargo
15288: PPUSH
15289: CALL_OW 88
// end ;
15293: LD_VAR 0 1
15297: RET
// export function IncomingAttack ; begin
15298: LD_INT 0
15300: PPUSH
// if attackWave = 1 then
15301: LD_EXP 19
15305: PUSH
15306: LD_INT 1
15308: EQUAL
15309: IFFALSE 15380
// begin DialogueOn ;
15311: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15315: LD_EXP 37
15319: PPUSH
15320: LD_STRING DO-1-radio-1
15322: PPUSH
15323: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15327: LD_EXP 28
15331: PPUSH
15332: LD_STRING DH-1-radio-1-
15334: PPUSH
15335: CALL_OW 88
// if IsOk ( Markov ) then
15339: LD_EXP 35
15343: PPUSH
15344: CALL_OW 302
15348: IFFALSE 15374
// begin Say ( Markov , DMar-1-radio-1 ) ;
15350: LD_EXP 35
15354: PPUSH
15355: LD_STRING DMar-1-radio-1
15357: PPUSH
15358: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15362: LD_EXP 28
15366: PPUSH
15367: LD_STRING DH-2-radio-1
15369: PPUSH
15370: CALL_OW 88
// end ; DialogueOff ;
15374: CALL_OW 7
// end else
15378: GO 15404
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DO-1-radio-u
15387: PPUSH
15388: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15392: LD_EXP 28
15396: PPUSH
15397: LD_STRING DH-1-radio-u
15399: PPUSH
15400: CALL_OW 88
// end ; end ;
15404: LD_VAR 0 1
15408: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15409: LD_EXP 44
15413: PPUSH
15414: LD_INT 95
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 72
15428: IFFALSE 15531
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
// begin enable ;
15436: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_EXP 44
15446: PPUSH
15447: LD_INT 95
15449: PUSH
15450: LD_INT 8
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 72
15461: PUSH
15462: FOR_IN
15463: IFFALSE 15492
// begin usForces := usForces diff i ;
15465: LD_ADDR_EXP 44
15469: PUSH
15470: LD_EXP 44
15474: PUSH
15475: LD_VAR 0 1
15479: DIFF
15480: ST_TO_ADDR
// RemoveUnit ( i ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 64
// end ;
15490: GO 15462
15492: POP
15493: POP
// if not americanHasEscaped and attackWave = 1 then
15494: LD_EXP 8
15498: NOT
15499: PUSH
15500: LD_EXP 19
15504: PUSH
15505: LD_INT 1
15507: EQUAL
15508: AND
15509: IFFALSE 15531
// begin americanHasEscaped := true ;
15511: LD_ADDR_EXP 8
15515: PUSH
15516: LD_INT 1
15518: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15519: LD_EXP 28
15523: PPUSH
15524: LD_STRING DH-2-assault-a
15526: PPUSH
15527: CALL_OW 88
// end ; end ;
15531: PPOPN 1
15533: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15534: LD_INT 4
15536: PPUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 70
15551: PUSH
15552: LD_EXP 11
15556: NOT
15557: AND
15558: IFFALSE 15575
15560: GO 15562
15562: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15563: LD_EXP 36
15567: PPUSH
15568: LD_STRING DF-1-attack
15570: PPUSH
15571: CALL_OW 94
15575: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15576: LD_INT 5
15578: PPUSH
15579: CALL_OW 255
15583: PUSH
15584: LD_INT 2
15586: EQUAL
15587: IFFALSE 15603
15589: GO 15591
15591: DISABLE
// begin enable ;
15592: ENABLE
// SetSide ( arDepot , 5 ) ;
15593: LD_INT 5
15595: PPUSH
15596: LD_INT 5
15598: PPUSH
15599: CALL_OW 235
// end ;
15603: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PPUSH
15628: CALL_OW 69
15632: NOT
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: NOT
15649: AND
15650: PUSH
15651: LD_EXP 11
15655: NOT
15656: AND
15657: PUSH
15658: LD_EXP 15
15662: PUSH
15663: LD_INT 90
15665: GREATER
15666: AND
15667: PUSH
15668: LD_INT 7
15670: PPUSH
15671: LD_INT 22
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 70
15699: AND
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 50
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: LD_INT 30
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: AND
15737: IFFALSE 16530
15739: GO 15741
15741: DISABLE
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
15748: PPUSH
// begin depot := usDepot ;
15749: LD_ADDR_VAR 0 5
15753: PUSH
15754: LD_INT 11
15756: ST_TO_ADDR
// if not depot then
15757: LD_VAR 0 5
15761: NOT
15762: IFFALSE 15802
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15764: LD_ADDR_VAR 0 5
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 30
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15802: LD_ADDR_VAR 0 1
15806: PUSH
15807: LD_EXP 42
15811: PPUSH
15812: LD_INT 26
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 72
15826: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_EXP 42
15836: PPUSH
15837: LD_INT 26
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 72
15851: ST_TO_ADDR
// if IsOk ( Kaia ) then
15852: LD_EXP 33
15856: PPUSH
15857: CALL_OW 302
15861: IFFALSE 15882
// speaker := [ Kaia , DK ] else
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_EXP 33
15872: PUSH
15873: LD_STRING DK
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: ST_TO_ADDR
15880: GO 15962
// if randomMen then
15882: LD_VAR 0 1
15886: IFFALSE 15921
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15888: LD_ADDR_VAR 0 3
15892: PUSH
15893: LD_VAR 0 1
15897: PUSH
15898: LD_INT 1
15900: PPUSH
15901: LD_VAR 0 1
15905: PPUSH
15906: CALL_OW 12
15910: ARRAY
15911: PUSH
15912: LD_STRING DArm
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: ST_TO_ADDR
15919: GO 15962
// if randomWomen then
15921: LD_VAR 0 2
15925: IFFALSE 15960
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_VAR 0 2
15936: PUSH
15937: LD_INT 1
15939: PPUSH
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 12
15949: ARRAY
15950: PUSH
15951: LD_STRING DArf
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: ST_TO_ADDR
15958: GO 15962
// exit ;
15960: GO 16530
// if IsInUnit ( speaker [ 1 ] ) then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 1
15969: ARRAY
15970: PPUSH
15971: CALL_OW 310
15975: IFFALSE 15998
// place := IsInUnit ( speaker [ 1 ] ) else
15977: LD_ADDR_VAR 0 4
15981: PUSH
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: CALL_OW 310
15995: ST_TO_ADDR
15996: GO 16012
// place := speaker [ 1 ] ;
15998: LD_ADDR_VAR 0 4
16002: PUSH
16003: LD_VAR 0 3
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16021: LD_VAR 0 4
16025: PPUSH
16026: CALL_OW 250
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: CALL_OW 251
16040: PPUSH
16041: CALL 2138 0 2
// wait ( 0 0$2 ) ;
16045: LD_INT 70
16047: PPUSH
16048: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16052: LD_EXP 38
16056: PPUSH
16057: CALL_OW 305
16061: NOT
16062: IFFALSE 16066
// exit ;
16064: GO 16530
// allowConvoys := false ;
16066: LD_ADDR_EXP 12
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// InGameOn ;
16074: CALL_OW 8
// wait ( 0 0$1 ) ;
16078: LD_INT 35
16080: PPUSH
16081: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16085: LD_EXP 38
16089: PPUSH
16090: LD_STRING DI-1-land
16092: PPUSH
16093: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PPUSH
16106: CALL_OW 310
16110: IFFALSE 16125
// ComExit ( speaker [ 1 ] ) ;
16112: LD_VAR 0 3
16116: PUSH
16117: LD_INT 1
16119: ARRAY
16120: PPUSH
16121: CALL 75893 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16125: LD_VAR 0 3
16129: PUSH
16130: LD_INT 1
16132: ARRAY
16133: PPUSH
16134: LD_EXP 38
16138: PPUSH
16139: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PPUSH
16152: LD_EXP 38
16156: PPUSH
16157: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16161: LD_EXP 38
16165: PPUSH
16166: LD_VAR 0 3
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PPUSH
16175: CALL_OW 119
// wait ( 0 0$1 ) ;
16179: LD_INT 35
16181: PPUSH
16182: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16186: LD_VAR 0 3
16190: PUSH
16191: LD_INT 1
16193: ARRAY
16194: PPUSH
16195: LD_VAR 0 3
16199: PUSH
16200: LD_INT 2
16202: ARRAY
16203: PUSH
16204: LD_STRING -1-land
16206: STR
16207: PPUSH
16208: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16212: LD_EXP 38
16216: PPUSH
16217: LD_STRING DI-2-land
16219: PPUSH
16220: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: LD_VAR 0 3
16237: PUSH
16238: LD_INT 2
16240: ARRAY
16241: PUSH
16242: LD_STRING -2-land
16244: STR
16245: PPUSH
16246: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_INT 2
16266: ARRAY
16267: PUSH
16268: LD_STRING -3-land
16270: STR
16271: PPUSH
16272: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16276: LD_EXP 28
16280: PPUSH
16281: LD_STRING DH-1-land
16283: PPUSH
16284: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16288: LD_VAR 0 5
16292: PPUSH
16293: CALL_OW 313
16297: PUSH
16298: LD_INT 6
16300: EQUAL
16301: IFFALSE 16321
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16303: LD_VAR 0 5
16307: PPUSH
16308: CALL_OW 313
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PPUSH
16317: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16321: LD_EXP 38
16325: PPUSH
16326: LD_INT 2
16328: PPUSH
16329: CALL_OW 235
// CenterOnUnits ( depot ) ;
16333: LD_VAR 0 5
16337: PPUSH
16338: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16342: LD_EXP 38
16346: PPUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16356: LD_VAR 0 3
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 5
16369: PPUSH
16370: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16381: LD_EXP 38
16385: PPUSH
16386: CALL_OW 310
16390: PUSH
16391: LD_EXP 38
16395: PPUSH
16396: CALL_OW 302
16400: NOT
16401: OR
16402: PUSH
16403: LD_VAR 0 5
16407: PPUSH
16408: CALL_OW 302
16412: NOT
16413: OR
16414: IFFALSE 16374
// InGameOff ;
16416: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16420: LD_EXP 38
16424: PPUSH
16425: CALL_OW 302
16429: NOT
16430: IFFALSE 16434
// exit ;
16432: GO 16530
// if not IsOk ( depot ) then
16434: LD_VAR 0 5
16438: PPUSH
16439: CALL_OW 302
16443: NOT
16444: IFFALSE 16507
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16446: LD_EXP 38
16450: PPUSH
16451: LD_INT 30
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16461: LD_INT 35
16463: PPUSH
16464: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16468: LD_EXP 38
16472: PPUSH
16473: LD_INT 30
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 307
16483: PUSH
16484: LD_EXP 38
16488: PPUSH
16489: CALL_OW 301
16493: OR
16494: IFFALSE 16461
// RemoveUnit ( Ibrahim ) ;
16496: LD_EXP 38
16500: PPUSH
16501: CALL_OW 64
// exit ;
16505: GO 16530
// end ; ibrahimInDepot := true ;
16507: LD_ADDR_EXP 25
16511: PUSH
16512: LD_INT 1
16514: ST_TO_ADDR
// allowConvoys := true ;
16515: LD_ADDR_EXP 12
16519: PUSH
16520: LD_INT 1
16522: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16523: LD_STRING IbrahimInDepot
16525: PPUSH
16526: CALL_OW 97
// end ;
16530: PPOPN 5
16532: END
// export function IbrahimQuery ; begin
16533: LD_INT 0
16535: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16536: LD_STRING IbrahimQuery
16538: PPUSH
16539: CALL_OW 97
16543: PUSH
16544: LD_INT 1
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16914
16552: POP
// begin allowConvoys := false ;
16553: LD_ADDR_EXP 12
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// ibrahimInDepot := false ;
16561: LD_ADDR_EXP 25
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// InGameOn ;
16569: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16573: LD_EXP 28
16577: PPUSH
16578: CALL_OW 87
// wait ( 0 0$1 ) ;
16582: LD_INT 35
16584: PPUSH
16585: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16589: LD_EXP 28
16593: PPUSH
16594: LD_STRING DH-1-interrogation
16596: PPUSH
16597: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16601: LD_EXP 38
16605: PPUSH
16606: LD_STRING DI-1-interrogation
16608: PPUSH
16609: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16613: LD_EXP 28
16617: PPUSH
16618: LD_STRING DH-2-interrogation
16620: PPUSH
16621: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16625: LD_EXP 38
16629: PPUSH
16630: LD_STRING DI-2-interrogation
16632: PPUSH
16633: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16637: LD_EXP 28
16641: PPUSH
16642: LD_STRING DH-3-interrogation
16644: PPUSH
16645: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16649: LD_EXP 38
16653: PPUSH
16654: LD_STRING DI-3-interrogation
16656: PPUSH
16657: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16661: LD_EXP 28
16665: PPUSH
16666: LD_STRING DH-4-interrogation
16668: PPUSH
16669: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16673: LD_EXP 38
16677: PPUSH
16678: LD_STRING DI-4-interrogation
16680: PPUSH
16681: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16685: LD_EXP 28
16689: PPUSH
16690: LD_STRING DH-5-interrogation
16692: PPUSH
16693: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16697: LD_EXP 38
16701: PPUSH
16702: LD_STRING DI-5-interrogation
16704: PPUSH
16705: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16709: LD_INT 10
16711: PPUSH
16712: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16716: LD_EXP 28
16720: PPUSH
16721: LD_STRING DH-6-interrogation
16723: PPUSH
16724: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16728: LD_EXP 38
16732: PPUSH
16733: LD_STRING DI-6-interrogation
16735: PPUSH
16736: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16740: LD_EXP 38
16744: PPUSH
16745: LD_STRING DI-7-interrogation
16747: PPUSH
16748: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16752: LD_EXP 28
16756: PPUSH
16757: LD_STRING DH-7-interrogation
16759: PPUSH
16760: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16764: LD_INT 10
16766: PPUSH
16767: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16771: LD_EXP 28
16775: PPUSH
16776: LD_STRING DH-8-interrogation
16778: PPUSH
16779: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16783: LD_EXP 38
16787: PPUSH
16788: LD_STRING DI-8-interrogation
16790: PPUSH
16791: CALL_OW 88
// wait ( 0 0$1 ) ;
16795: LD_INT 35
16797: PPUSH
16798: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16802: LD_STRING IbrahimDecisionQuery
16804: PPUSH
16805: CALL_OW 97
16809: PUSH
16810: LD_INT 1
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16842
16818: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16819: LD_EXP 38
16823: PPUSH
16824: LD_STRING DI-1-kill
16826: PPUSH
16827: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16831: LD_EXP 38
16835: PPUSH
16836: CALL_OW 66
// end ; 2 :
16840: GO 16908
16842: LD_INT 2
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16907
16850: POP
// begin SetSide ( Ibrahim , 6 ) ;
16851: LD_EXP 38
16855: PPUSH
16856: LD_INT 6
16858: PPUSH
16859: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16863: LD_EXP 38
16867: PPUSH
16868: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16872: LD_EXP 38
16876: PPUSH
16877: LD_INT 66
16879: PPUSH
16880: LD_INT 2
16882: PPUSH
16883: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16887: LD_EXP 38
16891: PPUSH
16892: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16896: LD_EXP 28
16900: PPUSH
16901: CALL_OW 122
// end ; end ;
16905: GO 16908
16907: POP
// InGameOff ;
16908: CALL_OW 9
// end ; 2 :
16912: GO 16928
16914: LD_INT 2
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 16927
16922: POP
// exit ; end ;
16923: GO 17004
16925: GO 16928
16927: POP
// allowConvoys := true ;
16928: LD_ADDR_EXP 12
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16936: LD_INT 5250
16938: PPUSH
16939: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16943: LD_INT 35
16945: PPUSH
16946: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16950: LD_INT 81
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: NOT
16979: IFFALSE 16943
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16981: LD_EXP 38
16985: PPUSH
16986: LD_INT 34
16988: PPUSH
16989: LD_INT 21
16991: PPUSH
16992: CALL_OW 111
// ibrahimIsFree := true ;
16996: LD_ADDR_EXP 26
17000: PUSH
17001: LD_INT 1
17003: ST_TO_ADDR
// end ;
17004: LD_VAR 0 1
17008: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17009: LD_EXP 26
17013: PUSH
17014: LD_EXP 38
17018: PPUSH
17019: CALL_OW 302
17023: AND
17024: PUSH
17025: LD_INT 2
17027: PPUSH
17028: LD_EXP 38
17032: PPUSH
17033: CALL_OW 292
17037: AND
17038: IFFALSE 17805
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin wait ( 0 0$10 ) ;
17051: LD_INT 350
17053: PPUSH
17054: CALL_OW 67
// allowConvoys := false ;
17058: LD_ADDR_EXP 12
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
// depot := usDepot ;
17066: LD_ADDR_VAR 0 4
17070: PUSH
17071: LD_INT 11
17073: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17074: LD_INT 11
17076: NOT
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 50
17090: PUSH
17091: EMPTY
17092: LIST
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 69
17113: AND
17114: IFFALSE 17161
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17116: LD_ADDR_VAR 0 4
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 50
17133: PUSH
17134: EMPTY
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 69
17156: PUSH
17157: LD_INT 1
17159: ARRAY
17160: ST_TO_ADDR
// InGameOn ;
17161: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17165: LD_EXP 38
17169: PPUSH
17170: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17174: LD_EXP 38
17178: PPUSH
17179: LD_STRING DI-1-free
17181: PPUSH
17182: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17186: LD_EXP 28
17190: PPUSH
17191: LD_EXP 38
17195: PPUSH
17196: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17200: LD_EXP 28
17204: PPUSH
17205: LD_STRING DH-1-free
17207: PPUSH
17208: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17212: LD_EXP 38
17216: PPUSH
17217: LD_EXP 28
17221: PPUSH
17222: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17226: LD_EXP 38
17230: PPUSH
17231: LD_STRING DI-2-free
17233: PPUSH
17234: CALL_OW 88
// changeClass := 0 ;
17238: LD_ADDR_VAR 0 1
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17246: LD_STRING IbrahimJoinQuery
17248: PPUSH
17249: CALL_OW 97
17253: PUSH
17254: LD_INT 1
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17273
17262: POP
// begin changeClass := 1 ;
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// end ; 2 :
17271: GO 17513
17273: LD_INT 2
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17433
17281: POP
// begin Say ( Heike , DH-1-decline ) ;
17282: LD_EXP 28
17286: PPUSH
17287: LD_STRING DH-1-decline
17289: PPUSH
17290: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17294: LD_EXP 38
17298: PPUSH
17299: LD_STRING DI-1-decline
17301: PPUSH
17302: CALL_OW 88
// InGameOff ;
17306: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17310: LD_EXP 38
17314: PPUSH
17315: LD_INT 30
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 111
// p := 0 ;
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// repeat p := p + 1 ;
17333: LD_ADDR_VAR 0 3
17337: PUSH
17338: LD_VAR 0 3
17342: PUSH
17343: LD_INT 1
17345: PLUS
17346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17347: LD_INT 35
17349: PPUSH
17350: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17354: LD_EXP 38
17358: PPUSH
17359: LD_INT 30
17361: PPUSH
17362: LD_INT 1
17364: PPUSH
17365: CALL_OW 307
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 101
17382: PUSH
17383: LD_INT 6
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: NOT
17399: OR
17400: PUSH
17401: LD_VAR 0 3
17405: PUSH
17406: LD_INT 10
17408: GREATER
17409: OR
17410: IFFALSE 17333
// RemoveUnit ( Ibrahim ) ;
17412: LD_EXP 38
17416: PPUSH
17417: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17421: LD_INT 1
17423: PPUSH
17424: LD_STRING 03_IbrahimHasEscaped
17426: PPUSH
17427: CALL_OW 39
// end ; 3 :
17431: GO 17513
17433: LD_INT 3
17435: DOUBLE
17436: EQUAL
17437: IFTRUE 17441
17439: GO 17512
17441: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17442: LD_EXP 28
17446: PPUSH
17447: LD_STRING DH-1-radio-hq
17449: PPUSH
17450: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17454: LD_EXP 37
17458: PPUSH
17459: LD_STRING DO-1-radio-hq
17461: PPUSH
17462: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17466: LD_EXP 28
17470: PPUSH
17471: LD_STRING DH-2-radio-hq
17473: PPUSH
17474: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17478: LD_EXP 37
17482: PPUSH
17483: LD_STRING DO-2-radio-hq
17485: PPUSH
17486: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17490: LD_EXP 28
17494: PPUSH
17495: LD_STRING DH-3-radio-hq
17497: PPUSH
17498: CALL_OW 88
// changeClass := 1 ;
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_INT 1
17509: ST_TO_ADDR
// end ; end ;
17510: GO 17513
17512: POP
// if changeClass then
17513: LD_VAR 0 1
17517: IFFALSE 17805
// begin Say ( Heike , DH-1-agree ) ;
17519: LD_EXP 28
17523: PPUSH
17524: LD_STRING DH-1-agree
17526: PPUSH
17527: CALL_OW 88
// if IsOk ( Givi ) then
17531: LD_EXP 29
17535: PPUSH
17536: CALL_OW 302
17540: IFFALSE 17578
// begin Say ( Givi , DG-1-agree ) ;
17542: LD_EXP 29
17546: PPUSH
17547: LD_STRING DG-1-agree
17549: PPUSH
17550: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17554: LD_EXP 28
17558: PPUSH
17559: LD_STRING DH-2-agree
17561: PPUSH
17562: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17566: LD_EXP 29
17570: PPUSH
17571: LD_STRING DG-2-agree
17573: PPUSH
17574: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17578: LD_VAR 0 4
17582: PPUSH
17583: CALL_OW 313
17587: PUSH
17588: LD_INT 6
17590: EQUAL
17591: IFFALSE 17611
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17593: LD_VAR 0 4
17597: PPUSH
17598: CALL_OW 313
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: PPUSH
17607: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17611: LD_EXP 38
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17623: LD_ADDR_VAR 0 5
17627: PUSH
17628: LD_EXP 38
17632: PPUSH
17633: CALL_OW 250
17637: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17638: LD_ADDR_VAR 0 6
17642: PUSH
17643: LD_EXP 38
17647: PPUSH
17648: CALL_OW 251
17652: ST_TO_ADDR
// if depot then
17653: LD_VAR 0 4
17657: IFFALSE 17706
// begin ComEnterUnit ( Ibrahim , depot ) ;
17659: LD_EXP 38
17663: PPUSH
17664: LD_VAR 0 4
17668: PPUSH
17669: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17673: LD_INT 35
17675: PPUSH
17676: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17680: LD_EXP 38
17684: PPUSH
17685: CALL_OW 310
17689: IFFALSE 17673
// b := IsInUnit ( Ibrahim ) ;
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_EXP 38
17700: PPUSH
17701: CALL_OW 310
17705: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17706: LD_EXP 38
17710: PPUSH
17711: CALL_OW 64
// uc_side := 2 ;
17715: LD_ADDR_OWVAR 20
17719: PUSH
17720: LD_INT 2
17722: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17723: LD_ADDR_EXP 38
17727: PUSH
17728: LD_STRING Ibrahim
17730: PPUSH
17731: LD_INT 0
17733: PPUSH
17734: LD_STRING 
17736: PPUSH
17737: CALL 38824 0 3
17741: ST_TO_ADDR
// if depot then
17742: LD_VAR 0 4
17746: IFFALSE 17764
// PlaceHumanInUnit ( Ibrahim , b ) else
17748: LD_EXP 38
17752: PPUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: CALL_OW 52
17762: GO 17786
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17764: LD_EXP 38
17768: PPUSH
17769: LD_VAR 0 5
17773: PPUSH
17774: LD_VAR 0 6
17778: PPUSH
17779: LD_INT 0
17781: PPUSH
17782: CALL_OW 48
// InGameOff ;
17786: CALL_OW 9
// allowConvoys := true ;
17790: LD_ADDR_EXP 12
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17798: LD_STRING ACH_IBRAHIM
17800: PPUSH
17801: CALL_OW 543
// end ; end ;
17805: PPOPN 6
17807: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17808: LD_EXP 33
17812: PPUSH
17813: CALL_OW 256
17817: PUSH
17818: LD_INT 3
17820: LESS
17821: IFFALSE 17888
17823: GO 17825
17825: DISABLE
// begin DialogueOn ;
17826: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17830: LD_EXP 33
17834: PPUSH
17835: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17839: LD_EXP 33
17843: PPUSH
17844: LD_STRING DK-keydeath-1
17846: PPUSH
17847: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17851: LD_EXP 28
17855: PPUSH
17856: LD_STRING DH-keydeath-2
17858: PPUSH
17859: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17863: LD_EXP 28
17867: PPUSH
17868: LD_STRING DH-keydeath-3
17870: PPUSH
17871: CALL_OW 88
// DialogueOff ;
17875: CALL_OW 7
// KillUnit ( Kaia ) ;
17879: LD_EXP 33
17883: PPUSH
17884: CALL_OW 66
// end ;
17888: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17889: LD_EXP 11
17893: PUSH
17894: LD_EXP 21
17898: PUSH
17899: LD_INT 1
17901: LESS
17902: AND
17903: IFFALSE 18443
17905: GO 17907
17907: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17908: LD_INT 22
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 25
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 25
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: IFFALSE 18032
// begin ChangeSideFog ( 1 , 2 ) ;
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 2
17961: PPUSH
17962: CALL_OW 343
// Query ( DestroyEnemy ) ;
17966: LD_STRING DestroyEnemy
17968: PPUSH
17969: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17973: LD_INT 35
17975: PPUSH
17976: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17980: LD_INT 22
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 25
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 69
18026: PUSH
18027: LD_INT 0
18029: EQUAL
18030: IFFALSE 17973
// end ; DialogueOn ;
18032: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18036: LD_EXP 28
18040: PPUSH
18041: LD_STRING DH-1-final
18043: PPUSH
18044: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18048: LD_OWVAR 1
18052: PUSH
18053: LD_INT 138600
18055: PUSH
18056: LD_INT 134400
18058: PUSH
18059: LD_INT 130200
18061: PUSH
18062: LD_INT 126000
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: LD_OWVAR 67
18075: ARRAY
18076: LESSEQUAL
18077: IFFALSE 18091
// AddMedal ( med1 , 1 ) else
18079: LD_STRING med1
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: CALL_OW 101
18089: GO 18102
// AddMedal ( med1 , - 1 ) ;
18091: LD_STRING med1
18093: PPUSH
18094: LD_INT 1
18096: NEG
18097: PPUSH
18098: CALL_OW 101
// if vehCounter >= 2 then
18102: LD_EXP 22
18106: PUSH
18107: LD_INT 2
18109: GREATEREQUAL
18110: IFFALSE 18124
// AddMedal ( med2 , 1 ) else
18112: LD_STRING med2
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 101
18122: GO 18135
// AddMedal ( med2 , - 1 ) ;
18124: LD_STRING med2
18126: PPUSH
18127: LD_INT 1
18129: NEG
18130: PPUSH
18131: CALL_OW 101
// if deadCounter = 0 then
18135: LD_EXP 9
18139: PUSH
18140: LD_INT 0
18142: EQUAL
18143: IFFALSE 18157
// AddMedal ( med3 , 1 ) else
18145: LD_STRING med3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 101
18155: GO 18168
// AddMedal ( med3 , - 1 ) ;
18157: LD_STRING med3
18159: PPUSH
18160: LD_INT 1
18162: NEG
18163: PPUSH
18164: CALL_OW 101
// GiveMedals ( MAIN ) ;
18168: LD_STRING MAIN
18170: PPUSH
18171: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18175: LD_INT 22
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 23
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 21
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18219: LD_EXP 28
18223: PPUSH
18224: LD_STRING 03_Heike
18226: PPUSH
18227: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18231: LD_EXP 32
18235: PPUSH
18236: LD_STRING 03_Aviradze
18238: PPUSH
18239: CALL_OW 38
// if Givi then
18243: LD_EXP 29
18247: IFFALSE 18261
// SaveCharacters ( Givi , 03_Givi ) ;
18249: LD_EXP 29
18253: PPUSH
18254: LD_STRING 03_Givi
18256: PPUSH
18257: CALL_OW 38
// if Mike then
18261: LD_EXP 30
18265: IFFALSE 18279
// SaveCharacters ( Mike , 03_Mike ) ;
18267: LD_EXP 30
18271: PPUSH
18272: LD_STRING 03_Mike
18274: PPUSH
18275: CALL_OW 38
// if Kamil then
18279: LD_EXP 31
18283: IFFALSE 18297
// SaveCharacters ( Kamil , 03_Kamil ) ;
18285: LD_EXP 31
18289: PPUSH
18290: LD_STRING 03_Kamil
18292: PPUSH
18293: CALL_OW 38
// if Kaia then
18297: LD_EXP 33
18301: IFFALSE 18315
// SaveCharacters ( Kaia , 03_Kaia ) ;
18303: LD_EXP 33
18307: PPUSH
18308: LD_STRING 03_Kaia
18310: PPUSH
18311: CALL_OW 38
// if Sophia then
18315: LD_EXP 34
18319: IFFALSE 18333
// SaveCharacters ( Sophia , 03_Sophia ) ;
18321: LD_EXP 34
18325: PPUSH
18326: LD_STRING 03_Sophia
18328: PPUSH
18329: CALL_OW 38
// if Markov then
18333: LD_EXP 35
18337: IFFALSE 18351
// SaveCharacters ( Markov , 03_Markov ) ;
18339: LD_EXP 35
18343: PPUSH
18344: LD_STRING 03_Markov
18346: PPUSH
18347: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18351: LD_EXP 38
18355: PUSH
18356: LD_EXP 38
18360: PPUSH
18361: CALL_OW 255
18365: PUSH
18366: LD_INT 2
18368: EQUAL
18369: AND
18370: IFFALSE 18391
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18372: LD_STRING enableBioCharacter(BIO_IBRA)
18374: PPUSH
18375: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18379: LD_EXP 38
18383: PPUSH
18384: LD_STRING 03_Ibrahim
18386: PPUSH
18387: CALL_OW 38
// end ; if heikeSecondSquad then
18391: LD_EXP 42
18395: IFFALSE 18409
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18397: LD_EXP 42
18401: PPUSH
18402: LD_STRING 03_others
18404: PPUSH
18405: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18409: LD_EXP 9
18413: PPUSH
18414: LD_STRING 03_DeadCounter
18416: PPUSH
18417: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18421: LD_STRING enableBioCharacter(BIO_OMAR)
18423: PPUSH
18424: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18428: LD_STRING enableBioCharacter(BIO_FARM)
18430: PPUSH
18431: CALL_OW 559
// YouWin ;
18435: CALL_OW 103
// DialogueOff ;
18439: CALL_OW 7
// end ; end_of_file
18443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL 34184 0 1
// if un = Heike then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 28
18462: EQUAL
18463: IFFALSE 18472
// YouLost ( Heike ) ;
18465: LD_STRING Heike
18467: PPUSH
18468: CALL_OW 104
// if un = Aviradze then
18472: LD_VAR 0 1
18476: PUSH
18477: LD_EXP 32
18481: EQUAL
18482: IFFALSE 18491
// YouLost ( Aviradze ) ;
18484: LD_STRING Aviradze
18486: PPUSH
18487: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18491: LD_VAR 0 1
18495: PUSH
18496: LD_INT 11
18498: EQUAL
18499: PUSH
18500: LD_EXP 11
18504: NOT
18505: AND
18506: IFFALSE 18515
// YouLost ( Depot ) ;
18508: LD_STRING Depot
18510: PPUSH
18511: CALL_OW 104
// if un = arDepot then
18515: LD_VAR 0 1
18519: PUSH
18520: LD_INT 5
18522: EQUAL
18523: IFFALSE 18532
// YouLost ( FarmerDepot ) ;
18525: LD_STRING FarmerDepot
18527: PPUSH
18528: CALL_OW 104
// if un = Farmer then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_EXP 36
18541: EQUAL
18542: IFFALSE 18551
// YouLost ( Farmer ) ;
18544: LD_STRING Farmer
18546: PPUSH
18547: CALL_OW 104
// if un in usForces then
18551: LD_VAR 0 1
18555: PUSH
18556: LD_EXP 44
18560: IN
18561: IFFALSE 18579
// usForces := usForces diff un ;
18563: LD_ADDR_EXP 44
18567: PUSH
18568: LD_EXP 44
18572: PUSH
18573: LD_VAR 0 1
18577: DIFF
18578: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 23
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: IN
18624: IFFALSE 18640
// deadCounter := deadCounter + 1 ;
18626: LD_ADDR_EXP 9
18630: PUSH
18631: LD_EXP 9
18635: PUSH
18636: LD_INT 1
18638: PLUS
18639: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18640: LD_VAR 0 1
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 34
18657: PUSH
18658: LD_INT 12
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: IN
18674: PUSH
18675: LD_EXP 18
18679: NOT
18680: AND
18681: IFFALSE 18691
// firstConvoyDestroyed := true ;
18683: LD_ADDR_EXP 18
18687: PUSH
18688: LD_INT 1
18690: ST_TO_ADDR
// if un in usAttackers then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 47
18700: IN
18701: IFFALSE 18719
// usAttackers := usAttackers diff un ;
18703: LD_ADDR_EXP 47
18707: PUSH
18708: LD_EXP 47
18712: PUSH
18713: LD_VAR 0 1
18717: DIFF
18718: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 22
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 21
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: IN
18753: IFFALSE 18769
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18755: LD_ADDR_EXP 20
18759: PUSH
18760: LD_EXP 20
18764: PUSH
18765: LD_INT 1
18767: PLUS
18768: ST_TO_ADDR
// end ;
18769: PPOPN 1
18771: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18772: LD_VAR 0 2
18776: PUSH
18777: LD_EXP 38
18781: EQUAL
18782: PUSH
18783: LD_EXP 25
18787: AND
18788: IFFALSE 18973
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18790: LD_INT 22
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 30
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 50
18812: PUSH
18813: EMPTY
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: IFFALSE 18879
// begin InGameOn ;
18827: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18831: LD_EXP 38
18835: PPUSH
18836: LD_INT 11
18838: PPUSH
18839: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18843: LD_INT 35
18845: PPUSH
18846: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18850: LD_EXP 38
18854: PPUSH
18855: LD_INT 11
18857: PPUSH
18858: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18862: LD_EXP 38
18866: PPUSH
18867: CALL_OW 310
18871: IFFALSE 18843
// InGameOff ;
18873: CALL_OW 9
// end else
18877: GO 18973
// begin SetSide ( Ibrahim , 6 ) ;
18879: LD_EXP 38
18883: PPUSH
18884: LD_INT 6
18886: PPUSH
18887: CALL_OW 235
// ibrahimInDepot := false ;
18891: LD_ADDR_EXP 25
18895: PUSH
18896: LD_INT 0
18898: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18899: LD_EXP 38
18903: PPUSH
18904: LD_INT 30
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18921: LD_EXP 38
18925: PPUSH
18926: LD_INT 30
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18936: LD_EXP 38
18940: PPUSH
18941: LD_INT 30
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: CALL_OW 307
18951: PUSH
18952: LD_EXP 38
18956: PPUSH
18957: CALL_OW 301
18961: OR
18962: IFFALSE 18914
// RemoveUnit ( Ibrahim ) ;
18964: LD_EXP 38
18968: PPUSH
18969: CALL_OW 64
// end ; end ; end ;
18973: PPOPN 2
18975: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18976: LD_VAR 0 2
18980: PUSH
18981: LD_EXP 28
18985: EQUAL
18986: PUSH
18987: LD_VAR 0 1
18991: PUSH
18992: LD_INT 11
18994: EQUAL
18995: AND
18996: PUSH
18997: LD_EXP 25
19001: AND
19002: IFFALSE 19008
// IbrahimQuery ;
19004: CALL 16533 0 0
// end ;
19008: PPOPN 2
19010: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 141
// if oldId in usAttackers then
19020: LD_VAR 0 2
19024: PUSH
19025: LD_EXP 47
19029: IN
19030: IFFALSE 19048
// usAttackers := usAttackers diff oldId ;
19032: LD_ADDR_EXP 47
19036: PUSH
19037: LD_EXP 47
19041: PUSH
19042: LD_VAR 0 2
19046: DIFF
19047: ST_TO_ADDR
// if newId in usAttackers then
19048: LD_VAR 0 1
19052: PUSH
19053: LD_EXP 47
19057: IN
19058: IFFALSE 19076
// usAttackers := usAttackers diff newId ;
19060: LD_ADDR_EXP 47
19064: PUSH
19065: LD_EXP 47
19069: PUSH
19070: LD_VAR 0 1
19074: DIFF
19075: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 4
19083: EQUAL
19084: PUSH
19085: LD_EXP 18
19089: NOT
19090: AND
19091: IFFALSE 19101
// firstConvoyDestroyed := true ;
19093: LD_ADDR_EXP 18
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 264
19110: PUSH
19111: LD_INT 12
19113: EQUAL
19114: IFFALSE 19152
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19116: LD_ADDR_EXP 13
19120: PUSH
19121: LD_EXP 13
19125: PUSH
19126: LD_INT 1
19128: PLUS
19129: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19130: LD_VAR 0 1
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 289
19142: PUSH
19143: LD_INT 0
19145: EQUAL
19146: IFFALSE 19152
// EmptyCargoDialog ;
19148: CALL 15167 0 0
// end ; end ;
19152: PPOPN 4
19154: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19155: LD_VAR 0 1
19159: PUSH
19160: LD_INT 2
19162: EQUAL
19163: PUSH
19164: LD_VAR 0 2
19168: PUSH
19169: LD_INT 5
19171: EQUAL
19172: AND
19173: IFFALSE 19182
// YouLost ( Attack ) ;
19175: LD_STRING Attack
19177: PPUSH
19178: CALL_OW 104
// end ;
19182: PPOPN 2
19184: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19185: LD_VAR 0 1
19189: PPUSH
19190: CALL_OW 255
19194: PUSH
19195: LD_INT 1
19197: EQUAL
19198: PUSH
19199: LD_EXP 6
19203: NOT
19204: AND
19205: IFFALSE 19339
// begin if GetBType ( b ) = b_lab then
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 266
19216: PUSH
19217: LD_INT 6
19219: EQUAL
19220: IFFALSE 19260
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19222: LD_EXP 44
19226: PPUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 4
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PPUSH
19237: CALL_OW 72
19241: PPUSH
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 120
// AmLabResearch ( b ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL 5194 0 1
// end ; if GetBType ( b ) = b_armoury then
19260: LD_VAR 0 1
19264: PPUSH
19265: CALL_OW 266
19269: PUSH
19270: LD_INT 4
19272: EQUAL
19273: IFFALSE 19321
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19275: LD_EXP 44
19279: PPUSH
19280: LD_INT 25
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: LD_INT 54
19295: PUSH
19296: EMPTY
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 72
19311: PPUSH
19312: LD_VAR 0 1
19316: PPUSH
19317: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19321: LD_ADDR_EXP 46
19325: PUSH
19326: LD_EXP 46
19330: PPUSH
19331: LD_INT 1
19333: PPUSH
19334: CALL_OW 3
19338: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19339: LD_VAR 0 1
19343: PPUSH
19344: CALL_OW 255
19348: PUSH
19349: LD_INT 5
19351: EQUAL
19352: IFFALSE 19366
// SetBLevel ( b , 5 ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_INT 5
19361: PPUSH
19362: CALL_OW 241
// end ;
19366: PPOPN 1
19368: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 255
19378: PUSH
19379: LD_INT 2
19381: EQUAL
19382: IFFALSE 19398
// vehCounter := vehCounter + 1 ;
19384: LD_ADDR_EXP 22
19388: PUSH
19389: LD_EXP 22
19393: PUSH
19394: LD_INT 1
19396: PLUS
19397: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_VAR 0 2
19407: PPUSH
19408: CALL 34306 0 2
// end ;
19412: PPOPN 2
19414: END
// on SailEvent ( event ) do begin if event = eventAttack then
19415: LD_VAR 0 1
19419: PUSH
19420: LD_EXP 24
19424: EQUAL
19425: IFFALSE 19431
// AmericanAttack ;
19427: CALL 6787 0 0
// end ; end_of_file
19431: PPOPN 1
19433: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19434: LD_OWVAR 1
19438: PUSH
19439: LD_INT 10500
19441: PUSH
19442: LD_INT 9800
19444: PUSH
19445: LD_INT 9450
19447: PUSH
19448: LD_INT 9100
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: LD_OWVAR 67
19461: ARRAY
19462: LESSEQUAL
19463: IFFALSE 19490
19465: GO 19467
19467: DISABLE
// begin enable ;
19468: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19469: LD_INT 1
19471: PPUSH
19472: LD_INT 5
19474: PPUSH
19475: CALL_OW 12
19479: PPUSH
19480: LD_INT 9
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 55
// end ;
19490: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19491: LD_EXP 6
19495: PUSH
19496: LD_OWVAR 1
19500: PUSH
19501: LD_INT 94500
19503: LESSEQUAL
19504: AND
19505: IFFALSE 19532
19507: GO 19509
19509: DISABLE
// begin enable ;
19510: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19511: LD_INT 3
19513: PPUSH
19514: LD_INT 5
19516: PPUSH
19517: CALL_OW 12
19521: PPUSH
19522: LD_INT 9
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 55
// end ; end_of_file
19532: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19533: LD_EXP 11
19537: NOT
19538: PUSH
19539: LD_EXP 16
19543: AND
19544: PUSH
19545: LD_EXP 4
19549: AND
19550: PUSH
19551: LD_EXP 15
19555: PUSH
19556: LD_EXP 16
19560: LESSEQUAL
19561: AND
19562: IFFALSE 19673
19564: GO 19566
19566: DISABLE
// begin enable ;
19567: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19568: LD_ADDR_OWVAR 47
19572: PUSH
19573: LD_STRING #X103-1
19575: PUSH
19576: LD_EXP 16
19580: PUSH
19581: LD_EXP 15
19585: MINUS
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19591: LD_ADDR_EXP 15
19595: PUSH
19596: LD_INT 5
19598: PPUSH
19599: CALL_OW 274
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: CALL_OW 275
19611: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19612: LD_INT 10
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 287
19622: PUSH
19623: LD_INT 0
19625: EQUAL
19626: IFFALSE 19644
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19628: LD_ADDR_EXP 17
19632: PUSH
19633: LD_EXP 17
19637: PUSH
19638: LD_INT 35
19640: MINUS
19641: ST_TO_ADDR
19642: GO 19673
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19644: LD_ADDR_EXP 17
19648: PUSH
19649: LD_INT 42000
19651: PUSH
19652: LD_INT 31500
19654: PUSH
19655: LD_INT 25200
19657: PUSH
19658: LD_INT 21000
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: LD_OWVAR 67
19671: ARRAY
19672: ST_TO_ADDR
// end ; end_of_file
19673: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19674: LD_INT 0
19676: PPUSH
// ar_miner := 81 ;
19677: LD_ADDR_EXP 55
19681: PUSH
19682: LD_INT 81
19684: ST_TO_ADDR
// ar_crane := 88 ;
19685: LD_ADDR_EXP 54
19689: PUSH
19690: LD_INT 88
19692: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19693: LD_ADDR_EXP 49
19697: PUSH
19698: LD_INT 89
19700: ST_TO_ADDR
// us_hack := 99 ;
19701: LD_ADDR_EXP 50
19705: PUSH
19706: LD_INT 99
19708: ST_TO_ADDR
// us_artillery := 97 ;
19709: LD_ADDR_EXP 51
19713: PUSH
19714: LD_INT 97
19716: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19717: LD_ADDR_EXP 52
19721: PUSH
19722: LD_INT 91
19724: ST_TO_ADDR
// ar_mortar := 92 ;
19725: LD_ADDR_EXP 53
19729: PUSH
19730: LD_INT 92
19732: ST_TO_ADDR
// ru_flamethrower := 93 ;
19733: LD_ADDR_EXP 56
19737: PUSH
19738: LD_INT 93
19740: ST_TO_ADDR
// ru_radar := 98 ;
19741: LD_ADDR_EXP 48
19745: PUSH
19746: LD_INT 98
19748: ST_TO_ADDR
// tech_Artillery := 80 ;
19749: LD_ADDR_EXP 57
19753: PUSH
19754: LD_INT 80
19756: ST_TO_ADDR
// tech_RadMat := 81 ;
19757: LD_ADDR_EXP 58
19761: PUSH
19762: LD_INT 81
19764: ST_TO_ADDR
// tech_BasicTools := 82 ;
19765: LD_ADDR_EXP 59
19769: PUSH
19770: LD_INT 82
19772: ST_TO_ADDR
// tech_Cargo := 83 ;
19773: LD_ADDR_EXP 60
19777: PUSH
19778: LD_INT 83
19780: ST_TO_ADDR
// tech_Track := 84 ;
19781: LD_ADDR_EXP 61
19785: PUSH
19786: LD_INT 84
19788: ST_TO_ADDR
// tech_Crane := 85 ;
19789: LD_ADDR_EXP 62
19793: PUSH
19794: LD_INT 85
19796: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19797: LD_ADDR_EXP 63
19801: PUSH
19802: LD_INT 86
19804: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19805: LD_ADDR_EXP 64
19809: PUSH
19810: LD_INT 87
19812: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19813: LD_ADDR_EXP 65
19817: PUSH
19818: LD_INT 88
19820: ST_TO_ADDR
// class_mastodont := 31 ;
19821: LD_ADDR_EXP 66
19825: PUSH
19826: LD_INT 31
19828: ST_TO_ADDR
// class_horse := 21 ;
19829: LD_ADDR_EXP 67
19833: PUSH
19834: LD_INT 21
19836: ST_TO_ADDR
// end ;
19837: LD_VAR 0 1
19841: RET
// every 1 do
19842: GO 19844
19844: DISABLE
// InitGlobalVariables ; end_of_file
19845: CALL 19674 0 0
19849: END
// every 0 0$1 do
19850: GO 19852
19852: DISABLE
// begin enable ;
19853: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19854: LD_STRING updateTimer(
19856: PUSH
19857: LD_OWVAR 1
19861: STR
19862: PUSH
19863: LD_STRING );
19865: STR
19866: PPUSH
19867: CALL_OW 559
// end ;
19871: END
// export function SOS_MapStart ( ) ; begin
19872: LD_INT 0
19874: PPUSH
// if streamModeActive then
19875: LD_EXP 68
19879: IFFALSE 19888
// DefineStreamItems ( true ) ;
19881: LD_INT 1
19883: PPUSH
19884: CALL 21538 0 1
// UpdateFactoryWaypoints ( ) ;
19888: CALL 35122 0 0
// end ;
19892: LD_VAR 0 1
19896: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19897: LD_INT 0
19899: PPUSH
// if p2 = 100 then
19900: LD_VAR 0 2
19904: PUSH
19905: LD_INT 100
19907: EQUAL
19908: IFFALSE 20911
// begin if not StreamModeActive then
19910: LD_EXP 68
19914: NOT
19915: IFFALSE 19925
// StreamModeActive := true ;
19917: LD_ADDR_EXP 68
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// if p3 = 0 then
19925: LD_VAR 0 3
19929: PUSH
19930: LD_INT 0
19932: EQUAL
19933: IFFALSE 19939
// InitStreamMode ;
19935: CALL 21074 0 0
// if p3 = 1 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 1
19946: EQUAL
19947: IFFALSE 19957
// sRocket := true ;
19949: LD_ADDR_EXP 73
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 2 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 2
19964: EQUAL
19965: IFFALSE 19975
// sSpeed := true ;
19967: LD_ADDR_EXP 72
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 3 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 3
19982: EQUAL
19983: IFFALSE 19993
// sEngine := true ;
19985: LD_ADDR_EXP 74
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 4 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 4
20000: EQUAL
20001: IFFALSE 20011
// sSpec := true ;
20003: LD_ADDR_EXP 71
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 5 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 5
20018: EQUAL
20019: IFFALSE 20029
// sLevel := true ;
20021: LD_ADDR_EXP 75
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 6 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 6
20036: EQUAL
20037: IFFALSE 20047
// sArmoury := true ;
20039: LD_ADDR_EXP 76
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 7 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 7
20054: EQUAL
20055: IFFALSE 20065
// sRadar := true ;
20057: LD_ADDR_EXP 77
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 8 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 8
20072: EQUAL
20073: IFFALSE 20083
// sBunker := true ;
20075: LD_ADDR_EXP 78
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 9 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 9
20090: EQUAL
20091: IFFALSE 20101
// sHack := true ;
20093: LD_ADDR_EXP 79
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 10 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 10
20108: EQUAL
20109: IFFALSE 20119
// sFire := true ;
20111: LD_ADDR_EXP 80
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 11 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 11
20126: EQUAL
20127: IFFALSE 20137
// sRefresh := true ;
20129: LD_ADDR_EXP 81
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 12 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 12
20144: EQUAL
20145: IFFALSE 20155
// sExp := true ;
20147: LD_ADDR_EXP 82
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 13 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 13
20162: EQUAL
20163: IFFALSE 20173
// sDepot := true ;
20165: LD_ADDR_EXP 83
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 14 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 14
20180: EQUAL
20181: IFFALSE 20191
// sFlag := true ;
20183: LD_ADDR_EXP 84
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 15 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 15
20198: EQUAL
20199: IFFALSE 20209
// sKamikadze := true ;
20201: LD_ADDR_EXP 92
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 16 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 16
20216: EQUAL
20217: IFFALSE 20227
// sTroll := true ;
20219: LD_ADDR_EXP 93
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 17 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 17
20234: EQUAL
20235: IFFALSE 20245
// sSlow := true ;
20237: LD_ADDR_EXP 94
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 18 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 18
20252: EQUAL
20253: IFFALSE 20263
// sLack := true ;
20255: LD_ADDR_EXP 95
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 19 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 19
20270: EQUAL
20271: IFFALSE 20281
// sTank := true ;
20273: LD_ADDR_EXP 97
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 20 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 20
20288: EQUAL
20289: IFFALSE 20299
// sRemote := true ;
20291: LD_ADDR_EXP 98
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 21 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 21
20306: EQUAL
20307: IFFALSE 20317
// sPowell := true ;
20309: LD_ADDR_EXP 99
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 22 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 22
20324: EQUAL
20325: IFFALSE 20335
// sTeleport := true ;
20327: LD_ADDR_EXP 102
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 23 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 23
20342: EQUAL
20343: IFFALSE 20353
// sOilTower := true ;
20345: LD_ADDR_EXP 104
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 24 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 24
20360: EQUAL
20361: IFFALSE 20371
// sShovel := true ;
20363: LD_ADDR_EXP 105
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 25 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 25
20378: EQUAL
20379: IFFALSE 20389
// sSheik := true ;
20381: LD_ADDR_EXP 106
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 26 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 26
20396: EQUAL
20397: IFFALSE 20407
// sEarthquake := true ;
20399: LD_ADDR_EXP 108
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 27 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 27
20414: EQUAL
20415: IFFALSE 20425
// sAI := true ;
20417: LD_ADDR_EXP 109
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 28 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 28
20432: EQUAL
20433: IFFALSE 20443
// sCargo := true ;
20435: LD_ADDR_EXP 112
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 29 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 29
20450: EQUAL
20451: IFFALSE 20461
// sDLaser := true ;
20453: LD_ADDR_EXP 113
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 30 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 30
20468: EQUAL
20469: IFFALSE 20479
// sExchange := true ;
20471: LD_ADDR_EXP 114
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 31 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 31
20486: EQUAL
20487: IFFALSE 20497
// sFac := true ;
20489: LD_ADDR_EXP 115
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 32 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 32
20504: EQUAL
20505: IFFALSE 20515
// sPower := true ;
20507: LD_ADDR_EXP 116
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 33 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 33
20522: EQUAL
20523: IFFALSE 20533
// sRandom := true ;
20525: LD_ADDR_EXP 117
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 34 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 34
20540: EQUAL
20541: IFFALSE 20551
// sShield := true ;
20543: LD_ADDR_EXP 118
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 35 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 35
20558: EQUAL
20559: IFFALSE 20569
// sTime := true ;
20561: LD_ADDR_EXP 119
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 36 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 36
20576: EQUAL
20577: IFFALSE 20587
// sTools := true ;
20579: LD_ADDR_EXP 120
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 101 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 101
20594: EQUAL
20595: IFFALSE 20605
// sSold := true ;
20597: LD_ADDR_EXP 85
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 102 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 102
20612: EQUAL
20613: IFFALSE 20623
// sDiff := true ;
20615: LD_ADDR_EXP 86
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 103 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 103
20630: EQUAL
20631: IFFALSE 20641
// sFog := true ;
20633: LD_ADDR_EXP 89
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 104 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 104
20648: EQUAL
20649: IFFALSE 20659
// sReset := true ;
20651: LD_ADDR_EXP 90
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 105 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 105
20666: EQUAL
20667: IFFALSE 20677
// sSun := true ;
20669: LD_ADDR_EXP 91
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if p3 = 106 then
20677: LD_VAR 0 3
20681: PUSH
20682: LD_INT 106
20684: EQUAL
20685: IFFALSE 20695
// sTiger := true ;
20687: LD_ADDR_EXP 87
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if p3 = 107 then
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 107
20702: EQUAL
20703: IFFALSE 20713
// sBomb := true ;
20705: LD_ADDR_EXP 88
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// if p3 = 108 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 108
20720: EQUAL
20721: IFFALSE 20731
// sWound := true ;
20723: LD_ADDR_EXP 96
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// if p3 = 109 then
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 109
20738: EQUAL
20739: IFFALSE 20749
// sBetray := true ;
20741: LD_ADDR_EXP 100
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 110 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 110
20756: EQUAL
20757: IFFALSE 20767
// sContamin := true ;
20759: LD_ADDR_EXP 101
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// if p3 = 111 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 111
20774: EQUAL
20775: IFFALSE 20785
// sOil := true ;
20777: LD_ADDR_EXP 103
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// if p3 = 112 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 112
20792: EQUAL
20793: IFFALSE 20803
// sStu := true ;
20795: LD_ADDR_EXP 107
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if p3 = 113 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 113
20810: EQUAL
20811: IFFALSE 20821
// sBazooka := true ;
20813: LD_ADDR_EXP 110
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if p3 = 114 then
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 114
20828: EQUAL
20829: IFFALSE 20839
// sMortar := true ;
20831: LD_ADDR_EXP 111
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if p3 = 115 then
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 115
20846: EQUAL
20847: IFFALSE 20857
// sRanger := true ;
20849: LD_ADDR_EXP 121
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// if p3 = 116 then
20857: LD_VAR 0 3
20861: PUSH
20862: LD_INT 116
20864: EQUAL
20865: IFFALSE 20875
// sComputer := true ;
20867: LD_ADDR_EXP 122
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// if p3 = 117 then
20875: LD_VAR 0 3
20879: PUSH
20880: LD_INT 117
20882: EQUAL
20883: IFFALSE 20893
// s30 := true ;
20885: LD_ADDR_EXP 123
20889: PUSH
20890: LD_INT 1
20892: ST_TO_ADDR
// if p3 = 118 then
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 118
20900: EQUAL
20901: IFFALSE 20911
// s60 := true ;
20903: LD_ADDR_EXP 124
20907: PUSH
20908: LD_INT 1
20910: ST_TO_ADDR
// end ; if p2 = 101 then
20911: LD_VAR 0 2
20915: PUSH
20916: LD_INT 101
20918: EQUAL
20919: IFFALSE 21047
// begin case p3 of 1 :
20921: LD_VAR 0 3
20925: PUSH
20926: LD_INT 1
20928: DOUBLE
20929: EQUAL
20930: IFTRUE 20934
20932: GO 20941
20934: POP
// hHackUnlimitedResources ; 2 :
20935: CALL 33145 0 0
20939: GO 21047
20941: LD_INT 2
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 20956
20949: POP
// hHackSetLevel10 ; 3 :
20950: CALL 33278 0 0
20954: GO 21047
20956: LD_INT 3
20958: DOUBLE
20959: EQUAL
20960: IFTRUE 20964
20962: GO 20971
20964: POP
// hHackSetLevel10YourUnits ; 4 :
20965: CALL 33363 0 0
20969: GO 21047
20971: LD_INT 4
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 20986
20979: POP
// hHackInvincible ; 5 :
20980: CALL 33811 0 0
20984: GO 21047
20986: LD_INT 5
20988: DOUBLE
20989: EQUAL
20990: IFTRUE 20994
20992: GO 21001
20994: POP
// hHackInvisible ; 6 :
20995: CALL 33922 0 0
20999: GO 21047
21001: LD_INT 6
21003: DOUBLE
21004: EQUAL
21005: IFTRUE 21009
21007: GO 21016
21009: POP
// hHackChangeYourSide ; 7 :
21010: CALL 33979 0 0
21014: GO 21047
21016: LD_INT 7
21018: DOUBLE
21019: EQUAL
21020: IFTRUE 21024
21022: GO 21031
21024: POP
// hHackChangeUnitSide ; 8 :
21025: CALL 34021 0 0
21029: GO 21047
21031: LD_INT 8
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21046
21039: POP
// hHackFog ; end ;
21040: CALL 34122 0 0
21044: GO 21047
21046: POP
// end ; end ;
21047: LD_VAR 0 7
21051: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21052: GO 21054
21054: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21055: LD_STRING initStreamRollete();
21057: PPUSH
21058: CALL_OW 559
// InitStreamMode ;
21062: CALL 21074 0 0
// DefineStreamItems ( false ) ;
21066: LD_INT 0
21068: PPUSH
21069: CALL 21538 0 1
// end ;
21073: END
// function InitStreamMode ; begin
21074: LD_INT 0
21076: PPUSH
// streamModeActive := false ;
21077: LD_ADDR_EXP 68
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// normalCounter := 36 ;
21085: LD_ADDR_EXP 69
21089: PUSH
21090: LD_INT 36
21092: ST_TO_ADDR
// hardcoreCounter := 18 ;
21093: LD_ADDR_EXP 70
21097: PUSH
21098: LD_INT 18
21100: ST_TO_ADDR
// sRocket := false ;
21101: LD_ADDR_EXP 73
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sSpeed := false ;
21109: LD_ADDR_EXP 72
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sEngine := false ;
21117: LD_ADDR_EXP 74
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sSpec := false ;
21125: LD_ADDR_EXP 71
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sLevel := false ;
21133: LD_ADDR_EXP 75
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sArmoury := false ;
21141: LD_ADDR_EXP 76
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sRadar := false ;
21149: LD_ADDR_EXP 77
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sBunker := false ;
21157: LD_ADDR_EXP 78
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sHack := false ;
21165: LD_ADDR_EXP 79
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sFire := false ;
21173: LD_ADDR_EXP 80
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sRefresh := false ;
21181: LD_ADDR_EXP 81
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sExp := false ;
21189: LD_ADDR_EXP 82
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sDepot := false ;
21197: LD_ADDR_EXP 83
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sFlag := false ;
21205: LD_ADDR_EXP 84
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sKamikadze := false ;
21213: LD_ADDR_EXP 92
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sTroll := false ;
21221: LD_ADDR_EXP 93
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sSlow := false ;
21229: LD_ADDR_EXP 94
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sLack := false ;
21237: LD_ADDR_EXP 95
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sTank := false ;
21245: LD_ADDR_EXP 97
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sRemote := false ;
21253: LD_ADDR_EXP 98
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sPowell := false ;
21261: LD_ADDR_EXP 99
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sTeleport := false ;
21269: LD_ADDR_EXP 102
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sOilTower := false ;
21277: LD_ADDR_EXP 104
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sShovel := false ;
21285: LD_ADDR_EXP 105
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sSheik := false ;
21293: LD_ADDR_EXP 106
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sEarthquake := false ;
21301: LD_ADDR_EXP 108
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sAI := false ;
21309: LD_ADDR_EXP 109
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sCargo := false ;
21317: LD_ADDR_EXP 112
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sDLaser := false ;
21325: LD_ADDR_EXP 113
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sExchange := false ;
21333: LD_ADDR_EXP 114
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sFac := false ;
21341: LD_ADDR_EXP 115
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sPower := false ;
21349: LD_ADDR_EXP 116
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sRandom := false ;
21357: LD_ADDR_EXP 117
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sShield := false ;
21365: LD_ADDR_EXP 118
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sTime := false ;
21373: LD_ADDR_EXP 119
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sTools := false ;
21381: LD_ADDR_EXP 120
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sSold := false ;
21389: LD_ADDR_EXP 85
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sDiff := false ;
21397: LD_ADDR_EXP 86
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sFog := false ;
21405: LD_ADDR_EXP 89
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sReset := false ;
21413: LD_ADDR_EXP 90
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sSun := false ;
21421: LD_ADDR_EXP 91
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sTiger := false ;
21429: LD_ADDR_EXP 87
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sBomb := false ;
21437: LD_ADDR_EXP 88
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sWound := false ;
21445: LD_ADDR_EXP 96
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sBetray := false ;
21453: LD_ADDR_EXP 100
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sContamin := false ;
21461: LD_ADDR_EXP 101
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sOil := false ;
21469: LD_ADDR_EXP 103
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sStu := false ;
21477: LD_ADDR_EXP 107
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sBazooka := false ;
21485: LD_ADDR_EXP 110
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sMortar := false ;
21493: LD_ADDR_EXP 111
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sRanger := false ;
21501: LD_ADDR_EXP 121
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sComputer := false ;
21509: LD_ADDR_EXP 122
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// s30 := false ;
21517: LD_ADDR_EXP 123
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// s60 := false ;
21525: LD_ADDR_EXP 124
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// end ;
21533: LD_VAR 0 1
21537: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
// result := [ ] ;
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: EMPTY
21553: ST_TO_ADDR
// if campaign_id = 1 then
21554: LD_OWVAR 69
21558: PUSH
21559: LD_INT 1
21561: EQUAL
21562: IFFALSE 24728
// begin case mission_number of 1 :
21564: LD_OWVAR 70
21568: PUSH
21569: LD_INT 1
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21653
21577: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 4
21588: PUSH
21589: LD_INT 11
21591: PUSH
21592: LD_INT 12
21594: PUSH
21595: LD_INT 15
21597: PUSH
21598: LD_INT 16
21600: PUSH
21601: LD_INT 22
21603: PUSH
21604: LD_INT 23
21606: PUSH
21607: LD_INT 26
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 101
21623: PUSH
21624: LD_INT 102
21626: PUSH
21627: LD_INT 106
21629: PUSH
21630: LD_INT 116
21632: PUSH
21633: LD_INT 117
21635: PUSH
21636: LD_INT 118
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: ST_TO_ADDR
21651: GO 24726
21653: LD_INT 2
21655: DOUBLE
21656: EQUAL
21657: IFTRUE 21661
21659: GO 21745
21661: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 2
21669: PUSH
21670: LD_INT 4
21672: PUSH
21673: LD_INT 11
21675: PUSH
21676: LD_INT 12
21678: PUSH
21679: LD_INT 15
21681: PUSH
21682: LD_INT 16
21684: PUSH
21685: LD_INT 22
21687: PUSH
21688: LD_INT 23
21690: PUSH
21691: LD_INT 26
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 101
21707: PUSH
21708: LD_INT 102
21710: PUSH
21711: LD_INT 105
21713: PUSH
21714: LD_INT 106
21716: PUSH
21717: LD_INT 108
21719: PUSH
21720: LD_INT 116
21722: PUSH
21723: LD_INT 117
21725: PUSH
21726: LD_INT 118
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: ST_TO_ADDR
21743: GO 24726
21745: LD_INT 3
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21841
21753: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21754: LD_ADDR_VAR 0 2
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 4
21764: PUSH
21765: LD_INT 5
21767: PUSH
21768: LD_INT 11
21770: PUSH
21771: LD_INT 12
21773: PUSH
21774: LD_INT 15
21776: PUSH
21777: LD_INT 16
21779: PUSH
21780: LD_INT 22
21782: PUSH
21783: LD_INT 26
21785: PUSH
21786: LD_INT 36
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 101
21803: PUSH
21804: LD_INT 102
21806: PUSH
21807: LD_INT 105
21809: PUSH
21810: LD_INT 106
21812: PUSH
21813: LD_INT 108
21815: PUSH
21816: LD_INT 116
21818: PUSH
21819: LD_INT 117
21821: PUSH
21822: LD_INT 118
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: ST_TO_ADDR
21839: GO 24726
21841: LD_INT 4
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21945
21849: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21850: LD_ADDR_VAR 0 2
21854: PUSH
21855: LD_INT 2
21857: PUSH
21858: LD_INT 4
21860: PUSH
21861: LD_INT 5
21863: PUSH
21864: LD_INT 8
21866: PUSH
21867: LD_INT 11
21869: PUSH
21870: LD_INT 12
21872: PUSH
21873: LD_INT 15
21875: PUSH
21876: LD_INT 16
21878: PUSH
21879: LD_INT 22
21881: PUSH
21882: LD_INT 23
21884: PUSH
21885: LD_INT 26
21887: PUSH
21888: LD_INT 36
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 101
21907: PUSH
21908: LD_INT 102
21910: PUSH
21911: LD_INT 105
21913: PUSH
21914: LD_INT 106
21916: PUSH
21917: LD_INT 108
21919: PUSH
21920: LD_INT 116
21922: PUSH
21923: LD_INT 117
21925: PUSH
21926: LD_INT 118
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: ST_TO_ADDR
21943: GO 24726
21945: LD_INT 5
21947: DOUBLE
21948: EQUAL
21949: IFTRUE 21953
21951: GO 22065
21953: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21954: LD_ADDR_VAR 0 2
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 4
21964: PUSH
21965: LD_INT 5
21967: PUSH
21968: LD_INT 6
21970: PUSH
21971: LD_INT 8
21973: PUSH
21974: LD_INT 11
21976: PUSH
21977: LD_INT 12
21979: PUSH
21980: LD_INT 15
21982: PUSH
21983: LD_INT 16
21985: PUSH
21986: LD_INT 22
21988: PUSH
21989: LD_INT 23
21991: PUSH
21992: LD_INT 25
21994: PUSH
21995: LD_INT 26
21997: PUSH
21998: LD_INT 36
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 105
22025: PUSH
22026: LD_INT 106
22028: PUSH
22029: LD_INT 108
22031: PUSH
22032: LD_INT 109
22034: PUSH
22035: LD_INT 112
22037: PUSH
22038: LD_INT 116
22040: PUSH
22041: LD_INT 117
22043: PUSH
22044: LD_INT 118
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: ST_TO_ADDR
22063: GO 24726
22065: LD_INT 6
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22205
22073: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 4
22084: PUSH
22085: LD_INT 5
22087: PUSH
22088: LD_INT 6
22090: PUSH
22091: LD_INT 8
22093: PUSH
22094: LD_INT 11
22096: PUSH
22097: LD_INT 12
22099: PUSH
22100: LD_INT 15
22102: PUSH
22103: LD_INT 16
22105: PUSH
22106: LD_INT 20
22108: PUSH
22109: LD_INT 21
22111: PUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 23
22117: PUSH
22118: LD_INT 25
22120: PUSH
22121: LD_INT 26
22123: PUSH
22124: LD_INT 30
22126: PUSH
22127: LD_INT 31
22129: PUSH
22130: LD_INT 32
22132: PUSH
22133: LD_INT 36
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 101
22159: PUSH
22160: LD_INT 102
22162: PUSH
22163: LD_INT 105
22165: PUSH
22166: LD_INT 106
22168: PUSH
22169: LD_INT 108
22171: PUSH
22172: LD_INT 109
22174: PUSH
22175: LD_INT 112
22177: PUSH
22178: LD_INT 116
22180: PUSH
22181: LD_INT 117
22183: PUSH
22184: LD_INT 118
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: ST_TO_ADDR
22203: GO 24726
22205: LD_INT 7
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22325
22213: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22214: LD_ADDR_VAR 0 2
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: LD_INT 4
22224: PUSH
22225: LD_INT 5
22227: PUSH
22228: LD_INT 7
22230: PUSH
22231: LD_INT 11
22233: PUSH
22234: LD_INT 12
22236: PUSH
22237: LD_INT 15
22239: PUSH
22240: LD_INT 16
22242: PUSH
22243: LD_INT 20
22245: PUSH
22246: LD_INT 21
22248: PUSH
22249: LD_INT 22
22251: PUSH
22252: LD_INT 23
22254: PUSH
22255: LD_INT 25
22257: PUSH
22258: LD_INT 26
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 101
22279: PUSH
22280: LD_INT 102
22282: PUSH
22283: LD_INT 103
22285: PUSH
22286: LD_INT 105
22288: PUSH
22289: LD_INT 106
22291: PUSH
22292: LD_INT 108
22294: PUSH
22295: LD_INT 112
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: ST_TO_ADDR
22323: GO 24726
22325: LD_INT 8
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22473
22333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: LD_INT 6
22350: PUSH
22351: LD_INT 7
22353: PUSH
22354: LD_INT 8
22356: PUSH
22357: LD_INT 11
22359: PUSH
22360: LD_INT 12
22362: PUSH
22363: LD_INT 15
22365: PUSH
22366: LD_INT 16
22368: PUSH
22369: LD_INT 20
22371: PUSH
22372: LD_INT 21
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_INT 23
22380: PUSH
22381: LD_INT 25
22383: PUSH
22384: LD_INT 26
22386: PUSH
22387: LD_INT 30
22389: PUSH
22390: LD_INT 31
22392: PUSH
22393: LD_INT 32
22395: PUSH
22396: LD_INT 36
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 101
22423: PUSH
22424: LD_INT 102
22426: PUSH
22427: LD_INT 103
22429: PUSH
22430: LD_INT 105
22432: PUSH
22433: LD_INT 106
22435: PUSH
22436: LD_INT 108
22438: PUSH
22439: LD_INT 109
22441: PUSH
22442: LD_INT 112
22444: PUSH
22445: LD_INT 116
22447: PUSH
22448: LD_INT 117
22450: PUSH
22451: LD_INT 118
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: ST_TO_ADDR
22471: GO 24726
22473: LD_INT 9
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22629
22481: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22482: LD_ADDR_VAR 0 2
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 4
22492: PUSH
22493: LD_INT 5
22495: PUSH
22496: LD_INT 6
22498: PUSH
22499: LD_INT 7
22501: PUSH
22502: LD_INT 8
22504: PUSH
22505: LD_INT 11
22507: PUSH
22508: LD_INT 12
22510: PUSH
22511: LD_INT 15
22513: PUSH
22514: LD_INT 16
22516: PUSH
22517: LD_INT 20
22519: PUSH
22520: LD_INT 21
22522: PUSH
22523: LD_INT 22
22525: PUSH
22526: LD_INT 23
22528: PUSH
22529: LD_INT 25
22531: PUSH
22532: LD_INT 26
22534: PUSH
22535: LD_INT 28
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 31
22543: PUSH
22544: LD_INT 32
22546: PUSH
22547: LD_INT 36
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 101
22575: PUSH
22576: LD_INT 102
22578: PUSH
22579: LD_INT 103
22581: PUSH
22582: LD_INT 105
22584: PUSH
22585: LD_INT 106
22587: PUSH
22588: LD_INT 108
22590: PUSH
22591: LD_INT 109
22593: PUSH
22594: LD_INT 112
22596: PUSH
22597: LD_INT 114
22599: PUSH
22600: LD_INT 116
22602: PUSH
22603: LD_INT 117
22605: PUSH
22606: LD_INT 118
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: ST_TO_ADDR
22627: GO 24726
22629: LD_INT 10
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22833
22637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22638: LD_ADDR_VAR 0 2
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: LD_INT 6
22654: PUSH
22655: LD_INT 7
22657: PUSH
22658: LD_INT 8
22660: PUSH
22661: LD_INT 9
22663: PUSH
22664: LD_INT 10
22666: PUSH
22667: LD_INT 11
22669: PUSH
22670: LD_INT 12
22672: PUSH
22673: LD_INT 13
22675: PUSH
22676: LD_INT 14
22678: PUSH
22679: LD_INT 15
22681: PUSH
22682: LD_INT 16
22684: PUSH
22685: LD_INT 17
22687: PUSH
22688: LD_INT 18
22690: PUSH
22691: LD_INT 19
22693: PUSH
22694: LD_INT 20
22696: PUSH
22697: LD_INT 21
22699: PUSH
22700: LD_INT 22
22702: PUSH
22703: LD_INT 23
22705: PUSH
22706: LD_INT 24
22708: PUSH
22709: LD_INT 25
22711: PUSH
22712: LD_INT 26
22714: PUSH
22715: LD_INT 28
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 31
22723: PUSH
22724: LD_INT 32
22726: PUSH
22727: LD_INT 36
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 101
22763: PUSH
22764: LD_INT 102
22766: PUSH
22767: LD_INT 103
22769: PUSH
22770: LD_INT 104
22772: PUSH
22773: LD_INT 105
22775: PUSH
22776: LD_INT 106
22778: PUSH
22779: LD_INT 107
22781: PUSH
22782: LD_INT 108
22784: PUSH
22785: LD_INT 109
22787: PUSH
22788: LD_INT 110
22790: PUSH
22791: LD_INT 111
22793: PUSH
22794: LD_INT 112
22796: PUSH
22797: LD_INT 114
22799: PUSH
22800: LD_INT 116
22802: PUSH
22803: LD_INT 117
22805: PUSH
22806: LD_INT 118
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: ST_TO_ADDR
22831: GO 24726
22833: LD_INT 11
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 23045
22841: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22842: LD_ADDR_VAR 0 2
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: LD_INT 4
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: LD_INT 6
22861: PUSH
22862: LD_INT 7
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: LD_INT 9
22870: PUSH
22871: LD_INT 10
22873: PUSH
22874: LD_INT 11
22876: PUSH
22877: LD_INT 12
22879: PUSH
22880: LD_INT 13
22882: PUSH
22883: LD_INT 14
22885: PUSH
22886: LD_INT 15
22888: PUSH
22889: LD_INT 16
22891: PUSH
22892: LD_INT 17
22894: PUSH
22895: LD_INT 18
22897: PUSH
22898: LD_INT 19
22900: PUSH
22901: LD_INT 20
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 23
22912: PUSH
22913: LD_INT 24
22915: PUSH
22916: LD_INT 25
22918: PUSH
22919: LD_INT 26
22921: PUSH
22922: LD_INT 28
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 31
22930: PUSH
22931: LD_INT 32
22933: PUSH
22934: LD_INT 34
22936: PUSH
22937: LD_INT 36
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 101
22975: PUSH
22976: LD_INT 102
22978: PUSH
22979: LD_INT 103
22981: PUSH
22982: LD_INT 104
22984: PUSH
22985: LD_INT 105
22987: PUSH
22988: LD_INT 106
22990: PUSH
22991: LD_INT 107
22993: PUSH
22994: LD_INT 108
22996: PUSH
22997: LD_INT 109
22999: PUSH
23000: LD_INT 110
23002: PUSH
23003: LD_INT 111
23005: PUSH
23006: LD_INT 112
23008: PUSH
23009: LD_INT 114
23011: PUSH
23012: LD_INT 116
23014: PUSH
23015: LD_INT 117
23017: PUSH
23018: LD_INT 118
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: ST_TO_ADDR
23043: GO 24726
23045: LD_INT 12
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23273
23053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23054: LD_ADDR_VAR 0 2
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: LD_INT 4
23070: PUSH
23071: LD_INT 5
23073: PUSH
23074: LD_INT 6
23076: PUSH
23077: LD_INT 7
23079: PUSH
23080: LD_INT 8
23082: PUSH
23083: LD_INT 9
23085: PUSH
23086: LD_INT 10
23088: PUSH
23089: LD_INT 11
23091: PUSH
23092: LD_INT 12
23094: PUSH
23095: LD_INT 13
23097: PUSH
23098: LD_INT 14
23100: PUSH
23101: LD_INT 15
23103: PUSH
23104: LD_INT 16
23106: PUSH
23107: LD_INT 17
23109: PUSH
23110: LD_INT 18
23112: PUSH
23113: LD_INT 19
23115: PUSH
23116: LD_INT 20
23118: PUSH
23119: LD_INT 21
23121: PUSH
23122: LD_INT 22
23124: PUSH
23125: LD_INT 23
23127: PUSH
23128: LD_INT 24
23130: PUSH
23131: LD_INT 25
23133: PUSH
23134: LD_INT 26
23136: PUSH
23137: LD_INT 27
23139: PUSH
23140: LD_INT 28
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 31
23148: PUSH
23149: LD_INT 32
23151: PUSH
23152: LD_INT 33
23154: PUSH
23155: LD_INT 34
23157: PUSH
23158: LD_INT 36
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 101
23199: PUSH
23200: LD_INT 102
23202: PUSH
23203: LD_INT 103
23205: PUSH
23206: LD_INT 104
23208: PUSH
23209: LD_INT 105
23211: PUSH
23212: LD_INT 106
23214: PUSH
23215: LD_INT 107
23217: PUSH
23218: LD_INT 108
23220: PUSH
23221: LD_INT 109
23223: PUSH
23224: LD_INT 110
23226: PUSH
23227: LD_INT 111
23229: PUSH
23230: LD_INT 112
23232: PUSH
23233: LD_INT 113
23235: PUSH
23236: LD_INT 114
23238: PUSH
23239: LD_INT 116
23241: PUSH
23242: LD_INT 117
23244: PUSH
23245: LD_INT 118
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: ST_TO_ADDR
23271: GO 24726
23273: LD_INT 13
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23489
23281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23282: LD_ADDR_VAR 0 2
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 4
23298: PUSH
23299: LD_INT 5
23301: PUSH
23302: LD_INT 8
23304: PUSH
23305: LD_INT 9
23307: PUSH
23308: LD_INT 10
23310: PUSH
23311: LD_INT 11
23313: PUSH
23314: LD_INT 12
23316: PUSH
23317: LD_INT 14
23319: PUSH
23320: LD_INT 15
23322: PUSH
23323: LD_INT 16
23325: PUSH
23326: LD_INT 17
23328: PUSH
23329: LD_INT 18
23331: PUSH
23332: LD_INT 19
23334: PUSH
23335: LD_INT 20
23337: PUSH
23338: LD_INT 21
23340: PUSH
23341: LD_INT 22
23343: PUSH
23344: LD_INT 23
23346: PUSH
23347: LD_INT 24
23349: PUSH
23350: LD_INT 25
23352: PUSH
23353: LD_INT 26
23355: PUSH
23356: LD_INT 27
23358: PUSH
23359: LD_INT 28
23361: PUSH
23362: LD_INT 30
23364: PUSH
23365: LD_INT 31
23367: PUSH
23368: LD_INT 32
23370: PUSH
23371: LD_INT 33
23373: PUSH
23374: LD_INT 34
23376: PUSH
23377: LD_INT 36
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 101
23415: PUSH
23416: LD_INT 102
23418: PUSH
23419: LD_INT 103
23421: PUSH
23422: LD_INT 104
23424: PUSH
23425: LD_INT 105
23427: PUSH
23428: LD_INT 106
23430: PUSH
23431: LD_INT 107
23433: PUSH
23434: LD_INT 108
23436: PUSH
23437: LD_INT 109
23439: PUSH
23440: LD_INT 110
23442: PUSH
23443: LD_INT 111
23445: PUSH
23446: LD_INT 112
23448: PUSH
23449: LD_INT 113
23451: PUSH
23452: LD_INT 114
23454: PUSH
23455: LD_INT 116
23457: PUSH
23458: LD_INT 117
23460: PUSH
23461: LD_INT 118
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: ST_TO_ADDR
23487: GO 24726
23489: LD_INT 14
23491: DOUBLE
23492: EQUAL
23493: IFTRUE 23497
23495: GO 23721
23497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: LD_INT 3
23511: PUSH
23512: LD_INT 4
23514: PUSH
23515: LD_INT 5
23517: PUSH
23518: LD_INT 6
23520: PUSH
23521: LD_INT 7
23523: PUSH
23524: LD_INT 8
23526: PUSH
23527: LD_INT 9
23529: PUSH
23530: LD_INT 10
23532: PUSH
23533: LD_INT 11
23535: PUSH
23536: LD_INT 12
23538: PUSH
23539: LD_INT 13
23541: PUSH
23542: LD_INT 14
23544: PUSH
23545: LD_INT 15
23547: PUSH
23548: LD_INT 16
23550: PUSH
23551: LD_INT 17
23553: PUSH
23554: LD_INT 18
23556: PUSH
23557: LD_INT 19
23559: PUSH
23560: LD_INT 20
23562: PUSH
23563: LD_INT 21
23565: PUSH
23566: LD_INT 22
23568: PUSH
23569: LD_INT 23
23571: PUSH
23572: LD_INT 24
23574: PUSH
23575: LD_INT 25
23577: PUSH
23578: LD_INT 26
23580: PUSH
23581: LD_INT 27
23583: PUSH
23584: LD_INT 28
23586: PUSH
23587: LD_INT 29
23589: PUSH
23590: LD_INT 30
23592: PUSH
23593: LD_INT 31
23595: PUSH
23596: LD_INT 32
23598: PUSH
23599: LD_INT 33
23601: PUSH
23602: LD_INT 34
23604: PUSH
23605: LD_INT 36
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 101
23647: PUSH
23648: LD_INT 102
23650: PUSH
23651: LD_INT 103
23653: PUSH
23654: LD_INT 104
23656: PUSH
23657: LD_INT 105
23659: PUSH
23660: LD_INT 106
23662: PUSH
23663: LD_INT 107
23665: PUSH
23666: LD_INT 108
23668: PUSH
23669: LD_INT 109
23671: PUSH
23672: LD_INT 110
23674: PUSH
23675: LD_INT 111
23677: PUSH
23678: LD_INT 112
23680: PUSH
23681: LD_INT 113
23683: PUSH
23684: LD_INT 114
23686: PUSH
23687: LD_INT 116
23689: PUSH
23690: LD_INT 117
23692: PUSH
23693: LD_INT 118
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: ST_TO_ADDR
23719: GO 24726
23721: LD_INT 15
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23953
23729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23730: LD_ADDR_VAR 0 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 3
23743: PUSH
23744: LD_INT 4
23746: PUSH
23747: LD_INT 5
23749: PUSH
23750: LD_INT 6
23752: PUSH
23753: LD_INT 7
23755: PUSH
23756: LD_INT 8
23758: PUSH
23759: LD_INT 9
23761: PUSH
23762: LD_INT 10
23764: PUSH
23765: LD_INT 11
23767: PUSH
23768: LD_INT 12
23770: PUSH
23771: LD_INT 13
23773: PUSH
23774: LD_INT 14
23776: PUSH
23777: LD_INT 15
23779: PUSH
23780: LD_INT 16
23782: PUSH
23783: LD_INT 17
23785: PUSH
23786: LD_INT 18
23788: PUSH
23789: LD_INT 19
23791: PUSH
23792: LD_INT 20
23794: PUSH
23795: LD_INT 21
23797: PUSH
23798: LD_INT 22
23800: PUSH
23801: LD_INT 23
23803: PUSH
23804: LD_INT 24
23806: PUSH
23807: LD_INT 25
23809: PUSH
23810: LD_INT 26
23812: PUSH
23813: LD_INT 27
23815: PUSH
23816: LD_INT 28
23818: PUSH
23819: LD_INT 29
23821: PUSH
23822: LD_INT 30
23824: PUSH
23825: LD_INT 31
23827: PUSH
23828: LD_INT 32
23830: PUSH
23831: LD_INT 33
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 36
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 101
23879: PUSH
23880: LD_INT 102
23882: PUSH
23883: LD_INT 103
23885: PUSH
23886: LD_INT 104
23888: PUSH
23889: LD_INT 105
23891: PUSH
23892: LD_INT 106
23894: PUSH
23895: LD_INT 107
23897: PUSH
23898: LD_INT 108
23900: PUSH
23901: LD_INT 109
23903: PUSH
23904: LD_INT 110
23906: PUSH
23907: LD_INT 111
23909: PUSH
23910: LD_INT 112
23912: PUSH
23913: LD_INT 113
23915: PUSH
23916: LD_INT 114
23918: PUSH
23919: LD_INT 116
23921: PUSH
23922: LD_INT 117
23924: PUSH
23925: LD_INT 118
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 24726
23953: LD_INT 16
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24097
23961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23962: LD_ADDR_VAR 0 2
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 4
23972: PUSH
23973: LD_INT 5
23975: PUSH
23976: LD_INT 7
23978: PUSH
23979: LD_INT 11
23981: PUSH
23982: LD_INT 12
23984: PUSH
23985: LD_INT 15
23987: PUSH
23988: LD_INT 16
23990: PUSH
23991: LD_INT 20
23993: PUSH
23994: LD_INT 21
23996: PUSH
23997: LD_INT 22
23999: PUSH
24000: LD_INT 23
24002: PUSH
24003: LD_INT 25
24005: PUSH
24006: LD_INT 26
24008: PUSH
24009: LD_INT 30
24011: PUSH
24012: LD_INT 31
24014: PUSH
24015: LD_INT 32
24017: PUSH
24018: LD_INT 33
24020: PUSH
24021: LD_INT 34
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 101
24047: PUSH
24048: LD_INT 102
24050: PUSH
24051: LD_INT 103
24053: PUSH
24054: LD_INT 106
24056: PUSH
24057: LD_INT 108
24059: PUSH
24060: LD_INT 112
24062: PUSH
24063: LD_INT 113
24065: PUSH
24066: LD_INT 114
24068: PUSH
24069: LD_INT 116
24071: PUSH
24072: LD_INT 117
24074: PUSH
24075: LD_INT 118
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: ST_TO_ADDR
24095: GO 24726
24097: LD_INT 17
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24329
24105: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 3
24119: PUSH
24120: LD_INT 4
24122: PUSH
24123: LD_INT 5
24125: PUSH
24126: LD_INT 6
24128: PUSH
24129: LD_INT 7
24131: PUSH
24132: LD_INT 8
24134: PUSH
24135: LD_INT 9
24137: PUSH
24138: LD_INT 10
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 12
24146: PUSH
24147: LD_INT 13
24149: PUSH
24150: LD_INT 14
24152: PUSH
24153: LD_INT 15
24155: PUSH
24156: LD_INT 16
24158: PUSH
24159: LD_INT 17
24161: PUSH
24162: LD_INT 18
24164: PUSH
24165: LD_INT 19
24167: PUSH
24168: LD_INT 20
24170: PUSH
24171: LD_INT 21
24173: PUSH
24174: LD_INT 22
24176: PUSH
24177: LD_INT 23
24179: PUSH
24180: LD_INT 24
24182: PUSH
24183: LD_INT 25
24185: PUSH
24186: LD_INT 26
24188: PUSH
24189: LD_INT 27
24191: PUSH
24192: LD_INT 28
24194: PUSH
24195: LD_INT 29
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 31
24203: PUSH
24204: LD_INT 32
24206: PUSH
24207: LD_INT 33
24209: PUSH
24210: LD_INT 34
24212: PUSH
24213: LD_INT 36
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 101
24255: PUSH
24256: LD_INT 102
24258: PUSH
24259: LD_INT 103
24261: PUSH
24262: LD_INT 104
24264: PUSH
24265: LD_INT 105
24267: PUSH
24268: LD_INT 106
24270: PUSH
24271: LD_INT 107
24273: PUSH
24274: LD_INT 108
24276: PUSH
24277: LD_INT 109
24279: PUSH
24280: LD_INT 110
24282: PUSH
24283: LD_INT 111
24285: PUSH
24286: LD_INT 112
24288: PUSH
24289: LD_INT 113
24291: PUSH
24292: LD_INT 114
24294: PUSH
24295: LD_INT 116
24297: PUSH
24298: LD_INT 117
24300: PUSH
24301: LD_INT 118
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: ST_TO_ADDR
24327: GO 24726
24329: LD_INT 18
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24485
24337: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24338: LD_ADDR_VAR 0 2
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 4
24348: PUSH
24349: LD_INT 5
24351: PUSH
24352: LD_INT 7
24354: PUSH
24355: LD_INT 11
24357: PUSH
24358: LD_INT 12
24360: PUSH
24361: LD_INT 15
24363: PUSH
24364: LD_INT 16
24366: PUSH
24367: LD_INT 20
24369: PUSH
24370: LD_INT 21
24372: PUSH
24373: LD_INT 22
24375: PUSH
24376: LD_INT 23
24378: PUSH
24379: LD_INT 25
24381: PUSH
24382: LD_INT 26
24384: PUSH
24385: LD_INT 30
24387: PUSH
24388: LD_INT 31
24390: PUSH
24391: LD_INT 32
24393: PUSH
24394: LD_INT 33
24396: PUSH
24397: LD_INT 34
24399: PUSH
24400: LD_INT 35
24402: PUSH
24403: LD_INT 36
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 101
24431: PUSH
24432: LD_INT 102
24434: PUSH
24435: LD_INT 103
24437: PUSH
24438: LD_INT 106
24440: PUSH
24441: LD_INT 108
24443: PUSH
24444: LD_INT 112
24446: PUSH
24447: LD_INT 113
24449: PUSH
24450: LD_INT 114
24452: PUSH
24453: LD_INT 115
24455: PUSH
24456: LD_INT 116
24458: PUSH
24459: LD_INT 117
24461: PUSH
24462: LD_INT 118
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: ST_TO_ADDR
24483: GO 24726
24485: LD_INT 19
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24725
24493: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24494: LD_ADDR_VAR 0 2
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 3
24507: PUSH
24508: LD_INT 4
24510: PUSH
24511: LD_INT 5
24513: PUSH
24514: LD_INT 6
24516: PUSH
24517: LD_INT 7
24519: PUSH
24520: LD_INT 8
24522: PUSH
24523: LD_INT 9
24525: PUSH
24526: LD_INT 10
24528: PUSH
24529: LD_INT 11
24531: PUSH
24532: LD_INT 12
24534: PUSH
24535: LD_INT 13
24537: PUSH
24538: LD_INT 14
24540: PUSH
24541: LD_INT 15
24543: PUSH
24544: LD_INT 16
24546: PUSH
24547: LD_INT 17
24549: PUSH
24550: LD_INT 18
24552: PUSH
24553: LD_INT 19
24555: PUSH
24556: LD_INT 20
24558: PUSH
24559: LD_INT 21
24561: PUSH
24562: LD_INT 22
24564: PUSH
24565: LD_INT 23
24567: PUSH
24568: LD_INT 24
24570: PUSH
24571: LD_INT 25
24573: PUSH
24574: LD_INT 26
24576: PUSH
24577: LD_INT 27
24579: PUSH
24580: LD_INT 28
24582: PUSH
24583: LD_INT 29
24585: PUSH
24586: LD_INT 30
24588: PUSH
24589: LD_INT 31
24591: PUSH
24592: LD_INT 32
24594: PUSH
24595: LD_INT 33
24597: PUSH
24598: LD_INT 34
24600: PUSH
24601: LD_INT 35
24603: PUSH
24604: LD_INT 36
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 101
24647: PUSH
24648: LD_INT 102
24650: PUSH
24651: LD_INT 103
24653: PUSH
24654: LD_INT 104
24656: PUSH
24657: LD_INT 105
24659: PUSH
24660: LD_INT 106
24662: PUSH
24663: LD_INT 107
24665: PUSH
24666: LD_INT 108
24668: PUSH
24669: LD_INT 109
24671: PUSH
24672: LD_INT 110
24674: PUSH
24675: LD_INT 111
24677: PUSH
24678: LD_INT 112
24680: PUSH
24681: LD_INT 113
24683: PUSH
24684: LD_INT 114
24686: PUSH
24687: LD_INT 115
24689: PUSH
24690: LD_INT 116
24692: PUSH
24693: LD_INT 117
24695: PUSH
24696: LD_INT 118
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: ST_TO_ADDR
24723: GO 24726
24725: POP
// end else
24726: GO 24957
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 4
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: LD_INT 6
24750: PUSH
24751: LD_INT 7
24753: PUSH
24754: LD_INT 8
24756: PUSH
24757: LD_INT 9
24759: PUSH
24760: LD_INT 10
24762: PUSH
24763: LD_INT 11
24765: PUSH
24766: LD_INT 12
24768: PUSH
24769: LD_INT 13
24771: PUSH
24772: LD_INT 14
24774: PUSH
24775: LD_INT 15
24777: PUSH
24778: LD_INT 16
24780: PUSH
24781: LD_INT 17
24783: PUSH
24784: LD_INT 18
24786: PUSH
24787: LD_INT 19
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 23
24801: PUSH
24802: LD_INT 24
24804: PUSH
24805: LD_INT 25
24807: PUSH
24808: LD_INT 26
24810: PUSH
24811: LD_INT 27
24813: PUSH
24814: LD_INT 28
24816: PUSH
24817: LD_INT 29
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 31
24825: PUSH
24826: LD_INT 32
24828: PUSH
24829: LD_INT 33
24831: PUSH
24832: LD_INT 34
24834: PUSH
24835: LD_INT 35
24837: PUSH
24838: LD_INT 36
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 101
24881: PUSH
24882: LD_INT 102
24884: PUSH
24885: LD_INT 103
24887: PUSH
24888: LD_INT 104
24890: PUSH
24891: LD_INT 105
24893: PUSH
24894: LD_INT 106
24896: PUSH
24897: LD_INT 107
24899: PUSH
24900: LD_INT 108
24902: PUSH
24903: LD_INT 109
24905: PUSH
24906: LD_INT 110
24908: PUSH
24909: LD_INT 111
24911: PUSH
24912: LD_INT 112
24914: PUSH
24915: LD_INT 113
24917: PUSH
24918: LD_INT 114
24920: PUSH
24921: LD_INT 115
24923: PUSH
24924: LD_INT 116
24926: PUSH
24927: LD_INT 117
24929: PUSH
24930: LD_INT 118
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: ST_TO_ADDR
// if result then
24957: LD_VAR 0 2
24961: IFFALSE 25747
// begin normal :=  ;
24963: LD_ADDR_VAR 0 5
24967: PUSH
24968: LD_STRING 
24970: ST_TO_ADDR
// hardcore :=  ;
24971: LD_ADDR_VAR 0 6
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// active :=  ;
24979: LD_ADDR_VAR 0 7
24983: PUSH
24984: LD_STRING 
24986: ST_TO_ADDR
// for i = 1 to normalCounter do
24987: LD_ADDR_VAR 0 8
24991: PUSH
24992: DOUBLE
24993: LD_INT 1
24995: DEC
24996: ST_TO_ADDR
24997: LD_EXP 69
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25104
// begin tmp := 0 ;
25005: LD_ADDR_VAR 0 3
25009: PUSH
25010: LD_STRING 0
25012: ST_TO_ADDR
// if result [ 1 ] then
25013: LD_VAR 0 2
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: IFFALSE 25086
// if result [ 1 ] [ 1 ] = i then
25023: LD_VAR 0 2
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PUSH
25036: LD_VAR 0 8
25040: EQUAL
25041: IFFALSE 25086
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25043: LD_ADDR_VAR 0 2
25047: PUSH
25048: LD_VAR 0 2
25052: PPUSH
25053: LD_INT 1
25055: PPUSH
25056: LD_VAR 0 2
25060: PUSH
25061: LD_INT 1
25063: ARRAY
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: CALL_OW 3
25072: PPUSH
25073: CALL_OW 1
25077: ST_TO_ADDR
// tmp := 1 ;
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: LD_STRING 1
25085: ST_TO_ADDR
// end ; normal := normal & tmp ;
25086: LD_ADDR_VAR 0 5
25090: PUSH
25091: LD_VAR 0 5
25095: PUSH
25096: LD_VAR 0 3
25100: STR
25101: ST_TO_ADDR
// end ;
25102: GO 25002
25104: POP
25105: POP
// for i = 1 to hardcoreCounter do
25106: LD_ADDR_VAR 0 8
25110: PUSH
25111: DOUBLE
25112: LD_INT 1
25114: DEC
25115: ST_TO_ADDR
25116: LD_EXP 70
25120: PUSH
25121: FOR_TO
25122: IFFALSE 25227
// begin tmp := 0 ;
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: LD_STRING 0
25131: ST_TO_ADDR
// if result [ 2 ] then
25132: LD_VAR 0 2
25136: PUSH
25137: LD_INT 2
25139: ARRAY
25140: IFFALSE 25209
// if result [ 2 ] [ 1 ] = 100 + i then
25142: LD_VAR 0 2
25146: PUSH
25147: LD_INT 2
25149: ARRAY
25150: PUSH
25151: LD_INT 1
25153: ARRAY
25154: PUSH
25155: LD_INT 100
25157: PUSH
25158: LD_VAR 0 8
25162: PLUS
25163: EQUAL
25164: IFFALSE 25209
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25166: LD_ADDR_VAR 0 2
25170: PUSH
25171: LD_VAR 0 2
25175: PPUSH
25176: LD_INT 2
25178: PPUSH
25179: LD_VAR 0 2
25183: PUSH
25184: LD_INT 2
25186: ARRAY
25187: PPUSH
25188: LD_INT 1
25190: PPUSH
25191: CALL_OW 3
25195: PPUSH
25196: CALL_OW 1
25200: ST_TO_ADDR
// tmp := 1 ;
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_STRING 1
25208: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25209: LD_ADDR_VAR 0 6
25213: PUSH
25214: LD_VAR 0 6
25218: PUSH
25219: LD_VAR 0 3
25223: STR
25224: ST_TO_ADDR
// end ;
25225: GO 25121
25227: POP
25228: POP
// if isGameLoad then
25229: LD_VAR 0 1
25233: IFFALSE 25708
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25235: LD_ADDR_VAR 0 4
25239: PUSH
25240: LD_EXP 73
25244: PUSH
25245: LD_EXP 72
25249: PUSH
25250: LD_EXP 74
25254: PUSH
25255: LD_EXP 71
25259: PUSH
25260: LD_EXP 75
25264: PUSH
25265: LD_EXP 76
25269: PUSH
25270: LD_EXP 77
25274: PUSH
25275: LD_EXP 78
25279: PUSH
25280: LD_EXP 79
25284: PUSH
25285: LD_EXP 80
25289: PUSH
25290: LD_EXP 81
25294: PUSH
25295: LD_EXP 82
25299: PUSH
25300: LD_EXP 83
25304: PUSH
25305: LD_EXP 84
25309: PUSH
25310: LD_EXP 92
25314: PUSH
25315: LD_EXP 93
25319: PUSH
25320: LD_EXP 94
25324: PUSH
25325: LD_EXP 95
25329: PUSH
25330: LD_EXP 97
25334: PUSH
25335: LD_EXP 98
25339: PUSH
25340: LD_EXP 99
25344: PUSH
25345: LD_EXP 102
25349: PUSH
25350: LD_EXP 104
25354: PUSH
25355: LD_EXP 105
25359: PUSH
25360: LD_EXP 106
25364: PUSH
25365: LD_EXP 108
25369: PUSH
25370: LD_EXP 109
25374: PUSH
25375: LD_EXP 112
25379: PUSH
25380: LD_EXP 113
25384: PUSH
25385: LD_EXP 114
25389: PUSH
25390: LD_EXP 115
25394: PUSH
25395: LD_EXP 116
25399: PUSH
25400: LD_EXP 117
25404: PUSH
25405: LD_EXP 118
25409: PUSH
25410: LD_EXP 119
25414: PUSH
25415: LD_EXP 120
25419: PUSH
25420: LD_EXP 85
25424: PUSH
25425: LD_EXP 86
25429: PUSH
25430: LD_EXP 89
25434: PUSH
25435: LD_EXP 90
25439: PUSH
25440: LD_EXP 91
25444: PUSH
25445: LD_EXP 87
25449: PUSH
25450: LD_EXP 88
25454: PUSH
25455: LD_EXP 96
25459: PUSH
25460: LD_EXP 100
25464: PUSH
25465: LD_EXP 101
25469: PUSH
25470: LD_EXP 103
25474: PUSH
25475: LD_EXP 107
25479: PUSH
25480: LD_EXP 110
25484: PUSH
25485: LD_EXP 111
25489: PUSH
25490: LD_EXP 121
25494: PUSH
25495: LD_EXP 122
25499: PUSH
25500: LD_EXP 123
25504: PUSH
25505: LD_EXP 124
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// tmp :=  ;
25566: LD_ADDR_VAR 0 3
25570: PUSH
25571: LD_STRING 
25573: ST_TO_ADDR
// for i = 1 to normalCounter do
25574: LD_ADDR_VAR 0 8
25578: PUSH
25579: DOUBLE
25580: LD_INT 1
25582: DEC
25583: ST_TO_ADDR
25584: LD_EXP 69
25588: PUSH
25589: FOR_TO
25590: IFFALSE 25626
// begin if flags [ i ] then
25592: LD_VAR 0 4
25596: PUSH
25597: LD_VAR 0 8
25601: ARRAY
25602: IFFALSE 25624
// tmp := tmp & i & ; ;
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_VAR 0 3
25613: PUSH
25614: LD_VAR 0 8
25618: STR
25619: PUSH
25620: LD_STRING ;
25622: STR
25623: ST_TO_ADDR
// end ;
25624: GO 25589
25626: POP
25627: POP
// for i = 1 to hardcoreCounter do
25628: LD_ADDR_VAR 0 8
25632: PUSH
25633: DOUBLE
25634: LD_INT 1
25636: DEC
25637: ST_TO_ADDR
25638: LD_EXP 70
25642: PUSH
25643: FOR_TO
25644: IFFALSE 25690
// begin if flags [ normalCounter + i ] then
25646: LD_VAR 0 4
25650: PUSH
25651: LD_EXP 69
25655: PUSH
25656: LD_VAR 0 8
25660: PLUS
25661: ARRAY
25662: IFFALSE 25688
// tmp := tmp & ( 100 + i ) & ; ;
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_VAR 0 3
25673: PUSH
25674: LD_INT 100
25676: PUSH
25677: LD_VAR 0 8
25681: PLUS
25682: STR
25683: PUSH
25684: LD_STRING ;
25686: STR
25687: ST_TO_ADDR
// end ;
25688: GO 25643
25690: POP
25691: POP
// if tmp then
25692: LD_VAR 0 3
25696: IFFALSE 25708
// active := tmp ;
25698: LD_ADDR_VAR 0 7
25702: PUSH
25703: LD_VAR 0 3
25707: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25708: LD_STRING getStreamItemsFromMission("
25710: PUSH
25711: LD_VAR 0 5
25715: STR
25716: PUSH
25717: LD_STRING ","
25719: STR
25720: PUSH
25721: LD_VAR 0 6
25725: STR
25726: PUSH
25727: LD_STRING ","
25729: STR
25730: PUSH
25731: LD_VAR 0 7
25735: STR
25736: PUSH
25737: LD_STRING ")
25739: STR
25740: PPUSH
25741: CALL_OW 559
// end else
25745: GO 25754
// ToLua ( getStreamItemsFromMission("","","") ) ;
25747: LD_STRING getStreamItemsFromMission("","","")
25749: PPUSH
25750: CALL_OW 559
// end ;
25754: LD_VAR 0 2
25758: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25759: LD_EXP 68
25763: PUSH
25764: LD_EXP 73
25768: AND
25769: IFFALSE 25893
25771: GO 25773
25773: DISABLE
25774: LD_INT 0
25776: PPUSH
25777: PPUSH
// begin enable ;
25778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25779: LD_ADDR_VAR 0 2
25783: PUSH
25784: LD_INT 22
25786: PUSH
25787: LD_OWVAR 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 34
25801: PUSH
25802: LD_INT 7
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 34
25811: PUSH
25812: LD_INT 45
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 34
25821: PUSH
25822: LD_INT 28
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 34
25831: PUSH
25832: LD_INT 47
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: ST_TO_ADDR
// if not tmp then
25855: LD_VAR 0 2
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 25893
// for i in tmp do
25864: LD_ADDR_VAR 0 1
25868: PUSH
25869: LD_VAR 0 2
25873: PUSH
25874: FOR_IN
25875: IFFALSE 25891
// begin SetLives ( i , 0 ) ;
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_INT 0
25884: PPUSH
25885: CALL_OW 234
// end ;
25889: GO 25874
25891: POP
25892: POP
// end ;
25893: PPOPN 2
25895: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25896: LD_EXP 68
25900: PUSH
25901: LD_EXP 74
25905: AND
25906: IFFALSE 25990
25908: GO 25910
25910: DISABLE
25911: LD_INT 0
25913: PPUSH
25914: PPUSH
// begin enable ;
25915: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: LD_INT 22
25923: PUSH
25924: LD_OWVAR 2
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 32
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25993: LD_EXP 68
25997: PUSH
25998: LD_EXP 71
26002: AND
26003: IFFALSE 26096
26005: GO 26007
26007: DISABLE
26008: LD_INT 0
26010: PPUSH
// begin enable ;
26011: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26012: LD_ADDR_VAR 0 1
26016: PUSH
26017: LD_INT 22
26019: PUSH
26020: LD_OWVAR 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 25
26034: PUSH
26035: LD_INT 5
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 25
26044: PUSH
26045: LD_INT 9
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 25
26054: PUSH
26055: LD_INT 8
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26094
// begin SetClass ( i , 1 ) ;
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_INT 1
26087: PPUSH
26088: CALL_OW 336
// end ;
26092: GO 26077
26094: POP
26095: POP
// end ;
26096: PPOPN 1
26098: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26099: LD_EXP 68
26103: PUSH
26104: LD_EXP 72
26108: AND
26109: PUSH
26110: LD_OWVAR 65
26114: PUSH
26115: LD_INT 7
26117: LESS
26118: AND
26119: IFFALSE 26133
26121: GO 26123
26123: DISABLE
// begin enable ;
26124: ENABLE
// game_speed := 7 ;
26125: LD_ADDR_OWVAR 65
26129: PUSH
26130: LD_INT 7
26132: ST_TO_ADDR
// end ;
26133: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26134: LD_EXP 68
26138: PUSH
26139: LD_EXP 75
26143: AND
26144: IFFALSE 26346
26146: GO 26148
26148: DISABLE
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
26153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26154: LD_ADDR_VAR 0 3
26158: PUSH
26159: LD_INT 81
26161: PUSH
26162: LD_OWVAR 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 21
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: ST_TO_ADDR
// if not tmp then
26190: LD_VAR 0 3
26194: NOT
26195: IFFALSE 26199
// exit ;
26197: GO 26346
// if tmp > 5 then
26199: LD_VAR 0 3
26203: PUSH
26204: LD_INT 5
26206: GREATER
26207: IFFALSE 26219
// k := 5 else
26209: LD_ADDR_VAR 0 2
26213: PUSH
26214: LD_INT 5
26216: ST_TO_ADDR
26217: GO 26229
// k := tmp ;
26219: LD_ADDR_VAR 0 2
26223: PUSH
26224: LD_VAR 0 3
26228: ST_TO_ADDR
// for i := 1 to k do
26229: LD_ADDR_VAR 0 1
26233: PUSH
26234: DOUBLE
26235: LD_INT 1
26237: DEC
26238: ST_TO_ADDR
26239: LD_VAR 0 2
26243: PUSH
26244: FOR_TO
26245: IFFALSE 26344
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26247: LD_VAR 0 3
26251: PUSH
26252: LD_VAR 0 1
26256: ARRAY
26257: PPUSH
26258: LD_VAR 0 1
26262: PUSH
26263: LD_INT 4
26265: MOD
26266: PUSH
26267: LD_INT 1
26269: PLUS
26270: PPUSH
26271: CALL_OW 259
26275: PUSH
26276: LD_INT 10
26278: LESS
26279: IFFALSE 26342
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26281: LD_VAR 0 3
26285: PUSH
26286: LD_VAR 0 1
26290: ARRAY
26291: PPUSH
26292: LD_VAR 0 1
26296: PUSH
26297: LD_INT 4
26299: MOD
26300: PUSH
26301: LD_INT 1
26303: PLUS
26304: PPUSH
26305: LD_VAR 0 3
26309: PUSH
26310: LD_VAR 0 1
26314: ARRAY
26315: PPUSH
26316: LD_VAR 0 1
26320: PUSH
26321: LD_INT 4
26323: MOD
26324: PUSH
26325: LD_INT 1
26327: PLUS
26328: PPUSH
26329: CALL_OW 259
26333: PUSH
26334: LD_INT 1
26336: PLUS
26337: PPUSH
26338: CALL_OW 237
26342: GO 26244
26344: POP
26345: POP
// end ;
26346: PPOPN 3
26348: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26349: LD_EXP 68
26353: PUSH
26354: LD_EXP 76
26358: AND
26359: IFFALSE 26379
26361: GO 26363
26363: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26364: LD_INT 4
26366: PPUSH
26367: LD_OWVAR 2
26371: PPUSH
26372: LD_INT 0
26374: PPUSH
26375: CALL_OW 324
26379: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26380: LD_EXP 68
26384: PUSH
26385: LD_EXP 105
26389: AND
26390: IFFALSE 26410
26392: GO 26394
26394: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26395: LD_INT 19
26397: PPUSH
26398: LD_OWVAR 2
26402: PPUSH
26403: LD_INT 0
26405: PPUSH
26406: CALL_OW 324
26410: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26411: LD_EXP 68
26415: PUSH
26416: LD_EXP 77
26420: AND
26421: IFFALSE 26523
26423: GO 26425
26425: DISABLE
26426: LD_INT 0
26428: PPUSH
26429: PPUSH
// begin enable ;
26430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26431: LD_ADDR_VAR 0 2
26435: PUSH
26436: LD_INT 22
26438: PUSH
26439: LD_OWVAR 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 34
26453: PUSH
26454: LD_INT 11
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 34
26463: PUSH
26464: LD_INT 30
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if not tmp then
26485: LD_VAR 0 2
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26523
// for i in tmp do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_VAR 0 2
26503: PUSH
26504: FOR_IN
26505: IFFALSE 26521
// begin SetLives ( i , 0 ) ;
26507: LD_VAR 0 1
26511: PPUSH
26512: LD_INT 0
26514: PPUSH
26515: CALL_OW 234
// end ;
26519: GO 26504
26521: POP
26522: POP
// end ;
26523: PPOPN 2
26525: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26526: LD_EXP 68
26530: PUSH
26531: LD_EXP 78
26535: AND
26536: IFFALSE 26556
26538: GO 26540
26540: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26541: LD_INT 32
26543: PPUSH
26544: LD_OWVAR 2
26548: PPUSH
26549: LD_INT 0
26551: PPUSH
26552: CALL_OW 324
26556: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26557: LD_EXP 68
26561: PUSH
26562: LD_EXP 79
26566: AND
26567: IFFALSE 26748
26569: GO 26571
26571: DISABLE
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26577: LD_ADDR_VAR 0 2
26581: PUSH
26582: LD_INT 22
26584: PUSH
26585: LD_OWVAR 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 33
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 69
26612: ST_TO_ADDR
// if not tmp then
26613: LD_VAR 0 2
26617: NOT
26618: IFFALSE 26622
// exit ;
26620: GO 26748
// side := 0 ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 0
26629: ST_TO_ADDR
// for i := 1 to 8 do
26630: LD_ADDR_VAR 0 1
26634: PUSH
26635: DOUBLE
26636: LD_INT 1
26638: DEC
26639: ST_TO_ADDR
26640: LD_INT 8
26642: PUSH
26643: FOR_TO
26644: IFFALSE 26692
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26646: LD_OWVAR 2
26650: PUSH
26651: LD_VAR 0 1
26655: NONEQUAL
26656: PUSH
26657: LD_OWVAR 2
26661: PPUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 81
26671: PUSH
26672: LD_INT 2
26674: EQUAL
26675: AND
26676: IFFALSE 26690
// begin side := i ;
26678: LD_ADDR_VAR 0 3
26682: PUSH
26683: LD_VAR 0 1
26687: ST_TO_ADDR
// break ;
26688: GO 26692
// end ;
26690: GO 26643
26692: POP
26693: POP
// if not side then
26694: LD_VAR 0 3
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26748
// for i := 1 to tmp do
26703: LD_ADDR_VAR 0 1
26707: PUSH
26708: DOUBLE
26709: LD_INT 1
26711: DEC
26712: ST_TO_ADDR
26713: LD_VAR 0 2
26717: PUSH
26718: FOR_TO
26719: IFFALSE 26746
// if Prob ( 60 ) then
26721: LD_INT 60
26723: PPUSH
26724: CALL_OW 13
26728: IFFALSE 26744
// SetSide ( i , side ) ;
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_VAR 0 3
26739: PPUSH
26740: CALL_OW 235
26744: GO 26718
26746: POP
26747: POP
// end ;
26748: PPOPN 3
26750: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26751: LD_EXP 68
26755: PUSH
26756: LD_EXP 81
26760: AND
26761: IFFALSE 26880
26763: GO 26765
26765: DISABLE
26766: LD_INT 0
26768: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26769: LD_ADDR_VAR 0 1
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_OWVAR 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 21
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 3
26798: PUSH
26799: LD_INT 23
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: PPUSH
26818: CALL_OW 69
26822: PUSH
26823: FOR_IN
26824: IFFALSE 26878
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 257
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 4
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: IN
26854: IFFALSE 26876
// SetClass ( un , rand ( 1 , 4 ) ) ;
26856: LD_VAR 0 1
26860: PPUSH
26861: LD_INT 1
26863: PPUSH
26864: LD_INT 4
26866: PPUSH
26867: CALL_OW 12
26871: PPUSH
26872: CALL_OW 336
26876: GO 26823
26878: POP
26879: POP
// end ;
26880: PPOPN 1
26882: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26883: LD_EXP 68
26887: PUSH
26888: LD_EXP 80
26892: AND
26893: IFFALSE 26972
26895: GO 26897
26897: DISABLE
26898: LD_INT 0
26900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26901: LD_ADDR_VAR 0 1
26905: PUSH
26906: LD_INT 22
26908: PUSH
26909: LD_OWVAR 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 3
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 69
26936: ST_TO_ADDR
// if not tmp then
26937: LD_VAR 0 1
26941: NOT
26942: IFFALSE 26946
// exit ;
26944: GO 26972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 12
26963: ARRAY
26964: PPUSH
26965: LD_INT 100
26967: PPUSH
26968: CALL_OW 234
// end ;
26972: PPOPN 1
26974: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26975: LD_EXP 68
26979: PUSH
26980: LD_EXP 82
26984: AND
26985: IFFALSE 27083
26987: GO 26989
26989: DISABLE
26990: LD_INT 0
26992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26993: LD_ADDR_VAR 0 1
26997: PUSH
26998: LD_INT 22
27000: PUSH
27001: LD_OWVAR 2
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 69
27028: ST_TO_ADDR
// if not tmp then
27029: LD_VAR 0 1
27033: NOT
27034: IFFALSE 27038
// exit ;
27036: GO 27083
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27038: LD_VAR 0 1
27042: PUSH
27043: LD_INT 1
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 12
27055: ARRAY
27056: PPUSH
27057: LD_INT 1
27059: PPUSH
27060: LD_INT 4
27062: PPUSH
27063: CALL_OW 12
27067: PPUSH
27068: LD_INT 3000
27070: PPUSH
27071: LD_INT 9000
27073: PPUSH
27074: CALL_OW 12
27078: PPUSH
27079: CALL_OW 492
// end ;
27083: PPOPN 1
27085: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27086: LD_EXP 68
27090: PUSH
27091: LD_EXP 83
27095: AND
27096: IFFALSE 27116
27098: GO 27100
27100: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27101: LD_INT 1
27103: PPUSH
27104: LD_OWVAR 2
27108: PPUSH
27109: LD_INT 0
27111: PPUSH
27112: CALL_OW 324
27116: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27117: LD_EXP 68
27121: PUSH
27122: LD_EXP 84
27126: AND
27127: IFFALSE 27210
27129: GO 27131
27131: DISABLE
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27136: LD_ADDR_VAR 0 2
27140: PUSH
27141: LD_INT 22
27143: PUSH
27144: LD_OWVAR 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 21
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 69
27171: ST_TO_ADDR
// if not tmp then
27172: LD_VAR 0 2
27176: NOT
27177: IFFALSE 27181
// exit ;
27179: GO 27210
// for i in tmp do
27181: LD_ADDR_VAR 0 1
27185: PUSH
27186: LD_VAR 0 2
27190: PUSH
27191: FOR_IN
27192: IFFALSE 27208
// SetBLevel ( i , 10 ) ;
27194: LD_VAR 0 1
27198: PPUSH
27199: LD_INT 10
27201: PPUSH
27202: CALL_OW 241
27206: GO 27191
27208: POP
27209: POP
// end ;
27210: PPOPN 2
27212: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27213: LD_EXP 68
27217: PUSH
27218: LD_EXP 85
27222: AND
27223: IFFALSE 27334
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
27232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27233: LD_ADDR_VAR 0 3
27237: PUSH
27238: LD_INT 22
27240: PUSH
27241: LD_OWVAR 2
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 25
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 69
27268: ST_TO_ADDR
// if not tmp then
27269: LD_VAR 0 3
27273: NOT
27274: IFFALSE 27278
// exit ;
27276: GO 27334
// un := tmp [ rand ( 1 , tmp ) ] ;
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: LD_VAR 0 3
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 3
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: ST_TO_ADDR
// if Crawls ( un ) then
27302: LD_VAR 0 2
27306: PPUSH
27307: CALL_OW 318
27311: IFFALSE 27322
// ComWalk ( un ) ;
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_INT 5
27329: PPUSH
27330: CALL_OW 336
// end ;
27334: PPOPN 3
27336: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27337: LD_EXP 68
27341: PUSH
27342: LD_EXP 86
27346: AND
27347: PUSH
27348: LD_OWVAR 67
27352: PUSH
27353: LD_INT 4
27355: LESS
27356: AND
27357: IFFALSE 27376
27359: GO 27361
27361: DISABLE
// begin Difficulty := Difficulty + 1 ;
27362: LD_ADDR_OWVAR 67
27366: PUSH
27367: LD_OWVAR 67
27371: PUSH
27372: LD_INT 1
27374: PLUS
27375: ST_TO_ADDR
// end ;
27376: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27377: LD_EXP 68
27381: PUSH
27382: LD_EXP 87
27386: AND
27387: IFFALSE 27490
27389: GO 27391
27391: DISABLE
27392: LD_INT 0
27394: PPUSH
// begin for i := 1 to 5 do
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: DOUBLE
27401: LD_INT 1
27403: DEC
27404: ST_TO_ADDR
27405: LD_INT 5
27407: PUSH
27408: FOR_TO
27409: IFFALSE 27488
// begin uc_nation := nation_nature ;
27411: LD_ADDR_OWVAR 21
27415: PUSH
27416: LD_INT 0
27418: ST_TO_ADDR
// uc_side := 0 ;
27419: LD_ADDR_OWVAR 20
27423: PUSH
27424: LD_INT 0
27426: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27427: LD_ADDR_OWVAR 29
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: LD_INT 12
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// hc_agressivity := 20 ;
27442: LD_ADDR_OWVAR 35
27446: PUSH
27447: LD_INT 20
27449: ST_TO_ADDR
// hc_class := class_tiger ;
27450: LD_ADDR_OWVAR 28
27454: PUSH
27455: LD_INT 14
27457: ST_TO_ADDR
// hc_gallery :=  ;
27458: LD_ADDR_OWVAR 33
27462: PUSH
27463: LD_STRING 
27465: ST_TO_ADDR
// hc_name :=  ;
27466: LD_ADDR_OWVAR 26
27470: PUSH
27471: LD_STRING 
27473: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27474: CALL_OW 44
27478: PPUSH
27479: LD_INT 0
27481: PPUSH
27482: CALL_OW 51
// end ;
27486: GO 27408
27488: POP
27489: POP
// end ;
27490: PPOPN 1
27492: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27493: LD_EXP 68
27497: PUSH
27498: LD_EXP 88
27502: AND
27503: IFFALSE 27512
27505: GO 27507
27507: DISABLE
// StreamSibBomb ;
27508: CALL 27513 0 0
27512: END
// export function StreamSibBomb ; var i , x , y ; begin
27513: LD_INT 0
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
// result := false ;
27519: LD_ADDR_VAR 0 1
27523: PUSH
27524: LD_INT 0
27526: ST_TO_ADDR
// for i := 1 to 16 do
27527: LD_ADDR_VAR 0 2
27531: PUSH
27532: DOUBLE
27533: LD_INT 1
27535: DEC
27536: ST_TO_ADDR
27537: LD_INT 16
27539: PUSH
27540: FOR_TO
27541: IFFALSE 27740
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27543: LD_ADDR_VAR 0 3
27547: PUSH
27548: LD_INT 10
27550: PUSH
27551: LD_INT 20
27553: PUSH
27554: LD_INT 30
27556: PUSH
27557: LD_INT 40
27559: PUSH
27560: LD_INT 50
27562: PUSH
27563: LD_INT 60
27565: PUSH
27566: LD_INT 70
27568: PUSH
27569: LD_INT 80
27571: PUSH
27572: LD_INT 90
27574: PUSH
27575: LD_INT 100
27577: PUSH
27578: LD_INT 110
27580: PUSH
27581: LD_INT 120
27583: PUSH
27584: LD_INT 130
27586: PUSH
27587: LD_INT 140
27589: PUSH
27590: LD_INT 150
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PPUSH
27613: LD_INT 15
27615: PPUSH
27616: CALL_OW 12
27620: ARRAY
27621: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27622: LD_ADDR_VAR 0 4
27626: PUSH
27627: LD_INT 10
27629: PUSH
27630: LD_INT 20
27632: PUSH
27633: LD_INT 30
27635: PUSH
27636: LD_INT 40
27638: PUSH
27639: LD_INT 50
27641: PUSH
27642: LD_INT 60
27644: PUSH
27645: LD_INT 70
27647: PUSH
27648: LD_INT 80
27650: PUSH
27651: LD_INT 90
27653: PUSH
27654: LD_INT 100
27656: PUSH
27657: LD_INT 110
27659: PUSH
27660: LD_INT 120
27662: PUSH
27663: LD_INT 130
27665: PUSH
27666: LD_INT 140
27668: PUSH
27669: LD_INT 150
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PPUSH
27692: LD_INT 15
27694: PPUSH
27695: CALL_OW 12
27699: ARRAY
27700: ST_TO_ADDR
// if ValidHex ( x , y ) then
27701: LD_VAR 0 3
27705: PPUSH
27706: LD_VAR 0 4
27710: PPUSH
27711: CALL_OW 488
27715: IFFALSE 27738
// begin result := [ x , y ] ;
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: LD_VAR 0 3
27726: PUSH
27727: LD_VAR 0 4
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: ST_TO_ADDR
// break ;
27736: GO 27740
// end ; end ;
27738: GO 27540
27740: POP
27741: POP
// if result then
27742: LD_VAR 0 1
27746: IFFALSE 27806
// begin ToLua ( playSibBomb() ) ;
27748: LD_STRING playSibBomb()
27750: PPUSH
27751: CALL_OW 559
// wait ( 0 0$14 ) ;
27755: LD_INT 490
27757: PPUSH
27758: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27762: LD_VAR 0 1
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: PPUSH
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 2
27778: ARRAY
27779: PPUSH
27780: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27784: LD_VAR 0 1
27788: PUSH
27789: LD_INT 1
27791: ARRAY
27792: PPUSH
27793: LD_VAR 0 1
27797: PUSH
27798: LD_INT 2
27800: ARRAY
27801: PPUSH
27802: CALL_OW 429
// end ; end ;
27806: LD_VAR 0 1
27810: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27811: LD_EXP 68
27815: PUSH
27816: LD_EXP 90
27820: AND
27821: IFFALSE 27833
27823: GO 27825
27825: DISABLE
// YouLost (  ) ;
27826: LD_STRING 
27828: PPUSH
27829: CALL_OW 104
27833: END
// every 0 0$1 trigger StreamModeActive and sFog do
27834: LD_EXP 68
27838: PUSH
27839: LD_EXP 89
27843: AND
27844: IFFALSE 27858
27846: GO 27848
27848: DISABLE
// FogOff ( your_side ) ;
27849: LD_OWVAR 2
27853: PPUSH
27854: CALL_OW 344
27858: END
// every 0 0$1 trigger StreamModeActive and sSun do
27859: LD_EXP 68
27863: PUSH
27864: LD_EXP 91
27868: AND
27869: IFFALSE 27897
27871: GO 27873
27873: DISABLE
// begin solar_recharge_percent := 0 ;
27874: LD_ADDR_OWVAR 79
27878: PUSH
27879: LD_INT 0
27881: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27882: LD_INT 10500
27884: PPUSH
27885: CALL_OW 67
// solar_recharge_percent := 100 ;
27889: LD_ADDR_OWVAR 79
27893: PUSH
27894: LD_INT 100
27896: ST_TO_ADDR
// end ;
27897: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27898: LD_EXP 68
27902: PUSH
27903: LD_EXP 92
27907: AND
27908: IFFALSE 28147
27910: GO 27912
27912: DISABLE
27913: LD_INT 0
27915: PPUSH
27916: PPUSH
27917: PPUSH
// begin tmp := [ ] ;
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: EMPTY
27924: ST_TO_ADDR
// for i := 1 to 6 do
27925: LD_ADDR_VAR 0 1
27929: PUSH
27930: DOUBLE
27931: LD_INT 1
27933: DEC
27934: ST_TO_ADDR
27935: LD_INT 6
27937: PUSH
27938: FOR_TO
27939: IFFALSE 28044
// begin uc_nation := nation_nature ;
27941: LD_ADDR_OWVAR 21
27945: PUSH
27946: LD_INT 0
27948: ST_TO_ADDR
// uc_side := 0 ;
27949: LD_ADDR_OWVAR 20
27953: PUSH
27954: LD_INT 0
27956: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27957: LD_ADDR_OWVAR 29
27961: PUSH
27962: LD_INT 12
27964: PUSH
27965: LD_INT 12
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: ST_TO_ADDR
// hc_agressivity := 20 ;
27972: LD_ADDR_OWVAR 35
27976: PUSH
27977: LD_INT 20
27979: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27980: LD_ADDR_OWVAR 28
27984: PUSH
27985: LD_INT 17
27987: ST_TO_ADDR
// hc_gallery :=  ;
27988: LD_ADDR_OWVAR 33
27992: PUSH
27993: LD_STRING 
27995: ST_TO_ADDR
// hc_name :=  ;
27996: LD_ADDR_OWVAR 26
28000: PUSH
28001: LD_STRING 
28003: ST_TO_ADDR
// un := CreateHuman ;
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: CALL_OW 44
28013: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28014: LD_VAR 0 2
28018: PPUSH
28019: LD_INT 1
28021: PPUSH
28022: CALL_OW 51
// tmp := tmp ^ un ;
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_VAR 0 3
28035: PUSH
28036: LD_VAR 0 2
28040: ADD
28041: ST_TO_ADDR
// end ;
28042: GO 27938
28044: POP
28045: POP
// repeat wait ( 0 0$1 ) ;
28046: LD_INT 35
28048: PPUSH
28049: CALL_OW 67
// for un in tmp do
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_VAR 0 3
28062: PUSH
28063: FOR_IN
28064: IFFALSE 28138
// begin if IsDead ( un ) then
28066: LD_VAR 0 2
28070: PPUSH
28071: CALL_OW 301
28075: IFFALSE 28095
// begin tmp := tmp diff un ;
28077: LD_ADDR_VAR 0 3
28081: PUSH
28082: LD_VAR 0 3
28086: PUSH
28087: LD_VAR 0 2
28091: DIFF
28092: ST_TO_ADDR
// continue ;
28093: GO 28063
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28095: LD_VAR 0 2
28099: PPUSH
28100: LD_INT 3
28102: PUSH
28103: LD_INT 22
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: PPUSH
28122: LD_VAR 0 2
28126: PPUSH
28127: CALL_OW 74
28131: PPUSH
28132: CALL_OW 115
// end ;
28136: GO 28063
28138: POP
28139: POP
// until not tmp ;
28140: LD_VAR 0 3
28144: NOT
28145: IFFALSE 28046
// end ;
28147: PPOPN 3
28149: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28150: LD_EXP 68
28154: PUSH
28155: LD_EXP 93
28159: AND
28160: IFFALSE 28214
28162: GO 28164
28164: DISABLE
// begin ToLua ( displayTroll(); ) ;
28165: LD_STRING displayTroll();
28167: PPUSH
28168: CALL_OW 559
// wait ( 3 3$00 ) ;
28172: LD_INT 6300
28174: PPUSH
28175: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28179: LD_STRING hideTroll();
28181: PPUSH
28182: CALL_OW 559
// wait ( 1 1$00 ) ;
28186: LD_INT 2100
28188: PPUSH
28189: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28193: LD_STRING displayTroll();
28195: PPUSH
28196: CALL_OW 559
// wait ( 1 1$00 ) ;
28200: LD_INT 2100
28202: PPUSH
28203: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28207: LD_STRING hideTroll();
28209: PPUSH
28210: CALL_OW 559
// end ;
28214: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28215: LD_EXP 68
28219: PUSH
28220: LD_EXP 94
28224: AND
28225: IFFALSE 28288
28227: GO 28229
28229: DISABLE
28230: LD_INT 0
28232: PPUSH
// begin p := 0 ;
28233: LD_ADDR_VAR 0 1
28237: PUSH
28238: LD_INT 0
28240: ST_TO_ADDR
// repeat game_speed := 1 ;
28241: LD_ADDR_OWVAR 65
28245: PUSH
28246: LD_INT 1
28248: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28249: LD_INT 35
28251: PPUSH
28252: CALL_OW 67
// p := p + 1 ;
28256: LD_ADDR_VAR 0 1
28260: PUSH
28261: LD_VAR 0 1
28265: PUSH
28266: LD_INT 1
28268: PLUS
28269: ST_TO_ADDR
// until p >= 60 ;
28270: LD_VAR 0 1
28274: PUSH
28275: LD_INT 60
28277: GREATEREQUAL
28278: IFFALSE 28241
// game_speed := 4 ;
28280: LD_ADDR_OWVAR 65
28284: PUSH
28285: LD_INT 4
28287: ST_TO_ADDR
// end ;
28288: PPOPN 1
28290: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28291: LD_EXP 68
28295: PUSH
28296: LD_EXP 95
28300: AND
28301: IFFALSE 28447
28303: GO 28305
28305: DISABLE
28306: LD_INT 0
28308: PPUSH
28309: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28310: LD_ADDR_VAR 0 1
28314: PUSH
28315: LD_INT 22
28317: PUSH
28318: LD_OWVAR 2
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: LD_INT 30
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 30
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PPUSH
28359: CALL_OW 69
28363: ST_TO_ADDR
// if not depot then
28364: LD_VAR 0 1
28368: NOT
28369: IFFALSE 28373
// exit ;
28371: GO 28447
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28373: LD_ADDR_VAR 0 2
28377: PUSH
28378: LD_VAR 0 1
28382: PUSH
28383: LD_INT 1
28385: PPUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 12
28395: ARRAY
28396: PPUSH
28397: CALL_OW 274
28401: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28402: LD_VAR 0 2
28406: PPUSH
28407: LD_INT 1
28409: PPUSH
28410: LD_INT 0
28412: PPUSH
28413: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_INT 2
28424: PPUSH
28425: LD_INT 0
28427: PPUSH
28428: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28432: LD_VAR 0 2
28436: PPUSH
28437: LD_INT 3
28439: PPUSH
28440: LD_INT 0
28442: PPUSH
28443: CALL_OW 277
// end ;
28447: PPOPN 2
28449: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28450: LD_EXP 68
28454: PUSH
28455: LD_EXP 96
28459: AND
28460: IFFALSE 28557
28462: GO 28464
28464: DISABLE
28465: LD_INT 0
28467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28468: LD_ADDR_VAR 0 1
28472: PUSH
28473: LD_INT 22
28475: PUSH
28476: LD_OWVAR 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 21
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 23
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 1
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 28557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28531: LD_VAR 0 1
28535: PUSH
28536: LD_INT 1
28538: PPUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 12
28548: ARRAY
28549: PPUSH
28550: LD_INT 200
28552: PPUSH
28553: CALL_OW 234
// end ;
28557: PPOPN 1
28559: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28560: LD_EXP 68
28564: PUSH
28565: LD_EXP 97
28569: AND
28570: IFFALSE 28649
28572: GO 28574
28574: DISABLE
28575: LD_INT 0
28577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_INT 22
28585: PUSH
28586: LD_OWVAR 2
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 21
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PPUSH
28609: CALL_OW 69
28613: ST_TO_ADDR
// if not tmp then
28614: LD_VAR 0 1
28618: NOT
28619: IFFALSE 28623
// exit ;
28621: GO 28649
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28623: LD_VAR 0 1
28627: PUSH
28628: LD_INT 1
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 12
28640: ARRAY
28641: PPUSH
28642: LD_INT 60
28644: PPUSH
28645: CALL_OW 234
// end ;
28649: PPOPN 1
28651: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28652: LD_EXP 68
28656: PUSH
28657: LD_EXP 98
28661: AND
28662: IFFALSE 28761
28664: GO 28666
28666: DISABLE
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
// begin enable ;
28671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28672: LD_ADDR_VAR 0 1
28676: PUSH
28677: LD_INT 22
28679: PUSH
28680: LD_OWVAR 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 61
28691: PUSH
28692: EMPTY
28693: LIST
28694: PUSH
28695: LD_INT 33
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: PPUSH
28710: CALL_OW 69
28714: ST_TO_ADDR
// if not tmp then
28715: LD_VAR 0 1
28719: NOT
28720: IFFALSE 28724
// exit ;
28722: GO 28761
// for i in tmp do
28724: LD_ADDR_VAR 0 2
28728: PUSH
28729: LD_VAR 0 1
28733: PUSH
28734: FOR_IN
28735: IFFALSE 28759
// if IsControledBy ( i ) then
28737: LD_VAR 0 2
28741: PPUSH
28742: CALL_OW 312
28746: IFFALSE 28757
// ComUnlink ( i ) ;
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 136
28757: GO 28734
28759: POP
28760: POP
// end ;
28761: PPOPN 2
28763: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28764: LD_EXP 68
28768: PUSH
28769: LD_EXP 99
28773: AND
28774: IFFALSE 28914
28776: GO 28778
28778: DISABLE
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
// begin ToLua ( displayPowell(); ) ;
28783: LD_STRING displayPowell();
28785: PPUSH
28786: CALL_OW 559
// uc_side := 0 ;
28790: LD_ADDR_OWVAR 20
28794: PUSH
28795: LD_INT 0
28797: ST_TO_ADDR
// uc_nation := 2 ;
28798: LD_ADDR_OWVAR 21
28802: PUSH
28803: LD_INT 2
28805: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28806: LD_ADDR_OWVAR 37
28810: PUSH
28811: LD_INT 14
28813: ST_TO_ADDR
// vc_engine := engine_siberite ;
28814: LD_ADDR_OWVAR 39
28818: PUSH
28819: LD_INT 3
28821: ST_TO_ADDR
// vc_control := control_apeman ;
28822: LD_ADDR_OWVAR 38
28826: PUSH
28827: LD_INT 5
28829: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28830: LD_ADDR_OWVAR 40
28834: PUSH
28835: LD_INT 29
28837: ST_TO_ADDR
// un := CreateVehicle ;
28838: LD_ADDR_VAR 0 2
28842: PUSH
28843: CALL_OW 45
28847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28848: LD_VAR 0 2
28852: PPUSH
28853: LD_INT 1
28855: PPUSH
28856: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28860: LD_INT 35
28862: PPUSH
28863: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28867: LD_VAR 0 2
28871: PPUSH
28872: LD_INT 22
28874: PUSH
28875: LD_OWVAR 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PPUSH
28884: CALL_OW 69
28888: PPUSH
28889: LD_VAR 0 2
28893: PPUSH
28894: CALL_OW 74
28898: PPUSH
28899: CALL_OW 115
// until IsDead ( un ) ;
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL_OW 301
28912: IFFALSE 28860
// end ;
28914: PPOPN 2
28916: END
// every 0 0$1 trigger StreamModeActive and sStu do
28917: LD_EXP 68
28921: PUSH
28922: LD_EXP 107
28926: AND
28927: IFFALSE 28943
28929: GO 28931
28931: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28932: LD_STRING displayStucuk();
28934: PPUSH
28935: CALL_OW 559
// ResetFog ;
28939: CALL_OW 335
// end ;
28943: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28944: LD_EXP 68
28948: PUSH
28949: LD_EXP 100
28953: AND
28954: IFFALSE 29095
28956: GO 28958
28958: DISABLE
28959: LD_INT 0
28961: PPUSH
28962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28963: LD_ADDR_VAR 0 2
28967: PUSH
28968: LD_INT 22
28970: PUSH
28971: LD_OWVAR 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 21
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: ST_TO_ADDR
// if not tmp then
28999: LD_VAR 0 2
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29095
// un := tmp [ rand ( 1 , tmp ) ] ;
29008: LD_ADDR_VAR 0 1
29012: PUSH
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_VAR 0 2
29025: PPUSH
29026: CALL_OW 12
29030: ARRAY
29031: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29032: LD_VAR 0 1
29036: PPUSH
29037: LD_INT 0
29039: PPUSH
29040: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_OWVAR 3
29053: PUSH
29054: LD_VAR 0 1
29058: DIFF
29059: PPUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 74
29069: PPUSH
29070: CALL_OW 115
// wait ( 0 0$20 ) ;
29074: LD_INT 700
29076: PPUSH
29077: CALL_OW 67
// SetSide ( un , your_side ) ;
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_OWVAR 2
29090: PPUSH
29091: CALL_OW 235
// end ;
29095: PPOPN 2
29097: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29098: LD_EXP 68
29102: PUSH
29103: LD_EXP 101
29107: AND
29108: IFFALSE 29214
29110: GO 29112
29112: DISABLE
29113: LD_INT 0
29115: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29116: LD_ADDR_VAR 0 1
29120: PUSH
29121: LD_INT 22
29123: PUSH
29124: LD_OWVAR 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: LD_INT 30
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 30
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PPUSH
29165: CALL_OW 69
29169: ST_TO_ADDR
// if not depot then
29170: LD_VAR 0 1
29174: NOT
29175: IFFALSE 29179
// exit ;
29177: GO 29214
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29179: LD_VAR 0 1
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: CALL_OW 250
29192: PPUSH
29193: LD_VAR 0 1
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 251
29206: PPUSH
29207: LD_INT 70
29209: PPUSH
29210: CALL_OW 495
// end ;
29214: PPOPN 1
29216: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29217: LD_EXP 68
29221: PUSH
29222: LD_EXP 102
29226: AND
29227: IFFALSE 29438
29229: GO 29231
29231: DISABLE
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29239: LD_ADDR_VAR 0 5
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_OWVAR 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 21
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: CALL_OW 69
29274: ST_TO_ADDR
// if not tmp then
29275: LD_VAR 0 5
29279: NOT
29280: IFFALSE 29284
// exit ;
29282: GO 29438
// for i in tmp do
29284: LD_ADDR_VAR 0 1
29288: PUSH
29289: LD_VAR 0 5
29293: PUSH
29294: FOR_IN
29295: IFFALSE 29436
// begin d := rand ( 0 , 5 ) ;
29297: LD_ADDR_VAR 0 4
29301: PUSH
29302: LD_INT 0
29304: PPUSH
29305: LD_INT 5
29307: PPUSH
29308: CALL_OW 12
29312: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29313: LD_ADDR_VAR 0 2
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 250
29327: PPUSH
29328: LD_VAR 0 4
29332: PPUSH
29333: LD_INT 3
29335: PPUSH
29336: LD_INT 12
29338: PPUSH
29339: CALL_OW 12
29343: PPUSH
29344: CALL_OW 272
29348: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 251
29363: PPUSH
29364: LD_VAR 0 4
29368: PPUSH
29369: LD_INT 3
29371: PPUSH
29372: LD_INT 12
29374: PPUSH
29375: CALL_OW 12
29379: PPUSH
29380: CALL_OW 273
29384: ST_TO_ADDR
// if ValidHex ( x , y ) then
29385: LD_VAR 0 2
29389: PPUSH
29390: LD_VAR 0 3
29394: PPUSH
29395: CALL_OW 488
29399: IFFALSE 29434
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_VAR 0 2
29410: PPUSH
29411: LD_VAR 0 3
29415: PPUSH
29416: LD_INT 3
29418: PPUSH
29419: LD_INT 6
29421: PPUSH
29422: CALL_OW 12
29426: PPUSH
29427: LD_INT 1
29429: PPUSH
29430: CALL_OW 483
// end ;
29434: GO 29294
29436: POP
29437: POP
// end ;
29438: PPOPN 5
29440: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29441: LD_EXP 68
29445: PUSH
29446: LD_EXP 103
29450: AND
29451: IFFALSE 29545
29453: GO 29455
29455: DISABLE
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29460: LD_ADDR_VAR 0 2
29464: PUSH
29465: LD_INT 22
29467: PUSH
29468: LD_OWVAR 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 32
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 21
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not tmp then
29507: LD_VAR 0 2
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29545
// for i in tmp do
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_VAR 0 2
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29543
// SetFuel ( i , 0 ) ;
29529: LD_VAR 0 1
29533: PPUSH
29534: LD_INT 0
29536: PPUSH
29537: CALL_OW 240
29541: GO 29526
29543: POP
29544: POP
// end ;
29545: PPOPN 2
29547: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29548: LD_EXP 68
29552: PUSH
29553: LD_EXP 104
29557: AND
29558: IFFALSE 29624
29560: GO 29562
29562: DISABLE
29563: LD_INT 0
29565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29566: LD_ADDR_VAR 0 1
29570: PUSH
29571: LD_INT 22
29573: PUSH
29574: LD_OWVAR 2
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 30
29585: PUSH
29586: LD_INT 29
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PPUSH
29597: CALL_OW 69
29601: ST_TO_ADDR
// if not tmp then
29602: LD_VAR 0 1
29606: NOT
29607: IFFALSE 29611
// exit ;
29609: GO 29624
// DestroyUnit ( tmp [ 1 ] ) ;
29611: LD_VAR 0 1
29615: PUSH
29616: LD_INT 1
29618: ARRAY
29619: PPUSH
29620: CALL_OW 65
// end ;
29624: PPOPN 1
29626: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29627: LD_EXP 68
29631: PUSH
29632: LD_EXP 106
29636: AND
29637: IFFALSE 29766
29639: GO 29641
29641: DISABLE
29642: LD_INT 0
29644: PPUSH
// begin uc_side := 0 ;
29645: LD_ADDR_OWVAR 20
29649: PUSH
29650: LD_INT 0
29652: ST_TO_ADDR
// uc_nation := nation_arabian ;
29653: LD_ADDR_OWVAR 21
29657: PUSH
29658: LD_INT 2
29660: ST_TO_ADDR
// hc_gallery :=  ;
29661: LD_ADDR_OWVAR 33
29665: PUSH
29666: LD_STRING 
29668: ST_TO_ADDR
// hc_name :=  ;
29669: LD_ADDR_OWVAR 26
29673: PUSH
29674: LD_STRING 
29676: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29677: LD_INT 1
29679: PPUSH
29680: LD_INT 11
29682: PPUSH
29683: LD_INT 10
29685: PPUSH
29686: CALL_OW 380
// un := CreateHuman ;
29690: LD_ADDR_VAR 0 1
29694: PUSH
29695: CALL_OW 44
29699: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29700: LD_VAR 0 1
29704: PPUSH
29705: LD_INT 1
29707: PPUSH
29708: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29712: LD_INT 35
29714: PPUSH
29715: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29719: LD_VAR 0 1
29723: PPUSH
29724: LD_INT 22
29726: PUSH
29727: LD_OWVAR 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PPUSH
29736: CALL_OW 69
29740: PPUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL_OW 74
29750: PPUSH
29751: CALL_OW 115
// until IsDead ( un ) ;
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 301
29764: IFFALSE 29712
// end ;
29766: PPOPN 1
29768: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29769: LD_EXP 68
29773: PUSH
29774: LD_EXP 108
29778: AND
29779: IFFALSE 29791
29781: GO 29783
29783: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29784: LD_STRING earthquake(getX(game), 0, 32)
29786: PPUSH
29787: CALL_OW 559
29791: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29792: LD_EXP 68
29796: PUSH
29797: LD_EXP 109
29801: AND
29802: IFFALSE 29893
29804: GO 29806
29806: DISABLE
29807: LD_INT 0
29809: PPUSH
// begin enable ;
29810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29811: LD_ADDR_VAR 0 1
29815: PUSH
29816: LD_INT 22
29818: PUSH
29819: LD_OWVAR 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 21
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 33
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: PPUSH
29853: CALL_OW 69
29857: ST_TO_ADDR
// if not tmp then
29858: LD_VAR 0 1
29862: NOT
29863: IFFALSE 29867
// exit ;
29865: GO 29893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29867: LD_VAR 0 1
29871: PUSH
29872: LD_INT 1
29874: PPUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 12
29884: ARRAY
29885: PPUSH
29886: LD_INT 1
29888: PPUSH
29889: CALL_OW 234
// end ;
29893: PPOPN 1
29895: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29896: LD_EXP 68
29900: PUSH
29901: LD_EXP 110
29905: AND
29906: IFFALSE 30047
29908: GO 29910
29910: DISABLE
29911: LD_INT 0
29913: PPUSH
29914: PPUSH
29915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29916: LD_ADDR_VAR 0 3
29920: PUSH
29921: LD_INT 22
29923: PUSH
29924: LD_OWVAR 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 25
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PPUSH
29947: CALL_OW 69
29951: ST_TO_ADDR
// if not tmp then
29952: LD_VAR 0 3
29956: NOT
29957: IFFALSE 29961
// exit ;
29959: GO 30047
// un := tmp [ rand ( 1 , tmp ) ] ;
29961: LD_ADDR_VAR 0 2
29965: PUSH
29966: LD_VAR 0 3
29970: PUSH
29971: LD_INT 1
29973: PPUSH
29974: LD_VAR 0 3
29978: PPUSH
29979: CALL_OW 12
29983: ARRAY
29984: ST_TO_ADDR
// if Crawls ( un ) then
29985: LD_VAR 0 2
29989: PPUSH
29990: CALL_OW 318
29994: IFFALSE 30005
// ComWalk ( un ) ;
29996: LD_VAR 0 2
30000: PPUSH
30001: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_INT 9
30012: PPUSH
30013: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30017: LD_INT 28
30019: PPUSH
30020: LD_OWVAR 2
30024: PPUSH
30025: LD_INT 2
30027: PPUSH
30028: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30032: LD_INT 29
30034: PPUSH
30035: LD_OWVAR 2
30039: PPUSH
30040: LD_INT 2
30042: PPUSH
30043: CALL_OW 322
// end ;
30047: PPOPN 3
30049: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30050: LD_EXP 68
30054: PUSH
30055: LD_EXP 111
30059: AND
30060: IFFALSE 30171
30062: GO 30064
30064: DISABLE
30065: LD_INT 0
30067: PPUSH
30068: PPUSH
30069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: LD_INT 22
30077: PUSH
30078: LD_OWVAR 2
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 25
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PPUSH
30101: CALL_OW 69
30105: ST_TO_ADDR
// if not tmp then
30106: LD_VAR 0 3
30110: NOT
30111: IFFALSE 30115
// exit ;
30113: GO 30171
// un := tmp [ rand ( 1 , tmp ) ] ;
30115: LD_ADDR_VAR 0 2
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: LD_INT 1
30127: PPUSH
30128: LD_VAR 0 3
30132: PPUSH
30133: CALL_OW 12
30137: ARRAY
30138: ST_TO_ADDR
// if Crawls ( un ) then
30139: LD_VAR 0 2
30143: PPUSH
30144: CALL_OW 318
30148: IFFALSE 30159
// ComWalk ( un ) ;
30150: LD_VAR 0 2
30154: PPUSH
30155: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_INT 8
30166: PPUSH
30167: CALL_OW 336
// end ;
30171: PPOPN 3
30173: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30174: LD_EXP 68
30178: PUSH
30179: LD_EXP 112
30183: AND
30184: IFFALSE 30328
30186: GO 30188
30188: DISABLE
30189: LD_INT 0
30191: PPUSH
30192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30193: LD_ADDR_VAR 0 2
30197: PUSH
30198: LD_INT 22
30200: PUSH
30201: LD_OWVAR 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 21
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: PUSH
30223: LD_INT 34
30225: PUSH
30226: LD_INT 12
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 34
30235: PUSH
30236: LD_INT 51
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 34
30245: PUSH
30246: LD_INT 32
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 69
30268: ST_TO_ADDR
// if not tmp then
30269: LD_VAR 0 2
30273: NOT
30274: IFFALSE 30278
// exit ;
30276: GO 30328
// for i in tmp do
30278: LD_ADDR_VAR 0 1
30282: PUSH
30283: LD_VAR 0 2
30287: PUSH
30288: FOR_IN
30289: IFFALSE 30326
// if GetCargo ( i , mat_artifact ) = 0 then
30291: LD_VAR 0 1
30295: PPUSH
30296: LD_INT 4
30298: PPUSH
30299: CALL_OW 289
30303: PUSH
30304: LD_INT 0
30306: EQUAL
30307: IFFALSE 30324
// SetCargo ( i , mat_siberit , 100 ) ;
30309: LD_VAR 0 1
30313: PPUSH
30314: LD_INT 3
30316: PPUSH
30317: LD_INT 100
30319: PPUSH
30320: CALL_OW 290
30324: GO 30288
30326: POP
30327: POP
// end ;
30328: PPOPN 2
30330: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30331: LD_EXP 68
30335: PUSH
30336: LD_EXP 113
30340: AND
30341: IFFALSE 30524
30343: GO 30345
30345: DISABLE
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_OWVAR 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PPUSH
30367: CALL_OW 69
30371: ST_TO_ADDR
// if not tmp then
30372: LD_VAR 0 2
30376: NOT
30377: IFFALSE 30381
// exit ;
30379: GO 30524
// for i := 1 to 2 do
30381: LD_ADDR_VAR 0 1
30385: PUSH
30386: DOUBLE
30387: LD_INT 1
30389: DEC
30390: ST_TO_ADDR
30391: LD_INT 2
30393: PUSH
30394: FOR_TO
30395: IFFALSE 30522
// begin uc_side := your_side ;
30397: LD_ADDR_OWVAR 20
30401: PUSH
30402: LD_OWVAR 2
30406: ST_TO_ADDR
// uc_nation := nation_american ;
30407: LD_ADDR_OWVAR 21
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// vc_chassis := us_morphling ;
30415: LD_ADDR_OWVAR 37
30419: PUSH
30420: LD_INT 5
30422: ST_TO_ADDR
// vc_engine := engine_siberite ;
30423: LD_ADDR_OWVAR 39
30427: PUSH
30428: LD_INT 3
30430: ST_TO_ADDR
// vc_control := control_computer ;
30431: LD_ADDR_OWVAR 38
30435: PUSH
30436: LD_INT 3
30438: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30439: LD_ADDR_OWVAR 40
30443: PUSH
30444: LD_INT 10
30446: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30447: LD_VAR 0 2
30451: PUSH
30452: LD_INT 1
30454: ARRAY
30455: PPUSH
30456: CALL_OW 310
30460: NOT
30461: IFFALSE 30508
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30463: CALL_OW 45
30467: PPUSH
30468: LD_VAR 0 2
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: PPUSH
30477: CALL_OW 250
30481: PPUSH
30482: LD_VAR 0 2
30486: PUSH
30487: LD_INT 1
30489: ARRAY
30490: PPUSH
30491: CALL_OW 251
30495: PPUSH
30496: LD_INT 12
30498: PPUSH
30499: LD_INT 1
30501: PPUSH
30502: CALL_OW 50
30506: GO 30520
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30508: CALL_OW 45
30512: PPUSH
30513: LD_INT 1
30515: PPUSH
30516: CALL_OW 51
// end ;
30520: GO 30394
30522: POP
30523: POP
// end ;
30524: PPOPN 2
30526: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30527: LD_EXP 68
30531: PUSH
30532: LD_EXP 114
30536: AND
30537: IFFALSE 30759
30539: GO 30541
30541: DISABLE
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30550: LD_ADDR_VAR 0 6
30554: PUSH
30555: LD_INT 22
30557: PUSH
30558: LD_OWVAR 2
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 21
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 23
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 69
30603: ST_TO_ADDR
// if not tmp then
30604: LD_VAR 0 6
30608: NOT
30609: IFFALSE 30613
// exit ;
30611: GO 30759
// s1 := rand ( 1 , 4 ) ;
30613: LD_ADDR_VAR 0 2
30617: PUSH
30618: LD_INT 1
30620: PPUSH
30621: LD_INT 4
30623: PPUSH
30624: CALL_OW 12
30628: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30629: LD_ADDR_VAR 0 4
30633: PUSH
30634: LD_VAR 0 6
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: LD_VAR 0 2
30647: PPUSH
30648: CALL_OW 259
30652: ST_TO_ADDR
// if s1 = 1 then
30653: LD_VAR 0 2
30657: PUSH
30658: LD_INT 1
30660: EQUAL
30661: IFFALSE 30681
// s2 := rand ( 2 , 4 ) else
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_INT 2
30670: PPUSH
30671: LD_INT 4
30673: PPUSH
30674: CALL_OW 12
30678: ST_TO_ADDR
30679: GO 30689
// s2 := 1 ;
30681: LD_ADDR_VAR 0 3
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30689: LD_ADDR_VAR 0 5
30693: PUSH
30694: LD_VAR 0 6
30698: PUSH
30699: LD_INT 1
30701: ARRAY
30702: PPUSH
30703: LD_VAR 0 3
30707: PPUSH
30708: CALL_OW 259
30712: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30713: LD_VAR 0 6
30717: PUSH
30718: LD_INT 1
30720: ARRAY
30721: PPUSH
30722: LD_VAR 0 2
30726: PPUSH
30727: LD_VAR 0 5
30731: PPUSH
30732: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30736: LD_VAR 0 6
30740: PUSH
30741: LD_INT 1
30743: ARRAY
30744: PPUSH
30745: LD_VAR 0 3
30749: PPUSH
30750: LD_VAR 0 4
30754: PPUSH
30755: CALL_OW 237
// end ;
30759: PPOPN 6
30761: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30762: LD_EXP 68
30766: PUSH
30767: LD_EXP 115
30771: AND
30772: IFFALSE 30851
30774: GO 30776
30776: DISABLE
30777: LD_INT 0
30779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30780: LD_ADDR_VAR 0 1
30784: PUSH
30785: LD_INT 22
30787: PUSH
30788: LD_OWVAR 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PPUSH
30811: CALL_OW 69
30815: ST_TO_ADDR
// if not tmp then
30816: LD_VAR 0 1
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 30851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30825: LD_VAR 0 1
30829: PUSH
30830: LD_INT 1
30832: PPUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 12
30842: ARRAY
30843: PPUSH
30844: LD_INT 1
30846: PPUSH
30847: CALL_OW 234
// end ;
30851: PPOPN 1
30853: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30854: LD_EXP 68
30858: PUSH
30859: LD_EXP 116
30863: AND
30864: IFFALSE 30976
30866: GO 30868
30868: DISABLE
30869: LD_INT 0
30871: PPUSH
30872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30873: LD_ADDR_VAR 0 2
30877: PUSH
30878: LD_INT 22
30880: PUSH
30881: LD_OWVAR 2
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 30
30895: PUSH
30896: LD_INT 27
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: LD_INT 26
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 30
30915: PUSH
30916: LD_INT 28
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: ST_TO_ADDR
// if not tmp then
30938: LD_VAR 0 2
30942: NOT
30943: IFFALSE 30947
// exit ;
30945: GO 30976
// for i in tmp do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: FOR_IN
30958: IFFALSE 30974
// SetLives ( i , 1 ) ;
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_INT 1
30967: PPUSH
30968: CALL_OW 234
30972: GO 30957
30974: POP
30975: POP
// end ;
30976: PPOPN 2
30978: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30979: LD_EXP 68
30983: PUSH
30984: LD_EXP 117
30988: AND
30989: IFFALSE 31276
30991: GO 30993
30993: DISABLE
30994: LD_INT 0
30996: PPUSH
30997: PPUSH
30998: PPUSH
// begin i := rand ( 1 , 7 ) ;
30999: LD_ADDR_VAR 0 1
31003: PUSH
31004: LD_INT 1
31006: PPUSH
31007: LD_INT 7
31009: PPUSH
31010: CALL_OW 12
31014: ST_TO_ADDR
// case i of 1 :
31015: LD_VAR 0 1
31019: PUSH
31020: LD_INT 1
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31038
31028: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31029: LD_STRING earthquake(getX(game), 0, 32)
31031: PPUSH
31032: CALL_OW 559
31036: GO 31276
31038: LD_INT 2
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31060
31046: POP
// begin ToLua ( displayStucuk(); ) ;
31047: LD_STRING displayStucuk();
31049: PPUSH
31050: CALL_OW 559
// ResetFog ;
31054: CALL_OW 335
// end ; 3 :
31058: GO 31276
31060: LD_INT 3
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31172
31068: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31069: LD_ADDR_VAR 0 2
31073: PUSH
31074: LD_INT 22
31076: PUSH
31077: LD_OWVAR 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 25
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PPUSH
31100: CALL_OW 69
31104: ST_TO_ADDR
// if not tmp then
31105: LD_VAR 0 2
31109: NOT
31110: IFFALSE 31114
// exit ;
31112: GO 31276
// un := tmp [ rand ( 1 , tmp ) ] ;
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_VAR 0 2
31123: PUSH
31124: LD_INT 1
31126: PPUSH
31127: LD_VAR 0 2
31131: PPUSH
31132: CALL_OW 12
31136: ARRAY
31137: ST_TO_ADDR
// if Crawls ( un ) then
31138: LD_VAR 0 3
31142: PPUSH
31143: CALL_OW 318
31147: IFFALSE 31158
// ComWalk ( un ) ;
31149: LD_VAR 0 3
31153: PPUSH
31154: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31158: LD_VAR 0 3
31162: PPUSH
31163: LD_INT 8
31165: PPUSH
31166: CALL_OW 336
// end ; 4 :
31170: GO 31276
31172: LD_INT 4
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31254
31180: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31181: LD_ADDR_VAR 0 2
31185: PUSH
31186: LD_INT 22
31188: PUSH
31189: LD_OWVAR 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 30
31200: PUSH
31201: LD_INT 29
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PPUSH
31212: CALL_OW 69
31216: ST_TO_ADDR
// if not tmp then
31217: LD_VAR 0 2
31221: NOT
31222: IFFALSE 31226
// exit ;
31224: GO 31276
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31226: LD_VAR 0 2
31230: PUSH
31231: LD_INT 1
31233: ARRAY
31234: PPUSH
31235: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31239: LD_VAR 0 2
31243: PUSH
31244: LD_INT 1
31246: ARRAY
31247: PPUSH
31248: CALL_OW 65
// end ; 5 .. 7 :
31252: GO 31276
31254: LD_INT 5
31256: DOUBLE
31257: GREATEREQUAL
31258: IFFALSE 31266
31260: LD_INT 7
31262: DOUBLE
31263: LESSEQUAL
31264: IFTRUE 31268
31266: GO 31275
31268: POP
// StreamSibBomb ; end ;
31269: CALL 27513 0 0
31273: GO 31276
31275: POP
// end ;
31276: PPOPN 3
31278: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31279: LD_EXP 68
31283: PUSH
31284: LD_EXP 118
31288: AND
31289: IFFALSE 31445
31291: GO 31293
31293: DISABLE
31294: LD_INT 0
31296: PPUSH
31297: PPUSH
31298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31299: LD_ADDR_VAR 0 2
31303: PUSH
31304: LD_INT 81
31306: PUSH
31307: LD_OWVAR 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 21
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 21
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: ST_TO_ADDR
// if not tmp then
31353: LD_VAR 0 2
31357: NOT
31358: IFFALSE 31362
// exit ;
31360: GO 31445
// p := 0 ;
31362: LD_ADDR_VAR 0 3
31366: PUSH
31367: LD_INT 0
31369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31370: LD_INT 35
31372: PPUSH
31373: CALL_OW 67
// p := p + 1 ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_VAR 0 3
31386: PUSH
31387: LD_INT 1
31389: PLUS
31390: ST_TO_ADDR
// for i in tmp do
31391: LD_ADDR_VAR 0 1
31395: PUSH
31396: LD_VAR 0 2
31400: PUSH
31401: FOR_IN
31402: IFFALSE 31433
// if GetLives ( i ) < 1000 then
31404: LD_VAR 0 1
31408: PPUSH
31409: CALL_OW 256
31413: PUSH
31414: LD_INT 1000
31416: LESS
31417: IFFALSE 31431
// SetLives ( i , 1000 ) ;
31419: LD_VAR 0 1
31423: PPUSH
31424: LD_INT 1000
31426: PPUSH
31427: CALL_OW 234
31431: GO 31401
31433: POP
31434: POP
// until p > 20 ;
31435: LD_VAR 0 3
31439: PUSH
31440: LD_INT 20
31442: GREATER
31443: IFFALSE 31370
// end ;
31445: PPOPN 3
31447: END
// every 0 0$1 trigger StreamModeActive and sTime do
31448: LD_EXP 68
31452: PUSH
31453: LD_EXP 119
31457: AND
31458: IFFALSE 31493
31460: GO 31462
31462: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31463: LD_INT 28
31465: PPUSH
31466: LD_OWVAR 2
31470: PPUSH
31471: LD_INT 2
31473: PPUSH
31474: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31478: LD_INT 30
31480: PPUSH
31481: LD_OWVAR 2
31485: PPUSH
31486: LD_INT 2
31488: PPUSH
31489: CALL_OW 322
// end ;
31493: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31494: LD_EXP 68
31498: PUSH
31499: LD_EXP 120
31503: AND
31504: IFFALSE 31625
31506: GO 31508
31508: DISABLE
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_OWVAR 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 21
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: LD_INT 23
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: PPUSH
31562: CALL_OW 69
31566: ST_TO_ADDR
// if not tmp then
31567: LD_VAR 0 2
31571: NOT
31572: IFFALSE 31576
// exit ;
31574: GO 31625
// for i in tmp do
31576: LD_ADDR_VAR 0 1
31580: PUSH
31581: LD_VAR 0 2
31585: PUSH
31586: FOR_IN
31587: IFFALSE 31623
// begin if Crawls ( i ) then
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 318
31598: IFFALSE 31609
// ComWalk ( i ) ;
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 138
// SetClass ( i , 2 ) ;
31609: LD_VAR 0 1
31613: PPUSH
31614: LD_INT 2
31616: PPUSH
31617: CALL_OW 336
// end ;
31621: GO 31586
31623: POP
31624: POP
// end ;
31625: PPOPN 2
31627: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31628: LD_EXP 68
31632: PUSH
31633: LD_EXP 121
31637: AND
31638: IFFALSE 31926
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
31646: PPUSH
31647: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31648: LD_OWVAR 2
31652: PPUSH
31653: LD_INT 9
31655: PPUSH
31656: LD_INT 1
31658: PPUSH
31659: LD_INT 1
31661: PPUSH
31662: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31666: LD_INT 9
31668: PPUSH
31669: LD_OWVAR 2
31673: PPUSH
31674: CALL_OW 343
// uc_side := 9 ;
31678: LD_ADDR_OWVAR 20
31682: PUSH
31683: LD_INT 9
31685: ST_TO_ADDR
// uc_nation := 2 ;
31686: LD_ADDR_OWVAR 21
31690: PUSH
31691: LD_INT 2
31693: ST_TO_ADDR
// hc_name := Dark Warrior ;
31694: LD_ADDR_OWVAR 26
31698: PUSH
31699: LD_STRING Dark Warrior
31701: ST_TO_ADDR
// hc_gallery :=  ;
31702: LD_ADDR_OWVAR 33
31706: PUSH
31707: LD_STRING 
31709: ST_TO_ADDR
// hc_noskilllimit := true ;
31710: LD_ADDR_OWVAR 76
31714: PUSH
31715: LD_INT 1
31717: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31718: LD_ADDR_OWVAR 31
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 30
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: LD_INT 30
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// un := CreateHuman ;
31741: LD_ADDR_VAR 0 3
31745: PUSH
31746: CALL_OW 44
31750: ST_TO_ADDR
// hc_noskilllimit := false ;
31751: LD_ADDR_OWVAR 76
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31759: LD_VAR 0 3
31763: PPUSH
31764: LD_INT 1
31766: PPUSH
31767: CALL_OW 51
// ToLua ( playRanger() ) ;
31771: LD_STRING playRanger()
31773: PPUSH
31774: CALL_OW 559
// p := 0 ;
31778: LD_ADDR_VAR 0 2
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31786: LD_INT 35
31788: PPUSH
31789: CALL_OW 67
// p := p + 1 ;
31793: LD_ADDR_VAR 0 2
31797: PUSH
31798: LD_VAR 0 2
31802: PUSH
31803: LD_INT 1
31805: PLUS
31806: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31807: LD_VAR 0 3
31811: PPUSH
31812: CALL_OW 256
31816: PUSH
31817: LD_INT 1000
31819: LESS
31820: IFFALSE 31834
// SetLives ( un , 1000 ) ;
31822: LD_VAR 0 3
31826: PPUSH
31827: LD_INT 1000
31829: PPUSH
31830: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31834: LD_VAR 0 3
31838: PPUSH
31839: LD_INT 81
31841: PUSH
31842: LD_OWVAR 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 91
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_INT 30
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PPUSH
31871: CALL_OW 69
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 74
31885: PPUSH
31886: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31890: LD_VAR 0 2
31894: PUSH
31895: LD_INT 80
31897: GREATER
31898: PUSH
31899: LD_VAR 0 3
31903: PPUSH
31904: CALL_OW 301
31908: OR
31909: IFFALSE 31786
// if un then
31911: LD_VAR 0 3
31915: IFFALSE 31926
// RemoveUnit ( un ) ;
31917: LD_VAR 0 3
31921: PPUSH
31922: CALL_OW 64
// end ;
31926: PPOPN 3
31928: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31929: LD_EXP 122
31933: IFFALSE 32049
31935: GO 31937
31937: DISABLE
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
31942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31943: LD_ADDR_VAR 0 2
31947: PUSH
31948: LD_INT 81
31950: PUSH
31951: LD_OWVAR 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 21
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PPUSH
31974: CALL_OW 69
31978: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31979: LD_STRING playComputer()
31981: PPUSH
31982: CALL_OW 559
// if not tmp then
31986: LD_VAR 0 2
31990: NOT
31991: IFFALSE 31995
// exit ;
31993: GO 32049
// for i in tmp do
31995: LD_ADDR_VAR 0 1
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: FOR_IN
32006: IFFALSE 32047
// for j := 1 to 4 do
32008: LD_ADDR_VAR 0 3
32012: PUSH
32013: DOUBLE
32014: LD_INT 1
32016: DEC
32017: ST_TO_ADDR
32018: LD_INT 4
32020: PUSH
32021: FOR_TO
32022: IFFALSE 32043
// SetSkill ( i , j , 10 ) ;
32024: LD_VAR 0 1
32028: PPUSH
32029: LD_VAR 0 3
32033: PPUSH
32034: LD_INT 10
32036: PPUSH
32037: CALL_OW 237
32041: GO 32021
32043: POP
32044: POP
32045: GO 32005
32047: POP
32048: POP
// end ;
32049: PPOPN 3
32051: END
// every 0 0$1 trigger s30 do var i , tmp ;
32052: LD_EXP 123
32056: IFFALSE 32125
32058: GO 32060
32060: DISABLE
32061: LD_INT 0
32063: PPUSH
32064: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32065: LD_ADDR_VAR 0 2
32069: PUSH
32070: LD_INT 22
32072: PUSH
32073: LD_OWVAR 2
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PPUSH
32082: CALL_OW 69
32086: ST_TO_ADDR
// if not tmp then
32087: LD_VAR 0 2
32091: NOT
32092: IFFALSE 32096
// exit ;
32094: GO 32125
// for i in tmp do
32096: LD_ADDR_VAR 0 1
32100: PUSH
32101: LD_VAR 0 2
32105: PUSH
32106: FOR_IN
32107: IFFALSE 32123
// SetLives ( i , 300 ) ;
32109: LD_VAR 0 1
32113: PPUSH
32114: LD_INT 300
32116: PPUSH
32117: CALL_OW 234
32121: GO 32106
32123: POP
32124: POP
// end ;
32125: PPOPN 2
32127: END
// every 0 0$1 trigger s60 do var i , tmp ;
32128: LD_EXP 124
32132: IFFALSE 32201
32134: GO 32136
32136: DISABLE
32137: LD_INT 0
32139: PPUSH
32140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32141: LD_ADDR_VAR 0 2
32145: PUSH
32146: LD_INT 22
32148: PUSH
32149: LD_OWVAR 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PPUSH
32158: CALL_OW 69
32162: ST_TO_ADDR
// if not tmp then
32163: LD_VAR 0 2
32167: NOT
32168: IFFALSE 32172
// exit ;
32170: GO 32201
// for i in tmp do
32172: LD_ADDR_VAR 0 1
32176: PUSH
32177: LD_VAR 0 2
32181: PUSH
32182: FOR_IN
32183: IFFALSE 32199
// SetLives ( i , 600 ) ;
32185: LD_VAR 0 1
32189: PPUSH
32190: LD_INT 600
32192: PPUSH
32193: CALL_OW 234
32197: GO 32182
32199: POP
32200: POP
// end ;
32201: PPOPN 2
32203: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32204: LD_INT 0
32206: PPUSH
// case cmd of 301 :
32207: LD_VAR 0 1
32211: PUSH
32212: LD_INT 301
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32252
32220: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32221: LD_VAR 0 6
32225: PPUSH
32226: LD_VAR 0 7
32230: PPUSH
32231: LD_VAR 0 8
32235: PPUSH
32236: LD_VAR 0 4
32240: PPUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: CALL 33453 0 5
32250: GO 32373
32252: LD_INT 302
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32297
32260: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32261: LD_VAR 0 6
32265: PPUSH
32266: LD_VAR 0 7
32270: PPUSH
32271: LD_VAR 0 8
32275: PPUSH
32276: LD_VAR 0 9
32280: PPUSH
32281: LD_VAR 0 4
32285: PPUSH
32286: LD_VAR 0 5
32290: PPUSH
32291: CALL 33544 0 6
32295: GO 32373
32297: LD_INT 303
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32342
32305: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32306: LD_VAR 0 6
32310: PPUSH
32311: LD_VAR 0 7
32315: PPUSH
32316: LD_VAR 0 8
32320: PPUSH
32321: LD_VAR 0 9
32325: PPUSH
32326: LD_VAR 0 4
32330: PPUSH
32331: LD_VAR 0 5
32335: PPUSH
32336: CALL 32378 0 6
32340: GO 32373
32342: LD_INT 304
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32372
32350: POP
// hHackTeleport ( unit , x , y ) ; end ;
32351: LD_VAR 0 2
32355: PPUSH
32356: LD_VAR 0 4
32360: PPUSH
32361: LD_VAR 0 5
32365: PPUSH
32366: CALL 34137 0 3
32370: GO 32373
32372: POP
// end ;
32373: LD_VAR 0 12
32377: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32382: LD_VAR 0 1
32386: PUSH
32387: LD_INT 1
32389: LESS
32390: PUSH
32391: LD_VAR 0 1
32395: PUSH
32396: LD_INT 3
32398: GREATER
32399: OR
32400: PUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: LD_VAR 0 6
32410: PPUSH
32411: CALL_OW 428
32415: OR
32416: IFFALSE 32420
// exit ;
32418: GO 33140
// uc_side := your_side ;
32420: LD_ADDR_OWVAR 20
32424: PUSH
32425: LD_OWVAR 2
32429: ST_TO_ADDR
// uc_nation := nation ;
32430: LD_ADDR_OWVAR 21
32434: PUSH
32435: LD_VAR 0 1
32439: ST_TO_ADDR
// bc_level = 1 ;
32440: LD_ADDR_OWVAR 43
32444: PUSH
32445: LD_INT 1
32447: ST_TO_ADDR
// case btype of 1 :
32448: LD_VAR 0 2
32452: PUSH
32453: LD_INT 1
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32472
32461: POP
// bc_type := b_depot ; 2 :
32462: LD_ADDR_OWVAR 42
32466: PUSH
32467: LD_INT 0
32469: ST_TO_ADDR
32470: GO 33084
32472: LD_INT 2
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32491
32480: POP
// bc_type := b_warehouse ; 3 :
32481: LD_ADDR_OWVAR 42
32485: PUSH
32486: LD_INT 1
32488: ST_TO_ADDR
32489: GO 33084
32491: LD_INT 3
32493: DOUBLE
32494: EQUAL
32495: IFTRUE 32499
32497: GO 32510
32499: POP
// bc_type := b_lab ; 4 .. 9 :
32500: LD_ADDR_OWVAR 42
32504: PUSH
32505: LD_INT 6
32507: ST_TO_ADDR
32508: GO 33084
32510: LD_INT 4
32512: DOUBLE
32513: GREATEREQUAL
32514: IFFALSE 32522
32516: LD_INT 9
32518: DOUBLE
32519: LESSEQUAL
32520: IFTRUE 32524
32522: GO 32576
32524: POP
// begin bc_type := b_lab_half ;
32525: LD_ADDR_OWVAR 42
32529: PUSH
32530: LD_INT 7
32532: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32533: LD_ADDR_OWVAR 44
32537: PUSH
32538: LD_INT 10
32540: PUSH
32541: LD_INT 11
32543: PUSH
32544: LD_INT 12
32546: PUSH
32547: LD_INT 15
32549: PUSH
32550: LD_INT 14
32552: PUSH
32553: LD_INT 13
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: PUSH
32564: LD_VAR 0 2
32568: PUSH
32569: LD_INT 3
32571: MINUS
32572: ARRAY
32573: ST_TO_ADDR
// end ; 10 .. 13 :
32574: GO 33084
32576: LD_INT 10
32578: DOUBLE
32579: GREATEREQUAL
32580: IFFALSE 32588
32582: LD_INT 13
32584: DOUBLE
32585: LESSEQUAL
32586: IFTRUE 32590
32588: GO 32667
32590: POP
// begin bc_type := b_lab_full ;
32591: LD_ADDR_OWVAR 42
32595: PUSH
32596: LD_INT 8
32598: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32599: LD_ADDR_OWVAR 44
32603: PUSH
32604: LD_INT 10
32606: PUSH
32607: LD_INT 12
32609: PUSH
32610: LD_INT 14
32612: PUSH
32613: LD_INT 13
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: PUSH
32622: LD_VAR 0 2
32626: PUSH
32627: LD_INT 9
32629: MINUS
32630: ARRAY
32631: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32632: LD_ADDR_OWVAR 45
32636: PUSH
32637: LD_INT 11
32639: PUSH
32640: LD_INT 15
32642: PUSH
32643: LD_INT 12
32645: PUSH
32646: LD_INT 15
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: PUSH
32655: LD_VAR 0 2
32659: PUSH
32660: LD_INT 9
32662: MINUS
32663: ARRAY
32664: ST_TO_ADDR
// end ; 14 :
32665: GO 33084
32667: LD_INT 14
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32686
32675: POP
// bc_type := b_workshop ; 15 :
32676: LD_ADDR_OWVAR 42
32680: PUSH
32681: LD_INT 2
32683: ST_TO_ADDR
32684: GO 33084
32686: LD_INT 15
32688: DOUBLE
32689: EQUAL
32690: IFTRUE 32694
32692: GO 32705
32694: POP
// bc_type := b_factory ; 16 :
32695: LD_ADDR_OWVAR 42
32699: PUSH
32700: LD_INT 3
32702: ST_TO_ADDR
32703: GO 33084
32705: LD_INT 16
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32724
32713: POP
// bc_type := b_ext_gun ; 17 :
32714: LD_ADDR_OWVAR 42
32718: PUSH
32719: LD_INT 17
32721: ST_TO_ADDR
32722: GO 33084
32724: LD_INT 17
32726: DOUBLE
32727: EQUAL
32728: IFTRUE 32732
32730: GO 32760
32732: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32733: LD_ADDR_OWVAR 42
32737: PUSH
32738: LD_INT 19
32740: PUSH
32741: LD_INT 23
32743: PUSH
32744: LD_INT 19
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: PUSH
32752: LD_VAR 0 1
32756: ARRAY
32757: ST_TO_ADDR
32758: GO 33084
32760: LD_INT 18
32762: DOUBLE
32763: EQUAL
32764: IFTRUE 32768
32766: GO 32779
32768: POP
// bc_type := b_ext_radar ; 19 :
32769: LD_ADDR_OWVAR 42
32773: PUSH
32774: LD_INT 20
32776: ST_TO_ADDR
32777: GO 33084
32779: LD_INT 19
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32798
32787: POP
// bc_type := b_ext_radio ; 20 :
32788: LD_ADDR_OWVAR 42
32792: PUSH
32793: LD_INT 22
32795: ST_TO_ADDR
32796: GO 33084
32798: LD_INT 20
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32817
32806: POP
// bc_type := b_ext_siberium ; 21 :
32807: LD_ADDR_OWVAR 42
32811: PUSH
32812: LD_INT 21
32814: ST_TO_ADDR
32815: GO 33084
32817: LD_INT 21
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32825
32823: GO 32836
32825: POP
// bc_type := b_ext_computer ; 22 :
32826: LD_ADDR_OWVAR 42
32830: PUSH
32831: LD_INT 24
32833: ST_TO_ADDR
32834: GO 33084
32836: LD_INT 22
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32844
32842: GO 32855
32844: POP
// bc_type := b_ext_track ; 23 :
32845: LD_ADDR_OWVAR 42
32849: PUSH
32850: LD_INT 16
32852: ST_TO_ADDR
32853: GO 33084
32855: LD_INT 23
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32863
32861: GO 32874
32863: POP
// bc_type := b_ext_laser ; 24 :
32864: LD_ADDR_OWVAR 42
32868: PUSH
32869: LD_INT 25
32871: ST_TO_ADDR
32872: GO 33084
32874: LD_INT 24
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32893
32882: POP
// bc_type := b_control_tower ; 25 :
32883: LD_ADDR_OWVAR 42
32887: PUSH
32888: LD_INT 36
32890: ST_TO_ADDR
32891: GO 33084
32893: LD_INT 25
32895: DOUBLE
32896: EQUAL
32897: IFTRUE 32901
32899: GO 32912
32901: POP
// bc_type := b_breastwork ; 26 :
32902: LD_ADDR_OWVAR 42
32906: PUSH
32907: LD_INT 31
32909: ST_TO_ADDR
32910: GO 33084
32912: LD_INT 26
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32931
32920: POP
// bc_type := b_bunker ; 27 :
32921: LD_ADDR_OWVAR 42
32925: PUSH
32926: LD_INT 32
32928: ST_TO_ADDR
32929: GO 33084
32931: LD_INT 27
32933: DOUBLE
32934: EQUAL
32935: IFTRUE 32939
32937: GO 32950
32939: POP
// bc_type := b_turret ; 28 :
32940: LD_ADDR_OWVAR 42
32944: PUSH
32945: LD_INT 33
32947: ST_TO_ADDR
32948: GO 33084
32950: LD_INT 28
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32969
32958: POP
// bc_type := b_armoury ; 29 :
32959: LD_ADDR_OWVAR 42
32963: PUSH
32964: LD_INT 4
32966: ST_TO_ADDR
32967: GO 33084
32969: LD_INT 29
32971: DOUBLE
32972: EQUAL
32973: IFTRUE 32977
32975: GO 32988
32977: POP
// bc_type := b_barracks ; 30 :
32978: LD_ADDR_OWVAR 42
32982: PUSH
32983: LD_INT 5
32985: ST_TO_ADDR
32986: GO 33084
32988: LD_INT 30
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 32996
32994: GO 33007
32996: POP
// bc_type := b_solar_power ; 31 :
32997: LD_ADDR_OWVAR 42
33001: PUSH
33002: LD_INT 27
33004: ST_TO_ADDR
33005: GO 33084
33007: LD_INT 31
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33026
33015: POP
// bc_type := b_oil_power ; 32 :
33016: LD_ADDR_OWVAR 42
33020: PUSH
33021: LD_INT 26
33023: ST_TO_ADDR
33024: GO 33084
33026: LD_INT 32
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33034
33032: GO 33045
33034: POP
// bc_type := b_siberite_power ; 33 :
33035: LD_ADDR_OWVAR 42
33039: PUSH
33040: LD_INT 28
33042: ST_TO_ADDR
33043: GO 33084
33045: LD_INT 33
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33053
33051: GO 33064
33053: POP
// bc_type := b_oil_mine ; 34 :
33054: LD_ADDR_OWVAR 42
33058: PUSH
33059: LD_INT 29
33061: ST_TO_ADDR
33062: GO 33084
33064: LD_INT 34
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33083
33072: POP
// bc_type := b_siberite_mine ; end ;
33073: LD_ADDR_OWVAR 42
33077: PUSH
33078: LD_INT 30
33080: ST_TO_ADDR
33081: GO 33084
33083: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33084: LD_ADDR_VAR 0 8
33088: PUSH
33089: LD_VAR 0 5
33093: PPUSH
33094: LD_VAR 0 6
33098: PPUSH
33099: LD_VAR 0 3
33103: PPUSH
33104: CALL_OW 47
33108: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33109: LD_OWVAR 42
33113: PUSH
33114: LD_INT 32
33116: PUSH
33117: LD_INT 33
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: IN
33124: IFFALSE 33140
// PlaceWeaponTurret ( b , weapon ) ;
33126: LD_VAR 0 8
33130: PPUSH
33131: LD_VAR 0 4
33135: PPUSH
33136: CALL_OW 431
// end ;
33140: LD_VAR 0 7
33144: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33145: LD_INT 0
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_INT 22
33158: PUSH
33159: LD_OWVAR 2
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 30
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 30
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PPUSH
33200: CALL_OW 69
33204: ST_TO_ADDR
// if not tmp then
33205: LD_VAR 0 4
33209: NOT
33210: IFFALSE 33214
// exit ;
33212: GO 33273
// for i in tmp do
33214: LD_ADDR_VAR 0 2
33218: PUSH
33219: LD_VAR 0 4
33223: PUSH
33224: FOR_IN
33225: IFFALSE 33271
// for j = 1 to 3 do
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: DOUBLE
33233: LD_INT 1
33235: DEC
33236: ST_TO_ADDR
33237: LD_INT 3
33239: PUSH
33240: FOR_TO
33241: IFFALSE 33267
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33243: LD_VAR 0 2
33247: PPUSH
33248: CALL_OW 274
33252: PPUSH
33253: LD_VAR 0 3
33257: PPUSH
33258: LD_INT 99999
33260: PPUSH
33261: CALL_OW 277
33265: GO 33240
33267: POP
33268: POP
33269: GO 33224
33271: POP
33272: POP
// end ;
33273: LD_VAR 0 1
33277: RET
// export function hHackSetLevel10 ; var i , j ; begin
33278: LD_INT 0
33280: PPUSH
33281: PPUSH
33282: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33283: LD_ADDR_VAR 0 2
33287: PUSH
33288: LD_INT 21
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 69
33302: PUSH
33303: FOR_IN
33304: IFFALSE 33356
// if IsSelected ( i ) then
33306: LD_VAR 0 2
33310: PPUSH
33311: CALL_OW 306
33315: IFFALSE 33354
// begin for j := 1 to 4 do
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: DOUBLE
33323: LD_INT 1
33325: DEC
33326: ST_TO_ADDR
33327: LD_INT 4
33329: PUSH
33330: FOR_TO
33331: IFFALSE 33352
// SetSkill ( i , j , 10 ) ;
33333: LD_VAR 0 2
33337: PPUSH
33338: LD_VAR 0 3
33342: PPUSH
33343: LD_INT 10
33345: PPUSH
33346: CALL_OW 237
33350: GO 33330
33352: POP
33353: POP
// end ;
33354: GO 33303
33356: POP
33357: POP
// end ;
33358: LD_VAR 0 1
33362: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
33367: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33368: LD_ADDR_VAR 0 2
33372: PUSH
33373: LD_INT 22
33375: PUSH
33376: LD_OWVAR 2
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 21
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 69
33403: PUSH
33404: FOR_IN
33405: IFFALSE 33446
// begin for j := 1 to 4 do
33407: LD_ADDR_VAR 0 3
33411: PUSH
33412: DOUBLE
33413: LD_INT 1
33415: DEC
33416: ST_TO_ADDR
33417: LD_INT 4
33419: PUSH
33420: FOR_TO
33421: IFFALSE 33442
// SetSkill ( i , j , 10 ) ;
33423: LD_VAR 0 2
33427: PPUSH
33428: LD_VAR 0 3
33432: PPUSH
33433: LD_INT 10
33435: PPUSH
33436: CALL_OW 237
33440: GO 33420
33442: POP
33443: POP
// end ;
33444: GO 33404
33446: POP
33447: POP
// end ;
33448: LD_VAR 0 1
33452: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33453: LD_INT 0
33455: PPUSH
// uc_side := your_side ;
33456: LD_ADDR_OWVAR 20
33460: PUSH
33461: LD_OWVAR 2
33465: ST_TO_ADDR
// uc_nation := nation ;
33466: LD_ADDR_OWVAR 21
33470: PUSH
33471: LD_VAR 0 1
33475: ST_TO_ADDR
// InitHc ;
33476: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33480: LD_INT 0
33482: PPUSH
33483: LD_VAR 0 2
33487: PPUSH
33488: LD_VAR 0 3
33492: PPUSH
33493: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33497: LD_VAR 0 4
33501: PPUSH
33502: LD_VAR 0 5
33506: PPUSH
33507: CALL_OW 428
33511: PUSH
33512: LD_INT 0
33514: EQUAL
33515: IFFALSE 33539
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33517: CALL_OW 44
33521: PPUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: LD_VAR 0 5
33531: PPUSH
33532: LD_INT 1
33534: PPUSH
33535: CALL_OW 48
// end ;
33539: LD_VAR 0 6
33543: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
// uc_side := your_side ;
33548: LD_ADDR_OWVAR 20
33552: PUSH
33553: LD_OWVAR 2
33557: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33558: LD_VAR 0 1
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 3
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: IN
33585: IFFALSE 33597
// uc_nation := nation_american else
33587: LD_ADDR_OWVAR 21
33591: PUSH
33592: LD_INT 1
33594: ST_TO_ADDR
33595: GO 33640
// if chassis in [ 11 , 12 , 13 , 14 ] then
33597: LD_VAR 0 1
33601: PUSH
33602: LD_INT 11
33604: PUSH
33605: LD_INT 12
33607: PUSH
33608: LD_INT 13
33610: PUSH
33611: LD_INT 14
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: IN
33620: IFFALSE 33632
// uc_nation := nation_arabian else
33622: LD_ADDR_OWVAR 21
33626: PUSH
33627: LD_INT 2
33629: ST_TO_ADDR
33630: GO 33640
// uc_nation := nation_russian ;
33632: LD_ADDR_OWVAR 21
33636: PUSH
33637: LD_INT 3
33639: ST_TO_ADDR
// vc_chassis := chassis ;
33640: LD_ADDR_OWVAR 37
33644: PUSH
33645: LD_VAR 0 1
33649: ST_TO_ADDR
// vc_engine := engine ;
33650: LD_ADDR_OWVAR 39
33654: PUSH
33655: LD_VAR 0 2
33659: ST_TO_ADDR
// vc_control := control ;
33660: LD_ADDR_OWVAR 38
33664: PUSH
33665: LD_VAR 0 3
33669: ST_TO_ADDR
// vc_weapon := weapon ;
33670: LD_ADDR_OWVAR 40
33674: PUSH
33675: LD_VAR 0 4
33679: ST_TO_ADDR
// un := CreateVehicle ;
33680: LD_ADDR_VAR 0 8
33684: PUSH
33685: CALL_OW 45
33689: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33690: LD_VAR 0 8
33694: PPUSH
33695: LD_INT 0
33697: PPUSH
33698: LD_INT 5
33700: PPUSH
33701: CALL_OW 12
33705: PPUSH
33706: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33710: LD_VAR 0 8
33714: PPUSH
33715: LD_VAR 0 5
33719: PPUSH
33720: LD_VAR 0 6
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 48
// end ;
33732: LD_VAR 0 7
33736: RET
// export hInvincible ; every 1 do
33737: GO 33739
33739: DISABLE
// hInvincible := [ ] ;
33740: LD_ADDR_EXP 125
33744: PUSH
33745: EMPTY
33746: ST_TO_ADDR
33747: END
// every 10 do var i ;
33748: GO 33750
33750: DISABLE
33751: LD_INT 0
33753: PPUSH
// begin enable ;
33754: ENABLE
// if not hInvincible then
33755: LD_EXP 125
33759: NOT
33760: IFFALSE 33764
// exit ;
33762: GO 33808
// for i in hInvincible do
33764: LD_ADDR_VAR 0 1
33768: PUSH
33769: LD_EXP 125
33773: PUSH
33774: FOR_IN
33775: IFFALSE 33806
// if GetLives ( i ) < 1000 then
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL_OW 256
33786: PUSH
33787: LD_INT 1000
33789: LESS
33790: IFFALSE 33804
// SetLives ( i , 1000 ) ;
33792: LD_VAR 0 1
33796: PPUSH
33797: LD_INT 1000
33799: PPUSH
33800: CALL_OW 234
33804: GO 33774
33806: POP
33807: POP
// end ;
33808: PPOPN 1
33810: END
// export function hHackInvincible ; var i ; begin
33811: LD_INT 0
33813: PPUSH
33814: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33815: LD_ADDR_VAR 0 2
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 21
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 21
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: PPUSH
33848: CALL_OW 69
33852: PUSH
33853: FOR_IN
33854: IFFALSE 33915
// if IsSelected ( i ) then
33856: LD_VAR 0 2
33860: PPUSH
33861: CALL_OW 306
33865: IFFALSE 33913
// begin if i in hInvincible then
33867: LD_VAR 0 2
33871: PUSH
33872: LD_EXP 125
33876: IN
33877: IFFALSE 33897
// hInvincible := hInvincible diff i else
33879: LD_ADDR_EXP 125
33883: PUSH
33884: LD_EXP 125
33888: PUSH
33889: LD_VAR 0 2
33893: DIFF
33894: ST_TO_ADDR
33895: GO 33913
// hInvincible := hInvincible union i ;
33897: LD_ADDR_EXP 125
33901: PUSH
33902: LD_EXP 125
33906: PUSH
33907: LD_VAR 0 2
33911: UNION
33912: ST_TO_ADDR
// end ;
33913: GO 33853
33915: POP
33916: POP
// end ;
33917: LD_VAR 0 1
33921: RET
// export function hHackInvisible ; var i , j ; begin
33922: LD_INT 0
33924: PPUSH
33925: PPUSH
33926: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33927: LD_ADDR_VAR 0 2
33931: PUSH
33932: LD_INT 21
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL_OW 69
33946: PUSH
33947: FOR_IN
33948: IFFALSE 33972
// if IsSelected ( i ) then
33950: LD_VAR 0 2
33954: PPUSH
33955: CALL_OW 306
33959: IFFALSE 33970
// ComForceInvisible ( i ) ;
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL_OW 496
33970: GO 33947
33972: POP
33973: POP
// end ;
33974: LD_VAR 0 1
33978: RET
// export function hHackChangeYourSide ; begin
33979: LD_INT 0
33981: PPUSH
// if your_side = 8 then
33982: LD_OWVAR 2
33986: PUSH
33987: LD_INT 8
33989: EQUAL
33990: IFFALSE 34002
// your_side := 0 else
33992: LD_ADDR_OWVAR 2
33996: PUSH
33997: LD_INT 0
33999: ST_TO_ADDR
34000: GO 34016
// your_side := your_side + 1 ;
34002: LD_ADDR_OWVAR 2
34006: PUSH
34007: LD_OWVAR 2
34011: PUSH
34012: LD_INT 1
34014: PLUS
34015: ST_TO_ADDR
// end ;
34016: LD_VAR 0 1
34020: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34021: LD_INT 0
34023: PPUSH
34024: PPUSH
34025: PPUSH
// for i in all_units do
34026: LD_ADDR_VAR 0 2
34030: PUSH
34031: LD_OWVAR 3
34035: PUSH
34036: FOR_IN
34037: IFFALSE 34115
// if IsSelected ( i ) then
34039: LD_VAR 0 2
34043: PPUSH
34044: CALL_OW 306
34048: IFFALSE 34113
// begin j := GetSide ( i ) ;
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_VAR 0 2
34059: PPUSH
34060: CALL_OW 255
34064: ST_TO_ADDR
// if j = 8 then
34065: LD_VAR 0 3
34069: PUSH
34070: LD_INT 8
34072: EQUAL
34073: IFFALSE 34085
// j := 0 else
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_INT 0
34082: ST_TO_ADDR
34083: GO 34099
// j := j + 1 ;
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_VAR 0 3
34094: PUSH
34095: LD_INT 1
34097: PLUS
34098: ST_TO_ADDR
// SetSide ( i , j ) ;
34099: LD_VAR 0 2
34103: PPUSH
34104: LD_VAR 0 3
34108: PPUSH
34109: CALL_OW 235
// end ;
34113: GO 34036
34115: POP
34116: POP
// end ;
34117: LD_VAR 0 1
34121: RET
// export function hHackFog ; begin
34122: LD_INT 0
34124: PPUSH
// FogOff ( true ) ;
34125: LD_INT 1
34127: PPUSH
34128: CALL_OW 344
// end ;
34132: LD_VAR 0 1
34136: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34137: LD_INT 0
34139: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34140: LD_VAR 0 1
34144: PPUSH
34145: LD_VAR 0 2
34149: PPUSH
34150: LD_VAR 0 3
34154: PPUSH
34155: LD_INT 1
34157: PPUSH
34158: LD_INT 1
34160: PPUSH
34161: CALL_OW 483
// CenterOnXY ( x , y ) ;
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: CALL_OW 84
// end ; end_of_file
34179: LD_VAR 0 4
34183: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34184: LD_INT 0
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34190: LD_VAR 0 1
34194: PPUSH
34195: CALL_OW 264
34199: PUSH
34200: LD_EXP 52
34204: EQUAL
34205: IFFALSE 34277
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34207: LD_INT 68
34209: PPUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 255
34219: PPUSH
34220: CALL_OW 321
34224: PUSH
34225: LD_INT 2
34227: EQUAL
34228: IFFALSE 34240
// eff := 70 else
34230: LD_ADDR_VAR 0 4
34234: PUSH
34235: LD_INT 70
34237: ST_TO_ADDR
34238: GO 34248
// eff := 30 ;
34240: LD_ADDR_VAR 0 4
34244: PUSH
34245: LD_INT 30
34247: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34248: LD_VAR 0 1
34252: PPUSH
34253: CALL_OW 250
34257: PPUSH
34258: LD_VAR 0 1
34262: PPUSH
34263: CALL_OW 251
34267: PPUSH
34268: LD_VAR 0 4
34272: PPUSH
34273: CALL_OW 495
// end ; end ;
34277: LD_VAR 0 2
34281: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34282: LD_INT 0
34284: PPUSH
// end ;
34285: LD_VAR 0 4
34289: RET
// export function SOS_Command ( cmd ) ; begin
34290: LD_INT 0
34292: PPUSH
// end ;
34293: LD_VAR 0 2
34297: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34298: LD_INT 0
34300: PPUSH
// end ;
34301: LD_VAR 0 6
34305: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34306: LD_INT 0
34308: PPUSH
34309: PPUSH
// if not vehicle or not factory then
34310: LD_VAR 0 1
34314: NOT
34315: PUSH
34316: LD_VAR 0 2
34320: NOT
34321: OR
34322: IFFALSE 34326
// exit ;
34324: GO 34557
// if factoryWaypoints >= factory then
34326: LD_EXP 126
34330: PUSH
34331: LD_VAR 0 2
34335: GREATEREQUAL
34336: IFFALSE 34557
// if factoryWaypoints [ factory ] then
34338: LD_EXP 126
34342: PUSH
34343: LD_VAR 0 2
34347: ARRAY
34348: IFFALSE 34557
// begin if GetControl ( vehicle ) = control_manual then
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 263
34359: PUSH
34360: LD_INT 1
34362: EQUAL
34363: IFFALSE 34444
// begin driver := IsDrivenBy ( vehicle ) ;
34365: LD_ADDR_VAR 0 4
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 311
34379: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34380: LD_VAR 0 4
34384: PPUSH
34385: LD_EXP 126
34389: PUSH
34390: LD_VAR 0 2
34394: ARRAY
34395: PUSH
34396: LD_INT 3
34398: ARRAY
34399: PPUSH
34400: LD_EXP 126
34404: PUSH
34405: LD_VAR 0 2
34409: ARRAY
34410: PUSH
34411: LD_INT 4
34413: ARRAY
34414: PPUSH
34415: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34419: LD_VAR 0 4
34423: PPUSH
34424: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34428: LD_VAR 0 4
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: CALL_OW 180
// end else
34442: GO 34557
// if GetControl ( vehicle ) = control_remote then
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 263
34453: PUSH
34454: LD_INT 2
34456: EQUAL
34457: IFFALSE 34518
// begin wait ( 0 0$2 ) ;
34459: LD_INT 70
34461: PPUSH
34462: CALL_OW 67
// if Connect ( vehicle ) then
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL 46781 0 1
34475: IFFALSE 34516
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_EXP 126
34486: PUSH
34487: LD_VAR 0 2
34491: ARRAY
34492: PUSH
34493: LD_INT 3
34495: ARRAY
34496: PPUSH
34497: LD_EXP 126
34501: PUSH
34502: LD_VAR 0 2
34506: ARRAY
34507: PUSH
34508: LD_INT 4
34510: ARRAY
34511: PPUSH
34512: CALL_OW 171
// end else
34516: GO 34557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34518: LD_VAR 0 1
34522: PPUSH
34523: LD_EXP 126
34527: PUSH
34528: LD_VAR 0 2
34532: ARRAY
34533: PUSH
34534: LD_INT 3
34536: ARRAY
34537: PPUSH
34538: LD_EXP 126
34542: PUSH
34543: LD_VAR 0 2
34547: ARRAY
34548: PUSH
34549: LD_INT 4
34551: ARRAY
34552: PPUSH
34553: CALL_OW 171
// end ; end ;
34557: LD_VAR 0 3
34561: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34562: LD_INT 0
34564: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34565: LD_VAR 0 1
34569: PUSH
34570: LD_INT 250
34572: EQUAL
34573: PUSH
34574: LD_VAR 0 2
34578: PPUSH
34579: CALL_OW 264
34583: PUSH
34584: LD_EXP 55
34588: EQUAL
34589: AND
34590: IFFALSE 34611
// MinerPlaceMine ( unit , x , y ) ;
34592: LD_VAR 0 2
34596: PPUSH
34597: LD_VAR 0 4
34601: PPUSH
34602: LD_VAR 0 5
34606: PPUSH
34607: CALL 37339 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34611: LD_VAR 0 1
34615: PUSH
34616: LD_INT 251
34618: EQUAL
34619: PUSH
34620: LD_VAR 0 2
34624: PPUSH
34625: CALL_OW 264
34629: PUSH
34630: LD_EXP 55
34634: EQUAL
34635: AND
34636: IFFALSE 34657
// MinerDetonateMine ( unit , x , y ) ;
34638: LD_VAR 0 2
34642: PPUSH
34643: LD_VAR 0 4
34647: PPUSH
34648: LD_VAR 0 5
34652: PPUSH
34653: CALL 37616 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34657: LD_VAR 0 1
34661: PUSH
34662: LD_INT 252
34664: EQUAL
34665: PUSH
34666: LD_VAR 0 2
34670: PPUSH
34671: CALL_OW 264
34675: PUSH
34676: LD_EXP 55
34680: EQUAL
34681: AND
34682: IFFALSE 34703
// MinerCreateMinefield ( unit , x , y ) ;
34684: LD_VAR 0 2
34688: PPUSH
34689: LD_VAR 0 4
34693: PPUSH
34694: LD_VAR 0 5
34698: PPUSH
34699: CALL 38033 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34703: LD_VAR 0 1
34707: PUSH
34708: LD_INT 253
34710: EQUAL
34711: PUSH
34712: LD_VAR 0 2
34716: PPUSH
34717: CALL_OW 257
34721: PUSH
34722: LD_INT 5
34724: EQUAL
34725: AND
34726: IFFALSE 34747
// ComBinocular ( unit , x , y ) ;
34728: LD_VAR 0 2
34732: PPUSH
34733: LD_VAR 0 4
34737: PPUSH
34738: LD_VAR 0 5
34742: PPUSH
34743: CALL 38404 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34747: LD_VAR 0 1
34751: PUSH
34752: LD_INT 254
34754: EQUAL
34755: PUSH
34756: LD_VAR 0 2
34760: PPUSH
34761: CALL_OW 264
34765: PUSH
34766: LD_EXP 50
34770: EQUAL
34771: AND
34772: PUSH
34773: LD_VAR 0 3
34777: PPUSH
34778: CALL_OW 263
34782: PUSH
34783: LD_INT 3
34785: EQUAL
34786: AND
34787: IFFALSE 34803
// HackDestroyVehicle ( unit , selectedUnit ) ;
34789: LD_VAR 0 2
34793: PPUSH
34794: LD_VAR 0 3
34798: PPUSH
34799: CALL 36699 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34803: LD_VAR 0 1
34807: PUSH
34808: LD_INT 255
34810: EQUAL
34811: PUSH
34812: LD_VAR 0 2
34816: PPUSH
34817: CALL_OW 264
34821: PUSH
34822: LD_INT 14
34824: PUSH
34825: LD_INT 53
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: IN
34832: AND
34833: PUSH
34834: LD_VAR 0 4
34838: PPUSH
34839: LD_VAR 0 5
34843: PPUSH
34844: CALL_OW 488
34848: AND
34849: IFFALSE 34873
// CutTreeXYR ( unit , x , y , 12 ) ;
34851: LD_VAR 0 2
34855: PPUSH
34856: LD_VAR 0 4
34860: PPUSH
34861: LD_VAR 0 5
34865: PPUSH
34866: LD_INT 12
34868: PPUSH
34869: CALL 35265 0 4
// if cmd = 256 then
34873: LD_VAR 0 1
34877: PUSH
34878: LD_INT 256
34880: EQUAL
34881: IFFALSE 34902
// SetFactoryWaypoint ( unit , x , y ) ;
34883: LD_VAR 0 2
34887: PPUSH
34888: LD_VAR 0 4
34892: PPUSH
34893: LD_VAR 0 5
34897: PPUSH
34898: CALL 34907 0 3
// end ;
34902: LD_VAR 0 6
34906: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34907: LD_INT 0
34909: PPUSH
34910: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34911: LD_VAR 0 1
34915: NOT
34916: PUSH
34917: LD_VAR 0 2
34921: PPUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: CALL_OW 488
34931: NOT
34932: OR
34933: PUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 266
34943: PUSH
34944: LD_INT 3
34946: NONEQUAL
34947: PUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 247
34957: PUSH
34958: LD_INT 1
34960: EQUAL
34961: NOT
34962: AND
34963: OR
34964: IFFALSE 34968
// exit ;
34966: GO 35117
// if GetType ( factory ) = unit_human then
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 247
34977: PUSH
34978: LD_INT 1
34980: EQUAL
34981: IFFALSE 34998
// factory := IsInUnit ( factory ) ;
34983: LD_ADDR_VAR 0 1
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 310
34997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 266
35007: PUSH
35008: LD_INT 3
35010: NONEQUAL
35011: IFFALSE 35015
// exit ;
35013: GO 35117
// if HexInfo ( x , y ) = factory then
35015: LD_VAR 0 2
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: CALL_OW 428
35029: PUSH
35030: LD_VAR 0 1
35034: EQUAL
35035: IFFALSE 35062
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35037: LD_ADDR_EXP 126
35041: PUSH
35042: LD_EXP 126
35046: PPUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: LD_INT 0
35054: PPUSH
35055: CALL_OW 1
35059: ST_TO_ADDR
35060: GO 35113
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35062: LD_ADDR_EXP 126
35066: PUSH
35067: LD_EXP 126
35071: PPUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 255
35086: PUSH
35087: LD_VAR 0 1
35091: PUSH
35092: LD_VAR 0 2
35096: PUSH
35097: LD_VAR 0 3
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: PPUSH
35108: CALL_OW 1
35112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35113: CALL 35122 0 0
// end ;
35117: LD_VAR 0 4
35121: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35126: LD_STRING resetFactoryWaypoint();
35128: PPUSH
35129: CALL_OW 559
// if factoryWaypoints then
35133: LD_EXP 126
35137: IFFALSE 35260
// begin for i := 1 to factoryWaypoints do
35139: LD_ADDR_VAR 0 2
35143: PUSH
35144: DOUBLE
35145: LD_INT 1
35147: DEC
35148: ST_TO_ADDR
35149: LD_EXP 126
35153: PUSH
35154: FOR_TO
35155: IFFALSE 35258
// if factoryWaypoints [ i ] then
35157: LD_EXP 126
35161: PUSH
35162: LD_VAR 0 2
35166: ARRAY
35167: IFFALSE 35256
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35169: LD_STRING setFactoryWaypointXY(
35171: PUSH
35172: LD_EXP 126
35176: PUSH
35177: LD_VAR 0 2
35181: ARRAY
35182: PUSH
35183: LD_INT 1
35185: ARRAY
35186: STR
35187: PUSH
35188: LD_STRING ,
35190: STR
35191: PUSH
35192: LD_EXP 126
35196: PUSH
35197: LD_VAR 0 2
35201: ARRAY
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: STR
35207: PUSH
35208: LD_STRING ,
35210: STR
35211: PUSH
35212: LD_EXP 126
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PUSH
35223: LD_INT 3
35225: ARRAY
35226: STR
35227: PUSH
35228: LD_STRING ,
35230: STR
35231: PUSH
35232: LD_EXP 126
35236: PUSH
35237: LD_VAR 0 2
35241: ARRAY
35242: PUSH
35243: LD_INT 4
35245: ARRAY
35246: STR
35247: PUSH
35248: LD_STRING )
35250: STR
35251: PPUSH
35252: CALL_OW 559
35256: GO 35154
35258: POP
35259: POP
// end ; end ;
35260: LD_VAR 0 1
35264: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35265: LD_INT 0
35267: PPUSH
35268: PPUSH
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35276: LD_VAR 0 1
35280: NOT
35281: PUSH
35282: LD_VAR 0 2
35286: PPUSH
35287: LD_VAR 0 3
35291: PPUSH
35292: CALL_OW 488
35296: NOT
35297: OR
35298: PUSH
35299: LD_VAR 0 4
35303: NOT
35304: OR
35305: IFFALSE 35309
// exit ;
35307: GO 35649
// list := [ ] ;
35309: LD_ADDR_VAR 0 13
35313: PUSH
35314: EMPTY
35315: ST_TO_ADDR
// if x - r < 0 then
35316: LD_VAR 0 2
35320: PUSH
35321: LD_VAR 0 4
35325: MINUS
35326: PUSH
35327: LD_INT 0
35329: LESS
35330: IFFALSE 35342
// min_x := 0 else
35332: LD_ADDR_VAR 0 7
35336: PUSH
35337: LD_INT 0
35339: ST_TO_ADDR
35340: GO 35358
// min_x := x - r ;
35342: LD_ADDR_VAR 0 7
35346: PUSH
35347: LD_VAR 0 2
35351: PUSH
35352: LD_VAR 0 4
35356: MINUS
35357: ST_TO_ADDR
// if y - r < 0 then
35358: LD_VAR 0 3
35362: PUSH
35363: LD_VAR 0 4
35367: MINUS
35368: PUSH
35369: LD_INT 0
35371: LESS
35372: IFFALSE 35384
// min_y := 0 else
35374: LD_ADDR_VAR 0 8
35378: PUSH
35379: LD_INT 0
35381: ST_TO_ADDR
35382: GO 35400
// min_y := y - r ;
35384: LD_ADDR_VAR 0 8
35388: PUSH
35389: LD_VAR 0 3
35393: PUSH
35394: LD_VAR 0 4
35398: MINUS
35399: ST_TO_ADDR
// max_x := x + r ;
35400: LD_ADDR_VAR 0 9
35404: PUSH
35405: LD_VAR 0 2
35409: PUSH
35410: LD_VAR 0 4
35414: PLUS
35415: ST_TO_ADDR
// max_y := y + r ;
35416: LD_ADDR_VAR 0 10
35420: PUSH
35421: LD_VAR 0 3
35425: PUSH
35426: LD_VAR 0 4
35430: PLUS
35431: ST_TO_ADDR
// for _x = min_x to max_x do
35432: LD_ADDR_VAR 0 11
35436: PUSH
35437: DOUBLE
35438: LD_VAR 0 7
35442: DEC
35443: ST_TO_ADDR
35444: LD_VAR 0 9
35448: PUSH
35449: FOR_TO
35450: IFFALSE 35567
// for _y = min_y to max_y do
35452: LD_ADDR_VAR 0 12
35456: PUSH
35457: DOUBLE
35458: LD_VAR 0 8
35462: DEC
35463: ST_TO_ADDR
35464: LD_VAR 0 10
35468: PUSH
35469: FOR_TO
35470: IFFALSE 35563
// begin if not ValidHex ( _x , _y ) then
35472: LD_VAR 0 11
35476: PPUSH
35477: LD_VAR 0 12
35481: PPUSH
35482: CALL_OW 488
35486: NOT
35487: IFFALSE 35491
// continue ;
35489: GO 35469
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35491: LD_VAR 0 11
35495: PPUSH
35496: LD_VAR 0 12
35500: PPUSH
35501: CALL_OW 351
35505: PUSH
35506: LD_VAR 0 11
35510: PPUSH
35511: LD_VAR 0 12
35515: PPUSH
35516: CALL_OW 554
35520: AND
35521: IFFALSE 35561
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35523: LD_ADDR_VAR 0 13
35527: PUSH
35528: LD_VAR 0 13
35532: PPUSH
35533: LD_VAR 0 13
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: PPUSH
35542: LD_VAR 0 11
35546: PUSH
35547: LD_VAR 0 12
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 2
35560: ST_TO_ADDR
// end ;
35561: GO 35469
35563: POP
35564: POP
35565: GO 35449
35567: POP
35568: POP
// if not list then
35569: LD_VAR 0 13
35573: NOT
35574: IFFALSE 35578
// exit ;
35576: GO 35649
// for i in list do
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_VAR 0 13
35587: PUSH
35588: FOR_IN
35589: IFFALSE 35647
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35591: LD_VAR 0 1
35595: PPUSH
35596: LD_STRING M
35598: PUSH
35599: LD_VAR 0 6
35603: PUSH
35604: LD_INT 1
35606: ARRAY
35607: PUSH
35608: LD_VAR 0 6
35612: PUSH
35613: LD_INT 2
35615: ARRAY
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: PPUSH
35641: CALL_OW 447
35645: GO 35588
35647: POP
35648: POP
// end ;
35649: LD_VAR 0 5
35653: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35654: LD_EXP 127
35658: NOT
35659: IFFALSE 35709
35661: GO 35663
35663: DISABLE
// begin initHack := true ;
35664: LD_ADDR_EXP 127
35668: PUSH
35669: LD_INT 1
35671: ST_TO_ADDR
// hackTanks := [ ] ;
35672: LD_ADDR_EXP 128
35676: PUSH
35677: EMPTY
35678: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35679: LD_ADDR_EXP 129
35683: PUSH
35684: EMPTY
35685: ST_TO_ADDR
// hackLimit := 3 ;
35686: LD_ADDR_EXP 130
35690: PUSH
35691: LD_INT 3
35693: ST_TO_ADDR
// hackDist := 12 ;
35694: LD_ADDR_EXP 131
35698: PUSH
35699: LD_INT 12
35701: ST_TO_ADDR
// hackCounter := [ ] ;
35702: LD_ADDR_EXP 132
35706: PUSH
35707: EMPTY
35708: ST_TO_ADDR
// end ;
35709: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35710: LD_EXP 127
35714: PUSH
35715: LD_INT 34
35717: PUSH
35718: LD_EXP 50
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PPUSH
35727: CALL_OW 69
35731: AND
35732: IFFALSE 35987
35734: GO 35736
35736: DISABLE
35737: LD_INT 0
35739: PPUSH
35740: PPUSH
// begin enable ;
35741: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35742: LD_ADDR_VAR 0 1
35746: PUSH
35747: LD_INT 34
35749: PUSH
35750: LD_EXP 50
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PPUSH
35759: CALL_OW 69
35763: PUSH
35764: FOR_IN
35765: IFFALSE 35985
// begin if not i in hackTanks then
35767: LD_VAR 0 1
35771: PUSH
35772: LD_EXP 128
35776: IN
35777: NOT
35778: IFFALSE 35861
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35780: LD_ADDR_EXP 128
35784: PUSH
35785: LD_EXP 128
35789: PPUSH
35790: LD_EXP 128
35794: PUSH
35795: LD_INT 1
35797: PLUS
35798: PPUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 1
35808: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35809: LD_ADDR_EXP 129
35813: PUSH
35814: LD_EXP 129
35818: PPUSH
35819: LD_EXP 129
35823: PUSH
35824: LD_INT 1
35826: PLUS
35827: PPUSH
35828: EMPTY
35829: PPUSH
35830: CALL_OW 1
35834: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35835: LD_ADDR_EXP 132
35839: PUSH
35840: LD_EXP 132
35844: PPUSH
35845: LD_EXP 132
35849: PUSH
35850: LD_INT 1
35852: PLUS
35853: PPUSH
35854: EMPTY
35855: PPUSH
35856: CALL_OW 1
35860: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 302
35870: NOT
35871: IFFALSE 35884
// begin HackUnlinkAll ( i ) ;
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL 35990 0 1
// continue ;
35882: GO 35764
// end ; HackCheckCapturedStatus ( i ) ;
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL 36433 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35893: LD_ADDR_VAR 0 2
35897: PUSH
35898: LD_INT 81
35900: PUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL_OW 255
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 33
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 91
35927: PUSH
35928: LD_VAR 0 1
35932: PUSH
35933: LD_EXP 131
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 50
35945: PUSH
35946: EMPTY
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: PPUSH
35955: CALL_OW 69
35959: ST_TO_ADDR
// if not tmp then
35960: LD_VAR 0 2
35964: NOT
35965: IFFALSE 35969
// continue ;
35967: GO 35764
// HackLink ( i , tmp ) ;
35969: LD_VAR 0 1
35973: PPUSH
35974: LD_VAR 0 2
35978: PPUSH
35979: CALL 36126 0 2
// end ;
35983: GO 35764
35985: POP
35986: POP
// end ;
35987: PPOPN 2
35989: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35990: LD_INT 0
35992: PPUSH
35993: PPUSH
35994: PPUSH
// if not hack in hackTanks then
35995: LD_VAR 0 1
35999: PUSH
36000: LD_EXP 128
36004: IN
36005: NOT
36006: IFFALSE 36010
// exit ;
36008: GO 36121
// index := GetElementIndex ( hackTanks , hack ) ;
36010: LD_ADDR_VAR 0 4
36014: PUSH
36015: LD_EXP 128
36019: PPUSH
36020: LD_VAR 0 1
36024: PPUSH
36025: CALL 43595 0 2
36029: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36030: LD_EXP 129
36034: PUSH
36035: LD_VAR 0 4
36039: ARRAY
36040: IFFALSE 36121
// begin for i in hackTanksCaptured [ index ] do
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_EXP 129
36051: PUSH
36052: LD_VAR 0 4
36056: ARRAY
36057: PUSH
36058: FOR_IN
36059: IFFALSE 36085
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36061: LD_VAR 0 3
36065: PUSH
36066: LD_INT 1
36068: ARRAY
36069: PPUSH
36070: LD_VAR 0 3
36074: PUSH
36075: LD_INT 2
36077: ARRAY
36078: PPUSH
36079: CALL_OW 235
36083: GO 36058
36085: POP
36086: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36087: LD_ADDR_EXP 129
36091: PUSH
36092: LD_EXP 129
36096: PPUSH
36097: LD_VAR 0 4
36101: PPUSH
36102: EMPTY
36103: PPUSH
36104: CALL_OW 1
36108: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36109: LD_VAR 0 1
36113: PPUSH
36114: LD_INT 0
36116: PPUSH
36117: CALL_OW 505
// end ; end ;
36121: LD_VAR 0 2
36125: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36126: LD_INT 0
36128: PPUSH
36129: PPUSH
36130: PPUSH
// if not hack in hackTanks or not vehicles then
36131: LD_VAR 0 1
36135: PUSH
36136: LD_EXP 128
36140: IN
36141: NOT
36142: PUSH
36143: LD_VAR 0 2
36147: NOT
36148: OR
36149: IFFALSE 36153
// exit ;
36151: GO 36428
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36153: LD_ADDR_VAR 0 2
36157: PUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: LD_VAR 0 2
36167: PPUSH
36168: LD_INT 1
36170: PPUSH
36171: LD_INT 1
36173: PPUSH
36174: CALL 44245 0 4
36178: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36179: LD_ADDR_VAR 0 5
36183: PUSH
36184: LD_EXP 128
36188: PPUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL 43595 0 2
36198: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36199: LD_EXP 129
36203: PUSH
36204: LD_VAR 0 5
36208: ARRAY
36209: PUSH
36210: LD_EXP 130
36214: LESS
36215: IFFALSE 36404
// begin for i := 1 to vehicles do
36217: LD_ADDR_VAR 0 4
36221: PUSH
36222: DOUBLE
36223: LD_INT 1
36225: DEC
36226: ST_TO_ADDR
36227: LD_VAR 0 2
36231: PUSH
36232: FOR_TO
36233: IFFALSE 36402
// begin if hackTanksCaptured [ index ] = hackLimit then
36235: LD_EXP 129
36239: PUSH
36240: LD_VAR 0 5
36244: ARRAY
36245: PUSH
36246: LD_EXP 130
36250: EQUAL
36251: IFFALSE 36255
// break ;
36253: GO 36402
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36255: LD_ADDR_EXP 132
36259: PUSH
36260: LD_EXP 132
36264: PPUSH
36265: LD_VAR 0 5
36269: PPUSH
36270: LD_EXP 132
36274: PUSH
36275: LD_VAR 0 5
36279: ARRAY
36280: PUSH
36281: LD_INT 1
36283: PLUS
36284: PPUSH
36285: CALL_OW 1
36289: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36290: LD_ADDR_EXP 129
36294: PUSH
36295: LD_EXP 129
36299: PPUSH
36300: LD_VAR 0 5
36304: PUSH
36305: LD_EXP 129
36309: PUSH
36310: LD_VAR 0 5
36314: ARRAY
36315: PUSH
36316: LD_INT 1
36318: PLUS
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PPUSH
36324: LD_VAR 0 2
36328: PUSH
36329: LD_VAR 0 4
36333: ARRAY
36334: PUSH
36335: LD_VAR 0 2
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: PPUSH
36346: CALL_OW 255
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PPUSH
36355: CALL 43810 0 3
36359: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36360: LD_VAR 0 2
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PPUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL_OW 255
36380: PPUSH
36381: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36385: LD_VAR 0 2
36389: PUSH
36390: LD_VAR 0 4
36394: ARRAY
36395: PPUSH
36396: CALL_OW 141
// end ;
36400: GO 36232
36402: POP
36403: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36404: LD_VAR 0 1
36408: PPUSH
36409: LD_EXP 129
36413: PUSH
36414: LD_VAR 0 5
36418: ARRAY
36419: PUSH
36420: LD_INT 0
36422: PLUS
36423: PPUSH
36424: CALL_OW 505
// end ;
36428: LD_VAR 0 3
36432: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
// if not hack in hackTanks then
36439: LD_VAR 0 1
36443: PUSH
36444: LD_EXP 128
36448: IN
36449: NOT
36450: IFFALSE 36454
// exit ;
36452: GO 36694
// index := GetElementIndex ( hackTanks , hack ) ;
36454: LD_ADDR_VAR 0 4
36458: PUSH
36459: LD_EXP 128
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: CALL 43595 0 2
36473: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: DOUBLE
36480: LD_EXP 129
36484: PUSH
36485: LD_VAR 0 4
36489: ARRAY
36490: INC
36491: ST_TO_ADDR
36492: LD_INT 1
36494: PUSH
36495: FOR_DOWNTO
36496: IFFALSE 36668
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36498: LD_ADDR_VAR 0 5
36502: PUSH
36503: LD_EXP 129
36507: PUSH
36508: LD_VAR 0 4
36512: ARRAY
36513: PUSH
36514: LD_VAR 0 3
36518: ARRAY
36519: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36520: LD_VAR 0 5
36524: PUSH
36525: LD_INT 1
36527: ARRAY
36528: PPUSH
36529: CALL_OW 302
36533: NOT
36534: PUSH
36535: LD_VAR 0 5
36539: PUSH
36540: LD_INT 1
36542: ARRAY
36543: PPUSH
36544: CALL_OW 255
36548: PUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: CALL_OW 255
36558: NONEQUAL
36559: OR
36560: IFFALSE 36666
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36562: LD_VAR 0 5
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PPUSH
36571: CALL_OW 305
36575: PUSH
36576: LD_VAR 0 5
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PPUSH
36585: CALL_OW 255
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 255
36599: EQUAL
36600: AND
36601: IFFALSE 36625
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36603: LD_VAR 0 5
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_INT 2
36619: ARRAY
36620: PPUSH
36621: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36625: LD_ADDR_EXP 129
36629: PUSH
36630: LD_EXP 129
36634: PPUSH
36635: LD_VAR 0 4
36639: PPUSH
36640: LD_EXP 129
36644: PUSH
36645: LD_VAR 0 4
36649: ARRAY
36650: PPUSH
36651: LD_VAR 0 3
36655: PPUSH
36656: CALL_OW 3
36660: PPUSH
36661: CALL_OW 1
36665: ST_TO_ADDR
// end ; end ;
36666: GO 36495
36668: POP
36669: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36670: LD_VAR 0 1
36674: PPUSH
36675: LD_EXP 129
36679: PUSH
36680: LD_VAR 0 4
36684: ARRAY
36685: PUSH
36686: LD_INT 0
36688: PLUS
36689: PPUSH
36690: CALL_OW 505
// end ;
36694: LD_VAR 0 2
36698: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36699: LD_INT 0
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
// if not hack in hackTanks then
36705: LD_VAR 0 1
36709: PUSH
36710: LD_EXP 128
36714: IN
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 36805
// index := GetElementIndex ( hackTanks , hack ) ;
36720: LD_ADDR_VAR 0 5
36724: PUSH
36725: LD_EXP 128
36729: PPUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL 43595 0 2
36739: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36740: LD_ADDR_VAR 0 4
36744: PUSH
36745: DOUBLE
36746: LD_INT 1
36748: DEC
36749: ST_TO_ADDR
36750: LD_EXP 129
36754: PUSH
36755: LD_VAR 0 5
36759: ARRAY
36760: PUSH
36761: FOR_TO
36762: IFFALSE 36803
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36764: LD_EXP 129
36768: PUSH
36769: LD_VAR 0 5
36773: ARRAY
36774: PUSH
36775: LD_VAR 0 4
36779: ARRAY
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: PUSH
36785: LD_VAR 0 2
36789: EQUAL
36790: IFFALSE 36801
// KillUnit ( vehicle ) ;
36792: LD_VAR 0 2
36796: PPUSH
36797: CALL_OW 66
36801: GO 36761
36803: POP
36804: POP
// end ;
36805: LD_VAR 0 3
36809: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36810: LD_EXP 133
36814: NOT
36815: IFFALSE 36850
36817: GO 36819
36819: DISABLE
// begin initMiner := true ;
36820: LD_ADDR_EXP 133
36824: PUSH
36825: LD_INT 1
36827: ST_TO_ADDR
// minersList := [ ] ;
36828: LD_ADDR_EXP 134
36832: PUSH
36833: EMPTY
36834: ST_TO_ADDR
// minerMinesList := [ ] ;
36835: LD_ADDR_EXP 135
36839: PUSH
36840: EMPTY
36841: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36842: LD_ADDR_EXP 136
36846: PUSH
36847: LD_INT 5
36849: ST_TO_ADDR
// end ;
36850: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36851: LD_EXP 133
36855: PUSH
36856: LD_INT 34
36858: PUSH
36859: LD_EXP 55
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PPUSH
36868: CALL_OW 69
36872: AND
36873: IFFALSE 37336
36875: GO 36877
36877: DISABLE
36878: LD_INT 0
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
// begin enable ;
36884: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36885: LD_ADDR_VAR 0 1
36889: PUSH
36890: LD_INT 34
36892: PUSH
36893: LD_EXP 55
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PPUSH
36902: CALL_OW 69
36906: PUSH
36907: FOR_IN
36908: IFFALSE 36980
// begin if not i in minersList then
36910: LD_VAR 0 1
36914: PUSH
36915: LD_EXP 134
36919: IN
36920: NOT
36921: IFFALSE 36978
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36923: LD_ADDR_EXP 134
36927: PUSH
36928: LD_EXP 134
36932: PPUSH
36933: LD_EXP 134
36937: PUSH
36938: LD_INT 1
36940: PLUS
36941: PPUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 1
36951: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36952: LD_ADDR_EXP 135
36956: PUSH
36957: LD_EXP 135
36961: PPUSH
36962: LD_EXP 135
36966: PUSH
36967: LD_INT 1
36969: PLUS
36970: PPUSH
36971: EMPTY
36972: PPUSH
36973: CALL_OW 1
36977: ST_TO_ADDR
// end end ;
36978: GO 36907
36980: POP
36981: POP
// for i := minerMinesList downto 1 do
36982: LD_ADDR_VAR 0 1
36986: PUSH
36987: DOUBLE
36988: LD_EXP 135
36992: INC
36993: ST_TO_ADDR
36994: LD_INT 1
36996: PUSH
36997: FOR_DOWNTO
36998: IFFALSE 37334
// begin if IsLive ( minersList [ i ] ) then
37000: LD_EXP 134
37004: PUSH
37005: LD_VAR 0 1
37009: ARRAY
37010: PPUSH
37011: CALL_OW 300
37015: IFFALSE 37043
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37017: LD_EXP 134
37021: PUSH
37022: LD_VAR 0 1
37026: ARRAY
37027: PPUSH
37028: LD_EXP 135
37032: PUSH
37033: LD_VAR 0 1
37037: ARRAY
37038: PPUSH
37039: CALL_OW 505
// if not minerMinesList [ i ] then
37043: LD_EXP 135
37047: PUSH
37048: LD_VAR 0 1
37052: ARRAY
37053: NOT
37054: IFFALSE 37058
// continue ;
37056: GO 36997
// for j := minerMinesList [ i ] downto 1 do
37058: LD_ADDR_VAR 0 2
37062: PUSH
37063: DOUBLE
37064: LD_EXP 135
37068: PUSH
37069: LD_VAR 0 1
37073: ARRAY
37074: INC
37075: ST_TO_ADDR
37076: LD_INT 1
37078: PUSH
37079: FOR_DOWNTO
37080: IFFALSE 37330
// begin side := GetSide ( minersList [ i ] ) ;
37082: LD_ADDR_VAR 0 3
37086: PUSH
37087: LD_EXP 134
37091: PUSH
37092: LD_VAR 0 1
37096: ARRAY
37097: PPUSH
37098: CALL_OW 255
37102: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37103: LD_ADDR_VAR 0 4
37107: PUSH
37108: LD_EXP 135
37112: PUSH
37113: LD_VAR 0 1
37117: ARRAY
37118: PUSH
37119: LD_VAR 0 2
37123: ARRAY
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PPUSH
37129: LD_EXP 135
37133: PUSH
37134: LD_VAR 0 1
37138: ARRAY
37139: PUSH
37140: LD_VAR 0 2
37144: ARRAY
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: PPUSH
37150: CALL_OW 428
37154: ST_TO_ADDR
// if not tmp then
37155: LD_VAR 0 4
37159: NOT
37160: IFFALSE 37164
// continue ;
37162: GO 37079
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37164: LD_VAR 0 4
37168: PUSH
37169: LD_INT 81
37171: PUSH
37172: LD_VAR 0 3
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PPUSH
37181: CALL_OW 69
37185: IN
37186: PUSH
37187: LD_EXP 135
37191: PUSH
37192: LD_VAR 0 1
37196: ARRAY
37197: PUSH
37198: LD_VAR 0 2
37202: ARRAY
37203: PUSH
37204: LD_INT 1
37206: ARRAY
37207: PPUSH
37208: LD_EXP 135
37212: PUSH
37213: LD_VAR 0 1
37217: ARRAY
37218: PUSH
37219: LD_VAR 0 2
37223: ARRAY
37224: PUSH
37225: LD_INT 2
37227: ARRAY
37228: PPUSH
37229: CALL_OW 458
37233: AND
37234: IFFALSE 37328
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37236: LD_EXP 135
37240: PUSH
37241: LD_VAR 0 1
37245: ARRAY
37246: PUSH
37247: LD_VAR 0 2
37251: ARRAY
37252: PUSH
37253: LD_INT 1
37255: ARRAY
37256: PPUSH
37257: LD_EXP 135
37261: PUSH
37262: LD_VAR 0 1
37266: ARRAY
37267: PUSH
37268: LD_VAR 0 2
37272: ARRAY
37273: PUSH
37274: LD_INT 2
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 3
37282: PPUSH
37283: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37287: LD_ADDR_EXP 135
37291: PUSH
37292: LD_EXP 135
37296: PPUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: LD_EXP 135
37306: PUSH
37307: LD_VAR 0 1
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 2
37317: PPUSH
37318: CALL_OW 3
37322: PPUSH
37323: CALL_OW 1
37327: ST_TO_ADDR
// end ; end ;
37328: GO 37079
37330: POP
37331: POP
// end ;
37332: GO 36997
37334: POP
37335: POP
// end ;
37336: PPOPN 4
37338: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37339: LD_INT 0
37341: PPUSH
37342: PPUSH
// result := false ;
37343: LD_ADDR_VAR 0 4
37347: PUSH
37348: LD_INT 0
37350: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 264
37360: PUSH
37361: LD_EXP 55
37365: EQUAL
37366: NOT
37367: IFFALSE 37371
// exit ;
37369: GO 37611
// index := GetElementIndex ( minersList , unit ) ;
37371: LD_ADDR_VAR 0 5
37375: PUSH
37376: LD_EXP 134
37380: PPUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL 43595 0 2
37390: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37391: LD_EXP 135
37395: PUSH
37396: LD_VAR 0 5
37400: ARRAY
37401: PUSH
37402: LD_EXP 136
37406: GREATEREQUAL
37407: IFFALSE 37411
// exit ;
37409: GO 37611
// ComMoveXY ( unit , x , y ) ;
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_VAR 0 2
37420: PPUSH
37421: LD_VAR 0 3
37425: PPUSH
37426: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37430: LD_INT 35
37432: PPUSH
37433: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37437: LD_VAR 0 1
37441: PPUSH
37442: LD_VAR 0 2
37446: PPUSH
37447: LD_VAR 0 3
37451: PPUSH
37452: CALL 74314 0 3
37456: NOT
37457: PUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: CALL_OW 314
37467: AND
37468: IFFALSE 37472
// exit ;
37470: GO 37611
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37472: LD_VAR 0 2
37476: PPUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 428
37486: PUSH
37487: LD_VAR 0 1
37491: EQUAL
37492: PUSH
37493: LD_VAR 0 1
37497: PPUSH
37498: CALL_OW 314
37502: NOT
37503: AND
37504: IFFALSE 37430
// PlaySoundXY ( x , y , PlantMine ) ;
37506: LD_VAR 0 2
37510: PPUSH
37511: LD_VAR 0 3
37515: PPUSH
37516: LD_STRING PlantMine
37518: PPUSH
37519: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37523: LD_VAR 0 2
37527: PPUSH
37528: LD_VAR 0 3
37532: PPUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 255
37542: PPUSH
37543: LD_INT 0
37545: PPUSH
37546: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37550: LD_ADDR_EXP 135
37554: PUSH
37555: LD_EXP 135
37559: PPUSH
37560: LD_VAR 0 5
37564: PUSH
37565: LD_EXP 135
37569: PUSH
37570: LD_VAR 0 5
37574: ARRAY
37575: PUSH
37576: LD_INT 1
37578: PLUS
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PPUSH
37584: LD_VAR 0 2
37588: PUSH
37589: LD_VAR 0 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL 43810 0 3
37602: ST_TO_ADDR
// result := true ;
37603: LD_ADDR_VAR 0 4
37607: PUSH
37608: LD_INT 1
37610: ST_TO_ADDR
// end ;
37611: LD_VAR 0 4
37615: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37616: LD_INT 0
37618: PPUSH
37619: PPUSH
37620: PPUSH
// if not unit in minersList then
37621: LD_VAR 0 1
37625: PUSH
37626: LD_EXP 134
37630: IN
37631: NOT
37632: IFFALSE 37636
// exit ;
37634: GO 38028
// index := GetElementIndex ( minersList , unit ) ;
37636: LD_ADDR_VAR 0 6
37640: PUSH
37641: LD_EXP 134
37645: PPUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL 43595 0 2
37655: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37656: LD_ADDR_VAR 0 5
37660: PUSH
37661: DOUBLE
37662: LD_EXP 135
37666: PUSH
37667: LD_VAR 0 6
37671: ARRAY
37672: INC
37673: ST_TO_ADDR
37674: LD_INT 1
37676: PUSH
37677: FOR_DOWNTO
37678: IFFALSE 37839
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37680: LD_EXP 135
37684: PUSH
37685: LD_VAR 0 6
37689: ARRAY
37690: PUSH
37691: LD_VAR 0 5
37695: ARRAY
37696: PUSH
37697: LD_INT 1
37699: ARRAY
37700: PUSH
37701: LD_VAR 0 2
37705: EQUAL
37706: PUSH
37707: LD_EXP 135
37711: PUSH
37712: LD_VAR 0 6
37716: ARRAY
37717: PUSH
37718: LD_VAR 0 5
37722: ARRAY
37723: PUSH
37724: LD_INT 2
37726: ARRAY
37727: PUSH
37728: LD_VAR 0 3
37732: EQUAL
37733: AND
37734: IFFALSE 37837
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37736: LD_EXP 135
37740: PUSH
37741: LD_VAR 0 6
37745: ARRAY
37746: PUSH
37747: LD_VAR 0 5
37751: ARRAY
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PPUSH
37757: LD_EXP 135
37761: PUSH
37762: LD_VAR 0 6
37766: ARRAY
37767: PUSH
37768: LD_VAR 0 5
37772: ARRAY
37773: PUSH
37774: LD_INT 2
37776: ARRAY
37777: PPUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 255
37787: PPUSH
37788: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37792: LD_ADDR_EXP 135
37796: PUSH
37797: LD_EXP 135
37801: PPUSH
37802: LD_VAR 0 6
37806: PPUSH
37807: LD_EXP 135
37811: PUSH
37812: LD_VAR 0 6
37816: ARRAY
37817: PPUSH
37818: LD_VAR 0 5
37822: PPUSH
37823: CALL_OW 3
37827: PPUSH
37828: CALL_OW 1
37832: ST_TO_ADDR
// exit ;
37833: POP
37834: POP
37835: GO 38028
// end ; end ;
37837: GO 37677
37839: POP
37840: POP
// for i := minerMinesList [ index ] downto 1 do
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: DOUBLE
37847: LD_EXP 135
37851: PUSH
37852: LD_VAR 0 6
37856: ARRAY
37857: INC
37858: ST_TO_ADDR
37859: LD_INT 1
37861: PUSH
37862: FOR_DOWNTO
37863: IFFALSE 38026
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37865: LD_EXP 135
37869: PUSH
37870: LD_VAR 0 6
37874: ARRAY
37875: PUSH
37876: LD_VAR 0 5
37880: ARRAY
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PPUSH
37886: LD_EXP 135
37890: PUSH
37891: LD_VAR 0 6
37895: ARRAY
37896: PUSH
37897: LD_VAR 0 5
37901: ARRAY
37902: PUSH
37903: LD_INT 2
37905: ARRAY
37906: PPUSH
37907: LD_VAR 0 2
37911: PPUSH
37912: LD_VAR 0 3
37916: PPUSH
37917: CALL_OW 298
37921: PUSH
37922: LD_INT 6
37924: LESS
37925: IFFALSE 38024
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37927: LD_EXP 135
37931: PUSH
37932: LD_VAR 0 6
37936: ARRAY
37937: PUSH
37938: LD_VAR 0 5
37942: ARRAY
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: PPUSH
37948: LD_EXP 135
37952: PUSH
37953: LD_VAR 0 6
37957: ARRAY
37958: PUSH
37959: LD_VAR 0 5
37963: ARRAY
37964: PUSH
37965: LD_INT 2
37967: ARRAY
37968: PPUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: CALL_OW 255
37978: PPUSH
37979: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37983: LD_ADDR_EXP 135
37987: PUSH
37988: LD_EXP 135
37992: PPUSH
37993: LD_VAR 0 6
37997: PPUSH
37998: LD_EXP 135
38002: PUSH
38003: LD_VAR 0 6
38007: ARRAY
38008: PPUSH
38009: LD_VAR 0 5
38013: PPUSH
38014: CALL_OW 3
38018: PPUSH
38019: CALL_OW 1
38023: ST_TO_ADDR
// end ; end ;
38024: GO 37862
38026: POP
38027: POP
// end ;
38028: LD_VAR 0 4
38032: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38033: LD_INT 0
38035: PPUSH
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 264
38053: PUSH
38054: LD_EXP 55
38058: EQUAL
38059: NOT
38060: PUSH
38061: LD_VAR 0 1
38065: PUSH
38066: LD_EXP 134
38070: IN
38071: NOT
38072: OR
38073: IFFALSE 38077
// exit ;
38075: GO 38399
// index := GetElementIndex ( minersList , unit ) ;
38077: LD_ADDR_VAR 0 6
38081: PUSH
38082: LD_EXP 134
38086: PPUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL 43595 0 2
38096: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38097: LD_ADDR_VAR 0 8
38101: PUSH
38102: LD_EXP 136
38106: PUSH
38107: LD_EXP 135
38111: PUSH
38112: LD_VAR 0 6
38116: ARRAY
38117: MINUS
38118: ST_TO_ADDR
// if not minesFreeAmount then
38119: LD_VAR 0 8
38123: NOT
38124: IFFALSE 38128
// exit ;
38126: GO 38399
// tmp := [ ] ;
38128: LD_ADDR_VAR 0 7
38132: PUSH
38133: EMPTY
38134: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: DOUBLE
38141: LD_INT 1
38143: DEC
38144: ST_TO_ADDR
38145: LD_VAR 0 8
38149: PUSH
38150: FOR_TO
38151: IFFALSE 38346
// begin _d := rand ( 0 , 5 ) ;
38153: LD_ADDR_VAR 0 11
38157: PUSH
38158: LD_INT 0
38160: PPUSH
38161: LD_INT 5
38163: PPUSH
38164: CALL_OW 12
38168: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38169: LD_ADDR_VAR 0 12
38173: PUSH
38174: LD_INT 2
38176: PPUSH
38177: LD_INT 6
38179: PPUSH
38180: CALL_OW 12
38184: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38185: LD_ADDR_VAR 0 9
38189: PUSH
38190: LD_VAR 0 2
38194: PPUSH
38195: LD_VAR 0 11
38199: PPUSH
38200: LD_VAR 0 12
38204: PPUSH
38205: CALL_OW 272
38209: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38210: LD_ADDR_VAR 0 10
38214: PUSH
38215: LD_VAR 0 3
38219: PPUSH
38220: LD_VAR 0 11
38224: PPUSH
38225: LD_VAR 0 12
38229: PPUSH
38230: CALL_OW 273
38234: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38235: LD_VAR 0 9
38239: PPUSH
38240: LD_VAR 0 10
38244: PPUSH
38245: CALL_OW 488
38249: PUSH
38250: LD_VAR 0 9
38254: PUSH
38255: LD_VAR 0 10
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_VAR 0 7
38268: IN
38269: NOT
38270: AND
38271: PUSH
38272: LD_VAR 0 9
38276: PPUSH
38277: LD_VAR 0 10
38281: PPUSH
38282: CALL_OW 458
38286: NOT
38287: AND
38288: IFFALSE 38330
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38290: LD_ADDR_VAR 0 7
38294: PUSH
38295: LD_VAR 0 7
38299: PPUSH
38300: LD_VAR 0 7
38304: PUSH
38305: LD_INT 1
38307: PLUS
38308: PPUSH
38309: LD_VAR 0 9
38313: PUSH
38314: LD_VAR 0 10
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PPUSH
38323: CALL_OW 1
38327: ST_TO_ADDR
38328: GO 38344
// i := i - 1 ;
38330: LD_ADDR_VAR 0 5
38334: PUSH
38335: LD_VAR 0 5
38339: PUSH
38340: LD_INT 1
38342: MINUS
38343: ST_TO_ADDR
// end ;
38344: GO 38150
38346: POP
38347: POP
// for i in tmp do
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_VAR 0 7
38357: PUSH
38358: FOR_IN
38359: IFFALSE 38397
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38361: LD_VAR 0 1
38365: PPUSH
38366: LD_VAR 0 5
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 5
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: PPUSH
38384: CALL 37339 0 3
38388: NOT
38389: IFFALSE 38395
// exit ;
38391: POP
38392: POP
38393: GO 38399
38395: GO 38358
38397: POP
38398: POP
// end ;
38399: LD_VAR 0 4
38403: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38404: LD_INT 0
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
// if not GetClass ( unit ) = class_sniper then
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL_OW 257
38422: PUSH
38423: LD_INT 5
38425: EQUAL
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 38819
// dist := 8 ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_INT 8
38438: ST_TO_ADDR
// viewRange := 12 ;
38439: LD_ADDR_VAR 0 7
38443: PUSH
38444: LD_INT 12
38446: ST_TO_ADDR
// side := GetSide ( unit ) ;
38447: LD_ADDR_VAR 0 6
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 255
38461: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38462: LD_INT 61
38464: PPUSH
38465: LD_VAR 0 6
38469: PPUSH
38470: CALL_OW 321
38474: PUSH
38475: LD_INT 2
38477: EQUAL
38478: IFFALSE 38488
// viewRange := 16 ;
38480: LD_ADDR_VAR 0 7
38484: PUSH
38485: LD_INT 16
38487: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_VAR 0 2
38497: PPUSH
38498: LD_VAR 0 3
38502: PPUSH
38503: CALL_OW 297
38507: PUSH
38508: LD_VAR 0 5
38512: GREATER
38513: IFFALSE 38592
// begin ComMoveXY ( unit , x , y ) ;
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38534: LD_INT 35
38536: PPUSH
38537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38541: LD_VAR 0 1
38545: PPUSH
38546: LD_VAR 0 2
38550: PPUSH
38551: LD_VAR 0 3
38555: PPUSH
38556: CALL 74314 0 3
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 38819
// until GetDistUnitXY ( unit , x , y ) < dist ;
38565: LD_VAR 0 1
38569: PPUSH
38570: LD_VAR 0 2
38574: PPUSH
38575: LD_VAR 0 3
38579: PPUSH
38580: CALL_OW 297
38584: PUSH
38585: LD_VAR 0 5
38589: LESS
38590: IFFALSE 38534
// end ; ComTurnXY ( unit , x , y ) ;
38592: LD_VAR 0 1
38596: PPUSH
38597: LD_VAR 0 2
38601: PPUSH
38602: LD_VAR 0 3
38606: PPUSH
38607: CALL_OW 118
// wait ( 5 ) ;
38611: LD_INT 5
38613: PPUSH
38614: CALL_OW 67
// _d := GetDir ( unit ) ;
38618: LD_ADDR_VAR 0 10
38622: PUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 254
38632: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38633: LD_ADDR_VAR 0 8
38637: PUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 250
38647: PPUSH
38648: LD_VAR 0 10
38652: PPUSH
38653: LD_VAR 0 5
38657: PPUSH
38658: CALL_OW 272
38662: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38663: LD_ADDR_VAR 0 9
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 251
38677: PPUSH
38678: LD_VAR 0 10
38682: PPUSH
38683: LD_VAR 0 5
38687: PPUSH
38688: CALL_OW 273
38692: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38693: LD_VAR 0 8
38697: PPUSH
38698: LD_VAR 0 9
38702: PPUSH
38703: CALL_OW 488
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38819
// ComAnimCustom ( unit , 1 ) ;
38712: LD_VAR 0 1
38716: PPUSH
38717: LD_INT 1
38719: PPUSH
38720: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38724: LD_VAR 0 8
38728: PPUSH
38729: LD_VAR 0 9
38733: PPUSH
38734: LD_VAR 0 6
38738: PPUSH
38739: LD_VAR 0 7
38743: PPUSH
38744: CALL_OW 330
// repeat wait ( 1 ) ;
38748: LD_INT 1
38750: PPUSH
38751: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 316
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 314
38774: OR
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 302
38785: NOT
38786: OR
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 301
38797: OR
38798: IFFALSE 38748
// RemoveSeeing ( _x , _y , side ) ;
38800: LD_VAR 0 8
38804: PPUSH
38805: LD_VAR 0 9
38809: PPUSH
38810: LD_VAR 0 6
38814: PPUSH
38815: CALL_OW 331
// end ; end_of_file
38819: LD_VAR 0 4
38823: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38824: LD_INT 0
38826: PPUSH
38827: PPUSH
// if exist_mode then
38828: LD_VAR 0 2
38832: IFFALSE 38857
// unit := CreateCharacter ( prefix & ident ) else
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 3
38843: PUSH
38844: LD_VAR 0 1
38848: STR
38849: PPUSH
38850: CALL_OW 34
38854: ST_TO_ADDR
38855: GO 38872
// unit := NewCharacter ( ident ) ;
38857: LD_ADDR_VAR 0 5
38861: PUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 25
38871: ST_TO_ADDR
// result := unit ;
38872: LD_ADDR_VAR 0 4
38876: PUSH
38877: LD_VAR 0 5
38881: ST_TO_ADDR
// end ;
38882: LD_VAR 0 4
38886: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38887: LD_INT 0
38889: PPUSH
38890: PPUSH
// if not side or not nation then
38891: LD_VAR 0 1
38895: NOT
38896: PUSH
38897: LD_VAR 0 2
38901: NOT
38902: OR
38903: IFFALSE 38907
// exit ;
38905: GO 39675
// case nation of nation_american :
38907: LD_VAR 0 2
38911: PUSH
38912: LD_INT 1
38914: DOUBLE
38915: EQUAL
38916: IFTRUE 38920
38918: GO 39134
38920: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38921: LD_ADDR_VAR 0 4
38925: PUSH
38926: LD_INT 35
38928: PUSH
38929: LD_INT 45
38931: PUSH
38932: LD_INT 46
38934: PUSH
38935: LD_INT 47
38937: PUSH
38938: LD_INT 82
38940: PUSH
38941: LD_INT 83
38943: PUSH
38944: LD_INT 84
38946: PUSH
38947: LD_INT 85
38949: PUSH
38950: LD_INT 86
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 6
38961: PUSH
38962: LD_INT 15
38964: PUSH
38965: LD_INT 16
38967: PUSH
38968: LD_INT 7
38970: PUSH
38971: LD_INT 12
38973: PUSH
38974: LD_INT 13
38976: PUSH
38977: LD_INT 10
38979: PUSH
38980: LD_INT 14
38982: PUSH
38983: LD_INT 20
38985: PUSH
38986: LD_INT 21
38988: PUSH
38989: LD_INT 22
38991: PUSH
38992: LD_INT 25
38994: PUSH
38995: LD_INT 32
38997: PUSH
38998: LD_INT 27
39000: PUSH
39001: LD_INT 36
39003: PUSH
39004: LD_INT 69
39006: PUSH
39007: LD_INT 39
39009: PUSH
39010: LD_INT 34
39012: PUSH
39013: LD_INT 40
39015: PUSH
39016: LD_INT 48
39018: PUSH
39019: LD_INT 49
39021: PUSH
39022: LD_INT 50
39024: PUSH
39025: LD_INT 51
39027: PUSH
39028: LD_INT 52
39030: PUSH
39031: LD_INT 53
39033: PUSH
39034: LD_INT 54
39036: PUSH
39037: LD_INT 55
39039: PUSH
39040: LD_INT 56
39042: PUSH
39043: LD_INT 57
39045: PUSH
39046: LD_INT 58
39048: PUSH
39049: LD_INT 59
39051: PUSH
39052: LD_INT 60
39054: PUSH
39055: LD_INT 61
39057: PUSH
39058: LD_INT 62
39060: PUSH
39061: LD_INT 80
39063: PUSH
39064: LD_INT 82
39066: PUSH
39067: LD_INT 83
39069: PUSH
39070: LD_INT 84
39072: PUSH
39073: LD_INT 85
39075: PUSH
39076: LD_INT 86
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
39132: GO 39599
39134: LD_INT 2
39136: DOUBLE
39137: EQUAL
39138: IFTRUE 39142
39140: GO 39368
39142: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39143: LD_ADDR_VAR 0 4
39147: PUSH
39148: LD_INT 35
39150: PUSH
39151: LD_INT 45
39153: PUSH
39154: LD_INT 46
39156: PUSH
39157: LD_INT 47
39159: PUSH
39160: LD_INT 82
39162: PUSH
39163: LD_INT 83
39165: PUSH
39166: LD_INT 84
39168: PUSH
39169: LD_INT 85
39171: PUSH
39172: LD_INT 87
39174: PUSH
39175: LD_INT 70
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 11
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: LD_INT 5
39192: PUSH
39193: LD_INT 6
39195: PUSH
39196: LD_INT 15
39198: PUSH
39199: LD_INT 18
39201: PUSH
39202: LD_INT 7
39204: PUSH
39205: LD_INT 17
39207: PUSH
39208: LD_INT 8
39210: PUSH
39211: LD_INT 20
39213: PUSH
39214: LD_INT 21
39216: PUSH
39217: LD_INT 22
39219: PUSH
39220: LD_INT 72
39222: PUSH
39223: LD_INT 26
39225: PUSH
39226: LD_INT 69
39228: PUSH
39229: LD_INT 39
39231: PUSH
39232: LD_INT 40
39234: PUSH
39235: LD_INT 41
39237: PUSH
39238: LD_INT 42
39240: PUSH
39241: LD_INT 43
39243: PUSH
39244: LD_INT 48
39246: PUSH
39247: LD_INT 49
39249: PUSH
39250: LD_INT 50
39252: PUSH
39253: LD_INT 51
39255: PUSH
39256: LD_INT 52
39258: PUSH
39259: LD_INT 53
39261: PUSH
39262: LD_INT 54
39264: PUSH
39265: LD_INT 55
39267: PUSH
39268: LD_INT 56
39270: PUSH
39271: LD_INT 60
39273: PUSH
39274: LD_INT 61
39276: PUSH
39277: LD_INT 62
39279: PUSH
39280: LD_INT 66
39282: PUSH
39283: LD_INT 67
39285: PUSH
39286: LD_INT 68
39288: PUSH
39289: LD_INT 81
39291: PUSH
39292: LD_INT 82
39294: PUSH
39295: LD_INT 83
39297: PUSH
39298: LD_INT 84
39300: PUSH
39301: LD_INT 85
39303: PUSH
39304: LD_INT 87
39306: PUSH
39307: LD_INT 88
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
39366: GO 39599
39368: LD_INT 3
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39598
39376: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39377: LD_ADDR_VAR 0 4
39381: PUSH
39382: LD_INT 46
39384: PUSH
39385: LD_INT 47
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 82
39396: PUSH
39397: LD_INT 83
39399: PUSH
39400: LD_INT 84
39402: PUSH
39403: LD_INT 85
39405: PUSH
39406: LD_INT 86
39408: PUSH
39409: LD_INT 11
39411: PUSH
39412: LD_INT 9
39414: PUSH
39415: LD_INT 20
39417: PUSH
39418: LD_INT 19
39420: PUSH
39421: LD_INT 21
39423: PUSH
39424: LD_INT 24
39426: PUSH
39427: LD_INT 22
39429: PUSH
39430: LD_INT 25
39432: PUSH
39433: LD_INT 28
39435: PUSH
39436: LD_INT 29
39438: PUSH
39439: LD_INT 30
39441: PUSH
39442: LD_INT 31
39444: PUSH
39445: LD_INT 37
39447: PUSH
39448: LD_INT 38
39450: PUSH
39451: LD_INT 32
39453: PUSH
39454: LD_INT 27
39456: PUSH
39457: LD_INT 33
39459: PUSH
39460: LD_INT 69
39462: PUSH
39463: LD_INT 39
39465: PUSH
39466: LD_INT 34
39468: PUSH
39469: LD_INT 40
39471: PUSH
39472: LD_INT 71
39474: PUSH
39475: LD_INT 23
39477: PUSH
39478: LD_INT 44
39480: PUSH
39481: LD_INT 48
39483: PUSH
39484: LD_INT 49
39486: PUSH
39487: LD_INT 50
39489: PUSH
39490: LD_INT 51
39492: PUSH
39493: LD_INT 52
39495: PUSH
39496: LD_INT 53
39498: PUSH
39499: LD_INT 54
39501: PUSH
39502: LD_INT 55
39504: PUSH
39505: LD_INT 56
39507: PUSH
39508: LD_INT 57
39510: PUSH
39511: LD_INT 58
39513: PUSH
39514: LD_INT 59
39516: PUSH
39517: LD_INT 63
39519: PUSH
39520: LD_INT 64
39522: PUSH
39523: LD_INT 65
39525: PUSH
39526: LD_INT 82
39528: PUSH
39529: LD_INT 83
39531: PUSH
39532: LD_INT 84
39534: PUSH
39535: LD_INT 85
39537: PUSH
39538: LD_INT 86
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
39596: GO 39599
39598: POP
// if state > - 1 and state < 3 then
39599: LD_VAR 0 3
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: GREATER
39608: PUSH
39609: LD_VAR 0 3
39613: PUSH
39614: LD_INT 3
39616: LESS
39617: AND
39618: IFFALSE 39675
// for i in result do
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 4
39629: PUSH
39630: FOR_IN
39631: IFFALSE 39673
// if GetTech ( i , side ) <> state then
39633: LD_VAR 0 5
39637: PPUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 321
39647: PUSH
39648: LD_VAR 0 3
39652: NONEQUAL
39653: IFFALSE 39671
// result := result diff i ;
39655: LD_ADDR_VAR 0 4
39659: PUSH
39660: LD_VAR 0 4
39664: PUSH
39665: LD_VAR 0 5
39669: DIFF
39670: ST_TO_ADDR
39671: GO 39630
39673: POP
39674: POP
// end ;
39675: LD_VAR 0 4
39679: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
39684: PPUSH
// result := true ;
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_INT 1
39692: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: LD_VAR 0 2
39702: PPUSH
39703: CALL_OW 480
39707: ST_TO_ADDR
// if not tmp then
39708: LD_VAR 0 5
39712: NOT
39713: IFFALSE 39717
// exit ;
39715: GO 39766
// for i in tmp do
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: LD_VAR 0 5
39726: PUSH
39727: FOR_IN
39728: IFFALSE 39764
// if GetTech ( i , side ) <> state_researched then
39730: LD_VAR 0 4
39734: PPUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 321
39744: PUSH
39745: LD_INT 2
39747: NONEQUAL
39748: IFFALSE 39762
// begin result := false ;
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_INT 0
39757: ST_TO_ADDR
// exit ;
39758: POP
39759: POP
39760: GO 39766
// end ;
39762: GO 39727
39764: POP
39765: POP
// end ;
39766: LD_VAR 0 3
39770: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39771: LD_INT 0
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39786: LD_VAR 0 1
39790: NOT
39791: PUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 257
39801: PUSH
39802: LD_INT 9
39804: NONEQUAL
39805: OR
39806: IFFALSE 39810
// exit ;
39808: GO 40383
// side := GetSide ( unit ) ;
39810: LD_ADDR_VAR 0 9
39814: PUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 255
39824: ST_TO_ADDR
// tech_space := tech_spacanom ;
39825: LD_ADDR_VAR 0 12
39829: PUSH
39830: LD_INT 29
39832: ST_TO_ADDR
// tech_time := tech_taurad ;
39833: LD_ADDR_VAR 0 13
39837: PUSH
39838: LD_INT 28
39840: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39841: LD_ADDR_VAR 0 11
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 310
39855: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39856: LD_VAR 0 11
39860: PPUSH
39861: CALL_OW 247
39865: PUSH
39866: LD_INT 2
39868: EQUAL
39869: IFFALSE 39873
// exit ;
39871: GO 40383
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39873: LD_ADDR_VAR 0 8
39877: PUSH
39878: LD_INT 81
39880: PUSH
39881: LD_VAR 0 9
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 3
39892: PUSH
39893: LD_INT 21
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PPUSH
39911: CALL_OW 69
39915: ST_TO_ADDR
// if not tmp then
39916: LD_VAR 0 8
39920: NOT
39921: IFFALSE 39925
// exit ;
39923: GO 40383
// if in_unit then
39925: LD_VAR 0 11
39929: IFFALSE 39953
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39931: LD_ADDR_VAR 0 10
39935: PUSH
39936: LD_VAR 0 8
39940: PPUSH
39941: LD_VAR 0 11
39945: PPUSH
39946: CALL_OW 74
39950: ST_TO_ADDR
39951: GO 39973
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39953: LD_ADDR_VAR 0 10
39957: PUSH
39958: LD_VAR 0 8
39962: PPUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 74
39972: ST_TO_ADDR
// if not enemy then
39973: LD_VAR 0 10
39977: NOT
39978: IFFALSE 39982
// exit ;
39980: GO 40383
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39982: LD_VAR 0 11
39986: PUSH
39987: LD_VAR 0 11
39991: PPUSH
39992: LD_VAR 0 10
39996: PPUSH
39997: CALL_OW 296
40001: PUSH
40002: LD_INT 13
40004: GREATER
40005: AND
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: LD_VAR 0 10
40016: PPUSH
40017: CALL_OW 296
40021: PUSH
40022: LD_INT 12
40024: GREATER
40025: OR
40026: IFFALSE 40030
// exit ;
40028: GO 40383
// missile := [ 1 ] ;
40030: LD_ADDR_VAR 0 14
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40041: LD_VAR 0 9
40045: PPUSH
40046: LD_VAR 0 12
40050: PPUSH
40051: CALL_OW 325
40055: IFFALSE 40084
// missile := Replace ( missile , missile + 1 , 2 ) ;
40057: LD_ADDR_VAR 0 14
40061: PUSH
40062: LD_VAR 0 14
40066: PPUSH
40067: LD_VAR 0 14
40071: PUSH
40072: LD_INT 1
40074: PLUS
40075: PPUSH
40076: LD_INT 2
40078: PPUSH
40079: CALL_OW 1
40083: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40084: LD_VAR 0 9
40088: PPUSH
40089: LD_VAR 0 13
40093: PPUSH
40094: CALL_OW 325
40098: PUSH
40099: LD_VAR 0 10
40103: PPUSH
40104: CALL_OW 255
40108: PPUSH
40109: LD_VAR 0 13
40113: PPUSH
40114: CALL_OW 325
40118: NOT
40119: AND
40120: IFFALSE 40149
// missile := Replace ( missile , missile + 1 , 3 ) ;
40122: LD_ADDR_VAR 0 14
40126: PUSH
40127: LD_VAR 0 14
40131: PPUSH
40132: LD_VAR 0 14
40136: PUSH
40137: LD_INT 1
40139: PLUS
40140: PPUSH
40141: LD_INT 3
40143: PPUSH
40144: CALL_OW 1
40148: ST_TO_ADDR
// if missile < 2 then
40149: LD_VAR 0 14
40153: PUSH
40154: LD_INT 2
40156: LESS
40157: IFFALSE 40161
// exit ;
40159: GO 40383
// x := GetX ( enemy ) ;
40161: LD_ADDR_VAR 0 4
40165: PUSH
40166: LD_VAR 0 10
40170: PPUSH
40171: CALL_OW 250
40175: ST_TO_ADDR
// y := GetY ( enemy ) ;
40176: LD_ADDR_VAR 0 5
40180: PUSH
40181: LD_VAR 0 10
40185: PPUSH
40186: CALL_OW 251
40190: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40191: LD_ADDR_VAR 0 6
40195: PUSH
40196: LD_VAR 0 4
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PPUSH
40205: LD_INT 1
40207: PPUSH
40208: CALL_OW 12
40212: PLUS
40213: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40214: LD_ADDR_VAR 0 7
40218: PUSH
40219: LD_VAR 0 5
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PPUSH
40228: LD_INT 1
40230: PPUSH
40231: CALL_OW 12
40235: PLUS
40236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40237: LD_VAR 0 6
40241: PPUSH
40242: LD_VAR 0 7
40246: PPUSH
40247: CALL_OW 488
40251: NOT
40252: IFFALSE 40274
// begin _x := x ;
40254: LD_ADDR_VAR 0 6
40258: PUSH
40259: LD_VAR 0 4
40263: ST_TO_ADDR
// _y := y ;
40264: LD_ADDR_VAR 0 7
40268: PUSH
40269: LD_VAR 0 5
40273: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40274: LD_ADDR_VAR 0 3
40278: PUSH
40279: LD_INT 1
40281: PPUSH
40282: LD_VAR 0 14
40286: PPUSH
40287: CALL_OW 12
40291: ST_TO_ADDR
// case i of 1 :
40292: LD_VAR 0 3
40296: PUSH
40297: LD_INT 1
40299: DOUBLE
40300: EQUAL
40301: IFTRUE 40305
40303: GO 40322
40305: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40306: LD_VAR 0 1
40310: PPUSH
40311: LD_VAR 0 10
40315: PPUSH
40316: CALL_OW 115
40320: GO 40383
40322: LD_INT 2
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40352
40330: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40331: LD_VAR 0 1
40335: PPUSH
40336: LD_VAR 0 6
40340: PPUSH
40341: LD_VAR 0 7
40345: PPUSH
40346: CALL_OW 153
40350: GO 40383
40352: LD_INT 3
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40382
40360: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40361: LD_VAR 0 1
40365: PPUSH
40366: LD_VAR 0 6
40370: PPUSH
40371: LD_VAR 0 7
40375: PPUSH
40376: CALL_OW 154
40380: GO 40383
40382: POP
// end ;
40383: LD_VAR 0 2
40387: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40388: LD_INT 0
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
// if not unit or not building then
40396: LD_VAR 0 1
40400: NOT
40401: PUSH
40402: LD_VAR 0 2
40406: NOT
40407: OR
40408: IFFALSE 40412
// exit ;
40410: GO 40570
// x := GetX ( building ) ;
40412: LD_ADDR_VAR 0 5
40416: PUSH
40417: LD_VAR 0 2
40421: PPUSH
40422: CALL_OW 250
40426: ST_TO_ADDR
// y := GetY ( building ) ;
40427: LD_ADDR_VAR 0 6
40431: PUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: CALL_OW 251
40441: ST_TO_ADDR
// for i = 0 to 5 do
40442: LD_ADDR_VAR 0 4
40446: PUSH
40447: DOUBLE
40448: LD_INT 0
40450: DEC
40451: ST_TO_ADDR
40452: LD_INT 5
40454: PUSH
40455: FOR_TO
40456: IFFALSE 40568
// begin _x := ShiftX ( x , i , 3 ) ;
40458: LD_ADDR_VAR 0 7
40462: PUSH
40463: LD_VAR 0 5
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: LD_INT 3
40475: PPUSH
40476: CALL_OW 272
40480: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40481: LD_ADDR_VAR 0 8
40485: PUSH
40486: LD_VAR 0 6
40490: PPUSH
40491: LD_VAR 0 4
40495: PPUSH
40496: LD_INT 3
40498: PPUSH
40499: CALL_OW 273
40503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40504: LD_VAR 0 7
40508: PPUSH
40509: LD_VAR 0 8
40513: PPUSH
40514: CALL_OW 488
40518: NOT
40519: IFFALSE 40523
// continue ;
40521: GO 40455
// if HexInfo ( _x , _y ) = 0 then
40523: LD_VAR 0 7
40527: PPUSH
40528: LD_VAR 0 8
40532: PPUSH
40533: CALL_OW 428
40537: PUSH
40538: LD_INT 0
40540: EQUAL
40541: IFFALSE 40566
// begin ComMoveXY ( unit , _x , _y ) ;
40543: LD_VAR 0 1
40547: PPUSH
40548: LD_VAR 0 7
40552: PPUSH
40553: LD_VAR 0 8
40557: PPUSH
40558: CALL_OW 111
// exit ;
40562: POP
40563: POP
40564: GO 40570
// end ; end ;
40566: GO 40455
40568: POP
40569: POP
// end ;
40570: LD_VAR 0 3
40574: RET
// export function ScanBase ( side , base_area ) ; begin
40575: LD_INT 0
40577: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_VAR 0 2
40587: PPUSH
40588: LD_INT 81
40590: PUSH
40591: LD_VAR 0 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PPUSH
40600: CALL_OW 70
40604: ST_TO_ADDR
// end ;
40605: LD_VAR 0 3
40609: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40610: LD_INT 0
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
// result := false ;
40616: LD_ADDR_VAR 0 2
40620: PUSH
40621: LD_INT 0
40623: ST_TO_ADDR
// side := GetSide ( unit ) ;
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 255
40638: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40639: LD_ADDR_VAR 0 4
40643: PUSH
40644: LD_VAR 0 1
40648: PPUSH
40649: CALL_OW 248
40653: ST_TO_ADDR
// case nat of 1 :
40654: LD_VAR 0 4
40658: PUSH
40659: LD_INT 1
40661: DOUBLE
40662: EQUAL
40663: IFTRUE 40667
40665: GO 40678
40667: POP
// tech := tech_lassight ; 2 :
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_INT 12
40675: ST_TO_ADDR
40676: GO 40717
40678: LD_INT 2
40680: DOUBLE
40681: EQUAL
40682: IFTRUE 40686
40684: GO 40697
40686: POP
// tech := tech_mortar ; 3 :
40687: LD_ADDR_VAR 0 5
40691: PUSH
40692: LD_INT 41
40694: ST_TO_ADDR
40695: GO 40717
40697: LD_INT 3
40699: DOUBLE
40700: EQUAL
40701: IFTRUE 40705
40703: GO 40716
40705: POP
// tech := tech_bazooka ; end ;
40706: LD_ADDR_VAR 0 5
40710: PUSH
40711: LD_INT 44
40713: ST_TO_ADDR
40714: GO 40717
40716: POP
// if Researched ( side , tech ) then
40717: LD_VAR 0 3
40721: PPUSH
40722: LD_VAR 0 5
40726: PPUSH
40727: CALL_OW 325
40731: IFFALSE 40758
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40733: LD_ADDR_VAR 0 2
40737: PUSH
40738: LD_INT 5
40740: PUSH
40741: LD_INT 8
40743: PUSH
40744: LD_INT 9
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: LD_VAR 0 4
40756: ARRAY
40757: ST_TO_ADDR
// end ;
40758: LD_VAR 0 2
40762: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40763: LD_INT 0
40765: PPUSH
40766: PPUSH
40767: PPUSH
// if not mines then
40768: LD_VAR 0 2
40772: NOT
40773: IFFALSE 40777
// exit ;
40775: GO 40921
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40777: LD_ADDR_VAR 0 5
40781: PUSH
40782: LD_INT 81
40784: PUSH
40785: LD_VAR 0 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: PUSH
40797: LD_INT 21
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PPUSH
40815: CALL_OW 69
40819: ST_TO_ADDR
// for i in mines do
40820: LD_ADDR_VAR 0 4
40824: PUSH
40825: LD_VAR 0 2
40829: PUSH
40830: FOR_IN
40831: IFFALSE 40919
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40833: LD_VAR 0 4
40837: PUSH
40838: LD_INT 1
40840: ARRAY
40841: PPUSH
40842: LD_VAR 0 4
40846: PUSH
40847: LD_INT 2
40849: ARRAY
40850: PPUSH
40851: CALL_OW 458
40855: NOT
40856: IFFALSE 40860
// continue ;
40858: GO 40830
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40860: LD_VAR 0 4
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: LD_VAR 0 4
40873: PUSH
40874: LD_INT 2
40876: ARRAY
40877: PPUSH
40878: CALL_OW 428
40882: PUSH
40883: LD_VAR 0 5
40887: IN
40888: IFFALSE 40917
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40890: LD_VAR 0 4
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PPUSH
40899: LD_VAR 0 4
40903: PUSH
40904: LD_INT 2
40906: ARRAY
40907: PPUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 456
// end ;
40917: GO 40830
40919: POP
40920: POP
// end ;
40921: LD_VAR 0 3
40925: RET
// export function Count ( array ) ; var i ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
// result := 0 ;
40930: LD_ADDR_VAR 0 2
40934: PUSH
40935: LD_INT 0
40937: ST_TO_ADDR
// for i in array do
40938: LD_ADDR_VAR 0 3
40942: PUSH
40943: LD_VAR 0 1
40947: PUSH
40948: FOR_IN
40949: IFFALSE 40973
// if i then
40951: LD_VAR 0 3
40955: IFFALSE 40971
// result := result + 1 ;
40957: LD_ADDR_VAR 0 2
40961: PUSH
40962: LD_VAR 0 2
40966: PUSH
40967: LD_INT 1
40969: PLUS
40970: ST_TO_ADDR
40971: GO 40948
40973: POP
40974: POP
// end ;
40975: LD_VAR 0 2
40979: RET
// export function IsEmpty ( building ) ; begin
40980: LD_INT 0
40982: PPUSH
// if not building then
40983: LD_VAR 0 1
40987: NOT
40988: IFFALSE 40992
// exit ;
40990: GO 41035
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40992: LD_ADDR_VAR 0 2
40996: PUSH
40997: LD_VAR 0 1
41001: PUSH
41002: LD_INT 22
41004: PUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 255
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 58
41021: PUSH
41022: EMPTY
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PPUSH
41029: CALL_OW 69
41033: IN
41034: ST_TO_ADDR
// end ;
41035: LD_VAR 0 2
41039: RET
// export function IsNotFull ( building ) ; begin
41040: LD_INT 0
41042: PPUSH
// if not building then
41043: LD_VAR 0 1
41047: NOT
41048: IFFALSE 41052
// exit ;
41050: GO 41071
// result := UnitsInside ( building ) < 6 ;
41052: LD_ADDR_VAR 0 2
41056: PUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: CALL_OW 313
41066: PUSH
41067: LD_INT 6
41069: LESS
41070: ST_TO_ADDR
// end ;
41071: LD_VAR 0 2
41075: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41076: LD_INT 0
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
// tmp := [ ] ;
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: EMPTY
41088: ST_TO_ADDR
// list := [ ] ;
41089: LD_ADDR_VAR 0 5
41093: PUSH
41094: EMPTY
41095: ST_TO_ADDR
// for i = 16 to 25 do
41096: LD_ADDR_VAR 0 4
41100: PUSH
41101: DOUBLE
41102: LD_INT 16
41104: DEC
41105: ST_TO_ADDR
41106: LD_INT 25
41108: PUSH
41109: FOR_TO
41110: IFFALSE 41183
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_VAR 0 3
41121: PUSH
41122: LD_INT 22
41124: PUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 255
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 91
41141: PUSH
41142: LD_VAR 0 1
41146: PUSH
41147: LD_INT 6
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 30
41157: PUSH
41158: LD_VAR 0 4
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: PPUSH
41175: CALL_OW 69
41179: ADD
41180: ST_TO_ADDR
41181: GO 41109
41183: POP
41184: POP
// for i = 1 to tmp do
41185: LD_ADDR_VAR 0 4
41189: PUSH
41190: DOUBLE
41191: LD_INT 1
41193: DEC
41194: ST_TO_ADDR
41195: LD_VAR 0 3
41199: PUSH
41200: FOR_TO
41201: IFFALSE 41289
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41203: LD_ADDR_VAR 0 5
41207: PUSH
41208: LD_VAR 0 5
41212: PUSH
41213: LD_VAR 0 3
41217: PUSH
41218: LD_VAR 0 4
41222: ARRAY
41223: PPUSH
41224: CALL_OW 266
41228: PUSH
41229: LD_VAR 0 3
41233: PUSH
41234: LD_VAR 0 4
41238: ARRAY
41239: PPUSH
41240: CALL_OW 250
41244: PUSH
41245: LD_VAR 0 3
41249: PUSH
41250: LD_VAR 0 4
41254: ARRAY
41255: PPUSH
41256: CALL_OW 251
41260: PUSH
41261: LD_VAR 0 3
41265: PUSH
41266: LD_VAR 0 4
41270: ARRAY
41271: PPUSH
41272: CALL_OW 254
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: ADD
41286: ST_TO_ADDR
41287: GO 41200
41289: POP
41290: POP
// result := list ;
41291: LD_ADDR_VAR 0 2
41295: PUSH
41296: LD_VAR 0 5
41300: ST_TO_ADDR
// end ;
41301: LD_VAR 0 2
41305: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41306: LD_INT 0
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
// if not factory then
41315: LD_VAR 0 1
41319: NOT
41320: IFFALSE 41324
// exit ;
41322: GO 41917
// if control = control_apeman then
41324: LD_VAR 0 4
41328: PUSH
41329: LD_INT 5
41331: EQUAL
41332: IFFALSE 41441
// begin tmp := UnitsInside ( factory ) ;
41334: LD_ADDR_VAR 0 8
41338: PUSH
41339: LD_VAR 0 1
41343: PPUSH
41344: CALL_OW 313
41348: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41349: LD_VAR 0 8
41353: PPUSH
41354: LD_INT 25
41356: PUSH
41357: LD_INT 12
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PPUSH
41364: CALL_OW 72
41368: NOT
41369: IFFALSE 41379
// control := control_manual ;
41371: LD_ADDR_VAR 0 4
41375: PUSH
41376: LD_INT 1
41378: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41379: LD_ADDR_VAR 0 8
41383: PUSH
41384: LD_VAR 0 1
41388: PPUSH
41389: CALL 41076 0 1
41393: ST_TO_ADDR
// if tmp then
41394: LD_VAR 0 8
41398: IFFALSE 41441
// begin for i in tmp do
41400: LD_ADDR_VAR 0 7
41404: PUSH
41405: LD_VAR 0 8
41409: PUSH
41410: FOR_IN
41411: IFFALSE 41439
// if i [ 1 ] = b_ext_radio then
41413: LD_VAR 0 7
41417: PUSH
41418: LD_INT 1
41420: ARRAY
41421: PUSH
41422: LD_INT 22
41424: EQUAL
41425: IFFALSE 41437
// begin control := control_remote ;
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_INT 2
41434: ST_TO_ADDR
// break ;
41435: GO 41439
// end ;
41437: GO 41410
41439: POP
41440: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_VAR 0 2
41450: PPUSH
41451: LD_VAR 0 3
41455: PPUSH
41456: LD_VAR 0 4
41460: PPUSH
41461: LD_VAR 0 5
41465: PPUSH
41466: CALL_OW 448
41470: IFFALSE 41505
// begin result := [ chassis , engine , control , weapon ] ;
41472: LD_ADDR_VAR 0 6
41476: PUSH
41477: LD_VAR 0 2
41481: PUSH
41482: LD_VAR 0 3
41486: PUSH
41487: LD_VAR 0 4
41491: PUSH
41492: LD_VAR 0 5
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// exit ;
41503: GO 41917
// end ; _chassis := AvailableChassisList ( factory ) ;
41505: LD_ADDR_VAR 0 9
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 475
41519: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41520: LD_ADDR_VAR 0 11
41524: PUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 476
41534: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41535: LD_ADDR_VAR 0 12
41539: PUSH
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 477
41549: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41550: LD_ADDR_VAR 0 10
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 478
41564: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41565: LD_VAR 0 9
41569: NOT
41570: PUSH
41571: LD_VAR 0 11
41575: NOT
41576: OR
41577: PUSH
41578: LD_VAR 0 12
41582: NOT
41583: OR
41584: PUSH
41585: LD_VAR 0 10
41589: NOT
41590: OR
41591: IFFALSE 41626
// begin result := [ chassis , engine , control , weapon ] ;
41593: LD_ADDR_VAR 0 6
41597: PUSH
41598: LD_VAR 0 2
41602: PUSH
41603: LD_VAR 0 3
41607: PUSH
41608: LD_VAR 0 4
41612: PUSH
41613: LD_VAR 0 5
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: ST_TO_ADDR
// exit ;
41624: GO 41917
// end ; if not chassis in _chassis then
41626: LD_VAR 0 2
41630: PUSH
41631: LD_VAR 0 9
41635: IN
41636: NOT
41637: IFFALSE 41663
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41639: LD_ADDR_VAR 0 2
41643: PUSH
41644: LD_VAR 0 9
41648: PUSH
41649: LD_INT 1
41651: PPUSH
41652: LD_VAR 0 9
41656: PPUSH
41657: CALL_OW 12
41661: ARRAY
41662: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41663: LD_VAR 0 2
41667: PPUSH
41668: LD_VAR 0 3
41672: PPUSH
41673: CALL 41922 0 2
41677: NOT
41678: IFFALSE 41737
// repeat engine := _engine [ 1 ] ;
41680: LD_ADDR_VAR 0 3
41684: PUSH
41685: LD_VAR 0 11
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41694: LD_ADDR_VAR 0 11
41698: PUSH
41699: LD_VAR 0 11
41703: PPUSH
41704: LD_INT 1
41706: PPUSH
41707: CALL_OW 3
41711: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41712: LD_VAR 0 2
41716: PPUSH
41717: LD_VAR 0 3
41721: PPUSH
41722: CALL 41922 0 2
41726: PUSH
41727: LD_VAR 0 11
41731: PUSH
41732: EMPTY
41733: EQUAL
41734: OR
41735: IFFALSE 41680
// if not control in _control then
41737: LD_VAR 0 4
41741: PUSH
41742: LD_VAR 0 12
41746: IN
41747: NOT
41748: IFFALSE 41774
// control := _control [ rand ( 1 , _control ) ] ;
41750: LD_ADDR_VAR 0 4
41754: PUSH
41755: LD_VAR 0 12
41759: PUSH
41760: LD_INT 1
41762: PPUSH
41763: LD_VAR 0 12
41767: PPUSH
41768: CALL_OW 12
41772: ARRAY
41773: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41774: LD_VAR 0 2
41778: PPUSH
41779: LD_VAR 0 5
41783: PPUSH
41784: CALL 42142 0 2
41788: NOT
41789: IFFALSE 41848
// repeat weapon := _weapon [ 1 ] ;
41791: LD_ADDR_VAR 0 5
41795: PUSH
41796: LD_VAR 0 10
41800: PUSH
41801: LD_INT 1
41803: ARRAY
41804: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41805: LD_ADDR_VAR 0 10
41809: PUSH
41810: LD_VAR 0 10
41814: PPUSH
41815: LD_INT 1
41817: PPUSH
41818: CALL_OW 3
41822: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41823: LD_VAR 0 2
41827: PPUSH
41828: LD_VAR 0 5
41832: PPUSH
41833: CALL 42142 0 2
41837: PUSH
41838: LD_VAR 0 10
41842: PUSH
41843: EMPTY
41844: EQUAL
41845: OR
41846: IFFALSE 41791
// result := [ ] ;
41848: LD_ADDR_VAR 0 6
41852: PUSH
41853: EMPTY
41854: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41855: LD_VAR 0 1
41859: PPUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: CALL_OW 448
41884: IFFALSE 41917
// result := [ chassis , engine , control , weapon ] ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_VAR 0 2
41895: PUSH
41896: LD_VAR 0 3
41900: PUSH
41901: LD_VAR 0 4
41905: PUSH
41906: LD_VAR 0 5
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// end ;
41917: LD_VAR 0 6
41921: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41922: LD_INT 0
41924: PPUSH
// if not chassis or not engine then
41925: LD_VAR 0 1
41929: NOT
41930: PUSH
41931: LD_VAR 0 2
41935: NOT
41936: OR
41937: IFFALSE 41941
// exit ;
41939: GO 42137
// case engine of engine_solar :
41941: LD_VAR 0 2
41945: PUSH
41946: LD_INT 2
41948: DOUBLE
41949: EQUAL
41950: IFTRUE 41954
41952: GO 41992
41954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41955: LD_ADDR_VAR 0 3
41959: PUSH
41960: LD_INT 11
41962: PUSH
41963: LD_INT 12
41965: PUSH
41966: LD_INT 13
41968: PUSH
41969: LD_INT 14
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: ST_TO_ADDR
41990: GO 42121
41992: LD_INT 1
41994: DOUBLE
41995: EQUAL
41996: IFTRUE 42000
41998: GO 42062
42000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42001: LD_ADDR_VAR 0 3
42005: PUSH
42006: LD_INT 11
42008: PUSH
42009: LD_INT 12
42011: PUSH
42012: LD_INT 13
42014: PUSH
42015: LD_INT 14
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: LD_INT 4
42029: PUSH
42030: LD_INT 5
42032: PUSH
42033: LD_INT 21
42035: PUSH
42036: LD_INT 23
42038: PUSH
42039: LD_INT 22
42041: PUSH
42042: LD_INT 24
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
42060: GO 42121
42062: LD_INT 3
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42070
42068: GO 42120
42070: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_INT 13
42078: PUSH
42079: LD_INT 14
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: LD_INT 4
42090: PUSH
42091: LD_INT 5
42093: PUSH
42094: LD_INT 21
42096: PUSH
42097: LD_INT 22
42099: PUSH
42100: LD_INT 23
42102: PUSH
42103: LD_INT 24
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
42118: GO 42121
42120: POP
// result := ( chassis in result ) ;
42121: LD_ADDR_VAR 0 3
42125: PUSH
42126: LD_VAR 0 1
42130: PUSH
42131: LD_VAR 0 3
42135: IN
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 3
42141: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42142: LD_INT 0
42144: PPUSH
// if not chassis or not weapon then
42145: LD_VAR 0 1
42149: NOT
42150: PUSH
42151: LD_VAR 0 2
42155: NOT
42156: OR
42157: IFFALSE 42161
// exit ;
42159: GO 43223
// case weapon of us_machine_gun :
42161: LD_VAR 0 2
42165: PUSH
42166: LD_INT 2
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42204
42174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: ST_TO_ADDR
42202: GO 43207
42204: LD_INT 3
42206: DOUBLE
42207: EQUAL
42208: IFTRUE 42212
42210: GO 42242
42212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: LD_INT 4
42229: PUSH
42230: LD_INT 5
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
42240: GO 43207
42242: LD_INT 11
42244: DOUBLE
42245: EQUAL
42246: IFTRUE 42250
42248: GO 42280
42250: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42251: LD_ADDR_VAR 0 3
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 3
42264: PUSH
42265: LD_INT 4
42267: PUSH
42268: LD_INT 5
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: ST_TO_ADDR
42278: GO 43207
42280: LD_INT 4
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42314
42288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42289: LD_ADDR_VAR 0 3
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: LD_INT 4
42302: PUSH
42303: LD_INT 5
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: ST_TO_ADDR
42312: GO 43207
42314: LD_INT 5
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42322
42320: GO 42348
42322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42323: LD_ADDR_VAR 0 3
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: LD_INT 3
42333: PUSH
42334: LD_INT 4
42336: PUSH
42337: LD_INT 5
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
42346: GO 43207
42348: LD_INT 9
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42382
42356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: LD_INT 4
42370: PUSH
42371: LD_INT 5
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
42380: GO 43207
42382: LD_INT 7
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42416
42390: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 4
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
42414: GO 43207
42416: LD_INT 12
42418: DOUBLE
42419: EQUAL
42420: IFTRUE 42424
42422: GO 42450
42424: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42425: LD_ADDR_VAR 0 3
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: LD_INT 4
42438: PUSH
42439: LD_INT 5
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: ST_TO_ADDR
42448: GO 43207
42450: LD_INT 13
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42458
42456: GO 42484
42458: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 4
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
42482: GO 43207
42484: LD_INT 14
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42510
42492: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 4
42500: PUSH
42501: LD_INT 5
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: ST_TO_ADDR
42508: GO 43207
42510: LD_INT 6
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42536
42518: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 4
42526: PUSH
42527: LD_INT 5
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: ST_TO_ADDR
42534: GO 43207
42536: LD_INT 10
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42562
42544: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 4
42552: PUSH
42553: LD_INT 5
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: ST_TO_ADDR
42560: GO 43207
42562: LD_INT 22
42564: DOUBLE
42565: EQUAL
42566: IFTRUE 42570
42568: GO 42596
42570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42571: LD_ADDR_VAR 0 3
42575: PUSH
42576: LD_INT 11
42578: PUSH
42579: LD_INT 12
42581: PUSH
42582: LD_INT 13
42584: PUSH
42585: LD_INT 14
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
42594: GO 43207
42596: LD_INT 23
42598: DOUBLE
42599: EQUAL
42600: IFTRUE 42604
42602: GO 42630
42604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42605: LD_ADDR_VAR 0 3
42609: PUSH
42610: LD_INT 11
42612: PUSH
42613: LD_INT 12
42615: PUSH
42616: LD_INT 13
42618: PUSH
42619: LD_INT 14
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
42628: GO 43207
42630: LD_INT 24
42632: DOUBLE
42633: EQUAL
42634: IFTRUE 42638
42636: GO 42664
42638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_INT 11
42646: PUSH
42647: LD_INT 12
42649: PUSH
42650: LD_INT 13
42652: PUSH
42653: LD_INT 14
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
42662: GO 43207
42664: LD_INT 30
42666: DOUBLE
42667: EQUAL
42668: IFTRUE 42672
42670: GO 42698
42672: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_INT 11
42680: PUSH
42681: LD_INT 12
42683: PUSH
42684: LD_INT 13
42686: PUSH
42687: LD_INT 14
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
42696: GO 43207
42698: LD_INT 25
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42724
42706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_INT 13
42714: PUSH
42715: LD_INT 14
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: ST_TO_ADDR
42722: GO 43207
42724: LD_INT 27
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 42750
42732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42733: LD_ADDR_VAR 0 3
42737: PUSH
42738: LD_INT 13
42740: PUSH
42741: LD_INT 14
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: ST_TO_ADDR
42748: GO 43207
42750: LD_EXP 53
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42786
42760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42761: LD_ADDR_VAR 0 3
42765: PUSH
42766: LD_INT 11
42768: PUSH
42769: LD_INT 12
42771: PUSH
42772: LD_INT 13
42774: PUSH
42775: LD_INT 14
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
42784: GO 43207
42786: LD_INT 28
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42812
42794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 13
42802: PUSH
42803: LD_INT 14
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 43207
42812: LD_INT 29
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42838
42820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 13
42828: PUSH
42829: LD_INT 14
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: ST_TO_ADDR
42836: GO 43207
42838: LD_INT 31
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42864
42846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 13
42854: PUSH
42855: LD_INT 14
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: ST_TO_ADDR
42862: GO 43207
42864: LD_INT 26
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42890
42872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_INT 13
42880: PUSH
42881: LD_INT 14
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: ST_TO_ADDR
42888: GO 43207
42890: LD_INT 42
42892: DOUBLE
42893: EQUAL
42894: IFTRUE 42898
42896: GO 42924
42898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_INT 21
42906: PUSH
42907: LD_INT 22
42909: PUSH
42910: LD_INT 23
42912: PUSH
42913: LD_INT 24
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
42922: GO 43207
42924: LD_INT 43
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42958
42932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42933: LD_ADDR_VAR 0 3
42937: PUSH
42938: LD_INT 21
42940: PUSH
42941: LD_INT 22
42943: PUSH
42944: LD_INT 23
42946: PUSH
42947: LD_INT 24
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
42956: GO 43207
42958: LD_INT 44
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42992
42966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_INT 21
42974: PUSH
42975: LD_INT 22
42977: PUSH
42978: LD_INT 23
42980: PUSH
42981: LD_INT 24
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
42990: GO 43207
42992: LD_INT 45
42994: DOUBLE
42995: EQUAL
42996: IFTRUE 43000
42998: GO 43026
43000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43001: LD_ADDR_VAR 0 3
43005: PUSH
43006: LD_INT 21
43008: PUSH
43009: LD_INT 22
43011: PUSH
43012: LD_INT 23
43014: PUSH
43015: LD_INT 24
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
43024: GO 43207
43026: LD_INT 49
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 43060
43034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_INT 21
43042: PUSH
43043: LD_INT 22
43045: PUSH
43046: LD_INT 23
43048: PUSH
43049: LD_INT 24
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
43058: GO 43207
43060: LD_INT 51
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43094
43068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43069: LD_ADDR_VAR 0 3
43073: PUSH
43074: LD_INT 21
43076: PUSH
43077: LD_INT 22
43079: PUSH
43080: LD_INT 23
43082: PUSH
43083: LD_INT 24
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
43092: GO 43207
43094: LD_INT 52
43096: DOUBLE
43097: EQUAL
43098: IFTRUE 43102
43100: GO 43128
43102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43103: LD_ADDR_VAR 0 3
43107: PUSH
43108: LD_INT 21
43110: PUSH
43111: LD_INT 22
43113: PUSH
43114: LD_INT 23
43116: PUSH
43117: LD_INT 24
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43207
43128: LD_INT 53
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43154
43136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 23
43144: PUSH
43145: LD_INT 24
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: ST_TO_ADDR
43152: GO 43207
43154: LD_INT 46
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43180
43162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_INT 23
43170: PUSH
43171: LD_INT 24
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: ST_TO_ADDR
43178: GO 43207
43180: LD_INT 47
43182: DOUBLE
43183: EQUAL
43184: IFTRUE 43188
43186: GO 43206
43188: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43189: LD_ADDR_VAR 0 3
43193: PUSH
43194: LD_INT 23
43196: PUSH
43197: LD_INT 24
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: ST_TO_ADDR
43204: GO 43207
43206: POP
// result := ( chassis in result ) ;
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: LD_VAR 0 1
43216: PUSH
43217: LD_VAR 0 3
43221: IN
43222: ST_TO_ADDR
// end ;
43223: LD_VAR 0 3
43227: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43228: LD_INT 0
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
// result := array ;
43237: LD_ADDR_VAR 0 5
43241: PUSH
43242: LD_VAR 0 1
43246: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43247: LD_VAR 0 1
43251: NOT
43252: PUSH
43253: LD_VAR 0 2
43257: NOT
43258: OR
43259: PUSH
43260: LD_VAR 0 3
43264: NOT
43265: OR
43266: PUSH
43267: LD_VAR 0 2
43271: PUSH
43272: LD_VAR 0 1
43276: GREATER
43277: OR
43278: PUSH
43279: LD_VAR 0 3
43283: PUSH
43284: LD_VAR 0 1
43288: GREATER
43289: OR
43290: IFFALSE 43294
// exit ;
43292: GO 43590
// if direction then
43294: LD_VAR 0 4
43298: IFFALSE 43362
// begin d := 1 ;
43300: LD_ADDR_VAR 0 9
43304: PUSH
43305: LD_INT 1
43307: ST_TO_ADDR
// if i_from > i_to then
43308: LD_VAR 0 2
43312: PUSH
43313: LD_VAR 0 3
43317: GREATER
43318: IFFALSE 43344
// length := ( array - i_from ) + i_to else
43320: LD_ADDR_VAR 0 11
43324: PUSH
43325: LD_VAR 0 1
43329: PUSH
43330: LD_VAR 0 2
43334: MINUS
43335: PUSH
43336: LD_VAR 0 3
43340: PLUS
43341: ST_TO_ADDR
43342: GO 43360
// length := i_to - i_from ;
43344: LD_ADDR_VAR 0 11
43348: PUSH
43349: LD_VAR 0 3
43353: PUSH
43354: LD_VAR 0 2
43358: MINUS
43359: ST_TO_ADDR
// end else
43360: GO 43423
// begin d := - 1 ;
43362: LD_ADDR_VAR 0 9
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: ST_TO_ADDR
// if i_from > i_to then
43371: LD_VAR 0 2
43375: PUSH
43376: LD_VAR 0 3
43380: GREATER
43381: IFFALSE 43401
// length := i_from - i_to else
43383: LD_ADDR_VAR 0 11
43387: PUSH
43388: LD_VAR 0 2
43392: PUSH
43393: LD_VAR 0 3
43397: MINUS
43398: ST_TO_ADDR
43399: GO 43423
// length := ( array - i_to ) + i_from ;
43401: LD_ADDR_VAR 0 11
43405: PUSH
43406: LD_VAR 0 1
43410: PUSH
43411: LD_VAR 0 3
43415: MINUS
43416: PUSH
43417: LD_VAR 0 2
43421: PLUS
43422: ST_TO_ADDR
// end ; if not length then
43423: LD_VAR 0 11
43427: NOT
43428: IFFALSE 43432
// exit ;
43430: GO 43590
// tmp := array ;
43432: LD_ADDR_VAR 0 10
43436: PUSH
43437: LD_VAR 0 1
43441: ST_TO_ADDR
// for i = 1 to length do
43442: LD_ADDR_VAR 0 6
43446: PUSH
43447: DOUBLE
43448: LD_INT 1
43450: DEC
43451: ST_TO_ADDR
43452: LD_VAR 0 11
43456: PUSH
43457: FOR_TO
43458: IFFALSE 43578
// begin for j = 1 to array do
43460: LD_ADDR_VAR 0 7
43464: PUSH
43465: DOUBLE
43466: LD_INT 1
43468: DEC
43469: ST_TO_ADDR
43470: LD_VAR 0 1
43474: PUSH
43475: FOR_TO
43476: IFFALSE 43564
// begin k := j + d ;
43478: LD_ADDR_VAR 0 8
43482: PUSH
43483: LD_VAR 0 7
43487: PUSH
43488: LD_VAR 0 9
43492: PLUS
43493: ST_TO_ADDR
// if k > array then
43494: LD_VAR 0 8
43498: PUSH
43499: LD_VAR 0 1
43503: GREATER
43504: IFFALSE 43514
// k := 1 ;
43506: LD_ADDR_VAR 0 8
43510: PUSH
43511: LD_INT 1
43513: ST_TO_ADDR
// if not k then
43514: LD_VAR 0 8
43518: NOT
43519: IFFALSE 43531
// k := array ;
43521: LD_ADDR_VAR 0 8
43525: PUSH
43526: LD_VAR 0 1
43530: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43531: LD_ADDR_VAR 0 10
43535: PUSH
43536: LD_VAR 0 10
43540: PPUSH
43541: LD_VAR 0 8
43545: PPUSH
43546: LD_VAR 0 1
43550: PUSH
43551: LD_VAR 0 7
43555: ARRAY
43556: PPUSH
43557: CALL_OW 1
43561: ST_TO_ADDR
// end ;
43562: GO 43475
43564: POP
43565: POP
// array := tmp ;
43566: LD_ADDR_VAR 0 1
43570: PUSH
43571: LD_VAR 0 10
43575: ST_TO_ADDR
// end ;
43576: GO 43457
43578: POP
43579: POP
// result := array ;
43580: LD_ADDR_VAR 0 5
43584: PUSH
43585: LD_VAR 0 1
43589: ST_TO_ADDR
// end ;
43590: LD_VAR 0 5
43594: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43595: LD_INT 0
43597: PPUSH
43598: PPUSH
// result := 0 ;
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: LD_INT 0
43606: ST_TO_ADDR
// if not array or not value in array then
43607: LD_VAR 0 1
43611: NOT
43612: PUSH
43613: LD_VAR 0 2
43617: PUSH
43618: LD_VAR 0 1
43622: IN
43623: NOT
43624: OR
43625: IFFALSE 43629
// exit ;
43627: GO 43683
// for i = 1 to array do
43629: LD_ADDR_VAR 0 4
43633: PUSH
43634: DOUBLE
43635: LD_INT 1
43637: DEC
43638: ST_TO_ADDR
43639: LD_VAR 0 1
43643: PUSH
43644: FOR_TO
43645: IFFALSE 43681
// if value = array [ i ] then
43647: LD_VAR 0 2
43651: PUSH
43652: LD_VAR 0 1
43656: PUSH
43657: LD_VAR 0 4
43661: ARRAY
43662: EQUAL
43663: IFFALSE 43679
// begin result := i ;
43665: LD_ADDR_VAR 0 3
43669: PUSH
43670: LD_VAR 0 4
43674: ST_TO_ADDR
// exit ;
43675: POP
43676: POP
43677: GO 43683
// end ;
43679: GO 43644
43681: POP
43682: POP
// end ;
43683: LD_VAR 0 3
43687: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43688: LD_INT 0
43690: PPUSH
// vc_chassis := chassis ;
43691: LD_ADDR_OWVAR 37
43695: PUSH
43696: LD_VAR 0 1
43700: ST_TO_ADDR
// vc_engine := engine ;
43701: LD_ADDR_OWVAR 39
43705: PUSH
43706: LD_VAR 0 2
43710: ST_TO_ADDR
// vc_control := control ;
43711: LD_ADDR_OWVAR 38
43715: PUSH
43716: LD_VAR 0 3
43720: ST_TO_ADDR
// vc_weapon := weapon ;
43721: LD_ADDR_OWVAR 40
43725: PUSH
43726: LD_VAR 0 4
43730: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43731: LD_ADDR_OWVAR 41
43735: PUSH
43736: LD_VAR 0 5
43740: ST_TO_ADDR
// end ;
43741: LD_VAR 0 6
43745: RET
// export function WantPlant ( unit ) ; var task ; begin
43746: LD_INT 0
43748: PPUSH
43749: PPUSH
// result := false ;
43750: LD_ADDR_VAR 0 2
43754: PUSH
43755: LD_INT 0
43757: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43758: LD_ADDR_VAR 0 3
43762: PUSH
43763: LD_VAR 0 1
43767: PPUSH
43768: CALL_OW 437
43772: ST_TO_ADDR
// if task then
43773: LD_VAR 0 3
43777: IFFALSE 43805
// if task [ 1 ] [ 1 ] = p then
43779: LD_VAR 0 3
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PUSH
43792: LD_STRING p
43794: EQUAL
43795: IFFALSE 43805
// result := true ;
43797: LD_ADDR_VAR 0 2
43801: PUSH
43802: LD_INT 1
43804: ST_TO_ADDR
// end ;
43805: LD_VAR 0 2
43809: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
// if pos < 1 then
43816: LD_VAR 0 2
43820: PUSH
43821: LD_INT 1
43823: LESS
43824: IFFALSE 43828
// exit ;
43826: GO 44131
// if pos = 1 then
43828: LD_VAR 0 2
43832: PUSH
43833: LD_INT 1
43835: EQUAL
43836: IFFALSE 43869
// result := Replace ( arr , pos [ 1 ] , value ) else
43838: LD_ADDR_VAR 0 4
43842: PUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: LD_VAR 0 2
43852: PUSH
43853: LD_INT 1
43855: ARRAY
43856: PPUSH
43857: LD_VAR 0 3
43861: PPUSH
43862: CALL_OW 1
43866: ST_TO_ADDR
43867: GO 44131
// begin tmp := arr ;
43869: LD_ADDR_VAR 0 6
43873: PUSH
43874: LD_VAR 0 1
43878: ST_TO_ADDR
// s_arr := [ tmp ] ;
43879: LD_ADDR_VAR 0 7
43883: PUSH
43884: LD_VAR 0 6
43888: PUSH
43889: EMPTY
43890: LIST
43891: ST_TO_ADDR
// for i = 1 to pos - 1 do
43892: LD_ADDR_VAR 0 5
43896: PUSH
43897: DOUBLE
43898: LD_INT 1
43900: DEC
43901: ST_TO_ADDR
43902: LD_VAR 0 2
43906: PUSH
43907: LD_INT 1
43909: MINUS
43910: PUSH
43911: FOR_TO
43912: IFFALSE 43957
// begin tmp := tmp [ pos [ i ] ] ;
43914: LD_ADDR_VAR 0 6
43918: PUSH
43919: LD_VAR 0 6
43923: PUSH
43924: LD_VAR 0 2
43928: PUSH
43929: LD_VAR 0 5
43933: ARRAY
43934: ARRAY
43935: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43936: LD_ADDR_VAR 0 7
43940: PUSH
43941: LD_VAR 0 7
43945: PUSH
43946: LD_VAR 0 6
43950: PUSH
43951: EMPTY
43952: LIST
43953: ADD
43954: ST_TO_ADDR
// end ;
43955: GO 43911
43957: POP
43958: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43959: LD_ADDR_VAR 0 6
43963: PUSH
43964: LD_VAR 0 6
43968: PPUSH
43969: LD_VAR 0 2
43973: PUSH
43974: LD_VAR 0 2
43978: ARRAY
43979: PPUSH
43980: LD_VAR 0 3
43984: PPUSH
43985: CALL_OW 1
43989: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43990: LD_ADDR_VAR 0 7
43994: PUSH
43995: LD_VAR 0 7
43999: PPUSH
44000: LD_VAR 0 7
44004: PPUSH
44005: LD_VAR 0 6
44009: PPUSH
44010: CALL_OW 1
44014: ST_TO_ADDR
// for i = s_arr downto 2 do
44015: LD_ADDR_VAR 0 5
44019: PUSH
44020: DOUBLE
44021: LD_VAR 0 7
44025: INC
44026: ST_TO_ADDR
44027: LD_INT 2
44029: PUSH
44030: FOR_DOWNTO
44031: IFFALSE 44115
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44033: LD_ADDR_VAR 0 6
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_VAR 0 5
44047: PUSH
44048: LD_INT 1
44050: MINUS
44051: ARRAY
44052: PPUSH
44053: LD_VAR 0 2
44057: PUSH
44058: LD_VAR 0 5
44062: PUSH
44063: LD_INT 1
44065: MINUS
44066: ARRAY
44067: PPUSH
44068: LD_VAR 0 7
44072: PUSH
44073: LD_VAR 0 5
44077: ARRAY
44078: PPUSH
44079: CALL_OW 1
44083: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44084: LD_ADDR_VAR 0 7
44088: PUSH
44089: LD_VAR 0 7
44093: PPUSH
44094: LD_VAR 0 5
44098: PUSH
44099: LD_INT 1
44101: MINUS
44102: PPUSH
44103: LD_VAR 0 6
44107: PPUSH
44108: CALL_OW 1
44112: ST_TO_ADDR
// end ;
44113: GO 44030
44115: POP
44116: POP
// result := s_arr [ 1 ] ;
44117: LD_ADDR_VAR 0 4
44121: PUSH
44122: LD_VAR 0 7
44126: PUSH
44127: LD_INT 1
44129: ARRAY
44130: ST_TO_ADDR
// end ; end ;
44131: LD_VAR 0 4
44135: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44136: LD_INT 0
44138: PPUSH
44139: PPUSH
// if not list then
44140: LD_VAR 0 1
44144: NOT
44145: IFFALSE 44149
// exit ;
44147: GO 44240
// i := list [ pos1 ] ;
44149: LD_ADDR_VAR 0 5
44153: PUSH
44154: LD_VAR 0 1
44158: PUSH
44159: LD_VAR 0 2
44163: ARRAY
44164: ST_TO_ADDR
// if not i then
44165: LD_VAR 0 5
44169: NOT
44170: IFFALSE 44174
// exit ;
44172: GO 44240
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44174: LD_ADDR_VAR 0 1
44178: PUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: LD_VAR 0 2
44188: PPUSH
44189: LD_VAR 0 1
44193: PUSH
44194: LD_VAR 0 3
44198: ARRAY
44199: PPUSH
44200: CALL_OW 1
44204: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44205: LD_ADDR_VAR 0 1
44209: PUSH
44210: LD_VAR 0 1
44214: PPUSH
44215: LD_VAR 0 3
44219: PPUSH
44220: LD_VAR 0 5
44224: PPUSH
44225: CALL_OW 1
44229: ST_TO_ADDR
// result := list ;
44230: LD_ADDR_VAR 0 4
44234: PUSH
44235: LD_VAR 0 1
44239: ST_TO_ADDR
// end ;
44240: LD_VAR 0 4
44244: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44245: LD_INT 0
44247: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44248: LD_ADDR_VAR 0 5
44252: PUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 250
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 251
44272: PPUSH
44273: LD_VAR 0 2
44277: PPUSH
44278: LD_VAR 0 3
44282: PPUSH
44283: LD_VAR 0 4
44287: PPUSH
44288: CALL 44298 0 5
44292: ST_TO_ADDR
// end ;
44293: LD_VAR 0 5
44297: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44298: LD_INT 0
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
// if not list then
44304: LD_VAR 0 3
44308: NOT
44309: IFFALSE 44313
// exit ;
44311: GO 44701
// result := [ ] ;
44313: LD_ADDR_VAR 0 6
44317: PUSH
44318: EMPTY
44319: ST_TO_ADDR
// for i in list do
44320: LD_ADDR_VAR 0 7
44324: PUSH
44325: LD_VAR 0 3
44329: PUSH
44330: FOR_IN
44331: IFFALSE 44533
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44333: LD_ADDR_VAR 0 9
44337: PUSH
44338: LD_VAR 0 7
44342: PPUSH
44343: LD_VAR 0 1
44347: PPUSH
44348: LD_VAR 0 2
44352: PPUSH
44353: CALL_OW 297
44357: ST_TO_ADDR
// if not result then
44358: LD_VAR 0 6
44362: NOT
44363: IFFALSE 44389
// result := [ [ i , tmp ] ] else
44365: LD_ADDR_VAR 0 6
44369: PUSH
44370: LD_VAR 0 7
44374: PUSH
44375: LD_VAR 0 9
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: ST_TO_ADDR
44387: GO 44531
// begin if result [ result ] [ 2 ] < tmp then
44389: LD_VAR 0 6
44393: PUSH
44394: LD_VAR 0 6
44398: ARRAY
44399: PUSH
44400: LD_INT 2
44402: ARRAY
44403: PUSH
44404: LD_VAR 0 9
44408: LESS
44409: IFFALSE 44451
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44411: LD_ADDR_VAR 0 6
44415: PUSH
44416: LD_VAR 0 6
44420: PPUSH
44421: LD_VAR 0 6
44425: PUSH
44426: LD_INT 1
44428: PLUS
44429: PPUSH
44430: LD_VAR 0 7
44434: PUSH
44435: LD_VAR 0 9
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PPUSH
44444: CALL_OW 2
44448: ST_TO_ADDR
44449: GO 44531
// for j = 1 to result do
44451: LD_ADDR_VAR 0 8
44455: PUSH
44456: DOUBLE
44457: LD_INT 1
44459: DEC
44460: ST_TO_ADDR
44461: LD_VAR 0 6
44465: PUSH
44466: FOR_TO
44467: IFFALSE 44529
// begin if tmp < result [ j ] [ 2 ] then
44469: LD_VAR 0 9
44473: PUSH
44474: LD_VAR 0 6
44478: PUSH
44479: LD_VAR 0 8
44483: ARRAY
44484: PUSH
44485: LD_INT 2
44487: ARRAY
44488: LESS
44489: IFFALSE 44527
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44491: LD_ADDR_VAR 0 6
44495: PUSH
44496: LD_VAR 0 6
44500: PPUSH
44501: LD_VAR 0 8
44505: PPUSH
44506: LD_VAR 0 7
44510: PUSH
44511: LD_VAR 0 9
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PPUSH
44520: CALL_OW 2
44524: ST_TO_ADDR
// break ;
44525: GO 44529
// end ; end ;
44527: GO 44466
44529: POP
44530: POP
// end ; end ;
44531: GO 44330
44533: POP
44534: POP
// if result and not asc then
44535: LD_VAR 0 6
44539: PUSH
44540: LD_VAR 0 4
44544: NOT
44545: AND
44546: IFFALSE 44621
// begin tmp := result ;
44548: LD_ADDR_VAR 0 9
44552: PUSH
44553: LD_VAR 0 6
44557: ST_TO_ADDR
// for i = tmp downto 1 do
44558: LD_ADDR_VAR 0 7
44562: PUSH
44563: DOUBLE
44564: LD_VAR 0 9
44568: INC
44569: ST_TO_ADDR
44570: LD_INT 1
44572: PUSH
44573: FOR_DOWNTO
44574: IFFALSE 44619
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44576: LD_ADDR_VAR 0 6
44580: PUSH
44581: LD_VAR 0 6
44585: PPUSH
44586: LD_VAR 0 9
44590: PUSH
44591: LD_VAR 0 7
44595: MINUS
44596: PUSH
44597: LD_INT 1
44599: PLUS
44600: PPUSH
44601: LD_VAR 0 9
44605: PUSH
44606: LD_VAR 0 7
44610: ARRAY
44611: PPUSH
44612: CALL_OW 1
44616: ST_TO_ADDR
44617: GO 44573
44619: POP
44620: POP
// end ; tmp := [ ] ;
44621: LD_ADDR_VAR 0 9
44625: PUSH
44626: EMPTY
44627: ST_TO_ADDR
// if mode then
44628: LD_VAR 0 5
44632: IFFALSE 44701
// begin for i = 1 to result do
44634: LD_ADDR_VAR 0 7
44638: PUSH
44639: DOUBLE
44640: LD_INT 1
44642: DEC
44643: ST_TO_ADDR
44644: LD_VAR 0 6
44648: PUSH
44649: FOR_TO
44650: IFFALSE 44689
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44652: LD_ADDR_VAR 0 9
44656: PUSH
44657: LD_VAR 0 9
44661: PPUSH
44662: LD_VAR 0 7
44666: PPUSH
44667: LD_VAR 0 6
44671: PUSH
44672: LD_VAR 0 7
44676: ARRAY
44677: PUSH
44678: LD_INT 1
44680: ARRAY
44681: PPUSH
44682: CALL_OW 1
44686: ST_TO_ADDR
44687: GO 44649
44689: POP
44690: POP
// result := tmp ;
44691: LD_ADDR_VAR 0 6
44695: PUSH
44696: LD_VAR 0 9
44700: ST_TO_ADDR
// end ; end ;
44701: LD_VAR 0 6
44705: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44706: LD_INT 0
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44714: LD_ADDR_VAR 0 5
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// if not x or not y then
44736: LD_VAR 0 2
44740: NOT
44741: PUSH
44742: LD_VAR 0 3
44746: NOT
44747: OR
44748: IFFALSE 44752
// exit ;
44750: GO 46404
// if not range then
44752: LD_VAR 0 4
44756: NOT
44757: IFFALSE 44767
// range := 10 ;
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: LD_INT 10
44766: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44767: LD_ADDR_VAR 0 8
44771: PUSH
44772: LD_INT 81
44774: PUSH
44775: LD_VAR 0 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 92
44786: PUSH
44787: LD_VAR 0 2
44791: PUSH
44792: LD_VAR 0 3
44796: PUSH
44797: LD_VAR 0 4
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 3
44810: PUSH
44811: LD_INT 21
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: PPUSH
44830: CALL_OW 69
44834: ST_TO_ADDR
// if not tmp then
44835: LD_VAR 0 8
44839: NOT
44840: IFFALSE 44844
// exit ;
44842: GO 46404
// for i in tmp do
44844: LD_ADDR_VAR 0 6
44848: PUSH
44849: LD_VAR 0 8
44853: PUSH
44854: FOR_IN
44855: IFFALSE 46379
// begin points := [ 0 , 0 , 0 ] ;
44857: LD_ADDR_VAR 0 9
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// bpoints := 1 ;
44876: LD_ADDR_VAR 0 10
44880: PUSH
44881: LD_INT 1
44883: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44884: LD_VAR 0 6
44888: PPUSH
44889: CALL_OW 247
44893: PUSH
44894: LD_INT 1
44896: DOUBLE
44897: EQUAL
44898: IFTRUE 44902
44900: GO 45480
44902: POP
// begin if GetClass ( i ) = 1 then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 257
44912: PUSH
44913: LD_INT 1
44915: EQUAL
44916: IFFALSE 44937
// points := [ 10 , 5 , 3 ] ;
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_INT 10
44925: PUSH
44926: LD_INT 5
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44937: LD_VAR 0 6
44941: PPUSH
44942: CALL_OW 257
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 3
44952: PUSH
44953: LD_INT 4
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: IN
44961: IFFALSE 44982
// points := [ 3 , 2 , 1 ] ;
44963: LD_ADDR_VAR 0 9
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44982: LD_VAR 0 6
44986: PPUSH
44987: CALL_OW 257
44991: PUSH
44992: LD_INT 5
44994: EQUAL
44995: IFFALSE 45016
// points := [ 130 , 5 , 2 ] ;
44997: LD_ADDR_VAR 0 9
45001: PUSH
45002: LD_INT 130
45004: PUSH
45005: LD_INT 5
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45016: LD_VAR 0 6
45020: PPUSH
45021: CALL_OW 257
45025: PUSH
45026: LD_INT 8
45028: EQUAL
45029: IFFALSE 45050
// points := [ 35 , 35 , 30 ] ;
45031: LD_ADDR_VAR 0 9
45035: PUSH
45036: LD_INT 35
45038: PUSH
45039: LD_INT 35
45041: PUSH
45042: LD_INT 30
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45050: LD_VAR 0 6
45054: PPUSH
45055: CALL_OW 257
45059: PUSH
45060: LD_INT 9
45062: EQUAL
45063: IFFALSE 45084
// points := [ 20 , 55 , 40 ] ;
45065: LD_ADDR_VAR 0 9
45069: PUSH
45070: LD_INT 20
45072: PUSH
45073: LD_INT 55
45075: PUSH
45076: LD_INT 40
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45084: LD_VAR 0 6
45088: PPUSH
45089: CALL_OW 257
45093: PUSH
45094: LD_INT 12
45096: PUSH
45097: LD_INT 16
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: IN
45104: IFFALSE 45125
// points := [ 5 , 3 , 2 ] ;
45106: LD_ADDR_VAR 0 9
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45125: LD_VAR 0 6
45129: PPUSH
45130: CALL_OW 257
45134: PUSH
45135: LD_INT 17
45137: EQUAL
45138: IFFALSE 45159
// points := [ 100 , 50 , 75 ] ;
45140: LD_ADDR_VAR 0 9
45144: PUSH
45145: LD_INT 100
45147: PUSH
45148: LD_INT 50
45150: PUSH
45151: LD_INT 75
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45159: LD_VAR 0 6
45163: PPUSH
45164: CALL_OW 257
45168: PUSH
45169: LD_INT 15
45171: EQUAL
45172: IFFALSE 45193
// points := [ 10 , 5 , 3 ] ;
45174: LD_ADDR_VAR 0 9
45178: PUSH
45179: LD_INT 10
45181: PUSH
45182: LD_INT 5
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45193: LD_VAR 0 6
45197: PPUSH
45198: CALL_OW 257
45202: PUSH
45203: LD_INT 14
45205: EQUAL
45206: IFFALSE 45227
// points := [ 10 , 0 , 0 ] ;
45208: LD_ADDR_VAR 0 9
45212: PUSH
45213: LD_INT 10
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45227: LD_VAR 0 6
45231: PPUSH
45232: CALL_OW 257
45236: PUSH
45237: LD_INT 11
45239: EQUAL
45240: IFFALSE 45261
// points := [ 30 , 10 , 5 ] ;
45242: LD_ADDR_VAR 0 9
45246: PUSH
45247: LD_INT 30
45249: PUSH
45250: LD_INT 10
45252: PUSH
45253: LD_INT 5
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_INT 5
45268: PPUSH
45269: CALL_OW 321
45273: PUSH
45274: LD_INT 2
45276: EQUAL
45277: IFFALSE 45294
// bpoints := bpoints * 1.8 ;
45279: LD_ADDR_VAR 0 10
45283: PUSH
45284: LD_VAR 0 10
45288: PUSH
45289: LD_REAL  1.80000000000000E+0000
45292: MUL
45293: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45294: LD_VAR 0 6
45298: PPUSH
45299: CALL_OW 257
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: IN
45322: PUSH
45323: LD_VAR 0 1
45327: PPUSH
45328: LD_INT 51
45330: PPUSH
45331: CALL_OW 321
45335: PUSH
45336: LD_INT 2
45338: EQUAL
45339: AND
45340: IFFALSE 45357
// bpoints := bpoints * 1.2 ;
45342: LD_ADDR_VAR 0 10
45346: PUSH
45347: LD_VAR 0 10
45351: PUSH
45352: LD_REAL  1.20000000000000E+0000
45355: MUL
45356: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45357: LD_VAR 0 6
45361: PPUSH
45362: CALL_OW 257
45366: PUSH
45367: LD_INT 5
45369: PUSH
45370: LD_INT 7
45372: PUSH
45373: LD_INT 9
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: IN
45381: PUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: LD_INT 52
45389: PPUSH
45390: CALL_OW 321
45394: PUSH
45395: LD_INT 2
45397: EQUAL
45398: AND
45399: IFFALSE 45416
// bpoints := bpoints * 1.5 ;
45401: LD_ADDR_VAR 0 10
45405: PUSH
45406: LD_VAR 0 10
45410: PUSH
45411: LD_REAL  1.50000000000000E+0000
45414: MUL
45415: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45416: LD_VAR 0 1
45420: PPUSH
45421: LD_INT 66
45423: PPUSH
45424: CALL_OW 321
45428: PUSH
45429: LD_INT 2
45431: EQUAL
45432: IFFALSE 45449
// bpoints := bpoints * 1.1 ;
45434: LD_ADDR_VAR 0 10
45438: PUSH
45439: LD_VAR 0 10
45443: PUSH
45444: LD_REAL  1.10000000000000E+0000
45447: MUL
45448: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45449: LD_ADDR_VAR 0 10
45453: PUSH
45454: LD_VAR 0 10
45458: PUSH
45459: LD_VAR 0 6
45463: PPUSH
45464: LD_INT 1
45466: PPUSH
45467: CALL_OW 259
45471: PUSH
45472: LD_REAL  1.15000000000000E+0000
45475: MUL
45476: MUL
45477: ST_TO_ADDR
// end ; unit_vehicle :
45478: GO 46308
45480: LD_INT 2
45482: DOUBLE
45483: EQUAL
45484: IFTRUE 45488
45486: GO 46296
45488: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45489: LD_VAR 0 6
45493: PPUSH
45494: CALL_OW 264
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 42
45504: PUSH
45505: LD_INT 24
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: IN
45513: IFFALSE 45534
// points := [ 25 , 5 , 3 ] ;
45515: LD_ADDR_VAR 0 9
45519: PUSH
45520: LD_INT 25
45522: PUSH
45523: LD_INT 5
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45534: LD_VAR 0 6
45538: PPUSH
45539: CALL_OW 264
45543: PUSH
45544: LD_INT 4
45546: PUSH
45547: LD_INT 43
45549: PUSH
45550: LD_INT 25
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: IN
45558: IFFALSE 45579
// points := [ 40 , 15 , 5 ] ;
45560: LD_ADDR_VAR 0 9
45564: PUSH
45565: LD_INT 40
45567: PUSH
45568: LD_INT 15
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45579: LD_VAR 0 6
45583: PPUSH
45584: CALL_OW 264
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: LD_INT 23
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: IN
45599: IFFALSE 45620
// points := [ 7 , 25 , 8 ] ;
45601: LD_ADDR_VAR 0 9
45605: PUSH
45606: LD_INT 7
45608: PUSH
45609: LD_INT 25
45611: PUSH
45612: LD_INT 8
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45620: LD_VAR 0 6
45624: PPUSH
45625: CALL_OW 264
45629: PUSH
45630: LD_INT 5
45632: PUSH
45633: LD_INT 27
45635: PUSH
45636: LD_INT 44
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: IN
45644: IFFALSE 45665
// points := [ 14 , 50 , 16 ] ;
45646: LD_ADDR_VAR 0 9
45650: PUSH
45651: LD_INT 14
45653: PUSH
45654: LD_INT 50
45656: PUSH
45657: LD_INT 16
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45665: LD_VAR 0 6
45669: PPUSH
45670: CALL_OW 264
45674: PUSH
45675: LD_INT 6
45677: PUSH
45678: LD_INT 46
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: IN
45685: IFFALSE 45706
// points := [ 32 , 120 , 70 ] ;
45687: LD_ADDR_VAR 0 9
45691: PUSH
45692: LD_INT 32
45694: PUSH
45695: LD_INT 120
45697: PUSH
45698: LD_INT 70
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45706: LD_VAR 0 6
45710: PPUSH
45711: CALL_OW 264
45715: PUSH
45716: LD_INT 7
45718: PUSH
45719: LD_INT 28
45721: PUSH
45722: LD_INT 45
45724: PUSH
45725: LD_EXP 53
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: IN
45736: IFFALSE 45757
// points := [ 35 , 20 , 45 ] ;
45738: LD_ADDR_VAR 0 9
45742: PUSH
45743: LD_INT 35
45745: PUSH
45746: LD_INT 20
45748: PUSH
45749: LD_INT 45
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45757: LD_VAR 0 6
45761: PPUSH
45762: CALL_OW 264
45766: PUSH
45767: LD_INT 47
45769: PUSH
45770: EMPTY
45771: LIST
45772: IN
45773: IFFALSE 45794
// points := [ 67 , 45 , 75 ] ;
45775: LD_ADDR_VAR 0 9
45779: PUSH
45780: LD_INT 67
45782: PUSH
45783: LD_INT 45
45785: PUSH
45786: LD_INT 75
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45794: LD_VAR 0 6
45798: PPUSH
45799: CALL_OW 264
45803: PUSH
45804: LD_INT 26
45806: PUSH
45807: EMPTY
45808: LIST
45809: IN
45810: IFFALSE 45831
// points := [ 120 , 30 , 80 ] ;
45812: LD_ADDR_VAR 0 9
45816: PUSH
45817: LD_INT 120
45819: PUSH
45820: LD_INT 30
45822: PUSH
45823: LD_INT 80
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45831: LD_VAR 0 6
45835: PPUSH
45836: CALL_OW 264
45840: PUSH
45841: LD_INT 22
45843: PUSH
45844: EMPTY
45845: LIST
45846: IN
45847: IFFALSE 45868
// points := [ 40 , 1 , 1 ] ;
45849: LD_ADDR_VAR 0 9
45853: PUSH
45854: LD_INT 40
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45868: LD_VAR 0 6
45872: PPUSH
45873: CALL_OW 264
45877: PUSH
45878: LD_INT 29
45880: PUSH
45881: EMPTY
45882: LIST
45883: IN
45884: IFFALSE 45905
// points := [ 70 , 200 , 400 ] ;
45886: LD_ADDR_VAR 0 9
45890: PUSH
45891: LD_INT 70
45893: PUSH
45894: LD_INT 200
45896: PUSH
45897: LD_INT 400
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45905: LD_VAR 0 6
45909: PPUSH
45910: CALL_OW 264
45914: PUSH
45915: LD_INT 14
45917: PUSH
45918: LD_INT 53
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: IN
45925: IFFALSE 45946
// points := [ 40 , 10 , 20 ] ;
45927: LD_ADDR_VAR 0 9
45931: PUSH
45932: LD_INT 40
45934: PUSH
45935: LD_INT 10
45937: PUSH
45938: LD_INT 20
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45946: LD_VAR 0 6
45950: PPUSH
45951: CALL_OW 264
45955: PUSH
45956: LD_INT 9
45958: PUSH
45959: EMPTY
45960: LIST
45961: IN
45962: IFFALSE 45983
// points := [ 5 , 70 , 20 ] ;
45964: LD_ADDR_VAR 0 9
45968: PUSH
45969: LD_INT 5
45971: PUSH
45972: LD_INT 70
45974: PUSH
45975: LD_INT 20
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45983: LD_VAR 0 6
45987: PPUSH
45988: CALL_OW 264
45992: PUSH
45993: LD_INT 10
45995: PUSH
45996: EMPTY
45997: LIST
45998: IN
45999: IFFALSE 46020
// points := [ 35 , 110 , 70 ] ;
46001: LD_ADDR_VAR 0 9
46005: PUSH
46006: LD_INT 35
46008: PUSH
46009: LD_INT 110
46011: PUSH
46012: LD_INT 70
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46020: LD_VAR 0 6
46024: PPUSH
46025: CALL_OW 265
46029: PUSH
46030: LD_INT 25
46032: EQUAL
46033: IFFALSE 46054
// points := [ 80 , 65 , 100 ] ;
46035: LD_ADDR_VAR 0 9
46039: PUSH
46040: LD_INT 80
46042: PUSH
46043: LD_INT 65
46045: PUSH
46046: LD_INT 100
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46054: LD_VAR 0 6
46058: PPUSH
46059: CALL_OW 263
46063: PUSH
46064: LD_INT 1
46066: EQUAL
46067: IFFALSE 46102
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46069: LD_ADDR_VAR 0 10
46073: PUSH
46074: LD_VAR 0 10
46078: PUSH
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 311
46088: PPUSH
46089: LD_INT 3
46091: PPUSH
46092: CALL_OW 259
46096: PUSH
46097: LD_INT 4
46099: MUL
46100: MUL
46101: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46102: LD_VAR 0 6
46106: PPUSH
46107: CALL_OW 263
46111: PUSH
46112: LD_INT 2
46114: EQUAL
46115: IFFALSE 46166
// begin j := IsControledBy ( i ) ;
46117: LD_ADDR_VAR 0 7
46121: PUSH
46122: LD_VAR 0 6
46126: PPUSH
46127: CALL_OW 312
46131: ST_TO_ADDR
// if j then
46132: LD_VAR 0 7
46136: IFFALSE 46166
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46138: LD_ADDR_VAR 0 10
46142: PUSH
46143: LD_VAR 0 10
46147: PUSH
46148: LD_VAR 0 7
46152: PPUSH
46153: LD_INT 3
46155: PPUSH
46156: CALL_OW 259
46160: PUSH
46161: LD_INT 3
46163: MUL
46164: MUL
46165: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 264
46175: PUSH
46176: LD_INT 5
46178: PUSH
46179: LD_INT 6
46181: PUSH
46182: LD_INT 46
46184: PUSH
46185: LD_INT 44
46187: PUSH
46188: LD_INT 47
46190: PUSH
46191: LD_INT 45
46193: PUSH
46194: LD_INT 28
46196: PUSH
46197: LD_INT 7
46199: PUSH
46200: LD_INT 27
46202: PUSH
46203: LD_INT 29
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: IN
46218: PUSH
46219: LD_VAR 0 1
46223: PPUSH
46224: LD_INT 52
46226: PPUSH
46227: CALL_OW 321
46231: PUSH
46232: LD_INT 2
46234: EQUAL
46235: AND
46236: IFFALSE 46253
// bpoints := bpoints * 1.2 ;
46238: LD_ADDR_VAR 0 10
46242: PUSH
46243: LD_VAR 0 10
46247: PUSH
46248: LD_REAL  1.20000000000000E+0000
46251: MUL
46252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46253: LD_VAR 0 6
46257: PPUSH
46258: CALL_OW 264
46262: PUSH
46263: LD_INT 6
46265: PUSH
46266: LD_INT 46
46268: PUSH
46269: LD_INT 47
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: IN
46277: IFFALSE 46294
// bpoints := bpoints * 1.2 ;
46279: LD_ADDR_VAR 0 10
46283: PUSH
46284: LD_VAR 0 10
46288: PUSH
46289: LD_REAL  1.20000000000000E+0000
46292: MUL
46293: ST_TO_ADDR
// end ; unit_building :
46294: GO 46308
46296: LD_INT 3
46298: DOUBLE
46299: EQUAL
46300: IFTRUE 46304
46302: GO 46307
46304: POP
// ; end ;
46305: GO 46308
46307: POP
// for j = 1 to 3 do
46308: LD_ADDR_VAR 0 7
46312: PUSH
46313: DOUBLE
46314: LD_INT 1
46316: DEC
46317: ST_TO_ADDR
46318: LD_INT 3
46320: PUSH
46321: FOR_TO
46322: IFFALSE 46375
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46324: LD_ADDR_VAR 0 5
46328: PUSH
46329: LD_VAR 0 5
46333: PPUSH
46334: LD_VAR 0 7
46338: PPUSH
46339: LD_VAR 0 5
46343: PUSH
46344: LD_VAR 0 7
46348: ARRAY
46349: PUSH
46350: LD_VAR 0 9
46354: PUSH
46355: LD_VAR 0 7
46359: ARRAY
46360: PUSH
46361: LD_VAR 0 10
46365: MUL
46366: PLUS
46367: PPUSH
46368: CALL_OW 1
46372: ST_TO_ADDR
46373: GO 46321
46375: POP
46376: POP
// end ;
46377: GO 44854
46379: POP
46380: POP
// result := Replace ( result , 4 , tmp ) ;
46381: LD_ADDR_VAR 0 5
46385: PUSH
46386: LD_VAR 0 5
46390: PPUSH
46391: LD_INT 4
46393: PPUSH
46394: LD_VAR 0 8
46398: PPUSH
46399: CALL_OW 1
46403: ST_TO_ADDR
// end ;
46404: LD_VAR 0 5
46408: RET
// export function DangerAtRange ( unit , range ) ; begin
46409: LD_INT 0
46411: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: LD_VAR 0 1
46421: PPUSH
46422: CALL_OW 255
46426: PPUSH
46427: LD_VAR 0 1
46431: PPUSH
46432: CALL_OW 250
46436: PPUSH
46437: LD_VAR 0 1
46441: PPUSH
46442: CALL_OW 251
46446: PPUSH
46447: LD_VAR 0 2
46451: PPUSH
46452: CALL 44706 0 4
46456: ST_TO_ADDR
// end ;
46457: LD_VAR 0 3
46461: RET
// export function DangerInArea ( side , area ) ; begin
46462: LD_INT 0
46464: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_VAR 0 2
46474: PPUSH
46475: LD_INT 81
46477: PUSH
46478: LD_VAR 0 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PPUSH
46487: CALL_OW 70
46491: ST_TO_ADDR
// end ;
46492: LD_VAR 0 3
46496: RET
// export function IsExtension ( b ) ; begin
46497: LD_INT 0
46499: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46500: LD_ADDR_VAR 0 2
46504: PUSH
46505: LD_VAR 0 1
46509: PUSH
46510: LD_INT 23
46512: PUSH
46513: LD_INT 20
46515: PUSH
46516: LD_INT 22
46518: PUSH
46519: LD_INT 17
46521: PUSH
46522: LD_INT 24
46524: PUSH
46525: LD_INT 21
46527: PUSH
46528: LD_INT 19
46530: PUSH
46531: LD_INT 16
46533: PUSH
46534: LD_INT 25
46536: PUSH
46537: LD_INT 18
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: IN
46552: ST_TO_ADDR
// end ;
46553: LD_VAR 0 2
46557: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46558: LD_INT 0
46560: PPUSH
46561: PPUSH
46562: PPUSH
// result := [ ] ;
46563: LD_ADDR_VAR 0 4
46567: PUSH
46568: EMPTY
46569: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46570: LD_ADDR_VAR 0 5
46574: PUSH
46575: LD_VAR 0 2
46579: PPUSH
46580: LD_INT 21
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PPUSH
46590: CALL_OW 70
46594: ST_TO_ADDR
// if not tmp then
46595: LD_VAR 0 5
46599: NOT
46600: IFFALSE 46604
// exit ;
46602: GO 46668
// if checkLink then
46604: LD_VAR 0 3
46608: IFFALSE 46658
// begin for i in tmp do
46610: LD_ADDR_VAR 0 6
46614: PUSH
46615: LD_VAR 0 5
46619: PUSH
46620: FOR_IN
46621: IFFALSE 46656
// if GetBase ( i ) <> base then
46623: LD_VAR 0 6
46627: PPUSH
46628: CALL_OW 274
46632: PUSH
46633: LD_VAR 0 1
46637: NONEQUAL
46638: IFFALSE 46654
// ComLinkToBase ( base , i ) ;
46640: LD_VAR 0 1
46644: PPUSH
46645: LD_VAR 0 6
46649: PPUSH
46650: CALL_OW 169
46654: GO 46620
46656: POP
46657: POP
// end ; result := tmp ;
46658: LD_ADDR_VAR 0 4
46662: PUSH
46663: LD_VAR 0 5
46667: ST_TO_ADDR
// end ;
46668: LD_VAR 0 4
46672: RET
// export function ComComplete ( units , b ) ; var i ; begin
46673: LD_INT 0
46675: PPUSH
46676: PPUSH
// if not units then
46677: LD_VAR 0 1
46681: NOT
46682: IFFALSE 46686
// exit ;
46684: GO 46776
// for i in units do
46686: LD_ADDR_VAR 0 4
46690: PUSH
46691: LD_VAR 0 1
46695: PUSH
46696: FOR_IN
46697: IFFALSE 46774
// if BuildingStatus ( b ) = bs_build then
46699: LD_VAR 0 2
46703: PPUSH
46704: CALL_OW 461
46708: PUSH
46709: LD_INT 1
46711: EQUAL
46712: IFFALSE 46772
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46714: LD_VAR 0 4
46718: PPUSH
46719: LD_STRING h
46721: PUSH
46722: LD_VAR 0 2
46726: PPUSH
46727: CALL_OW 250
46731: PUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: CALL_OW 251
46741: PUSH
46742: LD_VAR 0 2
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: PPUSH
46768: CALL_OW 446
46772: GO 46696
46774: POP
46775: POP
// end ;
46776: LD_VAR 0 3
46780: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46781: LD_INT 0
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46789: LD_VAR 0 1
46793: NOT
46794: PUSH
46795: LD_VAR 0 1
46799: PPUSH
46800: CALL_OW 263
46804: PUSH
46805: LD_INT 2
46807: NONEQUAL
46808: OR
46809: IFFALSE 46813
// exit ;
46811: GO 47129
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46813: LD_ADDR_VAR 0 6
46817: PUSH
46818: LD_INT 22
46820: PUSH
46821: LD_VAR 0 1
46825: PPUSH
46826: CALL_OW 255
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 30
46840: PUSH
46841: LD_INT 36
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 34
46850: PUSH
46851: LD_INT 31
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PPUSH
46867: CALL_OW 69
46871: ST_TO_ADDR
// if not tmp then
46872: LD_VAR 0 6
46876: NOT
46877: IFFALSE 46881
// exit ;
46879: GO 47129
// result := [ ] ;
46881: LD_ADDR_VAR 0 2
46885: PUSH
46886: EMPTY
46887: ST_TO_ADDR
// for i in tmp do
46888: LD_ADDR_VAR 0 3
46892: PUSH
46893: LD_VAR 0 6
46897: PUSH
46898: FOR_IN
46899: IFFALSE 46970
// begin t := UnitsInside ( i ) ;
46901: LD_ADDR_VAR 0 4
46905: PUSH
46906: LD_VAR 0 3
46910: PPUSH
46911: CALL_OW 313
46915: ST_TO_ADDR
// if t then
46916: LD_VAR 0 4
46920: IFFALSE 46968
// for j in t do
46922: LD_ADDR_VAR 0 7
46926: PUSH
46927: LD_VAR 0 4
46931: PUSH
46932: FOR_IN
46933: IFFALSE 46966
// result := Replace ( result , result + 1 , j ) ;
46935: LD_ADDR_VAR 0 2
46939: PUSH
46940: LD_VAR 0 2
46944: PPUSH
46945: LD_VAR 0 2
46949: PUSH
46950: LD_INT 1
46952: PLUS
46953: PPUSH
46954: LD_VAR 0 7
46958: PPUSH
46959: CALL_OW 1
46963: ST_TO_ADDR
46964: GO 46932
46966: POP
46967: POP
// end ;
46968: GO 46898
46970: POP
46971: POP
// if not result then
46972: LD_VAR 0 2
46976: NOT
46977: IFFALSE 46981
// exit ;
46979: GO 47129
// mech := result [ 1 ] ;
46981: LD_ADDR_VAR 0 5
46985: PUSH
46986: LD_VAR 0 2
46990: PUSH
46991: LD_INT 1
46993: ARRAY
46994: ST_TO_ADDR
// if result > 1 then
46995: LD_VAR 0 2
46999: PUSH
47000: LD_INT 1
47002: GREATER
47003: IFFALSE 47115
// begin for i = 2 to result do
47005: LD_ADDR_VAR 0 3
47009: PUSH
47010: DOUBLE
47011: LD_INT 2
47013: DEC
47014: ST_TO_ADDR
47015: LD_VAR 0 2
47019: PUSH
47020: FOR_TO
47021: IFFALSE 47113
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47023: LD_ADDR_VAR 0 4
47027: PUSH
47028: LD_VAR 0 2
47032: PUSH
47033: LD_VAR 0 3
47037: ARRAY
47038: PPUSH
47039: LD_INT 3
47041: PPUSH
47042: CALL_OW 259
47046: PUSH
47047: LD_VAR 0 2
47051: PUSH
47052: LD_VAR 0 3
47056: ARRAY
47057: PPUSH
47058: CALL_OW 432
47062: MINUS
47063: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47064: LD_VAR 0 4
47068: PUSH
47069: LD_VAR 0 5
47073: PPUSH
47074: LD_INT 3
47076: PPUSH
47077: CALL_OW 259
47081: PUSH
47082: LD_VAR 0 5
47086: PPUSH
47087: CALL_OW 432
47091: MINUS
47092: GREATEREQUAL
47093: IFFALSE 47111
// mech := result [ i ] ;
47095: LD_ADDR_VAR 0 5
47099: PUSH
47100: LD_VAR 0 2
47104: PUSH
47105: LD_VAR 0 3
47109: ARRAY
47110: ST_TO_ADDR
// end ;
47111: GO 47020
47113: POP
47114: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47115: LD_VAR 0 1
47119: PPUSH
47120: LD_VAR 0 5
47124: PPUSH
47125: CALL_OW 135
// end ;
47129: LD_VAR 0 2
47133: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47134: LD_INT 0
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
47140: PPUSH
47141: PPUSH
47142: PPUSH
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
// result := [ ] ;
47149: LD_ADDR_VAR 0 7
47153: PUSH
47154: EMPTY
47155: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47156: LD_VAR 0 1
47160: PPUSH
47161: CALL_OW 266
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: IN
47176: NOT
47177: IFFALSE 47181
// exit ;
47179: GO 48815
// if name then
47181: LD_VAR 0 3
47185: IFFALSE 47201
// SetBName ( base_dep , name ) ;
47187: LD_VAR 0 1
47191: PPUSH
47192: LD_VAR 0 3
47196: PPUSH
47197: CALL_OW 500
// base := GetBase ( base_dep ) ;
47201: LD_ADDR_VAR 0 15
47205: PUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 274
47215: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47216: LD_ADDR_VAR 0 16
47220: PUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 255
47230: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47231: LD_ADDR_VAR 0 17
47235: PUSH
47236: LD_VAR 0 1
47240: PPUSH
47241: CALL_OW 248
47245: ST_TO_ADDR
// if sources then
47246: LD_VAR 0 5
47250: IFFALSE 47297
// for i = 1 to 3 do
47252: LD_ADDR_VAR 0 8
47256: PUSH
47257: DOUBLE
47258: LD_INT 1
47260: DEC
47261: ST_TO_ADDR
47262: LD_INT 3
47264: PUSH
47265: FOR_TO
47266: IFFALSE 47295
// AddResourceType ( base , i , sources [ i ] ) ;
47268: LD_VAR 0 15
47272: PPUSH
47273: LD_VAR 0 8
47277: PPUSH
47278: LD_VAR 0 5
47282: PUSH
47283: LD_VAR 0 8
47287: ARRAY
47288: PPUSH
47289: CALL_OW 276
47293: GO 47265
47295: POP
47296: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47297: LD_ADDR_VAR 0 18
47301: PUSH
47302: LD_VAR 0 15
47306: PPUSH
47307: LD_VAR 0 2
47311: PPUSH
47312: LD_INT 1
47314: PPUSH
47315: CALL 46558 0 3
47319: ST_TO_ADDR
// InitHc ;
47320: CALL_OW 19
// InitUc ;
47324: CALL_OW 18
// uc_side := side ;
47328: LD_ADDR_OWVAR 20
47332: PUSH
47333: LD_VAR 0 16
47337: ST_TO_ADDR
// uc_nation := nation ;
47338: LD_ADDR_OWVAR 21
47342: PUSH
47343: LD_VAR 0 17
47347: ST_TO_ADDR
// if buildings then
47348: LD_VAR 0 18
47352: IFFALSE 48674
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47354: LD_ADDR_VAR 0 19
47358: PUSH
47359: LD_VAR 0 18
47363: PPUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 30
47369: PUSH
47370: LD_INT 29
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 30
47379: PUSH
47380: LD_INT 30
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: PPUSH
47392: CALL_OW 72
47396: ST_TO_ADDR
// if tmp then
47397: LD_VAR 0 19
47401: IFFALSE 47449
// for i in tmp do
47403: LD_ADDR_VAR 0 8
47407: PUSH
47408: LD_VAR 0 19
47412: PUSH
47413: FOR_IN
47414: IFFALSE 47447
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47416: LD_VAR 0 8
47420: PPUSH
47421: CALL_OW 250
47425: PPUSH
47426: LD_VAR 0 8
47430: PPUSH
47431: CALL_OW 251
47435: PPUSH
47436: LD_VAR 0 16
47440: PPUSH
47441: CALL_OW 441
47445: GO 47413
47447: POP
47448: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47449: LD_VAR 0 18
47453: PPUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 30
47459: PUSH
47460: LD_INT 32
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 30
47469: PUSH
47470: LD_INT 33
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: PPUSH
47482: CALL_OW 72
47486: IFFALSE 47574
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47488: LD_ADDR_VAR 0 8
47492: PUSH
47493: LD_VAR 0 18
47497: PPUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 30
47503: PUSH
47504: LD_INT 32
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 30
47513: PUSH
47514: LD_INT 33
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: PPUSH
47526: CALL_OW 72
47530: PUSH
47531: FOR_IN
47532: IFFALSE 47572
// begin if not GetBWeapon ( i ) then
47534: LD_VAR 0 8
47538: PPUSH
47539: CALL_OW 269
47543: NOT
47544: IFFALSE 47570
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47546: LD_VAR 0 8
47550: PPUSH
47551: LD_VAR 0 8
47555: PPUSH
47556: LD_VAR 0 2
47560: PPUSH
47561: CALL 48820 0 2
47565: PPUSH
47566: CALL_OW 431
// end ;
47570: GO 47531
47572: POP
47573: POP
// end ; for i = 1 to personel do
47574: LD_ADDR_VAR 0 8
47578: PUSH
47579: DOUBLE
47580: LD_INT 1
47582: DEC
47583: ST_TO_ADDR
47584: LD_VAR 0 6
47588: PUSH
47589: FOR_TO
47590: IFFALSE 48654
// begin if i > 4 then
47592: LD_VAR 0 8
47596: PUSH
47597: LD_INT 4
47599: GREATER
47600: IFFALSE 47604
// break ;
47602: GO 48654
// case i of 1 :
47604: LD_VAR 0 8
47608: PUSH
47609: LD_INT 1
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 47697
47617: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47618: LD_ADDR_VAR 0 12
47622: PUSH
47623: LD_VAR 0 18
47627: PPUSH
47628: LD_INT 22
47630: PUSH
47631: LD_VAR 0 16
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 58
47642: PUSH
47643: EMPTY
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 30
47651: PUSH
47652: LD_INT 32
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 30
47661: PUSH
47662: LD_INT 4
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 5
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: PPUSH
47690: CALL_OW 72
47694: ST_TO_ADDR
47695: GO 47919
47697: LD_INT 2
47699: DOUBLE
47700: EQUAL
47701: IFTRUE 47705
47703: GO 47767
47705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47706: LD_ADDR_VAR 0 12
47710: PUSH
47711: LD_VAR 0 18
47715: PPUSH
47716: LD_INT 22
47718: PUSH
47719: LD_VAR 0 16
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 30
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 30
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PPUSH
47760: CALL_OW 72
47764: ST_TO_ADDR
47765: GO 47919
47767: LD_INT 3
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47775
47773: GO 47837
47775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47776: LD_ADDR_VAR 0 12
47780: PUSH
47781: LD_VAR 0 18
47785: PPUSH
47786: LD_INT 22
47788: PUSH
47789: LD_VAR 0 16
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 30
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 30
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PPUSH
47830: CALL_OW 72
47834: ST_TO_ADDR
47835: GO 47919
47837: LD_INT 4
47839: DOUBLE
47840: EQUAL
47841: IFTRUE 47845
47843: GO 47918
47845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47846: LD_ADDR_VAR 0 12
47850: PUSH
47851: LD_VAR 0 18
47855: PPUSH
47856: LD_INT 22
47858: PUSH
47859: LD_VAR 0 16
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 30
47873: PUSH
47874: LD_INT 6
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 30
47883: PUSH
47884: LD_INT 7
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 30
47893: PUSH
47894: LD_INT 8
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PPUSH
47911: CALL_OW 72
47915: ST_TO_ADDR
47916: GO 47919
47918: POP
// if i = 1 then
47919: LD_VAR 0 8
47923: PUSH
47924: LD_INT 1
47926: EQUAL
47927: IFFALSE 48038
// begin tmp := [ ] ;
47929: LD_ADDR_VAR 0 19
47933: PUSH
47934: EMPTY
47935: ST_TO_ADDR
// for j in f do
47936: LD_ADDR_VAR 0 9
47940: PUSH
47941: LD_VAR 0 12
47945: PUSH
47946: FOR_IN
47947: IFFALSE 48020
// if GetBType ( j ) = b_bunker then
47949: LD_VAR 0 9
47953: PPUSH
47954: CALL_OW 266
47958: PUSH
47959: LD_INT 32
47961: EQUAL
47962: IFFALSE 47989
// tmp := Insert ( tmp , 1 , j ) else
47964: LD_ADDR_VAR 0 19
47968: PUSH
47969: LD_VAR 0 19
47973: PPUSH
47974: LD_INT 1
47976: PPUSH
47977: LD_VAR 0 9
47981: PPUSH
47982: CALL_OW 2
47986: ST_TO_ADDR
47987: GO 48018
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47989: LD_ADDR_VAR 0 19
47993: PUSH
47994: LD_VAR 0 19
47998: PPUSH
47999: LD_VAR 0 19
48003: PUSH
48004: LD_INT 1
48006: PLUS
48007: PPUSH
48008: LD_VAR 0 9
48012: PPUSH
48013: CALL_OW 2
48017: ST_TO_ADDR
48018: GO 47946
48020: POP
48021: POP
// if tmp then
48022: LD_VAR 0 19
48026: IFFALSE 48038
// f := tmp ;
48028: LD_ADDR_VAR 0 12
48032: PUSH
48033: LD_VAR 0 19
48037: ST_TO_ADDR
// end ; x := personel [ i ] ;
48038: LD_ADDR_VAR 0 13
48042: PUSH
48043: LD_VAR 0 6
48047: PUSH
48048: LD_VAR 0 8
48052: ARRAY
48053: ST_TO_ADDR
// if x = - 1 then
48054: LD_VAR 0 13
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: EQUAL
48063: IFFALSE 48272
// begin for j in f do
48065: LD_ADDR_VAR 0 9
48069: PUSH
48070: LD_VAR 0 12
48074: PUSH
48075: FOR_IN
48076: IFFALSE 48268
// repeat InitHc ;
48078: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48082: LD_VAR 0 9
48086: PPUSH
48087: CALL_OW 266
48091: PUSH
48092: LD_INT 5
48094: EQUAL
48095: IFFALSE 48165
// begin if UnitsInside ( j ) < 3 then
48097: LD_VAR 0 9
48101: PPUSH
48102: CALL_OW 313
48106: PUSH
48107: LD_INT 3
48109: LESS
48110: IFFALSE 48146
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48112: LD_INT 0
48114: PPUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 8
48120: PUSH
48121: LD_INT 9
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: PUSH
48129: LD_VAR 0 17
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 4
48139: PPUSH
48140: CALL_OW 380
48144: GO 48163
// PrepareHuman ( false , i , skill ) ;
48146: LD_INT 0
48148: PPUSH
48149: LD_VAR 0 8
48153: PPUSH
48154: LD_VAR 0 4
48158: PPUSH
48159: CALL_OW 380
// end else
48163: GO 48182
// PrepareHuman ( false , i , skill ) ;
48165: LD_INT 0
48167: PPUSH
48168: LD_VAR 0 8
48172: PPUSH
48173: LD_VAR 0 4
48177: PPUSH
48178: CALL_OW 380
// un := CreateHuman ;
48182: LD_ADDR_VAR 0 14
48186: PUSH
48187: CALL_OW 44
48191: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48192: LD_ADDR_VAR 0 7
48196: PUSH
48197: LD_VAR 0 7
48201: PPUSH
48202: LD_INT 1
48204: PPUSH
48205: LD_VAR 0 14
48209: PPUSH
48210: CALL_OW 2
48214: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48215: LD_VAR 0 14
48219: PPUSH
48220: LD_VAR 0 9
48224: PPUSH
48225: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48229: LD_VAR 0 9
48233: PPUSH
48234: CALL_OW 313
48238: PUSH
48239: LD_INT 6
48241: EQUAL
48242: PUSH
48243: LD_VAR 0 9
48247: PPUSH
48248: CALL_OW 266
48252: PUSH
48253: LD_INT 32
48255: PUSH
48256: LD_INT 31
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: IN
48263: OR
48264: IFFALSE 48078
48266: GO 48075
48268: POP
48269: POP
// end else
48270: GO 48652
// for j = 1 to x do
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: DOUBLE
48278: LD_INT 1
48280: DEC
48281: ST_TO_ADDR
48282: LD_VAR 0 13
48286: PUSH
48287: FOR_TO
48288: IFFALSE 48650
// begin InitHc ;
48290: CALL_OW 19
// if not f then
48294: LD_VAR 0 12
48298: NOT
48299: IFFALSE 48388
// begin PrepareHuman ( false , i , skill ) ;
48301: LD_INT 0
48303: PPUSH
48304: LD_VAR 0 8
48308: PPUSH
48309: LD_VAR 0 4
48313: PPUSH
48314: CALL_OW 380
// un := CreateHuman ;
48318: LD_ADDR_VAR 0 14
48322: PUSH
48323: CALL_OW 44
48327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48328: LD_ADDR_VAR 0 7
48332: PUSH
48333: LD_VAR 0 7
48337: PPUSH
48338: LD_INT 1
48340: PPUSH
48341: LD_VAR 0 14
48345: PPUSH
48346: CALL_OW 2
48350: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48351: LD_VAR 0 14
48355: PPUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 250
48365: PPUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 251
48375: PPUSH
48376: LD_INT 10
48378: PPUSH
48379: LD_INT 0
48381: PPUSH
48382: CALL_OW 50
// continue ;
48386: GO 48287
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48388: LD_VAR 0 12
48392: PUSH
48393: LD_INT 1
48395: ARRAY
48396: PPUSH
48397: CALL_OW 313
48401: PUSH
48402: LD_VAR 0 12
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: PPUSH
48411: CALL_OW 266
48415: PUSH
48416: LD_INT 32
48418: PUSH
48419: LD_INT 31
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: IN
48426: AND
48427: PUSH
48428: LD_VAR 0 12
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: CALL_OW 313
48441: PUSH
48442: LD_INT 6
48444: EQUAL
48445: OR
48446: IFFALSE 48466
// f := Delete ( f , 1 ) ;
48448: LD_ADDR_VAR 0 12
48452: PUSH
48453: LD_VAR 0 12
48457: PPUSH
48458: LD_INT 1
48460: PPUSH
48461: CALL_OW 3
48465: ST_TO_ADDR
// if not f then
48466: LD_VAR 0 12
48470: NOT
48471: IFFALSE 48489
// begin x := x + 2 ;
48473: LD_ADDR_VAR 0 13
48477: PUSH
48478: LD_VAR 0 13
48482: PUSH
48483: LD_INT 2
48485: PLUS
48486: ST_TO_ADDR
// continue ;
48487: GO 48287
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48489: LD_VAR 0 12
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PPUSH
48498: CALL_OW 266
48502: PUSH
48503: LD_INT 5
48505: EQUAL
48506: IFFALSE 48580
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48508: LD_VAR 0 12
48512: PUSH
48513: LD_INT 1
48515: ARRAY
48516: PPUSH
48517: CALL_OW 313
48521: PUSH
48522: LD_INT 3
48524: LESS
48525: IFFALSE 48561
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48527: LD_INT 0
48529: PPUSH
48530: LD_INT 5
48532: PUSH
48533: LD_INT 8
48535: PUSH
48536: LD_INT 9
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: PUSH
48544: LD_VAR 0 17
48548: ARRAY
48549: PPUSH
48550: LD_VAR 0 4
48554: PPUSH
48555: CALL_OW 380
48559: GO 48578
// PrepareHuman ( false , i , skill ) ;
48561: LD_INT 0
48563: PPUSH
48564: LD_VAR 0 8
48568: PPUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: CALL_OW 380
// end else
48578: GO 48597
// PrepareHuman ( false , i , skill ) ;
48580: LD_INT 0
48582: PPUSH
48583: LD_VAR 0 8
48587: PPUSH
48588: LD_VAR 0 4
48592: PPUSH
48593: CALL_OW 380
// un := CreateHuman ;
48597: LD_ADDR_VAR 0 14
48601: PUSH
48602: CALL_OW 44
48606: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48607: LD_ADDR_VAR 0 7
48611: PUSH
48612: LD_VAR 0 7
48616: PPUSH
48617: LD_INT 1
48619: PPUSH
48620: LD_VAR 0 14
48624: PPUSH
48625: CALL_OW 2
48629: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48630: LD_VAR 0 14
48634: PPUSH
48635: LD_VAR 0 12
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: CALL_OW 52
// end ;
48648: GO 48287
48650: POP
48651: POP
// end ;
48652: GO 47589
48654: POP
48655: POP
// result := result ^ buildings ;
48656: LD_ADDR_VAR 0 7
48660: PUSH
48661: LD_VAR 0 7
48665: PUSH
48666: LD_VAR 0 18
48670: ADD
48671: ST_TO_ADDR
// end else
48672: GO 48815
// begin for i = 1 to personel do
48674: LD_ADDR_VAR 0 8
48678: PUSH
48679: DOUBLE
48680: LD_INT 1
48682: DEC
48683: ST_TO_ADDR
48684: LD_VAR 0 6
48688: PUSH
48689: FOR_TO
48690: IFFALSE 48813
// begin if i > 4 then
48692: LD_VAR 0 8
48696: PUSH
48697: LD_INT 4
48699: GREATER
48700: IFFALSE 48704
// break ;
48702: GO 48813
// x := personel [ i ] ;
48704: LD_ADDR_VAR 0 13
48708: PUSH
48709: LD_VAR 0 6
48713: PUSH
48714: LD_VAR 0 8
48718: ARRAY
48719: ST_TO_ADDR
// if x = - 1 then
48720: LD_VAR 0 13
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: EQUAL
48729: IFFALSE 48733
// continue ;
48731: GO 48689
// PrepareHuman ( false , i , skill ) ;
48733: LD_INT 0
48735: PPUSH
48736: LD_VAR 0 8
48740: PPUSH
48741: LD_VAR 0 4
48745: PPUSH
48746: CALL_OW 380
// un := CreateHuman ;
48750: LD_ADDR_VAR 0 14
48754: PUSH
48755: CALL_OW 44
48759: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48760: LD_VAR 0 14
48764: PPUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 250
48774: PPUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: CALL_OW 251
48784: PPUSH
48785: LD_INT 10
48787: PPUSH
48788: LD_INT 0
48790: PPUSH
48791: CALL_OW 50
// result := result ^ un ;
48795: LD_ADDR_VAR 0 7
48799: PUSH
48800: LD_VAR 0 7
48804: PUSH
48805: LD_VAR 0 14
48809: ADD
48810: ST_TO_ADDR
// end ;
48811: GO 48689
48813: POP
48814: POP
// end ; end ;
48815: LD_VAR 0 7
48819: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48820: LD_INT 0
48822: PPUSH
48823: PPUSH
48824: PPUSH
48825: PPUSH
48826: PPUSH
48827: PPUSH
48828: PPUSH
48829: PPUSH
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
// result := false ;
48838: LD_ADDR_VAR 0 3
48842: PUSH
48843: LD_INT 0
48845: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48846: LD_VAR 0 1
48850: NOT
48851: PUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 266
48861: PUSH
48862: LD_INT 32
48864: PUSH
48865: LD_INT 33
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: IN
48872: NOT
48873: OR
48874: IFFALSE 48878
// exit ;
48876: GO 49987
// nat := GetNation ( tower ) ;
48878: LD_ADDR_VAR 0 12
48882: PUSH
48883: LD_VAR 0 1
48887: PPUSH
48888: CALL_OW 248
48892: ST_TO_ADDR
// side := GetSide ( tower ) ;
48893: LD_ADDR_VAR 0 16
48897: PUSH
48898: LD_VAR 0 1
48902: PPUSH
48903: CALL_OW 255
48907: ST_TO_ADDR
// x := GetX ( tower ) ;
48908: LD_ADDR_VAR 0 10
48912: PUSH
48913: LD_VAR 0 1
48917: PPUSH
48918: CALL_OW 250
48922: ST_TO_ADDR
// y := GetY ( tower ) ;
48923: LD_ADDR_VAR 0 11
48927: PUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 251
48937: ST_TO_ADDR
// if not x or not y then
48938: LD_VAR 0 10
48942: NOT
48943: PUSH
48944: LD_VAR 0 11
48948: NOT
48949: OR
48950: IFFALSE 48954
// exit ;
48952: GO 49987
// weapon := 0 ;
48954: LD_ADDR_VAR 0 18
48958: PUSH
48959: LD_INT 0
48961: ST_TO_ADDR
// fac_list := [ ] ;
48962: LD_ADDR_VAR 0 17
48966: PUSH
48967: EMPTY
48968: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48969: LD_ADDR_VAR 0 6
48973: PUSH
48974: LD_VAR 0 1
48978: PPUSH
48979: CALL_OW 274
48983: PPUSH
48984: LD_VAR 0 2
48988: PPUSH
48989: LD_INT 0
48991: PPUSH
48992: CALL 46558 0 3
48996: PPUSH
48997: LD_INT 30
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PPUSH
49007: CALL_OW 72
49011: ST_TO_ADDR
// if not factories then
49012: LD_VAR 0 6
49016: NOT
49017: IFFALSE 49021
// exit ;
49019: GO 49987
// for i in factories do
49021: LD_ADDR_VAR 0 8
49025: PUSH
49026: LD_VAR 0 6
49030: PUSH
49031: FOR_IN
49032: IFFALSE 49057
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49034: LD_ADDR_VAR 0 17
49038: PUSH
49039: LD_VAR 0 17
49043: PUSH
49044: LD_VAR 0 8
49048: PPUSH
49049: CALL_OW 478
49053: UNION
49054: ST_TO_ADDR
49055: GO 49031
49057: POP
49058: POP
// if not fac_list then
49059: LD_VAR 0 17
49063: NOT
49064: IFFALSE 49068
// exit ;
49066: GO 49987
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49068: LD_ADDR_VAR 0 5
49072: PUSH
49073: LD_INT 4
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: LD_INT 9
49081: PUSH
49082: LD_INT 10
49084: PUSH
49085: LD_INT 6
49087: PUSH
49088: LD_INT 7
49090: PUSH
49091: LD_INT 11
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 27
49105: PUSH
49106: LD_INT 28
49108: PUSH
49109: LD_INT 26
49111: PUSH
49112: LD_INT 30
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 43
49123: PUSH
49124: LD_INT 44
49126: PUSH
49127: LD_INT 46
49129: PUSH
49130: LD_INT 45
49132: PUSH
49133: LD_INT 47
49135: PUSH
49136: LD_INT 49
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: LD_VAR 0 12
49156: ARRAY
49157: ST_TO_ADDR
// list := list isect fac_list ;
49158: LD_ADDR_VAR 0 5
49162: PUSH
49163: LD_VAR 0 5
49167: PUSH
49168: LD_VAR 0 17
49172: ISECT
49173: ST_TO_ADDR
// if not list then
49174: LD_VAR 0 5
49178: NOT
49179: IFFALSE 49183
// exit ;
49181: GO 49987
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49183: LD_VAR 0 12
49187: PUSH
49188: LD_INT 3
49190: EQUAL
49191: PUSH
49192: LD_INT 49
49194: PUSH
49195: LD_VAR 0 5
49199: IN
49200: AND
49201: PUSH
49202: LD_INT 31
49204: PPUSH
49205: LD_VAR 0 16
49209: PPUSH
49210: CALL_OW 321
49214: PUSH
49215: LD_INT 2
49217: EQUAL
49218: AND
49219: IFFALSE 49279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49221: LD_INT 22
49223: PUSH
49224: LD_VAR 0 16
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 35
49235: PUSH
49236: LD_INT 49
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 91
49245: PUSH
49246: LD_VAR 0 1
49250: PUSH
49251: LD_INT 10
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: PPUSH
49264: CALL_OW 69
49268: NOT
49269: IFFALSE 49279
// weapon := ru_time_lapser ;
49271: LD_ADDR_VAR 0 18
49275: PUSH
49276: LD_INT 49
49278: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49279: LD_VAR 0 12
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: IN
49294: PUSH
49295: LD_INT 11
49297: PUSH
49298: LD_VAR 0 5
49302: IN
49303: PUSH
49304: LD_INT 30
49306: PUSH
49307: LD_VAR 0 5
49311: IN
49312: OR
49313: AND
49314: PUSH
49315: LD_INT 6
49317: PPUSH
49318: LD_VAR 0 16
49322: PPUSH
49323: CALL_OW 321
49327: PUSH
49328: LD_INT 2
49330: EQUAL
49331: AND
49332: IFFALSE 49497
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49334: LD_INT 22
49336: PUSH
49337: LD_VAR 0 16
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 35
49351: PUSH
49352: LD_INT 11
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 35
49361: PUSH
49362: LD_INT 30
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 91
49376: PUSH
49377: LD_VAR 0 1
49381: PUSH
49382: LD_INT 18
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: PPUSH
49395: CALL_OW 69
49399: NOT
49400: PUSH
49401: LD_INT 22
49403: PUSH
49404: LD_VAR 0 16
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 30
49418: PUSH
49419: LD_INT 32
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 30
49428: PUSH
49429: LD_INT 33
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 91
49443: PUSH
49444: LD_VAR 0 1
49448: PUSH
49449: LD_INT 12
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: PPUSH
49465: CALL_OW 69
49469: PUSH
49470: LD_INT 2
49472: GREATER
49473: AND
49474: IFFALSE 49497
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49476: LD_ADDR_VAR 0 18
49480: PUSH
49481: LD_INT 11
49483: PUSH
49484: LD_INT 30
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_VAR 0 12
49495: ARRAY
49496: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49497: LD_VAR 0 18
49501: NOT
49502: PUSH
49503: LD_INT 40
49505: PPUSH
49506: LD_VAR 0 16
49510: PPUSH
49511: CALL_OW 321
49515: PUSH
49516: LD_INT 2
49518: EQUAL
49519: AND
49520: PUSH
49521: LD_INT 7
49523: PUSH
49524: LD_VAR 0 5
49528: IN
49529: PUSH
49530: LD_INT 28
49532: PUSH
49533: LD_VAR 0 5
49537: IN
49538: OR
49539: PUSH
49540: LD_INT 45
49542: PUSH
49543: LD_VAR 0 5
49547: IN
49548: OR
49549: AND
49550: IFFALSE 49804
// begin hex := GetHexInfo ( x , y ) ;
49552: LD_ADDR_VAR 0 4
49556: PUSH
49557: LD_VAR 0 10
49561: PPUSH
49562: LD_VAR 0 11
49566: PPUSH
49567: CALL_OW 546
49571: ST_TO_ADDR
// if hex [ 1 ] then
49572: LD_VAR 0 4
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: IFFALSE 49584
// exit ;
49582: GO 49987
// height := hex [ 2 ] ;
49584: LD_ADDR_VAR 0 15
49588: PUSH
49589: LD_VAR 0 4
49593: PUSH
49594: LD_INT 2
49596: ARRAY
49597: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49598: LD_ADDR_VAR 0 14
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: LD_INT 5
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// for i in tmp do
49621: LD_ADDR_VAR 0 8
49625: PUSH
49626: LD_VAR 0 14
49630: PUSH
49631: FOR_IN
49632: IFFALSE 49802
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49634: LD_ADDR_VAR 0 9
49638: PUSH
49639: LD_VAR 0 10
49643: PPUSH
49644: LD_VAR 0 8
49648: PPUSH
49649: LD_INT 5
49651: PPUSH
49652: CALL_OW 272
49656: PUSH
49657: LD_VAR 0 11
49661: PPUSH
49662: LD_VAR 0 8
49666: PPUSH
49667: LD_INT 5
49669: PPUSH
49670: CALL_OW 273
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49679: LD_VAR 0 9
49683: PUSH
49684: LD_INT 1
49686: ARRAY
49687: PPUSH
49688: LD_VAR 0 9
49692: PUSH
49693: LD_INT 2
49695: ARRAY
49696: PPUSH
49697: CALL_OW 488
49701: IFFALSE 49800
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49703: LD_ADDR_VAR 0 4
49707: PUSH
49708: LD_VAR 0 9
49712: PUSH
49713: LD_INT 1
49715: ARRAY
49716: PPUSH
49717: LD_VAR 0 9
49721: PUSH
49722: LD_INT 2
49724: ARRAY
49725: PPUSH
49726: CALL_OW 546
49730: ST_TO_ADDR
// if hex [ 1 ] then
49731: LD_VAR 0 4
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: IFFALSE 49743
// continue ;
49741: GO 49631
// h := hex [ 2 ] ;
49743: LD_ADDR_VAR 0 13
49747: PUSH
49748: LD_VAR 0 4
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: ST_TO_ADDR
// if h + 7 < height then
49757: LD_VAR 0 13
49761: PUSH
49762: LD_INT 7
49764: PLUS
49765: PUSH
49766: LD_VAR 0 15
49770: LESS
49771: IFFALSE 49800
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49773: LD_ADDR_VAR 0 18
49777: PUSH
49778: LD_INT 7
49780: PUSH
49781: LD_INT 28
49783: PUSH
49784: LD_INT 45
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: PUSH
49792: LD_VAR 0 12
49796: ARRAY
49797: ST_TO_ADDR
// break ;
49798: GO 49802
// end ; end ; end ;
49800: GO 49631
49802: POP
49803: POP
// end ; if not weapon then
49804: LD_VAR 0 18
49808: NOT
49809: IFFALSE 49869
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49811: LD_ADDR_VAR 0 5
49815: PUSH
49816: LD_VAR 0 5
49820: PUSH
49821: LD_INT 11
49823: PUSH
49824: LD_INT 30
49826: PUSH
49827: LD_INT 49
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: DIFF
49835: ST_TO_ADDR
// if not list then
49836: LD_VAR 0 5
49840: NOT
49841: IFFALSE 49845
// exit ;
49843: GO 49987
// weapon := list [ rand ( 1 , list ) ] ;
49845: LD_ADDR_VAR 0 18
49849: PUSH
49850: LD_VAR 0 5
49854: PUSH
49855: LD_INT 1
49857: PPUSH
49858: LD_VAR 0 5
49862: PPUSH
49863: CALL_OW 12
49867: ARRAY
49868: ST_TO_ADDR
// end ; if weapon then
49869: LD_VAR 0 18
49873: IFFALSE 49987
// begin tmp := CostOfWeapon ( weapon ) ;
49875: LD_ADDR_VAR 0 14
49879: PUSH
49880: LD_VAR 0 18
49884: PPUSH
49885: CALL_OW 451
49889: ST_TO_ADDR
// j := GetBase ( tower ) ;
49890: LD_ADDR_VAR 0 9
49894: PUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 274
49904: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49905: LD_VAR 0 9
49909: PPUSH
49910: LD_INT 1
49912: PPUSH
49913: CALL_OW 275
49917: PUSH
49918: LD_VAR 0 14
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: GREATEREQUAL
49927: PUSH
49928: LD_VAR 0 9
49932: PPUSH
49933: LD_INT 2
49935: PPUSH
49936: CALL_OW 275
49940: PUSH
49941: LD_VAR 0 14
49945: PUSH
49946: LD_INT 2
49948: ARRAY
49949: GREATEREQUAL
49950: AND
49951: PUSH
49952: LD_VAR 0 9
49956: PPUSH
49957: LD_INT 3
49959: PPUSH
49960: CALL_OW 275
49964: PUSH
49965: LD_VAR 0 14
49969: PUSH
49970: LD_INT 3
49972: ARRAY
49973: GREATEREQUAL
49974: AND
49975: IFFALSE 49987
// result := weapon ;
49977: LD_ADDR_VAR 0 3
49981: PUSH
49982: LD_VAR 0 18
49986: ST_TO_ADDR
// end ; end ;
49987: LD_VAR 0 3
49991: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49992: LD_INT 0
49994: PPUSH
49995: PPUSH
// result := true ;
49996: LD_ADDR_VAR 0 3
50000: PUSH
50001: LD_INT 1
50003: ST_TO_ADDR
// if array1 = array2 then
50004: LD_VAR 0 1
50008: PUSH
50009: LD_VAR 0 2
50013: EQUAL
50014: IFFALSE 50074
// begin for i = 1 to array1 do
50016: LD_ADDR_VAR 0 4
50020: PUSH
50021: DOUBLE
50022: LD_INT 1
50024: DEC
50025: ST_TO_ADDR
50026: LD_VAR 0 1
50030: PUSH
50031: FOR_TO
50032: IFFALSE 50070
// if array1 [ i ] <> array2 [ i ] then
50034: LD_VAR 0 1
50038: PUSH
50039: LD_VAR 0 4
50043: ARRAY
50044: PUSH
50045: LD_VAR 0 2
50049: PUSH
50050: LD_VAR 0 4
50054: ARRAY
50055: NONEQUAL
50056: IFFALSE 50068
// begin result := false ;
50058: LD_ADDR_VAR 0 3
50062: PUSH
50063: LD_INT 0
50065: ST_TO_ADDR
// break ;
50066: GO 50070
// end ;
50068: GO 50031
50070: POP
50071: POP
// end else
50072: GO 50082
// result := false ;
50074: LD_ADDR_VAR 0 3
50078: PUSH
50079: LD_INT 0
50081: ST_TO_ADDR
// end ;
50082: LD_VAR 0 3
50086: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50087: LD_INT 0
50089: PPUSH
50090: PPUSH
// if not array1 or not array2 then
50091: LD_VAR 0 1
50095: NOT
50096: PUSH
50097: LD_VAR 0 2
50101: NOT
50102: OR
50103: IFFALSE 50107
// exit ;
50105: GO 50171
// result := true ;
50107: LD_ADDR_VAR 0 3
50111: PUSH
50112: LD_INT 1
50114: ST_TO_ADDR
// for i = 1 to array1 do
50115: LD_ADDR_VAR 0 4
50119: PUSH
50120: DOUBLE
50121: LD_INT 1
50123: DEC
50124: ST_TO_ADDR
50125: LD_VAR 0 1
50129: PUSH
50130: FOR_TO
50131: IFFALSE 50169
// if array1 [ i ] <> array2 [ i ] then
50133: LD_VAR 0 1
50137: PUSH
50138: LD_VAR 0 4
50142: ARRAY
50143: PUSH
50144: LD_VAR 0 2
50148: PUSH
50149: LD_VAR 0 4
50153: ARRAY
50154: NONEQUAL
50155: IFFALSE 50167
// begin result := false ;
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_INT 0
50164: ST_TO_ADDR
// break ;
50165: GO 50169
// end ;
50167: GO 50130
50169: POP
50170: POP
// end ;
50171: LD_VAR 0 3
50175: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
50180: PPUSH
// pom := GetBase ( fac ) ;
50181: LD_ADDR_VAR 0 5
50185: PUSH
50186: LD_VAR 0 1
50190: PPUSH
50191: CALL_OW 274
50195: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50196: LD_ADDR_VAR 0 4
50200: PUSH
50201: LD_VAR 0 2
50205: PUSH
50206: LD_INT 1
50208: ARRAY
50209: PPUSH
50210: LD_VAR 0 2
50214: PUSH
50215: LD_INT 2
50217: ARRAY
50218: PPUSH
50219: LD_VAR 0 2
50223: PUSH
50224: LD_INT 3
50226: ARRAY
50227: PPUSH
50228: LD_VAR 0 2
50232: PUSH
50233: LD_INT 4
50235: ARRAY
50236: PPUSH
50237: CALL_OW 449
50241: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50242: LD_ADDR_VAR 0 3
50246: PUSH
50247: LD_VAR 0 5
50251: PPUSH
50252: LD_INT 1
50254: PPUSH
50255: CALL_OW 275
50259: PUSH
50260: LD_VAR 0 4
50264: PUSH
50265: LD_INT 1
50267: ARRAY
50268: GREATEREQUAL
50269: PUSH
50270: LD_VAR 0 5
50274: PPUSH
50275: LD_INT 2
50277: PPUSH
50278: CALL_OW 275
50282: PUSH
50283: LD_VAR 0 4
50287: PUSH
50288: LD_INT 2
50290: ARRAY
50291: GREATEREQUAL
50292: AND
50293: PUSH
50294: LD_VAR 0 5
50298: PPUSH
50299: LD_INT 3
50301: PPUSH
50302: CALL_OW 275
50306: PUSH
50307: LD_VAR 0 4
50311: PUSH
50312: LD_INT 3
50314: ARRAY
50315: GREATEREQUAL
50316: AND
50317: ST_TO_ADDR
// end ;
50318: LD_VAR 0 3
50322: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50323: LD_INT 0
50325: PPUSH
50326: PPUSH
50327: PPUSH
50328: PPUSH
// pom := GetBase ( building ) ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: CALL_OW 274
50343: ST_TO_ADDR
// if not pom then
50344: LD_VAR 0 3
50348: NOT
50349: IFFALSE 50353
// exit ;
50351: GO 50523
// btype := GetBType ( building ) ;
50353: LD_ADDR_VAR 0 5
50357: PUSH
50358: LD_VAR 0 1
50362: PPUSH
50363: CALL_OW 266
50367: ST_TO_ADDR
// if btype = b_armoury then
50368: LD_VAR 0 5
50372: PUSH
50373: LD_INT 4
50375: EQUAL
50376: IFFALSE 50386
// btype := b_barracks ;
50378: LD_ADDR_VAR 0 5
50382: PUSH
50383: LD_INT 5
50385: ST_TO_ADDR
// if btype = b_depot then
50386: LD_VAR 0 5
50390: PUSH
50391: LD_INT 0
50393: EQUAL
50394: IFFALSE 50404
// btype := b_warehouse ;
50396: LD_ADDR_VAR 0 5
50400: PUSH
50401: LD_INT 1
50403: ST_TO_ADDR
// if btype = b_workshop then
50404: LD_VAR 0 5
50408: PUSH
50409: LD_INT 2
50411: EQUAL
50412: IFFALSE 50422
// btype := b_factory ;
50414: LD_ADDR_VAR 0 5
50418: PUSH
50419: LD_INT 3
50421: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50422: LD_ADDR_VAR 0 4
50426: PUSH
50427: LD_VAR 0 5
50431: PPUSH
50432: LD_VAR 0 1
50436: PPUSH
50437: CALL_OW 248
50441: PPUSH
50442: CALL_OW 450
50446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50447: LD_ADDR_VAR 0 2
50451: PUSH
50452: LD_VAR 0 3
50456: PPUSH
50457: LD_INT 1
50459: PPUSH
50460: CALL_OW 275
50464: PUSH
50465: LD_VAR 0 4
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: GREATEREQUAL
50474: PUSH
50475: LD_VAR 0 3
50479: PPUSH
50480: LD_INT 2
50482: PPUSH
50483: CALL_OW 275
50487: PUSH
50488: LD_VAR 0 4
50492: PUSH
50493: LD_INT 2
50495: ARRAY
50496: GREATEREQUAL
50497: AND
50498: PUSH
50499: LD_VAR 0 3
50503: PPUSH
50504: LD_INT 3
50506: PPUSH
50507: CALL_OW 275
50511: PUSH
50512: LD_VAR 0 4
50516: PUSH
50517: LD_INT 3
50519: ARRAY
50520: GREATEREQUAL
50521: AND
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 2
50527: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50528: LD_INT 0
50530: PPUSH
50531: PPUSH
50532: PPUSH
// pom := GetBase ( building ) ;
50533: LD_ADDR_VAR 0 4
50537: PUSH
50538: LD_VAR 0 1
50542: PPUSH
50543: CALL_OW 274
50547: ST_TO_ADDR
// if not pom then
50548: LD_VAR 0 4
50552: NOT
50553: IFFALSE 50557
// exit ;
50555: GO 50658
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50557: LD_ADDR_VAR 0 5
50561: PUSH
50562: LD_VAR 0 2
50566: PPUSH
50567: LD_VAR 0 1
50571: PPUSH
50572: CALL_OW 248
50576: PPUSH
50577: CALL_OW 450
50581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50582: LD_ADDR_VAR 0 3
50586: PUSH
50587: LD_VAR 0 4
50591: PPUSH
50592: LD_INT 1
50594: PPUSH
50595: CALL_OW 275
50599: PUSH
50600: LD_VAR 0 5
50604: PUSH
50605: LD_INT 1
50607: ARRAY
50608: GREATEREQUAL
50609: PUSH
50610: LD_VAR 0 4
50614: PPUSH
50615: LD_INT 2
50617: PPUSH
50618: CALL_OW 275
50622: PUSH
50623: LD_VAR 0 5
50627: PUSH
50628: LD_INT 2
50630: ARRAY
50631: GREATEREQUAL
50632: AND
50633: PUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: LD_INT 3
50641: PPUSH
50642: CALL_OW 275
50646: PUSH
50647: LD_VAR 0 5
50651: PUSH
50652: LD_INT 3
50654: ARRAY
50655: GREATEREQUAL
50656: AND
50657: ST_TO_ADDR
// end ;
50658: LD_VAR 0 3
50662: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50663: LD_INT 0
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
// result := false ;
50676: LD_ADDR_VAR 0 8
50680: PUSH
50681: LD_INT 0
50683: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50684: LD_VAR 0 5
50688: NOT
50689: PUSH
50690: LD_VAR 0 1
50694: NOT
50695: OR
50696: PUSH
50697: LD_VAR 0 2
50701: NOT
50702: OR
50703: PUSH
50704: LD_VAR 0 3
50708: NOT
50709: OR
50710: IFFALSE 50714
// exit ;
50712: GO 51528
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50714: LD_ADDR_VAR 0 14
50718: PUSH
50719: LD_VAR 0 1
50723: PPUSH
50724: LD_VAR 0 2
50728: PPUSH
50729: LD_VAR 0 3
50733: PPUSH
50734: LD_VAR 0 4
50738: PPUSH
50739: LD_VAR 0 5
50743: PUSH
50744: LD_INT 1
50746: ARRAY
50747: PPUSH
50748: CALL_OW 248
50752: PPUSH
50753: LD_INT 0
50755: PPUSH
50756: CALL 52765 0 6
50760: ST_TO_ADDR
// if not hexes then
50761: LD_VAR 0 14
50765: NOT
50766: IFFALSE 50770
// exit ;
50768: GO 51528
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50770: LD_ADDR_VAR 0 17
50774: PUSH
50775: LD_VAR 0 5
50779: PPUSH
50780: LD_INT 22
50782: PUSH
50783: LD_VAR 0 13
50787: PPUSH
50788: CALL_OW 255
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 30
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 30
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PPUSH
50829: CALL_OW 72
50833: ST_TO_ADDR
// for i = 1 to hexes do
50834: LD_ADDR_VAR 0 9
50838: PUSH
50839: DOUBLE
50840: LD_INT 1
50842: DEC
50843: ST_TO_ADDR
50844: LD_VAR 0 14
50848: PUSH
50849: FOR_TO
50850: IFFALSE 51526
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50852: LD_ADDR_VAR 0 13
50856: PUSH
50857: LD_VAR 0 14
50861: PUSH
50862: LD_VAR 0 9
50866: ARRAY
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: PPUSH
50872: LD_VAR 0 14
50876: PUSH
50877: LD_VAR 0 9
50881: ARRAY
50882: PUSH
50883: LD_INT 2
50885: ARRAY
50886: PPUSH
50887: CALL_OW 428
50891: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50892: LD_VAR 0 14
50896: PUSH
50897: LD_VAR 0 9
50901: ARRAY
50902: PUSH
50903: LD_INT 1
50905: ARRAY
50906: PPUSH
50907: LD_VAR 0 14
50911: PUSH
50912: LD_VAR 0 9
50916: ARRAY
50917: PUSH
50918: LD_INT 2
50920: ARRAY
50921: PPUSH
50922: CALL_OW 351
50926: PUSH
50927: LD_VAR 0 14
50931: PUSH
50932: LD_VAR 0 9
50936: ARRAY
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PPUSH
50942: LD_VAR 0 14
50946: PUSH
50947: LD_VAR 0 9
50951: ARRAY
50952: PUSH
50953: LD_INT 2
50955: ARRAY
50956: PPUSH
50957: CALL_OW 488
50961: NOT
50962: OR
50963: PUSH
50964: LD_VAR 0 13
50968: PPUSH
50969: CALL_OW 247
50973: PUSH
50974: LD_INT 3
50976: EQUAL
50977: OR
50978: IFFALSE 50984
// exit ;
50980: POP
50981: POP
50982: GO 51528
// if not tmp then
50984: LD_VAR 0 13
50988: NOT
50989: IFFALSE 50993
// continue ;
50991: GO 50849
// result := true ;
50993: LD_ADDR_VAR 0 8
50997: PUSH
50998: LD_INT 1
51000: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51001: LD_VAR 0 6
51005: PUSH
51006: LD_VAR 0 13
51010: PPUSH
51011: CALL_OW 247
51015: PUSH
51016: LD_INT 2
51018: EQUAL
51019: AND
51020: PUSH
51021: LD_VAR 0 13
51025: PPUSH
51026: CALL_OW 263
51030: PUSH
51031: LD_INT 1
51033: EQUAL
51034: AND
51035: IFFALSE 51199
// begin if IsDrivenBy ( tmp ) then
51037: LD_VAR 0 13
51041: PPUSH
51042: CALL_OW 311
51046: IFFALSE 51050
// continue ;
51048: GO 50849
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51050: LD_VAR 0 6
51054: PPUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 60
51060: PUSH
51061: EMPTY
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: LD_INT 55
51073: PUSH
51074: EMPTY
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PPUSH
51085: CALL_OW 72
51089: IFFALSE 51197
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51091: LD_ADDR_VAR 0 18
51095: PUSH
51096: LD_VAR 0 6
51100: PPUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 60
51106: PUSH
51107: EMPTY
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 55
51119: PUSH
51120: EMPTY
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PPUSH
51131: CALL_OW 72
51135: PUSH
51136: LD_INT 1
51138: ARRAY
51139: ST_TO_ADDR
// if IsInUnit ( driver ) then
51140: LD_VAR 0 18
51144: PPUSH
51145: CALL_OW 310
51149: IFFALSE 51160
// ComExit ( driver ) ;
51151: LD_VAR 0 18
51155: PPUSH
51156: CALL 75893 0 1
// AddComEnterUnit ( driver , tmp ) ;
51160: LD_VAR 0 18
51164: PPUSH
51165: LD_VAR 0 13
51169: PPUSH
51170: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51174: LD_VAR 0 18
51178: PPUSH
51179: LD_VAR 0 7
51183: PPUSH
51184: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51188: LD_VAR 0 18
51192: PPUSH
51193: CALL_OW 181
// end ; continue ;
51197: GO 50849
// end ; if not cleaners or not tmp in cleaners then
51199: LD_VAR 0 6
51203: NOT
51204: PUSH
51205: LD_VAR 0 13
51209: PUSH
51210: LD_VAR 0 6
51214: IN
51215: NOT
51216: OR
51217: IFFALSE 51524
// begin if dep then
51219: LD_VAR 0 17
51223: IFFALSE 51359
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51225: LD_ADDR_VAR 0 16
51229: PUSH
51230: LD_VAR 0 17
51234: PUSH
51235: LD_INT 1
51237: ARRAY
51238: PPUSH
51239: CALL_OW 250
51243: PPUSH
51244: LD_VAR 0 17
51248: PUSH
51249: LD_INT 1
51251: ARRAY
51252: PPUSH
51253: CALL_OW 254
51257: PPUSH
51258: LD_INT 5
51260: PPUSH
51261: CALL_OW 272
51265: PUSH
51266: LD_VAR 0 17
51270: PUSH
51271: LD_INT 1
51273: ARRAY
51274: PPUSH
51275: CALL_OW 251
51279: PPUSH
51280: LD_VAR 0 17
51284: PUSH
51285: LD_INT 1
51287: ARRAY
51288: PPUSH
51289: CALL_OW 254
51293: PPUSH
51294: LD_INT 5
51296: PPUSH
51297: CALL_OW 273
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51306: LD_VAR 0 16
51310: PUSH
51311: LD_INT 1
51313: ARRAY
51314: PPUSH
51315: LD_VAR 0 16
51319: PUSH
51320: LD_INT 2
51322: ARRAY
51323: PPUSH
51324: CALL_OW 488
51328: IFFALSE 51359
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51330: LD_VAR 0 13
51334: PPUSH
51335: LD_VAR 0 16
51339: PUSH
51340: LD_INT 1
51342: ARRAY
51343: PPUSH
51344: LD_VAR 0 16
51348: PUSH
51349: LD_INT 2
51351: ARRAY
51352: PPUSH
51353: CALL_OW 111
// continue ;
51357: GO 50849
// end ; end ; r := GetDir ( tmp ) ;
51359: LD_ADDR_VAR 0 15
51363: PUSH
51364: LD_VAR 0 13
51368: PPUSH
51369: CALL_OW 254
51373: ST_TO_ADDR
// if r = 5 then
51374: LD_VAR 0 15
51378: PUSH
51379: LD_INT 5
51381: EQUAL
51382: IFFALSE 51392
// r := 0 ;
51384: LD_ADDR_VAR 0 15
51388: PUSH
51389: LD_INT 0
51391: ST_TO_ADDR
// for j = r to 5 do
51392: LD_ADDR_VAR 0 10
51396: PUSH
51397: DOUBLE
51398: LD_VAR 0 15
51402: DEC
51403: ST_TO_ADDR
51404: LD_INT 5
51406: PUSH
51407: FOR_TO
51408: IFFALSE 51522
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51410: LD_ADDR_VAR 0 11
51414: PUSH
51415: LD_VAR 0 13
51419: PPUSH
51420: CALL_OW 250
51424: PPUSH
51425: LD_VAR 0 10
51429: PPUSH
51430: LD_INT 2
51432: PPUSH
51433: CALL_OW 272
51437: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51438: LD_ADDR_VAR 0 12
51442: PUSH
51443: LD_VAR 0 13
51447: PPUSH
51448: CALL_OW 251
51452: PPUSH
51453: LD_VAR 0 10
51457: PPUSH
51458: LD_INT 2
51460: PPUSH
51461: CALL_OW 273
51465: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51466: LD_VAR 0 11
51470: PPUSH
51471: LD_VAR 0 12
51475: PPUSH
51476: CALL_OW 488
51480: PUSH
51481: LD_VAR 0 11
51485: PPUSH
51486: LD_VAR 0 12
51490: PPUSH
51491: CALL_OW 428
51495: NOT
51496: AND
51497: IFFALSE 51520
// begin ComMoveXY ( tmp , _x , _y ) ;
51499: LD_VAR 0 13
51503: PPUSH
51504: LD_VAR 0 11
51508: PPUSH
51509: LD_VAR 0 12
51513: PPUSH
51514: CALL_OW 111
// break ;
51518: GO 51522
// end ; end ;
51520: GO 51407
51522: POP
51523: POP
// end ; end ;
51524: GO 50849
51526: POP
51527: POP
// end ;
51528: LD_VAR 0 8
51532: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51533: LD_INT 0
51535: PPUSH
// result := true ;
51536: LD_ADDR_VAR 0 3
51540: PUSH
51541: LD_INT 1
51543: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51544: LD_VAR 0 2
51548: PUSH
51549: LD_INT 24
51551: DOUBLE
51552: EQUAL
51553: IFTRUE 51563
51555: LD_INT 33
51557: DOUBLE
51558: EQUAL
51559: IFTRUE 51563
51561: GO 51588
51563: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51564: LD_ADDR_VAR 0 3
51568: PUSH
51569: LD_INT 32
51571: PPUSH
51572: LD_VAR 0 1
51576: PPUSH
51577: CALL_OW 321
51581: PUSH
51582: LD_INT 2
51584: EQUAL
51585: ST_TO_ADDR
51586: GO 51908
51588: LD_INT 20
51590: DOUBLE
51591: EQUAL
51592: IFTRUE 51596
51594: GO 51621
51596: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51597: LD_ADDR_VAR 0 3
51601: PUSH
51602: LD_INT 6
51604: PPUSH
51605: LD_VAR 0 1
51609: PPUSH
51610: CALL_OW 321
51614: PUSH
51615: LD_INT 2
51617: EQUAL
51618: ST_TO_ADDR
51619: GO 51908
51621: LD_INT 22
51623: DOUBLE
51624: EQUAL
51625: IFTRUE 51635
51627: LD_INT 36
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51635
51633: GO 51660
51635: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51636: LD_ADDR_VAR 0 3
51640: PUSH
51641: LD_INT 15
51643: PPUSH
51644: LD_VAR 0 1
51648: PPUSH
51649: CALL_OW 321
51653: PUSH
51654: LD_INT 2
51656: EQUAL
51657: ST_TO_ADDR
51658: GO 51908
51660: LD_INT 30
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51668
51666: GO 51693
51668: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_INT 20
51676: PPUSH
51677: LD_VAR 0 1
51681: PPUSH
51682: CALL_OW 321
51686: PUSH
51687: LD_INT 2
51689: EQUAL
51690: ST_TO_ADDR
51691: GO 51908
51693: LD_INT 28
51695: DOUBLE
51696: EQUAL
51697: IFTRUE 51707
51699: LD_INT 21
51701: DOUBLE
51702: EQUAL
51703: IFTRUE 51707
51705: GO 51732
51707: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51708: LD_ADDR_VAR 0 3
51712: PUSH
51713: LD_INT 21
51715: PPUSH
51716: LD_VAR 0 1
51720: PPUSH
51721: CALL_OW 321
51725: PUSH
51726: LD_INT 2
51728: EQUAL
51729: ST_TO_ADDR
51730: GO 51908
51732: LD_INT 16
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51740
51738: GO 51767
51740: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51741: LD_ADDR_VAR 0 3
51745: PUSH
51746: LD_EXP 61
51750: PPUSH
51751: LD_VAR 0 1
51755: PPUSH
51756: CALL_OW 321
51760: PUSH
51761: LD_INT 2
51763: EQUAL
51764: ST_TO_ADDR
51765: GO 51908
51767: LD_INT 19
51769: DOUBLE
51770: EQUAL
51771: IFTRUE 51781
51773: LD_INT 23
51775: DOUBLE
51776: EQUAL
51777: IFTRUE 51781
51779: GO 51808
51781: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51782: LD_ADDR_VAR 0 3
51786: PUSH
51787: LD_EXP 60
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 321
51801: PUSH
51802: LD_INT 2
51804: EQUAL
51805: ST_TO_ADDR
51806: GO 51908
51808: LD_INT 17
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51816
51814: GO 51841
51816: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_INT 39
51824: PPUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: CALL_OW 321
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: ST_TO_ADDR
51839: GO 51908
51841: LD_INT 18
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51849
51847: GO 51874
51849: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51850: LD_ADDR_VAR 0 3
51854: PUSH
51855: LD_INT 40
51857: PPUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 321
51867: PUSH
51868: LD_INT 2
51870: EQUAL
51871: ST_TO_ADDR
51872: GO 51908
51874: LD_INT 27
51876: DOUBLE
51877: EQUAL
51878: IFTRUE 51882
51880: GO 51907
51882: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51883: LD_ADDR_VAR 0 3
51887: PUSH
51888: LD_INT 35
51890: PPUSH
51891: LD_VAR 0 1
51895: PPUSH
51896: CALL_OW 321
51900: PUSH
51901: LD_INT 2
51903: EQUAL
51904: ST_TO_ADDR
51905: GO 51908
51907: POP
// end ;
51908: LD_VAR 0 3
51912: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51913: LD_INT 0
51915: PPUSH
51916: PPUSH
51917: PPUSH
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
// result := false ;
51926: LD_ADDR_VAR 0 6
51930: PUSH
51931: LD_INT 0
51933: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51934: LD_VAR 0 1
51938: NOT
51939: PUSH
51940: LD_VAR 0 1
51944: PPUSH
51945: CALL_OW 266
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: IN
51960: NOT
51961: OR
51962: PUSH
51963: LD_VAR 0 2
51967: NOT
51968: OR
51969: PUSH
51970: LD_VAR 0 5
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 4
51989: PUSH
51990: LD_INT 5
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: IN
52001: NOT
52002: OR
52003: PUSH
52004: LD_VAR 0 3
52008: PPUSH
52009: LD_VAR 0 4
52013: PPUSH
52014: CALL_OW 488
52018: NOT
52019: OR
52020: IFFALSE 52024
// exit ;
52022: GO 52760
// side := GetSide ( depot ) ;
52024: LD_ADDR_VAR 0 9
52028: PUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 255
52038: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52039: LD_VAR 0 9
52043: PPUSH
52044: LD_VAR 0 2
52048: PPUSH
52049: CALL 51533 0 2
52053: NOT
52054: IFFALSE 52058
// exit ;
52056: GO 52760
// pom := GetBase ( depot ) ;
52058: LD_ADDR_VAR 0 10
52062: PUSH
52063: LD_VAR 0 1
52067: PPUSH
52068: CALL_OW 274
52072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52073: LD_ADDR_VAR 0 11
52077: PUSH
52078: LD_VAR 0 2
52082: PPUSH
52083: LD_VAR 0 1
52087: PPUSH
52088: CALL_OW 248
52092: PPUSH
52093: CALL_OW 450
52097: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52098: LD_VAR 0 10
52102: PPUSH
52103: LD_INT 1
52105: PPUSH
52106: CALL_OW 275
52110: PUSH
52111: LD_VAR 0 11
52115: PUSH
52116: LD_INT 1
52118: ARRAY
52119: GREATEREQUAL
52120: PUSH
52121: LD_VAR 0 10
52125: PPUSH
52126: LD_INT 2
52128: PPUSH
52129: CALL_OW 275
52133: PUSH
52134: LD_VAR 0 11
52138: PUSH
52139: LD_INT 2
52141: ARRAY
52142: GREATEREQUAL
52143: AND
52144: PUSH
52145: LD_VAR 0 10
52149: PPUSH
52150: LD_INT 3
52152: PPUSH
52153: CALL_OW 275
52157: PUSH
52158: LD_VAR 0 11
52162: PUSH
52163: LD_INT 3
52165: ARRAY
52166: GREATEREQUAL
52167: AND
52168: NOT
52169: IFFALSE 52173
// exit ;
52171: GO 52760
// if GetBType ( depot ) = b_depot then
52173: LD_VAR 0 1
52177: PPUSH
52178: CALL_OW 266
52182: PUSH
52183: LD_INT 0
52185: EQUAL
52186: IFFALSE 52198
// dist := 28 else
52188: LD_ADDR_VAR 0 14
52192: PUSH
52193: LD_INT 28
52195: ST_TO_ADDR
52196: GO 52206
// dist := 36 ;
52198: LD_ADDR_VAR 0 14
52202: PUSH
52203: LD_INT 36
52205: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52206: LD_VAR 0 1
52210: PPUSH
52211: LD_VAR 0 3
52215: PPUSH
52216: LD_VAR 0 4
52220: PPUSH
52221: CALL_OW 297
52225: PUSH
52226: LD_VAR 0 14
52230: GREATER
52231: IFFALSE 52235
// exit ;
52233: GO 52760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52235: LD_ADDR_VAR 0 12
52239: PUSH
52240: LD_VAR 0 2
52244: PPUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: LD_VAR 0 4
52254: PPUSH
52255: LD_VAR 0 5
52259: PPUSH
52260: LD_VAR 0 1
52264: PPUSH
52265: CALL_OW 248
52269: PPUSH
52270: LD_INT 0
52272: PPUSH
52273: CALL 52765 0 6
52277: ST_TO_ADDR
// if not hexes then
52278: LD_VAR 0 12
52282: NOT
52283: IFFALSE 52287
// exit ;
52285: GO 52760
// hex := GetHexInfo ( x , y ) ;
52287: LD_ADDR_VAR 0 15
52291: PUSH
52292: LD_VAR 0 3
52296: PPUSH
52297: LD_VAR 0 4
52301: PPUSH
52302: CALL_OW 546
52306: ST_TO_ADDR
// if hex [ 1 ] then
52307: LD_VAR 0 15
52311: PUSH
52312: LD_INT 1
52314: ARRAY
52315: IFFALSE 52319
// exit ;
52317: GO 52760
// height := hex [ 2 ] ;
52319: LD_ADDR_VAR 0 13
52323: PUSH
52324: LD_VAR 0 15
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: ST_TO_ADDR
// for i = 1 to hexes do
52333: LD_ADDR_VAR 0 7
52337: PUSH
52338: DOUBLE
52339: LD_INT 1
52341: DEC
52342: ST_TO_ADDR
52343: LD_VAR 0 12
52347: PUSH
52348: FOR_TO
52349: IFFALSE 52679
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52351: LD_VAR 0 12
52355: PUSH
52356: LD_VAR 0 7
52360: ARRAY
52361: PUSH
52362: LD_INT 1
52364: ARRAY
52365: PPUSH
52366: LD_VAR 0 12
52370: PUSH
52371: LD_VAR 0 7
52375: ARRAY
52376: PUSH
52377: LD_INT 2
52379: ARRAY
52380: PPUSH
52381: CALL_OW 488
52385: NOT
52386: PUSH
52387: LD_VAR 0 12
52391: PUSH
52392: LD_VAR 0 7
52396: ARRAY
52397: PUSH
52398: LD_INT 1
52400: ARRAY
52401: PPUSH
52402: LD_VAR 0 12
52406: PUSH
52407: LD_VAR 0 7
52411: ARRAY
52412: PUSH
52413: LD_INT 2
52415: ARRAY
52416: PPUSH
52417: CALL_OW 428
52421: PUSH
52422: LD_INT 0
52424: GREATER
52425: OR
52426: PUSH
52427: LD_VAR 0 12
52431: PUSH
52432: LD_VAR 0 7
52436: ARRAY
52437: PUSH
52438: LD_INT 1
52440: ARRAY
52441: PPUSH
52442: LD_VAR 0 12
52446: PUSH
52447: LD_VAR 0 7
52451: ARRAY
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PPUSH
52457: CALL_OW 351
52461: OR
52462: IFFALSE 52468
// exit ;
52464: POP
52465: POP
52466: GO 52760
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52468: LD_ADDR_VAR 0 8
52472: PUSH
52473: LD_VAR 0 12
52477: PUSH
52478: LD_VAR 0 7
52482: ARRAY
52483: PUSH
52484: LD_INT 1
52486: ARRAY
52487: PPUSH
52488: LD_VAR 0 12
52492: PUSH
52493: LD_VAR 0 7
52497: ARRAY
52498: PUSH
52499: LD_INT 2
52501: ARRAY
52502: PPUSH
52503: CALL_OW 546
52507: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52508: LD_VAR 0 8
52512: PUSH
52513: LD_INT 1
52515: ARRAY
52516: PUSH
52517: LD_VAR 0 8
52521: PUSH
52522: LD_INT 2
52524: ARRAY
52525: PUSH
52526: LD_VAR 0 13
52530: PUSH
52531: LD_INT 2
52533: PLUS
52534: GREATER
52535: OR
52536: PUSH
52537: LD_VAR 0 8
52541: PUSH
52542: LD_INT 2
52544: ARRAY
52545: PUSH
52546: LD_VAR 0 13
52550: PUSH
52551: LD_INT 2
52553: MINUS
52554: LESS
52555: OR
52556: PUSH
52557: LD_VAR 0 8
52561: PUSH
52562: LD_INT 3
52564: ARRAY
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 8
52571: PUSH
52572: LD_INT 9
52574: PUSH
52575: LD_INT 10
52577: PUSH
52578: LD_INT 11
52580: PUSH
52581: LD_INT 12
52583: PUSH
52584: LD_INT 13
52586: PUSH
52587: LD_INT 16
52589: PUSH
52590: LD_INT 17
52592: PUSH
52593: LD_INT 18
52595: PUSH
52596: LD_INT 19
52598: PUSH
52599: LD_INT 20
52601: PUSH
52602: LD_INT 21
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: IN
52620: NOT
52621: OR
52622: PUSH
52623: LD_VAR 0 8
52627: PUSH
52628: LD_INT 5
52630: ARRAY
52631: NOT
52632: OR
52633: PUSH
52634: LD_VAR 0 8
52638: PUSH
52639: LD_INT 6
52641: ARRAY
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 7
52651: PUSH
52652: LD_INT 9
52654: PUSH
52655: LD_INT 10
52657: PUSH
52658: LD_INT 11
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: IN
52669: NOT
52670: OR
52671: IFFALSE 52677
// exit ;
52673: POP
52674: POP
52675: GO 52760
// end ;
52677: GO 52348
52679: POP
52680: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52681: LD_VAR 0 9
52685: PPUSH
52686: LD_VAR 0 3
52690: PPUSH
52691: LD_VAR 0 4
52695: PPUSH
52696: LD_INT 20
52698: PPUSH
52699: CALL 44706 0 4
52703: PUSH
52704: LD_INT 4
52706: ARRAY
52707: IFFALSE 52711
// exit ;
52709: GO 52760
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 29
52718: PUSH
52719: LD_INT 30
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: IN
52726: PUSH
52727: LD_VAR 0 3
52731: PPUSH
52732: LD_VAR 0 4
52736: PPUSH
52737: LD_VAR 0 9
52741: PPUSH
52742: CALL_OW 440
52746: NOT
52747: AND
52748: IFFALSE 52752
// exit ;
52750: GO 52760
// result := true ;
52752: LD_ADDR_VAR 0 6
52756: PUSH
52757: LD_INT 1
52759: ST_TO_ADDR
// end ;
52760: LD_VAR 0 6
52764: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52765: LD_INT 0
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
52800: PPUSH
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
// result = [ ] ;
52825: LD_ADDR_VAR 0 7
52829: PUSH
52830: EMPTY
52831: ST_TO_ADDR
// temp_list = [ ] ;
52832: LD_ADDR_VAR 0 9
52836: PUSH
52837: EMPTY
52838: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52839: LD_VAR 0 4
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 4
52858: PUSH
52859: LD_INT 5
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: IN
52870: NOT
52871: PUSH
52872: LD_VAR 0 1
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: IN
52887: PUSH
52888: LD_VAR 0 5
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: IN
52907: NOT
52908: AND
52909: OR
52910: IFFALSE 52914
// exit ;
52912: GO 71305
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52914: LD_VAR 0 1
52918: PUSH
52919: LD_INT 6
52921: PUSH
52922: LD_INT 7
52924: PUSH
52925: LD_INT 8
52927: PUSH
52928: LD_INT 13
52930: PUSH
52931: LD_INT 12
52933: PUSH
52934: LD_INT 15
52936: PUSH
52937: LD_INT 11
52939: PUSH
52940: LD_INT 14
52942: PUSH
52943: LD_INT 10
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: IN
52957: IFFALSE 52967
// btype = b_lab ;
52959: LD_ADDR_VAR 0 1
52963: PUSH
52964: LD_INT 6
52966: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52967: LD_VAR 0 6
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: IN
52986: NOT
52987: PUSH
52988: LD_VAR 0 1
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 6
53007: PUSH
53008: LD_INT 36
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: LD_INT 5
53016: PUSH
53017: LD_INT 31
53019: PUSH
53020: LD_INT 32
53022: PUSH
53023: LD_INT 33
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: IN
53039: NOT
53040: PUSH
53041: LD_VAR 0 6
53045: PUSH
53046: LD_INT 1
53048: EQUAL
53049: AND
53050: OR
53051: PUSH
53052: LD_VAR 0 1
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: IN
53067: NOT
53068: PUSH
53069: LD_VAR 0 6
53073: PUSH
53074: LD_INT 2
53076: EQUAL
53077: AND
53078: OR
53079: IFFALSE 53089
// mode = 0 ;
53081: LD_ADDR_VAR 0 6
53085: PUSH
53086: LD_INT 0
53088: ST_TO_ADDR
// case mode of 0 :
53089: LD_VAR 0 6
53093: PUSH
53094: LD_INT 0
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53102
53100: GO 64555
53102: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53103: LD_ADDR_VAR 0 11
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53296: LD_ADDR_VAR 0 12
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53492: LD_ADDR_VAR 0 13
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53691: LD_ADDR_VAR 0 14
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53887: LD_ADDR_VAR 0 15
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54080: LD_ADDR_VAR 0 16
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54273: LD_ADDR_VAR 0 17
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54503: LD_ADDR_VAR 0 18
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54733: LD_ADDR_VAR 0 19
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54963: LD_ADDR_VAR 0 20
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55193: LD_ADDR_VAR 0 21
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55423: LD_ADDR_VAR 0 22
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55653: LD_ADDR_VAR 0 23
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55933: LD_ADDR_VAR 0 24
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56209: LD_ADDR_VAR 0 25
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56483: LD_ADDR_VAR 0 26
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56759: LD_ADDR_VAR 0 27
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57039: LD_ADDR_VAR 0 28
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57321: LD_ADDR_VAR 0 29
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57600: LD_ADDR_VAR 0 30
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57878: LD_ADDR_VAR 0 31
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58156: LD_ADDR_VAR 0 32
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58434: LD_ADDR_VAR 0 33
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58713: LD_ADDR_VAR 0 34
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58993: LD_ADDR_VAR 0 35
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59105: LD_ADDR_VAR 0 36
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59217: LD_ADDR_VAR 0 37
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59329: LD_ADDR_VAR 0 38
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59441: LD_ADDR_VAR 0 39
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59553: LD_ADDR_VAR 0 40
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59665: LD_ADDR_VAR 0 41
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 3
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60015: LD_ADDR_VAR 0 42
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60365: LD_ADDR_VAR 0 43
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 3
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60713: LD_ADDR_VAR 0 44
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61063: LD_ADDR_VAR 0 45
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61413: LD_ADDR_VAR 0 46
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61761: LD_ADDR_VAR 0 47
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61912: LD_ADDR_VAR 0 48
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62059: LD_ADDR_VAR 0 49
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62203: LD_ADDR_VAR 0 50
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62347: LD_ADDR_VAR 0 51
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62494: LD_ADDR_VAR 0 52
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62645: LD_ADDR_VAR 0 53
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62875: LD_ADDR_VAR 0 54
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63105: LD_ADDR_VAR 0 55
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63335: LD_ADDR_VAR 0 56
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63565: LD_ADDR_VAR 0 57
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63795: LD_ADDR_VAR 0 58
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64025: LD_ADDR_VAR 0 59
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64113: LD_ADDR_VAR 0 60
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64201: LD_ADDR_VAR 0 61
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64289: LD_ADDR_VAR 0 62
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64377: LD_ADDR_VAR 0 63
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64465: LD_ADDR_VAR 0 64
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: ST_TO_ADDR
// end ; 1 :
64553: GO 70450
64555: LD_INT 1
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64563
64561: GO 67186
64563: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64564: LD_ADDR_VAR 0 11
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64608: LD_ADDR_VAR 0 12
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 3
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64649: LD_ADDR_VAR 0 13
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: LD_INT 3
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: LD_INT 3
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64689: LD_ADDR_VAR 0 14
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64730: LD_ADDR_VAR 0 15
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64774: LD_ADDR_VAR 0 16
64778: PUSH
64779: LD_INT 2
64781: NEG
64782: PUSH
64783: LD_INT 3
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 3
64793: NEG
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 3
64805: NEG
64806: PUSH
64807: LD_INT 3
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64820: LD_ADDR_VAR 0 17
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 3
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64864: LD_ADDR_VAR 0 18
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64905: LD_ADDR_VAR 0 19
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 3
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64945: LD_ADDR_VAR 0 20
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 3
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64986: LD_ADDR_VAR 0 21
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 3
65004: NEG
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65030: LD_ADDR_VAR 0 22
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: LD_INT 3
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: LD_INT 3
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65076: LD_ADDR_VAR 0 23
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65120: LD_ADDR_VAR 0 24
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 4
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65161: LD_ADDR_VAR 0 25
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: LD_INT 3
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 4
65178: PUSH
65179: LD_INT 3
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 4
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65201: LD_ADDR_VAR 0 26
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 4
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65242: LD_ADDR_VAR 0 27
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 4
65271: NEG
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65286: LD_ADDR_VAR 0 28
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: LD_INT 4
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 4
65317: NEG
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65332: LD_ADDR_VAR 0 29
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: LD_INT 3
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: LD_INT 4
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 4
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: LD_INT 5
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 5
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 4
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 6
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 6
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 5
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65487: LD_ADDR_VAR 0 30
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 5
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 5
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 5
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 6
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 6
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65630: LD_ADDR_VAR 0 31
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 3
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: LD_INT 4
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: LD_INT 4
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: LD_INT 5
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 6
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 6
65737: PUSH
65738: LD_INT 6
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 5
65747: PUSH
65748: LD_INT 6
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65769: LD_ADDR_VAR 0 32
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 3
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 3
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 4
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 4
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 5
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 5
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 4
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: LD_INT 6
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 6
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65912: LD_ADDR_VAR 0 33
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: NEG
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 4
65975: NEG
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 4
65987: NEG
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 5
65998: NEG
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 5
66009: NEG
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 5
66021: NEG
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 6
66032: NEG
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 6
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66067: LD_ADDR_VAR 0 34
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: LD_INT 3
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 3
66086: NEG
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: LD_INT 4
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 4
66122: NEG
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 4
66134: NEG
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 5
66158: NEG
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 5
66170: NEG
66171: PUSH
66172: LD_INT 5
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 5
66182: NEG
66183: PUSH
66184: LD_INT 6
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 6
66194: NEG
66195: PUSH
66196: LD_INT 5
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 6
66206: NEG
66207: PUSH
66208: LD_INT 6
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66230: LD_ADDR_VAR 0 41
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66274: LD_ADDR_VAR 0 42
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66315: LD_ADDR_VAR 0 43
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 3
66332: PUSH
66333: LD_INT 2
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66355: LD_ADDR_VAR 0 44
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 3
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66396: LD_ADDR_VAR 0 45
66400: PUSH
66401: LD_INT 2
66403: NEG
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66440: LD_ADDR_VAR 0 46
66444: PUSH
66445: LD_INT 2
66447: NEG
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: LD_INT 2
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66486: LD_ADDR_VAR 0 47
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: LD_INT 3
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 3
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66519: LD_ADDR_VAR 0 48
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66550: LD_ADDR_VAR 0 49
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66579: LD_ADDR_VAR 0 50
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66608: LD_ADDR_VAR 0 51
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66639: LD_ADDR_VAR 0 52
66643: PUSH
66644: LD_INT 3
66646: NEG
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66672: LD_ADDR_VAR 0 53
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 3
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 2
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66716: LD_ADDR_VAR 0 54
66720: PUSH
66721: LD_INT 2
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 3
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66757: LD_ADDR_VAR 0 55
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66797: LD_ADDR_VAR 0 56
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: LD_INT 3
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66838: LD_ADDR_VAR 0 57
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66882: LD_ADDR_VAR 0 58
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: NEG
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66928: LD_ADDR_VAR 0 59
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 2
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: LD_INT 2
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66972: LD_ADDR_VAR 0 60
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 2
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67013: LD_ADDR_VAR 0 61
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67053: LD_ADDR_VAR 0 62
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67094: LD_ADDR_VAR 0 63
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67138: LD_ADDR_VAR 0 64
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: LD_INT 2
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: ST_TO_ADDR
// end ; 2 :
67184: GO 70450
67186: LD_INT 2
67188: DOUBLE
67189: EQUAL
67190: IFTRUE 67194
67192: GO 70449
67194: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67195: LD_ADDR_VAR 0 29
67199: PUSH
67200: LD_INT 4
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 4
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 5
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 5
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 5
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 4
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 4
67325: PUSH
67326: LD_INT 4
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 4
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: PUSH
67356: LD_INT 2
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 4
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 4
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 3
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: LD_INT 4
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: LD_INT 5
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 5
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: LD_INT 3
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: NEG
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 2
67569: NEG
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: LD_INT 4
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 4
67592: NEG
67593: PUSH
67594: LD_INT 5
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: LD_INT 4
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 5
67640: NEG
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 5
67652: NEG
67653: PUSH
67654: LD_INT 5
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: LD_INT 5
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 5
67676: NEG
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67733: LD_ADDR_VAR 0 30
67737: PUSH
67738: LD_INT 4
67740: PUSH
67741: LD_INT 4
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 5
67760: PUSH
67761: LD_INT 4
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 5
67770: PUSH
67771: LD_INT 5
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 4
67780: PUSH
67781: LD_INT 5
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: LD_INT 4
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 5
67810: PUSH
67811: LD_INT 3
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 5
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 2
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 4
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 3
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: LD_INT 4
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: NEG
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 5
67979: NEG
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 5
67990: NEG
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 5
68002: NEG
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: LD_INT 2
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: LD_INT 4
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: NEG
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 4
68085: NEG
68086: PUSH
68087: LD_INT 3
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: LD_INT 4
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: LD_INT 4
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 4
68121: NEG
68122: PUSH
68123: LD_INT 2
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 4
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 5
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: PUSH
68156: LD_INT 4
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: LD_INT 4
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 5
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: LD_INT 5
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68280: LD_ADDR_VAR 0 31
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 4
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 3
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: LD_INT 4
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: PUSH
68318: LD_INT 5
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: LD_INT 5
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 4
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: LD_INT 5
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: LD_INT 3
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 3
68380: NEG
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 3
68425: NEG
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 4
68436: NEG
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 4
68482: NEG
68483: PUSH
68484: LD_INT 4
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 5
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: LD_INT 4
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 4
68530: NEG
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 5
68542: NEG
68543: PUSH
68544: LD_INT 4
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 5
68554: NEG
68555: PUSH
68556: LD_INT 5
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 3
68566: NEG
68567: PUSH
68568: LD_INT 5
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 5
68578: NEG
68579: PUSH
68580: LD_INT 3
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 0
68590: PUSH
68591: LD_INT 3
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 4
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 1
68645: NEG
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: LD_INT 4
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 2
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 4
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: PUSH
68703: LD_INT 1
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 5
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 5
68723: PUSH
68724: LD_INT 1
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 4
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 5
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68830: LD_ADDR_VAR 0 32
68834: PUSH
68835: LD_INT 4
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 4
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 5
68893: NEG
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 5
68904: NEG
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 5
68916: NEG
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: LD_INT 3
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 3
68951: NEG
68952: PUSH
68953: LD_INT 4
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: LD_INT 3
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 4
68999: NEG
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 4
69011: NEG
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: LD_INT 4
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 4
69035: NEG
69036: PUSH
69037: LD_INT 2
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 5
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: LD_INT 4
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: LD_INT 3
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: LD_INT 4
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: NEG
69138: PUSH
69139: LD_INT 5
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: LD_INT 1
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 4
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 3
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 2
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: LD_INT 4
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 4
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 5
69262: PUSH
69263: LD_INT 4
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: LD_INT 5
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 4
69282: PUSH
69283: LD_INT 5
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: LD_INT 4
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 3
69302: PUSH
69303: LD_INT 3
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 5
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: LD_INT 5
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69377: LD_ADDR_VAR 0 33
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: LD_INT 5
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 3
69408: NEG
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: LD_INT 3
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 5
69444: NEG
69445: PUSH
69446: LD_INT 4
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 5
69456: NEG
69457: PUSH
69458: LD_INT 5
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 3
69468: NEG
69469: PUSH
69470: LD_INT 5
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 5
69480: NEG
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 4
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: LD_INT 2
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 1
69547: NEG
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 1
69559: NEG
69560: PUSH
69561: LD_INT 4
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 5
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 5
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: LD_INT 1
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: PUSH
69667: LD_INT 2
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 5
69677: PUSH
69678: LD_INT 2
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: LD_INT 3
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 4
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 4
69717: PUSH
69718: LD_INT 4
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: LD_INT 4
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 2
69737: PUSH
69738: LD_INT 3
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 4
69757: PUSH
69758: LD_INT 2
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 3
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 1
69797: PUSH
69798: LD_INT 4
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: LD_INT 5
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: LD_INT 5
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 1
69827: NEG
69828: PUSH
69829: LD_INT 4
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: LD_INT 3
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: PUSH
69850: LD_INT 5
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: LD_INT 3
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69915: LD_ADDR_VAR 0 34
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: LD_INT 5
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 1
69944: PUSH
69945: LD_INT 4
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 1
69955: PUSH
69956: LD_INT 3
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 1
69977: NEG
69978: PUSH
69979: LD_INT 4
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 1
69989: NEG
69990: PUSH
69991: LD_INT 5
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 3
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: LD_INT 5
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 3
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 3
70034: PUSH
70035: LD_INT 1
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 4
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 2
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: LD_INT 1
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 2
70096: PUSH
70097: LD_INT 2
70099: NEG
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 4
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: PUSH
70118: LD_INT 4
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 5
70137: PUSH
70138: LD_INT 4
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 5
70147: PUSH
70148: LD_INT 5
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: LD_INT 5
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: LD_INT 4
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: LD_INT 3
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 5
70187: PUSH
70188: LD_INT 3
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: LD_INT 5
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 3
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: LD_INT 4
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 1
70268: NEG
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: LD_INT 4
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 2
70289: NEG
70290: PUSH
70291: LD_INT 2
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: LD_INT 1
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 3
70323: NEG
70324: PUSH
70325: LD_INT 0
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 3
70334: NEG
70335: PUSH
70336: LD_INT 1
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 4
70345: NEG
70346: PUSH
70347: LD_INT 1
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 5
70367: NEG
70368: PUSH
70369: LD_INT 1
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 5
70379: NEG
70380: PUSH
70381: LD_INT 2
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 3
70391: NEG
70392: PUSH
70393: LD_INT 2
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: ST_TO_ADDR
// end ; end ;
70447: GO 70450
70449: POP
// case btype of b_depot , b_warehouse :
70450: LD_VAR 0 1
70454: PUSH
70455: LD_INT 0
70457: DOUBLE
70458: EQUAL
70459: IFTRUE 70469
70461: LD_INT 1
70463: DOUBLE
70464: EQUAL
70465: IFTRUE 70469
70467: GO 70670
70469: POP
// case nation of nation_american :
70470: LD_VAR 0 5
70474: PUSH
70475: LD_INT 1
70477: DOUBLE
70478: EQUAL
70479: IFTRUE 70483
70481: GO 70539
70483: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70484: LD_ADDR_VAR 0 9
70488: PUSH
70489: LD_VAR 0 11
70493: PUSH
70494: LD_VAR 0 12
70498: PUSH
70499: LD_VAR 0 13
70503: PUSH
70504: LD_VAR 0 14
70508: PUSH
70509: LD_VAR 0 15
70513: PUSH
70514: LD_VAR 0 16
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: PUSH
70527: LD_VAR 0 4
70531: PUSH
70532: LD_INT 1
70534: PLUS
70535: ARRAY
70536: ST_TO_ADDR
70537: GO 70668
70539: LD_INT 2
70541: DOUBLE
70542: EQUAL
70543: IFTRUE 70547
70545: GO 70603
70547: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70548: LD_ADDR_VAR 0 9
70552: PUSH
70553: LD_VAR 0 17
70557: PUSH
70558: LD_VAR 0 18
70562: PUSH
70563: LD_VAR 0 19
70567: PUSH
70568: LD_VAR 0 20
70572: PUSH
70573: LD_VAR 0 21
70577: PUSH
70578: LD_VAR 0 22
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: PUSH
70591: LD_VAR 0 4
70595: PUSH
70596: LD_INT 1
70598: PLUS
70599: ARRAY
70600: ST_TO_ADDR
70601: GO 70668
70603: LD_INT 3
70605: DOUBLE
70606: EQUAL
70607: IFTRUE 70611
70609: GO 70667
70611: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70612: LD_ADDR_VAR 0 9
70616: PUSH
70617: LD_VAR 0 23
70621: PUSH
70622: LD_VAR 0 24
70626: PUSH
70627: LD_VAR 0 25
70631: PUSH
70632: LD_VAR 0 26
70636: PUSH
70637: LD_VAR 0 27
70641: PUSH
70642: LD_VAR 0 28
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: PUSH
70655: LD_VAR 0 4
70659: PUSH
70660: LD_INT 1
70662: PLUS
70663: ARRAY
70664: ST_TO_ADDR
70665: GO 70668
70667: POP
70668: GO 71223
70670: LD_INT 2
70672: DOUBLE
70673: EQUAL
70674: IFTRUE 70684
70676: LD_INT 3
70678: DOUBLE
70679: EQUAL
70680: IFTRUE 70684
70682: GO 70740
70684: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70685: LD_ADDR_VAR 0 9
70689: PUSH
70690: LD_VAR 0 29
70694: PUSH
70695: LD_VAR 0 30
70699: PUSH
70700: LD_VAR 0 31
70704: PUSH
70705: LD_VAR 0 32
70709: PUSH
70710: LD_VAR 0 33
70714: PUSH
70715: LD_VAR 0 34
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: PUSH
70728: LD_VAR 0 4
70732: PUSH
70733: LD_INT 1
70735: PLUS
70736: ARRAY
70737: ST_TO_ADDR
70738: GO 71223
70740: LD_INT 16
70742: DOUBLE
70743: EQUAL
70744: IFTRUE 70802
70746: LD_INT 17
70748: DOUBLE
70749: EQUAL
70750: IFTRUE 70802
70752: LD_INT 18
70754: DOUBLE
70755: EQUAL
70756: IFTRUE 70802
70758: LD_INT 19
70760: DOUBLE
70761: EQUAL
70762: IFTRUE 70802
70764: LD_INT 22
70766: DOUBLE
70767: EQUAL
70768: IFTRUE 70802
70770: LD_INT 20
70772: DOUBLE
70773: EQUAL
70774: IFTRUE 70802
70776: LD_INT 21
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70802
70782: LD_INT 23
70784: DOUBLE
70785: EQUAL
70786: IFTRUE 70802
70788: LD_INT 24
70790: DOUBLE
70791: EQUAL
70792: IFTRUE 70802
70794: LD_INT 25
70796: DOUBLE
70797: EQUAL
70798: IFTRUE 70802
70800: GO 70858
70802: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70803: LD_ADDR_VAR 0 9
70807: PUSH
70808: LD_VAR 0 35
70812: PUSH
70813: LD_VAR 0 36
70817: PUSH
70818: LD_VAR 0 37
70822: PUSH
70823: LD_VAR 0 38
70827: PUSH
70828: LD_VAR 0 39
70832: PUSH
70833: LD_VAR 0 40
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: PUSH
70846: LD_VAR 0 4
70850: PUSH
70851: LD_INT 1
70853: PLUS
70854: ARRAY
70855: ST_TO_ADDR
70856: GO 71223
70858: LD_INT 6
70860: DOUBLE
70861: EQUAL
70862: IFTRUE 70914
70864: LD_INT 7
70866: DOUBLE
70867: EQUAL
70868: IFTRUE 70914
70870: LD_INT 8
70872: DOUBLE
70873: EQUAL
70874: IFTRUE 70914
70876: LD_INT 13
70878: DOUBLE
70879: EQUAL
70880: IFTRUE 70914
70882: LD_INT 12
70884: DOUBLE
70885: EQUAL
70886: IFTRUE 70914
70888: LD_INT 15
70890: DOUBLE
70891: EQUAL
70892: IFTRUE 70914
70894: LD_INT 11
70896: DOUBLE
70897: EQUAL
70898: IFTRUE 70914
70900: LD_INT 14
70902: DOUBLE
70903: EQUAL
70904: IFTRUE 70914
70906: LD_INT 10
70908: DOUBLE
70909: EQUAL
70910: IFTRUE 70914
70912: GO 70970
70914: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70915: LD_ADDR_VAR 0 9
70919: PUSH
70920: LD_VAR 0 41
70924: PUSH
70925: LD_VAR 0 42
70929: PUSH
70930: LD_VAR 0 43
70934: PUSH
70935: LD_VAR 0 44
70939: PUSH
70940: LD_VAR 0 45
70944: PUSH
70945: LD_VAR 0 46
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: PUSH
70958: LD_VAR 0 4
70962: PUSH
70963: LD_INT 1
70965: PLUS
70966: ARRAY
70967: ST_TO_ADDR
70968: GO 71223
70970: LD_INT 36
70972: DOUBLE
70973: EQUAL
70974: IFTRUE 70978
70976: GO 71034
70978: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70979: LD_ADDR_VAR 0 9
70983: PUSH
70984: LD_VAR 0 47
70988: PUSH
70989: LD_VAR 0 48
70993: PUSH
70994: LD_VAR 0 49
70998: PUSH
70999: LD_VAR 0 50
71003: PUSH
71004: LD_VAR 0 51
71008: PUSH
71009: LD_VAR 0 52
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: PUSH
71022: LD_VAR 0 4
71026: PUSH
71027: LD_INT 1
71029: PLUS
71030: ARRAY
71031: ST_TO_ADDR
71032: GO 71223
71034: LD_INT 4
71036: DOUBLE
71037: EQUAL
71038: IFTRUE 71060
71040: LD_INT 5
71042: DOUBLE
71043: EQUAL
71044: IFTRUE 71060
71046: LD_INT 34
71048: DOUBLE
71049: EQUAL
71050: IFTRUE 71060
71052: LD_INT 37
71054: DOUBLE
71055: EQUAL
71056: IFTRUE 71060
71058: GO 71116
71060: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71061: LD_ADDR_VAR 0 9
71065: PUSH
71066: LD_VAR 0 53
71070: PUSH
71071: LD_VAR 0 54
71075: PUSH
71076: LD_VAR 0 55
71080: PUSH
71081: LD_VAR 0 56
71085: PUSH
71086: LD_VAR 0 57
71090: PUSH
71091: LD_VAR 0 58
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: PUSH
71104: LD_VAR 0 4
71108: PUSH
71109: LD_INT 1
71111: PLUS
71112: ARRAY
71113: ST_TO_ADDR
71114: GO 71223
71116: LD_INT 31
71118: DOUBLE
71119: EQUAL
71120: IFTRUE 71166
71122: LD_INT 32
71124: DOUBLE
71125: EQUAL
71126: IFTRUE 71166
71128: LD_INT 33
71130: DOUBLE
71131: EQUAL
71132: IFTRUE 71166
71134: LD_INT 27
71136: DOUBLE
71137: EQUAL
71138: IFTRUE 71166
71140: LD_INT 26
71142: DOUBLE
71143: EQUAL
71144: IFTRUE 71166
71146: LD_INT 28
71148: DOUBLE
71149: EQUAL
71150: IFTRUE 71166
71152: LD_INT 29
71154: DOUBLE
71155: EQUAL
71156: IFTRUE 71166
71158: LD_INT 30
71160: DOUBLE
71161: EQUAL
71162: IFTRUE 71166
71164: GO 71222
71166: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71167: LD_ADDR_VAR 0 9
71171: PUSH
71172: LD_VAR 0 59
71176: PUSH
71177: LD_VAR 0 60
71181: PUSH
71182: LD_VAR 0 61
71186: PUSH
71187: LD_VAR 0 62
71191: PUSH
71192: LD_VAR 0 63
71196: PUSH
71197: LD_VAR 0 64
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: PUSH
71210: LD_VAR 0 4
71214: PUSH
71215: LD_INT 1
71217: PLUS
71218: ARRAY
71219: ST_TO_ADDR
71220: GO 71223
71222: POP
// temp_list2 = [ ] ;
71223: LD_ADDR_VAR 0 10
71227: PUSH
71228: EMPTY
71229: ST_TO_ADDR
// for i in temp_list do
71230: LD_ADDR_VAR 0 8
71234: PUSH
71235: LD_VAR 0 9
71239: PUSH
71240: FOR_IN
71241: IFFALSE 71293
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71243: LD_ADDR_VAR 0 10
71247: PUSH
71248: LD_VAR 0 10
71252: PUSH
71253: LD_VAR 0 8
71257: PUSH
71258: LD_INT 1
71260: ARRAY
71261: PUSH
71262: LD_VAR 0 2
71266: PLUS
71267: PUSH
71268: LD_VAR 0 8
71272: PUSH
71273: LD_INT 2
71275: ARRAY
71276: PUSH
71277: LD_VAR 0 3
71281: PLUS
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: EMPTY
71288: LIST
71289: ADD
71290: ST_TO_ADDR
71291: GO 71240
71293: POP
71294: POP
// result = temp_list2 ;
71295: LD_ADDR_VAR 0 7
71299: PUSH
71300: LD_VAR 0 10
71304: ST_TO_ADDR
// end ;
71305: LD_VAR 0 7
71309: RET
// export function EnemyInRange ( unit , dist ) ; begin
71310: LD_INT 0
71312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71313: LD_ADDR_VAR 0 3
71317: PUSH
71318: LD_VAR 0 1
71322: PPUSH
71323: CALL_OW 255
71327: PPUSH
71328: LD_VAR 0 1
71332: PPUSH
71333: CALL_OW 250
71337: PPUSH
71338: LD_VAR 0 1
71342: PPUSH
71343: CALL_OW 251
71347: PPUSH
71348: LD_VAR 0 2
71352: PPUSH
71353: CALL 44706 0 4
71357: PUSH
71358: LD_INT 4
71360: ARRAY
71361: ST_TO_ADDR
// end ;
71362: LD_VAR 0 3
71366: RET
// export function PlayerSeeMe ( unit ) ; begin
71367: LD_INT 0
71369: PPUSH
// result := See ( your_side , unit ) ;
71370: LD_ADDR_VAR 0 2
71374: PUSH
71375: LD_OWVAR 2
71379: PPUSH
71380: LD_VAR 0 1
71384: PPUSH
71385: CALL_OW 292
71389: ST_TO_ADDR
// end ;
71390: LD_VAR 0 2
71394: RET
// export function ReverseDir ( unit ) ; begin
71395: LD_INT 0
71397: PPUSH
// if not unit then
71398: LD_VAR 0 1
71402: NOT
71403: IFFALSE 71407
// exit ;
71405: GO 71430
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71407: LD_ADDR_VAR 0 2
71411: PUSH
71412: LD_VAR 0 1
71416: PPUSH
71417: CALL_OW 254
71421: PUSH
71422: LD_INT 3
71424: PLUS
71425: PUSH
71426: LD_INT 6
71428: MOD
71429: ST_TO_ADDR
// end ;
71430: LD_VAR 0 2
71434: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71435: LD_INT 0
71437: PPUSH
71438: PPUSH
71439: PPUSH
71440: PPUSH
71441: PPUSH
// if not hexes then
71442: LD_VAR 0 2
71446: NOT
71447: IFFALSE 71451
// exit ;
71449: GO 71599
// dist := 9999 ;
71451: LD_ADDR_VAR 0 5
71455: PUSH
71456: LD_INT 9999
71458: ST_TO_ADDR
// for i = 1 to hexes do
71459: LD_ADDR_VAR 0 4
71463: PUSH
71464: DOUBLE
71465: LD_INT 1
71467: DEC
71468: ST_TO_ADDR
71469: LD_VAR 0 2
71473: PUSH
71474: FOR_TO
71475: IFFALSE 71587
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 2
71486: PUSH
71487: LD_VAR 0 4
71491: ARRAY
71492: PUSH
71493: LD_INT 1
71495: ARRAY
71496: PPUSH
71497: LD_VAR 0 2
71501: PUSH
71502: LD_VAR 0 4
71506: ARRAY
71507: PUSH
71508: LD_INT 2
71510: ARRAY
71511: PPUSH
71512: CALL_OW 297
71516: PUSH
71517: LD_VAR 0 5
71521: LESS
71522: IFFALSE 71585
// begin hex := hexes [ i ] ;
71524: LD_ADDR_VAR 0 7
71528: PUSH
71529: LD_VAR 0 2
71533: PUSH
71534: LD_VAR 0 4
71538: ARRAY
71539: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71540: LD_ADDR_VAR 0 5
71544: PUSH
71545: LD_VAR 0 1
71549: PPUSH
71550: LD_VAR 0 2
71554: PUSH
71555: LD_VAR 0 4
71559: ARRAY
71560: PUSH
71561: LD_INT 1
71563: ARRAY
71564: PPUSH
71565: LD_VAR 0 2
71569: PUSH
71570: LD_VAR 0 4
71574: ARRAY
71575: PUSH
71576: LD_INT 2
71578: ARRAY
71579: PPUSH
71580: CALL_OW 297
71584: ST_TO_ADDR
// end ; end ;
71585: GO 71474
71587: POP
71588: POP
// result := hex ;
71589: LD_ADDR_VAR 0 3
71593: PUSH
71594: LD_VAR 0 7
71598: ST_TO_ADDR
// end ;
71599: LD_VAR 0 3
71603: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71604: LD_INT 0
71606: PPUSH
71607: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71608: LD_VAR 0 1
71612: NOT
71613: PUSH
71614: LD_VAR 0 1
71618: PUSH
71619: LD_INT 21
71621: PUSH
71622: LD_INT 2
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 23
71631: PUSH
71632: LD_INT 2
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 69
71647: IN
71648: NOT
71649: OR
71650: IFFALSE 71654
// exit ;
71652: GO 71701
// for i = 1 to 3 do
71654: LD_ADDR_VAR 0 3
71658: PUSH
71659: DOUBLE
71660: LD_INT 1
71662: DEC
71663: ST_TO_ADDR
71664: LD_INT 3
71666: PUSH
71667: FOR_TO
71668: IFFALSE 71699
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71670: LD_VAR 0 1
71674: PPUSH
71675: CALL_OW 250
71679: PPUSH
71680: LD_VAR 0 1
71684: PPUSH
71685: CALL_OW 251
71689: PPUSH
71690: LD_INT 1
71692: PPUSH
71693: CALL_OW 453
71697: GO 71667
71699: POP
71700: POP
// end ;
71701: LD_VAR 0 2
71705: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71706: LD_INT 0
71708: PPUSH
71709: PPUSH
71710: PPUSH
71711: PPUSH
71712: PPUSH
71713: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71714: LD_VAR 0 1
71718: NOT
71719: PUSH
71720: LD_VAR 0 2
71724: NOT
71725: OR
71726: PUSH
71727: LD_VAR 0 1
71731: PPUSH
71732: CALL_OW 314
71736: OR
71737: IFFALSE 71741
// exit ;
71739: GO 72182
// x := GetX ( enemy_unit ) ;
71741: LD_ADDR_VAR 0 7
71745: PUSH
71746: LD_VAR 0 2
71750: PPUSH
71751: CALL_OW 250
71755: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71756: LD_ADDR_VAR 0 8
71760: PUSH
71761: LD_VAR 0 2
71765: PPUSH
71766: CALL_OW 251
71770: ST_TO_ADDR
// if not x or not y then
71771: LD_VAR 0 7
71775: NOT
71776: PUSH
71777: LD_VAR 0 8
71781: NOT
71782: OR
71783: IFFALSE 71787
// exit ;
71785: GO 72182
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71787: LD_ADDR_VAR 0 6
71791: PUSH
71792: LD_VAR 0 7
71796: PPUSH
71797: LD_INT 0
71799: PPUSH
71800: LD_INT 4
71802: PPUSH
71803: CALL_OW 272
71807: PUSH
71808: LD_VAR 0 8
71812: PPUSH
71813: LD_INT 0
71815: PPUSH
71816: LD_INT 4
71818: PPUSH
71819: CALL_OW 273
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_VAR 0 7
71832: PPUSH
71833: LD_INT 1
71835: PPUSH
71836: LD_INT 4
71838: PPUSH
71839: CALL_OW 272
71843: PUSH
71844: LD_VAR 0 8
71848: PPUSH
71849: LD_INT 1
71851: PPUSH
71852: LD_INT 4
71854: PPUSH
71855: CALL_OW 273
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_VAR 0 7
71868: PPUSH
71869: LD_INT 2
71871: PPUSH
71872: LD_INT 4
71874: PPUSH
71875: CALL_OW 272
71879: PUSH
71880: LD_VAR 0 8
71884: PPUSH
71885: LD_INT 2
71887: PPUSH
71888: LD_INT 4
71890: PPUSH
71891: CALL_OW 273
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_VAR 0 7
71904: PPUSH
71905: LD_INT 3
71907: PPUSH
71908: LD_INT 4
71910: PPUSH
71911: CALL_OW 272
71915: PUSH
71916: LD_VAR 0 8
71920: PPUSH
71921: LD_INT 3
71923: PPUSH
71924: LD_INT 4
71926: PPUSH
71927: CALL_OW 273
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_VAR 0 7
71940: PPUSH
71941: LD_INT 4
71943: PPUSH
71944: LD_INT 4
71946: PPUSH
71947: CALL_OW 272
71951: PUSH
71952: LD_VAR 0 8
71956: PPUSH
71957: LD_INT 4
71959: PPUSH
71960: LD_INT 4
71962: PPUSH
71963: CALL_OW 273
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_VAR 0 7
71976: PPUSH
71977: LD_INT 5
71979: PPUSH
71980: LD_INT 4
71982: PPUSH
71983: CALL_OW 272
71987: PUSH
71988: LD_VAR 0 8
71992: PPUSH
71993: LD_INT 5
71995: PPUSH
71996: LD_INT 4
71998: PPUSH
71999: CALL_OW 273
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: ST_TO_ADDR
// for i = tmp downto 1 do
72016: LD_ADDR_VAR 0 4
72020: PUSH
72021: DOUBLE
72022: LD_VAR 0 6
72026: INC
72027: ST_TO_ADDR
72028: LD_INT 1
72030: PUSH
72031: FOR_DOWNTO
72032: IFFALSE 72133
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72034: LD_VAR 0 6
72038: PUSH
72039: LD_VAR 0 4
72043: ARRAY
72044: PUSH
72045: LD_INT 1
72047: ARRAY
72048: PPUSH
72049: LD_VAR 0 6
72053: PUSH
72054: LD_VAR 0 4
72058: ARRAY
72059: PUSH
72060: LD_INT 2
72062: ARRAY
72063: PPUSH
72064: CALL_OW 488
72068: NOT
72069: PUSH
72070: LD_VAR 0 6
72074: PUSH
72075: LD_VAR 0 4
72079: ARRAY
72080: PUSH
72081: LD_INT 1
72083: ARRAY
72084: PPUSH
72085: LD_VAR 0 6
72089: PUSH
72090: LD_VAR 0 4
72094: ARRAY
72095: PUSH
72096: LD_INT 2
72098: ARRAY
72099: PPUSH
72100: CALL_OW 428
72104: PUSH
72105: LD_INT 0
72107: NONEQUAL
72108: OR
72109: IFFALSE 72131
// tmp := Delete ( tmp , i ) ;
72111: LD_ADDR_VAR 0 6
72115: PUSH
72116: LD_VAR 0 6
72120: PPUSH
72121: LD_VAR 0 4
72125: PPUSH
72126: CALL_OW 3
72130: ST_TO_ADDR
72131: GO 72031
72133: POP
72134: POP
// j := GetClosestHex ( unit , tmp ) ;
72135: LD_ADDR_VAR 0 5
72139: PUSH
72140: LD_VAR 0 1
72144: PPUSH
72145: LD_VAR 0 6
72149: PPUSH
72150: CALL 71435 0 2
72154: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72155: LD_VAR 0 1
72159: PPUSH
72160: LD_VAR 0 5
72164: PUSH
72165: LD_INT 1
72167: ARRAY
72168: PPUSH
72169: LD_VAR 0 5
72173: PUSH
72174: LD_INT 2
72176: ARRAY
72177: PPUSH
72178: CALL_OW 111
// end ;
72182: LD_VAR 0 3
72186: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72187: LD_INT 0
72189: PPUSH
72190: PPUSH
72191: PPUSH
// uc_side = 0 ;
72192: LD_ADDR_OWVAR 20
72196: PUSH
72197: LD_INT 0
72199: ST_TO_ADDR
// uc_nation = 0 ;
72200: LD_ADDR_OWVAR 21
72204: PUSH
72205: LD_INT 0
72207: ST_TO_ADDR
// InitHc_All ( ) ;
72208: CALL_OW 584
// InitVc ;
72212: CALL_OW 20
// if mastodonts then
72216: LD_VAR 0 6
72220: IFFALSE 72287
// for i = 1 to mastodonts do
72222: LD_ADDR_VAR 0 11
72226: PUSH
72227: DOUBLE
72228: LD_INT 1
72230: DEC
72231: ST_TO_ADDR
72232: LD_VAR 0 6
72236: PUSH
72237: FOR_TO
72238: IFFALSE 72285
// begin vc_chassis := 31 ;
72240: LD_ADDR_OWVAR 37
72244: PUSH
72245: LD_INT 31
72247: ST_TO_ADDR
// vc_control := control_rider ;
72248: LD_ADDR_OWVAR 38
72252: PUSH
72253: LD_INT 4
72255: ST_TO_ADDR
// animal := CreateVehicle ;
72256: LD_ADDR_VAR 0 12
72260: PUSH
72261: CALL_OW 45
72265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72266: LD_VAR 0 12
72270: PPUSH
72271: LD_VAR 0 8
72275: PPUSH
72276: LD_INT 0
72278: PPUSH
72279: CALL 74422 0 3
// end ;
72283: GO 72237
72285: POP
72286: POP
// if horses then
72287: LD_VAR 0 5
72291: IFFALSE 72358
// for i = 1 to horses do
72293: LD_ADDR_VAR 0 11
72297: PUSH
72298: DOUBLE
72299: LD_INT 1
72301: DEC
72302: ST_TO_ADDR
72303: LD_VAR 0 5
72307: PUSH
72308: FOR_TO
72309: IFFALSE 72356
// begin hc_class := 21 ;
72311: LD_ADDR_OWVAR 28
72315: PUSH
72316: LD_INT 21
72318: ST_TO_ADDR
// hc_gallery :=  ;
72319: LD_ADDR_OWVAR 33
72323: PUSH
72324: LD_STRING 
72326: ST_TO_ADDR
// animal := CreateHuman ;
72327: LD_ADDR_VAR 0 12
72331: PUSH
72332: CALL_OW 44
72336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72337: LD_VAR 0 12
72341: PPUSH
72342: LD_VAR 0 8
72346: PPUSH
72347: LD_INT 0
72349: PPUSH
72350: CALL 74422 0 3
// end ;
72354: GO 72308
72356: POP
72357: POP
// if birds then
72358: LD_VAR 0 1
72362: IFFALSE 72429
// for i = 1 to birds do
72364: LD_ADDR_VAR 0 11
72368: PUSH
72369: DOUBLE
72370: LD_INT 1
72372: DEC
72373: ST_TO_ADDR
72374: LD_VAR 0 1
72378: PUSH
72379: FOR_TO
72380: IFFALSE 72427
// begin hc_class = 18 ;
72382: LD_ADDR_OWVAR 28
72386: PUSH
72387: LD_INT 18
72389: ST_TO_ADDR
// hc_gallery =  ;
72390: LD_ADDR_OWVAR 33
72394: PUSH
72395: LD_STRING 
72397: ST_TO_ADDR
// animal := CreateHuman ;
72398: LD_ADDR_VAR 0 12
72402: PUSH
72403: CALL_OW 44
72407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72408: LD_VAR 0 12
72412: PPUSH
72413: LD_VAR 0 8
72417: PPUSH
72418: LD_INT 0
72420: PPUSH
72421: CALL 74422 0 3
// end ;
72425: GO 72379
72427: POP
72428: POP
// if tigers then
72429: LD_VAR 0 2
72433: IFFALSE 72517
// for i = 1 to tigers do
72435: LD_ADDR_VAR 0 11
72439: PUSH
72440: DOUBLE
72441: LD_INT 1
72443: DEC
72444: ST_TO_ADDR
72445: LD_VAR 0 2
72449: PUSH
72450: FOR_TO
72451: IFFALSE 72515
// begin hc_class = class_tiger ;
72453: LD_ADDR_OWVAR 28
72457: PUSH
72458: LD_INT 14
72460: ST_TO_ADDR
// hc_gallery =  ;
72461: LD_ADDR_OWVAR 33
72465: PUSH
72466: LD_STRING 
72468: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72469: LD_ADDR_OWVAR 35
72473: PUSH
72474: LD_INT 7
72476: NEG
72477: PPUSH
72478: LD_INT 7
72480: PPUSH
72481: CALL_OW 12
72485: ST_TO_ADDR
// animal := CreateHuman ;
72486: LD_ADDR_VAR 0 12
72490: PUSH
72491: CALL_OW 44
72495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72496: LD_VAR 0 12
72500: PPUSH
72501: LD_VAR 0 8
72505: PPUSH
72506: LD_INT 0
72508: PPUSH
72509: CALL 74422 0 3
// end ;
72513: GO 72450
72515: POP
72516: POP
// if apemans then
72517: LD_VAR 0 3
72521: IFFALSE 72644
// for i = 1 to apemans do
72523: LD_ADDR_VAR 0 11
72527: PUSH
72528: DOUBLE
72529: LD_INT 1
72531: DEC
72532: ST_TO_ADDR
72533: LD_VAR 0 3
72537: PUSH
72538: FOR_TO
72539: IFFALSE 72642
// begin hc_class = class_apeman ;
72541: LD_ADDR_OWVAR 28
72545: PUSH
72546: LD_INT 12
72548: ST_TO_ADDR
// hc_gallery =  ;
72549: LD_ADDR_OWVAR 33
72553: PUSH
72554: LD_STRING 
72556: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72557: LD_ADDR_OWVAR 35
72561: PUSH
72562: LD_INT 2
72564: NEG
72565: PPUSH
72566: LD_INT 2
72568: PPUSH
72569: CALL_OW 12
72573: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72574: LD_ADDR_OWVAR 31
72578: PUSH
72579: LD_INT 1
72581: PPUSH
72582: LD_INT 3
72584: PPUSH
72585: CALL_OW 12
72589: PUSH
72590: LD_INT 1
72592: PPUSH
72593: LD_INT 3
72595: PPUSH
72596: CALL_OW 12
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: LD_INT 0
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: ST_TO_ADDR
// animal := CreateHuman ;
72613: LD_ADDR_VAR 0 12
72617: PUSH
72618: CALL_OW 44
72622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72623: LD_VAR 0 12
72627: PPUSH
72628: LD_VAR 0 8
72632: PPUSH
72633: LD_INT 0
72635: PPUSH
72636: CALL 74422 0 3
// end ;
72640: GO 72538
72642: POP
72643: POP
// if enchidnas then
72644: LD_VAR 0 4
72648: IFFALSE 72715
// for i = 1 to enchidnas do
72650: LD_ADDR_VAR 0 11
72654: PUSH
72655: DOUBLE
72656: LD_INT 1
72658: DEC
72659: ST_TO_ADDR
72660: LD_VAR 0 4
72664: PUSH
72665: FOR_TO
72666: IFFALSE 72713
// begin hc_class = 13 ;
72668: LD_ADDR_OWVAR 28
72672: PUSH
72673: LD_INT 13
72675: ST_TO_ADDR
// hc_gallery =  ;
72676: LD_ADDR_OWVAR 33
72680: PUSH
72681: LD_STRING 
72683: ST_TO_ADDR
// animal := CreateHuman ;
72684: LD_ADDR_VAR 0 12
72688: PUSH
72689: CALL_OW 44
72693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72694: LD_VAR 0 12
72698: PPUSH
72699: LD_VAR 0 8
72703: PPUSH
72704: LD_INT 0
72706: PPUSH
72707: CALL 74422 0 3
// end ;
72711: GO 72665
72713: POP
72714: POP
// if fishes then
72715: LD_VAR 0 7
72719: IFFALSE 72786
// for i = 1 to fishes do
72721: LD_ADDR_VAR 0 11
72725: PUSH
72726: DOUBLE
72727: LD_INT 1
72729: DEC
72730: ST_TO_ADDR
72731: LD_VAR 0 7
72735: PUSH
72736: FOR_TO
72737: IFFALSE 72784
// begin hc_class = 20 ;
72739: LD_ADDR_OWVAR 28
72743: PUSH
72744: LD_INT 20
72746: ST_TO_ADDR
// hc_gallery =  ;
72747: LD_ADDR_OWVAR 33
72751: PUSH
72752: LD_STRING 
72754: ST_TO_ADDR
// animal := CreateHuman ;
72755: LD_ADDR_VAR 0 12
72759: PUSH
72760: CALL_OW 44
72764: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72765: LD_VAR 0 12
72769: PPUSH
72770: LD_VAR 0 9
72774: PPUSH
72775: LD_INT 0
72777: PPUSH
72778: CALL 74422 0 3
// end ;
72782: GO 72736
72784: POP
72785: POP
// end ;
72786: LD_VAR 0 10
72790: RET
// export function WantHeal ( sci , unit ) ; begin
72791: LD_INT 0
72793: PPUSH
// if GetTaskList ( sci ) > 0 then
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 437
72803: PUSH
72804: LD_INT 0
72806: GREATER
72807: IFFALSE 72877
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72809: LD_VAR 0 1
72813: PPUSH
72814: CALL_OW 437
72818: PUSH
72819: LD_INT 1
72821: ARRAY
72822: PUSH
72823: LD_INT 1
72825: ARRAY
72826: PUSH
72827: LD_STRING l
72829: EQUAL
72830: PUSH
72831: LD_VAR 0 1
72835: PPUSH
72836: CALL_OW 437
72840: PUSH
72841: LD_INT 1
72843: ARRAY
72844: PUSH
72845: LD_INT 4
72847: ARRAY
72848: PUSH
72849: LD_VAR 0 2
72853: EQUAL
72854: AND
72855: IFFALSE 72867
// result := true else
72857: LD_ADDR_VAR 0 3
72861: PUSH
72862: LD_INT 1
72864: ST_TO_ADDR
72865: GO 72875
// result := false ;
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: LD_INT 0
72874: ST_TO_ADDR
// end else
72875: GO 72885
// result := false ;
72877: LD_ADDR_VAR 0 3
72881: PUSH
72882: LD_INT 0
72884: ST_TO_ADDR
// end ;
72885: LD_VAR 0 3
72889: RET
// export function HealTarget ( sci ) ; begin
72890: LD_INT 0
72892: PPUSH
// if not sci then
72893: LD_VAR 0 1
72897: NOT
72898: IFFALSE 72902
// exit ;
72900: GO 72967
// result := 0 ;
72902: LD_ADDR_VAR 0 2
72906: PUSH
72907: LD_INT 0
72909: ST_TO_ADDR
// if GetTaskList ( sci ) then
72910: LD_VAR 0 1
72914: PPUSH
72915: CALL_OW 437
72919: IFFALSE 72967
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72921: LD_VAR 0 1
72925: PPUSH
72926: CALL_OW 437
72930: PUSH
72931: LD_INT 1
72933: ARRAY
72934: PUSH
72935: LD_INT 1
72937: ARRAY
72938: PUSH
72939: LD_STRING l
72941: EQUAL
72942: IFFALSE 72967
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72944: LD_ADDR_VAR 0 2
72948: PUSH
72949: LD_VAR 0 1
72953: PPUSH
72954: CALL_OW 437
72958: PUSH
72959: LD_INT 1
72961: ARRAY
72962: PUSH
72963: LD_INT 4
72965: ARRAY
72966: ST_TO_ADDR
// end ;
72967: LD_VAR 0 2
72971: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72972: LD_INT 0
72974: PPUSH
72975: PPUSH
72976: PPUSH
72977: PPUSH
// if not base_units then
72978: LD_VAR 0 1
72982: NOT
72983: IFFALSE 72987
// exit ;
72985: GO 73074
// result := false ;
72987: LD_ADDR_VAR 0 2
72991: PUSH
72992: LD_INT 0
72994: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72995: LD_ADDR_VAR 0 5
72999: PUSH
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_INT 21
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PPUSH
73015: CALL_OW 72
73019: ST_TO_ADDR
// if not tmp then
73020: LD_VAR 0 5
73024: NOT
73025: IFFALSE 73029
// exit ;
73027: GO 73074
// for i in tmp do
73029: LD_ADDR_VAR 0 3
73033: PUSH
73034: LD_VAR 0 5
73038: PUSH
73039: FOR_IN
73040: IFFALSE 73072
// begin result := EnemyInRange ( i , 22 ) ;
73042: LD_ADDR_VAR 0 2
73046: PUSH
73047: LD_VAR 0 3
73051: PPUSH
73052: LD_INT 22
73054: PPUSH
73055: CALL 71310 0 2
73059: ST_TO_ADDR
// if result then
73060: LD_VAR 0 2
73064: IFFALSE 73070
// exit ;
73066: POP
73067: POP
73068: GO 73074
// end ;
73070: GO 73039
73072: POP
73073: POP
// end ;
73074: LD_VAR 0 2
73078: RET
// export function FilterByTag ( units , tag ) ; begin
73079: LD_INT 0
73081: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73082: LD_ADDR_VAR 0 3
73086: PUSH
73087: LD_VAR 0 1
73091: PPUSH
73092: LD_INT 120
73094: PUSH
73095: LD_VAR 0 2
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PPUSH
73104: CALL_OW 72
73108: ST_TO_ADDR
// end ;
73109: LD_VAR 0 3
73113: RET
// export function IsDriver ( un ) ; begin
73114: LD_INT 0
73116: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73117: LD_ADDR_VAR 0 2
73121: PUSH
73122: LD_VAR 0 1
73126: PUSH
73127: LD_INT 55
73129: PUSH
73130: EMPTY
73131: LIST
73132: PPUSH
73133: CALL_OW 69
73137: IN
73138: ST_TO_ADDR
// end ;
73139: LD_VAR 0 2
73143: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73144: LD_INT 0
73146: PPUSH
73147: PPUSH
// list := [ ] ;
73148: LD_ADDR_VAR 0 5
73152: PUSH
73153: EMPTY
73154: ST_TO_ADDR
// case d of 0 :
73155: LD_VAR 0 3
73159: PUSH
73160: LD_INT 0
73162: DOUBLE
73163: EQUAL
73164: IFTRUE 73168
73166: GO 73301
73168: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73169: LD_ADDR_VAR 0 5
73173: PUSH
73174: LD_VAR 0 1
73178: PUSH
73179: LD_INT 4
73181: MINUS
73182: PUSH
73183: LD_VAR 0 2
73187: PUSH
73188: LD_INT 4
73190: MINUS
73191: PUSH
73192: LD_INT 2
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: PUSH
73200: LD_VAR 0 1
73204: PUSH
73205: LD_INT 3
73207: MINUS
73208: PUSH
73209: LD_VAR 0 2
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: LIST
73221: PUSH
73222: LD_VAR 0 1
73226: PUSH
73227: LD_INT 4
73229: PLUS
73230: PUSH
73231: LD_VAR 0 2
73235: PUSH
73236: LD_INT 4
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: PUSH
73244: LD_VAR 0 1
73248: PUSH
73249: LD_INT 3
73251: PLUS
73252: PUSH
73253: LD_VAR 0 2
73257: PUSH
73258: LD_INT 3
73260: PLUS
73261: PUSH
73262: LD_INT 5
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: LIST
73269: PUSH
73270: LD_VAR 0 1
73274: PUSH
73275: LD_VAR 0 2
73279: PUSH
73280: LD_INT 4
73282: PLUS
73283: PUSH
73284: LD_INT 0
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: ST_TO_ADDR
// end ; 1 :
73299: GO 73999
73301: LD_INT 1
73303: DOUBLE
73304: EQUAL
73305: IFTRUE 73309
73307: GO 73442
73309: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73310: LD_ADDR_VAR 0 5
73314: PUSH
73315: LD_VAR 0 1
73319: PUSH
73320: LD_VAR 0 2
73324: PUSH
73325: LD_INT 4
73327: MINUS
73328: PUSH
73329: LD_INT 3
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: PUSH
73337: LD_VAR 0 1
73341: PUSH
73342: LD_INT 3
73344: MINUS
73345: PUSH
73346: LD_VAR 0 2
73350: PUSH
73351: LD_INT 3
73353: MINUS
73354: PUSH
73355: LD_INT 2
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: PUSH
73363: LD_VAR 0 1
73367: PUSH
73368: LD_INT 4
73370: MINUS
73371: PUSH
73372: LD_VAR 0 2
73376: PUSH
73377: LD_INT 1
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: LIST
73384: PUSH
73385: LD_VAR 0 1
73389: PUSH
73390: LD_VAR 0 2
73394: PUSH
73395: LD_INT 3
73397: PLUS
73398: PUSH
73399: LD_INT 0
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: LIST
73406: PUSH
73407: LD_VAR 0 1
73411: PUSH
73412: LD_INT 4
73414: PLUS
73415: PUSH
73416: LD_VAR 0 2
73420: PUSH
73421: LD_INT 4
73423: PLUS
73424: PUSH
73425: LD_INT 5
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: LIST
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: ST_TO_ADDR
// end ; 2 :
73440: GO 73999
73442: LD_INT 2
73444: DOUBLE
73445: EQUAL
73446: IFTRUE 73450
73448: GO 73579
73450: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73451: LD_ADDR_VAR 0 5
73455: PUSH
73456: LD_VAR 0 1
73460: PUSH
73461: LD_VAR 0 2
73465: PUSH
73466: LD_INT 3
73468: MINUS
73469: PUSH
73470: LD_INT 3
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: LIST
73477: PUSH
73478: LD_VAR 0 1
73482: PUSH
73483: LD_INT 4
73485: PLUS
73486: PUSH
73487: LD_VAR 0 2
73491: PUSH
73492: LD_INT 4
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: LIST
73499: PUSH
73500: LD_VAR 0 1
73504: PUSH
73505: LD_VAR 0 2
73509: PUSH
73510: LD_INT 4
73512: PLUS
73513: PUSH
73514: LD_INT 0
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: PUSH
73522: LD_VAR 0 1
73526: PUSH
73527: LD_INT 3
73529: MINUS
73530: PUSH
73531: LD_VAR 0 2
73535: PUSH
73536: LD_INT 1
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_INT 4
73551: MINUS
73552: PUSH
73553: LD_VAR 0 2
73557: PUSH
73558: LD_INT 4
73560: MINUS
73561: PUSH
73562: LD_INT 2
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: ST_TO_ADDR
// end ; 3 :
73577: GO 73999
73579: LD_INT 3
73581: DOUBLE
73582: EQUAL
73583: IFTRUE 73587
73585: GO 73720
73587: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73588: LD_ADDR_VAR 0 5
73592: PUSH
73593: LD_VAR 0 1
73597: PUSH
73598: LD_INT 3
73600: PLUS
73601: PUSH
73602: LD_VAR 0 2
73606: PUSH
73607: LD_INT 4
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: PUSH
73615: LD_VAR 0 1
73619: PUSH
73620: LD_INT 4
73622: PLUS
73623: PUSH
73624: LD_VAR 0 2
73628: PUSH
73629: LD_INT 4
73631: PLUS
73632: PUSH
73633: LD_INT 5
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: LIST
73640: PUSH
73641: LD_VAR 0 1
73645: PUSH
73646: LD_INT 4
73648: MINUS
73649: PUSH
73650: LD_VAR 0 2
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: LIST
73662: PUSH
73663: LD_VAR 0 1
73667: PUSH
73668: LD_VAR 0 2
73672: PUSH
73673: LD_INT 4
73675: MINUS
73676: PUSH
73677: LD_INT 3
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: LIST
73684: PUSH
73685: LD_VAR 0 1
73689: PUSH
73690: LD_INT 3
73692: MINUS
73693: PUSH
73694: LD_VAR 0 2
73698: PUSH
73699: LD_INT 3
73701: MINUS
73702: PUSH
73703: LD_INT 2
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: ST_TO_ADDR
// end ; 4 :
73718: GO 73999
73720: LD_INT 4
73722: DOUBLE
73723: EQUAL
73724: IFTRUE 73728
73726: GO 73861
73728: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73729: LD_ADDR_VAR 0 5
73733: PUSH
73734: LD_VAR 0 1
73738: PUSH
73739: LD_VAR 0 2
73743: PUSH
73744: LD_INT 4
73746: PLUS
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: PUSH
73756: LD_VAR 0 1
73760: PUSH
73761: LD_INT 3
73763: PLUS
73764: PUSH
73765: LD_VAR 0 2
73769: PUSH
73770: LD_INT 3
73772: PLUS
73773: PUSH
73774: LD_INT 5
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: LIST
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: LD_INT 4
73789: PLUS
73790: PUSH
73791: LD_VAR 0 2
73795: PUSH
73796: LD_INT 4
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: LIST
73803: PUSH
73804: LD_VAR 0 1
73808: PUSH
73809: LD_VAR 0 2
73813: PUSH
73814: LD_INT 3
73816: MINUS
73817: PUSH
73818: LD_INT 3
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: LIST
73825: PUSH
73826: LD_VAR 0 1
73830: PUSH
73831: LD_INT 4
73833: MINUS
73834: PUSH
73835: LD_VAR 0 2
73839: PUSH
73840: LD_INT 4
73842: MINUS
73843: PUSH
73844: LD_INT 2
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: ST_TO_ADDR
// end ; 5 :
73859: GO 73999
73861: LD_INT 5
73863: DOUBLE
73864: EQUAL
73865: IFTRUE 73869
73867: GO 73998
73869: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73870: LD_ADDR_VAR 0 5
73874: PUSH
73875: LD_VAR 0 1
73879: PUSH
73880: LD_INT 4
73882: MINUS
73883: PUSH
73884: LD_VAR 0 2
73888: PUSH
73889: LD_INT 1
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: PUSH
73897: LD_VAR 0 1
73901: PUSH
73902: LD_VAR 0 2
73906: PUSH
73907: LD_INT 4
73909: MINUS
73910: PUSH
73911: LD_INT 3
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: PUSH
73919: LD_VAR 0 1
73923: PUSH
73924: LD_INT 4
73926: PLUS
73927: PUSH
73928: LD_VAR 0 2
73932: PUSH
73933: LD_INT 4
73935: PLUS
73936: PUSH
73937: LD_INT 5
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: LIST
73944: PUSH
73945: LD_VAR 0 1
73949: PUSH
73950: LD_INT 3
73952: PLUS
73953: PUSH
73954: LD_VAR 0 2
73958: PUSH
73959: LD_INT 4
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: LIST
73966: PUSH
73967: LD_VAR 0 1
73971: PUSH
73972: LD_VAR 0 2
73976: PUSH
73977: LD_INT 3
73979: PLUS
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: LIST
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: ST_TO_ADDR
// end ; end ;
73996: GO 73999
73998: POP
// result := list ;
73999: LD_ADDR_VAR 0 4
74003: PUSH
74004: LD_VAR 0 5
74008: ST_TO_ADDR
// end ;
74009: LD_VAR 0 4
74013: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74014: LD_INT 0
74016: PPUSH
74017: PPUSH
74018: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74019: LD_VAR 0 1
74023: NOT
74024: PUSH
74025: LD_VAR 0 2
74029: PUSH
74030: LD_INT 1
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: LD_INT 3
74038: PUSH
74039: LD_INT 4
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: IN
74048: NOT
74049: OR
74050: IFFALSE 74054
// exit ;
74052: GO 74146
// tmp := [ ] ;
74054: LD_ADDR_VAR 0 5
74058: PUSH
74059: EMPTY
74060: ST_TO_ADDR
// for i in units do
74061: LD_ADDR_VAR 0 4
74065: PUSH
74066: LD_VAR 0 1
74070: PUSH
74071: FOR_IN
74072: IFFALSE 74115
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74074: LD_ADDR_VAR 0 5
74078: PUSH
74079: LD_VAR 0 5
74083: PPUSH
74084: LD_VAR 0 5
74088: PUSH
74089: LD_INT 1
74091: PLUS
74092: PPUSH
74093: LD_VAR 0 4
74097: PPUSH
74098: LD_VAR 0 2
74102: PPUSH
74103: CALL_OW 259
74107: PPUSH
74108: CALL_OW 2
74112: ST_TO_ADDR
74113: GO 74071
74115: POP
74116: POP
// if not tmp then
74117: LD_VAR 0 5
74121: NOT
74122: IFFALSE 74126
// exit ;
74124: GO 74146
// result := SortListByListDesc ( units , tmp ) ;
74126: LD_ADDR_VAR 0 3
74130: PUSH
74131: LD_VAR 0 1
74135: PPUSH
74136: LD_VAR 0 5
74140: PPUSH
74141: CALL_OW 77
74145: ST_TO_ADDR
// end ;
74146: LD_VAR 0 3
74150: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74151: LD_INT 0
74153: PPUSH
74154: PPUSH
74155: PPUSH
// result := false ;
74156: LD_ADDR_VAR 0 3
74160: PUSH
74161: LD_INT 0
74163: ST_TO_ADDR
// x := GetX ( building ) ;
74164: LD_ADDR_VAR 0 4
74168: PUSH
74169: LD_VAR 0 2
74173: PPUSH
74174: CALL_OW 250
74178: ST_TO_ADDR
// y := GetY ( building ) ;
74179: LD_ADDR_VAR 0 5
74183: PUSH
74184: LD_VAR 0 2
74188: PPUSH
74189: CALL_OW 251
74193: ST_TO_ADDR
// if not building or not x or not y then
74194: LD_VAR 0 2
74198: NOT
74199: PUSH
74200: LD_VAR 0 4
74204: NOT
74205: OR
74206: PUSH
74207: LD_VAR 0 5
74211: NOT
74212: OR
74213: IFFALSE 74217
// exit ;
74215: GO 74309
// if GetTaskList ( unit ) then
74217: LD_VAR 0 1
74221: PPUSH
74222: CALL_OW 437
74226: IFFALSE 74309
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74228: LD_STRING e
74230: PUSH
74231: LD_VAR 0 1
74235: PPUSH
74236: CALL_OW 437
74240: PUSH
74241: LD_INT 1
74243: ARRAY
74244: PUSH
74245: LD_INT 1
74247: ARRAY
74248: EQUAL
74249: PUSH
74250: LD_VAR 0 4
74254: PUSH
74255: LD_VAR 0 1
74259: PPUSH
74260: CALL_OW 437
74264: PUSH
74265: LD_INT 1
74267: ARRAY
74268: PUSH
74269: LD_INT 2
74271: ARRAY
74272: EQUAL
74273: AND
74274: PUSH
74275: LD_VAR 0 5
74279: PUSH
74280: LD_VAR 0 1
74284: PPUSH
74285: CALL_OW 437
74289: PUSH
74290: LD_INT 1
74292: ARRAY
74293: PUSH
74294: LD_INT 3
74296: ARRAY
74297: EQUAL
74298: AND
74299: IFFALSE 74309
// result := true end ;
74301: LD_ADDR_VAR 0 3
74305: PUSH
74306: LD_INT 1
74308: ST_TO_ADDR
// end ;
74309: LD_VAR 0 3
74313: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74314: LD_INT 0
74316: PPUSH
// result := false ;
74317: LD_ADDR_VAR 0 4
74321: PUSH
74322: LD_INT 0
74324: ST_TO_ADDR
// if GetTaskList ( unit ) then
74325: LD_VAR 0 1
74329: PPUSH
74330: CALL_OW 437
74334: IFFALSE 74417
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74336: LD_STRING M
74338: PUSH
74339: LD_VAR 0 1
74343: PPUSH
74344: CALL_OW 437
74348: PUSH
74349: LD_INT 1
74351: ARRAY
74352: PUSH
74353: LD_INT 1
74355: ARRAY
74356: EQUAL
74357: PUSH
74358: LD_VAR 0 2
74362: PUSH
74363: LD_VAR 0 1
74367: PPUSH
74368: CALL_OW 437
74372: PUSH
74373: LD_INT 1
74375: ARRAY
74376: PUSH
74377: LD_INT 2
74379: ARRAY
74380: EQUAL
74381: AND
74382: PUSH
74383: LD_VAR 0 3
74387: PUSH
74388: LD_VAR 0 1
74392: PPUSH
74393: CALL_OW 437
74397: PUSH
74398: LD_INT 1
74400: ARRAY
74401: PUSH
74402: LD_INT 3
74404: ARRAY
74405: EQUAL
74406: AND
74407: IFFALSE 74417
// result := true ;
74409: LD_ADDR_VAR 0 4
74413: PUSH
74414: LD_INT 1
74416: ST_TO_ADDR
// end ; end ;
74417: LD_VAR 0 4
74421: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74422: LD_INT 0
74424: PPUSH
74425: PPUSH
74426: PPUSH
74427: PPUSH
// if not unit or not area then
74428: LD_VAR 0 1
74432: NOT
74433: PUSH
74434: LD_VAR 0 2
74438: NOT
74439: OR
74440: IFFALSE 74444
// exit ;
74442: GO 74608
// tmp := AreaToList ( area , i ) ;
74444: LD_ADDR_VAR 0 6
74448: PUSH
74449: LD_VAR 0 2
74453: PPUSH
74454: LD_VAR 0 5
74458: PPUSH
74459: CALL_OW 517
74463: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74464: LD_ADDR_VAR 0 5
74468: PUSH
74469: DOUBLE
74470: LD_INT 1
74472: DEC
74473: ST_TO_ADDR
74474: LD_VAR 0 6
74478: PUSH
74479: LD_INT 1
74481: ARRAY
74482: PUSH
74483: FOR_TO
74484: IFFALSE 74606
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74486: LD_ADDR_VAR 0 7
74490: PUSH
74491: LD_VAR 0 6
74495: PUSH
74496: LD_INT 1
74498: ARRAY
74499: PUSH
74500: LD_VAR 0 5
74504: ARRAY
74505: PUSH
74506: LD_VAR 0 6
74510: PUSH
74511: LD_INT 2
74513: ARRAY
74514: PUSH
74515: LD_VAR 0 5
74519: ARRAY
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74525: LD_VAR 0 7
74529: PUSH
74530: LD_INT 1
74532: ARRAY
74533: PPUSH
74534: LD_VAR 0 7
74538: PUSH
74539: LD_INT 2
74541: ARRAY
74542: PPUSH
74543: CALL_OW 428
74547: PUSH
74548: LD_INT 0
74550: EQUAL
74551: IFFALSE 74604
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 7
74562: PUSH
74563: LD_INT 1
74565: ARRAY
74566: PPUSH
74567: LD_VAR 0 7
74571: PUSH
74572: LD_INT 2
74574: ARRAY
74575: PPUSH
74576: LD_VAR 0 3
74580: PPUSH
74581: CALL_OW 48
// result := IsPlaced ( unit ) ;
74585: LD_ADDR_VAR 0 4
74589: PUSH
74590: LD_VAR 0 1
74594: PPUSH
74595: CALL_OW 305
74599: ST_TO_ADDR
// exit ;
74600: POP
74601: POP
74602: GO 74608
// end ; end ;
74604: GO 74483
74606: POP
74607: POP
// end ;
74608: LD_VAR 0 4
74612: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74613: LD_INT 0
74615: PPUSH
74616: PPUSH
74617: PPUSH
// if not side or side > 8 then
74618: LD_VAR 0 1
74622: NOT
74623: PUSH
74624: LD_VAR 0 1
74628: PUSH
74629: LD_INT 8
74631: GREATER
74632: OR
74633: IFFALSE 74637
// exit ;
74635: GO 74824
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74637: LD_ADDR_VAR 0 4
74641: PUSH
74642: LD_INT 22
74644: PUSH
74645: LD_VAR 0 1
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 21
74656: PUSH
74657: LD_INT 3
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PPUSH
74668: CALL_OW 69
74672: ST_TO_ADDR
// if not tmp then
74673: LD_VAR 0 4
74677: NOT
74678: IFFALSE 74682
// exit ;
74680: GO 74824
// enable_addtolog := true ;
74682: LD_ADDR_OWVAR 81
74686: PUSH
74687: LD_INT 1
74689: ST_TO_ADDR
// AddToLog ( [ ) ;
74690: LD_STRING [
74692: PPUSH
74693: CALL_OW 561
// for i in tmp do
74697: LD_ADDR_VAR 0 3
74701: PUSH
74702: LD_VAR 0 4
74706: PUSH
74707: FOR_IN
74708: IFFALSE 74815
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74710: LD_STRING [
74712: PUSH
74713: LD_VAR 0 3
74717: PPUSH
74718: CALL_OW 266
74722: STR
74723: PUSH
74724: LD_STRING , 
74726: STR
74727: PUSH
74728: LD_VAR 0 3
74732: PPUSH
74733: CALL_OW 250
74737: STR
74738: PUSH
74739: LD_STRING , 
74741: STR
74742: PUSH
74743: LD_VAR 0 3
74747: PPUSH
74748: CALL_OW 251
74752: STR
74753: PUSH
74754: LD_STRING , 
74756: STR
74757: PUSH
74758: LD_VAR 0 3
74762: PPUSH
74763: CALL_OW 254
74767: STR
74768: PUSH
74769: LD_STRING , 
74771: STR
74772: PUSH
74773: LD_VAR 0 3
74777: PPUSH
74778: LD_INT 1
74780: PPUSH
74781: CALL_OW 268
74785: STR
74786: PUSH
74787: LD_STRING , 
74789: STR
74790: PUSH
74791: LD_VAR 0 3
74795: PPUSH
74796: LD_INT 2
74798: PPUSH
74799: CALL_OW 268
74803: STR
74804: PUSH
74805: LD_STRING ],
74807: STR
74808: PPUSH
74809: CALL_OW 561
// end ;
74813: GO 74707
74815: POP
74816: POP
// AddToLog ( ]; ) ;
74817: LD_STRING ];
74819: PPUSH
74820: CALL_OW 561
// end ;
74824: LD_VAR 0 2
74828: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74829: LD_INT 0
74831: PPUSH
74832: PPUSH
74833: PPUSH
74834: PPUSH
74835: PPUSH
// if not area or not rate or not max then
74836: LD_VAR 0 1
74840: NOT
74841: PUSH
74842: LD_VAR 0 2
74846: NOT
74847: OR
74848: PUSH
74849: LD_VAR 0 4
74853: NOT
74854: OR
74855: IFFALSE 74859
// exit ;
74857: GO 75048
// while 1 do
74859: LD_INT 1
74861: IFFALSE 75048
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74863: LD_ADDR_VAR 0 9
74867: PUSH
74868: LD_VAR 0 1
74872: PPUSH
74873: LD_INT 1
74875: PPUSH
74876: CALL_OW 287
74880: PUSH
74881: LD_INT 10
74883: MUL
74884: ST_TO_ADDR
// r := rate / 10 ;
74885: LD_ADDR_VAR 0 7
74889: PUSH
74890: LD_VAR 0 2
74894: PUSH
74895: LD_INT 10
74897: DIVREAL
74898: ST_TO_ADDR
// time := 1 1$00 ;
74899: LD_ADDR_VAR 0 8
74903: PUSH
74904: LD_INT 2100
74906: ST_TO_ADDR
// if amount < min then
74907: LD_VAR 0 9
74911: PUSH
74912: LD_VAR 0 3
74916: LESS
74917: IFFALSE 74935
// r := r * 2 else
74919: LD_ADDR_VAR 0 7
74923: PUSH
74924: LD_VAR 0 7
74928: PUSH
74929: LD_INT 2
74931: MUL
74932: ST_TO_ADDR
74933: GO 74961
// if amount > max then
74935: LD_VAR 0 9
74939: PUSH
74940: LD_VAR 0 4
74944: GREATER
74945: IFFALSE 74961
// r := r / 2 ;
74947: LD_ADDR_VAR 0 7
74951: PUSH
74952: LD_VAR 0 7
74956: PUSH
74957: LD_INT 2
74959: DIVREAL
74960: ST_TO_ADDR
// time := time / r ;
74961: LD_ADDR_VAR 0 8
74965: PUSH
74966: LD_VAR 0 8
74970: PUSH
74971: LD_VAR 0 7
74975: DIVREAL
74976: ST_TO_ADDR
// if time < 0 then
74977: LD_VAR 0 8
74981: PUSH
74982: LD_INT 0
74984: LESS
74985: IFFALSE 75002
// time := time * - 1 ;
74987: LD_ADDR_VAR 0 8
74991: PUSH
74992: LD_VAR 0 8
74996: PUSH
74997: LD_INT 1
74999: NEG
75000: MUL
75001: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75002: LD_VAR 0 8
75006: PUSH
75007: LD_INT 35
75009: PPUSH
75010: LD_INT 875
75012: PPUSH
75013: CALL_OW 12
75017: PLUS
75018: PPUSH
75019: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75023: LD_INT 1
75025: PPUSH
75026: LD_INT 5
75028: PPUSH
75029: CALL_OW 12
75033: PPUSH
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_INT 1
75041: PPUSH
75042: CALL_OW 55
// end ;
75046: GO 74859
// end ;
75048: LD_VAR 0 5
75052: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75053: LD_INT 0
75055: PPUSH
75056: PPUSH
75057: PPUSH
75058: PPUSH
75059: PPUSH
75060: PPUSH
75061: PPUSH
75062: PPUSH
// if not turrets or not factories then
75063: LD_VAR 0 1
75067: NOT
75068: PUSH
75069: LD_VAR 0 2
75073: NOT
75074: OR
75075: IFFALSE 75079
// exit ;
75077: GO 75386
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75079: LD_ADDR_VAR 0 10
75083: PUSH
75084: LD_INT 5
75086: PUSH
75087: LD_INT 6
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 2
75096: PUSH
75097: LD_INT 4
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 3
75106: PUSH
75107: LD_INT 5
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 24
75121: PUSH
75122: LD_INT 25
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 23
75131: PUSH
75132: LD_INT 27
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 42
75145: PUSH
75146: LD_INT 43
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 44
75155: PUSH
75156: LD_INT 46
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 45
75165: PUSH
75166: LD_INT 47
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: ST_TO_ADDR
// result := [ ] ;
75183: LD_ADDR_VAR 0 3
75187: PUSH
75188: EMPTY
75189: ST_TO_ADDR
// for i in turrets do
75190: LD_ADDR_VAR 0 4
75194: PUSH
75195: LD_VAR 0 1
75199: PUSH
75200: FOR_IN
75201: IFFALSE 75384
// begin nat := GetNation ( i ) ;
75203: LD_ADDR_VAR 0 7
75207: PUSH
75208: LD_VAR 0 4
75212: PPUSH
75213: CALL_OW 248
75217: ST_TO_ADDR
// weapon := 0 ;
75218: LD_ADDR_VAR 0 8
75222: PUSH
75223: LD_INT 0
75225: ST_TO_ADDR
// if not nat then
75226: LD_VAR 0 7
75230: NOT
75231: IFFALSE 75235
// continue ;
75233: GO 75200
// for j in list [ nat ] do
75235: LD_ADDR_VAR 0 5
75239: PUSH
75240: LD_VAR 0 10
75244: PUSH
75245: LD_VAR 0 7
75249: ARRAY
75250: PUSH
75251: FOR_IN
75252: IFFALSE 75293
// if GetBWeapon ( i ) = j [ 1 ] then
75254: LD_VAR 0 4
75258: PPUSH
75259: CALL_OW 269
75263: PUSH
75264: LD_VAR 0 5
75268: PUSH
75269: LD_INT 1
75271: ARRAY
75272: EQUAL
75273: IFFALSE 75291
// begin weapon := j [ 2 ] ;
75275: LD_ADDR_VAR 0 8
75279: PUSH
75280: LD_VAR 0 5
75284: PUSH
75285: LD_INT 2
75287: ARRAY
75288: ST_TO_ADDR
// break ;
75289: GO 75293
// end ;
75291: GO 75251
75293: POP
75294: POP
// if not weapon then
75295: LD_VAR 0 8
75299: NOT
75300: IFFALSE 75304
// continue ;
75302: GO 75200
// for k in factories do
75304: LD_ADDR_VAR 0 6
75308: PUSH
75309: LD_VAR 0 2
75313: PUSH
75314: FOR_IN
75315: IFFALSE 75380
// begin weapons := AvailableWeaponList ( k ) ;
75317: LD_ADDR_VAR 0 9
75321: PUSH
75322: LD_VAR 0 6
75326: PPUSH
75327: CALL_OW 478
75331: ST_TO_ADDR
// if not weapons then
75332: LD_VAR 0 9
75336: NOT
75337: IFFALSE 75341
// continue ;
75339: GO 75314
// if weapon in weapons then
75341: LD_VAR 0 8
75345: PUSH
75346: LD_VAR 0 9
75350: IN
75351: IFFALSE 75378
// begin result := [ i , weapon ] ;
75353: LD_ADDR_VAR 0 3
75357: PUSH
75358: LD_VAR 0 4
75362: PUSH
75363: LD_VAR 0 8
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: ST_TO_ADDR
// exit ;
75372: POP
75373: POP
75374: POP
75375: POP
75376: GO 75386
// end ; end ;
75378: GO 75314
75380: POP
75381: POP
// end ;
75382: GO 75200
75384: POP
75385: POP
// end ;
75386: LD_VAR 0 3
75390: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75391: LD_INT 0
75393: PPUSH
// if not side or side > 8 then
75394: LD_VAR 0 3
75398: NOT
75399: PUSH
75400: LD_VAR 0 3
75404: PUSH
75405: LD_INT 8
75407: GREATER
75408: OR
75409: IFFALSE 75413
// exit ;
75411: GO 75472
// if not range then
75413: LD_VAR 0 4
75417: NOT
75418: IFFALSE 75429
// range := - 12 ;
75420: LD_ADDR_VAR 0 4
75424: PUSH
75425: LD_INT 12
75427: NEG
75428: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75429: LD_VAR 0 1
75433: PPUSH
75434: LD_VAR 0 2
75438: PPUSH
75439: LD_VAR 0 3
75443: PPUSH
75444: LD_VAR 0 4
75448: PPUSH
75449: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75453: LD_VAR 0 1
75457: PPUSH
75458: LD_VAR 0 2
75462: PPUSH
75463: LD_VAR 0 3
75467: PPUSH
75468: CALL_OW 331
// end ;
75472: LD_VAR 0 5
75476: RET
// export function Video ( mode ) ; begin
75477: LD_INT 0
75479: PPUSH
// ingame_video = mode ;
75480: LD_ADDR_OWVAR 52
75484: PUSH
75485: LD_VAR 0 1
75489: ST_TO_ADDR
// interface_hidden = mode ;
75490: LD_ADDR_OWVAR 54
75494: PUSH
75495: LD_VAR 0 1
75499: ST_TO_ADDR
// end ;
75500: LD_VAR 0 2
75504: RET
// export function Join ( array , element ) ; begin
75505: LD_INT 0
75507: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75508: LD_ADDR_VAR 0 3
75512: PUSH
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 1
75522: PUSH
75523: LD_INT 1
75525: PLUS
75526: PPUSH
75527: LD_VAR 0 2
75531: PPUSH
75532: CALL_OW 1
75536: ST_TO_ADDR
// end ;
75537: LD_VAR 0 3
75541: RET
// export function JoinUnion ( array , element ) ; begin
75542: LD_INT 0
75544: PPUSH
// result := array union element ;
75545: LD_ADDR_VAR 0 3
75549: PUSH
75550: LD_VAR 0 1
75554: PUSH
75555: LD_VAR 0 2
75559: UNION
75560: ST_TO_ADDR
// end ;
75561: LD_VAR 0 3
75565: RET
// export function GetBehemoths ( side ) ; begin
75566: LD_INT 0
75568: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75569: LD_ADDR_VAR 0 2
75573: PUSH
75574: LD_INT 22
75576: PUSH
75577: LD_VAR 0 1
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 31
75588: PUSH
75589: LD_INT 25
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PPUSH
75600: CALL_OW 69
75604: ST_TO_ADDR
// end ;
75605: LD_VAR 0 2
75609: RET
// export function Shuffle ( array ) ; var i , index ; begin
75610: LD_INT 0
75612: PPUSH
75613: PPUSH
75614: PPUSH
// result := [ ] ;
75615: LD_ADDR_VAR 0 2
75619: PUSH
75620: EMPTY
75621: ST_TO_ADDR
// if not array then
75622: LD_VAR 0 1
75626: NOT
75627: IFFALSE 75631
// exit ;
75629: GO 75730
// Randomize ;
75631: CALL_OW 10
// for i = array downto 1 do
75635: LD_ADDR_VAR 0 3
75639: PUSH
75640: DOUBLE
75641: LD_VAR 0 1
75645: INC
75646: ST_TO_ADDR
75647: LD_INT 1
75649: PUSH
75650: FOR_DOWNTO
75651: IFFALSE 75728
// begin index := rand ( 1 , array ) ;
75653: LD_ADDR_VAR 0 4
75657: PUSH
75658: LD_INT 1
75660: PPUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: CALL_OW 12
75670: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75671: LD_ADDR_VAR 0 2
75675: PUSH
75676: LD_VAR 0 2
75680: PPUSH
75681: LD_VAR 0 2
75685: PUSH
75686: LD_INT 1
75688: PLUS
75689: PPUSH
75690: LD_VAR 0 1
75694: PUSH
75695: LD_VAR 0 4
75699: ARRAY
75700: PPUSH
75701: CALL_OW 2
75705: ST_TO_ADDR
// array := Delete ( array , index ) ;
75706: LD_ADDR_VAR 0 1
75710: PUSH
75711: LD_VAR 0 1
75715: PPUSH
75716: LD_VAR 0 4
75720: PPUSH
75721: CALL_OW 3
75725: ST_TO_ADDR
// end ;
75726: GO 75650
75728: POP
75729: POP
// end ;
75730: LD_VAR 0 2
75734: RET
// export function GetBaseMaterials ( base ) ; begin
75735: LD_INT 0
75737: PPUSH
// result := [ 0 , 0 , 0 ] ;
75738: LD_ADDR_VAR 0 2
75742: PUSH
75743: LD_INT 0
75745: PUSH
75746: LD_INT 0
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: LIST
75756: ST_TO_ADDR
// if not base then
75757: LD_VAR 0 1
75761: NOT
75762: IFFALSE 75766
// exit ;
75764: GO 75815
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75766: LD_ADDR_VAR 0 2
75770: PUSH
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_INT 1
75778: PPUSH
75779: CALL_OW 275
75783: PUSH
75784: LD_VAR 0 1
75788: PPUSH
75789: LD_INT 2
75791: PPUSH
75792: CALL_OW 275
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: LD_INT 3
75804: PPUSH
75805: CALL_OW 275
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: LIST
75814: ST_TO_ADDR
// end ;
75815: LD_VAR 0 2
75819: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75820: LD_INT 0
75822: PPUSH
75823: PPUSH
// result := array ;
75824: LD_ADDR_VAR 0 3
75828: PUSH
75829: LD_VAR 0 1
75833: ST_TO_ADDR
// if size > 0 then
75834: LD_VAR 0 2
75838: PUSH
75839: LD_INT 0
75841: GREATER
75842: IFFALSE 75888
// for i := array downto size do
75844: LD_ADDR_VAR 0 4
75848: PUSH
75849: DOUBLE
75850: LD_VAR 0 1
75854: INC
75855: ST_TO_ADDR
75856: LD_VAR 0 2
75860: PUSH
75861: FOR_DOWNTO
75862: IFFALSE 75886
// result := Delete ( result , result ) ;
75864: LD_ADDR_VAR 0 3
75868: PUSH
75869: LD_VAR 0 3
75873: PPUSH
75874: LD_VAR 0 3
75878: PPUSH
75879: CALL_OW 3
75883: ST_TO_ADDR
75884: GO 75861
75886: POP
75887: POP
// end ;
75888: LD_VAR 0 3
75892: RET
// export function ComExit ( unit ) ; var tmp ; begin
75893: LD_INT 0
75895: PPUSH
75896: PPUSH
// if not IsInUnit ( unit ) then
75897: LD_VAR 0 1
75901: PPUSH
75902: CALL_OW 310
75906: NOT
75907: IFFALSE 75911
// exit ;
75909: GO 75971
// tmp := IsInUnit ( unit ) ;
75911: LD_ADDR_VAR 0 3
75915: PUSH
75916: LD_VAR 0 1
75920: PPUSH
75921: CALL_OW 310
75925: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75926: LD_VAR 0 3
75930: PPUSH
75931: CALL_OW 247
75935: PUSH
75936: LD_INT 2
75938: EQUAL
75939: IFFALSE 75952
// ComExitVehicle ( unit ) else
75941: LD_VAR 0 1
75945: PPUSH
75946: CALL_OW 121
75950: GO 75961
// ComExitBuilding ( unit ) ;
75952: LD_VAR 0 1
75956: PPUSH
75957: CALL_OW 122
// result := tmp ;
75961: LD_ADDR_VAR 0 2
75965: PUSH
75966: LD_VAR 0 3
75970: ST_TO_ADDR
// end ;
75971: LD_VAR 0 2
75975: RET
// export function ComExitAll ( units ) ; var i ; begin
75976: LD_INT 0
75978: PPUSH
75979: PPUSH
// if not units then
75980: LD_VAR 0 1
75984: NOT
75985: IFFALSE 75989
// exit ;
75987: GO 76015
// for i in units do
75989: LD_ADDR_VAR 0 3
75993: PUSH
75994: LD_VAR 0 1
75998: PUSH
75999: FOR_IN
76000: IFFALSE 76013
// ComExit ( i ) ;
76002: LD_VAR 0 3
76006: PPUSH
76007: CALL 75893 0 1
76011: GO 75999
76013: POP
76014: POP
// end ;
76015: LD_VAR 0 2
76019: RET
// export function ResetHc ; begin
76020: LD_INT 0
76022: PPUSH
// InitHc ;
76023: CALL_OW 19
// hc_importance := 0 ;
76027: LD_ADDR_OWVAR 32
76031: PUSH
76032: LD_INT 0
76034: ST_TO_ADDR
// end ;
76035: LD_VAR 0 1
76039: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76040: LD_INT 0
76042: PPUSH
76043: PPUSH
76044: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76045: LD_ADDR_VAR 0 6
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: LD_VAR 0 3
76059: PLUS
76060: PUSH
76061: LD_INT 2
76063: DIV
76064: ST_TO_ADDR
// if _x < 0 then
76065: LD_VAR 0 6
76069: PUSH
76070: LD_INT 0
76072: LESS
76073: IFFALSE 76090
// _x := _x * - 1 ;
76075: LD_ADDR_VAR 0 6
76079: PUSH
76080: LD_VAR 0 6
76084: PUSH
76085: LD_INT 1
76087: NEG
76088: MUL
76089: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76090: LD_ADDR_VAR 0 7
76094: PUSH
76095: LD_VAR 0 2
76099: PUSH
76100: LD_VAR 0 4
76104: PLUS
76105: PUSH
76106: LD_INT 2
76108: DIV
76109: ST_TO_ADDR
// if _y < 0 then
76110: LD_VAR 0 7
76114: PUSH
76115: LD_INT 0
76117: LESS
76118: IFFALSE 76135
// _y := _y * - 1 ;
76120: LD_ADDR_VAR 0 7
76124: PUSH
76125: LD_VAR 0 7
76129: PUSH
76130: LD_INT 1
76132: NEG
76133: MUL
76134: ST_TO_ADDR
// result := [ _x , _y ] ;
76135: LD_ADDR_VAR 0 5
76139: PUSH
76140: LD_VAR 0 6
76144: PUSH
76145: LD_VAR 0 7
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// end ;
76154: LD_VAR 0 5
76158: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76159: LD_INT 0
76161: PPUSH
76162: PPUSH
76163: PPUSH
76164: PPUSH
// task := GetTaskList ( unit ) ;
76165: LD_ADDR_VAR 0 7
76169: PUSH
76170: LD_VAR 0 1
76174: PPUSH
76175: CALL_OW 437
76179: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76180: LD_VAR 0 7
76184: NOT
76185: PUSH
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 2
76195: PPUSH
76196: CALL_OW 308
76200: NOT
76201: AND
76202: IFFALSE 76206
// exit ;
76204: GO 76324
// if IsInArea ( unit , area ) then
76206: LD_VAR 0 1
76210: PPUSH
76211: LD_VAR 0 2
76215: PPUSH
76216: CALL_OW 308
76220: IFFALSE 76238
// begin ComMoveToArea ( unit , goAway ) ;
76222: LD_VAR 0 1
76226: PPUSH
76227: LD_VAR 0 3
76231: PPUSH
76232: CALL_OW 113
// exit ;
76236: GO 76324
// end ; if task [ 1 ] [ 1 ] <> M then
76238: LD_VAR 0 7
76242: PUSH
76243: LD_INT 1
76245: ARRAY
76246: PUSH
76247: LD_INT 1
76249: ARRAY
76250: PUSH
76251: LD_STRING M
76253: NONEQUAL
76254: IFFALSE 76258
// exit ;
76256: GO 76324
// x := task [ 1 ] [ 2 ] ;
76258: LD_ADDR_VAR 0 5
76262: PUSH
76263: LD_VAR 0 7
76267: PUSH
76268: LD_INT 1
76270: ARRAY
76271: PUSH
76272: LD_INT 2
76274: ARRAY
76275: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76276: LD_ADDR_VAR 0 6
76280: PUSH
76281: LD_VAR 0 7
76285: PUSH
76286: LD_INT 1
76288: ARRAY
76289: PUSH
76290: LD_INT 3
76292: ARRAY
76293: ST_TO_ADDR
// if InArea ( x , y , area ) then
76294: LD_VAR 0 5
76298: PPUSH
76299: LD_VAR 0 6
76303: PPUSH
76304: LD_VAR 0 2
76308: PPUSH
76309: CALL_OW 309
76313: IFFALSE 76324
// ComStop ( unit ) ;
76315: LD_VAR 0 1
76319: PPUSH
76320: CALL_OW 141
// end ;
76324: LD_VAR 0 4
76328: RET
// export function Abs ( value ) ; begin
76329: LD_INT 0
76331: PPUSH
// result := value ;
76332: LD_ADDR_VAR 0 2
76336: PUSH
76337: LD_VAR 0 1
76341: ST_TO_ADDR
// if value < 0 then
76342: LD_VAR 0 1
76346: PUSH
76347: LD_INT 0
76349: LESS
76350: IFFALSE 76367
// result := value * - 1 ;
76352: LD_ADDR_VAR 0 2
76356: PUSH
76357: LD_VAR 0 1
76361: PUSH
76362: LD_INT 1
76364: NEG
76365: MUL
76366: ST_TO_ADDR
// end ;
76367: LD_VAR 0 2
76371: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76372: LD_INT 0
76374: PPUSH
76375: PPUSH
76376: PPUSH
76377: PPUSH
76378: PPUSH
76379: PPUSH
76380: PPUSH
76381: PPUSH
// if not unit or not building then
76382: LD_VAR 0 1
76386: NOT
76387: PUSH
76388: LD_VAR 0 2
76392: NOT
76393: OR
76394: IFFALSE 76398
// exit ;
76396: GO 76624
// x := GetX ( building ) ;
76398: LD_ADDR_VAR 0 4
76402: PUSH
76403: LD_VAR 0 2
76407: PPUSH
76408: CALL_OW 250
76412: ST_TO_ADDR
// y := GetY ( building ) ;
76413: LD_ADDR_VAR 0 6
76417: PUSH
76418: LD_VAR 0 2
76422: PPUSH
76423: CALL_OW 251
76427: ST_TO_ADDR
// d := GetDir ( building ) ;
76428: LD_ADDR_VAR 0 8
76432: PUSH
76433: LD_VAR 0 2
76437: PPUSH
76438: CALL_OW 254
76442: ST_TO_ADDR
// r := 4 ;
76443: LD_ADDR_VAR 0 9
76447: PUSH
76448: LD_INT 4
76450: ST_TO_ADDR
// for i := 1 to 5 do
76451: LD_ADDR_VAR 0 10
76455: PUSH
76456: DOUBLE
76457: LD_INT 1
76459: DEC
76460: ST_TO_ADDR
76461: LD_INT 5
76463: PUSH
76464: FOR_TO
76465: IFFALSE 76622
// begin _x := ShiftX ( x , d , r + i ) ;
76467: LD_ADDR_VAR 0 5
76471: PUSH
76472: LD_VAR 0 4
76476: PPUSH
76477: LD_VAR 0 8
76481: PPUSH
76482: LD_VAR 0 9
76486: PUSH
76487: LD_VAR 0 10
76491: PLUS
76492: PPUSH
76493: CALL_OW 272
76497: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76498: LD_ADDR_VAR 0 7
76502: PUSH
76503: LD_VAR 0 6
76507: PPUSH
76508: LD_VAR 0 8
76512: PPUSH
76513: LD_VAR 0 9
76517: PUSH
76518: LD_VAR 0 10
76522: PLUS
76523: PPUSH
76524: CALL_OW 273
76528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76529: LD_VAR 0 5
76533: PPUSH
76534: LD_VAR 0 7
76538: PPUSH
76539: CALL_OW 488
76543: PUSH
76544: LD_VAR 0 5
76548: PPUSH
76549: LD_VAR 0 7
76553: PPUSH
76554: CALL_OW 428
76558: PPUSH
76559: CALL_OW 247
76563: PUSH
76564: LD_INT 3
76566: PUSH
76567: LD_INT 2
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: IN
76574: NOT
76575: AND
76576: IFFALSE 76620
// begin ComMoveXY ( unit , _x , _y ) ;
76578: LD_VAR 0 1
76582: PPUSH
76583: LD_VAR 0 5
76587: PPUSH
76588: LD_VAR 0 7
76592: PPUSH
76593: CALL_OW 111
// result := [ _x , _y ] ;
76597: LD_ADDR_VAR 0 3
76601: PUSH
76602: LD_VAR 0 5
76606: PUSH
76607: LD_VAR 0 7
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: ST_TO_ADDR
// exit ;
76616: POP
76617: POP
76618: GO 76624
// end ; end ;
76620: GO 76464
76622: POP
76623: POP
// end ;
76624: LD_VAR 0 3
76628: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76629: LD_INT 0
76631: PPUSH
76632: PPUSH
76633: PPUSH
// result := 0 ;
76634: LD_ADDR_VAR 0 3
76638: PUSH
76639: LD_INT 0
76641: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76642: LD_VAR 0 1
76646: PUSH
76647: LD_INT 0
76649: LESS
76650: PUSH
76651: LD_VAR 0 1
76655: PUSH
76656: LD_INT 8
76658: GREATER
76659: OR
76660: PUSH
76661: LD_VAR 0 2
76665: PUSH
76666: LD_INT 0
76668: LESS
76669: OR
76670: PUSH
76671: LD_VAR 0 2
76675: PUSH
76676: LD_INT 8
76678: GREATER
76679: OR
76680: IFFALSE 76684
// exit ;
76682: GO 76759
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76684: LD_ADDR_VAR 0 4
76688: PUSH
76689: LD_INT 22
76691: PUSH
76692: LD_VAR 0 2
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: PPUSH
76701: CALL_OW 69
76705: PUSH
76706: FOR_IN
76707: IFFALSE 76757
// begin un := UnitShoot ( i ) ;
76709: LD_ADDR_VAR 0 5
76713: PUSH
76714: LD_VAR 0 4
76718: PPUSH
76719: CALL_OW 504
76723: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76724: LD_VAR 0 5
76728: PPUSH
76729: CALL_OW 255
76733: PUSH
76734: LD_VAR 0 1
76738: EQUAL
76739: IFFALSE 76755
// begin result := un ;
76741: LD_ADDR_VAR 0 3
76745: PUSH
76746: LD_VAR 0 5
76750: ST_TO_ADDR
// exit ;
76751: POP
76752: POP
76753: GO 76759
// end ; end ;
76755: GO 76706
76757: POP
76758: POP
// end ;
76759: LD_VAR 0 3
76763: RET
// export function GetCargoBay ( units ) ; begin
76764: LD_INT 0
76766: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76767: LD_ADDR_VAR 0 2
76771: PUSH
76772: LD_VAR 0 1
76776: PPUSH
76777: LD_INT 2
76779: PUSH
76780: LD_INT 34
76782: PUSH
76783: LD_INT 12
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 34
76792: PUSH
76793: LD_INT 51
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 34
76802: PUSH
76803: LD_INT 32
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 34
76812: PUSH
76813: LD_EXP 49
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: PPUSH
76829: CALL_OW 72
76833: ST_TO_ADDR
// end ;
76834: LD_VAR 0 2
76838: RET
// export function Negate ( value ) ; begin
76839: LD_INT 0
76841: PPUSH
// result := not value ;
76842: LD_ADDR_VAR 0 2
76846: PUSH
76847: LD_VAR 0 1
76851: NOT
76852: ST_TO_ADDR
// end ;
76853: LD_VAR 0 2
76857: RET
// export function Inc ( value ) ; begin
76858: LD_INT 0
76860: PPUSH
// result := value + 1 ;
76861: LD_ADDR_VAR 0 2
76865: PUSH
76866: LD_VAR 0 1
76870: PUSH
76871: LD_INT 1
76873: PLUS
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 2
76879: RET
// export function Dec ( value ) ; begin
76880: LD_INT 0
76882: PPUSH
// result := value - 1 ;
76883: LD_ADDR_VAR 0 2
76887: PUSH
76888: LD_VAR 0 1
76892: PUSH
76893: LD_INT 1
76895: MINUS
76896: ST_TO_ADDR
// end ;
76897: LD_VAR 0 2
76901: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76902: LD_INT 0
76904: PPUSH
76905: PPUSH
76906: PPUSH
76907: PPUSH
76908: PPUSH
76909: PPUSH
76910: PPUSH
76911: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76912: LD_VAR 0 1
76916: PPUSH
76917: LD_VAR 0 2
76921: PPUSH
76922: CALL_OW 488
76926: NOT
76927: PUSH
76928: LD_VAR 0 3
76932: PPUSH
76933: LD_VAR 0 4
76937: PPUSH
76938: CALL_OW 488
76942: NOT
76943: OR
76944: IFFALSE 76957
// begin result := - 1 ;
76946: LD_ADDR_VAR 0 5
76950: PUSH
76951: LD_INT 1
76953: NEG
76954: ST_TO_ADDR
// exit ;
76955: GO 77192
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76957: LD_ADDR_VAR 0 12
76961: PUSH
76962: LD_VAR 0 1
76966: PPUSH
76967: LD_VAR 0 2
76971: PPUSH
76972: LD_VAR 0 3
76976: PPUSH
76977: LD_VAR 0 4
76981: PPUSH
76982: CALL 76040 0 4
76986: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76987: LD_ADDR_VAR 0 11
76991: PUSH
76992: LD_VAR 0 1
76996: PPUSH
76997: LD_VAR 0 2
77001: PPUSH
77002: LD_VAR 0 12
77006: PUSH
77007: LD_INT 1
77009: ARRAY
77010: PPUSH
77011: LD_VAR 0 12
77015: PUSH
77016: LD_INT 2
77018: ARRAY
77019: PPUSH
77020: CALL_OW 298
77024: ST_TO_ADDR
// distance := 9999 ;
77025: LD_ADDR_VAR 0 10
77029: PUSH
77030: LD_INT 9999
77032: ST_TO_ADDR
// for i := 0 to 5 do
77033: LD_ADDR_VAR 0 6
77037: PUSH
77038: DOUBLE
77039: LD_INT 0
77041: DEC
77042: ST_TO_ADDR
77043: LD_INT 5
77045: PUSH
77046: FOR_TO
77047: IFFALSE 77190
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77049: LD_ADDR_VAR 0 7
77053: PUSH
77054: LD_VAR 0 1
77058: PPUSH
77059: LD_VAR 0 6
77063: PPUSH
77064: LD_VAR 0 11
77068: PPUSH
77069: CALL_OW 272
77073: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77074: LD_ADDR_VAR 0 8
77078: PUSH
77079: LD_VAR 0 2
77083: PPUSH
77084: LD_VAR 0 6
77088: PPUSH
77089: LD_VAR 0 11
77093: PPUSH
77094: CALL_OW 273
77098: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77099: LD_VAR 0 7
77103: PPUSH
77104: LD_VAR 0 8
77108: PPUSH
77109: CALL_OW 488
77113: NOT
77114: IFFALSE 77118
// continue ;
77116: GO 77046
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77118: LD_ADDR_VAR 0 9
77122: PUSH
77123: LD_VAR 0 12
77127: PUSH
77128: LD_INT 1
77130: ARRAY
77131: PPUSH
77132: LD_VAR 0 12
77136: PUSH
77137: LD_INT 2
77139: ARRAY
77140: PPUSH
77141: LD_VAR 0 7
77145: PPUSH
77146: LD_VAR 0 8
77150: PPUSH
77151: CALL_OW 298
77155: ST_TO_ADDR
// if tmp < distance then
77156: LD_VAR 0 9
77160: PUSH
77161: LD_VAR 0 10
77165: LESS
77166: IFFALSE 77188
// begin result := i ;
77168: LD_ADDR_VAR 0 5
77172: PUSH
77173: LD_VAR 0 6
77177: ST_TO_ADDR
// distance := tmp ;
77178: LD_ADDR_VAR 0 10
77182: PUSH
77183: LD_VAR 0 9
77187: ST_TO_ADDR
// end ; end ;
77188: GO 77046
77190: POP
77191: POP
// end ;
77192: LD_VAR 0 5
77196: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77197: LD_INT 0
77199: PPUSH
77200: PPUSH
// if not driver or not IsInUnit ( driver ) then
77201: LD_VAR 0 1
77205: NOT
77206: PUSH
77207: LD_VAR 0 1
77211: PPUSH
77212: CALL_OW 310
77216: NOT
77217: OR
77218: IFFALSE 77222
// exit ;
77220: GO 77312
// vehicle := IsInUnit ( driver ) ;
77222: LD_ADDR_VAR 0 3
77226: PUSH
77227: LD_VAR 0 1
77231: PPUSH
77232: CALL_OW 310
77236: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77237: LD_VAR 0 1
77241: PPUSH
77242: LD_STRING \
77244: PUSH
77245: LD_INT 0
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: LD_INT 0
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: LD_INT 0
77259: PUSH
77260: LD_INT 0
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: PUSH
77272: LD_STRING E
77274: PUSH
77275: LD_INT 0
77277: PUSH
77278: LD_INT 0
77280: PUSH
77281: LD_VAR 0 3
77285: PUSH
77286: LD_INT 0
77288: PUSH
77289: LD_INT 0
77291: PUSH
77292: LD_INT 0
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PPUSH
77308: CALL_OW 446
// end ;
77312: LD_VAR 0 2
77316: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77317: LD_INT 0
77319: PPUSH
77320: PPUSH
// if not driver or not IsInUnit ( driver ) then
77321: LD_VAR 0 1
77325: NOT
77326: PUSH
77327: LD_VAR 0 1
77331: PPUSH
77332: CALL_OW 310
77336: NOT
77337: OR
77338: IFFALSE 77342
// exit ;
77340: GO 77432
// vehicle := IsInUnit ( driver ) ;
77342: LD_ADDR_VAR 0 3
77346: PUSH
77347: LD_VAR 0 1
77351: PPUSH
77352: CALL_OW 310
77356: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77357: LD_VAR 0 1
77361: PPUSH
77362: LD_STRING \
77364: PUSH
77365: LD_INT 0
77367: PUSH
77368: LD_INT 0
77370: PUSH
77371: LD_INT 0
77373: PUSH
77374: LD_INT 0
77376: PUSH
77377: LD_INT 0
77379: PUSH
77380: LD_INT 0
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: LD_STRING E
77394: PUSH
77395: LD_INT 0
77397: PUSH
77398: LD_INT 0
77400: PUSH
77401: LD_VAR 0 3
77405: PUSH
77406: LD_INT 0
77408: PUSH
77409: LD_INT 0
77411: PUSH
77412: LD_INT 0
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PPUSH
77428: CALL_OW 447
// end ;
77432: LD_VAR 0 2
77436: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77437: LD_INT 0
77439: PPUSH
77440: PPUSH
77441: PPUSH
// tmp := [ ] ;
77442: LD_ADDR_VAR 0 5
77446: PUSH
77447: EMPTY
77448: ST_TO_ADDR
// for i in units do
77449: LD_ADDR_VAR 0 4
77453: PUSH
77454: LD_VAR 0 1
77458: PUSH
77459: FOR_IN
77460: IFFALSE 77498
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77462: LD_ADDR_VAR 0 5
77466: PUSH
77467: LD_VAR 0 5
77471: PPUSH
77472: LD_VAR 0 5
77476: PUSH
77477: LD_INT 1
77479: PLUS
77480: PPUSH
77481: LD_VAR 0 4
77485: PPUSH
77486: CALL_OW 256
77490: PPUSH
77491: CALL_OW 2
77495: ST_TO_ADDR
77496: GO 77459
77498: POP
77499: POP
// if not tmp then
77500: LD_VAR 0 5
77504: NOT
77505: IFFALSE 77509
// exit ;
77507: GO 77557
// if asc then
77509: LD_VAR 0 2
77513: IFFALSE 77537
// result := SortListByListAsc ( units , tmp ) else
77515: LD_ADDR_VAR 0 3
77519: PUSH
77520: LD_VAR 0 1
77524: PPUSH
77525: LD_VAR 0 5
77529: PPUSH
77530: CALL_OW 76
77534: ST_TO_ADDR
77535: GO 77557
// result := SortListByListDesc ( units , tmp ) ;
77537: LD_ADDR_VAR 0 3
77541: PUSH
77542: LD_VAR 0 1
77546: PPUSH
77547: LD_VAR 0 5
77551: PPUSH
77552: CALL_OW 77
77556: ST_TO_ADDR
// end ;
77557: LD_VAR 0 3
77561: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77562: LD_INT 0
77564: PPUSH
77565: PPUSH
// task := GetTaskList ( mech ) ;
77566: LD_ADDR_VAR 0 4
77570: PUSH
77571: LD_VAR 0 1
77575: PPUSH
77576: CALL_OW 437
77580: ST_TO_ADDR
// if not task then
77581: LD_VAR 0 4
77585: NOT
77586: IFFALSE 77590
// exit ;
77588: GO 77632
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77590: LD_ADDR_VAR 0 3
77594: PUSH
77595: LD_VAR 0 4
77599: PUSH
77600: LD_INT 1
77602: ARRAY
77603: PUSH
77604: LD_INT 1
77606: ARRAY
77607: PUSH
77608: LD_STRING r
77610: EQUAL
77611: PUSH
77612: LD_VAR 0 4
77616: PUSH
77617: LD_INT 1
77619: ARRAY
77620: PUSH
77621: LD_INT 4
77623: ARRAY
77624: PUSH
77625: LD_VAR 0 2
77629: EQUAL
77630: AND
77631: ST_TO_ADDR
// end ;
77632: LD_VAR 0 3
77636: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77637: LD_INT 0
77639: PPUSH
// SetDir ( unit , d ) ;
77640: LD_VAR 0 1
77644: PPUSH
77645: LD_VAR 0 4
77649: PPUSH
77650: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77654: LD_VAR 0 1
77658: PPUSH
77659: LD_VAR 0 2
77663: PPUSH
77664: LD_VAR 0 3
77668: PPUSH
77669: LD_VAR 0 5
77673: PPUSH
77674: CALL_OW 48
// end ;
77678: LD_VAR 0 6
77682: RET
// export function ToNaturalNumber ( number ) ; begin
77683: LD_INT 0
77685: PPUSH
// result := number div 1 ;
77686: LD_ADDR_VAR 0 2
77690: PUSH
77691: LD_VAR 0 1
77695: PUSH
77696: LD_INT 1
77698: DIV
77699: ST_TO_ADDR
// if number < 0 then
77700: LD_VAR 0 1
77704: PUSH
77705: LD_INT 0
77707: LESS
77708: IFFALSE 77718
// result := 0 ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_INT 0
77717: ST_TO_ADDR
// end ;
77718: LD_VAR 0 2
77722: RET
// export function SortByClass ( units , class ) ; var un ; begin
77723: LD_INT 0
77725: PPUSH
77726: PPUSH
// if not units or not class then
77727: LD_VAR 0 1
77731: NOT
77732: PUSH
77733: LD_VAR 0 2
77737: NOT
77738: OR
77739: IFFALSE 77743
// exit ;
77741: GO 77838
// result := [ ] ;
77743: LD_ADDR_VAR 0 3
77747: PUSH
77748: EMPTY
77749: ST_TO_ADDR
// for un in units do
77750: LD_ADDR_VAR 0 4
77754: PUSH
77755: LD_VAR 0 1
77759: PUSH
77760: FOR_IN
77761: IFFALSE 77836
// if GetClass ( un ) = class then
77763: LD_VAR 0 4
77767: PPUSH
77768: CALL_OW 257
77772: PUSH
77773: LD_VAR 0 2
77777: EQUAL
77778: IFFALSE 77805
// result := Insert ( result , 1 , un ) else
77780: LD_ADDR_VAR 0 3
77784: PUSH
77785: LD_VAR 0 3
77789: PPUSH
77790: LD_INT 1
77792: PPUSH
77793: LD_VAR 0 4
77797: PPUSH
77798: CALL_OW 2
77802: ST_TO_ADDR
77803: GO 77834
// result := Replace ( result , result + 1 , un ) ;
77805: LD_ADDR_VAR 0 3
77809: PUSH
77810: LD_VAR 0 3
77814: PPUSH
77815: LD_VAR 0 3
77819: PUSH
77820: LD_INT 1
77822: PLUS
77823: PPUSH
77824: LD_VAR 0 4
77828: PPUSH
77829: CALL_OW 1
77833: ST_TO_ADDR
77834: GO 77760
77836: POP
77837: POP
// end ;
77838: LD_VAR 0 3
77842: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77843: LD_INT 0
77845: PPUSH
77846: PPUSH
77847: PPUSH
77848: PPUSH
77849: PPUSH
77850: PPUSH
77851: PPUSH
// result := [ ] ;
77852: LD_ADDR_VAR 0 4
77856: PUSH
77857: EMPTY
77858: ST_TO_ADDR
// if x - r < 0 then
77859: LD_VAR 0 1
77863: PUSH
77864: LD_VAR 0 3
77868: MINUS
77869: PUSH
77870: LD_INT 0
77872: LESS
77873: IFFALSE 77885
// min_x := 0 else
77875: LD_ADDR_VAR 0 8
77879: PUSH
77880: LD_INT 0
77882: ST_TO_ADDR
77883: GO 77901
// min_x := x - r ;
77885: LD_ADDR_VAR 0 8
77889: PUSH
77890: LD_VAR 0 1
77894: PUSH
77895: LD_VAR 0 3
77899: MINUS
77900: ST_TO_ADDR
// if y - r < 0 then
77901: LD_VAR 0 2
77905: PUSH
77906: LD_VAR 0 3
77910: MINUS
77911: PUSH
77912: LD_INT 0
77914: LESS
77915: IFFALSE 77927
// min_y := 0 else
77917: LD_ADDR_VAR 0 7
77921: PUSH
77922: LD_INT 0
77924: ST_TO_ADDR
77925: GO 77943
// min_y := y - r ;
77927: LD_ADDR_VAR 0 7
77931: PUSH
77932: LD_VAR 0 2
77936: PUSH
77937: LD_VAR 0 3
77941: MINUS
77942: ST_TO_ADDR
// max_x := x + r ;
77943: LD_ADDR_VAR 0 9
77947: PUSH
77948: LD_VAR 0 1
77952: PUSH
77953: LD_VAR 0 3
77957: PLUS
77958: ST_TO_ADDR
// max_y := y + r ;
77959: LD_ADDR_VAR 0 10
77963: PUSH
77964: LD_VAR 0 2
77968: PUSH
77969: LD_VAR 0 3
77973: PLUS
77974: ST_TO_ADDR
// for _x = min_x to max_x do
77975: LD_ADDR_VAR 0 5
77979: PUSH
77980: DOUBLE
77981: LD_VAR 0 8
77985: DEC
77986: ST_TO_ADDR
77987: LD_VAR 0 9
77991: PUSH
77992: FOR_TO
77993: IFFALSE 78094
// for _y = min_y to max_y do
77995: LD_ADDR_VAR 0 6
77999: PUSH
78000: DOUBLE
78001: LD_VAR 0 7
78005: DEC
78006: ST_TO_ADDR
78007: LD_VAR 0 10
78011: PUSH
78012: FOR_TO
78013: IFFALSE 78090
// begin if not ValidHex ( _x , _y ) then
78015: LD_VAR 0 5
78019: PPUSH
78020: LD_VAR 0 6
78024: PPUSH
78025: CALL_OW 488
78029: NOT
78030: IFFALSE 78034
// continue ;
78032: GO 78012
// if GetResourceTypeXY ( _x , _y ) then
78034: LD_VAR 0 5
78038: PPUSH
78039: LD_VAR 0 6
78043: PPUSH
78044: CALL_OW 283
78048: IFFALSE 78088
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78050: LD_ADDR_VAR 0 4
78054: PUSH
78055: LD_VAR 0 4
78059: PPUSH
78060: LD_VAR 0 4
78064: PUSH
78065: LD_INT 1
78067: PLUS
78068: PPUSH
78069: LD_VAR 0 5
78073: PUSH
78074: LD_VAR 0 6
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PPUSH
78083: CALL_OW 1
78087: ST_TO_ADDR
// end ;
78088: GO 78012
78090: POP
78091: POP
78092: GO 77992
78094: POP
78095: POP
// end ;
78096: LD_VAR 0 4
78100: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78101: LD_INT 0
78103: PPUSH
78104: PPUSH
78105: PPUSH
78106: PPUSH
78107: PPUSH
78108: PPUSH
78109: PPUSH
78110: PPUSH
// if not units then
78111: LD_VAR 0 1
78115: NOT
78116: IFFALSE 78120
// exit ;
78118: GO 78631
// result := UnitFilter ( units , [ f_ok ] ) ;
78120: LD_ADDR_VAR 0 3
78124: PUSH
78125: LD_VAR 0 1
78129: PPUSH
78130: LD_INT 50
78132: PUSH
78133: EMPTY
78134: LIST
78135: PPUSH
78136: CALL_OW 72
78140: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78141: LD_ADDR_VAR 0 8
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 1
78153: ARRAY
78154: PPUSH
78155: CALL_OW 255
78159: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78160: LD_ADDR_VAR 0 10
78164: PUSH
78165: LD_INT 29
78167: PUSH
78168: LD_EXP 52
78172: PUSH
78173: LD_INT 49
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: LIST
78180: ST_TO_ADDR
// if not result then
78181: LD_VAR 0 3
78185: NOT
78186: IFFALSE 78190
// exit ;
78188: GO 78631
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78190: LD_ADDR_VAR 0 5
78194: PUSH
78195: LD_INT 81
78197: PUSH
78198: LD_VAR 0 8
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: PPUSH
78207: CALL_OW 69
78211: ST_TO_ADDR
// for i in result do
78212: LD_ADDR_VAR 0 4
78216: PUSH
78217: LD_VAR 0 3
78221: PUSH
78222: FOR_IN
78223: IFFALSE 78629
// begin tag := GetTag ( i ) + 1 ;
78225: LD_ADDR_VAR 0 9
78229: PUSH
78230: LD_VAR 0 4
78234: PPUSH
78235: CALL_OW 110
78239: PUSH
78240: LD_INT 1
78242: PLUS
78243: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78244: LD_ADDR_VAR 0 7
78248: PUSH
78249: LD_VAR 0 4
78253: PPUSH
78254: CALL_OW 250
78258: PPUSH
78259: LD_VAR 0 4
78263: PPUSH
78264: CALL_OW 251
78268: PPUSH
78269: LD_INT 6
78271: PPUSH
78272: CALL 77843 0 3
78276: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78277: LD_VAR 0 7
78281: PUSH
78282: LD_VAR 0 4
78286: PPUSH
78287: CALL_OW 264
78291: PUSH
78292: LD_VAR 0 10
78296: IN
78297: NOT
78298: AND
78299: IFFALSE 78338
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78301: LD_VAR 0 4
78305: PPUSH
78306: LD_VAR 0 7
78310: PUSH
78311: LD_INT 1
78313: ARRAY
78314: PUSH
78315: LD_INT 1
78317: ARRAY
78318: PPUSH
78319: LD_VAR 0 7
78323: PUSH
78324: LD_INT 1
78326: ARRAY
78327: PUSH
78328: LD_INT 2
78330: ARRAY
78331: PPUSH
78332: CALL_OW 116
78336: GO 78627
// if path > tag then
78338: LD_VAR 0 2
78342: PUSH
78343: LD_VAR 0 9
78347: GREATER
78348: IFFALSE 78556
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78350: LD_ADDR_VAR 0 6
78354: PUSH
78355: LD_VAR 0 5
78359: PPUSH
78360: LD_INT 91
78362: PUSH
78363: LD_VAR 0 4
78367: PUSH
78368: LD_INT 12
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: LIST
78375: PPUSH
78376: CALL_OW 72
78380: ST_TO_ADDR
// if nearEnemy then
78381: LD_VAR 0 6
78385: IFFALSE 78454
// begin if GetWeapon ( i ) = ru_time_lapser then
78387: LD_VAR 0 4
78391: PPUSH
78392: CALL_OW 264
78396: PUSH
78397: LD_INT 49
78399: EQUAL
78400: IFFALSE 78428
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78402: LD_VAR 0 4
78406: PPUSH
78407: LD_VAR 0 6
78411: PPUSH
78412: LD_VAR 0 4
78416: PPUSH
78417: CALL_OW 74
78421: PPUSH
78422: CALL_OW 112
78426: GO 78452
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78428: LD_VAR 0 4
78432: PPUSH
78433: LD_VAR 0 6
78437: PPUSH
78438: LD_VAR 0 4
78442: PPUSH
78443: CALL_OW 74
78447: PPUSH
78448: CALL_OW 115
// end else
78452: GO 78554
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78454: LD_VAR 0 4
78458: PPUSH
78459: LD_VAR 0 2
78463: PUSH
78464: LD_VAR 0 9
78468: ARRAY
78469: PUSH
78470: LD_INT 1
78472: ARRAY
78473: PPUSH
78474: LD_VAR 0 2
78478: PUSH
78479: LD_VAR 0 9
78483: ARRAY
78484: PUSH
78485: LD_INT 2
78487: ARRAY
78488: PPUSH
78489: CALL_OW 297
78493: PUSH
78494: LD_INT 6
78496: GREATER
78497: IFFALSE 78540
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78499: LD_VAR 0 4
78503: PPUSH
78504: LD_VAR 0 2
78508: PUSH
78509: LD_VAR 0 9
78513: ARRAY
78514: PUSH
78515: LD_INT 1
78517: ARRAY
78518: PPUSH
78519: LD_VAR 0 2
78523: PUSH
78524: LD_VAR 0 9
78528: ARRAY
78529: PUSH
78530: LD_INT 2
78532: ARRAY
78533: PPUSH
78534: CALL_OW 114
78538: GO 78554
// SetTag ( i , tag ) ;
78540: LD_VAR 0 4
78544: PPUSH
78545: LD_VAR 0 9
78549: PPUSH
78550: CALL_OW 109
// end else
78554: GO 78627
// if enemy then
78556: LD_VAR 0 5
78560: IFFALSE 78627
// begin if GetWeapon ( i ) = ru_time_lapser then
78562: LD_VAR 0 4
78566: PPUSH
78567: CALL_OW 264
78571: PUSH
78572: LD_INT 49
78574: EQUAL
78575: IFFALSE 78603
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78577: LD_VAR 0 4
78581: PPUSH
78582: LD_VAR 0 5
78586: PPUSH
78587: LD_VAR 0 4
78591: PPUSH
78592: CALL_OW 74
78596: PPUSH
78597: CALL_OW 112
78601: GO 78627
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78603: LD_VAR 0 4
78607: PPUSH
78608: LD_VAR 0 5
78612: PPUSH
78613: LD_VAR 0 4
78617: PPUSH
78618: CALL_OW 74
78622: PPUSH
78623: CALL_OW 115
// end ; end ;
78627: GO 78222
78629: POP
78630: POP
// end ;
78631: LD_VAR 0 3
78635: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78636: LD_INT 0
78638: PPUSH
78639: PPUSH
78640: PPUSH
// if not unit or IsInUnit ( unit ) then
78641: LD_VAR 0 1
78645: NOT
78646: PUSH
78647: LD_VAR 0 1
78651: PPUSH
78652: CALL_OW 310
78656: OR
78657: IFFALSE 78661
// exit ;
78659: GO 78752
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78661: LD_ADDR_VAR 0 4
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 250
78675: PPUSH
78676: LD_VAR 0 2
78680: PPUSH
78681: LD_INT 1
78683: PPUSH
78684: CALL_OW 272
78688: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78689: LD_ADDR_VAR 0 5
78693: PUSH
78694: LD_VAR 0 1
78698: PPUSH
78699: CALL_OW 251
78703: PPUSH
78704: LD_VAR 0 2
78708: PPUSH
78709: LD_INT 1
78711: PPUSH
78712: CALL_OW 273
78716: ST_TO_ADDR
// if ValidHex ( x , y ) then
78717: LD_VAR 0 4
78721: PPUSH
78722: LD_VAR 0 5
78726: PPUSH
78727: CALL_OW 488
78731: IFFALSE 78752
// ComTurnXY ( unit , x , y ) ;
78733: LD_VAR 0 1
78737: PPUSH
78738: LD_VAR 0 4
78742: PPUSH
78743: LD_VAR 0 5
78747: PPUSH
78748: CALL_OW 118
// end ;
78752: LD_VAR 0 3
78756: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78757: LD_INT 0
78759: PPUSH
78760: PPUSH
// result := false ;
78761: LD_ADDR_VAR 0 3
78765: PUSH
78766: LD_INT 0
78768: ST_TO_ADDR
// if not units then
78769: LD_VAR 0 2
78773: NOT
78774: IFFALSE 78778
// exit ;
78776: GO 78823
// for i in units do
78778: LD_ADDR_VAR 0 4
78782: PUSH
78783: LD_VAR 0 2
78787: PUSH
78788: FOR_IN
78789: IFFALSE 78821
// if See ( side , i ) then
78791: LD_VAR 0 1
78795: PPUSH
78796: LD_VAR 0 4
78800: PPUSH
78801: CALL_OW 292
78805: IFFALSE 78819
// begin result := true ;
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: LD_INT 1
78814: ST_TO_ADDR
// exit ;
78815: POP
78816: POP
78817: GO 78823
// end ;
78819: GO 78788
78821: POP
78822: POP
// end ;
78823: LD_VAR 0 3
78827: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78828: LD_INT 0
78830: PPUSH
78831: PPUSH
78832: PPUSH
78833: PPUSH
// if not unit or not points then
78834: LD_VAR 0 1
78838: NOT
78839: PUSH
78840: LD_VAR 0 2
78844: NOT
78845: OR
78846: IFFALSE 78850
// exit ;
78848: GO 78940
// dist := 99999 ;
78850: LD_ADDR_VAR 0 5
78854: PUSH
78855: LD_INT 99999
78857: ST_TO_ADDR
// for i in points do
78858: LD_ADDR_VAR 0 4
78862: PUSH
78863: LD_VAR 0 2
78867: PUSH
78868: FOR_IN
78869: IFFALSE 78938
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78871: LD_ADDR_VAR 0 6
78875: PUSH
78876: LD_VAR 0 1
78880: PPUSH
78881: LD_VAR 0 4
78885: PUSH
78886: LD_INT 1
78888: ARRAY
78889: PPUSH
78890: LD_VAR 0 4
78894: PUSH
78895: LD_INT 2
78897: ARRAY
78898: PPUSH
78899: CALL_OW 297
78903: ST_TO_ADDR
// if tmpDist < dist then
78904: LD_VAR 0 6
78908: PUSH
78909: LD_VAR 0 5
78913: LESS
78914: IFFALSE 78936
// begin result := i ;
78916: LD_ADDR_VAR 0 3
78920: PUSH
78921: LD_VAR 0 4
78925: ST_TO_ADDR
// dist := tmpDist ;
78926: LD_ADDR_VAR 0 5
78930: PUSH
78931: LD_VAR 0 6
78935: ST_TO_ADDR
// end ; end ;
78936: GO 78868
78938: POP
78939: POP
// end ;
78940: LD_VAR 0 3
78944: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78945: LD_INT 0
78947: PPUSH
// uc_side := side ;
78948: LD_ADDR_OWVAR 20
78952: PUSH
78953: LD_VAR 0 1
78957: ST_TO_ADDR
// uc_nation := 3 ;
78958: LD_ADDR_OWVAR 21
78962: PUSH
78963: LD_INT 3
78965: ST_TO_ADDR
// vc_chassis := 25 ;
78966: LD_ADDR_OWVAR 37
78970: PUSH
78971: LD_INT 25
78973: ST_TO_ADDR
// vc_engine := engine_siberite ;
78974: LD_ADDR_OWVAR 39
78978: PUSH
78979: LD_INT 3
78981: ST_TO_ADDR
// vc_control := control_computer ;
78982: LD_ADDR_OWVAR 38
78986: PUSH
78987: LD_INT 3
78989: ST_TO_ADDR
// vc_weapon := 59 ;
78990: LD_ADDR_OWVAR 40
78994: PUSH
78995: LD_INT 59
78997: ST_TO_ADDR
// result := CreateVehicle ;
78998: LD_ADDR_VAR 0 5
79002: PUSH
79003: CALL_OW 45
79007: ST_TO_ADDR
// SetDir ( result , d ) ;
79008: LD_VAR 0 5
79012: PPUSH
79013: LD_VAR 0 4
79017: PPUSH
79018: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79022: LD_VAR 0 5
79026: PPUSH
79027: LD_VAR 0 2
79031: PPUSH
79032: LD_VAR 0 3
79036: PPUSH
79037: LD_INT 0
79039: PPUSH
79040: CALL_OW 48
// end ;
79044: LD_VAR 0 5
79048: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79049: LD_INT 0
79051: PPUSH
79052: PPUSH
79053: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79054: LD_ADDR_VAR 0 2
79058: PUSH
79059: LD_INT 0
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: LD_INT 0
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79077: LD_VAR 0 1
79081: NOT
79082: PUSH
79083: LD_VAR 0 1
79087: PPUSH
79088: CALL_OW 264
79092: PUSH
79093: LD_INT 12
79095: PUSH
79096: LD_INT 51
79098: PUSH
79099: LD_INT 32
79101: PUSH
79102: LD_EXP 49
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: IN
79113: NOT
79114: OR
79115: IFFALSE 79119
// exit ;
79117: GO 79217
// for i := 1 to 3 do
79119: LD_ADDR_VAR 0 3
79123: PUSH
79124: DOUBLE
79125: LD_INT 1
79127: DEC
79128: ST_TO_ADDR
79129: LD_INT 3
79131: PUSH
79132: FOR_TO
79133: IFFALSE 79215
// begin tmp := GetCargo ( cargo , i ) ;
79135: LD_ADDR_VAR 0 4
79139: PUSH
79140: LD_VAR 0 1
79144: PPUSH
79145: LD_VAR 0 3
79149: PPUSH
79150: CALL_OW 289
79154: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79155: LD_ADDR_VAR 0 2
79159: PUSH
79160: LD_VAR 0 2
79164: PPUSH
79165: LD_VAR 0 3
79169: PPUSH
79170: LD_VAR 0 4
79174: PPUSH
79175: CALL_OW 1
79179: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79180: LD_ADDR_VAR 0 2
79184: PUSH
79185: LD_VAR 0 2
79189: PPUSH
79190: LD_INT 4
79192: PPUSH
79193: LD_VAR 0 2
79197: PUSH
79198: LD_INT 4
79200: ARRAY
79201: PUSH
79202: LD_VAR 0 4
79206: PLUS
79207: PPUSH
79208: CALL_OW 1
79212: ST_TO_ADDR
// end ;
79213: GO 79132
79215: POP
79216: POP
// end ; end_of_file
79217: LD_VAR 0 2
79221: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79222: LD_VAR 0 1
79226: PUSH
79227: LD_INT 200
79229: DOUBLE
79230: GREATEREQUAL
79231: IFFALSE 79239
79233: LD_INT 299
79235: DOUBLE
79236: LESSEQUAL
79237: IFTRUE 79241
79239: GO 79273
79241: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79242: LD_VAR 0 1
79246: PPUSH
79247: LD_VAR 0 2
79251: PPUSH
79252: LD_VAR 0 3
79256: PPUSH
79257: LD_VAR 0 4
79261: PPUSH
79262: LD_VAR 0 5
79266: PPUSH
79267: CALL 34562 0 5
79271: GO 79350
79273: LD_INT 300
79275: DOUBLE
79276: GREATEREQUAL
79277: IFFALSE 79285
79279: LD_INT 399
79281: DOUBLE
79282: LESSEQUAL
79283: IFTRUE 79287
79285: GO 79349
79287: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79288: LD_VAR 0 1
79292: PPUSH
79293: LD_VAR 0 2
79297: PPUSH
79298: LD_VAR 0 3
79302: PPUSH
79303: LD_VAR 0 4
79307: PPUSH
79308: LD_VAR 0 5
79312: PPUSH
79313: LD_VAR 0 6
79317: PPUSH
79318: LD_VAR 0 7
79322: PPUSH
79323: LD_VAR 0 8
79327: PPUSH
79328: LD_VAR 0 9
79332: PPUSH
79333: LD_VAR 0 10
79337: PPUSH
79338: LD_VAR 0 11
79342: PPUSH
79343: CALL 32204 0 11
79347: GO 79350
79349: POP
// end ;
79350: PPOPN 11
79352: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79353: LD_VAR 0 1
79357: PPUSH
79358: LD_VAR 0 2
79362: PPUSH
79363: LD_VAR 0 3
79367: PPUSH
79368: LD_VAR 0 4
79372: PPUSH
79373: LD_VAR 0 5
79377: PPUSH
79378: CALL 34298 0 5
// end ; end_of_file
79382: PPOPN 5
79384: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79385: LD_VAR 0 1
79389: PPUSH
79390: LD_VAR 0 2
79394: PPUSH
79395: LD_VAR 0 3
79399: PPUSH
79400: LD_VAR 0 4
79404: PPUSH
79405: LD_VAR 0 5
79409: PPUSH
79410: LD_VAR 0 6
79414: PPUSH
79415: CALL 19897 0 6
// end ;
79419: PPOPN 6
79421: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79422: CALL 19872 0 0
// end ;
79426: PPOPN 1
79428: END
