// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 40129 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 40129 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 40129 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 40129 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 40129 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 40129 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 40129 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 40129 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 40129 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 40129 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 40129 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5281: LD_INT 16100
5283: PUSH
5284: LD_INT 14000
5286: PUSH
5287: LD_INT 13300
5289: PUSH
5290: LD_INT 12250
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72710 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77393 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77393 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 40192 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77819 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17180
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// DialogueOn ;
16831: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16835: LD_EXP 30
16839: PPUSH
16840: CALL_OW 87
// wait ( 0 0$1 ) ;
16844: LD_INT 35
16846: PPUSH
16847: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16851: LD_EXP 30
16855: PPUSH
16856: LD_STRING DH-1-interrogation
16858: PPUSH
16859: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16863: LD_EXP 40
16867: PPUSH
16868: LD_STRING DI-1-interrogation
16870: PPUSH
16871: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16875: LD_EXP 30
16879: PPUSH
16880: LD_STRING DH-2-interrogation
16882: PPUSH
16883: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16887: LD_EXP 40
16891: PPUSH
16892: LD_STRING DI-2-interrogation
16894: PPUSH
16895: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16899: LD_EXP 30
16903: PPUSH
16904: LD_STRING DH-3-interrogation
16906: PPUSH
16907: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16911: LD_EXP 40
16915: PPUSH
16916: LD_STRING DI-3-interrogation
16918: PPUSH
16919: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16923: LD_EXP 30
16927: PPUSH
16928: LD_STRING DH-4-interrogation
16930: PPUSH
16931: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16935: LD_EXP 40
16939: PPUSH
16940: LD_STRING DI-4-interrogation
16942: PPUSH
16943: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16947: LD_EXP 30
16951: PPUSH
16952: LD_STRING DH-5-interrogation
16954: PPUSH
16955: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16959: LD_EXP 40
16963: PPUSH
16964: LD_STRING DI-5-interrogation
16966: PPUSH
16967: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16971: LD_INT 10
16973: PPUSH
16974: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16978: LD_EXP 30
16982: PPUSH
16983: LD_STRING DH-6-interrogation
16985: PPUSH
16986: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16990: LD_EXP 40
16994: PPUSH
16995: LD_STRING DI-6-interrogation
16997: PPUSH
16998: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17002: LD_EXP 40
17006: PPUSH
17007: LD_STRING DI-7-interrogation
17009: PPUSH
17010: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17014: LD_EXP 30
17018: PPUSH
17019: LD_STRING DH-7-interrogation
17021: PPUSH
17022: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17026: LD_INT 10
17028: PPUSH
17029: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17033: LD_EXP 30
17037: PPUSH
17038: LD_STRING DH-8-interrogation
17040: PPUSH
17041: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17045: LD_EXP 40
17049: PPUSH
17050: LD_STRING DI-8-interrogation
17052: PPUSH
17053: CALL_OW 88
// wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// DialogueOff ;
17064: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17068: LD_STRING IbrahimDecisionQuery
17070: PPUSH
17071: CALL_OW 97
17075: PUSH
17076: LD_INT 1
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17108
17084: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17085: LD_EXP 40
17089: PPUSH
17090: LD_STRING DI-1-kill
17092: PPUSH
17093: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17097: LD_EXP 40
17101: PPUSH
17102: CALL_OW 66
// end ; 2 :
17106: GO 17174
17108: LD_INT 2
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17173
17116: POP
// begin SetSide ( Ibrahim , 6 ) ;
17117: LD_EXP 40
17121: PPUSH
17122: LD_INT 6
17124: PPUSH
17125: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17129: LD_EXP 40
17133: PPUSH
17134: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17138: LD_EXP 40
17142: PPUSH
17143: LD_INT 66
17145: PPUSH
17146: LD_INT 2
17148: PPUSH
17149: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17153: LD_EXP 40
17157: PPUSH
17158: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17162: LD_EXP 30
17166: PPUSH
17167: CALL_OW 122
// end ; end ;
17171: GO 17174
17173: POP
// InGameOff ;
17174: CALL_OW 9
// end ; 2 :
17178: GO 17194
17180: LD_INT 2
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17193
17188: POP
// exit ; end ;
17189: GO 17278
17191: GO 17194
17193: POP
// allowConvoys := true ;
17194: LD_ADDR_EXP 13
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// blockAttack := false ;
17202: LD_ADDR_EXP 29
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17210: LD_INT 5250
17212: PPUSH
17213: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17217: LD_INT 35
17219: PPUSH
17220: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17224: LD_INT 81
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: NOT
17253: IFFALSE 17217
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17255: LD_EXP 40
17259: PPUSH
17260: LD_INT 34
17262: PPUSH
17263: LD_INT 21
17265: PPUSH
17266: CALL_OW 111
// ibrahimIsFree := true ;
17270: LD_ADDR_EXP 27
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// end ;
17278: LD_VAR 0 1
17282: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17283: LD_EXP 27
17287: PUSH
17288: LD_EXP 40
17292: PPUSH
17293: CALL_OW 302
17297: AND
17298: PUSH
17299: LD_INT 2
17301: PPUSH
17302: LD_EXP 40
17306: PPUSH
17307: CALL_OW 292
17311: AND
17312: IFFALSE 18124
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
// begin wait ( 0 0$10 ) ;
17325: LD_INT 350
17327: PPUSH
17328: CALL_OW 67
// allowConvoys := false ;
17332: LD_ADDR_EXP 13
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// blockAttack := true ;
17340: LD_ADDR_EXP 29
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
// depot := usDepot ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_INT 11
17355: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17356: LD_INT 11
17358: NOT
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 50
17372: PUSH
17373: EMPTY
17374: LIST
17375: PUSH
17376: LD_INT 30
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: AND
17396: IFFALSE 17443
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17398: LD_ADDR_VAR 0 4
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 50
17415: PUSH
17416: EMPTY
17417: LIST
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: ST_TO_ADDR
// InGameOn ;
17443: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17447: LD_EXP 40
17451: PPUSH
17452: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17456: LD_EXP 30
17460: PPUSH
17461: LD_EXP 40
17465: PPUSH
17466: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17470: LD_EXP 40
17474: PPUSH
17475: LD_EXP 30
17479: PPUSH
17480: CALL_OW 119
// DialogueOn ;
17484: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17488: LD_EXP 40
17492: PPUSH
17493: LD_STRING DI-1-free
17495: PPUSH
17496: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17500: LD_EXP 30
17504: PPUSH
17505: LD_STRING DH-1-free
17507: PPUSH
17508: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17512: LD_EXP 40
17516: PPUSH
17517: LD_STRING DI-2-free
17519: PPUSH
17520: CALL_OW 88
// changeClass := 0 ;
17524: LD_ADDR_VAR 0 1
17528: PUSH
17529: LD_INT 0
17531: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17532: LD_STRING IbrahimJoinQuery
17534: PPUSH
17535: CALL_OW 97
17539: PUSH
17540: LD_INT 1
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 17559
17548: POP
// begin changeClass := 1 ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 1
17556: ST_TO_ADDR
// end ; 2 :
17557: GO 17811
17559: LD_INT 2
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17731
17567: POP
// begin Say ( Heike , DH-1-decline ) ;
17568: LD_EXP 30
17572: PPUSH
17573: LD_STRING DH-1-decline
17575: PPUSH
17576: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17580: LD_EXP 40
17584: PPUSH
17585: LD_STRING DI-1-decline
17587: PPUSH
17588: CALL_OW 88
// DialogueOff ;
17592: CALL_OW 7
// InGameOff ;
17596: CALL_OW 9
// blockAttack := false ;
17600: LD_ADDR_EXP 29
17604: PUSH
17605: LD_INT 0
17607: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17608: LD_EXP 40
17612: PPUSH
17613: LD_INT 30
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 111
// p := 0 ;
17623: LD_ADDR_VAR 0 3
17627: PUSH
17628: LD_INT 0
17630: ST_TO_ADDR
// repeat p := p + 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 1
17643: PLUS
17644: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17645: LD_INT 35
17647: PPUSH
17648: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17652: LD_EXP 40
17656: PPUSH
17657: LD_INT 30
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 307
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 101
17680: PUSH
17681: LD_INT 6
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: NOT
17697: OR
17698: PUSH
17699: LD_VAR 0 3
17703: PUSH
17704: LD_INT 10
17706: GREATER
17707: OR
17708: IFFALSE 17631
// RemoveUnit ( Ibrahim ) ;
17710: LD_EXP 40
17714: PPUSH
17715: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_STRING 03_IbrahimHasEscaped
17724: PPUSH
17725: CALL_OW 39
// end ; 3 :
17729: GO 17811
17731: LD_INT 3
17733: DOUBLE
17734: EQUAL
17735: IFTRUE 17739
17737: GO 17810
17739: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17740: LD_EXP 30
17744: PPUSH
17745: LD_STRING DH-1-radio-hq
17747: PPUSH
17748: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17752: LD_EXP 39
17756: PPUSH
17757: LD_STRING DO-1-radio-hq
17759: PPUSH
17760: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17764: LD_EXP 30
17768: PPUSH
17769: LD_STRING DH-2-radio-hq
17771: PPUSH
17772: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17776: LD_EXP 39
17780: PPUSH
17781: LD_STRING DO-2-radio-hq
17783: PPUSH
17784: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17788: LD_EXP 30
17792: PPUSH
17793: LD_STRING DH-3-radio-hq
17795: PPUSH
17796: CALL_OW 88
// changeClass := 1 ;
17800: LD_ADDR_VAR 0 1
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// end ; end ;
17808: GO 17811
17810: POP
// if changeClass then
17811: LD_VAR 0 1
17815: IFFALSE 18124
// begin Say ( Heike , DH-1-agree ) ;
17817: LD_EXP 30
17821: PPUSH
17822: LD_STRING DH-1-agree
17824: PPUSH
17825: CALL_OW 88
// if IsOk ( Givi ) then
17829: LD_EXP 31
17833: PPUSH
17834: CALL_OW 302
17838: IFFALSE 17876
// begin Say ( Givi , DG-1-agree ) ;
17840: LD_EXP 31
17844: PPUSH
17845: LD_STRING DG-1-agree
17847: PPUSH
17848: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17852: LD_EXP 30
17856: PPUSH
17857: LD_STRING DH-2-agree
17859: PPUSH
17860: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17864: LD_EXP 31
17868: PPUSH
17869: LD_STRING DG-2-agree
17871: PPUSH
17872: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17876: LD_EXP 40
17880: PPUSH
17881: CALL_OW 87
// DialogueOff ;
17885: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17889: LD_VAR 0 4
17893: PPUSH
17894: CALL_OW 313
17898: PUSH
17899: LD_INT 6
17901: EQUAL
17902: IFFALSE 17922
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 313
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17922: LD_EXP 40
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17934: LD_ADDR_VAR 0 5
17938: PUSH
17939: LD_EXP 40
17943: PPUSH
17944: CALL_OW 250
17948: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17949: LD_ADDR_VAR 0 6
17953: PUSH
17954: LD_EXP 40
17958: PPUSH
17959: CALL_OW 251
17963: ST_TO_ADDR
// if depot then
17964: LD_VAR 0 4
17968: IFFALSE 18017
// begin ComEnterUnit ( Ibrahim , depot ) ;
17970: LD_EXP 40
17974: PPUSH
17975: LD_VAR 0 4
17979: PPUSH
17980: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17984: LD_INT 35
17986: PPUSH
17987: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17991: LD_EXP 40
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 17984
// b := IsInUnit ( Ibrahim ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_EXP 40
18011: PPUSH
18012: CALL_OW 310
18016: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18017: LD_EXP 40
18021: PPUSH
18022: CALL_OW 64
// uc_side := 2 ;
18026: LD_ADDR_OWVAR 20
18030: PUSH
18031: LD_INT 2
18033: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18034: LD_ADDR_EXP 40
18038: PUSH
18039: LD_STRING Ibrahim
18041: PPUSH
18042: LD_INT 0
18044: PPUSH
18045: LD_STRING 
18047: PPUSH
18048: CALL 40129 0 3
18052: ST_TO_ADDR
// if depot then
18053: LD_VAR 0 4
18057: IFFALSE 18075
// PlaceHumanInUnit ( Ibrahim , b ) else
18059: LD_EXP 40
18063: PPUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 52
18073: GO 18097
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18075: LD_EXP 40
18079: PPUSH
18080: LD_VAR 0 5
18084: PPUSH
18085: LD_VAR 0 6
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 48
// InGameOff ;
18097: CALL_OW 9
// allowConvoys := true ;
18101: LD_ADDR_EXP 13
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// blockAttack := false ;
18109: LD_ADDR_EXP 29
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18117: LD_STRING ACH_IBRAHIM
18119: PPUSH
18120: CALL_OW 543
// end ; end ;
18124: PPOPN 6
18126: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18127: LD_EXP 35
18131: PPUSH
18132: CALL_OW 256
18136: PUSH
18137: LD_INT 3
18139: LESS
18140: IFFALSE 18207
18142: GO 18144
18144: DISABLE
// begin DialogueOn ;
18145: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18149: LD_EXP 35
18153: PPUSH
18154: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18158: LD_EXP 35
18162: PPUSH
18163: LD_STRING DK-keydeath-1
18165: PPUSH
18166: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18170: LD_EXP 30
18174: PPUSH
18175: LD_STRING DH-keydeath-2
18177: PPUSH
18178: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18182: LD_EXP 30
18186: PPUSH
18187: LD_STRING DH-keydeath-3
18189: PPUSH
18190: CALL_OW 88
// DialogueOff ;
18194: CALL_OW 7
// KillUnit ( Kaia ) ;
18198: LD_EXP 35
18202: PPUSH
18203: CALL_OW 66
// end ;
18207: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18208: LD_EXP 12
18212: PUSH
18213: LD_EXP 22
18217: PUSH
18218: LD_INT 1
18220: LESS
18221: AND
18222: IFFALSE 18779
18224: GO 18226
18226: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18227: LD_INT 22
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: IFFALSE 18351
// begin ChangeSideFog ( 1 , 2 ) ;
18275: LD_INT 1
18277: PPUSH
18278: LD_INT 2
18280: PPUSH
18281: CALL_OW 343
// Query ( DestroyEnemy ) ;
18285: LD_STRING DestroyEnemy
18287: PPUSH
18288: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18292: LD_INT 35
18294: PPUSH
18295: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18299: LD_INT 22
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 25
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 69
18345: PUSH
18346: LD_INT 0
18348: EQUAL
18349: IFFALSE 18292
// end ; if tick <= 45 45$00 then
18351: LD_OWVAR 1
18355: PUSH
18356: LD_INT 94500
18358: LESSEQUAL
18359: IFFALSE 18368
// SetAchievement ( ACH_HSPEED_3 ) ;
18361: LD_STRING ACH_HSPEED_3
18363: PPUSH
18364: CALL_OW 543
// DialogueOn ;
18368: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18372: LD_EXP 30
18376: PPUSH
18377: LD_STRING DH-1-final
18379: PPUSH
18380: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18384: LD_OWVAR 1
18388: PUSH
18389: LD_INT 138600
18391: PUSH
18392: LD_INT 134400
18394: PUSH
18395: LD_INT 130200
18397: PUSH
18398: LD_INT 126000
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_OWVAR 67
18411: ARRAY
18412: LESSEQUAL
18413: IFFALSE 18427
// AddMedal ( med1 , 1 ) else
18415: LD_STRING med1
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 101
18425: GO 18438
// AddMedal ( med1 , - 1 ) ;
18427: LD_STRING med1
18429: PPUSH
18430: LD_INT 1
18432: NEG
18433: PPUSH
18434: CALL_OW 101
// if vehCounter >= 2 then
18438: LD_EXP 23
18442: PUSH
18443: LD_INT 2
18445: GREATEREQUAL
18446: IFFALSE 18460
// AddMedal ( med2 , 1 ) else
18448: LD_STRING med2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 101
18458: GO 18471
// AddMedal ( med2 , - 1 ) ;
18460: LD_STRING med2
18462: PPUSH
18463: LD_INT 1
18465: NEG
18466: PPUSH
18467: CALL_OW 101
// if deadCounter = 0 then
18471: LD_EXP 10
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: IFFALSE 18493
// AddMedal ( med3 , 1 ) else
18481: LD_STRING med3
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 101
18491: GO 18504
// AddMedal ( med3 , - 1 ) ;
18493: LD_STRING med3
18495: PPUSH
18496: LD_INT 1
18498: NEG
18499: PPUSH
18500: CALL_OW 101
// GiveMedals ( MAIN ) ;
18504: LD_STRING MAIN
18506: PPUSH
18507: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18511: LD_INT 22
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 23
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 21
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: PPUSH
18551: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18555: LD_EXP 30
18559: PPUSH
18560: LD_STRING 03_Heike
18562: PPUSH
18563: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18567: LD_EXP 34
18571: PPUSH
18572: LD_STRING 03_Aviradze
18574: PPUSH
18575: CALL_OW 38
// if Givi then
18579: LD_EXP 31
18583: IFFALSE 18597
// SaveCharacters ( Givi , 03_Givi ) ;
18585: LD_EXP 31
18589: PPUSH
18590: LD_STRING 03_Givi
18592: PPUSH
18593: CALL_OW 38
// if Mike then
18597: LD_EXP 32
18601: IFFALSE 18615
// SaveCharacters ( Mike , 03_Mike ) ;
18603: LD_EXP 32
18607: PPUSH
18608: LD_STRING 03_Mike
18610: PPUSH
18611: CALL_OW 38
// if Kamil then
18615: LD_EXP 33
18619: IFFALSE 18633
// SaveCharacters ( Kamil , 03_Kamil ) ;
18621: LD_EXP 33
18625: PPUSH
18626: LD_STRING 03_Kamil
18628: PPUSH
18629: CALL_OW 38
// if Kaia then
18633: LD_EXP 35
18637: IFFALSE 18651
// SaveCharacters ( Kaia , 03_Kaia ) ;
18639: LD_EXP 35
18643: PPUSH
18644: LD_STRING 03_Kaia
18646: PPUSH
18647: CALL_OW 38
// if Sophia then
18651: LD_EXP 36
18655: IFFALSE 18669
// SaveCharacters ( Sophia , 03_Sophia ) ;
18657: LD_EXP 36
18661: PPUSH
18662: LD_STRING 03_Sophia
18664: PPUSH
18665: CALL_OW 38
// if Markov then
18669: LD_EXP 37
18673: IFFALSE 18687
// SaveCharacters ( Markov , 03_Markov ) ;
18675: LD_EXP 37
18679: PPUSH
18680: LD_STRING 03_Markov
18682: PPUSH
18683: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18687: LD_EXP 40
18691: PUSH
18692: LD_EXP 40
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 2
18704: EQUAL
18705: AND
18706: IFFALSE 18727
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18708: LD_STRING enableBioCharacter(BIO_IBRA)
18710: PPUSH
18711: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18715: LD_EXP 40
18719: PPUSH
18720: LD_STRING 03_Ibrahim
18722: PPUSH
18723: CALL_OW 38
// end ; if heikeSecondSquad then
18727: LD_EXP 44
18731: IFFALSE 18745
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18733: LD_EXP 44
18737: PPUSH
18738: LD_STRING 03_others
18740: PPUSH
18741: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18745: LD_EXP 10
18749: PPUSH
18750: LD_STRING 03_DeadCounter
18752: PPUSH
18753: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18757: LD_STRING enableBioCharacter(BIO_OMAR)
18759: PPUSH
18760: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18764: LD_STRING enableBioCharacter(BIO_FARM)
18766: PPUSH
18767: CALL_OW 559
// YouWin ;
18771: CALL_OW 103
// DialogueOff ;
18775: CALL_OW 7
// end ; end_of_file
18779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL 35840 0 1
// if un = Heike then
18789: LD_VAR 0 1
18793: PUSH
18794: LD_EXP 30
18798: EQUAL
18799: IFFALSE 18808
// YouLost ( Heike ) ;
18801: LD_STRING Heike
18803: PPUSH
18804: CALL_OW 104
// if un = Aviradze then
18808: LD_VAR 0 1
18812: PUSH
18813: LD_EXP 34
18817: EQUAL
18818: IFFALSE 18827
// YouLost ( Aviradze ) ;
18820: LD_STRING Aviradze
18822: PPUSH
18823: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18827: LD_VAR 0 1
18831: PUSH
18832: LD_INT 11
18834: EQUAL
18835: PUSH
18836: LD_EXP 12
18840: NOT
18841: AND
18842: IFFALSE 18851
// YouLost ( Depot ) ;
18844: LD_STRING Depot
18846: PPUSH
18847: CALL_OW 104
// if un = arDepot then
18851: LD_VAR 0 1
18855: PUSH
18856: LD_INT 5
18858: EQUAL
18859: IFFALSE 18868
// YouLost ( FarmerDepot ) ;
18861: LD_STRING FarmerDepot
18863: PPUSH
18864: CALL_OW 104
// if un = Farmer then
18868: LD_VAR 0 1
18872: PUSH
18873: LD_EXP 38
18877: EQUAL
18878: IFFALSE 18887
// YouLost ( Farmer ) ;
18880: LD_STRING Farmer
18882: PPUSH
18883: CALL_OW 104
// if un in usForces then
18887: LD_VAR 0 1
18891: PUSH
18892: LD_EXP 46
18896: IN
18897: IFFALSE 18915
// usForces := usForces diff un ;
18899: LD_ADDR_EXP 46
18903: PUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_VAR 0 1
18913: DIFF
18914: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18915: LD_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 23
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: IN
18960: IFFALSE 18976
// deadCounter := deadCounter + 1 ;
18962: LD_ADDR_EXP 10
18966: PUSH
18967: LD_EXP 10
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18976: LD_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 4
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 34
18993: PUSH
18994: LD_INT 12
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: IN
19010: PUSH
19011: LD_EXP 19
19015: NOT
19016: AND
19017: IFFALSE 19027
// firstConvoyDestroyed := true ;
19019: LD_ADDR_EXP 19
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if un in usAttackers then
19027: LD_VAR 0 1
19031: PUSH
19032: LD_EXP 49
19036: IN
19037: IFFALSE 19055
// usAttackers := usAttackers diff un ;
19039: LD_ADDR_EXP 49
19043: PUSH
19044: LD_EXP 49
19048: PUSH
19049: LD_VAR 0 1
19053: DIFF
19054: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19055: LD_VAR 0 1
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: IN
19089: IFFALSE 19105
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19091: LD_ADDR_EXP 21
19095: PUSH
19096: LD_EXP 21
19100: PUSH
19101: LD_INT 1
19103: PLUS
19104: ST_TO_ADDR
// end ;
19105: PPOPN 1
19107: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19108: LD_VAR 0 2
19112: PUSH
19113: LD_EXP 40
19117: EQUAL
19118: PUSH
19119: LD_EXP 26
19123: AND
19124: IFFALSE 19309
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19126: LD_INT 22
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 30
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 50
19148: PUSH
19149: EMPTY
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: IFFALSE 19215
// begin InGameOn ;
19163: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19167: LD_EXP 40
19171: PPUSH
19172: LD_INT 11
19174: PPUSH
19175: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19179: LD_INT 35
19181: PPUSH
19182: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19186: LD_EXP 40
19190: PPUSH
19191: LD_INT 11
19193: PPUSH
19194: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19198: LD_EXP 40
19202: PPUSH
19203: CALL_OW 310
19207: IFFALSE 19179
// InGameOff ;
19209: CALL_OW 9
// end else
19213: GO 19309
// begin SetSide ( Ibrahim , 6 ) ;
19215: LD_EXP 40
19219: PPUSH
19220: LD_INT 6
19222: PPUSH
19223: CALL_OW 235
// ibrahimInDepot := false ;
19227: LD_ADDR_EXP 26
19231: PUSH
19232: LD_INT 0
19234: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19235: LD_EXP 40
19239: PPUSH
19240: LD_INT 30
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19250: LD_INT 35
19252: PPUSH
19253: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19257: LD_EXP 40
19261: PPUSH
19262: LD_INT 30
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19272: LD_EXP 40
19276: PPUSH
19277: LD_INT 30
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 307
19287: PUSH
19288: LD_EXP 40
19292: PPUSH
19293: CALL_OW 301
19297: OR
19298: IFFALSE 19250
// RemoveUnit ( Ibrahim ) ;
19300: LD_EXP 40
19304: PPUSH
19305: CALL_OW 64
// end ; end ; end ;
19309: PPOPN 2
19311: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_EXP 30
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 1
19327: PUSH
19328: LD_INT 11
19330: EQUAL
19331: AND
19332: PUSH
19333: LD_EXP 26
19337: AND
19338: IFFALSE 19344
// IbrahimQuery ;
19340: CALL 16791 0 0
// end ;
19344: PPOPN 2
19346: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 141
// if oldId in usAttackers then
19356: LD_VAR 0 2
19360: PUSH
19361: LD_EXP 49
19365: IN
19366: IFFALSE 19384
// usAttackers := usAttackers diff oldId ;
19368: LD_ADDR_EXP 49
19372: PUSH
19373: LD_EXP 49
19377: PUSH
19378: LD_VAR 0 2
19382: DIFF
19383: ST_TO_ADDR
// if newId in usAttackers then
19384: LD_VAR 0 1
19388: PUSH
19389: LD_EXP 49
19393: IN
19394: IFFALSE 19412
// usAttackers := usAttackers diff newId ;
19396: LD_ADDR_EXP 49
19400: PUSH
19401: LD_EXP 49
19405: PUSH
19406: LD_VAR 0 1
19410: DIFF
19411: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 4
19419: EQUAL
19420: PUSH
19421: LD_EXP 19
19425: NOT
19426: AND
19427: IFFALSE 19437
// firstConvoyDestroyed := true ;
19429: LD_ADDR_EXP 19
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 264
19446: PUSH
19447: LD_INT 12
19449: EQUAL
19450: IFFALSE 19488
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19452: LD_ADDR_EXP 14
19456: PUSH
19457: LD_EXP 14
19461: PUSH
19462: LD_INT 1
19464: PLUS
19465: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 289
19478: PUSH
19479: LD_INT 0
19481: EQUAL
19482: IFFALSE 19488
// EmptyCargoDialog ;
19484: CALL 15409 0 0
// end ; end ;
19488: PPOPN 4
19490: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19491: LD_VAR 0 1
19495: PUSH
19496: LD_INT 2
19498: EQUAL
19499: PUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 5
19507: EQUAL
19508: AND
19509: IFFALSE 19518
// YouLost ( Attack ) ;
19511: LD_STRING Attack
19513: PPUSH
19514: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 2
19525: EQUAL
19526: PUSH
19527: LD_VAR 0 2
19531: PUSH
19532: LD_INT 1
19534: EQUAL
19535: AND
19536: IFFALSE 19546
// americanContact := true ;
19538: LD_ADDR_EXP 5
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// end ;
19546: PPOPN 2
19548: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 255
19558: PUSH
19559: LD_INT 1
19561: EQUAL
19562: PUSH
19563: LD_EXP 7
19567: NOT
19568: AND
19569: IFFALSE 19703
// begin if GetBType ( b ) = b_lab then
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 266
19580: PUSH
19581: LD_INT 6
19583: EQUAL
19584: IFFALSE 19624
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19586: LD_EXP 46
19590: PPUSH
19591: LD_INT 25
19593: PUSH
19594: LD_INT 4
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 72
19605: PPUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 120
// AmLabResearch ( b ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 266
19633: PUSH
19634: LD_INT 4
19636: EQUAL
19637: IFFALSE 19685
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19639: LD_EXP 46
19643: PPUSH
19644: LD_INT 25
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: PUSH
19657: LD_INT 54
19659: PUSH
19660: EMPTY
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 72
19675: PPUSH
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19685: LD_ADDR_EXP 48
19689: PUSH
19690: LD_EXP 48
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 3
19702: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 255
19712: PUSH
19713: LD_INT 5
19715: EQUAL
19716: IFFALSE 19730
// SetBLevel ( b , 5 ) ;
19718: LD_VAR 0 1
19722: PPUSH
19723: LD_INT 5
19725: PPUSH
19726: CALL_OW 241
// end ;
19730: PPOPN 1
19732: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 255
19742: PUSH
19743: LD_INT 2
19745: EQUAL
19746: IFFALSE 19762
// vehCounter := vehCounter + 1 ;
19748: LD_ADDR_EXP 23
19752: PUSH
19753: LD_EXP 23
19757: PUSH
19758: LD_INT 1
19760: PLUS
19761: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 2
19771: PPUSH
19772: CALL 35960 0 2
// end ;
19776: PPOPN 2
19778: END
// on SailEvent ( event ) do begin if event = eventAttack then
19779: LD_VAR 0 1
19783: PUSH
19784: LD_EXP 25
19788: EQUAL
19789: IFFALSE 19795
// AmericanAttack ;
19791: CALL 6778 0 0
// end ; end_of_file
19795: PPOPN 1
19797: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19798: LD_OWVAR 1
19802: PUSH
19803: LD_INT 10500
19805: PUSH
19806: LD_INT 9800
19808: PUSH
19809: LD_INT 9450
19811: PUSH
19812: LD_INT 9100
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: LD_OWVAR 67
19825: ARRAY
19826: LESSEQUAL
19827: IFFALSE 19854
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19833: LD_INT 1
19835: PPUSH
19836: LD_INT 5
19838: PPUSH
19839: CALL_OW 12
19843: PPUSH
19844: LD_INT 9
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 55
// end ;
19854: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19855: LD_EXP 7
19859: PUSH
19860: LD_OWVAR 1
19864: PUSH
19865: LD_INT 94500
19867: LESSEQUAL
19868: AND
19869: IFFALSE 19896
19871: GO 19873
19873: DISABLE
// begin enable ;
19874: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 5
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: LD_INT 9
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: CALL_OW 55
// end ; end_of_file
19896: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19897: LD_EXP 12
19901: NOT
19902: PUSH
19903: LD_EXP 17
19907: AND
19908: PUSH
19909: LD_EXP 4
19913: AND
19914: PUSH
19915: LD_EXP 16
19919: PUSH
19920: LD_EXP 17
19924: LESSEQUAL
19925: AND
19926: IFFALSE 20037
19928: GO 19930
19930: DISABLE
// begin enable ;
19931: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19932: LD_ADDR_OWVAR 47
19936: PUSH
19937: LD_STRING #X103-1
19939: PUSH
19940: LD_EXP 17
19944: PUSH
19945: LD_EXP 16
19949: MINUS
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19955: LD_ADDR_EXP 16
19959: PUSH
19960: LD_INT 5
19962: PPUSH
19963: CALL_OW 274
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 275
19975: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19976: LD_INT 10
19978: PPUSH
19979: LD_INT 1
19981: PPUSH
19982: CALL_OW 287
19986: PUSH
19987: LD_INT 0
19989: EQUAL
19990: IFFALSE 20008
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19992: LD_ADDR_EXP 18
19996: PUSH
19997: LD_EXP 18
20001: PUSH
20002: LD_INT 35
20004: MINUS
20005: ST_TO_ADDR
20006: GO 20037
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20008: LD_ADDR_EXP 18
20012: PUSH
20013: LD_INT 42000
20015: PUSH
20016: LD_INT 31500
20018: PUSH
20019: LD_INT 25200
20021: PUSH
20022: LD_INT 21000
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: LD_OWVAR 67
20035: ARRAY
20036: ST_TO_ADDR
// end ; end_of_file
20037: END
// export globalGameSaveCounter ; every 0 0$1 do
20038: GO 20040
20040: DISABLE
// begin enable ;
20041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20042: LD_STRING updateTimer(
20044: PUSH
20045: LD_OWVAR 1
20049: STR
20050: PUSH
20051: LD_STRING );
20053: STR
20054: PPUSH
20055: CALL_OW 559
// end ;
20059: END
// every 0 0$1 do
20060: GO 20062
20062: DISABLE
// begin globalGameSaveCounter := 0 ;
20063: LD_ADDR_EXP 50
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20071: LD_STRING setGameSaveCounter(0)
20073: PPUSH
20074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20078: LD_STRING initStreamRollete();
20080: PPUSH
20081: CALL_OW 559
// InitStreamMode ;
20085: CALL 21411 0 0
// DefineStreamItems ( false ) ;
20089: LD_INT 0
20091: PPUSH
20092: CALL 21875 0 1
// end ;
20096: END
// export function SOS_MapStart ( ) ; begin
20097: LD_INT 0
20099: PPUSH
// if streamModeActive then
20100: LD_EXP 51
20104: IFFALSE 20113
// DefineStreamItems ( true ) ;
20106: LD_INT 1
20108: PPUSH
20109: CALL 21875 0 1
// UpdateLuaVariables ( ) ;
20113: CALL 20130 0 0
// UpdateFactoryWaypoints ( ) ;
20117: CALL 34744 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20121: CALL 35001 0 0
// end ;
20125: LD_VAR 0 1
20129: RET
// function UpdateLuaVariables ( ) ; begin
20130: LD_INT 0
20132: PPUSH
// if globalGameSaveCounter then
20133: LD_EXP 50
20137: IFFALSE 20171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20139: LD_ADDR_EXP 50
20143: PUSH
20144: LD_EXP 50
20148: PPUSH
20149: CALL 78782 0 1
20153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20154: LD_STRING setGameSaveCounter(
20156: PUSH
20157: LD_EXP 50
20161: STR
20162: PUSH
20163: LD_STRING )
20165: STR
20166: PPUSH
20167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20171: LD_STRING setGameDifficulty(
20173: PUSH
20174: LD_OWVAR 67
20178: STR
20179: PUSH
20180: LD_STRING )
20182: STR
20183: PPUSH
20184: CALL_OW 559
// end ;
20188: LD_VAR 0 1
20192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20193: LD_INT 0
20195: PPUSH
// if p2 = stream_mode then
20196: LD_VAR 0 2
20200: PUSH
20201: LD_INT 100
20203: EQUAL
20204: IFFALSE 21207
// begin if not StreamModeActive then
20206: LD_EXP 51
20210: NOT
20211: IFFALSE 20221
// StreamModeActive := true ;
20213: LD_ADDR_EXP 51
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 0 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 0
20228: EQUAL
20229: IFFALSE 20235
// InitStreamMode ;
20231: CALL 21411 0 0
// if p3 = 1 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 1
20242: EQUAL
20243: IFFALSE 20253
// sRocket := true ;
20245: LD_ADDR_EXP 56
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 2 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 2
20260: EQUAL
20261: IFFALSE 20271
// sSpeed := true ;
20263: LD_ADDR_EXP 55
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 3 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 3
20278: EQUAL
20279: IFFALSE 20289
// sEngine := true ;
20281: LD_ADDR_EXP 57
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 4 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 4
20296: EQUAL
20297: IFFALSE 20307
// sSpec := true ;
20299: LD_ADDR_EXP 54
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 5 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 5
20314: EQUAL
20315: IFFALSE 20325
// sLevel := true ;
20317: LD_ADDR_EXP 58
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 6 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 6
20332: EQUAL
20333: IFFALSE 20343
// sArmoury := true ;
20335: LD_ADDR_EXP 59
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 7 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 7
20350: EQUAL
20351: IFFALSE 20361
// sRadar := true ;
20353: LD_ADDR_EXP 60
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 8 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 8
20368: EQUAL
20369: IFFALSE 20379
// sBunker := true ;
20371: LD_ADDR_EXP 61
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 9 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 9
20386: EQUAL
20387: IFFALSE 20397
// sHack := true ;
20389: LD_ADDR_EXP 62
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 10 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 10
20404: EQUAL
20405: IFFALSE 20415
// sFire := true ;
20407: LD_ADDR_EXP 63
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 11 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 11
20422: EQUAL
20423: IFFALSE 20433
// sRefresh := true ;
20425: LD_ADDR_EXP 64
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 12 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 12
20440: EQUAL
20441: IFFALSE 20451
// sExp := true ;
20443: LD_ADDR_EXP 65
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 13 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 13
20458: EQUAL
20459: IFFALSE 20469
// sDepot := true ;
20461: LD_ADDR_EXP 66
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 14 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 14
20476: EQUAL
20477: IFFALSE 20487
// sFlag := true ;
20479: LD_ADDR_EXP 67
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 15 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 15
20494: EQUAL
20495: IFFALSE 20505
// sKamikadze := true ;
20497: LD_ADDR_EXP 75
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 16 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 16
20512: EQUAL
20513: IFFALSE 20523
// sTroll := true ;
20515: LD_ADDR_EXP 76
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 17 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 17
20530: EQUAL
20531: IFFALSE 20541
// sSlow := true ;
20533: LD_ADDR_EXP 77
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 18 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 18
20548: EQUAL
20549: IFFALSE 20559
// sLack := true ;
20551: LD_ADDR_EXP 78
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 19 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 19
20566: EQUAL
20567: IFFALSE 20577
// sTank := true ;
20569: LD_ADDR_EXP 80
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 20 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 20
20584: EQUAL
20585: IFFALSE 20595
// sRemote := true ;
20587: LD_ADDR_EXP 81
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 21 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 21
20602: EQUAL
20603: IFFALSE 20613
// sPowell := true ;
20605: LD_ADDR_EXP 82
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 22 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 22
20620: EQUAL
20621: IFFALSE 20631
// sTeleport := true ;
20623: LD_ADDR_EXP 85
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 23 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 23
20638: EQUAL
20639: IFFALSE 20649
// sOilTower := true ;
20641: LD_ADDR_EXP 87
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 24 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 24
20656: EQUAL
20657: IFFALSE 20667
// sShovel := true ;
20659: LD_ADDR_EXP 88
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 25 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 25
20674: EQUAL
20675: IFFALSE 20685
// sSheik := true ;
20677: LD_ADDR_EXP 89
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 26 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 26
20692: EQUAL
20693: IFFALSE 20703
// sEarthquake := true ;
20695: LD_ADDR_EXP 91
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 27 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 27
20710: EQUAL
20711: IFFALSE 20721
// sAI := true ;
20713: LD_ADDR_EXP 92
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 28 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 28
20728: EQUAL
20729: IFFALSE 20739
// sCargo := true ;
20731: LD_ADDR_EXP 95
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 29 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 29
20746: EQUAL
20747: IFFALSE 20757
// sDLaser := true ;
20749: LD_ADDR_EXP 96
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 30 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 30
20764: EQUAL
20765: IFFALSE 20775
// sExchange := true ;
20767: LD_ADDR_EXP 97
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 31 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 31
20782: EQUAL
20783: IFFALSE 20793
// sFac := true ;
20785: LD_ADDR_EXP 98
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 32 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 32
20800: EQUAL
20801: IFFALSE 20811
// sPower := true ;
20803: LD_ADDR_EXP 99
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 33 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 33
20818: EQUAL
20819: IFFALSE 20829
// sRandom := true ;
20821: LD_ADDR_EXP 100
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 34 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 34
20836: EQUAL
20837: IFFALSE 20847
// sShield := true ;
20839: LD_ADDR_EXP 101
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 35 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 35
20854: EQUAL
20855: IFFALSE 20865
// sTime := true ;
20857: LD_ADDR_EXP 102
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 36 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 36
20872: EQUAL
20873: IFFALSE 20883
// sTools := true ;
20875: LD_ADDR_EXP 103
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 101 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 101
20890: EQUAL
20891: IFFALSE 20901
// sSold := true ;
20893: LD_ADDR_EXP 68
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 102 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 102
20908: EQUAL
20909: IFFALSE 20919
// sDiff := true ;
20911: LD_ADDR_EXP 69
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 103 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 103
20926: EQUAL
20927: IFFALSE 20937
// sFog := true ;
20929: LD_ADDR_EXP 72
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 104 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 104
20944: EQUAL
20945: IFFALSE 20955
// sReset := true ;
20947: LD_ADDR_EXP 73
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 105 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 105
20962: EQUAL
20963: IFFALSE 20973
// sSun := true ;
20965: LD_ADDR_EXP 74
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 106 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 106
20980: EQUAL
20981: IFFALSE 20991
// sTiger := true ;
20983: LD_ADDR_EXP 70
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 107 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 107
20998: EQUAL
20999: IFFALSE 21009
// sBomb := true ;
21001: LD_ADDR_EXP 71
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 108 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 108
21016: EQUAL
21017: IFFALSE 21027
// sWound := true ;
21019: LD_ADDR_EXP 79
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 109 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 109
21034: EQUAL
21035: IFFALSE 21045
// sBetray := true ;
21037: LD_ADDR_EXP 83
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 110 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 110
21052: EQUAL
21053: IFFALSE 21063
// sContamin := true ;
21055: LD_ADDR_EXP 84
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 111 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 111
21070: EQUAL
21071: IFFALSE 21081
// sOil := true ;
21073: LD_ADDR_EXP 86
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 112 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 112
21088: EQUAL
21089: IFFALSE 21099
// sStu := true ;
21091: LD_ADDR_EXP 90
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 113 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 113
21106: EQUAL
21107: IFFALSE 21117
// sBazooka := true ;
21109: LD_ADDR_EXP 93
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 114 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 114
21124: EQUAL
21125: IFFALSE 21135
// sMortar := true ;
21127: LD_ADDR_EXP 94
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 115 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 115
21142: EQUAL
21143: IFFALSE 21153
// sRanger := true ;
21145: LD_ADDR_EXP 104
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 116 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 116
21160: EQUAL
21161: IFFALSE 21171
// sComputer := true ;
21163: LD_ADDR_EXP 105
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 117 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 117
21178: EQUAL
21179: IFFALSE 21189
// s30 := true ;
21181: LD_ADDR_EXP 106
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 118 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 118
21196: EQUAL
21197: IFFALSE 21207
// s60 := true ;
21199: LD_ADDR_EXP 107
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// end ; if p2 = hack_mode then
21207: LD_VAR 0 2
21211: PUSH
21212: LD_INT 101
21214: EQUAL
21215: IFFALSE 21343
// begin case p3 of 1 :
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 1
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackUnlimitedResources ; 2 :
21231: CALL 33490 0 0
21235: GO 21343
21237: LD_INT 2
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10 ; 3 :
21246: CALL 33623 0 0
21250: GO 21343
21252: LD_INT 3
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackSetLevel10YourUnits ; 4 :
21261: CALL 33708 0 0
21265: GO 21343
21267: LD_INT 4
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvincible ; 5 :
21276: CALL 34156 0 0
21280: GO 21343
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackInvisible ; 6 :
21291: CALL 34267 0 0
21295: GO 21343
21297: LD_INT 6
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeYourSide ; 7 :
21306: CALL 34324 0 0
21310: GO 21343
21312: LD_INT 7
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackChangeUnitSide ; 8 :
21321: CALL 34366 0 0
21325: GO 21343
21327: LD_INT 8
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21342
21335: POP
// hHackFog ; end ;
21336: CALL 34467 0 0
21340: GO 21343
21342: POP
// end ; if p2 = game_save_mode then
21343: LD_VAR 0 2
21347: PUSH
21348: LD_INT 102
21350: EQUAL
21351: IFFALSE 21406
// begin if p3 = 1 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 1
21360: EQUAL
21361: IFFALSE 21373
// globalGameSaveCounter := p4 ;
21363: LD_ADDR_EXP 50
21367: PUSH
21368: LD_VAR 0 4
21372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21373: LD_VAR 0 3
21377: PUSH
21378: LD_INT 2
21380: EQUAL
21381: PUSH
21382: LD_EXP 50
21386: AND
21387: IFFALSE 21406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21389: LD_STRING setGameSaveCounter(
21391: PUSH
21392: LD_EXP 50
21396: STR
21397: PUSH
21398: LD_STRING )
21400: STR
21401: PPUSH
21402: CALL_OW 559
// end ; end ;
21406: LD_VAR 0 7
21410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21411: LD_INT 0
21413: PPUSH
// streamModeActive := false ;
21414: LD_ADDR_EXP 51
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// normalCounter := 36 ;
21422: LD_ADDR_EXP 52
21426: PUSH
21427: LD_INT 36
21429: ST_TO_ADDR
// hardcoreCounter := 18 ;
21430: LD_ADDR_EXP 53
21434: PUSH
21435: LD_INT 18
21437: ST_TO_ADDR
// sRocket := false ;
21438: LD_ADDR_EXP 56
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sSpeed := false ;
21446: LD_ADDR_EXP 55
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sEngine := false ;
21454: LD_ADDR_EXP 57
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sSpec := false ;
21462: LD_ADDR_EXP 54
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sLevel := false ;
21470: LD_ADDR_EXP 58
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sArmoury := false ;
21478: LD_ADDR_EXP 59
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sRadar := false ;
21486: LD_ADDR_EXP 60
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sBunker := false ;
21494: LD_ADDR_EXP 61
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sHack := false ;
21502: LD_ADDR_EXP 62
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sFire := false ;
21510: LD_ADDR_EXP 63
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sRefresh := false ;
21518: LD_ADDR_EXP 64
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sExp := false ;
21526: LD_ADDR_EXP 65
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sDepot := false ;
21534: LD_ADDR_EXP 66
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sFlag := false ;
21542: LD_ADDR_EXP 67
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sKamikadze := false ;
21550: LD_ADDR_EXP 75
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sTroll := false ;
21558: LD_ADDR_EXP 76
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sSlow := false ;
21566: LD_ADDR_EXP 77
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sLack := false ;
21574: LD_ADDR_EXP 78
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sTank := false ;
21582: LD_ADDR_EXP 80
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sRemote := false ;
21590: LD_ADDR_EXP 81
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sPowell := false ;
21598: LD_ADDR_EXP 82
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sTeleport := false ;
21606: LD_ADDR_EXP 85
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sOilTower := false ;
21614: LD_ADDR_EXP 87
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sShovel := false ;
21622: LD_ADDR_EXP 88
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sSheik := false ;
21630: LD_ADDR_EXP 89
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sEarthquake := false ;
21638: LD_ADDR_EXP 91
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sAI := false ;
21646: LD_ADDR_EXP 92
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sCargo := false ;
21654: LD_ADDR_EXP 95
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sDLaser := false ;
21662: LD_ADDR_EXP 96
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sExchange := false ;
21670: LD_ADDR_EXP 97
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sFac := false ;
21678: LD_ADDR_EXP 98
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sPower := false ;
21686: LD_ADDR_EXP 99
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sRandom := false ;
21694: LD_ADDR_EXP 100
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sShield := false ;
21702: LD_ADDR_EXP 101
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sTime := false ;
21710: LD_ADDR_EXP 102
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sTools := false ;
21718: LD_ADDR_EXP 103
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sSold := false ;
21726: LD_ADDR_EXP 68
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sDiff := false ;
21734: LD_ADDR_EXP 69
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sFog := false ;
21742: LD_ADDR_EXP 72
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sReset := false ;
21750: LD_ADDR_EXP 73
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sSun := false ;
21758: LD_ADDR_EXP 74
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sTiger := false ;
21766: LD_ADDR_EXP 70
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sBomb := false ;
21774: LD_ADDR_EXP 71
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sWound := false ;
21782: LD_ADDR_EXP 79
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sBetray := false ;
21790: LD_ADDR_EXP 83
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sContamin := false ;
21798: LD_ADDR_EXP 84
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sOil := false ;
21806: LD_ADDR_EXP 86
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sStu := false ;
21814: LD_ADDR_EXP 90
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sBazooka := false ;
21822: LD_ADDR_EXP 93
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sMortar := false ;
21830: LD_ADDR_EXP 94
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sRanger := false ;
21838: LD_ADDR_EXP 104
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sComputer := false ;
21846: LD_ADDR_EXP 105
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// s30 := false ;
21854: LD_ADDR_EXP 106
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// s60 := false ;
21862: LD_ADDR_EXP 107
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// end ;
21870: LD_VAR 0 1
21874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
// result := [ ] ;
21884: LD_ADDR_VAR 0 2
21888: PUSH
21889: EMPTY
21890: ST_TO_ADDR
// if campaign_id = 1 then
21891: LD_OWVAR 69
21895: PUSH
21896: LD_INT 1
21898: EQUAL
21899: IFFALSE 25065
// begin case mission_number of 1 :
21901: LD_OWVAR 70
21905: PUSH
21906: LD_INT 1
21908: DOUBLE
21909: EQUAL
21910: IFTRUE 21914
21912: GO 21990
21914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: LD_INT 11
21928: PUSH
21929: LD_INT 12
21931: PUSH
21932: LD_INT 15
21934: PUSH
21935: LD_INT 16
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 26
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 101
21960: PUSH
21961: LD_INT 102
21963: PUSH
21964: LD_INT 106
21966: PUSH
21967: LD_INT 116
21969: PUSH
21970: LD_INT 117
21972: PUSH
21973: LD_INT 118
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: ST_TO_ADDR
21988: GO 25063
21990: LD_INT 2
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 21998
21996: GO 22082
21998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21999: LD_ADDR_VAR 0 2
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 4
22009: PUSH
22010: LD_INT 11
22012: PUSH
22013: LD_INT 12
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_INT 23
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 101
22044: PUSH
22045: LD_INT 102
22047: PUSH
22048: LD_INT 105
22050: PUSH
22051: LD_INT 106
22053: PUSH
22054: LD_INT 108
22056: PUSH
22057: LD_INT 116
22059: PUSH
22060: LD_INT 117
22062: PUSH
22063: LD_INT 118
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: ST_TO_ADDR
22080: GO 25063
22082: LD_INT 3
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22178
22090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: LD_INT 11
22107: PUSH
22108: LD_INT 12
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 16
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 36
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 105
22146: PUSH
22147: LD_INT 106
22149: PUSH
22150: LD_INT 108
22152: PUSH
22153: LD_INT 116
22155: PUSH
22156: LD_INT 117
22158: PUSH
22159: LD_INT 118
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 25063
22178: LD_INT 4
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22282
22186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 11
22206: PUSH
22207: LD_INT 12
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 16
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 26
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 101
22244: PUSH
22245: LD_INT 102
22247: PUSH
22248: LD_INT 105
22250: PUSH
22251: LD_INT 106
22253: PUSH
22254: LD_INT 108
22256: PUSH
22257: LD_INT 116
22259: PUSH
22260: LD_INT 117
22262: PUSH
22263: LD_INT 118
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: ST_TO_ADDR
22280: GO 25063
22282: LD_INT 5
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22402
22290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 8
22310: PUSH
22311: LD_INT 11
22313: PUSH
22314: LD_INT 12
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 22
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: LD_INT 25
22331: PUSH
22332: LD_INT 26
22334: PUSH
22335: LD_INT 36
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 101
22356: PUSH
22357: LD_INT 102
22359: PUSH
22360: LD_INT 105
22362: PUSH
22363: LD_INT 106
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 112
22374: PUSH
22375: LD_INT 116
22377: PUSH
22378: LD_INT 117
22380: PUSH
22381: LD_INT 118
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: ST_TO_ADDR
22400: GO 25063
22402: LD_INT 6
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22542
22410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22411: LD_ADDR_VAR 0 2
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 8
22430: PUSH
22431: LD_INT 11
22433: PUSH
22434: LD_INT 12
22436: PUSH
22437: LD_INT 15
22439: PUSH
22440: LD_INT 16
22442: PUSH
22443: LD_INT 20
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_INT 23
22454: PUSH
22455: LD_INT 25
22457: PUSH
22458: LD_INT 26
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 31
22466: PUSH
22467: LD_INT 32
22469: PUSH
22470: LD_INT 36
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 101
22496: PUSH
22497: LD_INT 102
22499: PUSH
22500: LD_INT 105
22502: PUSH
22503: LD_INT 106
22505: PUSH
22506: LD_INT 108
22508: PUSH
22509: LD_INT 109
22511: PUSH
22512: LD_INT 112
22514: PUSH
22515: LD_INT 116
22517: PUSH
22518: LD_INT 117
22520: PUSH
22521: LD_INT 118
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: ST_TO_ADDR
22540: GO 25063
22542: LD_INT 7
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22662
22550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 4
22561: PUSH
22562: LD_INT 5
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 20
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 23
22591: PUSH
22592: LD_INT 25
22594: PUSH
22595: LD_INT 26
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 101
22616: PUSH
22617: LD_INT 102
22619: PUSH
22620: LD_INT 103
22622: PUSH
22623: LD_INT 105
22625: PUSH
22626: LD_INT 106
22628: PUSH
22629: LD_INT 108
22631: PUSH
22632: LD_INT 112
22634: PUSH
22635: LD_INT 116
22637: PUSH
22638: LD_INT 117
22640: PUSH
22641: LD_INT 118
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 25063
22662: LD_INT 8
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22810
22670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 4
22681: PUSH
22682: LD_INT 5
22684: PUSH
22685: LD_INT 6
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: LD_INT 8
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 12
22699: PUSH
22700: LD_INT 15
22702: PUSH
22703: LD_INT 16
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 25
22720: PUSH
22721: LD_INT 26
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 31
22729: PUSH
22730: LD_INT 32
22732: PUSH
22733: LD_INT 36
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 101
22760: PUSH
22761: LD_INT 102
22763: PUSH
22764: LD_INT 103
22766: PUSH
22767: LD_INT 105
22769: PUSH
22770: LD_INT 106
22772: PUSH
22773: LD_INT 108
22775: PUSH
22776: LD_INT 109
22778: PUSH
22779: LD_INT 112
22781: PUSH
22782: LD_INT 116
22784: PUSH
22785: LD_INT 117
22787: PUSH
22788: LD_INT 118
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 25063
22810: LD_INT 9
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22966
22818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: LD_INT 6
22835: PUSH
22836: LD_INT 7
22838: PUSH
22839: LD_INT 8
22841: PUSH
22842: LD_INT 11
22844: PUSH
22845: LD_INT 12
22847: PUSH
22848: LD_INT 15
22850: PUSH
22851: LD_INT 16
22853: PUSH
22854: LD_INT 20
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 25
22868: PUSH
22869: LD_INT 26
22871: PUSH
22872: LD_INT 28
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 31
22880: PUSH
22881: LD_INT 32
22883: PUSH
22884: LD_INT 36
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 101
22912: PUSH
22913: LD_INT 102
22915: PUSH
22916: LD_INT 103
22918: PUSH
22919: LD_INT 105
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 108
22927: PUSH
22928: LD_INT 109
22930: PUSH
22931: LD_INT 112
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: LD_INT 116
22939: PUSH
22940: LD_INT 117
22942: PUSH
22943: LD_INT 118
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: ST_TO_ADDR
22964: GO 25063
22966: LD_INT 10
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 23170
22974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 6
22991: PUSH
22992: LD_INT 7
22994: PUSH
22995: LD_INT 8
22997: PUSH
22998: LD_INT 9
23000: PUSH
23001: LD_INT 10
23003: PUSH
23004: LD_INT 11
23006: PUSH
23007: LD_INT 12
23009: PUSH
23010: LD_INT 13
23012: PUSH
23013: LD_INT 14
23015: PUSH
23016: LD_INT 15
23018: PUSH
23019: LD_INT 16
23021: PUSH
23022: LD_INT 17
23024: PUSH
23025: LD_INT 18
23027: PUSH
23028: LD_INT 19
23030: PUSH
23031: LD_INT 20
23033: PUSH
23034: LD_INT 21
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_INT 23
23042: PUSH
23043: LD_INT 24
23045: PUSH
23046: LD_INT 25
23048: PUSH
23049: LD_INT 26
23051: PUSH
23052: LD_INT 28
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: LD_INT 31
23060: PUSH
23061: LD_INT 32
23063: PUSH
23064: LD_INT 36
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 101
23100: PUSH
23101: LD_INT 102
23103: PUSH
23104: LD_INT 103
23106: PUSH
23107: LD_INT 104
23109: PUSH
23110: LD_INT 105
23112: PUSH
23113: LD_INT 106
23115: PUSH
23116: LD_INT 107
23118: PUSH
23119: LD_INT 108
23121: PUSH
23122: LD_INT 109
23124: PUSH
23125: LD_INT 110
23127: PUSH
23128: LD_INT 111
23130: PUSH
23131: LD_INT 112
23133: PUSH
23134: LD_INT 114
23136: PUSH
23137: LD_INT 116
23139: PUSH
23140: LD_INT 117
23142: PUSH
23143: LD_INT 118
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 25063
23170: LD_INT 11
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23382
23178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: LD_INT 4
23192: PUSH
23193: LD_INT 5
23195: PUSH
23196: LD_INT 6
23198: PUSH
23199: LD_INT 7
23201: PUSH
23202: LD_INT 8
23204: PUSH
23205: LD_INT 9
23207: PUSH
23208: LD_INT 10
23210: PUSH
23211: LD_INT 11
23213: PUSH
23214: LD_INT 12
23216: PUSH
23217: LD_INT 13
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 15
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 17
23231: PUSH
23232: LD_INT 18
23234: PUSH
23235: LD_INT 19
23237: PUSH
23238: LD_INT 20
23240: PUSH
23241: LD_INT 21
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_INT 23
23249: PUSH
23250: LD_INT 24
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 26
23258: PUSH
23259: LD_INT 28
23261: PUSH
23262: LD_INT 30
23264: PUSH
23265: LD_INT 31
23267: PUSH
23268: LD_INT 32
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 36
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 101
23312: PUSH
23313: LD_INT 102
23315: PUSH
23316: LD_INT 103
23318: PUSH
23319: LD_INT 104
23321: PUSH
23322: LD_INT 105
23324: PUSH
23325: LD_INT 106
23327: PUSH
23328: LD_INT 107
23330: PUSH
23331: LD_INT 108
23333: PUSH
23334: LD_INT 109
23336: PUSH
23337: LD_INT 110
23339: PUSH
23340: LD_INT 111
23342: PUSH
23343: LD_INT 112
23345: PUSH
23346: LD_INT 114
23348: PUSH
23349: LD_INT 116
23351: PUSH
23352: LD_INT 117
23354: PUSH
23355: LD_INT 118
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: ST_TO_ADDR
23380: GO 25063
23382: LD_INT 12
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23610
23390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 6
23413: PUSH
23414: LD_INT 7
23416: PUSH
23417: LD_INT 8
23419: PUSH
23420: LD_INT 9
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 12
23431: PUSH
23432: LD_INT 13
23434: PUSH
23435: LD_INT 14
23437: PUSH
23438: LD_INT 15
23440: PUSH
23441: LD_INT 16
23443: PUSH
23444: LD_INT 17
23446: PUSH
23447: LD_INT 18
23449: PUSH
23450: LD_INT 19
23452: PUSH
23453: LD_INT 20
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 26
23473: PUSH
23474: LD_INT 27
23476: PUSH
23477: LD_INT 28
23479: PUSH
23480: LD_INT 30
23482: PUSH
23483: LD_INT 31
23485: PUSH
23486: LD_INT 32
23488: PUSH
23489: LD_INT 33
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_INT 36
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 101
23536: PUSH
23537: LD_INT 102
23539: PUSH
23540: LD_INT 103
23542: PUSH
23543: LD_INT 104
23545: PUSH
23546: LD_INT 105
23548: PUSH
23549: LD_INT 106
23551: PUSH
23552: LD_INT 107
23554: PUSH
23555: LD_INT 108
23557: PUSH
23558: LD_INT 109
23560: PUSH
23561: LD_INT 110
23563: PUSH
23564: LD_INT 111
23566: PUSH
23567: LD_INT 112
23569: PUSH
23570: LD_INT 113
23572: PUSH
23573: LD_INT 114
23575: PUSH
23576: LD_INT 116
23578: PUSH
23579: LD_INT 117
23581: PUSH
23582: LD_INT 118
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 25063
23610: LD_INT 13
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23826
23618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23619: LD_ADDR_VAR 0 2
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 5
23638: PUSH
23639: LD_INT 8
23641: PUSH
23642: LD_INT 9
23644: PUSH
23645: LD_INT 10
23647: PUSH
23648: LD_INT 11
23650: PUSH
23651: LD_INT 12
23653: PUSH
23654: LD_INT 14
23656: PUSH
23657: LD_INT 15
23659: PUSH
23660: LD_INT 16
23662: PUSH
23663: LD_INT 17
23665: PUSH
23666: LD_INT 18
23668: PUSH
23669: LD_INT 19
23671: PUSH
23672: LD_INT 20
23674: PUSH
23675: LD_INT 21
23677: PUSH
23678: LD_INT 22
23680: PUSH
23681: LD_INT 23
23683: PUSH
23684: LD_INT 24
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 26
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 28
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 32
23707: PUSH
23708: LD_INT 33
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 36
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 101
23752: PUSH
23753: LD_INT 102
23755: PUSH
23756: LD_INT 103
23758: PUSH
23759: LD_INT 104
23761: PUSH
23762: LD_INT 105
23764: PUSH
23765: LD_INT 106
23767: PUSH
23768: LD_INT 107
23770: PUSH
23771: LD_INT 108
23773: PUSH
23774: LD_INT 109
23776: PUSH
23777: LD_INT 110
23779: PUSH
23780: LD_INT 111
23782: PUSH
23783: LD_INT 112
23785: PUSH
23786: LD_INT 113
23788: PUSH
23789: LD_INT 114
23791: PUSH
23792: LD_INT 116
23794: PUSH
23795: LD_INT 117
23797: PUSH
23798: LD_INT 118
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: ST_TO_ADDR
23824: GO 25063
23826: LD_INT 14
23828: DOUBLE
23829: EQUAL
23830: IFTRUE 23834
23832: GO 24058
23834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: LD_INT 5
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: LD_INT 7
23860: PUSH
23861: LD_INT 8
23863: PUSH
23864: LD_INT 9
23866: PUSH
23867: LD_INT 10
23869: PUSH
23870: LD_INT 11
23872: PUSH
23873: LD_INT 12
23875: PUSH
23876: LD_INT 13
23878: PUSH
23879: LD_INT 14
23881: PUSH
23882: LD_INT 15
23884: PUSH
23885: LD_INT 16
23887: PUSH
23888: LD_INT 17
23890: PUSH
23891: LD_INT 18
23893: PUSH
23894: LD_INT 19
23896: PUSH
23897: LD_INT 20
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_INT 23
23908: PUSH
23909: LD_INT 24
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 26
23917: PUSH
23918: LD_INT 27
23920: PUSH
23921: LD_INT 28
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 31
23932: PUSH
23933: LD_INT 32
23935: PUSH
23936: LD_INT 33
23938: PUSH
23939: LD_INT 34
23941: PUSH
23942: LD_INT 36
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 116
24026: PUSH
24027: LD_INT 117
24029: PUSH
24030: LD_INT 118
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 25063
24058: LD_INT 15
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24290
24066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 6
24089: PUSH
24090: LD_INT 7
24092: PUSH
24093: LD_INT 8
24095: PUSH
24096: LD_INT 9
24098: PUSH
24099: LD_INT 10
24101: PUSH
24102: LD_INT 11
24104: PUSH
24105: LD_INT 12
24107: PUSH
24108: LD_INT 13
24110: PUSH
24111: LD_INT 14
24113: PUSH
24114: LD_INT 15
24116: PUSH
24117: LD_INT 16
24119: PUSH
24120: LD_INT 17
24122: PUSH
24123: LD_INT 18
24125: PUSH
24126: LD_INT 19
24128: PUSH
24129: LD_INT 20
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 26
24149: PUSH
24150: LD_INT 27
24152: PUSH
24153: LD_INT 28
24155: PUSH
24156: LD_INT 29
24158: PUSH
24159: LD_INT 30
24161: PUSH
24162: LD_INT 31
24164: PUSH
24165: LD_INT 32
24167: PUSH
24168: LD_INT 33
24170: PUSH
24171: LD_INT 34
24173: PUSH
24174: LD_INT 36
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 101
24216: PUSH
24217: LD_INT 102
24219: PUSH
24220: LD_INT 103
24222: PUSH
24223: LD_INT 104
24225: PUSH
24226: LD_INT 105
24228: PUSH
24229: LD_INT 106
24231: PUSH
24232: LD_INT 107
24234: PUSH
24235: LD_INT 108
24237: PUSH
24238: LD_INT 109
24240: PUSH
24241: LD_INT 110
24243: PUSH
24244: LD_INT 111
24246: PUSH
24247: LD_INT 112
24249: PUSH
24250: LD_INT 113
24252: PUSH
24253: LD_INT 114
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: ST_TO_ADDR
24288: GO 25063
24290: LD_INT 16
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24434
24298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: LD_INT 7
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 15
24324: PUSH
24325: LD_INT 16
24327: PUSH
24328: LD_INT 20
24330: PUSH
24331: LD_INT 21
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 23
24339: PUSH
24340: LD_INT 25
24342: PUSH
24343: LD_INT 26
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 31
24351: PUSH
24352: LD_INT 32
24354: PUSH
24355: LD_INT 33
24357: PUSH
24358: LD_INT 34
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 101
24384: PUSH
24385: LD_INT 102
24387: PUSH
24388: LD_INT 103
24390: PUSH
24391: LD_INT 106
24393: PUSH
24394: LD_INT 108
24396: PUSH
24397: LD_INT 112
24399: PUSH
24400: LD_INT 113
24402: PUSH
24403: LD_INT 114
24405: PUSH
24406: LD_INT 116
24408: PUSH
24409: LD_INT 117
24411: PUSH
24412: LD_INT 118
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 25063
24434: LD_INT 17
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24666
24442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24443: LD_ADDR_VAR 0 2
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 4
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: LD_INT 6
24465: PUSH
24466: LD_INT 7
24468: PUSH
24469: LD_INT 8
24471: PUSH
24472: LD_INT 9
24474: PUSH
24475: LD_INT 10
24477: PUSH
24478: LD_INT 11
24480: PUSH
24481: LD_INT 12
24483: PUSH
24484: LD_INT 13
24486: PUSH
24487: LD_INT 14
24489: PUSH
24490: LD_INT 15
24492: PUSH
24493: LD_INT 16
24495: PUSH
24496: LD_INT 17
24498: PUSH
24499: LD_INT 18
24501: PUSH
24502: LD_INT 19
24504: PUSH
24505: LD_INT 20
24507: PUSH
24508: LD_INT 21
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_INT 23
24516: PUSH
24517: LD_INT 24
24519: PUSH
24520: LD_INT 25
24522: PUSH
24523: LD_INT 26
24525: PUSH
24526: LD_INT 27
24528: PUSH
24529: LD_INT 28
24531: PUSH
24532: LD_INT 29
24534: PUSH
24535: LD_INT 30
24537: PUSH
24538: LD_INT 31
24540: PUSH
24541: LD_INT 32
24543: PUSH
24544: LD_INT 33
24546: PUSH
24547: LD_INT 34
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 101
24592: PUSH
24593: LD_INT 102
24595: PUSH
24596: LD_INT 103
24598: PUSH
24599: LD_INT 104
24601: PUSH
24602: LD_INT 105
24604: PUSH
24605: LD_INT 106
24607: PUSH
24608: LD_INT 107
24610: PUSH
24611: LD_INT 108
24613: PUSH
24614: LD_INT 109
24616: PUSH
24617: LD_INT 110
24619: PUSH
24620: LD_INT 111
24622: PUSH
24623: LD_INT 112
24625: PUSH
24626: LD_INT 113
24628: PUSH
24629: LD_INT 114
24631: PUSH
24632: LD_INT 116
24634: PUSH
24635: LD_INT 117
24637: PUSH
24638: LD_INT 118
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: ST_TO_ADDR
24664: GO 25063
24666: LD_INT 18
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24822
24674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24675: LD_ADDR_VAR 0 2
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 4
24685: PUSH
24686: LD_INT 5
24688: PUSH
24689: LD_INT 7
24691: PUSH
24692: LD_INT 11
24694: PUSH
24695: LD_INT 12
24697: PUSH
24698: LD_INT 15
24700: PUSH
24701: LD_INT 16
24703: PUSH
24704: LD_INT 20
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_INT 23
24715: PUSH
24716: LD_INT 25
24718: PUSH
24719: LD_INT 26
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 31
24727: PUSH
24728: LD_INT 32
24730: PUSH
24731: LD_INT 33
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 35
24739: PUSH
24740: LD_INT 36
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 101
24768: PUSH
24769: LD_INT 102
24771: PUSH
24772: LD_INT 103
24774: PUSH
24775: LD_INT 106
24777: PUSH
24778: LD_INT 108
24780: PUSH
24781: LD_INT 112
24783: PUSH
24784: LD_INT 113
24786: PUSH
24787: LD_INT 114
24789: PUSH
24790: LD_INT 115
24792: PUSH
24793: LD_INT 116
24795: PUSH
24796: LD_INT 117
24798: PUSH
24799: LD_INT 118
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25063
24822: LD_INT 19
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 25062
24830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: LD_INT 6
24853: PUSH
24854: LD_INT 7
24856: PUSH
24857: LD_INT 8
24859: PUSH
24860: LD_INT 9
24862: PUSH
24863: LD_INT 10
24865: PUSH
24866: LD_INT 11
24868: PUSH
24869: LD_INT 12
24871: PUSH
24872: LD_INT 13
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: LD_INT 15
24880: PUSH
24881: LD_INT 16
24883: PUSH
24884: LD_INT 17
24886: PUSH
24887: LD_INT 18
24889: PUSH
24890: LD_INT 19
24892: PUSH
24893: LD_INT 20
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_INT 23
24904: PUSH
24905: LD_INT 24
24907: PUSH
24908: LD_INT 25
24910: PUSH
24911: LD_INT 26
24913: PUSH
24914: LD_INT 27
24916: PUSH
24917: LD_INT 28
24919: PUSH
24920: LD_INT 29
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: LD_INT 31
24928: PUSH
24929: LD_INT 32
24931: PUSH
24932: LD_INT 33
24934: PUSH
24935: LD_INT 34
24937: PUSH
24938: LD_INT 35
24940: PUSH
24941: LD_INT 36
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 101
24984: PUSH
24985: LD_INT 102
24987: PUSH
24988: LD_INT 103
24990: PUSH
24991: LD_INT 104
24993: PUSH
24994: LD_INT 105
24996: PUSH
24997: LD_INT 106
24999: PUSH
25000: LD_INT 107
25002: PUSH
25003: LD_INT 108
25005: PUSH
25006: LD_INT 109
25008: PUSH
25009: LD_INT 110
25011: PUSH
25012: LD_INT 111
25014: PUSH
25015: LD_INT 112
25017: PUSH
25018: LD_INT 113
25020: PUSH
25021: LD_INT 114
25023: PUSH
25024: LD_INT 115
25026: PUSH
25027: LD_INT 116
25029: PUSH
25030: LD_INT 117
25032: PUSH
25033: LD_INT 118
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: ST_TO_ADDR
25060: GO 25063
25062: POP
// end else
25063: GO 25294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 6
25087: PUSH
25088: LD_INT 7
25090: PUSH
25091: LD_INT 8
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: LD_INT 10
25099: PUSH
25100: LD_INT 11
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 17
25120: PUSH
25121: LD_INT 18
25123: PUSH
25124: LD_INT 19
25126: PUSH
25127: LD_INT 20
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 24
25141: PUSH
25142: LD_INT 25
25144: PUSH
25145: LD_INT 26
25147: PUSH
25148: LD_INT 27
25150: PUSH
25151: LD_INT 28
25153: PUSH
25154: LD_INT 29
25156: PUSH
25157: LD_INT 30
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 35
25174: PUSH
25175: LD_INT 36
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 104
25227: PUSH
25228: LD_INT 105
25230: PUSH
25231: LD_INT 106
25233: PUSH
25234: LD_INT 107
25236: PUSH
25237: LD_INT 108
25239: PUSH
25240: LD_INT 109
25242: PUSH
25243: LD_INT 110
25245: PUSH
25246: LD_INT 111
25248: PUSH
25249: LD_INT 112
25251: PUSH
25252: LD_INT 113
25254: PUSH
25255: LD_INT 114
25257: PUSH
25258: LD_INT 115
25260: PUSH
25261: LD_INT 116
25263: PUSH
25264: LD_INT 117
25266: PUSH
25267: LD_INT 118
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// if result then
25294: LD_VAR 0 2
25298: IFFALSE 26084
// begin normal :=  ;
25300: LD_ADDR_VAR 0 5
25304: PUSH
25305: LD_STRING 
25307: ST_TO_ADDR
// hardcore :=  ;
25308: LD_ADDR_VAR 0 6
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// active :=  ;
25316: LD_ADDR_VAR 0 7
25320: PUSH
25321: LD_STRING 
25323: ST_TO_ADDR
// for i = 1 to normalCounter do
25324: LD_ADDR_VAR 0 8
25328: PUSH
25329: DOUBLE
25330: LD_INT 1
25332: DEC
25333: ST_TO_ADDR
25334: LD_EXP 52
25338: PUSH
25339: FOR_TO
25340: IFFALSE 25441
// begin tmp := 0 ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_STRING 0
25349: ST_TO_ADDR
// if result [ 1 ] then
25350: LD_VAR 0 2
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: IFFALSE 25423
// if result [ 1 ] [ 1 ] = i then
25360: LD_VAR 0 2
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PUSH
25373: LD_VAR 0 8
25377: EQUAL
25378: IFFALSE 25423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_VAR 0 2
25397: PUSH
25398: LD_INT 1
25400: ARRAY
25401: PPUSH
25402: LD_INT 1
25404: PPUSH
25405: CALL_OW 3
25409: PPUSH
25410: CALL_OW 1
25414: ST_TO_ADDR
// tmp := 1 ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_STRING 1
25422: ST_TO_ADDR
// end ; normal := normal & tmp ;
25423: LD_ADDR_VAR 0 5
25427: PUSH
25428: LD_VAR 0 5
25432: PUSH
25433: LD_VAR 0 3
25437: STR
25438: ST_TO_ADDR
// end ;
25439: GO 25339
25441: POP
25442: POP
// for i = 1 to hardcoreCounter do
25443: LD_ADDR_VAR 0 8
25447: PUSH
25448: DOUBLE
25449: LD_INT 1
25451: DEC
25452: ST_TO_ADDR
25453: LD_EXP 53
25457: PUSH
25458: FOR_TO
25459: IFFALSE 25564
// begin tmp := 0 ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_STRING 0
25468: ST_TO_ADDR
// if result [ 2 ] then
25469: LD_VAR 0 2
25473: PUSH
25474: LD_INT 2
25476: ARRAY
25477: IFFALSE 25546
// if result [ 2 ] [ 1 ] = 100 + i then
25479: LD_VAR 0 2
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PUSH
25492: LD_INT 100
25494: PUSH
25495: LD_VAR 0 8
25499: PLUS
25500: EQUAL
25501: IFFALSE 25546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 2
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: LD_VAR 0 2
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: LD_INT 1
25527: PPUSH
25528: CALL_OW 3
25532: PPUSH
25533: CALL_OW 1
25537: ST_TO_ADDR
// tmp := 1 ;
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_STRING 1
25545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25546: LD_ADDR_VAR 0 6
25550: PUSH
25551: LD_VAR 0 6
25555: PUSH
25556: LD_VAR 0 3
25560: STR
25561: ST_TO_ADDR
// end ;
25562: GO 25458
25564: POP
25565: POP
// if isGameLoad then
25566: LD_VAR 0 1
25570: IFFALSE 26045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_EXP 56
25581: PUSH
25582: LD_EXP 55
25586: PUSH
25587: LD_EXP 57
25591: PUSH
25592: LD_EXP 54
25596: PUSH
25597: LD_EXP 58
25601: PUSH
25602: LD_EXP 59
25606: PUSH
25607: LD_EXP 60
25611: PUSH
25612: LD_EXP 61
25616: PUSH
25617: LD_EXP 62
25621: PUSH
25622: LD_EXP 63
25626: PUSH
25627: LD_EXP 64
25631: PUSH
25632: LD_EXP 65
25636: PUSH
25637: LD_EXP 66
25641: PUSH
25642: LD_EXP 67
25646: PUSH
25647: LD_EXP 75
25651: PUSH
25652: LD_EXP 76
25656: PUSH
25657: LD_EXP 77
25661: PUSH
25662: LD_EXP 78
25666: PUSH
25667: LD_EXP 80
25671: PUSH
25672: LD_EXP 81
25676: PUSH
25677: LD_EXP 82
25681: PUSH
25682: LD_EXP 85
25686: PUSH
25687: LD_EXP 87
25691: PUSH
25692: LD_EXP 88
25696: PUSH
25697: LD_EXP 89
25701: PUSH
25702: LD_EXP 91
25706: PUSH
25707: LD_EXP 92
25711: PUSH
25712: LD_EXP 95
25716: PUSH
25717: LD_EXP 96
25721: PUSH
25722: LD_EXP 97
25726: PUSH
25727: LD_EXP 98
25731: PUSH
25732: LD_EXP 99
25736: PUSH
25737: LD_EXP 100
25741: PUSH
25742: LD_EXP 101
25746: PUSH
25747: LD_EXP 102
25751: PUSH
25752: LD_EXP 103
25756: PUSH
25757: LD_EXP 68
25761: PUSH
25762: LD_EXP 69
25766: PUSH
25767: LD_EXP 72
25771: PUSH
25772: LD_EXP 73
25776: PUSH
25777: LD_EXP 74
25781: PUSH
25782: LD_EXP 70
25786: PUSH
25787: LD_EXP 71
25791: PUSH
25792: LD_EXP 79
25796: PUSH
25797: LD_EXP 83
25801: PUSH
25802: LD_EXP 84
25806: PUSH
25807: LD_EXP 86
25811: PUSH
25812: LD_EXP 90
25816: PUSH
25817: LD_EXP 93
25821: PUSH
25822: LD_EXP 94
25826: PUSH
25827: LD_EXP 104
25831: PUSH
25832: LD_EXP 105
25836: PUSH
25837: LD_EXP 106
25841: PUSH
25842: LD_EXP 107
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// tmp :=  ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_STRING 
25910: ST_TO_ADDR
// for i = 1 to normalCounter do
25911: LD_ADDR_VAR 0 8
25915: PUSH
25916: DOUBLE
25917: LD_INT 1
25919: DEC
25920: ST_TO_ADDR
25921: LD_EXP 52
25925: PUSH
25926: FOR_TO
25927: IFFALSE 25963
// begin if flags [ i ] then
25929: LD_VAR 0 4
25933: PUSH
25934: LD_VAR 0 8
25938: ARRAY
25939: IFFALSE 25961
// tmp := tmp & i & ; ;
25941: LD_ADDR_VAR 0 3
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_VAR 0 8
25955: STR
25956: PUSH
25957: LD_STRING ;
25959: STR
25960: ST_TO_ADDR
// end ;
25961: GO 25926
25963: POP
25964: POP
// for i = 1 to hardcoreCounter do
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_EXP 53
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26027
// begin if flags [ normalCounter + i ] then
25983: LD_VAR 0 4
25987: PUSH
25988: LD_EXP 52
25992: PUSH
25993: LD_VAR 0 8
25997: PLUS
25998: ARRAY
25999: IFFALSE 26025
// tmp := tmp & ( 100 + i ) & ; ;
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_VAR 0 3
26010: PUSH
26011: LD_INT 100
26013: PUSH
26014: LD_VAR 0 8
26018: PLUS
26019: STR
26020: PUSH
26021: LD_STRING ;
26023: STR
26024: ST_TO_ADDR
// end ;
26025: GO 25980
26027: POP
26028: POP
// if tmp then
26029: LD_VAR 0 3
26033: IFFALSE 26045
// active := tmp ;
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: LD_VAR 0 3
26044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26045: LD_STRING getStreamItemsFromMission("
26047: PUSH
26048: LD_VAR 0 5
26052: STR
26053: PUSH
26054: LD_STRING ","
26056: STR
26057: PUSH
26058: LD_VAR 0 6
26062: STR
26063: PUSH
26064: LD_STRING ","
26066: STR
26067: PUSH
26068: LD_VAR 0 7
26072: STR
26073: PUSH
26074: LD_STRING ")
26076: STR
26077: PPUSH
26078: CALL_OW 559
// end else
26082: GO 26091
// ToLua ( getStreamItemsFromMission("","","") ) ;
26084: LD_STRING getStreamItemsFromMission("","","")
26086: PPUSH
26087: CALL_OW 559
// end ;
26091: LD_VAR 0 2
26095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26096: LD_EXP 51
26100: PUSH
26101: LD_EXP 56
26105: AND
26106: IFFALSE 26230
26108: GO 26110
26110: DISABLE
26111: LD_INT 0
26113: PPUSH
26114: PPUSH
// begin enable ;
26115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_OWVAR 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 34
26138: PUSH
26139: LD_INT 7
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 34
26148: PUSH
26149: LD_INT 45
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 34
26158: PUSH
26159: LD_INT 28
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 34
26168: PUSH
26169: LD_INT 47
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 2
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26230
// for i in tmp do
26201: LD_ADDR_VAR 0 1
26205: PUSH
26206: LD_VAR 0 2
26210: PUSH
26211: FOR_IN
26212: IFFALSE 26228
// begin SetLives ( i , 0 ) ;
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL_OW 234
// end ;
26226: GO 26211
26228: POP
26229: POP
// end ;
26230: PPOPN 2
26232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26233: LD_EXP 51
26237: PUSH
26238: LD_EXP 57
26242: AND
26243: IFFALSE 26327
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
26251: PPUSH
// begin enable ;
26252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_OWVAR 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 32
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ST_TO_ADDR
// if not tmp then
26289: LD_VAR 0 2
26293: NOT
26294: IFFALSE 26298
// exit ;
26296: GO 26327
// for i in tmp do
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_VAR 0 2
26307: PUSH
26308: FOR_IN
26309: IFFALSE 26325
// begin SetLives ( i , 0 ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: LD_INT 0
26318: PPUSH
26319: CALL_OW 234
// end ;
26323: GO 26308
26325: POP
26326: POP
// end ;
26327: PPOPN 2
26329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26330: LD_EXP 51
26334: PUSH
26335: LD_EXP 54
26339: AND
26340: IFFALSE 26433
26342: GO 26344
26344: DISABLE
26345: LD_INT 0
26347: PPUSH
// begin enable ;
26348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26349: LD_ADDR_VAR 0 1
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 25
26371: PUSH
26372: LD_INT 5
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 25
26381: PUSH
26382: LD_INT 9
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 25
26391: PUSH
26392: LD_INT 8
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26431
// begin SetClass ( i , 1 ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: CALL_OW 336
// end ;
26429: GO 26414
26431: POP
26432: POP
// end ;
26433: PPOPN 1
26435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26436: LD_EXP 51
26440: PUSH
26441: LD_EXP 55
26445: AND
26446: PUSH
26447: LD_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: LESS
26455: AND
26456: IFFALSE 26470
26458: GO 26460
26460: DISABLE
// begin enable ;
26461: ENABLE
// game_speed := 7 ;
26462: LD_ADDR_OWVAR 65
26466: PUSH
26467: LD_INT 7
26469: ST_TO_ADDR
// end ;
26470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26471: LD_EXP 51
26475: PUSH
26476: LD_EXP 58
26480: AND
26481: IFFALSE 26683
26483: GO 26485
26485: DISABLE
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
26490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26491: LD_ADDR_VAR 0 3
26495: PUSH
26496: LD_INT 81
26498: PUSH
26499: LD_OWVAR 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 21
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PPUSH
26522: CALL_OW 69
26526: ST_TO_ADDR
// if not tmp then
26527: LD_VAR 0 3
26531: NOT
26532: IFFALSE 26536
// exit ;
26534: GO 26683
// if tmp > 5 then
26536: LD_VAR 0 3
26540: PUSH
26541: LD_INT 5
26543: GREATER
26544: IFFALSE 26556
// k := 5 else
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_INT 5
26553: ST_TO_ADDR
26554: GO 26566
// k := tmp ;
26556: LD_ADDR_VAR 0 2
26560: PUSH
26561: LD_VAR 0 3
26565: ST_TO_ADDR
// for i := 1 to k do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 2
26580: PUSH
26581: FOR_TO
26582: IFFALSE 26681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 1
26593: ARRAY
26594: PPUSH
26595: LD_VAR 0 1
26599: PUSH
26600: LD_INT 4
26602: MOD
26603: PUSH
26604: LD_INT 1
26606: PLUS
26607: PPUSH
26608: CALL_OW 259
26612: PUSH
26613: LD_INT 10
26615: LESS
26616: IFFALSE 26679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26618: LD_VAR 0 3
26622: PUSH
26623: LD_VAR 0 1
26627: ARRAY
26628: PPUSH
26629: LD_VAR 0 1
26633: PUSH
26634: LD_INT 4
26636: MOD
26637: PUSH
26638: LD_INT 1
26640: PLUS
26641: PPUSH
26642: LD_VAR 0 3
26646: PUSH
26647: LD_VAR 0 1
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 1
26657: PUSH
26658: LD_INT 4
26660: MOD
26661: PUSH
26662: LD_INT 1
26664: PLUS
26665: PPUSH
26666: CALL_OW 259
26670: PUSH
26671: LD_INT 1
26673: PLUS
26674: PPUSH
26675: CALL_OW 237
26679: GO 26581
26681: POP
26682: POP
// end ;
26683: PPOPN 3
26685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26686: LD_EXP 51
26690: PUSH
26691: LD_EXP 59
26695: AND
26696: IFFALSE 26716
26698: GO 26700
26700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26701: LD_INT 4
26703: PPUSH
26704: LD_OWVAR 2
26708: PPUSH
26709: LD_INT 0
26711: PPUSH
26712: CALL_OW 324
26716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26717: LD_EXP 51
26721: PUSH
26722: LD_EXP 88
26726: AND
26727: IFFALSE 26747
26729: GO 26731
26731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26732: LD_INT 19
26734: PPUSH
26735: LD_OWVAR 2
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 324
26747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26748: LD_EXP 51
26752: PUSH
26753: LD_EXP 60
26757: AND
26758: IFFALSE 26860
26760: GO 26762
26762: DISABLE
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
// begin enable ;
26767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_OWVAR 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 34
26790: PUSH
26791: LD_INT 11
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 34
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 2
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26860
// for i in tmp do
26831: LD_ADDR_VAR 0 1
26835: PUSH
26836: LD_VAR 0 2
26840: PUSH
26841: FOR_IN
26842: IFFALSE 26858
// begin SetLives ( i , 0 ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 234
// end ;
26856: GO 26841
26858: POP
26859: POP
// end ;
26860: PPOPN 2
26862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26863: LD_EXP 51
26867: PUSH
26868: LD_EXP 61
26872: AND
26873: IFFALSE 26893
26875: GO 26877
26877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26878: LD_INT 32
26880: PPUSH
26881: LD_OWVAR 2
26885: PPUSH
26886: LD_INT 0
26888: PPUSH
26889: CALL_OW 324
26893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26894: LD_EXP 51
26898: PUSH
26899: LD_EXP 62
26903: AND
26904: IFFALSE 27085
26906: GO 26908
26908: DISABLE
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
26913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_OWVAR 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 33
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27085
// side := 0 ;
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: LD_INT 0
26966: ST_TO_ADDR
// for i := 1 to 8 do
26967: LD_ADDR_VAR 0 1
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_INT 8
26979: PUSH
26980: FOR_TO
26981: IFFALSE 27029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26983: LD_OWVAR 2
26987: PUSH
26988: LD_VAR 0 1
26992: NONEQUAL
26993: PUSH
26994: LD_OWVAR 2
26998: PPUSH
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 81
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: AND
27013: IFFALSE 27027
// begin side := i ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 1
27024: ST_TO_ADDR
// break ;
27025: GO 27029
// end ;
27027: GO 26980
27029: POP
27030: POP
// if not side then
27031: LD_VAR 0 3
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27085
// for i := 1 to tmp do
27040: LD_ADDR_VAR 0 1
27044: PUSH
27045: DOUBLE
27046: LD_INT 1
27048: DEC
27049: ST_TO_ADDR
27050: LD_VAR 0 2
27054: PUSH
27055: FOR_TO
27056: IFFALSE 27083
// if Prob ( 60 ) then
27058: LD_INT 60
27060: PPUSH
27061: CALL_OW 13
27065: IFFALSE 27081
// SetSide ( i , side ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 3
27076: PPUSH
27077: CALL_OW 235
27081: GO 27055
27083: POP
27084: POP
// end ;
27085: PPOPN 3
27087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27088: LD_EXP 51
27092: PUSH
27093: LD_EXP 64
27097: AND
27098: IFFALSE 27217
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27106: LD_ADDR_VAR 0 1
27110: PUSH
27111: LD_INT 22
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 21
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 23
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: PUSH
27160: FOR_IN
27161: IFFALSE 27215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 257
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 4
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: IN
27191: IFFALSE 27213
// SetClass ( un , rand ( 1 , 4 ) ) ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: LD_INT 4
27203: PPUSH
27204: CALL_OW 12
27208: PPUSH
27209: CALL_OW 336
27213: GO 27160
27215: POP
27216: POP
// end ;
27217: PPOPN 1
27219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27220: LD_EXP 51
27224: PUSH
27225: LD_EXP 63
27229: AND
27230: IFFALSE 27309
27232: GO 27234
27234: DISABLE
27235: LD_INT 0
27237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27238: LD_ADDR_VAR 0 1
27242: PUSH
27243: LD_INT 22
27245: PUSH
27246: LD_OWVAR 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 21
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not tmp then
27274: LD_VAR 0 1
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: PPUSH
27302: LD_INT 100
27304: PPUSH
27305: CALL_OW 234
// end ;
27309: PPOPN 1
27311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27312: LD_EXP 51
27316: PUSH
27317: LD_EXP 65
27321: AND
27322: IFFALSE 27420
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27330: LD_ADDR_VAR 0 1
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 69
27365: ST_TO_ADDR
// if not tmp then
27366: LD_VAR 0 1
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 1
27382: PPUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL_OW 12
27392: ARRAY
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_INT 4
27399: PPUSH
27400: CALL_OW 12
27404: PPUSH
27405: LD_INT 3000
27407: PPUSH
27408: LD_INT 9000
27410: PPUSH
27411: CALL_OW 12
27415: PPUSH
27416: CALL_OW 492
// end ;
27420: PPOPN 1
27422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27423: LD_EXP 51
27427: PUSH
27428: LD_EXP 66
27432: AND
27433: IFFALSE 27453
27435: GO 27437
27437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27438: LD_INT 1
27440: PPUSH
27441: LD_OWVAR 2
27445: PPUSH
27446: LD_INT 0
27448: PPUSH
27449: CALL_OW 324
27453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27454: LD_EXP 51
27458: PUSH
27459: LD_EXP 67
27463: AND
27464: IFFALSE 27547
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27473: LD_ADDR_VAR 0 2
27477: PUSH
27478: LD_INT 22
27480: PUSH
27481: LD_OWVAR 2
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 21
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PPUSH
27504: CALL_OW 69
27508: ST_TO_ADDR
// if not tmp then
27509: LD_VAR 0 2
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 27547
// for i in tmp do
27518: LD_ADDR_VAR 0 1
27522: PUSH
27523: LD_VAR 0 2
27527: PUSH
27528: FOR_IN
27529: IFFALSE 27545
// SetBLevel ( i , 10 ) ;
27531: LD_VAR 0 1
27535: PPUSH
27536: LD_INT 10
27538: PPUSH
27539: CALL_OW 241
27543: GO 27528
27545: POP
27546: POP
// end ;
27547: PPOPN 2
27549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27550: LD_EXP 51
27554: PUSH
27555: LD_EXP 68
27559: AND
27560: IFFALSE 27671
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
27569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_INT 22
27577: PUSH
27578: LD_OWVAR 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 25
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 3
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27671
// un := tmp [ rand ( 1 , tmp ) ] ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_VAR 0 3
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_VAR 0 3
27632: PPUSH
27633: CALL_OW 12
27637: ARRAY
27638: ST_TO_ADDR
// if Crawls ( un ) then
27639: LD_VAR 0 2
27643: PPUSH
27644: CALL_OW 318
27648: IFFALSE 27659
// ComWalk ( un ) ;
27650: LD_VAR 0 2
27654: PPUSH
27655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_INT 5
27666: PPUSH
27667: CALL_OW 336
// end ;
27671: PPOPN 3
27673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27674: LD_EXP 51
27678: PUSH
27679: LD_EXP 69
27683: AND
27684: PUSH
27685: LD_OWVAR 67
27689: PUSH
27690: LD_INT 4
27692: LESS
27693: AND
27694: IFFALSE 27713
27696: GO 27698
27698: DISABLE
// begin Difficulty := Difficulty + 1 ;
27699: LD_ADDR_OWVAR 67
27703: PUSH
27704: LD_OWVAR 67
27708: PUSH
27709: LD_INT 1
27711: PLUS
27712: ST_TO_ADDR
// end ;
27713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27714: LD_EXP 51
27718: PUSH
27719: LD_EXP 70
27723: AND
27724: IFFALSE 27827
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
// begin for i := 1 to 5 do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: DOUBLE
27738: LD_INT 1
27740: DEC
27741: ST_TO_ADDR
27742: LD_INT 5
27744: PUSH
27745: FOR_TO
27746: IFFALSE 27825
// begin uc_nation := nation_nature ;
27748: LD_ADDR_OWVAR 21
27752: PUSH
27753: LD_INT 0
27755: ST_TO_ADDR
// uc_side := 0 ;
27756: LD_ADDR_OWVAR 20
27760: PUSH
27761: LD_INT 0
27763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27764: LD_ADDR_OWVAR 29
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 12
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// hc_agressivity := 20 ;
27779: LD_ADDR_OWVAR 35
27783: PUSH
27784: LD_INT 20
27786: ST_TO_ADDR
// hc_class := class_tiger ;
27787: LD_ADDR_OWVAR 28
27791: PUSH
27792: LD_INT 14
27794: ST_TO_ADDR
// hc_gallery :=  ;
27795: LD_ADDR_OWVAR 33
27799: PUSH
27800: LD_STRING 
27802: ST_TO_ADDR
// hc_name :=  ;
27803: LD_ADDR_OWVAR 26
27807: PUSH
27808: LD_STRING 
27810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27811: CALL_OW 44
27815: PPUSH
27816: LD_INT 0
27818: PPUSH
27819: CALL_OW 51
// end ;
27823: GO 27745
27825: POP
27826: POP
// end ;
27827: PPOPN 1
27829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27830: LD_EXP 51
27834: PUSH
27835: LD_EXP 71
27839: AND
27840: IFFALSE 27849
27842: GO 27844
27844: DISABLE
// StreamSibBomb ;
27845: CALL 27850 0 0
27849: END
// export function StreamSibBomb ; var i , x , y ; begin
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
// result := false ;
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_INT 0
27863: ST_TO_ADDR
// for i := 1 to 16 do
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_INT 16
27876: PUSH
27877: FOR_TO
27878: IFFALSE 28077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 10
27887: PUSH
27888: LD_INT 20
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 40
27896: PUSH
27897: LD_INT 50
27899: PUSH
27900: LD_INT 60
27902: PUSH
27903: LD_INT 70
27905: PUSH
27906: LD_INT 80
27908: PUSH
27909: LD_INT 90
27911: PUSH
27912: LD_INT 100
27914: PUSH
27915: LD_INT 110
27917: PUSH
27918: LD_INT 120
27920: PUSH
27921: LD_INT 130
27923: PUSH
27924: LD_INT 140
27926: PUSH
27927: LD_INT 150
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PPUSH
27950: LD_INT 15
27952: PPUSH
27953: CALL_OW 12
27957: ARRAY
27958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27959: LD_ADDR_VAR 0 4
27963: PUSH
27964: LD_INT 10
27966: PUSH
27967: LD_INT 20
27969: PUSH
27970: LD_INT 30
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 50
27978: PUSH
27979: LD_INT 60
27981: PUSH
27982: LD_INT 70
27984: PUSH
27985: LD_INT 80
27987: PUSH
27988: LD_INT 90
27990: PUSH
27991: LD_INT 100
27993: PUSH
27994: LD_INT 110
27996: PUSH
27997: LD_INT 120
27999: PUSH
28000: LD_INT 130
28002: PUSH
28003: LD_INT 140
28005: PUSH
28006: LD_INT 150
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PPUSH
28029: LD_INT 15
28031: PPUSH
28032: CALL_OW 12
28036: ARRAY
28037: ST_TO_ADDR
// if ValidHex ( x , y ) then
28038: LD_VAR 0 3
28042: PPUSH
28043: LD_VAR 0 4
28047: PPUSH
28048: CALL_OW 488
28052: IFFALSE 28075
// begin result := [ x , y ] ;
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 4
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// break ;
28073: GO 28077
// end ; end ;
28075: GO 27877
28077: POP
28078: POP
// if result then
28079: LD_VAR 0 1
28083: IFFALSE 28143
// begin ToLua ( playSibBomb() ) ;
28085: LD_STRING playSibBomb()
28087: PPUSH
28088: CALL_OW 559
// wait ( 0 0$14 ) ;
28092: LD_INT 490
28094: PPUSH
28095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28099: LD_VAR 0 1
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: PPUSH
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 2
28115: ARRAY
28116: PPUSH
28117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 1
28128: ARRAY
28129: PPUSH
28130: LD_VAR 0 1
28134: PUSH
28135: LD_INT 2
28137: ARRAY
28138: PPUSH
28139: CALL_OW 429
// end ; end ;
28143: LD_VAR 0 1
28147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28148: LD_EXP 51
28152: PUSH
28153: LD_EXP 73
28157: AND
28158: IFFALSE 28170
28160: GO 28162
28162: DISABLE
// YouLost (  ) ;
28163: LD_STRING 
28165: PPUSH
28166: CALL_OW 104
28170: END
// every 0 0$1 trigger StreamModeActive and sFog do
28171: LD_EXP 51
28175: PUSH
28176: LD_EXP 72
28180: AND
28181: IFFALSE 28195
28183: GO 28185
28185: DISABLE
// FogOff ( your_side ) ;
28186: LD_OWVAR 2
28190: PPUSH
28191: CALL_OW 344
28195: END
// every 0 0$1 trigger StreamModeActive and sSun do
28196: LD_EXP 51
28200: PUSH
28201: LD_EXP 74
28205: AND
28206: IFFALSE 28234
28208: GO 28210
28210: DISABLE
// begin solar_recharge_percent := 0 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 0
28218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28219: LD_INT 10500
28221: PPUSH
28222: CALL_OW 67
// solar_recharge_percent := 100 ;
28226: LD_ADDR_OWVAR 79
28230: PUSH
28231: LD_INT 100
28233: ST_TO_ADDR
// end ;
28234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28235: LD_EXP 51
28239: PUSH
28240: LD_EXP 75
28244: AND
28245: IFFALSE 28484
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
// begin tmp := [ ] ;
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: EMPTY
28261: ST_TO_ADDR
// for i := 1 to 6 do
28262: LD_ADDR_VAR 0 1
28266: PUSH
28267: DOUBLE
28268: LD_INT 1
28270: DEC
28271: ST_TO_ADDR
28272: LD_INT 6
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28381
// begin uc_nation := nation_nature ;
28278: LD_ADDR_OWVAR 21
28282: PUSH
28283: LD_INT 0
28285: ST_TO_ADDR
// uc_side := 0 ;
28286: LD_ADDR_OWVAR 20
28290: PUSH
28291: LD_INT 0
28293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28294: LD_ADDR_OWVAR 29
28298: PUSH
28299: LD_INT 12
28301: PUSH
28302: LD_INT 12
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// hc_agressivity := 20 ;
28309: LD_ADDR_OWVAR 35
28313: PUSH
28314: LD_INT 20
28316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28317: LD_ADDR_OWVAR 28
28321: PUSH
28322: LD_INT 17
28324: ST_TO_ADDR
// hc_gallery :=  ;
28325: LD_ADDR_OWVAR 33
28329: PUSH
28330: LD_STRING 
28332: ST_TO_ADDR
// hc_name :=  ;
28333: LD_ADDR_OWVAR 26
28337: PUSH
28338: LD_STRING 
28340: ST_TO_ADDR
// un := CreateHuman ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: CALL_OW 44
28350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_INT 1
28358: PPUSH
28359: CALL_OW 51
// tmp := tmp ^ un ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 3
28372: PUSH
28373: LD_VAR 0 2
28377: ADD
28378: ST_TO_ADDR
// end ;
28379: GO 28275
28381: POP
28382: POP
// repeat wait ( 0 0$1 ) ;
28383: LD_INT 35
28385: PPUSH
28386: CALL_OW 67
// for un in tmp do
28390: LD_ADDR_VAR 0 2
28394: PUSH
28395: LD_VAR 0 3
28399: PUSH
28400: FOR_IN
28401: IFFALSE 28475
// begin if IsDead ( un ) then
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 301
28412: IFFALSE 28432
// begin tmp := tmp diff un ;
28414: LD_ADDR_VAR 0 3
28418: PUSH
28419: LD_VAR 0 3
28423: PUSH
28424: LD_VAR 0 2
28428: DIFF
28429: ST_TO_ADDR
// continue ;
28430: GO 28400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28432: LD_VAR 0 2
28436: PPUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 69
28458: PPUSH
28459: LD_VAR 0 2
28463: PPUSH
28464: CALL_OW 74
28468: PPUSH
28469: CALL_OW 115
// end ;
28473: GO 28400
28475: POP
28476: POP
// until not tmp ;
28477: LD_VAR 0 3
28481: NOT
28482: IFFALSE 28383
// end ;
28484: PPOPN 3
28486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28487: LD_EXP 51
28491: PUSH
28492: LD_EXP 76
28496: AND
28497: IFFALSE 28551
28499: GO 28501
28501: DISABLE
// begin ToLua ( displayTroll(); ) ;
28502: LD_STRING displayTroll();
28504: PPUSH
28505: CALL_OW 559
// wait ( 3 3$00 ) ;
28509: LD_INT 6300
28511: PPUSH
28512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28516: LD_STRING hideTroll();
28518: PPUSH
28519: CALL_OW 559
// wait ( 1 1$00 ) ;
28523: LD_INT 2100
28525: PPUSH
28526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28530: LD_STRING displayTroll();
28532: PPUSH
28533: CALL_OW 559
// wait ( 1 1$00 ) ;
28537: LD_INT 2100
28539: PPUSH
28540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28544: LD_STRING hideTroll();
28546: PPUSH
28547: CALL_OW 559
// end ;
28551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28552: LD_EXP 51
28556: PUSH
28557: LD_EXP 77
28561: AND
28562: IFFALSE 28625
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin p := 0 ;
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 0
28577: ST_TO_ADDR
// repeat game_speed := 1 ;
28578: LD_ADDR_OWVAR 65
28582: PUSH
28583: LD_INT 1
28585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28586: LD_INT 35
28588: PPUSH
28589: CALL_OW 67
// p := p + 1 ;
28593: LD_ADDR_VAR 0 1
28597: PUSH
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 1
28605: PLUS
28606: ST_TO_ADDR
// until p >= 60 ;
28607: LD_VAR 0 1
28611: PUSH
28612: LD_INT 60
28614: GREATEREQUAL
28615: IFFALSE 28578
// game_speed := 4 ;
28617: LD_ADDR_OWVAR 65
28621: PUSH
28622: LD_INT 4
28624: ST_TO_ADDR
// end ;
28625: PPOPN 1
28627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28628: LD_EXP 51
28632: PUSH
28633: LD_EXP 78
28637: AND
28638: IFFALSE 28784
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28647: LD_ADDR_VAR 0 1
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_OWVAR 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 30
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 30
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not depot then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_VAR 0 1
28719: PUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 12
28732: ARRAY
28733: PPUSH
28734: CALL_OW 274
28738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 1
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 2
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 3
28776: PPUSH
28777: LD_INT 0
28779: PPUSH
28780: CALL_OW 277
// end ;
28784: PPOPN 2
28786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28787: LD_EXP 51
28791: PUSH
28792: LD_EXP 79
28796: AND
28797: IFFALSE 28894
28799: GO 28801
28801: DISABLE
28802: LD_INT 0
28804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28805: LD_ADDR_VAR 0 1
28809: PUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: LD_INT 23
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: ST_TO_ADDR
// if not tmp then
28859: LD_VAR 0 1
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28868: LD_VAR 0 1
28872: PUSH
28873: LD_INT 1
28875: PPUSH
28876: LD_VAR 0 1
28880: PPUSH
28881: CALL_OW 12
28885: ARRAY
28886: PPUSH
28887: LD_INT 200
28889: PPUSH
28890: CALL_OW 234
// end ;
28894: PPOPN 1
28896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28897: LD_EXP 51
28901: PUSH
28902: LD_EXP 80
28906: AND
28907: IFFALSE 28986
28909: GO 28911
28911: DISABLE
28912: LD_INT 0
28914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28915: LD_ADDR_VAR 0 1
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_OWVAR 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 1
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 28986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28960: LD_VAR 0 1
28964: PUSH
28965: LD_INT 1
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 12
28977: ARRAY
28978: PPUSH
28979: LD_INT 60
28981: PPUSH
28982: CALL_OW 234
// end ;
28986: PPOPN 1
28988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28989: LD_EXP 51
28993: PUSH
28994: LD_EXP 81
28998: AND
28999: IFFALSE 29098
29001: GO 29003
29003: DISABLE
29004: LD_INT 0
29006: PPUSH
29007: PPUSH
// begin enable ;
29008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29009: LD_ADDR_VAR 0 1
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_OWVAR 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 61
29028: PUSH
29029: EMPTY
29030: LIST
29031: PUSH
29032: LD_INT 33
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 1
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29098
// for i in tmp do
29061: LD_ADDR_VAR 0 2
29065: PUSH
29066: LD_VAR 0 1
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29096
// if IsControledBy ( i ) then
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 312
29083: IFFALSE 29094
// ComUnlink ( i ) ;
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 136
29094: GO 29071
29096: POP
29097: POP
// end ;
29098: PPOPN 2
29100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29101: LD_EXP 51
29105: PUSH
29106: LD_EXP 82
29110: AND
29111: IFFALSE 29251
29113: GO 29115
29115: DISABLE
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
// begin ToLua ( displayPowell(); ) ;
29120: LD_STRING displayPowell();
29122: PPUSH
29123: CALL_OW 559
// uc_side := 0 ;
29127: LD_ADDR_OWVAR 20
29131: PUSH
29132: LD_INT 0
29134: ST_TO_ADDR
// uc_nation := 2 ;
29135: LD_ADDR_OWVAR 21
29139: PUSH
29140: LD_INT 2
29142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29143: LD_ADDR_OWVAR 37
29147: PUSH
29148: LD_INT 14
29150: ST_TO_ADDR
// vc_engine := engine_siberite ;
29151: LD_ADDR_OWVAR 39
29155: PUSH
29156: LD_INT 3
29158: ST_TO_ADDR
// vc_control := control_apeman ;
29159: LD_ADDR_OWVAR 38
29163: PUSH
29164: LD_INT 5
29166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29167: LD_ADDR_OWVAR 40
29171: PUSH
29172: LD_INT 29
29174: ST_TO_ADDR
// un := CreateVehicle ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: CALL_OW 45
29184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_INT 1
29192: PPUSH
29193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29197: LD_INT 35
29199: PPUSH
29200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: LD_INT 22
29211: PUSH
29212: LD_OWVAR 2
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: PPUSH
29226: LD_VAR 0 2
29230: PPUSH
29231: CALL_OW 74
29235: PPUSH
29236: CALL_OW 115
// until IsDead ( un ) ;
29240: LD_VAR 0 2
29244: PPUSH
29245: CALL_OW 301
29249: IFFALSE 29197
// end ;
29251: PPOPN 2
29253: END
// every 0 0$1 trigger StreamModeActive and sStu do
29254: LD_EXP 51
29258: PUSH
29259: LD_EXP 90
29263: AND
29264: IFFALSE 29280
29266: GO 29268
29268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29269: LD_STRING displayStucuk();
29271: PPUSH
29272: CALL_OW 559
// ResetFog ;
29276: CALL_OW 335
// end ;
29280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29281: LD_EXP 51
29285: PUSH
29286: LD_EXP 83
29290: AND
29291: IFFALSE 29432
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
29299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_INT 22
29307: PUSH
29308: LD_OWVAR 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 21
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PPUSH
29331: CALL_OW 69
29335: ST_TO_ADDR
// if not tmp then
29336: LD_VAR 0 2
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29432
// un := tmp [ rand ( 1 , tmp ) ] ;
29345: LD_ADDR_VAR 0 1
29349: PUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: CALL_OW 12
29367: ARRAY
29368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 0
29376: PPUSH
29377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_OWVAR 3
29390: PUSH
29391: LD_VAR 0 1
29395: DIFF
29396: PPUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 74
29406: PPUSH
29407: CALL_OW 115
// wait ( 0 0$20 ) ;
29411: LD_INT 700
29413: PPUSH
29414: CALL_OW 67
// SetSide ( un , your_side ) ;
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_OWVAR 2
29427: PPUSH
29428: CALL_OW 235
// end ;
29432: PPOPN 2
29434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29435: LD_EXP 51
29439: PUSH
29440: LD_EXP 84
29444: AND
29445: IFFALSE 29551
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_INT 22
29460: PUSH
29461: LD_OWVAR 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 30
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 30
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not depot then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 1
29523: ARRAY
29524: PPUSH
29525: CALL_OW 250
29529: PPUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: PPUSH
29539: CALL_OW 251
29543: PPUSH
29544: LD_INT 70
29546: PPUSH
29547: CALL_OW 495
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29554: LD_EXP 51
29558: PUSH
29559: LD_EXP 85
29563: AND
29564: IFFALSE 29775
29566: GO 29568
29568: DISABLE
29569: LD_INT 0
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_INT 22
29583: PUSH
29584: LD_OWVAR 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 21
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 5
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29775
// for i in tmp do
29621: LD_ADDR_VAR 0 1
29625: PUSH
29626: LD_VAR 0 5
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29773
// begin d := rand ( 0 , 5 ) ;
29634: LD_ADDR_VAR 0 4
29638: PUSH
29639: LD_INT 0
29641: PPUSH
29642: LD_INT 5
29644: PPUSH
29645: CALL_OW 12
29649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 250
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: LD_INT 3
29672: PPUSH
29673: LD_INT 12
29675: PPUSH
29676: CALL_OW 12
29680: PPUSH
29681: CALL_OW 272
29685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: CALL_OW 251
29700: PPUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: LD_INT 3
29708: PPUSH
29709: LD_INT 12
29711: PPUSH
29712: CALL_OW 12
29716: PPUSH
29717: CALL_OW 273
29721: ST_TO_ADDR
// if ValidHex ( x , y ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL_OW 488
29736: IFFALSE 29771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29738: LD_VAR 0 1
29742: PPUSH
29743: LD_VAR 0 2
29747: PPUSH
29748: LD_VAR 0 3
29752: PPUSH
29753: LD_INT 3
29755: PPUSH
29756: LD_INT 6
29758: PPUSH
29759: CALL_OW 12
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: CALL_OW 483
// end ;
29771: GO 29631
29773: POP
29774: POP
// end ;
29775: PPOPN 5
29777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29778: LD_EXP 51
29782: PUSH
29783: LD_EXP 86
29787: AND
29788: IFFALSE 29882
29790: GO 29792
29792: DISABLE
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29797: LD_ADDR_VAR 0 2
29801: PUSH
29802: LD_INT 22
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 32
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: PPUSH
29839: CALL_OW 69
29843: ST_TO_ADDR
// if not tmp then
29844: LD_VAR 0 2
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 29882
// for i in tmp do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 2
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29880
// SetFuel ( i , 0 ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_INT 0
29873: PPUSH
29874: CALL_OW 240
29878: GO 29863
29880: POP
29881: POP
// end ;
29882: PPOPN 2
29884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29885: LD_EXP 51
29889: PUSH
29890: LD_EXP 87
29894: AND
29895: IFFALSE 29961
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 30
29922: PUSH
29923: LD_INT 29
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 1
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 29961
// DestroyUnit ( tmp [ 1 ] ) ;
29948: LD_VAR 0 1
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PPUSH
29957: CALL_OW 65
// end ;
29961: PPOPN 1
29963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29964: LD_EXP 51
29968: PUSH
29969: LD_EXP 89
29973: AND
29974: IFFALSE 30103
29976: GO 29978
29978: DISABLE
29979: LD_INT 0
29981: PPUSH
// begin uc_side := 0 ;
29982: LD_ADDR_OWVAR 20
29986: PUSH
29987: LD_INT 0
29989: ST_TO_ADDR
// uc_nation := nation_arabian ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 2
29997: ST_TO_ADDR
// hc_gallery :=  ;
29998: LD_ADDR_OWVAR 33
30002: PUSH
30003: LD_STRING 
30005: ST_TO_ADDR
// hc_name :=  ;
30006: LD_ADDR_OWVAR 26
30010: PUSH
30011: LD_STRING 
30013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30014: LD_INT 1
30016: PPUSH
30017: LD_INT 11
30019: PPUSH
30020: LD_INT 10
30022: PPUSH
30023: CALL_OW 380
// un := CreateHuman ;
30027: LD_ADDR_VAR 0 1
30031: PUSH
30032: CALL_OW 44
30036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30037: LD_VAR 0 1
30041: PPUSH
30042: LD_INT 1
30044: PPUSH
30045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30049: LD_INT 35
30051: PPUSH
30052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30056: LD_VAR 0 1
30060: PPUSH
30061: LD_INT 22
30063: PUSH
30064: LD_OWVAR 2
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: CALL_OW 69
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 74
30087: PPUSH
30088: CALL_OW 115
// until IsDead ( un ) ;
30092: LD_VAR 0 1
30096: PPUSH
30097: CALL_OW 301
30101: IFFALSE 30049
// end ;
30103: PPOPN 1
30105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30106: LD_EXP 51
30110: PUSH
30111: LD_EXP 91
30115: AND
30116: IFFALSE 30128
30118: GO 30120
30120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30121: LD_STRING earthquake(getX(game), 0, 32)
30123: PPUSH
30124: CALL_OW 559
30128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30129: LD_EXP 51
30133: PUSH
30134: LD_EXP 92
30138: AND
30139: IFFALSE 30230
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
// begin enable ;
30147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30148: LD_ADDR_VAR 0 1
30152: PUSH
30153: LD_INT 22
30155: PUSH
30156: LD_OWVAR 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 21
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 33
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 1
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30204: LD_VAR 0 1
30208: PUSH
30209: LD_INT 1
30211: PPUSH
30212: LD_VAR 0 1
30216: PPUSH
30217: CALL_OW 12
30221: ARRAY
30222: PPUSH
30223: LD_INT 1
30225: PPUSH
30226: CALL_OW 234
// end ;
30230: PPOPN 1
30232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30233: LD_EXP 51
30237: PUSH
30238: LD_EXP 93
30242: AND
30243: IFFALSE 30384
30245: GO 30247
30247: DISABLE
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_INT 22
30260: PUSH
30261: LD_OWVAR 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 25
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 69
30288: ST_TO_ADDR
// if not tmp then
30289: LD_VAR 0 3
30293: NOT
30294: IFFALSE 30298
// exit ;
30296: GO 30384
// un := tmp [ rand ( 1 , tmp ) ] ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: LD_INT 1
30310: PPUSH
30311: LD_VAR 0 3
30315: PPUSH
30316: CALL_OW 12
30320: ARRAY
30321: ST_TO_ADDR
// if Crawls ( un ) then
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 318
30331: IFFALSE 30342
// ComWalk ( un ) ;
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30342: LD_VAR 0 2
30346: PPUSH
30347: LD_INT 9
30349: PPUSH
30350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30354: LD_INT 28
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30369: LD_INT 29
30371: PPUSH
30372: LD_OWVAR 2
30376: PPUSH
30377: LD_INT 2
30379: PPUSH
30380: CALL_OW 322
// end ;
30384: PPOPN 3
30386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30387: LD_EXP 51
30391: PUSH
30392: LD_EXP 94
30396: AND
30397: IFFALSE 30508
30399: GO 30401
30401: DISABLE
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
30406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30407: LD_ADDR_VAR 0 3
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 25
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 3
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30508
// un := tmp [ rand ( 1 , tmp ) ] ;
30452: LD_ADDR_VAR 0 2
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: LD_INT 1
30464: PPUSH
30465: LD_VAR 0 3
30469: PPUSH
30470: CALL_OW 12
30474: ARRAY
30475: ST_TO_ADDR
// if Crawls ( un ) then
30476: LD_VAR 0 2
30480: PPUSH
30481: CALL_OW 318
30485: IFFALSE 30496
// ComWalk ( un ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_INT 8
30503: PPUSH
30504: CALL_OW 336
// end ;
30508: PPOPN 3
30510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30511: LD_EXP 51
30515: PUSH
30516: LD_EXP 95
30520: AND
30521: IFFALSE 30665
30523: GO 30525
30525: DISABLE
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30530: LD_ADDR_VAR 0 2
30534: PUSH
30535: LD_INT 22
30537: PUSH
30538: LD_OWVAR 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 34
30562: PUSH
30563: LD_INT 12
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 34
30572: PUSH
30573: LD_INT 51
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 34
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 2
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30665
// for i in tmp do
30615: LD_ADDR_VAR 0 1
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: FOR_IN
30626: IFFALSE 30663
// if GetCargo ( i , mat_artifact ) = 0 then
30628: LD_VAR 0 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 289
30640: PUSH
30641: LD_INT 0
30643: EQUAL
30644: IFFALSE 30661
// SetCargo ( i , mat_siberit , 100 ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_INT 3
30653: PPUSH
30654: LD_INT 100
30656: PPUSH
30657: CALL_OW 290
30661: GO 30625
30663: POP
30664: POP
// end ;
30665: PPOPN 2
30667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30668: LD_EXP 51
30672: PUSH
30673: LD_EXP 96
30677: AND
30678: IFFALSE 30861
30680: GO 30682
30682: DISABLE
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_INT 22
30694: PUSH
30695: LD_OWVAR 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 69
30708: ST_TO_ADDR
// if not tmp then
30709: LD_VAR 0 2
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 30861
// for i := 1 to 2 do
30718: LD_ADDR_VAR 0 1
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_INT 2
30730: PUSH
30731: FOR_TO
30732: IFFALSE 30859
// begin uc_side := your_side ;
30734: LD_ADDR_OWVAR 20
30738: PUSH
30739: LD_OWVAR 2
30743: ST_TO_ADDR
// uc_nation := nation_american ;
30744: LD_ADDR_OWVAR 21
30748: PUSH
30749: LD_INT 1
30751: ST_TO_ADDR
// vc_chassis := us_morphling ;
30752: LD_ADDR_OWVAR 37
30756: PUSH
30757: LD_INT 5
30759: ST_TO_ADDR
// vc_engine := engine_siberite ;
30760: LD_ADDR_OWVAR 39
30764: PUSH
30765: LD_INT 3
30767: ST_TO_ADDR
// vc_control := control_computer ;
30768: LD_ADDR_OWVAR 38
30772: PUSH
30773: LD_INT 3
30775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30776: LD_ADDR_OWVAR 40
30780: PUSH
30781: LD_INT 10
30783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30784: LD_VAR 0 2
30788: PUSH
30789: LD_INT 1
30791: ARRAY
30792: PPUSH
30793: CALL_OW 310
30797: NOT
30798: IFFALSE 30845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30800: CALL_OW 45
30804: PPUSH
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: CALL_OW 250
30818: PPUSH
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 251
30832: PPUSH
30833: LD_INT 12
30835: PPUSH
30836: LD_INT 1
30838: PPUSH
30839: CALL_OW 50
30843: GO 30857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30845: CALL_OW 45
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 51
// end ;
30857: GO 30731
30859: POP
30860: POP
// end ;
30861: PPOPN 2
30863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30864: LD_EXP 51
30868: PUSH
30869: LD_EXP 97
30873: AND
30874: IFFALSE 31096
30876: GO 30878
30878: DISABLE
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30887: LD_ADDR_VAR 0 6
30891: PUSH
30892: LD_INT 22
30894: PUSH
30895: LD_OWVAR 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 21
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 23
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: PPUSH
30936: CALL_OW 69
30940: ST_TO_ADDR
// if not tmp then
30941: LD_VAR 0 6
30945: NOT
30946: IFFALSE 30950
// exit ;
30948: GO 31096
// s1 := rand ( 1 , 4 ) ;
30950: LD_ADDR_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: PPUSH
30958: LD_INT 4
30960: PPUSH
30961: CALL_OW 12
30965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30966: LD_ADDR_VAR 0 4
30970: PUSH
30971: LD_VAR 0 6
30975: PUSH
30976: LD_INT 1
30978: ARRAY
30979: PPUSH
30980: LD_VAR 0 2
30984: PPUSH
30985: CALL_OW 259
30989: ST_TO_ADDR
// if s1 = 1 then
30990: LD_VAR 0 2
30994: PUSH
30995: LD_INT 1
30997: EQUAL
30998: IFFALSE 31018
// s2 := rand ( 2 , 4 ) else
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_INT 2
31007: PPUSH
31008: LD_INT 4
31010: PPUSH
31011: CALL_OW 12
31015: ST_TO_ADDR
31016: GO 31026
// s2 := 1 ;
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 6
31035: PUSH
31036: LD_INT 1
31038: ARRAY
31039: PPUSH
31040: LD_VAR 0 3
31044: PPUSH
31045: CALL_OW 259
31049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31050: LD_VAR 0 6
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 2
31063: PPUSH
31064: LD_VAR 0 5
31068: PPUSH
31069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31073: LD_VAR 0 6
31077: PUSH
31078: LD_INT 1
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: CALL_OW 237
// end ;
31096: PPOPN 6
31098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31099: LD_EXP 51
31103: PUSH
31104: LD_EXP 98
31108: AND
31109: IFFALSE 31188
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31117: LD_ADDR_VAR 0 1
31121: PUSH
31122: LD_INT 22
31124: PUSH
31125: LD_OWVAR 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 30
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PPUSH
31148: CALL_OW 69
31152: ST_TO_ADDR
// if not tmp then
31153: LD_VAR 0 1
31157: NOT
31158: IFFALSE 31162
// exit ;
31160: GO 31188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 1
31169: PPUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 12
31179: ARRAY
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: CALL_OW 234
// end ;
31188: PPOPN 1
31190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31191: LD_EXP 51
31195: PUSH
31196: LD_EXP 99
31200: AND
31201: IFFALSE 31313
31203: GO 31205
31205: DISABLE
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31210: LD_ADDR_VAR 0 2
31214: PUSH
31215: LD_INT 22
31217: PUSH
31218: LD_OWVAR 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 27
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 26
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 28
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: ST_TO_ADDR
// if not tmp then
31275: LD_VAR 0 2
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31313
// for i in tmp do
31284: LD_ADDR_VAR 0 1
31288: PUSH
31289: LD_VAR 0 2
31293: PUSH
31294: FOR_IN
31295: IFFALSE 31311
// SetLives ( i , 1 ) ;
31297: LD_VAR 0 1
31301: PPUSH
31302: LD_INT 1
31304: PPUSH
31305: CALL_OW 234
31309: GO 31294
31311: POP
31312: POP
// end ;
31313: PPOPN 2
31315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31316: LD_EXP 51
31320: PUSH
31321: LD_EXP 100
31325: AND
31326: IFFALSE 31613
31328: GO 31330
31330: DISABLE
31331: LD_INT 0
31333: PPUSH
31334: PPUSH
31335: PPUSH
// begin i := rand ( 1 , 7 ) ;
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_INT 1
31343: PPUSH
31344: LD_INT 7
31346: PPUSH
31347: CALL_OW 12
31351: ST_TO_ADDR
// case i of 1 :
31352: LD_VAR 0 1
31356: PUSH
31357: LD_INT 1
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31375
31365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31366: LD_STRING earthquake(getX(game), 0, 32)
31368: PPUSH
31369: CALL_OW 559
31373: GO 31613
31375: LD_INT 2
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31397
31383: POP
// begin ToLua ( displayStucuk(); ) ;
31384: LD_STRING displayStucuk();
31386: PPUSH
31387: CALL_OW 559
// ResetFog ;
31391: CALL_OW 335
// end ; 3 :
31395: GO 31613
31397: LD_INT 3
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31509
31405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_OWVAR 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 25
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: ST_TO_ADDR
// if not tmp then
31442: LD_VAR 0 2
31446: NOT
31447: IFFALSE 31451
// exit ;
31449: GO 31613
// un := tmp [ rand ( 1 , tmp ) ] ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: PPUSH
31464: LD_VAR 0 2
31468: PPUSH
31469: CALL_OW 12
31473: ARRAY
31474: ST_TO_ADDR
// if Crawls ( un ) then
31475: LD_VAR 0 3
31479: PPUSH
31480: CALL_OW 318
31484: IFFALSE 31495
// ComWalk ( un ) ;
31486: LD_VAR 0 3
31490: PPUSH
31491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31495: LD_VAR 0 3
31499: PPUSH
31500: LD_INT 8
31502: PPUSH
31503: CALL_OW 336
// end ; 4 :
31507: GO 31613
31509: LD_INT 4
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31591
31517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_OWVAR 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: LD_INT 29
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31563: LD_VAR 0 2
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: PPUSH
31572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31576: LD_VAR 0 2
31580: PUSH
31581: LD_INT 1
31583: ARRAY
31584: PPUSH
31585: CALL_OW 65
// end ; 5 .. 7 :
31589: GO 31613
31591: LD_INT 5
31593: DOUBLE
31594: GREATEREQUAL
31595: IFFALSE 31603
31597: LD_INT 7
31599: DOUBLE
31600: LESSEQUAL
31601: IFTRUE 31605
31603: GO 31612
31605: POP
// StreamSibBomb ; end ;
31606: CALL 27850 0 0
31610: GO 31613
31612: POP
// end ;
31613: PPOPN 3
31615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31616: LD_EXP 51
31620: PUSH
31621: LD_EXP 101
31625: AND
31626: IFFALSE 31782
31628: GO 31630
31630: DISABLE
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_INT 81
31643: PUSH
31644: LD_OWVAR 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 21
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 21
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: CALL_OW 69
31689: ST_TO_ADDR
// if not tmp then
31690: LD_VAR 0 2
31694: NOT
31695: IFFALSE 31699
// exit ;
31697: GO 31782
// p := 0 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 0
31706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31707: LD_INT 35
31709: PPUSH
31710: CALL_OW 67
// p := p + 1 ;
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_VAR 0 3
31723: PUSH
31724: LD_INT 1
31726: PLUS
31727: ST_TO_ADDR
// for i in tmp do
31728: LD_ADDR_VAR 0 1
31732: PUSH
31733: LD_VAR 0 2
31737: PUSH
31738: FOR_IN
31739: IFFALSE 31770
// if GetLives ( i ) < 1000 then
31741: LD_VAR 0 1
31745: PPUSH
31746: CALL_OW 256
31750: PUSH
31751: LD_INT 1000
31753: LESS
31754: IFFALSE 31768
// SetLives ( i , 1000 ) ;
31756: LD_VAR 0 1
31760: PPUSH
31761: LD_INT 1000
31763: PPUSH
31764: CALL_OW 234
31768: GO 31738
31770: POP
31771: POP
// until p > 20 ;
31772: LD_VAR 0 3
31776: PUSH
31777: LD_INT 20
31779: GREATER
31780: IFFALSE 31707
// end ;
31782: PPOPN 3
31784: END
// every 0 0$1 trigger StreamModeActive and sTime do
31785: LD_EXP 51
31789: PUSH
31790: LD_EXP 102
31794: AND
31795: IFFALSE 31830
31797: GO 31799
31799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31800: LD_INT 28
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31815: LD_INT 30
31817: PPUSH
31818: LD_OWVAR 2
31822: PPUSH
31823: LD_INT 2
31825: PPUSH
31826: CALL_OW 322
// end ;
31830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31831: LD_EXP 51
31835: PUSH
31836: LD_EXP 103
31840: AND
31841: IFFALSE 31962
31843: GO 31845
31845: DISABLE
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_OWVAR 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 21
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 23
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: ST_TO_ADDR
// if not tmp then
31904: LD_VAR 0 2
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 31962
// for i in tmp do
31913: LD_ADDR_VAR 0 1
31917: PUSH
31918: LD_VAR 0 2
31922: PUSH
31923: FOR_IN
31924: IFFALSE 31960
// begin if Crawls ( i ) then
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 318
31935: IFFALSE 31946
// ComWalk ( i ) ;
31937: LD_VAR 0 1
31941: PPUSH
31942: CALL_OW 138
// SetClass ( i , 2 ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 2
31953: PPUSH
31954: CALL_OW 336
// end ;
31958: GO 31923
31960: POP
31961: POP
// end ;
31962: PPOPN 2
31964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31965: LD_EXP 51
31969: PUSH
31970: LD_EXP 104
31974: AND
31975: IFFALSE 32263
31977: GO 31979
31979: DISABLE
31980: LD_INT 0
31982: PPUSH
31983: PPUSH
31984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31985: LD_OWVAR 2
31989: PPUSH
31990: LD_INT 9
31992: PPUSH
31993: LD_INT 1
31995: PPUSH
31996: LD_INT 1
31998: PPUSH
31999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32003: LD_INT 9
32005: PPUSH
32006: LD_OWVAR 2
32010: PPUSH
32011: CALL_OW 343
// uc_side := 9 ;
32015: LD_ADDR_OWVAR 20
32019: PUSH
32020: LD_INT 9
32022: ST_TO_ADDR
// uc_nation := 2 ;
32023: LD_ADDR_OWVAR 21
32027: PUSH
32028: LD_INT 2
32030: ST_TO_ADDR
// hc_name := Dark Warrior ;
32031: LD_ADDR_OWVAR 26
32035: PUSH
32036: LD_STRING Dark Warrior
32038: ST_TO_ADDR
// hc_gallery :=  ;
32039: LD_ADDR_OWVAR 33
32043: PUSH
32044: LD_STRING 
32046: ST_TO_ADDR
// hc_noskilllimit := true ;
32047: LD_ADDR_OWVAR 76
32051: PUSH
32052: LD_INT 1
32054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32055: LD_ADDR_OWVAR 31
32059: PUSH
32060: LD_INT 30
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 30
32068: PUSH
32069: LD_INT 30
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// un := CreateHuman ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: CALL_OW 44
32087: ST_TO_ADDR
// hc_noskilllimit := false ;
32088: LD_ADDR_OWVAR 76
32092: PUSH
32093: LD_INT 0
32095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32096: LD_VAR 0 3
32100: PPUSH
32101: LD_INT 1
32103: PPUSH
32104: CALL_OW 51
// ToLua ( playRanger() ) ;
32108: LD_STRING playRanger()
32110: PPUSH
32111: CALL_OW 559
// p := 0 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32123: LD_INT 35
32125: PPUSH
32126: CALL_OW 67
// p := p + 1 ;
32130: LD_ADDR_VAR 0 2
32134: PUSH
32135: LD_VAR 0 2
32139: PUSH
32140: LD_INT 1
32142: PLUS
32143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32144: LD_VAR 0 3
32148: PPUSH
32149: CALL_OW 256
32153: PUSH
32154: LD_INT 1000
32156: LESS
32157: IFFALSE 32171
// SetLives ( un , 1000 ) ;
32159: LD_VAR 0 3
32163: PPUSH
32164: LD_INT 1000
32166: PPUSH
32167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32171: LD_VAR 0 3
32175: PPUSH
32176: LD_INT 81
32178: PUSH
32179: LD_OWVAR 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 91
32190: PUSH
32191: LD_VAR 0 3
32195: PUSH
32196: LD_INT 30
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 69
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 74
32222: PPUSH
32223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32227: LD_VAR 0 2
32231: PUSH
32232: LD_INT 80
32234: GREATER
32235: PUSH
32236: LD_VAR 0 3
32240: PPUSH
32241: CALL_OW 301
32245: OR
32246: IFFALSE 32123
// if un then
32248: LD_VAR 0 3
32252: IFFALSE 32263
// RemoveUnit ( un ) ;
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 64
// end ;
32263: PPOPN 3
32265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32266: LD_EXP 105
32270: IFFALSE 32386
32272: GO 32274
32274: DISABLE
32275: LD_INT 0
32277: PPUSH
32278: PPUSH
32279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32280: LD_ADDR_VAR 0 2
32284: PUSH
32285: LD_INT 81
32287: PUSH
32288: LD_OWVAR 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 21
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PPUSH
32311: CALL_OW 69
32315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32316: LD_STRING playComputer()
32318: PPUSH
32319: CALL_OW 559
// if not tmp then
32323: LD_VAR 0 2
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32386
// for i in tmp do
32332: LD_ADDR_VAR 0 1
32336: PUSH
32337: LD_VAR 0 2
32341: PUSH
32342: FOR_IN
32343: IFFALSE 32384
// for j := 1 to 4 do
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: DOUBLE
32351: LD_INT 1
32353: DEC
32354: ST_TO_ADDR
32355: LD_INT 4
32357: PUSH
32358: FOR_TO
32359: IFFALSE 32380
// SetSkill ( i , j , 10 ) ;
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 3
32370: PPUSH
32371: LD_INT 10
32373: PPUSH
32374: CALL_OW 237
32378: GO 32358
32380: POP
32381: POP
32382: GO 32342
32384: POP
32385: POP
// end ;
32386: PPOPN 3
32388: END
// every 0 0$1 trigger s30 do var i , tmp ;
32389: LD_EXP 106
32393: IFFALSE 32462
32395: GO 32397
32397: DISABLE
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32462
// for i in tmp do
32433: LD_ADDR_VAR 0 1
32437: PUSH
32438: LD_VAR 0 2
32442: PUSH
32443: FOR_IN
32444: IFFALSE 32460
// SetLives ( i , 300 ) ;
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_INT 300
32453: PPUSH
32454: CALL_OW 234
32458: GO 32443
32460: POP
32461: POP
// end ;
32462: PPOPN 2
32464: END
// every 0 0$1 trigger s60 do var i , tmp ;
32465: LD_EXP 107
32469: IFFALSE 32538
32471: GO 32473
32473: DISABLE
32474: LD_INT 0
32476: PPUSH
32477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32478: LD_ADDR_VAR 0 2
32482: PUSH
32483: LD_INT 22
32485: PUSH
32486: LD_OWVAR 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL_OW 69
32499: ST_TO_ADDR
// if not tmp then
32500: LD_VAR 0 2
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32538
// for i in tmp do
32509: LD_ADDR_VAR 0 1
32513: PUSH
32514: LD_VAR 0 2
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32536
// SetLives ( i , 600 ) ;
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_INT 600
32529: PPUSH
32530: CALL_OW 234
32534: GO 32519
32536: POP
32537: POP
// end ;
32538: PPOPN 2
32540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32541: LD_INT 0
32543: PPUSH
// case cmd of 301 :
32544: LD_VAR 0 1
32548: PUSH
32549: LD_INT 301
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32589
32557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32558: LD_VAR 0 6
32562: PPUSH
32563: LD_VAR 0 7
32567: PPUSH
32568: LD_VAR 0 8
32572: PPUSH
32573: LD_VAR 0 4
32577: PPUSH
32578: LD_VAR 0 5
32582: PPUSH
32583: CALL 33798 0 5
32587: GO 32710
32589: LD_INT 302
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32634
32597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32598: LD_VAR 0 6
32602: PPUSH
32603: LD_VAR 0 7
32607: PPUSH
32608: LD_VAR 0 8
32612: PPUSH
32613: LD_VAR 0 9
32617: PPUSH
32618: LD_VAR 0 4
32622: PPUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: CALL 33889 0 6
32632: GO 32710
32634: LD_INT 303
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32679
32642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32643: LD_VAR 0 6
32647: PPUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_VAR 0 9
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: LD_VAR 0 5
32672: PPUSH
32673: CALL 32715 0 6
32677: GO 32710
32679: LD_INT 304
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32709
32687: POP
// hHackTeleport ( unit , x , y ) ; end ;
32688: LD_VAR 0 2
32692: PPUSH
32693: LD_VAR 0 4
32697: PPUSH
32698: LD_VAR 0 5
32702: PPUSH
32703: CALL 34482 0 3
32707: GO 32710
32709: POP
// end ;
32710: LD_VAR 0 12
32714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32715: LD_INT 0
32717: PPUSH
32718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 1
32726: LESS
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_INT 3
32735: GREATER
32736: OR
32737: PUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 428
32752: OR
32753: IFFALSE 32757
// exit ;
32755: GO 33485
// uc_side := your_side ;
32757: LD_ADDR_OWVAR 20
32761: PUSH
32762: LD_OWVAR 2
32766: ST_TO_ADDR
// uc_nation := nation ;
32767: LD_ADDR_OWVAR 21
32771: PUSH
32772: LD_VAR 0 1
32776: ST_TO_ADDR
// bc_level = 1 ;
32777: LD_ADDR_OWVAR 43
32781: PUSH
32782: LD_INT 1
32784: ST_TO_ADDR
// case btype of 1 :
32785: LD_VAR 0 2
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_depot ; 2 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 0
32806: ST_TO_ADDR
32807: GO 33429
32809: LD_INT 2
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_warehouse ; 3 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
32826: GO 33429
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_lab ; 4 .. 9 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 6
32844: ST_TO_ADDR
32845: GO 33429
32847: LD_INT 4
32849: DOUBLE
32850: GREATEREQUAL
32851: IFFALSE 32859
32853: LD_INT 9
32855: DOUBLE
32856: LESSEQUAL
32857: IFTRUE 32861
32859: GO 32921
32861: POP
// begin bc_type := b_lab_half ;
32862: LD_ADDR_OWVAR 42
32866: PUSH
32867: LD_INT 7
32869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32870: LD_ADDR_OWVAR 44
32874: PUSH
32875: LD_INT 10
32877: PUSH
32878: LD_INT 11
32880: PUSH
32881: LD_INT 12
32883: PUSH
32884: LD_INT 15
32886: PUSH
32887: LD_INT 14
32889: PUSH
32890: LD_INT 13
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_INT 3
32908: MINUS
32909: ARRAY
32910: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32911: LD_ADDR_OWVAR 45
32915: PUSH
32916: LD_INT 9
32918: ST_TO_ADDR
// end ; 10 .. 13 :
32919: GO 33429
32921: LD_INT 10
32923: DOUBLE
32924: GREATEREQUAL
32925: IFFALSE 32933
32927: LD_INT 13
32929: DOUBLE
32930: LESSEQUAL
32931: IFTRUE 32935
32933: GO 33012
32935: POP
// begin bc_type := b_lab_full ;
32936: LD_ADDR_OWVAR 42
32940: PUSH
32941: LD_INT 8
32943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32944: LD_ADDR_OWVAR 44
32948: PUSH
32949: LD_INT 10
32951: PUSH
32952: LD_INT 12
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: LD_INT 13
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: PUSH
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 9
32974: MINUS
32975: ARRAY
32976: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32977: LD_ADDR_OWVAR 45
32981: PUSH
32982: LD_INT 11
32984: PUSH
32985: LD_INT 15
32987: PUSH
32988: LD_INT 12
32990: PUSH
32991: LD_INT 15
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: LD_VAR 0 2
33004: PUSH
33005: LD_INT 9
33007: MINUS
33008: ARRAY
33009: ST_TO_ADDR
// end ; 14 :
33010: GO 33429
33012: LD_INT 14
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33031
33020: POP
// bc_type := b_workshop ; 15 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 2
33028: ST_TO_ADDR
33029: GO 33429
33031: LD_INT 15
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33050
33039: POP
// bc_type := b_factory ; 16 :
33040: LD_ADDR_OWVAR 42
33044: PUSH
33045: LD_INT 3
33047: ST_TO_ADDR
33048: GO 33429
33050: LD_INT 16
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33069
33058: POP
// bc_type := b_ext_gun ; 17 :
33059: LD_ADDR_OWVAR 42
33063: PUSH
33064: LD_INT 17
33066: ST_TO_ADDR
33067: GO 33429
33069: LD_INT 17
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33105
33077: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33078: LD_ADDR_OWVAR 42
33082: PUSH
33083: LD_INT 19
33085: PUSH
33086: LD_INT 23
33088: PUSH
33089: LD_INT 19
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: PUSH
33097: LD_VAR 0 1
33101: ARRAY
33102: ST_TO_ADDR
33103: GO 33429
33105: LD_INT 18
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_ext_radar ; 19 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 20
33121: ST_TO_ADDR
33122: GO 33429
33124: LD_INT 19
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_ext_radio ; 20 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 22
33140: ST_TO_ADDR
33141: GO 33429
33143: LD_INT 20
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_ext_siberium ; 21 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 21
33159: ST_TO_ADDR
33160: GO 33429
33162: LD_INT 21
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_ext_computer ; 22 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 24
33178: ST_TO_ADDR
33179: GO 33429
33181: LD_INT 22
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_ext_track ; 23 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 16
33197: ST_TO_ADDR
33198: GO 33429
33200: LD_INT 23
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_ext_laser ; 24 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 25
33216: ST_TO_ADDR
33217: GO 33429
33219: LD_INT 24
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_control_tower ; 25 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 36
33235: ST_TO_ADDR
33236: GO 33429
33238: LD_INT 25
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_breastwork ; 26 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 31
33254: ST_TO_ADDR
33255: GO 33429
33257: LD_INT 26
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_bunker ; 27 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 32
33273: ST_TO_ADDR
33274: GO 33429
33276: LD_INT 27
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_turret ; 28 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 33
33292: ST_TO_ADDR
33293: GO 33429
33295: LD_INT 28
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_armoury ; 29 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 4
33311: ST_TO_ADDR
33312: GO 33429
33314: LD_INT 29
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_barracks ; 30 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 5
33330: ST_TO_ADDR
33331: GO 33429
33333: LD_INT 30
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_solar_power ; 31 :
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 27
33349: ST_TO_ADDR
33350: GO 33429
33352: LD_INT 31
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// bc_type := b_oil_power ; 32 :
33361: LD_ADDR_OWVAR 42
33365: PUSH
33366: LD_INT 26
33368: ST_TO_ADDR
33369: GO 33429
33371: LD_INT 32
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33390
33379: POP
// bc_type := b_siberite_power ; 33 :
33380: LD_ADDR_OWVAR 42
33384: PUSH
33385: LD_INT 28
33387: ST_TO_ADDR
33388: GO 33429
33390: LD_INT 33
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// bc_type := b_oil_mine ; 34 :
33399: LD_ADDR_OWVAR 42
33403: PUSH
33404: LD_INT 29
33406: ST_TO_ADDR
33407: GO 33429
33409: LD_INT 34
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33428
33417: POP
// bc_type := b_siberite_mine ; end ;
33418: LD_ADDR_OWVAR 42
33422: PUSH
33423: LD_INT 30
33425: ST_TO_ADDR
33426: GO 33429
33428: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33429: LD_ADDR_VAR 0 8
33433: PUSH
33434: LD_VAR 0 5
33438: PPUSH
33439: LD_VAR 0 6
33443: PPUSH
33444: LD_VAR 0 3
33448: PPUSH
33449: CALL_OW 47
33453: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33454: LD_OWVAR 42
33458: PUSH
33459: LD_INT 32
33461: PUSH
33462: LD_INT 33
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: IN
33469: IFFALSE 33485
// PlaceWeaponTurret ( b , weapon ) ;
33471: LD_VAR 0 8
33475: PPUSH
33476: LD_VAR 0 4
33480: PPUSH
33481: CALL_OW 431
// end ;
33485: LD_VAR 0 7
33489: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33490: LD_INT 0
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33496: LD_ADDR_VAR 0 4
33500: PUSH
33501: LD_INT 22
33503: PUSH
33504: LD_OWVAR 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 30
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 69
33549: ST_TO_ADDR
// if not tmp then
33550: LD_VAR 0 4
33554: NOT
33555: IFFALSE 33559
// exit ;
33557: GO 33618
// for i in tmp do
33559: LD_ADDR_VAR 0 2
33563: PUSH
33564: LD_VAR 0 4
33568: PUSH
33569: FOR_IN
33570: IFFALSE 33616
// for j = 1 to 3 do
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: DOUBLE
33578: LD_INT 1
33580: DEC
33581: ST_TO_ADDR
33582: LD_INT 3
33584: PUSH
33585: FOR_TO
33586: IFFALSE 33612
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33588: LD_VAR 0 2
33592: PPUSH
33593: CALL_OW 274
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: LD_INT 99999
33605: PPUSH
33606: CALL_OW 277
33610: GO 33585
33612: POP
33613: POP
33614: GO 33569
33616: POP
33617: POP
// end ;
33618: LD_VAR 0 1
33622: RET
// export function hHackSetLevel10 ; var i , j ; begin
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
33627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: PUSH
33648: FOR_IN
33649: IFFALSE 33701
// if IsSelected ( i ) then
33651: LD_VAR 0 2
33655: PPUSH
33656: CALL_OW 306
33660: IFFALSE 33699
// begin for j := 1 to 4 do
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: DOUBLE
33668: LD_INT 1
33670: DEC
33671: ST_TO_ADDR
33672: LD_INT 4
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33697
// SetSkill ( i , j , 10 ) ;
33678: LD_VAR 0 2
33682: PPUSH
33683: LD_VAR 0 3
33687: PPUSH
33688: LD_INT 10
33690: PPUSH
33691: CALL_OW 237
33695: GO 33675
33697: POP
33698: POP
// end ;
33699: GO 33648
33701: POP
33702: POP
// end ;
33703: LD_VAR 0 1
33707: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: LD_INT 22
33720: PUSH
33721: LD_OWVAR 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 21
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PPUSH
33744: CALL_OW 69
33748: PUSH
33749: FOR_IN
33750: IFFALSE 33791
// begin for j := 1 to 4 do
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: DOUBLE
33758: LD_INT 1
33760: DEC
33761: ST_TO_ADDR
33762: LD_INT 4
33764: PUSH
33765: FOR_TO
33766: IFFALSE 33787
// SetSkill ( i , j , 10 ) ;
33768: LD_VAR 0 2
33772: PPUSH
33773: LD_VAR 0 3
33777: PPUSH
33778: LD_INT 10
33780: PPUSH
33781: CALL_OW 237
33785: GO 33765
33787: POP
33788: POP
// end ;
33789: GO 33749
33791: POP
33792: POP
// end ;
33793: LD_VAR 0 1
33797: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33798: LD_INT 0
33800: PPUSH
// uc_side := your_side ;
33801: LD_ADDR_OWVAR 20
33805: PUSH
33806: LD_OWVAR 2
33810: ST_TO_ADDR
// uc_nation := nation ;
33811: LD_ADDR_OWVAR 21
33815: PUSH
33816: LD_VAR 0 1
33820: ST_TO_ADDR
// InitHc ;
33821: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33825: LD_INT 0
33827: PPUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33842: LD_VAR 0 4
33846: PPUSH
33847: LD_VAR 0 5
33851: PPUSH
33852: CALL_OW 428
33856: PUSH
33857: LD_INT 0
33859: EQUAL
33860: IFFALSE 33884
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33862: CALL_OW 44
33866: PPUSH
33867: LD_VAR 0 4
33871: PPUSH
33872: LD_VAR 0 5
33876: PPUSH
33877: LD_INT 1
33879: PPUSH
33880: CALL_OW 48
// end ;
33884: LD_VAR 0 6
33888: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
// uc_side := your_side ;
33893: LD_ADDR_OWVAR 20
33897: PUSH
33898: LD_OWVAR 2
33902: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33903: LD_VAR 0 1
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: IN
33930: IFFALSE 33942
// uc_nation := nation_american else
33932: LD_ADDR_OWVAR 21
33936: PUSH
33937: LD_INT 1
33939: ST_TO_ADDR
33940: GO 33985
// if chassis in [ 11 , 12 , 13 , 14 ] then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_INT 11
33949: PUSH
33950: LD_INT 12
33952: PUSH
33953: LD_INT 13
33955: PUSH
33956: LD_INT 14
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: IN
33965: IFFALSE 33977
// uc_nation := nation_arabian else
33967: LD_ADDR_OWVAR 21
33971: PUSH
33972: LD_INT 2
33974: ST_TO_ADDR
33975: GO 33985
// uc_nation := nation_russian ;
33977: LD_ADDR_OWVAR 21
33981: PUSH
33982: LD_INT 3
33984: ST_TO_ADDR
// vc_chassis := chassis ;
33985: LD_ADDR_OWVAR 37
33989: PUSH
33990: LD_VAR 0 1
33994: ST_TO_ADDR
// vc_engine := engine ;
33995: LD_ADDR_OWVAR 39
33999: PUSH
34000: LD_VAR 0 2
34004: ST_TO_ADDR
// vc_control := control ;
34005: LD_ADDR_OWVAR 38
34009: PUSH
34010: LD_VAR 0 3
34014: ST_TO_ADDR
// vc_weapon := weapon ;
34015: LD_ADDR_OWVAR 40
34019: PUSH
34020: LD_VAR 0 4
34024: ST_TO_ADDR
// un := CreateVehicle ;
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: CALL_OW 45
34034: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34035: LD_VAR 0 8
34039: PPUSH
34040: LD_INT 0
34042: PPUSH
34043: LD_INT 5
34045: PPUSH
34046: CALL_OW 12
34050: PPUSH
34051: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34055: LD_VAR 0 8
34059: PPUSH
34060: LD_VAR 0 5
34064: PPUSH
34065: LD_VAR 0 6
34069: PPUSH
34070: LD_INT 1
34072: PPUSH
34073: CALL_OW 48
// end ;
34077: LD_VAR 0 7
34081: RET
// export hInvincible ; every 1 do
34082: GO 34084
34084: DISABLE
// hInvincible := [ ] ;
34085: LD_ADDR_EXP 108
34089: PUSH
34090: EMPTY
34091: ST_TO_ADDR
34092: END
// every 10 do var i ;
34093: GO 34095
34095: DISABLE
34096: LD_INT 0
34098: PPUSH
// begin enable ;
34099: ENABLE
// if not hInvincible then
34100: LD_EXP 108
34104: NOT
34105: IFFALSE 34109
// exit ;
34107: GO 34153
// for i in hInvincible do
34109: LD_ADDR_VAR 0 1
34113: PUSH
34114: LD_EXP 108
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34151
// if GetLives ( i ) < 1000 then
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 256
34131: PUSH
34132: LD_INT 1000
34134: LESS
34135: IFFALSE 34149
// SetLives ( i , 1000 ) ;
34137: LD_VAR 0 1
34141: PPUSH
34142: LD_INT 1000
34144: PPUSH
34145: CALL_OW 234
34149: GO 34119
34151: POP
34152: POP
// end ;
34153: PPOPN 1
34155: END
// export function hHackInvincible ; var i ; begin
34156: LD_INT 0
34158: PPUSH
34159: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34160: LD_ADDR_VAR 0 2
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 21
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 21
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 69
34197: PUSH
34198: FOR_IN
34199: IFFALSE 34260
// if IsSelected ( i ) then
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 306
34210: IFFALSE 34258
// begin if i in hInvincible then
34212: LD_VAR 0 2
34216: PUSH
34217: LD_EXP 108
34221: IN
34222: IFFALSE 34242
// hInvincible := hInvincible diff i else
34224: LD_ADDR_EXP 108
34228: PUSH
34229: LD_EXP 108
34233: PUSH
34234: LD_VAR 0 2
34238: DIFF
34239: ST_TO_ADDR
34240: GO 34258
// hInvincible := hInvincible union i ;
34242: LD_ADDR_EXP 108
34246: PUSH
34247: LD_EXP 108
34251: PUSH
34252: LD_VAR 0 2
34256: UNION
34257: ST_TO_ADDR
// end ;
34258: GO 34198
34260: POP
34261: POP
// end ;
34262: LD_VAR 0 1
34266: RET
// export function hHackInvisible ; var i , j ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
34271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34272: LD_ADDR_VAR 0 2
34276: PUSH
34277: LD_INT 21
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: PUSH
34292: FOR_IN
34293: IFFALSE 34317
// if IsSelected ( i ) then
34295: LD_VAR 0 2
34299: PPUSH
34300: CALL_OW 306
34304: IFFALSE 34315
// ComForceInvisible ( i ) ;
34306: LD_VAR 0 2
34310: PPUSH
34311: CALL_OW 496
34315: GO 34292
34317: POP
34318: POP
// end ;
34319: LD_VAR 0 1
34323: RET
// export function hHackChangeYourSide ; begin
34324: LD_INT 0
34326: PPUSH
// if your_side = 8 then
34327: LD_OWVAR 2
34331: PUSH
34332: LD_INT 8
34334: EQUAL
34335: IFFALSE 34347
// your_side := 0 else
34337: LD_ADDR_OWVAR 2
34341: PUSH
34342: LD_INT 0
34344: ST_TO_ADDR
34345: GO 34361
// your_side := your_side + 1 ;
34347: LD_ADDR_OWVAR 2
34351: PUSH
34352: LD_OWVAR 2
34356: PUSH
34357: LD_INT 1
34359: PLUS
34360: ST_TO_ADDR
// end ;
34361: LD_VAR 0 1
34365: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34366: LD_INT 0
34368: PPUSH
34369: PPUSH
34370: PPUSH
// for i in all_units do
34371: LD_ADDR_VAR 0 2
34375: PUSH
34376: LD_OWVAR 3
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34460
// if IsSelected ( i ) then
34384: LD_VAR 0 2
34388: PPUSH
34389: CALL_OW 306
34393: IFFALSE 34458
// begin j := GetSide ( i ) ;
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_VAR 0 2
34404: PPUSH
34405: CALL_OW 255
34409: ST_TO_ADDR
// if j = 8 then
34410: LD_VAR 0 3
34414: PUSH
34415: LD_INT 8
34417: EQUAL
34418: IFFALSE 34430
// j := 0 else
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 0
34427: ST_TO_ADDR
34428: GO 34444
// j := j + 1 ;
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_VAR 0 3
34439: PUSH
34440: LD_INT 1
34442: PLUS
34443: ST_TO_ADDR
// SetSide ( i , j ) ;
34444: LD_VAR 0 2
34448: PPUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: CALL_OW 235
// end ;
34458: GO 34381
34460: POP
34461: POP
// end ;
34462: LD_VAR 0 1
34466: RET
// export function hHackFog ; begin
34467: LD_INT 0
34469: PPUSH
// FogOff ( true ) ;
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 344
// end ;
34477: LD_VAR 0 1
34481: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34482: LD_INT 0
34484: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: LD_INT 1
34502: PPUSH
34503: LD_INT 1
34505: PPUSH
34506: CALL_OW 483
// CenterOnXY ( x , y ) ;
34510: LD_VAR 0 2
34514: PPUSH
34515: LD_VAR 0 3
34519: PPUSH
34520: CALL_OW 84
// end ;
34524: LD_VAR 0 4
34528: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34533: LD_VAR 0 1
34537: NOT
34538: PUSH
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 488
34553: NOT
34554: OR
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 266
34565: PUSH
34566: LD_INT 3
34568: NONEQUAL
34569: PUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 247
34579: PUSH
34580: LD_INT 1
34582: EQUAL
34583: NOT
34584: AND
34585: OR
34586: IFFALSE 34590
// exit ;
34588: GO 34739
// if GetType ( factory ) = unit_human then
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 247
34599: PUSH
34600: LD_INT 1
34602: EQUAL
34603: IFFALSE 34620
// factory := IsInUnit ( factory ) ;
34605: LD_ADDR_VAR 0 1
34609: PUSH
34610: LD_VAR 0 1
34614: PPUSH
34615: CALL_OW 310
34619: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 266
34629: PUSH
34630: LD_INT 3
34632: NONEQUAL
34633: IFFALSE 34637
// exit ;
34635: GO 34739
// if HexInfo ( x , y ) = factory then
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_VAR 0 3
34646: PPUSH
34647: CALL_OW 428
34651: PUSH
34652: LD_VAR 0 1
34656: EQUAL
34657: IFFALSE 34684
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34659: LD_ADDR_EXP 109
34663: PUSH
34664: LD_EXP 109
34668: PPUSH
34669: LD_VAR 0 1
34673: PPUSH
34674: LD_INT 0
34676: PPUSH
34677: CALL_OW 1
34681: ST_TO_ADDR
34682: GO 34735
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34684: LD_ADDR_EXP 109
34688: PUSH
34689: LD_EXP 109
34693: PPUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 255
34708: PUSH
34709: LD_VAR 0 1
34713: PUSH
34714: LD_VAR 0 2
34718: PUSH
34719: LD_VAR 0 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34735: CALL 34744 0 0
// end ;
34739: LD_VAR 0 4
34743: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34749: LD_STRING resetFactoryWaypoint();
34751: PPUSH
34752: CALL_OW 559
// if factoryWaypoints then
34756: LD_EXP 109
34760: IFFALSE 34886
// begin list := PrepareArray ( factoryWaypoints ) ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_EXP 109
34771: PPUSH
34772: CALL 81179 0 1
34776: ST_TO_ADDR
// for i := 1 to list do
34777: LD_ADDR_VAR 0 2
34781: PUSH
34782: DOUBLE
34783: LD_INT 1
34785: DEC
34786: ST_TO_ADDR
34787: LD_VAR 0 3
34791: PUSH
34792: FOR_TO
34793: IFFALSE 34884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34795: LD_STRING setFactoryWaypointXY(
34797: PUSH
34798: LD_VAR 0 3
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: STR
34813: PUSH
34814: LD_STRING ,
34816: STR
34817: PUSH
34818: LD_VAR 0 3
34822: PUSH
34823: LD_VAR 0 2
34827: ARRAY
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: STR
34833: PUSH
34834: LD_STRING ,
34836: STR
34837: PUSH
34838: LD_VAR 0 3
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: PUSH
34849: LD_INT 3
34851: ARRAY
34852: STR
34853: PUSH
34854: LD_STRING ,
34856: STR
34857: PUSH
34858: LD_VAR 0 3
34862: PUSH
34863: LD_VAR 0 2
34867: ARRAY
34868: PUSH
34869: LD_INT 4
34871: ARRAY
34872: STR
34873: PUSH
34874: LD_STRING )
34876: STR
34877: PPUSH
34878: CALL_OW 559
34882: GO 34792
34884: POP
34885: POP
// end ; end ;
34886: LD_VAR 0 1
34890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34891: LD_INT 0
34893: PPUSH
// if HexInfo ( x , y ) = warehouse then
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: CALL_OW 428
34908: PUSH
34909: LD_VAR 0 1
34913: EQUAL
34914: IFFALSE 34941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34916: LD_ADDR_EXP 110
34920: PUSH
34921: LD_EXP 110
34925: PPUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_INT 0
34933: PPUSH
34934: CALL_OW 1
34938: ST_TO_ADDR
34939: GO 34992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34941: LD_ADDR_EXP 110
34945: PUSH
34946: LD_EXP 110
34950: PPUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 255
34965: PUSH
34966: LD_VAR 0 1
34970: PUSH
34971: LD_VAR 0 2
34975: PUSH
34976: LD_VAR 0 3
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: PPUSH
34987: CALL_OW 1
34991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34992: CALL 35001 0 0
// end ;
34996: LD_VAR 0 4
35000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
35005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35006: LD_STRING resetWarehouseGatheringPoints();
35008: PPUSH
35009: CALL_OW 559
// if warehouseGatheringPoints then
35013: LD_EXP 110
35017: IFFALSE 35143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_EXP 110
35028: PPUSH
35029: CALL 81179 0 1
35033: ST_TO_ADDR
// for i := 1 to list do
35034: LD_ADDR_VAR 0 2
35038: PUSH
35039: DOUBLE
35040: LD_INT 1
35042: DEC
35043: ST_TO_ADDR
35044: LD_VAR 0 3
35048: PUSH
35049: FOR_TO
35050: IFFALSE 35141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35052: LD_STRING setWarehouseGatheringPointXY(
35054: PUSH
35055: LD_VAR 0 3
35059: PUSH
35060: LD_VAR 0 2
35064: ARRAY
35065: PUSH
35066: LD_INT 1
35068: ARRAY
35069: STR
35070: PUSH
35071: LD_STRING ,
35073: STR
35074: PUSH
35075: LD_VAR 0 3
35079: PUSH
35080: LD_VAR 0 2
35084: ARRAY
35085: PUSH
35086: LD_INT 2
35088: ARRAY
35089: STR
35090: PUSH
35091: LD_STRING ,
35093: STR
35094: PUSH
35095: LD_VAR 0 3
35099: PUSH
35100: LD_VAR 0 2
35104: ARRAY
35105: PUSH
35106: LD_INT 3
35108: ARRAY
35109: STR
35110: PUSH
35111: LD_STRING ,
35113: STR
35114: PUSH
35115: LD_VAR 0 3
35119: PUSH
35120: LD_VAR 0 2
35124: ARRAY
35125: PUSH
35126: LD_INT 4
35128: ARRAY
35129: STR
35130: PUSH
35131: LD_STRING )
35133: STR
35134: PPUSH
35135: CALL_OW 559
35139: GO 35049
35141: POP
35142: POP
// end ; end ;
35143: LD_VAR 0 1
35147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35148: LD_EXP 110
35152: IFFALSE 35837
35154: GO 35156
35156: DISABLE
35157: LD_INT 0
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
// begin enable ;
35168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_EXP 110
35178: PPUSH
35179: CALL 81179 0 1
35183: ST_TO_ADDR
// if not list then
35184: LD_VAR 0 3
35188: NOT
35189: IFFALSE 35193
// exit ;
35191: GO 35837
// for i := 1 to list do
35193: LD_ADDR_VAR 0 1
35197: PUSH
35198: DOUBLE
35199: LD_INT 1
35201: DEC
35202: ST_TO_ADDR
35203: LD_VAR 0 3
35207: PUSH
35208: FOR_TO
35209: IFFALSE 35835
// begin depot := list [ i ] [ 2 ] ;
35211: LD_ADDR_VAR 0 8
35215: PUSH
35216: LD_VAR 0 3
35220: PUSH
35221: LD_VAR 0 1
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_VAR 0 3
35240: PUSH
35241: LD_VAR 0 1
35245: ARRAY
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35251: LD_VAR 0 8
35255: PPUSH
35256: CALL_OW 301
35260: PUSH
35261: LD_VAR 0 5
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: CALL_OW 255
35275: NONEQUAL
35276: OR
35277: IFFALSE 35306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35279: LD_ADDR_EXP 110
35283: PUSH
35284: LD_EXP 110
35288: PPUSH
35289: LD_VAR 0 8
35293: PPUSH
35294: LD_INT 0
35296: PPUSH
35297: CALL_OW 1
35301: ST_TO_ADDR
// exit ;
35302: POP
35303: POP
35304: GO 35837
// end ; x := list [ i ] [ 3 ] ;
35306: LD_ADDR_VAR 0 6
35310: PUSH
35311: LD_VAR 0 3
35315: PUSH
35316: LD_VAR 0 1
35320: ARRAY
35321: PUSH
35322: LD_INT 3
35324: ARRAY
35325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35326: LD_ADDR_VAR 0 7
35330: PUSH
35331: LD_VAR 0 3
35335: PUSH
35336: LD_VAR 0 1
35340: ARRAY
35341: PUSH
35342: LD_INT 4
35344: ARRAY
35345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35346: LD_ADDR_VAR 0 9
35350: PUSH
35351: LD_VAR 0 6
35355: PPUSH
35356: LD_VAR 0 7
35360: PPUSH
35361: LD_INT 16
35363: PPUSH
35364: CALL 79767 0 3
35368: ST_TO_ADDR
// if not cratesNearbyPoint then
35369: LD_VAR 0 9
35373: NOT
35374: IFFALSE 35380
// exit ;
35376: POP
35377: POP
35378: GO 35837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35380: LD_ADDR_VAR 0 4
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: LD_VAR 0 5
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 60
35402: PUSH
35403: EMPTY
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 91
35412: PUSH
35413: LD_VAR 0 8
35417: PUSH
35418: LD_INT 6
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 25
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 25
35441: PUSH
35442: LD_INT 16
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: PPUSH
35460: CALL_OW 69
35464: PUSH
35465: LD_VAR 0 8
35469: PPUSH
35470: CALL_OW 313
35474: PPUSH
35475: LD_INT 3
35477: PUSH
35478: LD_INT 60
35480: PUSH
35481: EMPTY
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 25
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 25
35503: PUSH
35504: LD_INT 16
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 72
35524: UNION
35525: ST_TO_ADDR
// if tmp then
35526: LD_VAR 0 4
35530: IFFALSE 35610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35532: LD_ADDR_VAR 0 4
35536: PUSH
35537: LD_VAR 0 4
35541: PPUSH
35542: LD_INT 3
35544: PPUSH
35545: CALL 77736 0 2
35549: ST_TO_ADDR
// for j in tmp do
35550: LD_ADDR_VAR 0 2
35554: PUSH
35555: LD_VAR 0 4
35559: PUSH
35560: FOR_IN
35561: IFFALSE 35604
// begin if IsInUnit ( j ) then
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL_OW 310
35572: IFFALSE 35583
// ComExit ( j ) ;
35574: LD_VAR 0 2
35578: PPUSH
35579: CALL 77819 0 1
// AddComCollect ( j , x , y ) ;
35583: LD_VAR 0 2
35587: PPUSH
35588: LD_VAR 0 6
35592: PPUSH
35593: LD_VAR 0 7
35597: PPUSH
35598: CALL_OW 177
// end ;
35602: GO 35560
35604: POP
35605: POP
// exit ;
35606: POP
35607: POP
35608: GO 35837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35610: LD_ADDR_VAR 0 4
35614: PUSH
35615: LD_INT 22
35617: PUSH
35618: LD_VAR 0 5
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 91
35629: PUSH
35630: LD_VAR 0 8
35634: PUSH
35635: LD_INT 8
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 34
35648: PUSH
35649: LD_INT 12
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 34
35658: PUSH
35659: LD_INT 51
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 34
35668: PUSH
35669: LD_INT 32
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 34
35678: PUSH
35679: LD_INT 89
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PPUSH
35698: CALL_OW 69
35702: ST_TO_ADDR
// if tmp then
35703: LD_VAR 0 4
35707: IFFALSE 35833
// begin for j in tmp do
35709: LD_ADDR_VAR 0 2
35713: PUSH
35714: LD_VAR 0 4
35718: PUSH
35719: FOR_IN
35720: IFFALSE 35831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35722: LD_VAR 0 2
35726: PPUSH
35727: CALL_OW 262
35731: PUSH
35732: LD_INT 3
35734: EQUAL
35735: PUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: CALL_OW 261
35745: PUSH
35746: LD_INT 20
35748: GREATER
35749: OR
35750: PUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 314
35760: NOT
35761: AND
35762: PUSH
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 263
35772: PUSH
35773: LD_INT 1
35775: NONEQUAL
35776: PUSH
35777: LD_VAR 0 2
35781: PPUSH
35782: CALL_OW 311
35786: OR
35787: AND
35788: IFFALSE 35829
// begin ComCollect ( j , x , y ) ;
35790: LD_VAR 0 2
35794: PPUSH
35795: LD_VAR 0 6
35799: PPUSH
35800: LD_VAR 0 7
35804: PPUSH
35805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35809: LD_VAR 0 2
35813: PPUSH
35814: LD_VAR 0 8
35818: PPUSH
35819: CALL_OW 172
// exit ;
35823: POP
35824: POP
35825: POP
35826: POP
35827: GO 35837
// end ;
35829: GO 35719
35831: POP
35832: POP
// end ; end ;
35833: GO 35208
35835: POP
35836: POP
// end ; end_of_file
35837: PPOPN 9
35839: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35840: LD_INT 0
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35846: LD_VAR 0 1
35850: PPUSH
35851: CALL_OW 264
35855: PUSH
35856: LD_INT 91
35858: EQUAL
35859: IFFALSE 35931
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35861: LD_INT 68
35863: PPUSH
35864: LD_VAR 0 1
35868: PPUSH
35869: CALL_OW 255
35873: PPUSH
35874: CALL_OW 321
35878: PUSH
35879: LD_INT 2
35881: EQUAL
35882: IFFALSE 35894
// eff := 70 else
35884: LD_ADDR_VAR 0 4
35888: PUSH
35889: LD_INT 70
35891: ST_TO_ADDR
35892: GO 35902
// eff := 30 ;
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: LD_INT 30
35901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 250
35911: PPUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 251
35921: PPUSH
35922: LD_VAR 0 4
35926: PPUSH
35927: CALL_OW 495
// end ; end ;
35931: LD_VAR 0 2
35935: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35936: LD_INT 0
35938: PPUSH
// end ;
35939: LD_VAR 0 4
35943: RET
// export function SOS_Command ( cmd ) ; begin
35944: LD_INT 0
35946: PPUSH
// end ;
35947: LD_VAR 0 2
35951: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35952: LD_INT 0
35954: PPUSH
// end ;
35955: LD_VAR 0 6
35959: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
// if not vehicle or not factory then
35964: LD_VAR 0 1
35968: NOT
35969: PUSH
35970: LD_VAR 0 2
35974: NOT
35975: OR
35976: IFFALSE 35980
// exit ;
35978: GO 36211
// if factoryWaypoints >= factory then
35980: LD_EXP 109
35984: PUSH
35985: LD_VAR 0 2
35989: GREATEREQUAL
35990: IFFALSE 36211
// if factoryWaypoints [ factory ] then
35992: LD_EXP 109
35996: PUSH
35997: LD_VAR 0 2
36001: ARRAY
36002: IFFALSE 36211
// begin if GetControl ( vehicle ) = control_manual then
36004: LD_VAR 0 1
36008: PPUSH
36009: CALL_OW 263
36013: PUSH
36014: LD_INT 1
36016: EQUAL
36017: IFFALSE 36098
// begin driver := IsDrivenBy ( vehicle ) ;
36019: LD_ADDR_VAR 0 4
36023: PUSH
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL_OW 311
36033: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_EXP 109
36043: PUSH
36044: LD_VAR 0 2
36048: ARRAY
36049: PUSH
36050: LD_INT 3
36052: ARRAY
36053: PPUSH
36054: LD_EXP 109
36058: PUSH
36059: LD_VAR 0 2
36063: ARRAY
36064: PUSH
36065: LD_INT 4
36067: ARRAY
36068: PPUSH
36069: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36073: LD_VAR 0 4
36077: PPUSH
36078: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36082: LD_VAR 0 4
36086: PPUSH
36087: LD_VAR 0 2
36091: PPUSH
36092: CALL_OW 180
// end else
36096: GO 36211
// if GetControl ( vehicle ) = control_remote then
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 263
36107: PUSH
36108: LD_INT 2
36110: EQUAL
36111: IFFALSE 36172
// begin wait ( 0 0$2 ) ;
36113: LD_INT 70
36115: PPUSH
36116: CALL_OW 67
// if Connect ( vehicle ) then
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL 48060 0 1
36129: IFFALSE 36170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36131: LD_VAR 0 1
36135: PPUSH
36136: LD_EXP 109
36140: PUSH
36141: LD_VAR 0 2
36145: ARRAY
36146: PUSH
36147: LD_INT 3
36149: ARRAY
36150: PPUSH
36151: LD_EXP 109
36155: PUSH
36156: LD_VAR 0 2
36160: ARRAY
36161: PUSH
36162: LD_INT 4
36164: ARRAY
36165: PPUSH
36166: CALL_OW 171
// end else
36170: GO 36211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_EXP 109
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 3
36190: ARRAY
36191: PPUSH
36192: LD_EXP 109
36196: PUSH
36197: LD_VAR 0 2
36201: ARRAY
36202: PUSH
36203: LD_INT 4
36205: ARRAY
36206: PPUSH
36207: CALL_OW 171
// end ; end ;
36211: LD_VAR 0 3
36215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36216: LD_INT 0
36218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36219: LD_VAR 0 1
36223: PUSH
36224: LD_INT 250
36226: EQUAL
36227: PUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: CALL_OW 264
36237: PUSH
36238: LD_INT 81
36240: EQUAL
36241: AND
36242: IFFALSE 36263
// MinerPlaceMine ( unit , x , y ) ;
36244: LD_VAR 0 2
36248: PPUSH
36249: LD_VAR 0 4
36253: PPUSH
36254: LD_VAR 0 5
36258: PPUSH
36259: CALL 38648 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36263: LD_VAR 0 1
36267: PUSH
36268: LD_INT 251
36270: EQUAL
36271: PUSH
36272: LD_VAR 0 2
36276: PPUSH
36277: CALL_OW 264
36281: PUSH
36282: LD_INT 81
36284: EQUAL
36285: AND
36286: IFFALSE 36307
// MinerDetonateMine ( unit , x , y ) ;
36288: LD_VAR 0 2
36292: PPUSH
36293: LD_VAR 0 4
36297: PPUSH
36298: LD_VAR 0 5
36302: PPUSH
36303: CALL 38923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36307: LD_VAR 0 1
36311: PUSH
36312: LD_INT 252
36314: EQUAL
36315: PUSH
36316: LD_VAR 0 2
36320: PPUSH
36321: CALL_OW 264
36325: PUSH
36326: LD_INT 81
36328: EQUAL
36329: AND
36330: IFFALSE 36351
// MinerCreateMinefield ( unit , x , y ) ;
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 4
36341: PPUSH
36342: LD_VAR 0 5
36346: PPUSH
36347: CALL 39340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36351: LD_VAR 0 1
36355: PUSH
36356: LD_INT 253
36358: EQUAL
36359: PUSH
36360: LD_VAR 0 2
36364: PPUSH
36365: CALL_OW 257
36369: PUSH
36370: LD_INT 5
36372: EQUAL
36373: AND
36374: IFFALSE 36395
// ComBinocular ( unit , x , y ) ;
36376: LD_VAR 0 2
36380: PPUSH
36381: LD_VAR 0 4
36385: PPUSH
36386: LD_VAR 0 5
36390: PPUSH
36391: CALL 39709 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36395: LD_VAR 0 1
36399: PUSH
36400: LD_INT 254
36402: EQUAL
36403: PUSH
36404: LD_VAR 0 2
36408: PPUSH
36409: CALL_OW 264
36413: PUSH
36414: LD_INT 99
36416: EQUAL
36417: AND
36418: PUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 263
36428: PUSH
36429: LD_INT 3
36431: EQUAL
36432: AND
36433: IFFALSE 36449
// HackDestroyVehicle ( unit , selectedUnit ) ;
36435: LD_VAR 0 2
36439: PPUSH
36440: LD_VAR 0 3
36444: PPUSH
36445: CALL 38012 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36449: LD_VAR 0 1
36453: PUSH
36454: LD_INT 255
36456: EQUAL
36457: PUSH
36458: LD_VAR 0 2
36462: PPUSH
36463: CALL_OW 264
36467: PUSH
36468: LD_INT 14
36470: PUSH
36471: LD_INT 53
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: IN
36478: AND
36479: PUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: LD_VAR 0 5
36489: PPUSH
36490: CALL_OW 488
36494: AND
36495: IFFALSE 36519
// CutTreeXYR ( unit , x , y , 12 ) ;
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: LD_VAR 0 5
36511: PPUSH
36512: LD_INT 12
36514: PPUSH
36515: CALL 36582 0 4
// if cmd = 256 then
36519: LD_VAR 0 1
36523: PUSH
36524: LD_INT 256
36526: EQUAL
36527: IFFALSE 36548
// SetFactoryWaypoint ( unit , x , y ) ;
36529: LD_VAR 0 2
36533: PPUSH
36534: LD_VAR 0 4
36538: PPUSH
36539: LD_VAR 0 5
36543: PPUSH
36544: CALL 34529 0 3
// if cmd = 257 then
36548: LD_VAR 0 1
36552: PUSH
36553: LD_INT 257
36555: EQUAL
36556: IFFALSE 36577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36558: LD_VAR 0 2
36562: PPUSH
36563: LD_VAR 0 4
36567: PPUSH
36568: LD_VAR 0 5
36572: PPUSH
36573: CALL 34891 0 3
// end ;
36577: LD_VAR 0 6
36581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36593: LD_VAR 0 1
36597: NOT
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 3
36608: PPUSH
36609: CALL_OW 488
36613: NOT
36614: OR
36615: PUSH
36616: LD_VAR 0 4
36620: NOT
36621: OR
36622: IFFALSE 36626
// exit ;
36624: GO 36966
// list := [ ] ;
36626: LD_ADDR_VAR 0 13
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// if x - r < 0 then
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 4
36642: MINUS
36643: PUSH
36644: LD_INT 0
36646: LESS
36647: IFFALSE 36659
// min_x := 0 else
36649: LD_ADDR_VAR 0 7
36653: PUSH
36654: LD_INT 0
36656: ST_TO_ADDR
36657: GO 36675
// min_x := x - r ;
36659: LD_ADDR_VAR 0 7
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_VAR 0 4
36673: MINUS
36674: ST_TO_ADDR
// if y - r < 0 then
36675: LD_VAR 0 3
36679: PUSH
36680: LD_VAR 0 4
36684: MINUS
36685: PUSH
36686: LD_INT 0
36688: LESS
36689: IFFALSE 36701
// min_y := 0 else
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: LD_INT 0
36698: ST_TO_ADDR
36699: GO 36717
// min_y := y - r ;
36701: LD_ADDR_VAR 0 8
36705: PUSH
36706: LD_VAR 0 3
36710: PUSH
36711: LD_VAR 0 4
36715: MINUS
36716: ST_TO_ADDR
// max_x := x + r ;
36717: LD_ADDR_VAR 0 9
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_VAR 0 4
36731: PLUS
36732: ST_TO_ADDR
// max_y := y + r ;
36733: LD_ADDR_VAR 0 10
36737: PUSH
36738: LD_VAR 0 3
36742: PUSH
36743: LD_VAR 0 4
36747: PLUS
36748: ST_TO_ADDR
// for _x = min_x to max_x do
36749: LD_ADDR_VAR 0 11
36753: PUSH
36754: DOUBLE
36755: LD_VAR 0 7
36759: DEC
36760: ST_TO_ADDR
36761: LD_VAR 0 9
36765: PUSH
36766: FOR_TO
36767: IFFALSE 36884
// for _y = min_y to max_y do
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: DOUBLE
36775: LD_VAR 0 8
36779: DEC
36780: ST_TO_ADDR
36781: LD_VAR 0 10
36785: PUSH
36786: FOR_TO
36787: IFFALSE 36880
// begin if not ValidHex ( _x , _y ) then
36789: LD_VAR 0 11
36793: PPUSH
36794: LD_VAR 0 12
36798: PPUSH
36799: CALL_OW 488
36803: NOT
36804: IFFALSE 36808
// continue ;
36806: GO 36786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36808: LD_VAR 0 11
36812: PPUSH
36813: LD_VAR 0 12
36817: PPUSH
36818: CALL_OW 351
36822: PUSH
36823: LD_VAR 0 11
36827: PPUSH
36828: LD_VAR 0 12
36832: PPUSH
36833: CALL_OW 554
36837: AND
36838: IFFALSE 36878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36840: LD_ADDR_VAR 0 13
36844: PUSH
36845: LD_VAR 0 13
36849: PPUSH
36850: LD_VAR 0 13
36854: PUSH
36855: LD_INT 1
36857: PLUS
36858: PPUSH
36859: LD_VAR 0 11
36863: PUSH
36864: LD_VAR 0 12
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PPUSH
36873: CALL_OW 2
36877: ST_TO_ADDR
// end ;
36878: GO 36786
36880: POP
36881: POP
36882: GO 36766
36884: POP
36885: POP
// if not list then
36886: LD_VAR 0 13
36890: NOT
36891: IFFALSE 36895
// exit ;
36893: GO 36966
// for i in list do
36895: LD_ADDR_VAR 0 6
36899: PUSH
36900: LD_VAR 0 13
36904: PUSH
36905: FOR_IN
36906: IFFALSE 36964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36908: LD_VAR 0 1
36912: PPUSH
36913: LD_STRING M
36915: PUSH
36916: LD_VAR 0 6
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PUSH
36925: LD_VAR 0 6
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: PPUSH
36958: CALL_OW 447
36962: GO 36905
36964: POP
36965: POP
// end ;
36966: LD_VAR 0 5
36970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36971: LD_EXP 112
36975: NOT
36976: IFFALSE 37026
36978: GO 36980
36980: DISABLE
// begin initHack := true ;
36981: LD_ADDR_EXP 112
36985: PUSH
36986: LD_INT 1
36988: ST_TO_ADDR
// hackTanks := [ ] ;
36989: LD_ADDR_EXP 113
36993: PUSH
36994: EMPTY
36995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36996: LD_ADDR_EXP 114
37000: PUSH
37001: EMPTY
37002: ST_TO_ADDR
// hackLimit := 3 ;
37003: LD_ADDR_EXP 115
37007: PUSH
37008: LD_INT 3
37010: ST_TO_ADDR
// hackDist := 12 ;
37011: LD_ADDR_EXP 116
37015: PUSH
37016: LD_INT 12
37018: ST_TO_ADDR
// hackCounter := [ ] ;
37019: LD_ADDR_EXP 117
37023: PUSH
37024: EMPTY
37025: ST_TO_ADDR
// end ;
37026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37027: LD_EXP 112
37031: PUSH
37032: LD_INT 34
37034: PUSH
37035: LD_INT 99
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PPUSH
37042: CALL_OW 69
37046: AND
37047: IFFALSE 37300
37049: GO 37051
37051: DISABLE
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
// begin enable ;
37056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37057: LD_ADDR_VAR 0 1
37061: PUSH
37062: LD_INT 34
37064: PUSH
37065: LD_INT 99
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PPUSH
37072: CALL_OW 69
37076: PUSH
37077: FOR_IN
37078: IFFALSE 37298
// begin if not i in hackTanks then
37080: LD_VAR 0 1
37084: PUSH
37085: LD_EXP 113
37089: IN
37090: NOT
37091: IFFALSE 37174
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37093: LD_ADDR_EXP 113
37097: PUSH
37098: LD_EXP 113
37102: PPUSH
37103: LD_EXP 113
37107: PUSH
37108: LD_INT 1
37110: PLUS
37111: PPUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL_OW 1
37121: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37122: LD_ADDR_EXP 114
37126: PUSH
37127: LD_EXP 114
37131: PPUSH
37132: LD_EXP 114
37136: PUSH
37137: LD_INT 1
37139: PLUS
37140: PPUSH
37141: EMPTY
37142: PPUSH
37143: CALL_OW 1
37147: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37148: LD_ADDR_EXP 117
37152: PUSH
37153: LD_EXP 117
37157: PPUSH
37158: LD_EXP 117
37162: PUSH
37163: LD_INT 1
37165: PLUS
37166: PPUSH
37167: EMPTY
37168: PPUSH
37169: CALL_OW 1
37173: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 302
37183: NOT
37184: IFFALSE 37197
// begin HackUnlinkAll ( i ) ;
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL 37303 0 1
// continue ;
37195: GO 37077
// end ; HackCheckCapturedStatus ( i ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL 37746 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37206: LD_ADDR_VAR 0 2
37210: PUSH
37211: LD_INT 81
37213: PUSH
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 255
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 33
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 91
37240: PUSH
37241: LD_VAR 0 1
37245: PUSH
37246: LD_EXP 116
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 50
37258: PUSH
37259: EMPTY
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: PPUSH
37268: CALL_OW 69
37272: ST_TO_ADDR
// if not tmp then
37273: LD_VAR 0 2
37277: NOT
37278: IFFALSE 37282
// continue ;
37280: GO 37077
// HackLink ( i , tmp ) ;
37282: LD_VAR 0 1
37286: PPUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: CALL 37439 0 2
// end ;
37296: GO 37077
37298: POP
37299: POP
// end ;
37300: PPOPN 2
37302: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// if not hack in hackTanks then
37308: LD_VAR 0 1
37312: PUSH
37313: LD_EXP 113
37317: IN
37318: NOT
37319: IFFALSE 37323
// exit ;
37321: GO 37434
// index := GetElementIndex ( hackTanks , hack ) ;
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_EXP 113
37332: PPUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL 44876 0 2
37342: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37343: LD_EXP 114
37347: PUSH
37348: LD_VAR 0 4
37352: ARRAY
37353: IFFALSE 37434
// begin for i in hackTanksCaptured [ index ] do
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_EXP 114
37364: PUSH
37365: LD_VAR 0 4
37369: ARRAY
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37398
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37374: LD_VAR 0 3
37378: PUSH
37379: LD_INT 1
37381: ARRAY
37382: PPUSH
37383: LD_VAR 0 3
37387: PUSH
37388: LD_INT 2
37390: ARRAY
37391: PPUSH
37392: CALL_OW 235
37396: GO 37371
37398: POP
37399: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37400: LD_ADDR_EXP 114
37404: PUSH
37405: LD_EXP 114
37409: PPUSH
37410: LD_VAR 0 4
37414: PPUSH
37415: EMPTY
37416: PPUSH
37417: CALL_OW 1
37421: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37422: LD_VAR 0 1
37426: PPUSH
37427: LD_INT 0
37429: PPUSH
37430: CALL_OW 505
// end ; end ;
37434: LD_VAR 0 2
37438: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37439: LD_INT 0
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not hack in hackTanks or not vehicles then
37444: LD_VAR 0 1
37448: PUSH
37449: LD_EXP 113
37453: IN
37454: NOT
37455: PUSH
37456: LD_VAR 0 2
37460: NOT
37461: OR
37462: IFFALSE 37466
// exit ;
37464: GO 37741
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37466: LD_ADDR_VAR 0 2
37470: PUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: LD_VAR 0 2
37480: PPUSH
37481: LD_INT 1
37483: PPUSH
37484: LD_INT 1
37486: PPUSH
37487: CALL 45526 0 4
37491: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37492: LD_ADDR_VAR 0 5
37496: PUSH
37497: LD_EXP 113
37501: PPUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL 44876 0 2
37511: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37512: LD_EXP 114
37516: PUSH
37517: LD_VAR 0 5
37521: ARRAY
37522: PUSH
37523: LD_EXP 115
37527: LESS
37528: IFFALSE 37717
// begin for i := 1 to vehicles do
37530: LD_ADDR_VAR 0 4
37534: PUSH
37535: DOUBLE
37536: LD_INT 1
37538: DEC
37539: ST_TO_ADDR
37540: LD_VAR 0 2
37544: PUSH
37545: FOR_TO
37546: IFFALSE 37715
// begin if hackTanksCaptured [ index ] = hackLimit then
37548: LD_EXP 114
37552: PUSH
37553: LD_VAR 0 5
37557: ARRAY
37558: PUSH
37559: LD_EXP 115
37563: EQUAL
37564: IFFALSE 37568
// break ;
37566: GO 37715
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37568: LD_ADDR_EXP 117
37572: PUSH
37573: LD_EXP 117
37577: PPUSH
37578: LD_VAR 0 5
37582: PPUSH
37583: LD_EXP 117
37587: PUSH
37588: LD_VAR 0 5
37592: ARRAY
37593: PUSH
37594: LD_INT 1
37596: PLUS
37597: PPUSH
37598: CALL_OW 1
37602: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37603: LD_ADDR_EXP 114
37607: PUSH
37608: LD_EXP 114
37612: PPUSH
37613: LD_VAR 0 5
37617: PUSH
37618: LD_EXP 114
37622: PUSH
37623: LD_VAR 0 5
37627: ARRAY
37628: PUSH
37629: LD_INT 1
37631: PLUS
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PPUSH
37637: LD_VAR 0 2
37641: PUSH
37642: LD_VAR 0 4
37646: ARRAY
37647: PUSH
37648: LD_VAR 0 2
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PPUSH
37659: CALL_OW 255
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PPUSH
37668: CALL 45091 0 3
37672: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37673: LD_VAR 0 2
37677: PUSH
37678: LD_VAR 0 4
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 255
37693: PPUSH
37694: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37698: LD_VAR 0 2
37702: PUSH
37703: LD_VAR 0 4
37707: ARRAY
37708: PPUSH
37709: CALL_OW 141
// end ;
37713: GO 37545
37715: POP
37716: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37717: LD_VAR 0 1
37721: PPUSH
37722: LD_EXP 114
37726: PUSH
37727: LD_VAR 0 5
37731: ARRAY
37732: PUSH
37733: LD_INT 0
37735: PLUS
37736: PPUSH
37737: CALL_OW 505
// end ;
37741: LD_VAR 0 3
37745: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
// if not hack in hackTanks then
37752: LD_VAR 0 1
37756: PUSH
37757: LD_EXP 113
37761: IN
37762: NOT
37763: IFFALSE 37767
// exit ;
37765: GO 38007
// index := GetElementIndex ( hackTanks , hack ) ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_EXP 113
37776: PPUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL 44876 0 2
37786: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: DOUBLE
37793: LD_EXP 114
37797: PUSH
37798: LD_VAR 0 4
37802: ARRAY
37803: INC
37804: ST_TO_ADDR
37805: LD_INT 1
37807: PUSH
37808: FOR_DOWNTO
37809: IFFALSE 37981
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: LD_EXP 114
37820: PUSH
37821: LD_VAR 0 4
37825: ARRAY
37826: PUSH
37827: LD_VAR 0 3
37831: ARRAY
37832: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37833: LD_VAR 0 5
37837: PUSH
37838: LD_INT 1
37840: ARRAY
37841: PPUSH
37842: CALL_OW 302
37846: NOT
37847: PUSH
37848: LD_VAR 0 5
37852: PUSH
37853: LD_INT 1
37855: ARRAY
37856: PPUSH
37857: CALL_OW 255
37861: PUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 255
37871: NONEQUAL
37872: OR
37873: IFFALSE 37979
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37875: LD_VAR 0 5
37879: PUSH
37880: LD_INT 1
37882: ARRAY
37883: PPUSH
37884: CALL_OW 305
37888: PUSH
37889: LD_VAR 0 5
37893: PUSH
37894: LD_INT 1
37896: ARRAY
37897: PPUSH
37898: CALL_OW 255
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 255
37912: EQUAL
37913: AND
37914: IFFALSE 37938
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37916: LD_VAR 0 5
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: LD_VAR 0 5
37929: PUSH
37930: LD_INT 2
37932: ARRAY
37933: PPUSH
37934: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37938: LD_ADDR_EXP 114
37942: PUSH
37943: LD_EXP 114
37947: PPUSH
37948: LD_VAR 0 4
37952: PPUSH
37953: LD_EXP 114
37957: PUSH
37958: LD_VAR 0 4
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 3
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end ; end ;
37979: GO 37808
37981: POP
37982: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37983: LD_VAR 0 1
37987: PPUSH
37988: LD_EXP 114
37992: PUSH
37993: LD_VAR 0 4
37997: ARRAY
37998: PUSH
37999: LD_INT 0
38001: PLUS
38002: PPUSH
38003: CALL_OW 505
// end ;
38007: LD_VAR 0 2
38011: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
// if not hack in hackTanks then
38018: LD_VAR 0 1
38022: PUSH
38023: LD_EXP 113
38027: IN
38028: NOT
38029: IFFALSE 38033
// exit ;
38031: GO 38118
// index := GetElementIndex ( hackTanks , hack ) ;
38033: LD_ADDR_VAR 0 5
38037: PUSH
38038: LD_EXP 113
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL 44876 0 2
38052: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: DOUBLE
38059: LD_INT 1
38061: DEC
38062: ST_TO_ADDR
38063: LD_EXP 114
38067: PUSH
38068: LD_VAR 0 5
38072: ARRAY
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38116
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38077: LD_EXP 114
38081: PUSH
38082: LD_VAR 0 5
38086: ARRAY
38087: PUSH
38088: LD_VAR 0 4
38092: ARRAY
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: PUSH
38098: LD_VAR 0 2
38102: EQUAL
38103: IFFALSE 38114
// KillUnit ( vehicle ) ;
38105: LD_VAR 0 2
38109: PPUSH
38110: CALL_OW 66
38114: GO 38074
38116: POP
38117: POP
// end ;
38118: LD_VAR 0 3
38122: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38123: LD_EXP 118
38127: NOT
38128: IFFALSE 38163
38130: GO 38132
38132: DISABLE
// begin initMiner := true ;
38133: LD_ADDR_EXP 118
38137: PUSH
38138: LD_INT 1
38140: ST_TO_ADDR
// minersList := [ ] ;
38141: LD_ADDR_EXP 119
38145: PUSH
38146: EMPTY
38147: ST_TO_ADDR
// minerMinesList := [ ] ;
38148: LD_ADDR_EXP 120
38152: PUSH
38153: EMPTY
38154: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38155: LD_ADDR_EXP 121
38159: PUSH
38160: LD_INT 5
38162: ST_TO_ADDR
// end ;
38163: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38164: LD_EXP 118
38168: PUSH
38169: LD_INT 34
38171: PUSH
38172: LD_INT 81
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 69
38183: AND
38184: IFFALSE 38645
38186: GO 38188
38188: DISABLE
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// begin enable ;
38195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38196: LD_ADDR_VAR 0 1
38200: PUSH
38201: LD_INT 34
38203: PUSH
38204: LD_INT 81
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PPUSH
38211: CALL_OW 69
38215: PUSH
38216: FOR_IN
38217: IFFALSE 38289
// begin if not i in minersList then
38219: LD_VAR 0 1
38223: PUSH
38224: LD_EXP 119
38228: IN
38229: NOT
38230: IFFALSE 38287
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38232: LD_ADDR_EXP 119
38236: PUSH
38237: LD_EXP 119
38241: PPUSH
38242: LD_EXP 119
38246: PUSH
38247: LD_INT 1
38249: PLUS
38250: PPUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 1
38260: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38261: LD_ADDR_EXP 120
38265: PUSH
38266: LD_EXP 120
38270: PPUSH
38271: LD_EXP 120
38275: PUSH
38276: LD_INT 1
38278: PLUS
38279: PPUSH
38280: EMPTY
38281: PPUSH
38282: CALL_OW 1
38286: ST_TO_ADDR
// end end ;
38287: GO 38216
38289: POP
38290: POP
// for i := minerMinesList downto 1 do
38291: LD_ADDR_VAR 0 1
38295: PUSH
38296: DOUBLE
38297: LD_EXP 120
38301: INC
38302: ST_TO_ADDR
38303: LD_INT 1
38305: PUSH
38306: FOR_DOWNTO
38307: IFFALSE 38643
// begin if IsLive ( minersList [ i ] ) then
38309: LD_EXP 119
38313: PUSH
38314: LD_VAR 0 1
38318: ARRAY
38319: PPUSH
38320: CALL_OW 300
38324: IFFALSE 38352
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38326: LD_EXP 119
38330: PUSH
38331: LD_VAR 0 1
38335: ARRAY
38336: PPUSH
38337: LD_EXP 120
38341: PUSH
38342: LD_VAR 0 1
38346: ARRAY
38347: PPUSH
38348: CALL_OW 505
// if not minerMinesList [ i ] then
38352: LD_EXP 120
38356: PUSH
38357: LD_VAR 0 1
38361: ARRAY
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38306
// for j := minerMinesList [ i ] downto 1 do
38367: LD_ADDR_VAR 0 2
38371: PUSH
38372: DOUBLE
38373: LD_EXP 120
38377: PUSH
38378: LD_VAR 0 1
38382: ARRAY
38383: INC
38384: ST_TO_ADDR
38385: LD_INT 1
38387: PUSH
38388: FOR_DOWNTO
38389: IFFALSE 38639
// begin side := GetSide ( minersList [ i ] ) ;
38391: LD_ADDR_VAR 0 3
38395: PUSH
38396: LD_EXP 119
38400: PUSH
38401: LD_VAR 0 1
38405: ARRAY
38406: PPUSH
38407: CALL_OW 255
38411: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38412: LD_ADDR_VAR 0 4
38416: PUSH
38417: LD_EXP 120
38421: PUSH
38422: LD_VAR 0 1
38426: ARRAY
38427: PUSH
38428: LD_VAR 0 2
38432: ARRAY
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: PPUSH
38438: LD_EXP 120
38442: PUSH
38443: LD_VAR 0 1
38447: ARRAY
38448: PUSH
38449: LD_VAR 0 2
38453: ARRAY
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PPUSH
38459: CALL_OW 428
38463: ST_TO_ADDR
// if not tmp then
38464: LD_VAR 0 4
38468: NOT
38469: IFFALSE 38473
// continue ;
38471: GO 38388
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38473: LD_VAR 0 4
38477: PUSH
38478: LD_INT 81
38480: PUSH
38481: LD_VAR 0 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 69
38494: IN
38495: PUSH
38496: LD_EXP 120
38500: PUSH
38501: LD_VAR 0 1
38505: ARRAY
38506: PUSH
38507: LD_VAR 0 2
38511: ARRAY
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PPUSH
38517: LD_EXP 120
38521: PUSH
38522: LD_VAR 0 1
38526: ARRAY
38527: PUSH
38528: LD_VAR 0 2
38532: ARRAY
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PPUSH
38538: CALL_OW 458
38542: AND
38543: IFFALSE 38637
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38545: LD_EXP 120
38549: PUSH
38550: LD_VAR 0 1
38554: ARRAY
38555: PUSH
38556: LD_VAR 0 2
38560: ARRAY
38561: PUSH
38562: LD_INT 1
38564: ARRAY
38565: PPUSH
38566: LD_EXP 120
38570: PUSH
38571: LD_VAR 0 1
38575: ARRAY
38576: PUSH
38577: LD_VAR 0 2
38581: ARRAY
38582: PUSH
38583: LD_INT 2
38585: ARRAY
38586: PPUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38596: LD_ADDR_EXP 120
38600: PUSH
38601: LD_EXP 120
38605: PPUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: LD_EXP 120
38615: PUSH
38616: LD_VAR 0 1
38620: ARRAY
38621: PPUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: CALL_OW 3
38631: PPUSH
38632: CALL_OW 1
38636: ST_TO_ADDR
// end ; end ;
38637: GO 38388
38639: POP
38640: POP
// end ;
38641: GO 38306
38643: POP
38644: POP
// end ;
38645: PPOPN 4
38647: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38648: LD_INT 0
38650: PPUSH
38651: PPUSH
// result := false ;
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: LD_INT 0
38659: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL_OW 264
38669: PUSH
38670: LD_INT 81
38672: EQUAL
38673: NOT
38674: IFFALSE 38678
// exit ;
38676: GO 38918
// index := GetElementIndex ( minersList , unit ) ;
38678: LD_ADDR_VAR 0 5
38682: PUSH
38683: LD_EXP 119
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL 44876 0 2
38697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38698: LD_EXP 120
38702: PUSH
38703: LD_VAR 0 5
38707: ARRAY
38708: PUSH
38709: LD_EXP 121
38713: GREATEREQUAL
38714: IFFALSE 38718
// exit ;
38716: GO 38918
// ComMoveXY ( unit , x , y ) ;
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_VAR 0 2
38727: PPUSH
38728: LD_VAR 0 3
38732: PPUSH
38733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38737: LD_INT 35
38739: PPUSH
38740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_VAR 0 2
38753: PPUSH
38754: LD_VAR 0 3
38758: PPUSH
38759: CALL 76231 0 3
38763: NOT
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 314
38774: AND
38775: IFFALSE 38779
// exit ;
38777: GO 38918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38779: LD_VAR 0 2
38783: PPUSH
38784: LD_VAR 0 3
38788: PPUSH
38789: CALL_OW 428
38793: PUSH
38794: LD_VAR 0 1
38798: EQUAL
38799: PUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 314
38809: NOT
38810: AND
38811: IFFALSE 38737
// PlaySoundXY ( x , y , PlantMine ) ;
38813: LD_VAR 0 2
38817: PPUSH
38818: LD_VAR 0 3
38822: PPUSH
38823: LD_STRING PlantMine
38825: PPUSH
38826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38830: LD_VAR 0 2
38834: PPUSH
38835: LD_VAR 0 3
38839: PPUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 255
38849: PPUSH
38850: LD_INT 0
38852: PPUSH
38853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38857: LD_ADDR_EXP 120
38861: PUSH
38862: LD_EXP 120
38866: PPUSH
38867: LD_VAR 0 5
38871: PUSH
38872: LD_EXP 120
38876: PUSH
38877: LD_VAR 0 5
38881: ARRAY
38882: PUSH
38883: LD_INT 1
38885: PLUS
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PPUSH
38891: LD_VAR 0 2
38895: PUSH
38896: LD_VAR 0 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PPUSH
38905: CALL 45091 0 3
38909: ST_TO_ADDR
// result := true ;
38910: LD_ADDR_VAR 0 4
38914: PUSH
38915: LD_INT 1
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 4
38922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
38927: PPUSH
// if not unit in minersList then
38928: LD_VAR 0 1
38932: PUSH
38933: LD_EXP 119
38937: IN
38938: NOT
38939: IFFALSE 38943
// exit ;
38941: GO 39335
// index := GetElementIndex ( minersList , unit ) ;
38943: LD_ADDR_VAR 0 6
38947: PUSH
38948: LD_EXP 119
38952: PPUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL 44876 0 2
38962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38963: LD_ADDR_VAR 0 5
38967: PUSH
38968: DOUBLE
38969: LD_EXP 120
38973: PUSH
38974: LD_VAR 0 6
38978: ARRAY
38979: INC
38980: ST_TO_ADDR
38981: LD_INT 1
38983: PUSH
38984: FOR_DOWNTO
38985: IFFALSE 39146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38987: LD_EXP 120
38991: PUSH
38992: LD_VAR 0 6
38996: ARRAY
38997: PUSH
38998: LD_VAR 0 5
39002: ARRAY
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PUSH
39008: LD_VAR 0 2
39012: EQUAL
39013: PUSH
39014: LD_EXP 120
39018: PUSH
39019: LD_VAR 0 6
39023: ARRAY
39024: PUSH
39025: LD_VAR 0 5
39029: ARRAY
39030: PUSH
39031: LD_INT 2
39033: ARRAY
39034: PUSH
39035: LD_VAR 0 3
39039: EQUAL
39040: AND
39041: IFFALSE 39144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39043: LD_EXP 120
39047: PUSH
39048: LD_VAR 0 6
39052: ARRAY
39053: PUSH
39054: LD_VAR 0 5
39058: ARRAY
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PPUSH
39064: LD_EXP 120
39068: PUSH
39069: LD_VAR 0 6
39073: ARRAY
39074: PUSH
39075: LD_VAR 0 5
39079: ARRAY
39080: PUSH
39081: LD_INT 2
39083: ARRAY
39084: PPUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 255
39094: PPUSH
39095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39099: LD_ADDR_EXP 120
39103: PUSH
39104: LD_EXP 120
39108: PPUSH
39109: LD_VAR 0 6
39113: PPUSH
39114: LD_EXP 120
39118: PUSH
39119: LD_VAR 0 6
39123: ARRAY
39124: PPUSH
39125: LD_VAR 0 5
39129: PPUSH
39130: CALL_OW 3
39134: PPUSH
39135: CALL_OW 1
39139: ST_TO_ADDR
// exit ;
39140: POP
39141: POP
39142: GO 39335
// end ; end ;
39144: GO 38984
39146: POP
39147: POP
// for i := minerMinesList [ index ] downto 1 do
39148: LD_ADDR_VAR 0 5
39152: PUSH
39153: DOUBLE
39154: LD_EXP 120
39158: PUSH
39159: LD_VAR 0 6
39163: ARRAY
39164: INC
39165: ST_TO_ADDR
39166: LD_INT 1
39168: PUSH
39169: FOR_DOWNTO
39170: IFFALSE 39333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39172: LD_EXP 120
39176: PUSH
39177: LD_VAR 0 6
39181: ARRAY
39182: PUSH
39183: LD_VAR 0 5
39187: ARRAY
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: PPUSH
39193: LD_EXP 120
39197: PUSH
39198: LD_VAR 0 6
39202: ARRAY
39203: PUSH
39204: LD_VAR 0 5
39208: ARRAY
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PPUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_VAR 0 3
39223: PPUSH
39224: CALL_OW 298
39228: PUSH
39229: LD_INT 6
39231: LESS
39232: IFFALSE 39331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39234: LD_EXP 120
39238: PUSH
39239: LD_VAR 0 6
39243: ARRAY
39244: PUSH
39245: LD_VAR 0 5
39249: ARRAY
39250: PUSH
39251: LD_INT 1
39253: ARRAY
39254: PPUSH
39255: LD_EXP 120
39259: PUSH
39260: LD_VAR 0 6
39264: ARRAY
39265: PUSH
39266: LD_VAR 0 5
39270: ARRAY
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 255
39285: PPUSH
39286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39290: LD_ADDR_EXP 120
39294: PUSH
39295: LD_EXP 120
39299: PPUSH
39300: LD_VAR 0 6
39304: PPUSH
39305: LD_EXP 120
39309: PUSH
39310: LD_VAR 0 6
39314: ARRAY
39315: PPUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL_OW 3
39325: PPUSH
39326: CALL_OW 1
39330: ST_TO_ADDR
// end ; end ;
39331: GO 39169
39333: POP
39334: POP
// end ;
39335: LD_VAR 0 4
39339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39340: LD_INT 0
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 81
39363: EQUAL
39364: NOT
39365: PUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_EXP 119
39375: IN
39376: NOT
39377: OR
39378: IFFALSE 39382
// exit ;
39380: GO 39704
// index := GetElementIndex ( minersList , unit ) ;
39382: LD_ADDR_VAR 0 6
39386: PUSH
39387: LD_EXP 119
39391: PPUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL 44876 0 2
39401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39402: LD_ADDR_VAR 0 8
39406: PUSH
39407: LD_EXP 121
39411: PUSH
39412: LD_EXP 120
39416: PUSH
39417: LD_VAR 0 6
39421: ARRAY
39422: MINUS
39423: ST_TO_ADDR
// if not minesFreeAmount then
39424: LD_VAR 0 8
39428: NOT
39429: IFFALSE 39433
// exit ;
39431: GO 39704
// tmp := [ ] ;
39433: LD_ADDR_VAR 0 7
39437: PUSH
39438: EMPTY
39439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39440: LD_ADDR_VAR 0 5
39444: PUSH
39445: DOUBLE
39446: LD_INT 1
39448: DEC
39449: ST_TO_ADDR
39450: LD_VAR 0 8
39454: PUSH
39455: FOR_TO
39456: IFFALSE 39651
// begin _d := rand ( 0 , 5 ) ;
39458: LD_ADDR_VAR 0 11
39462: PUSH
39463: LD_INT 0
39465: PPUSH
39466: LD_INT 5
39468: PPUSH
39469: CALL_OW 12
39473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39474: LD_ADDR_VAR 0 12
39478: PUSH
39479: LD_INT 2
39481: PPUSH
39482: LD_INT 6
39484: PPUSH
39485: CALL_OW 12
39489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39490: LD_ADDR_VAR 0 9
39494: PUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: LD_VAR 0 11
39504: PPUSH
39505: LD_VAR 0 12
39509: PPUSH
39510: CALL_OW 272
39514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39515: LD_ADDR_VAR 0 10
39519: PUSH
39520: LD_VAR 0 3
39524: PPUSH
39525: LD_VAR 0 11
39529: PPUSH
39530: LD_VAR 0 12
39534: PPUSH
39535: CALL_OW 273
39539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39540: LD_VAR 0 9
39544: PPUSH
39545: LD_VAR 0 10
39549: PPUSH
39550: CALL_OW 488
39554: PUSH
39555: LD_VAR 0 9
39559: PUSH
39560: LD_VAR 0 10
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_VAR 0 7
39573: IN
39574: NOT
39575: AND
39576: PUSH
39577: LD_VAR 0 9
39581: PPUSH
39582: LD_VAR 0 10
39586: PPUSH
39587: CALL_OW 458
39591: NOT
39592: AND
39593: IFFALSE 39635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39595: LD_ADDR_VAR 0 7
39599: PUSH
39600: LD_VAR 0 7
39604: PPUSH
39605: LD_VAR 0 7
39609: PUSH
39610: LD_INT 1
39612: PLUS
39613: PPUSH
39614: LD_VAR 0 9
39618: PUSH
39619: LD_VAR 0 10
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PPUSH
39628: CALL_OW 1
39632: ST_TO_ADDR
39633: GO 39649
// i := i - 1 ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 5
39644: PUSH
39645: LD_INT 1
39647: MINUS
39648: ST_TO_ADDR
// end ;
39649: GO 39455
39651: POP
39652: POP
// for i in tmp do
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: LD_VAR 0 7
39662: PUSH
39663: FOR_IN
39664: IFFALSE 39702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39666: LD_VAR 0 1
39670: PPUSH
39671: LD_VAR 0 5
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: PPUSH
39680: LD_VAR 0 5
39684: PUSH
39685: LD_INT 2
39687: ARRAY
39688: PPUSH
39689: CALL 38648 0 3
39693: NOT
39694: IFFALSE 39700
// exit ;
39696: POP
39697: POP
39698: GO 39704
39700: GO 39663
39702: POP
39703: POP
// end ;
39704: LD_VAR 0 4
39708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39709: LD_INT 0
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
// if not GetClass ( unit ) = class_sniper then
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 257
39727: PUSH
39728: LD_INT 5
39730: EQUAL
39731: NOT
39732: IFFALSE 39736
// exit ;
39734: GO 40124
// dist := 8 ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: LD_INT 8
39743: ST_TO_ADDR
// viewRange := 12 ;
39744: LD_ADDR_VAR 0 7
39748: PUSH
39749: LD_INT 12
39751: ST_TO_ADDR
// side := GetSide ( unit ) ;
39752: LD_ADDR_VAR 0 6
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 255
39766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39767: LD_INT 61
39769: PPUSH
39770: LD_VAR 0 6
39774: PPUSH
39775: CALL_OW 321
39779: PUSH
39780: LD_INT 2
39782: EQUAL
39783: IFFALSE 39793
// viewRange := 16 ;
39785: LD_ADDR_VAR 0 7
39789: PUSH
39790: LD_INT 16
39792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_VAR 0 2
39802: PPUSH
39803: LD_VAR 0 3
39807: PPUSH
39808: CALL_OW 297
39812: PUSH
39813: LD_VAR 0 5
39817: GREATER
39818: IFFALSE 39897
// begin ComMoveXY ( unit , x , y ) ;
39820: LD_VAR 0 1
39824: PPUSH
39825: LD_VAR 0 2
39829: PPUSH
39830: LD_VAR 0 3
39834: PPUSH
39835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39839: LD_INT 35
39841: PPUSH
39842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39846: LD_VAR 0 1
39850: PPUSH
39851: LD_VAR 0 2
39855: PPUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL 76231 0 3
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 40124
// until GetDistUnitXY ( unit , x , y ) < dist ;
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_VAR 0 2
39879: PPUSH
39880: LD_VAR 0 3
39884: PPUSH
39885: CALL_OW 297
39889: PUSH
39890: LD_VAR 0 5
39894: LESS
39895: IFFALSE 39839
// end ; ComTurnXY ( unit , x , y ) ;
39897: LD_VAR 0 1
39901: PPUSH
39902: LD_VAR 0 2
39906: PPUSH
39907: LD_VAR 0 3
39911: PPUSH
39912: CALL_OW 118
// wait ( 5 ) ;
39916: LD_INT 5
39918: PPUSH
39919: CALL_OW 67
// _d := GetDir ( unit ) ;
39923: LD_ADDR_VAR 0 10
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 254
39937: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39938: LD_ADDR_VAR 0 8
39942: PUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 250
39952: PPUSH
39953: LD_VAR 0 10
39957: PPUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 272
39967: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39968: LD_ADDR_VAR 0 9
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 251
39982: PPUSH
39983: LD_VAR 0 10
39987: PPUSH
39988: LD_VAR 0 5
39992: PPUSH
39993: CALL_OW 273
39997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39998: LD_VAR 0 8
40002: PPUSH
40003: LD_VAR 0 9
40007: PPUSH
40008: CALL_OW 488
40012: NOT
40013: IFFALSE 40017
// exit ;
40015: GO 40124
// ComAnimCustom ( unit , 1 ) ;
40017: LD_VAR 0 1
40021: PPUSH
40022: LD_INT 1
40024: PPUSH
40025: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40029: LD_VAR 0 8
40033: PPUSH
40034: LD_VAR 0 9
40038: PPUSH
40039: LD_VAR 0 6
40043: PPUSH
40044: LD_VAR 0 7
40048: PPUSH
40049: CALL_OW 330
// repeat wait ( 1 ) ;
40053: LD_INT 1
40055: PPUSH
40056: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 316
40069: PUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 314
40079: OR
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 302
40090: NOT
40091: OR
40092: PUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 301
40102: OR
40103: IFFALSE 40053
// RemoveSeeing ( _x , _y , side ) ;
40105: LD_VAR 0 8
40109: PPUSH
40110: LD_VAR 0 9
40114: PPUSH
40115: LD_VAR 0 6
40119: PPUSH
40120: CALL_OW 331
// end ; end_of_file
40124: LD_VAR 0 4
40128: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// if exist_mode then
40133: LD_VAR 0 2
40137: IFFALSE 40162
// unit := CreateCharacter ( prefix & ident ) else
40139: LD_ADDR_VAR 0 5
40143: PUSH
40144: LD_VAR 0 3
40148: PUSH
40149: LD_VAR 0 1
40153: STR
40154: PPUSH
40155: CALL_OW 34
40159: ST_TO_ADDR
40160: GO 40177
// unit := NewCharacter ( ident ) ;
40162: LD_ADDR_VAR 0 5
40166: PUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 25
40176: ST_TO_ADDR
// result := unit ;
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_VAR 0 5
40186: ST_TO_ADDR
// end ;
40187: LD_VAR 0 4
40191: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40192: LD_INT 0
40194: PPUSH
40195: PPUSH
// if not side or not nation then
40196: LD_VAR 0 1
40200: NOT
40201: PUSH
40202: LD_VAR 0 2
40206: NOT
40207: OR
40208: IFFALSE 40212
// exit ;
40210: GO 40980
// case nation of nation_american :
40212: LD_VAR 0 2
40216: PUSH
40217: LD_INT 1
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40439
40225: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40226: LD_ADDR_VAR 0 4
40230: PUSH
40231: LD_INT 35
40233: PUSH
40234: LD_INT 45
40236: PUSH
40237: LD_INT 46
40239: PUSH
40240: LD_INT 47
40242: PUSH
40243: LD_INT 82
40245: PUSH
40246: LD_INT 83
40248: PUSH
40249: LD_INT 84
40251: PUSH
40252: LD_INT 85
40254: PUSH
40255: LD_INT 86
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 6
40266: PUSH
40267: LD_INT 15
40269: PUSH
40270: LD_INT 16
40272: PUSH
40273: LD_INT 7
40275: PUSH
40276: LD_INT 12
40278: PUSH
40279: LD_INT 13
40281: PUSH
40282: LD_INT 10
40284: PUSH
40285: LD_INT 14
40287: PUSH
40288: LD_INT 20
40290: PUSH
40291: LD_INT 21
40293: PUSH
40294: LD_INT 22
40296: PUSH
40297: LD_INT 25
40299: PUSH
40300: LD_INT 32
40302: PUSH
40303: LD_INT 27
40305: PUSH
40306: LD_INT 36
40308: PUSH
40309: LD_INT 69
40311: PUSH
40312: LD_INT 39
40314: PUSH
40315: LD_INT 34
40317: PUSH
40318: LD_INT 40
40320: PUSH
40321: LD_INT 48
40323: PUSH
40324: LD_INT 49
40326: PUSH
40327: LD_INT 50
40329: PUSH
40330: LD_INT 51
40332: PUSH
40333: LD_INT 52
40335: PUSH
40336: LD_INT 53
40338: PUSH
40339: LD_INT 54
40341: PUSH
40342: LD_INT 55
40344: PUSH
40345: LD_INT 56
40347: PUSH
40348: LD_INT 57
40350: PUSH
40351: LD_INT 58
40353: PUSH
40354: LD_INT 59
40356: PUSH
40357: LD_INT 60
40359: PUSH
40360: LD_INT 61
40362: PUSH
40363: LD_INT 62
40365: PUSH
40366: LD_INT 80
40368: PUSH
40369: LD_INT 82
40371: PUSH
40372: LD_INT 83
40374: PUSH
40375: LD_INT 84
40377: PUSH
40378: LD_INT 85
40380: PUSH
40381: LD_INT 86
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: ST_TO_ADDR
40437: GO 40904
40439: LD_INT 2
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 40673
40447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_INT 35
40455: PUSH
40456: LD_INT 45
40458: PUSH
40459: LD_INT 46
40461: PUSH
40462: LD_INT 47
40464: PUSH
40465: LD_INT 82
40467: PUSH
40468: LD_INT 83
40470: PUSH
40471: LD_INT 84
40473: PUSH
40474: LD_INT 85
40476: PUSH
40477: LD_INT 87
40479: PUSH
40480: LD_INT 70
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 11
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: LD_INT 4
40494: PUSH
40495: LD_INT 5
40497: PUSH
40498: LD_INT 6
40500: PUSH
40501: LD_INT 15
40503: PUSH
40504: LD_INT 18
40506: PUSH
40507: LD_INT 7
40509: PUSH
40510: LD_INT 17
40512: PUSH
40513: LD_INT 8
40515: PUSH
40516: LD_INT 20
40518: PUSH
40519: LD_INT 21
40521: PUSH
40522: LD_INT 22
40524: PUSH
40525: LD_INT 72
40527: PUSH
40528: LD_INT 26
40530: PUSH
40531: LD_INT 69
40533: PUSH
40534: LD_INT 39
40536: PUSH
40537: LD_INT 40
40539: PUSH
40540: LD_INT 41
40542: PUSH
40543: LD_INT 42
40545: PUSH
40546: LD_INT 43
40548: PUSH
40549: LD_INT 48
40551: PUSH
40552: LD_INT 49
40554: PUSH
40555: LD_INT 50
40557: PUSH
40558: LD_INT 51
40560: PUSH
40561: LD_INT 52
40563: PUSH
40564: LD_INT 53
40566: PUSH
40567: LD_INT 54
40569: PUSH
40570: LD_INT 55
40572: PUSH
40573: LD_INT 56
40575: PUSH
40576: LD_INT 60
40578: PUSH
40579: LD_INT 61
40581: PUSH
40582: LD_INT 62
40584: PUSH
40585: LD_INT 66
40587: PUSH
40588: LD_INT 67
40590: PUSH
40591: LD_INT 68
40593: PUSH
40594: LD_INT 81
40596: PUSH
40597: LD_INT 82
40599: PUSH
40600: LD_INT 83
40602: PUSH
40603: LD_INT 84
40605: PUSH
40606: LD_INT 85
40608: PUSH
40609: LD_INT 87
40611: PUSH
40612: LD_INT 88
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
40671: GO 40904
40673: LD_INT 3
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40903
40681: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_INT 46
40689: PUSH
40690: LD_INT 47
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 82
40701: PUSH
40702: LD_INT 83
40704: PUSH
40705: LD_INT 84
40707: PUSH
40708: LD_INT 85
40710: PUSH
40711: LD_INT 86
40713: PUSH
40714: LD_INT 11
40716: PUSH
40717: LD_INT 9
40719: PUSH
40720: LD_INT 20
40722: PUSH
40723: LD_INT 19
40725: PUSH
40726: LD_INT 21
40728: PUSH
40729: LD_INT 24
40731: PUSH
40732: LD_INT 22
40734: PUSH
40735: LD_INT 25
40737: PUSH
40738: LD_INT 28
40740: PUSH
40741: LD_INT 29
40743: PUSH
40744: LD_INT 30
40746: PUSH
40747: LD_INT 31
40749: PUSH
40750: LD_INT 37
40752: PUSH
40753: LD_INT 38
40755: PUSH
40756: LD_INT 32
40758: PUSH
40759: LD_INT 27
40761: PUSH
40762: LD_INT 33
40764: PUSH
40765: LD_INT 69
40767: PUSH
40768: LD_INT 39
40770: PUSH
40771: LD_INT 34
40773: PUSH
40774: LD_INT 40
40776: PUSH
40777: LD_INT 71
40779: PUSH
40780: LD_INT 23
40782: PUSH
40783: LD_INT 44
40785: PUSH
40786: LD_INT 48
40788: PUSH
40789: LD_INT 49
40791: PUSH
40792: LD_INT 50
40794: PUSH
40795: LD_INT 51
40797: PUSH
40798: LD_INT 52
40800: PUSH
40801: LD_INT 53
40803: PUSH
40804: LD_INT 54
40806: PUSH
40807: LD_INT 55
40809: PUSH
40810: LD_INT 56
40812: PUSH
40813: LD_INT 57
40815: PUSH
40816: LD_INT 58
40818: PUSH
40819: LD_INT 59
40821: PUSH
40822: LD_INT 63
40824: PUSH
40825: LD_INT 64
40827: PUSH
40828: LD_INT 65
40830: PUSH
40831: LD_INT 82
40833: PUSH
40834: LD_INT 83
40836: PUSH
40837: LD_INT 84
40839: PUSH
40840: LD_INT 85
40842: PUSH
40843: LD_INT 86
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
40901: GO 40904
40903: POP
// if state > - 1 and state < 3 then
40904: LD_VAR 0 3
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: GREATER
40913: PUSH
40914: LD_VAR 0 3
40918: PUSH
40919: LD_INT 3
40921: LESS
40922: AND
40923: IFFALSE 40980
// for i in result do
40925: LD_ADDR_VAR 0 5
40929: PUSH
40930: LD_VAR 0 4
40934: PUSH
40935: FOR_IN
40936: IFFALSE 40978
// if GetTech ( i , side ) <> state then
40938: LD_VAR 0 5
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 321
40952: PUSH
40953: LD_VAR 0 3
40957: NONEQUAL
40958: IFFALSE 40976
// result := result diff i ;
40960: LD_ADDR_VAR 0 4
40964: PUSH
40965: LD_VAR 0 4
40969: PUSH
40970: LD_VAR 0 5
40974: DIFF
40975: ST_TO_ADDR
40976: GO 40935
40978: POP
40979: POP
// end ;
40980: LD_VAR 0 4
40984: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40985: LD_INT 0
40987: PPUSH
40988: PPUSH
40989: PPUSH
// result := true ;
40990: LD_ADDR_VAR 0 3
40994: PUSH
40995: LD_INT 1
40997: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40998: LD_ADDR_VAR 0 5
41002: PUSH
41003: LD_VAR 0 2
41007: PPUSH
41008: CALL_OW 480
41012: ST_TO_ADDR
// if not tmp then
41013: LD_VAR 0 5
41017: NOT
41018: IFFALSE 41022
// exit ;
41020: GO 41071
// for i in tmp do
41022: LD_ADDR_VAR 0 4
41026: PUSH
41027: LD_VAR 0 5
41031: PUSH
41032: FOR_IN
41033: IFFALSE 41069
// if GetTech ( i , side ) <> state_researched then
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 321
41049: PUSH
41050: LD_INT 2
41052: NONEQUAL
41053: IFFALSE 41067
// begin result := false ;
41055: LD_ADDR_VAR 0 3
41059: PUSH
41060: LD_INT 0
41062: ST_TO_ADDR
// exit ;
41063: POP
41064: POP
41065: GO 41071
// end ;
41067: GO 41032
41069: POP
41070: POP
// end ;
41071: LD_VAR 0 3
41075: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41076: LD_INT 0
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41091: LD_VAR 0 1
41095: NOT
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 257
41106: PUSH
41107: LD_INT 9
41109: NONEQUAL
41110: OR
41111: IFFALSE 41115
// exit ;
41113: GO 41688
// side := GetSide ( unit ) ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 255
41129: ST_TO_ADDR
// tech_space := tech_spacanom ;
41130: LD_ADDR_VAR 0 12
41134: PUSH
41135: LD_INT 29
41137: ST_TO_ADDR
// tech_time := tech_taurad ;
41138: LD_ADDR_VAR 0 13
41142: PUSH
41143: LD_INT 28
41145: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41146: LD_ADDR_VAR 0 11
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 310
41160: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41161: LD_VAR 0 11
41165: PPUSH
41166: CALL_OW 247
41170: PUSH
41171: LD_INT 2
41173: EQUAL
41174: IFFALSE 41178
// exit ;
41176: GO 41688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41178: LD_ADDR_VAR 0 8
41182: PUSH
41183: LD_INT 81
41185: PUSH
41186: LD_VAR 0 9
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 21
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PPUSH
41216: CALL_OW 69
41220: ST_TO_ADDR
// if not tmp then
41221: LD_VAR 0 8
41225: NOT
41226: IFFALSE 41230
// exit ;
41228: GO 41688
// if in_unit then
41230: LD_VAR 0 11
41234: IFFALSE 41258
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41236: LD_ADDR_VAR 0 10
41240: PUSH
41241: LD_VAR 0 8
41245: PPUSH
41246: LD_VAR 0 11
41250: PPUSH
41251: CALL_OW 74
41255: ST_TO_ADDR
41256: GO 41278
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41258: LD_ADDR_VAR 0 10
41262: PUSH
41263: LD_VAR 0 8
41267: PPUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 74
41277: ST_TO_ADDR
// if not enemy then
41278: LD_VAR 0 10
41282: NOT
41283: IFFALSE 41287
// exit ;
41285: GO 41688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41287: LD_VAR 0 11
41291: PUSH
41292: LD_VAR 0 11
41296: PPUSH
41297: LD_VAR 0 10
41301: PPUSH
41302: CALL_OW 296
41306: PUSH
41307: LD_INT 13
41309: GREATER
41310: AND
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: LD_VAR 0 10
41321: PPUSH
41322: CALL_OW 296
41326: PUSH
41327: LD_INT 12
41329: GREATER
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 41688
// missile := [ 1 ] ;
41335: LD_ADDR_VAR 0 14
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41346: LD_VAR 0 9
41350: PPUSH
41351: LD_VAR 0 12
41355: PPUSH
41356: CALL_OW 325
41360: IFFALSE 41389
// missile := Replace ( missile , missile + 1 , 2 ) ;
41362: LD_ADDR_VAR 0 14
41366: PUSH
41367: LD_VAR 0 14
41371: PPUSH
41372: LD_VAR 0 14
41376: PUSH
41377: LD_INT 1
41379: PLUS
41380: PPUSH
41381: LD_INT 2
41383: PPUSH
41384: CALL_OW 1
41388: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41389: LD_VAR 0 9
41393: PPUSH
41394: LD_VAR 0 13
41398: PPUSH
41399: CALL_OW 325
41403: PUSH
41404: LD_VAR 0 10
41408: PPUSH
41409: CALL_OW 255
41413: PPUSH
41414: LD_VAR 0 13
41418: PPUSH
41419: CALL_OW 325
41423: NOT
41424: AND
41425: IFFALSE 41454
// missile := Replace ( missile , missile + 1 , 3 ) ;
41427: LD_ADDR_VAR 0 14
41431: PUSH
41432: LD_VAR 0 14
41436: PPUSH
41437: LD_VAR 0 14
41441: PUSH
41442: LD_INT 1
41444: PLUS
41445: PPUSH
41446: LD_INT 3
41448: PPUSH
41449: CALL_OW 1
41453: ST_TO_ADDR
// if missile < 2 then
41454: LD_VAR 0 14
41458: PUSH
41459: LD_INT 2
41461: LESS
41462: IFFALSE 41466
// exit ;
41464: GO 41688
// x := GetX ( enemy ) ;
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: LD_VAR 0 10
41475: PPUSH
41476: CALL_OW 250
41480: ST_TO_ADDR
// y := GetY ( enemy ) ;
41481: LD_ADDR_VAR 0 5
41485: PUSH
41486: LD_VAR 0 10
41490: PPUSH
41491: CALL_OW 251
41495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: LD_VAR 0 4
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PPUSH
41510: LD_INT 1
41512: PPUSH
41513: CALL_OW 12
41517: PLUS
41518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41519: LD_ADDR_VAR 0 7
41523: PUSH
41524: LD_VAR 0 5
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PPUSH
41533: LD_INT 1
41535: PPUSH
41536: CALL_OW 12
41540: PLUS
41541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41542: LD_VAR 0 6
41546: PPUSH
41547: LD_VAR 0 7
41551: PPUSH
41552: CALL_OW 488
41556: NOT
41557: IFFALSE 41579
// begin _x := x ;
41559: LD_ADDR_VAR 0 6
41563: PUSH
41564: LD_VAR 0 4
41568: ST_TO_ADDR
// _y := y ;
41569: LD_ADDR_VAR 0 7
41573: PUSH
41574: LD_VAR 0 5
41578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41579: LD_ADDR_VAR 0 3
41583: PUSH
41584: LD_INT 1
41586: PPUSH
41587: LD_VAR 0 14
41591: PPUSH
41592: CALL_OW 12
41596: ST_TO_ADDR
// case i of 1 :
41597: LD_VAR 0 3
41601: PUSH
41602: LD_INT 1
41604: DOUBLE
41605: EQUAL
41606: IFTRUE 41610
41608: GO 41627
41610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41611: LD_VAR 0 1
41615: PPUSH
41616: LD_VAR 0 10
41620: PPUSH
41621: CALL_OW 115
41625: GO 41688
41627: LD_INT 2
41629: DOUBLE
41630: EQUAL
41631: IFTRUE 41635
41633: GO 41657
41635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41636: LD_VAR 0 1
41640: PPUSH
41641: LD_VAR 0 6
41645: PPUSH
41646: LD_VAR 0 7
41650: PPUSH
41651: CALL_OW 153
41655: GO 41688
41657: LD_INT 3
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41665
41663: GO 41687
41665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41666: LD_VAR 0 1
41670: PPUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: LD_VAR 0 7
41680: PPUSH
41681: CALL_OW 154
41685: GO 41688
41687: POP
// end ;
41688: LD_VAR 0 2
41692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
// if not unit or not building then
41701: LD_VAR 0 1
41705: NOT
41706: PUSH
41707: LD_VAR 0 2
41711: NOT
41712: OR
41713: IFFALSE 41717
// exit ;
41715: GO 41875
// x := GetX ( building ) ;
41717: LD_ADDR_VAR 0 5
41721: PUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: CALL_OW 250
41731: ST_TO_ADDR
// y := GetY ( building ) ;
41732: LD_ADDR_VAR 0 6
41736: PUSH
41737: LD_VAR 0 2
41741: PPUSH
41742: CALL_OW 251
41746: ST_TO_ADDR
// for i = 0 to 5 do
41747: LD_ADDR_VAR 0 4
41751: PUSH
41752: DOUBLE
41753: LD_INT 0
41755: DEC
41756: ST_TO_ADDR
41757: LD_INT 5
41759: PUSH
41760: FOR_TO
41761: IFFALSE 41873
// begin _x := ShiftX ( x , i , 3 ) ;
41763: LD_ADDR_VAR 0 7
41767: PUSH
41768: LD_VAR 0 5
41772: PPUSH
41773: LD_VAR 0 4
41777: PPUSH
41778: LD_INT 3
41780: PPUSH
41781: CALL_OW 272
41785: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41786: LD_ADDR_VAR 0 8
41790: PUSH
41791: LD_VAR 0 6
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: LD_INT 3
41803: PPUSH
41804: CALL_OW 273
41808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41809: LD_VAR 0 7
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: CALL_OW 488
41823: NOT
41824: IFFALSE 41828
// continue ;
41826: GO 41760
// if HexInfo ( _x , _y ) = 0 then
41828: LD_VAR 0 7
41832: PPUSH
41833: LD_VAR 0 8
41837: PPUSH
41838: CALL_OW 428
41842: PUSH
41843: LD_INT 0
41845: EQUAL
41846: IFFALSE 41871
// begin ComMoveXY ( unit , _x , _y ) ;
41848: LD_VAR 0 1
41852: PPUSH
41853: LD_VAR 0 7
41857: PPUSH
41858: LD_VAR 0 8
41862: PPUSH
41863: CALL_OW 111
// exit ;
41867: POP
41868: POP
41869: GO 41875
// end ; end ;
41871: GO 41760
41873: POP
41874: POP
// end ;
41875: LD_VAR 0 3
41879: RET
// export function ScanBase ( side , base_area ) ; begin
41880: LD_INT 0
41882: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_VAR 0 2
41892: PPUSH
41893: LD_INT 81
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PPUSH
41905: CALL_OW 70
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 3
41914: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
// result := false ;
41921: LD_ADDR_VAR 0 2
41925: PUSH
41926: LD_INT 0
41928: ST_TO_ADDR
// side := GetSide ( unit ) ;
41929: LD_ADDR_VAR 0 3
41933: PUSH
41934: LD_VAR 0 1
41938: PPUSH
41939: CALL_OW 255
41943: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41944: LD_ADDR_VAR 0 4
41948: PUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL_OW 248
41958: ST_TO_ADDR
// case nat of 1 :
41959: LD_VAR 0 4
41963: PUSH
41964: LD_INT 1
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 41983
41972: POP
// tech := tech_lassight ; 2 :
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_INT 12
41980: ST_TO_ADDR
41981: GO 42022
41983: LD_INT 2
41985: DOUBLE
41986: EQUAL
41987: IFTRUE 41991
41989: GO 42002
41991: POP
// tech := tech_mortar ; 3 :
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_INT 41
41999: ST_TO_ADDR
42000: GO 42022
42002: LD_INT 3
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42021
42010: POP
// tech := tech_bazooka ; end ;
42011: LD_ADDR_VAR 0 5
42015: PUSH
42016: LD_INT 44
42018: ST_TO_ADDR
42019: GO 42022
42021: POP
// if Researched ( side , tech ) then
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_VAR 0 5
42031: PPUSH
42032: CALL_OW 325
42036: IFFALSE 42063
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_INT 5
42045: PUSH
42046: LD_INT 8
42048: PUSH
42049: LD_INT 9
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: PUSH
42057: LD_VAR 0 4
42061: ARRAY
42062: ST_TO_ADDR
// end ;
42063: LD_VAR 0 2
42067: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42068: LD_INT 0
42070: PPUSH
42071: PPUSH
42072: PPUSH
// if not mines then
42073: LD_VAR 0 2
42077: NOT
42078: IFFALSE 42082
// exit ;
42080: GO 42226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_INT 81
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 21
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PPUSH
42120: CALL_OW 69
42124: ST_TO_ADDR
// for i in mines do
42125: LD_ADDR_VAR 0 4
42129: PUSH
42130: LD_VAR 0 2
42134: PUSH
42135: FOR_IN
42136: IFFALSE 42224
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42138: LD_VAR 0 4
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 4
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PPUSH
42156: CALL_OW 458
42160: NOT
42161: IFFALSE 42165
// continue ;
42163: GO 42135
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42165: LD_VAR 0 4
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: PPUSH
42174: LD_VAR 0 4
42178: PUSH
42179: LD_INT 2
42181: ARRAY
42182: PPUSH
42183: CALL_OW 428
42187: PUSH
42188: LD_VAR 0 5
42192: IN
42193: IFFALSE 42222
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42195: LD_VAR 0 4
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 4
42208: PUSH
42209: LD_INT 2
42211: ARRAY
42212: PPUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 456
// end ;
42222: GO 42135
42224: POP
42225: POP
// end ;
42226: LD_VAR 0 3
42230: RET
// export function Count ( array ) ; begin
42231: LD_INT 0
42233: PPUSH
// result := array + 0 ;
42234: LD_ADDR_VAR 0 2
42238: PUSH
42239: LD_VAR 0 1
42243: PUSH
42244: LD_INT 0
42246: PLUS
42247: ST_TO_ADDR
// end ;
42248: LD_VAR 0 2
42252: RET
// export function IsEmpty ( building ) ; begin
42253: LD_INT 0
42255: PPUSH
// if not building then
42256: LD_VAR 0 1
42260: NOT
42261: IFFALSE 42265
// exit ;
42263: GO 42308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42265: LD_ADDR_VAR 0 2
42269: PUSH
42270: LD_VAR 0 1
42274: PUSH
42275: LD_INT 22
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 255
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 58
42294: PUSH
42295: EMPTY
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PPUSH
42302: CALL_OW 69
42306: IN
42307: ST_TO_ADDR
// end ;
42308: LD_VAR 0 2
42312: RET
// export function IsNotFull ( building ) ; var places ; begin
42313: LD_INT 0
42315: PPUSH
42316: PPUSH
// if not building then
42317: LD_VAR 0 1
42321: NOT
42322: IFFALSE 42326
// exit ;
42324: GO 42354
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42326: LD_ADDR_VAR 0 2
42330: PUSH
42331: LD_VAR 0 1
42335: PPUSH
42336: LD_INT 3
42338: PUSH
42339: LD_INT 62
42341: PUSH
42342: EMPTY
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PPUSH
42349: CALL_OW 72
42353: ST_TO_ADDR
// end ;
42354: LD_VAR 0 2
42358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42359: LD_INT 0
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
// tmp := [ ] ;
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: EMPTY
42371: ST_TO_ADDR
// list := [ ] ;
42372: LD_ADDR_VAR 0 5
42376: PUSH
42377: EMPTY
42378: ST_TO_ADDR
// for i = 16 to 25 do
42379: LD_ADDR_VAR 0 4
42383: PUSH
42384: DOUBLE
42385: LD_INT 16
42387: DEC
42388: ST_TO_ADDR
42389: LD_INT 25
42391: PUSH
42392: FOR_TO
42393: IFFALSE 42466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_VAR 0 3
42404: PUSH
42405: LD_INT 22
42407: PUSH
42408: LD_VAR 0 1
42412: PPUSH
42413: CALL_OW 255
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 91
42424: PUSH
42425: LD_VAR 0 1
42429: PUSH
42430: LD_INT 6
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 30
42440: PUSH
42441: LD_VAR 0 4
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: PPUSH
42458: CALL_OW 69
42462: ADD
42463: ST_TO_ADDR
42464: GO 42392
42466: POP
42467: POP
// for i = 1 to tmp do
42468: LD_ADDR_VAR 0 4
42472: PUSH
42473: DOUBLE
42474: LD_INT 1
42476: DEC
42477: ST_TO_ADDR
42478: LD_VAR 0 3
42482: PUSH
42483: FOR_TO
42484: IFFALSE 42572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: LD_VAR 0 5
42495: PUSH
42496: LD_VAR 0 3
42500: PUSH
42501: LD_VAR 0 4
42505: ARRAY
42506: PPUSH
42507: CALL_OW 266
42511: PUSH
42512: LD_VAR 0 3
42516: PUSH
42517: LD_VAR 0 4
42521: ARRAY
42522: PPUSH
42523: CALL_OW 250
42527: PUSH
42528: LD_VAR 0 3
42532: PUSH
42533: LD_VAR 0 4
42537: ARRAY
42538: PPUSH
42539: CALL_OW 251
42543: PUSH
42544: LD_VAR 0 3
42548: PUSH
42549: LD_VAR 0 4
42553: ARRAY
42554: PPUSH
42555: CALL_OW 254
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: PUSH
42566: EMPTY
42567: LIST
42568: ADD
42569: ST_TO_ADDR
42570: GO 42483
42572: POP
42573: POP
// result := list ;
42574: LD_ADDR_VAR 0 2
42578: PUSH
42579: LD_VAR 0 5
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 2
42588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42589: LD_INT 0
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
// if not factory then
42598: LD_VAR 0 1
42602: NOT
42603: IFFALSE 42607
// exit ;
42605: GO 43200
// if control = control_apeman then
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 5
42614: EQUAL
42615: IFFALSE 42724
// begin tmp := UnitsInside ( factory ) ;
42617: LD_ADDR_VAR 0 8
42621: PUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 313
42631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42632: LD_VAR 0 8
42636: PPUSH
42637: LD_INT 25
42639: PUSH
42640: LD_INT 12
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PPUSH
42647: CALL_OW 72
42651: NOT
42652: IFFALSE 42662
// control := control_manual ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_INT 1
42661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42662: LD_ADDR_VAR 0 8
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL 42359 0 1
42676: ST_TO_ADDR
// if tmp then
42677: LD_VAR 0 8
42681: IFFALSE 42724
// begin for i in tmp do
42683: LD_ADDR_VAR 0 7
42687: PUSH
42688: LD_VAR 0 8
42692: PUSH
42693: FOR_IN
42694: IFFALSE 42722
// if i [ 1 ] = b_ext_radio then
42696: LD_VAR 0 7
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PUSH
42705: LD_INT 22
42707: EQUAL
42708: IFFALSE 42720
// begin control := control_remote ;
42710: LD_ADDR_VAR 0 4
42714: PUSH
42715: LD_INT 2
42717: ST_TO_ADDR
// break ;
42718: GO 42722
// end ;
42720: GO 42693
42722: POP
42723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42724: LD_VAR 0 1
42728: PPUSH
42729: LD_VAR 0 2
42733: PPUSH
42734: LD_VAR 0 3
42738: PPUSH
42739: LD_VAR 0 4
42743: PPUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: CALL_OW 448
42753: IFFALSE 42788
// begin result := [ chassis , engine , control , weapon ] ;
42755: LD_ADDR_VAR 0 6
42759: PUSH
42760: LD_VAR 0 2
42764: PUSH
42765: LD_VAR 0 3
42769: PUSH
42770: LD_VAR 0 4
42774: PUSH
42775: LD_VAR 0 5
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// exit ;
42786: GO 43200
// end ; _chassis := AvailableChassisList ( factory ) ;
42788: LD_ADDR_VAR 0 9
42792: PUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL_OW 475
42802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42803: LD_ADDR_VAR 0 11
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 476
42817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42818: LD_ADDR_VAR 0 12
42822: PUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 477
42832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42833: LD_ADDR_VAR 0 10
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 478
42847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42848: LD_VAR 0 9
42852: NOT
42853: PUSH
42854: LD_VAR 0 11
42858: NOT
42859: OR
42860: PUSH
42861: LD_VAR 0 12
42865: NOT
42866: OR
42867: PUSH
42868: LD_VAR 0 10
42872: NOT
42873: OR
42874: IFFALSE 42909
// begin result := [ chassis , engine , control , weapon ] ;
42876: LD_ADDR_VAR 0 6
42880: PUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_VAR 0 3
42890: PUSH
42891: LD_VAR 0 4
42895: PUSH
42896: LD_VAR 0 5
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// exit ;
42907: GO 43200
// end ; if not chassis in _chassis then
42909: LD_VAR 0 2
42913: PUSH
42914: LD_VAR 0 9
42918: IN
42919: NOT
42920: IFFALSE 42946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42922: LD_ADDR_VAR 0 2
42926: PUSH
42927: LD_VAR 0 9
42931: PUSH
42932: LD_INT 1
42934: PPUSH
42935: LD_VAR 0 9
42939: PPUSH
42940: CALL_OW 12
42944: ARRAY
42945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42946: LD_VAR 0 2
42950: PPUSH
42951: LD_VAR 0 3
42955: PPUSH
42956: CALL 43205 0 2
42960: NOT
42961: IFFALSE 43020
// repeat engine := _engine [ 1 ] ;
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_VAR 0 11
42972: PUSH
42973: LD_INT 1
42975: ARRAY
42976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42977: LD_ADDR_VAR 0 11
42981: PUSH
42982: LD_VAR 0 11
42986: PPUSH
42987: LD_INT 1
42989: PPUSH
42990: CALL_OW 3
42994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42995: LD_VAR 0 2
42999: PPUSH
43000: LD_VAR 0 3
43004: PPUSH
43005: CALL 43205 0 2
43009: PUSH
43010: LD_VAR 0 11
43014: PUSH
43015: EMPTY
43016: EQUAL
43017: OR
43018: IFFALSE 42963
// if not control in _control then
43020: LD_VAR 0 4
43024: PUSH
43025: LD_VAR 0 12
43029: IN
43030: NOT
43031: IFFALSE 43057
// control := _control [ rand ( 1 , _control ) ] ;
43033: LD_ADDR_VAR 0 4
43037: PUSH
43038: LD_VAR 0 12
43042: PUSH
43043: LD_INT 1
43045: PPUSH
43046: LD_VAR 0 12
43050: PPUSH
43051: CALL_OW 12
43055: ARRAY
43056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43057: LD_VAR 0 2
43061: PPUSH
43062: LD_VAR 0 5
43066: PPUSH
43067: CALL 43425 0 2
43071: NOT
43072: IFFALSE 43131
// repeat weapon := _weapon [ 1 ] ;
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: LD_VAR 0 10
43083: PUSH
43084: LD_INT 1
43086: ARRAY
43087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43088: LD_ADDR_VAR 0 10
43092: PUSH
43093: LD_VAR 0 10
43097: PPUSH
43098: LD_INT 1
43100: PPUSH
43101: CALL_OW 3
43105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43106: LD_VAR 0 2
43110: PPUSH
43111: LD_VAR 0 5
43115: PPUSH
43116: CALL 43425 0 2
43120: PUSH
43121: LD_VAR 0 10
43125: PUSH
43126: EMPTY
43127: EQUAL
43128: OR
43129: IFFALSE 43074
// result := [ ] ;
43131: LD_ADDR_VAR 0 6
43135: PUSH
43136: EMPTY
43137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43138: LD_VAR 0 1
43142: PPUSH
43143: LD_VAR 0 2
43147: PPUSH
43148: LD_VAR 0 3
43152: PPUSH
43153: LD_VAR 0 4
43157: PPUSH
43158: LD_VAR 0 5
43162: PPUSH
43163: CALL_OW 448
43167: IFFALSE 43200
// result := [ chassis , engine , control , weapon ] ;
43169: LD_ADDR_VAR 0 6
43173: PUSH
43174: LD_VAR 0 2
43178: PUSH
43179: LD_VAR 0 3
43183: PUSH
43184: LD_VAR 0 4
43188: PUSH
43189: LD_VAR 0 5
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 6
43204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43205: LD_INT 0
43207: PPUSH
// if not chassis or not engine then
43208: LD_VAR 0 1
43212: NOT
43213: PUSH
43214: LD_VAR 0 2
43218: NOT
43219: OR
43220: IFFALSE 43224
// exit ;
43222: GO 43420
// case engine of engine_solar :
43224: LD_VAR 0 2
43228: PUSH
43229: LD_INT 2
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43275
43237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 11
43245: PUSH
43246: LD_INT 12
43248: PUSH
43249: LD_INT 13
43251: PUSH
43252: LD_INT 14
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
43273: GO 43404
43275: LD_INT 1
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43283
43281: GO 43345
43283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 11
43291: PUSH
43292: LD_INT 12
43294: PUSH
43295: LD_INT 13
43297: PUSH
43298: LD_INT 14
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: LD_INT 21
43318: PUSH
43319: LD_INT 23
43321: PUSH
43322: LD_INT 22
43324: PUSH
43325: LD_INT 24
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 43404
43345: LD_INT 3
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43403
43353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 13
43361: PUSH
43362: LD_INT 14
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: LD_INT 21
43379: PUSH
43380: LD_INT 22
43382: PUSH
43383: LD_INT 23
43385: PUSH
43386: LD_INT 24
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
43401: GO 43404
43403: POP
// result := ( chassis in result ) ;
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_VAR 0 1
43413: PUSH
43414: LD_VAR 0 3
43418: IN
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 3
43424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43425: LD_INT 0
43427: PPUSH
// if not chassis or not weapon then
43428: LD_VAR 0 1
43432: NOT
43433: PUSH
43434: LD_VAR 0 2
43438: NOT
43439: OR
43440: IFFALSE 43444
// exit ;
43442: GO 44504
// case weapon of us_machine_gun :
43444: LD_VAR 0 2
43448: PUSH
43449: LD_INT 2
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43487
43457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
43485: GO 44488
43487: LD_INT 3
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43525
43495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 4
43512: PUSH
43513: LD_INT 5
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
43523: GO 44488
43525: LD_INT 11
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43533
43531: GO 43563
43533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43534: LD_ADDR_VAR 0 3
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 4
43550: PUSH
43551: LD_INT 5
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
43561: GO 44488
43563: LD_INT 4
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43597
43571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: LD_INT 4
43585: PUSH
43586: LD_INT 5
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
43595: GO 44488
43597: LD_INT 5
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43605
43603: GO 43631
43605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43606: LD_ADDR_VAR 0 3
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
43629: GO 44488
43631: LD_INT 9
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43639
43637: GO 43665
43639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 3
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
43663: GO 44488
43665: LD_INT 7
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 43699
43673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: LD_INT 4
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
43697: GO 44488
43699: LD_INT 12
43701: DOUBLE
43702: EQUAL
43703: IFTRUE 43707
43705: GO 43733
43707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43708: LD_ADDR_VAR 0 3
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 4
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
43731: GO 44488
43733: LD_INT 13
43735: DOUBLE
43736: EQUAL
43737: IFTRUE 43741
43739: GO 43767
43741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43742: LD_ADDR_VAR 0 3
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
43765: GO 44488
43767: LD_INT 14
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43793
43775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43776: LD_ADDR_VAR 0 3
43780: PUSH
43781: LD_INT 4
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: ST_TO_ADDR
43791: GO 44488
43793: LD_INT 6
43795: DOUBLE
43796: EQUAL
43797: IFTRUE 43801
43799: GO 43819
43801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43802: LD_ADDR_VAR 0 3
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: ST_TO_ADDR
43817: GO 44488
43819: LD_INT 10
43821: DOUBLE
43822: EQUAL
43823: IFTRUE 43827
43825: GO 43845
43827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_INT 4
43835: PUSH
43836: LD_INT 5
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: ST_TO_ADDR
43843: GO 44488
43845: LD_INT 22
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43879
43853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 11
43861: PUSH
43862: LD_INT 12
43864: PUSH
43865: LD_INT 13
43867: PUSH
43868: LD_INT 14
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
43877: GO 44488
43879: LD_INT 23
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43887
43885: GO 43913
43887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43888: LD_ADDR_VAR 0 3
43892: PUSH
43893: LD_INT 11
43895: PUSH
43896: LD_INT 12
43898: PUSH
43899: LD_INT 13
43901: PUSH
43902: LD_INT 14
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
43911: GO 44488
43913: LD_INT 24
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43947
43921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: LD_INT 11
43929: PUSH
43930: LD_INT 12
43932: PUSH
43933: LD_INT 13
43935: PUSH
43936: LD_INT 14
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
43945: GO 44488
43947: LD_INT 30
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43955
43953: GO 43981
43955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43956: LD_ADDR_VAR 0 3
43960: PUSH
43961: LD_INT 11
43963: PUSH
43964: LD_INT 12
43966: PUSH
43967: LD_INT 13
43969: PUSH
43970: LD_INT 14
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: ST_TO_ADDR
43979: GO 44488
43981: LD_INT 25
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44007
43989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 14
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: ST_TO_ADDR
44005: GO 44488
44007: LD_INT 27
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44015
44013: GO 44033
44015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_INT 13
44023: PUSH
44024: LD_INT 14
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: ST_TO_ADDR
44031: GO 44488
44033: LD_INT 92
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44067
44041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 11
44049: PUSH
44050: LD_INT 12
44052: PUSH
44053: LD_INT 13
44055: PUSH
44056: LD_INT 14
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
44065: GO 44488
44067: LD_INT 28
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44075
44073: GO 44093
44075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_INT 13
44083: PUSH
44084: LD_INT 14
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: ST_TO_ADDR
44091: GO 44488
44093: LD_INT 29
44095: DOUBLE
44096: EQUAL
44097: IFTRUE 44101
44099: GO 44119
44101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: LD_INT 13
44109: PUSH
44110: LD_INT 14
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: ST_TO_ADDR
44117: GO 44488
44119: LD_INT 31
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44127
44125: GO 44145
44127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44128: LD_ADDR_VAR 0 3
44132: PUSH
44133: LD_INT 13
44135: PUSH
44136: LD_INT 14
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: ST_TO_ADDR
44143: GO 44488
44145: LD_INT 26
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44171
44153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 13
44161: PUSH
44162: LD_INT 14
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: ST_TO_ADDR
44169: GO 44488
44171: LD_INT 42
44173: DOUBLE
44174: EQUAL
44175: IFTRUE 44179
44177: GO 44205
44179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_INT 21
44187: PUSH
44188: LD_INT 22
44190: PUSH
44191: LD_INT 23
44193: PUSH
44194: LD_INT 24
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: ST_TO_ADDR
44203: GO 44488
44205: LD_INT 43
44207: DOUBLE
44208: EQUAL
44209: IFTRUE 44213
44211: GO 44239
44213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_INT 21
44221: PUSH
44222: LD_INT 22
44224: PUSH
44225: LD_INT 23
44227: PUSH
44228: LD_INT 24
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
44237: GO 44488
44239: LD_INT 44
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44247
44245: GO 44273
44247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44248: LD_ADDR_VAR 0 3
44252: PUSH
44253: LD_INT 21
44255: PUSH
44256: LD_INT 22
44258: PUSH
44259: LD_INT 23
44261: PUSH
44262: LD_INT 24
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
44271: GO 44488
44273: LD_INT 45
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44307
44281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_INT 21
44289: PUSH
44290: LD_INT 22
44292: PUSH
44293: LD_INT 23
44295: PUSH
44296: LD_INT 24
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
44305: GO 44488
44307: LD_INT 49
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44341
44315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_INT 21
44323: PUSH
44324: LD_INT 22
44326: PUSH
44327: LD_INT 23
44329: PUSH
44330: LD_INT 24
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
44339: GO 44488
44341: LD_INT 51
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44375
44349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 21
44357: PUSH
44358: LD_INT 22
44360: PUSH
44361: LD_INT 23
44363: PUSH
44364: LD_INT 24
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
44373: GO 44488
44375: LD_INT 52
44377: DOUBLE
44378: EQUAL
44379: IFTRUE 44383
44381: GO 44409
44383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_INT 21
44391: PUSH
44392: LD_INT 22
44394: PUSH
44395: LD_INT 23
44397: PUSH
44398: LD_INT 24
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
44407: GO 44488
44409: LD_INT 53
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44417
44415: GO 44435
44417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 23
44425: PUSH
44426: LD_INT 24
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
44433: GO 44488
44435: LD_INT 46
44437: DOUBLE
44438: EQUAL
44439: IFTRUE 44443
44441: GO 44461
44443: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: LD_INT 23
44451: PUSH
44452: LD_INT 24
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 44488
44461: LD_INT 47
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44487
44469: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 23
44477: PUSH
44478: LD_INT 24
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: ST_TO_ADDR
44485: GO 44488
44487: POP
// result := ( chassis in result ) ;
44488: LD_ADDR_VAR 0 3
44492: PUSH
44493: LD_VAR 0 1
44497: PUSH
44498: LD_VAR 0 3
44502: IN
44503: ST_TO_ADDR
// end ;
44504: LD_VAR 0 3
44508: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44509: LD_INT 0
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
// result := array ;
44518: LD_ADDR_VAR 0 5
44522: PUSH
44523: LD_VAR 0 1
44527: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44528: LD_VAR 0 1
44532: NOT
44533: PUSH
44534: LD_VAR 0 2
44538: NOT
44539: OR
44540: PUSH
44541: LD_VAR 0 3
44545: NOT
44546: OR
44547: PUSH
44548: LD_VAR 0 2
44552: PUSH
44553: LD_VAR 0 1
44557: GREATER
44558: OR
44559: PUSH
44560: LD_VAR 0 3
44564: PUSH
44565: LD_VAR 0 1
44569: GREATER
44570: OR
44571: IFFALSE 44575
// exit ;
44573: GO 44871
// if direction then
44575: LD_VAR 0 4
44579: IFFALSE 44643
// begin d := 1 ;
44581: LD_ADDR_VAR 0 9
44585: PUSH
44586: LD_INT 1
44588: ST_TO_ADDR
// if i_from > i_to then
44589: LD_VAR 0 2
44593: PUSH
44594: LD_VAR 0 3
44598: GREATER
44599: IFFALSE 44625
// length := ( array - i_from ) + i_to else
44601: LD_ADDR_VAR 0 11
44605: PUSH
44606: LD_VAR 0 1
44610: PUSH
44611: LD_VAR 0 2
44615: MINUS
44616: PUSH
44617: LD_VAR 0 3
44621: PLUS
44622: ST_TO_ADDR
44623: GO 44641
// length := i_to - i_from ;
44625: LD_ADDR_VAR 0 11
44629: PUSH
44630: LD_VAR 0 3
44634: PUSH
44635: LD_VAR 0 2
44639: MINUS
44640: ST_TO_ADDR
// end else
44641: GO 44704
// begin d := - 1 ;
44643: LD_ADDR_VAR 0 9
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: ST_TO_ADDR
// if i_from > i_to then
44652: LD_VAR 0 2
44656: PUSH
44657: LD_VAR 0 3
44661: GREATER
44662: IFFALSE 44682
// length := i_from - i_to else
44664: LD_ADDR_VAR 0 11
44668: PUSH
44669: LD_VAR 0 2
44673: PUSH
44674: LD_VAR 0 3
44678: MINUS
44679: ST_TO_ADDR
44680: GO 44704
// length := ( array - i_to ) + i_from ;
44682: LD_ADDR_VAR 0 11
44686: PUSH
44687: LD_VAR 0 1
44691: PUSH
44692: LD_VAR 0 3
44696: MINUS
44697: PUSH
44698: LD_VAR 0 2
44702: PLUS
44703: ST_TO_ADDR
// end ; if not length then
44704: LD_VAR 0 11
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 44871
// tmp := array ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_VAR 0 1
44722: ST_TO_ADDR
// for i = 1 to length do
44723: LD_ADDR_VAR 0 6
44727: PUSH
44728: DOUBLE
44729: LD_INT 1
44731: DEC
44732: ST_TO_ADDR
44733: LD_VAR 0 11
44737: PUSH
44738: FOR_TO
44739: IFFALSE 44859
// begin for j = 1 to array do
44741: LD_ADDR_VAR 0 7
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_VAR 0 1
44755: PUSH
44756: FOR_TO
44757: IFFALSE 44845
// begin k := j + d ;
44759: LD_ADDR_VAR 0 8
44763: PUSH
44764: LD_VAR 0 7
44768: PUSH
44769: LD_VAR 0 9
44773: PLUS
44774: ST_TO_ADDR
// if k > array then
44775: LD_VAR 0 8
44779: PUSH
44780: LD_VAR 0 1
44784: GREATER
44785: IFFALSE 44795
// k := 1 ;
44787: LD_ADDR_VAR 0 8
44791: PUSH
44792: LD_INT 1
44794: ST_TO_ADDR
// if not k then
44795: LD_VAR 0 8
44799: NOT
44800: IFFALSE 44812
// k := array ;
44802: LD_ADDR_VAR 0 8
44806: PUSH
44807: LD_VAR 0 1
44811: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44812: LD_ADDR_VAR 0 10
44816: PUSH
44817: LD_VAR 0 10
44821: PPUSH
44822: LD_VAR 0 8
44826: PPUSH
44827: LD_VAR 0 1
44831: PUSH
44832: LD_VAR 0 7
44836: ARRAY
44837: PPUSH
44838: CALL_OW 1
44842: ST_TO_ADDR
// end ;
44843: GO 44756
44845: POP
44846: POP
// array := tmp ;
44847: LD_ADDR_VAR 0 1
44851: PUSH
44852: LD_VAR 0 10
44856: ST_TO_ADDR
// end ;
44857: GO 44738
44859: POP
44860: POP
// result := array ;
44861: LD_ADDR_VAR 0 5
44865: PUSH
44866: LD_VAR 0 1
44870: ST_TO_ADDR
// end ;
44871: LD_VAR 0 5
44875: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
// result := 0 ;
44880: LD_ADDR_VAR 0 3
44884: PUSH
44885: LD_INT 0
44887: ST_TO_ADDR
// if not array or not value in array then
44888: LD_VAR 0 1
44892: NOT
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_VAR 0 1
44903: IN
44904: NOT
44905: OR
44906: IFFALSE 44910
// exit ;
44908: GO 44964
// for i = 1 to array do
44910: LD_ADDR_VAR 0 4
44914: PUSH
44915: DOUBLE
44916: LD_INT 1
44918: DEC
44919: ST_TO_ADDR
44920: LD_VAR 0 1
44924: PUSH
44925: FOR_TO
44926: IFFALSE 44962
// if value = array [ i ] then
44928: LD_VAR 0 2
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_VAR 0 4
44942: ARRAY
44943: EQUAL
44944: IFFALSE 44960
// begin result := i ;
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_VAR 0 4
44955: ST_TO_ADDR
// exit ;
44956: POP
44957: POP
44958: GO 44964
// end ;
44960: GO 44925
44962: POP
44963: POP
// end ;
44964: LD_VAR 0 3
44968: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44969: LD_INT 0
44971: PPUSH
// vc_chassis := chassis ;
44972: LD_ADDR_OWVAR 37
44976: PUSH
44977: LD_VAR 0 1
44981: ST_TO_ADDR
// vc_engine := engine ;
44982: LD_ADDR_OWVAR 39
44986: PUSH
44987: LD_VAR 0 2
44991: ST_TO_ADDR
// vc_control := control ;
44992: LD_ADDR_OWVAR 38
44996: PUSH
44997: LD_VAR 0 3
45001: ST_TO_ADDR
// vc_weapon := weapon ;
45002: LD_ADDR_OWVAR 40
45006: PUSH
45007: LD_VAR 0 4
45011: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45012: LD_ADDR_OWVAR 41
45016: PUSH
45017: LD_VAR 0 5
45021: ST_TO_ADDR
// end ;
45022: LD_VAR 0 6
45026: RET
// export function WantPlant ( unit ) ; var task ; begin
45027: LD_INT 0
45029: PPUSH
45030: PPUSH
// result := false ;
45031: LD_ADDR_VAR 0 2
45035: PUSH
45036: LD_INT 0
45038: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 437
45053: ST_TO_ADDR
// if task then
45054: LD_VAR 0 3
45058: IFFALSE 45086
// if task [ 1 ] [ 1 ] = p then
45060: LD_VAR 0 3
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: PUSH
45069: LD_INT 1
45071: ARRAY
45072: PUSH
45073: LD_STRING p
45075: EQUAL
45076: IFFALSE 45086
// result := true ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_INT 1
45085: ST_TO_ADDR
// end ;
45086: LD_VAR 0 2
45090: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45091: LD_INT 0
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
// if pos < 1 then
45097: LD_VAR 0 2
45101: PUSH
45102: LD_INT 1
45104: LESS
45105: IFFALSE 45109
// exit ;
45107: GO 45412
// if pos = 1 then
45109: LD_VAR 0 2
45113: PUSH
45114: LD_INT 1
45116: EQUAL
45117: IFFALSE 45150
// result := Replace ( arr , pos [ 1 ] , value ) else
45119: LD_ADDR_VAR 0 4
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: LD_VAR 0 2
45133: PUSH
45134: LD_INT 1
45136: ARRAY
45137: PPUSH
45138: LD_VAR 0 3
45142: PPUSH
45143: CALL_OW 1
45147: ST_TO_ADDR
45148: GO 45412
// begin tmp := arr ;
45150: LD_ADDR_VAR 0 6
45154: PUSH
45155: LD_VAR 0 1
45159: ST_TO_ADDR
// s_arr := [ tmp ] ;
45160: LD_ADDR_VAR 0 7
45164: PUSH
45165: LD_VAR 0 6
45169: PUSH
45170: EMPTY
45171: LIST
45172: ST_TO_ADDR
// for i = 1 to pos - 1 do
45173: LD_ADDR_VAR 0 5
45177: PUSH
45178: DOUBLE
45179: LD_INT 1
45181: DEC
45182: ST_TO_ADDR
45183: LD_VAR 0 2
45187: PUSH
45188: LD_INT 1
45190: MINUS
45191: PUSH
45192: FOR_TO
45193: IFFALSE 45238
// begin tmp := tmp [ pos [ i ] ] ;
45195: LD_ADDR_VAR 0 6
45199: PUSH
45200: LD_VAR 0 6
45204: PUSH
45205: LD_VAR 0 2
45209: PUSH
45210: LD_VAR 0 5
45214: ARRAY
45215: ARRAY
45216: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45217: LD_ADDR_VAR 0 7
45221: PUSH
45222: LD_VAR 0 7
45226: PUSH
45227: LD_VAR 0 6
45231: PUSH
45232: EMPTY
45233: LIST
45234: ADD
45235: ST_TO_ADDR
// end ;
45236: GO 45192
45238: POP
45239: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45240: LD_ADDR_VAR 0 6
45244: PUSH
45245: LD_VAR 0 6
45249: PPUSH
45250: LD_VAR 0 2
45254: PUSH
45255: LD_VAR 0 2
45259: ARRAY
45260: PPUSH
45261: LD_VAR 0 3
45265: PPUSH
45266: CALL_OW 1
45270: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45271: LD_ADDR_VAR 0 7
45275: PUSH
45276: LD_VAR 0 7
45280: PPUSH
45281: LD_VAR 0 7
45285: PPUSH
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 1
45295: ST_TO_ADDR
// for i = s_arr downto 2 do
45296: LD_ADDR_VAR 0 5
45300: PUSH
45301: DOUBLE
45302: LD_VAR 0 7
45306: INC
45307: ST_TO_ADDR
45308: LD_INT 2
45310: PUSH
45311: FOR_DOWNTO
45312: IFFALSE 45396
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45314: LD_ADDR_VAR 0 6
45318: PUSH
45319: LD_VAR 0 7
45323: PUSH
45324: LD_VAR 0 5
45328: PUSH
45329: LD_INT 1
45331: MINUS
45332: ARRAY
45333: PPUSH
45334: LD_VAR 0 2
45338: PUSH
45339: LD_VAR 0 5
45343: PUSH
45344: LD_INT 1
45346: MINUS
45347: ARRAY
45348: PPUSH
45349: LD_VAR 0 7
45353: PUSH
45354: LD_VAR 0 5
45358: ARRAY
45359: PPUSH
45360: CALL_OW 1
45364: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45365: LD_ADDR_VAR 0 7
45369: PUSH
45370: LD_VAR 0 7
45374: PPUSH
45375: LD_VAR 0 5
45379: PUSH
45380: LD_INT 1
45382: MINUS
45383: PPUSH
45384: LD_VAR 0 6
45388: PPUSH
45389: CALL_OW 1
45393: ST_TO_ADDR
// end ;
45394: GO 45311
45396: POP
45397: POP
// result := s_arr [ 1 ] ;
45398: LD_ADDR_VAR 0 4
45402: PUSH
45403: LD_VAR 0 7
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: ST_TO_ADDR
// end ; end ;
45412: LD_VAR 0 4
45416: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45417: LD_INT 0
45419: PPUSH
45420: PPUSH
// if not list then
45421: LD_VAR 0 1
45425: NOT
45426: IFFALSE 45430
// exit ;
45428: GO 45521
// i := list [ pos1 ] ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 1
45439: PUSH
45440: LD_VAR 0 2
45444: ARRAY
45445: ST_TO_ADDR
// if not i then
45446: LD_VAR 0 5
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 45521
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45455: LD_ADDR_VAR 0 1
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 2
45469: PPUSH
45470: LD_VAR 0 1
45474: PUSH
45475: LD_VAR 0 3
45479: ARRAY
45480: PPUSH
45481: CALL_OW 1
45485: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45486: LD_ADDR_VAR 0 1
45490: PUSH
45491: LD_VAR 0 1
45495: PPUSH
45496: LD_VAR 0 3
45500: PPUSH
45501: LD_VAR 0 5
45505: PPUSH
45506: CALL_OW 1
45510: ST_TO_ADDR
// result := list ;
45511: LD_ADDR_VAR 0 4
45515: PUSH
45516: LD_VAR 0 1
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 4
45525: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45526: LD_INT 0
45528: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45529: LD_ADDR_VAR 0 5
45533: PUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 250
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 251
45553: PPUSH
45554: LD_VAR 0 2
45558: PPUSH
45559: LD_VAR 0 3
45563: PPUSH
45564: LD_VAR 0 4
45568: PPUSH
45569: CALL 45579 0 5
45573: ST_TO_ADDR
// end ;
45574: LD_VAR 0 5
45578: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45579: LD_INT 0
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
// if not list then
45585: LD_VAR 0 3
45589: NOT
45590: IFFALSE 45594
// exit ;
45592: GO 45982
// result := [ ] ;
45594: LD_ADDR_VAR 0 6
45598: PUSH
45599: EMPTY
45600: ST_TO_ADDR
// for i in list do
45601: LD_ADDR_VAR 0 7
45605: PUSH
45606: LD_VAR 0 3
45610: PUSH
45611: FOR_IN
45612: IFFALSE 45814
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45614: LD_ADDR_VAR 0 9
45618: PUSH
45619: LD_VAR 0 7
45623: PPUSH
45624: LD_VAR 0 1
45628: PPUSH
45629: LD_VAR 0 2
45633: PPUSH
45634: CALL_OW 297
45638: ST_TO_ADDR
// if not result then
45639: LD_VAR 0 6
45643: NOT
45644: IFFALSE 45670
// result := [ [ i , tmp ] ] else
45646: LD_ADDR_VAR 0 6
45650: PUSH
45651: LD_VAR 0 7
45655: PUSH
45656: LD_VAR 0 9
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: ST_TO_ADDR
45668: GO 45812
// begin if result [ result ] [ 2 ] < tmp then
45670: LD_VAR 0 6
45674: PUSH
45675: LD_VAR 0 6
45679: ARRAY
45680: PUSH
45681: LD_INT 2
45683: ARRAY
45684: PUSH
45685: LD_VAR 0 9
45689: LESS
45690: IFFALSE 45732
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_VAR 0 6
45701: PPUSH
45702: LD_VAR 0 6
45706: PUSH
45707: LD_INT 1
45709: PLUS
45710: PPUSH
45711: LD_VAR 0 7
45715: PUSH
45716: LD_VAR 0 9
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 2
45729: ST_TO_ADDR
45730: GO 45812
// for j = 1 to result do
45732: LD_ADDR_VAR 0 8
45736: PUSH
45737: DOUBLE
45738: LD_INT 1
45740: DEC
45741: ST_TO_ADDR
45742: LD_VAR 0 6
45746: PUSH
45747: FOR_TO
45748: IFFALSE 45810
// begin if tmp < result [ j ] [ 2 ] then
45750: LD_VAR 0 9
45754: PUSH
45755: LD_VAR 0 6
45759: PUSH
45760: LD_VAR 0 8
45764: ARRAY
45765: PUSH
45766: LD_INT 2
45768: ARRAY
45769: LESS
45770: IFFALSE 45808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_VAR 0 6
45781: PPUSH
45782: LD_VAR 0 8
45786: PPUSH
45787: LD_VAR 0 7
45791: PUSH
45792: LD_VAR 0 9
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PPUSH
45801: CALL_OW 2
45805: ST_TO_ADDR
// break ;
45806: GO 45810
// end ; end ;
45808: GO 45747
45810: POP
45811: POP
// end ; end ;
45812: GO 45611
45814: POP
45815: POP
// if result and not asc then
45816: LD_VAR 0 6
45820: PUSH
45821: LD_VAR 0 4
45825: NOT
45826: AND
45827: IFFALSE 45902
// begin tmp := result ;
45829: LD_ADDR_VAR 0 9
45833: PUSH
45834: LD_VAR 0 6
45838: ST_TO_ADDR
// for i = tmp downto 1 do
45839: LD_ADDR_VAR 0 7
45843: PUSH
45844: DOUBLE
45845: LD_VAR 0 9
45849: INC
45850: ST_TO_ADDR
45851: LD_INT 1
45853: PUSH
45854: FOR_DOWNTO
45855: IFFALSE 45900
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45857: LD_ADDR_VAR 0 6
45861: PUSH
45862: LD_VAR 0 6
45866: PPUSH
45867: LD_VAR 0 9
45871: PUSH
45872: LD_VAR 0 7
45876: MINUS
45877: PUSH
45878: LD_INT 1
45880: PLUS
45881: PPUSH
45882: LD_VAR 0 9
45886: PUSH
45887: LD_VAR 0 7
45891: ARRAY
45892: PPUSH
45893: CALL_OW 1
45897: ST_TO_ADDR
45898: GO 45854
45900: POP
45901: POP
// end ; tmp := [ ] ;
45902: LD_ADDR_VAR 0 9
45906: PUSH
45907: EMPTY
45908: ST_TO_ADDR
// if mode then
45909: LD_VAR 0 5
45913: IFFALSE 45982
// begin for i = 1 to result do
45915: LD_ADDR_VAR 0 7
45919: PUSH
45920: DOUBLE
45921: LD_INT 1
45923: DEC
45924: ST_TO_ADDR
45925: LD_VAR 0 6
45929: PUSH
45930: FOR_TO
45931: IFFALSE 45970
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45933: LD_ADDR_VAR 0 9
45937: PUSH
45938: LD_VAR 0 9
45942: PPUSH
45943: LD_VAR 0 7
45947: PPUSH
45948: LD_VAR 0 6
45952: PUSH
45953: LD_VAR 0 7
45957: ARRAY
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PPUSH
45963: CALL_OW 1
45967: ST_TO_ADDR
45968: GO 45930
45970: POP
45971: POP
// result := tmp ;
45972: LD_ADDR_VAR 0 6
45976: PUSH
45977: LD_VAR 0 9
45981: ST_TO_ADDR
// end ; end ;
45982: LD_VAR 0 6
45986: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45987: LD_INT 0
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45995: LD_ADDR_VAR 0 5
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// if not x or not y then
46017: LD_VAR 0 2
46021: NOT
46022: PUSH
46023: LD_VAR 0 3
46027: NOT
46028: OR
46029: IFFALSE 46033
// exit ;
46031: GO 47683
// if not range then
46033: LD_VAR 0 4
46037: NOT
46038: IFFALSE 46048
// range := 10 ;
46040: LD_ADDR_VAR 0 4
46044: PUSH
46045: LD_INT 10
46047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46048: LD_ADDR_VAR 0 8
46052: PUSH
46053: LD_INT 81
46055: PUSH
46056: LD_VAR 0 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 92
46067: PUSH
46068: LD_VAR 0 2
46072: PUSH
46073: LD_VAR 0 3
46077: PUSH
46078: LD_VAR 0 4
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 21
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: PPUSH
46111: CALL_OW 69
46115: ST_TO_ADDR
// if not tmp then
46116: LD_VAR 0 8
46120: NOT
46121: IFFALSE 46125
// exit ;
46123: GO 47683
// for i in tmp do
46125: LD_ADDR_VAR 0 6
46129: PUSH
46130: LD_VAR 0 8
46134: PUSH
46135: FOR_IN
46136: IFFALSE 47658
// begin points := [ 0 , 0 , 0 ] ;
46138: LD_ADDR_VAR 0 9
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// bpoints := 1 ;
46157: LD_ADDR_VAR 0 10
46161: PUSH
46162: LD_INT 1
46164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46165: LD_VAR 0 6
46169: PPUSH
46170: CALL_OW 247
46174: PUSH
46175: LD_INT 1
46177: DOUBLE
46178: EQUAL
46179: IFTRUE 46183
46181: GO 46761
46183: POP
// begin if GetClass ( i ) = 1 then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 257
46193: PUSH
46194: LD_INT 1
46196: EQUAL
46197: IFFALSE 46218
// points := [ 10 , 5 , 3 ] ;
46199: LD_ADDR_VAR 0 9
46203: PUSH
46204: LD_INT 10
46206: PUSH
46207: LD_INT 5
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46218: LD_VAR 0 6
46222: PPUSH
46223: CALL_OW 257
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: LD_INT 4
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: IN
46242: IFFALSE 46263
// points := [ 3 , 2 , 1 ] ;
46244: LD_ADDR_VAR 0 9
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46263: LD_VAR 0 6
46267: PPUSH
46268: CALL_OW 257
46272: PUSH
46273: LD_INT 5
46275: EQUAL
46276: IFFALSE 46297
// points := [ 130 , 5 , 2 ] ;
46278: LD_ADDR_VAR 0 9
46282: PUSH
46283: LD_INT 130
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46297: LD_VAR 0 6
46301: PPUSH
46302: CALL_OW 257
46306: PUSH
46307: LD_INT 8
46309: EQUAL
46310: IFFALSE 46331
// points := [ 35 , 35 , 30 ] ;
46312: LD_ADDR_VAR 0 9
46316: PUSH
46317: LD_INT 35
46319: PUSH
46320: LD_INT 35
46322: PUSH
46323: LD_INT 30
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46331: LD_VAR 0 6
46335: PPUSH
46336: CALL_OW 257
46340: PUSH
46341: LD_INT 9
46343: EQUAL
46344: IFFALSE 46365
// points := [ 20 , 55 , 40 ] ;
46346: LD_ADDR_VAR 0 9
46350: PUSH
46351: LD_INT 20
46353: PUSH
46354: LD_INT 55
46356: PUSH
46357: LD_INT 40
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46365: LD_VAR 0 6
46369: PPUSH
46370: CALL_OW 257
46374: PUSH
46375: LD_INT 12
46377: PUSH
46378: LD_INT 16
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: IN
46385: IFFALSE 46406
// points := [ 5 , 3 , 2 ] ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46406: LD_VAR 0 6
46410: PPUSH
46411: CALL_OW 257
46415: PUSH
46416: LD_INT 17
46418: EQUAL
46419: IFFALSE 46440
// points := [ 100 , 50 , 75 ] ;
46421: LD_ADDR_VAR 0 9
46425: PUSH
46426: LD_INT 100
46428: PUSH
46429: LD_INT 50
46431: PUSH
46432: LD_INT 75
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 257
46449: PUSH
46450: LD_INT 15
46452: EQUAL
46453: IFFALSE 46474
// points := [ 10 , 5 , 3 ] ;
46455: LD_ADDR_VAR 0 9
46459: PUSH
46460: LD_INT 10
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46474: LD_VAR 0 6
46478: PPUSH
46479: CALL_OW 257
46483: PUSH
46484: LD_INT 14
46486: EQUAL
46487: IFFALSE 46508
// points := [ 10 , 0 , 0 ] ;
46489: LD_ADDR_VAR 0 9
46493: PUSH
46494: LD_INT 10
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46508: LD_VAR 0 6
46512: PPUSH
46513: CALL_OW 257
46517: PUSH
46518: LD_INT 11
46520: EQUAL
46521: IFFALSE 46542
// points := [ 30 , 10 , 5 ] ;
46523: LD_ADDR_VAR 0 9
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 10
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46542: LD_VAR 0 1
46546: PPUSH
46547: LD_INT 5
46549: PPUSH
46550: CALL_OW 321
46554: PUSH
46555: LD_INT 2
46557: EQUAL
46558: IFFALSE 46575
// bpoints := bpoints * 1.8 ;
46560: LD_ADDR_VAR 0 10
46564: PUSH
46565: LD_VAR 0 10
46569: PUSH
46570: LD_REAL  1.80000000000000E+0000
46573: MUL
46574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46575: LD_VAR 0 6
46579: PPUSH
46580: CALL_OW 257
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: IN
46603: PUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: LD_INT 51
46611: PPUSH
46612: CALL_OW 321
46616: PUSH
46617: LD_INT 2
46619: EQUAL
46620: AND
46621: IFFALSE 46638
// bpoints := bpoints * 1.2 ;
46623: LD_ADDR_VAR 0 10
46627: PUSH
46628: LD_VAR 0 10
46632: PUSH
46633: LD_REAL  1.20000000000000E+0000
46636: MUL
46637: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46638: LD_VAR 0 6
46642: PPUSH
46643: CALL_OW 257
46647: PUSH
46648: LD_INT 5
46650: PUSH
46651: LD_INT 7
46653: PUSH
46654: LD_INT 9
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: IN
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_INT 52
46670: PPUSH
46671: CALL_OW 321
46675: PUSH
46676: LD_INT 2
46678: EQUAL
46679: AND
46680: IFFALSE 46697
// bpoints := bpoints * 1.5 ;
46682: LD_ADDR_VAR 0 10
46686: PUSH
46687: LD_VAR 0 10
46691: PUSH
46692: LD_REAL  1.50000000000000E+0000
46695: MUL
46696: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46697: LD_VAR 0 1
46701: PPUSH
46702: LD_INT 66
46704: PPUSH
46705: CALL_OW 321
46709: PUSH
46710: LD_INT 2
46712: EQUAL
46713: IFFALSE 46730
// bpoints := bpoints * 1.1 ;
46715: LD_ADDR_VAR 0 10
46719: PUSH
46720: LD_VAR 0 10
46724: PUSH
46725: LD_REAL  1.10000000000000E+0000
46728: MUL
46729: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46730: LD_ADDR_VAR 0 10
46734: PUSH
46735: LD_VAR 0 10
46739: PUSH
46740: LD_VAR 0 6
46744: PPUSH
46745: LD_INT 1
46747: PPUSH
46748: CALL_OW 259
46752: PUSH
46753: LD_REAL  1.15000000000000E+0000
46756: MUL
46757: MUL
46758: ST_TO_ADDR
// end ; unit_vehicle :
46759: GO 47587
46761: LD_INT 2
46763: DOUBLE
46764: EQUAL
46765: IFTRUE 46769
46767: GO 47575
46769: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46770: LD_VAR 0 6
46774: PPUSH
46775: CALL_OW 264
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 42
46785: PUSH
46786: LD_INT 24
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: IN
46794: IFFALSE 46815
// points := [ 25 , 5 , 3 ] ;
46796: LD_ADDR_VAR 0 9
46800: PUSH
46801: LD_INT 25
46803: PUSH
46804: LD_INT 5
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46815: LD_VAR 0 6
46819: PPUSH
46820: CALL_OW 264
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: LD_INT 43
46830: PUSH
46831: LD_INT 25
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: IN
46839: IFFALSE 46860
// points := [ 40 , 15 , 5 ] ;
46841: LD_ADDR_VAR 0 9
46845: PUSH
46846: LD_INT 40
46848: PUSH
46849: LD_INT 15
46851: PUSH
46852: LD_INT 5
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46860: LD_VAR 0 6
46864: PPUSH
46865: CALL_OW 264
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 23
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: IN
46880: IFFALSE 46901
// points := [ 7 , 25 , 8 ] ;
46882: LD_ADDR_VAR 0 9
46886: PUSH
46887: LD_INT 7
46889: PUSH
46890: LD_INT 25
46892: PUSH
46893: LD_INT 8
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46901: LD_VAR 0 6
46905: PPUSH
46906: CALL_OW 264
46910: PUSH
46911: LD_INT 5
46913: PUSH
46914: LD_INT 27
46916: PUSH
46917: LD_INT 44
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: IN
46925: IFFALSE 46946
// points := [ 14 , 50 , 16 ] ;
46927: LD_ADDR_VAR 0 9
46931: PUSH
46932: LD_INT 14
46934: PUSH
46935: LD_INT 50
46937: PUSH
46938: LD_INT 16
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46946: LD_VAR 0 6
46950: PPUSH
46951: CALL_OW 264
46955: PUSH
46956: LD_INT 6
46958: PUSH
46959: LD_INT 46
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: IN
46966: IFFALSE 46987
// points := [ 32 , 120 , 70 ] ;
46968: LD_ADDR_VAR 0 9
46972: PUSH
46973: LD_INT 32
46975: PUSH
46976: LD_INT 120
46978: PUSH
46979: LD_INT 70
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46987: LD_VAR 0 6
46991: PPUSH
46992: CALL_OW 264
46996: PUSH
46997: LD_INT 7
46999: PUSH
47000: LD_INT 28
47002: PUSH
47003: LD_INT 45
47005: PUSH
47006: LD_INT 92
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: IN
47015: IFFALSE 47036
// points := [ 35 , 20 , 45 ] ;
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_INT 35
47024: PUSH
47025: LD_INT 20
47027: PUSH
47028: LD_INT 45
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 264
47045: PUSH
47046: LD_INT 47
47048: PUSH
47049: EMPTY
47050: LIST
47051: IN
47052: IFFALSE 47073
// points := [ 67 , 45 , 75 ] ;
47054: LD_ADDR_VAR 0 9
47058: PUSH
47059: LD_INT 67
47061: PUSH
47062: LD_INT 45
47064: PUSH
47065: LD_INT 75
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47073: LD_VAR 0 6
47077: PPUSH
47078: CALL_OW 264
47082: PUSH
47083: LD_INT 26
47085: PUSH
47086: EMPTY
47087: LIST
47088: IN
47089: IFFALSE 47110
// points := [ 120 , 30 , 80 ] ;
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: LD_INT 120
47098: PUSH
47099: LD_INT 30
47101: PUSH
47102: LD_INT 80
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47110: LD_VAR 0 6
47114: PPUSH
47115: CALL_OW 264
47119: PUSH
47120: LD_INT 22
47122: PUSH
47123: EMPTY
47124: LIST
47125: IN
47126: IFFALSE 47147
// points := [ 40 , 1 , 1 ] ;
47128: LD_ADDR_VAR 0 9
47132: PUSH
47133: LD_INT 40
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47147: LD_VAR 0 6
47151: PPUSH
47152: CALL_OW 264
47156: PUSH
47157: LD_INT 29
47159: PUSH
47160: EMPTY
47161: LIST
47162: IN
47163: IFFALSE 47184
// points := [ 70 , 200 , 400 ] ;
47165: LD_ADDR_VAR 0 9
47169: PUSH
47170: LD_INT 70
47172: PUSH
47173: LD_INT 200
47175: PUSH
47176: LD_INT 400
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47184: LD_VAR 0 6
47188: PPUSH
47189: CALL_OW 264
47193: PUSH
47194: LD_INT 14
47196: PUSH
47197: LD_INT 53
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: IN
47204: IFFALSE 47225
// points := [ 40 , 10 , 20 ] ;
47206: LD_ADDR_VAR 0 9
47210: PUSH
47211: LD_INT 40
47213: PUSH
47214: LD_INT 10
47216: PUSH
47217: LD_INT 20
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 264
47234: PUSH
47235: LD_INT 9
47237: PUSH
47238: EMPTY
47239: LIST
47240: IN
47241: IFFALSE 47262
// points := [ 5 , 70 , 20 ] ;
47243: LD_ADDR_VAR 0 9
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: LD_INT 70
47253: PUSH
47254: LD_INT 20
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47262: LD_VAR 0 6
47266: PPUSH
47267: CALL_OW 264
47271: PUSH
47272: LD_INT 10
47274: PUSH
47275: EMPTY
47276: LIST
47277: IN
47278: IFFALSE 47299
// points := [ 35 , 110 , 70 ] ;
47280: LD_ADDR_VAR 0 9
47284: PUSH
47285: LD_INT 35
47287: PUSH
47288: LD_INT 110
47290: PUSH
47291: LD_INT 70
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47299: LD_VAR 0 6
47303: PPUSH
47304: CALL_OW 265
47308: PUSH
47309: LD_INT 25
47311: EQUAL
47312: IFFALSE 47333
// points := [ 80 , 65 , 100 ] ;
47314: LD_ADDR_VAR 0 9
47318: PUSH
47319: LD_INT 80
47321: PUSH
47322: LD_INT 65
47324: PUSH
47325: LD_INT 100
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47333: LD_VAR 0 6
47337: PPUSH
47338: CALL_OW 263
47342: PUSH
47343: LD_INT 1
47345: EQUAL
47346: IFFALSE 47381
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47348: LD_ADDR_VAR 0 10
47352: PUSH
47353: LD_VAR 0 10
47357: PUSH
47358: LD_VAR 0 6
47362: PPUSH
47363: CALL_OW 311
47367: PPUSH
47368: LD_INT 3
47370: PPUSH
47371: CALL_OW 259
47375: PUSH
47376: LD_INT 4
47378: MUL
47379: MUL
47380: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47381: LD_VAR 0 6
47385: PPUSH
47386: CALL_OW 263
47390: PUSH
47391: LD_INT 2
47393: EQUAL
47394: IFFALSE 47445
// begin j := IsControledBy ( i ) ;
47396: LD_ADDR_VAR 0 7
47400: PUSH
47401: LD_VAR 0 6
47405: PPUSH
47406: CALL_OW 312
47410: ST_TO_ADDR
// if j then
47411: LD_VAR 0 7
47415: IFFALSE 47445
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47417: LD_ADDR_VAR 0 10
47421: PUSH
47422: LD_VAR 0 10
47426: PUSH
47427: LD_VAR 0 7
47431: PPUSH
47432: LD_INT 3
47434: PPUSH
47435: CALL_OW 259
47439: PUSH
47440: LD_INT 3
47442: MUL
47443: MUL
47444: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47445: LD_VAR 0 6
47449: PPUSH
47450: CALL_OW 264
47454: PUSH
47455: LD_INT 5
47457: PUSH
47458: LD_INT 6
47460: PUSH
47461: LD_INT 46
47463: PUSH
47464: LD_INT 44
47466: PUSH
47467: LD_INT 47
47469: PUSH
47470: LD_INT 45
47472: PUSH
47473: LD_INT 28
47475: PUSH
47476: LD_INT 7
47478: PUSH
47479: LD_INT 27
47481: PUSH
47482: LD_INT 29
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: PUSH
47498: LD_VAR 0 1
47502: PPUSH
47503: LD_INT 52
47505: PPUSH
47506: CALL_OW 321
47510: PUSH
47511: LD_INT 2
47513: EQUAL
47514: AND
47515: IFFALSE 47532
// bpoints := bpoints * 1.2 ;
47517: LD_ADDR_VAR 0 10
47521: PUSH
47522: LD_VAR 0 10
47526: PUSH
47527: LD_REAL  1.20000000000000E+0000
47530: MUL
47531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47532: LD_VAR 0 6
47536: PPUSH
47537: CALL_OW 264
47541: PUSH
47542: LD_INT 6
47544: PUSH
47545: LD_INT 46
47547: PUSH
47548: LD_INT 47
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: IN
47556: IFFALSE 47573
// bpoints := bpoints * 1.2 ;
47558: LD_ADDR_VAR 0 10
47562: PUSH
47563: LD_VAR 0 10
47567: PUSH
47568: LD_REAL  1.20000000000000E+0000
47571: MUL
47572: ST_TO_ADDR
// end ; unit_building :
47573: GO 47587
47575: LD_INT 3
47577: DOUBLE
47578: EQUAL
47579: IFTRUE 47583
47581: GO 47586
47583: POP
// ; end ;
47584: GO 47587
47586: POP
// for j = 1 to 3 do
47587: LD_ADDR_VAR 0 7
47591: PUSH
47592: DOUBLE
47593: LD_INT 1
47595: DEC
47596: ST_TO_ADDR
47597: LD_INT 3
47599: PUSH
47600: FOR_TO
47601: IFFALSE 47654
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_VAR 0 5
47612: PPUSH
47613: LD_VAR 0 7
47617: PPUSH
47618: LD_VAR 0 5
47622: PUSH
47623: LD_VAR 0 7
47627: ARRAY
47628: PUSH
47629: LD_VAR 0 9
47633: PUSH
47634: LD_VAR 0 7
47638: ARRAY
47639: PUSH
47640: LD_VAR 0 10
47644: MUL
47645: PLUS
47646: PPUSH
47647: CALL_OW 1
47651: ST_TO_ADDR
47652: GO 47600
47654: POP
47655: POP
// end ;
47656: GO 46135
47658: POP
47659: POP
// result := Replace ( result , 4 , tmp ) ;
47660: LD_ADDR_VAR 0 5
47664: PUSH
47665: LD_VAR 0 5
47669: PPUSH
47670: LD_INT 4
47672: PPUSH
47673: LD_VAR 0 8
47677: PPUSH
47678: CALL_OW 1
47682: ST_TO_ADDR
// end ;
47683: LD_VAR 0 5
47687: RET
// export function DangerAtRange ( unit , range ) ; begin
47688: LD_INT 0
47690: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47691: LD_ADDR_VAR 0 3
47695: PUSH
47696: LD_VAR 0 1
47700: PPUSH
47701: CALL_OW 255
47705: PPUSH
47706: LD_VAR 0 1
47710: PPUSH
47711: CALL_OW 250
47715: PPUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL_OW 251
47725: PPUSH
47726: LD_VAR 0 2
47730: PPUSH
47731: CALL 45987 0 4
47735: ST_TO_ADDR
// end ;
47736: LD_VAR 0 3
47740: RET
// export function DangerInArea ( side , area ) ; begin
47741: LD_INT 0
47743: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47744: LD_ADDR_VAR 0 3
47748: PUSH
47749: LD_VAR 0 2
47753: PPUSH
47754: LD_INT 81
47756: PUSH
47757: LD_VAR 0 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PPUSH
47766: CALL_OW 70
47770: ST_TO_ADDR
// end ;
47771: LD_VAR 0 3
47775: RET
// export function IsExtension ( b ) ; begin
47776: LD_INT 0
47778: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47779: LD_ADDR_VAR 0 2
47783: PUSH
47784: LD_VAR 0 1
47788: PUSH
47789: LD_INT 23
47791: PUSH
47792: LD_INT 20
47794: PUSH
47795: LD_INT 22
47797: PUSH
47798: LD_INT 17
47800: PUSH
47801: LD_INT 24
47803: PUSH
47804: LD_INT 21
47806: PUSH
47807: LD_INT 19
47809: PUSH
47810: LD_INT 16
47812: PUSH
47813: LD_INT 25
47815: PUSH
47816: LD_INT 18
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: IN
47831: ST_TO_ADDR
// end ;
47832: LD_VAR 0 2
47836: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47837: LD_INT 0
47839: PPUSH
47840: PPUSH
47841: PPUSH
// result := [ ] ;
47842: LD_ADDR_VAR 0 4
47846: PUSH
47847: EMPTY
47848: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47849: LD_ADDR_VAR 0 5
47853: PUSH
47854: LD_VAR 0 2
47858: PPUSH
47859: LD_INT 21
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PPUSH
47869: CALL_OW 70
47873: ST_TO_ADDR
// if not tmp then
47874: LD_VAR 0 5
47878: NOT
47879: IFFALSE 47883
// exit ;
47881: GO 47947
// if checkLink then
47883: LD_VAR 0 3
47887: IFFALSE 47937
// begin for i in tmp do
47889: LD_ADDR_VAR 0 6
47893: PUSH
47894: LD_VAR 0 5
47898: PUSH
47899: FOR_IN
47900: IFFALSE 47935
// if GetBase ( i ) <> base then
47902: LD_VAR 0 6
47906: PPUSH
47907: CALL_OW 274
47911: PUSH
47912: LD_VAR 0 1
47916: NONEQUAL
47917: IFFALSE 47933
// ComLinkToBase ( base , i ) ;
47919: LD_VAR 0 1
47923: PPUSH
47924: LD_VAR 0 6
47928: PPUSH
47929: CALL_OW 169
47933: GO 47899
47935: POP
47936: POP
// end ; result := tmp ;
47937: LD_ADDR_VAR 0 4
47941: PUSH
47942: LD_VAR 0 5
47946: ST_TO_ADDR
// end ;
47947: LD_VAR 0 4
47951: RET
// export function ComComplete ( units , b ) ; var i ; begin
47952: LD_INT 0
47954: PPUSH
47955: PPUSH
// if not units then
47956: LD_VAR 0 1
47960: NOT
47961: IFFALSE 47965
// exit ;
47963: GO 48055
// for i in units do
47965: LD_ADDR_VAR 0 4
47969: PUSH
47970: LD_VAR 0 1
47974: PUSH
47975: FOR_IN
47976: IFFALSE 48053
// if BuildingStatus ( b ) = bs_build then
47978: LD_VAR 0 2
47982: PPUSH
47983: CALL_OW 461
47987: PUSH
47988: LD_INT 1
47990: EQUAL
47991: IFFALSE 48051
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47993: LD_VAR 0 4
47997: PPUSH
47998: LD_STRING h
48000: PUSH
48001: LD_VAR 0 2
48005: PPUSH
48006: CALL_OW 250
48010: PUSH
48011: LD_VAR 0 2
48015: PPUSH
48016: CALL_OW 251
48020: PUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: PPUSH
48047: CALL_OW 446
48051: GO 47975
48053: POP
48054: POP
// end ;
48055: LD_VAR 0 3
48059: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48060: LD_INT 0
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48068: LD_VAR 0 1
48072: NOT
48073: PUSH
48074: LD_VAR 0 1
48078: PPUSH
48079: CALL_OW 263
48083: PUSH
48084: LD_INT 2
48086: NONEQUAL
48087: OR
48088: IFFALSE 48092
// exit ;
48090: GO 48408
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48092: LD_ADDR_VAR 0 6
48096: PUSH
48097: LD_INT 22
48099: PUSH
48100: LD_VAR 0 1
48104: PPUSH
48105: CALL_OW 255
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 30
48119: PUSH
48120: LD_INT 36
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 34
48129: PUSH
48130: LD_INT 31
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PPUSH
48146: CALL_OW 69
48150: ST_TO_ADDR
// if not tmp then
48151: LD_VAR 0 6
48155: NOT
48156: IFFALSE 48160
// exit ;
48158: GO 48408
// result := [ ] ;
48160: LD_ADDR_VAR 0 2
48164: PUSH
48165: EMPTY
48166: ST_TO_ADDR
// for i in tmp do
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_VAR 0 6
48176: PUSH
48177: FOR_IN
48178: IFFALSE 48249
// begin t := UnitsInside ( i ) ;
48180: LD_ADDR_VAR 0 4
48184: PUSH
48185: LD_VAR 0 3
48189: PPUSH
48190: CALL_OW 313
48194: ST_TO_ADDR
// if t then
48195: LD_VAR 0 4
48199: IFFALSE 48247
// for j in t do
48201: LD_ADDR_VAR 0 7
48205: PUSH
48206: LD_VAR 0 4
48210: PUSH
48211: FOR_IN
48212: IFFALSE 48245
// result := Replace ( result , result + 1 , j ) ;
48214: LD_ADDR_VAR 0 2
48218: PUSH
48219: LD_VAR 0 2
48223: PPUSH
48224: LD_VAR 0 2
48228: PUSH
48229: LD_INT 1
48231: PLUS
48232: PPUSH
48233: LD_VAR 0 7
48237: PPUSH
48238: CALL_OW 1
48242: ST_TO_ADDR
48243: GO 48211
48245: POP
48246: POP
// end ;
48247: GO 48177
48249: POP
48250: POP
// if not result then
48251: LD_VAR 0 2
48255: NOT
48256: IFFALSE 48260
// exit ;
48258: GO 48408
// mech := result [ 1 ] ;
48260: LD_ADDR_VAR 0 5
48264: PUSH
48265: LD_VAR 0 2
48269: PUSH
48270: LD_INT 1
48272: ARRAY
48273: ST_TO_ADDR
// if result > 1 then
48274: LD_VAR 0 2
48278: PUSH
48279: LD_INT 1
48281: GREATER
48282: IFFALSE 48394
// begin for i = 2 to result do
48284: LD_ADDR_VAR 0 3
48288: PUSH
48289: DOUBLE
48290: LD_INT 2
48292: DEC
48293: ST_TO_ADDR
48294: LD_VAR 0 2
48298: PUSH
48299: FOR_TO
48300: IFFALSE 48392
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48302: LD_ADDR_VAR 0 4
48306: PUSH
48307: LD_VAR 0 2
48311: PUSH
48312: LD_VAR 0 3
48316: ARRAY
48317: PPUSH
48318: LD_INT 3
48320: PPUSH
48321: CALL_OW 259
48325: PUSH
48326: LD_VAR 0 2
48330: PUSH
48331: LD_VAR 0 3
48335: ARRAY
48336: PPUSH
48337: CALL_OW 432
48341: MINUS
48342: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48343: LD_VAR 0 4
48347: PUSH
48348: LD_VAR 0 5
48352: PPUSH
48353: LD_INT 3
48355: PPUSH
48356: CALL_OW 259
48360: PUSH
48361: LD_VAR 0 5
48365: PPUSH
48366: CALL_OW 432
48370: MINUS
48371: GREATEREQUAL
48372: IFFALSE 48390
// mech := result [ i ] ;
48374: LD_ADDR_VAR 0 5
48378: PUSH
48379: LD_VAR 0 2
48383: PUSH
48384: LD_VAR 0 3
48388: ARRAY
48389: ST_TO_ADDR
// end ;
48390: GO 48299
48392: POP
48393: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48394: LD_VAR 0 1
48398: PPUSH
48399: LD_VAR 0 5
48403: PPUSH
48404: CALL_OW 135
// end ;
48408: LD_VAR 0 2
48412: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48413: LD_INT 0
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
// result := [ ] ;
48428: LD_ADDR_VAR 0 7
48432: PUSH
48433: EMPTY
48434: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48435: LD_VAR 0 1
48439: PPUSH
48440: CALL_OW 266
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: IN
48455: NOT
48456: IFFALSE 48460
// exit ;
48458: GO 50094
// if name then
48460: LD_VAR 0 3
48464: IFFALSE 48480
// SetBName ( base_dep , name ) ;
48466: LD_VAR 0 1
48470: PPUSH
48471: LD_VAR 0 3
48475: PPUSH
48476: CALL_OW 500
// base := GetBase ( base_dep ) ;
48480: LD_ADDR_VAR 0 15
48484: PUSH
48485: LD_VAR 0 1
48489: PPUSH
48490: CALL_OW 274
48494: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48495: LD_ADDR_VAR 0 16
48499: PUSH
48500: LD_VAR 0 1
48504: PPUSH
48505: CALL_OW 255
48509: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48510: LD_ADDR_VAR 0 17
48514: PUSH
48515: LD_VAR 0 1
48519: PPUSH
48520: CALL_OW 248
48524: ST_TO_ADDR
// if sources then
48525: LD_VAR 0 5
48529: IFFALSE 48576
// for i = 1 to 3 do
48531: LD_ADDR_VAR 0 8
48535: PUSH
48536: DOUBLE
48537: LD_INT 1
48539: DEC
48540: ST_TO_ADDR
48541: LD_INT 3
48543: PUSH
48544: FOR_TO
48545: IFFALSE 48574
// AddResourceType ( base , i , sources [ i ] ) ;
48547: LD_VAR 0 15
48551: PPUSH
48552: LD_VAR 0 8
48556: PPUSH
48557: LD_VAR 0 5
48561: PUSH
48562: LD_VAR 0 8
48566: ARRAY
48567: PPUSH
48568: CALL_OW 276
48572: GO 48544
48574: POP
48575: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48576: LD_ADDR_VAR 0 18
48580: PUSH
48581: LD_VAR 0 15
48585: PPUSH
48586: LD_VAR 0 2
48590: PPUSH
48591: LD_INT 1
48593: PPUSH
48594: CALL 47837 0 3
48598: ST_TO_ADDR
// InitHc ;
48599: CALL_OW 19
// InitUc ;
48603: CALL_OW 18
// uc_side := side ;
48607: LD_ADDR_OWVAR 20
48611: PUSH
48612: LD_VAR 0 16
48616: ST_TO_ADDR
// uc_nation := nation ;
48617: LD_ADDR_OWVAR 21
48621: PUSH
48622: LD_VAR 0 17
48626: ST_TO_ADDR
// if buildings then
48627: LD_VAR 0 18
48631: IFFALSE 49953
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48633: LD_ADDR_VAR 0 19
48637: PUSH
48638: LD_VAR 0 18
48642: PPUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 30
48648: PUSH
48649: LD_INT 29
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 30
48658: PUSH
48659: LD_INT 30
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: PPUSH
48671: CALL_OW 72
48675: ST_TO_ADDR
// if tmp then
48676: LD_VAR 0 19
48680: IFFALSE 48728
// for i in tmp do
48682: LD_ADDR_VAR 0 8
48686: PUSH
48687: LD_VAR 0 19
48691: PUSH
48692: FOR_IN
48693: IFFALSE 48726
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48695: LD_VAR 0 8
48699: PPUSH
48700: CALL_OW 250
48704: PPUSH
48705: LD_VAR 0 8
48709: PPUSH
48710: CALL_OW 251
48714: PPUSH
48715: LD_VAR 0 16
48719: PPUSH
48720: CALL_OW 441
48724: GO 48692
48726: POP
48727: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48728: LD_VAR 0 18
48732: PPUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 30
48738: PUSH
48739: LD_INT 32
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 30
48748: PUSH
48749: LD_INT 33
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: PPUSH
48761: CALL_OW 72
48765: IFFALSE 48853
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48767: LD_ADDR_VAR 0 8
48771: PUSH
48772: LD_VAR 0 18
48776: PPUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 30
48782: PUSH
48783: LD_INT 32
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 30
48792: PUSH
48793: LD_INT 33
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: PPUSH
48805: CALL_OW 72
48809: PUSH
48810: FOR_IN
48811: IFFALSE 48851
// begin if not GetBWeapon ( i ) then
48813: LD_VAR 0 8
48817: PPUSH
48818: CALL_OW 269
48822: NOT
48823: IFFALSE 48849
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48825: LD_VAR 0 8
48829: PPUSH
48830: LD_VAR 0 8
48834: PPUSH
48835: LD_VAR 0 2
48839: PPUSH
48840: CALL 50099 0 2
48844: PPUSH
48845: CALL_OW 431
// end ;
48849: GO 48810
48851: POP
48852: POP
// end ; for i = 1 to personel do
48853: LD_ADDR_VAR 0 8
48857: PUSH
48858: DOUBLE
48859: LD_INT 1
48861: DEC
48862: ST_TO_ADDR
48863: LD_VAR 0 6
48867: PUSH
48868: FOR_TO
48869: IFFALSE 49933
// begin if i > 4 then
48871: LD_VAR 0 8
48875: PUSH
48876: LD_INT 4
48878: GREATER
48879: IFFALSE 48883
// break ;
48881: GO 49933
// case i of 1 :
48883: LD_VAR 0 8
48887: PUSH
48888: LD_INT 1
48890: DOUBLE
48891: EQUAL
48892: IFTRUE 48896
48894: GO 48976
48896: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48897: LD_ADDR_VAR 0 12
48901: PUSH
48902: LD_VAR 0 18
48906: PPUSH
48907: LD_INT 22
48909: PUSH
48910: LD_VAR 0 16
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 58
48921: PUSH
48922: EMPTY
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 30
48930: PUSH
48931: LD_INT 32
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 30
48940: PUSH
48941: LD_INT 4
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 30
48950: PUSH
48951: LD_INT 5
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: PPUSH
48969: CALL_OW 72
48973: ST_TO_ADDR
48974: GO 49198
48976: LD_INT 2
48978: DOUBLE
48979: EQUAL
48980: IFTRUE 48984
48982: GO 49046
48984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48985: LD_ADDR_VAR 0 12
48989: PUSH
48990: LD_VAR 0 18
48994: PPUSH
48995: LD_INT 22
48997: PUSH
48998: LD_VAR 0 16
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 30
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 30
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 72
49043: ST_TO_ADDR
49044: GO 49198
49046: LD_INT 3
49048: DOUBLE
49049: EQUAL
49050: IFTRUE 49054
49052: GO 49116
49054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49055: LD_ADDR_VAR 0 12
49059: PUSH
49060: LD_VAR 0 18
49064: PPUSH
49065: LD_INT 22
49067: PUSH
49068: LD_VAR 0 16
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 30
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 30
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PPUSH
49109: CALL_OW 72
49113: ST_TO_ADDR
49114: GO 49198
49116: LD_INT 4
49118: DOUBLE
49119: EQUAL
49120: IFTRUE 49124
49122: GO 49197
49124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49125: LD_ADDR_VAR 0 12
49129: PUSH
49130: LD_VAR 0 18
49134: PPUSH
49135: LD_INT 22
49137: PUSH
49138: LD_VAR 0 16
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 30
49152: PUSH
49153: LD_INT 6
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 30
49162: PUSH
49163: LD_INT 7
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 30
49172: PUSH
49173: LD_INT 8
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PPUSH
49190: CALL_OW 72
49194: ST_TO_ADDR
49195: GO 49198
49197: POP
// if i = 1 then
49198: LD_VAR 0 8
49202: PUSH
49203: LD_INT 1
49205: EQUAL
49206: IFFALSE 49317
// begin tmp := [ ] ;
49208: LD_ADDR_VAR 0 19
49212: PUSH
49213: EMPTY
49214: ST_TO_ADDR
// for j in f do
49215: LD_ADDR_VAR 0 9
49219: PUSH
49220: LD_VAR 0 12
49224: PUSH
49225: FOR_IN
49226: IFFALSE 49299
// if GetBType ( j ) = b_bunker then
49228: LD_VAR 0 9
49232: PPUSH
49233: CALL_OW 266
49237: PUSH
49238: LD_INT 32
49240: EQUAL
49241: IFFALSE 49268
// tmp := Insert ( tmp , 1 , j ) else
49243: LD_ADDR_VAR 0 19
49247: PUSH
49248: LD_VAR 0 19
49252: PPUSH
49253: LD_INT 1
49255: PPUSH
49256: LD_VAR 0 9
49260: PPUSH
49261: CALL_OW 2
49265: ST_TO_ADDR
49266: GO 49297
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49268: LD_ADDR_VAR 0 19
49272: PUSH
49273: LD_VAR 0 19
49277: PPUSH
49278: LD_VAR 0 19
49282: PUSH
49283: LD_INT 1
49285: PLUS
49286: PPUSH
49287: LD_VAR 0 9
49291: PPUSH
49292: CALL_OW 2
49296: ST_TO_ADDR
49297: GO 49225
49299: POP
49300: POP
// if tmp then
49301: LD_VAR 0 19
49305: IFFALSE 49317
// f := tmp ;
49307: LD_ADDR_VAR 0 12
49311: PUSH
49312: LD_VAR 0 19
49316: ST_TO_ADDR
// end ; x := personel [ i ] ;
49317: LD_ADDR_VAR 0 13
49321: PUSH
49322: LD_VAR 0 6
49326: PUSH
49327: LD_VAR 0 8
49331: ARRAY
49332: ST_TO_ADDR
// if x = - 1 then
49333: LD_VAR 0 13
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: EQUAL
49342: IFFALSE 49551
// begin for j in f do
49344: LD_ADDR_VAR 0 9
49348: PUSH
49349: LD_VAR 0 12
49353: PUSH
49354: FOR_IN
49355: IFFALSE 49547
// repeat InitHc ;
49357: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49361: LD_VAR 0 9
49365: PPUSH
49366: CALL_OW 266
49370: PUSH
49371: LD_INT 5
49373: EQUAL
49374: IFFALSE 49444
// begin if UnitsInside ( j ) < 3 then
49376: LD_VAR 0 9
49380: PPUSH
49381: CALL_OW 313
49385: PUSH
49386: LD_INT 3
49388: LESS
49389: IFFALSE 49425
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49391: LD_INT 0
49393: PPUSH
49394: LD_INT 5
49396: PUSH
49397: LD_INT 8
49399: PUSH
49400: LD_INT 9
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: PUSH
49408: LD_VAR 0 17
49412: ARRAY
49413: PPUSH
49414: LD_VAR 0 4
49418: PPUSH
49419: CALL_OW 380
49423: GO 49442
// PrepareHuman ( false , i , skill ) ;
49425: LD_INT 0
49427: PPUSH
49428: LD_VAR 0 8
49432: PPUSH
49433: LD_VAR 0 4
49437: PPUSH
49438: CALL_OW 380
// end else
49442: GO 49461
// PrepareHuman ( false , i , skill ) ;
49444: LD_INT 0
49446: PPUSH
49447: LD_VAR 0 8
49451: PPUSH
49452: LD_VAR 0 4
49456: PPUSH
49457: CALL_OW 380
// un := CreateHuman ;
49461: LD_ADDR_VAR 0 14
49465: PUSH
49466: CALL_OW 44
49470: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49471: LD_ADDR_VAR 0 7
49475: PUSH
49476: LD_VAR 0 7
49480: PPUSH
49481: LD_INT 1
49483: PPUSH
49484: LD_VAR 0 14
49488: PPUSH
49489: CALL_OW 2
49493: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49494: LD_VAR 0 14
49498: PPUSH
49499: LD_VAR 0 9
49503: PPUSH
49504: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49508: LD_VAR 0 9
49512: PPUSH
49513: CALL_OW 313
49517: PUSH
49518: LD_INT 6
49520: EQUAL
49521: PUSH
49522: LD_VAR 0 9
49526: PPUSH
49527: CALL_OW 266
49531: PUSH
49532: LD_INT 32
49534: PUSH
49535: LD_INT 31
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: IN
49542: OR
49543: IFFALSE 49357
49545: GO 49354
49547: POP
49548: POP
// end else
49549: GO 49931
// for j = 1 to x do
49551: LD_ADDR_VAR 0 9
49555: PUSH
49556: DOUBLE
49557: LD_INT 1
49559: DEC
49560: ST_TO_ADDR
49561: LD_VAR 0 13
49565: PUSH
49566: FOR_TO
49567: IFFALSE 49929
// begin InitHc ;
49569: CALL_OW 19
// if not f then
49573: LD_VAR 0 12
49577: NOT
49578: IFFALSE 49667
// begin PrepareHuman ( false , i , skill ) ;
49580: LD_INT 0
49582: PPUSH
49583: LD_VAR 0 8
49587: PPUSH
49588: LD_VAR 0 4
49592: PPUSH
49593: CALL_OW 380
// un := CreateHuman ;
49597: LD_ADDR_VAR 0 14
49601: PUSH
49602: CALL_OW 44
49606: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49607: LD_ADDR_VAR 0 7
49611: PUSH
49612: LD_VAR 0 7
49616: PPUSH
49617: LD_INT 1
49619: PPUSH
49620: LD_VAR 0 14
49624: PPUSH
49625: CALL_OW 2
49629: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49630: LD_VAR 0 14
49634: PPUSH
49635: LD_VAR 0 1
49639: PPUSH
49640: CALL_OW 250
49644: PPUSH
49645: LD_VAR 0 1
49649: PPUSH
49650: CALL_OW 251
49654: PPUSH
49655: LD_INT 10
49657: PPUSH
49658: LD_INT 0
49660: PPUSH
49661: CALL_OW 50
// continue ;
49665: GO 49566
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49667: LD_VAR 0 12
49671: PUSH
49672: LD_INT 1
49674: ARRAY
49675: PPUSH
49676: CALL_OW 313
49680: PUSH
49681: LD_VAR 0 12
49685: PUSH
49686: LD_INT 1
49688: ARRAY
49689: PPUSH
49690: CALL_OW 266
49694: PUSH
49695: LD_INT 32
49697: PUSH
49698: LD_INT 31
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: IN
49705: AND
49706: PUSH
49707: LD_VAR 0 12
49711: PUSH
49712: LD_INT 1
49714: ARRAY
49715: PPUSH
49716: CALL_OW 313
49720: PUSH
49721: LD_INT 6
49723: EQUAL
49724: OR
49725: IFFALSE 49745
// f := Delete ( f , 1 ) ;
49727: LD_ADDR_VAR 0 12
49731: PUSH
49732: LD_VAR 0 12
49736: PPUSH
49737: LD_INT 1
49739: PPUSH
49740: CALL_OW 3
49744: ST_TO_ADDR
// if not f then
49745: LD_VAR 0 12
49749: NOT
49750: IFFALSE 49768
// begin x := x + 2 ;
49752: LD_ADDR_VAR 0 13
49756: PUSH
49757: LD_VAR 0 13
49761: PUSH
49762: LD_INT 2
49764: PLUS
49765: ST_TO_ADDR
// continue ;
49766: GO 49566
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49768: LD_VAR 0 12
49772: PUSH
49773: LD_INT 1
49775: ARRAY
49776: PPUSH
49777: CALL_OW 266
49781: PUSH
49782: LD_INT 5
49784: EQUAL
49785: IFFALSE 49859
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49787: LD_VAR 0 12
49791: PUSH
49792: LD_INT 1
49794: ARRAY
49795: PPUSH
49796: CALL_OW 313
49800: PUSH
49801: LD_INT 3
49803: LESS
49804: IFFALSE 49840
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49806: LD_INT 0
49808: PPUSH
49809: LD_INT 5
49811: PUSH
49812: LD_INT 8
49814: PUSH
49815: LD_INT 9
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: PUSH
49823: LD_VAR 0 17
49827: ARRAY
49828: PPUSH
49829: LD_VAR 0 4
49833: PPUSH
49834: CALL_OW 380
49838: GO 49857
// PrepareHuman ( false , i , skill ) ;
49840: LD_INT 0
49842: PPUSH
49843: LD_VAR 0 8
49847: PPUSH
49848: LD_VAR 0 4
49852: PPUSH
49853: CALL_OW 380
// end else
49857: GO 49876
// PrepareHuman ( false , i , skill ) ;
49859: LD_INT 0
49861: PPUSH
49862: LD_VAR 0 8
49866: PPUSH
49867: LD_VAR 0 4
49871: PPUSH
49872: CALL_OW 380
// un := CreateHuman ;
49876: LD_ADDR_VAR 0 14
49880: PUSH
49881: CALL_OW 44
49885: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49886: LD_ADDR_VAR 0 7
49890: PUSH
49891: LD_VAR 0 7
49895: PPUSH
49896: LD_INT 1
49898: PPUSH
49899: LD_VAR 0 14
49903: PPUSH
49904: CALL_OW 2
49908: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49909: LD_VAR 0 14
49913: PPUSH
49914: LD_VAR 0 12
49918: PUSH
49919: LD_INT 1
49921: ARRAY
49922: PPUSH
49923: CALL_OW 52
// end ;
49927: GO 49566
49929: POP
49930: POP
// end ;
49931: GO 48868
49933: POP
49934: POP
// result := result ^ buildings ;
49935: LD_ADDR_VAR 0 7
49939: PUSH
49940: LD_VAR 0 7
49944: PUSH
49945: LD_VAR 0 18
49949: ADD
49950: ST_TO_ADDR
// end else
49951: GO 50094
// begin for i = 1 to personel do
49953: LD_ADDR_VAR 0 8
49957: PUSH
49958: DOUBLE
49959: LD_INT 1
49961: DEC
49962: ST_TO_ADDR
49963: LD_VAR 0 6
49967: PUSH
49968: FOR_TO
49969: IFFALSE 50092
// begin if i > 4 then
49971: LD_VAR 0 8
49975: PUSH
49976: LD_INT 4
49978: GREATER
49979: IFFALSE 49983
// break ;
49981: GO 50092
// x := personel [ i ] ;
49983: LD_ADDR_VAR 0 13
49987: PUSH
49988: LD_VAR 0 6
49992: PUSH
49993: LD_VAR 0 8
49997: ARRAY
49998: ST_TO_ADDR
// if x = - 1 then
49999: LD_VAR 0 13
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: EQUAL
50008: IFFALSE 50012
// continue ;
50010: GO 49968
// PrepareHuman ( false , i , skill ) ;
50012: LD_INT 0
50014: PPUSH
50015: LD_VAR 0 8
50019: PPUSH
50020: LD_VAR 0 4
50024: PPUSH
50025: CALL_OW 380
// un := CreateHuman ;
50029: LD_ADDR_VAR 0 14
50033: PUSH
50034: CALL_OW 44
50038: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50039: LD_VAR 0 14
50043: PPUSH
50044: LD_VAR 0 1
50048: PPUSH
50049: CALL_OW 250
50053: PPUSH
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 251
50063: PPUSH
50064: LD_INT 10
50066: PPUSH
50067: LD_INT 0
50069: PPUSH
50070: CALL_OW 50
// result := result ^ un ;
50074: LD_ADDR_VAR 0 7
50078: PUSH
50079: LD_VAR 0 7
50083: PUSH
50084: LD_VAR 0 14
50088: ADD
50089: ST_TO_ADDR
// end ;
50090: GO 49968
50092: POP
50093: POP
// end ; end ;
50094: LD_VAR 0 7
50098: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50099: LD_INT 0
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
// result := false ;
50117: LD_ADDR_VAR 0 3
50121: PUSH
50122: LD_INT 0
50124: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50125: LD_VAR 0 1
50129: NOT
50130: PUSH
50131: LD_VAR 0 1
50135: PPUSH
50136: CALL_OW 266
50140: PUSH
50141: LD_INT 32
50143: PUSH
50144: LD_INT 33
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: IN
50151: NOT
50152: OR
50153: IFFALSE 50157
// exit ;
50155: GO 51266
// nat := GetNation ( tower ) ;
50157: LD_ADDR_VAR 0 12
50161: PUSH
50162: LD_VAR 0 1
50166: PPUSH
50167: CALL_OW 248
50171: ST_TO_ADDR
// side := GetSide ( tower ) ;
50172: LD_ADDR_VAR 0 16
50176: PUSH
50177: LD_VAR 0 1
50181: PPUSH
50182: CALL_OW 255
50186: ST_TO_ADDR
// x := GetX ( tower ) ;
50187: LD_ADDR_VAR 0 10
50191: PUSH
50192: LD_VAR 0 1
50196: PPUSH
50197: CALL_OW 250
50201: ST_TO_ADDR
// y := GetY ( tower ) ;
50202: LD_ADDR_VAR 0 11
50206: PUSH
50207: LD_VAR 0 1
50211: PPUSH
50212: CALL_OW 251
50216: ST_TO_ADDR
// if not x or not y then
50217: LD_VAR 0 10
50221: NOT
50222: PUSH
50223: LD_VAR 0 11
50227: NOT
50228: OR
50229: IFFALSE 50233
// exit ;
50231: GO 51266
// weapon := 0 ;
50233: LD_ADDR_VAR 0 18
50237: PUSH
50238: LD_INT 0
50240: ST_TO_ADDR
// fac_list := [ ] ;
50241: LD_ADDR_VAR 0 17
50245: PUSH
50246: EMPTY
50247: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50248: LD_ADDR_VAR 0 6
50252: PUSH
50253: LD_VAR 0 1
50257: PPUSH
50258: CALL_OW 274
50262: PPUSH
50263: LD_VAR 0 2
50267: PPUSH
50268: LD_INT 0
50270: PPUSH
50271: CALL 47837 0 3
50275: PPUSH
50276: LD_INT 30
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PPUSH
50286: CALL_OW 72
50290: ST_TO_ADDR
// if not factories then
50291: LD_VAR 0 6
50295: NOT
50296: IFFALSE 50300
// exit ;
50298: GO 51266
// for i in factories do
50300: LD_ADDR_VAR 0 8
50304: PUSH
50305: LD_VAR 0 6
50309: PUSH
50310: FOR_IN
50311: IFFALSE 50336
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50313: LD_ADDR_VAR 0 17
50317: PUSH
50318: LD_VAR 0 17
50322: PUSH
50323: LD_VAR 0 8
50327: PPUSH
50328: CALL_OW 478
50332: UNION
50333: ST_TO_ADDR
50334: GO 50310
50336: POP
50337: POP
// if not fac_list then
50338: LD_VAR 0 17
50342: NOT
50343: IFFALSE 50347
// exit ;
50345: GO 51266
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50347: LD_ADDR_VAR 0 5
50351: PUSH
50352: LD_INT 4
50354: PUSH
50355: LD_INT 5
50357: PUSH
50358: LD_INT 9
50360: PUSH
50361: LD_INT 10
50363: PUSH
50364: LD_INT 6
50366: PUSH
50367: LD_INT 7
50369: PUSH
50370: LD_INT 11
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 27
50384: PUSH
50385: LD_INT 28
50387: PUSH
50388: LD_INT 26
50390: PUSH
50391: LD_INT 30
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 43
50402: PUSH
50403: LD_INT 44
50405: PUSH
50406: LD_INT 46
50408: PUSH
50409: LD_INT 45
50411: PUSH
50412: LD_INT 47
50414: PUSH
50415: LD_INT 49
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: LD_VAR 0 12
50435: ARRAY
50436: ST_TO_ADDR
// list := list isect fac_list ;
50437: LD_ADDR_VAR 0 5
50441: PUSH
50442: LD_VAR 0 5
50446: PUSH
50447: LD_VAR 0 17
50451: ISECT
50452: ST_TO_ADDR
// if not list then
50453: LD_VAR 0 5
50457: NOT
50458: IFFALSE 50462
// exit ;
50460: GO 51266
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50462: LD_VAR 0 12
50466: PUSH
50467: LD_INT 3
50469: EQUAL
50470: PUSH
50471: LD_INT 49
50473: PUSH
50474: LD_VAR 0 5
50478: IN
50479: AND
50480: PUSH
50481: LD_INT 31
50483: PPUSH
50484: LD_VAR 0 16
50488: PPUSH
50489: CALL_OW 321
50493: PUSH
50494: LD_INT 2
50496: EQUAL
50497: AND
50498: IFFALSE 50558
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50500: LD_INT 22
50502: PUSH
50503: LD_VAR 0 16
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 35
50514: PUSH
50515: LD_INT 49
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 91
50524: PUSH
50525: LD_VAR 0 1
50529: PUSH
50530: LD_INT 10
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: PPUSH
50543: CALL_OW 69
50547: NOT
50548: IFFALSE 50558
// weapon := ru_time_lapser ;
50550: LD_ADDR_VAR 0 18
50554: PUSH
50555: LD_INT 49
50557: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50558: LD_VAR 0 12
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: IN
50573: PUSH
50574: LD_INT 11
50576: PUSH
50577: LD_VAR 0 5
50581: IN
50582: PUSH
50583: LD_INT 30
50585: PUSH
50586: LD_VAR 0 5
50590: IN
50591: OR
50592: AND
50593: PUSH
50594: LD_INT 6
50596: PPUSH
50597: LD_VAR 0 16
50601: PPUSH
50602: CALL_OW 321
50606: PUSH
50607: LD_INT 2
50609: EQUAL
50610: AND
50611: IFFALSE 50776
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50613: LD_INT 22
50615: PUSH
50616: LD_VAR 0 16
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 35
50630: PUSH
50631: LD_INT 11
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 35
50640: PUSH
50641: LD_INT 30
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 91
50655: PUSH
50656: LD_VAR 0 1
50660: PUSH
50661: LD_INT 18
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: PPUSH
50674: CALL_OW 69
50678: NOT
50679: PUSH
50680: LD_INT 22
50682: PUSH
50683: LD_VAR 0 16
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 30
50697: PUSH
50698: LD_INT 32
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 30
50707: PUSH
50708: LD_INT 33
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 91
50722: PUSH
50723: LD_VAR 0 1
50727: PUSH
50728: LD_INT 12
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: PPUSH
50744: CALL_OW 69
50748: PUSH
50749: LD_INT 2
50751: GREATER
50752: AND
50753: IFFALSE 50776
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50755: LD_ADDR_VAR 0 18
50759: PUSH
50760: LD_INT 11
50762: PUSH
50763: LD_INT 30
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_VAR 0 12
50774: ARRAY
50775: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50776: LD_VAR 0 18
50780: NOT
50781: PUSH
50782: LD_INT 40
50784: PPUSH
50785: LD_VAR 0 16
50789: PPUSH
50790: CALL_OW 321
50794: PUSH
50795: LD_INT 2
50797: EQUAL
50798: AND
50799: PUSH
50800: LD_INT 7
50802: PUSH
50803: LD_VAR 0 5
50807: IN
50808: PUSH
50809: LD_INT 28
50811: PUSH
50812: LD_VAR 0 5
50816: IN
50817: OR
50818: PUSH
50819: LD_INT 45
50821: PUSH
50822: LD_VAR 0 5
50826: IN
50827: OR
50828: AND
50829: IFFALSE 51083
// begin hex := GetHexInfo ( x , y ) ;
50831: LD_ADDR_VAR 0 4
50835: PUSH
50836: LD_VAR 0 10
50840: PPUSH
50841: LD_VAR 0 11
50845: PPUSH
50846: CALL_OW 546
50850: ST_TO_ADDR
// if hex [ 1 ] then
50851: LD_VAR 0 4
50855: PUSH
50856: LD_INT 1
50858: ARRAY
50859: IFFALSE 50863
// exit ;
50861: GO 51266
// height := hex [ 2 ] ;
50863: LD_ADDR_VAR 0 15
50867: PUSH
50868: LD_VAR 0 4
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50877: LD_ADDR_VAR 0 14
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: LD_INT 5
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// for i in tmp do
50900: LD_ADDR_VAR 0 8
50904: PUSH
50905: LD_VAR 0 14
50909: PUSH
50910: FOR_IN
50911: IFFALSE 51081
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50913: LD_ADDR_VAR 0 9
50917: PUSH
50918: LD_VAR 0 10
50922: PPUSH
50923: LD_VAR 0 8
50927: PPUSH
50928: LD_INT 5
50930: PPUSH
50931: CALL_OW 272
50935: PUSH
50936: LD_VAR 0 11
50940: PPUSH
50941: LD_VAR 0 8
50945: PPUSH
50946: LD_INT 5
50948: PPUSH
50949: CALL_OW 273
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50958: LD_VAR 0 9
50962: PUSH
50963: LD_INT 1
50965: ARRAY
50966: PPUSH
50967: LD_VAR 0 9
50971: PUSH
50972: LD_INT 2
50974: ARRAY
50975: PPUSH
50976: CALL_OW 488
50980: IFFALSE 51079
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50982: LD_ADDR_VAR 0 4
50986: PUSH
50987: LD_VAR 0 9
50991: PUSH
50992: LD_INT 1
50994: ARRAY
50995: PPUSH
50996: LD_VAR 0 9
51000: PUSH
51001: LD_INT 2
51003: ARRAY
51004: PPUSH
51005: CALL_OW 546
51009: ST_TO_ADDR
// if hex [ 1 ] then
51010: LD_VAR 0 4
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: IFFALSE 51022
// continue ;
51020: GO 50910
// h := hex [ 2 ] ;
51022: LD_ADDR_VAR 0 13
51026: PUSH
51027: LD_VAR 0 4
51031: PUSH
51032: LD_INT 2
51034: ARRAY
51035: ST_TO_ADDR
// if h + 7 < height then
51036: LD_VAR 0 13
51040: PUSH
51041: LD_INT 7
51043: PLUS
51044: PUSH
51045: LD_VAR 0 15
51049: LESS
51050: IFFALSE 51079
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51052: LD_ADDR_VAR 0 18
51056: PUSH
51057: LD_INT 7
51059: PUSH
51060: LD_INT 28
51062: PUSH
51063: LD_INT 45
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: PUSH
51071: LD_VAR 0 12
51075: ARRAY
51076: ST_TO_ADDR
// break ;
51077: GO 51081
// end ; end ; end ;
51079: GO 50910
51081: POP
51082: POP
// end ; if not weapon then
51083: LD_VAR 0 18
51087: NOT
51088: IFFALSE 51148
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51090: LD_ADDR_VAR 0 5
51094: PUSH
51095: LD_VAR 0 5
51099: PUSH
51100: LD_INT 11
51102: PUSH
51103: LD_INT 30
51105: PUSH
51106: LD_INT 49
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: DIFF
51114: ST_TO_ADDR
// if not list then
51115: LD_VAR 0 5
51119: NOT
51120: IFFALSE 51124
// exit ;
51122: GO 51266
// weapon := list [ rand ( 1 , list ) ] ;
51124: LD_ADDR_VAR 0 18
51128: PUSH
51129: LD_VAR 0 5
51133: PUSH
51134: LD_INT 1
51136: PPUSH
51137: LD_VAR 0 5
51141: PPUSH
51142: CALL_OW 12
51146: ARRAY
51147: ST_TO_ADDR
// end ; if weapon then
51148: LD_VAR 0 18
51152: IFFALSE 51266
// begin tmp := CostOfWeapon ( weapon ) ;
51154: LD_ADDR_VAR 0 14
51158: PUSH
51159: LD_VAR 0 18
51163: PPUSH
51164: CALL_OW 451
51168: ST_TO_ADDR
// j := GetBase ( tower ) ;
51169: LD_ADDR_VAR 0 9
51173: PUSH
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 274
51183: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51184: LD_VAR 0 9
51188: PPUSH
51189: LD_INT 1
51191: PPUSH
51192: CALL_OW 275
51196: PUSH
51197: LD_VAR 0 14
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: GREATEREQUAL
51206: PUSH
51207: LD_VAR 0 9
51211: PPUSH
51212: LD_INT 2
51214: PPUSH
51215: CALL_OW 275
51219: PUSH
51220: LD_VAR 0 14
51224: PUSH
51225: LD_INT 2
51227: ARRAY
51228: GREATEREQUAL
51229: AND
51230: PUSH
51231: LD_VAR 0 9
51235: PPUSH
51236: LD_INT 3
51238: PPUSH
51239: CALL_OW 275
51243: PUSH
51244: LD_VAR 0 14
51248: PUSH
51249: LD_INT 3
51251: ARRAY
51252: GREATEREQUAL
51253: AND
51254: IFFALSE 51266
// result := weapon ;
51256: LD_ADDR_VAR 0 3
51260: PUSH
51261: LD_VAR 0 18
51265: ST_TO_ADDR
// end ; end ;
51266: LD_VAR 0 3
51270: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51271: LD_INT 0
51273: PPUSH
51274: PPUSH
// result := true ;
51275: LD_ADDR_VAR 0 3
51279: PUSH
51280: LD_INT 1
51282: ST_TO_ADDR
// if array1 = array2 then
51283: LD_VAR 0 1
51287: PUSH
51288: LD_VAR 0 2
51292: EQUAL
51293: IFFALSE 51353
// begin for i = 1 to array1 do
51295: LD_ADDR_VAR 0 4
51299: PUSH
51300: DOUBLE
51301: LD_INT 1
51303: DEC
51304: ST_TO_ADDR
51305: LD_VAR 0 1
51309: PUSH
51310: FOR_TO
51311: IFFALSE 51349
// if array1 [ i ] <> array2 [ i ] then
51313: LD_VAR 0 1
51317: PUSH
51318: LD_VAR 0 4
51322: ARRAY
51323: PUSH
51324: LD_VAR 0 2
51328: PUSH
51329: LD_VAR 0 4
51333: ARRAY
51334: NONEQUAL
51335: IFFALSE 51347
// begin result := false ;
51337: LD_ADDR_VAR 0 3
51341: PUSH
51342: LD_INT 0
51344: ST_TO_ADDR
// break ;
51345: GO 51349
// end ;
51347: GO 51310
51349: POP
51350: POP
// end else
51351: GO 51361
// result := false ;
51353: LD_ADDR_VAR 0 3
51357: PUSH
51358: LD_INT 0
51360: ST_TO_ADDR
// end ;
51361: LD_VAR 0 3
51365: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51366: LD_INT 0
51368: PPUSH
51369: PPUSH
// if not array1 or not array2 then
51370: LD_VAR 0 1
51374: NOT
51375: PUSH
51376: LD_VAR 0 2
51380: NOT
51381: OR
51382: IFFALSE 51386
// exit ;
51384: GO 51450
// result := true ;
51386: LD_ADDR_VAR 0 3
51390: PUSH
51391: LD_INT 1
51393: ST_TO_ADDR
// for i = 1 to array1 do
51394: LD_ADDR_VAR 0 4
51398: PUSH
51399: DOUBLE
51400: LD_INT 1
51402: DEC
51403: ST_TO_ADDR
51404: LD_VAR 0 1
51408: PUSH
51409: FOR_TO
51410: IFFALSE 51448
// if array1 [ i ] <> array2 [ i ] then
51412: LD_VAR 0 1
51416: PUSH
51417: LD_VAR 0 4
51421: ARRAY
51422: PUSH
51423: LD_VAR 0 2
51427: PUSH
51428: LD_VAR 0 4
51432: ARRAY
51433: NONEQUAL
51434: IFFALSE 51446
// begin result := false ;
51436: LD_ADDR_VAR 0 3
51440: PUSH
51441: LD_INT 0
51443: ST_TO_ADDR
// break ;
51444: GO 51448
// end ;
51446: GO 51409
51448: POP
51449: POP
// end ;
51450: LD_VAR 0 3
51454: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51455: LD_INT 0
51457: PPUSH
51458: PPUSH
51459: PPUSH
// pom := GetBase ( fac ) ;
51460: LD_ADDR_VAR 0 5
51464: PUSH
51465: LD_VAR 0 1
51469: PPUSH
51470: CALL_OW 274
51474: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51475: LD_ADDR_VAR 0 4
51479: PUSH
51480: LD_VAR 0 2
51484: PUSH
51485: LD_INT 1
51487: ARRAY
51488: PPUSH
51489: LD_VAR 0 2
51493: PUSH
51494: LD_INT 2
51496: ARRAY
51497: PPUSH
51498: LD_VAR 0 2
51502: PUSH
51503: LD_INT 3
51505: ARRAY
51506: PPUSH
51507: LD_VAR 0 2
51511: PUSH
51512: LD_INT 4
51514: ARRAY
51515: PPUSH
51516: CALL_OW 449
51520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_VAR 0 5
51530: PPUSH
51531: LD_INT 1
51533: PPUSH
51534: CALL_OW 275
51538: PUSH
51539: LD_VAR 0 4
51543: PUSH
51544: LD_INT 1
51546: ARRAY
51547: GREATEREQUAL
51548: PUSH
51549: LD_VAR 0 5
51553: PPUSH
51554: LD_INT 2
51556: PPUSH
51557: CALL_OW 275
51561: PUSH
51562: LD_VAR 0 4
51566: PUSH
51567: LD_INT 2
51569: ARRAY
51570: GREATEREQUAL
51571: AND
51572: PUSH
51573: LD_VAR 0 5
51577: PPUSH
51578: LD_INT 3
51580: PPUSH
51581: CALL_OW 275
51585: PUSH
51586: LD_VAR 0 4
51590: PUSH
51591: LD_INT 3
51593: ARRAY
51594: GREATEREQUAL
51595: AND
51596: ST_TO_ADDR
// end ;
51597: LD_VAR 0 3
51601: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
// pom := GetBase ( building ) ;
51608: LD_ADDR_VAR 0 3
51612: PUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 274
51622: ST_TO_ADDR
// if not pom then
51623: LD_VAR 0 3
51627: NOT
51628: IFFALSE 51632
// exit ;
51630: GO 51802
// btype := GetBType ( building ) ;
51632: LD_ADDR_VAR 0 5
51636: PUSH
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 266
51646: ST_TO_ADDR
// if btype = b_armoury then
51647: LD_VAR 0 5
51651: PUSH
51652: LD_INT 4
51654: EQUAL
51655: IFFALSE 51665
// btype := b_barracks ;
51657: LD_ADDR_VAR 0 5
51661: PUSH
51662: LD_INT 5
51664: ST_TO_ADDR
// if btype = b_depot then
51665: LD_VAR 0 5
51669: PUSH
51670: LD_INT 0
51672: EQUAL
51673: IFFALSE 51683
// btype := b_warehouse ;
51675: LD_ADDR_VAR 0 5
51679: PUSH
51680: LD_INT 1
51682: ST_TO_ADDR
// if btype = b_workshop then
51683: LD_VAR 0 5
51687: PUSH
51688: LD_INT 2
51690: EQUAL
51691: IFFALSE 51701
// btype := b_factory ;
51693: LD_ADDR_VAR 0 5
51697: PUSH
51698: LD_INT 3
51700: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51701: LD_ADDR_VAR 0 4
51705: PUSH
51706: LD_VAR 0 5
51710: PPUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 248
51720: PPUSH
51721: CALL_OW 450
51725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51726: LD_ADDR_VAR 0 2
51730: PUSH
51731: LD_VAR 0 3
51735: PPUSH
51736: LD_INT 1
51738: PPUSH
51739: CALL_OW 275
51743: PUSH
51744: LD_VAR 0 4
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: GREATEREQUAL
51753: PUSH
51754: LD_VAR 0 3
51758: PPUSH
51759: LD_INT 2
51761: PPUSH
51762: CALL_OW 275
51766: PUSH
51767: LD_VAR 0 4
51771: PUSH
51772: LD_INT 2
51774: ARRAY
51775: GREATEREQUAL
51776: AND
51777: PUSH
51778: LD_VAR 0 3
51782: PPUSH
51783: LD_INT 3
51785: PPUSH
51786: CALL_OW 275
51790: PUSH
51791: LD_VAR 0 4
51795: PUSH
51796: LD_INT 3
51798: ARRAY
51799: GREATEREQUAL
51800: AND
51801: ST_TO_ADDR
// end ;
51802: LD_VAR 0 2
51806: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51807: LD_INT 0
51809: PPUSH
51810: PPUSH
51811: PPUSH
// pom := GetBase ( building ) ;
51812: LD_ADDR_VAR 0 4
51816: PUSH
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL_OW 274
51826: ST_TO_ADDR
// if not pom then
51827: LD_VAR 0 4
51831: NOT
51832: IFFALSE 51836
// exit ;
51834: GO 51937
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51836: LD_ADDR_VAR 0 5
51840: PUSH
51841: LD_VAR 0 2
51845: PPUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: CALL_OW 248
51855: PPUSH
51856: CALL_OW 450
51860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51861: LD_ADDR_VAR 0 3
51865: PUSH
51866: LD_VAR 0 4
51870: PPUSH
51871: LD_INT 1
51873: PPUSH
51874: CALL_OW 275
51878: PUSH
51879: LD_VAR 0 5
51883: PUSH
51884: LD_INT 1
51886: ARRAY
51887: GREATEREQUAL
51888: PUSH
51889: LD_VAR 0 4
51893: PPUSH
51894: LD_INT 2
51896: PPUSH
51897: CALL_OW 275
51901: PUSH
51902: LD_VAR 0 5
51906: PUSH
51907: LD_INT 2
51909: ARRAY
51910: GREATEREQUAL
51911: AND
51912: PUSH
51913: LD_VAR 0 4
51917: PPUSH
51918: LD_INT 3
51920: PPUSH
51921: CALL_OW 275
51925: PUSH
51926: LD_VAR 0 5
51930: PUSH
51931: LD_INT 3
51933: ARRAY
51934: GREATEREQUAL
51935: AND
51936: ST_TO_ADDR
// end ;
51937: LD_VAR 0 3
51941: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51942: LD_INT 0
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
// result := false ;
51955: LD_ADDR_VAR 0 8
51959: PUSH
51960: LD_INT 0
51962: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51963: LD_VAR 0 5
51967: NOT
51968: PUSH
51969: LD_VAR 0 1
51973: NOT
51974: OR
51975: PUSH
51976: LD_VAR 0 2
51980: NOT
51981: OR
51982: PUSH
51983: LD_VAR 0 3
51987: NOT
51988: OR
51989: IFFALSE 51993
// exit ;
51991: GO 52807
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51993: LD_ADDR_VAR 0 14
51997: PUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: LD_VAR 0 2
52007: PPUSH
52008: LD_VAR 0 3
52012: PPUSH
52013: LD_VAR 0 4
52017: PPUSH
52018: LD_VAR 0 5
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PPUSH
52027: CALL_OW 248
52031: PPUSH
52032: LD_INT 0
52034: PPUSH
52035: CALL 54040 0 6
52039: ST_TO_ADDR
// if not hexes then
52040: LD_VAR 0 14
52044: NOT
52045: IFFALSE 52049
// exit ;
52047: GO 52807
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52049: LD_ADDR_VAR 0 17
52053: PUSH
52054: LD_VAR 0 5
52058: PPUSH
52059: LD_INT 22
52061: PUSH
52062: LD_VAR 0 13
52066: PPUSH
52067: CALL_OW 255
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 30
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PPUSH
52108: CALL_OW 72
52112: ST_TO_ADDR
// for i = 1 to hexes do
52113: LD_ADDR_VAR 0 9
52117: PUSH
52118: DOUBLE
52119: LD_INT 1
52121: DEC
52122: ST_TO_ADDR
52123: LD_VAR 0 14
52127: PUSH
52128: FOR_TO
52129: IFFALSE 52805
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52131: LD_ADDR_VAR 0 13
52135: PUSH
52136: LD_VAR 0 14
52140: PUSH
52141: LD_VAR 0 9
52145: ARRAY
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: PPUSH
52151: LD_VAR 0 14
52155: PUSH
52156: LD_VAR 0 9
52160: ARRAY
52161: PUSH
52162: LD_INT 2
52164: ARRAY
52165: PPUSH
52166: CALL_OW 428
52170: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52171: LD_VAR 0 14
52175: PUSH
52176: LD_VAR 0 9
52180: ARRAY
52181: PUSH
52182: LD_INT 1
52184: ARRAY
52185: PPUSH
52186: LD_VAR 0 14
52190: PUSH
52191: LD_VAR 0 9
52195: ARRAY
52196: PUSH
52197: LD_INT 2
52199: ARRAY
52200: PPUSH
52201: CALL_OW 351
52205: PUSH
52206: LD_VAR 0 14
52210: PUSH
52211: LD_VAR 0 9
52215: ARRAY
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PPUSH
52221: LD_VAR 0 14
52225: PUSH
52226: LD_VAR 0 9
52230: ARRAY
52231: PUSH
52232: LD_INT 2
52234: ARRAY
52235: PPUSH
52236: CALL_OW 488
52240: NOT
52241: OR
52242: PUSH
52243: LD_VAR 0 13
52247: PPUSH
52248: CALL_OW 247
52252: PUSH
52253: LD_INT 3
52255: EQUAL
52256: OR
52257: IFFALSE 52263
// exit ;
52259: POP
52260: POP
52261: GO 52807
// if not tmp then
52263: LD_VAR 0 13
52267: NOT
52268: IFFALSE 52272
// continue ;
52270: GO 52128
// result := true ;
52272: LD_ADDR_VAR 0 8
52276: PUSH
52277: LD_INT 1
52279: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52280: LD_VAR 0 6
52284: PUSH
52285: LD_VAR 0 13
52289: PPUSH
52290: CALL_OW 247
52294: PUSH
52295: LD_INT 2
52297: EQUAL
52298: AND
52299: PUSH
52300: LD_VAR 0 13
52304: PPUSH
52305: CALL_OW 263
52309: PUSH
52310: LD_INT 1
52312: EQUAL
52313: AND
52314: IFFALSE 52478
// begin if IsDrivenBy ( tmp ) then
52316: LD_VAR 0 13
52320: PPUSH
52321: CALL_OW 311
52325: IFFALSE 52329
// continue ;
52327: GO 52128
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52329: LD_VAR 0 6
52333: PPUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 60
52339: PUSH
52340: EMPTY
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: LD_INT 55
52352: PUSH
52353: EMPTY
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PPUSH
52364: CALL_OW 72
52368: IFFALSE 52476
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52370: LD_ADDR_VAR 0 18
52374: PUSH
52375: LD_VAR 0 6
52379: PPUSH
52380: LD_INT 3
52382: PUSH
52383: LD_INT 60
52385: PUSH
52386: EMPTY
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 55
52398: PUSH
52399: EMPTY
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 72
52414: PUSH
52415: LD_INT 1
52417: ARRAY
52418: ST_TO_ADDR
// if IsInUnit ( driver ) then
52419: LD_VAR 0 18
52423: PPUSH
52424: CALL_OW 310
52428: IFFALSE 52439
// ComExit ( driver ) ;
52430: LD_VAR 0 18
52434: PPUSH
52435: CALL 77819 0 1
// AddComEnterUnit ( driver , tmp ) ;
52439: LD_VAR 0 18
52443: PPUSH
52444: LD_VAR 0 13
52448: PPUSH
52449: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52453: LD_VAR 0 18
52457: PPUSH
52458: LD_VAR 0 7
52462: PPUSH
52463: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52467: LD_VAR 0 18
52471: PPUSH
52472: CALL_OW 181
// end ; continue ;
52476: GO 52128
// end ; if not cleaners or not tmp in cleaners then
52478: LD_VAR 0 6
52482: NOT
52483: PUSH
52484: LD_VAR 0 13
52488: PUSH
52489: LD_VAR 0 6
52493: IN
52494: NOT
52495: OR
52496: IFFALSE 52803
// begin if dep then
52498: LD_VAR 0 17
52502: IFFALSE 52638
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52504: LD_ADDR_VAR 0 16
52508: PUSH
52509: LD_VAR 0 17
52513: PUSH
52514: LD_INT 1
52516: ARRAY
52517: PPUSH
52518: CALL_OW 250
52522: PPUSH
52523: LD_VAR 0 17
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PPUSH
52532: CALL_OW 254
52536: PPUSH
52537: LD_INT 5
52539: PPUSH
52540: CALL_OW 272
52544: PUSH
52545: LD_VAR 0 17
52549: PUSH
52550: LD_INT 1
52552: ARRAY
52553: PPUSH
52554: CALL_OW 251
52558: PPUSH
52559: LD_VAR 0 17
52563: PUSH
52564: LD_INT 1
52566: ARRAY
52567: PPUSH
52568: CALL_OW 254
52572: PPUSH
52573: LD_INT 5
52575: PPUSH
52576: CALL_OW 273
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52585: LD_VAR 0 16
52589: PUSH
52590: LD_INT 1
52592: ARRAY
52593: PPUSH
52594: LD_VAR 0 16
52598: PUSH
52599: LD_INT 2
52601: ARRAY
52602: PPUSH
52603: CALL_OW 488
52607: IFFALSE 52638
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52609: LD_VAR 0 13
52613: PPUSH
52614: LD_VAR 0 16
52618: PUSH
52619: LD_INT 1
52621: ARRAY
52622: PPUSH
52623: LD_VAR 0 16
52627: PUSH
52628: LD_INT 2
52630: ARRAY
52631: PPUSH
52632: CALL_OW 111
// continue ;
52636: GO 52128
// end ; end ; r := GetDir ( tmp ) ;
52638: LD_ADDR_VAR 0 15
52642: PUSH
52643: LD_VAR 0 13
52647: PPUSH
52648: CALL_OW 254
52652: ST_TO_ADDR
// if r = 5 then
52653: LD_VAR 0 15
52657: PUSH
52658: LD_INT 5
52660: EQUAL
52661: IFFALSE 52671
// r := 0 ;
52663: LD_ADDR_VAR 0 15
52667: PUSH
52668: LD_INT 0
52670: ST_TO_ADDR
// for j = r to 5 do
52671: LD_ADDR_VAR 0 10
52675: PUSH
52676: DOUBLE
52677: LD_VAR 0 15
52681: DEC
52682: ST_TO_ADDR
52683: LD_INT 5
52685: PUSH
52686: FOR_TO
52687: IFFALSE 52801
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52689: LD_ADDR_VAR 0 11
52693: PUSH
52694: LD_VAR 0 13
52698: PPUSH
52699: CALL_OW 250
52703: PPUSH
52704: LD_VAR 0 10
52708: PPUSH
52709: LD_INT 2
52711: PPUSH
52712: CALL_OW 272
52716: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52717: LD_ADDR_VAR 0 12
52721: PUSH
52722: LD_VAR 0 13
52726: PPUSH
52727: CALL_OW 251
52731: PPUSH
52732: LD_VAR 0 10
52736: PPUSH
52737: LD_INT 2
52739: PPUSH
52740: CALL_OW 273
52744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52745: LD_VAR 0 11
52749: PPUSH
52750: LD_VAR 0 12
52754: PPUSH
52755: CALL_OW 488
52759: PUSH
52760: LD_VAR 0 11
52764: PPUSH
52765: LD_VAR 0 12
52769: PPUSH
52770: CALL_OW 428
52774: NOT
52775: AND
52776: IFFALSE 52799
// begin ComMoveXY ( tmp , _x , _y ) ;
52778: LD_VAR 0 13
52782: PPUSH
52783: LD_VAR 0 11
52787: PPUSH
52788: LD_VAR 0 12
52792: PPUSH
52793: CALL_OW 111
// break ;
52797: GO 52801
// end ; end ;
52799: GO 52686
52801: POP
52802: POP
// end ; end ;
52803: GO 52128
52805: POP
52806: POP
// end ;
52807: LD_VAR 0 8
52811: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52812: LD_INT 0
52814: PPUSH
// result := true ;
52815: LD_ADDR_VAR 0 3
52819: PUSH
52820: LD_INT 1
52822: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52823: LD_VAR 0 2
52827: PUSH
52828: LD_INT 24
52830: DOUBLE
52831: EQUAL
52832: IFTRUE 52842
52834: LD_INT 33
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 52867
52842: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52843: LD_ADDR_VAR 0 3
52847: PUSH
52848: LD_INT 32
52850: PPUSH
52851: LD_VAR 0 1
52855: PPUSH
52856: CALL_OW 321
52860: PUSH
52861: LD_INT 2
52863: EQUAL
52864: ST_TO_ADDR
52865: GO 53183
52867: LD_INT 20
52869: DOUBLE
52870: EQUAL
52871: IFTRUE 52875
52873: GO 52900
52875: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52876: LD_ADDR_VAR 0 3
52880: PUSH
52881: LD_INT 6
52883: PPUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: CALL_OW 321
52893: PUSH
52894: LD_INT 2
52896: EQUAL
52897: ST_TO_ADDR
52898: GO 53183
52900: LD_INT 22
52902: DOUBLE
52903: EQUAL
52904: IFTRUE 52914
52906: LD_INT 36
52908: DOUBLE
52909: EQUAL
52910: IFTRUE 52914
52912: GO 52939
52914: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_INT 15
52922: PPUSH
52923: LD_VAR 0 1
52927: PPUSH
52928: CALL_OW 321
52932: PUSH
52933: LD_INT 2
52935: EQUAL
52936: ST_TO_ADDR
52937: GO 53183
52939: LD_INT 30
52941: DOUBLE
52942: EQUAL
52943: IFTRUE 52947
52945: GO 52972
52947: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52948: LD_ADDR_VAR 0 3
52952: PUSH
52953: LD_INT 20
52955: PPUSH
52956: LD_VAR 0 1
52960: PPUSH
52961: CALL_OW 321
52965: PUSH
52966: LD_INT 2
52968: EQUAL
52969: ST_TO_ADDR
52970: GO 53183
52972: LD_INT 28
52974: DOUBLE
52975: EQUAL
52976: IFTRUE 52986
52978: LD_INT 21
52980: DOUBLE
52981: EQUAL
52982: IFTRUE 52986
52984: GO 53011
52986: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52987: LD_ADDR_VAR 0 3
52991: PUSH
52992: LD_INT 21
52994: PPUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 321
53004: PUSH
53005: LD_INT 2
53007: EQUAL
53008: ST_TO_ADDR
53009: GO 53183
53011: LD_INT 16
53013: DOUBLE
53014: EQUAL
53015: IFTRUE 53019
53017: GO 53044
53019: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53020: LD_ADDR_VAR 0 3
53024: PUSH
53025: LD_INT 84
53027: PPUSH
53028: LD_VAR 0 1
53032: PPUSH
53033: CALL_OW 321
53037: PUSH
53038: LD_INT 2
53040: EQUAL
53041: ST_TO_ADDR
53042: GO 53183
53044: LD_INT 19
53046: DOUBLE
53047: EQUAL
53048: IFTRUE 53058
53050: LD_INT 23
53052: DOUBLE
53053: EQUAL
53054: IFTRUE 53058
53056: GO 53083
53058: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53059: LD_ADDR_VAR 0 3
53063: PUSH
53064: LD_INT 83
53066: PPUSH
53067: LD_VAR 0 1
53071: PPUSH
53072: CALL_OW 321
53076: PUSH
53077: LD_INT 2
53079: EQUAL
53080: ST_TO_ADDR
53081: GO 53183
53083: LD_INT 17
53085: DOUBLE
53086: EQUAL
53087: IFTRUE 53091
53089: GO 53116
53091: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53092: LD_ADDR_VAR 0 3
53096: PUSH
53097: LD_INT 39
53099: PPUSH
53100: LD_VAR 0 1
53104: PPUSH
53105: CALL_OW 321
53109: PUSH
53110: LD_INT 2
53112: EQUAL
53113: ST_TO_ADDR
53114: GO 53183
53116: LD_INT 18
53118: DOUBLE
53119: EQUAL
53120: IFTRUE 53124
53122: GO 53149
53124: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53125: LD_ADDR_VAR 0 3
53129: PUSH
53130: LD_INT 40
53132: PPUSH
53133: LD_VAR 0 1
53137: PPUSH
53138: CALL_OW 321
53142: PUSH
53143: LD_INT 2
53145: EQUAL
53146: ST_TO_ADDR
53147: GO 53183
53149: LD_INT 27
53151: DOUBLE
53152: EQUAL
53153: IFTRUE 53157
53155: GO 53182
53157: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53158: LD_ADDR_VAR 0 3
53162: PUSH
53163: LD_INT 35
53165: PPUSH
53166: LD_VAR 0 1
53170: PPUSH
53171: CALL_OW 321
53175: PUSH
53176: LD_INT 2
53178: EQUAL
53179: ST_TO_ADDR
53180: GO 53183
53182: POP
// end ;
53183: LD_VAR 0 3
53187: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53188: LD_INT 0
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
// result := false ;
53201: LD_ADDR_VAR 0 6
53205: PUSH
53206: LD_INT 0
53208: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53209: LD_VAR 0 1
53213: NOT
53214: PUSH
53215: LD_VAR 0 1
53219: PPUSH
53220: CALL_OW 266
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: IN
53235: NOT
53236: OR
53237: PUSH
53238: LD_VAR 0 2
53242: NOT
53243: OR
53244: PUSH
53245: LD_VAR 0 5
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: LD_INT 4
53264: PUSH
53265: LD_INT 5
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: IN
53276: NOT
53277: OR
53278: PUSH
53279: LD_VAR 0 3
53283: PPUSH
53284: LD_VAR 0 4
53288: PPUSH
53289: CALL_OW 488
53293: NOT
53294: OR
53295: IFFALSE 53299
// exit ;
53297: GO 54035
// side := GetSide ( depot ) ;
53299: LD_ADDR_VAR 0 9
53303: PUSH
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL_OW 255
53313: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53314: LD_VAR 0 9
53318: PPUSH
53319: LD_VAR 0 2
53323: PPUSH
53324: CALL 52812 0 2
53328: NOT
53329: IFFALSE 53333
// exit ;
53331: GO 54035
// pom := GetBase ( depot ) ;
53333: LD_ADDR_VAR 0 10
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 274
53347: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53348: LD_ADDR_VAR 0 11
53352: PUSH
53353: LD_VAR 0 2
53357: PPUSH
53358: LD_VAR 0 1
53362: PPUSH
53363: CALL_OW 248
53367: PPUSH
53368: CALL_OW 450
53372: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53373: LD_VAR 0 10
53377: PPUSH
53378: LD_INT 1
53380: PPUSH
53381: CALL_OW 275
53385: PUSH
53386: LD_VAR 0 11
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: GREATEREQUAL
53395: PUSH
53396: LD_VAR 0 10
53400: PPUSH
53401: LD_INT 2
53403: PPUSH
53404: CALL_OW 275
53408: PUSH
53409: LD_VAR 0 11
53413: PUSH
53414: LD_INT 2
53416: ARRAY
53417: GREATEREQUAL
53418: AND
53419: PUSH
53420: LD_VAR 0 10
53424: PPUSH
53425: LD_INT 3
53427: PPUSH
53428: CALL_OW 275
53432: PUSH
53433: LD_VAR 0 11
53437: PUSH
53438: LD_INT 3
53440: ARRAY
53441: GREATEREQUAL
53442: AND
53443: NOT
53444: IFFALSE 53448
// exit ;
53446: GO 54035
// if GetBType ( depot ) = b_depot then
53448: LD_VAR 0 1
53452: PPUSH
53453: CALL_OW 266
53457: PUSH
53458: LD_INT 0
53460: EQUAL
53461: IFFALSE 53473
// dist := 28 else
53463: LD_ADDR_VAR 0 14
53467: PUSH
53468: LD_INT 28
53470: ST_TO_ADDR
53471: GO 53481
// dist := 36 ;
53473: LD_ADDR_VAR 0 14
53477: PUSH
53478: LD_INT 36
53480: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53481: LD_VAR 0 1
53485: PPUSH
53486: LD_VAR 0 3
53490: PPUSH
53491: LD_VAR 0 4
53495: PPUSH
53496: CALL_OW 297
53500: PUSH
53501: LD_VAR 0 14
53505: GREATER
53506: IFFALSE 53510
// exit ;
53508: GO 54035
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53510: LD_ADDR_VAR 0 12
53514: PUSH
53515: LD_VAR 0 2
53519: PPUSH
53520: LD_VAR 0 3
53524: PPUSH
53525: LD_VAR 0 4
53529: PPUSH
53530: LD_VAR 0 5
53534: PPUSH
53535: LD_VAR 0 1
53539: PPUSH
53540: CALL_OW 248
53544: PPUSH
53545: LD_INT 0
53547: PPUSH
53548: CALL 54040 0 6
53552: ST_TO_ADDR
// if not hexes then
53553: LD_VAR 0 12
53557: NOT
53558: IFFALSE 53562
// exit ;
53560: GO 54035
// hex := GetHexInfo ( x , y ) ;
53562: LD_ADDR_VAR 0 15
53566: PUSH
53567: LD_VAR 0 3
53571: PPUSH
53572: LD_VAR 0 4
53576: PPUSH
53577: CALL_OW 546
53581: ST_TO_ADDR
// if hex [ 1 ] then
53582: LD_VAR 0 15
53586: PUSH
53587: LD_INT 1
53589: ARRAY
53590: IFFALSE 53594
// exit ;
53592: GO 54035
// height := hex [ 2 ] ;
53594: LD_ADDR_VAR 0 13
53598: PUSH
53599: LD_VAR 0 15
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: ST_TO_ADDR
// for i = 1 to hexes do
53608: LD_ADDR_VAR 0 7
53612: PUSH
53613: DOUBLE
53614: LD_INT 1
53616: DEC
53617: ST_TO_ADDR
53618: LD_VAR 0 12
53622: PUSH
53623: FOR_TO
53624: IFFALSE 53954
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53626: LD_VAR 0 12
53630: PUSH
53631: LD_VAR 0 7
53635: ARRAY
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PPUSH
53641: LD_VAR 0 12
53645: PUSH
53646: LD_VAR 0 7
53650: ARRAY
53651: PUSH
53652: LD_INT 2
53654: ARRAY
53655: PPUSH
53656: CALL_OW 488
53660: NOT
53661: PUSH
53662: LD_VAR 0 12
53666: PUSH
53667: LD_VAR 0 7
53671: ARRAY
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_VAR 0 12
53681: PUSH
53682: LD_VAR 0 7
53686: ARRAY
53687: PUSH
53688: LD_INT 2
53690: ARRAY
53691: PPUSH
53692: CALL_OW 428
53696: PUSH
53697: LD_INT 0
53699: GREATER
53700: OR
53701: PUSH
53702: LD_VAR 0 12
53706: PUSH
53707: LD_VAR 0 7
53711: ARRAY
53712: PUSH
53713: LD_INT 1
53715: ARRAY
53716: PPUSH
53717: LD_VAR 0 12
53721: PUSH
53722: LD_VAR 0 7
53726: ARRAY
53727: PUSH
53728: LD_INT 2
53730: ARRAY
53731: PPUSH
53732: CALL_OW 351
53736: OR
53737: IFFALSE 53743
// exit ;
53739: POP
53740: POP
53741: GO 54035
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53743: LD_ADDR_VAR 0 8
53747: PUSH
53748: LD_VAR 0 12
53752: PUSH
53753: LD_VAR 0 7
53757: ARRAY
53758: PUSH
53759: LD_INT 1
53761: ARRAY
53762: PPUSH
53763: LD_VAR 0 12
53767: PUSH
53768: LD_VAR 0 7
53772: ARRAY
53773: PUSH
53774: LD_INT 2
53776: ARRAY
53777: PPUSH
53778: CALL_OW 546
53782: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53783: LD_VAR 0 8
53787: PUSH
53788: LD_INT 1
53790: ARRAY
53791: PUSH
53792: LD_VAR 0 8
53796: PUSH
53797: LD_INT 2
53799: ARRAY
53800: PUSH
53801: LD_VAR 0 13
53805: PUSH
53806: LD_INT 2
53808: PLUS
53809: GREATER
53810: OR
53811: PUSH
53812: LD_VAR 0 8
53816: PUSH
53817: LD_INT 2
53819: ARRAY
53820: PUSH
53821: LD_VAR 0 13
53825: PUSH
53826: LD_INT 2
53828: MINUS
53829: LESS
53830: OR
53831: PUSH
53832: LD_VAR 0 8
53836: PUSH
53837: LD_INT 3
53839: ARRAY
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 8
53846: PUSH
53847: LD_INT 9
53849: PUSH
53850: LD_INT 10
53852: PUSH
53853: LD_INT 11
53855: PUSH
53856: LD_INT 12
53858: PUSH
53859: LD_INT 13
53861: PUSH
53862: LD_INT 16
53864: PUSH
53865: LD_INT 17
53867: PUSH
53868: LD_INT 18
53870: PUSH
53871: LD_INT 19
53873: PUSH
53874: LD_INT 20
53876: PUSH
53877: LD_INT 21
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: IN
53895: NOT
53896: OR
53897: PUSH
53898: LD_VAR 0 8
53902: PUSH
53903: LD_INT 5
53905: ARRAY
53906: NOT
53907: OR
53908: PUSH
53909: LD_VAR 0 8
53913: PUSH
53914: LD_INT 6
53916: ARRAY
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 7
53926: PUSH
53927: LD_INT 9
53929: PUSH
53930: LD_INT 10
53932: PUSH
53933: LD_INT 11
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: IN
53944: NOT
53945: OR
53946: IFFALSE 53952
// exit ;
53948: POP
53949: POP
53950: GO 54035
// end ;
53952: GO 53623
53954: POP
53955: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53956: LD_VAR 0 9
53960: PPUSH
53961: LD_VAR 0 3
53965: PPUSH
53966: LD_VAR 0 4
53970: PPUSH
53971: LD_INT 20
53973: PPUSH
53974: CALL 45987 0 4
53978: PUSH
53979: LD_INT 4
53981: ARRAY
53982: IFFALSE 53986
// exit ;
53984: GO 54035
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53986: LD_VAR 0 2
53990: PUSH
53991: LD_INT 29
53993: PUSH
53994: LD_INT 30
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: IN
54001: PUSH
54002: LD_VAR 0 3
54006: PPUSH
54007: LD_VAR 0 4
54011: PPUSH
54012: LD_VAR 0 9
54016: PPUSH
54017: CALL_OW 440
54021: NOT
54022: AND
54023: IFFALSE 54027
// exit ;
54025: GO 54035
// result := true ;
54027: LD_ADDR_VAR 0 6
54031: PUSH
54032: LD_INT 1
54034: ST_TO_ADDR
// end ;
54035: LD_VAR 0 6
54039: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54040: LD_INT 0
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
// result = [ ] ;
54100: LD_ADDR_VAR 0 7
54104: PUSH
54105: EMPTY
54106: ST_TO_ADDR
// temp_list = [ ] ;
54107: LD_ADDR_VAR 0 9
54111: PUSH
54112: EMPTY
54113: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54114: LD_VAR 0 4
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 4
54133: PUSH
54134: LD_INT 5
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: IN
54145: NOT
54146: PUSH
54147: LD_VAR 0 1
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: IN
54162: PUSH
54163: LD_VAR 0 5
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 3
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: IN
54182: NOT
54183: AND
54184: OR
54185: IFFALSE 54189
// exit ;
54187: GO 72580
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54189: LD_VAR 0 1
54193: PUSH
54194: LD_INT 6
54196: PUSH
54197: LD_INT 7
54199: PUSH
54200: LD_INT 8
54202: PUSH
54203: LD_INT 13
54205: PUSH
54206: LD_INT 12
54208: PUSH
54209: LD_INT 15
54211: PUSH
54212: LD_INT 11
54214: PUSH
54215: LD_INT 14
54217: PUSH
54218: LD_INT 10
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: IN
54232: IFFALSE 54242
// btype = b_lab ;
54234: LD_ADDR_VAR 0 1
54238: PUSH
54239: LD_INT 6
54241: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54242: LD_VAR 0 6
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: IN
54261: NOT
54262: PUSH
54263: LD_VAR 0 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: LD_INT 6
54282: PUSH
54283: LD_INT 36
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: LD_INT 5
54291: PUSH
54292: LD_INT 31
54294: PUSH
54295: LD_INT 32
54297: PUSH
54298: LD_INT 33
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: IN
54314: NOT
54315: PUSH
54316: LD_VAR 0 6
54320: PUSH
54321: LD_INT 1
54323: EQUAL
54324: AND
54325: OR
54326: PUSH
54327: LD_VAR 0 1
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: IN
54342: NOT
54343: PUSH
54344: LD_VAR 0 6
54348: PUSH
54349: LD_INT 2
54351: EQUAL
54352: AND
54353: OR
54354: IFFALSE 54364
// mode = 0 ;
54356: LD_ADDR_VAR 0 6
54360: PUSH
54361: LD_INT 0
54363: ST_TO_ADDR
// case mode of 0 :
54364: LD_VAR 0 6
54368: PUSH
54369: LD_INT 0
54371: DOUBLE
54372: EQUAL
54373: IFTRUE 54377
54375: GO 65830
54377: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54378: LD_ADDR_VAR 0 11
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54571: LD_ADDR_VAR 0 12
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54767: LD_ADDR_VAR 0 13
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54966: LD_ADDR_VAR 0 14
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55162: LD_ADDR_VAR 0 15
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55355: LD_ADDR_VAR 0 16
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55548: LD_ADDR_VAR 0 17
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55778: LD_ADDR_VAR 0 18
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56008: LD_ADDR_VAR 0 19
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56238: LD_ADDR_VAR 0 20
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56468: LD_ADDR_VAR 0 21
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56698: LD_ADDR_VAR 0 22
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56928: LD_ADDR_VAR 0 23
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57208: LD_ADDR_VAR 0 24
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57484: LD_ADDR_VAR 0 25
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57758: LD_ADDR_VAR 0 26
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58034: LD_ADDR_VAR 0 27
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58314: LD_ADDR_VAR 0 28
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58596: LD_ADDR_VAR 0 29
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58875: LD_ADDR_VAR 0 30
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59153: LD_ADDR_VAR 0 31
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59431: LD_ADDR_VAR 0 32
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59709: LD_ADDR_VAR 0 33
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 34
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60268: LD_ADDR_VAR 0 35
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60380: LD_ADDR_VAR 0 36
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60492: LD_ADDR_VAR 0 37
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60604: LD_ADDR_VAR 0 38
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60716: LD_ADDR_VAR 0 39
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60828: LD_ADDR_VAR 0 40
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60940: LD_ADDR_VAR 0 41
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: LD_INT 3
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61290: LD_ADDR_VAR 0 42
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: NEG
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61640: LD_ADDR_VAR 0 43
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 3
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 3
61936: NEG
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: NEG
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61988: LD_ADDR_VAR 0 44
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 2
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 3
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: NEG
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62338: LD_ADDR_VAR 0 45
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: NEG
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: LD_INT 3
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62688: LD_ADDR_VAR 0 46
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: LD_INT 3
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63036: LD_ADDR_VAR 0 47
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63187: LD_ADDR_VAR 0 48
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: NEG
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63334: LD_ADDR_VAR 0 49
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63478: LD_ADDR_VAR 0 50
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 2
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63622: LD_ADDR_VAR 0 51
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63769: LD_ADDR_VAR 0 52
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63920: LD_ADDR_VAR 0 53
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: LD_INT 2
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64150: LD_ADDR_VAR 0 54
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 2
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64380: LD_ADDR_VAR 0 55
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 2
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 2
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64610: LD_ADDR_VAR 0 56
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 2
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64840: LD_ADDR_VAR 0 57
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 2
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 2
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: LD_INT 2
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65070: LD_ADDR_VAR 0 58
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 2
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 2
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65300: LD_ADDR_VAR 0 59
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65388: LD_ADDR_VAR 0 60
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65476: LD_ADDR_VAR 0 61
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 1
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65564: LD_ADDR_VAR 0 62
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65652: LD_ADDR_VAR 0 63
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65740: LD_ADDR_VAR 0 64
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: ST_TO_ADDR
// end ; 1 :
65828: GO 71725
65830: LD_INT 1
65832: DOUBLE
65833: EQUAL
65834: IFTRUE 65838
65836: GO 68461
65838: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65839: LD_ADDR_VAR 0 11
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: LD_INT 2
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65883: LD_ADDR_VAR 0 12
65887: PUSH
65888: LD_INT 2
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65924: LD_ADDR_VAR 0 13
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 2
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65964: LD_ADDR_VAR 0 14
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66005: LD_ADDR_VAR 0 15
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 3
66023: NEG
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: NEG
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66049: LD_ADDR_VAR 0 16
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66095: LD_ADDR_VAR 0 17
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: LD_INT 2
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66139: LD_ADDR_VAR 0 18
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66180: LD_ADDR_VAR 0 19
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66220: LD_ADDR_VAR 0 20
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 3
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: LIST
66260: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66261: LD_ADDR_VAR 0 21
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 3
66279: NEG
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66305: LD_ADDR_VAR 0 22
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: LD_INT 3
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66351: LD_ADDR_VAR 0 23
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 4
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 3
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66395: LD_ADDR_VAR 0 24
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 4
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66436: LD_ADDR_VAR 0 25
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: LD_INT 4
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66476: LD_ADDR_VAR 0 26
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: LD_INT 4
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66517: LD_ADDR_VAR 0 27
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66561: LD_ADDR_VAR 0 28
66565: PUSH
66566: LD_INT 3
66568: NEG
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 4
66592: NEG
66593: PUSH
66594: LD_INT 3
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66607: LD_ADDR_VAR 0 29
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 3
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 4
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 4
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 5
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 5
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: LD_INT 6
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: LD_INT 6
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: LD_INT 5
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66762: LD_ADDR_VAR 0 30
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 3
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 5
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 5
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 5
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 6
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 6
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66905: LD_ADDR_VAR 0 31
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 2
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 4
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: LD_INT 4
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: LD_INT 4
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 5
66972: PUSH
66973: LD_INT 4
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 5
66982: PUSH
66983: LD_INT 5
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 4
66992: PUSH
66993: LD_INT 5
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 6
67002: PUSH
67003: LD_INT 5
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 6
67012: PUSH
67013: LD_INT 6
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 5
67022: PUSH
67023: LD_INT 6
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67044: LD_ADDR_VAR 0 32
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: LD_INT 3
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 1
67113: PUSH
67114: LD_INT 5
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: LD_INT 5
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: LD_INT 4
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: LD_INT 6
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 6
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: LD_INT 5
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67187: LD_ADDR_VAR 0 33
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: NEG
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 4
67239: NEG
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 4
67250: NEG
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: LD_INT 1
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 5
67273: NEG
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: NEG
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 5
67296: NEG
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 6
67307: NEG
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 6
67318: NEG
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67342: LD_ADDR_VAR 0 34
67346: PUSH
67347: LD_INT 2
67349: NEG
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 3
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: LD_INT 4
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 4
67397: NEG
67398: PUSH
67399: LD_INT 3
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 4
67409: NEG
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: LD_INT 5
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: LD_INT 4
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: LD_INT 5
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 5
67457: NEG
67458: PUSH
67459: LD_INT 6
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 6
67469: NEG
67470: PUSH
67471: LD_INT 5
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 6
67481: NEG
67482: PUSH
67483: LD_INT 6
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67505: LD_ADDR_VAR 0 41
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67549: LD_ADDR_VAR 0 42
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67590: LD_ADDR_VAR 0 43
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: LD_INT 2
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 3
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: LD_INT 3
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67630: LD_ADDR_VAR 0 44
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67671: LD_ADDR_VAR 0 45
67675: PUSH
67676: LD_INT 2
67678: NEG
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: LD_INT 1
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67715: LD_ADDR_VAR 0 46
67719: PUSH
67720: LD_INT 2
67722: NEG
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: NEG
67747: PUSH
67748: LD_INT 2
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: LIST
67760: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67761: LD_ADDR_VAR 0 47
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67794: LD_ADDR_VAR 0 48
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67825: LD_ADDR_VAR 0 49
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: LD_INT 2
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67854: LD_ADDR_VAR 0 50
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67883: LD_ADDR_VAR 0 51
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67914: LD_ADDR_VAR 0 52
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: LD_INT 1
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 3
67933: NEG
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67947: LD_ADDR_VAR 0 53
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67991: LD_ADDR_VAR 0 54
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: LD_INT 1
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68032: LD_ADDR_VAR 0 55
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: LIST
68071: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68072: LD_ADDR_VAR 0 56
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68113: LD_ADDR_VAR 0 57
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 3
68131: NEG
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: LIST
68156: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68157: LD_ADDR_VAR 0 58
68161: PUSH
68162: LD_INT 2
68164: NEG
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: LD_INT 2
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68203: LD_ADDR_VAR 0 59
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68247: LD_ADDR_VAR 0 60
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: LD_INT 1
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 1
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: LIST
68287: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68288: LD_ADDR_VAR 0 61
68292: PUSH
68293: LD_INT 2
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: LIST
68327: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68328: LD_ADDR_VAR 0 62
68332: PUSH
68333: LD_INT 1
68335: PUSH
68336: LD_INT 2
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 2
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 1
68355: NEG
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68369: LD_ADDR_VAR 0 63
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: LIST
68412: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68413: LD_ADDR_VAR 0 64
68417: PUSH
68418: LD_INT 1
68420: NEG
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 2
68432: NEG
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: ST_TO_ADDR
// end ; 2 :
68459: GO 71725
68461: LD_INT 2
68463: DOUBLE
68464: EQUAL
68465: IFTRUE 68469
68467: GO 71724
68469: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68470: LD_ADDR_VAR 0 29
68474: PUSH
68475: LD_INT 4
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 4
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 5
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 3
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 3
68549: PUSH
68550: LD_INT 2
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: LD_INT 2
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: PUSH
68571: LD_INT 3
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: LD_INT 2
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 4
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 3
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 4
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: PUSH
68651: LD_INT 4
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: PUSH
68691: LD_INT 5
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: LD_INT 5
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: NEG
68711: PUSH
68712: LD_INT 4
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 3
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 2
68732: PUSH
68733: LD_INT 5
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: NEG
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 2
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 4
68820: NEG
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 4
68832: NEG
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: LD_INT 2
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: LD_INT 5
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 4
68903: NEG
68904: PUSH
68905: LD_INT 3
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 5
68927: NEG
68928: PUSH
68929: LD_INT 5
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: LD_INT 5
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69008: LD_ADDR_VAR 0 30
69012: PUSH
69013: LD_INT 4
69015: PUSH
69016: LD_INT 4
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 4
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 5
69035: PUSH
69036: LD_INT 4
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 5
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 4
69055: PUSH
69056: LD_INT 5
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: LD_INT 4
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: LD_INT 3
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 5
69085: PUSH
69086: LD_INT 3
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 4
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: LD_INT 2
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 4
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 4
69209: NEG
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: NEG
69233: PUSH
69234: LD_INT 1
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 5
69254: NEG
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 5
69265: NEG
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 5
69277: NEG
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: NEG
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 2
69324: NEG
69325: PUSH
69326: LD_INT 3
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: NEG
69337: PUSH
69338: LD_INT 2
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: LD_INT 2
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 4
69360: NEG
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 4
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 4
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 5
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: LD_INT 3
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 3
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: LD_INT 4
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 5
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 3
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 5
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69555: LD_ADDR_VAR 0 31
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 4
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 0
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 1
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: LD_INT 5
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: LD_INT 5
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: LD_INT 4
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: LD_INT 5
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: LD_INT 3
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: NEG
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: NEG
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: NEG
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 2
69689: NEG
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 3
69700: NEG
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 4
69722: NEG
69723: PUSH
69724: LD_INT 1
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 4
69734: NEG
69735: PUSH
69736: LD_INT 2
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 4
69757: NEG
69758: PUSH
69759: LD_INT 4
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 4
69769: NEG
69770: PUSH
69771: LD_INT 5
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 3
69781: NEG
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 3
69793: NEG
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: LD_INT 5
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: LD_INT 5
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 4
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 2
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 2
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: LD_INT 4
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 4
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 4
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 5
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 5
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70105: LD_ADDR_VAR 0 32
70109: PUSH
70110: LD_INT 4
70112: NEG
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 4
70123: NEG
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 4
70157: NEG
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 5
70168: NEG
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 5
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 5
70191: NEG
70192: PUSH
70193: LD_INT 2
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 3
70203: NEG
70204: PUSH
70205: LD_INT 2
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 3
70214: NEG
70215: PUSH
70216: LD_INT 3
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 3
70226: NEG
70227: PUSH
70228: LD_INT 4
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 2
70238: NEG
70239: PUSH
70240: LD_INT 3
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 2
70250: NEG
70251: PUSH
70252: LD_INT 2
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: LD_INT 2
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: LD_INT 3
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: LD_INT 4
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: LD_INT 4
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 4
70310: NEG
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: LD_INT 4
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 5
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 1
70355: PUSH
70356: LD_INT 3
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: LD_INT 4
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 1
70389: NEG
70390: PUSH
70391: LD_INT 5
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 2
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: LD_INT 5
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: LD_INT 0
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 2
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 4
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 4
70517: PUSH
70518: LD_INT 4
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 4
70527: PUSH
70528: LD_INT 3
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 5
70537: PUSH
70538: LD_INT 4
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 5
70547: PUSH
70548: LD_INT 5
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 4
70557: PUSH
70558: LD_INT 5
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: LD_INT 4
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: LD_INT 3
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 5
70587: PUSH
70588: LD_INT 3
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: PUSH
70598: LD_INT 5
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70652: LD_ADDR_VAR 0 33
70656: PUSH
70657: LD_INT 4
70659: NEG
70660: PUSH
70661: LD_INT 4
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 4
70671: NEG
70672: PUSH
70673: LD_INT 5
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 3
70683: NEG
70684: PUSH
70685: LD_INT 4
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 3
70695: NEG
70696: PUSH
70697: LD_INT 3
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 4
70707: NEG
70708: PUSH
70709: LD_INT 3
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 5
70719: NEG
70720: PUSH
70721: LD_INT 4
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 5
70731: NEG
70732: PUSH
70733: LD_INT 5
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: LD_INT 5
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 5
70755: NEG
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 3
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: LD_INT 3
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: PUSH
70801: LD_INT 2
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 2
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 1
70822: NEG
70823: PUSH
70824: LD_INT 3
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 1
70834: NEG
70835: PUSH
70836: LD_INT 4
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 2
70846: PUSH
70847: LD_INT 2
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: LD_INT 4
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 4
70869: PUSH
70870: LD_INT 0
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 4
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 5
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 5
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 3
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: PUSH
70931: LD_INT 1
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 5
70952: PUSH
70953: LD_INT 2
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 3
70962: PUSH
70963: LD_INT 3
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 3
70972: PUSH
70973: LD_INT 2
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 4
70982: PUSH
70983: LD_INT 3
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 4
70992: PUSH
70993: LD_INT 4
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 3
71002: PUSH
71003: LD_INT 4
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 2
71012: PUSH
71013: LD_INT 3
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 2
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 4
71032: PUSH
71033: LD_INT 2
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: LD_INT 4
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: LD_INT 4
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: LD_INT 3
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 1
71072: PUSH
71073: LD_INT 4
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: LD_INT 5
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: LD_INT 5
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: LD_INT 5
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 2
71134: NEG
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71190: LD_ADDR_VAR 0 34
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: LD_INT 4
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: LD_INT 5
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: LD_INT 4
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: LD_INT 3
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 3
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: NEG
71253: PUSH
71254: LD_INT 4
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: LD_INT 5
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 2
71276: PUSH
71277: LD_INT 3
71279: NEG
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 2
71287: NEG
71288: PUSH
71289: LD_INT 5
71291: NEG
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 3
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 3
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 4
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 4
71330: PUSH
71331: LD_INT 1
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 3
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 2
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: LD_INT 2
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 4
71382: PUSH
71383: LD_INT 2
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 4
71392: PUSH
71393: LD_INT 4
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 4
71402: PUSH
71403: LD_INT 3
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 5
71412: PUSH
71413: LD_INT 4
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 5
71422: PUSH
71423: LD_INT 5
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 4
71432: PUSH
71433: LD_INT 5
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 3
71442: PUSH
71443: LD_INT 4
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: LD_INT 3
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 5
71462: PUSH
71463: LD_INT 3
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: LD_INT 5
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 0
71482: PUSH
71483: LD_INT 3
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 0
71522: PUSH
71523: LD_INT 4
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 1
71532: NEG
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: LD_INT 2
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 2
71554: PUSH
71555: LD_INT 4
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: NEG
71565: PUSH
71566: LD_INT 2
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 4
71575: NEG
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 4
71586: NEG
71587: PUSH
71588: LD_INT 1
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 3
71598: NEG
71599: PUSH
71600: LD_INT 0
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: NEG
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 4
71620: NEG
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 5
71631: NEG
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 5
71642: NEG
71643: PUSH
71644: LD_INT 1
71646: NEG
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 5
71654: NEG
71655: PUSH
71656: LD_INT 2
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 3
71666: NEG
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// end ; end ;
71722: GO 71725
71724: POP
// case btype of b_depot , b_warehouse :
71725: LD_VAR 0 1
71729: PUSH
71730: LD_INT 0
71732: DOUBLE
71733: EQUAL
71734: IFTRUE 71744
71736: LD_INT 1
71738: DOUBLE
71739: EQUAL
71740: IFTRUE 71744
71742: GO 71945
71744: POP
// case nation of nation_american :
71745: LD_VAR 0 5
71749: PUSH
71750: LD_INT 1
71752: DOUBLE
71753: EQUAL
71754: IFTRUE 71758
71756: GO 71814
71758: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71759: LD_ADDR_VAR 0 9
71763: PUSH
71764: LD_VAR 0 11
71768: PUSH
71769: LD_VAR 0 12
71773: PUSH
71774: LD_VAR 0 13
71778: PUSH
71779: LD_VAR 0 14
71783: PUSH
71784: LD_VAR 0 15
71788: PUSH
71789: LD_VAR 0 16
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: PUSH
71802: LD_VAR 0 4
71806: PUSH
71807: LD_INT 1
71809: PLUS
71810: ARRAY
71811: ST_TO_ADDR
71812: GO 71943
71814: LD_INT 2
71816: DOUBLE
71817: EQUAL
71818: IFTRUE 71822
71820: GO 71878
71822: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71823: LD_ADDR_VAR 0 9
71827: PUSH
71828: LD_VAR 0 17
71832: PUSH
71833: LD_VAR 0 18
71837: PUSH
71838: LD_VAR 0 19
71842: PUSH
71843: LD_VAR 0 20
71847: PUSH
71848: LD_VAR 0 21
71852: PUSH
71853: LD_VAR 0 22
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: PUSH
71866: LD_VAR 0 4
71870: PUSH
71871: LD_INT 1
71873: PLUS
71874: ARRAY
71875: ST_TO_ADDR
71876: GO 71943
71878: LD_INT 3
71880: DOUBLE
71881: EQUAL
71882: IFTRUE 71886
71884: GO 71942
71886: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71887: LD_ADDR_VAR 0 9
71891: PUSH
71892: LD_VAR 0 23
71896: PUSH
71897: LD_VAR 0 24
71901: PUSH
71902: LD_VAR 0 25
71906: PUSH
71907: LD_VAR 0 26
71911: PUSH
71912: LD_VAR 0 27
71916: PUSH
71917: LD_VAR 0 28
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: PUSH
71930: LD_VAR 0 4
71934: PUSH
71935: LD_INT 1
71937: PLUS
71938: ARRAY
71939: ST_TO_ADDR
71940: GO 71943
71942: POP
71943: GO 72498
71945: LD_INT 2
71947: DOUBLE
71948: EQUAL
71949: IFTRUE 71959
71951: LD_INT 3
71953: DOUBLE
71954: EQUAL
71955: IFTRUE 71959
71957: GO 72015
71959: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71960: LD_ADDR_VAR 0 9
71964: PUSH
71965: LD_VAR 0 29
71969: PUSH
71970: LD_VAR 0 30
71974: PUSH
71975: LD_VAR 0 31
71979: PUSH
71980: LD_VAR 0 32
71984: PUSH
71985: LD_VAR 0 33
71989: PUSH
71990: LD_VAR 0 34
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: LD_VAR 0 4
72007: PUSH
72008: LD_INT 1
72010: PLUS
72011: ARRAY
72012: ST_TO_ADDR
72013: GO 72498
72015: LD_INT 16
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72077
72021: LD_INT 17
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72077
72027: LD_INT 18
72029: DOUBLE
72030: EQUAL
72031: IFTRUE 72077
72033: LD_INT 19
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72077
72039: LD_INT 22
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72077
72045: LD_INT 20
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72077
72051: LD_INT 21
72053: DOUBLE
72054: EQUAL
72055: IFTRUE 72077
72057: LD_INT 23
72059: DOUBLE
72060: EQUAL
72061: IFTRUE 72077
72063: LD_INT 24
72065: DOUBLE
72066: EQUAL
72067: IFTRUE 72077
72069: LD_INT 25
72071: DOUBLE
72072: EQUAL
72073: IFTRUE 72077
72075: GO 72133
72077: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72078: LD_ADDR_VAR 0 9
72082: PUSH
72083: LD_VAR 0 35
72087: PUSH
72088: LD_VAR 0 36
72092: PUSH
72093: LD_VAR 0 37
72097: PUSH
72098: LD_VAR 0 38
72102: PUSH
72103: LD_VAR 0 39
72107: PUSH
72108: LD_VAR 0 40
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: PUSH
72121: LD_VAR 0 4
72125: PUSH
72126: LD_INT 1
72128: PLUS
72129: ARRAY
72130: ST_TO_ADDR
72131: GO 72498
72133: LD_INT 6
72135: DOUBLE
72136: EQUAL
72137: IFTRUE 72189
72139: LD_INT 7
72141: DOUBLE
72142: EQUAL
72143: IFTRUE 72189
72145: LD_INT 8
72147: DOUBLE
72148: EQUAL
72149: IFTRUE 72189
72151: LD_INT 13
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72189
72157: LD_INT 12
72159: DOUBLE
72160: EQUAL
72161: IFTRUE 72189
72163: LD_INT 15
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72189
72169: LD_INT 11
72171: DOUBLE
72172: EQUAL
72173: IFTRUE 72189
72175: LD_INT 14
72177: DOUBLE
72178: EQUAL
72179: IFTRUE 72189
72181: LD_INT 10
72183: DOUBLE
72184: EQUAL
72185: IFTRUE 72189
72187: GO 72245
72189: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72190: LD_ADDR_VAR 0 9
72194: PUSH
72195: LD_VAR 0 41
72199: PUSH
72200: LD_VAR 0 42
72204: PUSH
72205: LD_VAR 0 43
72209: PUSH
72210: LD_VAR 0 44
72214: PUSH
72215: LD_VAR 0 45
72219: PUSH
72220: LD_VAR 0 46
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: PUSH
72233: LD_VAR 0 4
72237: PUSH
72238: LD_INT 1
72240: PLUS
72241: ARRAY
72242: ST_TO_ADDR
72243: GO 72498
72245: LD_INT 36
72247: DOUBLE
72248: EQUAL
72249: IFTRUE 72253
72251: GO 72309
72253: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72254: LD_ADDR_VAR 0 9
72258: PUSH
72259: LD_VAR 0 47
72263: PUSH
72264: LD_VAR 0 48
72268: PUSH
72269: LD_VAR 0 49
72273: PUSH
72274: LD_VAR 0 50
72278: PUSH
72279: LD_VAR 0 51
72283: PUSH
72284: LD_VAR 0 52
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: PUSH
72297: LD_VAR 0 4
72301: PUSH
72302: LD_INT 1
72304: PLUS
72305: ARRAY
72306: ST_TO_ADDR
72307: GO 72498
72309: LD_INT 4
72311: DOUBLE
72312: EQUAL
72313: IFTRUE 72335
72315: LD_INT 5
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72335
72321: LD_INT 34
72323: DOUBLE
72324: EQUAL
72325: IFTRUE 72335
72327: LD_INT 37
72329: DOUBLE
72330: EQUAL
72331: IFTRUE 72335
72333: GO 72391
72335: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72336: LD_ADDR_VAR 0 9
72340: PUSH
72341: LD_VAR 0 53
72345: PUSH
72346: LD_VAR 0 54
72350: PUSH
72351: LD_VAR 0 55
72355: PUSH
72356: LD_VAR 0 56
72360: PUSH
72361: LD_VAR 0 57
72365: PUSH
72366: LD_VAR 0 58
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: PUSH
72379: LD_VAR 0 4
72383: PUSH
72384: LD_INT 1
72386: PLUS
72387: ARRAY
72388: ST_TO_ADDR
72389: GO 72498
72391: LD_INT 31
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72441
72397: LD_INT 32
72399: DOUBLE
72400: EQUAL
72401: IFTRUE 72441
72403: LD_INT 33
72405: DOUBLE
72406: EQUAL
72407: IFTRUE 72441
72409: LD_INT 27
72411: DOUBLE
72412: EQUAL
72413: IFTRUE 72441
72415: LD_INT 26
72417: DOUBLE
72418: EQUAL
72419: IFTRUE 72441
72421: LD_INT 28
72423: DOUBLE
72424: EQUAL
72425: IFTRUE 72441
72427: LD_INT 29
72429: DOUBLE
72430: EQUAL
72431: IFTRUE 72441
72433: LD_INT 30
72435: DOUBLE
72436: EQUAL
72437: IFTRUE 72441
72439: GO 72497
72441: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72442: LD_ADDR_VAR 0 9
72446: PUSH
72447: LD_VAR 0 59
72451: PUSH
72452: LD_VAR 0 60
72456: PUSH
72457: LD_VAR 0 61
72461: PUSH
72462: LD_VAR 0 62
72466: PUSH
72467: LD_VAR 0 63
72471: PUSH
72472: LD_VAR 0 64
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: PUSH
72485: LD_VAR 0 4
72489: PUSH
72490: LD_INT 1
72492: PLUS
72493: ARRAY
72494: ST_TO_ADDR
72495: GO 72498
72497: POP
// temp_list2 = [ ] ;
72498: LD_ADDR_VAR 0 10
72502: PUSH
72503: EMPTY
72504: ST_TO_ADDR
// for i in temp_list do
72505: LD_ADDR_VAR 0 8
72509: PUSH
72510: LD_VAR 0 9
72514: PUSH
72515: FOR_IN
72516: IFFALSE 72568
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72518: LD_ADDR_VAR 0 10
72522: PUSH
72523: LD_VAR 0 10
72527: PUSH
72528: LD_VAR 0 8
72532: PUSH
72533: LD_INT 1
72535: ARRAY
72536: PUSH
72537: LD_VAR 0 2
72541: PLUS
72542: PUSH
72543: LD_VAR 0 8
72547: PUSH
72548: LD_INT 2
72550: ARRAY
72551: PUSH
72552: LD_VAR 0 3
72556: PLUS
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: EMPTY
72563: LIST
72564: ADD
72565: ST_TO_ADDR
72566: GO 72515
72568: POP
72569: POP
// result = temp_list2 ;
72570: LD_ADDR_VAR 0 7
72574: PUSH
72575: LD_VAR 0 10
72579: ST_TO_ADDR
// end ;
72580: LD_VAR 0 7
72584: RET
// export function EnemyInRange ( unit , dist ) ; begin
72585: LD_INT 0
72587: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72588: LD_ADDR_VAR 0 3
72592: PUSH
72593: LD_VAR 0 1
72597: PPUSH
72598: CALL_OW 255
72602: PPUSH
72603: LD_VAR 0 1
72607: PPUSH
72608: CALL_OW 250
72612: PPUSH
72613: LD_VAR 0 1
72617: PPUSH
72618: CALL_OW 251
72622: PPUSH
72623: LD_VAR 0 2
72627: PPUSH
72628: CALL 45987 0 4
72632: PUSH
72633: LD_INT 4
72635: ARRAY
72636: ST_TO_ADDR
// end ;
72637: LD_VAR 0 3
72641: RET
// export function PlayerSeeMe ( unit ) ; begin
72642: LD_INT 0
72644: PPUSH
// result := See ( your_side , unit ) ;
72645: LD_ADDR_VAR 0 2
72649: PUSH
72650: LD_OWVAR 2
72654: PPUSH
72655: LD_VAR 0 1
72659: PPUSH
72660: CALL_OW 292
72664: ST_TO_ADDR
// end ;
72665: LD_VAR 0 2
72669: RET
// export function ReverseDir ( unit ) ; begin
72670: LD_INT 0
72672: PPUSH
// if not unit then
72673: LD_VAR 0 1
72677: NOT
72678: IFFALSE 72682
// exit ;
72680: GO 72705
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72682: LD_ADDR_VAR 0 2
72686: PUSH
72687: LD_VAR 0 1
72691: PPUSH
72692: CALL_OW 254
72696: PUSH
72697: LD_INT 3
72699: PLUS
72700: PUSH
72701: LD_INT 6
72703: MOD
72704: ST_TO_ADDR
// end ;
72705: LD_VAR 0 2
72709: RET
// export function ReverseArray ( array ) ; var i ; begin
72710: LD_INT 0
72712: PPUSH
72713: PPUSH
// if not array then
72714: LD_VAR 0 1
72718: NOT
72719: IFFALSE 72723
// exit ;
72721: GO 72778
// result := [ ] ;
72723: LD_ADDR_VAR 0 2
72727: PUSH
72728: EMPTY
72729: ST_TO_ADDR
// for i := array downto 1 do
72730: LD_ADDR_VAR 0 3
72734: PUSH
72735: DOUBLE
72736: LD_VAR 0 1
72740: INC
72741: ST_TO_ADDR
72742: LD_INT 1
72744: PUSH
72745: FOR_DOWNTO
72746: IFFALSE 72776
// result := Join ( result , array [ i ] ) ;
72748: LD_ADDR_VAR 0 2
72752: PUSH
72753: LD_VAR 0 2
72757: PPUSH
72758: LD_VAR 0 1
72762: PUSH
72763: LD_VAR 0 3
72767: ARRAY
72768: PPUSH
72769: CALL 77421 0 2
72773: ST_TO_ADDR
72774: GO 72745
72776: POP
72777: POP
// end ;
72778: LD_VAR 0 2
72782: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72783: LD_INT 0
72785: PPUSH
72786: PPUSH
72787: PPUSH
72788: PPUSH
72789: PPUSH
72790: PPUSH
// if not unit or not hexes then
72791: LD_VAR 0 1
72795: NOT
72796: PUSH
72797: LD_VAR 0 2
72801: NOT
72802: OR
72803: IFFALSE 72807
// exit ;
72805: GO 72930
// dist := 9999 ;
72807: LD_ADDR_VAR 0 5
72811: PUSH
72812: LD_INT 9999
72814: ST_TO_ADDR
// for i = 1 to hexes do
72815: LD_ADDR_VAR 0 4
72819: PUSH
72820: DOUBLE
72821: LD_INT 1
72823: DEC
72824: ST_TO_ADDR
72825: LD_VAR 0 2
72829: PUSH
72830: FOR_TO
72831: IFFALSE 72918
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72833: LD_ADDR_VAR 0 6
72837: PUSH
72838: LD_VAR 0 1
72842: PPUSH
72843: LD_VAR 0 2
72847: PUSH
72848: LD_VAR 0 4
72852: ARRAY
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PPUSH
72858: LD_VAR 0 2
72862: PUSH
72863: LD_VAR 0 4
72867: ARRAY
72868: PUSH
72869: LD_INT 2
72871: ARRAY
72872: PPUSH
72873: CALL_OW 297
72877: ST_TO_ADDR
// if tdist < dist then
72878: LD_VAR 0 6
72882: PUSH
72883: LD_VAR 0 5
72887: LESS
72888: IFFALSE 72916
// begin hex := hexes [ i ] ;
72890: LD_ADDR_VAR 0 8
72894: PUSH
72895: LD_VAR 0 2
72899: PUSH
72900: LD_VAR 0 4
72904: ARRAY
72905: ST_TO_ADDR
// dist := tdist ;
72906: LD_ADDR_VAR 0 5
72910: PUSH
72911: LD_VAR 0 6
72915: ST_TO_ADDR
// end ; end ;
72916: GO 72830
72918: POP
72919: POP
// result := hex ;
72920: LD_ADDR_VAR 0 3
72924: PUSH
72925: LD_VAR 0 8
72929: ST_TO_ADDR
// end ;
72930: LD_VAR 0 3
72934: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72935: LD_INT 0
72937: PPUSH
72938: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72939: LD_VAR 0 1
72943: NOT
72944: PUSH
72945: LD_VAR 0 1
72949: PUSH
72950: LD_INT 21
72952: PUSH
72953: LD_INT 2
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 23
72962: PUSH
72963: LD_INT 2
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PPUSH
72974: CALL_OW 69
72978: IN
72979: NOT
72980: OR
72981: IFFALSE 72985
// exit ;
72983: GO 73032
// for i = 1 to 3 do
72985: LD_ADDR_VAR 0 3
72989: PUSH
72990: DOUBLE
72991: LD_INT 1
72993: DEC
72994: ST_TO_ADDR
72995: LD_INT 3
72997: PUSH
72998: FOR_TO
72999: IFFALSE 73030
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73001: LD_VAR 0 1
73005: PPUSH
73006: CALL_OW 250
73010: PPUSH
73011: LD_VAR 0 1
73015: PPUSH
73016: CALL_OW 251
73020: PPUSH
73021: LD_INT 1
73023: PPUSH
73024: CALL_OW 453
73028: GO 72998
73030: POP
73031: POP
// end ;
73032: LD_VAR 0 2
73036: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73037: LD_INT 0
73039: PPUSH
73040: PPUSH
73041: PPUSH
73042: PPUSH
73043: PPUSH
73044: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73045: LD_VAR 0 1
73049: NOT
73050: PUSH
73051: LD_VAR 0 2
73055: NOT
73056: OR
73057: PUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: CALL_OW 314
73067: OR
73068: IFFALSE 73072
// exit ;
73070: GO 73539
// if GetLives ( i ) < 250 then
73072: LD_VAR 0 4
73076: PPUSH
73077: CALL_OW 256
73081: PUSH
73082: LD_INT 250
73084: LESS
73085: IFFALSE 73098
// begin ComAutodestruct ( i ) ;
73087: LD_VAR 0 4
73091: PPUSH
73092: CALL 72935 0 1
// exit ;
73096: GO 73539
// end ; x := GetX ( enemy_unit ) ;
73098: LD_ADDR_VAR 0 7
73102: PUSH
73103: LD_VAR 0 2
73107: PPUSH
73108: CALL_OW 250
73112: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73113: LD_ADDR_VAR 0 8
73117: PUSH
73118: LD_VAR 0 2
73122: PPUSH
73123: CALL_OW 251
73127: ST_TO_ADDR
// if not x or not y then
73128: LD_VAR 0 7
73132: NOT
73133: PUSH
73134: LD_VAR 0 8
73138: NOT
73139: OR
73140: IFFALSE 73144
// exit ;
73142: GO 73539
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73144: LD_ADDR_VAR 0 6
73148: PUSH
73149: LD_VAR 0 7
73153: PPUSH
73154: LD_INT 0
73156: PPUSH
73157: LD_INT 4
73159: PPUSH
73160: CALL_OW 272
73164: PUSH
73165: LD_VAR 0 8
73169: PPUSH
73170: LD_INT 0
73172: PPUSH
73173: LD_INT 4
73175: PPUSH
73176: CALL_OW 273
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_VAR 0 7
73189: PPUSH
73190: LD_INT 1
73192: PPUSH
73193: LD_INT 4
73195: PPUSH
73196: CALL_OW 272
73200: PUSH
73201: LD_VAR 0 8
73205: PPUSH
73206: LD_INT 1
73208: PPUSH
73209: LD_INT 4
73211: PPUSH
73212: CALL_OW 273
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_VAR 0 7
73225: PPUSH
73226: LD_INT 2
73228: PPUSH
73229: LD_INT 4
73231: PPUSH
73232: CALL_OW 272
73236: PUSH
73237: LD_VAR 0 8
73241: PPUSH
73242: LD_INT 2
73244: PPUSH
73245: LD_INT 4
73247: PPUSH
73248: CALL_OW 273
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_VAR 0 7
73261: PPUSH
73262: LD_INT 3
73264: PPUSH
73265: LD_INT 4
73267: PPUSH
73268: CALL_OW 272
73272: PUSH
73273: LD_VAR 0 8
73277: PPUSH
73278: LD_INT 3
73280: PPUSH
73281: LD_INT 4
73283: PPUSH
73284: CALL_OW 273
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_VAR 0 7
73297: PPUSH
73298: LD_INT 4
73300: PPUSH
73301: LD_INT 4
73303: PPUSH
73304: CALL_OW 272
73308: PUSH
73309: LD_VAR 0 8
73313: PPUSH
73314: LD_INT 4
73316: PPUSH
73317: LD_INT 4
73319: PPUSH
73320: CALL_OW 273
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_VAR 0 7
73333: PPUSH
73334: LD_INT 5
73336: PPUSH
73337: LD_INT 4
73339: PPUSH
73340: CALL_OW 272
73344: PUSH
73345: LD_VAR 0 8
73349: PPUSH
73350: LD_INT 5
73352: PPUSH
73353: LD_INT 4
73355: PPUSH
73356: CALL_OW 273
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: ST_TO_ADDR
// for i = tmp downto 1 do
73373: LD_ADDR_VAR 0 4
73377: PUSH
73378: DOUBLE
73379: LD_VAR 0 6
73383: INC
73384: ST_TO_ADDR
73385: LD_INT 1
73387: PUSH
73388: FOR_DOWNTO
73389: IFFALSE 73490
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73391: LD_VAR 0 6
73395: PUSH
73396: LD_VAR 0 4
73400: ARRAY
73401: PUSH
73402: LD_INT 1
73404: ARRAY
73405: PPUSH
73406: LD_VAR 0 6
73410: PUSH
73411: LD_VAR 0 4
73415: ARRAY
73416: PUSH
73417: LD_INT 2
73419: ARRAY
73420: PPUSH
73421: CALL_OW 488
73425: NOT
73426: PUSH
73427: LD_VAR 0 6
73431: PUSH
73432: LD_VAR 0 4
73436: ARRAY
73437: PUSH
73438: LD_INT 1
73440: ARRAY
73441: PPUSH
73442: LD_VAR 0 6
73446: PUSH
73447: LD_VAR 0 4
73451: ARRAY
73452: PUSH
73453: LD_INT 2
73455: ARRAY
73456: PPUSH
73457: CALL_OW 428
73461: PUSH
73462: LD_INT 0
73464: NONEQUAL
73465: OR
73466: IFFALSE 73488
// tmp := Delete ( tmp , i ) ;
73468: LD_ADDR_VAR 0 6
73472: PUSH
73473: LD_VAR 0 6
73477: PPUSH
73478: LD_VAR 0 4
73482: PPUSH
73483: CALL_OW 3
73487: ST_TO_ADDR
73488: GO 73388
73490: POP
73491: POP
// j := GetClosestHex ( unit , tmp ) ;
73492: LD_ADDR_VAR 0 5
73496: PUSH
73497: LD_VAR 0 1
73501: PPUSH
73502: LD_VAR 0 6
73506: PPUSH
73507: CALL 72783 0 2
73511: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73512: LD_VAR 0 1
73516: PPUSH
73517: LD_VAR 0 5
73521: PUSH
73522: LD_INT 1
73524: ARRAY
73525: PPUSH
73526: LD_VAR 0 5
73530: PUSH
73531: LD_INT 2
73533: ARRAY
73534: PPUSH
73535: CALL_OW 111
// end ;
73539: LD_VAR 0 3
73543: RET
// export function PrepareApemanSoldier ( ) ; begin
73544: LD_INT 0
73546: PPUSH
// uc_nation := 0 ;
73547: LD_ADDR_OWVAR 21
73551: PUSH
73552: LD_INT 0
73554: ST_TO_ADDR
// hc_sex := sex_male ;
73555: LD_ADDR_OWVAR 27
73559: PUSH
73560: LD_INT 1
73562: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73563: LD_ADDR_OWVAR 28
73567: PUSH
73568: LD_INT 15
73570: ST_TO_ADDR
// hc_gallery :=  ;
73571: LD_ADDR_OWVAR 33
73575: PUSH
73576: LD_STRING 
73578: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73579: LD_ADDR_OWVAR 31
73583: PUSH
73584: LD_INT 0
73586: PPUSH
73587: LD_INT 3
73589: PPUSH
73590: CALL_OW 12
73594: PUSH
73595: LD_INT 0
73597: PPUSH
73598: LD_INT 3
73600: PPUSH
73601: CALL_OW 12
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: ST_TO_ADDR
// end ;
73618: LD_VAR 0 1
73622: RET
// export function PrepareApemanEngineer ( ) ; begin
73623: LD_INT 0
73625: PPUSH
// uc_nation := 0 ;
73626: LD_ADDR_OWVAR 21
73630: PUSH
73631: LD_INT 0
73633: ST_TO_ADDR
// hc_sex := sex_male ;
73634: LD_ADDR_OWVAR 27
73638: PUSH
73639: LD_INT 1
73641: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73642: LD_ADDR_OWVAR 28
73646: PUSH
73647: LD_INT 16
73649: ST_TO_ADDR
// hc_gallery :=  ;
73650: LD_ADDR_OWVAR 33
73654: PUSH
73655: LD_STRING 
73657: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73658: LD_ADDR_OWVAR 31
73662: PUSH
73663: LD_INT 0
73665: PPUSH
73666: LD_INT 3
73668: PPUSH
73669: CALL_OW 12
73673: PUSH
73674: LD_INT 0
73676: PPUSH
73677: LD_INT 3
73679: PPUSH
73680: CALL_OW 12
73684: PUSH
73685: LD_INT 0
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: ST_TO_ADDR
// end ;
73697: LD_VAR 0 1
73701: RET
// export function PrepareApeman ( agressivity ) ; begin
73702: LD_INT 0
73704: PPUSH
// uc_side := 0 ;
73705: LD_ADDR_OWVAR 20
73709: PUSH
73710: LD_INT 0
73712: ST_TO_ADDR
// uc_nation := 0 ;
73713: LD_ADDR_OWVAR 21
73717: PUSH
73718: LD_INT 0
73720: ST_TO_ADDR
// hc_sex := sex_male ;
73721: LD_ADDR_OWVAR 27
73725: PUSH
73726: LD_INT 1
73728: ST_TO_ADDR
// hc_class := class_apeman ;
73729: LD_ADDR_OWVAR 28
73733: PUSH
73734: LD_INT 12
73736: ST_TO_ADDR
// hc_gallery :=  ;
73737: LD_ADDR_OWVAR 33
73741: PUSH
73742: LD_STRING 
73744: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73745: LD_ADDR_OWVAR 35
73749: PUSH
73750: LD_VAR 0 1
73754: NEG
73755: PPUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: CALL_OW 12
73765: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73766: LD_ADDR_OWVAR 31
73770: PUSH
73771: LD_INT 0
73773: PPUSH
73774: LD_INT 3
73776: PPUSH
73777: CALL_OW 12
73781: PUSH
73782: LD_INT 0
73784: PPUSH
73785: LD_INT 3
73787: PPUSH
73788: CALL_OW 12
73792: PUSH
73793: LD_INT 0
73795: PUSH
73796: LD_INT 0
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: ST_TO_ADDR
// end ;
73805: LD_VAR 0 2
73809: RET
// export function PrepareTiger ( agressivity ) ; begin
73810: LD_INT 0
73812: PPUSH
// uc_side := 0 ;
73813: LD_ADDR_OWVAR 20
73817: PUSH
73818: LD_INT 0
73820: ST_TO_ADDR
// uc_nation := 0 ;
73821: LD_ADDR_OWVAR 21
73825: PUSH
73826: LD_INT 0
73828: ST_TO_ADDR
// hc_class := class_tiger ;
73829: LD_ADDR_OWVAR 28
73833: PUSH
73834: LD_INT 14
73836: ST_TO_ADDR
// hc_gallery :=  ;
73837: LD_ADDR_OWVAR 33
73841: PUSH
73842: LD_STRING 
73844: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73845: LD_ADDR_OWVAR 35
73849: PUSH
73850: LD_VAR 0 1
73854: NEG
73855: PPUSH
73856: LD_VAR 0 1
73860: PPUSH
73861: CALL_OW 12
73865: ST_TO_ADDR
// end ;
73866: LD_VAR 0 2
73870: RET
// export function PrepareEnchidna ( ) ; begin
73871: LD_INT 0
73873: PPUSH
// uc_side := 0 ;
73874: LD_ADDR_OWVAR 20
73878: PUSH
73879: LD_INT 0
73881: ST_TO_ADDR
// uc_nation := 0 ;
73882: LD_ADDR_OWVAR 21
73886: PUSH
73887: LD_INT 0
73889: ST_TO_ADDR
// hc_class := class_baggie ;
73890: LD_ADDR_OWVAR 28
73894: PUSH
73895: LD_INT 13
73897: ST_TO_ADDR
// hc_gallery :=  ;
73898: LD_ADDR_OWVAR 33
73902: PUSH
73903: LD_STRING 
73905: ST_TO_ADDR
// end ;
73906: LD_VAR 0 1
73910: RET
// export function PrepareFrog ( ) ; begin
73911: LD_INT 0
73913: PPUSH
// uc_side := 0 ;
73914: LD_ADDR_OWVAR 20
73918: PUSH
73919: LD_INT 0
73921: ST_TO_ADDR
// uc_nation := 0 ;
73922: LD_ADDR_OWVAR 21
73926: PUSH
73927: LD_INT 0
73929: ST_TO_ADDR
// hc_class := class_frog ;
73930: LD_ADDR_OWVAR 28
73934: PUSH
73935: LD_INT 19
73937: ST_TO_ADDR
// hc_gallery :=  ;
73938: LD_ADDR_OWVAR 33
73942: PUSH
73943: LD_STRING 
73945: ST_TO_ADDR
// end ;
73946: LD_VAR 0 1
73950: RET
// export function PrepareFish ( ) ; begin
73951: LD_INT 0
73953: PPUSH
// uc_side := 0 ;
73954: LD_ADDR_OWVAR 20
73958: PUSH
73959: LD_INT 0
73961: ST_TO_ADDR
// uc_nation := 0 ;
73962: LD_ADDR_OWVAR 21
73966: PUSH
73967: LD_INT 0
73969: ST_TO_ADDR
// hc_class := class_fish ;
73970: LD_ADDR_OWVAR 28
73974: PUSH
73975: LD_INT 20
73977: ST_TO_ADDR
// hc_gallery :=  ;
73978: LD_ADDR_OWVAR 33
73982: PUSH
73983: LD_STRING 
73985: ST_TO_ADDR
// end ;
73986: LD_VAR 0 1
73990: RET
// export function PrepareBird ( ) ; begin
73991: LD_INT 0
73993: PPUSH
// uc_side := 0 ;
73994: LD_ADDR_OWVAR 20
73998: PUSH
73999: LD_INT 0
74001: ST_TO_ADDR
// uc_nation := 0 ;
74002: LD_ADDR_OWVAR 21
74006: PUSH
74007: LD_INT 0
74009: ST_TO_ADDR
// hc_class := class_phororhacos ;
74010: LD_ADDR_OWVAR 28
74014: PUSH
74015: LD_INT 18
74017: ST_TO_ADDR
// hc_gallery :=  ;
74018: LD_ADDR_OWVAR 33
74022: PUSH
74023: LD_STRING 
74025: ST_TO_ADDR
// end ;
74026: LD_VAR 0 1
74030: RET
// export function PrepareHorse ( ) ; begin
74031: LD_INT 0
74033: PPUSH
// uc_side := 0 ;
74034: LD_ADDR_OWVAR 20
74038: PUSH
74039: LD_INT 0
74041: ST_TO_ADDR
// uc_nation := 0 ;
74042: LD_ADDR_OWVAR 21
74046: PUSH
74047: LD_INT 0
74049: ST_TO_ADDR
// hc_class := class_horse ;
74050: LD_ADDR_OWVAR 28
74054: PUSH
74055: LD_INT 21
74057: ST_TO_ADDR
// hc_gallery :=  ;
74058: LD_ADDR_OWVAR 33
74062: PUSH
74063: LD_STRING 
74065: ST_TO_ADDR
// end ;
74066: LD_VAR 0 1
74070: RET
// export function PrepareMastodont ( ) ; begin
74071: LD_INT 0
74073: PPUSH
// uc_side := 0 ;
74074: LD_ADDR_OWVAR 20
74078: PUSH
74079: LD_INT 0
74081: ST_TO_ADDR
// uc_nation := 0 ;
74082: LD_ADDR_OWVAR 21
74086: PUSH
74087: LD_INT 0
74089: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74090: LD_ADDR_OWVAR 37
74094: PUSH
74095: LD_INT 31
74097: ST_TO_ADDR
// vc_control := control_rider ;
74098: LD_ADDR_OWVAR 38
74102: PUSH
74103: LD_INT 4
74105: ST_TO_ADDR
// end ;
74106: LD_VAR 0 1
74110: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74111: LD_INT 0
74113: PPUSH
74114: PPUSH
74115: PPUSH
// uc_side = 0 ;
74116: LD_ADDR_OWVAR 20
74120: PUSH
74121: LD_INT 0
74123: ST_TO_ADDR
// uc_nation = 0 ;
74124: LD_ADDR_OWVAR 21
74128: PUSH
74129: LD_INT 0
74131: ST_TO_ADDR
// InitHc_All ( ) ;
74132: CALL_OW 584
// InitVc ;
74136: CALL_OW 20
// if mastodonts then
74140: LD_VAR 0 6
74144: IFFALSE 74211
// for i = 1 to mastodonts do
74146: LD_ADDR_VAR 0 11
74150: PUSH
74151: DOUBLE
74152: LD_INT 1
74154: DEC
74155: ST_TO_ADDR
74156: LD_VAR 0 6
74160: PUSH
74161: FOR_TO
74162: IFFALSE 74209
// begin vc_chassis := 31 ;
74164: LD_ADDR_OWVAR 37
74168: PUSH
74169: LD_INT 31
74171: ST_TO_ADDR
// vc_control := control_rider ;
74172: LD_ADDR_OWVAR 38
74176: PUSH
74177: LD_INT 4
74179: ST_TO_ADDR
// animal := CreateVehicle ;
74180: LD_ADDR_VAR 0 12
74184: PUSH
74185: CALL_OW 45
74189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74190: LD_VAR 0 12
74194: PPUSH
74195: LD_VAR 0 8
74199: PPUSH
74200: LD_INT 0
74202: PPUSH
74203: CALL 76339 0 3
// end ;
74207: GO 74161
74209: POP
74210: POP
// if horses then
74211: LD_VAR 0 5
74215: IFFALSE 74282
// for i = 1 to horses do
74217: LD_ADDR_VAR 0 11
74221: PUSH
74222: DOUBLE
74223: LD_INT 1
74225: DEC
74226: ST_TO_ADDR
74227: LD_VAR 0 5
74231: PUSH
74232: FOR_TO
74233: IFFALSE 74280
// begin hc_class := 21 ;
74235: LD_ADDR_OWVAR 28
74239: PUSH
74240: LD_INT 21
74242: ST_TO_ADDR
// hc_gallery :=  ;
74243: LD_ADDR_OWVAR 33
74247: PUSH
74248: LD_STRING 
74250: ST_TO_ADDR
// animal := CreateHuman ;
74251: LD_ADDR_VAR 0 12
74255: PUSH
74256: CALL_OW 44
74260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74261: LD_VAR 0 12
74265: PPUSH
74266: LD_VAR 0 8
74270: PPUSH
74271: LD_INT 0
74273: PPUSH
74274: CALL 76339 0 3
// end ;
74278: GO 74232
74280: POP
74281: POP
// if birds then
74282: LD_VAR 0 1
74286: IFFALSE 74353
// for i = 1 to birds do
74288: LD_ADDR_VAR 0 11
74292: PUSH
74293: DOUBLE
74294: LD_INT 1
74296: DEC
74297: ST_TO_ADDR
74298: LD_VAR 0 1
74302: PUSH
74303: FOR_TO
74304: IFFALSE 74351
// begin hc_class = 18 ;
74306: LD_ADDR_OWVAR 28
74310: PUSH
74311: LD_INT 18
74313: ST_TO_ADDR
// hc_gallery =  ;
74314: LD_ADDR_OWVAR 33
74318: PUSH
74319: LD_STRING 
74321: ST_TO_ADDR
// animal := CreateHuman ;
74322: LD_ADDR_VAR 0 12
74326: PUSH
74327: CALL_OW 44
74331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74332: LD_VAR 0 12
74336: PPUSH
74337: LD_VAR 0 8
74341: PPUSH
74342: LD_INT 0
74344: PPUSH
74345: CALL 76339 0 3
// end ;
74349: GO 74303
74351: POP
74352: POP
// if tigers then
74353: LD_VAR 0 2
74357: IFFALSE 74441
// for i = 1 to tigers do
74359: LD_ADDR_VAR 0 11
74363: PUSH
74364: DOUBLE
74365: LD_INT 1
74367: DEC
74368: ST_TO_ADDR
74369: LD_VAR 0 2
74373: PUSH
74374: FOR_TO
74375: IFFALSE 74439
// begin hc_class = class_tiger ;
74377: LD_ADDR_OWVAR 28
74381: PUSH
74382: LD_INT 14
74384: ST_TO_ADDR
// hc_gallery =  ;
74385: LD_ADDR_OWVAR 33
74389: PUSH
74390: LD_STRING 
74392: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74393: LD_ADDR_OWVAR 35
74397: PUSH
74398: LD_INT 7
74400: NEG
74401: PPUSH
74402: LD_INT 7
74404: PPUSH
74405: CALL_OW 12
74409: ST_TO_ADDR
// animal := CreateHuman ;
74410: LD_ADDR_VAR 0 12
74414: PUSH
74415: CALL_OW 44
74419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74420: LD_VAR 0 12
74424: PPUSH
74425: LD_VAR 0 8
74429: PPUSH
74430: LD_INT 0
74432: PPUSH
74433: CALL 76339 0 3
// end ;
74437: GO 74374
74439: POP
74440: POP
// if apemans then
74441: LD_VAR 0 3
74445: IFFALSE 74568
// for i = 1 to apemans do
74447: LD_ADDR_VAR 0 11
74451: PUSH
74452: DOUBLE
74453: LD_INT 1
74455: DEC
74456: ST_TO_ADDR
74457: LD_VAR 0 3
74461: PUSH
74462: FOR_TO
74463: IFFALSE 74566
// begin hc_class = class_apeman ;
74465: LD_ADDR_OWVAR 28
74469: PUSH
74470: LD_INT 12
74472: ST_TO_ADDR
// hc_gallery =  ;
74473: LD_ADDR_OWVAR 33
74477: PUSH
74478: LD_STRING 
74480: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74481: LD_ADDR_OWVAR 35
74485: PUSH
74486: LD_INT 2
74488: NEG
74489: PPUSH
74490: LD_INT 2
74492: PPUSH
74493: CALL_OW 12
74497: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74498: LD_ADDR_OWVAR 31
74502: PUSH
74503: LD_INT 1
74505: PPUSH
74506: LD_INT 3
74508: PPUSH
74509: CALL_OW 12
74513: PUSH
74514: LD_INT 1
74516: PPUSH
74517: LD_INT 3
74519: PPUSH
74520: CALL_OW 12
74524: PUSH
74525: LD_INT 0
74527: PUSH
74528: LD_INT 0
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: ST_TO_ADDR
// animal := CreateHuman ;
74537: LD_ADDR_VAR 0 12
74541: PUSH
74542: CALL_OW 44
74546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74547: LD_VAR 0 12
74551: PPUSH
74552: LD_VAR 0 8
74556: PPUSH
74557: LD_INT 0
74559: PPUSH
74560: CALL 76339 0 3
// end ;
74564: GO 74462
74566: POP
74567: POP
// if enchidnas then
74568: LD_VAR 0 4
74572: IFFALSE 74639
// for i = 1 to enchidnas do
74574: LD_ADDR_VAR 0 11
74578: PUSH
74579: DOUBLE
74580: LD_INT 1
74582: DEC
74583: ST_TO_ADDR
74584: LD_VAR 0 4
74588: PUSH
74589: FOR_TO
74590: IFFALSE 74637
// begin hc_class = 13 ;
74592: LD_ADDR_OWVAR 28
74596: PUSH
74597: LD_INT 13
74599: ST_TO_ADDR
// hc_gallery =  ;
74600: LD_ADDR_OWVAR 33
74604: PUSH
74605: LD_STRING 
74607: ST_TO_ADDR
// animal := CreateHuman ;
74608: LD_ADDR_VAR 0 12
74612: PUSH
74613: CALL_OW 44
74617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74618: LD_VAR 0 12
74622: PPUSH
74623: LD_VAR 0 8
74627: PPUSH
74628: LD_INT 0
74630: PPUSH
74631: CALL 76339 0 3
// end ;
74635: GO 74589
74637: POP
74638: POP
// if fishes then
74639: LD_VAR 0 7
74643: IFFALSE 74710
// for i = 1 to fishes do
74645: LD_ADDR_VAR 0 11
74649: PUSH
74650: DOUBLE
74651: LD_INT 1
74653: DEC
74654: ST_TO_ADDR
74655: LD_VAR 0 7
74659: PUSH
74660: FOR_TO
74661: IFFALSE 74708
// begin hc_class = 20 ;
74663: LD_ADDR_OWVAR 28
74667: PUSH
74668: LD_INT 20
74670: ST_TO_ADDR
// hc_gallery =  ;
74671: LD_ADDR_OWVAR 33
74675: PUSH
74676: LD_STRING 
74678: ST_TO_ADDR
// animal := CreateHuman ;
74679: LD_ADDR_VAR 0 12
74683: PUSH
74684: CALL_OW 44
74688: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74689: LD_VAR 0 12
74693: PPUSH
74694: LD_VAR 0 9
74698: PPUSH
74699: LD_INT 0
74701: PPUSH
74702: CALL 76339 0 3
// end ;
74706: GO 74660
74708: POP
74709: POP
// end ;
74710: LD_VAR 0 10
74714: RET
// export function WantHeal ( sci , unit ) ; begin
74715: LD_INT 0
74717: PPUSH
// if GetTaskList ( sci ) > 0 then
74718: LD_VAR 0 1
74722: PPUSH
74723: CALL_OW 437
74727: PUSH
74728: LD_INT 0
74730: GREATER
74731: IFFALSE 74801
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74733: LD_VAR 0 1
74737: PPUSH
74738: CALL_OW 437
74742: PUSH
74743: LD_INT 1
74745: ARRAY
74746: PUSH
74747: LD_INT 1
74749: ARRAY
74750: PUSH
74751: LD_STRING l
74753: EQUAL
74754: PUSH
74755: LD_VAR 0 1
74759: PPUSH
74760: CALL_OW 437
74764: PUSH
74765: LD_INT 1
74767: ARRAY
74768: PUSH
74769: LD_INT 4
74771: ARRAY
74772: PUSH
74773: LD_VAR 0 2
74777: EQUAL
74778: AND
74779: IFFALSE 74791
// result := true else
74781: LD_ADDR_VAR 0 3
74785: PUSH
74786: LD_INT 1
74788: ST_TO_ADDR
74789: GO 74799
// result := false ;
74791: LD_ADDR_VAR 0 3
74795: PUSH
74796: LD_INT 0
74798: ST_TO_ADDR
// end else
74799: GO 74809
// result := false ;
74801: LD_ADDR_VAR 0 3
74805: PUSH
74806: LD_INT 0
74808: ST_TO_ADDR
// end ;
74809: LD_VAR 0 3
74813: RET
// export function HealTarget ( sci ) ; begin
74814: LD_INT 0
74816: PPUSH
// if not sci then
74817: LD_VAR 0 1
74821: NOT
74822: IFFALSE 74826
// exit ;
74824: GO 74891
// result := 0 ;
74826: LD_ADDR_VAR 0 2
74830: PUSH
74831: LD_INT 0
74833: ST_TO_ADDR
// if GetTaskList ( sci ) then
74834: LD_VAR 0 1
74838: PPUSH
74839: CALL_OW 437
74843: IFFALSE 74891
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74845: LD_VAR 0 1
74849: PPUSH
74850: CALL_OW 437
74854: PUSH
74855: LD_INT 1
74857: ARRAY
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PUSH
74863: LD_STRING l
74865: EQUAL
74866: IFFALSE 74891
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74868: LD_ADDR_VAR 0 2
74872: PUSH
74873: LD_VAR 0 1
74877: PPUSH
74878: CALL_OW 437
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PUSH
74887: LD_INT 4
74889: ARRAY
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 2
74895: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74896: LD_INT 0
74898: PPUSH
74899: PPUSH
74900: PPUSH
74901: PPUSH
// if not base_units then
74902: LD_VAR 0 1
74906: NOT
74907: IFFALSE 74911
// exit ;
74909: GO 74998
// result := false ;
74911: LD_ADDR_VAR 0 2
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74919: LD_ADDR_VAR 0 5
74923: PUSH
74924: LD_VAR 0 1
74928: PPUSH
74929: LD_INT 21
74931: PUSH
74932: LD_INT 3
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PPUSH
74939: CALL_OW 72
74943: ST_TO_ADDR
// if not tmp then
74944: LD_VAR 0 5
74948: NOT
74949: IFFALSE 74953
// exit ;
74951: GO 74998
// for i in tmp do
74953: LD_ADDR_VAR 0 3
74957: PUSH
74958: LD_VAR 0 5
74962: PUSH
74963: FOR_IN
74964: IFFALSE 74996
// begin result := EnemyInRange ( i , 22 ) ;
74966: LD_ADDR_VAR 0 2
74970: PUSH
74971: LD_VAR 0 3
74975: PPUSH
74976: LD_INT 22
74978: PPUSH
74979: CALL 72585 0 2
74983: ST_TO_ADDR
// if result then
74984: LD_VAR 0 2
74988: IFFALSE 74994
// exit ;
74990: POP
74991: POP
74992: GO 74998
// end ;
74994: GO 74963
74996: POP
74997: POP
// end ;
74998: LD_VAR 0 2
75002: RET
// export function FilterByTag ( units , tag ) ; begin
75003: LD_INT 0
75005: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75006: LD_ADDR_VAR 0 3
75010: PUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: LD_INT 120
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PPUSH
75028: CALL_OW 72
75032: ST_TO_ADDR
// end ;
75033: LD_VAR 0 3
75037: RET
// export function IsDriver ( un ) ; begin
75038: LD_INT 0
75040: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75041: LD_ADDR_VAR 0 2
75045: PUSH
75046: LD_VAR 0 1
75050: PUSH
75051: LD_INT 55
75053: PUSH
75054: EMPTY
75055: LIST
75056: PPUSH
75057: CALL_OW 69
75061: IN
75062: ST_TO_ADDR
// end ;
75063: LD_VAR 0 2
75067: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75068: LD_INT 0
75070: PPUSH
75071: PPUSH
// list := [ ] ;
75072: LD_ADDR_VAR 0 5
75076: PUSH
75077: EMPTY
75078: ST_TO_ADDR
// case d of 0 :
75079: LD_VAR 0 3
75083: PUSH
75084: LD_INT 0
75086: DOUBLE
75087: EQUAL
75088: IFTRUE 75092
75090: GO 75225
75092: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75093: LD_ADDR_VAR 0 5
75097: PUSH
75098: LD_VAR 0 1
75102: PUSH
75103: LD_INT 4
75105: MINUS
75106: PUSH
75107: LD_VAR 0 2
75111: PUSH
75112: LD_INT 4
75114: MINUS
75115: PUSH
75116: LD_INT 2
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: PUSH
75124: LD_VAR 0 1
75128: PUSH
75129: LD_INT 3
75131: MINUS
75132: PUSH
75133: LD_VAR 0 2
75137: PUSH
75138: LD_INT 1
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: PUSH
75146: LD_VAR 0 1
75150: PUSH
75151: LD_INT 4
75153: PLUS
75154: PUSH
75155: LD_VAR 0 2
75159: PUSH
75160: LD_INT 4
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: PUSH
75168: LD_VAR 0 1
75172: PUSH
75173: LD_INT 3
75175: PLUS
75176: PUSH
75177: LD_VAR 0 2
75181: PUSH
75182: LD_INT 3
75184: PLUS
75185: PUSH
75186: LD_INT 5
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: LIST
75193: PUSH
75194: LD_VAR 0 1
75198: PUSH
75199: LD_VAR 0 2
75203: PUSH
75204: LD_INT 4
75206: PLUS
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: LIST
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: ST_TO_ADDR
// end ; 1 :
75223: GO 75923
75225: LD_INT 1
75227: DOUBLE
75228: EQUAL
75229: IFTRUE 75233
75231: GO 75366
75233: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75234: LD_ADDR_VAR 0 5
75238: PUSH
75239: LD_VAR 0 1
75243: PUSH
75244: LD_VAR 0 2
75248: PUSH
75249: LD_INT 4
75251: MINUS
75252: PUSH
75253: LD_INT 3
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: PUSH
75261: LD_VAR 0 1
75265: PUSH
75266: LD_INT 3
75268: MINUS
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 3
75277: MINUS
75278: PUSH
75279: LD_INT 2
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: PUSH
75287: LD_VAR 0 1
75291: PUSH
75292: LD_INT 4
75294: MINUS
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: LD_INT 1
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: LIST
75308: PUSH
75309: LD_VAR 0 1
75313: PUSH
75314: LD_VAR 0 2
75318: PUSH
75319: LD_INT 3
75321: PLUS
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: LD_VAR 0 1
75335: PUSH
75336: LD_INT 4
75338: PLUS
75339: PUSH
75340: LD_VAR 0 2
75344: PUSH
75345: LD_INT 4
75347: PLUS
75348: PUSH
75349: LD_INT 5
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: LIST
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: ST_TO_ADDR
// end ; 2 :
75364: GO 75923
75366: LD_INT 2
75368: DOUBLE
75369: EQUAL
75370: IFTRUE 75374
75372: GO 75503
75374: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75375: LD_ADDR_VAR 0 5
75379: PUSH
75380: LD_VAR 0 1
75384: PUSH
75385: LD_VAR 0 2
75389: PUSH
75390: LD_INT 3
75392: MINUS
75393: PUSH
75394: LD_INT 3
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: LIST
75401: PUSH
75402: LD_VAR 0 1
75406: PUSH
75407: LD_INT 4
75409: PLUS
75410: PUSH
75411: LD_VAR 0 2
75415: PUSH
75416: LD_INT 4
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: LIST
75423: PUSH
75424: LD_VAR 0 1
75428: PUSH
75429: LD_VAR 0 2
75433: PUSH
75434: LD_INT 4
75436: PLUS
75437: PUSH
75438: LD_INT 0
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: LIST
75445: PUSH
75446: LD_VAR 0 1
75450: PUSH
75451: LD_INT 3
75453: MINUS
75454: PUSH
75455: LD_VAR 0 2
75459: PUSH
75460: LD_INT 1
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: LIST
75467: PUSH
75468: LD_VAR 0 1
75472: PUSH
75473: LD_INT 4
75475: MINUS
75476: PUSH
75477: LD_VAR 0 2
75481: PUSH
75482: LD_INT 4
75484: MINUS
75485: PUSH
75486: LD_INT 2
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: LIST
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: ST_TO_ADDR
// end ; 3 :
75501: GO 75923
75503: LD_INT 3
75505: DOUBLE
75506: EQUAL
75507: IFTRUE 75511
75509: GO 75644
75511: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75512: LD_ADDR_VAR 0 5
75516: PUSH
75517: LD_VAR 0 1
75521: PUSH
75522: LD_INT 3
75524: PLUS
75525: PUSH
75526: LD_VAR 0 2
75530: PUSH
75531: LD_INT 4
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: LIST
75538: PUSH
75539: LD_VAR 0 1
75543: PUSH
75544: LD_INT 4
75546: PLUS
75547: PUSH
75548: LD_VAR 0 2
75552: PUSH
75553: LD_INT 4
75555: PLUS
75556: PUSH
75557: LD_INT 5
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: LIST
75564: PUSH
75565: LD_VAR 0 1
75569: PUSH
75570: LD_INT 4
75572: MINUS
75573: PUSH
75574: LD_VAR 0 2
75578: PUSH
75579: LD_INT 1
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: PUSH
75587: LD_VAR 0 1
75591: PUSH
75592: LD_VAR 0 2
75596: PUSH
75597: LD_INT 4
75599: MINUS
75600: PUSH
75601: LD_INT 3
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: LIST
75608: PUSH
75609: LD_VAR 0 1
75613: PUSH
75614: LD_INT 3
75616: MINUS
75617: PUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_INT 3
75625: MINUS
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: ST_TO_ADDR
// end ; 4 :
75642: GO 75923
75644: LD_INT 4
75646: DOUBLE
75647: EQUAL
75648: IFTRUE 75652
75650: GO 75785
75652: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75653: LD_ADDR_VAR 0 5
75657: PUSH
75658: LD_VAR 0 1
75662: PUSH
75663: LD_VAR 0 2
75667: PUSH
75668: LD_INT 4
75670: PLUS
75671: PUSH
75672: LD_INT 0
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: LIST
75679: PUSH
75680: LD_VAR 0 1
75684: PUSH
75685: LD_INT 3
75687: PLUS
75688: PUSH
75689: LD_VAR 0 2
75693: PUSH
75694: LD_INT 3
75696: PLUS
75697: PUSH
75698: LD_INT 5
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: LIST
75705: PUSH
75706: LD_VAR 0 1
75710: PUSH
75711: LD_INT 4
75713: PLUS
75714: PUSH
75715: LD_VAR 0 2
75719: PUSH
75720: LD_INT 4
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: PUSH
75728: LD_VAR 0 1
75732: PUSH
75733: LD_VAR 0 2
75737: PUSH
75738: LD_INT 3
75740: MINUS
75741: PUSH
75742: LD_INT 3
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: LIST
75749: PUSH
75750: LD_VAR 0 1
75754: PUSH
75755: LD_INT 4
75757: MINUS
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_INT 4
75766: MINUS
75767: PUSH
75768: LD_INT 2
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: ST_TO_ADDR
// end ; 5 :
75783: GO 75923
75785: LD_INT 5
75787: DOUBLE
75788: EQUAL
75789: IFTRUE 75793
75791: GO 75922
75793: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75794: LD_ADDR_VAR 0 5
75798: PUSH
75799: LD_VAR 0 1
75803: PUSH
75804: LD_INT 4
75806: MINUS
75807: PUSH
75808: LD_VAR 0 2
75812: PUSH
75813: LD_INT 1
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: PUSH
75821: LD_VAR 0 1
75825: PUSH
75826: LD_VAR 0 2
75830: PUSH
75831: LD_INT 4
75833: MINUS
75834: PUSH
75835: LD_INT 3
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: LIST
75842: PUSH
75843: LD_VAR 0 1
75847: PUSH
75848: LD_INT 4
75850: PLUS
75851: PUSH
75852: LD_VAR 0 2
75856: PUSH
75857: LD_INT 4
75859: PLUS
75860: PUSH
75861: LD_INT 5
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: PUSH
75869: LD_VAR 0 1
75873: PUSH
75874: LD_INT 3
75876: PLUS
75877: PUSH
75878: LD_VAR 0 2
75882: PUSH
75883: LD_INT 4
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: PUSH
75891: LD_VAR 0 1
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_INT 3
75903: PLUS
75904: PUSH
75905: LD_INT 0
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: ST_TO_ADDR
// end ; end ;
75920: GO 75923
75922: POP
// result := list ;
75923: LD_ADDR_VAR 0 4
75927: PUSH
75928: LD_VAR 0 5
75932: ST_TO_ADDR
// end ;
75933: LD_VAR 0 4
75937: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75938: LD_INT 0
75940: PPUSH
75941: PPUSH
75942: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75943: LD_VAR 0 1
75947: NOT
75948: PUSH
75949: LD_VAR 0 2
75953: PUSH
75954: LD_INT 1
75956: PUSH
75957: LD_INT 2
75959: PUSH
75960: LD_INT 3
75962: PUSH
75963: LD_INT 4
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: IN
75972: NOT
75973: OR
75974: IFFALSE 75978
// exit ;
75976: GO 76061
// tmp := [ ] ;
75978: LD_ADDR_VAR 0 5
75982: PUSH
75983: EMPTY
75984: ST_TO_ADDR
// for i in units do
75985: LD_ADDR_VAR 0 4
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: FOR_IN
75996: IFFALSE 76030
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75998: LD_ADDR_VAR 0 5
76002: PUSH
76003: LD_VAR 0 5
76007: PPUSH
76008: LD_VAR 0 4
76012: PPUSH
76013: LD_VAR 0 2
76017: PPUSH
76018: CALL_OW 259
76022: PPUSH
76023: CALL 77421 0 2
76027: ST_TO_ADDR
76028: GO 75995
76030: POP
76031: POP
// if not tmp then
76032: LD_VAR 0 5
76036: NOT
76037: IFFALSE 76041
// exit ;
76039: GO 76061
// result := SortListByListDesc ( units , tmp ) ;
76041: LD_ADDR_VAR 0 3
76045: PUSH
76046: LD_VAR 0 1
76050: PPUSH
76051: LD_VAR 0 5
76055: PPUSH
76056: CALL_OW 77
76060: ST_TO_ADDR
// end ;
76061: LD_VAR 0 3
76065: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76066: LD_INT 0
76068: PPUSH
76069: PPUSH
76070: PPUSH
// result := false ;
76071: LD_ADDR_VAR 0 3
76075: PUSH
76076: LD_INT 0
76078: ST_TO_ADDR
// if not building then
76079: LD_VAR 0 2
76083: NOT
76084: IFFALSE 76088
// exit ;
76086: GO 76226
// x := GetX ( building ) ;
76088: LD_ADDR_VAR 0 4
76092: PUSH
76093: LD_VAR 0 2
76097: PPUSH
76098: CALL_OW 250
76102: ST_TO_ADDR
// y := GetY ( building ) ;
76103: LD_ADDR_VAR 0 5
76107: PUSH
76108: LD_VAR 0 2
76112: PPUSH
76113: CALL_OW 251
76117: ST_TO_ADDR
// if not x or not y then
76118: LD_VAR 0 4
76122: NOT
76123: PUSH
76124: LD_VAR 0 5
76128: NOT
76129: OR
76130: IFFALSE 76134
// exit ;
76132: GO 76226
// if GetTaskList ( unit ) then
76134: LD_VAR 0 1
76138: PPUSH
76139: CALL_OW 437
76143: IFFALSE 76226
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76145: LD_STRING e
76147: PUSH
76148: LD_VAR 0 1
76152: PPUSH
76153: CALL_OW 437
76157: PUSH
76158: LD_INT 1
76160: ARRAY
76161: PUSH
76162: LD_INT 1
76164: ARRAY
76165: EQUAL
76166: PUSH
76167: LD_VAR 0 4
76171: PUSH
76172: LD_VAR 0 1
76176: PPUSH
76177: CALL_OW 437
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_INT 2
76188: ARRAY
76189: EQUAL
76190: AND
76191: PUSH
76192: LD_VAR 0 5
76196: PUSH
76197: LD_VAR 0 1
76201: PPUSH
76202: CALL_OW 437
76206: PUSH
76207: LD_INT 1
76209: ARRAY
76210: PUSH
76211: LD_INT 3
76213: ARRAY
76214: EQUAL
76215: AND
76216: IFFALSE 76226
// result := true end ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_INT 1
76225: ST_TO_ADDR
// end ;
76226: LD_VAR 0 3
76230: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76231: LD_INT 0
76233: PPUSH
// result := false ;
76234: LD_ADDR_VAR 0 4
76238: PUSH
76239: LD_INT 0
76241: ST_TO_ADDR
// if GetTaskList ( unit ) then
76242: LD_VAR 0 1
76246: PPUSH
76247: CALL_OW 437
76251: IFFALSE 76334
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76253: LD_STRING M
76255: PUSH
76256: LD_VAR 0 1
76260: PPUSH
76261: CALL_OW 437
76265: PUSH
76266: LD_INT 1
76268: ARRAY
76269: PUSH
76270: LD_INT 1
76272: ARRAY
76273: EQUAL
76274: PUSH
76275: LD_VAR 0 2
76279: PUSH
76280: LD_VAR 0 1
76284: PPUSH
76285: CALL_OW 437
76289: PUSH
76290: LD_INT 1
76292: ARRAY
76293: PUSH
76294: LD_INT 2
76296: ARRAY
76297: EQUAL
76298: AND
76299: PUSH
76300: LD_VAR 0 3
76304: PUSH
76305: LD_VAR 0 1
76309: PPUSH
76310: CALL_OW 437
76314: PUSH
76315: LD_INT 1
76317: ARRAY
76318: PUSH
76319: LD_INT 3
76321: ARRAY
76322: EQUAL
76323: AND
76324: IFFALSE 76334
// result := true ;
76326: LD_ADDR_VAR 0 4
76330: PUSH
76331: LD_INT 1
76333: ST_TO_ADDR
// end ; end ;
76334: LD_VAR 0 4
76338: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76339: LD_INT 0
76341: PPUSH
76342: PPUSH
76343: PPUSH
76344: PPUSH
// if not unit or not area then
76345: LD_VAR 0 1
76349: NOT
76350: PUSH
76351: LD_VAR 0 2
76355: NOT
76356: OR
76357: IFFALSE 76361
// exit ;
76359: GO 76524
// tmp := AreaToList ( area , i ) ;
76361: LD_ADDR_VAR 0 6
76365: PUSH
76366: LD_VAR 0 2
76370: PPUSH
76371: LD_VAR 0 5
76375: PPUSH
76376: CALL_OW 517
76380: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76381: LD_ADDR_VAR 0 5
76385: PUSH
76386: DOUBLE
76387: LD_INT 1
76389: DEC
76390: ST_TO_ADDR
76391: LD_VAR 0 6
76395: PUSH
76396: LD_INT 1
76398: ARRAY
76399: PUSH
76400: FOR_TO
76401: IFFALSE 76522
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76403: LD_ADDR_VAR 0 7
76407: PUSH
76408: LD_VAR 0 6
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: LD_VAR 0 5
76421: ARRAY
76422: PUSH
76423: LD_VAR 0 6
76427: PUSH
76428: LD_INT 2
76430: ARRAY
76431: PUSH
76432: LD_VAR 0 5
76436: ARRAY
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76442: LD_INT 92
76444: PUSH
76445: LD_VAR 0 7
76449: PUSH
76450: LD_INT 1
76452: ARRAY
76453: PUSH
76454: LD_VAR 0 7
76458: PUSH
76459: LD_INT 2
76461: ARRAY
76462: PUSH
76463: LD_INT 3
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: PPUSH
76472: CALL_OW 69
76476: PUSH
76477: LD_INT 0
76479: EQUAL
76480: IFFALSE 76520
// begin PlaceUnitArea ( unit , area , mode ) ;
76482: LD_VAR 0 1
76486: PPUSH
76487: LD_VAR 0 2
76491: PPUSH
76492: LD_VAR 0 3
76496: PPUSH
76497: CALL_OW 49
// result := IsPlaced ( unit ) ;
76501: LD_ADDR_VAR 0 4
76505: PUSH
76506: LD_VAR 0 1
76510: PPUSH
76511: CALL_OW 305
76515: ST_TO_ADDR
// exit ;
76516: POP
76517: POP
76518: GO 76524
// end ; end ;
76520: GO 76400
76522: POP
76523: POP
// end ;
76524: LD_VAR 0 4
76528: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76529: LD_INT 0
76531: PPUSH
76532: PPUSH
76533: PPUSH
// if not side or side > 8 then
76534: LD_VAR 0 1
76538: NOT
76539: PUSH
76540: LD_VAR 0 1
76544: PUSH
76545: LD_INT 8
76547: GREATER
76548: OR
76549: IFFALSE 76553
// exit ;
76551: GO 76740
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76553: LD_ADDR_VAR 0 4
76557: PUSH
76558: LD_INT 22
76560: PUSH
76561: LD_VAR 0 1
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 21
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PPUSH
76584: CALL_OW 69
76588: ST_TO_ADDR
// if not tmp then
76589: LD_VAR 0 4
76593: NOT
76594: IFFALSE 76598
// exit ;
76596: GO 76740
// enable_addtolog := true ;
76598: LD_ADDR_OWVAR 81
76602: PUSH
76603: LD_INT 1
76605: ST_TO_ADDR
// AddToLog ( [ ) ;
76606: LD_STRING [
76608: PPUSH
76609: CALL_OW 561
// for i in tmp do
76613: LD_ADDR_VAR 0 3
76617: PUSH
76618: LD_VAR 0 4
76622: PUSH
76623: FOR_IN
76624: IFFALSE 76731
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76626: LD_STRING [
76628: PUSH
76629: LD_VAR 0 3
76633: PPUSH
76634: CALL_OW 266
76638: STR
76639: PUSH
76640: LD_STRING , 
76642: STR
76643: PUSH
76644: LD_VAR 0 3
76648: PPUSH
76649: CALL_OW 250
76653: STR
76654: PUSH
76655: LD_STRING , 
76657: STR
76658: PUSH
76659: LD_VAR 0 3
76663: PPUSH
76664: CALL_OW 251
76668: STR
76669: PUSH
76670: LD_STRING , 
76672: STR
76673: PUSH
76674: LD_VAR 0 3
76678: PPUSH
76679: CALL_OW 254
76683: STR
76684: PUSH
76685: LD_STRING , 
76687: STR
76688: PUSH
76689: LD_VAR 0 3
76693: PPUSH
76694: LD_INT 1
76696: PPUSH
76697: CALL_OW 268
76701: STR
76702: PUSH
76703: LD_STRING , 
76705: STR
76706: PUSH
76707: LD_VAR 0 3
76711: PPUSH
76712: LD_INT 2
76714: PPUSH
76715: CALL_OW 268
76719: STR
76720: PUSH
76721: LD_STRING ],
76723: STR
76724: PPUSH
76725: CALL_OW 561
// end ;
76729: GO 76623
76731: POP
76732: POP
// AddToLog ( ]; ) ;
76733: LD_STRING ];
76735: PPUSH
76736: CALL_OW 561
// end ;
76740: LD_VAR 0 2
76744: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76745: LD_INT 0
76747: PPUSH
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
// if not area or not rate or not max then
76752: LD_VAR 0 1
76756: NOT
76757: PUSH
76758: LD_VAR 0 2
76762: NOT
76763: OR
76764: PUSH
76765: LD_VAR 0 4
76769: NOT
76770: OR
76771: IFFALSE 76775
// exit ;
76773: GO 76964
// while 1 do
76775: LD_INT 1
76777: IFFALSE 76964
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76779: LD_ADDR_VAR 0 9
76783: PUSH
76784: LD_VAR 0 1
76788: PPUSH
76789: LD_INT 1
76791: PPUSH
76792: CALL_OW 287
76796: PUSH
76797: LD_INT 10
76799: MUL
76800: ST_TO_ADDR
// r := rate / 10 ;
76801: LD_ADDR_VAR 0 7
76805: PUSH
76806: LD_VAR 0 2
76810: PUSH
76811: LD_INT 10
76813: DIVREAL
76814: ST_TO_ADDR
// time := 1 1$00 ;
76815: LD_ADDR_VAR 0 8
76819: PUSH
76820: LD_INT 2100
76822: ST_TO_ADDR
// if amount < min then
76823: LD_VAR 0 9
76827: PUSH
76828: LD_VAR 0 3
76832: LESS
76833: IFFALSE 76851
// r := r * 2 else
76835: LD_ADDR_VAR 0 7
76839: PUSH
76840: LD_VAR 0 7
76844: PUSH
76845: LD_INT 2
76847: MUL
76848: ST_TO_ADDR
76849: GO 76877
// if amount > max then
76851: LD_VAR 0 9
76855: PUSH
76856: LD_VAR 0 4
76860: GREATER
76861: IFFALSE 76877
// r := r / 2 ;
76863: LD_ADDR_VAR 0 7
76867: PUSH
76868: LD_VAR 0 7
76872: PUSH
76873: LD_INT 2
76875: DIVREAL
76876: ST_TO_ADDR
// time := time / r ;
76877: LD_ADDR_VAR 0 8
76881: PUSH
76882: LD_VAR 0 8
76886: PUSH
76887: LD_VAR 0 7
76891: DIVREAL
76892: ST_TO_ADDR
// if time < 0 then
76893: LD_VAR 0 8
76897: PUSH
76898: LD_INT 0
76900: LESS
76901: IFFALSE 76918
// time := time * - 1 ;
76903: LD_ADDR_VAR 0 8
76907: PUSH
76908: LD_VAR 0 8
76912: PUSH
76913: LD_INT 1
76915: NEG
76916: MUL
76917: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76918: LD_VAR 0 8
76922: PUSH
76923: LD_INT 35
76925: PPUSH
76926: LD_INT 875
76928: PPUSH
76929: CALL_OW 12
76933: PLUS
76934: PPUSH
76935: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76939: LD_INT 1
76941: PPUSH
76942: LD_INT 5
76944: PPUSH
76945: CALL_OW 12
76949: PPUSH
76950: LD_VAR 0 1
76954: PPUSH
76955: LD_INT 1
76957: PPUSH
76958: CALL_OW 55
// end ;
76962: GO 76775
// end ;
76964: LD_VAR 0 5
76968: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76969: LD_INT 0
76971: PPUSH
76972: PPUSH
76973: PPUSH
76974: PPUSH
76975: PPUSH
76976: PPUSH
76977: PPUSH
76978: PPUSH
// if not turrets or not factories then
76979: LD_VAR 0 1
76983: NOT
76984: PUSH
76985: LD_VAR 0 2
76989: NOT
76990: OR
76991: IFFALSE 76995
// exit ;
76993: GO 77302
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76995: LD_ADDR_VAR 0 10
76999: PUSH
77000: LD_INT 5
77002: PUSH
77003: LD_INT 6
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PUSH
77010: LD_INT 2
77012: PUSH
77013: LD_INT 4
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: PUSH
77020: LD_INT 3
77022: PUSH
77023: LD_INT 5
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 24
77037: PUSH
77038: LD_INT 25
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: PUSH
77045: LD_INT 23
77047: PUSH
77048: LD_INT 27
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 42
77061: PUSH
77062: LD_INT 43
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 44
77071: PUSH
77072: LD_INT 46
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 45
77081: PUSH
77082: LD_INT 47
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: LIST
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: LIST
77098: ST_TO_ADDR
// result := [ ] ;
77099: LD_ADDR_VAR 0 3
77103: PUSH
77104: EMPTY
77105: ST_TO_ADDR
// for i in turrets do
77106: LD_ADDR_VAR 0 4
77110: PUSH
77111: LD_VAR 0 1
77115: PUSH
77116: FOR_IN
77117: IFFALSE 77300
// begin nat := GetNation ( i ) ;
77119: LD_ADDR_VAR 0 7
77123: PUSH
77124: LD_VAR 0 4
77128: PPUSH
77129: CALL_OW 248
77133: ST_TO_ADDR
// weapon := 0 ;
77134: LD_ADDR_VAR 0 8
77138: PUSH
77139: LD_INT 0
77141: ST_TO_ADDR
// if not nat then
77142: LD_VAR 0 7
77146: NOT
77147: IFFALSE 77151
// continue ;
77149: GO 77116
// for j in list [ nat ] do
77151: LD_ADDR_VAR 0 5
77155: PUSH
77156: LD_VAR 0 10
77160: PUSH
77161: LD_VAR 0 7
77165: ARRAY
77166: PUSH
77167: FOR_IN
77168: IFFALSE 77209
// if GetBWeapon ( i ) = j [ 1 ] then
77170: LD_VAR 0 4
77174: PPUSH
77175: CALL_OW 269
77179: PUSH
77180: LD_VAR 0 5
77184: PUSH
77185: LD_INT 1
77187: ARRAY
77188: EQUAL
77189: IFFALSE 77207
// begin weapon := j [ 2 ] ;
77191: LD_ADDR_VAR 0 8
77195: PUSH
77196: LD_VAR 0 5
77200: PUSH
77201: LD_INT 2
77203: ARRAY
77204: ST_TO_ADDR
// break ;
77205: GO 77209
// end ;
77207: GO 77167
77209: POP
77210: POP
// if not weapon then
77211: LD_VAR 0 8
77215: NOT
77216: IFFALSE 77220
// continue ;
77218: GO 77116
// for k in factories do
77220: LD_ADDR_VAR 0 6
77224: PUSH
77225: LD_VAR 0 2
77229: PUSH
77230: FOR_IN
77231: IFFALSE 77296
// begin weapons := AvailableWeaponList ( k ) ;
77233: LD_ADDR_VAR 0 9
77237: PUSH
77238: LD_VAR 0 6
77242: PPUSH
77243: CALL_OW 478
77247: ST_TO_ADDR
// if not weapons then
77248: LD_VAR 0 9
77252: NOT
77253: IFFALSE 77257
// continue ;
77255: GO 77230
// if weapon in weapons then
77257: LD_VAR 0 8
77261: PUSH
77262: LD_VAR 0 9
77266: IN
77267: IFFALSE 77294
// begin result := [ i , weapon ] ;
77269: LD_ADDR_VAR 0 3
77273: PUSH
77274: LD_VAR 0 4
77278: PUSH
77279: LD_VAR 0 8
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: ST_TO_ADDR
// exit ;
77288: POP
77289: POP
77290: POP
77291: POP
77292: GO 77302
// end ; end ;
77294: GO 77230
77296: POP
77297: POP
// end ;
77298: GO 77116
77300: POP
77301: POP
// end ;
77302: LD_VAR 0 3
77306: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77307: LD_INT 0
77309: PPUSH
// if not side or side > 8 then
77310: LD_VAR 0 3
77314: NOT
77315: PUSH
77316: LD_VAR 0 3
77320: PUSH
77321: LD_INT 8
77323: GREATER
77324: OR
77325: IFFALSE 77329
// exit ;
77327: GO 77388
// if not range then
77329: LD_VAR 0 4
77333: NOT
77334: IFFALSE 77345
// range := - 12 ;
77336: LD_ADDR_VAR 0 4
77340: PUSH
77341: LD_INT 12
77343: NEG
77344: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77345: LD_VAR 0 1
77349: PPUSH
77350: LD_VAR 0 2
77354: PPUSH
77355: LD_VAR 0 3
77359: PPUSH
77360: LD_VAR 0 4
77364: PPUSH
77365: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77369: LD_VAR 0 1
77373: PPUSH
77374: LD_VAR 0 2
77378: PPUSH
77379: LD_VAR 0 3
77383: PPUSH
77384: CALL_OW 331
// end ;
77388: LD_VAR 0 5
77392: RET
// export function Video ( mode ) ; begin
77393: LD_INT 0
77395: PPUSH
// ingame_video = mode ;
77396: LD_ADDR_OWVAR 52
77400: PUSH
77401: LD_VAR 0 1
77405: ST_TO_ADDR
// interface_hidden = mode ;
77406: LD_ADDR_OWVAR 54
77410: PUSH
77411: LD_VAR 0 1
77415: ST_TO_ADDR
// end ;
77416: LD_VAR 0 2
77420: RET
// export function Join ( array , element ) ; begin
77421: LD_INT 0
77423: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77424: LD_ADDR_VAR 0 3
77428: PUSH
77429: LD_VAR 0 1
77433: PPUSH
77434: LD_VAR 0 1
77438: PUSH
77439: LD_INT 1
77441: PLUS
77442: PPUSH
77443: LD_VAR 0 2
77447: PPUSH
77448: CALL_OW 1
77452: ST_TO_ADDR
// end ;
77453: LD_VAR 0 3
77457: RET
// export function JoinUnion ( array , element ) ; begin
77458: LD_INT 0
77460: PPUSH
// result := array union element ;
77461: LD_ADDR_VAR 0 3
77465: PUSH
77466: LD_VAR 0 1
77470: PUSH
77471: LD_VAR 0 2
77475: UNION
77476: ST_TO_ADDR
// end ;
77477: LD_VAR 0 3
77481: RET
// export function GetBehemoths ( side ) ; begin
77482: LD_INT 0
77484: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77485: LD_ADDR_VAR 0 2
77489: PUSH
77490: LD_INT 22
77492: PUSH
77493: LD_VAR 0 1
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: LD_INT 31
77504: PUSH
77505: LD_INT 25
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PPUSH
77516: CALL_OW 69
77520: ST_TO_ADDR
// end ;
77521: LD_VAR 0 2
77525: RET
// export function Shuffle ( array ) ; var i , index ; begin
77526: LD_INT 0
77528: PPUSH
77529: PPUSH
77530: PPUSH
// result := [ ] ;
77531: LD_ADDR_VAR 0 2
77535: PUSH
77536: EMPTY
77537: ST_TO_ADDR
// if not array then
77538: LD_VAR 0 1
77542: NOT
77543: IFFALSE 77547
// exit ;
77545: GO 77646
// Randomize ;
77547: CALL_OW 10
// for i = array downto 1 do
77551: LD_ADDR_VAR 0 3
77555: PUSH
77556: DOUBLE
77557: LD_VAR 0 1
77561: INC
77562: ST_TO_ADDR
77563: LD_INT 1
77565: PUSH
77566: FOR_DOWNTO
77567: IFFALSE 77644
// begin index := rand ( 1 , array ) ;
77569: LD_ADDR_VAR 0 4
77573: PUSH
77574: LD_INT 1
77576: PPUSH
77577: LD_VAR 0 1
77581: PPUSH
77582: CALL_OW 12
77586: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77587: LD_ADDR_VAR 0 2
77591: PUSH
77592: LD_VAR 0 2
77596: PPUSH
77597: LD_VAR 0 2
77601: PUSH
77602: LD_INT 1
77604: PLUS
77605: PPUSH
77606: LD_VAR 0 1
77610: PUSH
77611: LD_VAR 0 4
77615: ARRAY
77616: PPUSH
77617: CALL_OW 2
77621: ST_TO_ADDR
// array := Delete ( array , index ) ;
77622: LD_ADDR_VAR 0 1
77626: PUSH
77627: LD_VAR 0 1
77631: PPUSH
77632: LD_VAR 0 4
77636: PPUSH
77637: CALL_OW 3
77641: ST_TO_ADDR
// end ;
77642: GO 77566
77644: POP
77645: POP
// end ;
77646: LD_VAR 0 2
77650: RET
// export function GetBaseMaterials ( base ) ; begin
77651: LD_INT 0
77653: PPUSH
// result := [ 0 , 0 , 0 ] ;
77654: LD_ADDR_VAR 0 2
77658: PUSH
77659: LD_INT 0
77661: PUSH
77662: LD_INT 0
77664: PUSH
77665: LD_INT 0
77667: PUSH
77668: EMPTY
77669: LIST
77670: LIST
77671: LIST
77672: ST_TO_ADDR
// if not base then
77673: LD_VAR 0 1
77677: NOT
77678: IFFALSE 77682
// exit ;
77680: GO 77731
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77682: LD_ADDR_VAR 0 2
77686: PUSH
77687: LD_VAR 0 1
77691: PPUSH
77692: LD_INT 1
77694: PPUSH
77695: CALL_OW 275
77699: PUSH
77700: LD_VAR 0 1
77704: PPUSH
77705: LD_INT 2
77707: PPUSH
77708: CALL_OW 275
77712: PUSH
77713: LD_VAR 0 1
77717: PPUSH
77718: LD_INT 3
77720: PPUSH
77721: CALL_OW 275
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: LIST
77730: ST_TO_ADDR
// end ;
77731: LD_VAR 0 2
77735: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77736: LD_INT 0
77738: PPUSH
77739: PPUSH
// result := array ;
77740: LD_ADDR_VAR 0 3
77744: PUSH
77745: LD_VAR 0 1
77749: ST_TO_ADDR
// if size >= result then
77750: LD_VAR 0 2
77754: PUSH
77755: LD_VAR 0 3
77759: GREATEREQUAL
77760: IFFALSE 77764
// exit ;
77762: GO 77814
// if size then
77764: LD_VAR 0 2
77768: IFFALSE 77814
// for i := array downto size do
77770: LD_ADDR_VAR 0 4
77774: PUSH
77775: DOUBLE
77776: LD_VAR 0 1
77780: INC
77781: ST_TO_ADDR
77782: LD_VAR 0 2
77786: PUSH
77787: FOR_DOWNTO
77788: IFFALSE 77812
// result := Delete ( result , result ) ;
77790: LD_ADDR_VAR 0 3
77794: PUSH
77795: LD_VAR 0 3
77799: PPUSH
77800: LD_VAR 0 3
77804: PPUSH
77805: CALL_OW 3
77809: ST_TO_ADDR
77810: GO 77787
77812: POP
77813: POP
// end ;
77814: LD_VAR 0 3
77818: RET
// export function ComExit ( unit ) ; var tmp ; begin
77819: LD_INT 0
77821: PPUSH
77822: PPUSH
// if not IsInUnit ( unit ) then
77823: LD_VAR 0 1
77827: PPUSH
77828: CALL_OW 310
77832: NOT
77833: IFFALSE 77837
// exit ;
77835: GO 77897
// tmp := IsInUnit ( unit ) ;
77837: LD_ADDR_VAR 0 3
77841: PUSH
77842: LD_VAR 0 1
77846: PPUSH
77847: CALL_OW 310
77851: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77852: LD_VAR 0 3
77856: PPUSH
77857: CALL_OW 247
77861: PUSH
77862: LD_INT 2
77864: EQUAL
77865: IFFALSE 77878
// ComExitVehicle ( unit ) else
77867: LD_VAR 0 1
77871: PPUSH
77872: CALL_OW 121
77876: GO 77887
// ComExitBuilding ( unit ) ;
77878: LD_VAR 0 1
77882: PPUSH
77883: CALL_OW 122
// result := tmp ;
77887: LD_ADDR_VAR 0 2
77891: PUSH
77892: LD_VAR 0 3
77896: ST_TO_ADDR
// end ;
77897: LD_VAR 0 2
77901: RET
// export function ComExitAll ( units ) ; var i ; begin
77902: LD_INT 0
77904: PPUSH
77905: PPUSH
// if not units then
77906: LD_VAR 0 1
77910: NOT
77911: IFFALSE 77915
// exit ;
77913: GO 77941
// for i in units do
77915: LD_ADDR_VAR 0 3
77919: PUSH
77920: LD_VAR 0 1
77924: PUSH
77925: FOR_IN
77926: IFFALSE 77939
// ComExit ( i ) ;
77928: LD_VAR 0 3
77932: PPUSH
77933: CALL 77819 0 1
77937: GO 77925
77939: POP
77940: POP
// end ;
77941: LD_VAR 0 2
77945: RET
// export function ResetHc ; begin
77946: LD_INT 0
77948: PPUSH
// InitHc ;
77949: CALL_OW 19
// hc_importance := 0 ;
77953: LD_ADDR_OWVAR 32
77957: PUSH
77958: LD_INT 0
77960: ST_TO_ADDR
// end ;
77961: LD_VAR 0 1
77965: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77966: LD_INT 0
77968: PPUSH
77969: PPUSH
77970: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77971: LD_ADDR_VAR 0 6
77975: PUSH
77976: LD_VAR 0 1
77980: PUSH
77981: LD_VAR 0 3
77985: PLUS
77986: PUSH
77987: LD_INT 2
77989: DIV
77990: ST_TO_ADDR
// if _x < 0 then
77991: LD_VAR 0 6
77995: PUSH
77996: LD_INT 0
77998: LESS
77999: IFFALSE 78016
// _x := _x * - 1 ;
78001: LD_ADDR_VAR 0 6
78005: PUSH
78006: LD_VAR 0 6
78010: PUSH
78011: LD_INT 1
78013: NEG
78014: MUL
78015: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78016: LD_ADDR_VAR 0 7
78020: PUSH
78021: LD_VAR 0 2
78025: PUSH
78026: LD_VAR 0 4
78030: PLUS
78031: PUSH
78032: LD_INT 2
78034: DIV
78035: ST_TO_ADDR
// if _y < 0 then
78036: LD_VAR 0 7
78040: PUSH
78041: LD_INT 0
78043: LESS
78044: IFFALSE 78061
// _y := _y * - 1 ;
78046: LD_ADDR_VAR 0 7
78050: PUSH
78051: LD_VAR 0 7
78055: PUSH
78056: LD_INT 1
78058: NEG
78059: MUL
78060: ST_TO_ADDR
// result := [ _x , _y ] ;
78061: LD_ADDR_VAR 0 5
78065: PUSH
78066: LD_VAR 0 6
78070: PUSH
78071: LD_VAR 0 7
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: ST_TO_ADDR
// end ;
78080: LD_VAR 0 5
78084: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78085: LD_INT 0
78087: PPUSH
78088: PPUSH
78089: PPUSH
78090: PPUSH
// task := GetTaskList ( unit ) ;
78091: LD_ADDR_VAR 0 7
78095: PUSH
78096: LD_VAR 0 1
78100: PPUSH
78101: CALL_OW 437
78105: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78106: LD_VAR 0 7
78110: NOT
78111: PUSH
78112: LD_VAR 0 1
78116: PPUSH
78117: LD_VAR 0 2
78121: PPUSH
78122: CALL_OW 308
78126: NOT
78127: AND
78128: IFFALSE 78132
// exit ;
78130: GO 78250
// if IsInArea ( unit , area ) then
78132: LD_VAR 0 1
78136: PPUSH
78137: LD_VAR 0 2
78141: PPUSH
78142: CALL_OW 308
78146: IFFALSE 78164
// begin ComMoveToArea ( unit , goAway ) ;
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_VAR 0 3
78157: PPUSH
78158: CALL_OW 113
// exit ;
78162: GO 78250
// end ; if task [ 1 ] [ 1 ] <> M then
78164: LD_VAR 0 7
78168: PUSH
78169: LD_INT 1
78171: ARRAY
78172: PUSH
78173: LD_INT 1
78175: ARRAY
78176: PUSH
78177: LD_STRING M
78179: NONEQUAL
78180: IFFALSE 78184
// exit ;
78182: GO 78250
// x := task [ 1 ] [ 2 ] ;
78184: LD_ADDR_VAR 0 5
78188: PUSH
78189: LD_VAR 0 7
78193: PUSH
78194: LD_INT 1
78196: ARRAY
78197: PUSH
78198: LD_INT 2
78200: ARRAY
78201: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78202: LD_ADDR_VAR 0 6
78206: PUSH
78207: LD_VAR 0 7
78211: PUSH
78212: LD_INT 1
78214: ARRAY
78215: PUSH
78216: LD_INT 3
78218: ARRAY
78219: ST_TO_ADDR
// if InArea ( x , y , area ) then
78220: LD_VAR 0 5
78224: PPUSH
78225: LD_VAR 0 6
78229: PPUSH
78230: LD_VAR 0 2
78234: PPUSH
78235: CALL_OW 309
78239: IFFALSE 78250
// ComStop ( unit ) ;
78241: LD_VAR 0 1
78245: PPUSH
78246: CALL_OW 141
// end ;
78250: LD_VAR 0 4
78254: RET
// export function Abs ( value ) ; begin
78255: LD_INT 0
78257: PPUSH
// result := value ;
78258: LD_ADDR_VAR 0 2
78262: PUSH
78263: LD_VAR 0 1
78267: ST_TO_ADDR
// if value < 0 then
78268: LD_VAR 0 1
78272: PUSH
78273: LD_INT 0
78275: LESS
78276: IFFALSE 78293
// result := value * - 1 ;
78278: LD_ADDR_VAR 0 2
78282: PUSH
78283: LD_VAR 0 1
78287: PUSH
78288: LD_INT 1
78290: NEG
78291: MUL
78292: ST_TO_ADDR
// end ;
78293: LD_VAR 0 2
78297: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78298: LD_INT 0
78300: PPUSH
78301: PPUSH
78302: PPUSH
78303: PPUSH
78304: PPUSH
78305: PPUSH
78306: PPUSH
78307: PPUSH
// if not unit or not building then
78308: LD_VAR 0 1
78312: NOT
78313: PUSH
78314: LD_VAR 0 2
78318: NOT
78319: OR
78320: IFFALSE 78324
// exit ;
78322: GO 78550
// x := GetX ( building ) ;
78324: LD_ADDR_VAR 0 4
78328: PUSH
78329: LD_VAR 0 2
78333: PPUSH
78334: CALL_OW 250
78338: ST_TO_ADDR
// y := GetY ( building ) ;
78339: LD_ADDR_VAR 0 6
78343: PUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: CALL_OW 251
78353: ST_TO_ADDR
// d := GetDir ( building ) ;
78354: LD_ADDR_VAR 0 8
78358: PUSH
78359: LD_VAR 0 2
78363: PPUSH
78364: CALL_OW 254
78368: ST_TO_ADDR
// r := 4 ;
78369: LD_ADDR_VAR 0 9
78373: PUSH
78374: LD_INT 4
78376: ST_TO_ADDR
// for i := 1 to 5 do
78377: LD_ADDR_VAR 0 10
78381: PUSH
78382: DOUBLE
78383: LD_INT 1
78385: DEC
78386: ST_TO_ADDR
78387: LD_INT 5
78389: PUSH
78390: FOR_TO
78391: IFFALSE 78548
// begin _x := ShiftX ( x , d , r + i ) ;
78393: LD_ADDR_VAR 0 5
78397: PUSH
78398: LD_VAR 0 4
78402: PPUSH
78403: LD_VAR 0 8
78407: PPUSH
78408: LD_VAR 0 9
78412: PUSH
78413: LD_VAR 0 10
78417: PLUS
78418: PPUSH
78419: CALL_OW 272
78423: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78424: LD_ADDR_VAR 0 7
78428: PUSH
78429: LD_VAR 0 6
78433: PPUSH
78434: LD_VAR 0 8
78438: PPUSH
78439: LD_VAR 0 9
78443: PUSH
78444: LD_VAR 0 10
78448: PLUS
78449: PPUSH
78450: CALL_OW 273
78454: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78455: LD_VAR 0 5
78459: PPUSH
78460: LD_VAR 0 7
78464: PPUSH
78465: CALL_OW 488
78469: PUSH
78470: LD_VAR 0 5
78474: PPUSH
78475: LD_VAR 0 7
78479: PPUSH
78480: CALL_OW 428
78484: PPUSH
78485: CALL_OW 247
78489: PUSH
78490: LD_INT 3
78492: PUSH
78493: LD_INT 2
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: IN
78500: NOT
78501: AND
78502: IFFALSE 78546
// begin ComMoveXY ( unit , _x , _y ) ;
78504: LD_VAR 0 1
78508: PPUSH
78509: LD_VAR 0 5
78513: PPUSH
78514: LD_VAR 0 7
78518: PPUSH
78519: CALL_OW 111
// result := [ _x , _y ] ;
78523: LD_ADDR_VAR 0 3
78527: PUSH
78528: LD_VAR 0 5
78532: PUSH
78533: LD_VAR 0 7
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: ST_TO_ADDR
// exit ;
78542: POP
78543: POP
78544: GO 78550
// end ; end ;
78546: GO 78390
78548: POP
78549: POP
// end ;
78550: LD_VAR 0 3
78554: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78555: LD_INT 0
78557: PPUSH
78558: PPUSH
78559: PPUSH
// result := 0 ;
78560: LD_ADDR_VAR 0 3
78564: PUSH
78565: LD_INT 0
78567: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78568: LD_VAR 0 1
78572: PUSH
78573: LD_INT 0
78575: LESS
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_INT 8
78584: GREATER
78585: OR
78586: PUSH
78587: LD_VAR 0 2
78591: PUSH
78592: LD_INT 0
78594: LESS
78595: OR
78596: PUSH
78597: LD_VAR 0 2
78601: PUSH
78602: LD_INT 8
78604: GREATER
78605: OR
78606: IFFALSE 78610
// exit ;
78608: GO 78685
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78610: LD_ADDR_VAR 0 4
78614: PUSH
78615: LD_INT 22
78617: PUSH
78618: LD_VAR 0 2
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 69
78631: PUSH
78632: FOR_IN
78633: IFFALSE 78683
// begin un := UnitShoot ( i ) ;
78635: LD_ADDR_VAR 0 5
78639: PUSH
78640: LD_VAR 0 4
78644: PPUSH
78645: CALL_OW 504
78649: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78650: LD_VAR 0 5
78654: PPUSH
78655: CALL_OW 255
78659: PUSH
78660: LD_VAR 0 1
78664: EQUAL
78665: IFFALSE 78681
// begin result := un ;
78667: LD_ADDR_VAR 0 3
78671: PUSH
78672: LD_VAR 0 5
78676: ST_TO_ADDR
// exit ;
78677: POP
78678: POP
78679: GO 78685
// end ; end ;
78681: GO 78632
78683: POP
78684: POP
// end ;
78685: LD_VAR 0 3
78689: RET
// export function GetCargoBay ( units ) ; begin
78690: LD_INT 0
78692: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78693: LD_ADDR_VAR 0 2
78697: PUSH
78698: LD_VAR 0 1
78702: PPUSH
78703: LD_INT 2
78705: PUSH
78706: LD_INT 34
78708: PUSH
78709: LD_INT 12
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 34
78718: PUSH
78719: LD_INT 51
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 34
78728: PUSH
78729: LD_INT 32
78731: PUSH
78732: EMPTY
78733: LIST
78734: LIST
78735: PUSH
78736: LD_INT 34
78738: PUSH
78739: LD_INT 89
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: PPUSH
78753: CALL_OW 72
78757: ST_TO_ADDR
// end ;
78758: LD_VAR 0 2
78762: RET
// export function Negate ( value ) ; begin
78763: LD_INT 0
78765: PPUSH
// result := not value ;
78766: LD_ADDR_VAR 0 2
78770: PUSH
78771: LD_VAR 0 1
78775: NOT
78776: ST_TO_ADDR
// end ;
78777: LD_VAR 0 2
78781: RET
// export function Inc ( value ) ; begin
78782: LD_INT 0
78784: PPUSH
// result := value + 1 ;
78785: LD_ADDR_VAR 0 2
78789: PUSH
78790: LD_VAR 0 1
78794: PUSH
78795: LD_INT 1
78797: PLUS
78798: ST_TO_ADDR
// end ;
78799: LD_VAR 0 2
78803: RET
// export function Dec ( value ) ; begin
78804: LD_INT 0
78806: PPUSH
// result := value - 1 ;
78807: LD_ADDR_VAR 0 2
78811: PUSH
78812: LD_VAR 0 1
78816: PUSH
78817: LD_INT 1
78819: MINUS
78820: ST_TO_ADDR
// end ;
78821: LD_VAR 0 2
78825: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78826: LD_INT 0
78828: PPUSH
78829: PPUSH
78830: PPUSH
78831: PPUSH
78832: PPUSH
78833: PPUSH
78834: PPUSH
78835: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78836: LD_VAR 0 1
78840: PPUSH
78841: LD_VAR 0 2
78845: PPUSH
78846: CALL_OW 488
78850: NOT
78851: PUSH
78852: LD_VAR 0 3
78856: PPUSH
78857: LD_VAR 0 4
78861: PPUSH
78862: CALL_OW 488
78866: NOT
78867: OR
78868: IFFALSE 78881
// begin result := - 1 ;
78870: LD_ADDR_VAR 0 5
78874: PUSH
78875: LD_INT 1
78877: NEG
78878: ST_TO_ADDR
// exit ;
78879: GO 79116
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78881: LD_ADDR_VAR 0 12
78885: PUSH
78886: LD_VAR 0 1
78890: PPUSH
78891: LD_VAR 0 2
78895: PPUSH
78896: LD_VAR 0 3
78900: PPUSH
78901: LD_VAR 0 4
78905: PPUSH
78906: CALL 77966 0 4
78910: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78911: LD_ADDR_VAR 0 11
78915: PUSH
78916: LD_VAR 0 1
78920: PPUSH
78921: LD_VAR 0 2
78925: PPUSH
78926: LD_VAR 0 12
78930: PUSH
78931: LD_INT 1
78933: ARRAY
78934: PPUSH
78935: LD_VAR 0 12
78939: PUSH
78940: LD_INT 2
78942: ARRAY
78943: PPUSH
78944: CALL_OW 298
78948: ST_TO_ADDR
// distance := 9999 ;
78949: LD_ADDR_VAR 0 10
78953: PUSH
78954: LD_INT 9999
78956: ST_TO_ADDR
// for i := 0 to 5 do
78957: LD_ADDR_VAR 0 6
78961: PUSH
78962: DOUBLE
78963: LD_INT 0
78965: DEC
78966: ST_TO_ADDR
78967: LD_INT 5
78969: PUSH
78970: FOR_TO
78971: IFFALSE 79114
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78973: LD_ADDR_VAR 0 7
78977: PUSH
78978: LD_VAR 0 1
78982: PPUSH
78983: LD_VAR 0 6
78987: PPUSH
78988: LD_VAR 0 11
78992: PPUSH
78993: CALL_OW 272
78997: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78998: LD_ADDR_VAR 0 8
79002: PUSH
79003: LD_VAR 0 2
79007: PPUSH
79008: LD_VAR 0 6
79012: PPUSH
79013: LD_VAR 0 11
79017: PPUSH
79018: CALL_OW 273
79022: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79023: LD_VAR 0 7
79027: PPUSH
79028: LD_VAR 0 8
79032: PPUSH
79033: CALL_OW 488
79037: NOT
79038: IFFALSE 79042
// continue ;
79040: GO 78970
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79042: LD_ADDR_VAR 0 9
79046: PUSH
79047: LD_VAR 0 12
79051: PUSH
79052: LD_INT 1
79054: ARRAY
79055: PPUSH
79056: LD_VAR 0 12
79060: PUSH
79061: LD_INT 2
79063: ARRAY
79064: PPUSH
79065: LD_VAR 0 7
79069: PPUSH
79070: LD_VAR 0 8
79074: PPUSH
79075: CALL_OW 298
79079: ST_TO_ADDR
// if tmp < distance then
79080: LD_VAR 0 9
79084: PUSH
79085: LD_VAR 0 10
79089: LESS
79090: IFFALSE 79112
// begin result := i ;
79092: LD_ADDR_VAR 0 5
79096: PUSH
79097: LD_VAR 0 6
79101: ST_TO_ADDR
// distance := tmp ;
79102: LD_ADDR_VAR 0 10
79106: PUSH
79107: LD_VAR 0 9
79111: ST_TO_ADDR
// end ; end ;
79112: GO 78970
79114: POP
79115: POP
// end ;
79116: LD_VAR 0 5
79120: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79121: LD_INT 0
79123: PPUSH
79124: PPUSH
// if not driver or not IsInUnit ( driver ) then
79125: LD_VAR 0 1
79129: NOT
79130: PUSH
79131: LD_VAR 0 1
79135: PPUSH
79136: CALL_OW 310
79140: NOT
79141: OR
79142: IFFALSE 79146
// exit ;
79144: GO 79236
// vehicle := IsInUnit ( driver ) ;
79146: LD_ADDR_VAR 0 3
79150: PUSH
79151: LD_VAR 0 1
79155: PPUSH
79156: CALL_OW 310
79160: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79161: LD_VAR 0 1
79165: PPUSH
79166: LD_STRING \
79168: PUSH
79169: LD_INT 0
79171: PUSH
79172: LD_INT 0
79174: PUSH
79175: LD_INT 0
79177: PUSH
79178: LD_INT 0
79180: PUSH
79181: LD_INT 0
79183: PUSH
79184: LD_INT 0
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: PUSH
79196: LD_STRING E
79198: PUSH
79199: LD_INT 0
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: LD_VAR 0 3
79209: PUSH
79210: LD_INT 0
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: LD_INT 0
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PPUSH
79232: CALL_OW 446
// end ;
79236: LD_VAR 0 2
79240: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79241: LD_INT 0
79243: PPUSH
79244: PPUSH
// if not driver or not IsInUnit ( driver ) then
79245: LD_VAR 0 1
79249: NOT
79250: PUSH
79251: LD_VAR 0 1
79255: PPUSH
79256: CALL_OW 310
79260: NOT
79261: OR
79262: IFFALSE 79266
// exit ;
79264: GO 79356
// vehicle := IsInUnit ( driver ) ;
79266: LD_ADDR_VAR 0 3
79270: PUSH
79271: LD_VAR 0 1
79275: PPUSH
79276: CALL_OW 310
79280: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79281: LD_VAR 0 1
79285: PPUSH
79286: LD_STRING \
79288: PUSH
79289: LD_INT 0
79291: PUSH
79292: LD_INT 0
79294: PUSH
79295: LD_INT 0
79297: PUSH
79298: LD_INT 0
79300: PUSH
79301: LD_INT 0
79303: PUSH
79304: LD_INT 0
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: PUSH
79316: LD_STRING E
79318: PUSH
79319: LD_INT 0
79321: PUSH
79322: LD_INT 0
79324: PUSH
79325: LD_VAR 0 3
79329: PUSH
79330: LD_INT 0
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: LD_INT 0
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PPUSH
79352: CALL_OW 447
// end ;
79356: LD_VAR 0 2
79360: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79361: LD_INT 0
79363: PPUSH
79364: PPUSH
79365: PPUSH
// tmp := [ ] ;
79366: LD_ADDR_VAR 0 5
79370: PUSH
79371: EMPTY
79372: ST_TO_ADDR
// for i in units do
79373: LD_ADDR_VAR 0 4
79377: PUSH
79378: LD_VAR 0 1
79382: PUSH
79383: FOR_IN
79384: IFFALSE 79422
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79386: LD_ADDR_VAR 0 5
79390: PUSH
79391: LD_VAR 0 5
79395: PPUSH
79396: LD_VAR 0 5
79400: PUSH
79401: LD_INT 1
79403: PLUS
79404: PPUSH
79405: LD_VAR 0 4
79409: PPUSH
79410: CALL_OW 256
79414: PPUSH
79415: CALL_OW 2
79419: ST_TO_ADDR
79420: GO 79383
79422: POP
79423: POP
// if not tmp then
79424: LD_VAR 0 5
79428: NOT
79429: IFFALSE 79433
// exit ;
79431: GO 79481
// if asc then
79433: LD_VAR 0 2
79437: IFFALSE 79461
// result := SortListByListAsc ( units , tmp ) else
79439: LD_ADDR_VAR 0 3
79443: PUSH
79444: LD_VAR 0 1
79448: PPUSH
79449: LD_VAR 0 5
79453: PPUSH
79454: CALL_OW 76
79458: ST_TO_ADDR
79459: GO 79481
// result := SortListByListDesc ( units , tmp ) ;
79461: LD_ADDR_VAR 0 3
79465: PUSH
79466: LD_VAR 0 1
79470: PPUSH
79471: LD_VAR 0 5
79475: PPUSH
79476: CALL_OW 77
79480: ST_TO_ADDR
// end ;
79481: LD_VAR 0 3
79485: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79486: LD_INT 0
79488: PPUSH
79489: PPUSH
// task := GetTaskList ( mech ) ;
79490: LD_ADDR_VAR 0 4
79494: PUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: CALL_OW 437
79504: ST_TO_ADDR
// if not task then
79505: LD_VAR 0 4
79509: NOT
79510: IFFALSE 79514
// exit ;
79512: GO 79556
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79514: LD_ADDR_VAR 0 3
79518: PUSH
79519: LD_VAR 0 4
79523: PUSH
79524: LD_INT 1
79526: ARRAY
79527: PUSH
79528: LD_INT 1
79530: ARRAY
79531: PUSH
79532: LD_STRING r
79534: EQUAL
79535: PUSH
79536: LD_VAR 0 4
79540: PUSH
79541: LD_INT 1
79543: ARRAY
79544: PUSH
79545: LD_INT 4
79547: ARRAY
79548: PUSH
79549: LD_VAR 0 2
79553: EQUAL
79554: AND
79555: ST_TO_ADDR
// end ;
79556: LD_VAR 0 3
79560: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79561: LD_INT 0
79563: PPUSH
// SetDir ( unit , d ) ;
79564: LD_VAR 0 1
79568: PPUSH
79569: LD_VAR 0 4
79573: PPUSH
79574: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79578: LD_VAR 0 1
79582: PPUSH
79583: LD_VAR 0 2
79587: PPUSH
79588: LD_VAR 0 3
79592: PPUSH
79593: LD_VAR 0 5
79597: PPUSH
79598: CALL_OW 48
// end ;
79602: LD_VAR 0 6
79606: RET
// export function ToNaturalNumber ( number ) ; begin
79607: LD_INT 0
79609: PPUSH
// result := number div 1 ;
79610: LD_ADDR_VAR 0 2
79614: PUSH
79615: LD_VAR 0 1
79619: PUSH
79620: LD_INT 1
79622: DIV
79623: ST_TO_ADDR
// if number < 0 then
79624: LD_VAR 0 1
79628: PUSH
79629: LD_INT 0
79631: LESS
79632: IFFALSE 79642
// result := 0 ;
79634: LD_ADDR_VAR 0 2
79638: PUSH
79639: LD_INT 0
79641: ST_TO_ADDR
// end ;
79642: LD_VAR 0 2
79646: RET
// export function SortByClass ( units , class ) ; var un ; begin
79647: LD_INT 0
79649: PPUSH
79650: PPUSH
// if not units or not class then
79651: LD_VAR 0 1
79655: NOT
79656: PUSH
79657: LD_VAR 0 2
79661: NOT
79662: OR
79663: IFFALSE 79667
// exit ;
79665: GO 79762
// result := [ ] ;
79667: LD_ADDR_VAR 0 3
79671: PUSH
79672: EMPTY
79673: ST_TO_ADDR
// for un in units do
79674: LD_ADDR_VAR 0 4
79678: PUSH
79679: LD_VAR 0 1
79683: PUSH
79684: FOR_IN
79685: IFFALSE 79760
// if GetClass ( un ) = class then
79687: LD_VAR 0 4
79691: PPUSH
79692: CALL_OW 257
79696: PUSH
79697: LD_VAR 0 2
79701: EQUAL
79702: IFFALSE 79729
// result := Insert ( result , 1 , un ) else
79704: LD_ADDR_VAR 0 3
79708: PUSH
79709: LD_VAR 0 3
79713: PPUSH
79714: LD_INT 1
79716: PPUSH
79717: LD_VAR 0 4
79721: PPUSH
79722: CALL_OW 2
79726: ST_TO_ADDR
79727: GO 79758
// result := Replace ( result , result + 1 , un ) ;
79729: LD_ADDR_VAR 0 3
79733: PUSH
79734: LD_VAR 0 3
79738: PPUSH
79739: LD_VAR 0 3
79743: PUSH
79744: LD_INT 1
79746: PLUS
79747: PPUSH
79748: LD_VAR 0 4
79752: PPUSH
79753: CALL_OW 1
79757: ST_TO_ADDR
79758: GO 79684
79760: POP
79761: POP
// end ;
79762: LD_VAR 0 3
79766: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79767: LD_INT 0
79769: PPUSH
79770: PPUSH
79771: PPUSH
79772: PPUSH
79773: PPUSH
79774: PPUSH
79775: PPUSH
// result := [ ] ;
79776: LD_ADDR_VAR 0 4
79780: PUSH
79781: EMPTY
79782: ST_TO_ADDR
// if x - r < 0 then
79783: LD_VAR 0 1
79787: PUSH
79788: LD_VAR 0 3
79792: MINUS
79793: PUSH
79794: LD_INT 0
79796: LESS
79797: IFFALSE 79809
// min_x := 0 else
79799: LD_ADDR_VAR 0 8
79803: PUSH
79804: LD_INT 0
79806: ST_TO_ADDR
79807: GO 79825
// min_x := x - r ;
79809: LD_ADDR_VAR 0 8
79813: PUSH
79814: LD_VAR 0 1
79818: PUSH
79819: LD_VAR 0 3
79823: MINUS
79824: ST_TO_ADDR
// if y - r < 0 then
79825: LD_VAR 0 2
79829: PUSH
79830: LD_VAR 0 3
79834: MINUS
79835: PUSH
79836: LD_INT 0
79838: LESS
79839: IFFALSE 79851
// min_y := 0 else
79841: LD_ADDR_VAR 0 7
79845: PUSH
79846: LD_INT 0
79848: ST_TO_ADDR
79849: GO 79867
// min_y := y - r ;
79851: LD_ADDR_VAR 0 7
79855: PUSH
79856: LD_VAR 0 2
79860: PUSH
79861: LD_VAR 0 3
79865: MINUS
79866: ST_TO_ADDR
// max_x := x + r ;
79867: LD_ADDR_VAR 0 9
79871: PUSH
79872: LD_VAR 0 1
79876: PUSH
79877: LD_VAR 0 3
79881: PLUS
79882: ST_TO_ADDR
// max_y := y + r ;
79883: LD_ADDR_VAR 0 10
79887: PUSH
79888: LD_VAR 0 2
79892: PUSH
79893: LD_VAR 0 3
79897: PLUS
79898: ST_TO_ADDR
// for _x = min_x to max_x do
79899: LD_ADDR_VAR 0 5
79903: PUSH
79904: DOUBLE
79905: LD_VAR 0 8
79909: DEC
79910: ST_TO_ADDR
79911: LD_VAR 0 9
79915: PUSH
79916: FOR_TO
79917: IFFALSE 80018
// for _y = min_y to max_y do
79919: LD_ADDR_VAR 0 6
79923: PUSH
79924: DOUBLE
79925: LD_VAR 0 7
79929: DEC
79930: ST_TO_ADDR
79931: LD_VAR 0 10
79935: PUSH
79936: FOR_TO
79937: IFFALSE 80014
// begin if not ValidHex ( _x , _y ) then
79939: LD_VAR 0 5
79943: PPUSH
79944: LD_VAR 0 6
79948: PPUSH
79949: CALL_OW 488
79953: NOT
79954: IFFALSE 79958
// continue ;
79956: GO 79936
// if GetResourceTypeXY ( _x , _y ) then
79958: LD_VAR 0 5
79962: PPUSH
79963: LD_VAR 0 6
79967: PPUSH
79968: CALL_OW 283
79972: IFFALSE 80012
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79974: LD_ADDR_VAR 0 4
79978: PUSH
79979: LD_VAR 0 4
79983: PPUSH
79984: LD_VAR 0 4
79988: PUSH
79989: LD_INT 1
79991: PLUS
79992: PPUSH
79993: LD_VAR 0 5
79997: PUSH
79998: LD_VAR 0 6
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PPUSH
80007: CALL_OW 1
80011: ST_TO_ADDR
// end ;
80012: GO 79936
80014: POP
80015: POP
80016: GO 79916
80018: POP
80019: POP
// end ;
80020: LD_VAR 0 4
80024: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80025: LD_INT 0
80027: PPUSH
80028: PPUSH
80029: PPUSH
80030: PPUSH
80031: PPUSH
80032: PPUSH
80033: PPUSH
80034: PPUSH
// if not units then
80035: LD_VAR 0 1
80039: NOT
80040: IFFALSE 80044
// exit ;
80042: GO 80568
// result := UnitFilter ( units , [ f_ok ] ) ;
80044: LD_ADDR_VAR 0 3
80048: PUSH
80049: LD_VAR 0 1
80053: PPUSH
80054: LD_INT 50
80056: PUSH
80057: EMPTY
80058: LIST
80059: PPUSH
80060: CALL_OW 72
80064: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80065: LD_ADDR_VAR 0 8
80069: PUSH
80070: LD_VAR 0 1
80074: PUSH
80075: LD_INT 1
80077: ARRAY
80078: PPUSH
80079: CALL_OW 255
80083: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80084: LD_ADDR_VAR 0 10
80088: PUSH
80089: LD_INT 29
80091: PUSH
80092: LD_INT 91
80094: PUSH
80095: LD_INT 49
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: LIST
80102: ST_TO_ADDR
// if not result then
80103: LD_VAR 0 3
80107: NOT
80108: IFFALSE 80112
// exit ;
80110: GO 80568
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80112: LD_ADDR_VAR 0 5
80116: PUSH
80117: LD_INT 81
80119: PUSH
80120: LD_VAR 0 8
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PPUSH
80129: CALL_OW 69
80133: ST_TO_ADDR
// for i in result do
80134: LD_ADDR_VAR 0 4
80138: PUSH
80139: LD_VAR 0 3
80143: PUSH
80144: FOR_IN
80145: IFFALSE 80566
// begin tag := GetTag ( i ) + 1 ;
80147: LD_ADDR_VAR 0 9
80151: PUSH
80152: LD_VAR 0 4
80156: PPUSH
80157: CALL_OW 110
80161: PUSH
80162: LD_INT 1
80164: PLUS
80165: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80166: LD_ADDR_VAR 0 7
80170: PUSH
80171: LD_VAR 0 4
80175: PPUSH
80176: CALL_OW 250
80180: PPUSH
80181: LD_VAR 0 4
80185: PPUSH
80186: CALL_OW 251
80190: PPUSH
80191: LD_INT 6
80193: PPUSH
80194: CALL 79767 0 3
80198: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80199: LD_VAR 0 4
80203: PPUSH
80204: CALL_OW 247
80208: PUSH
80209: LD_INT 2
80211: EQUAL
80212: PUSH
80213: LD_VAR 0 7
80217: AND
80218: PUSH
80219: LD_VAR 0 4
80223: PPUSH
80224: CALL_OW 264
80228: PUSH
80229: LD_VAR 0 10
80233: IN
80234: NOT
80235: AND
80236: IFFALSE 80275
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80238: LD_VAR 0 4
80242: PPUSH
80243: LD_VAR 0 7
80247: PUSH
80248: LD_INT 1
80250: ARRAY
80251: PUSH
80252: LD_INT 1
80254: ARRAY
80255: PPUSH
80256: LD_VAR 0 7
80260: PUSH
80261: LD_INT 1
80263: ARRAY
80264: PUSH
80265: LD_INT 2
80267: ARRAY
80268: PPUSH
80269: CALL_OW 116
80273: GO 80564
// if path > tag then
80275: LD_VAR 0 2
80279: PUSH
80280: LD_VAR 0 9
80284: GREATER
80285: IFFALSE 80493
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80287: LD_ADDR_VAR 0 6
80291: PUSH
80292: LD_VAR 0 5
80296: PPUSH
80297: LD_INT 91
80299: PUSH
80300: LD_VAR 0 4
80304: PUSH
80305: LD_INT 8
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: LIST
80312: PPUSH
80313: CALL_OW 72
80317: ST_TO_ADDR
// if nearEnemy then
80318: LD_VAR 0 6
80322: IFFALSE 80391
// begin if GetWeapon ( i ) = ru_time_lapser then
80324: LD_VAR 0 4
80328: PPUSH
80329: CALL_OW 264
80333: PUSH
80334: LD_INT 49
80336: EQUAL
80337: IFFALSE 80365
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80339: LD_VAR 0 4
80343: PPUSH
80344: LD_VAR 0 6
80348: PPUSH
80349: LD_VAR 0 4
80353: PPUSH
80354: CALL_OW 74
80358: PPUSH
80359: CALL_OW 112
80363: GO 80389
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80365: LD_VAR 0 4
80369: PPUSH
80370: LD_VAR 0 6
80374: PPUSH
80375: LD_VAR 0 4
80379: PPUSH
80380: CALL_OW 74
80384: PPUSH
80385: CALL_OW 115
// end else
80389: GO 80491
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80391: LD_VAR 0 4
80395: PPUSH
80396: LD_VAR 0 2
80400: PUSH
80401: LD_VAR 0 9
80405: ARRAY
80406: PUSH
80407: LD_INT 1
80409: ARRAY
80410: PPUSH
80411: LD_VAR 0 2
80415: PUSH
80416: LD_VAR 0 9
80420: ARRAY
80421: PUSH
80422: LD_INT 2
80424: ARRAY
80425: PPUSH
80426: CALL_OW 297
80430: PUSH
80431: LD_INT 6
80433: GREATER
80434: IFFALSE 80477
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80436: LD_VAR 0 4
80440: PPUSH
80441: LD_VAR 0 2
80445: PUSH
80446: LD_VAR 0 9
80450: ARRAY
80451: PUSH
80452: LD_INT 1
80454: ARRAY
80455: PPUSH
80456: LD_VAR 0 2
80460: PUSH
80461: LD_VAR 0 9
80465: ARRAY
80466: PUSH
80467: LD_INT 2
80469: ARRAY
80470: PPUSH
80471: CALL_OW 114
80475: GO 80491
// SetTag ( i , tag ) ;
80477: LD_VAR 0 4
80481: PPUSH
80482: LD_VAR 0 9
80486: PPUSH
80487: CALL_OW 109
// end else
80491: GO 80564
// if enemy then
80493: LD_VAR 0 5
80497: IFFALSE 80564
// begin if GetWeapon ( i ) = ru_time_lapser then
80499: LD_VAR 0 4
80503: PPUSH
80504: CALL_OW 264
80508: PUSH
80509: LD_INT 49
80511: EQUAL
80512: IFFALSE 80540
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80514: LD_VAR 0 4
80518: PPUSH
80519: LD_VAR 0 5
80523: PPUSH
80524: LD_VAR 0 4
80528: PPUSH
80529: CALL_OW 74
80533: PPUSH
80534: CALL_OW 112
80538: GO 80564
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80540: LD_VAR 0 4
80544: PPUSH
80545: LD_VAR 0 5
80549: PPUSH
80550: LD_VAR 0 4
80554: PPUSH
80555: CALL_OW 74
80559: PPUSH
80560: CALL_OW 115
// end ; end ;
80564: GO 80144
80566: POP
80567: POP
// end ;
80568: LD_VAR 0 3
80572: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80573: LD_INT 0
80575: PPUSH
80576: PPUSH
80577: PPUSH
// if not unit or IsInUnit ( unit ) then
80578: LD_VAR 0 1
80582: NOT
80583: PUSH
80584: LD_VAR 0 1
80588: PPUSH
80589: CALL_OW 310
80593: OR
80594: IFFALSE 80598
// exit ;
80596: GO 80689
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80598: LD_ADDR_VAR 0 4
80602: PUSH
80603: LD_VAR 0 1
80607: PPUSH
80608: CALL_OW 250
80612: PPUSH
80613: LD_VAR 0 2
80617: PPUSH
80618: LD_INT 1
80620: PPUSH
80621: CALL_OW 272
80625: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80626: LD_ADDR_VAR 0 5
80630: PUSH
80631: LD_VAR 0 1
80635: PPUSH
80636: CALL_OW 251
80640: PPUSH
80641: LD_VAR 0 2
80645: PPUSH
80646: LD_INT 1
80648: PPUSH
80649: CALL_OW 273
80653: ST_TO_ADDR
// if ValidHex ( x , y ) then
80654: LD_VAR 0 4
80658: PPUSH
80659: LD_VAR 0 5
80663: PPUSH
80664: CALL_OW 488
80668: IFFALSE 80689
// ComTurnXY ( unit , x , y ) ;
80670: LD_VAR 0 1
80674: PPUSH
80675: LD_VAR 0 4
80679: PPUSH
80680: LD_VAR 0 5
80684: PPUSH
80685: CALL_OW 118
// end ;
80689: LD_VAR 0 3
80693: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80694: LD_INT 0
80696: PPUSH
80697: PPUSH
// result := false ;
80698: LD_ADDR_VAR 0 3
80702: PUSH
80703: LD_INT 0
80705: ST_TO_ADDR
// if not units then
80706: LD_VAR 0 2
80710: NOT
80711: IFFALSE 80715
// exit ;
80713: GO 80760
// for i in units do
80715: LD_ADDR_VAR 0 4
80719: PUSH
80720: LD_VAR 0 2
80724: PUSH
80725: FOR_IN
80726: IFFALSE 80758
// if See ( side , i ) then
80728: LD_VAR 0 1
80732: PPUSH
80733: LD_VAR 0 4
80737: PPUSH
80738: CALL_OW 292
80742: IFFALSE 80756
// begin result := true ;
80744: LD_ADDR_VAR 0 3
80748: PUSH
80749: LD_INT 1
80751: ST_TO_ADDR
// exit ;
80752: POP
80753: POP
80754: GO 80760
// end ;
80756: GO 80725
80758: POP
80759: POP
// end ;
80760: LD_VAR 0 3
80764: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80765: LD_INT 0
80767: PPUSH
80768: PPUSH
80769: PPUSH
80770: PPUSH
// if not unit or not points then
80771: LD_VAR 0 1
80775: NOT
80776: PUSH
80777: LD_VAR 0 2
80781: NOT
80782: OR
80783: IFFALSE 80787
// exit ;
80785: GO 80877
// dist := 99999 ;
80787: LD_ADDR_VAR 0 5
80791: PUSH
80792: LD_INT 99999
80794: ST_TO_ADDR
// for i in points do
80795: LD_ADDR_VAR 0 4
80799: PUSH
80800: LD_VAR 0 2
80804: PUSH
80805: FOR_IN
80806: IFFALSE 80875
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80808: LD_ADDR_VAR 0 6
80812: PUSH
80813: LD_VAR 0 1
80817: PPUSH
80818: LD_VAR 0 4
80822: PUSH
80823: LD_INT 1
80825: ARRAY
80826: PPUSH
80827: LD_VAR 0 4
80831: PUSH
80832: LD_INT 2
80834: ARRAY
80835: PPUSH
80836: CALL_OW 297
80840: ST_TO_ADDR
// if tmpDist < dist then
80841: LD_VAR 0 6
80845: PUSH
80846: LD_VAR 0 5
80850: LESS
80851: IFFALSE 80873
// begin result := i ;
80853: LD_ADDR_VAR 0 3
80857: PUSH
80858: LD_VAR 0 4
80862: ST_TO_ADDR
// dist := tmpDist ;
80863: LD_ADDR_VAR 0 5
80867: PUSH
80868: LD_VAR 0 6
80872: ST_TO_ADDR
// end ; end ;
80873: GO 80805
80875: POP
80876: POP
// end ;
80877: LD_VAR 0 3
80881: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80882: LD_INT 0
80884: PPUSH
// uc_side := side ;
80885: LD_ADDR_OWVAR 20
80889: PUSH
80890: LD_VAR 0 1
80894: ST_TO_ADDR
// uc_nation := 3 ;
80895: LD_ADDR_OWVAR 21
80899: PUSH
80900: LD_INT 3
80902: ST_TO_ADDR
// vc_chassis := 25 ;
80903: LD_ADDR_OWVAR 37
80907: PUSH
80908: LD_INT 25
80910: ST_TO_ADDR
// vc_engine := engine_siberite ;
80911: LD_ADDR_OWVAR 39
80915: PUSH
80916: LD_INT 3
80918: ST_TO_ADDR
// vc_control := control_computer ;
80919: LD_ADDR_OWVAR 38
80923: PUSH
80924: LD_INT 3
80926: ST_TO_ADDR
// vc_weapon := 59 ;
80927: LD_ADDR_OWVAR 40
80931: PUSH
80932: LD_INT 59
80934: ST_TO_ADDR
// result := CreateVehicle ;
80935: LD_ADDR_VAR 0 5
80939: PUSH
80940: CALL_OW 45
80944: ST_TO_ADDR
// SetDir ( result , d ) ;
80945: LD_VAR 0 5
80949: PPUSH
80950: LD_VAR 0 4
80954: PPUSH
80955: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80959: LD_VAR 0 5
80963: PPUSH
80964: LD_VAR 0 2
80968: PPUSH
80969: LD_VAR 0 3
80973: PPUSH
80974: LD_INT 0
80976: PPUSH
80977: CALL_OW 48
// end ;
80981: LD_VAR 0 5
80985: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80986: LD_INT 0
80988: PPUSH
80989: PPUSH
80990: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80991: LD_ADDR_VAR 0 2
80995: PUSH
80996: LD_INT 0
80998: PUSH
80999: LD_INT 0
81001: PUSH
81002: LD_INT 0
81004: PUSH
81005: LD_INT 0
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: LIST
81012: LIST
81013: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81014: LD_VAR 0 1
81018: NOT
81019: PUSH
81020: LD_VAR 0 1
81024: PPUSH
81025: CALL_OW 264
81029: PUSH
81030: LD_INT 12
81032: PUSH
81033: LD_INT 51
81035: PUSH
81036: LD_INT 32
81038: PUSH
81039: LD_INT 89
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: IN
81048: NOT
81049: OR
81050: IFFALSE 81054
// exit ;
81052: GO 81152
// for i := 1 to 3 do
81054: LD_ADDR_VAR 0 3
81058: PUSH
81059: DOUBLE
81060: LD_INT 1
81062: DEC
81063: ST_TO_ADDR
81064: LD_INT 3
81066: PUSH
81067: FOR_TO
81068: IFFALSE 81150
// begin tmp := GetCargo ( cargo , i ) ;
81070: LD_ADDR_VAR 0 4
81074: PUSH
81075: LD_VAR 0 1
81079: PPUSH
81080: LD_VAR 0 3
81084: PPUSH
81085: CALL_OW 289
81089: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81090: LD_ADDR_VAR 0 2
81094: PUSH
81095: LD_VAR 0 2
81099: PPUSH
81100: LD_VAR 0 3
81104: PPUSH
81105: LD_VAR 0 4
81109: PPUSH
81110: CALL_OW 1
81114: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81115: LD_ADDR_VAR 0 2
81119: PUSH
81120: LD_VAR 0 2
81124: PPUSH
81125: LD_INT 4
81127: PPUSH
81128: LD_VAR 0 2
81132: PUSH
81133: LD_INT 4
81135: ARRAY
81136: PUSH
81137: LD_VAR 0 4
81141: PLUS
81142: PPUSH
81143: CALL_OW 1
81147: ST_TO_ADDR
// end ;
81148: GO 81067
81150: POP
81151: POP
// end ;
81152: LD_VAR 0 2
81156: RET
// export function Length ( array ) ; begin
81157: LD_INT 0
81159: PPUSH
// result := array + 0 ;
81160: LD_ADDR_VAR 0 2
81164: PUSH
81165: LD_VAR 0 1
81169: PUSH
81170: LD_INT 0
81172: PLUS
81173: ST_TO_ADDR
// end ;
81174: LD_VAR 0 2
81178: RET
// export function PrepareArray ( array ) ; begin
81179: LD_INT 0
81181: PPUSH
// result := array diff 0 ;
81182: LD_ADDR_VAR 0 2
81186: PUSH
81187: LD_VAR 0 1
81191: PUSH
81192: LD_INT 0
81194: DIFF
81195: ST_TO_ADDR
// if not result [ 1 ] then
81196: LD_VAR 0 2
81200: PUSH
81201: LD_INT 1
81203: ARRAY
81204: NOT
81205: IFFALSE 81225
// result := Delete ( result , 1 ) ;
81207: LD_ADDR_VAR 0 2
81211: PUSH
81212: LD_VAR 0 2
81216: PPUSH
81217: LD_INT 1
81219: PPUSH
81220: CALL_OW 3
81224: ST_TO_ADDR
// end ;
81225: LD_VAR 0 2
81229: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81230: LD_INT 0
81232: PPUSH
81233: PPUSH
81234: PPUSH
81235: PPUSH
// sibRocketRange := 25 ;
81236: LD_ADDR_VAR 0 6
81240: PUSH
81241: LD_INT 25
81243: ST_TO_ADDR
// result := false ;
81244: LD_ADDR_VAR 0 4
81248: PUSH
81249: LD_INT 0
81251: ST_TO_ADDR
// for i := 0 to 5 do
81252: LD_ADDR_VAR 0 5
81256: PUSH
81257: DOUBLE
81258: LD_INT 0
81260: DEC
81261: ST_TO_ADDR
81262: LD_INT 5
81264: PUSH
81265: FOR_TO
81266: IFFALSE 81333
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81268: LD_VAR 0 1
81272: PPUSH
81273: LD_VAR 0 5
81277: PPUSH
81278: LD_VAR 0 6
81282: PPUSH
81283: CALL_OW 272
81287: PPUSH
81288: LD_VAR 0 2
81292: PPUSH
81293: LD_VAR 0 5
81297: PPUSH
81298: LD_VAR 0 6
81302: PPUSH
81303: CALL_OW 273
81307: PPUSH
81308: LD_VAR 0 3
81312: PPUSH
81313: CALL_OW 309
81317: IFFALSE 81331
// begin result := true ;
81319: LD_ADDR_VAR 0 4
81323: PUSH
81324: LD_INT 1
81326: ST_TO_ADDR
// exit ;
81327: POP
81328: POP
81329: GO 81335
// end ;
81331: GO 81265
81333: POP
81334: POP
// end ;
81335: LD_VAR 0 4
81339: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81340: LD_INT 0
81342: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81343: LD_VAR 0 1
81347: PPUSH
81348: LD_VAR 0 2
81352: PPUSH
81353: LD_INT 0
81355: PPUSH
81356: LD_INT 0
81358: PPUSH
81359: LD_INT 1
81361: PPUSH
81362: LD_INT 0
81364: PPUSH
81365: CALL_OW 587
// end ;
81369: LD_VAR 0 3
81373: RET
// export function CenterOnNow ( unit ) ; begin
81374: LD_INT 0
81376: PPUSH
// result := IsInUnit ( unit ) ;
81377: LD_ADDR_VAR 0 2
81381: PUSH
81382: LD_VAR 0 1
81386: PPUSH
81387: CALL_OW 310
81391: ST_TO_ADDR
// if not result then
81392: LD_VAR 0 2
81396: NOT
81397: IFFALSE 81409
// result := unit ;
81399: LD_ADDR_VAR 0 2
81403: PUSH
81404: LD_VAR 0 1
81408: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81409: LD_VAR 0 1
81413: PPUSH
81414: CALL_OW 87
// end ;
81418: LD_VAR 0 2
81422: RET
// export function ComMoveHex ( unit , hex ) ; begin
81423: LD_INT 0
81425: PPUSH
// if not hex then
81426: LD_VAR 0 2
81430: NOT
81431: IFFALSE 81435
// exit ;
81433: GO 81488
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81435: LD_VAR 0 2
81439: PUSH
81440: LD_INT 1
81442: ARRAY
81443: PPUSH
81444: LD_VAR 0 2
81448: PUSH
81449: LD_INT 2
81451: ARRAY
81452: PPUSH
81453: CALL_OW 428
81457: IFFALSE 81461
// exit ;
81459: GO 81488
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81461: LD_VAR 0 1
81465: PPUSH
81466: LD_VAR 0 2
81470: PUSH
81471: LD_INT 1
81473: ARRAY
81474: PPUSH
81475: LD_VAR 0 2
81479: PUSH
81480: LD_INT 2
81482: ARRAY
81483: PPUSH
81484: CALL_OW 111
// end ; end_of_file
81488: LD_VAR 0 3
81492: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81493: LD_VAR 0 1
81497: PUSH
81498: LD_INT 200
81500: DOUBLE
81501: GREATEREQUAL
81502: IFFALSE 81510
81504: LD_INT 299
81506: DOUBLE
81507: LESSEQUAL
81508: IFTRUE 81512
81510: GO 81544
81512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81513: LD_VAR 0 1
81517: PPUSH
81518: LD_VAR 0 2
81522: PPUSH
81523: LD_VAR 0 3
81527: PPUSH
81528: LD_VAR 0 4
81532: PPUSH
81533: LD_VAR 0 5
81537: PPUSH
81538: CALL 36216 0 5
81542: GO 81621
81544: LD_INT 300
81546: DOUBLE
81547: GREATEREQUAL
81548: IFFALSE 81556
81550: LD_INT 399
81552: DOUBLE
81553: LESSEQUAL
81554: IFTRUE 81558
81556: GO 81620
81558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81559: LD_VAR 0 1
81563: PPUSH
81564: LD_VAR 0 2
81568: PPUSH
81569: LD_VAR 0 3
81573: PPUSH
81574: LD_VAR 0 4
81578: PPUSH
81579: LD_VAR 0 5
81583: PPUSH
81584: LD_VAR 0 6
81588: PPUSH
81589: LD_VAR 0 7
81593: PPUSH
81594: LD_VAR 0 8
81598: PPUSH
81599: LD_VAR 0 9
81603: PPUSH
81604: LD_VAR 0 10
81608: PPUSH
81609: LD_VAR 0 11
81613: PPUSH
81614: CALL 32541 0 11
81618: GO 81621
81620: POP
// end ;
81621: PPOPN 11
81623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81624: LD_VAR 0 1
81628: PPUSH
81629: LD_VAR 0 2
81633: PPUSH
81634: LD_VAR 0 3
81638: PPUSH
81639: LD_VAR 0 4
81643: PPUSH
81644: LD_VAR 0 5
81648: PPUSH
81649: CALL 35952 0 5
// end ; end_of_file
81653: PPOPN 5
81655: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81656: LD_VAR 0 1
81660: PPUSH
81661: LD_VAR 0 2
81665: PPUSH
81666: LD_VAR 0 3
81670: PPUSH
81671: LD_VAR 0 4
81675: PPUSH
81676: LD_VAR 0 5
81680: PPUSH
81681: LD_VAR 0 6
81685: PPUSH
81686: CALL 20193 0 6
// end ;
81690: PPOPN 6
81692: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81693: LD_INT 0
81695: PPUSH
// begin if not units then
81696: LD_VAR 0 1
81700: NOT
81701: IFFALSE 81705
// exit ;
81703: GO 81705
// end ;
81705: PPOPN 7
81707: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81708: CALL 20097 0 0
// end ;
81712: PPOPN 1
81714: END
