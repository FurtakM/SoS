// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 665 0 0
// PrepareArabian ;
  12: CALL 1980 0 0
// PrepareAmerican ;
  16: CALL 4984 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9645 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 22
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 8
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 14
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 15
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 21
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 25
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 15
 269: PUSH
 270: LD_INT 14
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 12
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// end ; end_of_file
 292: LD_VAR 0 1
 296: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 297: LD_INT 0
 299: PPUSH
 300: PPUSH
// if exist_mode then
 301: LD_VAR 0 2
 305: IFFALSE 330
// unit := CreateCharacter ( prefix & ident ) else
 307: LD_ADDR_VAR 0 5
 311: PUSH
 312: LD_VAR 0 3
 316: PUSH
 317: LD_VAR 0 1
 321: STR
 322: PPUSH
 323: CALL_OW 34
 327: ST_TO_ADDR
 328: GO 345
// unit := NewCharacter ( ident ) ;
 330: LD_ADDR_VAR 0 5
 334: PUSH
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 25
 344: ST_TO_ADDR
// result := unit ;
 345: LD_ADDR_VAR 0 4
 349: PUSH
 350: LD_VAR 0 5
 354: ST_TO_ADDR
// end ;
 355: LD_VAR 0 4
 359: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 360: LD_INT 0
 362: PPUSH
// uc_side := side ;
 363: LD_ADDR_OWVAR 20
 367: PUSH
 368: LD_VAR 0 1
 372: ST_TO_ADDR
// uc_nation := nation ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_VAR 0 2
 382: ST_TO_ADDR
// vc_chassis := chassis ;
 383: LD_ADDR_OWVAR 37
 387: PUSH
 388: LD_VAR 0 3
 392: ST_TO_ADDR
// vc_engine := engine ;
 393: LD_ADDR_OWVAR 39
 397: PUSH
 398: LD_VAR 0 4
 402: ST_TO_ADDR
// vc_control := control ;
 403: LD_ADDR_OWVAR 38
 407: PUSH
 408: LD_VAR 0 5
 412: ST_TO_ADDR
// vc_weapon := weapon ;
 413: LD_ADDR_OWVAR 40
 417: PUSH
 418: LD_VAR 0 6
 422: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 423: LD_ADDR_OWVAR 41
 427: PUSH
 428: LD_VAR 0 7
 432: ST_TO_ADDR
// result := CreateVehicle ;
 433: LD_ADDR_VAR 0 8
 437: PUSH
 438: CALL_OW 45
 442: ST_TO_ADDR
// end ;
 443: LD_VAR 0 8
 447: RET
// export function SayX ( units , ident ) ; var i ; begin
 448: LD_INT 0
 450: PPUSH
 451: PPUSH
// result := false ;
 452: LD_ADDR_VAR 0 3
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// if not units then
 460: LD_VAR 0 1
 464: NOT
 465: IFFALSE 469
// exit ;
 467: GO 523
// for i in units do
 469: LD_ADDR_VAR 0 4
 473: PUSH
 474: LD_VAR 0 1
 478: PUSH
 479: FOR_IN
 480: IFFALSE 521
// if IsOk ( i ) then
 482: LD_VAR 0 4
 486: PPUSH
 487: CALL_OW 302
 491: IFFALSE 519
// begin Say ( i , ident ) ;
 493: LD_VAR 0 4
 497: PPUSH
 498: LD_VAR 0 2
 502: PPUSH
 503: CALL_OW 88
// result := i ;
 507: LD_ADDR_VAR 0 3
 511: PUSH
 512: LD_VAR 0 4
 516: ST_TO_ADDR
// break ;
 517: GO 521
// end ;
 519: GO 479
 521: POP
 522: POP
// end ;
 523: LD_VAR 0 3
 527: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 528: LD_INT 0
 530: PPUSH
 531: PPUSH
// InitUc ;
 532: CALL_OW 18
// InitHc ;
 536: CALL_OW 19
// uc_side := 0 ;
 540: LD_ADDR_OWVAR 20
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// uc_nation := 0 ;
 548: LD_ADDR_OWVAR 21
 552: PUSH
 553: LD_INT 0
 555: ST_TO_ADDR
// for i = 1 to amount do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: DOUBLE
 562: LD_INT 1
 564: DEC
 565: ST_TO_ADDR
 566: LD_VAR 0 2
 570: PUSH
 571: FOR_TO
 572: IFFALSE 654
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 574: LD_ADDR_OWVAR 29
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: LD_INT 9
 592: PPUSH
 593: LD_INT 12
 595: PPUSH
 596: CALL_OW 12
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 605: LD_ADDR_OWVAR 35
 609: PUSH
 610: LD_INT 1
 612: NEG
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 12
 621: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 622: LD_INT 0
 624: PPUSH
 625: LD_INT 12
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 635: CALL_OW 44
 639: PPUSH
 640: LD_VAR 0 1
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
// end ;
 652: GO 571
 654: POP
 655: POP
// InitHc ;
 656: CALL_OW 19
// end ;
 660: LD_VAR 0 3
 664: RET
// export function PrepareNature ; var i ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 669: LD_INT 2
 671: PPUSH
 672: LD_INT 5
 674: PUSH
 675: LD_INT 4
 677: PUSH
 678: LD_INT 4
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: LD_OWVAR 67
 690: ARRAY
 691: PPUSH
 692: CALL 528 0 2
// for i := 1 to 2 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 2
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 21 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 21
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// for i := 1 to 2 do
 747: LD_ADDR_VAR 0 2
 751: PUSH
 752: DOUBLE
 753: LD_INT 1
 755: DEC
 756: ST_TO_ADDR
 757: LD_INT 2
 759: PUSH
 760: FOR_TO
 761: IFFALSE 796
// begin hc_class := 18 ;
 763: LD_ADDR_OWVAR 28
 767: PUSH
 768: LD_INT 18
 770: ST_TO_ADDR
// hc_gallery :=  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_INT 2
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 49
// end ;
 794: GO 760
 796: POP
 797: POP
// for i := 1 to 2 do
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: DOUBLE
 804: LD_INT 1
 806: DEC
 807: ST_TO_ADDR
 808: LD_INT 2
 810: PUSH
 811: FOR_TO
 812: IFFALSE 847
// begin hc_class := 13 ;
 814: LD_ADDR_OWVAR 28
 818: PUSH
 819: LD_INT 13
 821: ST_TO_ADDR
// hc_gallery :=  ;
 822: LD_ADDR_OWVAR 33
 826: PUSH
 827: LD_STRING 
 829: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 830: CALL_OW 44
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// end ;
 845: GO 811
 847: POP
 848: POP
// end ;
 849: LD_VAR 0 1
 853: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 854: LD_INT 0
 856: PPUSH
 857: PPUSH
 858: PPUSH
// if not observer or not unit then
 859: LD_VAR 0 1
 863: NOT
 864: PUSH
 865: LD_VAR 0 2
 869: NOT
 870: OR
 871: IFFALSE 875
// exit ;
 873: GO 923
// if not See ( GetSide ( observer ) , unit ) then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 255
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 292
 894: NOT
 895: IFFALSE 899
// exit ;
 897: GO 923
// result := GetDistUnits ( observer , unit ) < 12 ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 296
 918: PUSH
 919: LD_INT 12
 921: LESS
 922: ST_TO_ADDR
// end ;
 923: LD_VAR 0 3
 927: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 928: LD_INT 0
 930: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: PPUSH
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 2
 947: ARRAY
 948: PPUSH
 949: CALL_OW 488
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function Video ( mode ) ; begin
1020: LD_INT 0
1022: PPUSH
// ingame_video = mode ;
1023: LD_ADDR_OWVAR 52
1027: PUSH
1028: LD_VAR 0 1
1032: ST_TO_ADDR
// interface_hidden = mode ;
1033: LD_ADDR_OWVAR 54
1037: PUSH
1038: LD_VAR 0 1
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 2
1047: RET
// export function ReverseArray ( array ) ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// if not array then
1052: LD_VAR 0 1
1056: NOT
1057: IFFALSE 1061
// exit ;
1059: GO 1119
// result := [ ] ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: EMPTY
1067: ST_TO_ADDR
// for i := 1 to array do
1068: LD_ADDR_VAR 0 3
1072: PUSH
1073: DOUBLE
1074: LD_INT 1
1076: DEC
1077: ST_TO_ADDR
1078: LD_VAR 0 1
1082: PUSH
1083: FOR_TO
1084: IFFALSE 1117
// result := Insert ( result , 1 , array [ i ] ) ;
1086: LD_ADDR_VAR 0 2
1090: PUSH
1091: LD_VAR 0 2
1095: PPUSH
1096: LD_INT 1
1098: PPUSH
1099: LD_VAR 0 1
1103: PUSH
1104: LD_VAR 0 3
1108: ARRAY
1109: PPUSH
1110: CALL_OW 2
1114: ST_TO_ADDR
1115: GO 1083
1117: POP
1118: POP
// end ;
1119: LD_VAR 0 2
1123: RET
// export function ComExit ( unit ) ; begin
1124: LD_INT 0
1126: PPUSH
// result := IsInUnit ( unit ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 1
1136: PPUSH
1137: CALL_OW 310
1141: ST_TO_ADDR
// if not result then
1142: LD_VAR 0 2
1146: NOT
1147: IFFALSE 1151
// exit ;
1149: GO 1186
// if GetType ( result ) = unit_vehicle then
1151: LD_VAR 0 2
1155: PPUSH
1156: CALL_OW 247
1160: PUSH
1161: LD_INT 2
1163: EQUAL
1164: IFFALSE 1177
// ComExitVehicle ( unit ) else
1166: LD_VAR 0 1
1170: PPUSH
1171: CALL_OW 121
1175: GO 1186
// ComExitBuilding ( unit ) ;
1177: LD_VAR 0 1
1181: PPUSH
1182: CALL_OW 122
// end ;
1186: LD_VAR 0 2
1190: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1191: LD_INT 0
1193: PPUSH
1194: PPUSH
// if not side or not nation then
1195: LD_VAR 0 1
1199: NOT
1200: PUSH
1201: LD_VAR 0 2
1205: NOT
1206: OR
1207: IFFALSE 1211
// exit ;
1209: GO 1975
// case nation of nation_american :
1211: LD_VAR 0 2
1215: PUSH
1216: LD_INT 1
1218: DOUBLE
1219: EQUAL
1220: IFTRUE 1224
1222: GO 1438
1224: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1225: LD_ADDR_VAR 0 4
1229: PUSH
1230: LD_INT 35
1232: PUSH
1233: LD_INT 45
1235: PUSH
1236: LD_INT 46
1238: PUSH
1239: LD_INT 47
1241: PUSH
1242: LD_INT 82
1244: PUSH
1245: LD_INT 83
1247: PUSH
1248: LD_INT 84
1250: PUSH
1251: LD_INT 85
1253: PUSH
1254: LD_INT 86
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 6
1265: PUSH
1266: LD_INT 15
1268: PUSH
1269: LD_INT 16
1271: PUSH
1272: LD_INT 7
1274: PUSH
1275: LD_INT 12
1277: PUSH
1278: LD_INT 13
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 14
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 25
1298: PUSH
1299: LD_INT 32
1301: PUSH
1302: LD_INT 27
1304: PUSH
1305: LD_INT 36
1307: PUSH
1308: LD_INT 69
1310: PUSH
1311: LD_INT 39
1313: PUSH
1314: LD_INT 34
1316: PUSH
1317: LD_INT 40
1319: PUSH
1320: LD_INT 48
1322: PUSH
1323: LD_INT 49
1325: PUSH
1326: LD_INT 50
1328: PUSH
1329: LD_INT 51
1331: PUSH
1332: LD_INT 52
1334: PUSH
1335: LD_INT 53
1337: PUSH
1338: LD_INT 54
1340: PUSH
1341: LD_INT 55
1343: PUSH
1344: LD_INT 56
1346: PUSH
1347: LD_INT 57
1349: PUSH
1350: LD_INT 58
1352: PUSH
1353: LD_INT 59
1355: PUSH
1356: LD_INT 60
1358: PUSH
1359: LD_INT 61
1361: PUSH
1362: LD_INT 62
1364: PUSH
1365: LD_INT 80
1367: PUSH
1368: LD_INT 82
1370: PUSH
1371: LD_INT 83
1373: PUSH
1374: LD_INT 84
1376: PUSH
1377: LD_INT 85
1379: PUSH
1380: LD_INT 86
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: ST_TO_ADDR
1436: GO 1899
1438: LD_INT 2
1440: DOUBLE
1441: EQUAL
1442: IFTRUE 1446
1444: GO 1668
1446: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1447: LD_ADDR_VAR 0 4
1451: PUSH
1452: LD_INT 35
1454: PUSH
1455: LD_INT 45
1457: PUSH
1458: LD_INT 46
1460: PUSH
1461: LD_INT 47
1463: PUSH
1464: LD_INT 82
1466: PUSH
1467: LD_INT 83
1469: PUSH
1470: LD_INT 84
1472: PUSH
1473: LD_INT 85
1475: PUSH
1476: LD_INT 87
1478: PUSH
1479: LD_INT 70
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 3
1490: PUSH
1491: LD_INT 4
1493: PUSH
1494: LD_INT 5
1496: PUSH
1497: LD_INT 6
1499: PUSH
1500: LD_INT 15
1502: PUSH
1503: LD_INT 18
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: LD_INT 17
1511: PUSH
1512: LD_INT 8
1514: PUSH
1515: LD_INT 20
1517: PUSH
1518: LD_INT 21
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 72
1526: PUSH
1527: LD_INT 26
1529: PUSH
1530: LD_INT 69
1532: PUSH
1533: LD_INT 39
1535: PUSH
1536: LD_INT 40
1538: PUSH
1539: LD_INT 41
1541: PUSH
1542: LD_INT 42
1544: PUSH
1545: LD_INT 43
1547: PUSH
1548: LD_INT 48
1550: PUSH
1551: LD_INT 49
1553: PUSH
1554: LD_INT 50
1556: PUSH
1557: LD_INT 51
1559: PUSH
1560: LD_INT 52
1562: PUSH
1563: LD_INT 53
1565: PUSH
1566: LD_INT 54
1568: PUSH
1569: LD_INT 55
1571: PUSH
1572: LD_INT 56
1574: PUSH
1575: LD_INT 60
1577: PUSH
1578: LD_INT 61
1580: PUSH
1581: LD_INT 62
1583: PUSH
1584: LD_INT 66
1586: PUSH
1587: LD_INT 67
1589: PUSH
1590: LD_INT 68
1592: PUSH
1593: LD_INT 81
1595: PUSH
1596: LD_INT 82
1598: PUSH
1599: LD_INT 83
1601: PUSH
1602: LD_INT 84
1604: PUSH
1605: LD_INT 85
1607: PUSH
1608: LD_INT 87
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: ST_TO_ADDR
1666: GO 1899
1668: LD_INT 3
1670: DOUBLE
1671: EQUAL
1672: IFTRUE 1676
1674: GO 1898
1676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_INT 46
1684: PUSH
1685: LD_INT 47
1687: PUSH
1688: LD_INT 1
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: LD_INT 82
1696: PUSH
1697: LD_INT 83
1699: PUSH
1700: LD_INT 84
1702: PUSH
1703: LD_INT 85
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 11
1711: PUSH
1712: LD_INT 9
1714: PUSH
1715: LD_INT 20
1717: PUSH
1718: LD_INT 19
1720: PUSH
1721: LD_INT 21
1723: PUSH
1724: LD_INT 24
1726: PUSH
1727: LD_INT 22
1729: PUSH
1730: LD_INT 25
1732: PUSH
1733: LD_INT 28
1735: PUSH
1736: LD_INT 29
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 31
1744: PUSH
1745: LD_INT 37
1747: PUSH
1748: LD_INT 38
1750: PUSH
1751: LD_INT 32
1753: PUSH
1754: LD_INT 27
1756: PUSH
1757: LD_INT 33
1759: PUSH
1760: LD_INT 69
1762: PUSH
1763: LD_INT 39
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 40
1771: PUSH
1772: LD_INT 71
1774: PUSH
1775: LD_INT 23
1777: PUSH
1778: LD_INT 44
1780: PUSH
1781: LD_INT 48
1783: PUSH
1784: LD_INT 49
1786: PUSH
1787: LD_INT 50
1789: PUSH
1790: LD_INT 51
1792: PUSH
1793: LD_INT 52
1795: PUSH
1796: LD_INT 53
1798: PUSH
1799: LD_INT 54
1801: PUSH
1802: LD_INT 55
1804: PUSH
1805: LD_INT 56
1807: PUSH
1808: LD_INT 57
1810: PUSH
1811: LD_INT 58
1813: PUSH
1814: LD_INT 59
1816: PUSH
1817: LD_INT 63
1819: PUSH
1820: LD_INT 64
1822: PUSH
1823: LD_INT 65
1825: PUSH
1826: LD_INT 82
1828: PUSH
1829: LD_INT 83
1831: PUSH
1832: LD_INT 84
1834: PUSH
1835: LD_INT 85
1837: PUSH
1838: LD_INT 86
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
1896: GO 1899
1898: POP
// if state > - 1 and state < 3 then
1899: LD_VAR 0 3
1903: PUSH
1904: LD_INT 1
1906: NEG
1907: GREATER
1908: PUSH
1909: LD_VAR 0 3
1913: PUSH
1914: LD_INT 3
1916: LESS
1917: AND
1918: IFFALSE 1975
// for i in result do
1920: LD_ADDR_VAR 0 5
1924: PUSH
1925: LD_VAR 0 4
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1973
// if GetTech ( i , side ) <> state then
1933: LD_VAR 0 5
1937: PPUSH
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 321
1947: PUSH
1948: LD_VAR 0 3
1952: NONEQUAL
1953: IFFALSE 1971
// result := result diff i ;
1955: LD_ADDR_VAR 0 4
1959: PUSH
1960: LD_VAR 0 4
1964: PUSH
1965: LD_VAR 0 5
1969: DIFF
1970: ST_TO_ADDR
1971: GO 1930
1973: POP
1974: POP
// end ; end_of_file
1975: LD_VAR 0 4
1979: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1980: LD_INT 0
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 5 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 5
1993: ST_TO_ADDR
// uc_nation := 2 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 2
2001: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
2002: LD_INT 5
2004: PPUSH
2005: CALL_OW 274
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 45
2015: PPUSH
2016: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
2020: LD_ADDR_EXP 34
2024: PUSH
2025: LD_STRING Farmer
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_STRING 
2033: PPUSH
2034: CALL 297 0 3
2038: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2039: LD_ADDR_EXP 35
2043: PUSH
2044: LD_STRING Omar
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: LD_STRING 
2052: PPUSH
2053: CALL 297 0 3
2057: ST_TO_ADDR
// omarSquad := [ ] ;
2058: LD_ADDR_EXP 38
2062: PUSH
2063: EMPTY
2064: ST_TO_ADDR
// heikeSquad := [ ] ;
2065: LD_ADDR_EXP 39
2069: PUSH
2070: EMPTY
2071: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2072: LD_ADDR_EXP 40
2076: PUSH
2077: EMPTY
2078: ST_TO_ADDR
// omarCargo := [ ] ;
2079: LD_ADDR_EXP 41
2083: PUSH
2084: EMPTY
2085: ST_TO_ADDR
// for i := 1 to 5 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 5
2098: PUSH
2099: FOR_TO
2100: IFFALSE 2258
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PUSH
2127: LD_VAR 0 2
2131: ARRAY
2132: PPUSH
2133: LD_INT 3
2135: PPUSH
2136: CALL_OW 380
// un := CreateHuman ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_EXP 38
2159: PUSH
2160: LD_VAR 0 3
2164: UNION
2165: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2166: LD_VAR 0 3
2170: PPUSH
2171: LD_INT 87
2173: PUSH
2174: LD_INT 30
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 91
2183: PUSH
2184: LD_INT 32
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 15
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 79
2203: PUSH
2204: LD_INT 14
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 82
2213: PUSH
2214: LD_INT 13
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: PUSH
2228: LD_VAR 0 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: CALL 928 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2241: LD_VAR 0 3
2245: PPUSH
2246: LD_INT 93
2248: PPUSH
2249: LD_INT 21
2251: PPUSH
2252: CALL_OW 118
// end ;
2256: GO 2099
2258: POP
2259: POP
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2268: LD_ADDR_EXP 26
2272: PUSH
2273: LD_STRING Heike
2275: PPUSH
2276: LD_EXP 1
2280: NOT
2281: PPUSH
2282: LD_EXP 2
2286: PPUSH
2287: CALL 297 0 3
2291: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2292: LD_ADDR_EXP 30
2296: PUSH
2297: LD_STRING Aviradze
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_EXP 2
2310: PPUSH
2311: CALL 297 0 3
2315: ST_TO_ADDR
// tmp := [ ] ;
2316: LD_ADDR_VAR 0 4
2320: PUSH
2321: EMPTY
2322: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2323: LD_ADDR_EXP 27
2327: PUSH
2328: LD_STRING Givi
2330: PPUSH
2331: LD_EXP 1
2335: NOT
2336: PPUSH
2337: LD_EXP 2
2341: PPUSH
2342: CALL 297 0 3
2346: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2347: LD_ADDR_EXP 28
2351: PUSH
2352: LD_STRING Mike
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_EXP 2
2365: PPUSH
2366: CALL 297 0 3
2370: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2371: LD_ADDR_EXP 29
2375: PUSH
2376: LD_STRING Kamil
2378: PPUSH
2379: LD_EXP 1
2383: NOT
2384: PPUSH
2385: LD_EXP 2
2389: PPUSH
2390: CALL 297 0 3
2394: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2395: LD_ADDR_EXP 31
2399: PUSH
2400: LD_STRING Kaia
2402: PPUSH
2403: LD_EXP 1
2407: NOT
2408: PPUSH
2409: LD_EXP 2
2413: PPUSH
2414: CALL 297 0 3
2418: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2419: LD_ADDR_EXP 32
2423: PUSH
2424: LD_STRING Sophia
2426: PPUSH
2427: LD_EXP 1
2431: NOT
2432: PPUSH
2433: LD_EXP 2
2437: PPUSH
2438: CALL 297 0 3
2442: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2443: LD_ADDR_EXP 33
2447: PUSH
2448: LD_STRING Markov
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_EXP 2
2461: PPUSH
2462: CALL 297 0 3
2466: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2467: LD_ADDR_EXP 40
2471: PUSH
2472: LD_STRING 02_others
2474: PPUSH
2475: CALL_OW 31
2479: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_EXP 28
2489: PUSH
2490: LD_EXP 29
2494: PUSH
2495: LD_EXP 31
2499: PUSH
2500: LD_EXP 32
2504: PUSH
2505: LD_EXP 33
2509: PUSH
2510: LD_EXP 27
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PUSH
2523: LD_EXP 40
2527: ADD
2528: PUSH
2529: LD_INT 0
2531: DIFF
2532: ST_TO_ADDR
// heikeSquad := tmp ;
2533: LD_ADDR_EXP 39
2537: PUSH
2538: LD_VAR 0 4
2542: ST_TO_ADDR
// uc_nation := 0 ;
2543: LD_ADDR_OWVAR 21
2547: PUSH
2548: LD_INT 0
2550: ST_TO_ADDR
// hc_class := class_apeman ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 12
2558: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2559: LD_ADDR_OWVAR 31
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: LD_INT 0
2569: PUSH
2570: LD_INT 0
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: ST_TO_ADDR
// hc_gallery :=  ;
2582: LD_ADDR_OWVAR 33
2586: PUSH
2587: LD_STRING 
2589: ST_TO_ADDR
// hc_name :=  ;
2590: LD_ADDR_OWVAR 26
2594: PUSH
2595: LD_STRING 
2597: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: LD_VAR 0 4
2607: PUSH
2608: CALL_OW 44
2612: UNION
2613: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2614: LD_EXP 26
2618: PPUSH
2619: LD_INT 92
2621: PPUSH
2622: LD_INT 17
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2632: LD_EXP 34
2636: PPUSH
2637: LD_INT 95
2639: PPUSH
2640: LD_INT 19
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2650: LD_EXP 35
2654: PPUSH
2655: LD_INT 89
2657: PPUSH
2658: LD_INT 25
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2668: LD_EXP 30
2672: PPUSH
2673: LD_INT 92
2675: PPUSH
2676: LD_INT 27
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2686: LD_EXP 35
2690: PPUSH
2691: LD_EXP 30
2695: PPUSH
2696: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2700: LD_EXP 30
2704: PPUSH
2705: LD_EXP 35
2709: PPUSH
2710: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2714: LD_EXP 26
2718: PUSH
2719: LD_EXP 34
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: LD_EXP 35
2732: PPUSH
2733: CALL_OW 119
// if tmp then
2737: LD_VAR 0 4
2741: IFFALSE 2795
// for i in tmp do
2743: LD_ADDR_VAR 0 2
2747: PUSH
2748: LD_VAR 0 4
2752: PUSH
2753: FOR_IN
2754: IFFALSE 2793
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2756: LD_VAR 0 2
2760: PPUSH
2761: LD_INT 94
2763: PPUSH
2764: LD_INT 14
2766: PPUSH
2767: LD_INT 4
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2777: LD_VAR 0 2
2781: PPUSH
2782: LD_EXP 26
2786: PPUSH
2787: CALL_OW 119
// end ;
2791: GO 2753
2793: POP
2794: POP
// farmerSquad := [ ] ;
2795: LD_ADDR_EXP 37
2799: PUSH
2800: EMPTY
2801: ST_TO_ADDR
// uc_side := 5 ;
2802: LD_ADDR_OWVAR 20
2806: PUSH
2807: LD_INT 5
2809: ST_TO_ADDR
// uc_nation := 2 ;
2810: LD_ADDR_OWVAR 21
2814: PUSH
2815: LD_INT 2
2817: ST_TO_ADDR
// for i := 1 to 4 do
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: DOUBLE
2824: LD_INT 1
2826: DEC
2827: ST_TO_ADDR
2828: LD_INT 4
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2910
// begin PrepareHuman ( false , 1 , 2 ) ;
2834: LD_INT 0
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: LD_INT 2
2842: PPUSH
2843: CALL_OW 380
// un := CreateHuman ;
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: CALL_OW 44
2856: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 102
2864: PPUSH
2865: LD_INT 27
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2878: LD_ADDR_EXP 37
2882: PUSH
2883: LD_EXP 37
2887: PUSH
2888: LD_VAR 0 3
2892: UNION
2893: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2894: LD_VAR 0 3
2898: PPUSH
2899: LD_EXP 35
2903: PPUSH
2904: CALL_OW 119
// end ;
2908: GO 2831
2910: POP
2911: POP
// for i := 1 to 2 do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 2
2924: PUSH
2925: FOR_TO
2926: IFFALSE 3004
// begin PrepareHuman ( false , 2 , 2 ) ;
2928: LD_INT 0
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: LD_INT 2
2936: PPUSH
2937: CALL_OW 380
// un := CreateHuman ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: CALL_OW 44
2950: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 108
2958: PPUSH
2959: LD_INT 62
2961: PPUSH
2962: LD_INT 2
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2972: LD_ADDR_EXP 37
2976: PUSH
2977: LD_EXP 37
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_EXP 35
2997: PPUSH
2998: CALL_OW 119
// end ;
3002: GO 2925
3004: POP
3005: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
3006: LD_INT 109
3008: PPUSH
3009: LD_INT 63
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_INT 15
3017: NEG
3018: PPUSH
3019: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
3023: LD_INT 109
3025: PPUSH
3026: LD_INT 63
3028: PPUSH
3029: LD_INT 2
3031: PPUSH
3032: CALL_OW 331
// end ;
3036: LD_VAR 0 1
3040: RET
// export function PrepareIbrahim ( x , y ) ; begin
3041: LD_INT 0
3043: PPUSH
// uc_side := 6 ;
3044: LD_ADDR_OWVAR 20
3048: PUSH
3049: LD_INT 6
3051: ST_TO_ADDR
// uc_nation := 3 ;
3052: LD_ADDR_OWVAR 21
3056: PUSH
3057: LD_INT 3
3059: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3060: LD_ADDR_EXP 36
3064: PUSH
3065: LD_STRING IbrahimRu
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: LD_STRING 
3073: PPUSH
3074: CALL 297 0 3
3078: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3079: LD_EXP 36
3083: PPUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 8
3096: PPUSH
3097: LD_INT 1
3099: PPUSH
3100: CALL_OW 50
// end ;
3104: LD_VAR 0 3
3108: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3109: LD_EXP 35
3113: PUSH
3114: LD_EXP 38
3118: ADD
3119: PPUSH
3120: LD_INT 95
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: IFFALSE 3190
3136: GO 3138
3138: DISABLE
3139: LD_INT 0
3141: PPUSH
// begin enable ;
3142: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3143: LD_ADDR_VAR 0 1
3147: PUSH
3148: LD_EXP 35
3152: PUSH
3153: LD_EXP 38
3157: ADD
3158: PPUSH
3159: LD_INT 95
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PPUSH
3169: CALL_OW 72
3173: PUSH
3174: FOR_IN
3175: IFFALSE 3188
// RemoveUnit ( i ) ;
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 64
3186: GO 3174
3188: POP
3189: POP
// end ;
3190: PPOPN 1
3192: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3193: LD_EXP 3
3197: PUSH
3198: LD_EXP 34
3202: PPUSH
3203: LD_INT 4
3205: PPUSH
3206: CALL_OW 308
3210: AND
3211: IFFALSE 3994
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
3221: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3222: LD_EXP 34
3226: PPUSH
3227: LD_INT 110
3229: PPUSH
3230: LD_INT 60
3232: PPUSH
3233: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3237: LD_EXP 34
3241: PPUSH
3242: LD_INT 110
3244: PPUSH
3245: LD_INT 61
3247: PPUSH
3248: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: LD_EXP 37
3261: PPUSH
3262: LD_INT 25
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 72
3276: ST_TO_ADDR
// if tmp then
3277: LD_VAR 0 2
3281: IFFALSE 3375
// begin for i := 1 to 2 do
3283: LD_ADDR_VAR 0 1
3287: PUSH
3288: DOUBLE
3289: LD_INT 1
3291: DEC
3292: ST_TO_ADDR
3293: LD_INT 2
3295: PUSH
3296: FOR_TO
3297: IFFALSE 3373
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3299: LD_VAR 0 2
3303: PUSH
3304: LD_VAR 0 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 1
3326: ARRAY
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3335: LD_VAR 0 2
3339: PUSH
3340: LD_VAR 0 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3350: LD_VAR 0 2
3354: PUSH
3355: LD_VAR 0 1
3359: ARRAY
3360: PPUSH
3361: LD_INT 107
3363: PPUSH
3364: LD_INT 66
3366: PPUSH
3367: CALL_OW 171
// end ;
3371: GO 3296
3373: POP
3374: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3375: LD_ADDR_VAR 0 2
3379: PUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PPUSH
3395: CALL_OW 72
3399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3400: LD_INT 35
3402: PPUSH
3403: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3407: LD_ADDR_VAR 0 2
3411: PUSH
3412: LD_EXP 37
3416: PPUSH
3417: LD_INT 25
3419: PUSH
3420: LD_INT 2
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 72
3431: ST_TO_ADDR
// until tmp ;
3432: LD_VAR 0 2
3436: IFFALSE 3400
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_INT 31
3445: PPUSH
3446: LD_INT 102
3448: PPUSH
3449: LD_INT 69
3451: PPUSH
3452: LD_INT 2
3454: PPUSH
3455: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3459: LD_INT 35
3461: PPUSH
3462: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3466: LD_EXP 37
3470: PPUSH
3471: LD_INT 3
3473: PUSH
3474: LD_INT 60
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 2
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 72
3502: IFFALSE 3459
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: LD_EXP 37
3513: PPUSH
3514: LD_INT 25
3516: PUSH
3517: LD_INT 2
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3529: LD_VAR 0 2
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: LD_INT 116
3539: PPUSH
3540: LD_INT 70
3542: PPUSH
3543: LD_INT 5
3545: PPUSH
3546: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3550: LD_VAR 0 2
3554: PPUSH
3555: LD_INT 31
3557: PPUSH
3558: LD_INT 108
3560: PPUSH
3561: LD_INT 50
3563: PPUSH
3564: LD_INT 2
3566: PPUSH
3567: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3571: LD_INT 35
3573: PPUSH
3574: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3578: LD_INT 22
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 30
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 3
3600: PUSH
3601: LD_INT 57
3603: PUSH
3604: EMPTY
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: IFFALSE 3571
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 5
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 30
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: LD_INT 57
3652: PUSH
3653: EMPTY
3654: LIST
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: PPUSH
3665: CALL_OW 69
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: LD_EXP 37
3683: PPUSH
3684: LD_INT 25
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PPUSH
3694: CALL_OW 72
3698: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_VAR 0 3
3708: PPUSH
3709: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3713: LD_INT 35
3715: PPUSH
3716: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3720: LD_INT 22
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 30
3732: PUSH
3733: LD_INT 31
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 3
3742: PUSH
3743: LD_INT 57
3745: PUSH
3746: EMPTY
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: PPUSH
3758: CALL_OW 69
3762: PUSH
3763: LD_INT 2
3765: GREATEREQUAL
3766: IFFALSE 3713
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: LD_EXP 37
3777: PPUSH
3778: LD_INT 25
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 72
3792: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3793: LD_VAR 0 2
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: PPUSH
3802: LD_INT 5
3804: PPUSH
3805: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3809: LD_VAR 0 2
3813: PUSH
3814: LD_INT 2
3816: ARRAY
3817: PUSH
3818: LD_VAR 0 2
3822: PUSH
3823: LD_INT 3
3825: ARRAY
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PPUSH
3831: LD_VAR 0 3
3835: PPUSH
3836: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3840: LD_VAR 0 2
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 3
3856: ARRAY
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3869: LD_VAR 0 2
3873: PUSH
3874: LD_INT 2
3876: ARRAY
3877: PUSH
3878: LD_VAR 0 2
3882: PUSH
3883: LD_INT 3
3885: ARRAY
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PPUSH
3891: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3895: LD_ADDR_VAR 0 4
3899: PUSH
3900: LD_INT 22
3902: PUSH
3903: LD_INT 5
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 31
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: ST_TO_ADDR
// for i := 1 to 2 do
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: DOUBLE
3935: LD_INT 1
3937: DEC
3938: ST_TO_ADDR
3939: LD_INT 2
3941: PUSH
3942: FOR_TO
3943: IFFALSE 3977
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3945: LD_VAR 0 2
3949: PUSH
3950: LD_VAR 0 1
3954: PUSH
3955: LD_INT 1
3957: PLUS
3958: ARRAY
3959: PPUSH
3960: LD_VAR 0 4
3964: PUSH
3965: LD_VAR 0 1
3969: ARRAY
3970: PPUSH
3971: CALL_OW 180
3975: GO 3942
3977: POP
3978: POP
// wait ( 1 1$00 ) ;
3979: LD_INT 2100
3981: PPUSH
3982: CALL_OW 67
// farmerBaseReady := true ;
3986: LD_ADDR_EXP 4
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// end ;
3994: PPOPN 4
3996: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3997: LD_EXP 4
4001: PUSH
4002: LD_EXP 10
4006: NOT
4007: AND
4008: IFFALSE 4530
4010: GO 4012
4012: DISABLE
4013: LD_INT 0
4015: PPUSH
4016: PPUSH
4017: PPUSH
4018: PPUSH
4019: PPUSH
// begin enable ;
4020: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_EXP 37
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: PUSH
4046: LD_EXP 34
4050: ADD
4051: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: LD_EXP 37
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4077: LD_ADDR_VAR 0 5
4081: PUSH
4082: LD_INT 22
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 24
4107: PUSH
4108: LD_INT 1000
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: PPUSH
4124: CALL_OW 69
4128: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 5
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 30
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PPUSH
4158: CALL_OW 69
4162: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4163: LD_VAR 0 4
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 302
4176: IFFALSE 4240
// for i in sol do
4178: LD_ADDR_VAR 0 1
4182: PUSH
4183: LD_VAR 0 3
4187: PUSH
4188: FOR_IN
4189: IFFALSE 4238
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4191: LD_VAR 0 1
4195: PPUSH
4196: CALL_OW 256
4200: PUSH
4201: LD_INT 999
4203: LESS
4204: PUSH
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 310
4214: NOT
4215: AND
4216: IFFALSE 4236
// ComEnterUnit ( i , arm [ 1 ] ) ;
4218: LD_VAR 0 1
4222: PPUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 1
4230: ARRAY
4231: PPUSH
4232: CALL_OW 120
4236: GO 4188
4238: POP
4239: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4240: LD_VAR 0 2
4244: NOT
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 1
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 21
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PPUSH
4270: CALL_OW 69
4274: NOT
4275: AND
4276: IFFALSE 4368
// begin uc_side := 5 ;
4278: LD_ADDR_OWVAR 20
4282: PUSH
4283: LD_INT 5
4285: ST_TO_ADDR
// uc_nation := 2 ;
4286: LD_ADDR_OWVAR 21
4290: PUSH
4291: LD_INT 2
4293: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4294: LD_INT 0
4296: PPUSH
4297: LD_INT 2
4299: PPUSH
4300: LD_INT 2
4302: PPUSH
4303: CALL_OW 380
// eng := CreateHuman ;
4307: LD_ADDR_VAR 0 2
4311: PUSH
4312: CALL_OW 44
4316: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4317: LD_VAR 0 2
4321: PPUSH
4322: LD_INT 102
4324: PPUSH
4325: LD_INT 8
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4335: LD_VAR 0 2
4339: PPUSH
4340: LD_INT 110
4342: PPUSH
4343: LD_INT 60
4345: PPUSH
4346: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4350: LD_ADDR_EXP 37
4354: PUSH
4355: LD_EXP 37
4359: PUSH
4360: LD_VAR 0 2
4364: UNION
4365: ST_TO_ADDR
// end else
4366: GO 4530
// begin for i in eng do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 2
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4528
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4381: LD_INT 10
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 287
4391: IFFALSE 4442
// begin if IsInUnit ( i ) then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 310
4402: IFFALSE 4413
// ComExitBuilding ( i ) ;
4404: LD_VAR 0 1
4408: PPUSH
4409: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 10
4420: PPUSH
4421: CALL_OW 308
4425: NOT
4426: IFFALSE 4440
// AddComMoveToArea ( i , collectFarmerArea ) ;
4428: LD_VAR 0 1
4432: PPUSH
4433: LD_INT 10
4435: PPUSH
4436: CALL_OW 173
// end else
4440: GO 4526
// begin if damagedBuilding then
4442: LD_VAR 0 5
4446: IFFALSE 4490
// begin if IsInUnit ( i ) then
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 310
4457: IFFALSE 4470
// ComExitBuilding ( i ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: CALL_OW 122
4468: GO 4488
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_VAR 0 5
4479: PUSH
4480: LD_INT 1
4482: ARRAY
4483: PPUSH
4484: CALL_OW 130
// end else
4488: GO 4526
// if not IsInUnit ( i ) and not HasTask ( i ) then
4490: LD_VAR 0 1
4494: PPUSH
4495: CALL_OW 310
4499: NOT
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 314
4510: NOT
4511: AND
4512: IFFALSE 4526
// ComEnterUnit ( i , arDepot ) ;
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 5
4521: PPUSH
4522: CALL_OW 120
// end ; end ;
4526: GO 4378
4528: POP
4529: POP
// end ; end ;
4530: PPOPN 5
4532: END
// export function StartCargoEvacuation ; begin
4533: LD_INT 0
4535: PPUSH
// while omarCargoCounter > 0 do
4536: LD_EXP 19
4540: PUSH
4541: LD_INT 0
4543: GREATER
4544: IFFALSE 4861
// begin wait ( 0 0$40 ) ;
4546: LD_INT 1400
4548: PPUSH
4549: CALL_OW 67
// omarCargo := PrepareCargo ;
4553: LD_ADDR_EXP 41
4557: PUSH
4558: CALL 4866 0 0
4562: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
4563: LD_EXP 41
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4575: LD_EXP 41
4579: PPUSH
4580: LD_INT 107
4582: PPUSH
4583: LD_INT 59
4585: PPUSH
4586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4597: LD_EXP 41
4601: PPUSH
4602: LD_INT 107
4604: PPUSH
4605: LD_INT 59
4607: PPUSH
4608: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4612: LD_EXP 41
4616: PPUSH
4617: CALL_OW 302
4621: NOT
4622: PUSH
4623: LD_EXP 41
4627: PPUSH
4628: CALL_OW 301
4632: OR
4633: IFFALSE 4637
// continue ;
4635: GO 4590
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4637: LD_EXP 41
4641: PPUSH
4642: LD_INT 107
4644: PPUSH
4645: LD_INT 59
4647: PPUSH
4648: CALL_OW 307
4652: PUSH
4653: LD_EXP 41
4657: PPUSH
4658: LD_INT 5
4660: PPUSH
4661: CALL_OW 296
4665: PUSH
4666: LD_INT 6
4668: LESS
4669: OR
4670: IFFALSE 4590
// SetTag ( omarCargo , 1 ) ;
4672: LD_EXP 41
4676: PPUSH
4677: LD_INT 1
4679: PPUSH
4680: CALL_OW 109
// wait ( 0 0$05 ) ;
4684: LD_INT 175
4686: PPUSH
4687: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
4691: LD_EXP 41
4695: PPUSH
4696: LD_INT 5
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4706: LD_EXP 41
4710: PPUSH
4711: LD_INT 103
4713: PPUSH
4714: LD_INT 9
4716: PPUSH
4717: CALL_OW 171
// wait ( 0 0$1 ) ;
4721: LD_INT 35
4723: PPUSH
4724: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4728: LD_EXP 41
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 100
4738: PPUSH
4739: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
4743: LD_INT 35
4745: PPUSH
4746: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4750: LD_EXP 41
4754: PPUSH
4755: LD_INT 103
4757: PPUSH
4758: LD_INT 9
4760: PPUSH
4761: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4765: LD_EXP 41
4769: PPUSH
4770: CALL_OW 302
4774: NOT
4775: PUSH
4776: LD_EXP 41
4780: PPUSH
4781: CALL_OW 301
4785: OR
4786: IFFALSE 4790
// continue ;
4788: GO 4743
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
4790: LD_EXP 41
4794: PPUSH
4795: LD_INT 103
4797: PPUSH
4798: LD_INT 9
4800: PPUSH
4801: CALL_OW 307
4805: PUSH
4806: LD_EXP 41
4810: PPUSH
4811: LD_INT 3
4813: PPUSH
4814: CALL_OW 308
4818: OR
4819: PUSH
4820: LD_EXP 41
4824: PPUSH
4825: CALL_OW 110
4829: PUSH
4830: LD_INT 0
4832: GREATER
4833: AND
4834: IFFALSE 4743
// RemoveUnit ( omarCargo ) ;
4836: LD_EXP 41
4840: PPUSH
4841: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4845: LD_ADDR_EXP 19
4849: PUSH
4850: LD_EXP 19
4854: PUSH
4855: LD_INT 1
4857: MINUS
4858: ST_TO_ADDR
// end ;
4859: GO 4536
// end ;
4861: LD_VAR 0 1
4865: RET
// export function PrepareCargo ; var un , veh ; begin
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4871: LD_ADDR_VAR 0 3
4875: PUSH
4876: LD_INT 5
4878: PPUSH
4879: LD_INT 2
4881: PPUSH
4882: LD_INT 13
4884: PPUSH
4885: LD_INT 1
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_INT 32
4893: PPUSH
4894: LD_INT 80
4896: PPUSH
4897: CALL 360 0 7
4901: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4914: LD_VAR 0 3
4918: PPUSH
4919: LD_INT 101
4921: PPUSH
4922: LD_INT 8
4924: PPUSH
4925: LD_INT 0
4927: PPUSH
4928: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 3
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 380
// un := CreateHuman ;
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: CALL_OW 44
4954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4955: LD_VAR 0 2
4959: PPUSH
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 52
// result := veh ;
4969: LD_ADDR_VAR 0 1
4973: PUSH
4974: LD_VAR 0 3
4978: ST_TO_ADDR
// end ; end_of_file
4979: LD_VAR 0 1
4983: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4984: LD_INT 0
4986: PPUSH
4987: PPUSH
4988: PPUSH
// usForces := [ ] ;
4989: LD_ADDR_EXP 42
4993: PUSH
4994: EMPTY
4995: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4996: LD_ADDR_EXP 44
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: LD_INT 32
5006: PUSH
5007: LD_INT 27
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 43
5024: PUSH
5025: LD_INT 24
5027: PUSH
5028: LD_INT 5
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PUSH
5037: LD_INT 27
5039: PUSH
5040: LD_INT 29
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
5060: LD_INT 11
5062: PPUSH
5063: CALL_OW 274
5067: PPUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 150
5073: PUSH
5074: LD_INT 120
5076: PUSH
5077: LD_INT 100
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: PUSH
5085: LD_OWVAR 67
5089: ARRAY
5090: PPUSH
5091: CALL_OW 277
// if Difficulty = 1 then
5095: LD_OWVAR 67
5099: PUSH
5100: LD_INT 1
5102: EQUAL
5103: IFFALSE 5112
// RemoveUnit ( hillBun ) ;
5105: LD_INT 14
5107: PPUSH
5108: CALL_OW 64
// uc_side := 1 ;
5112: LD_ADDR_OWVAR 20
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// uc_nation := 1 ;
5120: LD_ADDR_OWVAR 21
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// hc_gallery :=  ;
5128: LD_ADDR_OWVAR 33
5132: PUSH
5133: LD_STRING 
5135: ST_TO_ADDR
// hc_name :=  ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING 
5143: ST_TO_ADDR
// hc_importance := 0 ;
5144: LD_ADDR_OWVAR 32
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5152: LD_INT 1
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: LD_INT 3
5160: PPUSH
5161: CALL_OW 380
// usCommander := CreateHuman ;
5165: LD_ADDR_EXP 43
5169: PUSH
5170: CALL_OW 44
5174: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5175: LD_EXP 43
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 52
// if hillBun then
5187: LD_INT 14
5189: IFFALSE 5271
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5191: LD_INT 0
5193: PPUSH
5194: LD_INT 1
5196: PPUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 2
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: PUSH
5211: LD_OWVAR 67
5215: ARRAY
5216: PPUSH
5217: CALL_OW 380
// un := CreateHuman ;
5221: LD_ADDR_VAR 0 3
5225: PUSH
5226: CALL_OW 44
5230: ST_TO_ADDR
// usForces := usForces union un ;
5231: LD_ADDR_EXP 42
5235: PUSH
5236: LD_EXP 42
5240: PUSH
5241: LD_VAR 0 3
5245: UNION
5246: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5247: LD_VAR 0 3
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 14
5266: PPUSH
5267: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5271: LD_ADDR_VAR 0 2
5275: PUSH
5276: DOUBLE
5277: LD_INT 1
5279: DEC
5280: ST_TO_ADDR
5281: LD_INT 2
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 4
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: PUSH
5295: LD_OWVAR 67
5299: ARRAY
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5444
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5304: LD_INT 0
5306: PPUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 2
5315: PUSH
5316: LD_INT 3
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PUSH
5324: LD_OWVAR 67
5328: ARRAY
5329: PPUSH
5330: CALL_OW 380
// un := CreateHuman ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: CALL_OW 44
5343: ST_TO_ADDR
// usForces := usForces union un ;
5344: LD_ADDR_EXP 42
5348: PUSH
5349: LD_EXP 42
5353: PUSH
5354: LD_VAR 0 3
5358: UNION
5359: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5360: LD_VAR 0 3
5364: PPUSH
5365: LD_INT 39
5367: PPUSH
5368: LD_INT 24
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: LD_INT 0
5376: PPUSH
5377: CALL_OW 50
// if i < 3 then
5381: LD_VAR 0 2
5385: PUSH
5386: LD_INT 3
5388: LESS
5389: IFFALSE 5442
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5391: LD_VAR 0 3
5395: PPUSH
5396: LD_INT 22
5398: PUSH
5399: LD_INT 1
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 58
5408: PUSH
5409: EMPTY
5410: LIST
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 31
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PUSH
5432: LD_VAR 0 2
5436: ARRAY
5437: PPUSH
5438: CALL_OW 120
// end ;
5442: GO 5301
5444: POP
5445: POP
// for i := 1 to 2 do
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_INT 2
5458: PUSH
5459: FOR_TO
5460: IFFALSE 5524
// begin PrepareHuman ( false , 2 , 2 ) ;
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 2
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 380
// un := CreateHuman ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: CALL_OW 44
5484: ST_TO_ADDR
// usForces := usForces union un ;
5485: LD_ADDR_EXP 42
5489: PUSH
5490: LD_EXP 42
5494: PUSH
5495: LD_VAR 0 3
5499: UNION
5500: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5501: LD_VAR 0 3
5505: PPUSH
5506: LD_INT 39
5508: PPUSH
5509: LD_INT 24
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: LD_INT 0
5517: PPUSH
5518: CALL_OW 50
// end ;
5522: GO 5459
5524: POP
5525: POP
// PrepareHuman ( false , 4 , 1 ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 4
5531: PPUSH
5532: LD_INT 1
5534: PPUSH
5535: CALL_OW 380
// un := CreateHuman ;
5539: LD_ADDR_VAR 0 3
5543: PUSH
5544: CALL_OW 44
5548: ST_TO_ADDR
// usForces := usForces union un ;
5549: LD_ADDR_EXP 42
5553: PUSH
5554: LD_EXP 42
5558: PUSH
5559: LD_VAR 0 3
5563: UNION
5564: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5565: LD_VAR 0 3
5569: PPUSH
5570: LD_INT 39
5572: PPUSH
5573: LD_INT 24
5575: PPUSH
5576: LD_INT 4
5578: PPUSH
5579: LD_INT 0
5581: PPUSH
5582: CALL_OW 50
// end ;
5586: LD_VAR 0 1
5590: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5591: LD_EXP 42
5595: PUSH
5596: LD_EXP 6
5600: NOT
5601: AND
5602: IFFALSE 6033
5604: GO 5606
5606: DISABLE
5607: LD_INT 0
5609: PPUSH
5610: PPUSH
5611: PPUSH
5612: PPUSH
5613: PPUSH
// begin enable ;
5614: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5615: LD_ADDR_VAR 0 3
5619: PUSH
5620: LD_EXP 42
5624: PPUSH
5625: LD_INT 25
5627: PUSH
5628: LD_INT 2
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 72
5639: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_EXP 42
5649: PPUSH
5650: LD_INT 25
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 72
5664: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5665: LD_ADDR_VAR 0 5
5669: PUSH
5670: LD_EXP 42
5674: PPUSH
5675: LD_INT 25
5677: PUSH
5678: LD_INT 4
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL_OW 72
5689: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5690: LD_INT 7
5692: PPUSH
5693: LD_INT 22
5695: PUSH
5696: LD_INT 2
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PPUSH
5703: CALL_OW 70
5707: PUSH
5708: LD_INT 1
5710: EQUAL
5711: IFFALSE 5787
// for i in sol do
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: LD_VAR 0 4
5722: PUSH
5723: FOR_IN
5724: IFFALSE 5785
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5726: LD_VAR 0 1
5730: PPUSH
5731: CALL_OW 310
5735: NOT
5736: PUSH
5737: LD_VAR 0 1
5741: PPUSH
5742: CALL_OW 310
5746: PPUSH
5747: CALL_OW 266
5751: PUSH
5752: LD_INT 4
5754: EQUAL
5755: NOT
5756: OR
5757: IFFALSE 5783
// begin ComExitBuilding ( i ) ;
5759: LD_VAR 0 1
5763: PPUSH
5764: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5768: LD_VAR 0 1
5772: PPUSH
5773: LD_INT 37
5775: PPUSH
5776: LD_INT 23
5778: PPUSH
5779: CALL_OW 174
// end ;
5783: GO 5723
5785: POP
5786: POP
// if eng then
5787: LD_VAR 0 3
5791: IFFALSE 6033
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5793: LD_ADDR_VAR 0 2
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 95
5810: PUSH
5811: LD_INT 7
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 21
5820: PUSH
5821: LD_INT 3
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: LD_INT 24
5833: PUSH
5834: LD_INT 1000
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 69
5855: ST_TO_ADDR
// if b then
5856: LD_VAR 0 2
5860: IFFALSE 5891
// begin ComExitBuilding ( eng ) ;
5862: LD_VAR 0 3
5866: PPUSH
5867: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_VAR 0 2
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: CALL_OW 190
// end else
5889: GO 6033
// begin for i in eng do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_VAR 0 3
5900: PUSH
5901: FOR_IN
5902: IFFALSE 6031
// if not HasTask ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 314
5913: NOT
5914: IFFALSE 6029
// begin if americanBuildList then
5916: LD_EXP 44
5920: IFFALSE 6005
// begin if IsInUnit ( i ) then
5922: LD_VAR 0 1
5926: PPUSH
5927: CALL_OW 310
5931: IFFALSE 5942
// ComExitBuilding ( i ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_EXP 44
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: LD_EXP 44
5964: PUSH
5965: LD_INT 1
5967: ARRAY
5968: PUSH
5969: LD_INT 2
5971: ARRAY
5972: PPUSH
5973: LD_EXP 44
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: PUSH
5982: LD_INT 3
5984: ARRAY
5985: PPUSH
5986: LD_EXP 44
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_INT 4
5997: ARRAY
5998: PPUSH
5999: CALL_OW 205
// end else
6003: GO 6029
// if not IsInUnit ( i ) then
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 310
6014: NOT
6015: IFFALSE 6029
// ComEnterUnit ( i , usDepot ) ;
6017: LD_VAR 0 1
6021: PPUSH
6022: LD_INT 11
6024: PPUSH
6025: CALL_OW 120
// end ;
6029: GO 5901
6031: POP
6032: POP
// end ; end ; end ;
6033: PPOPN 5
6035: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
6036: LD_INT 0
6038: PPUSH
6039: PPUSH
6040: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 35
6048: PUSH
6049: LD_INT 45
6051: PUSH
6052: LD_INT 48
6054: PUSH
6055: LD_EXP 53
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: ST_TO_ADDR
// for i in tech do
6066: LD_ADDR_VAR 0 4
6070: PUSH
6071: LD_VAR 0 3
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6095
// AddComResearch ( lab , i ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_VAR 0 4
6088: PPUSH
6089: CALL_OW 184
6093: GO 6076
6095: POP
6096: POP
// end ;
6097: LD_VAR 0 2
6101: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6102: LD_EXP 11
6106: PUSH
6107: LD_EXP 21
6111: PUSH
6112: LD_EXP 25
6116: LESSEQUAL
6117: AND
6118: IFFALSE 6143
6120: GO 6122
6122: DISABLE
// begin enable ;
6123: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6124: LD_INT 35
6126: PPUSH
6127: LD_INT 2065
6129: PPUSH
6130: CALL_OW 12
6134: PPUSH
6135: CALL_OW 67
// SendConvoy ;
6139: CALL 6241 0 0
// end ;
6143: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6144: LD_EXP 6
6148: PUSH
6149: LD_EXP 16
6153: AND
6154: IFFALSE 6240
6156: GO 6158
6158: DISABLE
// begin if americanHasEscaped then
6159: LD_EXP 7
6163: IFFALSE 6174
// wait ( 3 3$20 ) else
6165: LD_INT 7000
6167: PPUSH
6168: CALL_OW 67
6172: GO 6181
// wait ( 6 6$40 ) ;
6174: LD_INT 14000
6176: PPUSH
6177: CALL_OW 67
// SendAttack ;
6181: CALL 6973 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6185: LD_INT 14000
6187: PUSH
6188: LD_INT 11900
6190: PUSH
6191: LD_INT 9800
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_OWVAR 67
6203: ARRAY
6204: PPUSH
6205: CALL_OW 67
// SendAttack ;
6209: CALL 6973 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6213: LD_EXP 17
6217: PUSH
6218: LD_INT 6
6220: PUSH
6221: LD_INT 7
6223: PUSH
6224: LD_INT 8
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_OWVAR 67
6236: ARRAY
6237: LESS
6238: IFFALSE 6185
// end ;
6240: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6241: LD_INT 0
6243: PPUSH
6244: PPUSH
6245: PPUSH
6246: PPUSH
6247: PPUSH
6248: PPUSH
6249: PPUSH
6250: PPUSH
// road := rand ( 1 , 2 ) ;
6251: LD_ADDR_VAR 0 4
6255: PUSH
6256: LD_INT 1
6258: PPUSH
6259: LD_INT 2
6261: PPUSH
6262: CALL_OW 12
6266: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6267: LD_ADDR_VAR 0 8
6271: PUSH
6272: LD_INT 3
6274: PUSH
6275: LD_INT 8
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_VAR 0 4
6286: ARRAY
6287: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6288: LD_ADDR_VAR 0 5
6292: PUSH
6293: LD_INT 35
6295: PUSH
6296: LD_INT 66
6298: PUSH
6299: LD_INT 1
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 101
6309: PUSH
6310: LD_INT 8
6312: PUSH
6313: LD_INT 4
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6325: LD_ADDR_VAR 0 6
6329: PUSH
6330: LD_INT 34
6332: PUSH
6333: LD_INT 67
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 38
6342: PUSH
6343: LD_INT 62
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 43
6352: PUSH
6353: LD_INT 54
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 57
6362: PUSH
6363: LD_INT 57
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 77
6372: PUSH
6373: LD_INT 71
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 86
6382: PUSH
6383: LD_INT 60
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 89
6392: PUSH
6393: LD_INT 35
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 93
6402: PUSH
6403: LD_INT 17
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 97
6412: PUSH
6413: LD_INT 10
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 103
6422: PUSH
6423: LD_INT 9
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: ST_TO_ADDR
// if road = 2 then
6442: LD_VAR 0 4
6446: PUSH
6447: LD_INT 2
6449: EQUAL
6450: IFFALSE 6467
// points := ReverseArray ( points ) ;
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_VAR 0 6
6461: PPUSH
6462: CALL 1048 0 1
6466: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6467: LD_INT 4
6469: PPUSH
6470: LD_INT 1
6472: PPUSH
6473: LD_INT 2
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 12
6484: PPUSH
6485: LD_INT 80
6487: PPUSH
6488: CALL 360 0 7
// veh := CreateVehicle ;
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: CALL_OW 45
6501: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6502: LD_VAR 0 3
6506: PPUSH
6507: LD_VAR 0 5
6511: PUSH
6512: LD_VAR 0 4
6516: ARRAY
6517: PUSH
6518: LD_INT 3
6520: ARRAY
6521: PPUSH
6522: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6526: LD_VAR 0 3
6530: PPUSH
6531: LD_VAR 0 5
6535: PUSH
6536: LD_VAR 0 4
6540: ARRAY
6541: PUSH
6542: LD_INT 1
6544: ARRAY
6545: PPUSH
6546: LD_VAR 0 5
6550: PUSH
6551: LD_VAR 0 4
6555: ARRAY
6556: PUSH
6557: LD_INT 2
6559: ARRAY
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6568: LD_INT 0
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: LD_OWVAR 67
6578: PPUSH
6579: CALL_OW 380
// un := CreateHuman ;
6583: LD_ADDR_VAR 0 2
6587: PUSH
6588: CALL_OW 44
6592: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6593: LD_VAR 0 2
6597: PPUSH
6598: LD_VAR 0 3
6602: PPUSH
6603: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
6607: LD_INT 60
6609: PUSH
6610: LD_INT 56
6612: PUSH
6613: LD_INT 52
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: LD_OWVAR 67
6625: ARRAY
6626: PPUSH
6627: CALL_OW 13
6631: PUSH
6632: LD_OWVAR 1
6636: PUSH
6637: LD_INT 30
6639: MOD
6640: PLUS
6641: PUSH
6642: LD_EXP 21
6646: PUSH
6647: LD_INT 4
6649: LESS
6650: OR
6651: IFFALSE 6668
// SetCargo ( veh , mat_cans , 100 ) ;
6653: LD_VAR 0 3
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: LD_INT 100
6663: PPUSH
6664: CALL_OW 290
// for i := 2 to points do
6668: LD_ADDR_VAR 0 7
6672: PUSH
6673: DOUBLE
6674: LD_INT 2
6676: DEC
6677: ST_TO_ADDR
6678: LD_VAR 0 6
6682: PUSH
6683: FOR_TO
6684: IFFALSE 6727
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6686: LD_VAR 0 3
6690: PPUSH
6691: LD_VAR 0 6
6695: PUSH
6696: LD_VAR 0 7
6700: ARRAY
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PPUSH
6706: LD_VAR 0 6
6710: PUSH
6711: LD_VAR 0 7
6715: ARRAY
6716: PUSH
6717: LD_INT 2
6719: ARRAY
6720: PPUSH
6721: CALL_OW 171
6725: GO 6683
6727: POP
6728: POP
// convoyCounter := convoyCounter + 1 ;
6729: LD_ADDR_EXP 21
6733: PUSH
6734: LD_EXP 21
6738: PUSH
6739: LD_INT 1
6741: PLUS
6742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6743: LD_INT 35
6745: PPUSH
6746: CALL_OW 67
// if not HasTask ( veh ) then
6750: LD_VAR 0 3
6754: PPUSH
6755: CALL_OW 314
6759: NOT
6760: IFFALSE 6801
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6762: LD_VAR 0 3
6766: PPUSH
6767: LD_VAR 0 6
6771: PUSH
6772: LD_VAR 0 6
6776: ARRAY
6777: PUSH
6778: LD_INT 1
6780: ARRAY
6781: PPUSH
6782: LD_VAR 0 6
6786: PUSH
6787: LD_VAR 0 6
6791: ARRAY
6792: PUSH
6793: LD_INT 2
6795: ARRAY
6796: PPUSH
6797: CALL_OW 111
// if not IsOk ( veh ) then
6801: LD_VAR 0 3
6805: PPUSH
6806: CALL_OW 302
6810: NOT
6811: IFFALSE 6852
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6813: LD_VAR 0 2
6817: PPUSH
6818: LD_VAR 0 6
6822: PUSH
6823: LD_VAR 0 6
6827: ARRAY
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PPUSH
6833: LD_VAR 0 6
6837: PUSH
6838: LD_VAR 0 6
6842: ARRAY
6843: PUSH
6844: LD_INT 2
6846: ARRAY
6847: PPUSH
6848: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6852: LD_VAR 0 3
6856: PPUSH
6857: LD_VAR 0 8
6861: PPUSH
6862: CALL_OW 308
6866: PUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 308
6881: OR
6882: IFFALSE 6743
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6884: LD_VAR 0 2
6888: PPUSH
6889: CALL_OW 302
6893: PUSH
6894: LD_VAR 0 3
6898: PPUSH
6899: CALL_OW 302
6903: NOT
6904: AND
6905: PUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: LD_VAR 0 8
6915: PPUSH
6916: CALL_OW 308
6920: AND
6921: IFFALSE 6932
// RemoveUnit ( un ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6932: LD_VAR 0 3
6936: PPUSH
6937: LD_VAR 0 8
6941: PPUSH
6942: CALL_OW 308
6946: PUSH
6947: LD_VAR 0 3
6951: PPUSH
6952: CALL_OW 302
6956: AND
6957: IFFALSE 6968
// RemoveUnit ( veh ) ;
6959: LD_VAR 0 3
6963: PPUSH
6964: CALL_OW 64
// end ;
6968: LD_VAR 0 1
6972: RET
// export function SendAttack ; var un , veh , i ; begin
6973: LD_INT 0
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
// IncomingAttack ;
6979: CALL 15458 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6983: LD_INT 2100
6985: PPUSH
6986: LD_INT 3500
6988: PPUSH
6989: CALL_OW 12
6993: PPUSH
6994: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6998: LD_ADDR_VAR 0 4
7002: PUSH
7003: DOUBLE
7004: LD_INT 1
7006: DEC
7007: ST_TO_ADDR
7008: LD_INT 3
7010: PUSH
7011: LD_INT 3
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: ARRAY
7027: PUSH
7028: LD_EXP 17
7032: PUSH
7033: LD_INT 3
7035: DIV
7036: PLUS
7037: PUSH
7038: FOR_TO
7039: IFFALSE 7151
// begin uc_side := 1 ;
7041: LD_ADDR_OWVAR 20
7045: PUSH
7046: LD_INT 1
7048: ST_TO_ADDR
// uc_nation := 1 ;
7049: LD_ADDR_OWVAR 21
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
7057: LD_INT 0
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: PUSH
7077: LD_OWVAR 67
7081: ARRAY
7082: PPUSH
7083: CALL_OW 380
// un := CreateHuman ;
7087: LD_ADDR_VAR 0 2
7091: PUSH
7092: CALL_OW 44
7096: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7097: LD_VAR 0 2
7101: PPUSH
7102: LD_INT 37
7104: PPUSH
7105: LD_INT 70
7107: PPUSH
7108: LD_INT 3
7110: PPUSH
7111: LD_INT 0
7113: PPUSH
7114: CALL_OW 50
// usAttackers := usAttackers union un ;
7118: LD_ADDR_EXP 45
7122: PUSH
7123: LD_EXP 45
7127: PUSH
7128: LD_VAR 0 2
7132: UNION
7133: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7134: LD_VAR 0 2
7138: PPUSH
7139: LD_INT 40
7141: PPUSH
7142: LD_INT 65
7144: PPUSH
7145: CALL_OW 111
// end ;
7149: GO 7038
7151: POP
7152: POP
// uc_side := 1 ;
7153: LD_ADDR_OWVAR 20
7157: PUSH
7158: LD_INT 1
7160: ST_TO_ADDR
// uc_nation := 1 ;
7161: LD_ADDR_OWVAR 21
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7169: LD_INT 0
7171: PPUSH
7172: LD_INT 4
7174: PPUSH
7175: LD_INT 2
7177: PPUSH
7178: CALL_OW 380
// un := CreateHuman ;
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: CALL_OW 44
7191: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_INT 37
7199: PPUSH
7200: LD_INT 70
7202: PPUSH
7203: LD_INT 3
7205: PPUSH
7206: LD_INT 0
7208: PPUSH
7209: CALL_OW 50
// usAttackers := usAttackers union un ;
7213: LD_ADDR_EXP 45
7217: PUSH
7218: LD_EXP 45
7222: PUSH
7223: LD_VAR 0 2
7227: UNION
7228: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7229: LD_VAR 0 2
7233: PPUSH
7234: LD_INT 40
7236: PPUSH
7237: LD_INT 65
7239: PPUSH
7240: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7244: LD_EXP 17
7248: PUSH
7249: LD_INT 1
7251: GREATER
7252: PUSH
7253: LD_OWVAR 67
7257: PUSH
7258: LD_INT 1
7260: GREATER
7261: OR
7262: IFFALSE 7465
// begin for i := 1 to Difficulty + attackWave div 4 do
7264: LD_ADDR_VAR 0 4
7268: PUSH
7269: DOUBLE
7270: LD_INT 1
7272: DEC
7273: ST_TO_ADDR
7274: LD_OWVAR 67
7278: PUSH
7279: LD_EXP 17
7283: PUSH
7284: LD_INT 4
7286: DIV
7287: PLUS
7288: PUSH
7289: FOR_TO
7290: IFFALSE 7463
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7292: LD_ADDR_VAR 0 3
7296: PUSH
7297: LD_INT 1
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: LD_INT 2
7305: PPUSH
7306: LD_INT 1
7308: PPUSH
7309: LD_INT 1
7311: PPUSH
7312: LD_INT 4
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 1
7328: PPUSH
7329: LD_INT 3
7331: PPUSH
7332: CALL_OW 12
7336: ARRAY
7337: PPUSH
7338: LD_INT 90
7340: PPUSH
7341: CALL 360 0 7
7345: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7346: LD_VAR 0 3
7350: PPUSH
7351: LD_INT 35
7353: PPUSH
7354: LD_INT 65
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7364: LD_INT 0
7366: PPUSH
7367: LD_INT 3
7369: PPUSH
7370: LD_OWVAR 67
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: PPUSH
7379: CALL_OW 380
// un := CreateHuman ;
7383: LD_ADDR_VAR 0 2
7387: PUSH
7388: CALL_OW 44
7392: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7393: LD_VAR 0 2
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 52
// usAttackers := usAttackers union un ;
7407: LD_ADDR_EXP 45
7411: PUSH
7412: LD_EXP 45
7416: PUSH
7417: LD_VAR 0 2
7421: UNION
7422: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7423: LD_VAR 0 3
7427: PPUSH
7428: LD_INT 39
7430: PPUSH
7431: LD_INT 60
7433: PPUSH
7434: CALL_OW 111
// wait ( 0 0$2 ) ;
7438: LD_INT 70
7440: PPUSH
7441: CALL_OW 67
// usAttackers := usAttackers union veh ;
7445: LD_ADDR_EXP 45
7449: PUSH
7450: LD_EXP 45
7454: PUSH
7455: LD_VAR 0 3
7459: UNION
7460: ST_TO_ADDR
// end ;
7461: GO 7289
7463: POP
7464: POP
// end ; attackWave := attackWave + 1 ;
7465: LD_ADDR_EXP 17
7469: PUSH
7470: LD_EXP 17
7474: PUSH
7475: LD_INT 1
7477: PLUS
7478: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7479: LD_EXP 22
7483: PPUSH
7484: CALL_OW 427
// end ;
7488: LD_VAR 0 1
7492: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7493: LD_INT 0
7495: PPUSH
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
// if retreatAllowed then
7506: LD_EXP 10
7510: IFFALSE 7522
// strategy := 2 else
7512: LD_ADDR_VAR 0 5
7516: PUSH
7517: LD_INT 2
7519: ST_TO_ADDR
7520: GO 7538
// strategy := rand ( 0 , 2 ) ;
7522: LD_ADDR_VAR 0 5
7526: PUSH
7527: LD_INT 0
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: CALL_OW 12
7537: ST_TO_ADDR
// attackFormula := [ ] ;
7538: LD_ADDR_VAR 0 6
7542: PUSH
7543: EMPTY
7544: ST_TO_ADDR
// case strategy of 0 :
7545: LD_VAR 0 5
7549: PUSH
7550: LD_INT 0
7552: DOUBLE
7553: EQUAL
7554: IFTRUE 7558
7556: GO 7888
7558: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7559: LD_INT 11
7561: PPUSH
7562: LD_INT 22
7564: PUSH
7565: LD_INT 2
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 70
7590: NOT
7591: IFFALSE 7663
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7593: LD_ADDR_VAR 0 6
7597: PUSH
7598: LD_INT 41
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: PUSH
7611: LD_INT 53
7613: PUSH
7614: LD_INT 62
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 37
7623: PUSH
7624: LD_INT 63
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 44
7633: PUSH
7634: LD_INT 45
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 37
7643: PUSH
7644: LD_INT 28
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: ST_TO_ADDR
7661: GO 7886
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7663: LD_INT 12
7665: PPUSH
7666: LD_INT 22
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: LD_INT 30
7681: PUSH
7682: LD_INT 4
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 31
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 30
7701: PUSH
7702: LD_INT 32
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PPUSH
7719: CALL_OW 70
7723: NOT
7724: IFFALSE 7807
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7726: LD_ADDR_VAR 0 6
7730: PUSH
7731: LD_INT 27
7733: PUSH
7734: LD_INT 42
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 27
7743: PUSH
7744: LD_INT 32
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 53
7757: PUSH
7758: LD_INT 62
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 37
7767: PUSH
7768: LD_INT 63
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 44
7777: PUSH
7778: LD_INT 45
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 37
7787: PUSH
7788: LD_INT 28
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: ST_TO_ADDR
7805: GO 7886
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 71
7814: PUSH
7815: LD_INT 67
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 54
7824: PUSH
7825: LD_INT 35
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 63
7838: PUSH
7839: LD_INT 40
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 37
7848: PUSH
7849: LD_INT 63
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 44
7858: PUSH
7859: LD_INT 45
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 37
7868: PUSH
7869: LD_INT 28
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: ST_TO_ADDR
// end ; 1 :
7886: GO 8091
7888: LD_INT 1
7890: DOUBLE
7891: EQUAL
7892: IFTRUE 7896
7894: GO 8000
7896: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7897: LD_ADDR_VAR 0 6
7901: PUSH
7902: LD_INT 71
7904: PUSH
7905: LD_INT 67
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 82
7914: PUSH
7915: LD_INT 23
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 53
7924: PUSH
7925: LD_INT 7
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 43
7934: PUSH
7935: LD_INT 10
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 53
7950: PUSH
7951: LD_INT 62
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 37
7960: PUSH
7961: LD_INT 63
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 44
7970: PUSH
7971: LD_INT 45
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 37
7980: PUSH
7981: LD_INT 28
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: ST_TO_ADDR
7998: GO 8091
8000: LD_INT 2
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8090
8008: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_INT 90
8016: PUSH
8017: LD_INT 59
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 108
8026: PUSH
8027: LD_INT 64
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 82
8040: PUSH
8041: LD_INT 75
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 73
8050: PUSH
8051: LD_INT 67
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 101
8060: PUSH
8061: LD_INT 65
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 108
8070: PUSH
8071: LD_INT 62
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
8088: GO 8091
8090: POP
// if not attackFormula then
8091: LD_VAR 0 6
8095: NOT
8096: IFFALSE 8100
// exit ;
8098: GO 9532
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8100: LD_ADDR_VAR 0 7
8104: PUSH
8105: LD_EXP 45
8109: PPUSH
8110: LD_INT 25
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL_OW 72
8124: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8125: LD_ADDR_VAR 0 8
8129: PUSH
8130: LD_EXP 45
8134: PPUSH
8135: LD_INT 25
8137: PUSH
8138: LD_INT 4
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 72
8149: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8150: LD_ADDR_VAR 0 9
8154: PUSH
8155: LD_EXP 45
8159: PPUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 3
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 72
8174: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8175: LD_ADDR_VAR 0 10
8179: PUSH
8180: LD_EXP 45
8184: PPUSH
8185: LD_INT 21
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 72
8199: ST_TO_ADDR
// if sci then
8200: LD_VAR 0 8
8204: IFFALSE 8241
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8206: LD_VAR 0 8
8210: PPUSH
8211: LD_VAR 0 6
8215: PUSH
8216: LD_INT 2
8218: ARRAY
8219: PUSH
8220: LD_INT 1
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 2
8231: ARRAY
8232: PUSH
8233: LD_INT 2
8235: ARRAY
8236: PPUSH
8237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8241: LD_INT 35
8243: PPUSH
8244: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8248: LD_ADDR_VAR 0 7
8252: PUSH
8253: LD_EXP 45
8257: PPUSH
8258: LD_INT 25
8260: PUSH
8261: LD_INT 1
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PPUSH
8268: CALL_OW 72
8272: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8273: LD_ADDR_VAR 0 8
8277: PUSH
8278: LD_EXP 45
8282: PPUSH
8283: LD_INT 25
8285: PUSH
8286: LD_INT 4
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 72
8297: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8298: LD_ADDR_VAR 0 9
8302: PUSH
8303: LD_EXP 45
8307: PPUSH
8308: LD_INT 25
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PPUSH
8318: CALL_OW 72
8322: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8323: LD_ADDR_VAR 0 10
8327: PUSH
8328: LD_EXP 45
8332: PPUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 72
8347: ST_TO_ADDR
// if sol then
8348: LD_VAR 0 7
8352: IFFALSE 8747
// begin for i in sol do
8354: LD_ADDR_VAR 0 2
8358: PUSH
8359: LD_VAR 0 7
8363: PUSH
8364: FOR_IN
8365: IFFALSE 8745
// begin tag := GetTag ( i ) ;
8367: LD_ADDR_VAR 0 4
8371: PUSH
8372: LD_VAR 0 2
8376: PPUSH
8377: CALL_OW 110
8381: ST_TO_ADDR
// if not tag then
8382: LD_VAR 0 4
8386: NOT
8387: IFFALSE 8505
// begin if GetLives ( i ) = 1000 then
8389: LD_VAR 0 2
8393: PPUSH
8394: CALL_OW 256
8398: PUSH
8399: LD_INT 1000
8401: EQUAL
8402: IFFALSE 8418
// SetTag ( i , 1 ) else
8404: LD_VAR 0 2
8408: PPUSH
8409: LD_INT 1
8411: PPUSH
8412: CALL_OW 109
8416: GO 8503
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 6
8427: PUSH
8428: LD_INT 2
8430: ARRAY
8431: PUSH
8432: LD_INT 1
8434: ARRAY
8435: PPUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PUSH
8445: LD_INT 2
8447: ARRAY
8448: PPUSH
8449: CALL_OW 297
8453: PUSH
8454: LD_INT 6
8456: GREATER
8457: IFFALSE 8503
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_VAR 0 6
8468: PUSH
8469: LD_INT 2
8471: ARRAY
8472: PUSH
8473: LD_INT 1
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 6
8481: PUSH
8482: LD_INT 2
8484: ARRAY
8485: PUSH
8486: LD_INT 2
8488: ARRAY
8489: PPUSH
8490: CALL_OW 111
// AddComHold ( i ) ;
8494: LD_VAR 0 2
8498: PPUSH
8499: CALL_OW 200
// end ; end else
8503: GO 8743
// begin if GetLives ( i ) < 720 then
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 256
8514: PUSH
8515: LD_INT 720
8517: LESS
8518: IFFALSE 8534
// SetTag ( i , 0 ) else
8520: LD_VAR 0 2
8524: PPUSH
8525: LD_INT 0
8527: PPUSH
8528: CALL_OW 109
8532: GO 8743
// if tag <= attackFormula [ 1 ] then
8534: LD_VAR 0 4
8538: PUSH
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: LESSEQUAL
8548: IFFALSE 8709
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_VAR 0 6
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 6
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PUSH
8583: LD_VAR 0 4
8587: ARRAY
8588: PUSH
8589: LD_INT 2
8591: ARRAY
8592: PPUSH
8593: CALL_OW 297
8597: PUSH
8598: LD_INT 6
8600: GREATER
8601: IFFALSE 8652
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8603: LD_VAR 0 2
8607: PPUSH
8608: LD_VAR 0 6
8612: PUSH
8613: LD_INT 1
8615: ARRAY
8616: PUSH
8617: LD_VAR 0 4
8621: ARRAY
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: LD_VAR 0 6
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PUSH
8636: LD_VAR 0 4
8640: ARRAY
8641: PUSH
8642: LD_INT 2
8644: ARRAY
8645: PPUSH
8646: CALL_OW 114
8650: GO 8707
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8652: LD_INT 81
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 91
8664: PUSH
8665: LD_VAR 0 2
8669: PUSH
8670: LD_INT 10
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: NOT
8687: IFFALSE 8707
// SetTag ( i , tag + 1 ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 4
8698: PUSH
8699: LD_INT 1
8701: PLUS
8702: PPUSH
8703: CALL_OW 109
// end else
8707: GO 8743
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8709: LD_VAR 0 2
8713: PPUSH
8714: LD_INT 81
8716: PUSH
8717: LD_INT 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 69
8728: PPUSH
8729: LD_VAR 0 2
8733: PPUSH
8734: CALL_OW 74
8738: PPUSH
8739: CALL_OW 115
// end ; end ;
8743: GO 8364
8745: POP
8746: POP
// end ; if sci then
8747: LD_VAR 0 8
8751: IFFALSE 8910
// begin if not sol and not mech then
8753: LD_VAR 0 7
8757: NOT
8758: PUSH
8759: LD_VAR 0 9
8763: NOT
8764: AND
8765: IFFALSE 8817
// begin for i in sci do
8767: LD_ADDR_VAR 0 2
8771: PUSH
8772: LD_VAR 0 8
8776: PUSH
8777: FOR_IN
8778: IFFALSE 8813
// begin usForces := usForces union i ;
8780: LD_ADDR_EXP 42
8784: PUSH
8785: LD_EXP 42
8789: PUSH
8790: LD_VAR 0 2
8794: UNION
8795: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8796: LD_VAR 0 2
8800: PPUSH
8801: LD_INT 34
8803: PPUSH
8804: LD_INT 68
8806: PPUSH
8807: CALL_OW 111
// end ;
8811: GO 8777
8813: POP
8814: POP
// end else
8815: GO 8910
// for i in sci do
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_VAR 0 8
8826: PUSH
8827: FOR_IN
8828: IFFALSE 8908
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8830: LD_VAR 0 2
8834: PPUSH
8835: LD_VAR 0 6
8839: PUSH
8840: LD_INT 2
8842: ARRAY
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: LD_VAR 0 6
8852: PUSH
8853: LD_INT 2
8855: ARRAY
8856: PUSH
8857: LD_INT 2
8859: ARRAY
8860: PPUSH
8861: CALL_OW 297
8865: PUSH
8866: LD_INT 8
8868: GREATER
8869: IFFALSE 8906
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_VAR 0 6
8880: PUSH
8881: LD_INT 2
8883: ARRAY
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_VAR 0 6
8893: PUSH
8894: LD_INT 2
8896: ARRAY
8897: PUSH
8898: LD_INT 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 111
8906: GO 8827
8908: POP
8909: POP
// end ; if tanks and mech then
8910: LD_VAR 0 10
8914: PUSH
8915: LD_VAR 0 9
8919: AND
8920: IFFALSE 9525
// begin for i in mech do
8922: LD_ADDR_VAR 0 2
8926: PUSH
8927: LD_VAR 0 9
8931: PUSH
8932: FOR_IN
8933: IFFALSE 9523
// begin tag := GetTag ( i ) ;
8935: LD_ADDR_VAR 0 4
8939: PUSH
8940: LD_VAR 0 2
8944: PPUSH
8945: CALL_OW 110
8949: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8950: LD_ADDR_VAR 0 11
8954: PUSH
8955: LD_VAR 0 2
8959: PPUSH
8960: CALL_OW 310
8964: ST_TO_ADDR
// if not tag then
8965: LD_VAR 0 4
8969: NOT
8970: IFFALSE 9283
// begin if veh then
8972: LD_VAR 0 11
8976: IFFALSE 9125
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8978: LD_VAR 0 11
8982: PPUSH
8983: CALL_OW 256
8987: PUSH
8988: LD_INT 1000
8990: EQUAL
8991: PUSH
8992: LD_VAR 0 11
8996: PPUSH
8997: CALL_OW 261
9001: PUSH
9002: LD_INT 60
9004: GREATER
9005: AND
9006: IFFALSE 9022
// SetTag ( i , 1 ) else
9008: LD_VAR 0 2
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: CALL_OW 109
9020: GO 9123
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_VAR 0 6
9031: PUSH
9032: LD_INT 3
9034: ARRAY
9035: PUSH
9036: LD_INT 1
9038: ARRAY
9039: PPUSH
9040: LD_VAR 0 6
9044: PUSH
9045: LD_INT 3
9047: ARRAY
9048: PUSH
9049: LD_INT 2
9051: ARRAY
9052: PPUSH
9053: CALL_OW 297
9057: PUSH
9058: LD_INT 7
9060: GREATER
9061: IFFALSE 9100
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
9063: LD_VAR 0 2
9067: PPUSH
9068: LD_VAR 0 6
9072: PUSH
9073: LD_INT 3
9075: ARRAY
9076: PUSH
9077: LD_INT 1
9079: ARRAY
9080: PPUSH
9081: LD_VAR 0 6
9085: PUSH
9086: LD_INT 3
9088: ARRAY
9089: PUSH
9090: LD_INT 2
9092: ARRAY
9093: PPUSH
9094: CALL_OW 111
9098: GO 9123
// begin ComExitVehicle ( i ) ;
9100: LD_VAR 0 2
9104: PPUSH
9105: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_VAR 0 11
9118: PPUSH
9119: CALL_OW 189
// end ; end else
9123: GO 9281
// if GetLives ( i ) < 700 then
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 256
9134: PUSH
9135: LD_INT 700
9137: LESS
9138: IFFALSE 9189
// begin usAttackers := usAttackers diff i ;
9140: LD_ADDR_EXP 45
9144: PUSH
9145: LD_EXP 45
9149: PUSH
9150: LD_VAR 0 2
9154: DIFF
9155: ST_TO_ADDR
// usForces := usForces union i ;
9156: LD_ADDR_EXP 42
9160: PUSH
9161: LD_EXP 42
9165: PUSH
9166: LD_VAR 0 2
9170: UNION
9171: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9172: LD_VAR 0 2
9176: PPUSH
9177: LD_INT 34
9179: PPUSH
9180: LD_INT 68
9182: PPUSH
9183: CALL_OW 111
// end else
9187: GO 9281
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9189: LD_VAR 0 10
9193: PPUSH
9194: LD_INT 58
9196: PUSH
9197: EMPTY
9198: LIST
9199: PUSH
9200: LD_INT 24
9202: PUSH
9203: LD_INT 1000
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 72
9218: PUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: CALL_OW 314
9228: NOT
9229: AND
9230: IFFALSE 9281
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9232: LD_VAR 0 2
9236: PPUSH
9237: LD_VAR 0 10
9241: PPUSH
9242: LD_INT 58
9244: PUSH
9245: EMPTY
9246: LIST
9247: PUSH
9248: LD_INT 24
9250: PUSH
9251: LD_INT 1000
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PPUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 74
9276: PPUSH
9277: CALL_OW 120
// end else
9281: GO 9521
// begin if GetLives ( veh ) < 620 then
9283: LD_VAR 0 11
9287: PPUSH
9288: CALL_OW 256
9292: PUSH
9293: LD_INT 620
9295: LESS
9296: IFFALSE 9312
// SetTag ( i , 0 ) else
9298: LD_VAR 0 2
9302: PPUSH
9303: LD_INT 0
9305: PPUSH
9306: CALL_OW 109
9310: GO 9521
// if tag <= attackFormula [ 4 ] then
9312: LD_VAR 0 4
9316: PUSH
9317: LD_VAR 0 6
9321: PUSH
9322: LD_INT 4
9324: ARRAY
9325: LESSEQUAL
9326: IFFALSE 9487
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9328: LD_VAR 0 2
9332: PPUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_INT 4
9340: ARRAY
9341: PUSH
9342: LD_VAR 0 4
9346: ARRAY
9347: PUSH
9348: LD_INT 1
9350: ARRAY
9351: PPUSH
9352: LD_VAR 0 6
9356: PUSH
9357: LD_INT 4
9359: ARRAY
9360: PUSH
9361: LD_VAR 0 4
9365: ARRAY
9366: PUSH
9367: LD_INT 2
9369: ARRAY
9370: PPUSH
9371: CALL_OW 297
9375: PUSH
9376: LD_INT 6
9378: GREATER
9379: IFFALSE 9430
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9381: LD_VAR 0 2
9385: PPUSH
9386: LD_VAR 0 6
9390: PUSH
9391: LD_INT 4
9393: ARRAY
9394: PUSH
9395: LD_VAR 0 4
9399: ARRAY
9400: PUSH
9401: LD_INT 1
9403: ARRAY
9404: PPUSH
9405: LD_VAR 0 6
9409: PUSH
9410: LD_INT 4
9412: ARRAY
9413: PUSH
9414: LD_VAR 0 4
9418: ARRAY
9419: PUSH
9420: LD_INT 2
9422: ARRAY
9423: PPUSH
9424: CALL_OW 114
9428: GO 9485
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9430: LD_INT 81
9432: PUSH
9433: LD_INT 1
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: LD_INT 91
9442: PUSH
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 10
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: NOT
9465: IFFALSE 9485
// SetTag ( i , tag + 1 ) ;
9467: LD_VAR 0 2
9471: PPUSH
9472: LD_VAR 0 4
9476: PUSH
9477: LD_INT 1
9479: PLUS
9480: PPUSH
9481: CALL_OW 109
// end else
9485: GO 9521
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_INT 81
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 69
9506: PPUSH
9507: LD_VAR 0 2
9511: PPUSH
9512: CALL_OW 74
9516: PPUSH
9517: CALL_OW 115
// end ; end ;
9521: GO 8932
9523: POP
9524: POP
// end ; until not usAttackers ;
9525: LD_EXP 45
9529: NOT
9530: IFFALSE 8241
// end ;
9532: LD_VAR 0 1
9536: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9537: LD_INT 22
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 32
9549: PUSH
9550: LD_INT 1
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 69
9565: IFFALSE 9642
9567: GO 9569
9569: DISABLE
9570: LD_INT 0
9572: PPUSH
// begin enable ;
9573: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9574: LD_ADDR_VAR 0 1
9578: PUSH
9579: LD_INT 22
9581: PUSH
9582: LD_INT 1
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PPUSH
9603: CALL_OW 69
9607: PUSH
9608: FOR_IN
9609: IFFALSE 9640
// if GetFuel ( i ) < 10 then
9611: LD_VAR 0 1
9615: PPUSH
9616: CALL_OW 261
9620: PUSH
9621: LD_INT 10
9623: LESS
9624: IFFALSE 9638
// SetFuel ( i , 10 ) ;
9626: LD_VAR 0 1
9630: PPUSH
9631: LD_INT 10
9633: PPUSH
9634: CALL_OW 240
9638: GO 9608
9640: POP
9641: POP
// end ; end_of_file
9642: PPOPN 1
9644: END
// export function Action ; var hasAll , i , tmp ; begin
9645: LD_INT 0
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9651: LD_ADDR_VAR 0 2
9655: PUSH
9656: LD_INT 22
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 23
9678: PUSH
9679: LD_INT 2
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 69
9695: PUSH
9696: LD_INT 7
9698: GREATEREQUAL
9699: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9700: LD_VAR 0 2
9704: PPUSH
9705: LD_STRING 03_HasAll
9707: PPUSH
9708: CALL_OW 39
// Video ( true ) ;
9712: LD_INT 1
9714: PPUSH
9715: CALL 1020 0 1
// CenterNowOnUnits ( Heike ) ;
9719: LD_EXP 26
9723: PPUSH
9724: CALL_OW 87
// wait ( 0 0$2 ) ;
9728: LD_INT 70
9730: PPUSH
9731: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9735: LD_EXP 34
9739: PPUSH
9740: LD_STRING DF-1-start
9742: PPUSH
9743: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9747: LD_EXP 26
9751: PPUSH
9752: LD_EXP 34
9756: PPUSH
9757: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9761: LD_EXP 26
9765: PPUSH
9766: LD_STRING DH-1-start
9768: PPUSH
9769: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9773: LD_EXP 35
9777: PPUSH
9778: LD_INT 92
9780: PPUSH
9781: LD_INT 21
9783: PPUSH
9784: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9788: LD_EXP 30
9792: PPUSH
9793: LD_INT 94
9795: PPUSH
9796: LD_INT 23
9798: PPUSH
9799: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9803: LD_EXP 38
9807: PUSH
9808: LD_INT 1
9810: ARRAY
9811: PPUSH
9812: LD_INT 90
9814: PPUSH
9815: LD_INT 23
9817: PPUSH
9818: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9822: LD_EXP 38
9826: PUSH
9827: LD_INT 2
9829: ARRAY
9830: PPUSH
9831: LD_INT 93
9833: PPUSH
9834: LD_INT 25
9836: PPUSH
9837: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9841: LD_EXP 38
9845: PPUSH
9846: LD_EXP 35
9850: PPUSH
9851: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9855: LD_EXP 35
9859: PUSH
9860: LD_EXP 30
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: LD_EXP 26
9873: PPUSH
9874: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9878: LD_EXP 26
9882: PPUSH
9883: LD_EXP 35
9887: PPUSH
9888: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9899: LD_EXP 35
9903: PPUSH
9904: LD_INT 92
9906: PPUSH
9907: LD_INT 21
9909: PPUSH
9910: CALL_OW 307
9914: IFFALSE 9892
// Say ( Omar , DO-1-start ) ;
9916: LD_EXP 35
9920: PPUSH
9921: LD_STRING DO-1-start
9923: PPUSH
9924: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9928: LD_EXP 26
9932: PPUSH
9933: LD_STRING DH-2-start
9935: PPUSH
9936: CALL_OW 88
// if hasAll then
9940: LD_VAR 0 2
9944: IFFALSE 10072
// begin Say ( Omar , DO-2-start ) ;
9946: LD_EXP 35
9950: PPUSH
9951: LD_STRING DO-2-start
9953: PPUSH
9954: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9958: LD_EXP 35
9962: PPUSH
9963: LD_STRING DO-3-start
9965: PPUSH
9966: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9970: LD_EXP 26
9974: PPUSH
9975: LD_STRING DH-3-start
9977: PPUSH
9978: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9982: LD_EXP 34
9986: PPUSH
9987: LD_STRING DF-2-start
9989: PPUSH
9990: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9994: LD_EXP 35
9998: PPUSH
9999: LD_EXP 34
10003: PPUSH
10004: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
10008: LD_EXP 35
10012: PPUSH
10013: LD_STRING DO-4-start
10015: PPUSH
10016: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
10020: LD_EXP 34
10024: PPUSH
10025: LD_STRING DF-3-start
10027: PPUSH
10028: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
10032: LD_EXP 35
10036: PPUSH
10037: LD_STRING DO-5-start
10039: PPUSH
10040: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
10044: LD_EXP 34
10048: PPUSH
10049: LD_STRING DF-4-start
10051: PPUSH
10052: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10056: LD_EXP 35
10060: PPUSH
10061: LD_EXP 26
10065: PPUSH
10066: CALL_OW 119
// end else
10070: GO 10172
// begin Say ( Omar , DO-2-start-a ) ;
10072: LD_EXP 35
10076: PPUSH
10077: LD_STRING DO-2-start-a
10079: PPUSH
10080: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
10084: LD_EXP 35
10088: PPUSH
10089: LD_STRING DO-3-start-a
10091: PPUSH
10092: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
10096: LD_EXP 26
10100: PPUSH
10101: LD_STRING DH-3-start-a
10103: PPUSH
10104: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
10108: LD_EXP 34
10112: PPUSH
10113: LD_STRING DF-2-start-a
10115: PPUSH
10116: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
10120: LD_EXP 35
10124: PPUSH
10125: LD_EXP 34
10129: PPUSH
10130: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
10134: LD_EXP 35
10138: PPUSH
10139: LD_STRING DO-4-start-a
10141: PPUSH
10142: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
10146: LD_EXP 34
10150: PPUSH
10151: LD_STRING DF-3-start-a
10153: PPUSH
10154: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10158: LD_EXP 35
10162: PPUSH
10163: LD_EXP 26
10167: PPUSH
10168: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
10172: LD_INT 10
10174: PPUSH
10175: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
10179: LD_EXP 35
10183: PPUSH
10184: LD_STRING DO-1-mission
10186: PPUSH
10187: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
10191: LD_EXP 35
10195: PPUSH
10196: LD_STRING DO-2-mission
10198: PPUSH
10199: CALL_OW 88
// if not hasAll then
10203: LD_VAR 0 2
10207: NOT
10208: IFFALSE 10222
// Say ( Omar , DO-3-mission ) ;
10210: LD_EXP 35
10214: PPUSH
10215: LD_STRING DO-3-mission
10217: PPUSH
10218: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
10222: LD_EXP 35
10226: PPUSH
10227: LD_STRING DO-4-mission
10229: PPUSH
10230: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10234: LD_EXP 26
10238: PPUSH
10239: LD_STRING DH-1-mission
10241: PPUSH
10242: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10246: LD_EXP 34
10250: PPUSH
10251: LD_STRING DF-1-mission
10253: PPUSH
10254: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10258: LD_EXP 35
10262: PPUSH
10263: LD_STRING DO-5-mission
10265: PPUSH
10266: CALL_OW 88
// if not hasAll then
10270: LD_VAR 0 2
10274: NOT
10275: IFFALSE 10410
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10277: LD_ADDR_VAR 0 4
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 23
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: ST_TO_ADDR
// for i := 7 downto tmp do
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: DOUBLE
10328: LD_INT 7
10330: INC
10331: ST_TO_ADDR
10332: LD_VAR 0 4
10336: PUSH
10337: FOR_DOWNTO
10338: IFFALSE 10408
// begin if omarSquad < 3 then
10340: LD_EXP 38
10344: PUSH
10345: LD_INT 3
10347: LESS
10348: IFFALSE 10352
// break ;
10350: GO 10408
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10352: LD_EXP 38
10356: PUSH
10357: LD_INT 3
10359: ARRAY
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10368: LD_ADDR_EXP 40
10372: PUSH
10373: LD_EXP 40
10377: PUSH
10378: LD_EXP 38
10382: PUSH
10383: LD_INT 3
10385: ARRAY
10386: UNION
10387: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10388: LD_ADDR_EXP 38
10392: PUSH
10393: LD_EXP 38
10397: PPUSH
10398: LD_INT 3
10400: PPUSH
10401: CALL_OW 3
10405: ST_TO_ADDR
// end ;
10406: GO 10337
10408: POP
10409: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10410: LD_EXP 35
10414: PUSH
10415: LD_EXP 38
10419: ADD
10420: PPUSH
10421: LD_INT 103
10423: PPUSH
10424: LD_INT 9
10426: PPUSH
10427: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10431: LD_VAR 0 2
10435: PUSH
10436: LD_EXP 31
10440: PPUSH
10441: CALL_OW 302
10445: AND
10446: IFFALSE 10507
// begin wait ( 0 0$3 ) ;
10448: LD_INT 105
10450: PPUSH
10451: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10455: LD_EXP 31
10459: PPUSH
10460: LD_EXP 34
10464: PPUSH
10465: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10469: LD_EXP 31
10473: PPUSH
10474: LD_STRING DK-1-side
10476: PPUSH
10477: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10481: LD_EXP 34
10485: PPUSH
10486: LD_EXP 31
10490: PPUSH
10491: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10495: LD_EXP 34
10499: PPUSH
10500: LD_STRING DF-1-side
10502: PPUSH
10503: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10507: LD_INT 22
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 69
10521: PPUSH
10522: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10526: LD_EXP 34
10530: PUSH
10531: LD_EXP 37
10535: ADD
10536: PPUSH
10537: LD_INT 108
10539: PPUSH
10540: LD_INT 62
10542: PPUSH
10543: CALL_OW 111
// gameStarted := true ;
10547: LD_ADDR_EXP 3
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10555: LD_INT 105
10557: PPUSH
10558: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10562: LD_EXP 26
10566: PPUSH
10567: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10571: LD_EXP 26
10575: PPUSH
10576: LD_EXP 30
10580: PPUSH
10581: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10585: LD_INT 22
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: PUSH
10600: LD_EXP 26
10604: DIFF
10605: PPUSH
10606: LD_EXP 26
10610: PPUSH
10611: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10615: LD_EXP 26
10619: PPUSH
10620: LD_STRING DH-1-explore
10622: PPUSH
10623: CALL_OW 88
// if Givi then
10627: LD_EXP 27
10631: IFFALSE 10647
// Say ( Givi , DG-1-explore ) else
10633: LD_EXP 27
10637: PPUSH
10638: LD_STRING DG-1-explore
10640: PPUSH
10641: CALL_OW 88
10645: GO 10684
// if heikeSecondSquad then
10647: LD_EXP 40
10651: IFFALSE 10684
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10653: LD_EXP 40
10657: PPUSH
10658: LD_INT 26
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PPUSH
10668: CALL_OW 72
10672: PUSH
10673: LD_INT 1
10675: ARRAY
10676: PPUSH
10677: LD_STRING DArm-1-explore
10679: PPUSH
10680: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10684: LD_EXP 30
10688: PPUSH
10689: LD_STRING DA-1-explore
10691: PPUSH
10692: CALL_OW 88
// if Sophia then
10696: LD_EXP 32
10700: IFFALSE 10778
// begin Say ( Sophia , DS-2-explore ) ;
10702: LD_EXP 32
10706: PPUSH
10707: LD_STRING DS-2-explore
10709: PPUSH
10710: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10714: LD_EXP 30
10718: PPUSH
10719: LD_STRING DA-2-explore
10721: PPUSH
10722: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10726: LD_EXP 32
10730: PPUSH
10731: LD_EXP 30
10735: PPUSH
10736: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10740: LD_EXP 30
10744: PPUSH
10745: LD_EXP 32
10749: PPUSH
10750: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10754: LD_EXP 32
10758: PPUSH
10759: LD_STRING DS-3-explore
10761: PPUSH
10762: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10766: LD_EXP 30
10770: PPUSH
10771: LD_STRING DA-3-explore
10773: PPUSH
10774: CALL_OW 88
// end ; if Mike then
10778: LD_EXP 28
10782: IFFALSE 10838
// begin Say ( Mike , DM-1-explore ) ;
10784: LD_EXP 28
10788: PPUSH
10789: LD_STRING DM-1-explore
10791: PPUSH
10792: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10796: LD_EXP 26
10800: PPUSH
10801: LD_STRING DH-2-explore
10803: PPUSH
10804: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10808: LD_EXP 28
10812: PPUSH
10813: LD_STRING DM-2-explore
10815: PPUSH
10816: CALL_OW 88
// if Kaia then
10820: LD_EXP 31
10824: IFFALSE 10838
// Say ( Kaia , DK-1-explore ) ;
10826: LD_EXP 31
10830: PPUSH
10831: LD_STRING DK-1-explore
10833: PPUSH
10834: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10838: LD_INT 22
10840: PUSH
10841: LD_INT 2
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: PPUSH
10853: CALL_OW 139
// Video ( false ) ;
10857: LD_INT 0
10859: PPUSH
10860: CALL 1020 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10864: LD_STRING BuildBase
10866: PPUSH
10867: CALL_OW 337
// SaveForQuickRestart ;
10871: CALL_OW 22
// end ;
10875: LD_VAR 0 1
10879: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10880: LD_EXP 5
10884: NOT
10885: PUSH
10886: LD_EXP 6
10890: NOT
10891: AND
10892: PUSH
10893: LD_INT 5
10895: PPUSH
10896: LD_INT 22
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: AND
10911: PUSH
10912: LD_EXP 6
10916: NOT
10917: AND
10918: IFFALSE 11003
10920: GO 10922
10922: DISABLE
// begin if Mike then
10923: LD_EXP 28
10927: IFFALSE 10943
// Say ( Mike , DM-1-scout ) else
10929: LD_EXP 28
10933: PPUSH
10934: LD_STRING DM-1-scout
10936: PPUSH
10937: CALL_OW 88
10941: GO 10974
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10943: LD_EXP 40
10947: PPUSH
10948: LD_INT 26
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 72
10962: PUSH
10963: LD_INT 1
10965: ARRAY
10966: PPUSH
10967: LD_STRING DArm-1-explore
10969: PPUSH
10970: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10974: LD_INT 54
10976: PPUSH
10977: LD_INT 35
10979: PPUSH
10980: LD_INT 2
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10990: LD_INT 54
10992: PPUSH
10993: LD_INT 35
10995: PPUSH
10996: LD_INT 2
10998: PPUSH
10999: CALL_OW 331
// end ;
11003: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
11004: LD_INT 6
11006: PPUSH
11007: LD_INT 22
11009: PUSH
11010: LD_INT 2
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 70
11021: PUSH
11022: LD_EXP 6
11026: NOT
11027: AND
11028: IFFALSE 11282
11030: GO 11032
11032: DISABLE
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
11037: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11038: LD_ADDR_VAR 0 1
11042: PUSH
11043: LD_EXP 40
11047: PPUSH
11048: LD_INT 26
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 72
11062: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_EXP 40
11072: PPUSH
11073: LD_INT 26
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 72
11087: ST_TO_ADDR
// DialogueOn ;
11088: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
11092: LD_INT 36
11094: PPUSH
11095: LD_INT 22
11097: PPUSH
11098: LD_INT 2
11100: PPUSH
11101: LD_INT 8
11103: PPUSH
11104: CALL_OW 330
// dwait ( 0 0$1 ) ;
11108: LD_INT 35
11110: PPUSH
11111: CALL_OW 68
// speakerOk := false ;
11115: LD_ADDR_VAR 0 3
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// if Mike then
11123: LD_EXP 28
11127: IFFALSE 11149
// speakerOk := Say ( Mike , DM-1-spot ) else
11129: LD_ADDR_VAR 0 3
11133: PUSH
11134: LD_EXP 28
11138: PPUSH
11139: LD_STRING DM-1-spot
11141: PPUSH
11142: CALL_OW 88
11146: ST_TO_ADDR
11147: GO 11177
// if randomMen then
11149: LD_VAR 0 1
11153: IFFALSE 11177
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11155: LD_ADDR_VAR 0 3
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: LD_INT 1
11167: ARRAY
11168: PPUSH
11169: LD_STRING DArm-1-spot-a
11171: PPUSH
11172: CALL_OW 88
11176: ST_TO_ADDR
// if speakerOk then
11177: LD_VAR 0 3
11181: IFFALSE 11225
// begin if Givi then
11183: LD_EXP 27
11187: IFFALSE 11203
// Say ( Givi , DG-1-spot ) else
11189: LD_EXP 27
11193: PPUSH
11194: LD_STRING DG-1-spot
11196: PPUSH
11197: CALL_OW 88
11201: GO 11225
// if randomWomen then
11203: LD_VAR 0 2
11207: IFFALSE 11225
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11209: LD_VAR 0 2
11213: PUSH
11214: LD_INT 1
11216: ARRAY
11217: PPUSH
11218: LD_STRING DArf-1-spot-a
11220: PPUSH
11221: CALL_OW 88
// end ; if Mike then
11225: LD_EXP 28
11229: IFFALSE 11245
// Say ( Heike , DH-1-spot ) else
11231: LD_EXP 26
11235: PPUSH
11236: LD_STRING DH-1-spot
11238: PPUSH
11239: CALL_OW 88
11243: GO 11257
// Say ( Heike , DH-1-spot-a ) ;
11245: LD_EXP 26
11249: PPUSH
11250: LD_STRING DH-1-spot-a
11252: PPUSH
11253: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11257: LD_INT 36
11259: PPUSH
11260: LD_INT 22
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: CALL_OW 331
// DialogueOff ;
11270: CALL_OW 7
// americanBaseSpoted := true ;
11274: LD_ADDR_EXP 5
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
// end ;
11282: PPOPN 3
11284: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11285: LD_EXP 5
11289: NOT
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 101
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: AND
11320: PUSH
11321: LD_EXP 6
11325: NOT
11326: AND
11327: IFFALSE 11413
11329: GO 11331
11331: DISABLE
11332: LD_INT 0
11334: PPUSH
// begin americanBaseSpoted := true ;
11335: LD_ADDR_EXP 5
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_EXP 40
11352: PPUSH
11353: LD_INT 26
11355: PUSH
11356: LD_INT 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 72
11367: ST_TO_ADDR
// if not randomMen then
11368: LD_VAR 0 1
11372: NOT
11373: IFFALSE 11377
// exit ;
11375: GO 11413
// DialogueOn ;
11377: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 1
11388: ARRAY
11389: PPUSH
11390: LD_STRING DArm-1-spot-a
11392: PPUSH
11393: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11397: LD_EXP 26
11401: PPUSH
11402: LD_STRING DH-1-spot-a
11404: PPUSH
11405: CALL_OW 88
// DialogueOff ;
11409: CALL_OW 7
// end ;
11413: PPOPN 1
11415: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
11416: LD_INT 11
11418: PPUSH
11419: CALL_OW 255
11423: PUSH
11424: LD_INT 2
11426: EQUAL
11427: PUSH
11428: LD_INT 7
11430: PPUSH
11431: LD_INT 22
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: LD_INT 50
11446: PUSH
11447: EMPTY
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 30
11456: PUSH
11457: LD_INT 31
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 70
11473: OR
11474: PUSH
11475: LD_INT 7
11477: PPUSH
11478: LD_INT 22
11480: PUSH
11481: LD_INT 2
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PPUSH
11488: CALL_OW 70
11492: PUSH
11493: LD_INT 1
11495: GREATER
11496: OR
11497: PUSH
11498: LD_INT 6
11500: PPUSH
11501: LD_INT 22
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 70
11515: OR
11516: IFFALSE 12066
11518: GO 11520
11520: DISABLE
11521: LD_INT 0
11523: PPUSH
11524: PPUSH
// begin americanBaseCaptured := true ;
11525: LD_ADDR_EXP 6
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11533: LD_INT 105
11535: PPUSH
11536: CALL_OW 67
// if IsOk ( usCommander ) then
11540: LD_EXP 43
11544: PPUSH
11545: CALL_OW 302
11549: IFFALSE 11612
// begin usForces := usForces union usCommander ;
11551: LD_ADDR_EXP 42
11555: PUSH
11556: LD_EXP 42
11560: PUSH
11561: LD_EXP 43
11565: UNION
11566: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11567: LD_INT 6
11569: PPUSH
11570: LD_INT 22
11572: PUSH
11573: LD_INT 2
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 70
11584: IFFALSE 11600
// Say ( usCommander , DUsm-2-assault ) else
11586: LD_EXP 43
11590: PPUSH
11591: LD_STRING DUsm-2-assault
11593: PPUSH
11594: CALL_OW 88
11598: GO 11612
// Say ( usCommander , DUsm-1-assault ) ;
11600: LD_EXP 43
11604: PPUSH
11605: LD_STRING DUsm-1-assault
11607: PPUSH
11608: CALL_OW 88
// end ; for i in usForces do
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_EXP 42
11621: PUSH
11622: FOR_IN
11623: IFFALSE 11669
// begin if IsInUnit ( i ) then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 310
11634: IFFALSE 11645
// ComExitBuilding ( i ) ;
11636: LD_VAR 0 1
11640: PPUSH
11641: CALL_OW 122
// wait ( 3 ) ;
11645: LD_INT 3
11647: PPUSH
11648: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 34
11659: PPUSH
11660: LD_INT 67
11662: PPUSH
11663: CALL_OW 111
// end ;
11667: GO 11622
11669: POP
11670: POP
// Say ( Heike , DH-1-assault ) ;
11671: LD_EXP 26
11675: PPUSH
11676: LD_STRING DH-1-assault
11678: PPUSH
11679: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11683: LD_INT 35
11685: PPUSH
11686: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_INT 34
11697: PPUSH
11698: LD_INT 67
11700: PPUSH
11701: CALL_OW 111
// until not usForces ;
11705: LD_EXP 42
11709: NOT
11710: IFFALSE 11683
// music_nat := 2 ;
11712: LD_ADDR_OWVAR 71
11716: PUSH
11717: LD_INT 2
11719: ST_TO_ADDR
// music_class := music_victory ;
11720: LD_ADDR_OWVAR 72
11724: PUSH
11725: LD_INT 4
11727: ST_TO_ADDR
// if not americanHasEscaped then
11728: LD_EXP 7
11732: NOT
11733: IFFALSE 11754
// begin Say ( Heike , DH-2-assault ) ;
11735: LD_EXP 26
11739: PPUSH
11740: LD_STRING DH-2-assault
11742: PPUSH
11743: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11747: LD_STRING ACH_CLEAN
11749: PPUSH
11750: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11754: LD_INT 70
11756: PPUSH
11757: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11761: LD_INT 35
11763: PPUSH
11764: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11768: LD_INT 22
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 21
11780: PUSH
11781: LD_INT 1
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 3
11790: PUSH
11791: LD_INT 50
11793: PUSH
11794: EMPTY
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: NOT
11811: IFFALSE 11761
// Video ( true ) ;
11813: LD_INT 1
11815: PPUSH
11816: CALL 1020 0 1
// if not GetSide ( usDepot ) = 2 then
11820: LD_INT 11
11822: PPUSH
11823: CALL_OW 255
11827: PUSH
11828: LD_INT 2
11830: EQUAL
11831: NOT
11832: IFFALSE 11844
// SetSide ( usDepot , 2 ) ;
11834: LD_INT 11
11836: PPUSH
11837: LD_INT 2
11839: PPUSH
11840: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11844: LD_INT 35
11846: PPUSH
11847: LD_INT 22
11849: PPUSH
11850: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11854: LD_EXP 26
11858: PPUSH
11859: LD_INT 35
11861: PPUSH
11862: LD_INT 22
11864: PPUSH
11865: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11869: LD_EXP 26
11873: PPUSH
11874: LD_INT 38
11876: PPUSH
11877: LD_INT 25
11879: PPUSH
11880: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11884: LD_EXP 39
11888: PUSH
11889: LD_EXP 40
11893: UNION
11894: PPUSH
11895: LD_INT 39
11897: PPUSH
11898: LD_INT 26
11900: PPUSH
11901: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11905: LD_EXP 39
11909: PUSH
11910: LD_EXP 40
11914: UNION
11915: PPUSH
11916: LD_EXP 26
11920: PPUSH
11921: CALL_OW 179
// p := 0 ;
11925: LD_ADDR_VAR 0 2
11929: PUSH
11930: LD_INT 0
11932: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11933: LD_INT 35
11935: PPUSH
11936: CALL_OW 67
// p := p + 1 ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_VAR 0 2
11949: PUSH
11950: LD_INT 1
11952: PLUS
11953: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11954: LD_EXP 26
11958: PPUSH
11959: CALL_OW 314
11963: NOT
11964: PUSH
11965: LD_VAR 0 2
11969: PUSH
11970: LD_INT 10
11972: GREATER
11973: OR
11974: IFFALSE 11933
// Say ( Heike , DH-1-capture ) ;
11976: LD_EXP 26
11980: PPUSH
11981: LD_STRING DH-1-capture
11983: PPUSH
11984: CALL_OW 88
// if Markov then
11988: LD_EXP 33
11992: IFFALSE 12006
// Say ( Markov , DMar-1-capture ) ;
11994: LD_EXP 33
11998: PPUSH
11999: LD_STRING DMar-1-capture
12001: PPUSH
12002: CALL_OW 88
// if Sophia then
12006: LD_EXP 32
12010: IFFALSE 12036
// begin Say ( Heike , DH-2-capture ) ;
12012: LD_EXP 26
12016: PPUSH
12017: LD_STRING DH-2-capture
12019: PPUSH
12020: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
12024: LD_EXP 32
12028: PPUSH
12029: LD_STRING DS-1-capture
12031: PPUSH
12032: CALL_OW 88
// end ; Video ( false ) ;
12036: LD_INT 0
12038: PPUSH
12039: CALL 1020 0 1
// music_nat := music_auto ;
12043: LD_ADDR_OWVAR 71
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
// music_class := music_auto ;
12051: LD_ADDR_OWVAR 72
12055: PUSH
12056: LD_INT 0
12058: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
12059: LD_STRING ConstructBase
12061: PPUSH
12062: CALL_OW 337
// end ;
12066: PPOPN 2
12068: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
12069: LD_EXP 12
12073: PUSH
12074: LD_INT 3
12076: GREATEREQUAL
12077: IFFALSE 12089
12079: GO 12081
12081: DISABLE
// SetAchievement ( ACH_ENG ) ;
12082: LD_STRING ACH_ENG
12084: PPUSH
12085: CALL_OW 543
12089: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
12090: LD_INT 22
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 15
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 69
12118: PUSH
12119: LD_INT 4
12121: GREATEREQUAL
12122: IFFALSE 12134
12124: GO 12126
12126: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12127: LD_STRING ACH_APEGEN
12129: PPUSH
12130: CALL_OW 543
12134: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12135: LD_INT 22
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 30
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 57
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IFFALSE 12420
12179: GO 12181
12181: DISABLE
// begin workshopBuilded := true ;
12182: LD_ADDR_EXP 9
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// if IsOk ( Markov ) then
12190: LD_EXP 33
12194: PPUSH
12195: CALL_OW 302
12199: IFFALSE 12258
// begin Say ( Heike , DH-1-shop-a ) ;
12201: LD_EXP 26
12205: PPUSH
12206: LD_STRING DH-1-shop-a
12208: PPUSH
12209: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12213: LD_INT 47
12215: PPUSH
12216: LD_INT 2
12218: PPUSH
12219: CALL_OW 321
12223: PUSH
12224: LD_INT 2
12226: EQUAL
12227: PUSH
12228: LD_INT 45
12230: PPUSH
12231: LD_INT 2
12233: PPUSH
12234: CALL_OW 321
12238: PUSH
12239: LD_INT 2
12241: EQUAL
12242: AND
12243: NOT
12244: IFFALSE 12258
// Say ( Markov , DMar-1-shop-a ) ;
12246: LD_EXP 33
12250: PPUSH
12251: LD_STRING DMar-1-shop-a
12253: PPUSH
12254: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12258: LD_INT 35
12260: PPUSH
12261: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12265: LD_INT 47
12267: PPUSH
12268: LD_INT 2
12270: PPUSH
12271: CALL_OW 321
12275: PUSH
12276: LD_INT 2
12278: EQUAL
12279: PUSH
12280: LD_INT 45
12282: PPUSH
12283: LD_INT 2
12285: PPUSH
12286: CALL_OW 321
12290: PUSH
12291: LD_INT 2
12293: EQUAL
12294: OR
12295: IFFALSE 12258
// DialogueOn ;
12297: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12301: LD_EXP 33
12305: PPUSH
12306: LD_STRING DMar-1-shop
12308: PPUSH
12309: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12313: LD_EXP 26
12317: PPUSH
12318: LD_STRING DH-1-shop
12320: PPUSH
12321: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12325: LD_EXP 33
12329: PPUSH
12330: LD_STRING DMar-2-shop
12332: PPUSH
12333: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12337: LD_EXP 33
12341: PPUSH
12342: LD_STRING DMar-3-shop
12344: PPUSH
12345: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12349: LD_EXP 26
12353: PPUSH
12354: LD_STRING DH-2-shop
12356: PPUSH
12357: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12361: LD_EXP 33
12365: PPUSH
12366: LD_STRING DMar-4-shop
12368: PPUSH
12369: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12373: LD_EXP 26
12377: PPUSH
12378: LD_STRING DH-3-shop
12380: PPUSH
12381: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12385: LD_EXP 33
12389: PPUSH
12390: LD_STRING DMar-5-shop
12392: PPUSH
12393: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12397: LD_EXP 26
12401: PPUSH
12402: LD_STRING DH-4-shop
12404: PPUSH
12405: CALL_OW 88
// DialogueOff ;
12409: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12413: LD_STRING ConstructVeh
12415: PPUSH
12416: CALL_OW 337
// end ;
12420: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12421: LD_INT 2
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL 1191 0 3
12434: PUSH
12435: LD_INT 0
12437: EQUAL
12438: IFFALSE 12450
12440: GO 12442
12442: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12443: LD_STRING Techs
12445: PPUSH
12446: CALL_OW 337
12450: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12451: LD_EXP 33
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: LD_INT 34
12476: PUSH
12477: LD_INT 22
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 35
12486: PUSH
12487: LD_INT 22
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PPUSH
12503: CALL_OW 69
12507: AND
12508: IFFALSE 12615
12510: GO 12512
12512: DISABLE
// begin DialogueOn ;
12513: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12517: LD_INT 22
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: LD_INT 34
12532: PUSH
12533: LD_INT 22
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 35
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: PPUSH
12564: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12568: LD_INT 10
12570: PPUSH
12571: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12575: LD_EXP 26
12579: PPUSH
12580: LD_STRING DH-1-bal
12582: PPUSH
12583: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12587: LD_EXP 33
12591: PPUSH
12592: LD_STRING DMar-1-bal
12594: PPUSH
12595: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12599: LD_EXP 26
12603: PPUSH
12604: LD_STRING DH-2-bal
12606: PPUSH
12607: CALL_OW 88
// DialogueOff ;
12611: CALL_OW 7
// end ;
12615: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12616: LD_EXP 30
12620: PPUSH
12621: CALL_OW 302
12625: PUSH
12626: LD_INT 22
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 30
12638: PUSH
12639: LD_INT 6
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: AND
12655: IFFALSE 12716
12657: GO 12659
12659: DISABLE
// begin DialogueOn ;
12660: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12664: LD_EXP 30
12668: PPUSH
12669: LD_STRING DA-1-lab
12671: PPUSH
12672: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12676: LD_EXP 26
12680: PPUSH
12681: LD_STRING DH-1-lab
12683: PPUSH
12684: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12688: LD_EXP 30
12692: PPUSH
12693: LD_STRING DA-2-lab
12695: PPUSH
12696: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12700: LD_EXP 26
12704: PPUSH
12705: LD_STRING DH-2-lab
12707: PPUSH
12708: CALL_OW 88
// DialogueOff ;
12712: CALL_OW 7
// end ;
12716: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12717: LD_EXP 31
12721: PPUSH
12722: CALL_OW 302
12726: PUSH
12727: LD_INT 22
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 25
12739: PUSH
12740: LD_INT 15
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 69
12755: AND
12756: IFFALSE 12936
12758: GO 12760
12760: DISABLE
12761: LD_INT 0
12763: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12764: LD_ADDR_VAR 0 1
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_INT 2
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 25
12781: PUSH
12782: LD_INT 15
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: ST_TO_ADDR
// Video ( true ) ;
12798: LD_INT 1
12800: PPUSH
12801: CALL 1020 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12805: LD_VAR 0 1
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12818: LD_VAR 0 1
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12831: LD_VAR 0 1
12835: PUSH
12836: LD_INT 1
12838: ARRAY
12839: PPUSH
12840: LD_INT 35
12842: PPUSH
12843: LD_INT 28
12845: PPUSH
12846: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12850: LD_VAR 0 1
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PPUSH
12859: LD_INT 36
12861: PPUSH
12862: LD_INT 17
12864: PPUSH
12865: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12869: LD_EXP 31
12873: PPUSH
12874: LD_STRING DK-1-apesol
12876: PPUSH
12877: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12881: LD_EXP 30
12885: PPUSH
12886: LD_STRING DA-1-apesol
12888: PPUSH
12889: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12893: LD_EXP 31
12897: PPUSH
12898: LD_STRING DK-2-apesol
12900: PPUSH
12901: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12905: LD_EXP 30
12909: PPUSH
12910: LD_STRING DA-2-apesol
12912: PPUSH
12913: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12917: LD_EXP 31
12921: PPUSH
12922: LD_STRING DK-3-apesol
12924: PPUSH
12925: CALL_OW 88
// Video ( false ) ;
12929: LD_INT 0
12931: PPUSH
12932: CALL 1020 0 1
// end ;
12936: PPOPN 1
12938: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12939: LD_EXP 32
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_INT 22
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 25
12961: PUSH
12962: LD_INT 16
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: AND
12978: IFFALSE 13250
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12986: LD_ADDR_VAR 0 1
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_INT 2
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 16
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: ST_TO_ADDR
// Video ( true ) ;
13020: LD_INT 1
13022: PPUSH
13023: CALL 1020 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13027: LD_INT 5
13029: PPUSH
13030: LD_INT 35
13032: PPUSH
13033: LD_INT 22
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13043: LD_EXP 32
13047: PPUSH
13048: LD_VAR 0 1
13052: PUSH
13053: LD_INT 1
13055: ARRAY
13056: PPUSH
13057: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13061: LD_VAR 0 1
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13074: LD_VAR 0 1
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: CALL_OW 122
// wait ( 0 0$2 ) ;
13087: LD_INT 70
13089: PPUSH
13090: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13094: LD_EXP 32
13098: PPUSH
13099: LD_STRING DS-1-apeeng
13101: PPUSH
13102: CALL_OW 88
// if IsOk ( Kamil ) then
13106: LD_EXP 29
13110: PPUSH
13111: CALL_OW 302
13115: IFFALSE 13243
// begin Say ( Kamil , DKam-1-apeeng ) ;
13117: LD_EXP 29
13121: PPUSH
13122: LD_STRING DKam-1-apeeng
13124: PPUSH
13125: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13129: LD_EXP 32
13133: PPUSH
13134: LD_STRING DS-2-apeeng
13136: PPUSH
13137: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13141: LD_EXP 29
13145: PPUSH
13146: LD_STRING DKam-2-apeeng
13148: PPUSH
13149: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13153: LD_EXP 32
13157: PPUSH
13158: LD_STRING DS-3-apeeng
13160: PPUSH
13161: CALL_OW 88
// if not IsOK ( Kaia ) then
13165: LD_EXP 31
13169: PPUSH
13170: CALL_OW 302
13174: NOT
13175: IFFALSE 13186
// begin Video ( false ) ;
13177: LD_INT 0
13179: PPUSH
13180: CALL 1020 0 1
// exit ;
13184: GO 13250
// end ; Say ( Kaia , DK-1-apeeng ) ;
13186: LD_EXP 31
13190: PPUSH
13191: LD_STRING DK-1-apeeng
13193: PPUSH
13194: CALL_OW 88
// if not IsOk ( Givi ) then
13198: LD_EXP 27
13202: PPUSH
13203: CALL_OW 302
13207: NOT
13208: IFFALSE 13219
// begin Video ( false ) ;
13210: LD_INT 0
13212: PPUSH
13213: CALL 1020 0 1
// exit ;
13217: GO 13250
// end ; Say ( Givi , DG-1-apeeng ) ;
13219: LD_EXP 27
13223: PPUSH
13224: LD_STRING DG-1-apeeng
13226: PPUSH
13227: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13231: LD_EXP 31
13235: PPUSH
13236: LD_STRING DK-2-apeeng
13238: PPUSH
13239: CALL_OW 88
// end ; Video ( false ) ;
13243: LD_INT 0
13245: PPUSH
13246: CALL 1020 0 1
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13253: LD_EXP 4
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: AND
13287: IFFALSE 13445
13289: GO 13291
13291: DISABLE
// begin DialogueOn ;
13292: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13296: LD_EXP 34
13300: PPUSH
13301: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13305: LD_EXP 34
13309: PPUSH
13310: LD_STRING DF-1-distribution
13312: PPUSH
13313: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13317: LD_EXP 26
13321: PPUSH
13322: LD_STRING DH-2-distribution
13324: PPUSH
13325: CALL_OW 88
// if IsOk ( Kaia ) then
13329: LD_EXP 31
13333: PPUSH
13334: CALL_OW 302
13338: IFFALSE 13399
// begin Say ( Kaia , DK-1-distribution ) ;
13340: LD_EXP 31
13344: PPUSH
13345: LD_STRING DK-1-distribution
13347: PPUSH
13348: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13352: LD_EXP 26
13356: PPUSH
13357: LD_STRING DH-1-distribution
13359: PPUSH
13360: CALL_OW 88
// if IsOk ( Givi ) then
13364: LD_EXP 27
13368: PPUSH
13369: CALL_OW 302
13373: IFFALSE 13399
// begin Say ( Givi , DG-1-distribution ) ;
13375: LD_EXP 27
13379: PPUSH
13380: LD_STRING DG-1-distribution
13382: PPUSH
13383: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13387: LD_EXP 26
13391: PPUSH
13392: LD_STRING DH-3-distribution
13394: PPUSH
13395: CALL_OW 88
// end ; end ; DialogueOff ;
13399: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13403: LD_STRING Crates1
13405: PPUSH
13406: CALL_OW 337
// farmerRequestedCrates := 300 ;
13410: LD_ADDR_EXP 14
13414: PUSH
13415: LD_INT 300
13417: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13418: LD_STRING FarmerCrates
13420: PPUSH
13421: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13425: LD_INT 10
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13435: LD_INT 108
13437: PPUSH
13438: LD_INT 61
13440: PPUSH
13441: CALL_OW 86
// end ;
13445: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13446: LD_EXP 6
13450: PUSH
13451: LD_INT 22
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: LD_INT 57
13466: PUSH
13467: EMPTY
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 2
13476: PUSH
13477: LD_INT 30
13479: PUSH
13480: LD_INT 6
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 30
13489: PUSH
13490: LD_INT 7
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: AND
13512: PUSH
13513: LD_INT 22
13515: PUSH
13516: LD_INT 2
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 3
13525: PUSH
13526: LD_INT 57
13528: PUSH
13529: EMPTY
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 30
13538: PUSH
13539: LD_INT 4
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: AND
13556: IFFALSE 13720
13558: GO 13560
13560: DISABLE
13561: LD_INT 0
13563: PPUSH
// begin wait ( 0 0$10 ) ;
13564: LD_INT 350
13566: PPUSH
13567: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_EXP 40
13580: PPUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 25
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PPUSH
13605: CALL_OW 72
13609: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13610: LD_EXP 26
13614: PPUSH
13615: LD_STRING DH-1-task
13617: PPUSH
13618: CALL_OW 88
// if IsOk ( Sophia ) then
13622: LD_EXP 32
13626: PPUSH
13627: CALL_OW 302
13631: IFFALSE 13671
// begin Say ( Sophia , DS-1-task ) ;
13633: LD_EXP 32
13637: PPUSH
13638: LD_STRING DS-1-task
13640: PPUSH
13641: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13645: LD_EXP 32
13649: PPUSH
13650: LD_STRING DS-2-task
13652: PPUSH
13653: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13657: LD_EXP 26
13661: PPUSH
13662: LD_STRING DH-2-task
13664: PPUSH
13665: CALL_OW 88
// end else
13669: GO 13705
// if eng then
13671: LD_VAR 0 1
13675: IFFALSE 13705
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13677: LD_VAR 0 1
13681: PUSH
13682: LD_INT 1
13684: ARRAY
13685: PPUSH
13686: LD_STRING DArm-1-task
13688: PPUSH
13689: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13693: LD_EXP 26
13697: PPUSH
13698: LD_STRING DH-2-task
13700: PPUSH
13701: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13705: LD_STRING BaseConstructed
13707: PPUSH
13708: CALL_OW 337
// allowConvoys := true ;
13712: LD_ADDR_EXP 11
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// end ;
13720: PPOPN 1
13722: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13723: LD_INT 22
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 34
13735: PUSH
13736: LD_INT 12
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PPUSH
13747: CALL_OW 69
13751: IFFALSE 13919
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
// begin wait ( 0 0$2 ) ;
13761: LD_INT 70
13763: PPUSH
13764: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13768: LD_ADDR_VAR 0 1
13772: PUSH
13773: LD_INT 22
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 34
13785: PUSH
13786: LD_INT 12
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13802: LD_ADDR_VAR 0 2
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: CALL_OW 250
13820: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13821: LD_ADDR_VAR 0 3
13825: PUSH
13826: LD_VAR 0 1
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: PPUSH
13835: CALL_OW 251
13839: ST_TO_ADDR
// DialogueOn ;
13840: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13844: LD_VAR 0 2
13848: PPUSH
13849: LD_VAR 0 3
13853: PPUSH
13854: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13858: LD_VAR 0 2
13862: PPUSH
13863: LD_VAR 0 3
13867: PPUSH
13868: LD_INT 2
13870: PPUSH
13871: LD_INT 6
13873: NEG
13874: PPUSH
13875: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13879: LD_INT 10
13881: PPUSH
13882: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_STRING DH-1-seecargo
13893: PPUSH
13894: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13898: LD_VAR 0 2
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: LD_INT 2
13910: PPUSH
13911: CALL_OW 331
// DialogueOff ;
13915: CALL_OW 7
// end ;
13919: PPOPN 3
13921: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13922: LD_EXP 4
13926: PUSH
13927: LD_EXP 13
13931: PUSH
13932: LD_INT 300
13934: GREATEREQUAL
13935: AND
13936: IFFALSE 14008
13938: GO 13940
13940: DISABLE
// begin DialogueOn ;
13941: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13945: LD_EXP 34
13949: PPUSH
13950: LD_STRING DF-1-delivery-2
13952: PPUSH
13953: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13957: LD_EXP 26
13961: PPUSH
13962: LD_STRING DH-1-delivery-2
13964: PPUSH
13965: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING DF-2-delivery-2
13976: PPUSH
13977: CALL_OW 94
// DialogueOff ;
13981: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13985: LD_STRING Crates2
13987: PPUSH
13988: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13992: LD_ADDR_EXP 15
13996: PUSH
13997: LD_INT 63000
13999: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14000: LD_ADDR_EXP 14
14004: PUSH
14005: LD_INT 600
14007: ST_TO_ADDR
// end ;
14008: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
14009: LD_EXP 4
14013: PUSH
14014: LD_EXP 13
14018: PUSH
14019: LD_INT 600
14021: GREATEREQUAL
14022: AND
14023: IFFALSE 14189
14025: GO 14027
14027: DISABLE
// begin DialogueOn ;
14028: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14032: LD_EXP 34
14036: PPUSH
14037: LD_STRING DF-1-delivery-3
14039: PPUSH
14040: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14044: LD_EXP 26
14048: PPUSH
14049: LD_STRING DH-1-delivery-3
14051: PPUSH
14052: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14056: LD_EXP 34
14060: PPUSH
14061: LD_STRING DF-2-delivery-3
14063: PPUSH
14064: CALL_OW 94
// if IsOk ( Kaia ) then
14068: LD_EXP 31
14072: PPUSH
14073: CALL_OW 302
14077: IFFALSE 14127
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14079: LD_EXP 31
14083: PPUSH
14084: LD_STRING DK-1-delivery-3
14086: PPUSH
14087: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14091: LD_EXP 26
14095: PPUSH
14096: LD_STRING DH-2-delivery-3
14098: PPUSH
14099: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14103: LD_EXP 27
14107: PPUSH
14108: LD_STRING DG-1-delivery-3
14110: PPUSH
14111: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14115: LD_EXP 28
14119: PPUSH
14120: LD_STRING DM-1-delivery-3
14122: PPUSH
14123: CALL_OW 88
// end ; DialogueOff ;
14127: CALL_OW 7
// if Difficulty = 2 then
14131: LD_OWVAR 67
14135: PUSH
14136: LD_INT 2
14138: EQUAL
14139: IFFALSE 14166
// begin ChangeMissionObjectives ( Crates3 ) ;
14141: LD_STRING Crates3
14143: PPUSH
14144: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14148: LD_ADDR_EXP 15
14152: PUSH
14153: LD_INT 63000
14155: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
14156: LD_ADDR_EXP 14
14160: PUSH
14161: LD_INT 900
14163: ST_TO_ADDR
// end else
14164: GO 14189
// begin ChangeMissionObjectives ( Crates4 ) ;
14166: LD_STRING Crates4
14168: PPUSH
14169: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14173: LD_ADDR_EXP 15
14177: PUSH
14178: LD_INT 63000
14180: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
14181: LD_ADDR_EXP 14
14185: PUSH
14186: LD_INT 1200
14188: ST_TO_ADDR
// end ; end ;
14189: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
14190: LD_EXP 4
14194: PUSH
14195: LD_EXP 13
14199: PUSH
14200: LD_INT 600
14202: PUSH
14203: LD_INT 900
14205: PUSH
14206: LD_INT 1200
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: LD_OWVAR 67
14218: ARRAY
14219: GREATEREQUAL
14220: AND
14221: PUSH
14222: LD_EXP 14
14226: PUSH
14227: LD_EXP 15
14231: LESSEQUAL
14232: AND
14233: IFFALSE 14306
14235: GO 14237
14237: DISABLE
// begin retreatAllowed := true ;
14238: LD_ADDR_EXP 10
14242: PUSH
14243: LD_INT 1
14245: ST_TO_ADDR
// display_strings := [ ] ;
14246: LD_ADDR_OWVAR 47
14250: PUSH
14251: EMPTY
14252: ST_TO_ADDR
// DialogueOn ;
14253: CALL_OW 6
// Video ( true ) ;
14257: LD_INT 1
14259: PPUSH
14260: CALL 1020 0 1
// SayRadio ( Omar , DO-radio-end ) ;
14264: LD_EXP 35
14268: PPUSH
14269: LD_STRING DO-radio-end
14271: PPUSH
14272: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14276: LD_EXP 26
14280: PPUSH
14281: LD_STRING DH-1-radio-end
14283: PPUSH
14284: CALL_OW 88
// Video ( false ) ;
14288: LD_INT 0
14290: PPUSH
14291: CALL 1020 0 1
// DialogueOff ;
14295: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14299: LD_STRING Retreat
14301: PPUSH
14302: CALL_OW 337
// end ;
14306: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14307: LD_EXP 10
14311: IFFALSE 14446
14313: GO 14315
14315: DISABLE
14316: LD_INT 0
14318: PPUSH
14319: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14320: LD_INT 10
14322: PPUSH
14323: LD_INT 0
14325: PPUSH
14326: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_EXP 37
14339: PPUSH
14340: LD_INT 25
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PPUSH
14350: CALL_OW 72
14354: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14355: LD_VAR 0 1
14359: PUSH
14360: LD_INT 102
14362: PPUSH
14363: LD_INT 69
14365: PPUSH
14366: CALL_OW 428
14370: PUSH
14371: LD_INT 0
14373: EQUAL
14374: AND
14375: IFFALSE 14442
// begin for i in tmp do
14377: LD_ADDR_VAR 0 2
14381: PUSH
14382: LD_VAR 0 1
14386: PUSH
14387: FOR_IN
14388: IFFALSE 14412
// if IsInUnit ( i ) then
14390: LD_VAR 0 2
14394: PPUSH
14395: CALL_OW 310
14399: IFFALSE 14410
// ComExitBuilding ( i ) ;
14401: LD_VAR 0 2
14405: PPUSH
14406: CALL_OW 122
14410: GO 14387
14412: POP
14413: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_INT 31
14421: PPUSH
14422: LD_INT 102
14424: PPUSH
14425: LD_INT 69
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 205
// wait ( 0 0$3 ) ;
14435: LD_INT 105
14437: PPUSH
14438: CALL_OW 67
// end ; StartCargoEvacuation ;
14442: CALL 4533 0 0
// end ;
14446: PPOPN 2
14448: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14449: LD_EXP 10
14453: NOT
14454: PUSH
14455: LD_INT 5
14457: PPUSH
14458: CALL_OW 301
14462: AND
14463: IFFALSE 14487
14465: GO 14467
14467: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14468: LD_EXP 34
14472: PPUSH
14473: LD_STRING DF-1-failure
14475: PPUSH
14476: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14480: LD_STRING FarmerDepot
14482: PPUSH
14483: CALL_OW 104
// end ;
14487: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
14488: LD_EXP 10
14492: PUSH
14493: LD_EXP 26
14497: PPUSH
14498: LD_EXP 34
14502: PPUSH
14503: CALL_OW 296
14507: PUSH
14508: LD_INT 6
14510: LESS
14511: AND
14512: IFFALSE 15115
14514: GO 14516
14516: DISABLE
14517: LD_INT 0
14519: PPUSH
14520: PPUSH
14521: PPUSH
// begin allowConvoys := false ;
14522: LD_ADDR_EXP 11
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// Video ( true ) ;
14530: LD_INT 1
14532: PPUSH
14533: CALL 1020 0 1
// ComTurnUnit ( Heike , Farmer ) ;
14537: LD_EXP 26
14541: PPUSH
14542: LD_EXP 34
14546: PPUSH
14547: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14551: LD_EXP 34
14555: PPUSH
14556: LD_EXP 26
14560: PPUSH
14561: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14565: LD_EXP 34
14569: PPUSH
14570: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14574: LD_EXP 26
14578: PPUSH
14579: LD_STRING DH-1-end
14581: PPUSH
14582: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14586: LD_EXP 34
14590: PPUSH
14591: LD_STRING DF-1-end
14593: PPUSH
14594: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14598: LD_EXP 34
14602: PPUSH
14603: LD_STRING DF-2-end
14605: PPUSH
14606: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14610: LD_EXP 26
14614: PPUSH
14615: LD_STRING DH-2-end
14617: PPUSH
14618: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14622: LD_EXP 34
14626: PPUSH
14627: LD_STRING DF-3-end
14629: PPUSH
14630: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14634: LD_EXP 26
14638: PPUSH
14639: LD_STRING DH-3-end
14641: PPUSH
14642: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14646: LD_EXP 27
14650: PPUSH
14651: LD_STRING DG-1-end
14653: PPUSH
14654: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14658: LD_EXP 26
14662: PPUSH
14663: LD_STRING DH-4-end
14665: PPUSH
14666: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14670: LD_EXP 34
14674: PPUSH
14675: LD_STRING DF-4-end
14677: PPUSH
14678: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14682: LD_EXP 26
14686: PPUSH
14687: LD_STRING DH-5-end
14689: PPUSH
14690: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14694: LD_EXP 34
14698: PPUSH
14699: LD_STRING DF-5-end
14701: PPUSH
14702: CALL_OW 88
// Video ( false ) ;
14706: LD_INT 0
14708: PPUSH
14709: CALL 1020 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14713: LD_ADDR_VAR 0 2
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: LD_OWVAR 67
14736: ARRAY
14737: ST_TO_ADDR
// if farmerSquad < max then
14738: LD_EXP 37
14742: PUSH
14743: LD_VAR 0 2
14747: LESS
14748: IFFALSE 14760
// max := farmerSquad ;
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_EXP 37
14759: ST_TO_ADDR
// for i := 1 to max do
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_VAR 0 2
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14814
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14778: LD_EXP 37
14782: PUSH
14783: LD_INT 1
14785: ARRAY
14786: PPUSH
14787: LD_INT 2
14789: PPUSH
14790: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14794: LD_ADDR_EXP 37
14798: PUSH
14799: LD_EXP 37
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 3
14811: ST_TO_ADDR
// end ;
14812: GO 14775
14814: POP
14815: POP
// for i in Farmer ^ farmerSquad do
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: LD_EXP 34
14825: PUSH
14826: LD_EXP 37
14830: ADD
14831: PUSH
14832: FOR_IN
14833: IFFALSE 14872
// begin if IsInUnit ( i ) then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 310
14844: IFFALSE 14855
// ComExitBuilding ( i ) ;
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14855: LD_VAR 0 1
14859: PPUSH
14860: LD_INT 102
14862: PPUSH
14863: LD_INT 7
14865: PPUSH
14866: CALL_OW 171
// end ;
14870: GO 14832
14872: POP
14873: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 5
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: PUSH
14908: LD_INT 5
14910: DIFF
14911: PUSH
14912: FOR_IN
14913: IFFALSE 14929
// SetSide ( i , 2 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 2
14922: PPUSH
14923: CALL_OW 235
14927: GO 14912
14929: POP
14930: POP
// repeat wait ( 0 0$1 ) ;
14931: LD_INT 35
14933: PPUSH
14934: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: LD_EXP 34
14947: PUSH
14948: LD_EXP 37
14952: ADD
14953: PPUSH
14954: LD_INT 95
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 72
14968: ST_TO_ADDR
// if tmp then
14969: LD_VAR 0 3
14973: IFFALSE 15017
// for i in tmp do
14975: LD_ADDR_VAR 0 1
14979: PUSH
14980: LD_VAR 0 3
14984: PUSH
14985: FOR_IN
14986: IFFALSE 15015
// begin farmerSquad := farmerSquad diff i ;
14988: LD_ADDR_EXP 37
14992: PUSH
14993: LD_EXP 37
14997: PUSH
14998: LD_VAR 0 1
15002: DIFF
15003: ST_TO_ADDR
// RemoveUnit ( i ) ;
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 64
// end ;
15013: GO 14985
15015: POP
15016: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15017: LD_EXP 37
15021: PUSH
15022: EMPTY
15023: EQUAL
15024: PUSH
15025: LD_EXP 34
15029: PPUSH
15030: CALL_OW 305
15034: NOT
15035: AND
15036: IFFALSE 14931
// if farmerHumanLoseCounter = 0 then
15038: LD_EXP 18
15042: PUSH
15043: LD_INT 0
15045: EQUAL
15046: IFFALSE 15055
// SetAchievement ( ACH_BABY ) ;
15048: LD_STRING ACH_BABY
15050: PPUSH
15051: CALL_OW 543
// wait ( 1 1$00 ) ;
15055: LD_INT 2100
15057: PPUSH
15058: CALL_OW 67
// SendAttack ;
15062: CALL 6973 0 0
// wait ( [ 5 5$00 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15066: LD_INT 10500
15068: PUSH
15069: LD_INT 9450
15071: PUSH
15072: LD_INT 8400
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: LIST
15079: PUSH
15080: LD_OWVAR 67
15084: ARRAY
15085: PPUSH
15086: CALL_OW 67
// SendAttack ;
15090: CALL 6973 0 0
// if Difficulty > 2 then
15094: LD_OWVAR 67
15098: PUSH
15099: LD_INT 2
15101: GREATER
15102: IFFALSE 15115
// begin wait ( 4 4$00 ) ;
15104: LD_INT 8400
15106: PPUSH
15107: CALL_OW 67
// SendAttack ;
15111: CALL 6973 0 0
// end ; end ;
15115: PPOPN 3
15117: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15118: LD_EXP 15
15122: PUSH
15123: LD_INT 18900
15125: LESSEQUAL
15126: IFFALSE 15175
15128: GO 15130
15130: DISABLE
// begin DialogueOn ;
15131: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15135: LD_EXP 34
15139: PPUSH
15140: LD_STRING DF-1-distribution-a
15142: PPUSH
15143: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15147: LD_EXP 26
15151: PPUSH
15152: LD_STRING DH-1-distribution-a
15154: PPUSH
15155: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15159: LD_EXP 34
15163: PPUSH
15164: LD_STRING DF-2-distribution-a
15166: PPUSH
15167: CALL_OW 94
// DialogueOff ;
15171: CALL_OW 7
// end ;
15175: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15176: LD_EXP 15
15180: PUSH
15181: LD_INT 0
15183: LESSEQUAL
15184: IFFALSE 15216
15186: GO 15188
15188: DISABLE
// begin DialogueOn ;
15189: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15193: LD_EXP 34
15197: PPUSH
15198: LD_STRING DF-3-distribution-a
15200: PPUSH
15201: CALL_OW 94
// YouLost ( Distribution ) ;
15205: LD_STRING Distribution
15207: PPUSH
15208: CALL_OW 104
// DialogueOff ;
15212: CALL_OW 7
// end ;
15216: END
// every 0 0$1 trigger vehCounter >= 2 do
15217: LD_EXP 20
15221: PUSH
15222: LD_INT 2
15224: GREATEREQUAL
15225: IFFALSE 15237
15227: GO 15229
15229: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15230: LD_STRING VehConstructed
15232: PPUSH
15233: CALL_OW 337
15237: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15238: LD_INT 22
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 34
15250: PUSH
15251: LD_INT 12
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: IFFALSE 15326
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15275: LD_EXP 26
15279: PPUSH
15280: LD_STRING DH-1-truck
15282: PPUSH
15283: CALL_OW 88
// if IsOk ( Markov ) then
15287: LD_EXP 33
15291: PPUSH
15292: CALL_OW 302
15296: IFFALSE 15322
// begin Say ( Markov , DMar-1-truck ) ;
15298: LD_EXP 33
15302: PPUSH
15303: LD_STRING DMar-1-truck
15305: PPUSH
15306: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15310: LD_EXP 26
15314: PPUSH
15315: LD_STRING DH-2-truck
15317: PPUSH
15318: CALL_OW 88
// end ; DialogueOff ;
15322: CALL_OW 7
// end ;
15326: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
// if IsOk ( Givi ) then
15332: LD_EXP 27
15336: PPUSH
15337: CALL_OW 302
15341: IFFALSE 15357
// begin Say ( Givi , DG-1-nocargo ) ;
15343: LD_EXP 27
15347: PPUSH
15348: LD_STRING DG-1-nocargo
15350: PPUSH
15351: CALL_OW 88
// exit ;
15355: GO 15453
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15357: LD_ADDR_VAR 0 2
15361: PUSH
15362: LD_EXP 40
15366: PPUSH
15367: LD_INT 26
15369: PUSH
15370: LD_INT 1
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 72
15381: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15382: LD_ADDR_VAR 0 3
15386: PUSH
15387: LD_EXP 40
15391: PPUSH
15392: LD_INT 26
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PPUSH
15402: CALL_OW 72
15406: ST_TO_ADDR
// if randomMen then
15407: LD_VAR 0 2
15411: IFFALSE 15431
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15413: LD_VAR 0 2
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: PPUSH
15422: LD_STRING DArm-1-nocargo
15424: PPUSH
15425: CALL_OW 88
15429: GO 15453
// if randomWomen then
15431: LD_VAR 0 3
15435: IFFALSE 15453
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PPUSH
15446: LD_STRING DArf-1-nocargo
15448: PPUSH
15449: CALL_OW 88
// end ;
15453: LD_VAR 0 1
15457: RET
// export function IncomingAttack ; begin
15458: LD_INT 0
15460: PPUSH
// if attackWave = 1 then
15461: LD_EXP 17
15465: PUSH
15466: LD_INT 1
15468: EQUAL
15469: IFFALSE 15540
// begin DialogueOn ;
15471: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15475: LD_EXP 35
15479: PPUSH
15480: LD_STRING DO-1-radio-1
15482: PPUSH
15483: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15487: LD_EXP 26
15491: PPUSH
15492: LD_STRING DH-1-radio-1-
15494: PPUSH
15495: CALL_OW 88
// if IsOk ( Markov ) then
15499: LD_EXP 33
15503: PPUSH
15504: CALL_OW 302
15508: IFFALSE 15534
// begin Say ( Markov , DMar-1-radio-1 ) ;
15510: LD_EXP 33
15514: PPUSH
15515: LD_STRING DMar-1-radio-1
15517: PPUSH
15518: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15522: LD_EXP 26
15526: PPUSH
15527: LD_STRING DH-2-radio-1
15529: PPUSH
15530: CALL_OW 88
// end ; DialogueOff ;
15534: CALL_OW 7
// end else
15538: GO 15564
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15540: LD_EXP 35
15544: PPUSH
15545: LD_STRING DO-1-radio-u
15547: PPUSH
15548: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15552: LD_EXP 26
15556: PPUSH
15557: LD_STRING DH-1-radio-u
15559: PPUSH
15560: CALL_OW 88
// end ; end ;
15564: LD_VAR 0 1
15568: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15569: LD_EXP 42
15573: PPUSH
15574: LD_INT 95
15576: PUSH
15577: LD_INT 8
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 72
15588: IFFALSE 15691
15590: GO 15592
15592: DISABLE
15593: LD_INT 0
15595: PPUSH
// begin enable ;
15596: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_EXP 42
15606: PPUSH
15607: LD_INT 95
15609: PUSH
15610: LD_INT 8
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PPUSH
15617: CALL_OW 72
15621: PUSH
15622: FOR_IN
15623: IFFALSE 15652
// begin usForces := usForces diff i ;
15625: LD_ADDR_EXP 42
15629: PUSH
15630: LD_EXP 42
15634: PUSH
15635: LD_VAR 0 1
15639: DIFF
15640: ST_TO_ADDR
// RemoveUnit ( i ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: CALL_OW 64
// end ;
15650: GO 15622
15652: POP
15653: POP
// if not americanHasEscaped and attackWave = 1 then
15654: LD_EXP 7
15658: NOT
15659: PUSH
15660: LD_EXP 17
15664: PUSH
15665: LD_INT 1
15667: EQUAL
15668: AND
15669: IFFALSE 15691
// begin americanHasEscaped := true ;
15671: LD_ADDR_EXP 7
15675: PUSH
15676: LD_INT 1
15678: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15679: LD_EXP 26
15683: PPUSH
15684: LD_STRING DH-2-assault-a
15686: PPUSH
15687: CALL_OW 88
// end ; end ;
15691: PPOPN 1
15693: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15694: LD_INT 4
15696: PPUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 70
15711: IFFALSE 15728
15713: GO 15715
15715: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15716: LD_EXP 34
15720: PPUSH
15721: LD_STRING DF-1-attack
15723: PPUSH
15724: CALL_OW 94
15728: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15729: LD_INT 5
15731: PPUSH
15732: CALL_OW 255
15736: PUSH
15737: LD_INT 2
15739: EQUAL
15740: IFFALSE 15752
15742: GO 15744
15744: DISABLE
// YouLost ( Attack ) ;
15745: LD_STRING Attack
15747: PPUSH
15748: CALL_OW 104
15752: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15753: LD_INT 22
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 69
15781: NOT
15782: PUSH
15783: LD_INT 22
15785: PUSH
15786: LD_INT 4
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: NOT
15798: AND
15799: PUSH
15800: LD_EXP 10
15804: NOT
15805: AND
15806: PUSH
15807: LD_EXP 13
15811: PUSH
15812: LD_INT 90
15814: GREATER
15815: AND
15816: PUSH
15817: LD_INT 7
15819: PPUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 21
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 70
15848: AND
15849: PUSH
15850: LD_INT 22
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 50
15862: PUSH
15863: EMPTY
15864: LIST
15865: PUSH
15866: LD_INT 30
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: AND
15886: IFFALSE 16543
15888: GO 15890
15890: DISABLE
15891: LD_INT 0
15893: PPUSH
15894: PPUSH
15895: PPUSH
15896: PPUSH
15897: PPUSH
// begin depot := usDepot ;
15898: LD_ADDR_VAR 0 5
15902: PUSH
15903: LD_INT 11
15905: ST_TO_ADDR
// if not depot then
15906: LD_VAR 0 5
15910: NOT
15911: IFFALSE 15951
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15913: LD_ADDR_VAR 0 5
15917: PUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_EXP 40
15960: PPUSH
15961: LD_INT 26
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 72
15975: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15976: LD_ADDR_VAR 0 2
15980: PUSH
15981: LD_EXP 40
15985: PPUSH
15986: LD_INT 26
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if IsOk ( Kaia ) then
16001: LD_EXP 31
16005: PPUSH
16006: CALL_OW 302
16010: IFFALSE 16031
// speaker := [ Kaia , DK ] else
16012: LD_ADDR_VAR 0 3
16016: PUSH
16017: LD_EXP 31
16021: PUSH
16022: LD_STRING DK
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: ST_TO_ADDR
16029: GO 16111
// if randomMen then
16031: LD_VAR 0 1
16035: IFFALSE 16070
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16037: LD_ADDR_VAR 0 3
16041: PUSH
16042: LD_VAR 0 1
16046: PUSH
16047: LD_INT 1
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 12
16059: ARRAY
16060: PUSH
16061: LD_STRING DArm
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: ST_TO_ADDR
16068: GO 16111
// if randomWomen then
16070: LD_VAR 0 2
16074: IFFALSE 16109
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_VAR 0 2
16085: PUSH
16086: LD_INT 1
16088: PPUSH
16089: LD_VAR 0 2
16093: PPUSH
16094: CALL_OW 12
16098: ARRAY
16099: PUSH
16100: LD_STRING DArf
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: ST_TO_ADDR
16107: GO 16111
// exit ;
16109: GO 16543
// if IsInUnit ( speaker [ 1 ] ) then
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: PPUSH
16120: CALL_OW 310
16124: IFFALSE 16147
// place := IsInUnit ( speaker [ 1 ] ) else
16126: LD_ADDR_VAR 0 4
16130: PUSH
16131: LD_VAR 0 3
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PPUSH
16140: CALL_OW 310
16144: ST_TO_ADDR
16145: GO 16161
// place := speaker [ 1 ] ;
16147: LD_ADDR_VAR 0 4
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16161: LD_VAR 0 4
16165: PPUSH
16166: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16170: LD_VAR 0 4
16174: PPUSH
16175: CALL_OW 250
16179: PPUSH
16180: LD_VAR 0 4
16184: PPUSH
16185: CALL_OW 251
16189: PPUSH
16190: CALL 3041 0 2
// wait ( 0 0$2 ) ;
16194: LD_INT 70
16196: PPUSH
16197: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16201: LD_EXP 36
16205: PPUSH
16206: CALL_OW 305
16210: NOT
16211: IFFALSE 16215
// exit ;
16213: GO 16543
// allowConvoys := false ;
16215: LD_ADDR_EXP 11
16219: PUSH
16220: LD_INT 0
16222: ST_TO_ADDR
// InGameOn ;
16223: CALL_OW 8
// wait ( 0 0$1 ) ;
16227: LD_INT 35
16229: PPUSH
16230: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16234: LD_EXP 36
16238: PPUSH
16239: LD_STRING DI-1-land
16241: PPUSH
16242: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 1
16253: ARRAY
16254: PPUSH
16255: CALL_OW 310
16259: IFFALSE 16274
// ComExit ( speaker [ 1 ] ) ;
16261: LD_VAR 0 3
16265: PUSH
16266: LD_INT 1
16268: ARRAY
16269: PPUSH
16270: CALL 1124 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16274: LD_VAR 0 3
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: LD_EXP 36
16287: PPUSH
16288: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16292: LD_VAR 0 3
16296: PUSH
16297: LD_INT 1
16299: ARRAY
16300: PPUSH
16301: LD_EXP 36
16305: PPUSH
16306: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16310: LD_EXP 36
16314: PPUSH
16315: LD_VAR 0 3
16319: PUSH
16320: LD_INT 1
16322: ARRAY
16323: PPUSH
16324: CALL_OW 119
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 1
16342: ARRAY
16343: PPUSH
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 2
16351: ARRAY
16352: PUSH
16353: LD_STRING -1-land
16355: STR
16356: PPUSH
16357: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16361: LD_EXP 36
16365: PPUSH
16366: LD_STRING DI-2-land
16368: PPUSH
16369: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16373: LD_VAR 0 3
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 3
16386: PUSH
16387: LD_INT 2
16389: ARRAY
16390: PUSH
16391: LD_STRING -2-land
16393: STR
16394: PPUSH
16395: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16399: LD_VAR 0 3
16403: PUSH
16404: LD_INT 1
16406: ARRAY
16407: PPUSH
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 2
16415: ARRAY
16416: PUSH
16417: LD_STRING -3-land
16419: STR
16420: PPUSH
16421: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16425: LD_EXP 26
16429: PPUSH
16430: LD_STRING DH-1-land
16432: PPUSH
16433: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16437: LD_VAR 0 5
16441: PPUSH
16442: CALL_OW 313
16446: PUSH
16447: LD_INT 6
16449: EQUAL
16450: IFFALSE 16470
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16452: LD_VAR 0 5
16456: PPUSH
16457: CALL_OW 313
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16470: LD_EXP 36
16474: PPUSH
16475: LD_INT 2
16477: PPUSH
16478: CALL_OW 235
// CenterOnUnits ( depot ) ;
16482: LD_VAR 0 5
16486: PPUSH
16487: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16491: LD_EXP 36
16495: PPUSH
16496: LD_VAR 0 5
16500: PPUSH
16501: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16505: LD_INT 35
16507: PPUSH
16508: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
16512: LD_EXP 36
16516: PPUSH
16517: CALL_OW 310
16521: IFFALSE 16505
// InGameOff ;
16523: CALL_OW 9
// ibrahimInDepot := true ;
16527: LD_ADDR_EXP 23
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// allowConvoys := true ;
16535: LD_ADDR_EXP 11
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// end ;
16543: PPOPN 5
16545: END
// export function IbrahimQuery ; begin
16546: LD_INT 0
16548: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16549: LD_STRING IbrahimQuery
16551: PPUSH
16552: CALL_OW 97
16556: PUSH
16557: LD_INT 1
16559: DOUBLE
16560: EQUAL
16561: IFTRUE 16565
16563: GO 16874
16565: POP
// begin allowConvoys := false ;
16566: LD_ADDR_EXP 11
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// ibrahimInDepot := false ;
16574: LD_ADDR_EXP 23
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// InGameOn ;
16582: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16586: LD_EXP 26
16590: PPUSH
16591: CALL_OW 87
// wait ( 0 0$1 ) ;
16595: LD_INT 35
16597: PPUSH
16598: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16602: LD_EXP 26
16606: PPUSH
16607: LD_STRING DH-1-interrogation
16609: PPUSH
16610: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16614: LD_EXP 36
16618: PPUSH
16619: LD_STRING DI-1-interrogation
16621: PPUSH
16622: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16626: LD_EXP 26
16630: PPUSH
16631: LD_STRING DH-2-interrogation
16633: PPUSH
16634: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16638: LD_EXP 36
16642: PPUSH
16643: LD_STRING DI-2-interrogation
16645: PPUSH
16646: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16650: LD_EXP 26
16654: PPUSH
16655: LD_STRING DH-3-interrogation
16657: PPUSH
16658: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16662: LD_EXP 36
16666: PPUSH
16667: LD_STRING DI-3-interrogation
16669: PPUSH
16670: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16674: LD_EXP 26
16678: PPUSH
16679: LD_STRING DH-4-interrogation
16681: PPUSH
16682: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16686: LD_EXP 36
16690: PPUSH
16691: LD_STRING DI-4-interrogation
16693: PPUSH
16694: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16698: LD_EXP 26
16702: PPUSH
16703: LD_STRING DH-5-interrogation
16705: PPUSH
16706: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16710: LD_EXP 36
16714: PPUSH
16715: LD_STRING DI-5-interrogation
16717: PPUSH
16718: CALL_OW 88
// wait ( 0 0$1 ) ;
16722: LD_INT 35
16724: PPUSH
16725: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16729: LD_STRING IbrahimDecisionQuery
16731: PPUSH
16732: CALL_OW 97
16736: PUSH
16737: LD_INT 1
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16769
16745: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16746: LD_EXP 36
16750: PPUSH
16751: LD_STRING DI-1-kill
16753: PPUSH
16754: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16758: LD_EXP 36
16762: PPUSH
16763: CALL_OW 66
// end ; 2 :
16767: GO 16868
16769: LD_INT 2
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 16867
16777: POP
// begin SetSide ( Ibrahim , 6 ) ;
16778: LD_EXP 36
16782: PPUSH
16783: LD_INT 6
16785: PPUSH
16786: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16790: LD_EXP 36
16794: PPUSH
16795: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16799: LD_EXP 36
16803: PPUSH
16804: LD_INT 32
16806: PPUSH
16807: LD_INT 5
16809: PPUSH
16810: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16814: LD_EXP 26
16818: PPUSH
16819: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16823: LD_EXP 26
16827: PPUSH
16828: LD_INT 36
16830: PPUSH
16831: LD_INT 21
16833: PPUSH
16834: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16838: LD_EXP 36
16842: PPUSH
16843: LD_INT 2800
16845: PPUSH
16846: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16850: LD_EXP 36
16854: PPUSH
16855: LD_INT 38
16857: PPUSH
16858: LD_INT 28
16860: PPUSH
16861: CALL_OW 171
// end ; end ;
16865: GO 16868
16867: POP
// InGameOff ;
16868: CALL_OW 9
// end ; 2 :
16872: GO 16888
16874: LD_INT 2
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 16887
16882: POP
// exit ; end ;
16883: GO 16911
16885: GO 16888
16887: POP
// allowConvoys := true ;
16888: LD_ADDR_EXP 11
16892: PUSH
16893: LD_INT 1
16895: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16896: LD_INT 1400
16898: PPUSH
16899: CALL_OW 67
// ibrahimIsFree := true ;
16903: LD_ADDR_EXP 24
16907: PUSH
16908: LD_INT 1
16910: ST_TO_ADDR
// end ;
16911: LD_VAR 0 1
16915: RET
// every 0 0$10 trigger ibrahimIsFree and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot ;
16916: LD_EXP 24
16920: PUSH
16921: LD_INT 22
16923: PUSH
16924: LD_INT 2
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 50
16933: PUSH
16934: EMPTY
16935: LIST
16936: PUSH
16937: LD_INT 30
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: AND
16957: PUSH
16958: LD_EXP 36
16962: PPUSH
16963: LD_INT 7
16965: PPUSH
16966: CALL_OW 308
16970: AND
16971: PUSH
16972: LD_INT 6
16974: PPUSH
16975: LD_EXP 26
16979: PPUSH
16980: CALL_OW 292
16984: AND
16985: PUSH
16986: LD_INT 22
16988: PUSH
16989: LD_INT 4
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: NOT
17001: AND
17002: PUSH
17003: LD_INT 22
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 21
17015: PUSH
17016: LD_INT 1
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 69
17031: NOT
17032: AND
17033: IFFALSE 17688
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
// begin allowConvoys := false ;
17044: LD_ADDR_EXP 11
17048: PUSH
17049: LD_INT 0
17051: ST_TO_ADDR
// depot := usDepot ;
17052: LD_ADDR_VAR 0 4
17056: PUSH
17057: LD_INT 11
17059: ST_TO_ADDR
// if not usDepot then
17060: LD_INT 11
17062: NOT
17063: IFFALSE 17110
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17065: LD_ADDR_VAR 0 4
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 50
17082: PUSH
17083: EMPTY
17084: LIST
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: ST_TO_ADDR
// InGameOn ;
17110: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17114: LD_EXP 36
17118: PPUSH
17119: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17123: LD_EXP 26
17127: PPUSH
17128: LD_EXP 36
17132: PPUSH
17133: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17137: LD_EXP 36
17141: PPUSH
17142: LD_EXP 26
17146: PPUSH
17147: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
17151: LD_EXP 36
17155: PPUSH
17156: LD_STRING DI-1-free
17158: PPUSH
17159: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17163: LD_EXP 26
17167: PPUSH
17168: LD_STRING DH-1-free
17170: PPUSH
17171: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17175: LD_EXP 36
17179: PPUSH
17180: LD_STRING DI-2-free
17182: PPUSH
17183: CALL_OW 88
// changeClass := 0 ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17195: LD_STRING IbrahimJoinQuery
17197: PPUSH
17198: CALL_OW 97
17202: PUSH
17203: LD_INT 1
17205: DOUBLE
17206: EQUAL
17207: IFTRUE 17211
17209: GO 17222
17211: POP
// begin changeClass := 1 ;
17212: LD_ADDR_VAR 0 1
17216: PUSH
17217: LD_INT 1
17219: ST_TO_ADDR
// end ; 2 :
17220: GO 17462
17222: LD_INT 2
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17382
17230: POP
// begin Say ( Heike , DH-1-decline ) ;
17231: LD_EXP 26
17235: PPUSH
17236: LD_STRING DH-1-decline
17238: PPUSH
17239: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17243: LD_EXP 36
17247: PPUSH
17248: LD_STRING DI-1-decline
17250: PPUSH
17251: CALL_OW 88
// InGameOff ;
17255: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17259: LD_EXP 36
17263: PPUSH
17264: LD_INT 30
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 111
// p := 0 ;
17274: LD_ADDR_VAR 0 3
17278: PUSH
17279: LD_INT 0
17281: ST_TO_ADDR
// repeat p := p + 1 ;
17282: LD_ADDR_VAR 0 3
17286: PUSH
17287: LD_VAR 0 3
17291: PUSH
17292: LD_INT 1
17294: PLUS
17295: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17296: LD_INT 35
17298: PPUSH
17299: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17303: LD_EXP 36
17307: PPUSH
17308: LD_INT 30
17310: PPUSH
17311: LD_INT 1
17313: PPUSH
17314: CALL_OW 307
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 101
17331: PUSH
17332: LD_INT 6
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PPUSH
17343: CALL_OW 69
17347: NOT
17348: OR
17349: PUSH
17350: LD_VAR 0 3
17354: PUSH
17355: LD_INT 10
17357: GREATER
17358: OR
17359: IFFALSE 17282
// RemoveUnit ( Ibrahim ) ;
17361: LD_EXP 36
17365: PPUSH
17366: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17370: LD_INT 1
17372: PPUSH
17373: LD_STRING 03_IbrahimHasEscaped
17375: PPUSH
17376: CALL_OW 39
// end ; 3 :
17380: GO 17462
17382: LD_INT 3
17384: DOUBLE
17385: EQUAL
17386: IFTRUE 17390
17388: GO 17461
17390: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17391: LD_EXP 26
17395: PPUSH
17396: LD_STRING DH-1-radio-hq
17398: PPUSH
17399: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17403: LD_EXP 35
17407: PPUSH
17408: LD_STRING DO-1-radio-hq
17410: PPUSH
17411: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17415: LD_EXP 26
17419: PPUSH
17420: LD_STRING DH-2-radio-hq
17422: PPUSH
17423: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17427: LD_EXP 35
17431: PPUSH
17432: LD_STRING DO-2-radio-hq
17434: PPUSH
17435: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17439: LD_EXP 26
17443: PPUSH
17444: LD_STRING DH-3-radio-hq
17446: PPUSH
17447: CALL_OW 88
// changeClass := 1 ;
17451: LD_ADDR_VAR 0 1
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// end ; end ;
17459: GO 17462
17461: POP
// if changeClass then
17462: LD_VAR 0 1
17466: IFFALSE 17688
// begin Say ( Heike , DH-1-agree ) ;
17468: LD_EXP 26
17472: PPUSH
17473: LD_STRING DH-1-agree
17475: PPUSH
17476: CALL_OW 88
// if IsOk ( Givi ) then
17480: LD_EXP 27
17484: PPUSH
17485: CALL_OW 302
17489: IFFALSE 17527
// begin Say ( Givi , DG-1-agree ) ;
17491: LD_EXP 27
17495: PPUSH
17496: LD_STRING DG-1-agree
17498: PPUSH
17499: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17503: LD_EXP 26
17507: PPUSH
17508: LD_STRING DH-2-agree
17510: PPUSH
17511: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17515: LD_EXP 27
17519: PPUSH
17520: LD_STRING DG-2-agree
17522: PPUSH
17523: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17527: LD_VAR 0 4
17531: PPUSH
17532: CALL_OW 313
17536: PUSH
17537: LD_INT 6
17539: EQUAL
17540: IFFALSE 17560
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17542: LD_VAR 0 4
17546: PPUSH
17547: CALL_OW 313
17551: PUSH
17552: LD_INT 1
17554: ARRAY
17555: PPUSH
17556: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17560: LD_EXP 36
17564: PPUSH
17565: LD_INT 2
17567: PPUSH
17568: CALL_OW 235
// ComEnterUnit ( Ibrahim , depot ) ;
17572: LD_EXP 36
17576: PPUSH
17577: LD_VAR 0 4
17581: PPUSH
17582: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17586: LD_INT 35
17588: PPUSH
17589: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17593: LD_EXP 36
17597: PPUSH
17598: CALL_OW 310
17602: IFFALSE 17586
// b := IsInUnit ( Ibrahim ) ;
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_EXP 36
17613: PPUSH
17614: CALL_OW 310
17618: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
17619: LD_EXP 36
17623: PPUSH
17624: CALL_OW 64
// uc_side := 2 ;
17628: LD_ADDR_OWVAR 20
17632: PUSH
17633: LD_INT 2
17635: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17636: LD_ADDR_EXP 36
17640: PUSH
17641: LD_STRING Ibrahim
17643: PPUSH
17644: LD_INT 0
17646: PPUSH
17647: LD_STRING 
17649: PPUSH
17650: CALL 297 0 3
17654: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17655: LD_EXP 36
17659: PPUSH
17660: LD_VAR 0 2
17664: PPUSH
17665: CALL_OW 52
// InGameOff ;
17669: CALL_OW 9
// allowConvoys := true ;
17673: LD_ADDR_EXP 11
17677: PUSH
17678: LD_INT 1
17680: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17681: LD_STRING ACH_IBRAHIM
17683: PPUSH
17684: CALL_OW 543
// end ; end ;
17688: PPOPN 4
17690: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17691: LD_EXP 10
17695: PUSH
17696: LD_EXP 19
17700: PUSH
17701: LD_INT 1
17703: LESS
17704: AND
17705: IFFALSE 18096
17707: GO 17709
17709: DISABLE
// begin DialogueOn ;
17710: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17714: LD_EXP 26
17718: PPUSH
17719: LD_STRING DH-1-final
17721: PPUSH
17722: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17726: LD_OWVAR 1
17730: PUSH
17731: LD_INT 126000
17733: PUSH
17734: LD_INT 115500
17736: PUSH
17737: LD_INT 105000
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: LD_OWVAR 67
17749: ARRAY
17750: LESSEQUAL
17751: IFFALSE 17765
// AddMedal ( med1 , 1 ) else
17753: LD_STRING med1
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 101
17763: GO 17776
// AddMedal ( med1 , - 1 ) ;
17765: LD_STRING med1
17767: PPUSH
17768: LD_INT 1
17770: NEG
17771: PPUSH
17772: CALL_OW 101
// if vehCounter >= 2 then
17776: LD_EXP 20
17780: PUSH
17781: LD_INT 2
17783: GREATEREQUAL
17784: IFFALSE 17798
// AddMedal ( med2 , 1 ) else
17786: LD_STRING med2
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 101
17796: GO 17809
// AddMedal ( med2 , - 1 ) ;
17798: LD_STRING med2
17800: PPUSH
17801: LD_INT 1
17803: NEG
17804: PPUSH
17805: CALL_OW 101
// if deadCounter = 0 then
17809: LD_EXP 8
17813: PUSH
17814: LD_INT 0
17816: EQUAL
17817: IFFALSE 17831
// AddMedal ( med3 , 1 ) else
17819: LD_STRING med3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 101
17829: GO 17842
// AddMedal ( med3 , - 1 ) ;
17831: LD_STRING med3
17833: PPUSH
17834: LD_INT 1
17836: NEG
17837: PPUSH
17838: CALL_OW 101
// GiveMedals ( MAIN ) ;
17842: LD_STRING MAIN
17844: PPUSH
17845: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17849: LD_INT 22
17851: PUSH
17852: LD_INT 2
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 23
17861: PUSH
17862: LD_INT 2
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 21
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: PPUSH
17889: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17893: LD_EXP 26
17897: PPUSH
17898: LD_STRING 03_Heike
17900: PPUSH
17901: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17905: LD_EXP 30
17909: PPUSH
17910: LD_STRING 03_Aviradze
17912: PPUSH
17913: CALL_OW 38
// if Givi then
17917: LD_EXP 27
17921: IFFALSE 17935
// SaveCharacters ( Givi , 03_Givi ) ;
17923: LD_EXP 27
17927: PPUSH
17928: LD_STRING 03_Givi
17930: PPUSH
17931: CALL_OW 38
// if Mike then
17935: LD_EXP 28
17939: IFFALSE 17953
// SaveCharacters ( Mike , 03_Mike ) ;
17941: LD_EXP 28
17945: PPUSH
17946: LD_STRING 03_Mike
17948: PPUSH
17949: CALL_OW 38
// if Kamil then
17953: LD_EXP 29
17957: IFFALSE 17971
// SaveCharacters ( Kamil , 03_Kamil ) ;
17959: LD_EXP 29
17963: PPUSH
17964: LD_STRING 03_Kamil
17966: PPUSH
17967: CALL_OW 38
// if Kaia then
17971: LD_EXP 31
17975: IFFALSE 17989
// SaveCharacters ( Kaia , 03_Kaia ) ;
17977: LD_EXP 31
17981: PPUSH
17982: LD_STRING 03_Kaia
17984: PPUSH
17985: CALL_OW 38
// if Sophia then
17989: LD_EXP 32
17993: IFFALSE 18007
// SaveCharacters ( Sophia , 03_Sophia ) ;
17995: LD_EXP 32
17999: PPUSH
18000: LD_STRING 03_Sophia
18002: PPUSH
18003: CALL_OW 38
// if Markov then
18007: LD_EXP 33
18011: IFFALSE 18025
// SaveCharacters ( Markov , 03_Markov ) ;
18013: LD_EXP 33
18017: PPUSH
18018: LD_STRING 03_Markov
18020: PPUSH
18021: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18025: LD_EXP 36
18029: PUSH
18030: LD_EXP 36
18034: PPUSH
18035: CALL_OW 255
18039: PUSH
18040: LD_INT 2
18042: EQUAL
18043: AND
18044: IFFALSE 18058
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18046: LD_EXP 36
18050: PPUSH
18051: LD_STRING 03_Ibrahim
18053: PPUSH
18054: CALL_OW 38
// if heikeSecondSquad then
18058: LD_EXP 40
18062: IFFALSE 18076
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18064: LD_EXP 40
18068: PPUSH
18069: LD_STRING 03_others
18071: PPUSH
18072: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18076: LD_EXP 8
18080: PPUSH
18081: LD_STRING 03_DeadCounter
18083: PPUSH
18084: CALL_OW 39
// YouWin ;
18088: CALL_OW 103
// DialogueOff ;
18092: CALL_OW 7
// end ; end_of_file
18096: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18097: LD_VAR 0 1
18101: PUSH
18102: LD_EXP 26
18106: EQUAL
18107: IFFALSE 18116
// YouLost ( Heike ) ;
18109: LD_STRING Heike
18111: PPUSH
18112: CALL_OW 104
// if un = Aviradze then
18116: LD_VAR 0 1
18120: PUSH
18121: LD_EXP 30
18125: EQUAL
18126: IFFALSE 18135
// YouLost ( Aviradze ) ;
18128: LD_STRING Aviradze
18130: PPUSH
18131: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18135: LD_VAR 0 1
18139: PUSH
18140: LD_INT 11
18142: EQUAL
18143: PUSH
18144: LD_EXP 10
18148: NOT
18149: AND
18150: IFFALSE 18159
// YouLost ( Depot ) ;
18152: LD_STRING Depot
18154: PPUSH
18155: CALL_OW 104
// if un = arDepot then
18159: LD_VAR 0 1
18163: PUSH
18164: LD_INT 5
18166: EQUAL
18167: IFFALSE 18176
// YouLost ( FarmerDepot ) ;
18169: LD_STRING FarmerDepot
18171: PPUSH
18172: CALL_OW 104
// if un = Farmer then
18176: LD_VAR 0 1
18180: PUSH
18181: LD_EXP 34
18185: EQUAL
18186: IFFALSE 18195
// YouLost ( Farmer ) ;
18188: LD_STRING Farmer
18190: PPUSH
18191: CALL_OW 104
// if un in usForces then
18195: LD_VAR 0 1
18199: PUSH
18200: LD_EXP 42
18204: IN
18205: IFFALSE 18223
// usForces := usForces diff un ;
18207: LD_ADDR_EXP 42
18211: PUSH
18212: LD_EXP 42
18216: PUSH
18217: LD_VAR 0 1
18221: DIFF
18222: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 22
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 23
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: IN
18268: IFFALSE 18284
// deadCounter := deadCounter + 1 ;
18270: LD_ADDR_EXP 8
18274: PUSH
18275: LD_EXP 8
18279: PUSH
18280: LD_INT 1
18282: PLUS
18283: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18284: LD_VAR 0 1
18288: PUSH
18289: LD_INT 22
18291: PUSH
18292: LD_INT 4
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 34
18301: PUSH
18302: LD_INT 12
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 69
18317: IN
18318: PUSH
18319: LD_EXP 16
18323: NOT
18324: AND
18325: IFFALSE 18335
// firstConvoyDestroyed := true ;
18327: LD_ADDR_EXP 16
18331: PUSH
18332: LD_INT 1
18334: ST_TO_ADDR
// if un in usAttackers then
18335: LD_VAR 0 1
18339: PUSH
18340: LD_EXP 45
18344: IN
18345: IFFALSE 18363
// usAttackers := usAttackers diff un ;
18347: LD_ADDR_EXP 45
18351: PUSH
18352: LD_EXP 45
18356: PUSH
18357: LD_VAR 0 1
18361: DIFF
18362: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_INT 22
18370: PUSH
18371: LD_INT 5
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PPUSH
18392: CALL_OW 69
18396: IN
18397: IFFALSE 18413
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18399: LD_ADDR_EXP 18
18403: PUSH
18404: LD_EXP 18
18408: PUSH
18409: LD_INT 1
18411: PLUS
18412: ST_TO_ADDR
// end ;
18413: PPOPN 1
18415: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18416: LD_VAR 0 2
18420: PUSH
18421: LD_EXP 36
18425: EQUAL
18426: PUSH
18427: LD_EXP 23
18431: AND
18432: IFFALSE 18478
// begin Video ( true ) ;
18434: LD_INT 1
18436: PPUSH
18437: CALL 1020 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
18441: LD_EXP 36
18445: PPUSH
18446: LD_INT 11
18448: PPUSH
18449: CALL_OW 120
// repeat wait ( 3 ) ;
18453: LD_INT 3
18455: PPUSH
18456: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18460: LD_EXP 36
18464: PPUSH
18465: CALL_OW 310
18469: IFFALSE 18453
// Video ( false ) ;
18471: LD_INT 0
18473: PPUSH
18474: CALL 1020 0 1
// end ; end ;
18478: PPOPN 2
18480: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18481: LD_VAR 0 2
18485: PUSH
18486: LD_EXP 26
18490: EQUAL
18491: PUSH
18492: LD_VAR 0 1
18496: PUSH
18497: LD_INT 11
18499: EQUAL
18500: AND
18501: PUSH
18502: LD_EXP 23
18506: AND
18507: IFFALSE 18513
// IbrahimQuery ;
18509: CALL 16546 0 0
// end ;
18513: PPOPN 2
18515: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 141
// if oldId in usAttackers then
18525: LD_VAR 0 2
18529: PUSH
18530: LD_EXP 45
18534: IN
18535: IFFALSE 18553
// usAttackers := usAttackers diff oldId ;
18537: LD_ADDR_EXP 45
18541: PUSH
18542: LD_EXP 45
18546: PUSH
18547: LD_VAR 0 2
18551: DIFF
18552: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18553: LD_VAR 0 3
18557: PUSH
18558: LD_INT 4
18560: EQUAL
18561: PUSH
18562: LD_EXP 16
18566: NOT
18567: AND
18568: IFFALSE 18578
// firstConvoyDestroyed := true ;
18570: LD_ADDR_EXP 16
18574: PUSH
18575: LD_INT 1
18577: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay then
18578: LD_VAR 0 2
18582: PPUSH
18583: CALL_OW 264
18587: PUSH
18588: LD_INT 12
18590: EQUAL
18591: IFFALSE 18629
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18593: LD_ADDR_EXP 12
18597: PUSH
18598: LD_EXP 12
18602: PUSH
18603: LD_INT 1
18605: PLUS
18606: ST_TO_ADDR
// if GetCargo ( oldId , mat_cans ) = 0 then
18607: LD_VAR 0 2
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 289
18619: PUSH
18620: LD_INT 0
18622: EQUAL
18623: IFFALSE 18629
// EmptyCargoDialog ;
18625: CALL 15327 0 0
// end ; end ;
18629: PPOPN 4
18631: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18632: LD_VAR 0 1
18636: PUSH
18637: LD_INT 2
18639: EQUAL
18640: PUSH
18641: LD_VAR 0 2
18645: PUSH
18646: LD_INT 5
18648: EQUAL
18649: AND
18650: IFFALSE 18659
// YouLost ( Attack ) ;
18652: LD_STRING Attack
18654: PPUSH
18655: CALL_OW 104
// end ;
18659: PPOPN 2
18661: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 255
18671: PUSH
18672: LD_INT 1
18674: EQUAL
18675: PUSH
18676: LD_EXP 6
18680: NOT
18681: AND
18682: IFFALSE 18816
// begin if GetBType ( b ) = b_lab then
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL_OW 266
18693: PUSH
18694: LD_INT 6
18696: EQUAL
18697: IFFALSE 18737
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18699: LD_EXP 42
18703: PPUSH
18704: LD_INT 25
18706: PUSH
18707: LD_INT 4
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 72
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 120
// AmLabResearch ( b ) ;
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL 6036 0 1
// end ; if GetBType ( b ) = b_armoury then
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 266
18746: PUSH
18747: LD_INT 4
18749: EQUAL
18750: IFFALSE 18798
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18752: LD_EXP 42
18756: PPUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 54
18772: PUSH
18773: EMPTY
18774: LIST
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PPUSH
18784: CALL_OW 72
18788: PPUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18798: LD_ADDR_EXP 44
18802: PUSH
18803: LD_EXP 44
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 3
18815: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18816: LD_VAR 0 1
18820: PPUSH
18821: CALL_OW 255
18825: PUSH
18826: LD_INT 5
18828: EQUAL
18829: IFFALSE 18843
// SetBLevel ( b , 5 ) ;
18831: LD_VAR 0 1
18835: PPUSH
18836: LD_INT 5
18838: PPUSH
18839: CALL_OW 241
// end ;
18843: PPOPN 1
18845: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 255
18855: PUSH
18856: LD_INT 2
18858: EQUAL
18859: IFFALSE 18875
// vehCounter := vehCounter + 1 ;
18861: LD_ADDR_EXP 20
18865: PUSH
18866: LD_EXP 20
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: ST_TO_ADDR
// end ;
18875: PPOPN 2
18877: END
// on SailEvent ( event ) do begin if event = eventAttack then
18878: LD_VAR 0 1
18882: PUSH
18883: LD_EXP 22
18887: EQUAL
18888: IFFALSE 18894
// AmericanAttack ;
18890: CALL 7493 0 0
// end ; end_of_file
18894: PPOPN 1
18896: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
18897: LD_OWVAR 1
18901: PUSH
18902: LD_INT 8400
18904: PUSH
18905: LD_INT 6300
18907: PUSH
18908: LD_INT 5250
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: LD_OWVAR 67
18920: ARRAY
18921: LESSEQUAL
18922: IFFALSE 18949
18924: GO 18926
18926: DISABLE
// begin enable ;
18927: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18928: LD_INT 1
18930: PPUSH
18931: LD_INT 5
18933: PPUSH
18934: CALL_OW 12
18938: PPUSH
18939: LD_INT 9
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 55
// end ;
18949: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
18950: LD_EXP 6
18954: PUSH
18955: LD_OWVAR 1
18959: PUSH
18960: LD_INT 54600
18962: PUSH
18963: LD_INT 48300
18965: PUSH
18966: LD_INT 42000
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: PUSH
18974: LD_OWVAR 67
18978: ARRAY
18979: LESSEQUAL
18980: AND
18981: IFFALSE 19008
18983: GO 18985
18985: DISABLE
// begin enable ;
18986: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18987: LD_INT 1
18989: PPUSH
18990: LD_INT 5
18992: PPUSH
18993: CALL_OW 12
18997: PPUSH
18998: LD_INT 9
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 55
// end ; end_of_file
19008: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19009: LD_EXP 10
19013: NOT
19014: PUSH
19015: LD_EXP 14
19019: AND
19020: PUSH
19021: LD_EXP 4
19025: AND
19026: PUSH
19027: LD_EXP 13
19031: PUSH
19032: LD_EXP 14
19036: LESSEQUAL
19037: AND
19038: IFFALSE 19128
19040: GO 19042
19042: DISABLE
// begin enable ;
19043: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
19044: LD_ADDR_OWVAR 47
19048: PUSH
19049: LD_STRING #X103-1
19051: PUSH
19052: LD_EXP 13
19056: PUSH
19057: LD_EXP 14
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19067: LD_ADDR_EXP 13
19071: PUSH
19072: LD_INT 5
19074: PPUSH
19075: CALL_OW 274
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 275
19087: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19088: LD_INT 10
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 287
19098: PUSH
19099: LD_INT 0
19101: EQUAL
19102: IFFALSE 19120
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19104: LD_ADDR_EXP 15
19108: PUSH
19109: LD_EXP 15
19113: PUSH
19114: LD_INT 35
19116: MINUS
19117: ST_TO_ADDR
19118: GO 19128
// farmerCratesCounter := 30 30$00 ;
19120: LD_ADDR_EXP 15
19124: PUSH
19125: LD_INT 63000
19127: ST_TO_ADDR
// end ; end_of_file
19128: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
19129: GO 19131
19131: DISABLE
// begin ru_radar := 98 ;
19132: LD_ADDR_EXP 46
19136: PUSH
19137: LD_INT 98
19139: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19140: LD_ADDR_EXP 47
19144: PUSH
19145: LD_INT 89
19147: ST_TO_ADDR
// us_hack := 99 ;
19148: LD_ADDR_EXP 48
19152: PUSH
19153: LD_INT 99
19155: ST_TO_ADDR
// us_artillery := 97 ;
19156: LD_ADDR_EXP 49
19160: PUSH
19161: LD_INT 97
19163: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19164: LD_ADDR_EXP 50
19168: PUSH
19169: LD_INT 91
19171: ST_TO_ADDR
// tech_Artillery := 80 ;
19172: LD_ADDR_EXP 51
19176: PUSH
19177: LD_INT 80
19179: ST_TO_ADDR
// tech_RadMat := 81 ;
19180: LD_ADDR_EXP 52
19184: PUSH
19185: LD_INT 81
19187: ST_TO_ADDR
// tech_BasicTools := 82 ;
19188: LD_ADDR_EXP 53
19192: PUSH
19193: LD_INT 82
19195: ST_TO_ADDR
// tech_Cargo := 83 ;
19196: LD_ADDR_EXP 54
19200: PUSH
19201: LD_INT 83
19203: ST_TO_ADDR
// tech_Track := 84 ;
19204: LD_ADDR_EXP 55
19208: PUSH
19209: LD_INT 84
19211: ST_TO_ADDR
// tech_Crane := 85 ;
19212: LD_ADDR_EXP 56
19216: PUSH
19217: LD_INT 85
19219: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19220: LD_ADDR_EXP 57
19224: PUSH
19225: LD_INT 86
19227: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19228: LD_ADDR_EXP 58
19232: PUSH
19233: LD_INT 87
19235: ST_TO_ADDR
// end ;
19236: END
