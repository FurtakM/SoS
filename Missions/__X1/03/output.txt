// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 621 0 0
// PrepareArabian ;
  12: CALL 1056 0 0
// PrepareAmerican ;
  16: CALL 4117 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9185 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 42000
 166: PUSH
 167: LD_INT 31500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 6
 216: PUSH
 217: LD_INT 7
 219: PUSH
 220: LD_INT 8
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 610
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := 0 ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 12
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 591: CALL_OW 44
 595: PPUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 49
// end ;
 608: GO 536
 610: POP
 611: POP
// InitHc ;
 612: CALL_OW 19
// end ;
 616: LD_VAR 0 3
 620: RET
// export function CreateNature ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 625: LD_INT 2
 627: PPUSH
 628: LD_INT 5
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: LD_INT 4
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: LD_OWVAR 67
 650: ARRAY
 651: PPUSH
 652: CALL 493 0 2
// for i := 1 to 2 do
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: DOUBLE
 662: LD_INT 1
 664: DEC
 665: ST_TO_ADDR
 666: LD_INT 2
 668: PUSH
 669: FOR_TO
 670: IFFALSE 705
// begin hc_class := 21 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 21
 679: ST_TO_ADDR
// hc_gallery :=  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 688: CALL_OW 44
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// end ;
 703: GO 669
 705: POP
 706: POP
// for i := 1 to 2 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 2
 719: PUSH
 720: FOR_TO
 721: IFFALSE 756
// begin hc_class := 18 ;
 723: LD_ADDR_OWVAR 28
 727: PUSH
 728: LD_INT 18
 730: ST_TO_ADDR
// hc_gallery :=  ;
 731: LD_ADDR_OWVAR 33
 735: PUSH
 736: LD_STRING 
 738: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 739: CALL_OW 44
 743: PPUSH
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: GO 720
 756: POP
 757: POP
// for i := 1 to 2 do
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: DOUBLE
 764: LD_INT 1
 766: DEC
 767: ST_TO_ADDR
 768: LD_INT 2
 770: PUSH
 771: FOR_TO
 772: IFFALSE 807
// begin hc_class := 13 ;
 774: LD_ADDR_OWVAR 28
 778: PUSH
 779: LD_INT 13
 781: ST_TO_ADDR
// hc_gallery :=  ;
 782: LD_ADDR_OWVAR 33
 786: PUSH
 787: LD_STRING 
 789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 790: CALL_OW 44
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 771
 807: POP
 808: POP
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 814: LD_INT 0
 816: PPUSH
 817: PPUSH
 818: PPUSH
// if not observer or not unit then
 819: LD_VAR 0 1
 823: NOT
 824: PUSH
 825: LD_VAR 0 2
 829: NOT
 830: OR
 831: IFFALSE 835
// exit ;
 833: GO 883
// if not See ( GetSide ( observer ) , unit ) then
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 255
 844: PPUSH
 845: LD_VAR 0 2
 849: PPUSH
 850: CALL_OW 292
 854: NOT
 855: IFFALSE 859
// exit ;
 857: GO 883
// result := GetDistUnits ( observer , unit ) < 12 ;
 859: LD_ADDR_VAR 0 3
 863: PUSH
 864: LD_VAR 0 1
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 296
 878: PUSH
 879: LD_INT 12
 881: LESS
 882: ST_TO_ADDR
// end ;
 883: LD_VAR 0 3
 887: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 888: LD_INT 0
 890: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PPUSH
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 2
 907: ARRAY
 908: PPUSH
 909: CALL_OW 488
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: PPUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: PPUSH
 932: CALL_OW 428
 936: PUSH
 937: LD_INT 0
 939: EQUAL
 940: AND
 941: IFFALSE 975
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 943: LD_VAR 0 1
 947: PPUSH
 948: LD_VAR 0 2
 952: PUSH
 953: LD_INT 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 2
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 3
 970: PPUSH
 971: CALL_OW 48
// end ;
 975: LD_VAR 0 4
 979: RET
// export function ReverseArray ( array ) ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// if not array then
 984: LD_VAR 0 1
 988: NOT
 989: IFFALSE 993
// exit ;
 991: GO 1051
// result := [ ] ;
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i := 1 to array do
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_VAR 0 1
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1049
// result := Insert ( result , 1 , array [ i ] ) ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: LD_VAR 0 1
1035: PUSH
1036: LD_VAR 0 3
1040: ARRAY
1041: PPUSH
1042: CALL_OW 2
1046: ST_TO_ADDR
1047: GO 1015
1049: POP
1050: POP
// end ; end_of_file
1051: LD_VAR 0 2
1055: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
1060: PPUSH
1061: PPUSH
// uc_side := 5 ;
1062: LD_ADDR_OWVAR 20
1066: PUSH
1067: LD_INT 5
1069: ST_TO_ADDR
// uc_nation := 2 ;
1070: LD_ADDR_OWVAR 21
1074: PUSH
1075: LD_INT 2
1077: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1078: LD_INT 5
1080: PPUSH
1081: CALL_OW 274
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: LD_INT 65
1091: PPUSH
1092: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_STRING Farmer
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_STRING 
1109: PPUSH
1110: CALL 39796 0 3
1114: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1115: LD_ADDR_EXP 37
1119: PUSH
1120: LD_STRING Omar
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_STRING 
1128: PPUSH
1129: CALL 39796 0 3
1133: ST_TO_ADDR
// omarSquad := [ ] ;
1134: LD_ADDR_EXP 40
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSquad := [ ] ;
1141: LD_ADDR_EXP 41
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1148: LD_ADDR_EXP 42
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// omarCargo := [ ] ;
1155: LD_ADDR_EXP 43
1159: PUSH
1160: EMPTY
1161: ST_TO_ADDR
// for i := 1 to 5 do
1162: LD_ADDR_VAR 0 2
1166: PUSH
1167: DOUBLE
1168: LD_INT 1
1170: DEC
1171: ST_TO_ADDR
1172: LD_INT 5
1174: PUSH
1175: FOR_TO
1176: IFFALSE 1334
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1178: LD_INT 0
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: CALL_OW 380
// un := CreateHuman ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: CALL_OW 44
1225: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1226: LD_ADDR_EXP 40
1230: PUSH
1231: LD_EXP 40
1235: PUSH
1236: LD_VAR 0 3
1240: UNION
1241: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_INT 87
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 91
1259: PUSH
1260: LD_INT 32
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 82
1269: PUSH
1270: LD_INT 15
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 79
1279: PUSH
1280: LD_INT 14
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 82
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_VAR 0 2
1308: ARRAY
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 888 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1317: LD_VAR 0 3
1321: PPUSH
1322: LD_INT 93
1324: PPUSH
1325: LD_INT 21
1327: PPUSH
1328: CALL_OW 118
// end ;
1332: GO 1175
1334: POP
1335: POP
// uc_side := 2 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 2
1343: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 28
1348: PUSH
1349: LD_STRING Heike
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 39796 0 3
1367: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 32
1372: PUSH
1373: LD_STRING Aviradze
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 39796 0 3
1391: ST_TO_ADDR
// tmp := [ ] ;
1392: LD_ADDR_VAR 0 4
1396: PUSH
1397: EMPTY
1398: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 29
1403: PUSH
1404: LD_STRING Givi
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 39796 0 3
1422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 30
1427: PUSH
1428: LD_STRING Mike
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 39796 0 3
1446: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 31
1451: PUSH
1452: LD_STRING Kamil
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 39796 0 3
1470: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 33
1475: PUSH
1476: LD_STRING Kaia
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 39796 0 3
1494: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 34
1499: PUSH
1500: LD_STRING Sophia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 39796 0 3
1518: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 35
1523: PUSH
1524: LD_STRING Markov
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 39796 0 3
1542: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1543: LD_ADDR_EXP 42
1547: PUSH
1548: LD_STRING 02_others
1550: PPUSH
1551: CALL_OW 31
1555: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1556: LD_ADDR_VAR 0 4
1560: PUSH
1561: LD_EXP 30
1565: PUSH
1566: LD_EXP 31
1570: PUSH
1571: LD_EXP 33
1575: PUSH
1576: LD_EXP 34
1580: PUSH
1581: LD_EXP 35
1585: PUSH
1586: LD_EXP 29
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_EXP 42
1603: ADD
1604: PUSH
1605: LD_INT 0
1607: DIFF
1608: ST_TO_ADDR
// heikeSquad := tmp ;
1609: LD_ADDR_EXP 41
1613: PUSH
1614: LD_VAR 0 4
1618: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1619: LD_EXP 41
1623: PPUSH
1624: LD_INT 25
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 72
1638: PUSH
1639: LD_INT 3
1641: LESS
1642: IFFALSE 1692
// begin SetClass ( Kaia , 1 ) ;
1644: LD_EXP 33
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1656: LD_EXP 30
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1668: LD_EXP 29
1672: PPUSH
1673: LD_INT 1
1675: PPUSH
1676: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1680: LD_EXP 28
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1692: LD_ADDR_VAR 0 4
1696: PUSH
1697: LD_VAR 0 4
1701: PUSH
1702: LD_STRING 02_ape
1704: PPUSH
1705: CALL_OW 31
1709: UNION
1710: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1711: LD_EXP 28
1715: PPUSH
1716: LD_INT 92
1718: PPUSH
1719: LD_INT 17
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1729: LD_EXP 36
1733: PPUSH
1734: LD_INT 95
1736: PPUSH
1737: LD_INT 19
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1747: LD_EXP 37
1751: PPUSH
1752: LD_INT 89
1754: PPUSH
1755: LD_INT 25
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1765: LD_EXP 32
1769: PPUSH
1770: LD_INT 92
1772: PPUSH
1773: LD_INT 27
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1783: LD_EXP 37
1787: PPUSH
1788: LD_EXP 32
1792: PPUSH
1793: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1797: LD_EXP 32
1801: PPUSH
1802: LD_EXP 37
1806: PPUSH
1807: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1811: LD_EXP 28
1815: PUSH
1816: LD_EXP 36
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: LD_EXP 37
1829: PPUSH
1830: CALL_OW 119
// if tmp then
1834: LD_VAR 0 4
1838: IFFALSE 1892
// for i in tmp do
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: FOR_IN
1851: IFFALSE 1890
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1853: LD_VAR 0 2
1857: PPUSH
1858: LD_INT 94
1860: PPUSH
1861: LD_INT 14
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: LD_INT 0
1869: PPUSH
1870: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_EXP 28
1883: PPUSH
1884: CALL_OW 119
// end ;
1888: GO 1850
1890: POP
1891: POP
// farmerSquad := [ ] ;
1892: LD_ADDR_EXP 39
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// uc_side := 5 ;
1899: LD_ADDR_OWVAR 20
1903: PUSH
1904: LD_INT 5
1906: ST_TO_ADDR
// uc_nation := 2 ;
1907: LD_ADDR_OWVAR 21
1911: PUSH
1912: LD_INT 2
1914: ST_TO_ADDR
// for i := 1 to 4 do
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: DOUBLE
1921: LD_INT 1
1923: DEC
1924: ST_TO_ADDR
1925: LD_INT 4
1927: PUSH
1928: FOR_TO
1929: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1931: LD_INT 0
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 2
1939: PPUSH
1940: CALL_OW 380
// un := CreateHuman ;
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: CALL_OW 44
1953: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1954: LD_VAR 0 3
1958: PPUSH
1959: LD_INT 102
1961: PPUSH
1962: LD_INT 27
1964: PPUSH
1965: LD_INT 4
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1975: LD_ADDR_EXP 39
1979: PUSH
1980: LD_EXP 39
1984: PUSH
1985: LD_VAR 0 3
1989: UNION
1990: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_EXP 37
2000: PPUSH
2001: CALL_OW 119
// end ;
2005: GO 1928
2007: POP
2008: POP
// for i := 1 to 2 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 2
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2101
// begin PrepareHuman ( false , 2 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 3
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_INT 108
2055: PPUSH
2056: LD_INT 62
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2069: LD_ADDR_EXP 39
2073: PUSH
2074: LD_EXP 39
2078: PUSH
2079: LD_VAR 0 3
2083: UNION
2084: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_EXP 37
2094: PPUSH
2095: CALL_OW 119
// end ;
2099: GO 2022
2101: POP
2102: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 63
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 15
2114: NEG
2115: PPUSH
2116: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2120: LD_INT 109
2122: PPUSH
2123: LD_INT 63
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: CALL_OW 331
// end ;
2133: LD_VAR 0 1
2137: RET
// export function PrepareIbrahim ( x , y ) ; begin
2138: LD_INT 0
2140: PPUSH
// uc_side := 6 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 6
2148: ST_TO_ADDR
// uc_nation := 3 ;
2149: LD_ADDR_OWVAR 21
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2157: LD_ADDR_EXP 38
2161: PUSH
2162: LD_STRING IbrahimRu
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: LD_STRING 
2170: PPUSH
2171: CALL 39796 0 3
2175: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2176: LD_EXP 38
2180: PPUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 50
// end ;
2201: LD_VAR 0 3
2205: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2206: LD_EXP 37
2210: PUSH
2211: LD_EXP 40
2215: ADD
2216: PPUSH
2217: LD_INT 95
2219: PUSH
2220: LD_INT 3
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 72
2231: IFFALSE 2287
2233: GO 2235
2235: DISABLE
2236: LD_INT 0
2238: PPUSH
// begin enable ;
2239: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2240: LD_ADDR_VAR 0 1
2244: PUSH
2245: LD_EXP 37
2249: PUSH
2250: LD_EXP 40
2254: ADD
2255: PPUSH
2256: LD_INT 95
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 72
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2285
// RemoveUnit ( i ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 64
2283: GO 2271
2285: POP
2286: POP
// end ;
2287: PPOPN 1
2289: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2290: LD_EXP 3
2294: PUSH
2295: LD_EXP 36
2299: PPUSH
2300: LD_INT 4
2302: PPUSH
2303: CALL_OW 308
2307: AND
2308: IFFALSE 3112
2310: GO 2312
2312: DISABLE
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2319: LD_EXP 36
2323: PPUSH
2324: LD_INT 110
2326: PPUSH
2327: LD_INT 60
2329: PPUSH
2330: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2334: LD_EXP 36
2338: PPUSH
2339: LD_INT 110
2341: PPUSH
2342: LD_INT 61
2344: PPUSH
2345: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_EXP 39
2358: PPUSH
2359: LD_INT 25
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 72
2373: ST_TO_ADDR
// if tmp then
2374: LD_VAR 0 2
2378: IFFALSE 2472
// begin for i := 1 to 2 do
2380: LD_ADDR_VAR 0 1
2384: PUSH
2385: DOUBLE
2386: LD_INT 1
2388: DEC
2389: ST_TO_ADDR
2390: LD_INT 2
2392: PUSH
2393: FOR_TO
2394: IFFALSE 2470
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2396: LD_VAR 0 2
2400: PUSH
2401: LD_VAR 0 1
2405: ARRAY
2406: PPUSH
2407: LD_INT 5
2409: PPUSH
2410: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2414: LD_VAR 0 2
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2432: LD_VAR 0 2
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PPUSH
2443: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2447: LD_VAR 0 2
2451: PUSH
2452: LD_VAR 0 1
2456: ARRAY
2457: PPUSH
2458: LD_INT 107
2460: PPUSH
2461: LD_INT 66
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2393
2470: POP
2471: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_EXP 39
2481: PPUSH
2482: LD_INT 25
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 72
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_EXP 39
2513: PPUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// until tmp ;
2529: LD_VAR 0 2
2533: IFFALSE 2497
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_INT 31
2542: PPUSH
2543: LD_INT 102
2545: PPUSH
2546: LD_INT 69
2548: PPUSH
2549: LD_INT 2
2551: PPUSH
2552: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2556: LD_INT 35
2558: PPUSH
2559: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2563: LD_EXP 39
2567: PPUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: EMPTY
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 25
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 72
2599: IFFALSE 2556
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_EXP 39
2610: PPUSH
2611: LD_INT 25
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 6
2633: PPUSH
2634: LD_INT 116
2636: PPUSH
2637: LD_INT 55
2639: PPUSH
2640: LD_INT 4
2642: PPUSH
2643: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_INT 4
2654: PPUSH
2655: LD_INT 116
2657: PPUSH
2658: LD_INT 70
2660: PPUSH
2661: LD_INT 5
2663: PPUSH
2664: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_INT 31
2675: PPUSH
2676: LD_INT 109
2678: PPUSH
2679: LD_INT 50
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2696: LD_INT 22
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 3
2718: PUSH
2719: LD_INT 57
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: IFFALSE 2689
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 5
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 30
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 57
2770: PUSH
2771: EMPTY
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2792: LD_ADDR_VAR 0 2
2796: PUSH
2797: LD_EXP 39
2801: PPUSH
2802: LD_INT 25
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 72
2816: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_VAR 0 3
2826: PPUSH
2827: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2838: LD_INT 22
2840: PUSH
2841: LD_INT 5
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 30
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 57
2863: PUSH
2864: EMPTY
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: PPUSH
2876: CALL_OW 69
2880: PUSH
2881: LD_INT 2
2883: GREATEREQUAL
2884: IFFALSE 2831
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: LD_EXP 39
2895: PPUSH
2896: LD_INT 25
2898: PUSH
2899: LD_INT 2
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 1
2918: ARRAY
2919: PPUSH
2920: LD_INT 5
2922: PPUSH
2923: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2958: LD_VAR 0 2
2962: PUSH
2963: LD_INT 2
2965: ARRAY
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2987: LD_VAR 0 2
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: ARRAY
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3013: LD_ADDR_VAR 0 4
3017: PUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 5
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 31
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: ST_TO_ADDR
// for i := 1 to 2 do
3047: LD_ADDR_VAR 0 1
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 2
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3095
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3063: LD_VAR 0 2
3067: PUSH
3068: LD_VAR 0 1
3072: PUSH
3073: LD_INT 1
3075: PLUS
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 4
3082: PUSH
3083: LD_VAR 0 1
3087: ARRAY
3088: PPUSH
3089: CALL_OW 180
3093: GO 3060
3095: POP
3096: POP
// wait ( 1 1$00 ) ;
3097: LD_INT 2100
3099: PPUSH
3100: CALL_OW 67
// farmerBaseReady := true ;
3104: LD_ADDR_EXP 4
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end ;
3112: PPOPN 4
3114: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3115: LD_EXP 4
3119: PUSH
3120: LD_EXP 11
3124: NOT
3125: AND
3126: IFFALSE 3648
3128: GO 3130
3130: DISABLE
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// begin enable ;
3138: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3139: LD_ADDR_VAR 0 3
3143: PUSH
3144: LD_EXP 39
3148: PPUSH
3149: LD_INT 25
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 72
3163: PUSH
3164: LD_EXP 36
3168: ADD
3169: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_EXP 39
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 72
3194: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: LD_INT 24
3225: PUSH
3226: LD_INT 1000
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 30
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 302
3294: IFFALSE 3358
// for i in sol do
3296: LD_ADDR_VAR 0 1
3300: PUSH
3301: LD_VAR 0 3
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3356
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 256
3318: PUSH
3319: LD_INT 999
3321: LESS
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 310
3332: NOT
3333: AND
3334: IFFALSE 3354
// ComEnterUnit ( i , arm [ 1 ] ) ;
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_VAR 0 4
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 120
3354: GO 3306
3356: POP
3357: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3358: LD_VAR 0 2
3362: NOT
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 69
3392: NOT
3393: AND
3394: IFFALSE 3486
// begin uc_side := 5 ;
3396: LD_ADDR_OWVAR 20
3400: PUSH
3401: LD_INT 5
3403: ST_TO_ADDR
// uc_nation := 2 ;
3404: LD_ADDR_OWVAR 21
3408: PUSH
3409: LD_INT 2
3411: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 380
// eng := CreateHuman ;
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3435: LD_VAR 0 2
3439: PPUSH
3440: LD_INT 102
3442: PPUSH
3443: LD_INT 8
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3453: LD_VAR 0 2
3457: PPUSH
3458: LD_INT 110
3460: PPUSH
3461: LD_INT 60
3463: PPUSH
3464: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3468: LD_ADDR_EXP 39
3472: PUSH
3473: LD_EXP 39
3477: PUSH
3478: LD_VAR 0 2
3482: UNION
3483: ST_TO_ADDR
// end else
3484: GO 3648
// begin for i in eng do
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3646
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3499: LD_INT 10
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: CALL_OW 287
3509: IFFALSE 3560
// begin if IsInUnit ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3531
// ComExitBuilding ( i ) ;
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_INT 10
3538: PPUSH
3539: CALL_OW 308
3543: NOT
3544: IFFALSE 3558
// AddComMoveToArea ( i , collectFarmerArea ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 10
3553: PPUSH
3554: CALL_OW 173
// end else
3558: GO 3644
// begin if damagedBuilding then
3560: LD_VAR 0 5
3564: IFFALSE 3608
// begin if IsInUnit ( i ) then
3566: LD_VAR 0 1
3570: PPUSH
3571: CALL_OW 310
3575: IFFALSE 3588
// ComExitBuilding ( i ) else
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 122
3586: GO 3606
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_VAR 0 5
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PPUSH
3602: CALL_OW 130
// end else
3606: GO 3644
// if not IsInUnit ( i ) and not HasTask ( i ) then
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 310
3617: NOT
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: AND
3630: IFFALSE 3644
// ComEnterUnit ( i , arDepot ) ;
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_INT 5
3639: PPUSH
3640: CALL_OW 120
// end ; end ;
3644: GO 3496
3646: POP
3647: POP
// end ; end ;
3648: PPOPN 5
3650: END
// export function CargoEvacuation ; begin
3651: LD_INT 0
3653: PPUSH
// wait ( 0 0$3 ) ;
3654: LD_INT 105
3656: PPUSH
3657: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3661: LD_ADDR_EXP 21
3665: PUSH
3666: LD_EXP 21
3670: PUSH
3671: LD_INT 1
3673: MINUS
3674: ST_TO_ADDR
// if omarCargoCounter = 0 then
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 0
3682: EQUAL
3683: IFFALSE 3687
// exit ;
3685: GO 3994
// if omarCargo then
3687: LD_EXP 43
3691: IFFALSE 3702
// RemoveUnit ( omarCargo ) ;
3693: LD_EXP 43
3697: PPUSH
3698: CALL_OW 64
// omarCargo := PrepareCargo ;
3702: LD_ADDR_EXP 43
3706: PUSH
3707: CALL 3999 0 0
3711: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3712: LD_EXP 43
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3724: LD_EXP 43
3728: PPUSH
3729: LD_INT 107
3731: PPUSH
3732: LD_INT 59
3734: PPUSH
3735: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3739: LD_INT 35
3741: PPUSH
3742: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3746: LD_EXP 43
3750: PPUSH
3751: LD_INT 107
3753: PPUSH
3754: LD_INT 59
3756: PPUSH
3757: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3761: LD_EXP 43
3765: PPUSH
3766: CALL_OW 302
3770: NOT
3771: PUSH
3772: LD_EXP 43
3776: PPUSH
3777: CALL_OW 301
3781: OR
3782: IFFALSE 3786
// exit ;
3784: GO 3994
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3786: LD_EXP 43
3790: PPUSH
3791: LD_INT 107
3793: PPUSH
3794: LD_INT 59
3796: PPUSH
3797: CALL_OW 307
3801: PUSH
3802: LD_EXP 43
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 296
3814: PUSH
3815: LD_INT 6
3817: LESS
3818: OR
3819: IFFALSE 3739
// SetTag ( omarCargo , 1 ) ;
3821: LD_EXP 43
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 109
// wait ( 0 0$03 ) ;
3833: LD_INT 105
3835: PPUSH
3836: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 5
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3855: LD_EXP 43
3859: PPUSH
3860: LD_INT 103
3862: PPUSH
3863: LD_INT 9
3865: PPUSH
3866: CALL_OW 171
// wait ( 0 0$1 ) ;
3870: LD_INT 35
3872: PPUSH
3873: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3877: LD_EXP 43
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 100
3887: PPUSH
3888: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3892: LD_INT 35
3894: PPUSH
3895: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3899: LD_EXP 43
3903: PPUSH
3904: LD_INT 103
3906: PPUSH
3907: LD_INT 9
3909: PPUSH
3910: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 302
3923: NOT
3924: PUSH
3925: LD_EXP 43
3929: PPUSH
3930: CALL_OW 301
3934: OR
3935: IFFALSE 3939
// exit ;
3937: GO 3994
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3939: LD_EXP 43
3943: PPUSH
3944: LD_INT 103
3946: PPUSH
3947: LD_INT 9
3949: PPUSH
3950: CALL_OW 307
3954: PUSH
3955: LD_EXP 43
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: CALL_OW 308
3967: OR
3968: PUSH
3969: LD_EXP 43
3973: PPUSH
3974: CALL_OW 110
3978: PUSH
3979: LD_INT 0
3981: GREATER
3982: AND
3983: IFFALSE 3892
// RemoveUnit ( omarCargo ) ;
3985: LD_EXP 43
3989: PPUSH
3990: CALL_OW 64
// end ;
3994: LD_VAR 0 1
3998: RET
// export function PrepareCargo ; var un , veh ; begin
3999: LD_INT 0
4001: PPUSH
4002: PPUSH
4003: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 32
4026: PPUSH
4027: LD_INT 80
4029: PPUSH
4030: CALL 325 0 7
4034: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 101
4054: PPUSH
4055: LD_INT 8
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4065: LD_INT 0
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 4
4073: PPUSH
4074: CALL_OW 380
// un := CreateHuman ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: CALL_OW 44
4087: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4088: LD_VAR 0 2
4092: PPUSH
4093: LD_VAR 0 3
4097: PPUSH
4098: CALL_OW 52
// result := veh ;
4102: LD_ADDR_VAR 0 1
4106: PUSH
4107: LD_VAR 0 3
4111: ST_TO_ADDR
// end ; end_of_file
4112: LD_VAR 0 1
4116: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
// usForces := [ ] ;
4122: LD_ADDR_EXP 44
4126: PUSH
4127: EMPTY
4128: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4129: LD_ADDR_EXP 46
4133: PUSH
4134: LD_INT 6
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 27
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 24
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 27
4172: PUSH
4173: LD_INT 29
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4193: LD_INT 11
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: LD_INT 150
4206: PUSH
4207: LD_INT 120
4209: PUSH
4210: LD_INT 100
4212: PUSH
4213: LD_INT 80
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL_OW 277
// if Difficulty = 1 then
4232: LD_OWVAR 67
4236: PUSH
4237: LD_INT 1
4239: EQUAL
4240: IFFALSE 4249
// RemoveUnit ( hillBun ) ;
4242: LD_INT 14
4244: PPUSH
4245: CALL_OW 64
// uc_side := 1 ;
4249: LD_ADDR_OWVAR 20
4253: PUSH
4254: LD_INT 1
4256: ST_TO_ADDR
// uc_nation := 1 ;
4257: LD_ADDR_OWVAR 21
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// hc_gallery :=  ;
4265: LD_ADDR_OWVAR 33
4269: PUSH
4270: LD_STRING 
4272: ST_TO_ADDR
// hc_name :=  ;
4273: LD_ADDR_OWVAR 26
4277: PUSH
4278: LD_STRING 
4280: ST_TO_ADDR
// hc_importance := 0 ;
4281: LD_ADDR_OWVAR 32
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: CALL_OW 380
// usCommander := CreateHuman ;
4302: LD_ADDR_EXP 45
4306: PUSH
4307: CALL_OW 44
4311: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4312: LD_EXP 45
4316: PPUSH
4317: LD_INT 11
4319: PPUSH
4320: CALL_OW 52
// if Difficulty > 1 then
4324: LD_OWVAR 67
4328: PUSH
4329: LD_INT 1
4331: GREATER
4332: IFFALSE 4414
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 1
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: LD_OWVAR 67
4358: ARRAY
4359: PPUSH
4360: CALL_OW 380
// un := CreateHuman ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: CALL_OW 44
4373: ST_TO_ADDR
// usForces := usForces union un ;
4374: LD_ADDR_EXP 44
4378: PUSH
4379: LD_EXP 44
4383: PUSH
4384: LD_VAR 0 3
4388: UNION
4389: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4390: LD_VAR 0 3
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4402: LD_VAR 0 3
4406: PPUSH
4407: LD_INT 14
4409: PPUSH
4410: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: LD_OWVAR 67
4446: ARRAY
4447: PUSH
4448: FOR_TO
4449: IFFALSE 4595
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 0
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 1
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 380
// un := CreateHuman ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 44
4494: ST_TO_ADDR
// usForces := usForces union un ;
4495: LD_ADDR_EXP 44
4499: PUSH
4500: LD_EXP 44
4504: PUSH
4505: LD_VAR 0 3
4509: UNION
4510: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 39
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: LD_INT 4
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// if i < 3 then
4532: LD_VAR 0 2
4536: PUSH
4537: LD_INT 3
4539: LESS
4540: IFFALSE 4593
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_INT 22
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 58
4559: PUSH
4560: EMPTY
4561: LIST
4562: PUSH
4563: LD_INT 30
4565: PUSH
4566: LD_INT 31
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: PPUSH
4578: CALL_OW 69
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: PPUSH
4589: CALL_OW 120
// end ;
4593: GO 4448
4595: POP
4596: POP
// for i := 1 to 2 do
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: DOUBLE
4603: LD_INT 1
4605: DEC
4606: ST_TO_ADDR
4607: LD_INT 2
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4675
// begin PrepareHuman ( false , 2 , 2 ) ;
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: LD_INT 2
4621: PPUSH
4622: CALL_OW 380
// un := CreateHuman ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: CALL_OW 44
4635: ST_TO_ADDR
// usForces := usForces union un ;
4636: LD_ADDR_EXP 44
4640: PUSH
4641: LD_EXP 44
4645: PUSH
4646: LD_VAR 0 3
4650: UNION
4651: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 39
4659: PPUSH
4660: LD_INT 24
4662: PPUSH
4663: LD_INT 4
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 50
// end ;
4673: GO 4610
4675: POP
4676: POP
// PrepareHuman ( false , 4 , 1 ) ;
4677: LD_INT 0
4679: PPUSH
4680: LD_INT 4
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// usForces := usForces union un ;
4700: LD_ADDR_EXP 44
4704: PUSH
4705: LD_EXP 44
4709: PUSH
4710: LD_VAR 0 3
4714: UNION
4715: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: LD_INT 39
4723: PPUSH
4724: LD_INT 24
4726: PPUSH
4727: LD_INT 4
4729: PPUSH
4730: LD_INT 0
4732: PPUSH
4733: CALL_OW 50
// end ;
4737: LD_VAR 0 1
4741: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4742: LD_EXP 44
4746: PUSH
4747: LD_EXP 6
4751: NOT
4752: AND
4753: PUSH
4754: LD_EXP 14
4758: NOT
4759: AND
4760: IFFALSE 5191
4762: GO 4764
4764: DISABLE
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
4770: PPUSH
4771: PPUSH
// begin enable ;
4772: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_EXP 44
4782: PPUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 72
4797: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_EXP 44
4807: PPUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PPUSH
4818: CALL_OW 72
4822: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_EXP 44
4832: PPUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 72
4847: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4848: LD_INT 7
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 70
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: IFFALSE 4945
// for i in sol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_VAR 0 4
4880: PUSH
4881: FOR_IN
4882: IFFALSE 4943
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: NOT
4894: PUSH
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 310
4904: PPUSH
4905: CALL_OW 266
4909: PUSH
4910: LD_INT 4
4912: EQUAL
4913: NOT
4914: OR
4915: IFFALSE 4941
// begin ComExitBuilding ( i ) ;
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: LD_INT 37
4933: PPUSH
4934: LD_INT 23
4936: PPUSH
4937: CALL_OW 174
// end ;
4941: GO 4881
4943: POP
4944: POP
// if eng then
4945: LD_VAR 0 3
4949: IFFALSE 5191
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 95
4968: PUSH
4969: LD_INT 7
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 21
4978: PUSH
4979: LD_INT 3
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: LD_INT 24
4991: PUSH
4992: LD_INT 1000
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// if b then
5014: LD_VAR 0 2
5018: IFFALSE 5049
// begin ComExitBuilding ( eng ) ;
5020: LD_VAR 0 3
5024: PPUSH
5025: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_VAR 0 2
5038: PUSH
5039: LD_INT 1
5041: ARRAY
5042: PPUSH
5043: CALL_OW 190
// end else
5047: GO 5191
// begin for i in eng do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 3
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5189
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5187
// begin if americanBuildList then
5074: LD_EXP 46
5078: IFFALSE 5163
// begin if IsInUnit ( i ) then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 310
5089: IFFALSE 5100
// ComExitBuilding ( i ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_EXP 46
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_EXP 46
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PPUSH
5131: LD_EXP 46
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 3
5142: ARRAY
5143: PPUSH
5144: LD_EXP 46
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PUSH
5153: LD_INT 4
5155: ARRAY
5156: PPUSH
5157: CALL_OW 205
// end else
5161: GO 5187
// if not IsInUnit ( i ) then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 310
5172: NOT
5173: IFFALSE 5187
// ComEnterUnit ( i , usDepot ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 120
// end ;
5187: GO 5059
5189: POP
5190: POP
// end ; end ; end ;
5191: PPOPN 5
5193: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5194: LD_INT 0
5196: PPUSH
5197: PPUSH
5198: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 35
5206: PUSH
5207: LD_INT 45
5209: PUSH
5210: LD_INT 48
5212: PUSH
5213: LD_EXP 59
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// for i in tech do
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: LD_VAR 0 3
5233: PUSH
5234: FOR_IN
5235: IFFALSE 5253
// AddComResearch ( lab , i ) ;
5237: LD_VAR 0 1
5241: PPUSH
5242: LD_VAR 0 4
5246: PPUSH
5247: CALL_OW 184
5251: GO 5234
5253: POP
5254: POP
// end ;
5255: LD_VAR 0 2
5259: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5260: LD_EXP 12
5264: PUSH
5265: LD_EXP 23
5269: PUSH
5270: LD_EXP 27
5274: LESSEQUAL
5275: AND
5276: IFFALSE 5301
5278: GO 5280
5280: DISABLE
// begin enable ;
5281: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5282: LD_INT 35
5284: PPUSH
5285: LD_INT 2065
5287: PPUSH
5288: CALL_OW 12
5292: PPUSH
5293: CALL_OW 67
// SendConvoy ;
5297: CALL 5407 0 0
// end ;
5301: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5302: LD_EXP 6
5306: PUSH
5307: LD_EXP 18
5311: AND
5312: IFFALSE 5406
5314: GO 5316
5316: DISABLE
// begin if americanHasEscaped then
5317: LD_EXP 8
5321: IFFALSE 5332
// wait ( 3 3$20 ) else
5323: LD_INT 7000
5325: PPUSH
5326: CALL_OW 67
5330: GO 5339
// wait ( 6 6$40 ) ;
5332: LD_INT 14000
5334: PPUSH
5335: CALL_OW 67
// SendAttack ;
5339: CALL 6154 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5343: LD_INT 14000
5345: PUSH
5346: LD_INT 11900
5348: PUSH
5349: LD_INT 11200
5351: PUSH
5352: LD_INT 10150
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_OWVAR 67
5365: ARRAY
5366: PPUSH
5367: CALL_OW 67
// SendAttack ;
5371: CALL 6154 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5375: LD_EXP 19
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: LD_INT 6
5385: PUSH
5386: LD_INT 7
5388: PUSH
5389: LD_INT 8
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_OWVAR 67
5402: ARRAY
5403: LESS
5404: IFFALSE 5343
// end ;
5406: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// road := rand ( 1 , 2 ) ;
5417: LD_ADDR_VAR 0 4
5421: PUSH
5422: LD_INT 1
5424: PPUSH
5425: LD_INT 2
5427: PPUSH
5428: CALL_OW 12
5432: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5433: LD_ADDR_VAR 0 8
5437: PUSH
5438: LD_INT 3
5440: PUSH
5441: LD_INT 8
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_VAR 0 4
5452: ARRAY
5453: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5454: LD_ADDR_VAR 0 5
5458: PUSH
5459: LD_INT 35
5461: PUSH
5462: LD_INT 66
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 101
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5491: LD_ADDR_VAR 0 6
5495: PUSH
5496: LD_INT 34
5498: PUSH
5499: LD_INT 67
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 38
5508: PUSH
5509: LD_INT 62
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 43
5518: PUSH
5519: LD_INT 54
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 57
5528: PUSH
5529: LD_INT 57
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 77
5538: PUSH
5539: LD_INT 71
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 86
5548: PUSH
5549: LD_INT 60
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 89
5558: PUSH
5559: LD_INT 35
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 93
5568: PUSH
5569: LD_INT 17
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 97
5578: PUSH
5579: LD_INT 10
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 103
5588: PUSH
5589: LD_INT 9
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// if road = 2 then
5608: LD_VAR 0 4
5612: PUSH
5613: LD_INT 2
5615: EQUAL
5616: IFFALSE 5633
// points := ReverseArray ( points ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_VAR 0 6
5627: PPUSH
5628: CALL 980 0 1
5632: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5633: LD_INT 4
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 12
5650: PPUSH
5651: LD_INT 80
5653: PPUSH
5654: CALL 325 0 7
// veh := CreateVehicle ;
5658: LD_ADDR_VAR 0 3
5662: PUSH
5663: CALL_OW 45
5667: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5668: LD_VAR 0 3
5672: PPUSH
5673: LD_VAR 0 5
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_INT 3
5686: ARRAY
5687: PPUSH
5688: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_VAR 0 5
5701: PUSH
5702: LD_VAR 0 4
5706: ARRAY
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: PPUSH
5712: LD_VAR 0 5
5716: PUSH
5717: LD_VAR 0 4
5721: ARRAY
5722: PUSH
5723: LD_INT 2
5725: ARRAY
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5734: LD_INT 0
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: LD_OWVAR 67
5744: PPUSH
5745: CALL_OW 380
// un := CreateHuman ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: CALL_OW 44
5758: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5773: LD_INT 70
5775: PUSH
5776: LD_INT 66
5778: PUSH
5779: LD_INT 62
5781: PUSH
5782: LD_INT 58
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_OWVAR 67
5795: ARRAY
5796: PPUSH
5797: CALL_OW 13
5801: PUSH
5802: LD_OWVAR 1
5806: PUSH
5807: LD_INT 30
5809: MOD
5810: PLUS
5811: PUSH
5812: LD_EXP 23
5816: PUSH
5817: LD_INT 4
5819: LESS
5820: OR
5821: IFFALSE 5838
// SetCargo ( veh , mat_cans , 100 ) ;
5823: LD_VAR 0 3
5827: PPUSH
5828: LD_INT 1
5830: PPUSH
5831: LD_INT 100
5833: PPUSH
5834: CALL_OW 290
// for i := 2 to points do
5838: LD_ADDR_VAR 0 7
5842: PUSH
5843: DOUBLE
5844: LD_INT 2
5846: DEC
5847: ST_TO_ADDR
5848: LD_VAR 0 6
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5897
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5856: LD_VAR 0 3
5860: PPUSH
5861: LD_VAR 0 6
5865: PUSH
5866: LD_VAR 0 7
5870: ARRAY
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: LD_VAR 0 6
5880: PUSH
5881: LD_VAR 0 7
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: CALL_OW 171
5895: GO 5853
5897: POP
5898: POP
// convoyCounter := convoyCounter + 1 ;
5899: LD_ADDR_EXP 23
5903: PUSH
5904: LD_EXP 23
5908: PUSH
5909: LD_INT 1
5911: PLUS
5912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5913: LD_INT 35
5915: PPUSH
5916: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5920: LD_VAR 0 3
5924: PPUSH
5925: CALL_OW 314
5929: NOT
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: CALL_OW 302
5940: AND
5941: IFFALSE 5982
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5943: LD_VAR 0 3
5947: PPUSH
5948: LD_VAR 0 6
5952: PUSH
5953: LD_VAR 0 6
5957: ARRAY
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 2
5976: ARRAY
5977: PPUSH
5978: CALL_OW 111
// if not IsInUnit ( un ) then
5982: LD_VAR 0 2
5986: PPUSH
5987: CALL_OW 310
5991: NOT
5992: IFFALSE 6033
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 6
6003: PUSH
6004: LD_VAR 0 6
6008: ARRAY
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_VAR 0 6
6018: PUSH
6019: LD_VAR 0 6
6023: ARRAY
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: PPUSH
6029: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6033: LD_VAR 0 3
6037: PPUSH
6038: LD_VAR 0 8
6042: PPUSH
6043: CALL_OW 308
6047: PUSH
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 8
6057: PPUSH
6058: CALL_OW 308
6062: OR
6063: IFFALSE 5913
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6065: LD_VAR 0 2
6069: PPUSH
6070: CALL_OW 302
6074: PUSH
6075: LD_VAR 0 3
6079: PPUSH
6080: CALL_OW 302
6084: NOT
6085: AND
6086: PUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_VAR 0 8
6096: PPUSH
6097: CALL_OW 308
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( un ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6113: LD_VAR 0 3
6117: PPUSH
6118: LD_VAR 0 8
6122: PPUSH
6123: CALL_OW 308
6127: PUSH
6128: LD_VAR 0 3
6132: PPUSH
6133: CALL_OW 302
6137: AND
6138: IFFALSE 6149
// RemoveUnit ( veh ) ;
6140: LD_VAR 0 3
6144: PPUSH
6145: CALL_OW 64
// end ;
6149: LD_VAR 0 1
6153: RET
// export function SendAttack ; var un , veh , i ; begin
6154: LD_INT 0
6156: PPUSH
6157: PPUSH
6158: PPUSH
6159: PPUSH
// if ingame_video then
6160: LD_OWVAR 52
6164: IFFALSE 6187
// begin repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// until not ingame_video ;
6173: LD_OWVAR 52
6177: NOT
6178: IFFALSE 6166
// wait ( 0 0$5 ) ;
6180: LD_INT 175
6182: PPUSH
6183: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6187: LD_INT 22
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 21
6199: PUSH
6200: LD_INT 1
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: PUSH
6216: LD_INT 10
6218: GREATER
6219: IFFALSE 6262
// begin repeat wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6228: LD_INT 22
6230: PUSH
6231: LD_INT 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 21
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: PUSH
6257: LD_INT 10
6259: LESSEQUAL
6260: IFFALSE 6221
// end ; IncomingAttack ;
6262: CALL 15298 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6266: LD_INT 2100
6268: PPUSH
6269: LD_INT 3500
6271: PPUSH
6272: CALL_OW 12
6276: PPUSH
6277: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6281: LD_ADDR_VAR 0 4
6285: PUSH
6286: DOUBLE
6287: LD_INT 1
6289: DEC
6290: ST_TO_ADDR
6291: LD_INT 3
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_OWVAR 67
6313: ARRAY
6314: PUSH
6315: LD_EXP 19
6319: PUSH
6320: LD_INT 3
6322: DIV
6323: PLUS
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6442
// begin uc_side := 1 ;
6328: LD_ADDR_OWVAR 20
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// uc_nation := 1 ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: LD_INT 1
6343: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6344: LD_INT 0
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 2
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: LD_INT 4
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: LD_OWVAR 67
6372: ARRAY
6373: PPUSH
6374: CALL_OW 380
// un := CreateHuman ;
6378: LD_ADDR_VAR 0 2
6382: PUSH
6383: CALL_OW 44
6387: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 37
6395: PPUSH
6396: LD_INT 70
6398: PPUSH
6399: LD_INT 3
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 50
// usAttackers := usAttackers union un ;
6409: LD_ADDR_EXP 47
6413: PUSH
6414: LD_EXP 47
6418: PUSH
6419: LD_VAR 0 2
6423: UNION
6424: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6425: LD_VAR 0 2
6429: PPUSH
6430: LD_INT 40
6432: PPUSH
6433: LD_INT 65
6435: PPUSH
6436: CALL_OW 111
// end ;
6440: GO 6325
6442: POP
6443: POP
// uc_side := 1 ;
6444: LD_ADDR_OWVAR 20
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// uc_nation := 1 ;
6452: LD_ADDR_OWVAR 21
6456: PUSH
6457: LD_INT 1
6459: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6460: LD_INT 0
6462: PPUSH
6463: LD_INT 4
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: CALL_OW 380
// un := CreateHuman ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: CALL_OW 44
6482: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 37
6490: PPUSH
6491: LD_INT 70
6493: PPUSH
6494: LD_INT 3
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL_OW 50
// usAttackers := usAttackers union un ;
6504: LD_ADDR_EXP 47
6508: PUSH
6509: LD_EXP 47
6513: PUSH
6514: LD_VAR 0 2
6518: UNION
6519: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6520: LD_VAR 0 2
6524: PPUSH
6525: LD_INT 40
6527: PPUSH
6528: LD_INT 65
6530: PPUSH
6531: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6535: LD_ADDR_VAR 0 4
6539: PUSH
6540: DOUBLE
6541: LD_INT 1
6543: DEC
6544: ST_TO_ADDR
6545: LD_OWVAR 67
6549: PUSH
6550: LD_EXP 19
6554: PUSH
6555: LD_INT 4
6557: DIV
6558: PLUS
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6757
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 1
6590: PPUSH
6591: LD_INT 3
6593: PPUSH
6594: CALL_OW 12
6598: ARRAY
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 4
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 1
6622: PPUSH
6623: LD_INT 3
6625: PPUSH
6626: CALL_OW 12
6630: ARRAY
6631: PPUSH
6632: LD_INT 90
6634: PPUSH
6635: CALL 325 0 7
6639: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6640: LD_VAR 0 3
6644: PPUSH
6645: LD_INT 35
6647: PPUSH
6648: LD_INT 65
6650: PPUSH
6651: LD_INT 0
6653: PPUSH
6654: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6658: LD_INT 0
6660: PPUSH
6661: LD_INT 3
6663: PPUSH
6664: LD_OWVAR 67
6668: PUSH
6669: LD_INT 1
6671: PLUS
6672: PPUSH
6673: CALL_OW 380
// un := CreateHuman ;
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: CALL_OW 44
6686: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_VAR 0 3
6696: PPUSH
6697: CALL_OW 52
// usAttackers := usAttackers union un ;
6701: LD_ADDR_EXP 47
6705: PUSH
6706: LD_EXP 47
6710: PUSH
6711: LD_VAR 0 2
6715: UNION
6716: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 39
6724: PPUSH
6725: LD_INT 60
6727: PPUSH
6728: CALL_OW 111
// wait ( 0 0$3 ) ;
6732: LD_INT 105
6734: PPUSH
6735: CALL_OW 67
// usAttackers := usAttackers union veh ;
6739: LD_ADDR_EXP 47
6743: PUSH
6744: LD_EXP 47
6748: PUSH
6749: LD_VAR 0 3
6753: UNION
6754: ST_TO_ADDR
// end ;
6755: GO 6560
6757: POP
6758: POP
// attackWave := attackWave + 1 ;
6759: LD_ADDR_EXP 19
6763: PUSH
6764: LD_EXP 19
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6773: LD_EXP 24
6777: PPUSH
6778: CALL_OW 427
// end ;
6782: LD_VAR 0 1
6786: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6787: LD_INT 0
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
// if retreatAllowed then
6800: LD_EXP 11
6804: IFFALSE 6816
// strategy := 2 else
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_INT 2
6813: ST_TO_ADDR
6814: GO 6832
// strategy := rand ( 0 , 2 ) ;
6816: LD_ADDR_VAR 0 5
6820: PUSH
6821: LD_INT 0
6823: PPUSH
6824: LD_INT 2
6826: PPUSH
6827: CALL_OW 12
6831: ST_TO_ADDR
// attackFormula := [ ] ;
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: EMPTY
6838: ST_TO_ADDR
// case strategy of 0 :
6839: LD_VAR 0 5
6843: PUSH
6844: LD_INT 0
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 7182
6852: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6853: LD_INT 11
6855: PPUSH
6856: LD_INT 22
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 4
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 70
6884: NOT
6885: IFFALSE 6957
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6887: LD_ADDR_VAR 0 6
6891: PUSH
6892: LD_INT 41
6894: PUSH
6895: LD_INT 34
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PUSH
6905: LD_INT 53
6907: PUSH
6908: LD_INT 62
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 37
6917: PUSH
6918: LD_INT 63
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 44
6927: PUSH
6928: LD_INT 45
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 37
6937: PUSH
6938: LD_INT 28
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
6955: GO 7180
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6957: LD_INT 12
6959: PPUSH
6960: LD_INT 22
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 30
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 30
6985: PUSH
6986: LD_INT 31
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 32
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PPUSH
7013: CALL_OW 70
7017: NOT
7018: IFFALSE 7101
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_INT 27
7027: PUSH
7028: LD_INT 42
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 27
7037: PUSH
7038: LD_INT 32
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 53
7051: PUSH
7052: LD_INT 62
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 37
7061: PUSH
7062: LD_INT 63
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 44
7071: PUSH
7072: LD_INT 45
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 37
7081: PUSH
7082: LD_INT 28
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
7099: GO 7180
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7101: LD_ADDR_VAR 0 6
7105: PUSH
7106: LD_INT 71
7108: PUSH
7109: LD_INT 67
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 54
7118: PUSH
7119: LD_INT 35
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 63
7132: PUSH
7133: LD_INT 40
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 37
7142: PUSH
7143: LD_INT 63
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 44
7152: PUSH
7153: LD_INT 45
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 37
7162: PUSH
7163: LD_INT 28
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: ST_TO_ADDR
// end ; 1 :
7180: GO 7385
7182: LD_INT 1
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7294
7190: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7191: LD_ADDR_VAR 0 6
7195: PUSH
7196: LD_INT 71
7198: PUSH
7199: LD_INT 67
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 82
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 53
7218: PUSH
7219: LD_INT 7
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 43
7228: PUSH
7229: LD_INT 10
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 53
7244: PUSH
7245: LD_INT 62
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 37
7254: PUSH
7255: LD_INT 63
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 44
7264: PUSH
7265: LD_INT 45
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 37
7274: PUSH
7275: LD_INT 28
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 7385
7294: LD_INT 2
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7384
7302: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7303: LD_ADDR_VAR 0 6
7307: PUSH
7308: LD_INT 90
7310: PUSH
7311: LD_INT 59
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 108
7320: PUSH
7321: LD_INT 64
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 82
7334: PUSH
7335: LD_INT 75
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 73
7344: PUSH
7345: LD_INT 67
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 101
7354: PUSH
7355: LD_INT 65
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 108
7364: PUSH
7365: LD_INT 62
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 7385
7384: POP
// if not attackFormula then
7385: LD_VAR 0 6
7389: NOT
7390: IFFALSE 7394
// exit ;
7392: GO 9072
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7394: LD_ADDR_VAR 0 7
7398: PUSH
7399: LD_EXP 47
7403: PPUSH
7404: LD_INT 25
7406: PUSH
7407: LD_INT 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 72
7418: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7419: LD_ADDR_VAR 0 8
7423: PUSH
7424: LD_EXP 47
7428: PPUSH
7429: LD_INT 25
7431: PUSH
7432: LD_INT 4
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 72
7443: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7444: LD_ADDR_VAR 0 9
7448: PUSH
7449: LD_EXP 47
7453: PPUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 72
7468: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7469: LD_ADDR_VAR 0 10
7473: PUSH
7474: LD_EXP 47
7478: PPUSH
7479: LD_INT 21
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 72
7493: ST_TO_ADDR
// if sci then
7494: LD_VAR 0 8
7498: IFFALSE 7535
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7500: LD_VAR 0 8
7504: PPUSH
7505: LD_VAR 0 6
7509: PUSH
7510: LD_INT 2
7512: ARRAY
7513: PUSH
7514: LD_INT 1
7516: ARRAY
7517: PPUSH
7518: LD_VAR 0 6
7522: PUSH
7523: LD_INT 2
7525: ARRAY
7526: PUSH
7527: LD_INT 2
7529: ARRAY
7530: PPUSH
7531: CALL_OW 111
// repeat wait ( 10 ) ;
7535: LD_INT 10
7537: PPUSH
7538: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7542: LD_ADDR_VAR 0 7
7546: PUSH
7547: LD_EXP 47
7551: PPUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 72
7566: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7567: LD_ADDR_VAR 0 8
7571: PUSH
7572: LD_EXP 47
7576: PPUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 4
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PPUSH
7587: CALL_OW 72
7591: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7592: LD_ADDR_VAR 0 9
7596: PUSH
7597: LD_EXP 47
7601: PPUSH
7602: LD_INT 25
7604: PUSH
7605: LD_INT 3
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 72
7616: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7617: LD_ADDR_VAR 0 10
7621: PUSH
7622: LD_EXP 47
7626: PPUSH
7627: LD_INT 21
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: ST_TO_ADDR
// if sol then
7642: LD_VAR 0 7
7646: IFFALSE 8067
// begin for i in sol do
7648: LD_ADDR_VAR 0 2
7652: PUSH
7653: LD_VAR 0 7
7657: PUSH
7658: FOR_IN
7659: IFFALSE 8065
// begin tag := GetTag ( i ) ;
7661: LD_ADDR_VAR 0 4
7665: PUSH
7666: LD_VAR 0 2
7670: PPUSH
7671: CALL_OW 110
7675: ST_TO_ADDR
// if not tag then
7676: LD_VAR 0 4
7680: NOT
7681: IFFALSE 7790
// begin if GetLives ( i ) = 1000 then
7683: LD_VAR 0 2
7687: PPUSH
7688: CALL_OW 256
7692: PUSH
7693: LD_INT 1000
7695: EQUAL
7696: IFFALSE 7712
// SetTag ( i , 1 ) else
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL_OW 109
7710: GO 7788
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7712: LD_VAR 0 2
7716: PPUSH
7717: LD_VAR 0 6
7721: PUSH
7722: LD_INT 2
7724: ARRAY
7725: PUSH
7726: LD_INT 1
7728: ARRAY
7729: PPUSH
7730: LD_VAR 0 6
7734: PUSH
7735: LD_INT 2
7737: ARRAY
7738: PUSH
7739: LD_INT 2
7741: ARRAY
7742: PPUSH
7743: CALL_OW 297
7747: PUSH
7748: LD_INT 10
7750: GREATER
7751: IFFALSE 7788
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7753: LD_VAR 0 2
7757: PPUSH
7758: LD_VAR 0 6
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: PPUSH
7771: LD_VAR 0 6
7775: PUSH
7776: LD_INT 2
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PPUSH
7784: CALL_OW 111
// end else
7788: GO 8063
// begin if GetLives ( i ) < 760 then
7790: LD_VAR 0 2
7794: PPUSH
7795: CALL_OW 256
7799: PUSH
7800: LD_INT 760
7802: LESS
7803: IFFALSE 7854
// begin SetTag ( i , 0 ) ;
7805: LD_VAR 0 2
7809: PPUSH
7810: LD_INT 0
7812: PPUSH
7813: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7817: LD_VAR 0 2
7821: PPUSH
7822: LD_VAR 0 6
7826: PUSH
7827: LD_INT 2
7829: ARRAY
7830: PUSH
7831: LD_INT 1
7833: ARRAY
7834: PPUSH
7835: LD_VAR 0 6
7839: PUSH
7840: LD_INT 2
7842: ARRAY
7843: PUSH
7844: LD_INT 2
7846: ARRAY
7847: PPUSH
7848: CALL_OW 111
// end else
7852: GO 8063
// if tag <= attackFormula [ 1 ] then
7854: LD_VAR 0 4
7858: PUSH
7859: LD_VAR 0 6
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: LESSEQUAL
7868: IFFALSE 8029
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7870: LD_VAR 0 2
7874: PPUSH
7875: LD_VAR 0 6
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PPUSH
7894: LD_VAR 0 6
7898: PUSH
7899: LD_INT 1
7901: ARRAY
7902: PUSH
7903: LD_VAR 0 4
7907: ARRAY
7908: PUSH
7909: LD_INT 2
7911: ARRAY
7912: PPUSH
7913: CALL_OW 297
7917: PUSH
7918: LD_INT 6
7920: GREATER
7921: IFFALSE 7972
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7923: LD_VAR 0 2
7927: PPUSH
7928: LD_VAR 0 6
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PPUSH
7947: LD_VAR 0 6
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PUSH
7956: LD_VAR 0 4
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: CALL_OW 114
7970: GO 8027
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7972: LD_INT 81
7974: PUSH
7975: LD_INT 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 91
7984: PUSH
7985: LD_VAR 0 2
7989: PUSH
7990: LD_INT 10
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: NOT
8007: IFFALSE 8027
// SetTag ( i , tag + 1 ) ;
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_VAR 0 4
8018: PUSH
8019: LD_INT 1
8021: PLUS
8022: PPUSH
8023: CALL_OW 109
// end else
8027: GO 8063
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8029: LD_VAR 0 2
8033: PPUSH
8034: LD_INT 81
8036: PUSH
8037: LD_INT 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 69
8048: PPUSH
8049: LD_VAR 0 2
8053: PPUSH
8054: CALL_OW 74
8058: PPUSH
8059: CALL_OW 115
// end ; end ;
8063: GO 7658
8065: POP
8066: POP
// end ; if sci then
8067: LD_VAR 0 8
8071: IFFALSE 8340
// begin if not sol and not mech then
8073: LD_VAR 0 7
8077: NOT
8078: PUSH
8079: LD_VAR 0 9
8083: NOT
8084: AND
8085: IFFALSE 8137
// begin for i in sci do
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_VAR 0 8
8096: PUSH
8097: FOR_IN
8098: IFFALSE 8133
// begin usForces := usForces union i ;
8100: LD_ADDR_EXP 44
8104: PUSH
8105: LD_EXP 44
8109: PUSH
8110: LD_VAR 0 2
8114: UNION
8115: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 34
8123: PPUSH
8124: LD_INT 68
8126: PPUSH
8127: CALL_OW 111
// end ;
8131: GO 8097
8133: POP
8134: POP
// end else
8135: GO 8340
// for i in sci do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: FOR_IN
8148: IFFALSE 8338
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8150: LD_VAR 0 2
8154: PPUSH
8155: LD_VAR 0 6
8159: PUSH
8160: LD_INT 2
8162: ARRAY
8163: PUSH
8164: LD_INT 1
8166: ARRAY
8167: PPUSH
8168: LD_VAR 0 6
8172: PUSH
8173: LD_INT 2
8175: ARRAY
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: CALL_OW 297
8185: PUSH
8186: LD_INT 10
8188: GREATER
8189: IFFALSE 8228
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8191: LD_VAR 0 2
8195: PPUSH
8196: LD_VAR 0 6
8200: PUSH
8201: LD_INT 2
8203: ARRAY
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_VAR 0 6
8213: PUSH
8214: LD_INT 2
8216: ARRAY
8217: PUSH
8218: LD_INT 2
8220: ARRAY
8221: PPUSH
8222: CALL_OW 111
8226: GO 8336
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8228: LD_VAR 0 7
8232: PPUSH
8233: LD_INT 3
8235: PUSH
8236: LD_INT 24
8238: PUSH
8239: LD_INT 1000
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 91
8252: PUSH
8253: LD_VAR 0 2
8257: PUSH
8258: LD_INT 10
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 72
8274: IFFALSE 8336
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8276: LD_VAR 0 2
8280: PPUSH
8281: LD_VAR 0 7
8285: PPUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 24
8291: PUSH
8292: LD_INT 1000
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 91
8305: PUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 10
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: PUSH
8328: LD_INT 1
8330: ARRAY
8331: PPUSH
8332: CALL_OW 128
8336: GO 8147
8338: POP
8339: POP
// end ; if mech then
8340: LD_VAR 0 9
8344: IFFALSE 9054
// begin for i in mech do
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 9
8355: PUSH
8356: FOR_IN
8357: IFFALSE 9052
// begin tag := GetTag ( i ) ;
8359: LD_ADDR_VAR 0 4
8363: PUSH
8364: LD_VAR 0 2
8368: PPUSH
8369: CALL_OW 110
8373: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8374: LD_ADDR_VAR 0 11
8378: PUSH
8379: LD_VAR 0 2
8383: PPUSH
8384: CALL_OW 310
8388: ST_TO_ADDR
// if not tag then
8389: LD_VAR 0 4
8393: NOT
8394: IFFALSE 8765
// begin if veh then
8396: LD_VAR 0 11
8400: IFFALSE 8571
// begin if GetLives ( veh ) = 1000 then
8402: LD_VAR 0 11
8406: PPUSH
8407: CALL_OW 256
8411: PUSH
8412: LD_INT 1000
8414: EQUAL
8415: IFFALSE 8431
// SetTag ( i , 1 ) else
8417: LD_VAR 0 2
8421: PPUSH
8422: LD_INT 1
8424: PPUSH
8425: CALL_OW 109
8429: GO 8569
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8431: LD_VAR 0 11
8435: PPUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_INT 3
8443: ARRAY
8444: PUSH
8445: LD_INT 1
8447: ARRAY
8448: PPUSH
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 3
8456: ARRAY
8457: PUSH
8458: LD_INT 2
8460: ARRAY
8461: PPUSH
8462: CALL_OW 297
8466: PUSH
8467: LD_INT 8
8469: GREATER
8470: IFFALSE 8509
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8472: LD_VAR 0 11
8476: PPUSH
8477: LD_VAR 0 6
8481: PUSH
8482: LD_INT 3
8484: ARRAY
8485: PUSH
8486: LD_INT 1
8488: ARRAY
8489: PPUSH
8490: LD_VAR 0 6
8494: PUSH
8495: LD_INT 3
8497: ARRAY
8498: PUSH
8499: LD_INT 2
8501: ARRAY
8502: PPUSH
8503: CALL_OW 111
8507: GO 8569
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8509: LD_INT 81
8511: PUSH
8512: LD_INT 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 91
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: LD_INT 10
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 69
8543: NOT
8544: IFFALSE 8569
// begin ComExitVehicle ( i ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8555: LD_VAR 0 2
8559: PPUSH
8560: LD_VAR 0 11
8564: PPUSH
8565: CALL_OW 189
// end ; end else
8569: GO 8763
// if GetLives ( i ) < 400 then
8571: LD_VAR 0 2
8575: PPUSH
8576: CALL_OW 256
8580: PUSH
8581: LD_INT 400
8583: LESS
8584: IFFALSE 8635
// begin usAttackers := usAttackers diff i ;
8586: LD_ADDR_EXP 47
8590: PUSH
8591: LD_EXP 47
8595: PUSH
8596: LD_VAR 0 2
8600: DIFF
8601: ST_TO_ADDR
// usForces := usForces union i ;
8602: LD_ADDR_EXP 44
8606: PUSH
8607: LD_EXP 44
8611: PUSH
8612: LD_VAR 0 2
8616: UNION
8617: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 34
8625: PPUSH
8626: LD_INT 68
8628: PPUSH
8629: CALL_OW 111
// end else
8633: GO 8763
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8635: LD_VAR 0 10
8639: PPUSH
8640: LD_INT 58
8642: PUSH
8643: EMPTY
8644: LIST
8645: PUSH
8646: LD_INT 24
8648: PUSH
8649: LD_INT 1000
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: PUSH
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 314
8674: NOT
8675: AND
8676: PUSH
8677: LD_INT 81
8679: PUSH
8680: LD_INT 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 91
8689: PUSH
8690: LD_VAR 0 2
8694: PUSH
8695: LD_INT 9
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: OR
8712: IFFALSE 8763
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_INT 58
8726: PUSH
8727: EMPTY
8728: LIST
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: LD_INT 250
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PPUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: CALL_OW 74
8758: PPUSH
8759: CALL_OW 120
// end else
8763: GO 9050
// begin if veh and GetLives ( veh ) < 760 then
8765: LD_VAR 0 11
8769: PUSH
8770: LD_VAR 0 11
8774: PPUSH
8775: CALL_OW 256
8779: PUSH
8780: LD_INT 760
8782: LESS
8783: AND
8784: IFFALSE 8835
// begin SetTag ( i , 0 ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_INT 0
8793: PPUSH
8794: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8798: LD_VAR 0 11
8802: PPUSH
8803: LD_VAR 0 6
8807: PUSH
8808: LD_INT 3
8810: ARRAY
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 6
8820: PUSH
8821: LD_INT 3
8823: ARRAY
8824: PUSH
8825: LD_INT 2
8827: ARRAY
8828: PPUSH
8829: CALL_OW 111
// end else
8833: GO 9050
// if veh then
8835: LD_VAR 0 11
8839: IFFALSE 9050
// if tag <= attackFormula [ 4 ] then
8841: LD_VAR 0 4
8845: PUSH
8846: LD_VAR 0 6
8850: PUSH
8851: LD_INT 4
8853: ARRAY
8854: LESSEQUAL
8855: IFFALSE 9016
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8857: LD_VAR 0 11
8861: PPUSH
8862: LD_VAR 0 6
8866: PUSH
8867: LD_INT 4
8869: ARRAY
8870: PUSH
8871: LD_VAR 0 4
8875: ARRAY
8876: PUSH
8877: LD_INT 1
8879: ARRAY
8880: PPUSH
8881: LD_VAR 0 6
8885: PUSH
8886: LD_INT 4
8888: ARRAY
8889: PUSH
8890: LD_VAR 0 4
8894: ARRAY
8895: PUSH
8896: LD_INT 2
8898: ARRAY
8899: PPUSH
8900: CALL_OW 297
8904: PUSH
8905: LD_INT 6
8907: GREATER
8908: IFFALSE 8959
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8910: LD_VAR 0 11
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 4
8922: ARRAY
8923: PUSH
8924: LD_VAR 0 4
8928: ARRAY
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: LD_VAR 0 6
8938: PUSH
8939: LD_INT 4
8941: ARRAY
8942: PUSH
8943: LD_VAR 0 4
8947: ARRAY
8948: PUSH
8949: LD_INT 2
8951: ARRAY
8952: PPUSH
8953: CALL_OW 114
8957: GO 9014
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8959: LD_INT 81
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 91
8971: PUSH
8972: LD_VAR 0 11
8976: PUSH
8977: LD_INT 10
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: NOT
8994: IFFALSE 9014
// SetTag ( i , tag + 1 ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: LD_VAR 0 4
9005: PUSH
9006: LD_INT 1
9008: PLUS
9009: PPUSH
9010: CALL_OW 109
// end else
9014: GO 9050
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9016: LD_VAR 0 11
9020: PPUSH
9021: LD_INT 81
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 69
9035: PPUSH
9036: LD_VAR 0 2
9040: PPUSH
9041: CALL_OW 74
9045: PPUSH
9046: CALL_OW 115
// end ; end ;
9050: GO 8356
9052: POP
9053: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9054: LD_EXP 47
9058: PPUSH
9059: LD_INT 52
9061: PUSH
9062: EMPTY
9063: LIST
9064: PPUSH
9065: CALL_OW 72
9069: NOT
9070: IFFALSE 7535
// end ;
9072: LD_VAR 0 1
9076: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9077: LD_INT 22
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 32
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 69
9105: IFFALSE 9182
9107: GO 9109
9109: DISABLE
9110: LD_INT 0
9112: PPUSH
// begin enable ;
9113: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9114: LD_ADDR_VAR 0 1
9118: PUSH
9119: LD_INT 22
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 32
9131: PUSH
9132: LD_INT 1
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: PUSH
9148: FOR_IN
9149: IFFALSE 9180
// if GetFuel ( i ) < 10 then
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 261
9160: PUSH
9161: LD_INT 10
9163: LESS
9164: IFFALSE 9178
// SetFuel ( i , 10 ) ;
9166: LD_VAR 0 1
9170: PPUSH
9171: LD_INT 10
9173: PPUSH
9174: CALL_OW 240
9178: GO 9148
9180: POP
9181: POP
// end ; end_of_file
9182: PPOPN 1
9184: END
// export function Action ; var hasAll , i , tmp ; begin
9185: LD_INT 0
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 22
9198: PUSH
9199: LD_INT 2
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 1
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 23
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: PUSH
9236: LD_INT 7
9238: GREATEREQUAL
9239: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9240: LD_VAR 0 2
9244: PPUSH
9245: LD_STRING 03_HasAll
9247: PPUSH
9248: CALL_OW 39
// Video ( true ) ;
9252: LD_INT 1
9254: PPUSH
9255: CALL 77169 0 1
// CenterNowOnUnits ( Heike ) ;
9259: LD_EXP 28
9263: PPUSH
9264: CALL_OW 87
// wait ( 0 0$2 ) ;
9268: LD_INT 70
9270: PPUSH
9271: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9275: LD_EXP 36
9279: PPUSH
9280: LD_STRING DF-1-start
9282: PPUSH
9283: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9287: LD_EXP 28
9291: PPUSH
9292: LD_EXP 36
9296: PPUSH
9297: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9301: LD_EXP 28
9305: PPUSH
9306: LD_STRING DH-1-start
9308: PPUSH
9309: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9313: LD_EXP 37
9317: PPUSH
9318: LD_INT 92
9320: PPUSH
9321: LD_INT 21
9323: PPUSH
9324: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9328: LD_EXP 32
9332: PPUSH
9333: LD_INT 94
9335: PPUSH
9336: LD_INT 23
9338: PPUSH
9339: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9343: LD_EXP 40
9347: PUSH
9348: LD_INT 1
9350: ARRAY
9351: PPUSH
9352: LD_INT 90
9354: PPUSH
9355: LD_INT 23
9357: PPUSH
9358: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9362: LD_EXP 40
9366: PUSH
9367: LD_INT 2
9369: ARRAY
9370: PPUSH
9371: LD_INT 93
9373: PPUSH
9374: LD_INT 25
9376: PPUSH
9377: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9381: LD_EXP 40
9385: PPUSH
9386: LD_EXP 37
9390: PPUSH
9391: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9395: LD_EXP 37
9399: PUSH
9400: LD_EXP 32
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PPUSH
9409: LD_EXP 28
9413: PPUSH
9414: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9418: LD_EXP 28
9422: PPUSH
9423: LD_EXP 37
9427: PPUSH
9428: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9432: LD_INT 35
9434: PPUSH
9435: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9439: LD_EXP 37
9443: PPUSH
9444: LD_INT 92
9446: PPUSH
9447: LD_INT 21
9449: PPUSH
9450: CALL_OW 307
9454: IFFALSE 9432
// Say ( Omar , DO-1-start ) ;
9456: LD_EXP 37
9460: PPUSH
9461: LD_STRING DO-1-start
9463: PPUSH
9464: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9468: LD_EXP 28
9472: PPUSH
9473: LD_STRING DH-2-start
9475: PPUSH
9476: CALL_OW 88
// if hasAll then
9480: LD_VAR 0 2
9484: IFFALSE 9612
// begin Say ( Omar , DO-2-start ) ;
9486: LD_EXP 37
9490: PPUSH
9491: LD_STRING DO-2-start
9493: PPUSH
9494: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9498: LD_EXP 37
9502: PPUSH
9503: LD_STRING DO-3-start
9505: PPUSH
9506: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9510: LD_EXP 28
9514: PPUSH
9515: LD_STRING DH-3-start
9517: PPUSH
9518: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9522: LD_EXP 36
9526: PPUSH
9527: LD_STRING DF-2-start
9529: PPUSH
9530: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9534: LD_EXP 37
9538: PPUSH
9539: LD_EXP 36
9543: PPUSH
9544: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9548: LD_EXP 37
9552: PPUSH
9553: LD_STRING DO-4-start
9555: PPUSH
9556: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9560: LD_EXP 36
9564: PPUSH
9565: LD_STRING DF-3-start
9567: PPUSH
9568: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9572: LD_EXP 37
9576: PPUSH
9577: LD_STRING DO-5-start
9579: PPUSH
9580: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DF-4-start
9591: PPUSH
9592: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9596: LD_EXP 37
9600: PPUSH
9601: LD_EXP 28
9605: PPUSH
9606: CALL_OW 119
// end else
9610: GO 9712
// begin Say ( Omar , DO-2-start-a ) ;
9612: LD_EXP 37
9616: PPUSH
9617: LD_STRING DO-2-start-a
9619: PPUSH
9620: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9624: LD_EXP 37
9628: PPUSH
9629: LD_STRING DO-3-start-a
9631: PPUSH
9632: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9636: LD_EXP 28
9640: PPUSH
9641: LD_STRING DH-3-start-a
9643: PPUSH
9644: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9648: LD_EXP 36
9652: PPUSH
9653: LD_STRING DF-2-start-a
9655: PPUSH
9656: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9660: LD_EXP 37
9664: PPUSH
9665: LD_EXP 36
9669: PPUSH
9670: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9674: LD_EXP 37
9678: PPUSH
9679: LD_STRING DO-4-start-a
9681: PPUSH
9682: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9686: LD_EXP 36
9690: PPUSH
9691: LD_STRING DF-3-start-a
9693: PPUSH
9694: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9698: LD_EXP 37
9702: PPUSH
9703: LD_EXP 28
9707: PPUSH
9708: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9712: LD_INT 10
9714: PPUSH
9715: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9719: LD_EXP 37
9723: PPUSH
9724: LD_STRING DO-1-mission
9726: PPUSH
9727: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9731: LD_EXP 37
9735: PPUSH
9736: LD_STRING DO-2-mission
9738: PPUSH
9739: CALL_OW 88
// if not hasAll then
9743: LD_VAR 0 2
9747: NOT
9748: IFFALSE 9762
// Say ( Omar , DO-3-mission ) ;
9750: LD_EXP 37
9754: PPUSH
9755: LD_STRING DO-3-mission
9757: PPUSH
9758: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9762: LD_EXP 37
9766: PPUSH
9767: LD_STRING DO-4-mission
9769: PPUSH
9770: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9774: LD_EXP 28
9778: PPUSH
9779: LD_STRING DH-1-mission
9781: PPUSH
9782: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9786: LD_EXP 36
9790: PPUSH
9791: LD_STRING DF-1-mission
9793: PPUSH
9794: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9798: LD_EXP 37
9802: PPUSH
9803: LD_STRING DO-5-mission
9805: PPUSH
9806: CALL_OW 88
// if not hasAll then
9810: LD_VAR 0 2
9814: NOT
9815: IFFALSE 9950
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9817: LD_ADDR_VAR 0 4
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 2
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 23
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: ST_TO_ADDR
// for i := 7 downto tmp do
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: DOUBLE
9868: LD_INT 7
9870: INC
9871: ST_TO_ADDR
9872: LD_VAR 0 4
9876: PUSH
9877: FOR_DOWNTO
9878: IFFALSE 9948
// begin if omarSquad < 3 then
9880: LD_EXP 40
9884: PUSH
9885: LD_INT 3
9887: LESS
9888: IFFALSE 9892
// break ;
9890: GO 9948
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9892: LD_EXP 40
9896: PUSH
9897: LD_INT 3
9899: ARRAY
9900: PPUSH
9901: LD_INT 2
9903: PPUSH
9904: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9908: LD_ADDR_EXP 42
9912: PUSH
9913: LD_EXP 42
9917: PUSH
9918: LD_EXP 40
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: UNION
9927: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9928: LD_ADDR_EXP 40
9932: PUSH
9933: LD_EXP 40
9937: PPUSH
9938: LD_INT 3
9940: PPUSH
9941: CALL_OW 3
9945: ST_TO_ADDR
// end ;
9946: GO 9877
9948: POP
9949: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9950: LD_EXP 37
9954: PUSH
9955: LD_EXP 40
9959: ADD
9960: PPUSH
9961: LD_INT 103
9963: PPUSH
9964: LD_INT 9
9966: PPUSH
9967: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9971: LD_VAR 0 2
9975: PUSH
9976: LD_EXP 33
9980: PPUSH
9981: CALL_OW 302
9985: AND
9986: IFFALSE 10047
// begin wait ( 0 0$3 ) ;
9988: LD_INT 105
9990: PPUSH
9991: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9995: LD_EXP 33
9999: PPUSH
10000: LD_EXP 36
10004: PPUSH
10005: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10009: LD_EXP 33
10013: PPUSH
10014: LD_STRING DK-1-side
10016: PPUSH
10017: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10021: LD_EXP 36
10025: PPUSH
10026: LD_EXP 33
10030: PPUSH
10031: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10035: LD_EXP 36
10039: PPUSH
10040: LD_STRING DF-1-side
10042: PPUSH
10043: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10047: LD_INT 22
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PPUSH
10062: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10066: LD_EXP 36
10070: PUSH
10071: LD_EXP 39
10075: ADD
10076: PPUSH
10077: LD_INT 108
10079: PPUSH
10080: LD_INT 62
10082: PPUSH
10083: CALL_OW 111
// gameStarted := true ;
10087: LD_ADDR_EXP 3
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10102: LD_EXP 28
10106: PPUSH
10107: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10111: LD_EXP 28
10115: PPUSH
10116: LD_EXP 32
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10125: LD_INT 22
10127: PUSH
10128: LD_INT 2
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PPUSH
10135: CALL_OW 69
10139: PUSH
10140: LD_EXP 28
10144: DIFF
10145: PPUSH
10146: LD_EXP 28
10150: PPUSH
10151: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10155: LD_EXP 28
10159: PPUSH
10160: LD_STRING DH-1-explore
10162: PPUSH
10163: CALL_OW 88
// if Givi then
10167: LD_EXP 29
10171: IFFALSE 10187
// Say ( Givi , DG-1-explore ) else
10173: LD_EXP 29
10177: PPUSH
10178: LD_STRING DG-1-explore
10180: PPUSH
10181: CALL_OW 88
10185: GO 10224
// if heikeSecondSquad then
10187: LD_EXP 42
10191: IFFALSE 10224
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10193: LD_EXP 42
10197: PPUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 72
10212: PUSH
10213: LD_INT 1
10215: ARRAY
10216: PPUSH
10217: LD_STRING DArm-1-explore
10219: PPUSH
10220: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10224: LD_EXP 32
10228: PPUSH
10229: LD_STRING DA-1-explore
10231: PPUSH
10232: CALL_OW 88
// if Sophia then
10236: LD_EXP 34
10240: IFFALSE 10318
// begin Say ( Sophia , DS-2-explore ) ;
10242: LD_EXP 34
10246: PPUSH
10247: LD_STRING DS-2-explore
10249: PPUSH
10250: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10254: LD_EXP 32
10258: PPUSH
10259: LD_STRING DA-2-explore
10261: PPUSH
10262: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10266: LD_EXP 34
10270: PPUSH
10271: LD_EXP 32
10275: PPUSH
10276: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10280: LD_EXP 32
10284: PPUSH
10285: LD_EXP 34
10289: PPUSH
10290: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10294: LD_EXP 34
10298: PPUSH
10299: LD_STRING DS-3-explore
10301: PPUSH
10302: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10306: LD_EXP 32
10310: PPUSH
10311: LD_STRING DA-3-explore
10313: PPUSH
10314: CALL_OW 88
// end ; if Mike then
10318: LD_EXP 30
10322: IFFALSE 10378
// begin Say ( Mike , DM-1-explore ) ;
10324: LD_EXP 30
10328: PPUSH
10329: LD_STRING DM-1-explore
10331: PPUSH
10332: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10336: LD_EXP 28
10340: PPUSH
10341: LD_STRING DH-2-explore
10343: PPUSH
10344: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10348: LD_EXP 30
10352: PPUSH
10353: LD_STRING DM-2-explore
10355: PPUSH
10356: CALL_OW 88
// if Kaia then
10360: LD_EXP 33
10364: IFFALSE 10378
// Say ( Kaia , DK-1-explore ) ;
10366: LD_EXP 33
10370: PPUSH
10371: LD_STRING DK-1-explore
10373: PPUSH
10374: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10378: LD_INT 22
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PPUSH
10393: CALL_OW 139
// Video ( false ) ;
10397: LD_INT 0
10399: PPUSH
10400: CALL 77169 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10404: LD_STRING BuildBase
10406: PPUSH
10407: CALL_OW 337
// SaveForQuickRestart ;
10411: CALL_OW 22
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10420: LD_EXP 5
10424: NOT
10425: PUSH
10426: LD_EXP 6
10430: NOT
10431: AND
10432: PUSH
10433: LD_INT 5
10435: PPUSH
10436: LD_INT 22
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 70
10450: AND
10451: PUSH
10452: LD_EXP 6
10456: NOT
10457: AND
10458: IFFALSE 10543
10460: GO 10462
10462: DISABLE
// begin if Mike then
10463: LD_EXP 30
10467: IFFALSE 10483
// Say ( Mike , DM-1-scout ) else
10469: LD_EXP 30
10473: PPUSH
10474: LD_STRING DM-1-scout
10476: PPUSH
10477: CALL_OW 88
10481: GO 10514
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10483: LD_EXP 42
10487: PPUSH
10488: LD_INT 26
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 72
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: PPUSH
10507: LD_STRING DArm-1-explore
10509: PPUSH
10510: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10514: LD_INT 54
10516: PPUSH
10517: LD_INT 35
10519: PPUSH
10520: LD_INT 2
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10530: LD_INT 54
10532: PPUSH
10533: LD_INT 35
10535: PPUSH
10536: LD_INT 2
10538: PPUSH
10539: CALL_OW 331
// end ;
10543: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10544: LD_INT 6
10546: PPUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 70
10561: PUSH
10562: LD_EXP 6
10566: NOT
10567: AND
10568: IFFALSE 10822
10570: GO 10572
10572: DISABLE
10573: LD_INT 0
10575: PPUSH
10576: PPUSH
10577: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10578: LD_ADDR_VAR 0 1
10582: PUSH
10583: LD_EXP 42
10587: PPUSH
10588: LD_INT 26
10590: PUSH
10591: LD_INT 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PPUSH
10598: CALL_OW 72
10602: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_EXP 42
10612: PPUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 72
10627: ST_TO_ADDR
// DialogueOn ;
10628: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10632: LD_INT 36
10634: PPUSH
10635: LD_INT 22
10637: PPUSH
10638: LD_INT 2
10640: PPUSH
10641: LD_INT 8
10643: PPUSH
10644: CALL_OW 330
// dwait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 68
// speakerOk := false ;
10655: LD_ADDR_VAR 0 3
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// if Mike then
10663: LD_EXP 30
10667: IFFALSE 10689
// speakerOk := Say ( Mike , DM-1-spot ) else
10669: LD_ADDR_VAR 0 3
10673: PUSH
10674: LD_EXP 30
10678: PPUSH
10679: LD_STRING DM-1-spot
10681: PPUSH
10682: CALL_OW 88
10686: ST_TO_ADDR
10687: GO 10717
// if randomMen then
10689: LD_VAR 0 1
10693: IFFALSE 10717
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: LD_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: LD_STRING DArm-1-spot-a
10711: PPUSH
10712: CALL_OW 88
10716: ST_TO_ADDR
// if speakerOk then
10717: LD_VAR 0 3
10721: IFFALSE 10765
// begin if Givi then
10723: LD_EXP 29
10727: IFFALSE 10743
// Say ( Givi , DG-1-spot ) else
10729: LD_EXP 29
10733: PPUSH
10734: LD_STRING DG-1-spot
10736: PPUSH
10737: CALL_OW 88
10741: GO 10765
// if randomWomen then
10743: LD_VAR 0 2
10747: IFFALSE 10765
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10749: LD_VAR 0 2
10753: PUSH
10754: LD_INT 1
10756: ARRAY
10757: PPUSH
10758: LD_STRING DArf-1-spot-a
10760: PPUSH
10761: CALL_OW 88
// end ; if Mike then
10765: LD_EXP 30
10769: IFFALSE 10785
// Say ( Heike , DH-1-spot ) else
10771: LD_EXP 28
10775: PPUSH
10776: LD_STRING DH-1-spot
10778: PPUSH
10779: CALL_OW 88
10783: GO 10797
// Say ( Heike , DH-1-spot-a ) ;
10785: LD_EXP 28
10789: PPUSH
10790: LD_STRING DH-1-spot-a
10792: PPUSH
10793: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10797: LD_INT 36
10799: PPUSH
10800: LD_INT 22
10802: PPUSH
10803: LD_INT 2
10805: PPUSH
10806: CALL_OW 331
// DialogueOff ;
10810: CALL_OW 7
// americanBaseSpoted := true ;
10814: LD_ADDR_EXP 5
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// end ;
10822: PPOPN 3
10824: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10825: LD_EXP 5
10829: NOT
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: AND
10860: PUSH
10861: LD_EXP 6
10865: NOT
10866: AND
10867: IFFALSE 10953
10869: GO 10871
10871: DISABLE
10872: LD_INT 0
10874: PPUSH
// begin americanBaseSpoted := true ;
10875: LD_ADDR_EXP 5
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_EXP 42
10892: PPUSH
10893: LD_INT 26
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: ST_TO_ADDR
// if not randomMen then
10908: LD_VAR 0 1
10912: NOT
10913: IFFALSE 10917
// exit ;
10915: GO 10953
// DialogueOn ;
10917: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10921: LD_VAR 0 1
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PPUSH
10930: LD_STRING DArm-1-spot-a
10932: PPUSH
10933: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10937: LD_EXP 28
10941: PPUSH
10942: LD_STRING DH-1-spot-a
10944: PPUSH
10945: CALL_OW 88
// DialogueOff ;
10949: CALL_OW 7
// end ;
10953: PPOPN 1
10955: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10956: LD_INT 11
10958: PPUSH
10959: CALL_OW 255
10963: PUSH
10964: LD_INT 2
10966: EQUAL
10967: PUSH
10968: LD_INT 7
10970: PPUSH
10971: LD_INT 22
10973: PUSH
10974: LD_INT 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: LD_INT 50
10986: PUSH
10987: EMPTY
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 31
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 70
11013: OR
11014: PUSH
11015: LD_INT 7
11017: PPUSH
11018: LD_INT 22
11020: PUSH
11021: LD_INT 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: CALL_OW 70
11032: PUSH
11033: LD_INT 1
11035: GREATER
11036: OR
11037: PUSH
11038: LD_EXP 44
11042: PUSH
11043: LD_INT 4
11045: LESSEQUAL
11046: OR
11047: IFFALSE 11638
11049: GO 11051
11051: DISABLE
11052: LD_INT 0
11054: PPUSH
11055: PPUSH
// begin wait ( 0 0$3 ) ;
11056: LD_INT 105
11058: PPUSH
11059: CALL_OW 67
// americanStartRun := true ;
11063: LD_ADDR_EXP 14
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if IsOk ( usCommander ) then
11071: LD_EXP 45
11075: PPUSH
11076: CALL_OW 302
11080: IFFALSE 11110
// begin usForces := usForces union usCommander ;
11082: LD_ADDR_EXP 44
11086: PUSH
11087: LD_EXP 44
11091: PUSH
11092: LD_EXP 45
11096: UNION
11097: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11098: LD_EXP 45
11102: PPUSH
11103: LD_STRING DUsm-1-assault
11105: PPUSH
11106: CALL_OW 88
// end ; for i in usForces do
11110: LD_ADDR_VAR 0 1
11114: PUSH
11115: LD_EXP 44
11119: PUSH
11120: FOR_IN
11121: IFFALSE 11167
// begin if IsInUnit ( i ) then
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 310
11132: IFFALSE 11143
// ComExitBuilding ( i ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 122
// wait ( 3 ) ;
11143: LD_INT 3
11145: PPUSH
11146: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11150: LD_VAR 0 1
11154: PPUSH
11155: LD_INT 34
11157: PPUSH
11158: LD_INT 67
11160: PPUSH
11161: CALL_OW 111
// end ;
11165: GO 11120
11167: POP
11168: POP
// Say ( Heike , DH-1-assault ) ;
11169: LD_EXP 28
11173: PPUSH
11174: LD_STRING DH-1-assault
11176: PPUSH
11177: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11181: LD_INT 35
11183: PPUSH
11184: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 34
11195: PPUSH
11196: LD_INT 67
11198: PPUSH
11199: CALL_OW 111
// until not usForces ;
11203: LD_EXP 44
11207: NOT
11208: IFFALSE 11181
// music_nat := 2 ;
11210: LD_ADDR_OWVAR 71
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// music_class := music_victory ;
11218: LD_ADDR_OWVAR 72
11222: PUSH
11223: LD_INT 4
11225: ST_TO_ADDR
// if not americanHasEscaped then
11226: LD_EXP 8
11230: NOT
11231: IFFALSE 11252
// begin Say ( Heike , DH-2-assault ) ;
11233: LD_EXP 28
11237: PPUSH
11238: LD_STRING DH-2-assault
11240: PPUSH
11241: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11245: LD_STRING ACH_CLEAN
11247: PPUSH
11248: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11252: LD_INT 70
11254: PPUSH
11255: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11266: LD_INT 22
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: LD_INT 50
11291: PUSH
11292: EMPTY
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: NOT
11309: IFFALSE 11259
// InGameOn ;
11311: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11315: LD_INT 11
11317: PPUSH
11318: CALL_OW 255
11322: PUSH
11323: LD_INT 2
11325: EQUAL
11326: NOT
11327: IFFALSE 11339
// SetSide ( usDepot , 2 ) ;
11329: LD_INT 11
11331: PPUSH
11332: LD_INT 2
11334: PPUSH
11335: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11339: LD_INT 35
11341: PPUSH
11342: LD_INT 22
11344: PPUSH
11345: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11349: LD_EXP 28
11353: PPUSH
11354: LD_INT 35
11356: PPUSH
11357: LD_INT 22
11359: PPUSH
11360: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11364: LD_EXP 28
11368: PPUSH
11369: LD_INT 38
11371: PPUSH
11372: LD_INT 25
11374: PPUSH
11375: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11379: LD_EXP 32
11383: PUSH
11384: LD_EXP 41
11388: UNION
11389: PUSH
11390: LD_EXP 42
11394: UNION
11395: PPUSH
11396: LD_INT 39
11398: PPUSH
11399: LD_INT 26
11401: PPUSH
11402: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11406: LD_EXP 32
11410: PUSH
11411: LD_EXP 41
11415: UNION
11416: PUSH
11417: LD_EXP 42
11421: UNION
11422: PPUSH
11423: LD_EXP 28
11427: PPUSH
11428: CALL_OW 179
// p := 0 ;
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11440: LD_INT 35
11442: PPUSH
11443: CALL_OW 67
// p := p + 1 ;
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: LD_VAR 0 2
11456: PUSH
11457: LD_INT 1
11459: PLUS
11460: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11461: LD_EXP 28
11465: PPUSH
11466: CALL_OW 314
11470: NOT
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_INT 10
11479: GREATER
11480: OR
11481: IFFALSE 11440
// Say ( Heike , DH-1-capture ) ;
11483: LD_EXP 28
11487: PPUSH
11488: LD_STRING DH-1-capture
11490: PPUSH
11491: CALL_OW 88
// if Markov then
11495: LD_EXP 35
11499: IFFALSE 11513
// Say ( Markov , DMar-1-capture ) ;
11501: LD_EXP 35
11505: PPUSH
11506: LD_STRING DMar-1-capture
11508: PPUSH
11509: CALL_OW 88
// if Sophia then
11513: LD_EXP 34
11517: IFFALSE 11543
// begin Say ( Heike , DH-2-capture ) ;
11519: LD_EXP 28
11523: PPUSH
11524: LD_STRING DH-2-capture
11526: PPUSH
11527: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11531: LD_EXP 34
11535: PPUSH
11536: LD_STRING DS-1-capture
11538: PPUSH
11539: CALL_OW 88
// end ; InGameOff ;
11543: CALL_OW 9
// music_nat := music_auto ;
11547: LD_ADDR_OWVAR 71
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// music_class := music_auto ;
11555: LD_ADDR_OWVAR 72
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11563: LD_STRING ConstructBase
11565: PPUSH
11566: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11570: LD_ADDR_VAR 0 1
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11621
// SetSide ( i , 2 ) ;
11607: LD_VAR 0 1
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: CALL_OW 235
11619: GO 11604
11621: POP
11622: POP
// wait ( 0 0$3 ) ;
11623: LD_INT 105
11625: PPUSH
11626: CALL_OW 67
// americanBaseCaptured := true ;
11630: LD_ADDR_EXP 6
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// end ;
11638: PPOPN 2
11640: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11641: LD_EXP 13
11645: PUSH
11646: LD_INT 3
11648: GREATEREQUAL
11649: IFFALSE 11661
11651: GO 11653
11653: DISABLE
// SetAchievement ( ACH_ENG ) ;
11654: LD_STRING ACH_ENG
11656: PPUSH
11657: CALL_OW 543
11661: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11662: LD_INT 22
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: PUSH
11691: LD_INT 4
11693: GREATEREQUAL
11694: IFFALSE 11706
11696: GO 11698
11698: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11699: LD_STRING ACH_APEGEN
11701: PPUSH
11702: CALL_OW 543
11706: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11707: LD_INT 22
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 30
11719: PUSH
11720: LD_INT 2
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 3
11729: PUSH
11730: LD_INT 57
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: IFFALSE 12014
11751: GO 11753
11753: DISABLE
// begin workshopBuilded := true ;
11754: LD_ADDR_EXP 10
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if IsOk ( Markov ) then
11762: LD_EXP 35
11766: PPUSH
11767: CALL_OW 302
11771: IFFALSE 11830
// begin Say ( Heike , DH-1-shop-a ) ;
11773: LD_EXP 28
11777: PPUSH
11778: LD_STRING DH-1-shop-a
11780: PPUSH
11781: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11785: LD_INT 47
11787: PPUSH
11788: LD_INT 2
11790: PPUSH
11791: CALL_OW 321
11795: PUSH
11796: LD_INT 2
11798: EQUAL
11799: PUSH
11800: LD_INT 45
11802: PPUSH
11803: LD_INT 2
11805: PPUSH
11806: CALL_OW 321
11810: PUSH
11811: LD_INT 2
11813: EQUAL
11814: AND
11815: NOT
11816: IFFALSE 11830
// Say ( Markov , DMar-1-shop-a ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-1-shop-a
11825: PPUSH
11826: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11830: LD_INT 35
11832: PPUSH
11833: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11837: LD_INT 47
11839: PPUSH
11840: LD_INT 2
11842: PPUSH
11843: CALL_OW 321
11847: PUSH
11848: LD_INT 2
11850: EQUAL
11851: PUSH
11852: LD_INT 45
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 321
11862: PUSH
11863: LD_INT 2
11865: EQUAL
11866: OR
11867: IFFALSE 11830
// if IsOk ( Markov ) and IsOk ( Heike ) then
11869: LD_EXP 35
11873: PPUSH
11874: CALL_OW 302
11878: PUSH
11879: LD_EXP 28
11883: PPUSH
11884: CALL_OW 302
11888: AND
11889: IFFALSE 12007
// begin DialogueOn ;
11891: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11895: LD_EXP 35
11899: PPUSH
11900: LD_STRING DMar-1-shop
11902: PPUSH
11903: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11907: LD_EXP 28
11911: PPUSH
11912: LD_STRING DH-1-shop
11914: PPUSH
11915: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11919: LD_EXP 35
11923: PPUSH
11924: LD_STRING DMar-2-shop
11926: PPUSH
11927: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11931: LD_EXP 35
11935: PPUSH
11936: LD_STRING DMar-3-shop
11938: PPUSH
11939: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11943: LD_EXP 28
11947: PPUSH
11948: LD_STRING DH-2-shop
11950: PPUSH
11951: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11955: LD_EXP 35
11959: PPUSH
11960: LD_STRING DMar-4-shop
11962: PPUSH
11963: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11967: LD_EXP 28
11971: PPUSH
11972: LD_STRING DH-3-shop
11974: PPUSH
11975: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11979: LD_EXP 35
11983: PPUSH
11984: LD_STRING DMar-5-shop
11986: PPUSH
11987: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11991: LD_EXP 28
11995: PPUSH
11996: LD_STRING DH-4-shop
11998: PPUSH
11999: CALL_OW 88
// DialogueOff ;
12003: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12007: LD_STRING ConstructVeh
12009: PPUSH
12010: CALL_OW 337
// end ;
12014: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12015: LD_INT 2
12017: PPUSH
12018: LD_INT 2
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL 39859 0 3
12028: PUSH
12029: LD_INT 0
12031: EQUAL
12032: IFFALSE 12044
12034: GO 12036
12036: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12037: LD_STRING Techs
12039: PPUSH
12040: CALL_OW 337
12044: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12045: LD_EXP 35
12049: PPUSH
12050: CALL_OW 302
12054: PUSH
12055: LD_INT 22
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: LD_INT 34
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 35
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: AND
12102: IFFALSE 12209
12104: GO 12106
12106: DISABLE
// begin DialogueOn ;
12107: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12111: LD_INT 22
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: LD_INT 34
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 35
12136: PUSH
12137: LD_INT 22
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PPUSH
12158: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12162: LD_INT 10
12164: PPUSH
12165: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-bal
12176: PPUSH
12177: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12181: LD_EXP 35
12185: PPUSH
12186: LD_STRING DMar-1-bal
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-bal
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12210: LD_EXP 32
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 6
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: IFFALSE 12310
12251: GO 12253
12253: DISABLE
// begin DialogueOn ;
12254: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12258: LD_EXP 32
12262: PPUSH
12263: LD_STRING DA-1-lab
12265: PPUSH
12266: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12270: LD_EXP 28
12274: PPUSH
12275: LD_STRING DH-1-lab
12277: PPUSH
12278: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12282: LD_EXP 32
12286: PPUSH
12287: LD_STRING DA-2-lab
12289: PPUSH
12290: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12294: LD_EXP 28
12298: PPUSH
12299: LD_STRING DH-2-lab
12301: PPUSH
12302: CALL_OW 88
// DialogueOff ;
12306: CALL_OW 7
// end ;
12310: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12311: LD_EXP 33
12315: PPUSH
12316: CALL_OW 302
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 15
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: AND
12350: PUSH
12351: LD_INT 81
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: NOT
12366: AND
12367: IFFALSE 12549
12369: GO 12371
12371: DISABLE
12372: LD_INT 0
12374: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12375: LD_ADDR_VAR 0 1
12379: PUSH
12380: LD_INT 22
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 15
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 69
12408: ST_TO_ADDR
// InGameOn ;
12409: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12426: LD_VAR 0 1
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: PPUSH
12435: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12439: LD_EXP 33
12443: PPUSH
12444: LD_STRING DK-1-apesol
12446: PPUSH
12447: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12451: LD_VAR 0 1
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: PPUSH
12460: LD_INT 35
12462: PPUSH
12463: LD_INT 28
12465: PPUSH
12466: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12470: LD_VAR 0 1
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_INT 36
12481: PPUSH
12482: LD_INT 17
12484: PPUSH
12485: CALL_OW 171
// DialogueOn ;
12489: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12493: LD_EXP 32
12497: PPUSH
12498: LD_STRING DA-1-apesol
12500: PPUSH
12501: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12505: LD_EXP 33
12509: PPUSH
12510: LD_STRING DK-2-apesol
12512: PPUSH
12513: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12517: LD_EXP 32
12521: PPUSH
12522: LD_STRING DA-2-apesol
12524: PPUSH
12525: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12529: LD_EXP 33
12533: PPUSH
12534: LD_STRING DK-3-apesol
12536: PPUSH
12537: CALL_OW 88
// DialogueOff ;
12541: CALL_OW 7
// InGameOff ;
12545: CALL_OW 9
// end ;
12549: PPOPN 1
12551: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12552: LD_EXP 34
12556: PPUSH
12557: CALL_OW 302
12561: PUSH
12562: LD_INT 22
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 25
12574: PUSH
12575: LD_INT 16
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: AND
12591: PUSH
12592: LD_INT 81
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 69
12606: NOT
12607: AND
12608: IFFALSE 12893
12610: GO 12612
12612: DISABLE
12613: LD_INT 0
12615: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 25
12633: PUSH
12634: LD_INT 16
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: ST_TO_ADDR
// InGameOn ;
12650: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12654: LD_INT 35
12656: PPUSH
12657: LD_INT 22
12659: PPUSH
12660: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12664: LD_INT 5
12666: PPUSH
12667: LD_INT 35
12669: PPUSH
12670: LD_INT 22
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12680: LD_EXP 34
12684: PPUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: ARRAY
12706: PPUSH
12707: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: CALL_OW 122
// wait ( 0 0$2 ) ;
12724: LD_INT 70
12726: PPUSH
12727: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12731: LD_EXP 34
12735: PPUSH
12736: LD_STRING DS-1-apeeng
12738: PPUSH
12739: CALL_OW 88
// if IsOk ( Kamil ) then
12743: LD_EXP 31
12747: PPUSH
12748: CALL_OW 302
12752: IFFALSE 12889
// begin Say ( Kamil , DKam-1-apeeng ) ;
12754: LD_EXP 31
12758: PPUSH
12759: LD_STRING DKam-1-apeeng
12761: PPUSH
12762: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12766: LD_EXP 34
12770: PPUSH
12771: LD_STRING DS-2-apeeng
12773: PPUSH
12774: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12778: LD_EXP 31
12782: PPUSH
12783: LD_STRING DKam-2-apeeng
12785: PPUSH
12786: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12790: LD_EXP 34
12794: PPUSH
12795: LD_STRING DS-3-apeeng
12797: PPUSH
12798: CALL_OW 88
// if not IsOK ( Kaia ) then
12802: LD_EXP 33
12806: PPUSH
12807: CALL_OW 302
12811: NOT
12812: IFFALSE 12820
// begin InGameOff ;
12814: CALL_OW 9
// exit ;
12818: GO 12893
// end ; Say ( Kaia , DK-1-apeeng ) ;
12820: LD_EXP 33
12824: PPUSH
12825: LD_STRING DK-1-apeeng
12827: PPUSH
12828: CALL_OW 88
// if not IsOk ( Givi ) then
12832: LD_EXP 29
12836: PPUSH
12837: CALL_OW 302
12841: NOT
12842: IFFALSE 12853
// begin Video ( false ) ;
12844: LD_INT 0
12846: PPUSH
12847: CALL 77169 0 1
// exit ;
12851: GO 12893
// end ; Say ( Givi , DG-1-apeeng ) ;
12853: LD_EXP 29
12857: PPUSH
12858: LD_STRING DG-1-apeeng
12860: PPUSH
12861: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12865: LD_EXP 33
12869: PPUSH
12870: LD_STRING DK-2-apeeng
12872: PPUSH
12873: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12877: LD_EXP 33
12881: PPUSH
12882: LD_STRING DK-3-apeeng
12884: PPUSH
12885: CALL_OW 88
// end ; InGameOff ;
12889: CALL_OW 9
// end ;
12893: PPOPN 1
12895: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12896: LD_EXP 4
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 2
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 0
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: AND
12930: IFFALSE 13095
12932: GO 12934
12934: DISABLE
// begin wait ( 0 0$10 ) ;
12935: LD_INT 350
12937: PPUSH
12938: CALL_OW 67
// DialogueOn ;
12942: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12946: LD_EXP 36
12950: PPUSH
12951: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12955: LD_EXP 36
12959: PPUSH
12960: LD_STRING DF-1-distribution
12962: PPUSH
12963: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12967: LD_EXP 28
12971: PPUSH
12972: LD_STRING DH-2-distribution
12974: PPUSH
12975: CALL_OW 88
// if IsOk ( Kaia ) then
12979: LD_EXP 33
12983: PPUSH
12984: CALL_OW 302
12988: IFFALSE 13049
// begin Say ( Kaia , DK-1-distribution ) ;
12990: LD_EXP 33
12994: PPUSH
12995: LD_STRING DK-1-distribution
12997: PPUSH
12998: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13002: LD_EXP 28
13006: PPUSH
13007: LD_STRING DH-1-distribution
13009: PPUSH
13010: CALL_OW 88
// if IsOk ( Givi ) then
13014: LD_EXP 29
13018: PPUSH
13019: CALL_OW 302
13023: IFFALSE 13049
// begin Say ( Givi , DG-1-distribution ) ;
13025: LD_EXP 29
13029: PPUSH
13030: LD_STRING DG-1-distribution
13032: PPUSH
13033: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13037: LD_EXP 28
13041: PPUSH
13042: LD_STRING DH-3-distribution
13044: PPUSH
13045: CALL_OW 88
// end ; end ; DialogueOff ;
13049: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13053: LD_STRING Crates1
13055: PPUSH
13056: CALL_OW 337
// farmerRequestedCrates := 300 ;
13060: LD_ADDR_EXP 16
13064: PUSH
13065: LD_INT 300
13067: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13068: LD_STRING FarmerCrates
13070: PPUSH
13071: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13075: LD_INT 10
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13085: LD_INT 108
13087: PPUSH
13088: LD_INT 61
13090: PPUSH
13091: CALL_OW 86
// end ;
13095: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13096: LD_EXP 6
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 57
13116: PUSH
13117: EMPTY
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: LD_INT 30
13129: PUSH
13130: LD_INT 6
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 7
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: PPUSH
13157: CALL_OW 69
13161: AND
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 3
13175: PUSH
13176: LD_INT 57
13178: PUSH
13179: EMPTY
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 69
13205: AND
13206: IFFALSE 13370
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
// begin wait ( 0 0$10 ) ;
13214: LD_INT 350
13216: PPUSH
13217: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: LD_EXP 42
13230: PPUSH
13231: LD_INT 26
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 72
13259: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13260: LD_EXP 28
13264: PPUSH
13265: LD_STRING DH-1-task
13267: PPUSH
13268: CALL_OW 88
// if IsOk ( Sophia ) then
13272: LD_EXP 34
13276: PPUSH
13277: CALL_OW 302
13281: IFFALSE 13321
// begin Say ( Sophia , DS-1-task ) ;
13283: LD_EXP 34
13287: PPUSH
13288: LD_STRING DS-1-task
13290: PPUSH
13291: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13295: LD_EXP 34
13299: PPUSH
13300: LD_STRING DS-2-task
13302: PPUSH
13303: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13307: LD_EXP 28
13311: PPUSH
13312: LD_STRING DH-2-task
13314: PPUSH
13315: CALL_OW 88
// end else
13319: GO 13355
// if eng then
13321: LD_VAR 0 1
13325: IFFALSE 13355
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13327: LD_VAR 0 1
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: LD_STRING DArm-1-task
13338: PPUSH
13339: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13343: LD_EXP 28
13347: PPUSH
13348: LD_STRING DH-2-task
13350: PPUSH
13351: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13355: LD_STRING BaseConstructed
13357: PPUSH
13358: CALL_OW 337
// allowConvoys := true ;
13362: LD_ADDR_EXP 12
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// end ;
13370: PPOPN 1
13372: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13373: LD_INT 22
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 34
13385: PUSH
13386: LD_INT 12
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PPUSH
13397: CALL_OW 69
13401: IFFALSE 13569
13403: GO 13405
13405: DISABLE
13406: LD_INT 0
13408: PPUSH
13409: PPUSH
13410: PPUSH
// begin wait ( 0 0$2 ) ;
13411: LD_INT 70
13413: PPUSH
13414: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 34
13435: PUSH
13436: LD_INT 12
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: CALL_OW 250
13470: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13471: LD_ADDR_VAR 0 3
13475: PUSH
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 251
13489: ST_TO_ADDR
// DialogueOn ;
13490: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13508: LD_VAR 0 2
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 2
13520: PPUSH
13521: LD_INT 6
13523: NEG
13524: PPUSH
13525: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13529: LD_INT 10
13531: PPUSH
13532: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13536: LD_EXP 28
13540: PPUSH
13541: LD_STRING DH-1-seecargo
13543: PPUSH
13544: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13548: LD_VAR 0 2
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_INT 2
13560: PPUSH
13561: CALL_OW 331
// DialogueOff ;
13565: CALL_OW 7
// end ;
13569: PPOPN 3
13571: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13572: LD_EXP 4
13576: PUSH
13577: LD_EXP 15
13581: PUSH
13582: LD_INT 300
13584: GREATEREQUAL
13585: AND
13586: IFFALSE 13658
13588: GO 13590
13590: DISABLE
// begin DialogueOn ;
13591: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13595: LD_EXP 36
13599: PPUSH
13600: LD_STRING DF-1-delivery-2
13602: PPUSH
13603: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13607: LD_EXP 28
13611: PPUSH
13612: LD_STRING DH-1-delivery-2
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13619: LD_EXP 36
13623: PPUSH
13624: LD_STRING DF-2-delivery-2
13626: PPUSH
13627: CALL_OW 94
// DialogueOff ;
13631: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13635: LD_STRING Crates2
13637: PPUSH
13638: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13642: LD_ADDR_EXP 17
13646: PUSH
13647: LD_INT 63000
13649: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13650: LD_ADDR_EXP 16
13654: PUSH
13655: LD_INT 600
13657: ST_TO_ADDR
// end ;
13658: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13659: LD_EXP 4
13663: PUSH
13664: LD_EXP 15
13668: PUSH
13669: LD_INT 600
13671: GREATEREQUAL
13672: AND
13673: PUSH
13674: LD_OWVAR 67
13678: PUSH
13679: LD_INT 1
13681: GREATER
13682: AND
13683: IFFALSE 13883
13685: GO 13687
13687: DISABLE
// begin DialogueOn ;
13688: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13692: LD_EXP 36
13696: PPUSH
13697: LD_STRING DF-1-delivery-3
13699: PPUSH
13700: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13704: LD_EXP 28
13708: PPUSH
13709: LD_STRING DH-1-delivery-3
13711: PPUSH
13712: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13716: LD_EXP 36
13720: PPUSH
13721: LD_STRING DF-2-delivery-3
13723: PPUSH
13724: CALL_OW 94
// if IsOk ( Kaia ) then
13728: LD_EXP 33
13732: PPUSH
13733: CALL_OW 302
13737: IFFALSE 13787
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13739: LD_EXP 33
13743: PPUSH
13744: LD_STRING DK-1-delivery-3
13746: PPUSH
13747: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13751: LD_EXP 28
13755: PPUSH
13756: LD_STRING DH-2-delivery-3
13758: PPUSH
13759: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13763: LD_EXP 29
13767: PPUSH
13768: LD_STRING DG-1-delivery-3
13770: PPUSH
13771: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13775: LD_EXP 30
13779: PPUSH
13780: LD_STRING DM-1-delivery-3
13782: PPUSH
13783: CALL_OW 88
// end ; DialogueOff ;
13787: CALL_OW 7
// case Difficulty of 2 :
13791: LD_OWVAR 67
13795: PUSH
13796: LD_INT 2
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 13822
13804: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13805: LD_STRING Crates3
13807: PPUSH
13808: CALL_OW 337
// farmerRequestedCrates := 900 ;
13812: LD_ADDR_EXP 16
13816: PUSH
13817: LD_INT 900
13819: ST_TO_ADDR
// end ; 3 :
13820: GO 13875
13822: LD_INT 3
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13848
13830: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13831: LD_STRING Crates4
13833: PPUSH
13834: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13838: LD_ADDR_EXP 16
13842: PUSH
13843: LD_INT 1200
13845: ST_TO_ADDR
// end ; 4 :
13846: GO 13875
13848: LD_INT 4
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13874
13856: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
13857: LD_STRING Crates5
13859: PPUSH
13860: CALL_OW 337
// farmerRequestedCrates := 1400 ;
13864: LD_ADDR_EXP 16
13868: PUSH
13869: LD_INT 1400
13871: ST_TO_ADDR
// end ; end ;
13872: GO 13875
13874: POP
// farmerCratesCounter := 30 30$00 ;
13875: LD_ADDR_EXP 17
13879: PUSH
13880: LD_INT 63000
13882: ST_TO_ADDR
// end ;
13883: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
13884: LD_EXP 4
13888: PUSH
13889: LD_EXP 15
13893: PUSH
13894: LD_INT 600
13896: PUSH
13897: LD_INT 900
13899: PUSH
13900: LD_INT 1200
13902: PUSH
13903: LD_INT 1400
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_OWVAR 67
13916: ARRAY
13917: GREATEREQUAL
13918: AND
13919: IFFALSE 14005
13921: GO 13923
13923: DISABLE
// begin retreatAllowed := true ;
13924: LD_ADDR_EXP 11
13928: PUSH
13929: LD_INT 1
13931: ST_TO_ADDR
// display_strings := [ ] ;
13932: LD_ADDR_OWVAR 47
13936: PUSH
13937: EMPTY
13938: ST_TO_ADDR
// DialogueOn ;
13939: CALL_OW 6
// InGameOn ;
13943: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13947: LD_EXP 37
13951: PPUSH
13952: LD_STRING DO-radio-end
13954: PPUSH
13955: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13959: LD_EXP 28
13963: PPUSH
13964: LD_STRING DH-1-radio-end
13966: PPUSH
13967: CALL_OW 88
// InGameOff ;
13971: CALL_OW 9
// DialogueOff ;
13975: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13979: LD_STRING Retreat
13981: PPUSH
13982: CALL_OW 337
// wait ( 0 0$2 ) ;
13986: LD_INT 70
13988: PPUSH
13989: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13993: LD_EXP 28
13997: PPUSH
13998: LD_STRING DH-2-radio-end
14000: PPUSH
14001: CALL_OW 88
// end ;
14005: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14006: LD_EXP 11
14010: IFFALSE 14141
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14019: LD_INT 10
14021: PPUSH
14022: LD_INT 0
14024: PPUSH
14025: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_EXP 39
14038: PPUSH
14039: LD_INT 25
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 72
14053: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 102
14061: PPUSH
14062: LD_INT 69
14064: PPUSH
14065: CALL_OW 428
14069: PUSH
14070: LD_INT 0
14072: EQUAL
14073: AND
14074: IFFALSE 14141
// begin for i in tmp do
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14111
// if IsInUnit ( i ) then
14089: LD_VAR 0 2
14093: PPUSH
14094: CALL_OW 310
14098: IFFALSE 14109
// ComExitBuilding ( i ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: CALL_OW 122
14109: GO 14086
14111: POP
14112: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 31
14120: PPUSH
14121: LD_INT 102
14123: PPUSH
14124: LD_INT 69
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: CALL_OW 205
// wait ( 0 0$3 ) ;
14134: LD_INT 105
14136: PPUSH
14137: CALL_OW 67
// end ; end ;
14141: PPOPN 2
14143: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14144: LD_EXP 11
14148: NOT
14149: PUSH
14150: LD_INT 5
14152: PPUSH
14153: CALL_OW 301
14157: AND
14158: IFFALSE 14190
14160: GO 14162
14162: DISABLE
// begin DialogueOn ;
14163: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14167: LD_EXP 36
14171: PPUSH
14172: LD_STRING DF-1-failure
14174: PPUSH
14175: CALL_OW 94
// DialogueOff ;
14179: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14183: LD_STRING FarmerDepot
14185: PPUSH
14186: CALL_OW 104
// end ;
14190: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14191: LD_EXP 11
14195: PUSH
14196: LD_EXP 28
14200: PPUSH
14201: LD_EXP 36
14205: PPUSH
14206: CALL_OW 296
14210: PUSH
14211: LD_INT 12
14213: LESS
14214: AND
14215: PUSH
14216: LD_INT 81
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: NOT
14245: AND
14246: IFFALSE 14930
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
14255: PPUSH
// begin allowConvoys := false ;
14256: LD_ADDR_EXP 12
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// InGameOn ;
14264: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14268: LD_EXP 28
14272: PPUSH
14273: LD_EXP 36
14277: PPUSH
14278: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14282: LD_EXP 36
14286: PPUSH
14287: LD_EXP 28
14291: PPUSH
14292: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14296: LD_EXP 36
14300: PPUSH
14301: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14305: LD_EXP 28
14309: PPUSH
14310: LD_STRING DH-1-end
14312: PPUSH
14313: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14317: LD_EXP 36
14321: PPUSH
14322: LD_STRING DF-1-end
14324: PPUSH
14325: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14329: LD_EXP 36
14333: PPUSH
14334: LD_STRING DF-2-end
14336: PPUSH
14337: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14341: LD_EXP 28
14345: PPUSH
14346: LD_STRING DH-2-end
14348: PPUSH
14349: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14353: LD_EXP 36
14357: PPUSH
14358: LD_STRING DF-3-end
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14365: LD_EXP 28
14369: PPUSH
14370: LD_STRING DH-3-end
14372: PPUSH
14373: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14377: LD_EXP 29
14381: PPUSH
14382: LD_STRING DG-1-end
14384: PPUSH
14385: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14389: LD_EXP 28
14393: PPUSH
14394: LD_STRING DH-4-end
14396: PPUSH
14397: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14401: LD_EXP 36
14405: PPUSH
14406: LD_STRING DF-4-end
14408: PPUSH
14409: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14413: LD_EXP 28
14417: PPUSH
14418: LD_STRING DH-5-end
14420: PPUSH
14421: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14425: LD_EXP 36
14429: PPUSH
14430: LD_STRING DF-5-end
14432: PPUSH
14433: CALL_OW 88
// InGameOff ;
14437: CALL_OW 9
// allowCargoEvacuation := true ;
14441: LD_ADDR_EXP 7
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14449: LD_ADDR_VAR 0 2
14453: PUSH
14454: LD_INT 4
14456: PUSH
14457: LD_INT 3
14459: PUSH
14460: LD_INT 2
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_OWVAR 67
14476: ARRAY
14477: ST_TO_ADDR
// if farmerSquad < max then
14478: LD_EXP 39
14482: PUSH
14483: LD_VAR 0 2
14487: LESS
14488: IFFALSE 14500
// max := farmerSquad ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_EXP 39
14499: ST_TO_ADDR
// for i := 1 to max do
14500: LD_ADDR_VAR 0 1
14504: PUSH
14505: DOUBLE
14506: LD_INT 1
14508: DEC
14509: ST_TO_ADDR
14510: LD_VAR 0 2
14514: PUSH
14515: FOR_TO
14516: IFFALSE 14554
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14518: LD_EXP 39
14522: PUSH
14523: LD_INT 1
14525: ARRAY
14526: PPUSH
14527: LD_INT 2
14529: PPUSH
14530: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14534: LD_ADDR_EXP 39
14538: PUSH
14539: LD_EXP 39
14543: PPUSH
14544: LD_INT 1
14546: PPUSH
14547: CALL_OW 3
14551: ST_TO_ADDR
// end ;
14552: GO 14515
14554: POP
14555: POP
// for i in Farmer ^ farmerSquad do
14556: LD_ADDR_VAR 0 1
14560: PUSH
14561: LD_EXP 36
14565: PUSH
14566: LD_EXP 39
14570: ADD
14571: PUSH
14572: FOR_IN
14573: IFFALSE 14612
// begin if IsInUnit ( i ) then
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 310
14584: IFFALSE 14595
// ComExitBuilding ( i ) ;
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_INT 102
14602: PPUSH
14603: LD_INT 7
14605: PPUSH
14606: CALL_OW 171
// end ;
14610: GO 14572
14612: POP
14613: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14614: LD_ADDR_VAR 0 1
14618: PUSH
14619: LD_INT 22
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: PUSH
14648: LD_INT 5
14650: DIFF
14651: PUSH
14652: FOR_IN
14653: IFFALSE 14669
// SetSide ( i , 2 ) ;
14655: LD_VAR 0 1
14659: PPUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 235
14667: GO 14652
14669: POP
14670: POP
// wait ( 0 0$2 ) ;
14671: LD_INT 70
14673: PPUSH
14674: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14678: LD_EXP 28
14682: PPUSH
14683: LD_STRING DH-6-end
14685: PPUSH
14686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14690: LD_INT 35
14692: PPUSH
14693: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_EXP 36
14706: PUSH
14707: LD_EXP 39
14711: ADD
14712: PPUSH
14713: LD_INT 95
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 72
14727: ST_TO_ADDR
// if tmp then
14728: LD_VAR 0 3
14732: IFFALSE 14776
// for i in tmp do
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: LD_VAR 0 3
14743: PUSH
14744: FOR_IN
14745: IFFALSE 14774
// begin farmerSquad := farmerSquad diff i ;
14747: LD_ADDR_EXP 39
14751: PUSH
14752: LD_EXP 39
14756: PUSH
14757: LD_VAR 0 1
14761: DIFF
14762: ST_TO_ADDR
// RemoveUnit ( i ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 64
// end ;
14772: GO 14744
14774: POP
14775: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14776: LD_EXP 39
14780: PUSH
14781: EMPTY
14782: EQUAL
14783: PUSH
14784: LD_EXP 36
14788: PPUSH
14789: CALL_OW 305
14793: NOT
14794: AND
14795: IFFALSE 14690
// if farmerHumanLoseCounter = 0 then
14797: LD_EXP 20
14801: PUSH
14802: LD_INT 0
14804: EQUAL
14805: IFFALSE 14814
// SetAchievement ( ACH_BABY ) ;
14807: LD_STRING ACH_BABY
14809: PPUSH
14810: CALL_OW 543
// wait ( 1 1$00 ) ;
14814: LD_INT 2100
14816: PPUSH
14817: CALL_OW 67
// SendAttack ;
14821: CALL 6154 0 0
// Say ( Heike , DH-7-end ) ;
14825: LD_EXP 28
14829: PPUSH
14830: LD_STRING DH-7-end
14832: PPUSH
14833: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
14837: LD_ADDR_VAR 0 1
14841: PUSH
14842: DOUBLE
14843: LD_INT 1
14845: DEC
14846: ST_TO_ADDR
14847: LD_INT 2
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 3
14855: PUSH
14856: LD_INT 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_OWVAR 67
14869: ARRAY
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14928
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14874: LD_INT 4200
14876: PUSH
14877: LD_INT 3500
14879: PUSH
14880: LD_INT 3150
14882: PUSH
14883: LD_INT 2800
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: LD_OWVAR 67
14896: ARRAY
14897: PPUSH
14898: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
14902: LD_EXP 11
14906: PUSH
14907: LD_EXP 21
14911: PUSH
14912: LD_INT 1
14914: LESS
14915: AND
14916: IFFALSE 14922
// exit ;
14918: POP
14919: POP
14920: GO 14930
// SendAttack ;
14922: CALL 6154 0 0
// end ;
14926: GO 14871
14928: POP
14929: POP
// end ;
14930: PPOPN 3
14932: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14933: LD_EXP 7
14937: PUSH
14938: LD_EXP 21
14942: PUSH
14943: LD_INT 0
14945: GREATER
14946: AND
14947: IFFALSE 14957
14949: GO 14951
14951: DISABLE
// begin enable ;
14952: ENABLE
// CargoEvacuation ;
14953: CALL 3651 0 0
// end ;
14957: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14958: LD_EXP 17
14962: PUSH
14963: LD_INT 18900
14965: LESSEQUAL
14966: IFFALSE 15015
14968: GO 14970
14970: DISABLE
// begin DialogueOn ;
14971: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14975: LD_EXP 36
14979: PPUSH
14980: LD_STRING DF-1-distribution-a
14982: PPUSH
14983: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14987: LD_EXP 28
14991: PPUSH
14992: LD_STRING DH-1-distribution-a
14994: PPUSH
14995: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14999: LD_EXP 36
15003: PPUSH
15004: LD_STRING DF-2-distribution-a
15006: PPUSH
15007: CALL_OW 94
// DialogueOff ;
15011: CALL_OW 7
// end ;
15015: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15016: LD_EXP 17
15020: PUSH
15021: LD_INT 0
15023: LESSEQUAL
15024: IFFALSE 15056
15026: GO 15028
15028: DISABLE
// begin DialogueOn ;
15029: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15033: LD_EXP 36
15037: PPUSH
15038: LD_STRING DF-3-distribution-a
15040: PPUSH
15041: CALL_OW 94
// YouLost ( Distribution ) ;
15045: LD_STRING Distribution
15047: PPUSH
15048: CALL_OW 104
// DialogueOff ;
15052: CALL_OW 7
// end ;
15056: END
// every 0 0$1 trigger vehCounter >= 2 do
15057: LD_EXP 22
15061: PUSH
15062: LD_INT 2
15064: GREATEREQUAL
15065: IFFALSE 15077
15067: GO 15069
15069: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15070: LD_STRING VehConstructed
15072: PPUSH
15073: CALL_OW 337
15077: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15078: LD_INT 22
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 34
15090: PUSH
15091: LD_INT 12
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 69
15106: IFFALSE 15166
15108: GO 15110
15110: DISABLE
// begin DialogueOn ;
15111: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15115: LD_EXP 28
15119: PPUSH
15120: LD_STRING DH-1-truck
15122: PPUSH
15123: CALL_OW 88
// if IsOk ( Markov ) then
15127: LD_EXP 35
15131: PPUSH
15132: CALL_OW 302
15136: IFFALSE 15162
// begin Say ( Markov , DMar-1-truck ) ;
15138: LD_EXP 35
15142: PPUSH
15143: LD_STRING DMar-1-truck
15145: PPUSH
15146: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15150: LD_EXP 28
15154: PPUSH
15155: LD_STRING DH-2-truck
15157: PPUSH
15158: CALL_OW 88
// end ; DialogueOff ;
15162: CALL_OW 7
// end ;
15166: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15167: LD_INT 0
15169: PPUSH
15170: PPUSH
15171: PPUSH
// if IsOk ( Givi ) then
15172: LD_EXP 29
15176: PPUSH
15177: CALL_OW 302
15181: IFFALSE 15197
// begin Say ( Givi , DG-1-nocargo ) ;
15183: LD_EXP 29
15187: PPUSH
15188: LD_STRING DG-1-nocargo
15190: PPUSH
15191: CALL_OW 88
// exit ;
15195: GO 15293
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_EXP 42
15206: PPUSH
15207: LD_INT 26
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 72
15221: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15222: LD_ADDR_VAR 0 3
15226: PUSH
15227: LD_EXP 42
15231: PPUSH
15232: LD_INT 26
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: ST_TO_ADDR
// if randomMen then
15247: LD_VAR 0 2
15251: IFFALSE 15271
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15253: LD_VAR 0 2
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_STRING DArm-1-nocargo
15264: PPUSH
15265: CALL_OW 88
15269: GO 15293
// if randomWomen then
15271: LD_VAR 0 3
15275: IFFALSE 15293
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: PPUSH
15286: LD_STRING DArf-1-nocargo
15288: PPUSH
15289: CALL_OW 88
// end ;
15293: LD_VAR 0 1
15297: RET
// export function IncomingAttack ; begin
15298: LD_INT 0
15300: PPUSH
// if attackWave = 1 then
15301: LD_EXP 19
15305: PUSH
15306: LD_INT 1
15308: EQUAL
15309: IFFALSE 15380
// begin DialogueOn ;
15311: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15315: LD_EXP 37
15319: PPUSH
15320: LD_STRING DO-1-radio-1
15322: PPUSH
15323: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15327: LD_EXP 28
15331: PPUSH
15332: LD_STRING DH-1-radio-1-
15334: PPUSH
15335: CALL_OW 88
// if IsOk ( Markov ) then
15339: LD_EXP 35
15343: PPUSH
15344: CALL_OW 302
15348: IFFALSE 15374
// begin Say ( Markov , DMar-1-radio-1 ) ;
15350: LD_EXP 35
15354: PPUSH
15355: LD_STRING DMar-1-radio-1
15357: PPUSH
15358: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15362: LD_EXP 28
15366: PPUSH
15367: LD_STRING DH-2-radio-1
15369: PPUSH
15370: CALL_OW 88
// end ; DialogueOff ;
15374: CALL_OW 7
// end else
15378: GO 15404
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DO-1-radio-u
15387: PPUSH
15388: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15392: LD_EXP 28
15396: PPUSH
15397: LD_STRING DH-1-radio-u
15399: PPUSH
15400: CALL_OW 88
// end ; end ;
15404: LD_VAR 0 1
15408: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15409: LD_EXP 44
15413: PPUSH
15414: LD_INT 95
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 72
15428: IFFALSE 15531
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
// begin enable ;
15436: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_EXP 44
15446: PPUSH
15447: LD_INT 95
15449: PUSH
15450: LD_INT 8
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 72
15461: PUSH
15462: FOR_IN
15463: IFFALSE 15492
// begin usForces := usForces diff i ;
15465: LD_ADDR_EXP 44
15469: PUSH
15470: LD_EXP 44
15474: PUSH
15475: LD_VAR 0 1
15479: DIFF
15480: ST_TO_ADDR
// RemoveUnit ( i ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 64
// end ;
15490: GO 15462
15492: POP
15493: POP
// if not americanHasEscaped and attackWave = 1 then
15494: LD_EXP 8
15498: NOT
15499: PUSH
15500: LD_EXP 19
15504: PUSH
15505: LD_INT 1
15507: EQUAL
15508: AND
15509: IFFALSE 15531
// begin americanHasEscaped := true ;
15511: LD_ADDR_EXP 8
15515: PUSH
15516: LD_INT 1
15518: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15519: LD_EXP 28
15523: PPUSH
15524: LD_STRING DH-2-assault-a
15526: PPUSH
15527: CALL_OW 88
// end ; end ;
15531: PPOPN 1
15533: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15534: LD_INT 4
15536: PPUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 70
15551: PUSH
15552: LD_EXP 11
15556: NOT
15557: AND
15558: IFFALSE 15575
15560: GO 15562
15562: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15563: LD_EXP 36
15567: PPUSH
15568: LD_STRING DF-1-attack
15570: PPUSH
15571: CALL_OW 94
15575: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15576: LD_INT 5
15578: PPUSH
15579: CALL_OW 255
15583: PUSH
15584: LD_INT 2
15586: EQUAL
15587: IFFALSE 15603
15589: GO 15591
15591: DISABLE
// begin enable ;
15592: ENABLE
// SetSide ( arDepot , 5 ) ;
15593: LD_INT 5
15595: PPUSH
15596: LD_INT 5
15598: PPUSH
15599: CALL_OW 235
// end ;
15603: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PPUSH
15628: CALL_OW 69
15632: NOT
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: NOT
15649: AND
15650: PUSH
15651: LD_EXP 11
15655: NOT
15656: AND
15657: PUSH
15658: LD_EXP 15
15662: PUSH
15663: LD_INT 90
15665: GREATER
15666: AND
15667: PUSH
15668: LD_INT 7
15670: PPUSH
15671: LD_INT 22
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 70
15699: AND
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 50
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: LD_INT 30
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: AND
15737: IFFALSE 16530
15739: GO 15741
15741: DISABLE
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
15748: PPUSH
// begin depot := usDepot ;
15749: LD_ADDR_VAR 0 5
15753: PUSH
15754: LD_INT 11
15756: ST_TO_ADDR
// if not depot then
15757: LD_VAR 0 5
15761: NOT
15762: IFFALSE 15802
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15764: LD_ADDR_VAR 0 5
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 30
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15802: LD_ADDR_VAR 0 1
15806: PUSH
15807: LD_EXP 42
15811: PPUSH
15812: LD_INT 26
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 72
15826: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_EXP 42
15836: PPUSH
15837: LD_INT 26
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 72
15851: ST_TO_ADDR
// if IsOk ( Kaia ) then
15852: LD_EXP 33
15856: PPUSH
15857: CALL_OW 302
15861: IFFALSE 15882
// speaker := [ Kaia , DK ] else
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_EXP 33
15872: PUSH
15873: LD_STRING DK
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: ST_TO_ADDR
15880: GO 15962
// if randomMen then
15882: LD_VAR 0 1
15886: IFFALSE 15921
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15888: LD_ADDR_VAR 0 3
15892: PUSH
15893: LD_VAR 0 1
15897: PUSH
15898: LD_INT 1
15900: PPUSH
15901: LD_VAR 0 1
15905: PPUSH
15906: CALL_OW 12
15910: ARRAY
15911: PUSH
15912: LD_STRING DArm
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: ST_TO_ADDR
15919: GO 15962
// if randomWomen then
15921: LD_VAR 0 2
15925: IFFALSE 15960
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_VAR 0 2
15936: PUSH
15937: LD_INT 1
15939: PPUSH
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 12
15949: ARRAY
15950: PUSH
15951: LD_STRING DArf
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: ST_TO_ADDR
15958: GO 15962
// exit ;
15960: GO 16530
// if IsInUnit ( speaker [ 1 ] ) then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 1
15969: ARRAY
15970: PPUSH
15971: CALL_OW 310
15975: IFFALSE 15998
// place := IsInUnit ( speaker [ 1 ] ) else
15977: LD_ADDR_VAR 0 4
15981: PUSH
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: CALL_OW 310
15995: ST_TO_ADDR
15996: GO 16012
// place := speaker [ 1 ] ;
15998: LD_ADDR_VAR 0 4
16002: PUSH
16003: LD_VAR 0 3
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16021: LD_VAR 0 4
16025: PPUSH
16026: CALL_OW 250
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: CALL_OW 251
16040: PPUSH
16041: CALL 2138 0 2
// wait ( 0 0$2 ) ;
16045: LD_INT 70
16047: PPUSH
16048: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16052: LD_EXP 38
16056: PPUSH
16057: CALL_OW 305
16061: NOT
16062: IFFALSE 16066
// exit ;
16064: GO 16530
// allowConvoys := false ;
16066: LD_ADDR_EXP 12
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// InGameOn ;
16074: CALL_OW 8
// wait ( 0 0$1 ) ;
16078: LD_INT 35
16080: PPUSH
16081: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16085: LD_EXP 38
16089: PPUSH
16090: LD_STRING DI-1-land
16092: PPUSH
16093: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PPUSH
16106: CALL_OW 310
16110: IFFALSE 16125
// ComExit ( speaker [ 1 ] ) ;
16112: LD_VAR 0 3
16116: PUSH
16117: LD_INT 1
16119: ARRAY
16120: PPUSH
16121: CALL 77595 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16125: LD_VAR 0 3
16129: PUSH
16130: LD_INT 1
16132: ARRAY
16133: PPUSH
16134: LD_EXP 38
16138: PPUSH
16139: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PPUSH
16152: LD_EXP 38
16156: PPUSH
16157: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16161: LD_EXP 38
16165: PPUSH
16166: LD_VAR 0 3
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PPUSH
16175: CALL_OW 119
// wait ( 0 0$1 ) ;
16179: LD_INT 35
16181: PPUSH
16182: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16186: LD_VAR 0 3
16190: PUSH
16191: LD_INT 1
16193: ARRAY
16194: PPUSH
16195: LD_VAR 0 3
16199: PUSH
16200: LD_INT 2
16202: ARRAY
16203: PUSH
16204: LD_STRING -1-land
16206: STR
16207: PPUSH
16208: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16212: LD_EXP 38
16216: PPUSH
16217: LD_STRING DI-2-land
16219: PPUSH
16220: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: LD_VAR 0 3
16237: PUSH
16238: LD_INT 2
16240: ARRAY
16241: PUSH
16242: LD_STRING -2-land
16244: STR
16245: PPUSH
16246: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_INT 2
16266: ARRAY
16267: PUSH
16268: LD_STRING -3-land
16270: STR
16271: PPUSH
16272: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16276: LD_EXP 28
16280: PPUSH
16281: LD_STRING DH-1-land
16283: PPUSH
16284: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16288: LD_VAR 0 5
16292: PPUSH
16293: CALL_OW 313
16297: PUSH
16298: LD_INT 6
16300: EQUAL
16301: IFFALSE 16321
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16303: LD_VAR 0 5
16307: PPUSH
16308: CALL_OW 313
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PPUSH
16317: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16321: LD_EXP 38
16325: PPUSH
16326: LD_INT 2
16328: PPUSH
16329: CALL_OW 235
// CenterOnUnits ( depot ) ;
16333: LD_VAR 0 5
16337: PPUSH
16338: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16342: LD_EXP 38
16346: PPUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16356: LD_VAR 0 3
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 5
16369: PPUSH
16370: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16381: LD_EXP 38
16385: PPUSH
16386: CALL_OW 310
16390: PUSH
16391: LD_EXP 38
16395: PPUSH
16396: CALL_OW 302
16400: NOT
16401: OR
16402: PUSH
16403: LD_VAR 0 5
16407: PPUSH
16408: CALL_OW 302
16412: NOT
16413: OR
16414: IFFALSE 16374
// InGameOff ;
16416: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16420: LD_EXP 38
16424: PPUSH
16425: CALL_OW 302
16429: NOT
16430: IFFALSE 16434
// exit ;
16432: GO 16530
// if not IsOk ( depot ) then
16434: LD_VAR 0 5
16438: PPUSH
16439: CALL_OW 302
16443: NOT
16444: IFFALSE 16507
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16446: LD_EXP 38
16450: PPUSH
16451: LD_INT 30
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16461: LD_INT 35
16463: PPUSH
16464: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16468: LD_EXP 38
16472: PPUSH
16473: LD_INT 30
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 307
16483: PUSH
16484: LD_EXP 38
16488: PPUSH
16489: CALL_OW 301
16493: OR
16494: IFFALSE 16461
// RemoveUnit ( Ibrahim ) ;
16496: LD_EXP 38
16500: PPUSH
16501: CALL_OW 64
// exit ;
16505: GO 16530
// end ; ibrahimInDepot := true ;
16507: LD_ADDR_EXP 25
16511: PUSH
16512: LD_INT 1
16514: ST_TO_ADDR
// allowConvoys := true ;
16515: LD_ADDR_EXP 12
16519: PUSH
16520: LD_INT 1
16522: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16523: LD_STRING IbrahimInDepot
16525: PPUSH
16526: CALL_OW 97
// end ;
16530: PPOPN 5
16532: END
// export function IbrahimQuery ; begin
16533: LD_INT 0
16535: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16536: LD_STRING IbrahimQuery
16538: PPUSH
16539: CALL_OW 97
16543: PUSH
16544: LD_INT 1
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16914
16552: POP
// begin allowConvoys := false ;
16553: LD_ADDR_EXP 12
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// ibrahimInDepot := false ;
16561: LD_ADDR_EXP 25
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// InGameOn ;
16569: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16573: LD_EXP 28
16577: PPUSH
16578: CALL_OW 87
// wait ( 0 0$1 ) ;
16582: LD_INT 35
16584: PPUSH
16585: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16589: LD_EXP 28
16593: PPUSH
16594: LD_STRING DH-1-interrogation
16596: PPUSH
16597: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16601: LD_EXP 38
16605: PPUSH
16606: LD_STRING DI-1-interrogation
16608: PPUSH
16609: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16613: LD_EXP 28
16617: PPUSH
16618: LD_STRING DH-2-interrogation
16620: PPUSH
16621: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16625: LD_EXP 38
16629: PPUSH
16630: LD_STRING DI-2-interrogation
16632: PPUSH
16633: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16637: LD_EXP 28
16641: PPUSH
16642: LD_STRING DH-3-interrogation
16644: PPUSH
16645: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16649: LD_EXP 38
16653: PPUSH
16654: LD_STRING DI-3-interrogation
16656: PPUSH
16657: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16661: LD_EXP 28
16665: PPUSH
16666: LD_STRING DH-4-interrogation
16668: PPUSH
16669: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16673: LD_EXP 38
16677: PPUSH
16678: LD_STRING DI-4-interrogation
16680: PPUSH
16681: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16685: LD_EXP 28
16689: PPUSH
16690: LD_STRING DH-5-interrogation
16692: PPUSH
16693: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16697: LD_EXP 38
16701: PPUSH
16702: LD_STRING DI-5-interrogation
16704: PPUSH
16705: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16709: LD_INT 10
16711: PPUSH
16712: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16716: LD_EXP 28
16720: PPUSH
16721: LD_STRING DH-6-interrogation
16723: PPUSH
16724: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16728: LD_EXP 38
16732: PPUSH
16733: LD_STRING DI-6-interrogation
16735: PPUSH
16736: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16740: LD_EXP 38
16744: PPUSH
16745: LD_STRING DI-7-interrogation
16747: PPUSH
16748: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16752: LD_EXP 28
16756: PPUSH
16757: LD_STRING DH-7-interrogation
16759: PPUSH
16760: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16764: LD_INT 10
16766: PPUSH
16767: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16771: LD_EXP 28
16775: PPUSH
16776: LD_STRING DH-8-interrogation
16778: PPUSH
16779: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16783: LD_EXP 38
16787: PPUSH
16788: LD_STRING DI-8-interrogation
16790: PPUSH
16791: CALL_OW 88
// wait ( 0 0$1 ) ;
16795: LD_INT 35
16797: PPUSH
16798: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16802: LD_STRING IbrahimDecisionQuery
16804: PPUSH
16805: CALL_OW 97
16809: PUSH
16810: LD_INT 1
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16842
16818: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16819: LD_EXP 38
16823: PPUSH
16824: LD_STRING DI-1-kill
16826: PPUSH
16827: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16831: LD_EXP 38
16835: PPUSH
16836: CALL_OW 66
// end ; 2 :
16840: GO 16908
16842: LD_INT 2
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16907
16850: POP
// begin SetSide ( Ibrahim , 6 ) ;
16851: LD_EXP 38
16855: PPUSH
16856: LD_INT 6
16858: PPUSH
16859: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16863: LD_EXP 38
16867: PPUSH
16868: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16872: LD_EXP 38
16876: PPUSH
16877: LD_INT 66
16879: PPUSH
16880: LD_INT 2
16882: PPUSH
16883: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16887: LD_EXP 38
16891: PPUSH
16892: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16896: LD_EXP 28
16900: PPUSH
16901: CALL_OW 122
// end ; end ;
16905: GO 16908
16907: POP
// InGameOff ;
16908: CALL_OW 9
// end ; 2 :
16912: GO 16928
16914: LD_INT 2
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 16927
16922: POP
// exit ; end ;
16923: GO 17004
16925: GO 16928
16927: POP
// allowConvoys := true ;
16928: LD_ADDR_EXP 12
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16936: LD_INT 5250
16938: PPUSH
16939: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16943: LD_INT 35
16945: PPUSH
16946: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16950: LD_INT 81
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: NOT
16979: IFFALSE 16943
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16981: LD_EXP 38
16985: PPUSH
16986: LD_INT 34
16988: PPUSH
16989: LD_INT 21
16991: PPUSH
16992: CALL_OW 111
// ibrahimIsFree := true ;
16996: LD_ADDR_EXP 26
17000: PUSH
17001: LD_INT 1
17003: ST_TO_ADDR
// end ;
17004: LD_VAR 0 1
17008: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17009: LD_EXP 26
17013: PUSH
17014: LD_EXP 38
17018: PPUSH
17019: CALL_OW 302
17023: AND
17024: PUSH
17025: LD_INT 2
17027: PPUSH
17028: LD_EXP 38
17032: PPUSH
17033: CALL_OW 292
17037: AND
17038: IFFALSE 17805
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin wait ( 0 0$10 ) ;
17051: LD_INT 350
17053: PPUSH
17054: CALL_OW 67
// allowConvoys := false ;
17058: LD_ADDR_EXP 12
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
// depot := usDepot ;
17066: LD_ADDR_VAR 0 4
17070: PUSH
17071: LD_INT 11
17073: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17074: LD_INT 11
17076: NOT
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 50
17090: PUSH
17091: EMPTY
17092: LIST
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 69
17113: AND
17114: IFFALSE 17161
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17116: LD_ADDR_VAR 0 4
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 50
17133: PUSH
17134: EMPTY
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 69
17156: PUSH
17157: LD_INT 1
17159: ARRAY
17160: ST_TO_ADDR
// InGameOn ;
17161: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17165: LD_EXP 38
17169: PPUSH
17170: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17174: LD_EXP 38
17178: PPUSH
17179: LD_STRING DI-1-free
17181: PPUSH
17182: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17186: LD_EXP 28
17190: PPUSH
17191: LD_EXP 38
17195: PPUSH
17196: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17200: LD_EXP 28
17204: PPUSH
17205: LD_STRING DH-1-free
17207: PPUSH
17208: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17212: LD_EXP 38
17216: PPUSH
17217: LD_EXP 28
17221: PPUSH
17222: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17226: LD_EXP 38
17230: PPUSH
17231: LD_STRING DI-2-free
17233: PPUSH
17234: CALL_OW 88
// changeClass := 0 ;
17238: LD_ADDR_VAR 0 1
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17246: LD_STRING IbrahimJoinQuery
17248: PPUSH
17249: CALL_OW 97
17253: PUSH
17254: LD_INT 1
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17273
17262: POP
// begin changeClass := 1 ;
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// end ; 2 :
17271: GO 17513
17273: LD_INT 2
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17433
17281: POP
// begin Say ( Heike , DH-1-decline ) ;
17282: LD_EXP 28
17286: PPUSH
17287: LD_STRING DH-1-decline
17289: PPUSH
17290: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17294: LD_EXP 38
17298: PPUSH
17299: LD_STRING DI-1-decline
17301: PPUSH
17302: CALL_OW 88
// InGameOff ;
17306: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17310: LD_EXP 38
17314: PPUSH
17315: LD_INT 30
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 111
// p := 0 ;
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// repeat p := p + 1 ;
17333: LD_ADDR_VAR 0 3
17337: PUSH
17338: LD_VAR 0 3
17342: PUSH
17343: LD_INT 1
17345: PLUS
17346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17347: LD_INT 35
17349: PPUSH
17350: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17354: LD_EXP 38
17358: PPUSH
17359: LD_INT 30
17361: PPUSH
17362: LD_INT 1
17364: PPUSH
17365: CALL_OW 307
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 101
17382: PUSH
17383: LD_INT 6
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: NOT
17399: OR
17400: PUSH
17401: LD_VAR 0 3
17405: PUSH
17406: LD_INT 10
17408: GREATER
17409: OR
17410: IFFALSE 17333
// RemoveUnit ( Ibrahim ) ;
17412: LD_EXP 38
17416: PPUSH
17417: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17421: LD_INT 1
17423: PPUSH
17424: LD_STRING 03_IbrahimHasEscaped
17426: PPUSH
17427: CALL_OW 39
// end ; 3 :
17431: GO 17513
17433: LD_INT 3
17435: DOUBLE
17436: EQUAL
17437: IFTRUE 17441
17439: GO 17512
17441: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17442: LD_EXP 28
17446: PPUSH
17447: LD_STRING DH-1-radio-hq
17449: PPUSH
17450: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17454: LD_EXP 37
17458: PPUSH
17459: LD_STRING DO-1-radio-hq
17461: PPUSH
17462: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17466: LD_EXP 28
17470: PPUSH
17471: LD_STRING DH-2-radio-hq
17473: PPUSH
17474: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17478: LD_EXP 37
17482: PPUSH
17483: LD_STRING DO-2-radio-hq
17485: PPUSH
17486: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17490: LD_EXP 28
17494: PPUSH
17495: LD_STRING DH-3-radio-hq
17497: PPUSH
17498: CALL_OW 88
// changeClass := 1 ;
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_INT 1
17509: ST_TO_ADDR
// end ; end ;
17510: GO 17513
17512: POP
// if changeClass then
17513: LD_VAR 0 1
17517: IFFALSE 17805
// begin Say ( Heike , DH-1-agree ) ;
17519: LD_EXP 28
17523: PPUSH
17524: LD_STRING DH-1-agree
17526: PPUSH
17527: CALL_OW 88
// if IsOk ( Givi ) then
17531: LD_EXP 29
17535: PPUSH
17536: CALL_OW 302
17540: IFFALSE 17578
// begin Say ( Givi , DG-1-agree ) ;
17542: LD_EXP 29
17546: PPUSH
17547: LD_STRING DG-1-agree
17549: PPUSH
17550: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17554: LD_EXP 28
17558: PPUSH
17559: LD_STRING DH-2-agree
17561: PPUSH
17562: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17566: LD_EXP 29
17570: PPUSH
17571: LD_STRING DG-2-agree
17573: PPUSH
17574: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17578: LD_VAR 0 4
17582: PPUSH
17583: CALL_OW 313
17587: PUSH
17588: LD_INT 6
17590: EQUAL
17591: IFFALSE 17611
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17593: LD_VAR 0 4
17597: PPUSH
17598: CALL_OW 313
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: PPUSH
17607: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17611: LD_EXP 38
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17623: LD_ADDR_VAR 0 5
17627: PUSH
17628: LD_EXP 38
17632: PPUSH
17633: CALL_OW 250
17637: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17638: LD_ADDR_VAR 0 6
17642: PUSH
17643: LD_EXP 38
17647: PPUSH
17648: CALL_OW 251
17652: ST_TO_ADDR
// if depot then
17653: LD_VAR 0 4
17657: IFFALSE 17706
// begin ComEnterUnit ( Ibrahim , depot ) ;
17659: LD_EXP 38
17663: PPUSH
17664: LD_VAR 0 4
17668: PPUSH
17669: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17673: LD_INT 35
17675: PPUSH
17676: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17680: LD_EXP 38
17684: PPUSH
17685: CALL_OW 310
17689: IFFALSE 17673
// b := IsInUnit ( Ibrahim ) ;
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_EXP 38
17700: PPUSH
17701: CALL_OW 310
17705: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17706: LD_EXP 38
17710: PPUSH
17711: CALL_OW 64
// uc_side := 2 ;
17715: LD_ADDR_OWVAR 20
17719: PUSH
17720: LD_INT 2
17722: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17723: LD_ADDR_EXP 38
17727: PUSH
17728: LD_STRING Ibrahim
17730: PPUSH
17731: LD_INT 0
17733: PPUSH
17734: LD_STRING 
17736: PPUSH
17737: CALL 39796 0 3
17741: ST_TO_ADDR
// if depot then
17742: LD_VAR 0 4
17746: IFFALSE 17764
// PlaceHumanInUnit ( Ibrahim , b ) else
17748: LD_EXP 38
17752: PPUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: CALL_OW 52
17762: GO 17786
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17764: LD_EXP 38
17768: PPUSH
17769: LD_VAR 0 5
17773: PPUSH
17774: LD_VAR 0 6
17778: PPUSH
17779: LD_INT 0
17781: PPUSH
17782: CALL_OW 48
// InGameOff ;
17786: CALL_OW 9
// allowConvoys := true ;
17790: LD_ADDR_EXP 12
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17798: LD_STRING ACH_IBRAHIM
17800: PPUSH
17801: CALL_OW 543
// end ; end ;
17805: PPOPN 6
17807: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17808: LD_EXP 33
17812: PPUSH
17813: CALL_OW 256
17817: PUSH
17818: LD_INT 3
17820: LESS
17821: IFFALSE 17888
17823: GO 17825
17825: DISABLE
// begin DialogueOn ;
17826: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17830: LD_EXP 33
17834: PPUSH
17835: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17839: LD_EXP 33
17843: PPUSH
17844: LD_STRING DK-keydeath-1
17846: PPUSH
17847: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17851: LD_EXP 28
17855: PPUSH
17856: LD_STRING DH-keydeath-2
17858: PPUSH
17859: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17863: LD_EXP 28
17867: PPUSH
17868: LD_STRING DH-keydeath-3
17870: PPUSH
17871: CALL_OW 88
// DialogueOff ;
17875: CALL_OW 7
// KillUnit ( Kaia ) ;
17879: LD_EXP 33
17883: PPUSH
17884: CALL_OW 66
// end ;
17888: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17889: LD_EXP 11
17893: PUSH
17894: LD_EXP 21
17898: PUSH
17899: LD_INT 1
17901: LESS
17902: AND
17903: IFFALSE 18443
17905: GO 17907
17907: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17908: LD_INT 22
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 25
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 25
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: IFFALSE 18032
// begin ChangeSideFog ( 1 , 2 ) ;
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 2
17961: PPUSH
17962: CALL_OW 343
// Query ( DestroyEnemy ) ;
17966: LD_STRING DestroyEnemy
17968: PPUSH
17969: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17973: LD_INT 35
17975: PPUSH
17976: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17980: LD_INT 22
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 25
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 69
18026: PUSH
18027: LD_INT 0
18029: EQUAL
18030: IFFALSE 17973
// end ; DialogueOn ;
18032: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18036: LD_EXP 28
18040: PPUSH
18041: LD_STRING DH-1-final
18043: PPUSH
18044: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18048: LD_OWVAR 1
18052: PUSH
18053: LD_INT 138600
18055: PUSH
18056: LD_INT 134400
18058: PUSH
18059: LD_INT 130200
18061: PUSH
18062: LD_INT 126000
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: LD_OWVAR 67
18075: ARRAY
18076: LESSEQUAL
18077: IFFALSE 18091
// AddMedal ( med1 , 1 ) else
18079: LD_STRING med1
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: CALL_OW 101
18089: GO 18102
// AddMedal ( med1 , - 1 ) ;
18091: LD_STRING med1
18093: PPUSH
18094: LD_INT 1
18096: NEG
18097: PPUSH
18098: CALL_OW 101
// if vehCounter >= 2 then
18102: LD_EXP 22
18106: PUSH
18107: LD_INT 2
18109: GREATEREQUAL
18110: IFFALSE 18124
// AddMedal ( med2 , 1 ) else
18112: LD_STRING med2
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 101
18122: GO 18135
// AddMedal ( med2 , - 1 ) ;
18124: LD_STRING med2
18126: PPUSH
18127: LD_INT 1
18129: NEG
18130: PPUSH
18131: CALL_OW 101
// if deadCounter = 0 then
18135: LD_EXP 9
18139: PUSH
18140: LD_INT 0
18142: EQUAL
18143: IFFALSE 18157
// AddMedal ( med3 , 1 ) else
18145: LD_STRING med3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 101
18155: GO 18168
// AddMedal ( med3 , - 1 ) ;
18157: LD_STRING med3
18159: PPUSH
18160: LD_INT 1
18162: NEG
18163: PPUSH
18164: CALL_OW 101
// GiveMedals ( MAIN ) ;
18168: LD_STRING MAIN
18170: PPUSH
18171: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18175: LD_INT 22
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 23
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 21
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18219: LD_EXP 28
18223: PPUSH
18224: LD_STRING 03_Heike
18226: PPUSH
18227: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18231: LD_EXP 32
18235: PPUSH
18236: LD_STRING 03_Aviradze
18238: PPUSH
18239: CALL_OW 38
// if Givi then
18243: LD_EXP 29
18247: IFFALSE 18261
// SaveCharacters ( Givi , 03_Givi ) ;
18249: LD_EXP 29
18253: PPUSH
18254: LD_STRING 03_Givi
18256: PPUSH
18257: CALL_OW 38
// if Mike then
18261: LD_EXP 30
18265: IFFALSE 18279
// SaveCharacters ( Mike , 03_Mike ) ;
18267: LD_EXP 30
18271: PPUSH
18272: LD_STRING 03_Mike
18274: PPUSH
18275: CALL_OW 38
// if Kamil then
18279: LD_EXP 31
18283: IFFALSE 18297
// SaveCharacters ( Kamil , 03_Kamil ) ;
18285: LD_EXP 31
18289: PPUSH
18290: LD_STRING 03_Kamil
18292: PPUSH
18293: CALL_OW 38
// if Kaia then
18297: LD_EXP 33
18301: IFFALSE 18315
// SaveCharacters ( Kaia , 03_Kaia ) ;
18303: LD_EXP 33
18307: PPUSH
18308: LD_STRING 03_Kaia
18310: PPUSH
18311: CALL_OW 38
// if Sophia then
18315: LD_EXP 34
18319: IFFALSE 18333
// SaveCharacters ( Sophia , 03_Sophia ) ;
18321: LD_EXP 34
18325: PPUSH
18326: LD_STRING 03_Sophia
18328: PPUSH
18329: CALL_OW 38
// if Markov then
18333: LD_EXP 35
18337: IFFALSE 18351
// SaveCharacters ( Markov , 03_Markov ) ;
18339: LD_EXP 35
18343: PPUSH
18344: LD_STRING 03_Markov
18346: PPUSH
18347: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18351: LD_EXP 38
18355: PUSH
18356: LD_EXP 38
18360: PPUSH
18361: CALL_OW 255
18365: PUSH
18366: LD_INT 2
18368: EQUAL
18369: AND
18370: IFFALSE 18391
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18372: LD_STRING enableBioCharacter(BIO_IBRA)
18374: PPUSH
18375: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18379: LD_EXP 38
18383: PPUSH
18384: LD_STRING 03_Ibrahim
18386: PPUSH
18387: CALL_OW 38
// end ; if heikeSecondSquad then
18391: LD_EXP 42
18395: IFFALSE 18409
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18397: LD_EXP 42
18401: PPUSH
18402: LD_STRING 03_others
18404: PPUSH
18405: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18409: LD_EXP 9
18413: PPUSH
18414: LD_STRING 03_DeadCounter
18416: PPUSH
18417: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18421: LD_STRING enableBioCharacter(BIO_OMAR)
18423: PPUSH
18424: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18428: LD_STRING enableBioCharacter(BIO_FARM)
18430: PPUSH
18431: CALL_OW 559
// YouWin ;
18435: CALL_OW 103
// DialogueOff ;
18439: CALL_OW 7
// end ; end_of_file
18443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL 35485 0 1
// if un = Heike then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 28
18462: EQUAL
18463: IFFALSE 18472
// YouLost ( Heike ) ;
18465: LD_STRING Heike
18467: PPUSH
18468: CALL_OW 104
// if un = Aviradze then
18472: LD_VAR 0 1
18476: PUSH
18477: LD_EXP 32
18481: EQUAL
18482: IFFALSE 18491
// YouLost ( Aviradze ) ;
18484: LD_STRING Aviradze
18486: PPUSH
18487: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18491: LD_VAR 0 1
18495: PUSH
18496: LD_INT 11
18498: EQUAL
18499: PUSH
18500: LD_EXP 11
18504: NOT
18505: AND
18506: IFFALSE 18515
// YouLost ( Depot ) ;
18508: LD_STRING Depot
18510: PPUSH
18511: CALL_OW 104
// if un = arDepot then
18515: LD_VAR 0 1
18519: PUSH
18520: LD_INT 5
18522: EQUAL
18523: IFFALSE 18532
// YouLost ( FarmerDepot ) ;
18525: LD_STRING FarmerDepot
18527: PPUSH
18528: CALL_OW 104
// if un = Farmer then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_EXP 36
18541: EQUAL
18542: IFFALSE 18551
// YouLost ( Farmer ) ;
18544: LD_STRING Farmer
18546: PPUSH
18547: CALL_OW 104
// if un in usForces then
18551: LD_VAR 0 1
18555: PUSH
18556: LD_EXP 44
18560: IN
18561: IFFALSE 18579
// usForces := usForces diff un ;
18563: LD_ADDR_EXP 44
18567: PUSH
18568: LD_EXP 44
18572: PUSH
18573: LD_VAR 0 1
18577: DIFF
18578: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 23
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: IN
18624: IFFALSE 18640
// deadCounter := deadCounter + 1 ;
18626: LD_ADDR_EXP 9
18630: PUSH
18631: LD_EXP 9
18635: PUSH
18636: LD_INT 1
18638: PLUS
18639: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18640: LD_VAR 0 1
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 34
18657: PUSH
18658: LD_INT 12
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: IN
18674: PUSH
18675: LD_EXP 18
18679: NOT
18680: AND
18681: IFFALSE 18691
// firstConvoyDestroyed := true ;
18683: LD_ADDR_EXP 18
18687: PUSH
18688: LD_INT 1
18690: ST_TO_ADDR
// if un in usAttackers then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 47
18700: IN
18701: IFFALSE 18719
// usAttackers := usAttackers diff un ;
18703: LD_ADDR_EXP 47
18707: PUSH
18708: LD_EXP 47
18712: PUSH
18713: LD_VAR 0 1
18717: DIFF
18718: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 22
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 21
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: IN
18753: IFFALSE 18769
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18755: LD_ADDR_EXP 20
18759: PUSH
18760: LD_EXP 20
18764: PUSH
18765: LD_INT 1
18767: PLUS
18768: ST_TO_ADDR
// end ;
18769: PPOPN 1
18771: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18772: LD_VAR 0 2
18776: PUSH
18777: LD_EXP 38
18781: EQUAL
18782: PUSH
18783: LD_EXP 25
18787: AND
18788: IFFALSE 18973
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18790: LD_INT 22
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 30
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 50
18812: PUSH
18813: EMPTY
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: IFFALSE 18879
// begin InGameOn ;
18827: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18831: LD_EXP 38
18835: PPUSH
18836: LD_INT 11
18838: PPUSH
18839: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18843: LD_INT 35
18845: PPUSH
18846: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18850: LD_EXP 38
18854: PPUSH
18855: LD_INT 11
18857: PPUSH
18858: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18862: LD_EXP 38
18866: PPUSH
18867: CALL_OW 310
18871: IFFALSE 18843
// InGameOff ;
18873: CALL_OW 9
// end else
18877: GO 18973
// begin SetSide ( Ibrahim , 6 ) ;
18879: LD_EXP 38
18883: PPUSH
18884: LD_INT 6
18886: PPUSH
18887: CALL_OW 235
// ibrahimInDepot := false ;
18891: LD_ADDR_EXP 25
18895: PUSH
18896: LD_INT 0
18898: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18899: LD_EXP 38
18903: PPUSH
18904: LD_INT 30
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18921: LD_EXP 38
18925: PPUSH
18926: LD_INT 30
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18936: LD_EXP 38
18940: PPUSH
18941: LD_INT 30
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: CALL_OW 307
18951: PUSH
18952: LD_EXP 38
18956: PPUSH
18957: CALL_OW 301
18961: OR
18962: IFFALSE 18914
// RemoveUnit ( Ibrahim ) ;
18964: LD_EXP 38
18968: PPUSH
18969: CALL_OW 64
// end ; end ; end ;
18973: PPOPN 2
18975: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18976: LD_VAR 0 2
18980: PUSH
18981: LD_EXP 28
18985: EQUAL
18986: PUSH
18987: LD_VAR 0 1
18991: PUSH
18992: LD_INT 11
18994: EQUAL
18995: AND
18996: PUSH
18997: LD_EXP 25
19001: AND
19002: IFFALSE 19008
// IbrahimQuery ;
19004: CALL 16533 0 0
// end ;
19008: PPOPN 2
19010: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 141
// if oldId in usAttackers then
19020: LD_VAR 0 2
19024: PUSH
19025: LD_EXP 47
19029: IN
19030: IFFALSE 19048
// usAttackers := usAttackers diff oldId ;
19032: LD_ADDR_EXP 47
19036: PUSH
19037: LD_EXP 47
19041: PUSH
19042: LD_VAR 0 2
19046: DIFF
19047: ST_TO_ADDR
// if newId in usAttackers then
19048: LD_VAR 0 1
19052: PUSH
19053: LD_EXP 47
19057: IN
19058: IFFALSE 19076
// usAttackers := usAttackers diff newId ;
19060: LD_ADDR_EXP 47
19064: PUSH
19065: LD_EXP 47
19069: PUSH
19070: LD_VAR 0 1
19074: DIFF
19075: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 4
19083: EQUAL
19084: PUSH
19085: LD_EXP 18
19089: NOT
19090: AND
19091: IFFALSE 19101
// firstConvoyDestroyed := true ;
19093: LD_ADDR_EXP 18
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 264
19110: PUSH
19111: LD_INT 12
19113: EQUAL
19114: IFFALSE 19152
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19116: LD_ADDR_EXP 13
19120: PUSH
19121: LD_EXP 13
19125: PUSH
19126: LD_INT 1
19128: PLUS
19129: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19130: LD_VAR 0 1
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 289
19142: PUSH
19143: LD_INT 0
19145: EQUAL
19146: IFFALSE 19152
// EmptyCargoDialog ;
19148: CALL 15167 0 0
// end ; end ;
19152: PPOPN 4
19154: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19155: LD_VAR 0 1
19159: PUSH
19160: LD_INT 2
19162: EQUAL
19163: PUSH
19164: LD_VAR 0 2
19168: PUSH
19169: LD_INT 5
19171: EQUAL
19172: AND
19173: IFFALSE 19182
// YouLost ( Attack ) ;
19175: LD_STRING Attack
19177: PPUSH
19178: CALL_OW 104
// end ;
19182: PPOPN 2
19184: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19185: LD_VAR 0 1
19189: PPUSH
19190: CALL_OW 255
19194: PUSH
19195: LD_INT 1
19197: EQUAL
19198: PUSH
19199: LD_EXP 6
19203: NOT
19204: AND
19205: IFFALSE 19339
// begin if GetBType ( b ) = b_lab then
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 266
19216: PUSH
19217: LD_INT 6
19219: EQUAL
19220: IFFALSE 19260
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19222: LD_EXP 44
19226: PPUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 4
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PPUSH
19237: CALL_OW 72
19241: PPUSH
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 120
// AmLabResearch ( b ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL 5194 0 1
// end ; if GetBType ( b ) = b_armoury then
19260: LD_VAR 0 1
19264: PPUSH
19265: CALL_OW 266
19269: PUSH
19270: LD_INT 4
19272: EQUAL
19273: IFFALSE 19321
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19275: LD_EXP 44
19279: PPUSH
19280: LD_INT 25
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: LD_INT 54
19295: PUSH
19296: EMPTY
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 72
19311: PPUSH
19312: LD_VAR 0 1
19316: PPUSH
19317: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19321: LD_ADDR_EXP 46
19325: PUSH
19326: LD_EXP 46
19330: PPUSH
19331: LD_INT 1
19333: PPUSH
19334: CALL_OW 3
19338: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19339: LD_VAR 0 1
19343: PPUSH
19344: CALL_OW 255
19348: PUSH
19349: LD_INT 5
19351: EQUAL
19352: IFFALSE 19366
// SetBLevel ( b , 5 ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_INT 5
19361: PPUSH
19362: CALL_OW 241
// end ;
19366: PPOPN 1
19368: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 255
19378: PUSH
19379: LD_INT 2
19381: EQUAL
19382: IFFALSE 19398
// vehCounter := vehCounter + 1 ;
19384: LD_ADDR_EXP 22
19388: PUSH
19389: LD_EXP 22
19393: PUSH
19394: LD_INT 1
19396: PLUS
19397: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_VAR 0 2
19407: PPUSH
19408: CALL 35607 0 2
// end ;
19412: PPOPN 2
19414: END
// on SailEvent ( event ) do begin if event = eventAttack then
19415: LD_VAR 0 1
19419: PUSH
19420: LD_EXP 24
19424: EQUAL
19425: IFFALSE 19431
// AmericanAttack ;
19427: CALL 6787 0 0
// end ; end_of_file
19431: PPOPN 1
19433: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19434: LD_OWVAR 1
19438: PUSH
19439: LD_INT 10500
19441: PUSH
19442: LD_INT 9800
19444: PUSH
19445: LD_INT 9450
19447: PUSH
19448: LD_INT 9100
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: LD_OWVAR 67
19461: ARRAY
19462: LESSEQUAL
19463: IFFALSE 19490
19465: GO 19467
19467: DISABLE
// begin enable ;
19468: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19469: LD_INT 1
19471: PPUSH
19472: LD_INT 5
19474: PPUSH
19475: CALL_OW 12
19479: PPUSH
19480: LD_INT 9
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 55
// end ;
19490: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19491: LD_EXP 6
19495: PUSH
19496: LD_OWVAR 1
19500: PUSH
19501: LD_INT 94500
19503: LESSEQUAL
19504: AND
19505: IFFALSE 19532
19507: GO 19509
19509: DISABLE
// begin enable ;
19510: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19511: LD_INT 3
19513: PPUSH
19514: LD_INT 5
19516: PPUSH
19517: CALL_OW 12
19521: PPUSH
19522: LD_INT 9
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 55
// end ; end_of_file
19532: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19533: LD_EXP 11
19537: NOT
19538: PUSH
19539: LD_EXP 16
19543: AND
19544: PUSH
19545: LD_EXP 4
19549: AND
19550: PUSH
19551: LD_EXP 15
19555: PUSH
19556: LD_EXP 16
19560: LESSEQUAL
19561: AND
19562: IFFALSE 19673
19564: GO 19566
19566: DISABLE
// begin enable ;
19567: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19568: LD_ADDR_OWVAR 47
19572: PUSH
19573: LD_STRING #X103-1
19575: PUSH
19576: LD_EXP 16
19580: PUSH
19581: LD_EXP 15
19585: MINUS
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19591: LD_ADDR_EXP 15
19595: PUSH
19596: LD_INT 5
19598: PPUSH
19599: CALL_OW 274
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: CALL_OW 275
19611: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19612: LD_INT 10
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 287
19622: PUSH
19623: LD_INT 0
19625: EQUAL
19626: IFFALSE 19644
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19628: LD_ADDR_EXP 17
19632: PUSH
19633: LD_EXP 17
19637: PUSH
19638: LD_INT 35
19640: MINUS
19641: ST_TO_ADDR
19642: GO 19673
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19644: LD_ADDR_EXP 17
19648: PUSH
19649: LD_INT 42000
19651: PUSH
19652: LD_INT 31500
19654: PUSH
19655: LD_INT 25200
19657: PUSH
19658: LD_INT 21000
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: LD_OWVAR 67
19671: ARRAY
19672: ST_TO_ADDR
// end ; end_of_file
19673: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
19674: LD_INT 0
19676: PPUSH
// ar_miner := 81 ;
19677: LD_ADDR_EXP 55
19681: PUSH
19682: LD_INT 81
19684: ST_TO_ADDR
// ar_crane := 88 ;
19685: LD_ADDR_EXP 54
19689: PUSH
19690: LD_INT 88
19692: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19693: LD_ADDR_EXP 49
19697: PUSH
19698: LD_INT 89
19700: ST_TO_ADDR
// us_hack := 99 ;
19701: LD_ADDR_EXP 50
19705: PUSH
19706: LD_INT 99
19708: ST_TO_ADDR
// us_artillery := 97 ;
19709: LD_ADDR_EXP 51
19713: PUSH
19714: LD_INT 97
19716: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19717: LD_ADDR_EXP 52
19721: PUSH
19722: LD_INT 91
19724: ST_TO_ADDR
// ar_mortar := 92 ;
19725: LD_ADDR_EXP 53
19729: PUSH
19730: LD_INT 92
19732: ST_TO_ADDR
// ru_flamethrower := 93 ;
19733: LD_ADDR_EXP 56
19737: PUSH
19738: LD_INT 93
19740: ST_TO_ADDR
// ru_radar := 98 ;
19741: LD_ADDR_EXP 48
19745: PUSH
19746: LD_INT 98
19748: ST_TO_ADDR
// tech_Artillery := 80 ;
19749: LD_ADDR_EXP 57
19753: PUSH
19754: LD_INT 80
19756: ST_TO_ADDR
// tech_RadMat := 81 ;
19757: LD_ADDR_EXP 58
19761: PUSH
19762: LD_INT 81
19764: ST_TO_ADDR
// tech_BasicTools := 82 ;
19765: LD_ADDR_EXP 59
19769: PUSH
19770: LD_INT 82
19772: ST_TO_ADDR
// tech_Cargo := 83 ;
19773: LD_ADDR_EXP 60
19777: PUSH
19778: LD_INT 83
19780: ST_TO_ADDR
// tech_Track := 84 ;
19781: LD_ADDR_EXP 61
19785: PUSH
19786: LD_INT 84
19788: ST_TO_ADDR
// tech_Crane := 85 ;
19789: LD_ADDR_EXP 62
19793: PUSH
19794: LD_INT 85
19796: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19797: LD_ADDR_EXP 63
19801: PUSH
19802: LD_INT 86
19804: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19805: LD_ADDR_EXP 64
19809: PUSH
19810: LD_INT 87
19812: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19813: LD_ADDR_EXP 65
19817: PUSH
19818: LD_INT 88
19820: ST_TO_ADDR
// end ;
19821: LD_VAR 0 1
19825: RET
// every 1 do
19826: GO 19828
19828: DISABLE
// InitGlobalVariables ; end_of_file
19829: CALL 19674 0 0
19833: END
// every 0 0$1 do
19834: GO 19836
19836: DISABLE
// begin enable ;
19837: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19838: LD_STRING updateTimer(
19840: PUSH
19841: LD_OWVAR 1
19845: STR
19846: PUSH
19847: LD_STRING );
19849: STR
19850: PPUSH
19851: CALL_OW 559
// end ;
19855: END
// export function SOS_MapStart ( ) ; begin
19856: LD_INT 0
19858: PPUSH
// if streamModeActive then
19859: LD_EXP 66
19863: IFFALSE 19872
// DefineStreamItems ( true ) ;
19865: LD_INT 1
19867: PPUSH
19868: CALL 21526 0 1
// UpdateFactoryWaypoints ( ) ;
19872: CALL 34387 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19876: CALL 34644 0 0
// end ;
19880: LD_VAR 0 1
19884: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19885: LD_INT 0
19887: PPUSH
// if p2 = 100 then
19888: LD_VAR 0 2
19892: PUSH
19893: LD_INT 100
19895: EQUAL
19896: IFFALSE 20899
// begin if not StreamModeActive then
19898: LD_EXP 66
19902: NOT
19903: IFFALSE 19913
// StreamModeActive := true ;
19905: LD_ADDR_EXP 66
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 0 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 0
19920: EQUAL
19921: IFFALSE 19927
// InitStreamMode ;
19923: CALL 21062 0 0
// if p3 = 1 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19945
// sRocket := true ;
19937: LD_ADDR_EXP 71
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 2 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 2
19952: EQUAL
19953: IFFALSE 19963
// sSpeed := true ;
19955: LD_ADDR_EXP 70
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 3 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 3
19970: EQUAL
19971: IFFALSE 19981
// sEngine := true ;
19973: LD_ADDR_EXP 72
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 4 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 4
19988: EQUAL
19989: IFFALSE 19999
// sSpec := true ;
19991: LD_ADDR_EXP 69
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 5 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 5
20006: EQUAL
20007: IFFALSE 20017
// sLevel := true ;
20009: LD_ADDR_EXP 73
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 6 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 6
20024: EQUAL
20025: IFFALSE 20035
// sArmoury := true ;
20027: LD_ADDR_EXP 74
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 7 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 7
20042: EQUAL
20043: IFFALSE 20053
// sRadar := true ;
20045: LD_ADDR_EXP 75
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 8 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 8
20060: EQUAL
20061: IFFALSE 20071
// sBunker := true ;
20063: LD_ADDR_EXP 76
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 9 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 9
20078: EQUAL
20079: IFFALSE 20089
// sHack := true ;
20081: LD_ADDR_EXP 77
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 10 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 10
20096: EQUAL
20097: IFFALSE 20107
// sFire := true ;
20099: LD_ADDR_EXP 78
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 11 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 11
20114: EQUAL
20115: IFFALSE 20125
// sRefresh := true ;
20117: LD_ADDR_EXP 79
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 12 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 12
20132: EQUAL
20133: IFFALSE 20143
// sExp := true ;
20135: LD_ADDR_EXP 80
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 13 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 13
20150: EQUAL
20151: IFFALSE 20161
// sDepot := true ;
20153: LD_ADDR_EXP 81
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 14 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 14
20168: EQUAL
20169: IFFALSE 20179
// sFlag := true ;
20171: LD_ADDR_EXP 82
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 15 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 15
20186: EQUAL
20187: IFFALSE 20197
// sKamikadze := true ;
20189: LD_ADDR_EXP 90
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 16 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 16
20204: EQUAL
20205: IFFALSE 20215
// sTroll := true ;
20207: LD_ADDR_EXP 91
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 17 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 17
20222: EQUAL
20223: IFFALSE 20233
// sSlow := true ;
20225: LD_ADDR_EXP 92
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 18 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 18
20240: EQUAL
20241: IFFALSE 20251
// sLack := true ;
20243: LD_ADDR_EXP 93
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 19 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 19
20258: EQUAL
20259: IFFALSE 20269
// sTank := true ;
20261: LD_ADDR_EXP 95
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// if p3 = 20 then
20269: LD_VAR 0 3
20273: PUSH
20274: LD_INT 20
20276: EQUAL
20277: IFFALSE 20287
// sRemote := true ;
20279: LD_ADDR_EXP 96
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if p3 = 21 then
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 21
20294: EQUAL
20295: IFFALSE 20305
// sPowell := true ;
20297: LD_ADDR_EXP 97
20301: PUSH
20302: LD_INT 1
20304: ST_TO_ADDR
// if p3 = 22 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 22
20312: EQUAL
20313: IFFALSE 20323
// sTeleport := true ;
20315: LD_ADDR_EXP 100
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 23 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 23
20330: EQUAL
20331: IFFALSE 20341
// sOilTower := true ;
20333: LD_ADDR_EXP 102
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 24 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 24
20348: EQUAL
20349: IFFALSE 20359
// sShovel := true ;
20351: LD_ADDR_EXP 103
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 25 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 25
20366: EQUAL
20367: IFFALSE 20377
// sSheik := true ;
20369: LD_ADDR_EXP 104
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 26 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 26
20384: EQUAL
20385: IFFALSE 20395
// sEarthquake := true ;
20387: LD_ADDR_EXP 106
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 27 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 27
20402: EQUAL
20403: IFFALSE 20413
// sAI := true ;
20405: LD_ADDR_EXP 107
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 28 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 28
20420: EQUAL
20421: IFFALSE 20431
// sCargo := true ;
20423: LD_ADDR_EXP 110
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 29 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 29
20438: EQUAL
20439: IFFALSE 20449
// sDLaser := true ;
20441: LD_ADDR_EXP 111
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 30 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 30
20456: EQUAL
20457: IFFALSE 20467
// sExchange := true ;
20459: LD_ADDR_EXP 112
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 31 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 31
20474: EQUAL
20475: IFFALSE 20485
// sFac := true ;
20477: LD_ADDR_EXP 113
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 32 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 32
20492: EQUAL
20493: IFFALSE 20503
// sPower := true ;
20495: LD_ADDR_EXP 114
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 33 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 33
20510: EQUAL
20511: IFFALSE 20521
// sRandom := true ;
20513: LD_ADDR_EXP 115
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 34 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 34
20528: EQUAL
20529: IFFALSE 20539
// sShield := true ;
20531: LD_ADDR_EXP 116
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 35 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 35
20546: EQUAL
20547: IFFALSE 20557
// sTime := true ;
20549: LD_ADDR_EXP 117
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 36 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 36
20564: EQUAL
20565: IFFALSE 20575
// sTools := true ;
20567: LD_ADDR_EXP 118
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 101 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 101
20582: EQUAL
20583: IFFALSE 20593
// sSold := true ;
20585: LD_ADDR_EXP 83
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 102 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 102
20600: EQUAL
20601: IFFALSE 20611
// sDiff := true ;
20603: LD_ADDR_EXP 84
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 103 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 103
20618: EQUAL
20619: IFFALSE 20629
// sFog := true ;
20621: LD_ADDR_EXP 87
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 104 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 104
20636: EQUAL
20637: IFFALSE 20647
// sReset := true ;
20639: LD_ADDR_EXP 88
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 105 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 105
20654: EQUAL
20655: IFFALSE 20665
// sSun := true ;
20657: LD_ADDR_EXP 89
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 106 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 106
20672: EQUAL
20673: IFFALSE 20683
// sTiger := true ;
20675: LD_ADDR_EXP 85
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 107 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 107
20690: EQUAL
20691: IFFALSE 20701
// sBomb := true ;
20693: LD_ADDR_EXP 86
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 108 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 108
20708: EQUAL
20709: IFFALSE 20719
// sWound := true ;
20711: LD_ADDR_EXP 94
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// if p3 = 109 then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_INT 109
20726: EQUAL
20727: IFFALSE 20737
// sBetray := true ;
20729: LD_ADDR_EXP 98
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 110 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 110
20744: EQUAL
20745: IFFALSE 20755
// sContamin := true ;
20747: LD_ADDR_EXP 99
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if p3 = 111 then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 111
20762: EQUAL
20763: IFFALSE 20773
// sOil := true ;
20765: LD_ADDR_EXP 101
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// if p3 = 112 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 112
20780: EQUAL
20781: IFFALSE 20791
// sStu := true ;
20783: LD_ADDR_EXP 105
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// if p3 = 113 then
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 113
20798: EQUAL
20799: IFFALSE 20809
// sBazooka := true ;
20801: LD_ADDR_EXP 108
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// if p3 = 114 then
20809: LD_VAR 0 3
20813: PUSH
20814: LD_INT 114
20816: EQUAL
20817: IFFALSE 20827
// sMortar := true ;
20819: LD_ADDR_EXP 109
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// if p3 = 115 then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_INT 115
20834: EQUAL
20835: IFFALSE 20845
// sRanger := true ;
20837: LD_ADDR_EXP 119
20841: PUSH
20842: LD_INT 1
20844: ST_TO_ADDR
// if p3 = 116 then
20845: LD_VAR 0 3
20849: PUSH
20850: LD_INT 116
20852: EQUAL
20853: IFFALSE 20863
// sComputer := true ;
20855: LD_ADDR_EXP 120
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// if p3 = 117 then
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 117
20870: EQUAL
20871: IFFALSE 20881
// s30 := true ;
20873: LD_ADDR_EXP 121
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// if p3 = 118 then
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 118
20888: EQUAL
20889: IFFALSE 20899
// s60 := true ;
20891: LD_ADDR_EXP 122
20895: PUSH
20896: LD_INT 1
20898: ST_TO_ADDR
// end ; if p2 = 101 then
20899: LD_VAR 0 2
20903: PUSH
20904: LD_INT 101
20906: EQUAL
20907: IFFALSE 21035
// begin case p3 of 1 :
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 1
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20929
20922: POP
// hHackUnlimitedResources ; 2 :
20923: CALL 33133 0 0
20927: GO 21035
20929: LD_INT 2
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20944
20937: POP
// hHackSetLevel10 ; 3 :
20938: CALL 33266 0 0
20942: GO 21035
20944: LD_INT 3
20946: DOUBLE
20947: EQUAL
20948: IFTRUE 20952
20950: GO 20959
20952: POP
// hHackSetLevel10YourUnits ; 4 :
20953: CALL 33351 0 0
20957: GO 21035
20959: LD_INT 4
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20974
20967: POP
// hHackInvincible ; 5 :
20968: CALL 33799 0 0
20972: GO 21035
20974: LD_INT 5
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 20989
20982: POP
// hHackInvisible ; 6 :
20983: CALL 33910 0 0
20987: GO 21035
20989: LD_INT 6
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21004
20997: POP
// hHackChangeYourSide ; 7 :
20998: CALL 33967 0 0
21002: GO 21035
21004: LD_INT 7
21006: DOUBLE
21007: EQUAL
21008: IFTRUE 21012
21010: GO 21019
21012: POP
// hHackChangeUnitSide ; 8 :
21013: CALL 34009 0 0
21017: GO 21035
21019: LD_INT 8
21021: DOUBLE
21022: EQUAL
21023: IFTRUE 21027
21025: GO 21034
21027: POP
// hHackFog ; end ;
21028: CALL 34110 0 0
21032: GO 21035
21034: POP
// end ; end ;
21035: LD_VAR 0 7
21039: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21040: GO 21042
21042: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21043: LD_STRING initStreamRollete();
21045: PPUSH
21046: CALL_OW 559
// InitStreamMode ;
21050: CALL 21062 0 0
// DefineStreamItems ( false ) ;
21054: LD_INT 0
21056: PPUSH
21057: CALL 21526 0 1
// end ;
21061: END
// function InitStreamMode ; begin
21062: LD_INT 0
21064: PPUSH
// streamModeActive := false ;
21065: LD_ADDR_EXP 66
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
// normalCounter := 36 ;
21073: LD_ADDR_EXP 67
21077: PUSH
21078: LD_INT 36
21080: ST_TO_ADDR
// hardcoreCounter := 18 ;
21081: LD_ADDR_EXP 68
21085: PUSH
21086: LD_INT 18
21088: ST_TO_ADDR
// sRocket := false ;
21089: LD_ADDR_EXP 71
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// sSpeed := false ;
21097: LD_ADDR_EXP 70
21101: PUSH
21102: LD_INT 0
21104: ST_TO_ADDR
// sEngine := false ;
21105: LD_ADDR_EXP 72
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// sSpec := false ;
21113: LD_ADDR_EXP 69
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sLevel := false ;
21121: LD_ADDR_EXP 73
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sArmoury := false ;
21129: LD_ADDR_EXP 74
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sRadar := false ;
21137: LD_ADDR_EXP 75
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sBunker := false ;
21145: LD_ADDR_EXP 76
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sHack := false ;
21153: LD_ADDR_EXP 77
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sFire := false ;
21161: LD_ADDR_EXP 78
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sRefresh := false ;
21169: LD_ADDR_EXP 79
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sExp := false ;
21177: LD_ADDR_EXP 80
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sDepot := false ;
21185: LD_ADDR_EXP 81
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sFlag := false ;
21193: LD_ADDR_EXP 82
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sKamikadze := false ;
21201: LD_ADDR_EXP 90
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sTroll := false ;
21209: LD_ADDR_EXP 91
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sSlow := false ;
21217: LD_ADDR_EXP 92
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sLack := false ;
21225: LD_ADDR_EXP 93
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sTank := false ;
21233: LD_ADDR_EXP 95
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sRemote := false ;
21241: LD_ADDR_EXP 96
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sPowell := false ;
21249: LD_ADDR_EXP 97
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sTeleport := false ;
21257: LD_ADDR_EXP 100
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sOilTower := false ;
21265: LD_ADDR_EXP 102
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sShovel := false ;
21273: LD_ADDR_EXP 103
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sSheik := false ;
21281: LD_ADDR_EXP 104
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sEarthquake := false ;
21289: LD_ADDR_EXP 106
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sAI := false ;
21297: LD_ADDR_EXP 107
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sCargo := false ;
21305: LD_ADDR_EXP 110
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sDLaser := false ;
21313: LD_ADDR_EXP 111
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sExchange := false ;
21321: LD_ADDR_EXP 112
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sFac := false ;
21329: LD_ADDR_EXP 113
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sPower := false ;
21337: LD_ADDR_EXP 114
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sRandom := false ;
21345: LD_ADDR_EXP 115
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sShield := false ;
21353: LD_ADDR_EXP 116
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sTime := false ;
21361: LD_ADDR_EXP 117
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sTools := false ;
21369: LD_ADDR_EXP 118
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sSold := false ;
21377: LD_ADDR_EXP 83
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sDiff := false ;
21385: LD_ADDR_EXP 84
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sFog := false ;
21393: LD_ADDR_EXP 87
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// sReset := false ;
21401: LD_ADDR_EXP 88
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// sSun := false ;
21409: LD_ADDR_EXP 89
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// sTiger := false ;
21417: LD_ADDR_EXP 85
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// sBomb := false ;
21425: LD_ADDR_EXP 86
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
// sWound := false ;
21433: LD_ADDR_EXP 94
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
// sBetray := false ;
21441: LD_ADDR_EXP 98
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// sContamin := false ;
21449: LD_ADDR_EXP 99
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
// sOil := false ;
21457: LD_ADDR_EXP 101
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// sStu := false ;
21465: LD_ADDR_EXP 105
21469: PUSH
21470: LD_INT 0
21472: ST_TO_ADDR
// sBazooka := false ;
21473: LD_ADDR_EXP 108
21477: PUSH
21478: LD_INT 0
21480: ST_TO_ADDR
// sMortar := false ;
21481: LD_ADDR_EXP 109
21485: PUSH
21486: LD_INT 0
21488: ST_TO_ADDR
// sRanger := false ;
21489: LD_ADDR_EXP 119
21493: PUSH
21494: LD_INT 0
21496: ST_TO_ADDR
// sComputer := false ;
21497: LD_ADDR_EXP 120
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// s30 := false ;
21505: LD_ADDR_EXP 121
21509: PUSH
21510: LD_INT 0
21512: ST_TO_ADDR
// s60 := false ;
21513: LD_ADDR_EXP 122
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// end ;
21521: LD_VAR 0 1
21525: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
21531: PPUSH
21532: PPUSH
21533: PPUSH
21534: PPUSH
// result := [ ] ;
21535: LD_ADDR_VAR 0 2
21539: PUSH
21540: EMPTY
21541: ST_TO_ADDR
// if campaign_id = 1 then
21542: LD_OWVAR 69
21546: PUSH
21547: LD_INT 1
21549: EQUAL
21550: IFFALSE 24716
// begin case mission_number of 1 :
21552: LD_OWVAR 70
21556: PUSH
21557: LD_INT 1
21559: DOUBLE
21560: EQUAL
21561: IFTRUE 21565
21563: GO 21641
21565: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21566: LD_ADDR_VAR 0 2
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: LD_INT 4
21576: PUSH
21577: LD_INT 11
21579: PUSH
21580: LD_INT 12
21582: PUSH
21583: LD_INT 15
21585: PUSH
21586: LD_INT 16
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_INT 23
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 101
21611: PUSH
21612: LD_INT 102
21614: PUSH
21615: LD_INT 106
21617: PUSH
21618: LD_INT 116
21620: PUSH
21621: LD_INT 117
21623: PUSH
21624: LD_INT 118
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: ST_TO_ADDR
21639: GO 24714
21641: LD_INT 2
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21733
21649: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 4
21660: PUSH
21661: LD_INT 11
21663: PUSH
21664: LD_INT 12
21666: PUSH
21667: LD_INT 15
21669: PUSH
21670: LD_INT 16
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_INT 23
21678: PUSH
21679: LD_INT 26
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 101
21695: PUSH
21696: LD_INT 102
21698: PUSH
21699: LD_INT 105
21701: PUSH
21702: LD_INT 106
21704: PUSH
21705: LD_INT 108
21707: PUSH
21708: LD_INT 116
21710: PUSH
21711: LD_INT 117
21713: PUSH
21714: LD_INT 118
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: ST_TO_ADDR
21731: GO 24714
21733: LD_INT 3
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21829
21741: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 4
21752: PUSH
21753: LD_INT 5
21755: PUSH
21756: LD_INT 11
21758: PUSH
21759: LD_INT 12
21761: PUSH
21762: LD_INT 15
21764: PUSH
21765: LD_INT 16
21767: PUSH
21768: LD_INT 22
21770: PUSH
21771: LD_INT 26
21773: PUSH
21774: LD_INT 36
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 101
21791: PUSH
21792: LD_INT 102
21794: PUSH
21795: LD_INT 105
21797: PUSH
21798: LD_INT 106
21800: PUSH
21801: LD_INT 108
21803: PUSH
21804: LD_INT 116
21806: PUSH
21807: LD_INT 117
21809: PUSH
21810: LD_INT 118
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: ST_TO_ADDR
21827: GO 24714
21829: LD_INT 4
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21933
21837: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21838: LD_ADDR_VAR 0 2
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 4
21848: PUSH
21849: LD_INT 5
21851: PUSH
21852: LD_INT 8
21854: PUSH
21855: LD_INT 11
21857: PUSH
21858: LD_INT 12
21860: PUSH
21861: LD_INT 15
21863: PUSH
21864: LD_INT 16
21866: PUSH
21867: LD_INT 22
21869: PUSH
21870: LD_INT 23
21872: PUSH
21873: LD_INT 26
21875: PUSH
21876: LD_INT 36
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 101
21895: PUSH
21896: LD_INT 102
21898: PUSH
21899: LD_INT 105
21901: PUSH
21902: LD_INT 106
21904: PUSH
21905: LD_INT 108
21907: PUSH
21908: LD_INT 116
21910: PUSH
21911: LD_INT 117
21913: PUSH
21914: LD_INT 118
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: ST_TO_ADDR
21931: GO 24714
21933: LD_INT 5
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22053
21941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 5
21955: PUSH
21956: LD_INT 6
21958: PUSH
21959: LD_INT 8
21961: PUSH
21962: LD_INT 11
21964: PUSH
21965: LD_INT 12
21967: PUSH
21968: LD_INT 15
21970: PUSH
21971: LD_INT 16
21973: PUSH
21974: LD_INT 22
21976: PUSH
21977: LD_INT 23
21979: PUSH
21980: LD_INT 25
21982: PUSH
21983: LD_INT 26
21985: PUSH
21986: LD_INT 36
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 101
22007: PUSH
22008: LD_INT 102
22010: PUSH
22011: LD_INT 105
22013: PUSH
22014: LD_INT 106
22016: PUSH
22017: LD_INT 108
22019: PUSH
22020: LD_INT 109
22022: PUSH
22023: LD_INT 112
22025: PUSH
22026: LD_INT 116
22028: PUSH
22029: LD_INT 117
22031: PUSH
22032: LD_INT 118
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: ST_TO_ADDR
22051: GO 24714
22053: LD_INT 6
22055: DOUBLE
22056: EQUAL
22057: IFTRUE 22061
22059: GO 22193
22061: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22062: LD_ADDR_VAR 0 2
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 4
22072: PUSH
22073: LD_INT 5
22075: PUSH
22076: LD_INT 6
22078: PUSH
22079: LD_INT 8
22081: PUSH
22082: LD_INT 11
22084: PUSH
22085: LD_INT 12
22087: PUSH
22088: LD_INT 15
22090: PUSH
22091: LD_INT 16
22093: PUSH
22094: LD_INT 20
22096: PUSH
22097: LD_INT 21
22099: PUSH
22100: LD_INT 22
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 25
22108: PUSH
22109: LD_INT 26
22111: PUSH
22112: LD_INT 30
22114: PUSH
22115: LD_INT 31
22117: PUSH
22118: LD_INT 32
22120: PUSH
22121: LD_INT 36
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 101
22147: PUSH
22148: LD_INT 102
22150: PUSH
22151: LD_INT 105
22153: PUSH
22154: LD_INT 106
22156: PUSH
22157: LD_INT 108
22159: PUSH
22160: LD_INT 109
22162: PUSH
22163: LD_INT 112
22165: PUSH
22166: LD_INT 116
22168: PUSH
22169: LD_INT 117
22171: PUSH
22172: LD_INT 118
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: ST_TO_ADDR
22191: GO 24714
22193: LD_INT 7
22195: DOUBLE
22196: EQUAL
22197: IFTRUE 22201
22199: GO 22313
22201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22202: LD_ADDR_VAR 0 2
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 4
22212: PUSH
22213: LD_INT 5
22215: PUSH
22216: LD_INT 7
22218: PUSH
22219: LD_INT 11
22221: PUSH
22222: LD_INT 12
22224: PUSH
22225: LD_INT 15
22227: PUSH
22228: LD_INT 16
22230: PUSH
22231: LD_INT 20
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 22
22239: PUSH
22240: LD_INT 23
22242: PUSH
22243: LD_INT 25
22245: PUSH
22246: LD_INT 26
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 103
22273: PUSH
22274: LD_INT 105
22276: PUSH
22277: LD_INT 106
22279: PUSH
22280: LD_INT 108
22282: PUSH
22283: LD_INT 112
22285: PUSH
22286: LD_INT 116
22288: PUSH
22289: LD_INT 117
22291: PUSH
22292: LD_INT 118
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: ST_TO_ADDR
22311: GO 24714
22313: LD_INT 8
22315: DOUBLE
22316: EQUAL
22317: IFTRUE 22321
22319: GO 22461
22321: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22322: LD_ADDR_VAR 0 2
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: LD_INT 4
22332: PUSH
22333: LD_INT 5
22335: PUSH
22336: LD_INT 6
22338: PUSH
22339: LD_INT 7
22341: PUSH
22342: LD_INT 8
22344: PUSH
22345: LD_INT 11
22347: PUSH
22348: LD_INT 12
22350: PUSH
22351: LD_INT 15
22353: PUSH
22354: LD_INT 16
22356: PUSH
22357: LD_INT 20
22359: PUSH
22360: LD_INT 21
22362: PUSH
22363: LD_INT 22
22365: PUSH
22366: LD_INT 23
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 26
22374: PUSH
22375: LD_INT 30
22377: PUSH
22378: LD_INT 31
22380: PUSH
22381: LD_INT 32
22383: PUSH
22384: LD_INT 36
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 101
22411: PUSH
22412: LD_INT 102
22414: PUSH
22415: LD_INT 103
22417: PUSH
22418: LD_INT 105
22420: PUSH
22421: LD_INT 106
22423: PUSH
22424: LD_INT 108
22426: PUSH
22427: LD_INT 109
22429: PUSH
22430: LD_INT 112
22432: PUSH
22433: LD_INT 116
22435: PUSH
22436: LD_INT 117
22438: PUSH
22439: LD_INT 118
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: ST_TO_ADDR
22459: GO 24714
22461: LD_INT 9
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22617
22469: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 4
22480: PUSH
22481: LD_INT 5
22483: PUSH
22484: LD_INT 6
22486: PUSH
22487: LD_INT 7
22489: PUSH
22490: LD_INT 8
22492: PUSH
22493: LD_INT 11
22495: PUSH
22496: LD_INT 12
22498: PUSH
22499: LD_INT 15
22501: PUSH
22502: LD_INT 16
22504: PUSH
22505: LD_INT 20
22507: PUSH
22508: LD_INT 21
22510: PUSH
22511: LD_INT 22
22513: PUSH
22514: LD_INT 23
22516: PUSH
22517: LD_INT 25
22519: PUSH
22520: LD_INT 26
22522: PUSH
22523: LD_INT 28
22525: PUSH
22526: LD_INT 30
22528: PUSH
22529: LD_INT 31
22531: PUSH
22532: LD_INT 32
22534: PUSH
22535: LD_INT 36
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 101
22563: PUSH
22564: LD_INT 102
22566: PUSH
22567: LD_INT 103
22569: PUSH
22570: LD_INT 105
22572: PUSH
22573: LD_INT 106
22575: PUSH
22576: LD_INT 108
22578: PUSH
22579: LD_INT 109
22581: PUSH
22582: LD_INT 112
22584: PUSH
22585: LD_INT 114
22587: PUSH
22588: LD_INT 116
22590: PUSH
22591: LD_INT 117
22593: PUSH
22594: LD_INT 118
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: ST_TO_ADDR
22615: GO 24714
22617: LD_INT 10
22619: DOUBLE
22620: EQUAL
22621: IFTRUE 22625
22623: GO 22821
22625: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 4
22636: PUSH
22637: LD_INT 5
22639: PUSH
22640: LD_INT 6
22642: PUSH
22643: LD_INT 7
22645: PUSH
22646: LD_INT 8
22648: PUSH
22649: LD_INT 9
22651: PUSH
22652: LD_INT 10
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 13
22663: PUSH
22664: LD_INT 14
22666: PUSH
22667: LD_INT 15
22669: PUSH
22670: LD_INT 16
22672: PUSH
22673: LD_INT 17
22675: PUSH
22676: LD_INT 18
22678: PUSH
22679: LD_INT 19
22681: PUSH
22682: LD_INT 20
22684: PUSH
22685: LD_INT 21
22687: PUSH
22688: LD_INT 22
22690: PUSH
22691: LD_INT 23
22693: PUSH
22694: LD_INT 24
22696: PUSH
22697: LD_INT 25
22699: PUSH
22700: LD_INT 26
22702: PUSH
22703: LD_INT 28
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 31
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: LD_INT 36
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 101
22751: PUSH
22752: LD_INT 102
22754: PUSH
22755: LD_INT 103
22757: PUSH
22758: LD_INT 104
22760: PUSH
22761: LD_INT 105
22763: PUSH
22764: LD_INT 106
22766: PUSH
22767: LD_INT 107
22769: PUSH
22770: LD_INT 108
22772: PUSH
22773: LD_INT 109
22775: PUSH
22776: LD_INT 110
22778: PUSH
22779: LD_INT 111
22781: PUSH
22782: LD_INT 112
22784: PUSH
22785: LD_INT 114
22787: PUSH
22788: LD_INT 116
22790: PUSH
22791: LD_INT 117
22793: PUSH
22794: LD_INT 118
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: ST_TO_ADDR
22819: GO 24714
22821: LD_INT 11
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 23033
22829: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: LD_INT 3
22840: PUSH
22841: LD_INT 4
22843: PUSH
22844: LD_INT 5
22846: PUSH
22847: LD_INT 6
22849: PUSH
22850: LD_INT 7
22852: PUSH
22853: LD_INT 8
22855: PUSH
22856: LD_INT 9
22858: PUSH
22859: LD_INT 10
22861: PUSH
22862: LD_INT 11
22864: PUSH
22865: LD_INT 12
22867: PUSH
22868: LD_INT 13
22870: PUSH
22871: LD_INT 14
22873: PUSH
22874: LD_INT 15
22876: PUSH
22877: LD_INT 16
22879: PUSH
22880: LD_INT 17
22882: PUSH
22883: LD_INT 18
22885: PUSH
22886: LD_INT 19
22888: PUSH
22889: LD_INT 20
22891: PUSH
22892: LD_INT 21
22894: PUSH
22895: LD_INT 22
22897: PUSH
22898: LD_INT 23
22900: PUSH
22901: LD_INT 24
22903: PUSH
22904: LD_INT 25
22906: PUSH
22907: LD_INT 26
22909: PUSH
22910: LD_INT 28
22912: PUSH
22913: LD_INT 30
22915: PUSH
22916: LD_INT 31
22918: PUSH
22919: LD_INT 32
22921: PUSH
22922: LD_INT 34
22924: PUSH
22925: LD_INT 36
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 101
22963: PUSH
22964: LD_INT 102
22966: PUSH
22967: LD_INT 103
22969: PUSH
22970: LD_INT 104
22972: PUSH
22973: LD_INT 105
22975: PUSH
22976: LD_INT 106
22978: PUSH
22979: LD_INT 107
22981: PUSH
22982: LD_INT 108
22984: PUSH
22985: LD_INT 109
22987: PUSH
22988: LD_INT 110
22990: PUSH
22991: LD_INT 111
22993: PUSH
22994: LD_INT 112
22996: PUSH
22997: LD_INT 114
22999: PUSH
23000: LD_INT 116
23002: PUSH
23003: LD_INT 117
23005: PUSH
23006: LD_INT 118
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: ST_TO_ADDR
23031: GO 24714
23033: LD_INT 12
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23261
23041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23042: LD_ADDR_VAR 0 2
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: LD_INT 4
23058: PUSH
23059: LD_INT 5
23061: PUSH
23062: LD_INT 6
23064: PUSH
23065: LD_INT 7
23067: PUSH
23068: LD_INT 8
23070: PUSH
23071: LD_INT 9
23073: PUSH
23074: LD_INT 10
23076: PUSH
23077: LD_INT 11
23079: PUSH
23080: LD_INT 12
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: LD_INT 14
23088: PUSH
23089: LD_INT 15
23091: PUSH
23092: LD_INT 16
23094: PUSH
23095: LD_INT 17
23097: PUSH
23098: LD_INT 18
23100: PUSH
23101: LD_INT 19
23103: PUSH
23104: LD_INT 20
23106: PUSH
23107: LD_INT 21
23109: PUSH
23110: LD_INT 22
23112: PUSH
23113: LD_INT 23
23115: PUSH
23116: LD_INT 24
23118: PUSH
23119: LD_INT 25
23121: PUSH
23122: LD_INT 26
23124: PUSH
23125: LD_INT 27
23127: PUSH
23128: LD_INT 28
23130: PUSH
23131: LD_INT 30
23133: PUSH
23134: LD_INT 31
23136: PUSH
23137: LD_INT 32
23139: PUSH
23140: LD_INT 33
23142: PUSH
23143: LD_INT 34
23145: PUSH
23146: LD_INT 36
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 101
23187: PUSH
23188: LD_INT 102
23190: PUSH
23191: LD_INT 103
23193: PUSH
23194: LD_INT 104
23196: PUSH
23197: LD_INT 105
23199: PUSH
23200: LD_INT 106
23202: PUSH
23203: LD_INT 107
23205: PUSH
23206: LD_INT 108
23208: PUSH
23209: LD_INT 109
23211: PUSH
23212: LD_INT 110
23214: PUSH
23215: LD_INT 111
23217: PUSH
23218: LD_INT 112
23220: PUSH
23221: LD_INT 113
23223: PUSH
23224: LD_INT 114
23226: PUSH
23227: LD_INT 116
23229: PUSH
23230: LD_INT 117
23232: PUSH
23233: LD_INT 118
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
23259: GO 24714
23261: LD_INT 13
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23477
23269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23270: LD_ADDR_VAR 0 2
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: LD_INT 4
23286: PUSH
23287: LD_INT 5
23289: PUSH
23290: LD_INT 8
23292: PUSH
23293: LD_INT 9
23295: PUSH
23296: LD_INT 10
23298: PUSH
23299: LD_INT 11
23301: PUSH
23302: LD_INT 12
23304: PUSH
23305: LD_INT 14
23307: PUSH
23308: LD_INT 15
23310: PUSH
23311: LD_INT 16
23313: PUSH
23314: LD_INT 17
23316: PUSH
23317: LD_INT 18
23319: PUSH
23320: LD_INT 19
23322: PUSH
23323: LD_INT 20
23325: PUSH
23326: LD_INT 21
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_INT 23
23334: PUSH
23335: LD_INT 24
23337: PUSH
23338: LD_INT 25
23340: PUSH
23341: LD_INT 26
23343: PUSH
23344: LD_INT 27
23346: PUSH
23347: LD_INT 28
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 31
23355: PUSH
23356: LD_INT 32
23358: PUSH
23359: LD_INT 33
23361: PUSH
23362: LD_INT 34
23364: PUSH
23365: LD_INT 36
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 101
23403: PUSH
23404: LD_INT 102
23406: PUSH
23407: LD_INT 103
23409: PUSH
23410: LD_INT 104
23412: PUSH
23413: LD_INT 105
23415: PUSH
23416: LD_INT 106
23418: PUSH
23419: LD_INT 107
23421: PUSH
23422: LD_INT 108
23424: PUSH
23425: LD_INT 109
23427: PUSH
23428: LD_INT 110
23430: PUSH
23431: LD_INT 111
23433: PUSH
23434: LD_INT 112
23436: PUSH
23437: LD_INT 113
23439: PUSH
23440: LD_INT 114
23442: PUSH
23443: LD_INT 116
23445: PUSH
23446: LD_INT 117
23448: PUSH
23449: LD_INT 118
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: ST_TO_ADDR
23475: GO 24714
23477: LD_INT 14
23479: DOUBLE
23480: EQUAL
23481: IFTRUE 23485
23483: GO 23709
23485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: LD_INT 4
23502: PUSH
23503: LD_INT 5
23505: PUSH
23506: LD_INT 6
23508: PUSH
23509: LD_INT 7
23511: PUSH
23512: LD_INT 8
23514: PUSH
23515: LD_INT 9
23517: PUSH
23518: LD_INT 10
23520: PUSH
23521: LD_INT 11
23523: PUSH
23524: LD_INT 12
23526: PUSH
23527: LD_INT 13
23529: PUSH
23530: LD_INT 14
23532: PUSH
23533: LD_INT 15
23535: PUSH
23536: LD_INT 16
23538: PUSH
23539: LD_INT 17
23541: PUSH
23542: LD_INT 18
23544: PUSH
23545: LD_INT 19
23547: PUSH
23548: LD_INT 20
23550: PUSH
23551: LD_INT 21
23553: PUSH
23554: LD_INT 22
23556: PUSH
23557: LD_INT 23
23559: PUSH
23560: LD_INT 24
23562: PUSH
23563: LD_INT 25
23565: PUSH
23566: LD_INT 26
23568: PUSH
23569: LD_INT 27
23571: PUSH
23572: LD_INT 28
23574: PUSH
23575: LD_INT 29
23577: PUSH
23578: LD_INT 30
23580: PUSH
23581: LD_INT 31
23583: PUSH
23584: LD_INT 32
23586: PUSH
23587: LD_INT 33
23589: PUSH
23590: LD_INT 34
23592: PUSH
23593: LD_INT 36
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 101
23635: PUSH
23636: LD_INT 102
23638: PUSH
23639: LD_INT 103
23641: PUSH
23642: LD_INT 104
23644: PUSH
23645: LD_INT 105
23647: PUSH
23648: LD_INT 106
23650: PUSH
23651: LD_INT 107
23653: PUSH
23654: LD_INT 108
23656: PUSH
23657: LD_INT 109
23659: PUSH
23660: LD_INT 110
23662: PUSH
23663: LD_INT 111
23665: PUSH
23666: LD_INT 112
23668: PUSH
23669: LD_INT 113
23671: PUSH
23672: LD_INT 114
23674: PUSH
23675: LD_INT 116
23677: PUSH
23678: LD_INT 117
23680: PUSH
23681: LD_INT 118
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: ST_TO_ADDR
23707: GO 24714
23709: LD_INT 15
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23941
23717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23718: LD_ADDR_VAR 0 2
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: LD_INT 4
23734: PUSH
23735: LD_INT 5
23737: PUSH
23738: LD_INT 6
23740: PUSH
23741: LD_INT 7
23743: PUSH
23744: LD_INT 8
23746: PUSH
23747: LD_INT 9
23749: PUSH
23750: LD_INT 10
23752: PUSH
23753: LD_INT 11
23755: PUSH
23756: LD_INT 12
23758: PUSH
23759: LD_INT 13
23761: PUSH
23762: LD_INT 14
23764: PUSH
23765: LD_INT 15
23767: PUSH
23768: LD_INT 16
23770: PUSH
23771: LD_INT 17
23773: PUSH
23774: LD_INT 18
23776: PUSH
23777: LD_INT 19
23779: PUSH
23780: LD_INT 20
23782: PUSH
23783: LD_INT 21
23785: PUSH
23786: LD_INT 22
23788: PUSH
23789: LD_INT 23
23791: PUSH
23792: LD_INT 24
23794: PUSH
23795: LD_INT 25
23797: PUSH
23798: LD_INT 26
23800: PUSH
23801: LD_INT 27
23803: PUSH
23804: LD_INT 28
23806: PUSH
23807: LD_INT 29
23809: PUSH
23810: LD_INT 30
23812: PUSH
23813: LD_INT 31
23815: PUSH
23816: LD_INT 32
23818: PUSH
23819: LD_INT 33
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: LD_INT 36
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 101
23867: PUSH
23868: LD_INT 102
23870: PUSH
23871: LD_INT 103
23873: PUSH
23874: LD_INT 104
23876: PUSH
23877: LD_INT 105
23879: PUSH
23880: LD_INT 106
23882: PUSH
23883: LD_INT 107
23885: PUSH
23886: LD_INT 108
23888: PUSH
23889: LD_INT 109
23891: PUSH
23892: LD_INT 110
23894: PUSH
23895: LD_INT 111
23897: PUSH
23898: LD_INT 112
23900: PUSH
23901: LD_INT 113
23903: PUSH
23904: LD_INT 114
23906: PUSH
23907: LD_INT 116
23909: PUSH
23910: LD_INT 117
23912: PUSH
23913: LD_INT 118
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: ST_TO_ADDR
23939: GO 24714
23941: LD_INT 16
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 24085
23949: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23950: LD_ADDR_VAR 0 2
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 4
23960: PUSH
23961: LD_INT 5
23963: PUSH
23964: LD_INT 7
23966: PUSH
23967: LD_INT 11
23969: PUSH
23970: LD_INT 12
23972: PUSH
23973: LD_INT 15
23975: PUSH
23976: LD_INT 16
23978: PUSH
23979: LD_INT 20
23981: PUSH
23982: LD_INT 21
23984: PUSH
23985: LD_INT 22
23987: PUSH
23988: LD_INT 23
23990: PUSH
23991: LD_INT 25
23993: PUSH
23994: LD_INT 26
23996: PUSH
23997: LD_INT 30
23999: PUSH
24000: LD_INT 31
24002: PUSH
24003: LD_INT 32
24005: PUSH
24006: LD_INT 33
24008: PUSH
24009: LD_INT 34
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 101
24035: PUSH
24036: LD_INT 102
24038: PUSH
24039: LD_INT 103
24041: PUSH
24042: LD_INT 106
24044: PUSH
24045: LD_INT 108
24047: PUSH
24048: LD_INT 112
24050: PUSH
24051: LD_INT 113
24053: PUSH
24054: LD_INT 114
24056: PUSH
24057: LD_INT 116
24059: PUSH
24060: LD_INT 117
24062: PUSH
24063: LD_INT 118
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: ST_TO_ADDR
24083: GO 24714
24085: LD_INT 17
24087: DOUBLE
24088: EQUAL
24089: IFTRUE 24093
24091: GO 24317
24093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24094: LD_ADDR_VAR 0 2
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: LD_INT 4
24110: PUSH
24111: LD_INT 5
24113: PUSH
24114: LD_INT 6
24116: PUSH
24117: LD_INT 7
24119: PUSH
24120: LD_INT 8
24122: PUSH
24123: LD_INT 9
24125: PUSH
24126: LD_INT 10
24128: PUSH
24129: LD_INT 11
24131: PUSH
24132: LD_INT 12
24134: PUSH
24135: LD_INT 13
24137: PUSH
24138: LD_INT 14
24140: PUSH
24141: LD_INT 15
24143: PUSH
24144: LD_INT 16
24146: PUSH
24147: LD_INT 17
24149: PUSH
24150: LD_INT 18
24152: PUSH
24153: LD_INT 19
24155: PUSH
24156: LD_INT 20
24158: PUSH
24159: LD_INT 21
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_INT 23
24167: PUSH
24168: LD_INT 24
24170: PUSH
24171: LD_INT 25
24173: PUSH
24174: LD_INT 26
24176: PUSH
24177: LD_INT 27
24179: PUSH
24180: LD_INT 28
24182: PUSH
24183: LD_INT 29
24185: PUSH
24186: LD_INT 30
24188: PUSH
24189: LD_INT 31
24191: PUSH
24192: LD_INT 32
24194: PUSH
24195: LD_INT 33
24197: PUSH
24198: LD_INT 34
24200: PUSH
24201: LD_INT 36
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 101
24243: PUSH
24244: LD_INT 102
24246: PUSH
24247: LD_INT 103
24249: PUSH
24250: LD_INT 104
24252: PUSH
24253: LD_INT 105
24255: PUSH
24256: LD_INT 106
24258: PUSH
24259: LD_INT 107
24261: PUSH
24262: LD_INT 108
24264: PUSH
24265: LD_INT 109
24267: PUSH
24268: LD_INT 110
24270: PUSH
24271: LD_INT 111
24273: PUSH
24274: LD_INT 112
24276: PUSH
24277: LD_INT 113
24279: PUSH
24280: LD_INT 114
24282: PUSH
24283: LD_INT 116
24285: PUSH
24286: LD_INT 117
24288: PUSH
24289: LD_INT 118
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: ST_TO_ADDR
24315: GO 24714
24317: LD_INT 18
24319: DOUBLE
24320: EQUAL
24321: IFTRUE 24325
24323: GO 24473
24325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24326: LD_ADDR_VAR 0 2
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 4
24336: PUSH
24337: LD_INT 5
24339: PUSH
24340: LD_INT 7
24342: PUSH
24343: LD_INT 11
24345: PUSH
24346: LD_INT 12
24348: PUSH
24349: LD_INT 15
24351: PUSH
24352: LD_INT 16
24354: PUSH
24355: LD_INT 20
24357: PUSH
24358: LD_INT 21
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_INT 23
24366: PUSH
24367: LD_INT 25
24369: PUSH
24370: LD_INT 26
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: LD_INT 31
24378: PUSH
24379: LD_INT 32
24381: PUSH
24382: LD_INT 33
24384: PUSH
24385: LD_INT 34
24387: PUSH
24388: LD_INT 35
24390: PUSH
24391: LD_INT 36
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 101
24419: PUSH
24420: LD_INT 102
24422: PUSH
24423: LD_INT 103
24425: PUSH
24426: LD_INT 106
24428: PUSH
24429: LD_INT 108
24431: PUSH
24432: LD_INT 112
24434: PUSH
24435: LD_INT 113
24437: PUSH
24438: LD_INT 114
24440: PUSH
24441: LD_INT 115
24443: PUSH
24444: LD_INT 116
24446: PUSH
24447: LD_INT 117
24449: PUSH
24450: LD_INT 118
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: ST_TO_ADDR
24471: GO 24714
24473: LD_INT 19
24475: DOUBLE
24476: EQUAL
24477: IFTRUE 24481
24479: GO 24713
24481: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: LD_INT 4
24498: PUSH
24499: LD_INT 5
24501: PUSH
24502: LD_INT 6
24504: PUSH
24505: LD_INT 7
24507: PUSH
24508: LD_INT 8
24510: PUSH
24511: LD_INT 9
24513: PUSH
24514: LD_INT 10
24516: PUSH
24517: LD_INT 11
24519: PUSH
24520: LD_INT 12
24522: PUSH
24523: LD_INT 13
24525: PUSH
24526: LD_INT 14
24528: PUSH
24529: LD_INT 15
24531: PUSH
24532: LD_INT 16
24534: PUSH
24535: LD_INT 17
24537: PUSH
24538: LD_INT 18
24540: PUSH
24541: LD_INT 19
24543: PUSH
24544: LD_INT 20
24546: PUSH
24547: LD_INT 21
24549: PUSH
24550: LD_INT 22
24552: PUSH
24553: LD_INT 23
24555: PUSH
24556: LD_INT 24
24558: PUSH
24559: LD_INT 25
24561: PUSH
24562: LD_INT 26
24564: PUSH
24565: LD_INT 27
24567: PUSH
24568: LD_INT 28
24570: PUSH
24571: LD_INT 29
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 31
24579: PUSH
24580: LD_INT 32
24582: PUSH
24583: LD_INT 33
24585: PUSH
24586: LD_INT 34
24588: PUSH
24589: LD_INT 35
24591: PUSH
24592: LD_INT 36
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 101
24635: PUSH
24636: LD_INT 102
24638: PUSH
24639: LD_INT 103
24641: PUSH
24642: LD_INT 104
24644: PUSH
24645: LD_INT 105
24647: PUSH
24648: LD_INT 106
24650: PUSH
24651: LD_INT 107
24653: PUSH
24654: LD_INT 108
24656: PUSH
24657: LD_INT 109
24659: PUSH
24660: LD_INT 110
24662: PUSH
24663: LD_INT 111
24665: PUSH
24666: LD_INT 112
24668: PUSH
24669: LD_INT 113
24671: PUSH
24672: LD_INT 114
24674: PUSH
24675: LD_INT 115
24677: PUSH
24678: LD_INT 116
24680: PUSH
24681: LD_INT 117
24683: PUSH
24684: LD_INT 118
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: ST_TO_ADDR
24711: GO 24714
24713: POP
// end else
24714: GO 24945
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: LD_INT 4
24732: PUSH
24733: LD_INT 5
24735: PUSH
24736: LD_INT 6
24738: PUSH
24739: LD_INT 7
24741: PUSH
24742: LD_INT 8
24744: PUSH
24745: LD_INT 9
24747: PUSH
24748: LD_INT 10
24750: PUSH
24751: LD_INT 11
24753: PUSH
24754: LD_INT 12
24756: PUSH
24757: LD_INT 13
24759: PUSH
24760: LD_INT 14
24762: PUSH
24763: LD_INT 15
24765: PUSH
24766: LD_INT 16
24768: PUSH
24769: LD_INT 17
24771: PUSH
24772: LD_INT 18
24774: PUSH
24775: LD_INT 19
24777: PUSH
24778: LD_INT 20
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_INT 23
24789: PUSH
24790: LD_INT 24
24792: PUSH
24793: LD_INT 25
24795: PUSH
24796: LD_INT 26
24798: PUSH
24799: LD_INT 27
24801: PUSH
24802: LD_INT 28
24804: PUSH
24805: LD_INT 29
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 31
24813: PUSH
24814: LD_INT 32
24816: PUSH
24817: LD_INT 33
24819: PUSH
24820: LD_INT 34
24822: PUSH
24823: LD_INT 35
24825: PUSH
24826: LD_INT 36
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 101
24869: PUSH
24870: LD_INT 102
24872: PUSH
24873: LD_INT 103
24875: PUSH
24876: LD_INT 104
24878: PUSH
24879: LD_INT 105
24881: PUSH
24882: LD_INT 106
24884: PUSH
24885: LD_INT 107
24887: PUSH
24888: LD_INT 108
24890: PUSH
24891: LD_INT 109
24893: PUSH
24894: LD_INT 110
24896: PUSH
24897: LD_INT 111
24899: PUSH
24900: LD_INT 112
24902: PUSH
24903: LD_INT 113
24905: PUSH
24906: LD_INT 114
24908: PUSH
24909: LD_INT 115
24911: PUSH
24912: LD_INT 116
24914: PUSH
24915: LD_INT 117
24917: PUSH
24918: LD_INT 118
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: ST_TO_ADDR
// if result then
24945: LD_VAR 0 2
24949: IFFALSE 25735
// begin normal :=  ;
24951: LD_ADDR_VAR 0 5
24955: PUSH
24956: LD_STRING 
24958: ST_TO_ADDR
// hardcore :=  ;
24959: LD_ADDR_VAR 0 6
24963: PUSH
24964: LD_STRING 
24966: ST_TO_ADDR
// active :=  ;
24967: LD_ADDR_VAR 0 7
24971: PUSH
24972: LD_STRING 
24974: ST_TO_ADDR
// for i = 1 to normalCounter do
24975: LD_ADDR_VAR 0 8
24979: PUSH
24980: DOUBLE
24981: LD_INT 1
24983: DEC
24984: ST_TO_ADDR
24985: LD_EXP 67
24989: PUSH
24990: FOR_TO
24991: IFFALSE 25092
// begin tmp := 0 ;
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_STRING 0
25000: ST_TO_ADDR
// if result [ 1 ] then
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: ARRAY
25009: IFFALSE 25074
// if result [ 1 ] [ 1 ] = i then
25011: LD_VAR 0 2
25015: PUSH
25016: LD_INT 1
25018: ARRAY
25019: PUSH
25020: LD_INT 1
25022: ARRAY
25023: PUSH
25024: LD_VAR 0 8
25028: EQUAL
25029: IFFALSE 25074
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25031: LD_ADDR_VAR 0 2
25035: PUSH
25036: LD_VAR 0 2
25040: PPUSH
25041: LD_INT 1
25043: PPUSH
25044: LD_VAR 0 2
25048: PUSH
25049: LD_INT 1
25051: ARRAY
25052: PPUSH
25053: LD_INT 1
25055: PPUSH
25056: CALL_OW 3
25060: PPUSH
25061: CALL_OW 1
25065: ST_TO_ADDR
// tmp := 1 ;
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_STRING 1
25073: ST_TO_ADDR
// end ; normal := normal & tmp ;
25074: LD_ADDR_VAR 0 5
25078: PUSH
25079: LD_VAR 0 5
25083: PUSH
25084: LD_VAR 0 3
25088: STR
25089: ST_TO_ADDR
// end ;
25090: GO 24990
25092: POP
25093: POP
// for i = 1 to hardcoreCounter do
25094: LD_ADDR_VAR 0 8
25098: PUSH
25099: DOUBLE
25100: LD_INT 1
25102: DEC
25103: ST_TO_ADDR
25104: LD_EXP 68
25108: PUSH
25109: FOR_TO
25110: IFFALSE 25215
// begin tmp := 0 ;
25112: LD_ADDR_VAR 0 3
25116: PUSH
25117: LD_STRING 0
25119: ST_TO_ADDR
// if result [ 2 ] then
25120: LD_VAR 0 2
25124: PUSH
25125: LD_INT 2
25127: ARRAY
25128: IFFALSE 25197
// if result [ 2 ] [ 1 ] = 100 + i then
25130: LD_VAR 0 2
25134: PUSH
25135: LD_INT 2
25137: ARRAY
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: PUSH
25143: LD_INT 100
25145: PUSH
25146: LD_VAR 0 8
25150: PLUS
25151: EQUAL
25152: IFFALSE 25197
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25154: LD_ADDR_VAR 0 2
25158: PUSH
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_INT 2
25166: PPUSH
25167: LD_VAR 0 2
25171: PUSH
25172: LD_INT 2
25174: ARRAY
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: CALL_OW 3
25183: PPUSH
25184: CALL_OW 1
25188: ST_TO_ADDR
// tmp := 1 ;
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_STRING 1
25196: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25197: LD_ADDR_VAR 0 6
25201: PUSH
25202: LD_VAR 0 6
25206: PUSH
25207: LD_VAR 0 3
25211: STR
25212: ST_TO_ADDR
// end ;
25213: GO 25109
25215: POP
25216: POP
// if isGameLoad then
25217: LD_VAR 0 1
25221: IFFALSE 25696
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25223: LD_ADDR_VAR 0 4
25227: PUSH
25228: LD_EXP 71
25232: PUSH
25233: LD_EXP 70
25237: PUSH
25238: LD_EXP 72
25242: PUSH
25243: LD_EXP 69
25247: PUSH
25248: LD_EXP 73
25252: PUSH
25253: LD_EXP 74
25257: PUSH
25258: LD_EXP 75
25262: PUSH
25263: LD_EXP 76
25267: PUSH
25268: LD_EXP 77
25272: PUSH
25273: LD_EXP 78
25277: PUSH
25278: LD_EXP 79
25282: PUSH
25283: LD_EXP 80
25287: PUSH
25288: LD_EXP 81
25292: PUSH
25293: LD_EXP 82
25297: PUSH
25298: LD_EXP 90
25302: PUSH
25303: LD_EXP 91
25307: PUSH
25308: LD_EXP 92
25312: PUSH
25313: LD_EXP 93
25317: PUSH
25318: LD_EXP 95
25322: PUSH
25323: LD_EXP 96
25327: PUSH
25328: LD_EXP 97
25332: PUSH
25333: LD_EXP 100
25337: PUSH
25338: LD_EXP 102
25342: PUSH
25343: LD_EXP 103
25347: PUSH
25348: LD_EXP 104
25352: PUSH
25353: LD_EXP 106
25357: PUSH
25358: LD_EXP 107
25362: PUSH
25363: LD_EXP 110
25367: PUSH
25368: LD_EXP 111
25372: PUSH
25373: LD_EXP 112
25377: PUSH
25378: LD_EXP 113
25382: PUSH
25383: LD_EXP 114
25387: PUSH
25388: LD_EXP 115
25392: PUSH
25393: LD_EXP 116
25397: PUSH
25398: LD_EXP 117
25402: PUSH
25403: LD_EXP 118
25407: PUSH
25408: LD_EXP 83
25412: PUSH
25413: LD_EXP 84
25417: PUSH
25418: LD_EXP 87
25422: PUSH
25423: LD_EXP 88
25427: PUSH
25428: LD_EXP 89
25432: PUSH
25433: LD_EXP 85
25437: PUSH
25438: LD_EXP 86
25442: PUSH
25443: LD_EXP 94
25447: PUSH
25448: LD_EXP 98
25452: PUSH
25453: LD_EXP 99
25457: PUSH
25458: LD_EXP 101
25462: PUSH
25463: LD_EXP 105
25467: PUSH
25468: LD_EXP 108
25472: PUSH
25473: LD_EXP 109
25477: PUSH
25478: LD_EXP 119
25482: PUSH
25483: LD_EXP 120
25487: PUSH
25488: LD_EXP 121
25492: PUSH
25493: LD_EXP 122
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: ST_TO_ADDR
// tmp :=  ;
25554: LD_ADDR_VAR 0 3
25558: PUSH
25559: LD_STRING 
25561: ST_TO_ADDR
// for i = 1 to normalCounter do
25562: LD_ADDR_VAR 0 8
25566: PUSH
25567: DOUBLE
25568: LD_INT 1
25570: DEC
25571: ST_TO_ADDR
25572: LD_EXP 67
25576: PUSH
25577: FOR_TO
25578: IFFALSE 25614
// begin if flags [ i ] then
25580: LD_VAR 0 4
25584: PUSH
25585: LD_VAR 0 8
25589: ARRAY
25590: IFFALSE 25612
// tmp := tmp & i & ; ;
25592: LD_ADDR_VAR 0 3
25596: PUSH
25597: LD_VAR 0 3
25601: PUSH
25602: LD_VAR 0 8
25606: STR
25607: PUSH
25608: LD_STRING ;
25610: STR
25611: ST_TO_ADDR
// end ;
25612: GO 25577
25614: POP
25615: POP
// for i = 1 to hardcoreCounter do
25616: LD_ADDR_VAR 0 8
25620: PUSH
25621: DOUBLE
25622: LD_INT 1
25624: DEC
25625: ST_TO_ADDR
25626: LD_EXP 68
25630: PUSH
25631: FOR_TO
25632: IFFALSE 25678
// begin if flags [ normalCounter + i ] then
25634: LD_VAR 0 4
25638: PUSH
25639: LD_EXP 67
25643: PUSH
25644: LD_VAR 0 8
25648: PLUS
25649: ARRAY
25650: IFFALSE 25676
// tmp := tmp & ( 100 + i ) & ; ;
25652: LD_ADDR_VAR 0 3
25656: PUSH
25657: LD_VAR 0 3
25661: PUSH
25662: LD_INT 100
25664: PUSH
25665: LD_VAR 0 8
25669: PLUS
25670: STR
25671: PUSH
25672: LD_STRING ;
25674: STR
25675: ST_TO_ADDR
// end ;
25676: GO 25631
25678: POP
25679: POP
// if tmp then
25680: LD_VAR 0 3
25684: IFFALSE 25696
// active := tmp ;
25686: LD_ADDR_VAR 0 7
25690: PUSH
25691: LD_VAR 0 3
25695: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25696: LD_STRING getStreamItemsFromMission("
25698: PUSH
25699: LD_VAR 0 5
25703: STR
25704: PUSH
25705: LD_STRING ","
25707: STR
25708: PUSH
25709: LD_VAR 0 6
25713: STR
25714: PUSH
25715: LD_STRING ","
25717: STR
25718: PUSH
25719: LD_VAR 0 7
25723: STR
25724: PUSH
25725: LD_STRING ")
25727: STR
25728: PPUSH
25729: CALL_OW 559
// end else
25733: GO 25742
// ToLua ( getStreamItemsFromMission("","","") ) ;
25735: LD_STRING getStreamItemsFromMission("","","")
25737: PPUSH
25738: CALL_OW 559
// end ;
25742: LD_VAR 0 2
25746: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25747: LD_EXP 66
25751: PUSH
25752: LD_EXP 71
25756: AND
25757: IFFALSE 25881
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
// begin enable ;
25766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25767: LD_ADDR_VAR 0 2
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 34
25789: PUSH
25790: LD_INT 7
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 34
25799: PUSH
25800: LD_INT 45
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 34
25809: PUSH
25810: LD_INT 28
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 34
25819: PUSH
25820: LD_INT 47
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PPUSH
25838: CALL_OW 69
25842: ST_TO_ADDR
// if not tmp then
25843: LD_VAR 0 2
25847: NOT
25848: IFFALSE 25852
// exit ;
25850: GO 25881
// for i in tmp do
25852: LD_ADDR_VAR 0 1
25856: PUSH
25857: LD_VAR 0 2
25861: PUSH
25862: FOR_IN
25863: IFFALSE 25879
// begin SetLives ( i , 0 ) ;
25865: LD_VAR 0 1
25869: PPUSH
25870: LD_INT 0
25872: PPUSH
25873: CALL_OW 234
// end ;
25877: GO 25862
25879: POP
25880: POP
// end ;
25881: PPOPN 2
25883: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25884: LD_EXP 66
25888: PUSH
25889: LD_EXP 72
25893: AND
25894: IFFALSE 25978
25896: GO 25898
25898: DISABLE
25899: LD_INT 0
25901: PPUSH
25902: PPUSH
// begin enable ;
25903: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25904: LD_ADDR_VAR 0 2
25908: PUSH
25909: LD_INT 22
25911: PUSH
25912: LD_OWVAR 2
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 32
25923: PUSH
25924: LD_INT 3
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PPUSH
25935: CALL_OW 69
25939: ST_TO_ADDR
// if not tmp then
25940: LD_VAR 0 2
25944: NOT
25945: IFFALSE 25949
// exit ;
25947: GO 25978
// for i in tmp do
25949: LD_ADDR_VAR 0 1
25953: PUSH
25954: LD_VAR 0 2
25958: PUSH
25959: FOR_IN
25960: IFFALSE 25976
// begin SetLives ( i , 0 ) ;
25962: LD_VAR 0 1
25966: PPUSH
25967: LD_INT 0
25969: PPUSH
25970: CALL_OW 234
// end ;
25974: GO 25959
25976: POP
25977: POP
// end ;
25978: PPOPN 2
25980: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25981: LD_EXP 66
25985: PUSH
25986: LD_EXP 69
25990: AND
25991: IFFALSE 26084
25993: GO 25995
25995: DISABLE
25996: LD_INT 0
25998: PPUSH
// begin enable ;
25999: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26000: LD_ADDR_VAR 0 1
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 25
26022: PUSH
26023: LD_INT 5
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 25
26032: PUSH
26033: LD_INT 9
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 25
26042: PUSH
26043: LD_INT 8
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PPUSH
26060: CALL_OW 69
26064: PUSH
26065: FOR_IN
26066: IFFALSE 26082
// begin SetClass ( i , 1 ) ;
26068: LD_VAR 0 1
26072: PPUSH
26073: LD_INT 1
26075: PPUSH
26076: CALL_OW 336
// end ;
26080: GO 26065
26082: POP
26083: POP
// end ;
26084: PPOPN 1
26086: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26087: LD_EXP 66
26091: PUSH
26092: LD_EXP 70
26096: AND
26097: PUSH
26098: LD_OWVAR 65
26102: PUSH
26103: LD_INT 7
26105: LESS
26106: AND
26107: IFFALSE 26121
26109: GO 26111
26111: DISABLE
// begin enable ;
26112: ENABLE
// game_speed := 7 ;
26113: LD_ADDR_OWVAR 65
26117: PUSH
26118: LD_INT 7
26120: ST_TO_ADDR
// end ;
26121: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26122: LD_EXP 66
26126: PUSH
26127: LD_EXP 73
26131: AND
26132: IFFALSE 26334
26134: GO 26136
26136: DISABLE
26137: LD_INT 0
26139: PPUSH
26140: PPUSH
26141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 81
26149: PUSH
26150: LD_OWVAR 2
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 21
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 69
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 3
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 26334
// if tmp > 5 then
26187: LD_VAR 0 3
26191: PUSH
26192: LD_INT 5
26194: GREATER
26195: IFFALSE 26207
// k := 5 else
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 5
26204: ST_TO_ADDR
26205: GO 26217
// k := tmp ;
26207: LD_ADDR_VAR 0 2
26211: PUSH
26212: LD_VAR 0 3
26216: ST_TO_ADDR
// for i := 1 to k do
26217: LD_ADDR_VAR 0 1
26221: PUSH
26222: DOUBLE
26223: LD_INT 1
26225: DEC
26226: ST_TO_ADDR
26227: LD_VAR 0 2
26231: PUSH
26232: FOR_TO
26233: IFFALSE 26332
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26235: LD_VAR 0 3
26239: PUSH
26240: LD_VAR 0 1
26244: ARRAY
26245: PPUSH
26246: LD_VAR 0 1
26250: PUSH
26251: LD_INT 4
26253: MOD
26254: PUSH
26255: LD_INT 1
26257: PLUS
26258: PPUSH
26259: CALL_OW 259
26263: PUSH
26264: LD_INT 10
26266: LESS
26267: IFFALSE 26330
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26269: LD_VAR 0 3
26273: PUSH
26274: LD_VAR 0 1
26278: ARRAY
26279: PPUSH
26280: LD_VAR 0 1
26284: PUSH
26285: LD_INT 4
26287: MOD
26288: PUSH
26289: LD_INT 1
26291: PLUS
26292: PPUSH
26293: LD_VAR 0 3
26297: PUSH
26298: LD_VAR 0 1
26302: ARRAY
26303: PPUSH
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 4
26311: MOD
26312: PUSH
26313: LD_INT 1
26315: PLUS
26316: PPUSH
26317: CALL_OW 259
26321: PUSH
26322: LD_INT 1
26324: PLUS
26325: PPUSH
26326: CALL_OW 237
26330: GO 26232
26332: POP
26333: POP
// end ;
26334: PPOPN 3
26336: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26337: LD_EXP 66
26341: PUSH
26342: LD_EXP 74
26346: AND
26347: IFFALSE 26367
26349: GO 26351
26351: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26352: LD_INT 4
26354: PPUSH
26355: LD_OWVAR 2
26359: PPUSH
26360: LD_INT 0
26362: PPUSH
26363: CALL_OW 324
26367: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26368: LD_EXP 66
26372: PUSH
26373: LD_EXP 103
26377: AND
26378: IFFALSE 26398
26380: GO 26382
26382: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26383: LD_INT 19
26385: PPUSH
26386: LD_OWVAR 2
26390: PPUSH
26391: LD_INT 0
26393: PPUSH
26394: CALL_OW 324
26398: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26399: LD_EXP 66
26403: PUSH
26404: LD_EXP 75
26408: AND
26409: IFFALSE 26511
26411: GO 26413
26413: DISABLE
26414: LD_INT 0
26416: PPUSH
26417: PPUSH
// begin enable ;
26418: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26419: LD_ADDR_VAR 0 2
26423: PUSH
26424: LD_INT 22
26426: PUSH
26427: LD_OWVAR 2
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: LD_INT 34
26441: PUSH
26442: LD_INT 11
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 34
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// if not tmp then
26473: LD_VAR 0 2
26477: NOT
26478: IFFALSE 26482
// exit ;
26480: GO 26511
// for i in tmp do
26482: LD_ADDR_VAR 0 1
26486: PUSH
26487: LD_VAR 0 2
26491: PUSH
26492: FOR_IN
26493: IFFALSE 26509
// begin SetLives ( i , 0 ) ;
26495: LD_VAR 0 1
26499: PPUSH
26500: LD_INT 0
26502: PPUSH
26503: CALL_OW 234
// end ;
26507: GO 26492
26509: POP
26510: POP
// end ;
26511: PPOPN 2
26513: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26514: LD_EXP 66
26518: PUSH
26519: LD_EXP 76
26523: AND
26524: IFFALSE 26544
26526: GO 26528
26528: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26529: LD_INT 32
26531: PPUSH
26532: LD_OWVAR 2
26536: PPUSH
26537: LD_INT 0
26539: PPUSH
26540: CALL_OW 324
26544: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26545: LD_EXP 66
26549: PUSH
26550: LD_EXP 77
26554: AND
26555: IFFALSE 26736
26557: GO 26559
26559: DISABLE
26560: LD_INT 0
26562: PPUSH
26563: PPUSH
26564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26565: LD_ADDR_VAR 0 2
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_OWVAR 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 33
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PPUSH
26596: CALL_OW 69
26600: ST_TO_ADDR
// if not tmp then
26601: LD_VAR 0 2
26605: NOT
26606: IFFALSE 26610
// exit ;
26608: GO 26736
// side := 0 ;
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_INT 0
26617: ST_TO_ADDR
// for i := 1 to 8 do
26618: LD_ADDR_VAR 0 1
26622: PUSH
26623: DOUBLE
26624: LD_INT 1
26626: DEC
26627: ST_TO_ADDR
26628: LD_INT 8
26630: PUSH
26631: FOR_TO
26632: IFFALSE 26680
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26634: LD_OWVAR 2
26638: PUSH
26639: LD_VAR 0 1
26643: NONEQUAL
26644: PUSH
26645: LD_OWVAR 2
26649: PPUSH
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL_OW 81
26659: PUSH
26660: LD_INT 2
26662: EQUAL
26663: AND
26664: IFFALSE 26678
// begin side := i ;
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: LD_VAR 0 1
26675: ST_TO_ADDR
// break ;
26676: GO 26680
// end ;
26678: GO 26631
26680: POP
26681: POP
// if not side then
26682: LD_VAR 0 3
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26736
// for i := 1 to tmp do
26691: LD_ADDR_VAR 0 1
26695: PUSH
26696: DOUBLE
26697: LD_INT 1
26699: DEC
26700: ST_TO_ADDR
26701: LD_VAR 0 2
26705: PUSH
26706: FOR_TO
26707: IFFALSE 26734
// if Prob ( 60 ) then
26709: LD_INT 60
26711: PPUSH
26712: CALL_OW 13
26716: IFFALSE 26732
// SetSide ( i , side ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_VAR 0 3
26727: PPUSH
26728: CALL_OW 235
26732: GO 26706
26734: POP
26735: POP
// end ;
26736: PPOPN 3
26738: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26739: LD_EXP 66
26743: PUSH
26744: LD_EXP 79
26748: AND
26749: IFFALSE 26868
26751: GO 26753
26753: DISABLE
26754: LD_INT 0
26756: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26757: LD_ADDR_VAR 0 1
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: LD_INT 23
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: PPUSH
26806: CALL_OW 69
26810: PUSH
26811: FOR_IN
26812: IFFALSE 26866
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 257
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 3
26832: PUSH
26833: LD_INT 4
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: IN
26842: IFFALSE 26864
// SetClass ( un , rand ( 1 , 4 ) ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: LD_INT 1
26851: PPUSH
26852: LD_INT 4
26854: PPUSH
26855: CALL_OW 12
26859: PPUSH
26860: CALL_OW 336
26864: GO 26811
26866: POP
26867: POP
// end ;
26868: PPOPN 1
26870: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26871: LD_EXP 66
26875: PUSH
26876: LD_EXP 78
26880: AND
26881: IFFALSE 26960
26883: GO 26885
26885: DISABLE
26886: LD_INT 0
26888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26889: LD_ADDR_VAR 0 1
26893: PUSH
26894: LD_INT 22
26896: PUSH
26897: LD_OWVAR 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 21
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PPUSH
26920: CALL_OW 69
26924: ST_TO_ADDR
// if not tmp then
26925: LD_VAR 0 1
26929: NOT
26930: IFFALSE 26934
// exit ;
26932: GO 26960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26934: LD_VAR 0 1
26938: PUSH
26939: LD_INT 1
26941: PPUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 12
26951: ARRAY
26952: PPUSH
26953: LD_INT 100
26955: PPUSH
26956: CALL_OW 234
// end ;
26960: PPOPN 1
26962: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26963: LD_EXP 66
26967: PUSH
26968: LD_EXP 80
26972: AND
26973: IFFALSE 27071
26975: GO 26977
26977: DISABLE
26978: LD_INT 0
26980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: ST_TO_ADDR
// if not tmp then
27017: LD_VAR 0 1
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27071
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27026: LD_VAR 0 1
27030: PUSH
27031: LD_INT 1
27033: PPUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 12
27043: ARRAY
27044: PPUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_INT 4
27050: PPUSH
27051: CALL_OW 12
27055: PPUSH
27056: LD_INT 3000
27058: PPUSH
27059: LD_INT 9000
27061: PPUSH
27062: CALL_OW 12
27066: PPUSH
27067: CALL_OW 492
// end ;
27071: PPOPN 1
27073: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27074: LD_EXP 66
27078: PUSH
27079: LD_EXP 81
27083: AND
27084: IFFALSE 27104
27086: GO 27088
27088: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27089: LD_INT 1
27091: PPUSH
27092: LD_OWVAR 2
27096: PPUSH
27097: LD_INT 0
27099: PPUSH
27100: CALL_OW 324
27104: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27105: LD_EXP 66
27109: PUSH
27110: LD_EXP 82
27114: AND
27115: IFFALSE 27198
27117: GO 27119
27119: DISABLE
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27124: LD_ADDR_VAR 0 2
27128: PUSH
27129: LD_INT 22
27131: PUSH
27132: LD_OWVAR 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 21
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: ST_TO_ADDR
// if not tmp then
27160: LD_VAR 0 2
27164: NOT
27165: IFFALSE 27169
// exit ;
27167: GO 27198
// for i in tmp do
27169: LD_ADDR_VAR 0 1
27173: PUSH
27174: LD_VAR 0 2
27178: PUSH
27179: FOR_IN
27180: IFFALSE 27196
// SetBLevel ( i , 10 ) ;
27182: LD_VAR 0 1
27186: PPUSH
27187: LD_INT 10
27189: PPUSH
27190: CALL_OW 241
27194: GO 27179
27196: POP
27197: POP
// end ;
27198: PPOPN 2
27200: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27201: LD_EXP 66
27205: PUSH
27206: LD_EXP 83
27210: AND
27211: IFFALSE 27322
27213: GO 27215
27215: DISABLE
27216: LD_INT 0
27218: PPUSH
27219: PPUSH
27220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27221: LD_ADDR_VAR 0 3
27225: PUSH
27226: LD_INT 22
27228: PUSH
27229: LD_OWVAR 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 25
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PPUSH
27252: CALL_OW 69
27256: ST_TO_ADDR
// if not tmp then
27257: LD_VAR 0 3
27261: NOT
27262: IFFALSE 27266
// exit ;
27264: GO 27322
// un := tmp [ rand ( 1 , tmp ) ] ;
27266: LD_ADDR_VAR 0 2
27270: PUSH
27271: LD_VAR 0 3
27275: PUSH
27276: LD_INT 1
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: CALL_OW 12
27288: ARRAY
27289: ST_TO_ADDR
// if Crawls ( un ) then
27290: LD_VAR 0 2
27294: PPUSH
27295: CALL_OW 318
27299: IFFALSE 27310
// ComWalk ( un ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27310: LD_VAR 0 2
27314: PPUSH
27315: LD_INT 5
27317: PPUSH
27318: CALL_OW 336
// end ;
27322: PPOPN 3
27324: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27325: LD_EXP 66
27329: PUSH
27330: LD_EXP 84
27334: AND
27335: PUSH
27336: LD_OWVAR 67
27340: PUSH
27341: LD_INT 4
27343: LESS
27344: AND
27345: IFFALSE 27364
27347: GO 27349
27349: DISABLE
// begin Difficulty := Difficulty + 1 ;
27350: LD_ADDR_OWVAR 67
27354: PUSH
27355: LD_OWVAR 67
27359: PUSH
27360: LD_INT 1
27362: PLUS
27363: ST_TO_ADDR
// end ;
27364: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27365: LD_EXP 66
27369: PUSH
27370: LD_EXP 85
27374: AND
27375: IFFALSE 27478
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
// begin for i := 1 to 5 do
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: DOUBLE
27389: LD_INT 1
27391: DEC
27392: ST_TO_ADDR
27393: LD_INT 5
27395: PUSH
27396: FOR_TO
27397: IFFALSE 27476
// begin uc_nation := nation_nature ;
27399: LD_ADDR_OWVAR 21
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// uc_side := 0 ;
27407: LD_ADDR_OWVAR 20
27411: PUSH
27412: LD_INT 0
27414: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27415: LD_ADDR_OWVAR 29
27419: PUSH
27420: LD_INT 12
27422: PUSH
27423: LD_INT 12
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// hc_agressivity := 20 ;
27430: LD_ADDR_OWVAR 35
27434: PUSH
27435: LD_INT 20
27437: ST_TO_ADDR
// hc_class := class_tiger ;
27438: LD_ADDR_OWVAR 28
27442: PUSH
27443: LD_INT 14
27445: ST_TO_ADDR
// hc_gallery :=  ;
27446: LD_ADDR_OWVAR 33
27450: PUSH
27451: LD_STRING 
27453: ST_TO_ADDR
// hc_name :=  ;
27454: LD_ADDR_OWVAR 26
27458: PUSH
27459: LD_STRING 
27461: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27462: CALL_OW 44
27466: PPUSH
27467: LD_INT 0
27469: PPUSH
27470: CALL_OW 51
// end ;
27474: GO 27396
27476: POP
27477: POP
// end ;
27478: PPOPN 1
27480: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27481: LD_EXP 66
27485: PUSH
27486: LD_EXP 86
27490: AND
27491: IFFALSE 27500
27493: GO 27495
27495: DISABLE
// StreamSibBomb ;
27496: CALL 27501 0 0
27500: END
// export function StreamSibBomb ; var i , x , y ; begin
27501: LD_INT 0
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
// result := false ;
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_INT 0
27514: ST_TO_ADDR
// for i := 1 to 16 do
27515: LD_ADDR_VAR 0 2
27519: PUSH
27520: DOUBLE
27521: LD_INT 1
27523: DEC
27524: ST_TO_ADDR
27525: LD_INT 16
27527: PUSH
27528: FOR_TO
27529: IFFALSE 27728
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_INT 10
27538: PUSH
27539: LD_INT 20
27541: PUSH
27542: LD_INT 30
27544: PUSH
27545: LD_INT 40
27547: PUSH
27548: LD_INT 50
27550: PUSH
27551: LD_INT 60
27553: PUSH
27554: LD_INT 70
27556: PUSH
27557: LD_INT 80
27559: PUSH
27560: LD_INT 90
27562: PUSH
27563: LD_INT 100
27565: PUSH
27566: LD_INT 110
27568: PUSH
27569: LD_INT 120
27571: PUSH
27572: LD_INT 130
27574: PUSH
27575: LD_INT 140
27577: PUSH
27578: LD_INT 150
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PPUSH
27601: LD_INT 15
27603: PPUSH
27604: CALL_OW 12
27608: ARRAY
27609: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27610: LD_ADDR_VAR 0 4
27614: PUSH
27615: LD_INT 10
27617: PUSH
27618: LD_INT 20
27620: PUSH
27621: LD_INT 30
27623: PUSH
27624: LD_INT 40
27626: PUSH
27627: LD_INT 50
27629: PUSH
27630: LD_INT 60
27632: PUSH
27633: LD_INT 70
27635: PUSH
27636: LD_INT 80
27638: PUSH
27639: LD_INT 90
27641: PUSH
27642: LD_INT 100
27644: PUSH
27645: LD_INT 110
27647: PUSH
27648: LD_INT 120
27650: PUSH
27651: LD_INT 130
27653: PUSH
27654: LD_INT 140
27656: PUSH
27657: LD_INT 150
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PPUSH
27680: LD_INT 15
27682: PPUSH
27683: CALL_OW 12
27687: ARRAY
27688: ST_TO_ADDR
// if ValidHex ( x , y ) then
27689: LD_VAR 0 3
27693: PPUSH
27694: LD_VAR 0 4
27698: PPUSH
27699: CALL_OW 488
27703: IFFALSE 27726
// begin result := [ x , y ] ;
27705: LD_ADDR_VAR 0 1
27709: PUSH
27710: LD_VAR 0 3
27714: PUSH
27715: LD_VAR 0 4
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: ST_TO_ADDR
// break ;
27724: GO 27728
// end ; end ;
27726: GO 27528
27728: POP
27729: POP
// if result then
27730: LD_VAR 0 1
27734: IFFALSE 27794
// begin ToLua ( playSibBomb() ) ;
27736: LD_STRING playSibBomb()
27738: PPUSH
27739: CALL_OW 559
// wait ( 0 0$14 ) ;
27743: LD_INT 490
27745: PPUSH
27746: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27750: LD_VAR 0 1
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: LD_VAR 0 1
27763: PUSH
27764: LD_INT 2
27766: ARRAY
27767: PPUSH
27768: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27772: LD_VAR 0 1
27776: PUSH
27777: LD_INT 1
27779: ARRAY
27780: PPUSH
27781: LD_VAR 0 1
27785: PUSH
27786: LD_INT 2
27788: ARRAY
27789: PPUSH
27790: CALL_OW 429
// end ; end ;
27794: LD_VAR 0 1
27798: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27799: LD_EXP 66
27803: PUSH
27804: LD_EXP 88
27808: AND
27809: IFFALSE 27821
27811: GO 27813
27813: DISABLE
// YouLost (  ) ;
27814: LD_STRING 
27816: PPUSH
27817: CALL_OW 104
27821: END
// every 0 0$1 trigger StreamModeActive and sFog do
27822: LD_EXP 66
27826: PUSH
27827: LD_EXP 87
27831: AND
27832: IFFALSE 27846
27834: GO 27836
27836: DISABLE
// FogOff ( your_side ) ;
27837: LD_OWVAR 2
27841: PPUSH
27842: CALL_OW 344
27846: END
// every 0 0$1 trigger StreamModeActive and sSun do
27847: LD_EXP 66
27851: PUSH
27852: LD_EXP 89
27856: AND
27857: IFFALSE 27885
27859: GO 27861
27861: DISABLE
// begin solar_recharge_percent := 0 ;
27862: LD_ADDR_OWVAR 79
27866: PUSH
27867: LD_INT 0
27869: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27870: LD_INT 10500
27872: PPUSH
27873: CALL_OW 67
// solar_recharge_percent := 100 ;
27877: LD_ADDR_OWVAR 79
27881: PUSH
27882: LD_INT 100
27884: ST_TO_ADDR
// end ;
27885: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27886: LD_EXP 66
27890: PUSH
27891: LD_EXP 90
27895: AND
27896: IFFALSE 28135
27898: GO 27900
27900: DISABLE
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
27905: PPUSH
// begin tmp := [ ] ;
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: EMPTY
27912: ST_TO_ADDR
// for i := 1 to 6 do
27913: LD_ADDR_VAR 0 1
27917: PUSH
27918: DOUBLE
27919: LD_INT 1
27921: DEC
27922: ST_TO_ADDR
27923: LD_INT 6
27925: PUSH
27926: FOR_TO
27927: IFFALSE 28032
// begin uc_nation := nation_nature ;
27929: LD_ADDR_OWVAR 21
27933: PUSH
27934: LD_INT 0
27936: ST_TO_ADDR
// uc_side := 0 ;
27937: LD_ADDR_OWVAR 20
27941: PUSH
27942: LD_INT 0
27944: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27945: LD_ADDR_OWVAR 29
27949: PUSH
27950: LD_INT 12
27952: PUSH
27953: LD_INT 12
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: ST_TO_ADDR
// hc_agressivity := 20 ;
27960: LD_ADDR_OWVAR 35
27964: PUSH
27965: LD_INT 20
27967: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27968: LD_ADDR_OWVAR 28
27972: PUSH
27973: LD_INT 17
27975: ST_TO_ADDR
// hc_gallery :=  ;
27976: LD_ADDR_OWVAR 33
27980: PUSH
27981: LD_STRING 
27983: ST_TO_ADDR
// hc_name :=  ;
27984: LD_ADDR_OWVAR 26
27988: PUSH
27989: LD_STRING 
27991: ST_TO_ADDR
// un := CreateHuman ;
27992: LD_ADDR_VAR 0 2
27996: PUSH
27997: CALL_OW 44
28001: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28002: LD_VAR 0 2
28006: PPUSH
28007: LD_INT 1
28009: PPUSH
28010: CALL_OW 51
// tmp := tmp ^ un ;
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_VAR 0 3
28023: PUSH
28024: LD_VAR 0 2
28028: ADD
28029: ST_TO_ADDR
// end ;
28030: GO 27926
28032: POP
28033: POP
// repeat wait ( 0 0$1 ) ;
28034: LD_INT 35
28036: PPUSH
28037: CALL_OW 67
// for un in tmp do
28041: LD_ADDR_VAR 0 2
28045: PUSH
28046: LD_VAR 0 3
28050: PUSH
28051: FOR_IN
28052: IFFALSE 28126
// begin if IsDead ( un ) then
28054: LD_VAR 0 2
28058: PPUSH
28059: CALL_OW 301
28063: IFFALSE 28083
// begin tmp := tmp diff un ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_VAR 0 2
28079: DIFF
28080: ST_TO_ADDR
// continue ;
28081: GO 28051
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_INT 3
28090: PUSH
28091: LD_INT 22
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL_OW 69
28109: PPUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 74
28119: PPUSH
28120: CALL_OW 115
// end ;
28124: GO 28051
28126: POP
28127: POP
// until not tmp ;
28128: LD_VAR 0 3
28132: NOT
28133: IFFALSE 28034
// end ;
28135: PPOPN 3
28137: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28138: LD_EXP 66
28142: PUSH
28143: LD_EXP 91
28147: AND
28148: IFFALSE 28202
28150: GO 28152
28152: DISABLE
// begin ToLua ( displayTroll(); ) ;
28153: LD_STRING displayTroll();
28155: PPUSH
28156: CALL_OW 559
// wait ( 3 3$00 ) ;
28160: LD_INT 6300
28162: PPUSH
28163: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28167: LD_STRING hideTroll();
28169: PPUSH
28170: CALL_OW 559
// wait ( 1 1$00 ) ;
28174: LD_INT 2100
28176: PPUSH
28177: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28181: LD_STRING displayTroll();
28183: PPUSH
28184: CALL_OW 559
// wait ( 1 1$00 ) ;
28188: LD_INT 2100
28190: PPUSH
28191: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28195: LD_STRING hideTroll();
28197: PPUSH
28198: CALL_OW 559
// end ;
28202: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28203: LD_EXP 66
28207: PUSH
28208: LD_EXP 92
28212: AND
28213: IFFALSE 28276
28215: GO 28217
28217: DISABLE
28218: LD_INT 0
28220: PPUSH
// begin p := 0 ;
28221: LD_ADDR_VAR 0 1
28225: PUSH
28226: LD_INT 0
28228: ST_TO_ADDR
// repeat game_speed := 1 ;
28229: LD_ADDR_OWVAR 65
28233: PUSH
28234: LD_INT 1
28236: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28237: LD_INT 35
28239: PPUSH
28240: CALL_OW 67
// p := p + 1 ;
28244: LD_ADDR_VAR 0 1
28248: PUSH
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 1
28256: PLUS
28257: ST_TO_ADDR
// until p >= 60 ;
28258: LD_VAR 0 1
28262: PUSH
28263: LD_INT 60
28265: GREATEREQUAL
28266: IFFALSE 28229
// game_speed := 4 ;
28268: LD_ADDR_OWVAR 65
28272: PUSH
28273: LD_INT 4
28275: ST_TO_ADDR
// end ;
28276: PPOPN 1
28278: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28279: LD_EXP 66
28283: PUSH
28284: LD_EXP 93
28288: AND
28289: IFFALSE 28435
28291: GO 28293
28293: DISABLE
28294: LD_INT 0
28296: PPUSH
28297: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: LD_INT 22
28305: PUSH
28306: LD_OWVAR 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: LD_INT 30
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 30
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PPUSH
28347: CALL_OW 69
28351: ST_TO_ADDR
// if not depot then
28352: LD_VAR 0 1
28356: NOT
28357: IFFALSE 28361
// exit ;
28359: GO 28435
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28361: LD_ADDR_VAR 0 2
28365: PUSH
28366: LD_VAR 0 1
28370: PUSH
28371: LD_INT 1
28373: PPUSH
28374: LD_VAR 0 1
28378: PPUSH
28379: CALL_OW 12
28383: ARRAY
28384: PPUSH
28385: CALL_OW 274
28389: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28390: LD_VAR 0 2
28394: PPUSH
28395: LD_INT 1
28397: PPUSH
28398: LD_INT 0
28400: PPUSH
28401: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28405: LD_VAR 0 2
28409: PPUSH
28410: LD_INT 2
28412: PPUSH
28413: LD_INT 0
28415: PPUSH
28416: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28420: LD_VAR 0 2
28424: PPUSH
28425: LD_INT 3
28427: PPUSH
28428: LD_INT 0
28430: PPUSH
28431: CALL_OW 277
// end ;
28435: PPOPN 2
28437: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28438: LD_EXP 66
28442: PUSH
28443: LD_EXP 94
28447: AND
28448: IFFALSE 28545
28450: GO 28452
28452: DISABLE
28453: LD_INT 0
28455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_OWVAR 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 21
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 23
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: PPUSH
28505: CALL_OW 69
28509: ST_TO_ADDR
// if not tmp then
28510: LD_VAR 0 1
28514: NOT
28515: IFFALSE 28519
// exit ;
28517: GO 28545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28519: LD_VAR 0 1
28523: PUSH
28524: LD_INT 1
28526: PPUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 12
28536: ARRAY
28537: PPUSH
28538: LD_INT 200
28540: PPUSH
28541: CALL_OW 234
// end ;
28545: PPOPN 1
28547: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28548: LD_EXP 66
28552: PUSH
28553: LD_EXP 95
28557: AND
28558: IFFALSE 28637
28560: GO 28562
28562: DISABLE
28563: LD_INT 0
28565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28566: LD_ADDR_VAR 0 1
28570: PUSH
28571: LD_INT 22
28573: PUSH
28574: LD_OWVAR 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 21
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 69
28601: ST_TO_ADDR
// if not tmp then
28602: LD_VAR 0 1
28606: NOT
28607: IFFALSE 28611
// exit ;
28609: GO 28637
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 1
28618: PPUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 12
28628: ARRAY
28629: PPUSH
28630: LD_INT 60
28632: PPUSH
28633: CALL_OW 234
// end ;
28637: PPOPN 1
28639: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28640: LD_EXP 66
28644: PUSH
28645: LD_EXP 96
28649: AND
28650: IFFALSE 28749
28652: GO 28654
28654: DISABLE
28655: LD_INT 0
28657: PPUSH
28658: PPUSH
// begin enable ;
28659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28660: LD_ADDR_VAR 0 1
28664: PUSH
28665: LD_INT 22
28667: PUSH
28668: LD_OWVAR 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 61
28679: PUSH
28680: EMPTY
28681: LIST
28682: PUSH
28683: LD_INT 33
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 69
28702: ST_TO_ADDR
// if not tmp then
28703: LD_VAR 0 1
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 28749
// for i in tmp do
28712: LD_ADDR_VAR 0 2
28716: PUSH
28717: LD_VAR 0 1
28721: PUSH
28722: FOR_IN
28723: IFFALSE 28747
// if IsControledBy ( i ) then
28725: LD_VAR 0 2
28729: PPUSH
28730: CALL_OW 312
28734: IFFALSE 28745
// ComUnlink ( i ) ;
28736: LD_VAR 0 2
28740: PPUSH
28741: CALL_OW 136
28745: GO 28722
28747: POP
28748: POP
// end ;
28749: PPOPN 2
28751: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28752: LD_EXP 66
28756: PUSH
28757: LD_EXP 97
28761: AND
28762: IFFALSE 28902
28764: GO 28766
28766: DISABLE
28767: LD_INT 0
28769: PPUSH
28770: PPUSH
// begin ToLua ( displayPowell(); ) ;
28771: LD_STRING displayPowell();
28773: PPUSH
28774: CALL_OW 559
// uc_side := 0 ;
28778: LD_ADDR_OWVAR 20
28782: PUSH
28783: LD_INT 0
28785: ST_TO_ADDR
// uc_nation := 2 ;
28786: LD_ADDR_OWVAR 21
28790: PUSH
28791: LD_INT 2
28793: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28794: LD_ADDR_OWVAR 37
28798: PUSH
28799: LD_INT 14
28801: ST_TO_ADDR
// vc_engine := engine_siberite ;
28802: LD_ADDR_OWVAR 39
28806: PUSH
28807: LD_INT 3
28809: ST_TO_ADDR
// vc_control := control_apeman ;
28810: LD_ADDR_OWVAR 38
28814: PUSH
28815: LD_INT 5
28817: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28818: LD_ADDR_OWVAR 40
28822: PUSH
28823: LD_INT 29
28825: ST_TO_ADDR
// un := CreateVehicle ;
28826: LD_ADDR_VAR 0 2
28830: PUSH
28831: CALL_OW 45
28835: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_INT 1
28843: PPUSH
28844: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28848: LD_INT 35
28850: PPUSH
28851: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28855: LD_VAR 0 2
28859: PPUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 69
28876: PPUSH
28877: LD_VAR 0 2
28881: PPUSH
28882: CALL_OW 74
28886: PPUSH
28887: CALL_OW 115
// until IsDead ( un ) ;
28891: LD_VAR 0 2
28895: PPUSH
28896: CALL_OW 301
28900: IFFALSE 28848
// end ;
28902: PPOPN 2
28904: END
// every 0 0$1 trigger StreamModeActive and sStu do
28905: LD_EXP 66
28909: PUSH
28910: LD_EXP 105
28914: AND
28915: IFFALSE 28931
28917: GO 28919
28919: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28920: LD_STRING displayStucuk();
28922: PPUSH
28923: CALL_OW 559
// ResetFog ;
28927: CALL_OW 335
// end ;
28931: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28932: LD_EXP 66
28936: PUSH
28937: LD_EXP 98
28941: AND
28942: IFFALSE 29083
28944: GO 28946
28946: DISABLE
28947: LD_INT 0
28949: PPUSH
28950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28951: LD_ADDR_VAR 0 2
28955: PUSH
28956: LD_INT 22
28958: PUSH
28959: LD_OWVAR 2
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 21
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PPUSH
28982: CALL_OW 69
28986: ST_TO_ADDR
// if not tmp then
28987: LD_VAR 0 2
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29083
// un := tmp [ rand ( 1 , tmp ) ] ;
28996: LD_ADDR_VAR 0 1
29000: PUSH
29001: LD_VAR 0 2
29005: PUSH
29006: LD_INT 1
29008: PPUSH
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 12
29018: ARRAY
29019: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_INT 0
29027: PPUSH
29028: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29032: LD_VAR 0 1
29036: PPUSH
29037: LD_OWVAR 3
29041: PUSH
29042: LD_VAR 0 1
29046: DIFF
29047: PPUSH
29048: LD_VAR 0 1
29052: PPUSH
29053: CALL_OW 74
29057: PPUSH
29058: CALL_OW 115
// wait ( 0 0$20 ) ;
29062: LD_INT 700
29064: PPUSH
29065: CALL_OW 67
// SetSide ( un , your_side ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_OWVAR 2
29078: PPUSH
29079: CALL_OW 235
// end ;
29083: PPOPN 2
29085: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29086: LD_EXP 66
29090: PUSH
29091: LD_EXP 99
29095: AND
29096: IFFALSE 29202
29098: GO 29100
29100: DISABLE
29101: LD_INT 0
29103: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29104: LD_ADDR_VAR 0 1
29108: PUSH
29109: LD_INT 22
29111: PUSH
29112: LD_OWVAR 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 30
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 30
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PPUSH
29153: CALL_OW 69
29157: ST_TO_ADDR
// if not depot then
29158: LD_VAR 0 1
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 29202
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29167: LD_VAR 0 1
29171: PUSH
29172: LD_INT 1
29174: ARRAY
29175: PPUSH
29176: CALL_OW 250
29180: PPUSH
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 1
29188: ARRAY
29189: PPUSH
29190: CALL_OW 251
29194: PPUSH
29195: LD_INT 70
29197: PPUSH
29198: CALL_OW 495
// end ;
29202: PPOPN 1
29204: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29205: LD_EXP 66
29209: PUSH
29210: LD_EXP 100
29214: AND
29215: IFFALSE 29426
29217: GO 29219
29219: DISABLE
29220: LD_INT 0
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
29226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29227: LD_ADDR_VAR 0 5
29231: PUSH
29232: LD_INT 22
29234: PUSH
29235: LD_OWVAR 2
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 21
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 69
29262: ST_TO_ADDR
// if not tmp then
29263: LD_VAR 0 5
29267: NOT
29268: IFFALSE 29272
// exit ;
29270: GO 29426
// for i in tmp do
29272: LD_ADDR_VAR 0 1
29276: PUSH
29277: LD_VAR 0 5
29281: PUSH
29282: FOR_IN
29283: IFFALSE 29424
// begin d := rand ( 0 , 5 ) ;
29285: LD_ADDR_VAR 0 4
29289: PUSH
29290: LD_INT 0
29292: PPUSH
29293: LD_INT 5
29295: PPUSH
29296: CALL_OW 12
29300: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29301: LD_ADDR_VAR 0 2
29305: PUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 250
29315: PPUSH
29316: LD_VAR 0 4
29320: PPUSH
29321: LD_INT 3
29323: PPUSH
29324: LD_INT 12
29326: PPUSH
29327: CALL_OW 12
29331: PPUSH
29332: CALL_OW 272
29336: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29337: LD_ADDR_VAR 0 3
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 251
29351: PPUSH
29352: LD_VAR 0 4
29356: PPUSH
29357: LD_INT 3
29359: PPUSH
29360: LD_INT 12
29362: PPUSH
29363: CALL_OW 12
29367: PPUSH
29368: CALL_OW 273
29372: ST_TO_ADDR
// if ValidHex ( x , y ) then
29373: LD_VAR 0 2
29377: PPUSH
29378: LD_VAR 0 3
29382: PPUSH
29383: CALL_OW 488
29387: IFFALSE 29422
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29389: LD_VAR 0 1
29393: PPUSH
29394: LD_VAR 0 2
29398: PPUSH
29399: LD_VAR 0 3
29403: PPUSH
29404: LD_INT 3
29406: PPUSH
29407: LD_INT 6
29409: PPUSH
29410: CALL_OW 12
29414: PPUSH
29415: LD_INT 1
29417: PPUSH
29418: CALL_OW 483
// end ;
29422: GO 29282
29424: POP
29425: POP
// end ;
29426: PPOPN 5
29428: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29429: LD_EXP 66
29433: PUSH
29434: LD_EXP 101
29438: AND
29439: IFFALSE 29533
29441: GO 29443
29443: DISABLE
29444: LD_INT 0
29446: PPUSH
29447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29448: LD_ADDR_VAR 0 2
29452: PUSH
29453: LD_INT 22
29455: PUSH
29456: LD_OWVAR 2
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 32
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 21
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: PPUSH
29490: CALL_OW 69
29494: ST_TO_ADDR
// if not tmp then
29495: LD_VAR 0 2
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29533
// for i in tmp do
29504: LD_ADDR_VAR 0 1
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: FOR_IN
29515: IFFALSE 29531
// SetFuel ( i , 0 ) ;
29517: LD_VAR 0 1
29521: PPUSH
29522: LD_INT 0
29524: PPUSH
29525: CALL_OW 240
29529: GO 29514
29531: POP
29532: POP
// end ;
29533: PPOPN 2
29535: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29536: LD_EXP 66
29540: PUSH
29541: LD_EXP 102
29545: AND
29546: IFFALSE 29612
29548: GO 29550
29550: DISABLE
29551: LD_INT 0
29553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29554: LD_ADDR_VAR 0 1
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 30
29573: PUSH
29574: LD_INT 29
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 69
29589: ST_TO_ADDR
// if not tmp then
29590: LD_VAR 0 1
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29612
// DestroyUnit ( tmp [ 1 ] ) ;
29599: LD_VAR 0 1
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PPUSH
29608: CALL_OW 65
// end ;
29612: PPOPN 1
29614: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29615: LD_EXP 66
29619: PUSH
29620: LD_EXP 104
29624: AND
29625: IFFALSE 29754
29627: GO 29629
29629: DISABLE
29630: LD_INT 0
29632: PPUSH
// begin uc_side := 0 ;
29633: LD_ADDR_OWVAR 20
29637: PUSH
29638: LD_INT 0
29640: ST_TO_ADDR
// uc_nation := nation_arabian ;
29641: LD_ADDR_OWVAR 21
29645: PUSH
29646: LD_INT 2
29648: ST_TO_ADDR
// hc_gallery :=  ;
29649: LD_ADDR_OWVAR 33
29653: PUSH
29654: LD_STRING 
29656: ST_TO_ADDR
// hc_name :=  ;
29657: LD_ADDR_OWVAR 26
29661: PUSH
29662: LD_STRING 
29664: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29665: LD_INT 1
29667: PPUSH
29668: LD_INT 11
29670: PPUSH
29671: LD_INT 10
29673: PPUSH
29674: CALL_OW 380
// un := CreateHuman ;
29678: LD_ADDR_VAR 0 1
29682: PUSH
29683: CALL_OW 44
29687: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29688: LD_VAR 0 1
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29700: LD_INT 35
29702: PPUSH
29703: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_INT 22
29714: PUSH
29715: LD_OWVAR 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PPUSH
29724: CALL_OW 69
29728: PPUSH
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 74
29738: PPUSH
29739: CALL_OW 115
// until IsDead ( un ) ;
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 301
29752: IFFALSE 29700
// end ;
29754: PPOPN 1
29756: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29757: LD_EXP 66
29761: PUSH
29762: LD_EXP 106
29766: AND
29767: IFFALSE 29779
29769: GO 29771
29771: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29772: LD_STRING earthquake(getX(game), 0, 32)
29774: PPUSH
29775: CALL_OW 559
29779: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29780: LD_EXP 66
29784: PUSH
29785: LD_EXP 107
29789: AND
29790: IFFALSE 29881
29792: GO 29794
29794: DISABLE
29795: LD_INT 0
29797: PPUSH
// begin enable ;
29798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29799: LD_ADDR_VAR 0 1
29803: PUSH
29804: LD_INT 22
29806: PUSH
29807: LD_OWVAR 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 21
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 33
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: PPUSH
29841: CALL_OW 69
29845: ST_TO_ADDR
// if not tmp then
29846: LD_VAR 0 1
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 29881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 1
29862: PPUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 12
29872: ARRAY
29873: PPUSH
29874: LD_INT 1
29876: PPUSH
29877: CALL_OW 234
// end ;
29881: PPOPN 1
29883: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29884: LD_EXP 66
29888: PUSH
29889: LD_EXP 108
29893: AND
29894: IFFALSE 30035
29896: GO 29898
29898: DISABLE
29899: LD_INT 0
29901: PPUSH
29902: PPUSH
29903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29904: LD_ADDR_VAR 0 3
29908: PUSH
29909: LD_INT 22
29911: PUSH
29912: LD_OWVAR 2
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 25
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PPUSH
29935: CALL_OW 69
29939: ST_TO_ADDR
// if not tmp then
29940: LD_VAR 0 3
29944: NOT
29945: IFFALSE 29949
// exit ;
29947: GO 30035
// un := tmp [ rand ( 1 , tmp ) ] ;
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: LD_INT 1
29961: PPUSH
29962: LD_VAR 0 3
29966: PPUSH
29967: CALL_OW 12
29971: ARRAY
29972: ST_TO_ADDR
// if Crawls ( un ) then
29973: LD_VAR 0 2
29977: PPUSH
29978: CALL_OW 318
29982: IFFALSE 29993
// ComWalk ( un ) ;
29984: LD_VAR 0 2
29988: PPUSH
29989: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29993: LD_VAR 0 2
29997: PPUSH
29998: LD_INT 9
30000: PPUSH
30001: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30005: LD_INT 28
30007: PPUSH
30008: LD_OWVAR 2
30012: PPUSH
30013: LD_INT 2
30015: PPUSH
30016: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30020: LD_INT 29
30022: PPUSH
30023: LD_OWVAR 2
30027: PPUSH
30028: LD_INT 2
30030: PPUSH
30031: CALL_OW 322
// end ;
30035: PPOPN 3
30037: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30038: LD_EXP 66
30042: PUSH
30043: LD_EXP 109
30047: AND
30048: IFFALSE 30159
30050: GO 30052
30052: DISABLE
30053: LD_INT 0
30055: PPUSH
30056: PPUSH
30057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30058: LD_ADDR_VAR 0 3
30062: PUSH
30063: LD_INT 22
30065: PUSH
30066: LD_OWVAR 2
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 25
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 69
30093: ST_TO_ADDR
// if not tmp then
30094: LD_VAR 0 3
30098: NOT
30099: IFFALSE 30103
// exit ;
30101: GO 30159
// un := tmp [ rand ( 1 , tmp ) ] ;
30103: LD_ADDR_VAR 0 2
30107: PUSH
30108: LD_VAR 0 3
30112: PUSH
30113: LD_INT 1
30115: PPUSH
30116: LD_VAR 0 3
30120: PPUSH
30121: CALL_OW 12
30125: ARRAY
30126: ST_TO_ADDR
// if Crawls ( un ) then
30127: LD_VAR 0 2
30131: PPUSH
30132: CALL_OW 318
30136: IFFALSE 30147
// ComWalk ( un ) ;
30138: LD_VAR 0 2
30142: PPUSH
30143: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30147: LD_VAR 0 2
30151: PPUSH
30152: LD_INT 8
30154: PPUSH
30155: CALL_OW 336
// end ;
30159: PPOPN 3
30161: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30162: LD_EXP 66
30166: PUSH
30167: LD_EXP 110
30171: AND
30172: IFFALSE 30316
30174: GO 30176
30176: DISABLE
30177: LD_INT 0
30179: PPUSH
30180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30181: LD_ADDR_VAR 0 2
30185: PUSH
30186: LD_INT 22
30188: PUSH
30189: LD_OWVAR 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 21
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: LD_INT 34
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 34
30223: PUSH
30224: LD_INT 51
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 34
30233: PUSH
30234: LD_INT 32
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: PPUSH
30252: CALL_OW 69
30256: ST_TO_ADDR
// if not tmp then
30257: LD_VAR 0 2
30261: NOT
30262: IFFALSE 30266
// exit ;
30264: GO 30316
// for i in tmp do
30266: LD_ADDR_VAR 0 1
30270: PUSH
30271: LD_VAR 0 2
30275: PUSH
30276: FOR_IN
30277: IFFALSE 30314
// if GetCargo ( i , mat_artifact ) = 0 then
30279: LD_VAR 0 1
30283: PPUSH
30284: LD_INT 4
30286: PPUSH
30287: CALL_OW 289
30291: PUSH
30292: LD_INT 0
30294: EQUAL
30295: IFFALSE 30312
// SetCargo ( i , mat_siberit , 100 ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_INT 3
30304: PPUSH
30305: LD_INT 100
30307: PPUSH
30308: CALL_OW 290
30312: GO 30276
30314: POP
30315: POP
// end ;
30316: PPOPN 2
30318: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30319: LD_EXP 66
30323: PUSH
30324: LD_EXP 111
30328: AND
30329: IFFALSE 30512
30331: GO 30333
30333: DISABLE
30334: LD_INT 0
30336: PPUSH
30337: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30338: LD_ADDR_VAR 0 2
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: LD_OWVAR 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL_OW 69
30359: ST_TO_ADDR
// if not tmp then
30360: LD_VAR 0 2
30364: NOT
30365: IFFALSE 30369
// exit ;
30367: GO 30512
// for i := 1 to 2 do
30369: LD_ADDR_VAR 0 1
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_INT 2
30381: PUSH
30382: FOR_TO
30383: IFFALSE 30510
// begin uc_side := your_side ;
30385: LD_ADDR_OWVAR 20
30389: PUSH
30390: LD_OWVAR 2
30394: ST_TO_ADDR
// uc_nation := nation_american ;
30395: LD_ADDR_OWVAR 21
30399: PUSH
30400: LD_INT 1
30402: ST_TO_ADDR
// vc_chassis := us_morphling ;
30403: LD_ADDR_OWVAR 37
30407: PUSH
30408: LD_INT 5
30410: ST_TO_ADDR
// vc_engine := engine_siberite ;
30411: LD_ADDR_OWVAR 39
30415: PUSH
30416: LD_INT 3
30418: ST_TO_ADDR
// vc_control := control_computer ;
30419: LD_ADDR_OWVAR 38
30423: PUSH
30424: LD_INT 3
30426: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30427: LD_ADDR_OWVAR 40
30431: PUSH
30432: LD_INT 10
30434: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30435: LD_VAR 0 2
30439: PUSH
30440: LD_INT 1
30442: ARRAY
30443: PPUSH
30444: CALL_OW 310
30448: NOT
30449: IFFALSE 30496
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30451: CALL_OW 45
30455: PPUSH
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 1
30463: ARRAY
30464: PPUSH
30465: CALL_OW 250
30469: PPUSH
30470: LD_VAR 0 2
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: CALL_OW 251
30483: PPUSH
30484: LD_INT 12
30486: PPUSH
30487: LD_INT 1
30489: PPUSH
30490: CALL_OW 50
30494: GO 30508
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30496: CALL_OW 45
30500: PPUSH
30501: LD_INT 1
30503: PPUSH
30504: CALL_OW 51
// end ;
30508: GO 30382
30510: POP
30511: POP
// end ;
30512: PPOPN 2
30514: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30515: LD_EXP 66
30519: PUSH
30520: LD_EXP 112
30524: AND
30525: IFFALSE 30747
30527: GO 30529
30529: DISABLE
30530: LD_INT 0
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30538: LD_ADDR_VAR 0 6
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_OWVAR 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 21
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 23
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: PPUSH
30587: CALL_OW 69
30591: ST_TO_ADDR
// if not tmp then
30592: LD_VAR 0 6
30596: NOT
30597: IFFALSE 30601
// exit ;
30599: GO 30747
// s1 := rand ( 1 , 4 ) ;
30601: LD_ADDR_VAR 0 2
30605: PUSH
30606: LD_INT 1
30608: PPUSH
30609: LD_INT 4
30611: PPUSH
30612: CALL_OW 12
30616: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30617: LD_ADDR_VAR 0 4
30621: PUSH
30622: LD_VAR 0 6
30626: PUSH
30627: LD_INT 1
30629: ARRAY
30630: PPUSH
30631: LD_VAR 0 2
30635: PPUSH
30636: CALL_OW 259
30640: ST_TO_ADDR
// if s1 = 1 then
30641: LD_VAR 0 2
30645: PUSH
30646: LD_INT 1
30648: EQUAL
30649: IFFALSE 30669
// s2 := rand ( 2 , 4 ) else
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 2
30658: PPUSH
30659: LD_INT 4
30661: PPUSH
30662: CALL_OW 12
30666: ST_TO_ADDR
30667: GO 30677
// s2 := 1 ;
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 1
30676: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30677: LD_ADDR_VAR 0 5
30681: PUSH
30682: LD_VAR 0 6
30686: PUSH
30687: LD_INT 1
30689: ARRAY
30690: PPUSH
30691: LD_VAR 0 3
30695: PPUSH
30696: CALL_OW 259
30700: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30701: LD_VAR 0 6
30705: PUSH
30706: LD_INT 1
30708: ARRAY
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: LD_VAR 0 5
30719: PPUSH
30720: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30724: LD_VAR 0 6
30728: PUSH
30729: LD_INT 1
30731: ARRAY
30732: PPUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_VAR 0 4
30742: PPUSH
30743: CALL_OW 237
// end ;
30747: PPOPN 6
30749: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30750: LD_EXP 66
30754: PUSH
30755: LD_EXP 113
30759: AND
30760: IFFALSE 30839
30762: GO 30764
30764: DISABLE
30765: LD_INT 0
30767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30768: LD_ADDR_VAR 0 1
30772: PUSH
30773: LD_INT 22
30775: PUSH
30776: LD_OWVAR 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 30
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PPUSH
30799: CALL_OW 69
30803: ST_TO_ADDR
// if not tmp then
30804: LD_VAR 0 1
30808: NOT
30809: IFFALSE 30813
// exit ;
30811: GO 30839
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30813: LD_VAR 0 1
30817: PUSH
30818: LD_INT 1
30820: PPUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 12
30830: ARRAY
30831: PPUSH
30832: LD_INT 1
30834: PPUSH
30835: CALL_OW 234
// end ;
30839: PPOPN 1
30841: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30842: LD_EXP 66
30846: PUSH
30847: LD_EXP 114
30851: AND
30852: IFFALSE 30964
30854: GO 30856
30856: DISABLE
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30861: LD_ADDR_VAR 0 2
30865: PUSH
30866: LD_INT 22
30868: PUSH
30869: LD_OWVAR 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 30
30883: PUSH
30884: LD_INT 27
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 30
30893: PUSH
30894: LD_INT 26
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 30
30903: PUSH
30904: LD_INT 28
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 2
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 30964
// for i in tmp do
30935: LD_ADDR_VAR 0 1
30939: PUSH
30940: LD_VAR 0 2
30944: PUSH
30945: FOR_IN
30946: IFFALSE 30962
// SetLives ( i , 1 ) ;
30948: LD_VAR 0 1
30952: PPUSH
30953: LD_INT 1
30955: PPUSH
30956: CALL_OW 234
30960: GO 30945
30962: POP
30963: POP
// end ;
30964: PPOPN 2
30966: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30967: LD_EXP 66
30971: PUSH
30972: LD_EXP 115
30976: AND
30977: IFFALSE 31264
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin i := rand ( 1 , 7 ) ;
30987: LD_ADDR_VAR 0 1
30991: PUSH
30992: LD_INT 1
30994: PPUSH
30995: LD_INT 7
30997: PPUSH
30998: CALL_OW 12
31002: ST_TO_ADDR
// case i of 1 :
31003: LD_VAR 0 1
31007: PUSH
31008: LD_INT 1
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31026
31016: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31017: LD_STRING earthquake(getX(game), 0, 32)
31019: PPUSH
31020: CALL_OW 559
31024: GO 31264
31026: LD_INT 2
31028: DOUBLE
31029: EQUAL
31030: IFTRUE 31034
31032: GO 31048
31034: POP
// begin ToLua ( displayStucuk(); ) ;
31035: LD_STRING displayStucuk();
31037: PPUSH
31038: CALL_OW 559
// ResetFog ;
31042: CALL_OW 335
// end ; 3 :
31046: GO 31264
31048: LD_INT 3
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31160
31056: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31057: LD_ADDR_VAR 0 2
31061: PUSH
31062: LD_INT 22
31064: PUSH
31065: LD_OWVAR 2
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 25
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PPUSH
31088: CALL_OW 69
31092: ST_TO_ADDR
// if not tmp then
31093: LD_VAR 0 2
31097: NOT
31098: IFFALSE 31102
// exit ;
31100: GO 31264
// un := tmp [ rand ( 1 , tmp ) ] ;
31102: LD_ADDR_VAR 0 3
31106: PUSH
31107: LD_VAR 0 2
31111: PUSH
31112: LD_INT 1
31114: PPUSH
31115: LD_VAR 0 2
31119: PPUSH
31120: CALL_OW 12
31124: ARRAY
31125: ST_TO_ADDR
// if Crawls ( un ) then
31126: LD_VAR 0 3
31130: PPUSH
31131: CALL_OW 318
31135: IFFALSE 31146
// ComWalk ( un ) ;
31137: LD_VAR 0 3
31141: PPUSH
31142: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31146: LD_VAR 0 3
31150: PPUSH
31151: LD_INT 8
31153: PPUSH
31154: CALL_OW 336
// end ; 4 :
31158: GO 31264
31160: LD_INT 4
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31242
31168: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31169: LD_ADDR_VAR 0 2
31173: PUSH
31174: LD_INT 22
31176: PUSH
31177: LD_OWVAR 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 30
31188: PUSH
31189: LD_INT 29
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: ST_TO_ADDR
// if not tmp then
31205: LD_VAR 0 2
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31264
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31214: LD_VAR 0 2
31218: PUSH
31219: LD_INT 1
31221: ARRAY
31222: PPUSH
31223: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31227: LD_VAR 0 2
31231: PUSH
31232: LD_INT 1
31234: ARRAY
31235: PPUSH
31236: CALL_OW 65
// end ; 5 .. 7 :
31240: GO 31264
31242: LD_INT 5
31244: DOUBLE
31245: GREATEREQUAL
31246: IFFALSE 31254
31248: LD_INT 7
31250: DOUBLE
31251: LESSEQUAL
31252: IFTRUE 31256
31254: GO 31263
31256: POP
// StreamSibBomb ; end ;
31257: CALL 27501 0 0
31261: GO 31264
31263: POP
// end ;
31264: PPOPN 3
31266: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31267: LD_EXP 66
31271: PUSH
31272: LD_EXP 116
31276: AND
31277: IFFALSE 31433
31279: GO 31281
31281: DISABLE
31282: LD_INT 0
31284: PPUSH
31285: PPUSH
31286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31287: LD_ADDR_VAR 0 2
31291: PUSH
31292: LD_INT 81
31294: PUSH
31295: LD_OWVAR 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 21
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 21
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 69
31340: ST_TO_ADDR
// if not tmp then
31341: LD_VAR 0 2
31345: NOT
31346: IFFALSE 31350
// exit ;
31348: GO 31433
// p := 0 ;
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: LD_INT 0
31357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31358: LD_INT 35
31360: PPUSH
31361: CALL_OW 67
// p := p + 1 ;
31365: LD_ADDR_VAR 0 3
31369: PUSH
31370: LD_VAR 0 3
31374: PUSH
31375: LD_INT 1
31377: PLUS
31378: ST_TO_ADDR
// for i in tmp do
31379: LD_ADDR_VAR 0 1
31383: PUSH
31384: LD_VAR 0 2
31388: PUSH
31389: FOR_IN
31390: IFFALSE 31421
// if GetLives ( i ) < 1000 then
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 256
31401: PUSH
31402: LD_INT 1000
31404: LESS
31405: IFFALSE 31419
// SetLives ( i , 1000 ) ;
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_INT 1000
31414: PPUSH
31415: CALL_OW 234
31419: GO 31389
31421: POP
31422: POP
// until p > 20 ;
31423: LD_VAR 0 3
31427: PUSH
31428: LD_INT 20
31430: GREATER
31431: IFFALSE 31358
// end ;
31433: PPOPN 3
31435: END
// every 0 0$1 trigger StreamModeActive and sTime do
31436: LD_EXP 66
31440: PUSH
31441: LD_EXP 117
31445: AND
31446: IFFALSE 31481
31448: GO 31450
31450: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31451: LD_INT 28
31453: PPUSH
31454: LD_OWVAR 2
31458: PPUSH
31459: LD_INT 2
31461: PPUSH
31462: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31466: LD_INT 30
31468: PPUSH
31469: LD_OWVAR 2
31473: PPUSH
31474: LD_INT 2
31476: PPUSH
31477: CALL_OW 322
// end ;
31481: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31482: LD_EXP 66
31486: PUSH
31487: LD_EXP 118
31491: AND
31492: IFFALSE 31613
31494: GO 31496
31496: DISABLE
31497: LD_INT 0
31499: PPUSH
31500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31501: LD_ADDR_VAR 0 2
31505: PUSH
31506: LD_INT 22
31508: PUSH
31509: LD_OWVAR 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 21
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 23
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: PPUSH
31550: CALL_OW 69
31554: ST_TO_ADDR
// if not tmp then
31555: LD_VAR 0 2
31559: NOT
31560: IFFALSE 31564
// exit ;
31562: GO 31613
// for i in tmp do
31564: LD_ADDR_VAR 0 1
31568: PUSH
31569: LD_VAR 0 2
31573: PUSH
31574: FOR_IN
31575: IFFALSE 31611
// begin if Crawls ( i ) then
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 318
31586: IFFALSE 31597
// ComWalk ( i ) ;
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 138
// SetClass ( i , 2 ) ;
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_INT 2
31604: PPUSH
31605: CALL_OW 336
// end ;
31609: GO 31574
31611: POP
31612: POP
// end ;
31613: PPOPN 2
31615: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31616: LD_EXP 66
31620: PUSH
31621: LD_EXP 119
31625: AND
31626: IFFALSE 31914
31628: GO 31630
31630: DISABLE
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31636: LD_OWVAR 2
31640: PPUSH
31641: LD_INT 9
31643: PPUSH
31644: LD_INT 1
31646: PPUSH
31647: LD_INT 1
31649: PPUSH
31650: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31654: LD_INT 9
31656: PPUSH
31657: LD_OWVAR 2
31661: PPUSH
31662: CALL_OW 343
// uc_side := 9 ;
31666: LD_ADDR_OWVAR 20
31670: PUSH
31671: LD_INT 9
31673: ST_TO_ADDR
// uc_nation := 2 ;
31674: LD_ADDR_OWVAR 21
31678: PUSH
31679: LD_INT 2
31681: ST_TO_ADDR
// hc_name := Dark Warrior ;
31682: LD_ADDR_OWVAR 26
31686: PUSH
31687: LD_STRING Dark Warrior
31689: ST_TO_ADDR
// hc_gallery :=  ;
31690: LD_ADDR_OWVAR 33
31694: PUSH
31695: LD_STRING 
31697: ST_TO_ADDR
// hc_noskilllimit := true ;
31698: LD_ADDR_OWVAR 76
31702: PUSH
31703: LD_INT 1
31705: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31706: LD_ADDR_OWVAR 31
31710: PUSH
31711: LD_INT 30
31713: PUSH
31714: LD_INT 30
31716: PUSH
31717: LD_INT 30
31719: PUSH
31720: LD_INT 30
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// un := CreateHuman ;
31729: LD_ADDR_VAR 0 3
31733: PUSH
31734: CALL_OW 44
31738: ST_TO_ADDR
// hc_noskilllimit := false ;
31739: LD_ADDR_OWVAR 76
31743: PUSH
31744: LD_INT 0
31746: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31747: LD_VAR 0 3
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 51
// ToLua ( playRanger() ) ;
31759: LD_STRING playRanger()
31761: PPUSH
31762: CALL_OW 559
// p := 0 ;
31766: LD_ADDR_VAR 0 2
31770: PUSH
31771: LD_INT 0
31773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31774: LD_INT 35
31776: PPUSH
31777: CALL_OW 67
// p := p + 1 ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_VAR 0 2
31790: PUSH
31791: LD_INT 1
31793: PLUS
31794: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31795: LD_VAR 0 3
31799: PPUSH
31800: CALL_OW 256
31804: PUSH
31805: LD_INT 1000
31807: LESS
31808: IFFALSE 31822
// SetLives ( un , 1000 ) ;
31810: LD_VAR 0 3
31814: PPUSH
31815: LD_INT 1000
31817: PPUSH
31818: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31822: LD_VAR 0 3
31826: PPUSH
31827: LD_INT 81
31829: PUSH
31830: LD_OWVAR 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 91
31841: PUSH
31842: LD_VAR 0 3
31846: PUSH
31847: LD_INT 30
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PPUSH
31859: CALL_OW 69
31863: PPUSH
31864: LD_VAR 0 3
31868: PPUSH
31869: CALL_OW 74
31873: PPUSH
31874: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31878: LD_VAR 0 2
31882: PUSH
31883: LD_INT 80
31885: GREATER
31886: PUSH
31887: LD_VAR 0 3
31891: PPUSH
31892: CALL_OW 301
31896: OR
31897: IFFALSE 31774
// if un then
31899: LD_VAR 0 3
31903: IFFALSE 31914
// RemoveUnit ( un ) ;
31905: LD_VAR 0 3
31909: PPUSH
31910: CALL_OW 64
// end ;
31914: PPOPN 3
31916: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31917: LD_EXP 120
31921: IFFALSE 32037
31923: GO 31925
31925: DISABLE
31926: LD_INT 0
31928: PPUSH
31929: PPUSH
31930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31931: LD_ADDR_VAR 0 2
31935: PUSH
31936: LD_INT 81
31938: PUSH
31939: LD_OWVAR 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 21
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PPUSH
31962: CALL_OW 69
31966: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31967: LD_STRING playComputer()
31969: PPUSH
31970: CALL_OW 559
// if not tmp then
31974: LD_VAR 0 2
31978: NOT
31979: IFFALSE 31983
// exit ;
31981: GO 32037
// for i in tmp do
31983: LD_ADDR_VAR 0 1
31987: PUSH
31988: LD_VAR 0 2
31992: PUSH
31993: FOR_IN
31994: IFFALSE 32035
// for j := 1 to 4 do
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: DOUBLE
32002: LD_INT 1
32004: DEC
32005: ST_TO_ADDR
32006: LD_INT 4
32008: PUSH
32009: FOR_TO
32010: IFFALSE 32031
// SetSkill ( i , j , 10 ) ;
32012: LD_VAR 0 1
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: LD_INT 10
32024: PPUSH
32025: CALL_OW 237
32029: GO 32009
32031: POP
32032: POP
32033: GO 31993
32035: POP
32036: POP
// end ;
32037: PPOPN 3
32039: END
// every 0 0$1 trigger s30 do var i , tmp ;
32040: LD_EXP 121
32044: IFFALSE 32113
32046: GO 32048
32048: DISABLE
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32053: LD_ADDR_VAR 0 2
32057: PUSH
32058: LD_INT 22
32060: PUSH
32061: LD_OWVAR 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PPUSH
32070: CALL_OW 69
32074: ST_TO_ADDR
// if not tmp then
32075: LD_VAR 0 2
32079: NOT
32080: IFFALSE 32084
// exit ;
32082: GO 32113
// for i in tmp do
32084: LD_ADDR_VAR 0 1
32088: PUSH
32089: LD_VAR 0 2
32093: PUSH
32094: FOR_IN
32095: IFFALSE 32111
// SetLives ( i , 300 ) ;
32097: LD_VAR 0 1
32101: PPUSH
32102: LD_INT 300
32104: PPUSH
32105: CALL_OW 234
32109: GO 32094
32111: POP
32112: POP
// end ;
32113: PPOPN 2
32115: END
// every 0 0$1 trigger s60 do var i , tmp ;
32116: LD_EXP 122
32120: IFFALSE 32189
32122: GO 32124
32124: DISABLE
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32129: LD_ADDR_VAR 0 2
32133: PUSH
32134: LD_INT 22
32136: PUSH
32137: LD_OWVAR 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PPUSH
32146: CALL_OW 69
32150: ST_TO_ADDR
// if not tmp then
32151: LD_VAR 0 2
32155: NOT
32156: IFFALSE 32160
// exit ;
32158: GO 32189
// for i in tmp do
32160: LD_ADDR_VAR 0 1
32164: PUSH
32165: LD_VAR 0 2
32169: PUSH
32170: FOR_IN
32171: IFFALSE 32187
// SetLives ( i , 600 ) ;
32173: LD_VAR 0 1
32177: PPUSH
32178: LD_INT 600
32180: PPUSH
32181: CALL_OW 234
32185: GO 32170
32187: POP
32188: POP
// end ;
32189: PPOPN 2
32191: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32192: LD_INT 0
32194: PPUSH
// case cmd of 301 :
32195: LD_VAR 0 1
32199: PUSH
32200: LD_INT 301
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32240
32208: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32209: LD_VAR 0 6
32213: PPUSH
32214: LD_VAR 0 7
32218: PPUSH
32219: LD_VAR 0 8
32223: PPUSH
32224: LD_VAR 0 4
32228: PPUSH
32229: LD_VAR 0 5
32233: PPUSH
32234: CALL 33441 0 5
32238: GO 32361
32240: LD_INT 302
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32248
32246: GO 32285
32248: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32249: LD_VAR 0 6
32253: PPUSH
32254: LD_VAR 0 7
32258: PPUSH
32259: LD_VAR 0 8
32263: PPUSH
32264: LD_VAR 0 9
32268: PPUSH
32269: LD_VAR 0 4
32273: PPUSH
32274: LD_VAR 0 5
32278: PPUSH
32279: CALL 33532 0 6
32283: GO 32361
32285: LD_INT 303
32287: DOUBLE
32288: EQUAL
32289: IFTRUE 32293
32291: GO 32330
32293: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32294: LD_VAR 0 6
32298: PPUSH
32299: LD_VAR 0 7
32303: PPUSH
32304: LD_VAR 0 8
32308: PPUSH
32309: LD_VAR 0 9
32313: PPUSH
32314: LD_VAR 0 4
32318: PPUSH
32319: LD_VAR 0 5
32323: PPUSH
32324: CALL 32366 0 6
32328: GO 32361
32330: LD_INT 304
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32360
32338: POP
// hHackTeleport ( unit , x , y ) ; end ;
32339: LD_VAR 0 2
32343: PPUSH
32344: LD_VAR 0 4
32348: PPUSH
32349: LD_VAR 0 5
32353: PPUSH
32354: CALL 34125 0 3
32358: GO 32361
32360: POP
// end ;
32361: LD_VAR 0 12
32365: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32370: LD_VAR 0 1
32374: PUSH
32375: LD_INT 1
32377: LESS
32378: PUSH
32379: LD_VAR 0 1
32383: PUSH
32384: LD_INT 3
32386: GREATER
32387: OR
32388: PUSH
32389: LD_VAR 0 5
32393: PPUSH
32394: LD_VAR 0 6
32398: PPUSH
32399: CALL_OW 428
32403: OR
32404: IFFALSE 32408
// exit ;
32406: GO 33128
// uc_side := your_side ;
32408: LD_ADDR_OWVAR 20
32412: PUSH
32413: LD_OWVAR 2
32417: ST_TO_ADDR
// uc_nation := nation ;
32418: LD_ADDR_OWVAR 21
32422: PUSH
32423: LD_VAR 0 1
32427: ST_TO_ADDR
// bc_level = 1 ;
32428: LD_ADDR_OWVAR 43
32432: PUSH
32433: LD_INT 1
32435: ST_TO_ADDR
// case btype of 1 :
32436: LD_VAR 0 2
32440: PUSH
32441: LD_INT 1
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32460
32449: POP
// bc_type := b_depot ; 2 :
32450: LD_ADDR_OWVAR 42
32454: PUSH
32455: LD_INT 0
32457: ST_TO_ADDR
32458: GO 33072
32460: LD_INT 2
32462: DOUBLE
32463: EQUAL
32464: IFTRUE 32468
32466: GO 32479
32468: POP
// bc_type := b_warehouse ; 3 :
32469: LD_ADDR_OWVAR 42
32473: PUSH
32474: LD_INT 1
32476: ST_TO_ADDR
32477: GO 33072
32479: LD_INT 3
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32498
32487: POP
// bc_type := b_lab ; 4 .. 9 :
32488: LD_ADDR_OWVAR 42
32492: PUSH
32493: LD_INT 6
32495: ST_TO_ADDR
32496: GO 33072
32498: LD_INT 4
32500: DOUBLE
32501: GREATEREQUAL
32502: IFFALSE 32510
32504: LD_INT 9
32506: DOUBLE
32507: LESSEQUAL
32508: IFTRUE 32512
32510: GO 32564
32512: POP
// begin bc_type := b_lab_half ;
32513: LD_ADDR_OWVAR 42
32517: PUSH
32518: LD_INT 7
32520: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32521: LD_ADDR_OWVAR 44
32525: PUSH
32526: LD_INT 10
32528: PUSH
32529: LD_INT 11
32531: PUSH
32532: LD_INT 12
32534: PUSH
32535: LD_INT 15
32537: PUSH
32538: LD_INT 14
32540: PUSH
32541: LD_INT 13
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: PUSH
32552: LD_VAR 0 2
32556: PUSH
32557: LD_INT 3
32559: MINUS
32560: ARRAY
32561: ST_TO_ADDR
// end ; 10 .. 13 :
32562: GO 33072
32564: LD_INT 10
32566: DOUBLE
32567: GREATEREQUAL
32568: IFFALSE 32576
32570: LD_INT 13
32572: DOUBLE
32573: LESSEQUAL
32574: IFTRUE 32578
32576: GO 32655
32578: POP
// begin bc_type := b_lab_full ;
32579: LD_ADDR_OWVAR 42
32583: PUSH
32584: LD_INT 8
32586: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32587: LD_ADDR_OWVAR 44
32591: PUSH
32592: LD_INT 10
32594: PUSH
32595: LD_INT 12
32597: PUSH
32598: LD_INT 14
32600: PUSH
32601: LD_INT 13
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: PUSH
32610: LD_VAR 0 2
32614: PUSH
32615: LD_INT 9
32617: MINUS
32618: ARRAY
32619: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32620: LD_ADDR_OWVAR 45
32624: PUSH
32625: LD_INT 11
32627: PUSH
32628: LD_INT 15
32630: PUSH
32631: LD_INT 12
32633: PUSH
32634: LD_INT 15
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: PUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_INT 9
32650: MINUS
32651: ARRAY
32652: ST_TO_ADDR
// end ; 14 :
32653: GO 33072
32655: LD_INT 14
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32674
32663: POP
// bc_type := b_workshop ; 15 :
32664: LD_ADDR_OWVAR 42
32668: PUSH
32669: LD_INT 2
32671: ST_TO_ADDR
32672: GO 33072
32674: LD_INT 15
32676: DOUBLE
32677: EQUAL
32678: IFTRUE 32682
32680: GO 32693
32682: POP
// bc_type := b_factory ; 16 :
32683: LD_ADDR_OWVAR 42
32687: PUSH
32688: LD_INT 3
32690: ST_TO_ADDR
32691: GO 33072
32693: LD_INT 16
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32712
32701: POP
// bc_type := b_ext_gun ; 17 :
32702: LD_ADDR_OWVAR 42
32706: PUSH
32707: LD_INT 17
32709: ST_TO_ADDR
32710: GO 33072
32712: LD_INT 17
32714: DOUBLE
32715: EQUAL
32716: IFTRUE 32720
32718: GO 32748
32720: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32721: LD_ADDR_OWVAR 42
32725: PUSH
32726: LD_INT 19
32728: PUSH
32729: LD_INT 23
32731: PUSH
32732: LD_INT 19
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: PUSH
32740: LD_VAR 0 1
32744: ARRAY
32745: ST_TO_ADDR
32746: GO 33072
32748: LD_INT 18
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32767
32756: POP
// bc_type := b_ext_radar ; 19 :
32757: LD_ADDR_OWVAR 42
32761: PUSH
32762: LD_INT 20
32764: ST_TO_ADDR
32765: GO 33072
32767: LD_INT 19
32769: DOUBLE
32770: EQUAL
32771: IFTRUE 32775
32773: GO 32786
32775: POP
// bc_type := b_ext_radio ; 20 :
32776: LD_ADDR_OWVAR 42
32780: PUSH
32781: LD_INT 22
32783: ST_TO_ADDR
32784: GO 33072
32786: LD_INT 20
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32794
32792: GO 32805
32794: POP
// bc_type := b_ext_siberium ; 21 :
32795: LD_ADDR_OWVAR 42
32799: PUSH
32800: LD_INT 21
32802: ST_TO_ADDR
32803: GO 33072
32805: LD_INT 21
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32813
32811: GO 32824
32813: POP
// bc_type := b_ext_computer ; 22 :
32814: LD_ADDR_OWVAR 42
32818: PUSH
32819: LD_INT 24
32821: ST_TO_ADDR
32822: GO 33072
32824: LD_INT 22
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32843
32832: POP
// bc_type := b_ext_track ; 23 :
32833: LD_ADDR_OWVAR 42
32837: PUSH
32838: LD_INT 16
32840: ST_TO_ADDR
32841: GO 33072
32843: LD_INT 23
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32862
32851: POP
// bc_type := b_ext_laser ; 24 :
32852: LD_ADDR_OWVAR 42
32856: PUSH
32857: LD_INT 25
32859: ST_TO_ADDR
32860: GO 33072
32862: LD_INT 24
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32881
32870: POP
// bc_type := b_control_tower ; 25 :
32871: LD_ADDR_OWVAR 42
32875: PUSH
32876: LD_INT 36
32878: ST_TO_ADDR
32879: GO 33072
32881: LD_INT 25
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32900
32889: POP
// bc_type := b_breastwork ; 26 :
32890: LD_ADDR_OWVAR 42
32894: PUSH
32895: LD_INT 31
32897: ST_TO_ADDR
32898: GO 33072
32900: LD_INT 26
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32919
32908: POP
// bc_type := b_bunker ; 27 :
32909: LD_ADDR_OWVAR 42
32913: PUSH
32914: LD_INT 32
32916: ST_TO_ADDR
32917: GO 33072
32919: LD_INT 27
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32938
32927: POP
// bc_type := b_turret ; 28 :
32928: LD_ADDR_OWVAR 42
32932: PUSH
32933: LD_INT 33
32935: ST_TO_ADDR
32936: GO 33072
32938: LD_INT 28
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32957
32946: POP
// bc_type := b_armoury ; 29 :
32947: LD_ADDR_OWVAR 42
32951: PUSH
32952: LD_INT 4
32954: ST_TO_ADDR
32955: GO 33072
32957: LD_INT 29
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32976
32965: POP
// bc_type := b_barracks ; 30 :
32966: LD_ADDR_OWVAR 42
32970: PUSH
32971: LD_INT 5
32973: ST_TO_ADDR
32974: GO 33072
32976: LD_INT 30
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 32995
32984: POP
// bc_type := b_solar_power ; 31 :
32985: LD_ADDR_OWVAR 42
32989: PUSH
32990: LD_INT 27
32992: ST_TO_ADDR
32993: GO 33072
32995: LD_INT 31
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33014
33003: POP
// bc_type := b_oil_power ; 32 :
33004: LD_ADDR_OWVAR 42
33008: PUSH
33009: LD_INT 26
33011: ST_TO_ADDR
33012: GO 33072
33014: LD_INT 32
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33033
33022: POP
// bc_type := b_siberite_power ; 33 :
33023: LD_ADDR_OWVAR 42
33027: PUSH
33028: LD_INT 28
33030: ST_TO_ADDR
33031: GO 33072
33033: LD_INT 33
33035: DOUBLE
33036: EQUAL
33037: IFTRUE 33041
33039: GO 33052
33041: POP
// bc_type := b_oil_mine ; 34 :
33042: LD_ADDR_OWVAR 42
33046: PUSH
33047: LD_INT 29
33049: ST_TO_ADDR
33050: GO 33072
33052: LD_INT 34
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33071
33060: POP
// bc_type := b_siberite_mine ; end ;
33061: LD_ADDR_OWVAR 42
33065: PUSH
33066: LD_INT 30
33068: ST_TO_ADDR
33069: GO 33072
33071: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33072: LD_ADDR_VAR 0 8
33076: PUSH
33077: LD_VAR 0 5
33081: PPUSH
33082: LD_VAR 0 6
33086: PPUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: CALL_OW 47
33096: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33097: LD_OWVAR 42
33101: PUSH
33102: LD_INT 32
33104: PUSH
33105: LD_INT 33
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: IN
33112: IFFALSE 33128
// PlaceWeaponTurret ( b , weapon ) ;
33114: LD_VAR 0 8
33118: PPUSH
33119: LD_VAR 0 4
33123: PPUSH
33124: CALL_OW 431
// end ;
33128: LD_VAR 0 7
33132: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33133: LD_INT 0
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_INT 22
33146: PUSH
33147: LD_OWVAR 2
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: LD_INT 30
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 30
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PPUSH
33188: CALL_OW 69
33192: ST_TO_ADDR
// if not tmp then
33193: LD_VAR 0 4
33197: NOT
33198: IFFALSE 33202
// exit ;
33200: GO 33261
// for i in tmp do
33202: LD_ADDR_VAR 0 2
33206: PUSH
33207: LD_VAR 0 4
33211: PUSH
33212: FOR_IN
33213: IFFALSE 33259
// for j = 1 to 3 do
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: DOUBLE
33221: LD_INT 1
33223: DEC
33224: ST_TO_ADDR
33225: LD_INT 3
33227: PUSH
33228: FOR_TO
33229: IFFALSE 33255
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33231: LD_VAR 0 2
33235: PPUSH
33236: CALL_OW 274
33240: PPUSH
33241: LD_VAR 0 3
33245: PPUSH
33246: LD_INT 99999
33248: PPUSH
33249: CALL_OW 277
33253: GO 33228
33255: POP
33256: POP
33257: GO 33212
33259: POP
33260: POP
// end ;
33261: LD_VAR 0 1
33265: RET
// export function hHackSetLevel10 ; var i , j ; begin
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
33270: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33271: LD_ADDR_VAR 0 2
33275: PUSH
33276: LD_INT 21
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PPUSH
33286: CALL_OW 69
33290: PUSH
33291: FOR_IN
33292: IFFALSE 33344
// if IsSelected ( i ) then
33294: LD_VAR 0 2
33298: PPUSH
33299: CALL_OW 306
33303: IFFALSE 33342
// begin for j := 1 to 4 do
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: DOUBLE
33311: LD_INT 1
33313: DEC
33314: ST_TO_ADDR
33315: LD_INT 4
33317: PUSH
33318: FOR_TO
33319: IFFALSE 33340
// SetSkill ( i , j , 10 ) ;
33321: LD_VAR 0 2
33325: PPUSH
33326: LD_VAR 0 3
33330: PPUSH
33331: LD_INT 10
33333: PPUSH
33334: CALL_OW 237
33338: GO 33318
33340: POP
33341: POP
// end ;
33342: GO 33291
33344: POP
33345: POP
// end ;
33346: LD_VAR 0 1
33350: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33351: LD_INT 0
33353: PPUSH
33354: PPUSH
33355: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33356: LD_ADDR_VAR 0 2
33360: PUSH
33361: LD_INT 22
33363: PUSH
33364: LD_OWVAR 2
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 21
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PPUSH
33387: CALL_OW 69
33391: PUSH
33392: FOR_IN
33393: IFFALSE 33434
// begin for j := 1 to 4 do
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: DOUBLE
33401: LD_INT 1
33403: DEC
33404: ST_TO_ADDR
33405: LD_INT 4
33407: PUSH
33408: FOR_TO
33409: IFFALSE 33430
// SetSkill ( i , j , 10 ) ;
33411: LD_VAR 0 2
33415: PPUSH
33416: LD_VAR 0 3
33420: PPUSH
33421: LD_INT 10
33423: PPUSH
33424: CALL_OW 237
33428: GO 33408
33430: POP
33431: POP
// end ;
33432: GO 33392
33434: POP
33435: POP
// end ;
33436: LD_VAR 0 1
33440: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33441: LD_INT 0
33443: PPUSH
// uc_side := your_side ;
33444: LD_ADDR_OWVAR 20
33448: PUSH
33449: LD_OWVAR 2
33453: ST_TO_ADDR
// uc_nation := nation ;
33454: LD_ADDR_OWVAR 21
33458: PUSH
33459: LD_VAR 0 1
33463: ST_TO_ADDR
// InitHc ;
33464: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33468: LD_INT 0
33470: PPUSH
33471: LD_VAR 0 2
33475: PPUSH
33476: LD_VAR 0 3
33480: PPUSH
33481: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33485: LD_VAR 0 4
33489: PPUSH
33490: LD_VAR 0 5
33494: PPUSH
33495: CALL_OW 428
33499: PUSH
33500: LD_INT 0
33502: EQUAL
33503: IFFALSE 33527
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33505: CALL_OW 44
33509: PPUSH
33510: LD_VAR 0 4
33514: PPUSH
33515: LD_VAR 0 5
33519: PPUSH
33520: LD_INT 1
33522: PPUSH
33523: CALL_OW 48
// end ;
33527: LD_VAR 0 6
33531: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33532: LD_INT 0
33534: PPUSH
33535: PPUSH
// uc_side := your_side ;
33536: LD_ADDR_OWVAR 20
33540: PUSH
33541: LD_OWVAR 2
33545: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33546: LD_VAR 0 1
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: IN
33573: IFFALSE 33585
// uc_nation := nation_american else
33575: LD_ADDR_OWVAR 21
33579: PUSH
33580: LD_INT 1
33582: ST_TO_ADDR
33583: GO 33628
// if chassis in [ 11 , 12 , 13 , 14 ] then
33585: LD_VAR 0 1
33589: PUSH
33590: LD_INT 11
33592: PUSH
33593: LD_INT 12
33595: PUSH
33596: LD_INT 13
33598: PUSH
33599: LD_INT 14
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: IN
33608: IFFALSE 33620
// uc_nation := nation_arabian else
33610: LD_ADDR_OWVAR 21
33614: PUSH
33615: LD_INT 2
33617: ST_TO_ADDR
33618: GO 33628
// uc_nation := nation_russian ;
33620: LD_ADDR_OWVAR 21
33624: PUSH
33625: LD_INT 3
33627: ST_TO_ADDR
// vc_chassis := chassis ;
33628: LD_ADDR_OWVAR 37
33632: PUSH
33633: LD_VAR 0 1
33637: ST_TO_ADDR
// vc_engine := engine ;
33638: LD_ADDR_OWVAR 39
33642: PUSH
33643: LD_VAR 0 2
33647: ST_TO_ADDR
// vc_control := control ;
33648: LD_ADDR_OWVAR 38
33652: PUSH
33653: LD_VAR 0 3
33657: ST_TO_ADDR
// vc_weapon := weapon ;
33658: LD_ADDR_OWVAR 40
33662: PUSH
33663: LD_VAR 0 4
33667: ST_TO_ADDR
// un := CreateVehicle ;
33668: LD_ADDR_VAR 0 8
33672: PUSH
33673: CALL_OW 45
33677: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33678: LD_VAR 0 8
33682: PPUSH
33683: LD_INT 0
33685: PPUSH
33686: LD_INT 5
33688: PPUSH
33689: CALL_OW 12
33693: PPUSH
33694: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33698: LD_VAR 0 8
33702: PPUSH
33703: LD_VAR 0 5
33707: PPUSH
33708: LD_VAR 0 6
33712: PPUSH
33713: LD_INT 1
33715: PPUSH
33716: CALL_OW 48
// end ;
33720: LD_VAR 0 7
33724: RET
// export hInvincible ; every 1 do
33725: GO 33727
33727: DISABLE
// hInvincible := [ ] ;
33728: LD_ADDR_EXP 123
33732: PUSH
33733: EMPTY
33734: ST_TO_ADDR
33735: END
// every 10 do var i ;
33736: GO 33738
33738: DISABLE
33739: LD_INT 0
33741: PPUSH
// begin enable ;
33742: ENABLE
// if not hInvincible then
33743: LD_EXP 123
33747: NOT
33748: IFFALSE 33752
// exit ;
33750: GO 33796
// for i in hInvincible do
33752: LD_ADDR_VAR 0 1
33756: PUSH
33757: LD_EXP 123
33761: PUSH
33762: FOR_IN
33763: IFFALSE 33794
// if GetLives ( i ) < 1000 then
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 256
33774: PUSH
33775: LD_INT 1000
33777: LESS
33778: IFFALSE 33792
// SetLives ( i , 1000 ) ;
33780: LD_VAR 0 1
33784: PPUSH
33785: LD_INT 1000
33787: PPUSH
33788: CALL_OW 234
33792: GO 33762
33794: POP
33795: POP
// end ;
33796: PPOPN 1
33798: END
// export function hHackInvincible ; var i ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33803: LD_ADDR_VAR 0 2
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 21
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 21
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PPUSH
33836: CALL_OW 69
33840: PUSH
33841: FOR_IN
33842: IFFALSE 33903
// if IsSelected ( i ) then
33844: LD_VAR 0 2
33848: PPUSH
33849: CALL_OW 306
33853: IFFALSE 33901
// begin if i in hInvincible then
33855: LD_VAR 0 2
33859: PUSH
33860: LD_EXP 123
33864: IN
33865: IFFALSE 33885
// hInvincible := hInvincible diff i else
33867: LD_ADDR_EXP 123
33871: PUSH
33872: LD_EXP 123
33876: PUSH
33877: LD_VAR 0 2
33881: DIFF
33882: ST_TO_ADDR
33883: GO 33901
// hInvincible := hInvincible union i ;
33885: LD_ADDR_EXP 123
33889: PUSH
33890: LD_EXP 123
33894: PUSH
33895: LD_VAR 0 2
33899: UNION
33900: ST_TO_ADDR
// end ;
33901: GO 33841
33903: POP
33904: POP
// end ;
33905: LD_VAR 0 1
33909: RET
// export function hHackInvisible ; var i , j ; begin
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
33914: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33915: LD_ADDR_VAR 0 2
33919: PUSH
33920: LD_INT 21
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PPUSH
33930: CALL_OW 69
33934: PUSH
33935: FOR_IN
33936: IFFALSE 33960
// if IsSelected ( i ) then
33938: LD_VAR 0 2
33942: PPUSH
33943: CALL_OW 306
33947: IFFALSE 33958
// ComForceInvisible ( i ) ;
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 496
33958: GO 33935
33960: POP
33961: POP
// end ;
33962: LD_VAR 0 1
33966: RET
// export function hHackChangeYourSide ; begin
33967: LD_INT 0
33969: PPUSH
// if your_side = 8 then
33970: LD_OWVAR 2
33974: PUSH
33975: LD_INT 8
33977: EQUAL
33978: IFFALSE 33990
// your_side := 0 else
33980: LD_ADDR_OWVAR 2
33984: PUSH
33985: LD_INT 0
33987: ST_TO_ADDR
33988: GO 34004
// your_side := your_side + 1 ;
33990: LD_ADDR_OWVAR 2
33994: PUSH
33995: LD_OWVAR 2
33999: PUSH
34000: LD_INT 1
34002: PLUS
34003: ST_TO_ADDR
// end ;
34004: LD_VAR 0 1
34008: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34009: LD_INT 0
34011: PPUSH
34012: PPUSH
34013: PPUSH
// for i in all_units do
34014: LD_ADDR_VAR 0 2
34018: PUSH
34019: LD_OWVAR 3
34023: PUSH
34024: FOR_IN
34025: IFFALSE 34103
// if IsSelected ( i ) then
34027: LD_VAR 0 2
34031: PPUSH
34032: CALL_OW 306
34036: IFFALSE 34101
// begin j := GetSide ( i ) ;
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: LD_VAR 0 2
34047: PPUSH
34048: CALL_OW 255
34052: ST_TO_ADDR
// if j = 8 then
34053: LD_VAR 0 3
34057: PUSH
34058: LD_INT 8
34060: EQUAL
34061: IFFALSE 34073
// j := 0 else
34063: LD_ADDR_VAR 0 3
34067: PUSH
34068: LD_INT 0
34070: ST_TO_ADDR
34071: GO 34087
// j := j + 1 ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_VAR 0 3
34082: PUSH
34083: LD_INT 1
34085: PLUS
34086: ST_TO_ADDR
// SetSide ( i , j ) ;
34087: LD_VAR 0 2
34091: PPUSH
34092: LD_VAR 0 3
34096: PPUSH
34097: CALL_OW 235
// end ;
34101: GO 34024
34103: POP
34104: POP
// end ;
34105: LD_VAR 0 1
34109: RET
// export function hHackFog ; begin
34110: LD_INT 0
34112: PPUSH
// FogOff ( true ) ;
34113: LD_INT 1
34115: PPUSH
34116: CALL_OW 344
// end ;
34120: LD_VAR 0 1
34124: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34125: LD_INT 0
34127: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34128: LD_VAR 0 1
34132: PPUSH
34133: LD_VAR 0 2
34137: PPUSH
34138: LD_VAR 0 3
34142: PPUSH
34143: LD_INT 1
34145: PPUSH
34146: LD_INT 1
34148: PPUSH
34149: CALL_OW 483
// CenterOnXY ( x , y ) ;
34153: LD_VAR 0 2
34157: PPUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: CALL_OW 84
// end ;
34167: LD_VAR 0 4
34171: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34172: LD_INT 0
34174: PPUSH
34175: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34176: LD_VAR 0 1
34180: NOT
34181: PUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: CALL_OW 488
34196: NOT
34197: OR
34198: PUSH
34199: LD_VAR 0 1
34203: PPUSH
34204: CALL_OW 266
34208: PUSH
34209: LD_INT 3
34211: NONEQUAL
34212: PUSH
34213: LD_VAR 0 1
34217: PPUSH
34218: CALL_OW 247
34222: PUSH
34223: LD_INT 1
34225: EQUAL
34226: NOT
34227: AND
34228: OR
34229: IFFALSE 34233
// exit ;
34231: GO 34382
// if GetType ( factory ) = unit_human then
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL_OW 247
34242: PUSH
34243: LD_INT 1
34245: EQUAL
34246: IFFALSE 34263
// factory := IsInUnit ( factory ) ;
34248: LD_ADDR_VAR 0 1
34252: PUSH
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 310
34262: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 266
34272: PUSH
34273: LD_INT 3
34275: NONEQUAL
34276: IFFALSE 34280
// exit ;
34278: GO 34382
// if HexInfo ( x , y ) = factory then
34280: LD_VAR 0 2
34284: PPUSH
34285: LD_VAR 0 3
34289: PPUSH
34290: CALL_OW 428
34294: PUSH
34295: LD_VAR 0 1
34299: EQUAL
34300: IFFALSE 34327
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34302: LD_ADDR_EXP 124
34306: PUSH
34307: LD_EXP 124
34311: PPUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: LD_INT 0
34319: PPUSH
34320: CALL_OW 1
34324: ST_TO_ADDR
34325: GO 34378
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34327: LD_ADDR_EXP 124
34331: PUSH
34332: LD_EXP 124
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 255
34351: PUSH
34352: LD_VAR 0 1
34356: PUSH
34357: LD_VAR 0 2
34361: PUSH
34362: LD_VAR 0 3
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: PPUSH
34373: CALL_OW 1
34377: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34378: CALL 34387 0 0
// end ;
34382: LD_VAR 0 4
34386: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34387: LD_INT 0
34389: PPUSH
34390: PPUSH
34391: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34392: LD_STRING resetFactoryWaypoint();
34394: PPUSH
34395: CALL_OW 559
// if factoryWaypoints then
34399: LD_EXP 124
34403: IFFALSE 34529
// begin list := PrepareArray ( factoryWaypoints ) ;
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_EXP 124
34414: PPUSH
34415: CALL 80961 0 1
34419: ST_TO_ADDR
// for i := 1 to list do
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: DOUBLE
34426: LD_INT 1
34428: DEC
34429: ST_TO_ADDR
34430: LD_VAR 0 3
34434: PUSH
34435: FOR_TO
34436: IFFALSE 34527
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34438: LD_STRING setFactoryWaypointXY(
34440: PUSH
34441: LD_VAR 0 3
34445: PUSH
34446: LD_VAR 0 2
34450: ARRAY
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: STR
34456: PUSH
34457: LD_STRING ,
34459: STR
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: LD_VAR 0 2
34470: ARRAY
34471: PUSH
34472: LD_INT 2
34474: ARRAY
34475: STR
34476: PUSH
34477: LD_STRING ,
34479: STR
34480: PUSH
34481: LD_VAR 0 3
34485: PUSH
34486: LD_VAR 0 2
34490: ARRAY
34491: PUSH
34492: LD_INT 3
34494: ARRAY
34495: STR
34496: PUSH
34497: LD_STRING ,
34499: STR
34500: PUSH
34501: LD_VAR 0 3
34505: PUSH
34506: LD_VAR 0 2
34510: ARRAY
34511: PUSH
34512: LD_INT 4
34514: ARRAY
34515: STR
34516: PUSH
34517: LD_STRING )
34519: STR
34520: PPUSH
34521: CALL_OW 559
34525: GO 34435
34527: POP
34528: POP
// end ; end ;
34529: LD_VAR 0 1
34533: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34534: LD_INT 0
34536: PPUSH
// if HexInfo ( x , y ) = warehouse then
34537: LD_VAR 0 2
34541: PPUSH
34542: LD_VAR 0 3
34546: PPUSH
34547: CALL_OW 428
34551: PUSH
34552: LD_VAR 0 1
34556: EQUAL
34557: IFFALSE 34584
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34559: LD_ADDR_EXP 125
34563: PUSH
34564: LD_EXP 125
34568: PPUSH
34569: LD_VAR 0 1
34573: PPUSH
34574: LD_INT 0
34576: PPUSH
34577: CALL_OW 1
34581: ST_TO_ADDR
34582: GO 34635
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34584: LD_ADDR_EXP 125
34588: PUSH
34589: LD_EXP 125
34593: PPUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: LD_VAR 0 1
34603: PPUSH
34604: CALL_OW 255
34608: PUSH
34609: LD_VAR 0 1
34613: PUSH
34614: LD_VAR 0 2
34618: PUSH
34619: LD_VAR 0 3
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: PPUSH
34630: CALL_OW 1
34634: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34635: CALL 34644 0 0
// end ;
34639: LD_VAR 0 4
34643: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34644: LD_INT 0
34646: PPUSH
34647: PPUSH
34648: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34649: LD_STRING resetWarehouseGatheringPoints();
34651: PPUSH
34652: CALL_OW 559
// if warehouseGatheringPoints then
34656: LD_EXP 125
34660: IFFALSE 34786
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34662: LD_ADDR_VAR 0 3
34666: PUSH
34667: LD_EXP 125
34671: PPUSH
34672: CALL 80961 0 1
34676: ST_TO_ADDR
// for i := 1 to list do
34677: LD_ADDR_VAR 0 2
34681: PUSH
34682: DOUBLE
34683: LD_INT 1
34685: DEC
34686: ST_TO_ADDR
34687: LD_VAR 0 3
34691: PUSH
34692: FOR_TO
34693: IFFALSE 34784
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34695: LD_STRING setWarehouseGatheringPointXY(
34697: PUSH
34698: LD_VAR 0 3
34702: PUSH
34703: LD_VAR 0 2
34707: ARRAY
34708: PUSH
34709: LD_INT 1
34711: ARRAY
34712: STR
34713: PUSH
34714: LD_STRING ,
34716: STR
34717: PUSH
34718: LD_VAR 0 3
34722: PUSH
34723: LD_VAR 0 2
34727: ARRAY
34728: PUSH
34729: LD_INT 2
34731: ARRAY
34732: STR
34733: PUSH
34734: LD_STRING ,
34736: STR
34737: PUSH
34738: LD_VAR 0 3
34742: PUSH
34743: LD_VAR 0 2
34747: ARRAY
34748: PUSH
34749: LD_INT 3
34751: ARRAY
34752: STR
34753: PUSH
34754: LD_STRING ,
34756: STR
34757: PUSH
34758: LD_VAR 0 3
34762: PUSH
34763: LD_VAR 0 2
34767: ARRAY
34768: PUSH
34769: LD_INT 4
34771: ARRAY
34772: STR
34773: PUSH
34774: LD_STRING )
34776: STR
34777: PPUSH
34778: CALL_OW 559
34782: GO 34692
34784: POP
34785: POP
// end ; end ;
34786: LD_VAR 0 1
34790: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34791: LD_EXP 125
34795: IFFALSE 35482
34797: GO 34799
34799: DISABLE
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
// begin enable ;
34811: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_EXP 125
34821: PPUSH
34822: CALL 80961 0 1
34826: ST_TO_ADDR
// if not list then
34827: LD_VAR 0 3
34831: NOT
34832: IFFALSE 34836
// exit ;
34834: GO 35482
// for i := 1 to list do
34836: LD_ADDR_VAR 0 1
34840: PUSH
34841: DOUBLE
34842: LD_INT 1
34844: DEC
34845: ST_TO_ADDR
34846: LD_VAR 0 3
34850: PUSH
34851: FOR_TO
34852: IFFALSE 35480
// begin depot := list [ i ] [ 2 ] ;
34854: LD_ADDR_VAR 0 8
34858: PUSH
34859: LD_VAR 0 3
34863: PUSH
34864: LD_VAR 0 1
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34874: LD_ADDR_VAR 0 5
34878: PUSH
34879: LD_VAR 0 3
34883: PUSH
34884: LD_VAR 0 1
34888: ARRAY
34889: PUSH
34890: LD_INT 1
34892: ARRAY
34893: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34894: LD_VAR 0 8
34898: PPUSH
34899: CALL_OW 301
34903: PUSH
34904: LD_VAR 0 5
34908: PUSH
34909: LD_VAR 0 8
34913: PPUSH
34914: CALL_OW 255
34918: NONEQUAL
34919: OR
34920: IFFALSE 34949
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34922: LD_ADDR_EXP 125
34926: PUSH
34927: LD_EXP 125
34931: PPUSH
34932: LD_VAR 0 8
34936: PPUSH
34937: LD_INT 0
34939: PPUSH
34940: CALL_OW 1
34944: ST_TO_ADDR
// exit ;
34945: POP
34946: POP
34947: GO 35482
// end ; x := list [ i ] [ 3 ] ;
34949: LD_ADDR_VAR 0 6
34953: PUSH
34954: LD_VAR 0 3
34958: PUSH
34959: LD_VAR 0 1
34963: ARRAY
34964: PUSH
34965: LD_INT 3
34967: ARRAY
34968: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34969: LD_ADDR_VAR 0 7
34973: PUSH
34974: LD_VAR 0 3
34978: PUSH
34979: LD_VAR 0 1
34983: ARRAY
34984: PUSH
34985: LD_INT 4
34987: ARRAY
34988: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_VAR 0 6
34998: PPUSH
34999: LD_VAR 0 7
35003: PPUSH
35004: LD_INT 16
35006: PPUSH
35007: CALL 79545 0 3
35011: ST_TO_ADDR
// if not cratesNearbyPoint then
35012: LD_VAR 0 9
35016: NOT
35017: IFFALSE 35023
// exit ;
35019: POP
35020: POP
35021: GO 35482
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35023: LD_ADDR_VAR 0 4
35027: PUSH
35028: LD_INT 22
35030: PUSH
35031: LD_VAR 0 5
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 60
35045: PUSH
35046: EMPTY
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 91
35055: PUSH
35056: LD_VAR 0 8
35060: PUSH
35061: LD_INT 6
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 25
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 25
35084: PUSH
35085: LD_INT 16
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: PPUSH
35103: CALL_OW 69
35107: PUSH
35108: LD_VAR 0 8
35112: PPUSH
35113: CALL_OW 313
35117: PPUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 60
35123: PUSH
35124: EMPTY
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 25
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 25
35146: PUSH
35147: LD_INT 16
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PPUSH
35163: CALL_OW 72
35167: UNION
35168: ST_TO_ADDR
// if tmp then
35169: LD_VAR 0 4
35173: IFFALSE 35253
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_VAR 0 4
35184: PPUSH
35185: LD_INT 3
35187: PPUSH
35188: CALL 77512 0 2
35192: ST_TO_ADDR
// for j in tmp do
35193: LD_ADDR_VAR 0 2
35197: PUSH
35198: LD_VAR 0 4
35202: PUSH
35203: FOR_IN
35204: IFFALSE 35247
// begin if IsInUnit ( j ) then
35206: LD_VAR 0 2
35210: PPUSH
35211: CALL_OW 310
35215: IFFALSE 35226
// ComExit ( j ) ;
35217: LD_VAR 0 2
35221: PPUSH
35222: CALL 77595 0 1
// AddComCollect ( j , x , y ) ;
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_VAR 0 6
35235: PPUSH
35236: LD_VAR 0 7
35240: PPUSH
35241: CALL_OW 177
// end ;
35245: GO 35203
35247: POP
35248: POP
// exit ;
35249: POP
35250: POP
35251: GO 35482
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35253: LD_ADDR_VAR 0 4
35257: PUSH
35258: LD_INT 22
35260: PUSH
35261: LD_VAR 0 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 91
35272: PUSH
35273: LD_VAR 0 8
35277: PUSH
35278: LD_INT 8
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 34
35291: PUSH
35292: LD_INT 12
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 34
35301: PUSH
35302: LD_INT 51
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 34
35311: PUSH
35312: LD_INT 32
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 34
35321: PUSH
35322: LD_EXP 49
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: PPUSH
35343: CALL_OW 69
35347: ST_TO_ADDR
// if tmp then
35348: LD_VAR 0 4
35352: IFFALSE 35478
// begin for j in tmp do
35354: LD_ADDR_VAR 0 2
35358: PUSH
35359: LD_VAR 0 4
35363: PUSH
35364: FOR_IN
35365: IFFALSE 35476
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35367: LD_VAR 0 2
35371: PPUSH
35372: CALL_OW 262
35376: PUSH
35377: LD_INT 3
35379: EQUAL
35380: PUSH
35381: LD_VAR 0 2
35385: PPUSH
35386: CALL_OW 261
35390: PUSH
35391: LD_INT 20
35393: GREATER
35394: OR
35395: PUSH
35396: LD_VAR 0 2
35400: PPUSH
35401: CALL_OW 314
35405: NOT
35406: AND
35407: PUSH
35408: LD_VAR 0 2
35412: PPUSH
35413: CALL_OW 263
35417: PUSH
35418: LD_INT 1
35420: NONEQUAL
35421: PUSH
35422: LD_VAR 0 2
35426: PPUSH
35427: CALL_OW 311
35431: OR
35432: AND
35433: IFFALSE 35474
// begin ComCollect ( j , x , y ) ;
35435: LD_VAR 0 2
35439: PPUSH
35440: LD_VAR 0 6
35444: PPUSH
35445: LD_VAR 0 7
35449: PPUSH
35450: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35454: LD_VAR 0 2
35458: PPUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: CALL_OW 172
// exit ;
35468: POP
35469: POP
35470: POP
35471: POP
35472: GO 35482
// end ;
35474: GO 35364
35476: POP
35477: POP
// end ; end ;
35478: GO 34851
35480: POP
35481: POP
// end ; end_of_file
35482: PPOPN 9
35484: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35485: LD_INT 0
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 264
35500: PUSH
35501: LD_EXP 52
35505: EQUAL
35506: IFFALSE 35578
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35508: LD_INT 68
35510: PPUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 255
35520: PPUSH
35521: CALL_OW 321
35525: PUSH
35526: LD_INT 2
35528: EQUAL
35529: IFFALSE 35541
// eff := 70 else
35531: LD_ADDR_VAR 0 4
35535: PUSH
35536: LD_INT 70
35538: ST_TO_ADDR
35539: GO 35549
// eff := 30 ;
35541: LD_ADDR_VAR 0 4
35545: PUSH
35546: LD_INT 30
35548: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 250
35558: PPUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 251
35568: PPUSH
35569: LD_VAR 0 4
35573: PPUSH
35574: CALL_OW 495
// end ; end ;
35578: LD_VAR 0 2
35582: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35583: LD_INT 0
35585: PPUSH
// end ;
35586: LD_VAR 0 4
35590: RET
// export function SOS_Command ( cmd ) ; begin
35591: LD_INT 0
35593: PPUSH
// end ;
35594: LD_VAR 0 2
35598: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35599: LD_INT 0
35601: PPUSH
// end ;
35602: LD_VAR 0 6
35606: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35607: LD_INT 0
35609: PPUSH
35610: PPUSH
// if not vehicle or not factory then
35611: LD_VAR 0 1
35615: NOT
35616: PUSH
35617: LD_VAR 0 2
35621: NOT
35622: OR
35623: IFFALSE 35627
// exit ;
35625: GO 35858
// if factoryWaypoints >= factory then
35627: LD_EXP 124
35631: PUSH
35632: LD_VAR 0 2
35636: GREATEREQUAL
35637: IFFALSE 35858
// if factoryWaypoints [ factory ] then
35639: LD_EXP 124
35643: PUSH
35644: LD_VAR 0 2
35648: ARRAY
35649: IFFALSE 35858
// begin if GetControl ( vehicle ) = control_manual then
35651: LD_VAR 0 1
35655: PPUSH
35656: CALL_OW 263
35660: PUSH
35661: LD_INT 1
35663: EQUAL
35664: IFFALSE 35745
// begin driver := IsDrivenBy ( vehicle ) ;
35666: LD_ADDR_VAR 0 4
35670: PUSH
35671: LD_VAR 0 1
35675: PPUSH
35676: CALL_OW 311
35680: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35681: LD_VAR 0 4
35685: PPUSH
35686: LD_EXP 124
35690: PUSH
35691: LD_VAR 0 2
35695: ARRAY
35696: PUSH
35697: LD_INT 3
35699: ARRAY
35700: PPUSH
35701: LD_EXP 124
35705: PUSH
35706: LD_VAR 0 2
35710: ARRAY
35711: PUSH
35712: LD_INT 4
35714: ARRAY
35715: PPUSH
35716: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35720: LD_VAR 0 4
35724: PPUSH
35725: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35729: LD_VAR 0 4
35733: PPUSH
35734: LD_VAR 0 2
35738: PPUSH
35739: CALL_OW 180
// end else
35743: GO 35858
// if GetControl ( vehicle ) = control_remote then
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 263
35754: PUSH
35755: LD_INT 2
35757: EQUAL
35758: IFFALSE 35819
// begin wait ( 0 0$2 ) ;
35760: LD_INT 70
35762: PPUSH
35763: CALL_OW 67
// if Connect ( vehicle ) then
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL 47906 0 1
35776: IFFALSE 35817
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35778: LD_VAR 0 1
35782: PPUSH
35783: LD_EXP 124
35787: PUSH
35788: LD_VAR 0 2
35792: ARRAY
35793: PUSH
35794: LD_INT 3
35796: ARRAY
35797: PPUSH
35798: LD_EXP 124
35802: PUSH
35803: LD_VAR 0 2
35807: ARRAY
35808: PUSH
35809: LD_INT 4
35811: ARRAY
35812: PPUSH
35813: CALL_OW 171
// end else
35817: GO 35858
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35819: LD_VAR 0 1
35823: PPUSH
35824: LD_EXP 124
35828: PUSH
35829: LD_VAR 0 2
35833: ARRAY
35834: PUSH
35835: LD_INT 3
35837: ARRAY
35838: PPUSH
35839: LD_EXP 124
35843: PUSH
35844: LD_VAR 0 2
35848: ARRAY
35849: PUSH
35850: LD_INT 4
35852: ARRAY
35853: PPUSH
35854: CALL_OW 171
// end ; end ;
35858: LD_VAR 0 3
35862: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35863: LD_INT 0
35865: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35866: LD_VAR 0 1
35870: PUSH
35871: LD_INT 250
35873: EQUAL
35874: PUSH
35875: LD_VAR 0 2
35879: PPUSH
35880: CALL_OW 264
35884: PUSH
35885: LD_EXP 55
35889: EQUAL
35890: AND
35891: IFFALSE 35912
// MinerPlaceMine ( unit , x , y ) ;
35893: LD_VAR 0 2
35897: PPUSH
35898: LD_VAR 0 4
35902: PPUSH
35903: LD_VAR 0 5
35907: PPUSH
35908: CALL 38311 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35912: LD_VAR 0 1
35916: PUSH
35917: LD_INT 251
35919: EQUAL
35920: PUSH
35921: LD_VAR 0 2
35925: PPUSH
35926: CALL_OW 264
35930: PUSH
35931: LD_EXP 55
35935: EQUAL
35936: AND
35937: IFFALSE 35958
// MinerDetonateMine ( unit , x , y ) ;
35939: LD_VAR 0 2
35943: PPUSH
35944: LD_VAR 0 4
35948: PPUSH
35949: LD_VAR 0 5
35953: PPUSH
35954: CALL 38588 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35958: LD_VAR 0 1
35962: PUSH
35963: LD_INT 252
35965: EQUAL
35966: PUSH
35967: LD_VAR 0 2
35971: PPUSH
35972: CALL_OW 264
35976: PUSH
35977: LD_EXP 55
35981: EQUAL
35982: AND
35983: IFFALSE 36004
// MinerCreateMinefield ( unit , x , y ) ;
35985: LD_VAR 0 2
35989: PPUSH
35990: LD_VAR 0 4
35994: PPUSH
35995: LD_VAR 0 5
35999: PPUSH
36000: CALL 39005 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36004: LD_VAR 0 1
36008: PUSH
36009: LD_INT 253
36011: EQUAL
36012: PUSH
36013: LD_VAR 0 2
36017: PPUSH
36018: CALL_OW 257
36022: PUSH
36023: LD_INT 5
36025: EQUAL
36026: AND
36027: IFFALSE 36048
// ComBinocular ( unit , x , y ) ;
36029: LD_VAR 0 2
36033: PPUSH
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL 39376 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36048: LD_VAR 0 1
36052: PUSH
36053: LD_INT 254
36055: EQUAL
36056: PUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: CALL_OW 264
36066: PUSH
36067: LD_EXP 50
36071: EQUAL
36072: AND
36073: PUSH
36074: LD_VAR 0 3
36078: PPUSH
36079: CALL_OW 263
36083: PUSH
36084: LD_INT 3
36086: EQUAL
36087: AND
36088: IFFALSE 36104
// HackDestroyVehicle ( unit , selectedUnit ) ;
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: CALL 37671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36104: LD_VAR 0 1
36108: PUSH
36109: LD_INT 255
36111: EQUAL
36112: PUSH
36113: LD_VAR 0 2
36117: PPUSH
36118: CALL_OW 264
36122: PUSH
36123: LD_INT 14
36125: PUSH
36126: LD_INT 53
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: IN
36133: AND
36134: PUSH
36135: LD_VAR 0 4
36139: PPUSH
36140: LD_VAR 0 5
36144: PPUSH
36145: CALL_OW 488
36149: AND
36150: IFFALSE 36174
// CutTreeXYR ( unit , x , y , 12 ) ;
36152: LD_VAR 0 2
36156: PPUSH
36157: LD_VAR 0 4
36161: PPUSH
36162: LD_VAR 0 5
36166: PPUSH
36167: LD_INT 12
36169: PPUSH
36170: CALL 36237 0 4
// if cmd = 256 then
36174: LD_VAR 0 1
36178: PUSH
36179: LD_INT 256
36181: EQUAL
36182: IFFALSE 36203
// SetFactoryWaypoint ( unit , x , y ) ;
36184: LD_VAR 0 2
36188: PPUSH
36189: LD_VAR 0 4
36193: PPUSH
36194: LD_VAR 0 5
36198: PPUSH
36199: CALL 34172 0 3
// if cmd = 257 then
36203: LD_VAR 0 1
36207: PUSH
36208: LD_INT 257
36210: EQUAL
36211: IFFALSE 36232
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36213: LD_VAR 0 2
36217: PPUSH
36218: LD_VAR 0 4
36222: PPUSH
36223: LD_VAR 0 5
36227: PPUSH
36228: CALL 34534 0 3
// end ;
36232: LD_VAR 0 6
36236: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36248: LD_VAR 0 1
36252: NOT
36253: PUSH
36254: LD_VAR 0 2
36258: PPUSH
36259: LD_VAR 0 3
36263: PPUSH
36264: CALL_OW 488
36268: NOT
36269: OR
36270: PUSH
36271: LD_VAR 0 4
36275: NOT
36276: OR
36277: IFFALSE 36281
// exit ;
36279: GO 36621
// list := [ ] ;
36281: LD_ADDR_VAR 0 13
36285: PUSH
36286: EMPTY
36287: ST_TO_ADDR
// if x - r < 0 then
36288: LD_VAR 0 2
36292: PUSH
36293: LD_VAR 0 4
36297: MINUS
36298: PUSH
36299: LD_INT 0
36301: LESS
36302: IFFALSE 36314
// min_x := 0 else
36304: LD_ADDR_VAR 0 7
36308: PUSH
36309: LD_INT 0
36311: ST_TO_ADDR
36312: GO 36330
// min_x := x - r ;
36314: LD_ADDR_VAR 0 7
36318: PUSH
36319: LD_VAR 0 2
36323: PUSH
36324: LD_VAR 0 4
36328: MINUS
36329: ST_TO_ADDR
// if y - r < 0 then
36330: LD_VAR 0 3
36334: PUSH
36335: LD_VAR 0 4
36339: MINUS
36340: PUSH
36341: LD_INT 0
36343: LESS
36344: IFFALSE 36356
// min_y := 0 else
36346: LD_ADDR_VAR 0 8
36350: PUSH
36351: LD_INT 0
36353: ST_TO_ADDR
36354: GO 36372
// min_y := y - r ;
36356: LD_ADDR_VAR 0 8
36360: PUSH
36361: LD_VAR 0 3
36365: PUSH
36366: LD_VAR 0 4
36370: MINUS
36371: ST_TO_ADDR
// max_x := x + r ;
36372: LD_ADDR_VAR 0 9
36376: PUSH
36377: LD_VAR 0 2
36381: PUSH
36382: LD_VAR 0 4
36386: PLUS
36387: ST_TO_ADDR
// max_y := y + r ;
36388: LD_ADDR_VAR 0 10
36392: PUSH
36393: LD_VAR 0 3
36397: PUSH
36398: LD_VAR 0 4
36402: PLUS
36403: ST_TO_ADDR
// for _x = min_x to max_x do
36404: LD_ADDR_VAR 0 11
36408: PUSH
36409: DOUBLE
36410: LD_VAR 0 7
36414: DEC
36415: ST_TO_ADDR
36416: LD_VAR 0 9
36420: PUSH
36421: FOR_TO
36422: IFFALSE 36539
// for _y = min_y to max_y do
36424: LD_ADDR_VAR 0 12
36428: PUSH
36429: DOUBLE
36430: LD_VAR 0 8
36434: DEC
36435: ST_TO_ADDR
36436: LD_VAR 0 10
36440: PUSH
36441: FOR_TO
36442: IFFALSE 36535
// begin if not ValidHex ( _x , _y ) then
36444: LD_VAR 0 11
36448: PPUSH
36449: LD_VAR 0 12
36453: PPUSH
36454: CALL_OW 488
36458: NOT
36459: IFFALSE 36463
// continue ;
36461: GO 36441
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36463: LD_VAR 0 11
36467: PPUSH
36468: LD_VAR 0 12
36472: PPUSH
36473: CALL_OW 351
36477: PUSH
36478: LD_VAR 0 11
36482: PPUSH
36483: LD_VAR 0 12
36487: PPUSH
36488: CALL_OW 554
36492: AND
36493: IFFALSE 36533
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36495: LD_ADDR_VAR 0 13
36499: PUSH
36500: LD_VAR 0 13
36504: PPUSH
36505: LD_VAR 0 13
36509: PUSH
36510: LD_INT 1
36512: PLUS
36513: PPUSH
36514: LD_VAR 0 11
36518: PUSH
36519: LD_VAR 0 12
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 2
36532: ST_TO_ADDR
// end ;
36533: GO 36441
36535: POP
36536: POP
36537: GO 36421
36539: POP
36540: POP
// if not list then
36541: LD_VAR 0 13
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 36621
// for i in list do
36550: LD_ADDR_VAR 0 6
36554: PUSH
36555: LD_VAR 0 13
36559: PUSH
36560: FOR_IN
36561: IFFALSE 36619
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_STRING M
36570: PUSH
36571: LD_VAR 0 6
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PUSH
36580: LD_VAR 0 6
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: PUSH
36610: EMPTY
36611: LIST
36612: PPUSH
36613: CALL_OW 447
36617: GO 36560
36619: POP
36620: POP
// end ;
36621: LD_VAR 0 5
36625: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36626: LD_EXP 127
36630: NOT
36631: IFFALSE 36681
36633: GO 36635
36635: DISABLE
// begin initHack := true ;
36636: LD_ADDR_EXP 127
36640: PUSH
36641: LD_INT 1
36643: ST_TO_ADDR
// hackTanks := [ ] ;
36644: LD_ADDR_EXP 128
36648: PUSH
36649: EMPTY
36650: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36651: LD_ADDR_EXP 129
36655: PUSH
36656: EMPTY
36657: ST_TO_ADDR
// hackLimit := 3 ;
36658: LD_ADDR_EXP 130
36662: PUSH
36663: LD_INT 3
36665: ST_TO_ADDR
// hackDist := 12 ;
36666: LD_ADDR_EXP 131
36670: PUSH
36671: LD_INT 12
36673: ST_TO_ADDR
// hackCounter := [ ] ;
36674: LD_ADDR_EXP 132
36678: PUSH
36679: EMPTY
36680: ST_TO_ADDR
// end ;
36681: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36682: LD_EXP 127
36686: PUSH
36687: LD_INT 34
36689: PUSH
36690: LD_EXP 50
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PPUSH
36699: CALL_OW 69
36703: AND
36704: IFFALSE 36959
36706: GO 36708
36708: DISABLE
36709: LD_INT 0
36711: PPUSH
36712: PPUSH
// begin enable ;
36713: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36714: LD_ADDR_VAR 0 1
36718: PUSH
36719: LD_INT 34
36721: PUSH
36722: LD_EXP 50
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PPUSH
36731: CALL_OW 69
36735: PUSH
36736: FOR_IN
36737: IFFALSE 36957
// begin if not i in hackTanks then
36739: LD_VAR 0 1
36743: PUSH
36744: LD_EXP 128
36748: IN
36749: NOT
36750: IFFALSE 36833
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36752: LD_ADDR_EXP 128
36756: PUSH
36757: LD_EXP 128
36761: PPUSH
36762: LD_EXP 128
36766: PUSH
36767: LD_INT 1
36769: PLUS
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36781: LD_ADDR_EXP 129
36785: PUSH
36786: LD_EXP 129
36790: PPUSH
36791: LD_EXP 129
36795: PUSH
36796: LD_INT 1
36798: PLUS
36799: PPUSH
36800: EMPTY
36801: PPUSH
36802: CALL_OW 1
36806: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36807: LD_ADDR_EXP 132
36811: PUSH
36812: LD_EXP 132
36816: PPUSH
36817: LD_EXP 132
36821: PUSH
36822: LD_INT 1
36824: PLUS
36825: PPUSH
36826: EMPTY
36827: PPUSH
36828: CALL_OW 1
36832: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36833: LD_VAR 0 1
36837: PPUSH
36838: CALL_OW 302
36842: NOT
36843: IFFALSE 36856
// begin HackUnlinkAll ( i ) ;
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL 36962 0 1
// continue ;
36854: GO 36736
// end ; HackCheckCapturedStatus ( i ) ;
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL 37405 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36865: LD_ADDR_VAR 0 2
36869: PUSH
36870: LD_INT 81
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 255
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 33
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 91
36899: PUSH
36900: LD_VAR 0 1
36904: PUSH
36905: LD_EXP 131
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 50
36917: PUSH
36918: EMPTY
36919: LIST
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: PPUSH
36927: CALL_OW 69
36931: ST_TO_ADDR
// if not tmp then
36932: LD_VAR 0 2
36936: NOT
36937: IFFALSE 36941
// continue ;
36939: GO 36736
// HackLink ( i , tmp ) ;
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_VAR 0 2
36950: PPUSH
36951: CALL 37098 0 2
// end ;
36955: GO 36736
36957: POP
36958: POP
// end ;
36959: PPOPN 2
36961: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36962: LD_INT 0
36964: PPUSH
36965: PPUSH
36966: PPUSH
// if not hack in hackTanks then
36967: LD_VAR 0 1
36971: PUSH
36972: LD_EXP 128
36976: IN
36977: NOT
36978: IFFALSE 36982
// exit ;
36980: GO 37093
// index := GetElementIndex ( hackTanks , hack ) ;
36982: LD_ADDR_VAR 0 4
36986: PUSH
36987: LD_EXP 128
36991: PPUSH
36992: LD_VAR 0 1
36996: PPUSH
36997: CALL 44720 0 2
37001: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37002: LD_EXP 129
37006: PUSH
37007: LD_VAR 0 4
37011: ARRAY
37012: IFFALSE 37093
// begin for i in hackTanksCaptured [ index ] do
37014: LD_ADDR_VAR 0 3
37018: PUSH
37019: LD_EXP 129
37023: PUSH
37024: LD_VAR 0 4
37028: ARRAY
37029: PUSH
37030: FOR_IN
37031: IFFALSE 37057
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37033: LD_VAR 0 3
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 3
37046: PUSH
37047: LD_INT 2
37049: ARRAY
37050: PPUSH
37051: CALL_OW 235
37055: GO 37030
37057: POP
37058: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37059: LD_ADDR_EXP 129
37063: PUSH
37064: LD_EXP 129
37068: PPUSH
37069: LD_VAR 0 4
37073: PPUSH
37074: EMPTY
37075: PPUSH
37076: CALL_OW 1
37080: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37081: LD_VAR 0 1
37085: PPUSH
37086: LD_INT 0
37088: PPUSH
37089: CALL_OW 505
// end ; end ;
37093: LD_VAR 0 2
37097: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
// if not hack in hackTanks or not vehicles then
37103: LD_VAR 0 1
37107: PUSH
37108: LD_EXP 128
37112: IN
37113: NOT
37114: PUSH
37115: LD_VAR 0 2
37119: NOT
37120: OR
37121: IFFALSE 37125
// exit ;
37123: GO 37400
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37125: LD_ADDR_VAR 0 2
37129: PUSH
37130: LD_VAR 0 1
37134: PPUSH
37135: LD_VAR 0 2
37139: PPUSH
37140: LD_INT 1
37142: PPUSH
37143: LD_INT 1
37145: PPUSH
37146: CALL 45370 0 4
37150: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37151: LD_ADDR_VAR 0 5
37155: PUSH
37156: LD_EXP 128
37160: PPUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL 44720 0 2
37170: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37171: LD_EXP 129
37175: PUSH
37176: LD_VAR 0 5
37180: ARRAY
37181: PUSH
37182: LD_EXP 130
37186: LESS
37187: IFFALSE 37376
// begin for i := 1 to vehicles do
37189: LD_ADDR_VAR 0 4
37193: PUSH
37194: DOUBLE
37195: LD_INT 1
37197: DEC
37198: ST_TO_ADDR
37199: LD_VAR 0 2
37203: PUSH
37204: FOR_TO
37205: IFFALSE 37374
// begin if hackTanksCaptured [ index ] = hackLimit then
37207: LD_EXP 129
37211: PUSH
37212: LD_VAR 0 5
37216: ARRAY
37217: PUSH
37218: LD_EXP 130
37222: EQUAL
37223: IFFALSE 37227
// break ;
37225: GO 37374
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37227: LD_ADDR_EXP 132
37231: PUSH
37232: LD_EXP 132
37236: PPUSH
37237: LD_VAR 0 5
37241: PPUSH
37242: LD_EXP 132
37246: PUSH
37247: LD_VAR 0 5
37251: ARRAY
37252: PUSH
37253: LD_INT 1
37255: PLUS
37256: PPUSH
37257: CALL_OW 1
37261: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37262: LD_ADDR_EXP 129
37266: PUSH
37267: LD_EXP 129
37271: PPUSH
37272: LD_VAR 0 5
37276: PUSH
37277: LD_EXP 129
37281: PUSH
37282: LD_VAR 0 5
37286: ARRAY
37287: PUSH
37288: LD_INT 1
37290: PLUS
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PPUSH
37296: LD_VAR 0 2
37300: PUSH
37301: LD_VAR 0 4
37305: ARRAY
37306: PUSH
37307: LD_VAR 0 2
37311: PUSH
37312: LD_VAR 0 4
37316: ARRAY
37317: PPUSH
37318: CALL_OW 255
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PPUSH
37327: CALL 44935 0 3
37331: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37332: LD_VAR 0 2
37336: PUSH
37337: LD_VAR 0 4
37341: ARRAY
37342: PPUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 255
37352: PPUSH
37353: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37357: LD_VAR 0 2
37361: PUSH
37362: LD_VAR 0 4
37366: ARRAY
37367: PPUSH
37368: CALL_OW 141
// end ;
37372: GO 37204
37374: POP
37375: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37376: LD_VAR 0 1
37380: PPUSH
37381: LD_EXP 129
37385: PUSH
37386: LD_VAR 0 5
37390: ARRAY
37391: PUSH
37392: LD_INT 0
37394: PLUS
37395: PPUSH
37396: CALL_OW 505
// end ;
37400: LD_VAR 0 3
37404: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
// if not hack in hackTanks then
37411: LD_VAR 0 1
37415: PUSH
37416: LD_EXP 128
37420: IN
37421: NOT
37422: IFFALSE 37426
// exit ;
37424: GO 37666
// index := GetElementIndex ( hackTanks , hack ) ;
37426: LD_ADDR_VAR 0 4
37430: PUSH
37431: LD_EXP 128
37435: PPUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL 44720 0 2
37445: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: DOUBLE
37452: LD_EXP 129
37456: PUSH
37457: LD_VAR 0 4
37461: ARRAY
37462: INC
37463: ST_TO_ADDR
37464: LD_INT 1
37466: PUSH
37467: FOR_DOWNTO
37468: IFFALSE 37640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37470: LD_ADDR_VAR 0 5
37474: PUSH
37475: LD_EXP 129
37479: PUSH
37480: LD_VAR 0 4
37484: ARRAY
37485: PUSH
37486: LD_VAR 0 3
37490: ARRAY
37491: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37492: LD_VAR 0 5
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: CALL_OW 302
37505: NOT
37506: PUSH
37507: LD_VAR 0 5
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: CALL_OW 255
37520: PUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 255
37530: NONEQUAL
37531: OR
37532: IFFALSE 37638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37534: LD_VAR 0 5
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: PPUSH
37543: CALL_OW 305
37547: PUSH
37548: LD_VAR 0 5
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PPUSH
37557: CALL_OW 255
37561: PUSH
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 255
37571: EQUAL
37572: AND
37573: IFFALSE 37597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37575: LD_VAR 0 5
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: LD_VAR 0 5
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: PPUSH
37593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37597: LD_ADDR_EXP 129
37601: PUSH
37602: LD_EXP 129
37606: PPUSH
37607: LD_VAR 0 4
37611: PPUSH
37612: LD_EXP 129
37616: PUSH
37617: LD_VAR 0 4
37621: ARRAY
37622: PPUSH
37623: LD_VAR 0 3
37627: PPUSH
37628: CALL_OW 3
37632: PPUSH
37633: CALL_OW 1
37637: ST_TO_ADDR
// end ; end ;
37638: GO 37467
37640: POP
37641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37642: LD_VAR 0 1
37646: PPUSH
37647: LD_EXP 129
37651: PUSH
37652: LD_VAR 0 4
37656: ARRAY
37657: PUSH
37658: LD_INT 0
37660: PLUS
37661: PPUSH
37662: CALL_OW 505
// end ;
37666: LD_VAR 0 2
37670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37671: LD_INT 0
37673: PPUSH
37674: PPUSH
37675: PPUSH
37676: PPUSH
// if not hack in hackTanks then
37677: LD_VAR 0 1
37681: PUSH
37682: LD_EXP 128
37686: IN
37687: NOT
37688: IFFALSE 37692
// exit ;
37690: GO 37777
// index := GetElementIndex ( hackTanks , hack ) ;
37692: LD_ADDR_VAR 0 5
37696: PUSH
37697: LD_EXP 128
37701: PPUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL 44720 0 2
37711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37712: LD_ADDR_VAR 0 4
37716: PUSH
37717: DOUBLE
37718: LD_INT 1
37720: DEC
37721: ST_TO_ADDR
37722: LD_EXP 129
37726: PUSH
37727: LD_VAR 0 5
37731: ARRAY
37732: PUSH
37733: FOR_TO
37734: IFFALSE 37775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37736: LD_EXP 129
37740: PUSH
37741: LD_VAR 0 5
37745: ARRAY
37746: PUSH
37747: LD_VAR 0 4
37751: ARRAY
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PUSH
37757: LD_VAR 0 2
37761: EQUAL
37762: IFFALSE 37773
// KillUnit ( vehicle ) ;
37764: LD_VAR 0 2
37768: PPUSH
37769: CALL_OW 66
37773: GO 37733
37775: POP
37776: POP
// end ;
37777: LD_VAR 0 3
37781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37782: LD_EXP 133
37786: NOT
37787: IFFALSE 37822
37789: GO 37791
37791: DISABLE
// begin initMiner := true ;
37792: LD_ADDR_EXP 133
37796: PUSH
37797: LD_INT 1
37799: ST_TO_ADDR
// minersList := [ ] ;
37800: LD_ADDR_EXP 134
37804: PUSH
37805: EMPTY
37806: ST_TO_ADDR
// minerMinesList := [ ] ;
37807: LD_ADDR_EXP 135
37811: PUSH
37812: EMPTY
37813: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37814: LD_ADDR_EXP 136
37818: PUSH
37819: LD_INT 5
37821: ST_TO_ADDR
// end ;
37822: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37823: LD_EXP 133
37827: PUSH
37828: LD_INT 34
37830: PUSH
37831: LD_EXP 55
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PPUSH
37840: CALL_OW 69
37844: AND
37845: IFFALSE 38308
37847: GO 37849
37849: DISABLE
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
// begin enable ;
37856: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37857: LD_ADDR_VAR 0 1
37861: PUSH
37862: LD_INT 34
37864: PUSH
37865: LD_EXP 55
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PPUSH
37874: CALL_OW 69
37878: PUSH
37879: FOR_IN
37880: IFFALSE 37952
// begin if not i in minersList then
37882: LD_VAR 0 1
37886: PUSH
37887: LD_EXP 134
37891: IN
37892: NOT
37893: IFFALSE 37950
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37895: LD_ADDR_EXP 134
37899: PUSH
37900: LD_EXP 134
37904: PPUSH
37905: LD_EXP 134
37909: PUSH
37910: LD_INT 1
37912: PLUS
37913: PPUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 1
37923: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37924: LD_ADDR_EXP 135
37928: PUSH
37929: LD_EXP 135
37933: PPUSH
37934: LD_EXP 135
37938: PUSH
37939: LD_INT 1
37941: PLUS
37942: PPUSH
37943: EMPTY
37944: PPUSH
37945: CALL_OW 1
37949: ST_TO_ADDR
// end end ;
37950: GO 37879
37952: POP
37953: POP
// for i := minerMinesList downto 1 do
37954: LD_ADDR_VAR 0 1
37958: PUSH
37959: DOUBLE
37960: LD_EXP 135
37964: INC
37965: ST_TO_ADDR
37966: LD_INT 1
37968: PUSH
37969: FOR_DOWNTO
37970: IFFALSE 38306
// begin if IsLive ( minersList [ i ] ) then
37972: LD_EXP 134
37976: PUSH
37977: LD_VAR 0 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 300
37987: IFFALSE 38015
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37989: LD_EXP 134
37993: PUSH
37994: LD_VAR 0 1
37998: ARRAY
37999: PPUSH
38000: LD_EXP 135
38004: PUSH
38005: LD_VAR 0 1
38009: ARRAY
38010: PPUSH
38011: CALL_OW 505
// if not minerMinesList [ i ] then
38015: LD_EXP 135
38019: PUSH
38020: LD_VAR 0 1
38024: ARRAY
38025: NOT
38026: IFFALSE 38030
// continue ;
38028: GO 37969
// for j := minerMinesList [ i ] downto 1 do
38030: LD_ADDR_VAR 0 2
38034: PUSH
38035: DOUBLE
38036: LD_EXP 135
38040: PUSH
38041: LD_VAR 0 1
38045: ARRAY
38046: INC
38047: ST_TO_ADDR
38048: LD_INT 1
38050: PUSH
38051: FOR_DOWNTO
38052: IFFALSE 38302
// begin side := GetSide ( minersList [ i ] ) ;
38054: LD_ADDR_VAR 0 3
38058: PUSH
38059: LD_EXP 134
38063: PUSH
38064: LD_VAR 0 1
38068: ARRAY
38069: PPUSH
38070: CALL_OW 255
38074: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38075: LD_ADDR_VAR 0 4
38079: PUSH
38080: LD_EXP 135
38084: PUSH
38085: LD_VAR 0 1
38089: ARRAY
38090: PUSH
38091: LD_VAR 0 2
38095: ARRAY
38096: PUSH
38097: LD_INT 1
38099: ARRAY
38100: PPUSH
38101: LD_EXP 135
38105: PUSH
38106: LD_VAR 0 1
38110: ARRAY
38111: PUSH
38112: LD_VAR 0 2
38116: ARRAY
38117: PUSH
38118: LD_INT 2
38120: ARRAY
38121: PPUSH
38122: CALL_OW 428
38126: ST_TO_ADDR
// if not tmp then
38127: LD_VAR 0 4
38131: NOT
38132: IFFALSE 38136
// continue ;
38134: GO 38051
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38136: LD_VAR 0 4
38140: PUSH
38141: LD_INT 81
38143: PUSH
38144: LD_VAR 0 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PPUSH
38153: CALL_OW 69
38157: IN
38158: PUSH
38159: LD_EXP 135
38163: PUSH
38164: LD_VAR 0 1
38168: ARRAY
38169: PUSH
38170: LD_VAR 0 2
38174: ARRAY
38175: PUSH
38176: LD_INT 1
38178: ARRAY
38179: PPUSH
38180: LD_EXP 135
38184: PUSH
38185: LD_VAR 0 1
38189: ARRAY
38190: PUSH
38191: LD_VAR 0 2
38195: ARRAY
38196: PUSH
38197: LD_INT 2
38199: ARRAY
38200: PPUSH
38201: CALL_OW 458
38205: AND
38206: IFFALSE 38300
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38208: LD_EXP 135
38212: PUSH
38213: LD_VAR 0 1
38217: ARRAY
38218: PUSH
38219: LD_VAR 0 2
38223: ARRAY
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: PPUSH
38229: LD_EXP 135
38233: PUSH
38234: LD_VAR 0 1
38238: ARRAY
38239: PUSH
38240: LD_VAR 0 2
38244: ARRAY
38245: PUSH
38246: LD_INT 2
38248: ARRAY
38249: PPUSH
38250: LD_VAR 0 3
38254: PPUSH
38255: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38259: LD_ADDR_EXP 135
38263: PUSH
38264: LD_EXP 135
38268: PPUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: LD_EXP 135
38278: PUSH
38279: LD_VAR 0 1
38283: ARRAY
38284: PPUSH
38285: LD_VAR 0 2
38289: PPUSH
38290: CALL_OW 3
38294: PPUSH
38295: CALL_OW 1
38299: ST_TO_ADDR
// end ; end ;
38300: GO 38051
38302: POP
38303: POP
// end ;
38304: GO 37969
38306: POP
38307: POP
// end ;
38308: PPOPN 4
38310: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38311: LD_INT 0
38313: PPUSH
38314: PPUSH
// result := false ;
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: LD_INT 0
38322: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL_OW 264
38332: PUSH
38333: LD_EXP 55
38337: EQUAL
38338: NOT
38339: IFFALSE 38343
// exit ;
38341: GO 38583
// index := GetElementIndex ( minersList , unit ) ;
38343: LD_ADDR_VAR 0 5
38347: PUSH
38348: LD_EXP 134
38352: PPUSH
38353: LD_VAR 0 1
38357: PPUSH
38358: CALL 44720 0 2
38362: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38363: LD_EXP 135
38367: PUSH
38368: LD_VAR 0 5
38372: ARRAY
38373: PUSH
38374: LD_EXP 136
38378: GREATEREQUAL
38379: IFFALSE 38383
// exit ;
38381: GO 38583
// ComMoveXY ( unit , x , y ) ;
38383: LD_VAR 0 1
38387: PPUSH
38388: LD_VAR 0 2
38392: PPUSH
38393: LD_VAR 0 3
38397: PPUSH
38398: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38402: LD_INT 35
38404: PPUSH
38405: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 2
38418: PPUSH
38419: LD_VAR 0 3
38423: PPUSH
38424: CALL 76006 0 3
38428: NOT
38429: PUSH
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 314
38439: AND
38440: IFFALSE 38444
// exit ;
38442: GO 38583
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38444: LD_VAR 0 2
38448: PPUSH
38449: LD_VAR 0 3
38453: PPUSH
38454: CALL_OW 428
38458: PUSH
38459: LD_VAR 0 1
38463: EQUAL
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 314
38474: NOT
38475: AND
38476: IFFALSE 38402
// PlaySoundXY ( x , y , PlantMine ) ;
38478: LD_VAR 0 2
38482: PPUSH
38483: LD_VAR 0 3
38487: PPUSH
38488: LD_STRING PlantMine
38490: PPUSH
38491: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38495: LD_VAR 0 2
38499: PPUSH
38500: LD_VAR 0 3
38504: PPUSH
38505: LD_VAR 0 1
38509: PPUSH
38510: CALL_OW 255
38514: PPUSH
38515: LD_INT 0
38517: PPUSH
38518: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38522: LD_ADDR_EXP 135
38526: PUSH
38527: LD_EXP 135
38531: PPUSH
38532: LD_VAR 0 5
38536: PUSH
38537: LD_EXP 135
38541: PUSH
38542: LD_VAR 0 5
38546: ARRAY
38547: PUSH
38548: LD_INT 1
38550: PLUS
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PPUSH
38556: LD_VAR 0 2
38560: PUSH
38561: LD_VAR 0 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PPUSH
38570: CALL 44935 0 3
38574: ST_TO_ADDR
// result := true ;
38575: LD_ADDR_VAR 0 4
38579: PUSH
38580: LD_INT 1
38582: ST_TO_ADDR
// end ;
38583: LD_VAR 0 4
38587: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38588: LD_INT 0
38590: PPUSH
38591: PPUSH
38592: PPUSH
// if not unit in minersList then
38593: LD_VAR 0 1
38597: PUSH
38598: LD_EXP 134
38602: IN
38603: NOT
38604: IFFALSE 38608
// exit ;
38606: GO 39000
// index := GetElementIndex ( minersList , unit ) ;
38608: LD_ADDR_VAR 0 6
38612: PUSH
38613: LD_EXP 134
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL 44720 0 2
38627: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: DOUBLE
38634: LD_EXP 135
38638: PUSH
38639: LD_VAR 0 6
38643: ARRAY
38644: INC
38645: ST_TO_ADDR
38646: LD_INT 1
38648: PUSH
38649: FOR_DOWNTO
38650: IFFALSE 38811
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38652: LD_EXP 135
38656: PUSH
38657: LD_VAR 0 6
38661: ARRAY
38662: PUSH
38663: LD_VAR 0 5
38667: ARRAY
38668: PUSH
38669: LD_INT 1
38671: ARRAY
38672: PUSH
38673: LD_VAR 0 2
38677: EQUAL
38678: PUSH
38679: LD_EXP 135
38683: PUSH
38684: LD_VAR 0 6
38688: ARRAY
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: PUSH
38696: LD_INT 2
38698: ARRAY
38699: PUSH
38700: LD_VAR 0 3
38704: EQUAL
38705: AND
38706: IFFALSE 38809
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38708: LD_EXP 135
38712: PUSH
38713: LD_VAR 0 6
38717: ARRAY
38718: PUSH
38719: LD_VAR 0 5
38723: ARRAY
38724: PUSH
38725: LD_INT 1
38727: ARRAY
38728: PPUSH
38729: LD_EXP 135
38733: PUSH
38734: LD_VAR 0 6
38738: ARRAY
38739: PUSH
38740: LD_VAR 0 5
38744: ARRAY
38745: PUSH
38746: LD_INT 2
38748: ARRAY
38749: PPUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 255
38759: PPUSH
38760: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38764: LD_ADDR_EXP 135
38768: PUSH
38769: LD_EXP 135
38773: PPUSH
38774: LD_VAR 0 6
38778: PPUSH
38779: LD_EXP 135
38783: PUSH
38784: LD_VAR 0 6
38788: ARRAY
38789: PPUSH
38790: LD_VAR 0 5
38794: PPUSH
38795: CALL_OW 3
38799: PPUSH
38800: CALL_OW 1
38804: ST_TO_ADDR
// exit ;
38805: POP
38806: POP
38807: GO 39000
// end ; end ;
38809: GO 38649
38811: POP
38812: POP
// for i := minerMinesList [ index ] downto 1 do
38813: LD_ADDR_VAR 0 5
38817: PUSH
38818: DOUBLE
38819: LD_EXP 135
38823: PUSH
38824: LD_VAR 0 6
38828: ARRAY
38829: INC
38830: ST_TO_ADDR
38831: LD_INT 1
38833: PUSH
38834: FOR_DOWNTO
38835: IFFALSE 38998
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38837: LD_EXP 135
38841: PUSH
38842: LD_VAR 0 6
38846: ARRAY
38847: PUSH
38848: LD_VAR 0 5
38852: ARRAY
38853: PUSH
38854: LD_INT 1
38856: ARRAY
38857: PPUSH
38858: LD_EXP 135
38862: PUSH
38863: LD_VAR 0 6
38867: ARRAY
38868: PUSH
38869: LD_VAR 0 5
38873: ARRAY
38874: PUSH
38875: LD_INT 2
38877: ARRAY
38878: PPUSH
38879: LD_VAR 0 2
38883: PPUSH
38884: LD_VAR 0 3
38888: PPUSH
38889: CALL_OW 298
38893: PUSH
38894: LD_INT 6
38896: LESS
38897: IFFALSE 38996
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38899: LD_EXP 135
38903: PUSH
38904: LD_VAR 0 6
38908: ARRAY
38909: PUSH
38910: LD_VAR 0 5
38914: ARRAY
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: PPUSH
38920: LD_EXP 135
38924: PUSH
38925: LD_VAR 0 6
38929: ARRAY
38930: PUSH
38931: LD_VAR 0 5
38935: ARRAY
38936: PUSH
38937: LD_INT 2
38939: ARRAY
38940: PPUSH
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL_OW 255
38950: PPUSH
38951: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38955: LD_ADDR_EXP 135
38959: PUSH
38960: LD_EXP 135
38964: PPUSH
38965: LD_VAR 0 6
38969: PPUSH
38970: LD_EXP 135
38974: PUSH
38975: LD_VAR 0 6
38979: ARRAY
38980: PPUSH
38981: LD_VAR 0 5
38985: PPUSH
38986: CALL_OW 3
38990: PPUSH
38991: CALL_OW 1
38995: ST_TO_ADDR
// end ; end ;
38996: GO 38834
38998: POP
38999: POP
// end ;
39000: LD_VAR 0 4
39004: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 264
39025: PUSH
39026: LD_EXP 55
39030: EQUAL
39031: NOT
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_EXP 134
39042: IN
39043: NOT
39044: OR
39045: IFFALSE 39049
// exit ;
39047: GO 39371
// index := GetElementIndex ( minersList , unit ) ;
39049: LD_ADDR_VAR 0 6
39053: PUSH
39054: LD_EXP 134
39058: PPUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL 44720 0 2
39068: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39069: LD_ADDR_VAR 0 8
39073: PUSH
39074: LD_EXP 136
39078: PUSH
39079: LD_EXP 135
39083: PUSH
39084: LD_VAR 0 6
39088: ARRAY
39089: MINUS
39090: ST_TO_ADDR
// if not minesFreeAmount then
39091: LD_VAR 0 8
39095: NOT
39096: IFFALSE 39100
// exit ;
39098: GO 39371
// tmp := [ ] ;
39100: LD_ADDR_VAR 0 7
39104: PUSH
39105: EMPTY
39106: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39107: LD_ADDR_VAR 0 5
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_VAR 0 8
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39318
// begin _d := rand ( 0 , 5 ) ;
39125: LD_ADDR_VAR 0 11
39129: PUSH
39130: LD_INT 0
39132: PPUSH
39133: LD_INT 5
39135: PPUSH
39136: CALL_OW 12
39140: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39141: LD_ADDR_VAR 0 12
39145: PUSH
39146: LD_INT 2
39148: PPUSH
39149: LD_INT 6
39151: PPUSH
39152: CALL_OW 12
39156: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39157: LD_ADDR_VAR 0 9
39161: PUSH
39162: LD_VAR 0 2
39166: PPUSH
39167: LD_VAR 0 11
39171: PPUSH
39172: LD_VAR 0 12
39176: PPUSH
39177: CALL_OW 272
39181: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39182: LD_ADDR_VAR 0 10
39186: PUSH
39187: LD_VAR 0 3
39191: PPUSH
39192: LD_VAR 0 11
39196: PPUSH
39197: LD_VAR 0 12
39201: PPUSH
39202: CALL_OW 273
39206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39207: LD_VAR 0 9
39211: PPUSH
39212: LD_VAR 0 10
39216: PPUSH
39217: CALL_OW 488
39221: PUSH
39222: LD_VAR 0 9
39226: PUSH
39227: LD_VAR 0 10
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 7
39240: IN
39241: NOT
39242: AND
39243: PUSH
39244: LD_VAR 0 9
39248: PPUSH
39249: LD_VAR 0 10
39253: PPUSH
39254: CALL_OW 458
39258: NOT
39259: AND
39260: IFFALSE 39302
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39262: LD_ADDR_VAR 0 7
39266: PUSH
39267: LD_VAR 0 7
39271: PPUSH
39272: LD_VAR 0 7
39276: PUSH
39277: LD_INT 1
39279: PLUS
39280: PPUSH
39281: LD_VAR 0 9
39285: PUSH
39286: LD_VAR 0 10
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 1
39299: ST_TO_ADDR
39300: GO 39316
// i := i - 1 ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_INT 1
39314: MINUS
39315: ST_TO_ADDR
// end ;
39316: GO 39122
39318: POP
39319: POP
// for i in tmp do
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 7
39329: PUSH
39330: FOR_IN
39331: IFFALSE 39369
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 5
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PPUSH
39347: LD_VAR 0 5
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PPUSH
39356: CALL 38311 0 3
39360: NOT
39361: IFFALSE 39367
// exit ;
39363: POP
39364: POP
39365: GO 39371
39367: GO 39330
39369: POP
39370: POP
// end ;
39371: LD_VAR 0 4
39375: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
// if not GetClass ( unit ) = class_sniper then
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 257
39394: PUSH
39395: LD_INT 5
39397: EQUAL
39398: NOT
39399: IFFALSE 39403
// exit ;
39401: GO 39791
// dist := 8 ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: LD_INT 8
39410: ST_TO_ADDR
// viewRange := 12 ;
39411: LD_ADDR_VAR 0 7
39415: PUSH
39416: LD_INT 12
39418: ST_TO_ADDR
// side := GetSide ( unit ) ;
39419: LD_ADDR_VAR 0 6
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 255
39433: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39434: LD_INT 61
39436: PPUSH
39437: LD_VAR 0 6
39441: PPUSH
39442: CALL_OW 321
39446: PUSH
39447: LD_INT 2
39449: EQUAL
39450: IFFALSE 39460
// viewRange := 16 ;
39452: LD_ADDR_VAR 0 7
39456: PUSH
39457: LD_INT 16
39459: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: LD_VAR 0 3
39474: PPUSH
39475: CALL_OW 297
39479: PUSH
39480: LD_VAR 0 5
39484: GREATER
39485: IFFALSE 39564
// begin ComMoveXY ( unit , x , y ) ;
39487: LD_VAR 0 1
39491: PPUSH
39492: LD_VAR 0 2
39496: PPUSH
39497: LD_VAR 0 3
39501: PPUSH
39502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39506: LD_INT 35
39508: PPUSH
39509: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: LD_VAR 0 3
39527: PPUSH
39528: CALL 76006 0 3
39532: NOT
39533: IFFALSE 39537
// exit ;
39535: GO 39791
// until GetDistUnitXY ( unit , x , y ) < dist ;
39537: LD_VAR 0 1
39541: PPUSH
39542: LD_VAR 0 2
39546: PPUSH
39547: LD_VAR 0 3
39551: PPUSH
39552: CALL_OW 297
39556: PUSH
39557: LD_VAR 0 5
39561: LESS
39562: IFFALSE 39506
// end ; ComTurnXY ( unit , x , y ) ;
39564: LD_VAR 0 1
39568: PPUSH
39569: LD_VAR 0 2
39573: PPUSH
39574: LD_VAR 0 3
39578: PPUSH
39579: CALL_OW 118
// wait ( 5 ) ;
39583: LD_INT 5
39585: PPUSH
39586: CALL_OW 67
// _d := GetDir ( unit ) ;
39590: LD_ADDR_VAR 0 10
39594: PUSH
39595: LD_VAR 0 1
39599: PPUSH
39600: CALL_OW 254
39604: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39605: LD_ADDR_VAR 0 8
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 250
39619: PPUSH
39620: LD_VAR 0 10
39624: PPUSH
39625: LD_VAR 0 5
39629: PPUSH
39630: CALL_OW 272
39634: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 251
39649: PPUSH
39650: LD_VAR 0 10
39654: PPUSH
39655: LD_VAR 0 5
39659: PPUSH
39660: CALL_OW 273
39664: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39665: LD_VAR 0 8
39669: PPUSH
39670: LD_VAR 0 9
39674: PPUSH
39675: CALL_OW 488
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 39791
// ComAnimCustom ( unit , 1 ) ;
39684: LD_VAR 0 1
39688: PPUSH
39689: LD_INT 1
39691: PPUSH
39692: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39696: LD_VAR 0 8
39700: PPUSH
39701: LD_VAR 0 9
39705: PPUSH
39706: LD_VAR 0 6
39710: PPUSH
39711: LD_VAR 0 7
39715: PPUSH
39716: CALL_OW 330
// repeat wait ( 1 ) ;
39720: LD_INT 1
39722: PPUSH
39723: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 316
39736: PUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 314
39746: OR
39747: PUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 302
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 301
39769: OR
39770: IFFALSE 39720
// RemoveSeeing ( _x , _y , side ) ;
39772: LD_VAR 0 8
39776: PPUSH
39777: LD_VAR 0 9
39781: PPUSH
39782: LD_VAR 0 6
39786: PPUSH
39787: CALL_OW 331
// end ; end_of_file
39791: LD_VAR 0 4
39795: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39796: LD_INT 0
39798: PPUSH
39799: PPUSH
// if exist_mode then
39800: LD_VAR 0 2
39804: IFFALSE 39829
// unit := CreateCharacter ( prefix & ident ) else
39806: LD_ADDR_VAR 0 5
39810: PUSH
39811: LD_VAR 0 3
39815: PUSH
39816: LD_VAR 0 1
39820: STR
39821: PPUSH
39822: CALL_OW 34
39826: ST_TO_ADDR
39827: GO 39844
// unit := NewCharacter ( ident ) ;
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 25
39843: ST_TO_ADDR
// result := unit ;
39844: LD_ADDR_VAR 0 4
39848: PUSH
39849: LD_VAR 0 5
39853: ST_TO_ADDR
// end ;
39854: LD_VAR 0 4
39858: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39859: LD_INT 0
39861: PPUSH
39862: PPUSH
// if not side or not nation then
39863: LD_VAR 0 1
39867: NOT
39868: PUSH
39869: LD_VAR 0 2
39873: NOT
39874: OR
39875: IFFALSE 39879
// exit ;
39877: GO 40647
// case nation of nation_american :
39879: LD_VAR 0 2
39883: PUSH
39884: LD_INT 1
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 40106
39892: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39893: LD_ADDR_VAR 0 4
39897: PUSH
39898: LD_INT 35
39900: PUSH
39901: LD_INT 45
39903: PUSH
39904: LD_INT 46
39906: PUSH
39907: LD_INT 47
39909: PUSH
39910: LD_INT 82
39912: PUSH
39913: LD_INT 83
39915: PUSH
39916: LD_INT 84
39918: PUSH
39919: LD_INT 85
39921: PUSH
39922: LD_INT 86
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 6
39933: PUSH
39934: LD_INT 15
39936: PUSH
39937: LD_INT 16
39939: PUSH
39940: LD_INT 7
39942: PUSH
39943: LD_INT 12
39945: PUSH
39946: LD_INT 13
39948: PUSH
39949: LD_INT 10
39951: PUSH
39952: LD_INT 14
39954: PUSH
39955: LD_INT 20
39957: PUSH
39958: LD_INT 21
39960: PUSH
39961: LD_INT 22
39963: PUSH
39964: LD_INT 25
39966: PUSH
39967: LD_INT 32
39969: PUSH
39970: LD_INT 27
39972: PUSH
39973: LD_INT 36
39975: PUSH
39976: LD_INT 69
39978: PUSH
39979: LD_INT 39
39981: PUSH
39982: LD_INT 34
39984: PUSH
39985: LD_INT 40
39987: PUSH
39988: LD_INT 48
39990: PUSH
39991: LD_INT 49
39993: PUSH
39994: LD_INT 50
39996: PUSH
39997: LD_INT 51
39999: PUSH
40000: LD_INT 52
40002: PUSH
40003: LD_INT 53
40005: PUSH
40006: LD_INT 54
40008: PUSH
40009: LD_INT 55
40011: PUSH
40012: LD_INT 56
40014: PUSH
40015: LD_INT 57
40017: PUSH
40018: LD_INT 58
40020: PUSH
40021: LD_INT 59
40023: PUSH
40024: LD_INT 60
40026: PUSH
40027: LD_INT 61
40029: PUSH
40030: LD_INT 62
40032: PUSH
40033: LD_INT 80
40035: PUSH
40036: LD_INT 82
40038: PUSH
40039: LD_INT 83
40041: PUSH
40042: LD_INT 84
40044: PUSH
40045: LD_INT 85
40047: PUSH
40048: LD_INT 86
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40571
40106: LD_INT 2
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40340
40114: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40115: LD_ADDR_VAR 0 4
40119: PUSH
40120: LD_INT 35
40122: PUSH
40123: LD_INT 45
40125: PUSH
40126: LD_INT 46
40128: PUSH
40129: LD_INT 47
40131: PUSH
40132: LD_INT 82
40134: PUSH
40135: LD_INT 83
40137: PUSH
40138: LD_INT 84
40140: PUSH
40141: LD_INT 85
40143: PUSH
40144: LD_INT 87
40146: PUSH
40147: LD_INT 70
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 11
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 4
40161: PUSH
40162: LD_INT 5
40164: PUSH
40165: LD_INT 6
40167: PUSH
40168: LD_INT 15
40170: PUSH
40171: LD_INT 18
40173: PUSH
40174: LD_INT 7
40176: PUSH
40177: LD_INT 17
40179: PUSH
40180: LD_INT 8
40182: PUSH
40183: LD_INT 20
40185: PUSH
40186: LD_INT 21
40188: PUSH
40189: LD_INT 22
40191: PUSH
40192: LD_INT 72
40194: PUSH
40195: LD_INT 26
40197: PUSH
40198: LD_INT 69
40200: PUSH
40201: LD_INT 39
40203: PUSH
40204: LD_INT 40
40206: PUSH
40207: LD_INT 41
40209: PUSH
40210: LD_INT 42
40212: PUSH
40213: LD_INT 43
40215: PUSH
40216: LD_INT 48
40218: PUSH
40219: LD_INT 49
40221: PUSH
40222: LD_INT 50
40224: PUSH
40225: LD_INT 51
40227: PUSH
40228: LD_INT 52
40230: PUSH
40231: LD_INT 53
40233: PUSH
40234: LD_INT 54
40236: PUSH
40237: LD_INT 55
40239: PUSH
40240: LD_INT 56
40242: PUSH
40243: LD_INT 60
40245: PUSH
40246: LD_INT 61
40248: PUSH
40249: LD_INT 62
40251: PUSH
40252: LD_INT 66
40254: PUSH
40255: LD_INT 67
40257: PUSH
40258: LD_INT 68
40260: PUSH
40261: LD_INT 81
40263: PUSH
40264: LD_INT 82
40266: PUSH
40267: LD_INT 83
40269: PUSH
40270: LD_INT 84
40272: PUSH
40273: LD_INT 85
40275: PUSH
40276: LD_INT 87
40278: PUSH
40279: LD_INT 88
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
40338: GO 40571
40340: LD_INT 3
40342: DOUBLE
40343: EQUAL
40344: IFTRUE 40348
40346: GO 40570
40348: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: LD_INT 46
40356: PUSH
40357: LD_INT 47
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 82
40368: PUSH
40369: LD_INT 83
40371: PUSH
40372: LD_INT 84
40374: PUSH
40375: LD_INT 85
40377: PUSH
40378: LD_INT 86
40380: PUSH
40381: LD_INT 11
40383: PUSH
40384: LD_INT 9
40386: PUSH
40387: LD_INT 20
40389: PUSH
40390: LD_INT 19
40392: PUSH
40393: LD_INT 21
40395: PUSH
40396: LD_INT 24
40398: PUSH
40399: LD_INT 22
40401: PUSH
40402: LD_INT 25
40404: PUSH
40405: LD_INT 28
40407: PUSH
40408: LD_INT 29
40410: PUSH
40411: LD_INT 30
40413: PUSH
40414: LD_INT 31
40416: PUSH
40417: LD_INT 37
40419: PUSH
40420: LD_INT 38
40422: PUSH
40423: LD_INT 32
40425: PUSH
40426: LD_INT 27
40428: PUSH
40429: LD_INT 33
40431: PUSH
40432: LD_INT 69
40434: PUSH
40435: LD_INT 39
40437: PUSH
40438: LD_INT 34
40440: PUSH
40441: LD_INT 40
40443: PUSH
40444: LD_INT 71
40446: PUSH
40447: LD_INT 23
40449: PUSH
40450: LD_INT 44
40452: PUSH
40453: LD_INT 48
40455: PUSH
40456: LD_INT 49
40458: PUSH
40459: LD_INT 50
40461: PUSH
40462: LD_INT 51
40464: PUSH
40465: LD_INT 52
40467: PUSH
40468: LD_INT 53
40470: PUSH
40471: LD_INT 54
40473: PUSH
40474: LD_INT 55
40476: PUSH
40477: LD_INT 56
40479: PUSH
40480: LD_INT 57
40482: PUSH
40483: LD_INT 58
40485: PUSH
40486: LD_INT 59
40488: PUSH
40489: LD_INT 63
40491: PUSH
40492: LD_INT 64
40494: PUSH
40495: LD_INT 65
40497: PUSH
40498: LD_INT 82
40500: PUSH
40501: LD_INT 83
40503: PUSH
40504: LD_INT 84
40506: PUSH
40507: LD_INT 85
40509: PUSH
40510: LD_INT 86
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
40568: GO 40571
40570: POP
// if state > - 1 and state < 3 then
40571: LD_VAR 0 3
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: GREATER
40580: PUSH
40581: LD_VAR 0 3
40585: PUSH
40586: LD_INT 3
40588: LESS
40589: AND
40590: IFFALSE 40647
// for i in result do
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 4
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40645
// if GetTech ( i , side ) <> state then
40605: LD_VAR 0 5
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 321
40619: PUSH
40620: LD_VAR 0 3
40624: NONEQUAL
40625: IFFALSE 40643
// result := result diff i ;
40627: LD_ADDR_VAR 0 4
40631: PUSH
40632: LD_VAR 0 4
40636: PUSH
40637: LD_VAR 0 5
40641: DIFF
40642: ST_TO_ADDR
40643: GO 40602
40645: POP
40646: POP
// end ;
40647: LD_VAR 0 4
40651: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
40656: PPUSH
// result := true ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_INT 1
40664: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: LD_VAR 0 2
40674: PPUSH
40675: CALL_OW 480
40679: ST_TO_ADDR
// if not tmp then
40680: LD_VAR 0 5
40684: NOT
40685: IFFALSE 40689
// exit ;
40687: GO 40738
// for i in tmp do
40689: LD_ADDR_VAR 0 4
40693: PUSH
40694: LD_VAR 0 5
40698: PUSH
40699: FOR_IN
40700: IFFALSE 40736
// if GetTech ( i , side ) <> state_researched then
40702: LD_VAR 0 4
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 321
40716: PUSH
40717: LD_INT 2
40719: NONEQUAL
40720: IFFALSE 40734
// begin result := false ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_INT 0
40729: ST_TO_ADDR
// exit ;
40730: POP
40731: POP
40732: GO 40738
// end ;
40734: GO 40699
40736: POP
40737: POP
// end ;
40738: LD_VAR 0 3
40742: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40758: LD_VAR 0 1
40762: NOT
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 257
40773: PUSH
40774: LD_INT 9
40776: NONEQUAL
40777: OR
40778: IFFALSE 40782
// exit ;
40780: GO 41355
// side := GetSide ( unit ) ;
40782: LD_ADDR_VAR 0 9
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 255
40796: ST_TO_ADDR
// tech_space := tech_spacanom ;
40797: LD_ADDR_VAR 0 12
40801: PUSH
40802: LD_INT 29
40804: ST_TO_ADDR
// tech_time := tech_taurad ;
40805: LD_ADDR_VAR 0 13
40809: PUSH
40810: LD_INT 28
40812: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40813: LD_ADDR_VAR 0 11
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 310
40827: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40828: LD_VAR 0 11
40832: PPUSH
40833: CALL_OW 247
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: IFFALSE 40845
// exit ;
40843: GO 41355
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40845: LD_ADDR_VAR 0 8
40849: PUSH
40850: LD_INT 81
40852: PUSH
40853: LD_VAR 0 9
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 21
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 69
40887: ST_TO_ADDR
// if not tmp then
40888: LD_VAR 0 8
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 41355
// if in_unit then
40897: LD_VAR 0 11
40901: IFFALSE 40925
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40903: LD_ADDR_VAR 0 10
40907: PUSH
40908: LD_VAR 0 8
40912: PPUSH
40913: LD_VAR 0 11
40917: PPUSH
40918: CALL_OW 74
40922: ST_TO_ADDR
40923: GO 40945
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40925: LD_ADDR_VAR 0 10
40929: PUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 74
40944: ST_TO_ADDR
// if not enemy then
40945: LD_VAR 0 10
40949: NOT
40950: IFFALSE 40954
// exit ;
40952: GO 41355
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40954: LD_VAR 0 11
40958: PUSH
40959: LD_VAR 0 11
40963: PPUSH
40964: LD_VAR 0 10
40968: PPUSH
40969: CALL_OW 296
40973: PUSH
40974: LD_INT 13
40976: GREATER
40977: AND
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 10
40988: PPUSH
40989: CALL_OW 296
40993: PUSH
40994: LD_INT 12
40996: GREATER
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 41355
// missile := [ 1 ] ;
41002: LD_ADDR_VAR 0 14
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41013: LD_VAR 0 9
41017: PPUSH
41018: LD_VAR 0 12
41022: PPUSH
41023: CALL_OW 325
41027: IFFALSE 41056
// missile := Replace ( missile , missile + 1 , 2 ) ;
41029: LD_ADDR_VAR 0 14
41033: PUSH
41034: LD_VAR 0 14
41038: PPUSH
41039: LD_VAR 0 14
41043: PUSH
41044: LD_INT 1
41046: PLUS
41047: PPUSH
41048: LD_INT 2
41050: PPUSH
41051: CALL_OW 1
41055: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41056: LD_VAR 0 9
41060: PPUSH
41061: LD_VAR 0 13
41065: PPUSH
41066: CALL_OW 325
41070: PUSH
41071: LD_VAR 0 10
41075: PPUSH
41076: CALL_OW 255
41080: PPUSH
41081: LD_VAR 0 13
41085: PPUSH
41086: CALL_OW 325
41090: NOT
41091: AND
41092: IFFALSE 41121
// missile := Replace ( missile , missile + 1 , 3 ) ;
41094: LD_ADDR_VAR 0 14
41098: PUSH
41099: LD_VAR 0 14
41103: PPUSH
41104: LD_VAR 0 14
41108: PUSH
41109: LD_INT 1
41111: PLUS
41112: PPUSH
41113: LD_INT 3
41115: PPUSH
41116: CALL_OW 1
41120: ST_TO_ADDR
// if missile < 2 then
41121: LD_VAR 0 14
41125: PUSH
41126: LD_INT 2
41128: LESS
41129: IFFALSE 41133
// exit ;
41131: GO 41355
// x := GetX ( enemy ) ;
41133: LD_ADDR_VAR 0 4
41137: PUSH
41138: LD_VAR 0 10
41142: PPUSH
41143: CALL_OW 250
41147: ST_TO_ADDR
// y := GetY ( enemy ) ;
41148: LD_ADDR_VAR 0 5
41152: PUSH
41153: LD_VAR 0 10
41157: PPUSH
41158: CALL_OW 251
41162: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41163: LD_ADDR_VAR 0 6
41167: PUSH
41168: LD_VAR 0 4
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PPUSH
41177: LD_INT 1
41179: PPUSH
41180: CALL_OW 12
41184: PLUS
41185: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 5
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PPUSH
41200: LD_INT 1
41202: PPUSH
41203: CALL_OW 12
41207: PLUS
41208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41209: LD_VAR 0 6
41213: PPUSH
41214: LD_VAR 0 7
41218: PPUSH
41219: CALL_OW 488
41223: NOT
41224: IFFALSE 41246
// begin _x := x ;
41226: LD_ADDR_VAR 0 6
41230: PUSH
41231: LD_VAR 0 4
41235: ST_TO_ADDR
// _y := y ;
41236: LD_ADDR_VAR 0 7
41240: PUSH
41241: LD_VAR 0 5
41245: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41246: LD_ADDR_VAR 0 3
41250: PUSH
41251: LD_INT 1
41253: PPUSH
41254: LD_VAR 0 14
41258: PPUSH
41259: CALL_OW 12
41263: ST_TO_ADDR
// case i of 1 :
41264: LD_VAR 0 3
41268: PUSH
41269: LD_INT 1
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41294
41277: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 10
41287: PPUSH
41288: CALL_OW 115
41292: GO 41355
41294: LD_INT 2
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41302
41300: GO 41324
41302: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41303: LD_VAR 0 1
41307: PPUSH
41308: LD_VAR 0 6
41312: PPUSH
41313: LD_VAR 0 7
41317: PPUSH
41318: CALL_OW 153
41322: GO 41355
41324: LD_INT 3
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41354
41332: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41333: LD_VAR 0 1
41337: PPUSH
41338: LD_VAR 0 6
41342: PPUSH
41343: LD_VAR 0 7
41347: PPUSH
41348: CALL_OW 154
41352: GO 41355
41354: POP
// end ;
41355: LD_VAR 0 2
41359: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41360: LD_INT 0
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
// if not unit or not building then
41368: LD_VAR 0 1
41372: NOT
41373: PUSH
41374: LD_VAR 0 2
41378: NOT
41379: OR
41380: IFFALSE 41384
// exit ;
41382: GO 41542
// x := GetX ( building ) ;
41384: LD_ADDR_VAR 0 5
41388: PUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: CALL_OW 250
41398: ST_TO_ADDR
// y := GetY ( building ) ;
41399: LD_ADDR_VAR 0 6
41403: PUSH
41404: LD_VAR 0 2
41408: PPUSH
41409: CALL_OW 251
41413: ST_TO_ADDR
// for i = 0 to 5 do
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: DOUBLE
41420: LD_INT 0
41422: DEC
41423: ST_TO_ADDR
41424: LD_INT 5
41426: PUSH
41427: FOR_TO
41428: IFFALSE 41540
// begin _x := ShiftX ( x , i , 3 ) ;
41430: LD_ADDR_VAR 0 7
41434: PUSH
41435: LD_VAR 0 5
41439: PPUSH
41440: LD_VAR 0 4
41444: PPUSH
41445: LD_INT 3
41447: PPUSH
41448: CALL_OW 272
41452: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41453: LD_ADDR_VAR 0 8
41457: PUSH
41458: LD_VAR 0 6
41462: PPUSH
41463: LD_VAR 0 4
41467: PPUSH
41468: LD_INT 3
41470: PPUSH
41471: CALL_OW 273
41475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41476: LD_VAR 0 7
41480: PPUSH
41481: LD_VAR 0 8
41485: PPUSH
41486: CALL_OW 488
41490: NOT
41491: IFFALSE 41495
// continue ;
41493: GO 41427
// if HexInfo ( _x , _y ) = 0 then
41495: LD_VAR 0 7
41499: PPUSH
41500: LD_VAR 0 8
41504: PPUSH
41505: CALL_OW 428
41509: PUSH
41510: LD_INT 0
41512: EQUAL
41513: IFFALSE 41538
// begin ComMoveXY ( unit , _x , _y ) ;
41515: LD_VAR 0 1
41519: PPUSH
41520: LD_VAR 0 7
41524: PPUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: CALL_OW 111
// exit ;
41534: POP
41535: POP
41536: GO 41542
// end ; end ;
41538: GO 41427
41540: POP
41541: POP
// end ;
41542: LD_VAR 0 3
41546: RET
// export function ScanBase ( side , base_area ) ; begin
41547: LD_INT 0
41549: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: LD_INT 81
41562: PUSH
41563: LD_VAR 0 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 70
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 3
41581: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
// result := false ;
41588: LD_ADDR_VAR 0 2
41592: PUSH
41593: LD_INT 0
41595: ST_TO_ADDR
// side := GetSide ( unit ) ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 255
41610: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41611: LD_ADDR_VAR 0 4
41615: PUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 248
41625: ST_TO_ADDR
// case nat of 1 :
41626: LD_VAR 0 4
41630: PUSH
41631: LD_INT 1
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41639
41637: GO 41650
41639: POP
// tech := tech_lassight ; 2 :
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_INT 12
41647: ST_TO_ADDR
41648: GO 41689
41650: LD_INT 2
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41669
41658: POP
// tech := tech_mortar ; 3 :
41659: LD_ADDR_VAR 0 5
41663: PUSH
41664: LD_INT 41
41666: ST_TO_ADDR
41667: GO 41689
41669: LD_INT 3
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41677
41675: GO 41688
41677: POP
// tech := tech_bazooka ; end ;
41678: LD_ADDR_VAR 0 5
41682: PUSH
41683: LD_INT 44
41685: ST_TO_ADDR
41686: GO 41689
41688: POP
// if Researched ( side , tech ) then
41689: LD_VAR 0 3
41693: PPUSH
41694: LD_VAR 0 5
41698: PPUSH
41699: CALL_OW 325
41703: IFFALSE 41730
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41705: LD_ADDR_VAR 0 2
41709: PUSH
41710: LD_INT 5
41712: PUSH
41713: LD_INT 8
41715: PUSH
41716: LD_INT 9
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: LD_VAR 0 4
41728: ARRAY
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 2
41734: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
// if not mines then
41740: LD_VAR 0 2
41744: NOT
41745: IFFALSE 41749
// exit ;
41747: GO 41893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41749: LD_ADDR_VAR 0 5
41753: PUSH
41754: LD_INT 81
41756: PUSH
41757: LD_VAR 0 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 21
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PPUSH
41787: CALL_OW 69
41791: ST_TO_ADDR
// for i in mines do
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: LD_VAR 0 2
41801: PUSH
41802: FOR_IN
41803: IFFALSE 41891
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41805: LD_VAR 0 4
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: LD_VAR 0 4
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: PPUSH
41823: CALL_OW 458
41827: NOT
41828: IFFALSE 41832
// continue ;
41830: GO 41802
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41832: LD_VAR 0 4
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: LD_VAR 0 4
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PPUSH
41850: CALL_OW 428
41854: PUSH
41855: LD_VAR 0 5
41859: IN
41860: IFFALSE 41889
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41862: LD_VAR 0 4
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: LD_VAR 0 4
41875: PUSH
41876: LD_INT 2
41878: ARRAY
41879: PPUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 456
// end ;
41889: GO 41802
41891: POP
41892: POP
// end ;
41893: LD_VAR 0 3
41897: RET
// export function Count ( array ) ; var i ; begin
41898: LD_INT 0
41900: PPUSH
41901: PPUSH
// result := 0 ;
41902: LD_ADDR_VAR 0 2
41906: PUSH
41907: LD_INT 0
41909: ST_TO_ADDR
// for i in array do
41910: LD_ADDR_VAR 0 3
41914: PUSH
41915: LD_VAR 0 1
41919: PUSH
41920: FOR_IN
41921: IFFALSE 41945
// if i then
41923: LD_VAR 0 3
41927: IFFALSE 41943
// result := result + 1 ;
41929: LD_ADDR_VAR 0 2
41933: PUSH
41934: LD_VAR 0 2
41938: PUSH
41939: LD_INT 1
41941: PLUS
41942: ST_TO_ADDR
41943: GO 41920
41945: POP
41946: POP
// end ;
41947: LD_VAR 0 2
41951: RET
// export function IsEmpty ( building ) ; begin
41952: LD_INT 0
41954: PPUSH
// if not building then
41955: LD_VAR 0 1
41959: NOT
41960: IFFALSE 41964
// exit ;
41962: GO 42007
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41964: LD_ADDR_VAR 0 2
41968: PUSH
41969: LD_VAR 0 1
41973: PUSH
41974: LD_INT 22
41976: PUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 255
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 58
41993: PUSH
41994: EMPTY
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PPUSH
42001: CALL_OW 69
42005: IN
42006: ST_TO_ADDR
// end ;
42007: LD_VAR 0 2
42011: RET
// export function IsNotFull ( building ) ; var places ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
// if not building then
42016: LD_VAR 0 1
42020: NOT
42021: IFFALSE 42025
// exit ;
42023: GO 42196
// result := false ;
42025: LD_ADDR_VAR 0 2
42029: PUSH
42030: LD_INT 0
42032: ST_TO_ADDR
// places := 0 ;
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_INT 0
42040: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42041: LD_VAR 0 1
42045: PPUSH
42046: CALL_OW 266
42050: PUSH
42051: LD_INT 0
42053: DOUBLE
42054: EQUAL
42055: IFTRUE 42113
42057: LD_INT 1
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42113
42063: LD_INT 6
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42113
42069: LD_INT 7
42071: DOUBLE
42072: EQUAL
42073: IFTRUE 42113
42075: LD_INT 8
42077: DOUBLE
42078: EQUAL
42079: IFTRUE 42113
42081: LD_INT 4
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42113
42087: LD_INT 5
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42113
42093: LD_INT 2
42095: DOUBLE
42096: EQUAL
42097: IFTRUE 42113
42099: LD_INT 3
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42113
42105: LD_INT 35
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42124
42113: POP
// places := 6 ; b_bunker , b_breastwork :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 6
42121: ST_TO_ADDR
42122: GO 42169
42124: LD_INT 32
42126: DOUBLE
42127: EQUAL
42128: IFTRUE 42138
42130: LD_INT 31
42132: DOUBLE
42133: EQUAL
42134: IFTRUE 42138
42136: GO 42149
42138: POP
// places := 1 ; b_control_tower :
42139: LD_ADDR_VAR 0 3
42143: PUSH
42144: LD_INT 1
42146: ST_TO_ADDR
42147: GO 42169
42149: LD_INT 36
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42168
42157: POP
// places := 3 ; end ;
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_INT 3
42165: ST_TO_ADDR
42166: GO 42169
42168: POP
// if places then
42169: LD_VAR 0 3
42173: IFFALSE 42196
// result := UnitsInside ( building ) < places ;
42175: LD_ADDR_VAR 0 2
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 313
42189: PUSH
42190: LD_VAR 0 3
42194: LESS
42195: ST_TO_ADDR
// end ;
42196: LD_VAR 0 2
42200: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42201: LD_INT 0
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
// tmp := [ ] ;
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: EMPTY
42213: ST_TO_ADDR
// list := [ ] ;
42214: LD_ADDR_VAR 0 5
42218: PUSH
42219: EMPTY
42220: ST_TO_ADDR
// for i = 16 to 25 do
42221: LD_ADDR_VAR 0 4
42225: PUSH
42226: DOUBLE
42227: LD_INT 16
42229: DEC
42230: ST_TO_ADDR
42231: LD_INT 25
42233: PUSH
42234: FOR_TO
42235: IFFALSE 42308
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_VAR 0 3
42246: PUSH
42247: LD_INT 22
42249: PUSH
42250: LD_VAR 0 1
42254: PPUSH
42255: CALL_OW 255
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 91
42266: PUSH
42267: LD_VAR 0 1
42271: PUSH
42272: LD_INT 6
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 30
42282: PUSH
42283: LD_VAR 0 4
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: PPUSH
42300: CALL_OW 69
42304: ADD
42305: ST_TO_ADDR
42306: GO 42234
42308: POP
42309: POP
// for i = 1 to tmp do
42310: LD_ADDR_VAR 0 4
42314: PUSH
42315: DOUBLE
42316: LD_INT 1
42318: DEC
42319: ST_TO_ADDR
42320: LD_VAR 0 3
42324: PUSH
42325: FOR_TO
42326: IFFALSE 42414
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42328: LD_ADDR_VAR 0 5
42332: PUSH
42333: LD_VAR 0 5
42337: PUSH
42338: LD_VAR 0 3
42342: PUSH
42343: LD_VAR 0 4
42347: ARRAY
42348: PPUSH
42349: CALL_OW 266
42353: PUSH
42354: LD_VAR 0 3
42358: PUSH
42359: LD_VAR 0 4
42363: ARRAY
42364: PPUSH
42365: CALL_OW 250
42369: PUSH
42370: LD_VAR 0 3
42374: PUSH
42375: LD_VAR 0 4
42379: ARRAY
42380: PPUSH
42381: CALL_OW 251
42385: PUSH
42386: LD_VAR 0 3
42390: PUSH
42391: LD_VAR 0 4
42395: ARRAY
42396: PPUSH
42397: CALL_OW 254
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: ADD
42411: ST_TO_ADDR
42412: GO 42325
42414: POP
42415: POP
// result := list ;
42416: LD_ADDR_VAR 0 2
42420: PUSH
42421: LD_VAR 0 5
42425: ST_TO_ADDR
// end ;
42426: LD_VAR 0 2
42430: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42431: LD_INT 0
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
// if not factory then
42440: LD_VAR 0 1
42444: NOT
42445: IFFALSE 42449
// exit ;
42447: GO 43042
// if control = control_apeman then
42449: LD_VAR 0 4
42453: PUSH
42454: LD_INT 5
42456: EQUAL
42457: IFFALSE 42566
// begin tmp := UnitsInside ( factory ) ;
42459: LD_ADDR_VAR 0 8
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 313
42473: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42474: LD_VAR 0 8
42478: PPUSH
42479: LD_INT 25
42481: PUSH
42482: LD_INT 12
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PPUSH
42489: CALL_OW 72
42493: NOT
42494: IFFALSE 42504
// control := control_manual ;
42496: LD_ADDR_VAR 0 4
42500: PUSH
42501: LD_INT 1
42503: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42504: LD_ADDR_VAR 0 8
42508: PUSH
42509: LD_VAR 0 1
42513: PPUSH
42514: CALL 42201 0 1
42518: ST_TO_ADDR
// if tmp then
42519: LD_VAR 0 8
42523: IFFALSE 42566
// begin for i in tmp do
42525: LD_ADDR_VAR 0 7
42529: PUSH
42530: LD_VAR 0 8
42534: PUSH
42535: FOR_IN
42536: IFFALSE 42564
// if i [ 1 ] = b_ext_radio then
42538: LD_VAR 0 7
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PUSH
42547: LD_INT 22
42549: EQUAL
42550: IFFALSE 42562
// begin control := control_remote ;
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: LD_INT 2
42559: ST_TO_ADDR
// break ;
42560: GO 42564
// end ;
42562: GO 42535
42564: POP
42565: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42566: LD_VAR 0 1
42570: PPUSH
42571: LD_VAR 0 2
42575: PPUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: LD_VAR 0 4
42585: PPUSH
42586: LD_VAR 0 5
42590: PPUSH
42591: CALL_OW 448
42595: IFFALSE 42630
// begin result := [ chassis , engine , control , weapon ] ;
42597: LD_ADDR_VAR 0 6
42601: PUSH
42602: LD_VAR 0 2
42606: PUSH
42607: LD_VAR 0 3
42611: PUSH
42612: LD_VAR 0 4
42616: PUSH
42617: LD_VAR 0 5
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// exit ;
42628: GO 43042
// end ; _chassis := AvailableChassisList ( factory ) ;
42630: LD_ADDR_VAR 0 9
42634: PUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 475
42644: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42645: LD_ADDR_VAR 0 11
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: CALL_OW 476
42659: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42660: LD_ADDR_VAR 0 12
42664: PUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 477
42674: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42675: LD_ADDR_VAR 0 10
42679: PUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: CALL_OW 478
42689: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42690: LD_VAR 0 9
42694: NOT
42695: PUSH
42696: LD_VAR 0 11
42700: NOT
42701: OR
42702: PUSH
42703: LD_VAR 0 12
42707: NOT
42708: OR
42709: PUSH
42710: LD_VAR 0 10
42714: NOT
42715: OR
42716: IFFALSE 42751
// begin result := [ chassis , engine , control , weapon ] ;
42718: LD_ADDR_VAR 0 6
42722: PUSH
42723: LD_VAR 0 2
42727: PUSH
42728: LD_VAR 0 3
42732: PUSH
42733: LD_VAR 0 4
42737: PUSH
42738: LD_VAR 0 5
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// exit ;
42749: GO 43042
// end ; if not chassis in _chassis then
42751: LD_VAR 0 2
42755: PUSH
42756: LD_VAR 0 9
42760: IN
42761: NOT
42762: IFFALSE 42788
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42764: LD_ADDR_VAR 0 2
42768: PUSH
42769: LD_VAR 0 9
42773: PUSH
42774: LD_INT 1
42776: PPUSH
42777: LD_VAR 0 9
42781: PPUSH
42782: CALL_OW 12
42786: ARRAY
42787: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42788: LD_VAR 0 2
42792: PPUSH
42793: LD_VAR 0 3
42797: PPUSH
42798: CALL 43047 0 2
42802: NOT
42803: IFFALSE 42862
// repeat engine := _engine [ 1 ] ;
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_VAR 0 11
42814: PUSH
42815: LD_INT 1
42817: ARRAY
42818: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42819: LD_ADDR_VAR 0 11
42823: PUSH
42824: LD_VAR 0 11
42828: PPUSH
42829: LD_INT 1
42831: PPUSH
42832: CALL_OW 3
42836: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42837: LD_VAR 0 2
42841: PPUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: CALL 43047 0 2
42851: PUSH
42852: LD_VAR 0 11
42856: PUSH
42857: EMPTY
42858: EQUAL
42859: OR
42860: IFFALSE 42805
// if not control in _control then
42862: LD_VAR 0 4
42866: PUSH
42867: LD_VAR 0 12
42871: IN
42872: NOT
42873: IFFALSE 42899
// control := _control [ rand ( 1 , _control ) ] ;
42875: LD_ADDR_VAR 0 4
42879: PUSH
42880: LD_VAR 0 12
42884: PUSH
42885: LD_INT 1
42887: PPUSH
42888: LD_VAR 0 12
42892: PPUSH
42893: CALL_OW 12
42897: ARRAY
42898: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42899: LD_VAR 0 2
42903: PPUSH
42904: LD_VAR 0 5
42908: PPUSH
42909: CALL 43267 0 2
42913: NOT
42914: IFFALSE 42973
// repeat weapon := _weapon [ 1 ] ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: LD_VAR 0 10
42925: PUSH
42926: LD_INT 1
42928: ARRAY
42929: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42930: LD_ADDR_VAR 0 10
42934: PUSH
42935: LD_VAR 0 10
42939: PPUSH
42940: LD_INT 1
42942: PPUSH
42943: CALL_OW 3
42947: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42948: LD_VAR 0 2
42952: PPUSH
42953: LD_VAR 0 5
42957: PPUSH
42958: CALL 43267 0 2
42962: PUSH
42963: LD_VAR 0 10
42967: PUSH
42968: EMPTY
42969: EQUAL
42970: OR
42971: IFFALSE 42916
// result := [ ] ;
42973: LD_ADDR_VAR 0 6
42977: PUSH
42978: EMPTY
42979: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42980: LD_VAR 0 1
42984: PPUSH
42985: LD_VAR 0 2
42989: PPUSH
42990: LD_VAR 0 3
42994: PPUSH
42995: LD_VAR 0 4
42999: PPUSH
43000: LD_VAR 0 5
43004: PPUSH
43005: CALL_OW 448
43009: IFFALSE 43042
// result := [ chassis , engine , control , weapon ] ;
43011: LD_ADDR_VAR 0 6
43015: PUSH
43016: LD_VAR 0 2
43020: PUSH
43021: LD_VAR 0 3
43025: PUSH
43026: LD_VAR 0 4
43030: PUSH
43031: LD_VAR 0 5
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// end ;
43042: LD_VAR 0 6
43046: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43047: LD_INT 0
43049: PPUSH
// if not chassis or not engine then
43050: LD_VAR 0 1
43054: NOT
43055: PUSH
43056: LD_VAR 0 2
43060: NOT
43061: OR
43062: IFFALSE 43066
// exit ;
43064: GO 43262
// case engine of engine_solar :
43066: LD_VAR 0 2
43070: PUSH
43071: LD_INT 2
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43079
43077: GO 43117
43079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43080: LD_ADDR_VAR 0 3
43084: PUSH
43085: LD_INT 11
43087: PUSH
43088: LD_INT 12
43090: PUSH
43091: LD_INT 13
43093: PUSH
43094: LD_INT 14
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
43115: GO 43246
43117: LD_INT 1
43119: DOUBLE
43120: EQUAL
43121: IFTRUE 43125
43123: GO 43187
43125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43126: LD_ADDR_VAR 0 3
43130: PUSH
43131: LD_INT 11
43133: PUSH
43134: LD_INT 12
43136: PUSH
43137: LD_INT 13
43139: PUSH
43140: LD_INT 14
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 4
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: LD_INT 21
43160: PUSH
43161: LD_INT 23
43163: PUSH
43164: LD_INT 22
43166: PUSH
43167: LD_INT 24
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
43185: GO 43246
43187: LD_INT 3
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43195
43193: GO 43245
43195: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43196: LD_ADDR_VAR 0 3
43200: PUSH
43201: LD_INT 13
43203: PUSH
43204: LD_INT 14
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: LD_INT 4
43215: PUSH
43216: LD_INT 5
43218: PUSH
43219: LD_INT 21
43221: PUSH
43222: LD_INT 22
43224: PUSH
43225: LD_INT 23
43227: PUSH
43228: LD_INT 24
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
43243: GO 43246
43245: POP
// result := ( chassis in result ) ;
43246: LD_ADDR_VAR 0 3
43250: PUSH
43251: LD_VAR 0 1
43255: PUSH
43256: LD_VAR 0 3
43260: IN
43261: ST_TO_ADDR
// end ;
43262: LD_VAR 0 3
43266: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43267: LD_INT 0
43269: PPUSH
// if not chassis or not weapon then
43270: LD_VAR 0 1
43274: NOT
43275: PUSH
43276: LD_VAR 0 2
43280: NOT
43281: OR
43282: IFFALSE 43286
// exit ;
43284: GO 44348
// case weapon of us_machine_gun :
43286: LD_VAR 0 2
43290: PUSH
43291: LD_INT 2
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43299
43297: GO 43329
43299: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: LD_INT 4
43316: PUSH
43317: LD_INT 5
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: ST_TO_ADDR
43327: GO 44332
43329: LD_INT 3
43331: DOUBLE
43332: EQUAL
43333: IFTRUE 43337
43335: GO 43367
43337: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43338: LD_ADDR_VAR 0 3
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
43365: GO 44332
43367: LD_INT 11
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43405
43375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: LD_INT 4
43392: PUSH
43393: LD_INT 5
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
43403: GO 44332
43405: LD_INT 4
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 43439
43413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 4
43427: PUSH
43428: LD_INT 5
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
43437: GO 44332
43439: LD_INT 5
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43447
43445: GO 43473
43447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 4
43461: PUSH
43462: LD_INT 5
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
43471: GO 44332
43473: LD_INT 9
43475: DOUBLE
43476: EQUAL
43477: IFTRUE 43481
43479: GO 43507
43481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 4
43495: PUSH
43496: LD_INT 5
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
43505: GO 44332
43507: LD_INT 7
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43515
43513: GO 43541
43515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43516: LD_ADDR_VAR 0 3
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 4
43529: PUSH
43530: LD_INT 5
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: ST_TO_ADDR
43539: GO 44332
43541: LD_INT 12
43543: DOUBLE
43544: EQUAL
43545: IFTRUE 43549
43547: GO 43575
43549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: LD_INT 5
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
43573: GO 44332
43575: LD_INT 13
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43609
43583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: LD_INT 4
43597: PUSH
43598: LD_INT 5
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
43607: GO 44332
43609: LD_INT 14
43611: DOUBLE
43612: EQUAL
43613: IFTRUE 43617
43615: GO 43635
43617: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 4
43625: PUSH
43626: LD_INT 5
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: ST_TO_ADDR
43633: GO 44332
43635: LD_INT 6
43637: DOUBLE
43638: EQUAL
43639: IFTRUE 43643
43641: GO 43661
43643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_INT 4
43651: PUSH
43652: LD_INT 5
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: ST_TO_ADDR
43659: GO 44332
43661: LD_INT 10
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43687
43669: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_INT 4
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: ST_TO_ADDR
43685: GO 44332
43687: LD_INT 22
43689: DOUBLE
43690: EQUAL
43691: IFTRUE 43695
43693: GO 43721
43695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_INT 11
43703: PUSH
43704: LD_INT 12
43706: PUSH
43707: LD_INT 13
43709: PUSH
43710: LD_INT 14
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
43719: GO 44332
43721: LD_INT 23
43723: DOUBLE
43724: EQUAL
43725: IFTRUE 43729
43727: GO 43755
43729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43730: LD_ADDR_VAR 0 3
43734: PUSH
43735: LD_INT 11
43737: PUSH
43738: LD_INT 12
43740: PUSH
43741: LD_INT 13
43743: PUSH
43744: LD_INT 14
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
43753: GO 44332
43755: LD_INT 24
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43763
43761: GO 43789
43763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43764: LD_ADDR_VAR 0 3
43768: PUSH
43769: LD_INT 11
43771: PUSH
43772: LD_INT 12
43774: PUSH
43775: LD_INT 13
43777: PUSH
43778: LD_INT 14
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
43787: GO 44332
43789: LD_INT 30
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43823
43797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 11
43805: PUSH
43806: LD_INT 12
43808: PUSH
43809: LD_INT 13
43811: PUSH
43812: LD_INT 14
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
43821: GO 44332
43823: LD_INT 25
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43849
43831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 13
43839: PUSH
43840: LD_INT 14
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: ST_TO_ADDR
43847: GO 44332
43849: LD_INT 27
43851: DOUBLE
43852: EQUAL
43853: IFTRUE 43857
43855: GO 43875
43857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_INT 13
43865: PUSH
43866: LD_INT 14
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: ST_TO_ADDR
43873: GO 44332
43875: LD_EXP 53
43879: DOUBLE
43880: EQUAL
43881: IFTRUE 43885
43883: GO 43911
43885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43886: LD_ADDR_VAR 0 3
43890: PUSH
43891: LD_INT 11
43893: PUSH
43894: LD_INT 12
43896: PUSH
43897: LD_INT 13
43899: PUSH
43900: LD_INT 14
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
43909: GO 44332
43911: LD_INT 28
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43919
43917: GO 43937
43919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 13
43927: PUSH
43928: LD_INT 14
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: ST_TO_ADDR
43935: GO 44332
43937: LD_INT 29
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43945
43943: GO 43963
43945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43946: LD_ADDR_VAR 0 3
43950: PUSH
43951: LD_INT 13
43953: PUSH
43954: LD_INT 14
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: ST_TO_ADDR
43961: GO 44332
43963: LD_INT 31
43965: DOUBLE
43966: EQUAL
43967: IFTRUE 43971
43969: GO 43989
43971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43972: LD_ADDR_VAR 0 3
43976: PUSH
43977: LD_INT 13
43979: PUSH
43980: LD_INT 14
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: ST_TO_ADDR
43987: GO 44332
43989: LD_INT 26
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44015
43997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_INT 13
44005: PUSH
44006: LD_INT 14
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: ST_TO_ADDR
44013: GO 44332
44015: LD_INT 42
44017: DOUBLE
44018: EQUAL
44019: IFTRUE 44023
44021: GO 44049
44023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44024: LD_ADDR_VAR 0 3
44028: PUSH
44029: LD_INT 21
44031: PUSH
44032: LD_INT 22
44034: PUSH
44035: LD_INT 23
44037: PUSH
44038: LD_INT 24
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: ST_TO_ADDR
44047: GO 44332
44049: LD_INT 43
44051: DOUBLE
44052: EQUAL
44053: IFTRUE 44057
44055: GO 44083
44057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44058: LD_ADDR_VAR 0 3
44062: PUSH
44063: LD_INT 21
44065: PUSH
44066: LD_INT 22
44068: PUSH
44069: LD_INT 23
44071: PUSH
44072: LD_INT 24
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
44081: GO 44332
44083: LD_INT 44
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44091
44089: GO 44117
44091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: LD_INT 21
44099: PUSH
44100: LD_INT 22
44102: PUSH
44103: LD_INT 23
44105: PUSH
44106: LD_INT 24
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
44115: GO 44332
44117: LD_INT 45
44119: DOUBLE
44120: EQUAL
44121: IFTRUE 44125
44123: GO 44151
44125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_INT 21
44133: PUSH
44134: LD_INT 22
44136: PUSH
44137: LD_INT 23
44139: PUSH
44140: LD_INT 24
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
44149: GO 44332
44151: LD_INT 49
44153: DOUBLE
44154: EQUAL
44155: IFTRUE 44159
44157: GO 44185
44159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: LD_INT 21
44167: PUSH
44168: LD_INT 22
44170: PUSH
44171: LD_INT 23
44173: PUSH
44174: LD_INT 24
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
44183: GO 44332
44185: LD_INT 51
44187: DOUBLE
44188: EQUAL
44189: IFTRUE 44193
44191: GO 44219
44193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44194: LD_ADDR_VAR 0 3
44198: PUSH
44199: LD_INT 21
44201: PUSH
44202: LD_INT 22
44204: PUSH
44205: LD_INT 23
44207: PUSH
44208: LD_INT 24
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
44217: GO 44332
44219: LD_INT 52
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 44253
44227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44228: LD_ADDR_VAR 0 3
44232: PUSH
44233: LD_INT 21
44235: PUSH
44236: LD_INT 22
44238: PUSH
44239: LD_INT 23
44241: PUSH
44242: LD_INT 24
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: ST_TO_ADDR
44251: GO 44332
44253: LD_INT 53
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44279
44261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44262: LD_ADDR_VAR 0 3
44266: PUSH
44267: LD_INT 23
44269: PUSH
44270: LD_INT 24
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: ST_TO_ADDR
44277: GO 44332
44279: LD_INT 46
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44305
44287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 23
44295: PUSH
44296: LD_INT 24
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: ST_TO_ADDR
44303: GO 44332
44305: LD_INT 47
44307: DOUBLE
44308: EQUAL
44309: IFTRUE 44313
44311: GO 44331
44313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_INT 23
44321: PUSH
44322: LD_INT 24
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: ST_TO_ADDR
44329: GO 44332
44331: POP
// result := ( chassis in result ) ;
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_VAR 0 1
44341: PUSH
44342: LD_VAR 0 3
44346: IN
44347: ST_TO_ADDR
// end ;
44348: LD_VAR 0 3
44352: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44353: LD_INT 0
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
// result := array ;
44362: LD_ADDR_VAR 0 5
44366: PUSH
44367: LD_VAR 0 1
44371: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44372: LD_VAR 0 1
44376: NOT
44377: PUSH
44378: LD_VAR 0 2
44382: NOT
44383: OR
44384: PUSH
44385: LD_VAR 0 3
44389: NOT
44390: OR
44391: PUSH
44392: LD_VAR 0 2
44396: PUSH
44397: LD_VAR 0 1
44401: GREATER
44402: OR
44403: PUSH
44404: LD_VAR 0 3
44408: PUSH
44409: LD_VAR 0 1
44413: GREATER
44414: OR
44415: IFFALSE 44419
// exit ;
44417: GO 44715
// if direction then
44419: LD_VAR 0 4
44423: IFFALSE 44487
// begin d := 1 ;
44425: LD_ADDR_VAR 0 9
44429: PUSH
44430: LD_INT 1
44432: ST_TO_ADDR
// if i_from > i_to then
44433: LD_VAR 0 2
44437: PUSH
44438: LD_VAR 0 3
44442: GREATER
44443: IFFALSE 44469
// length := ( array - i_from ) + i_to else
44445: LD_ADDR_VAR 0 11
44449: PUSH
44450: LD_VAR 0 1
44454: PUSH
44455: LD_VAR 0 2
44459: MINUS
44460: PUSH
44461: LD_VAR 0 3
44465: PLUS
44466: ST_TO_ADDR
44467: GO 44485
// length := i_to - i_from ;
44469: LD_ADDR_VAR 0 11
44473: PUSH
44474: LD_VAR 0 3
44478: PUSH
44479: LD_VAR 0 2
44483: MINUS
44484: ST_TO_ADDR
// end else
44485: GO 44548
// begin d := - 1 ;
44487: LD_ADDR_VAR 0 9
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: ST_TO_ADDR
// if i_from > i_to then
44496: LD_VAR 0 2
44500: PUSH
44501: LD_VAR 0 3
44505: GREATER
44506: IFFALSE 44526
// length := i_from - i_to else
44508: LD_ADDR_VAR 0 11
44512: PUSH
44513: LD_VAR 0 2
44517: PUSH
44518: LD_VAR 0 3
44522: MINUS
44523: ST_TO_ADDR
44524: GO 44548
// length := ( array - i_to ) + i_from ;
44526: LD_ADDR_VAR 0 11
44530: PUSH
44531: LD_VAR 0 1
44535: PUSH
44536: LD_VAR 0 3
44540: MINUS
44541: PUSH
44542: LD_VAR 0 2
44546: PLUS
44547: ST_TO_ADDR
// end ; if not length then
44548: LD_VAR 0 11
44552: NOT
44553: IFFALSE 44557
// exit ;
44555: GO 44715
// tmp := array ;
44557: LD_ADDR_VAR 0 10
44561: PUSH
44562: LD_VAR 0 1
44566: ST_TO_ADDR
// for i = 1 to length do
44567: LD_ADDR_VAR 0 6
44571: PUSH
44572: DOUBLE
44573: LD_INT 1
44575: DEC
44576: ST_TO_ADDR
44577: LD_VAR 0 11
44581: PUSH
44582: FOR_TO
44583: IFFALSE 44703
// begin for j = 1 to array do
44585: LD_ADDR_VAR 0 7
44589: PUSH
44590: DOUBLE
44591: LD_INT 1
44593: DEC
44594: ST_TO_ADDR
44595: LD_VAR 0 1
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44689
// begin k := j + d ;
44603: LD_ADDR_VAR 0 8
44607: PUSH
44608: LD_VAR 0 7
44612: PUSH
44613: LD_VAR 0 9
44617: PLUS
44618: ST_TO_ADDR
// if k > array then
44619: LD_VAR 0 8
44623: PUSH
44624: LD_VAR 0 1
44628: GREATER
44629: IFFALSE 44639
// k := 1 ;
44631: LD_ADDR_VAR 0 8
44635: PUSH
44636: LD_INT 1
44638: ST_TO_ADDR
// if not k then
44639: LD_VAR 0 8
44643: NOT
44644: IFFALSE 44656
// k := array ;
44646: LD_ADDR_VAR 0 8
44650: PUSH
44651: LD_VAR 0 1
44655: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44656: LD_ADDR_VAR 0 10
44660: PUSH
44661: LD_VAR 0 10
44665: PPUSH
44666: LD_VAR 0 8
44670: PPUSH
44671: LD_VAR 0 1
44675: PUSH
44676: LD_VAR 0 7
44680: ARRAY
44681: PPUSH
44682: CALL_OW 1
44686: ST_TO_ADDR
// end ;
44687: GO 44600
44689: POP
44690: POP
// array := tmp ;
44691: LD_ADDR_VAR 0 1
44695: PUSH
44696: LD_VAR 0 10
44700: ST_TO_ADDR
// end ;
44701: GO 44582
44703: POP
44704: POP
// result := array ;
44705: LD_ADDR_VAR 0 5
44709: PUSH
44710: LD_VAR 0 1
44714: ST_TO_ADDR
// end ;
44715: LD_VAR 0 5
44719: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44720: LD_INT 0
44722: PPUSH
44723: PPUSH
// result := 0 ;
44724: LD_ADDR_VAR 0 3
44728: PUSH
44729: LD_INT 0
44731: ST_TO_ADDR
// if not array or not value in array then
44732: LD_VAR 0 1
44736: NOT
44737: PUSH
44738: LD_VAR 0 2
44742: PUSH
44743: LD_VAR 0 1
44747: IN
44748: NOT
44749: OR
44750: IFFALSE 44754
// exit ;
44752: GO 44808
// for i = 1 to array do
44754: LD_ADDR_VAR 0 4
44758: PUSH
44759: DOUBLE
44760: LD_INT 1
44762: DEC
44763: ST_TO_ADDR
44764: LD_VAR 0 1
44768: PUSH
44769: FOR_TO
44770: IFFALSE 44806
// if value = array [ i ] then
44772: LD_VAR 0 2
44776: PUSH
44777: LD_VAR 0 1
44781: PUSH
44782: LD_VAR 0 4
44786: ARRAY
44787: EQUAL
44788: IFFALSE 44804
// begin result := i ;
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_VAR 0 4
44799: ST_TO_ADDR
// exit ;
44800: POP
44801: POP
44802: GO 44808
// end ;
44804: GO 44769
44806: POP
44807: POP
// end ;
44808: LD_VAR 0 3
44812: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44813: LD_INT 0
44815: PPUSH
// vc_chassis := chassis ;
44816: LD_ADDR_OWVAR 37
44820: PUSH
44821: LD_VAR 0 1
44825: ST_TO_ADDR
// vc_engine := engine ;
44826: LD_ADDR_OWVAR 39
44830: PUSH
44831: LD_VAR 0 2
44835: ST_TO_ADDR
// vc_control := control ;
44836: LD_ADDR_OWVAR 38
44840: PUSH
44841: LD_VAR 0 3
44845: ST_TO_ADDR
// vc_weapon := weapon ;
44846: LD_ADDR_OWVAR 40
44850: PUSH
44851: LD_VAR 0 4
44855: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44856: LD_ADDR_OWVAR 41
44860: PUSH
44861: LD_VAR 0 5
44865: ST_TO_ADDR
// end ;
44866: LD_VAR 0 6
44870: RET
// export function WantPlant ( unit ) ; var task ; begin
44871: LD_INT 0
44873: PPUSH
44874: PPUSH
// result := false ;
44875: LD_ADDR_VAR 0 2
44879: PUSH
44880: LD_INT 0
44882: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44883: LD_ADDR_VAR 0 3
44887: PUSH
44888: LD_VAR 0 1
44892: PPUSH
44893: CALL_OW 437
44897: ST_TO_ADDR
// if task then
44898: LD_VAR 0 3
44902: IFFALSE 44930
// if task [ 1 ] [ 1 ] = p then
44904: LD_VAR 0 3
44908: PUSH
44909: LD_INT 1
44911: ARRAY
44912: PUSH
44913: LD_INT 1
44915: ARRAY
44916: PUSH
44917: LD_STRING p
44919: EQUAL
44920: IFFALSE 44930
// result := true ;
44922: LD_ADDR_VAR 0 2
44926: PUSH
44927: LD_INT 1
44929: ST_TO_ADDR
// end ;
44930: LD_VAR 0 2
44934: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44935: LD_INT 0
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
// if pos < 1 then
44941: LD_VAR 0 2
44945: PUSH
44946: LD_INT 1
44948: LESS
44949: IFFALSE 44953
// exit ;
44951: GO 45256
// if pos = 1 then
44953: LD_VAR 0 2
44957: PUSH
44958: LD_INT 1
44960: EQUAL
44961: IFFALSE 44994
// result := Replace ( arr , pos [ 1 ] , value ) else
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: LD_VAR 0 2
44977: PUSH
44978: LD_INT 1
44980: ARRAY
44981: PPUSH
44982: LD_VAR 0 3
44986: PPUSH
44987: CALL_OW 1
44991: ST_TO_ADDR
44992: GO 45256
// begin tmp := arr ;
44994: LD_ADDR_VAR 0 6
44998: PUSH
44999: LD_VAR 0 1
45003: ST_TO_ADDR
// s_arr := [ tmp ] ;
45004: LD_ADDR_VAR 0 7
45008: PUSH
45009: LD_VAR 0 6
45013: PUSH
45014: EMPTY
45015: LIST
45016: ST_TO_ADDR
// for i = 1 to pos - 1 do
45017: LD_ADDR_VAR 0 5
45021: PUSH
45022: DOUBLE
45023: LD_INT 1
45025: DEC
45026: ST_TO_ADDR
45027: LD_VAR 0 2
45031: PUSH
45032: LD_INT 1
45034: MINUS
45035: PUSH
45036: FOR_TO
45037: IFFALSE 45082
// begin tmp := tmp [ pos [ i ] ] ;
45039: LD_ADDR_VAR 0 6
45043: PUSH
45044: LD_VAR 0 6
45048: PUSH
45049: LD_VAR 0 2
45053: PUSH
45054: LD_VAR 0 5
45058: ARRAY
45059: ARRAY
45060: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45061: LD_ADDR_VAR 0 7
45065: PUSH
45066: LD_VAR 0 7
45070: PUSH
45071: LD_VAR 0 6
45075: PUSH
45076: EMPTY
45077: LIST
45078: ADD
45079: ST_TO_ADDR
// end ;
45080: GO 45036
45082: POP
45083: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45084: LD_ADDR_VAR 0 6
45088: PUSH
45089: LD_VAR 0 6
45093: PPUSH
45094: LD_VAR 0 2
45098: PUSH
45099: LD_VAR 0 2
45103: ARRAY
45104: PPUSH
45105: LD_VAR 0 3
45109: PPUSH
45110: CALL_OW 1
45114: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45115: LD_ADDR_VAR 0 7
45119: PUSH
45120: LD_VAR 0 7
45124: PPUSH
45125: LD_VAR 0 7
45129: PPUSH
45130: LD_VAR 0 6
45134: PPUSH
45135: CALL_OW 1
45139: ST_TO_ADDR
// for i = s_arr downto 2 do
45140: LD_ADDR_VAR 0 5
45144: PUSH
45145: DOUBLE
45146: LD_VAR 0 7
45150: INC
45151: ST_TO_ADDR
45152: LD_INT 2
45154: PUSH
45155: FOR_DOWNTO
45156: IFFALSE 45240
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45158: LD_ADDR_VAR 0 6
45162: PUSH
45163: LD_VAR 0 7
45167: PUSH
45168: LD_VAR 0 5
45172: PUSH
45173: LD_INT 1
45175: MINUS
45176: ARRAY
45177: PPUSH
45178: LD_VAR 0 2
45182: PUSH
45183: LD_VAR 0 5
45187: PUSH
45188: LD_INT 1
45190: MINUS
45191: ARRAY
45192: PPUSH
45193: LD_VAR 0 7
45197: PUSH
45198: LD_VAR 0 5
45202: ARRAY
45203: PPUSH
45204: CALL_OW 1
45208: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45209: LD_ADDR_VAR 0 7
45213: PUSH
45214: LD_VAR 0 7
45218: PPUSH
45219: LD_VAR 0 5
45223: PUSH
45224: LD_INT 1
45226: MINUS
45227: PPUSH
45228: LD_VAR 0 6
45232: PPUSH
45233: CALL_OW 1
45237: ST_TO_ADDR
// end ;
45238: GO 45155
45240: POP
45241: POP
// result := s_arr [ 1 ] ;
45242: LD_ADDR_VAR 0 4
45246: PUSH
45247: LD_VAR 0 7
45251: PUSH
45252: LD_INT 1
45254: ARRAY
45255: ST_TO_ADDR
// end ; end ;
45256: LD_VAR 0 4
45260: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45261: LD_INT 0
45263: PPUSH
45264: PPUSH
// if not list then
45265: LD_VAR 0 1
45269: NOT
45270: IFFALSE 45274
// exit ;
45272: GO 45365
// i := list [ pos1 ] ;
45274: LD_ADDR_VAR 0 5
45278: PUSH
45279: LD_VAR 0 1
45283: PUSH
45284: LD_VAR 0 2
45288: ARRAY
45289: ST_TO_ADDR
// if not i then
45290: LD_VAR 0 5
45294: NOT
45295: IFFALSE 45299
// exit ;
45297: GO 45365
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45299: LD_ADDR_VAR 0 1
45303: PUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: LD_VAR 0 2
45313: PPUSH
45314: LD_VAR 0 1
45318: PUSH
45319: LD_VAR 0 3
45323: ARRAY
45324: PPUSH
45325: CALL_OW 1
45329: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45330: LD_ADDR_VAR 0 1
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: LD_VAR 0 3
45344: PPUSH
45345: LD_VAR 0 5
45349: PPUSH
45350: CALL_OW 1
45354: ST_TO_ADDR
// result := list ;
45355: LD_ADDR_VAR 0 4
45359: PUSH
45360: LD_VAR 0 1
45364: ST_TO_ADDR
// end ;
45365: LD_VAR 0 4
45369: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45370: LD_INT 0
45372: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45373: LD_ADDR_VAR 0 5
45377: PUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 250
45387: PPUSH
45388: LD_VAR 0 1
45392: PPUSH
45393: CALL_OW 251
45397: PPUSH
45398: LD_VAR 0 2
45402: PPUSH
45403: LD_VAR 0 3
45407: PPUSH
45408: LD_VAR 0 4
45412: PPUSH
45413: CALL 45423 0 5
45417: ST_TO_ADDR
// end ;
45418: LD_VAR 0 5
45422: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45423: LD_INT 0
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
// if not list then
45429: LD_VAR 0 3
45433: NOT
45434: IFFALSE 45438
// exit ;
45436: GO 45826
// result := [ ] ;
45438: LD_ADDR_VAR 0 6
45442: PUSH
45443: EMPTY
45444: ST_TO_ADDR
// for i in list do
45445: LD_ADDR_VAR 0 7
45449: PUSH
45450: LD_VAR 0 3
45454: PUSH
45455: FOR_IN
45456: IFFALSE 45658
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45458: LD_ADDR_VAR 0 9
45462: PUSH
45463: LD_VAR 0 7
45467: PPUSH
45468: LD_VAR 0 1
45472: PPUSH
45473: LD_VAR 0 2
45477: PPUSH
45478: CALL_OW 297
45482: ST_TO_ADDR
// if not result then
45483: LD_VAR 0 6
45487: NOT
45488: IFFALSE 45514
// result := [ [ i , tmp ] ] else
45490: LD_ADDR_VAR 0 6
45494: PUSH
45495: LD_VAR 0 7
45499: PUSH
45500: LD_VAR 0 9
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: ST_TO_ADDR
45512: GO 45656
// begin if result [ result ] [ 2 ] < tmp then
45514: LD_VAR 0 6
45518: PUSH
45519: LD_VAR 0 6
45523: ARRAY
45524: PUSH
45525: LD_INT 2
45527: ARRAY
45528: PUSH
45529: LD_VAR 0 9
45533: LESS
45534: IFFALSE 45576
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45536: LD_ADDR_VAR 0 6
45540: PUSH
45541: LD_VAR 0 6
45545: PPUSH
45546: LD_VAR 0 6
45550: PUSH
45551: LD_INT 1
45553: PLUS
45554: PPUSH
45555: LD_VAR 0 7
45559: PUSH
45560: LD_VAR 0 9
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PPUSH
45569: CALL_OW 2
45573: ST_TO_ADDR
45574: GO 45656
// for j = 1 to result do
45576: LD_ADDR_VAR 0 8
45580: PUSH
45581: DOUBLE
45582: LD_INT 1
45584: DEC
45585: ST_TO_ADDR
45586: LD_VAR 0 6
45590: PUSH
45591: FOR_TO
45592: IFFALSE 45654
// begin if tmp < result [ j ] [ 2 ] then
45594: LD_VAR 0 9
45598: PUSH
45599: LD_VAR 0 6
45603: PUSH
45604: LD_VAR 0 8
45608: ARRAY
45609: PUSH
45610: LD_INT 2
45612: ARRAY
45613: LESS
45614: IFFALSE 45652
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45616: LD_ADDR_VAR 0 6
45620: PUSH
45621: LD_VAR 0 6
45625: PPUSH
45626: LD_VAR 0 8
45630: PPUSH
45631: LD_VAR 0 7
45635: PUSH
45636: LD_VAR 0 9
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 2
45649: ST_TO_ADDR
// break ;
45650: GO 45654
// end ; end ;
45652: GO 45591
45654: POP
45655: POP
// end ; end ;
45656: GO 45455
45658: POP
45659: POP
// if result and not asc then
45660: LD_VAR 0 6
45664: PUSH
45665: LD_VAR 0 4
45669: NOT
45670: AND
45671: IFFALSE 45746
// begin tmp := result ;
45673: LD_ADDR_VAR 0 9
45677: PUSH
45678: LD_VAR 0 6
45682: ST_TO_ADDR
// for i = tmp downto 1 do
45683: LD_ADDR_VAR 0 7
45687: PUSH
45688: DOUBLE
45689: LD_VAR 0 9
45693: INC
45694: ST_TO_ADDR
45695: LD_INT 1
45697: PUSH
45698: FOR_DOWNTO
45699: IFFALSE 45744
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45701: LD_ADDR_VAR 0 6
45705: PUSH
45706: LD_VAR 0 6
45710: PPUSH
45711: LD_VAR 0 9
45715: PUSH
45716: LD_VAR 0 7
45720: MINUS
45721: PUSH
45722: LD_INT 1
45724: PLUS
45725: PPUSH
45726: LD_VAR 0 9
45730: PUSH
45731: LD_VAR 0 7
45735: ARRAY
45736: PPUSH
45737: CALL_OW 1
45741: ST_TO_ADDR
45742: GO 45698
45744: POP
45745: POP
// end ; tmp := [ ] ;
45746: LD_ADDR_VAR 0 9
45750: PUSH
45751: EMPTY
45752: ST_TO_ADDR
// if mode then
45753: LD_VAR 0 5
45757: IFFALSE 45826
// begin for i = 1 to result do
45759: LD_ADDR_VAR 0 7
45763: PUSH
45764: DOUBLE
45765: LD_INT 1
45767: DEC
45768: ST_TO_ADDR
45769: LD_VAR 0 6
45773: PUSH
45774: FOR_TO
45775: IFFALSE 45814
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45777: LD_ADDR_VAR 0 9
45781: PUSH
45782: LD_VAR 0 9
45786: PPUSH
45787: LD_VAR 0 7
45791: PPUSH
45792: LD_VAR 0 6
45796: PUSH
45797: LD_VAR 0 7
45801: ARRAY
45802: PUSH
45803: LD_INT 1
45805: ARRAY
45806: PPUSH
45807: CALL_OW 1
45811: ST_TO_ADDR
45812: GO 45774
45814: POP
45815: POP
// result := tmp ;
45816: LD_ADDR_VAR 0 6
45820: PUSH
45821: LD_VAR 0 9
45825: ST_TO_ADDR
// end ; end ;
45826: LD_VAR 0 6
45830: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45831: LD_INT 0
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
45837: PPUSH
45838: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45839: LD_ADDR_VAR 0 5
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// if not x or not y then
45861: LD_VAR 0 2
45865: NOT
45866: PUSH
45867: LD_VAR 0 3
45871: NOT
45872: OR
45873: IFFALSE 45877
// exit ;
45875: GO 47529
// if not range then
45877: LD_VAR 0 4
45881: NOT
45882: IFFALSE 45892
// range := 10 ;
45884: LD_ADDR_VAR 0 4
45888: PUSH
45889: LD_INT 10
45891: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45892: LD_ADDR_VAR 0 8
45896: PUSH
45897: LD_INT 81
45899: PUSH
45900: LD_VAR 0 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 92
45911: PUSH
45912: LD_VAR 0 2
45916: PUSH
45917: LD_VAR 0 3
45921: PUSH
45922: LD_VAR 0 4
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 21
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: PPUSH
45955: CALL_OW 69
45959: ST_TO_ADDR
// if not tmp then
45960: LD_VAR 0 8
45964: NOT
45965: IFFALSE 45969
// exit ;
45967: GO 47529
// for i in tmp do
45969: LD_ADDR_VAR 0 6
45973: PUSH
45974: LD_VAR 0 8
45978: PUSH
45979: FOR_IN
45980: IFFALSE 47504
// begin points := [ 0 , 0 , 0 ] ;
45982: LD_ADDR_VAR 0 9
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// bpoints := 1 ;
46001: LD_ADDR_VAR 0 10
46005: PUSH
46006: LD_INT 1
46008: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46009: LD_VAR 0 6
46013: PPUSH
46014: CALL_OW 247
46018: PUSH
46019: LD_INT 1
46021: DOUBLE
46022: EQUAL
46023: IFTRUE 46027
46025: GO 46605
46027: POP
// begin if GetClass ( i ) = 1 then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 257
46037: PUSH
46038: LD_INT 1
46040: EQUAL
46041: IFFALSE 46062
// points := [ 10 , 5 , 3 ] ;
46043: LD_ADDR_VAR 0 9
46047: PUSH
46048: LD_INT 10
46050: PUSH
46051: LD_INT 5
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46062: LD_VAR 0 6
46066: PPUSH
46067: CALL_OW 257
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 4
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: IN
46086: IFFALSE 46107
// points := [ 3 , 2 , 1 ] ;
46088: LD_ADDR_VAR 0 9
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46107: LD_VAR 0 6
46111: PPUSH
46112: CALL_OW 257
46116: PUSH
46117: LD_INT 5
46119: EQUAL
46120: IFFALSE 46141
// points := [ 130 , 5 , 2 ] ;
46122: LD_ADDR_VAR 0 9
46126: PUSH
46127: LD_INT 130
46129: PUSH
46130: LD_INT 5
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 257
46150: PUSH
46151: LD_INT 8
46153: EQUAL
46154: IFFALSE 46175
// points := [ 35 , 35 , 30 ] ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_INT 35
46163: PUSH
46164: LD_INT 35
46166: PUSH
46167: LD_INT 30
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46175: LD_VAR 0 6
46179: PPUSH
46180: CALL_OW 257
46184: PUSH
46185: LD_INT 9
46187: EQUAL
46188: IFFALSE 46209
// points := [ 20 , 55 , 40 ] ;
46190: LD_ADDR_VAR 0 9
46194: PUSH
46195: LD_INT 20
46197: PUSH
46198: LD_INT 55
46200: PUSH
46201: LD_INT 40
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46209: LD_VAR 0 6
46213: PPUSH
46214: CALL_OW 257
46218: PUSH
46219: LD_INT 12
46221: PUSH
46222: LD_INT 16
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: IN
46229: IFFALSE 46250
// points := [ 5 , 3 , 2 ] ;
46231: LD_ADDR_VAR 0 9
46235: PUSH
46236: LD_INT 5
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46250: LD_VAR 0 6
46254: PPUSH
46255: CALL_OW 257
46259: PUSH
46260: LD_INT 17
46262: EQUAL
46263: IFFALSE 46284
// points := [ 100 , 50 , 75 ] ;
46265: LD_ADDR_VAR 0 9
46269: PUSH
46270: LD_INT 100
46272: PUSH
46273: LD_INT 50
46275: PUSH
46276: LD_INT 75
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46284: LD_VAR 0 6
46288: PPUSH
46289: CALL_OW 257
46293: PUSH
46294: LD_INT 15
46296: EQUAL
46297: IFFALSE 46318
// points := [ 10 , 5 , 3 ] ;
46299: LD_ADDR_VAR 0 9
46303: PUSH
46304: LD_INT 10
46306: PUSH
46307: LD_INT 5
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46318: LD_VAR 0 6
46322: PPUSH
46323: CALL_OW 257
46327: PUSH
46328: LD_INT 14
46330: EQUAL
46331: IFFALSE 46352
// points := [ 10 , 0 , 0 ] ;
46333: LD_ADDR_VAR 0 9
46337: PUSH
46338: LD_INT 10
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46352: LD_VAR 0 6
46356: PPUSH
46357: CALL_OW 257
46361: PUSH
46362: LD_INT 11
46364: EQUAL
46365: IFFALSE 46386
// points := [ 30 , 10 , 5 ] ;
46367: LD_ADDR_VAR 0 9
46371: PUSH
46372: LD_INT 30
46374: PUSH
46375: LD_INT 10
46377: PUSH
46378: LD_INT 5
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46386: LD_VAR 0 1
46390: PPUSH
46391: LD_INT 5
46393: PPUSH
46394: CALL_OW 321
46398: PUSH
46399: LD_INT 2
46401: EQUAL
46402: IFFALSE 46419
// bpoints := bpoints * 1.8 ;
46404: LD_ADDR_VAR 0 10
46408: PUSH
46409: LD_VAR 0 10
46413: PUSH
46414: LD_REAL  1.80000000000000E+0000
46417: MUL
46418: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46419: LD_VAR 0 6
46423: PPUSH
46424: CALL_OW 257
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 4
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: IN
46447: PUSH
46448: LD_VAR 0 1
46452: PPUSH
46453: LD_INT 51
46455: PPUSH
46456: CALL_OW 321
46460: PUSH
46461: LD_INT 2
46463: EQUAL
46464: AND
46465: IFFALSE 46482
// bpoints := bpoints * 1.2 ;
46467: LD_ADDR_VAR 0 10
46471: PUSH
46472: LD_VAR 0 10
46476: PUSH
46477: LD_REAL  1.20000000000000E+0000
46480: MUL
46481: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46482: LD_VAR 0 6
46486: PPUSH
46487: CALL_OW 257
46491: PUSH
46492: LD_INT 5
46494: PUSH
46495: LD_INT 7
46497: PUSH
46498: LD_INT 9
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: IN
46506: PUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: LD_INT 52
46514: PPUSH
46515: CALL_OW 321
46519: PUSH
46520: LD_INT 2
46522: EQUAL
46523: AND
46524: IFFALSE 46541
// bpoints := bpoints * 1.5 ;
46526: LD_ADDR_VAR 0 10
46530: PUSH
46531: LD_VAR 0 10
46535: PUSH
46536: LD_REAL  1.50000000000000E+0000
46539: MUL
46540: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46541: LD_VAR 0 1
46545: PPUSH
46546: LD_INT 66
46548: PPUSH
46549: CALL_OW 321
46553: PUSH
46554: LD_INT 2
46556: EQUAL
46557: IFFALSE 46574
// bpoints := bpoints * 1.1 ;
46559: LD_ADDR_VAR 0 10
46563: PUSH
46564: LD_VAR 0 10
46568: PUSH
46569: LD_REAL  1.10000000000000E+0000
46572: MUL
46573: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46574: LD_ADDR_VAR 0 10
46578: PUSH
46579: LD_VAR 0 10
46583: PUSH
46584: LD_VAR 0 6
46588: PPUSH
46589: LD_INT 1
46591: PPUSH
46592: CALL_OW 259
46596: PUSH
46597: LD_REAL  1.15000000000000E+0000
46600: MUL
46601: MUL
46602: ST_TO_ADDR
// end ; unit_vehicle :
46603: GO 47433
46605: LD_INT 2
46607: DOUBLE
46608: EQUAL
46609: IFTRUE 46613
46611: GO 47421
46613: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46614: LD_VAR 0 6
46618: PPUSH
46619: CALL_OW 264
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 42
46629: PUSH
46630: LD_INT 24
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: IN
46638: IFFALSE 46659
// points := [ 25 , 5 , 3 ] ;
46640: LD_ADDR_VAR 0 9
46644: PUSH
46645: LD_INT 25
46647: PUSH
46648: LD_INT 5
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46659: LD_VAR 0 6
46663: PPUSH
46664: CALL_OW 264
46668: PUSH
46669: LD_INT 4
46671: PUSH
46672: LD_INT 43
46674: PUSH
46675: LD_INT 25
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: IN
46683: IFFALSE 46704
// points := [ 40 , 15 , 5 ] ;
46685: LD_ADDR_VAR 0 9
46689: PUSH
46690: LD_INT 40
46692: PUSH
46693: LD_INT 15
46695: PUSH
46696: LD_INT 5
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46704: LD_VAR 0 6
46708: PPUSH
46709: CALL_OW 264
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: LD_INT 23
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: IN
46724: IFFALSE 46745
// points := [ 7 , 25 , 8 ] ;
46726: LD_ADDR_VAR 0 9
46730: PUSH
46731: LD_INT 7
46733: PUSH
46734: LD_INT 25
46736: PUSH
46737: LD_INT 8
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46745: LD_VAR 0 6
46749: PPUSH
46750: CALL_OW 264
46754: PUSH
46755: LD_INT 5
46757: PUSH
46758: LD_INT 27
46760: PUSH
46761: LD_INT 44
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: IN
46769: IFFALSE 46790
// points := [ 14 , 50 , 16 ] ;
46771: LD_ADDR_VAR 0 9
46775: PUSH
46776: LD_INT 14
46778: PUSH
46779: LD_INT 50
46781: PUSH
46782: LD_INT 16
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46790: LD_VAR 0 6
46794: PPUSH
46795: CALL_OW 264
46799: PUSH
46800: LD_INT 6
46802: PUSH
46803: LD_INT 46
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: IN
46810: IFFALSE 46831
// points := [ 32 , 120 , 70 ] ;
46812: LD_ADDR_VAR 0 9
46816: PUSH
46817: LD_INT 32
46819: PUSH
46820: LD_INT 120
46822: PUSH
46823: LD_INT 70
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46831: LD_VAR 0 6
46835: PPUSH
46836: CALL_OW 264
46840: PUSH
46841: LD_INT 7
46843: PUSH
46844: LD_INT 28
46846: PUSH
46847: LD_INT 45
46849: PUSH
46850: LD_EXP 53
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: IN
46861: IFFALSE 46882
// points := [ 35 , 20 , 45 ] ;
46863: LD_ADDR_VAR 0 9
46867: PUSH
46868: LD_INT 35
46870: PUSH
46871: LD_INT 20
46873: PUSH
46874: LD_INT 45
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46882: LD_VAR 0 6
46886: PPUSH
46887: CALL_OW 264
46891: PUSH
46892: LD_INT 47
46894: PUSH
46895: EMPTY
46896: LIST
46897: IN
46898: IFFALSE 46919
// points := [ 67 , 45 , 75 ] ;
46900: LD_ADDR_VAR 0 9
46904: PUSH
46905: LD_INT 67
46907: PUSH
46908: LD_INT 45
46910: PUSH
46911: LD_INT 75
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46919: LD_VAR 0 6
46923: PPUSH
46924: CALL_OW 264
46928: PUSH
46929: LD_INT 26
46931: PUSH
46932: EMPTY
46933: LIST
46934: IN
46935: IFFALSE 46956
// points := [ 120 , 30 , 80 ] ;
46937: LD_ADDR_VAR 0 9
46941: PUSH
46942: LD_INT 120
46944: PUSH
46945: LD_INT 30
46947: PUSH
46948: LD_INT 80
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46956: LD_VAR 0 6
46960: PPUSH
46961: CALL_OW 264
46965: PUSH
46966: LD_INT 22
46968: PUSH
46969: EMPTY
46970: LIST
46971: IN
46972: IFFALSE 46993
// points := [ 40 , 1 , 1 ] ;
46974: LD_ADDR_VAR 0 9
46978: PUSH
46979: LD_INT 40
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46993: LD_VAR 0 6
46997: PPUSH
46998: CALL_OW 264
47002: PUSH
47003: LD_INT 29
47005: PUSH
47006: EMPTY
47007: LIST
47008: IN
47009: IFFALSE 47030
// points := [ 70 , 200 , 400 ] ;
47011: LD_ADDR_VAR 0 9
47015: PUSH
47016: LD_INT 70
47018: PUSH
47019: LD_INT 200
47021: PUSH
47022: LD_INT 400
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47030: LD_VAR 0 6
47034: PPUSH
47035: CALL_OW 264
47039: PUSH
47040: LD_INT 14
47042: PUSH
47043: LD_INT 53
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: IN
47050: IFFALSE 47071
// points := [ 40 , 10 , 20 ] ;
47052: LD_ADDR_VAR 0 9
47056: PUSH
47057: LD_INT 40
47059: PUSH
47060: LD_INT 10
47062: PUSH
47063: LD_INT 20
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47071: LD_VAR 0 6
47075: PPUSH
47076: CALL_OW 264
47080: PUSH
47081: LD_INT 9
47083: PUSH
47084: EMPTY
47085: LIST
47086: IN
47087: IFFALSE 47108
// points := [ 5 , 70 , 20 ] ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_INT 5
47096: PUSH
47097: LD_INT 70
47099: PUSH
47100: LD_INT 20
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47108: LD_VAR 0 6
47112: PPUSH
47113: CALL_OW 264
47117: PUSH
47118: LD_INT 10
47120: PUSH
47121: EMPTY
47122: LIST
47123: IN
47124: IFFALSE 47145
// points := [ 35 , 110 , 70 ] ;
47126: LD_ADDR_VAR 0 9
47130: PUSH
47131: LD_INT 35
47133: PUSH
47134: LD_INT 110
47136: PUSH
47137: LD_INT 70
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47145: LD_VAR 0 6
47149: PPUSH
47150: CALL_OW 265
47154: PUSH
47155: LD_INT 25
47157: EQUAL
47158: IFFALSE 47179
// points := [ 80 , 65 , 100 ] ;
47160: LD_ADDR_VAR 0 9
47164: PUSH
47165: LD_INT 80
47167: PUSH
47168: LD_INT 65
47170: PUSH
47171: LD_INT 100
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 263
47188: PUSH
47189: LD_INT 1
47191: EQUAL
47192: IFFALSE 47227
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47194: LD_ADDR_VAR 0 10
47198: PUSH
47199: LD_VAR 0 10
47203: PUSH
47204: LD_VAR 0 6
47208: PPUSH
47209: CALL_OW 311
47213: PPUSH
47214: LD_INT 3
47216: PPUSH
47217: CALL_OW 259
47221: PUSH
47222: LD_INT 4
47224: MUL
47225: MUL
47226: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47227: LD_VAR 0 6
47231: PPUSH
47232: CALL_OW 263
47236: PUSH
47237: LD_INT 2
47239: EQUAL
47240: IFFALSE 47291
// begin j := IsControledBy ( i ) ;
47242: LD_ADDR_VAR 0 7
47246: PUSH
47247: LD_VAR 0 6
47251: PPUSH
47252: CALL_OW 312
47256: ST_TO_ADDR
// if j then
47257: LD_VAR 0 7
47261: IFFALSE 47291
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47263: LD_ADDR_VAR 0 10
47267: PUSH
47268: LD_VAR 0 10
47272: PUSH
47273: LD_VAR 0 7
47277: PPUSH
47278: LD_INT 3
47280: PPUSH
47281: CALL_OW 259
47285: PUSH
47286: LD_INT 3
47288: MUL
47289: MUL
47290: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47291: LD_VAR 0 6
47295: PPUSH
47296: CALL_OW 264
47300: PUSH
47301: LD_INT 5
47303: PUSH
47304: LD_INT 6
47306: PUSH
47307: LD_INT 46
47309: PUSH
47310: LD_INT 44
47312: PUSH
47313: LD_INT 47
47315: PUSH
47316: LD_INT 45
47318: PUSH
47319: LD_INT 28
47321: PUSH
47322: LD_INT 7
47324: PUSH
47325: LD_INT 27
47327: PUSH
47328: LD_INT 29
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: IN
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: LD_INT 52
47351: PPUSH
47352: CALL_OW 321
47356: PUSH
47357: LD_INT 2
47359: EQUAL
47360: AND
47361: IFFALSE 47378
// bpoints := bpoints * 1.2 ;
47363: LD_ADDR_VAR 0 10
47367: PUSH
47368: LD_VAR 0 10
47372: PUSH
47373: LD_REAL  1.20000000000000E+0000
47376: MUL
47377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47378: LD_VAR 0 6
47382: PPUSH
47383: CALL_OW 264
47387: PUSH
47388: LD_INT 6
47390: PUSH
47391: LD_INT 46
47393: PUSH
47394: LD_INT 47
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: IN
47402: IFFALSE 47419
// bpoints := bpoints * 1.2 ;
47404: LD_ADDR_VAR 0 10
47408: PUSH
47409: LD_VAR 0 10
47413: PUSH
47414: LD_REAL  1.20000000000000E+0000
47417: MUL
47418: ST_TO_ADDR
// end ; unit_building :
47419: GO 47433
47421: LD_INT 3
47423: DOUBLE
47424: EQUAL
47425: IFTRUE 47429
47427: GO 47432
47429: POP
// ; end ;
47430: GO 47433
47432: POP
// for j = 1 to 3 do
47433: LD_ADDR_VAR 0 7
47437: PUSH
47438: DOUBLE
47439: LD_INT 1
47441: DEC
47442: ST_TO_ADDR
47443: LD_INT 3
47445: PUSH
47446: FOR_TO
47447: IFFALSE 47500
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47449: LD_ADDR_VAR 0 5
47453: PUSH
47454: LD_VAR 0 5
47458: PPUSH
47459: LD_VAR 0 7
47463: PPUSH
47464: LD_VAR 0 5
47468: PUSH
47469: LD_VAR 0 7
47473: ARRAY
47474: PUSH
47475: LD_VAR 0 9
47479: PUSH
47480: LD_VAR 0 7
47484: ARRAY
47485: PUSH
47486: LD_VAR 0 10
47490: MUL
47491: PLUS
47492: PPUSH
47493: CALL_OW 1
47497: ST_TO_ADDR
47498: GO 47446
47500: POP
47501: POP
// end ;
47502: GO 45979
47504: POP
47505: POP
// result := Replace ( result , 4 , tmp ) ;
47506: LD_ADDR_VAR 0 5
47510: PUSH
47511: LD_VAR 0 5
47515: PPUSH
47516: LD_INT 4
47518: PPUSH
47519: LD_VAR 0 8
47523: PPUSH
47524: CALL_OW 1
47528: ST_TO_ADDR
// end ;
47529: LD_VAR 0 5
47533: RET
// export function DangerAtRange ( unit , range ) ; begin
47534: LD_INT 0
47536: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47537: LD_ADDR_VAR 0 3
47541: PUSH
47542: LD_VAR 0 1
47546: PPUSH
47547: CALL_OW 255
47551: PPUSH
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 250
47561: PPUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 251
47571: PPUSH
47572: LD_VAR 0 2
47576: PPUSH
47577: CALL 45831 0 4
47581: ST_TO_ADDR
// end ;
47582: LD_VAR 0 3
47586: RET
// export function DangerInArea ( side , area ) ; begin
47587: LD_INT 0
47589: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47590: LD_ADDR_VAR 0 3
47594: PUSH
47595: LD_VAR 0 2
47599: PPUSH
47600: LD_INT 81
47602: PUSH
47603: LD_VAR 0 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PPUSH
47612: CALL_OW 70
47616: ST_TO_ADDR
// end ;
47617: LD_VAR 0 3
47621: RET
// export function IsExtension ( b ) ; begin
47622: LD_INT 0
47624: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47625: LD_ADDR_VAR 0 2
47629: PUSH
47630: LD_VAR 0 1
47634: PUSH
47635: LD_INT 23
47637: PUSH
47638: LD_INT 20
47640: PUSH
47641: LD_INT 22
47643: PUSH
47644: LD_INT 17
47646: PUSH
47647: LD_INT 24
47649: PUSH
47650: LD_INT 21
47652: PUSH
47653: LD_INT 19
47655: PUSH
47656: LD_INT 16
47658: PUSH
47659: LD_INT 25
47661: PUSH
47662: LD_INT 18
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: IN
47677: ST_TO_ADDR
// end ;
47678: LD_VAR 0 2
47682: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47683: LD_INT 0
47685: PPUSH
47686: PPUSH
47687: PPUSH
// result := [ ] ;
47688: LD_ADDR_VAR 0 4
47692: PUSH
47693: EMPTY
47694: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47695: LD_ADDR_VAR 0 5
47699: PUSH
47700: LD_VAR 0 2
47704: PPUSH
47705: LD_INT 21
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PPUSH
47715: CALL_OW 70
47719: ST_TO_ADDR
// if not tmp then
47720: LD_VAR 0 5
47724: NOT
47725: IFFALSE 47729
// exit ;
47727: GO 47793
// if checkLink then
47729: LD_VAR 0 3
47733: IFFALSE 47783
// begin for i in tmp do
47735: LD_ADDR_VAR 0 6
47739: PUSH
47740: LD_VAR 0 5
47744: PUSH
47745: FOR_IN
47746: IFFALSE 47781
// if GetBase ( i ) <> base then
47748: LD_VAR 0 6
47752: PPUSH
47753: CALL_OW 274
47757: PUSH
47758: LD_VAR 0 1
47762: NONEQUAL
47763: IFFALSE 47779
// ComLinkToBase ( base , i ) ;
47765: LD_VAR 0 1
47769: PPUSH
47770: LD_VAR 0 6
47774: PPUSH
47775: CALL_OW 169
47779: GO 47745
47781: POP
47782: POP
// end ; result := tmp ;
47783: LD_ADDR_VAR 0 4
47787: PUSH
47788: LD_VAR 0 5
47792: ST_TO_ADDR
// end ;
47793: LD_VAR 0 4
47797: RET
// export function ComComplete ( units , b ) ; var i ; begin
47798: LD_INT 0
47800: PPUSH
47801: PPUSH
// if not units then
47802: LD_VAR 0 1
47806: NOT
47807: IFFALSE 47811
// exit ;
47809: GO 47901
// for i in units do
47811: LD_ADDR_VAR 0 4
47815: PUSH
47816: LD_VAR 0 1
47820: PUSH
47821: FOR_IN
47822: IFFALSE 47899
// if BuildingStatus ( b ) = bs_build then
47824: LD_VAR 0 2
47828: PPUSH
47829: CALL_OW 461
47833: PUSH
47834: LD_INT 1
47836: EQUAL
47837: IFFALSE 47897
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47839: LD_VAR 0 4
47843: PPUSH
47844: LD_STRING h
47846: PUSH
47847: LD_VAR 0 2
47851: PPUSH
47852: CALL_OW 250
47856: PUSH
47857: LD_VAR 0 2
47861: PPUSH
47862: CALL_OW 251
47866: PUSH
47867: LD_VAR 0 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: PPUSH
47893: CALL_OW 446
47897: GO 47821
47899: POP
47900: POP
// end ;
47901: LD_VAR 0 3
47905: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47906: LD_INT 0
47908: PPUSH
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47914: LD_VAR 0 1
47918: NOT
47919: PUSH
47920: LD_VAR 0 1
47924: PPUSH
47925: CALL_OW 263
47929: PUSH
47930: LD_INT 2
47932: NONEQUAL
47933: OR
47934: IFFALSE 47938
// exit ;
47936: GO 48254
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47938: LD_ADDR_VAR 0 6
47942: PUSH
47943: LD_INT 22
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 255
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 30
47965: PUSH
47966: LD_INT 36
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 34
47975: PUSH
47976: LD_INT 31
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PPUSH
47992: CALL_OW 69
47996: ST_TO_ADDR
// if not tmp then
47997: LD_VAR 0 6
48001: NOT
48002: IFFALSE 48006
// exit ;
48004: GO 48254
// result := [ ] ;
48006: LD_ADDR_VAR 0 2
48010: PUSH
48011: EMPTY
48012: ST_TO_ADDR
// for i in tmp do
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_VAR 0 6
48022: PUSH
48023: FOR_IN
48024: IFFALSE 48095
// begin t := UnitsInside ( i ) ;
48026: LD_ADDR_VAR 0 4
48030: PUSH
48031: LD_VAR 0 3
48035: PPUSH
48036: CALL_OW 313
48040: ST_TO_ADDR
// if t then
48041: LD_VAR 0 4
48045: IFFALSE 48093
// for j in t do
48047: LD_ADDR_VAR 0 7
48051: PUSH
48052: LD_VAR 0 4
48056: PUSH
48057: FOR_IN
48058: IFFALSE 48091
// result := Replace ( result , result + 1 , j ) ;
48060: LD_ADDR_VAR 0 2
48064: PUSH
48065: LD_VAR 0 2
48069: PPUSH
48070: LD_VAR 0 2
48074: PUSH
48075: LD_INT 1
48077: PLUS
48078: PPUSH
48079: LD_VAR 0 7
48083: PPUSH
48084: CALL_OW 1
48088: ST_TO_ADDR
48089: GO 48057
48091: POP
48092: POP
// end ;
48093: GO 48023
48095: POP
48096: POP
// if not result then
48097: LD_VAR 0 2
48101: NOT
48102: IFFALSE 48106
// exit ;
48104: GO 48254
// mech := result [ 1 ] ;
48106: LD_ADDR_VAR 0 5
48110: PUSH
48111: LD_VAR 0 2
48115: PUSH
48116: LD_INT 1
48118: ARRAY
48119: ST_TO_ADDR
// if result > 1 then
48120: LD_VAR 0 2
48124: PUSH
48125: LD_INT 1
48127: GREATER
48128: IFFALSE 48240
// begin for i = 2 to result do
48130: LD_ADDR_VAR 0 3
48134: PUSH
48135: DOUBLE
48136: LD_INT 2
48138: DEC
48139: ST_TO_ADDR
48140: LD_VAR 0 2
48144: PUSH
48145: FOR_TO
48146: IFFALSE 48238
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48148: LD_ADDR_VAR 0 4
48152: PUSH
48153: LD_VAR 0 2
48157: PUSH
48158: LD_VAR 0 3
48162: ARRAY
48163: PPUSH
48164: LD_INT 3
48166: PPUSH
48167: CALL_OW 259
48171: PUSH
48172: LD_VAR 0 2
48176: PUSH
48177: LD_VAR 0 3
48181: ARRAY
48182: PPUSH
48183: CALL_OW 432
48187: MINUS
48188: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48189: LD_VAR 0 4
48193: PUSH
48194: LD_VAR 0 5
48198: PPUSH
48199: LD_INT 3
48201: PPUSH
48202: CALL_OW 259
48206: PUSH
48207: LD_VAR 0 5
48211: PPUSH
48212: CALL_OW 432
48216: MINUS
48217: GREATEREQUAL
48218: IFFALSE 48236
// mech := result [ i ] ;
48220: LD_ADDR_VAR 0 5
48224: PUSH
48225: LD_VAR 0 2
48229: PUSH
48230: LD_VAR 0 3
48234: ARRAY
48235: ST_TO_ADDR
// end ;
48236: GO 48145
48238: POP
48239: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48240: LD_VAR 0 1
48244: PPUSH
48245: LD_VAR 0 5
48249: PPUSH
48250: CALL_OW 135
// end ;
48254: LD_VAR 0 2
48258: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48259: LD_INT 0
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
// result := [ ] ;
48274: LD_ADDR_VAR 0 7
48278: PUSH
48279: EMPTY
48280: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48281: LD_VAR 0 1
48285: PPUSH
48286: CALL_OW 266
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: IN
48301: NOT
48302: IFFALSE 48306
// exit ;
48304: GO 49940
// if name then
48306: LD_VAR 0 3
48310: IFFALSE 48326
// SetBName ( base_dep , name ) ;
48312: LD_VAR 0 1
48316: PPUSH
48317: LD_VAR 0 3
48321: PPUSH
48322: CALL_OW 500
// base := GetBase ( base_dep ) ;
48326: LD_ADDR_VAR 0 15
48330: PUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: CALL_OW 274
48340: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48341: LD_ADDR_VAR 0 16
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: CALL_OW 255
48355: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48356: LD_ADDR_VAR 0 17
48360: PUSH
48361: LD_VAR 0 1
48365: PPUSH
48366: CALL_OW 248
48370: ST_TO_ADDR
// if sources then
48371: LD_VAR 0 5
48375: IFFALSE 48422
// for i = 1 to 3 do
48377: LD_ADDR_VAR 0 8
48381: PUSH
48382: DOUBLE
48383: LD_INT 1
48385: DEC
48386: ST_TO_ADDR
48387: LD_INT 3
48389: PUSH
48390: FOR_TO
48391: IFFALSE 48420
// AddResourceType ( base , i , sources [ i ] ) ;
48393: LD_VAR 0 15
48397: PPUSH
48398: LD_VAR 0 8
48402: PPUSH
48403: LD_VAR 0 5
48407: PUSH
48408: LD_VAR 0 8
48412: ARRAY
48413: PPUSH
48414: CALL_OW 276
48418: GO 48390
48420: POP
48421: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48422: LD_ADDR_VAR 0 18
48426: PUSH
48427: LD_VAR 0 15
48431: PPUSH
48432: LD_VAR 0 2
48436: PPUSH
48437: LD_INT 1
48439: PPUSH
48440: CALL 47683 0 3
48444: ST_TO_ADDR
// InitHc ;
48445: CALL_OW 19
// InitUc ;
48449: CALL_OW 18
// uc_side := side ;
48453: LD_ADDR_OWVAR 20
48457: PUSH
48458: LD_VAR 0 16
48462: ST_TO_ADDR
// uc_nation := nation ;
48463: LD_ADDR_OWVAR 21
48467: PUSH
48468: LD_VAR 0 17
48472: ST_TO_ADDR
// if buildings then
48473: LD_VAR 0 18
48477: IFFALSE 49799
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48479: LD_ADDR_VAR 0 19
48483: PUSH
48484: LD_VAR 0 18
48488: PPUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 30
48494: PUSH
48495: LD_INT 29
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 30
48504: PUSH
48505: LD_INT 30
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: PPUSH
48517: CALL_OW 72
48521: ST_TO_ADDR
// if tmp then
48522: LD_VAR 0 19
48526: IFFALSE 48574
// for i in tmp do
48528: LD_ADDR_VAR 0 8
48532: PUSH
48533: LD_VAR 0 19
48537: PUSH
48538: FOR_IN
48539: IFFALSE 48572
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48541: LD_VAR 0 8
48545: PPUSH
48546: CALL_OW 250
48550: PPUSH
48551: LD_VAR 0 8
48555: PPUSH
48556: CALL_OW 251
48560: PPUSH
48561: LD_VAR 0 16
48565: PPUSH
48566: CALL_OW 441
48570: GO 48538
48572: POP
48573: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48574: LD_VAR 0 18
48578: PPUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 30
48584: PUSH
48585: LD_INT 32
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 30
48594: PUSH
48595: LD_INT 33
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: PPUSH
48607: CALL_OW 72
48611: IFFALSE 48699
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48613: LD_ADDR_VAR 0 8
48617: PUSH
48618: LD_VAR 0 18
48622: PPUSH
48623: LD_INT 2
48625: PUSH
48626: LD_INT 30
48628: PUSH
48629: LD_INT 32
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 30
48638: PUSH
48639: LD_INT 33
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: PPUSH
48651: CALL_OW 72
48655: PUSH
48656: FOR_IN
48657: IFFALSE 48697
// begin if not GetBWeapon ( i ) then
48659: LD_VAR 0 8
48663: PPUSH
48664: CALL_OW 269
48668: NOT
48669: IFFALSE 48695
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48671: LD_VAR 0 8
48675: PPUSH
48676: LD_VAR 0 8
48680: PPUSH
48681: LD_VAR 0 2
48685: PPUSH
48686: CALL 49945 0 2
48690: PPUSH
48691: CALL_OW 431
// end ;
48695: GO 48656
48697: POP
48698: POP
// end ; for i = 1 to personel do
48699: LD_ADDR_VAR 0 8
48703: PUSH
48704: DOUBLE
48705: LD_INT 1
48707: DEC
48708: ST_TO_ADDR
48709: LD_VAR 0 6
48713: PUSH
48714: FOR_TO
48715: IFFALSE 49779
// begin if i > 4 then
48717: LD_VAR 0 8
48721: PUSH
48722: LD_INT 4
48724: GREATER
48725: IFFALSE 48729
// break ;
48727: GO 49779
// case i of 1 :
48729: LD_VAR 0 8
48733: PUSH
48734: LD_INT 1
48736: DOUBLE
48737: EQUAL
48738: IFTRUE 48742
48740: GO 48822
48742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48743: LD_ADDR_VAR 0 12
48747: PUSH
48748: LD_VAR 0 18
48752: PPUSH
48753: LD_INT 22
48755: PUSH
48756: LD_VAR 0 16
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 58
48767: PUSH
48768: EMPTY
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 30
48776: PUSH
48777: LD_INT 32
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 30
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 30
48796: PUSH
48797: LD_INT 5
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: PPUSH
48815: CALL_OW 72
48819: ST_TO_ADDR
48820: GO 49044
48822: LD_INT 2
48824: DOUBLE
48825: EQUAL
48826: IFTRUE 48830
48828: GO 48892
48830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48831: LD_ADDR_VAR 0 12
48835: PUSH
48836: LD_VAR 0 18
48840: PPUSH
48841: LD_INT 22
48843: PUSH
48844: LD_VAR 0 16
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 30
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 30
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PPUSH
48885: CALL_OW 72
48889: ST_TO_ADDR
48890: GO 49044
48892: LD_INT 3
48894: DOUBLE
48895: EQUAL
48896: IFTRUE 48900
48898: GO 48962
48900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48901: LD_ADDR_VAR 0 12
48905: PUSH
48906: LD_VAR 0 18
48910: PPUSH
48911: LD_INT 22
48913: PUSH
48914: LD_VAR 0 16
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 30
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 30
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PPUSH
48955: CALL_OW 72
48959: ST_TO_ADDR
48960: GO 49044
48962: LD_INT 4
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 48970
48968: GO 49043
48970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48971: LD_ADDR_VAR 0 12
48975: PUSH
48976: LD_VAR 0 18
48980: PPUSH
48981: LD_INT 22
48983: PUSH
48984: LD_VAR 0 16
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 30
48998: PUSH
48999: LD_INT 6
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 30
49008: PUSH
49009: LD_INT 7
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 30
49018: PUSH
49019: LD_INT 8
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PPUSH
49036: CALL_OW 72
49040: ST_TO_ADDR
49041: GO 49044
49043: POP
// if i = 1 then
49044: LD_VAR 0 8
49048: PUSH
49049: LD_INT 1
49051: EQUAL
49052: IFFALSE 49163
// begin tmp := [ ] ;
49054: LD_ADDR_VAR 0 19
49058: PUSH
49059: EMPTY
49060: ST_TO_ADDR
// for j in f do
49061: LD_ADDR_VAR 0 9
49065: PUSH
49066: LD_VAR 0 12
49070: PUSH
49071: FOR_IN
49072: IFFALSE 49145
// if GetBType ( j ) = b_bunker then
49074: LD_VAR 0 9
49078: PPUSH
49079: CALL_OW 266
49083: PUSH
49084: LD_INT 32
49086: EQUAL
49087: IFFALSE 49114
// tmp := Insert ( tmp , 1 , j ) else
49089: LD_ADDR_VAR 0 19
49093: PUSH
49094: LD_VAR 0 19
49098: PPUSH
49099: LD_INT 1
49101: PPUSH
49102: LD_VAR 0 9
49106: PPUSH
49107: CALL_OW 2
49111: ST_TO_ADDR
49112: GO 49143
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49114: LD_ADDR_VAR 0 19
49118: PUSH
49119: LD_VAR 0 19
49123: PPUSH
49124: LD_VAR 0 19
49128: PUSH
49129: LD_INT 1
49131: PLUS
49132: PPUSH
49133: LD_VAR 0 9
49137: PPUSH
49138: CALL_OW 2
49142: ST_TO_ADDR
49143: GO 49071
49145: POP
49146: POP
// if tmp then
49147: LD_VAR 0 19
49151: IFFALSE 49163
// f := tmp ;
49153: LD_ADDR_VAR 0 12
49157: PUSH
49158: LD_VAR 0 19
49162: ST_TO_ADDR
// end ; x := personel [ i ] ;
49163: LD_ADDR_VAR 0 13
49167: PUSH
49168: LD_VAR 0 6
49172: PUSH
49173: LD_VAR 0 8
49177: ARRAY
49178: ST_TO_ADDR
// if x = - 1 then
49179: LD_VAR 0 13
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: EQUAL
49188: IFFALSE 49397
// begin for j in f do
49190: LD_ADDR_VAR 0 9
49194: PUSH
49195: LD_VAR 0 12
49199: PUSH
49200: FOR_IN
49201: IFFALSE 49393
// repeat InitHc ;
49203: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49207: LD_VAR 0 9
49211: PPUSH
49212: CALL_OW 266
49216: PUSH
49217: LD_INT 5
49219: EQUAL
49220: IFFALSE 49290
// begin if UnitsInside ( j ) < 3 then
49222: LD_VAR 0 9
49226: PPUSH
49227: CALL_OW 313
49231: PUSH
49232: LD_INT 3
49234: LESS
49235: IFFALSE 49271
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49237: LD_INT 0
49239: PPUSH
49240: LD_INT 5
49242: PUSH
49243: LD_INT 8
49245: PUSH
49246: LD_INT 9
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: PUSH
49254: LD_VAR 0 17
49258: ARRAY
49259: PPUSH
49260: LD_VAR 0 4
49264: PPUSH
49265: CALL_OW 380
49269: GO 49288
// PrepareHuman ( false , i , skill ) ;
49271: LD_INT 0
49273: PPUSH
49274: LD_VAR 0 8
49278: PPUSH
49279: LD_VAR 0 4
49283: PPUSH
49284: CALL_OW 380
// end else
49288: GO 49307
// PrepareHuman ( false , i , skill ) ;
49290: LD_INT 0
49292: PPUSH
49293: LD_VAR 0 8
49297: PPUSH
49298: LD_VAR 0 4
49302: PPUSH
49303: CALL_OW 380
// un := CreateHuman ;
49307: LD_ADDR_VAR 0 14
49311: PUSH
49312: CALL_OW 44
49316: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49317: LD_ADDR_VAR 0 7
49321: PUSH
49322: LD_VAR 0 7
49326: PPUSH
49327: LD_INT 1
49329: PPUSH
49330: LD_VAR 0 14
49334: PPUSH
49335: CALL_OW 2
49339: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49340: LD_VAR 0 14
49344: PPUSH
49345: LD_VAR 0 9
49349: PPUSH
49350: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49354: LD_VAR 0 9
49358: PPUSH
49359: CALL_OW 313
49363: PUSH
49364: LD_INT 6
49366: EQUAL
49367: PUSH
49368: LD_VAR 0 9
49372: PPUSH
49373: CALL_OW 266
49377: PUSH
49378: LD_INT 32
49380: PUSH
49381: LD_INT 31
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: IN
49388: OR
49389: IFFALSE 49203
49391: GO 49200
49393: POP
49394: POP
// end else
49395: GO 49777
// for j = 1 to x do
49397: LD_ADDR_VAR 0 9
49401: PUSH
49402: DOUBLE
49403: LD_INT 1
49405: DEC
49406: ST_TO_ADDR
49407: LD_VAR 0 13
49411: PUSH
49412: FOR_TO
49413: IFFALSE 49775
// begin InitHc ;
49415: CALL_OW 19
// if not f then
49419: LD_VAR 0 12
49423: NOT
49424: IFFALSE 49513
// begin PrepareHuman ( false , i , skill ) ;
49426: LD_INT 0
49428: PPUSH
49429: LD_VAR 0 8
49433: PPUSH
49434: LD_VAR 0 4
49438: PPUSH
49439: CALL_OW 380
// un := CreateHuman ;
49443: LD_ADDR_VAR 0 14
49447: PUSH
49448: CALL_OW 44
49452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49453: LD_ADDR_VAR 0 7
49457: PUSH
49458: LD_VAR 0 7
49462: PPUSH
49463: LD_INT 1
49465: PPUSH
49466: LD_VAR 0 14
49470: PPUSH
49471: CALL_OW 2
49475: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49476: LD_VAR 0 14
49480: PPUSH
49481: LD_VAR 0 1
49485: PPUSH
49486: CALL_OW 250
49490: PPUSH
49491: LD_VAR 0 1
49495: PPUSH
49496: CALL_OW 251
49500: PPUSH
49501: LD_INT 10
49503: PPUSH
49504: LD_INT 0
49506: PPUSH
49507: CALL_OW 50
// continue ;
49511: GO 49412
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49513: LD_VAR 0 12
49517: PUSH
49518: LD_INT 1
49520: ARRAY
49521: PPUSH
49522: CALL_OW 313
49526: PUSH
49527: LD_VAR 0 12
49531: PUSH
49532: LD_INT 1
49534: ARRAY
49535: PPUSH
49536: CALL_OW 266
49540: PUSH
49541: LD_INT 32
49543: PUSH
49544: LD_INT 31
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: IN
49551: AND
49552: PUSH
49553: LD_VAR 0 12
49557: PUSH
49558: LD_INT 1
49560: ARRAY
49561: PPUSH
49562: CALL_OW 313
49566: PUSH
49567: LD_INT 6
49569: EQUAL
49570: OR
49571: IFFALSE 49591
// f := Delete ( f , 1 ) ;
49573: LD_ADDR_VAR 0 12
49577: PUSH
49578: LD_VAR 0 12
49582: PPUSH
49583: LD_INT 1
49585: PPUSH
49586: CALL_OW 3
49590: ST_TO_ADDR
// if not f then
49591: LD_VAR 0 12
49595: NOT
49596: IFFALSE 49614
// begin x := x + 2 ;
49598: LD_ADDR_VAR 0 13
49602: PUSH
49603: LD_VAR 0 13
49607: PUSH
49608: LD_INT 2
49610: PLUS
49611: ST_TO_ADDR
// continue ;
49612: GO 49412
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49614: LD_VAR 0 12
49618: PUSH
49619: LD_INT 1
49621: ARRAY
49622: PPUSH
49623: CALL_OW 266
49627: PUSH
49628: LD_INT 5
49630: EQUAL
49631: IFFALSE 49705
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49633: LD_VAR 0 12
49637: PUSH
49638: LD_INT 1
49640: ARRAY
49641: PPUSH
49642: CALL_OW 313
49646: PUSH
49647: LD_INT 3
49649: LESS
49650: IFFALSE 49686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49652: LD_INT 0
49654: PPUSH
49655: LD_INT 5
49657: PUSH
49658: LD_INT 8
49660: PUSH
49661: LD_INT 9
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: PUSH
49669: LD_VAR 0 17
49673: ARRAY
49674: PPUSH
49675: LD_VAR 0 4
49679: PPUSH
49680: CALL_OW 380
49684: GO 49703
// PrepareHuman ( false , i , skill ) ;
49686: LD_INT 0
49688: PPUSH
49689: LD_VAR 0 8
49693: PPUSH
49694: LD_VAR 0 4
49698: PPUSH
49699: CALL_OW 380
// end else
49703: GO 49722
// PrepareHuman ( false , i , skill ) ;
49705: LD_INT 0
49707: PPUSH
49708: LD_VAR 0 8
49712: PPUSH
49713: LD_VAR 0 4
49717: PPUSH
49718: CALL_OW 380
// un := CreateHuman ;
49722: LD_ADDR_VAR 0 14
49726: PUSH
49727: CALL_OW 44
49731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49732: LD_ADDR_VAR 0 7
49736: PUSH
49737: LD_VAR 0 7
49741: PPUSH
49742: LD_INT 1
49744: PPUSH
49745: LD_VAR 0 14
49749: PPUSH
49750: CALL_OW 2
49754: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49755: LD_VAR 0 14
49759: PPUSH
49760: LD_VAR 0 12
49764: PUSH
49765: LD_INT 1
49767: ARRAY
49768: PPUSH
49769: CALL_OW 52
// end ;
49773: GO 49412
49775: POP
49776: POP
// end ;
49777: GO 48714
49779: POP
49780: POP
// result := result ^ buildings ;
49781: LD_ADDR_VAR 0 7
49785: PUSH
49786: LD_VAR 0 7
49790: PUSH
49791: LD_VAR 0 18
49795: ADD
49796: ST_TO_ADDR
// end else
49797: GO 49940
// begin for i = 1 to personel do
49799: LD_ADDR_VAR 0 8
49803: PUSH
49804: DOUBLE
49805: LD_INT 1
49807: DEC
49808: ST_TO_ADDR
49809: LD_VAR 0 6
49813: PUSH
49814: FOR_TO
49815: IFFALSE 49938
// begin if i > 4 then
49817: LD_VAR 0 8
49821: PUSH
49822: LD_INT 4
49824: GREATER
49825: IFFALSE 49829
// break ;
49827: GO 49938
// x := personel [ i ] ;
49829: LD_ADDR_VAR 0 13
49833: PUSH
49834: LD_VAR 0 6
49838: PUSH
49839: LD_VAR 0 8
49843: ARRAY
49844: ST_TO_ADDR
// if x = - 1 then
49845: LD_VAR 0 13
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: EQUAL
49854: IFFALSE 49858
// continue ;
49856: GO 49814
// PrepareHuman ( false , i , skill ) ;
49858: LD_INT 0
49860: PPUSH
49861: LD_VAR 0 8
49865: PPUSH
49866: LD_VAR 0 4
49870: PPUSH
49871: CALL_OW 380
// un := CreateHuman ;
49875: LD_ADDR_VAR 0 14
49879: PUSH
49880: CALL_OW 44
49884: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49885: LD_VAR 0 14
49889: PPUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 250
49899: PPUSH
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 251
49909: PPUSH
49910: LD_INT 10
49912: PPUSH
49913: LD_INT 0
49915: PPUSH
49916: CALL_OW 50
// result := result ^ un ;
49920: LD_ADDR_VAR 0 7
49924: PUSH
49925: LD_VAR 0 7
49929: PUSH
49930: LD_VAR 0 14
49934: ADD
49935: ST_TO_ADDR
// end ;
49936: GO 49814
49938: POP
49939: POP
// end ; end ;
49940: LD_VAR 0 7
49944: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49945: LD_INT 0
49947: PPUSH
49948: PPUSH
49949: PPUSH
49950: PPUSH
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
49958: PPUSH
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
// result := false ;
49963: LD_ADDR_VAR 0 3
49967: PUSH
49968: LD_INT 0
49970: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49971: LD_VAR 0 1
49975: NOT
49976: PUSH
49977: LD_VAR 0 1
49981: PPUSH
49982: CALL_OW 266
49986: PUSH
49987: LD_INT 32
49989: PUSH
49990: LD_INT 33
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: IN
49997: NOT
49998: OR
49999: IFFALSE 50003
// exit ;
50001: GO 51112
// nat := GetNation ( tower ) ;
50003: LD_ADDR_VAR 0 12
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 248
50017: ST_TO_ADDR
// side := GetSide ( tower ) ;
50018: LD_ADDR_VAR 0 16
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 255
50032: ST_TO_ADDR
// x := GetX ( tower ) ;
50033: LD_ADDR_VAR 0 10
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 250
50047: ST_TO_ADDR
// y := GetY ( tower ) ;
50048: LD_ADDR_VAR 0 11
50052: PUSH
50053: LD_VAR 0 1
50057: PPUSH
50058: CALL_OW 251
50062: ST_TO_ADDR
// if not x or not y then
50063: LD_VAR 0 10
50067: NOT
50068: PUSH
50069: LD_VAR 0 11
50073: NOT
50074: OR
50075: IFFALSE 50079
// exit ;
50077: GO 51112
// weapon := 0 ;
50079: LD_ADDR_VAR 0 18
50083: PUSH
50084: LD_INT 0
50086: ST_TO_ADDR
// fac_list := [ ] ;
50087: LD_ADDR_VAR 0 17
50091: PUSH
50092: EMPTY
50093: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50094: LD_ADDR_VAR 0 6
50098: PUSH
50099: LD_VAR 0 1
50103: PPUSH
50104: CALL_OW 274
50108: PPUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: LD_INT 0
50116: PPUSH
50117: CALL 47683 0 3
50121: PPUSH
50122: LD_INT 30
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PPUSH
50132: CALL_OW 72
50136: ST_TO_ADDR
// if not factories then
50137: LD_VAR 0 6
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 51112
// for i in factories do
50146: LD_ADDR_VAR 0 8
50150: PUSH
50151: LD_VAR 0 6
50155: PUSH
50156: FOR_IN
50157: IFFALSE 50182
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50159: LD_ADDR_VAR 0 17
50163: PUSH
50164: LD_VAR 0 17
50168: PUSH
50169: LD_VAR 0 8
50173: PPUSH
50174: CALL_OW 478
50178: UNION
50179: ST_TO_ADDR
50180: GO 50156
50182: POP
50183: POP
// if not fac_list then
50184: LD_VAR 0 17
50188: NOT
50189: IFFALSE 50193
// exit ;
50191: GO 51112
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50193: LD_ADDR_VAR 0 5
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: LD_INT 5
50203: PUSH
50204: LD_INT 9
50206: PUSH
50207: LD_INT 10
50209: PUSH
50210: LD_INT 6
50212: PUSH
50213: LD_INT 7
50215: PUSH
50216: LD_INT 11
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 27
50230: PUSH
50231: LD_INT 28
50233: PUSH
50234: LD_INT 26
50236: PUSH
50237: LD_INT 30
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 43
50248: PUSH
50249: LD_INT 44
50251: PUSH
50252: LD_INT 46
50254: PUSH
50255: LD_INT 45
50257: PUSH
50258: LD_INT 47
50260: PUSH
50261: LD_INT 49
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: PUSH
50277: LD_VAR 0 12
50281: ARRAY
50282: ST_TO_ADDR
// list := list isect fac_list ;
50283: LD_ADDR_VAR 0 5
50287: PUSH
50288: LD_VAR 0 5
50292: PUSH
50293: LD_VAR 0 17
50297: ISECT
50298: ST_TO_ADDR
// if not list then
50299: LD_VAR 0 5
50303: NOT
50304: IFFALSE 50308
// exit ;
50306: GO 51112
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50308: LD_VAR 0 12
50312: PUSH
50313: LD_INT 3
50315: EQUAL
50316: PUSH
50317: LD_INT 49
50319: PUSH
50320: LD_VAR 0 5
50324: IN
50325: AND
50326: PUSH
50327: LD_INT 31
50329: PPUSH
50330: LD_VAR 0 16
50334: PPUSH
50335: CALL_OW 321
50339: PUSH
50340: LD_INT 2
50342: EQUAL
50343: AND
50344: IFFALSE 50404
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50346: LD_INT 22
50348: PUSH
50349: LD_VAR 0 16
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 35
50360: PUSH
50361: LD_INT 49
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 91
50370: PUSH
50371: LD_VAR 0 1
50375: PUSH
50376: LD_INT 10
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: LIST
50388: PPUSH
50389: CALL_OW 69
50393: NOT
50394: IFFALSE 50404
// weapon := ru_time_lapser ;
50396: LD_ADDR_VAR 0 18
50400: PUSH
50401: LD_INT 49
50403: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50404: LD_VAR 0 12
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: IN
50419: PUSH
50420: LD_INT 11
50422: PUSH
50423: LD_VAR 0 5
50427: IN
50428: PUSH
50429: LD_INT 30
50431: PUSH
50432: LD_VAR 0 5
50436: IN
50437: OR
50438: AND
50439: PUSH
50440: LD_INT 6
50442: PPUSH
50443: LD_VAR 0 16
50447: PPUSH
50448: CALL_OW 321
50452: PUSH
50453: LD_INT 2
50455: EQUAL
50456: AND
50457: IFFALSE 50622
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50459: LD_INT 22
50461: PUSH
50462: LD_VAR 0 16
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 35
50476: PUSH
50477: LD_INT 11
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 35
50486: PUSH
50487: LD_INT 30
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 91
50501: PUSH
50502: LD_VAR 0 1
50506: PUSH
50507: LD_INT 18
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: PPUSH
50520: CALL_OW 69
50524: NOT
50525: PUSH
50526: LD_INT 22
50528: PUSH
50529: LD_VAR 0 16
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 30
50543: PUSH
50544: LD_INT 32
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 30
50553: PUSH
50554: LD_INT 33
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 91
50568: PUSH
50569: LD_VAR 0 1
50573: PUSH
50574: LD_INT 12
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: PPUSH
50590: CALL_OW 69
50594: PUSH
50595: LD_INT 2
50597: GREATER
50598: AND
50599: IFFALSE 50622
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50601: LD_ADDR_VAR 0 18
50605: PUSH
50606: LD_INT 11
50608: PUSH
50609: LD_INT 30
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_VAR 0 12
50620: ARRAY
50621: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50622: LD_VAR 0 18
50626: NOT
50627: PUSH
50628: LD_INT 40
50630: PPUSH
50631: LD_VAR 0 16
50635: PPUSH
50636: CALL_OW 321
50640: PUSH
50641: LD_INT 2
50643: EQUAL
50644: AND
50645: PUSH
50646: LD_INT 7
50648: PUSH
50649: LD_VAR 0 5
50653: IN
50654: PUSH
50655: LD_INT 28
50657: PUSH
50658: LD_VAR 0 5
50662: IN
50663: OR
50664: PUSH
50665: LD_INT 45
50667: PUSH
50668: LD_VAR 0 5
50672: IN
50673: OR
50674: AND
50675: IFFALSE 50929
// begin hex := GetHexInfo ( x , y ) ;
50677: LD_ADDR_VAR 0 4
50681: PUSH
50682: LD_VAR 0 10
50686: PPUSH
50687: LD_VAR 0 11
50691: PPUSH
50692: CALL_OW 546
50696: ST_TO_ADDR
// if hex [ 1 ] then
50697: LD_VAR 0 4
50701: PUSH
50702: LD_INT 1
50704: ARRAY
50705: IFFALSE 50709
// exit ;
50707: GO 51112
// height := hex [ 2 ] ;
50709: LD_ADDR_VAR 0 15
50713: PUSH
50714: LD_VAR 0 4
50718: PUSH
50719: LD_INT 2
50721: ARRAY
50722: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50723: LD_ADDR_VAR 0 14
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// for i in tmp do
50746: LD_ADDR_VAR 0 8
50750: PUSH
50751: LD_VAR 0 14
50755: PUSH
50756: FOR_IN
50757: IFFALSE 50927
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50759: LD_ADDR_VAR 0 9
50763: PUSH
50764: LD_VAR 0 10
50768: PPUSH
50769: LD_VAR 0 8
50773: PPUSH
50774: LD_INT 5
50776: PPUSH
50777: CALL_OW 272
50781: PUSH
50782: LD_VAR 0 11
50786: PPUSH
50787: LD_VAR 0 8
50791: PPUSH
50792: LD_INT 5
50794: PPUSH
50795: CALL_OW 273
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50804: LD_VAR 0 9
50808: PUSH
50809: LD_INT 1
50811: ARRAY
50812: PPUSH
50813: LD_VAR 0 9
50817: PUSH
50818: LD_INT 2
50820: ARRAY
50821: PPUSH
50822: CALL_OW 488
50826: IFFALSE 50925
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50828: LD_ADDR_VAR 0 4
50832: PUSH
50833: LD_VAR 0 9
50837: PUSH
50838: LD_INT 1
50840: ARRAY
50841: PPUSH
50842: LD_VAR 0 9
50846: PUSH
50847: LD_INT 2
50849: ARRAY
50850: PPUSH
50851: CALL_OW 546
50855: ST_TO_ADDR
// if hex [ 1 ] then
50856: LD_VAR 0 4
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: IFFALSE 50868
// continue ;
50866: GO 50756
// h := hex [ 2 ] ;
50868: LD_ADDR_VAR 0 13
50872: PUSH
50873: LD_VAR 0 4
50877: PUSH
50878: LD_INT 2
50880: ARRAY
50881: ST_TO_ADDR
// if h + 7 < height then
50882: LD_VAR 0 13
50886: PUSH
50887: LD_INT 7
50889: PLUS
50890: PUSH
50891: LD_VAR 0 15
50895: LESS
50896: IFFALSE 50925
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50898: LD_ADDR_VAR 0 18
50902: PUSH
50903: LD_INT 7
50905: PUSH
50906: LD_INT 28
50908: PUSH
50909: LD_INT 45
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: LD_VAR 0 12
50921: ARRAY
50922: ST_TO_ADDR
// break ;
50923: GO 50927
// end ; end ; end ;
50925: GO 50756
50927: POP
50928: POP
// end ; if not weapon then
50929: LD_VAR 0 18
50933: NOT
50934: IFFALSE 50994
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50936: LD_ADDR_VAR 0 5
50940: PUSH
50941: LD_VAR 0 5
50945: PUSH
50946: LD_INT 11
50948: PUSH
50949: LD_INT 30
50951: PUSH
50952: LD_INT 49
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: DIFF
50960: ST_TO_ADDR
// if not list then
50961: LD_VAR 0 5
50965: NOT
50966: IFFALSE 50970
// exit ;
50968: GO 51112
// weapon := list [ rand ( 1 , list ) ] ;
50970: LD_ADDR_VAR 0 18
50974: PUSH
50975: LD_VAR 0 5
50979: PUSH
50980: LD_INT 1
50982: PPUSH
50983: LD_VAR 0 5
50987: PPUSH
50988: CALL_OW 12
50992: ARRAY
50993: ST_TO_ADDR
// end ; if weapon then
50994: LD_VAR 0 18
50998: IFFALSE 51112
// begin tmp := CostOfWeapon ( weapon ) ;
51000: LD_ADDR_VAR 0 14
51004: PUSH
51005: LD_VAR 0 18
51009: PPUSH
51010: CALL_OW 451
51014: ST_TO_ADDR
// j := GetBase ( tower ) ;
51015: LD_ADDR_VAR 0 9
51019: PUSH
51020: LD_VAR 0 1
51024: PPUSH
51025: CALL_OW 274
51029: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51030: LD_VAR 0 9
51034: PPUSH
51035: LD_INT 1
51037: PPUSH
51038: CALL_OW 275
51042: PUSH
51043: LD_VAR 0 14
51047: PUSH
51048: LD_INT 1
51050: ARRAY
51051: GREATEREQUAL
51052: PUSH
51053: LD_VAR 0 9
51057: PPUSH
51058: LD_INT 2
51060: PPUSH
51061: CALL_OW 275
51065: PUSH
51066: LD_VAR 0 14
51070: PUSH
51071: LD_INT 2
51073: ARRAY
51074: GREATEREQUAL
51075: AND
51076: PUSH
51077: LD_VAR 0 9
51081: PPUSH
51082: LD_INT 3
51084: PPUSH
51085: CALL_OW 275
51089: PUSH
51090: LD_VAR 0 14
51094: PUSH
51095: LD_INT 3
51097: ARRAY
51098: GREATEREQUAL
51099: AND
51100: IFFALSE 51112
// result := weapon ;
51102: LD_ADDR_VAR 0 3
51106: PUSH
51107: LD_VAR 0 18
51111: ST_TO_ADDR
// end ; end ;
51112: LD_VAR 0 3
51116: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51117: LD_INT 0
51119: PPUSH
51120: PPUSH
// result := true ;
51121: LD_ADDR_VAR 0 3
51125: PUSH
51126: LD_INT 1
51128: ST_TO_ADDR
// if array1 = array2 then
51129: LD_VAR 0 1
51133: PUSH
51134: LD_VAR 0 2
51138: EQUAL
51139: IFFALSE 51199
// begin for i = 1 to array1 do
51141: LD_ADDR_VAR 0 4
51145: PUSH
51146: DOUBLE
51147: LD_INT 1
51149: DEC
51150: ST_TO_ADDR
51151: LD_VAR 0 1
51155: PUSH
51156: FOR_TO
51157: IFFALSE 51195
// if array1 [ i ] <> array2 [ i ] then
51159: LD_VAR 0 1
51163: PUSH
51164: LD_VAR 0 4
51168: ARRAY
51169: PUSH
51170: LD_VAR 0 2
51174: PUSH
51175: LD_VAR 0 4
51179: ARRAY
51180: NONEQUAL
51181: IFFALSE 51193
// begin result := false ;
51183: LD_ADDR_VAR 0 3
51187: PUSH
51188: LD_INT 0
51190: ST_TO_ADDR
// break ;
51191: GO 51195
// end ;
51193: GO 51156
51195: POP
51196: POP
// end else
51197: GO 51207
// result := false ;
51199: LD_ADDR_VAR 0 3
51203: PUSH
51204: LD_INT 0
51206: ST_TO_ADDR
// end ;
51207: LD_VAR 0 3
51211: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51212: LD_INT 0
51214: PPUSH
51215: PPUSH
// if not array1 or not array2 then
51216: LD_VAR 0 1
51220: NOT
51221: PUSH
51222: LD_VAR 0 2
51226: NOT
51227: OR
51228: IFFALSE 51232
// exit ;
51230: GO 51296
// result := true ;
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_INT 1
51239: ST_TO_ADDR
// for i = 1 to array1 do
51240: LD_ADDR_VAR 0 4
51244: PUSH
51245: DOUBLE
51246: LD_INT 1
51248: DEC
51249: ST_TO_ADDR
51250: LD_VAR 0 1
51254: PUSH
51255: FOR_TO
51256: IFFALSE 51294
// if array1 [ i ] <> array2 [ i ] then
51258: LD_VAR 0 1
51262: PUSH
51263: LD_VAR 0 4
51267: ARRAY
51268: PUSH
51269: LD_VAR 0 2
51273: PUSH
51274: LD_VAR 0 4
51278: ARRAY
51279: NONEQUAL
51280: IFFALSE 51292
// begin result := false ;
51282: LD_ADDR_VAR 0 3
51286: PUSH
51287: LD_INT 0
51289: ST_TO_ADDR
// break ;
51290: GO 51294
// end ;
51292: GO 51255
51294: POP
51295: POP
// end ;
51296: LD_VAR 0 3
51300: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51301: LD_INT 0
51303: PPUSH
51304: PPUSH
51305: PPUSH
// pom := GetBase ( fac ) ;
51306: LD_ADDR_VAR 0 5
51310: PUSH
51311: LD_VAR 0 1
51315: PPUSH
51316: CALL_OW 274
51320: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51321: LD_ADDR_VAR 0 4
51325: PUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_INT 1
51333: ARRAY
51334: PPUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_INT 2
51342: ARRAY
51343: PPUSH
51344: LD_VAR 0 2
51348: PUSH
51349: LD_INT 3
51351: ARRAY
51352: PPUSH
51353: LD_VAR 0 2
51357: PUSH
51358: LD_INT 4
51360: ARRAY
51361: PPUSH
51362: CALL_OW 449
51366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51367: LD_ADDR_VAR 0 3
51371: PUSH
51372: LD_VAR 0 5
51376: PPUSH
51377: LD_INT 1
51379: PPUSH
51380: CALL_OW 275
51384: PUSH
51385: LD_VAR 0 4
51389: PUSH
51390: LD_INT 1
51392: ARRAY
51393: GREATEREQUAL
51394: PUSH
51395: LD_VAR 0 5
51399: PPUSH
51400: LD_INT 2
51402: PPUSH
51403: CALL_OW 275
51407: PUSH
51408: LD_VAR 0 4
51412: PUSH
51413: LD_INT 2
51415: ARRAY
51416: GREATEREQUAL
51417: AND
51418: PUSH
51419: LD_VAR 0 5
51423: PPUSH
51424: LD_INT 3
51426: PPUSH
51427: CALL_OW 275
51431: PUSH
51432: LD_VAR 0 4
51436: PUSH
51437: LD_INT 3
51439: ARRAY
51440: GREATEREQUAL
51441: AND
51442: ST_TO_ADDR
// end ;
51443: LD_VAR 0 3
51447: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51448: LD_INT 0
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
// pom := GetBase ( building ) ;
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: CALL_OW 274
51468: ST_TO_ADDR
// if not pom then
51469: LD_VAR 0 3
51473: NOT
51474: IFFALSE 51478
// exit ;
51476: GO 51648
// btype := GetBType ( building ) ;
51478: LD_ADDR_VAR 0 5
51482: PUSH
51483: LD_VAR 0 1
51487: PPUSH
51488: CALL_OW 266
51492: ST_TO_ADDR
// if btype = b_armoury then
51493: LD_VAR 0 5
51497: PUSH
51498: LD_INT 4
51500: EQUAL
51501: IFFALSE 51511
// btype := b_barracks ;
51503: LD_ADDR_VAR 0 5
51507: PUSH
51508: LD_INT 5
51510: ST_TO_ADDR
// if btype = b_depot then
51511: LD_VAR 0 5
51515: PUSH
51516: LD_INT 0
51518: EQUAL
51519: IFFALSE 51529
// btype := b_warehouse ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_INT 1
51528: ST_TO_ADDR
// if btype = b_workshop then
51529: LD_VAR 0 5
51533: PUSH
51534: LD_INT 2
51536: EQUAL
51537: IFFALSE 51547
// btype := b_factory ;
51539: LD_ADDR_VAR 0 5
51543: PUSH
51544: LD_INT 3
51546: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51547: LD_ADDR_VAR 0 4
51551: PUSH
51552: LD_VAR 0 5
51556: PPUSH
51557: LD_VAR 0 1
51561: PPUSH
51562: CALL_OW 248
51566: PPUSH
51567: CALL_OW 450
51571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51572: LD_ADDR_VAR 0 2
51576: PUSH
51577: LD_VAR 0 3
51581: PPUSH
51582: LD_INT 1
51584: PPUSH
51585: CALL_OW 275
51589: PUSH
51590: LD_VAR 0 4
51594: PUSH
51595: LD_INT 1
51597: ARRAY
51598: GREATEREQUAL
51599: PUSH
51600: LD_VAR 0 3
51604: PPUSH
51605: LD_INT 2
51607: PPUSH
51608: CALL_OW 275
51612: PUSH
51613: LD_VAR 0 4
51617: PUSH
51618: LD_INT 2
51620: ARRAY
51621: GREATEREQUAL
51622: AND
51623: PUSH
51624: LD_VAR 0 3
51628: PPUSH
51629: LD_INT 3
51631: PPUSH
51632: CALL_OW 275
51636: PUSH
51637: LD_VAR 0 4
51641: PUSH
51642: LD_INT 3
51644: ARRAY
51645: GREATEREQUAL
51646: AND
51647: ST_TO_ADDR
// end ;
51648: LD_VAR 0 2
51652: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51653: LD_INT 0
51655: PPUSH
51656: PPUSH
51657: PPUSH
// pom := GetBase ( building ) ;
51658: LD_ADDR_VAR 0 4
51662: PUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 274
51672: ST_TO_ADDR
// if not pom then
51673: LD_VAR 0 4
51677: NOT
51678: IFFALSE 51682
// exit ;
51680: GO 51783
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51682: LD_ADDR_VAR 0 5
51686: PUSH
51687: LD_VAR 0 2
51691: PPUSH
51692: LD_VAR 0 1
51696: PPUSH
51697: CALL_OW 248
51701: PPUSH
51702: CALL_OW 450
51706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51707: LD_ADDR_VAR 0 3
51711: PUSH
51712: LD_VAR 0 4
51716: PPUSH
51717: LD_INT 1
51719: PPUSH
51720: CALL_OW 275
51724: PUSH
51725: LD_VAR 0 5
51729: PUSH
51730: LD_INT 1
51732: ARRAY
51733: GREATEREQUAL
51734: PUSH
51735: LD_VAR 0 4
51739: PPUSH
51740: LD_INT 2
51742: PPUSH
51743: CALL_OW 275
51747: PUSH
51748: LD_VAR 0 5
51752: PUSH
51753: LD_INT 2
51755: ARRAY
51756: GREATEREQUAL
51757: AND
51758: PUSH
51759: LD_VAR 0 4
51763: PPUSH
51764: LD_INT 3
51766: PPUSH
51767: CALL_OW 275
51771: PUSH
51772: LD_VAR 0 5
51776: PUSH
51777: LD_INT 3
51779: ARRAY
51780: GREATEREQUAL
51781: AND
51782: ST_TO_ADDR
// end ;
51783: LD_VAR 0 3
51787: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51788: LD_INT 0
51790: PPUSH
51791: PPUSH
51792: PPUSH
51793: PPUSH
51794: PPUSH
51795: PPUSH
51796: PPUSH
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
// result := false ;
51801: LD_ADDR_VAR 0 8
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51809: LD_VAR 0 5
51813: NOT
51814: PUSH
51815: LD_VAR 0 1
51819: NOT
51820: OR
51821: PUSH
51822: LD_VAR 0 2
51826: NOT
51827: OR
51828: PUSH
51829: LD_VAR 0 3
51833: NOT
51834: OR
51835: IFFALSE 51839
// exit ;
51837: GO 52653
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51839: LD_ADDR_VAR 0 14
51843: PUSH
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_VAR 0 2
51853: PPUSH
51854: LD_VAR 0 3
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: LD_VAR 0 5
51868: PUSH
51869: LD_INT 1
51871: ARRAY
51872: PPUSH
51873: CALL_OW 248
51877: PPUSH
51878: LD_INT 0
51880: PPUSH
51881: CALL 53890 0 6
51885: ST_TO_ADDR
// if not hexes then
51886: LD_VAR 0 14
51890: NOT
51891: IFFALSE 51895
// exit ;
51893: GO 52653
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51895: LD_ADDR_VAR 0 17
51899: PUSH
51900: LD_VAR 0 5
51904: PPUSH
51905: LD_INT 22
51907: PUSH
51908: LD_VAR 0 13
51912: PPUSH
51913: CALL_OW 255
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 30
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 30
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PPUSH
51954: CALL_OW 72
51958: ST_TO_ADDR
// for i = 1 to hexes do
51959: LD_ADDR_VAR 0 9
51963: PUSH
51964: DOUBLE
51965: LD_INT 1
51967: DEC
51968: ST_TO_ADDR
51969: LD_VAR 0 14
51973: PUSH
51974: FOR_TO
51975: IFFALSE 52651
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51977: LD_ADDR_VAR 0 13
51981: PUSH
51982: LD_VAR 0 14
51986: PUSH
51987: LD_VAR 0 9
51991: ARRAY
51992: PUSH
51993: LD_INT 1
51995: ARRAY
51996: PPUSH
51997: LD_VAR 0 14
52001: PUSH
52002: LD_VAR 0 9
52006: ARRAY
52007: PUSH
52008: LD_INT 2
52010: ARRAY
52011: PPUSH
52012: CALL_OW 428
52016: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52017: LD_VAR 0 14
52021: PUSH
52022: LD_VAR 0 9
52026: ARRAY
52027: PUSH
52028: LD_INT 1
52030: ARRAY
52031: PPUSH
52032: LD_VAR 0 14
52036: PUSH
52037: LD_VAR 0 9
52041: ARRAY
52042: PUSH
52043: LD_INT 2
52045: ARRAY
52046: PPUSH
52047: CALL_OW 351
52051: PUSH
52052: LD_VAR 0 14
52056: PUSH
52057: LD_VAR 0 9
52061: ARRAY
52062: PUSH
52063: LD_INT 1
52065: ARRAY
52066: PPUSH
52067: LD_VAR 0 14
52071: PUSH
52072: LD_VAR 0 9
52076: ARRAY
52077: PUSH
52078: LD_INT 2
52080: ARRAY
52081: PPUSH
52082: CALL_OW 488
52086: NOT
52087: OR
52088: PUSH
52089: LD_VAR 0 13
52093: PPUSH
52094: CALL_OW 247
52098: PUSH
52099: LD_INT 3
52101: EQUAL
52102: OR
52103: IFFALSE 52109
// exit ;
52105: POP
52106: POP
52107: GO 52653
// if not tmp then
52109: LD_VAR 0 13
52113: NOT
52114: IFFALSE 52118
// continue ;
52116: GO 51974
// result := true ;
52118: LD_ADDR_VAR 0 8
52122: PUSH
52123: LD_INT 1
52125: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52126: LD_VAR 0 6
52130: PUSH
52131: LD_VAR 0 13
52135: PPUSH
52136: CALL_OW 247
52140: PUSH
52141: LD_INT 2
52143: EQUAL
52144: AND
52145: PUSH
52146: LD_VAR 0 13
52150: PPUSH
52151: CALL_OW 263
52155: PUSH
52156: LD_INT 1
52158: EQUAL
52159: AND
52160: IFFALSE 52324
// begin if IsDrivenBy ( tmp ) then
52162: LD_VAR 0 13
52166: PPUSH
52167: CALL_OW 311
52171: IFFALSE 52175
// continue ;
52173: GO 51974
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52175: LD_VAR 0 6
52179: PPUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 60
52185: PUSH
52186: EMPTY
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 55
52198: PUSH
52199: EMPTY
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PPUSH
52210: CALL_OW 72
52214: IFFALSE 52322
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52216: LD_ADDR_VAR 0 18
52220: PUSH
52221: LD_VAR 0 6
52225: PPUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 60
52231: PUSH
52232: EMPTY
52233: LIST
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 55
52244: PUSH
52245: EMPTY
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PPUSH
52256: CALL_OW 72
52260: PUSH
52261: LD_INT 1
52263: ARRAY
52264: ST_TO_ADDR
// if IsInUnit ( driver ) then
52265: LD_VAR 0 18
52269: PPUSH
52270: CALL_OW 310
52274: IFFALSE 52285
// ComExit ( driver ) ;
52276: LD_VAR 0 18
52280: PPUSH
52281: CALL 77595 0 1
// AddComEnterUnit ( driver , tmp ) ;
52285: LD_VAR 0 18
52289: PPUSH
52290: LD_VAR 0 13
52294: PPUSH
52295: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52299: LD_VAR 0 18
52303: PPUSH
52304: LD_VAR 0 7
52308: PPUSH
52309: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52313: LD_VAR 0 18
52317: PPUSH
52318: CALL_OW 181
// end ; continue ;
52322: GO 51974
// end ; if not cleaners or not tmp in cleaners then
52324: LD_VAR 0 6
52328: NOT
52329: PUSH
52330: LD_VAR 0 13
52334: PUSH
52335: LD_VAR 0 6
52339: IN
52340: NOT
52341: OR
52342: IFFALSE 52649
// begin if dep then
52344: LD_VAR 0 17
52348: IFFALSE 52484
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52350: LD_ADDR_VAR 0 16
52354: PUSH
52355: LD_VAR 0 17
52359: PUSH
52360: LD_INT 1
52362: ARRAY
52363: PPUSH
52364: CALL_OW 250
52368: PPUSH
52369: LD_VAR 0 17
52373: PUSH
52374: LD_INT 1
52376: ARRAY
52377: PPUSH
52378: CALL_OW 254
52382: PPUSH
52383: LD_INT 5
52385: PPUSH
52386: CALL_OW 272
52390: PUSH
52391: LD_VAR 0 17
52395: PUSH
52396: LD_INT 1
52398: ARRAY
52399: PPUSH
52400: CALL_OW 251
52404: PPUSH
52405: LD_VAR 0 17
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: PPUSH
52414: CALL_OW 254
52418: PPUSH
52419: LD_INT 5
52421: PPUSH
52422: CALL_OW 273
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52431: LD_VAR 0 16
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PPUSH
52440: LD_VAR 0 16
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: PPUSH
52449: CALL_OW 488
52453: IFFALSE 52484
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52455: LD_VAR 0 13
52459: PPUSH
52460: LD_VAR 0 16
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: PPUSH
52469: LD_VAR 0 16
52473: PUSH
52474: LD_INT 2
52476: ARRAY
52477: PPUSH
52478: CALL_OW 111
// continue ;
52482: GO 51974
// end ; end ; r := GetDir ( tmp ) ;
52484: LD_ADDR_VAR 0 15
52488: PUSH
52489: LD_VAR 0 13
52493: PPUSH
52494: CALL_OW 254
52498: ST_TO_ADDR
// if r = 5 then
52499: LD_VAR 0 15
52503: PUSH
52504: LD_INT 5
52506: EQUAL
52507: IFFALSE 52517
// r := 0 ;
52509: LD_ADDR_VAR 0 15
52513: PUSH
52514: LD_INT 0
52516: ST_TO_ADDR
// for j = r to 5 do
52517: LD_ADDR_VAR 0 10
52521: PUSH
52522: DOUBLE
52523: LD_VAR 0 15
52527: DEC
52528: ST_TO_ADDR
52529: LD_INT 5
52531: PUSH
52532: FOR_TO
52533: IFFALSE 52647
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52535: LD_ADDR_VAR 0 11
52539: PUSH
52540: LD_VAR 0 13
52544: PPUSH
52545: CALL_OW 250
52549: PPUSH
52550: LD_VAR 0 10
52554: PPUSH
52555: LD_INT 2
52557: PPUSH
52558: CALL_OW 272
52562: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52563: LD_ADDR_VAR 0 12
52567: PUSH
52568: LD_VAR 0 13
52572: PPUSH
52573: CALL_OW 251
52577: PPUSH
52578: LD_VAR 0 10
52582: PPUSH
52583: LD_INT 2
52585: PPUSH
52586: CALL_OW 273
52590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52591: LD_VAR 0 11
52595: PPUSH
52596: LD_VAR 0 12
52600: PPUSH
52601: CALL_OW 488
52605: PUSH
52606: LD_VAR 0 11
52610: PPUSH
52611: LD_VAR 0 12
52615: PPUSH
52616: CALL_OW 428
52620: NOT
52621: AND
52622: IFFALSE 52645
// begin ComMoveXY ( tmp , _x , _y ) ;
52624: LD_VAR 0 13
52628: PPUSH
52629: LD_VAR 0 11
52633: PPUSH
52634: LD_VAR 0 12
52638: PPUSH
52639: CALL_OW 111
// break ;
52643: GO 52647
// end ; end ;
52645: GO 52532
52647: POP
52648: POP
// end ; end ;
52649: GO 51974
52651: POP
52652: POP
// end ;
52653: LD_VAR 0 8
52657: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52658: LD_INT 0
52660: PPUSH
// result := true ;
52661: LD_ADDR_VAR 0 3
52665: PUSH
52666: LD_INT 1
52668: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52669: LD_VAR 0 2
52673: PUSH
52674: LD_INT 24
52676: DOUBLE
52677: EQUAL
52678: IFTRUE 52688
52680: LD_INT 33
52682: DOUBLE
52683: EQUAL
52684: IFTRUE 52688
52686: GO 52713
52688: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52689: LD_ADDR_VAR 0 3
52693: PUSH
52694: LD_INT 32
52696: PPUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 321
52706: PUSH
52707: LD_INT 2
52709: EQUAL
52710: ST_TO_ADDR
52711: GO 53033
52713: LD_INT 20
52715: DOUBLE
52716: EQUAL
52717: IFTRUE 52721
52719: GO 52746
52721: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52722: LD_ADDR_VAR 0 3
52726: PUSH
52727: LD_INT 6
52729: PPUSH
52730: LD_VAR 0 1
52734: PPUSH
52735: CALL_OW 321
52739: PUSH
52740: LD_INT 2
52742: EQUAL
52743: ST_TO_ADDR
52744: GO 53033
52746: LD_INT 22
52748: DOUBLE
52749: EQUAL
52750: IFTRUE 52760
52752: LD_INT 36
52754: DOUBLE
52755: EQUAL
52756: IFTRUE 52760
52758: GO 52785
52760: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52761: LD_ADDR_VAR 0 3
52765: PUSH
52766: LD_INT 15
52768: PPUSH
52769: LD_VAR 0 1
52773: PPUSH
52774: CALL_OW 321
52778: PUSH
52779: LD_INT 2
52781: EQUAL
52782: ST_TO_ADDR
52783: GO 53033
52785: LD_INT 30
52787: DOUBLE
52788: EQUAL
52789: IFTRUE 52793
52791: GO 52818
52793: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_INT 20
52801: PPUSH
52802: LD_VAR 0 1
52806: PPUSH
52807: CALL_OW 321
52811: PUSH
52812: LD_INT 2
52814: EQUAL
52815: ST_TO_ADDR
52816: GO 53033
52818: LD_INT 28
52820: DOUBLE
52821: EQUAL
52822: IFTRUE 52832
52824: LD_INT 21
52826: DOUBLE
52827: EQUAL
52828: IFTRUE 52832
52830: GO 52857
52832: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52833: LD_ADDR_VAR 0 3
52837: PUSH
52838: LD_INT 21
52840: PPUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 321
52850: PUSH
52851: LD_INT 2
52853: EQUAL
52854: ST_TO_ADDR
52855: GO 53033
52857: LD_INT 16
52859: DOUBLE
52860: EQUAL
52861: IFTRUE 52865
52863: GO 52892
52865: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52866: LD_ADDR_VAR 0 3
52870: PUSH
52871: LD_EXP 61
52875: PPUSH
52876: LD_VAR 0 1
52880: PPUSH
52881: CALL_OW 321
52885: PUSH
52886: LD_INT 2
52888: EQUAL
52889: ST_TO_ADDR
52890: GO 53033
52892: LD_INT 19
52894: DOUBLE
52895: EQUAL
52896: IFTRUE 52906
52898: LD_INT 23
52900: DOUBLE
52901: EQUAL
52902: IFTRUE 52906
52904: GO 52933
52906: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52907: LD_ADDR_VAR 0 3
52911: PUSH
52912: LD_EXP 60
52916: PPUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: CALL_OW 321
52926: PUSH
52927: LD_INT 2
52929: EQUAL
52930: ST_TO_ADDR
52931: GO 53033
52933: LD_INT 17
52935: DOUBLE
52936: EQUAL
52937: IFTRUE 52941
52939: GO 52966
52941: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52942: LD_ADDR_VAR 0 3
52946: PUSH
52947: LD_INT 39
52949: PPUSH
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 321
52959: PUSH
52960: LD_INT 2
52962: EQUAL
52963: ST_TO_ADDR
52964: GO 53033
52966: LD_INT 18
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52974
52972: GO 52999
52974: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52975: LD_ADDR_VAR 0 3
52979: PUSH
52980: LD_INT 40
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: CALL_OW 321
52992: PUSH
52993: LD_INT 2
52995: EQUAL
52996: ST_TO_ADDR
52997: GO 53033
52999: LD_INT 27
53001: DOUBLE
53002: EQUAL
53003: IFTRUE 53007
53005: GO 53032
53007: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53008: LD_ADDR_VAR 0 3
53012: PUSH
53013: LD_INT 35
53015: PPUSH
53016: LD_VAR 0 1
53020: PPUSH
53021: CALL_OW 321
53025: PUSH
53026: LD_INT 2
53028: EQUAL
53029: ST_TO_ADDR
53030: GO 53033
53032: POP
// end ;
53033: LD_VAR 0 3
53037: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53038: LD_INT 0
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
// result := false ;
53051: LD_ADDR_VAR 0 6
53055: PUSH
53056: LD_INT 0
53058: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53059: LD_VAR 0 1
53063: NOT
53064: PUSH
53065: LD_VAR 0 1
53069: PPUSH
53070: CALL_OW 266
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: IN
53085: NOT
53086: OR
53087: PUSH
53088: LD_VAR 0 2
53092: NOT
53093: OR
53094: PUSH
53095: LD_VAR 0 5
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 3
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: LD_INT 5
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: IN
53126: NOT
53127: OR
53128: PUSH
53129: LD_VAR 0 3
53133: PPUSH
53134: LD_VAR 0 4
53138: PPUSH
53139: CALL_OW 488
53143: NOT
53144: OR
53145: IFFALSE 53149
// exit ;
53147: GO 53885
// side := GetSide ( depot ) ;
53149: LD_ADDR_VAR 0 9
53153: PUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 255
53163: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53164: LD_VAR 0 9
53168: PPUSH
53169: LD_VAR 0 2
53173: PPUSH
53174: CALL 52658 0 2
53178: NOT
53179: IFFALSE 53183
// exit ;
53181: GO 53885
// pom := GetBase ( depot ) ;
53183: LD_ADDR_VAR 0 10
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 274
53197: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53198: LD_ADDR_VAR 0 11
53202: PUSH
53203: LD_VAR 0 2
53207: PPUSH
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL_OW 248
53217: PPUSH
53218: CALL_OW 450
53222: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53223: LD_VAR 0 10
53227: PPUSH
53228: LD_INT 1
53230: PPUSH
53231: CALL_OW 275
53235: PUSH
53236: LD_VAR 0 11
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: GREATEREQUAL
53245: PUSH
53246: LD_VAR 0 10
53250: PPUSH
53251: LD_INT 2
53253: PPUSH
53254: CALL_OW 275
53258: PUSH
53259: LD_VAR 0 11
53263: PUSH
53264: LD_INT 2
53266: ARRAY
53267: GREATEREQUAL
53268: AND
53269: PUSH
53270: LD_VAR 0 10
53274: PPUSH
53275: LD_INT 3
53277: PPUSH
53278: CALL_OW 275
53282: PUSH
53283: LD_VAR 0 11
53287: PUSH
53288: LD_INT 3
53290: ARRAY
53291: GREATEREQUAL
53292: AND
53293: NOT
53294: IFFALSE 53298
// exit ;
53296: GO 53885
// if GetBType ( depot ) = b_depot then
53298: LD_VAR 0 1
53302: PPUSH
53303: CALL_OW 266
53307: PUSH
53308: LD_INT 0
53310: EQUAL
53311: IFFALSE 53323
// dist := 28 else
53313: LD_ADDR_VAR 0 14
53317: PUSH
53318: LD_INT 28
53320: ST_TO_ADDR
53321: GO 53331
// dist := 36 ;
53323: LD_ADDR_VAR 0 14
53327: PUSH
53328: LD_INT 36
53330: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53331: LD_VAR 0 1
53335: PPUSH
53336: LD_VAR 0 3
53340: PPUSH
53341: LD_VAR 0 4
53345: PPUSH
53346: CALL_OW 297
53350: PUSH
53351: LD_VAR 0 14
53355: GREATER
53356: IFFALSE 53360
// exit ;
53358: GO 53885
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53360: LD_ADDR_VAR 0 12
53364: PUSH
53365: LD_VAR 0 2
53369: PPUSH
53370: LD_VAR 0 3
53374: PPUSH
53375: LD_VAR 0 4
53379: PPUSH
53380: LD_VAR 0 5
53384: PPUSH
53385: LD_VAR 0 1
53389: PPUSH
53390: CALL_OW 248
53394: PPUSH
53395: LD_INT 0
53397: PPUSH
53398: CALL 53890 0 6
53402: ST_TO_ADDR
// if not hexes then
53403: LD_VAR 0 12
53407: NOT
53408: IFFALSE 53412
// exit ;
53410: GO 53885
// hex := GetHexInfo ( x , y ) ;
53412: LD_ADDR_VAR 0 15
53416: PUSH
53417: LD_VAR 0 3
53421: PPUSH
53422: LD_VAR 0 4
53426: PPUSH
53427: CALL_OW 546
53431: ST_TO_ADDR
// if hex [ 1 ] then
53432: LD_VAR 0 15
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: IFFALSE 53444
// exit ;
53442: GO 53885
// height := hex [ 2 ] ;
53444: LD_ADDR_VAR 0 13
53448: PUSH
53449: LD_VAR 0 15
53453: PUSH
53454: LD_INT 2
53456: ARRAY
53457: ST_TO_ADDR
// for i = 1 to hexes do
53458: LD_ADDR_VAR 0 7
53462: PUSH
53463: DOUBLE
53464: LD_INT 1
53466: DEC
53467: ST_TO_ADDR
53468: LD_VAR 0 12
53472: PUSH
53473: FOR_TO
53474: IFFALSE 53804
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53476: LD_VAR 0 12
53480: PUSH
53481: LD_VAR 0 7
53485: ARRAY
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PPUSH
53491: LD_VAR 0 12
53495: PUSH
53496: LD_VAR 0 7
53500: ARRAY
53501: PUSH
53502: LD_INT 2
53504: ARRAY
53505: PPUSH
53506: CALL_OW 488
53510: NOT
53511: PUSH
53512: LD_VAR 0 12
53516: PUSH
53517: LD_VAR 0 7
53521: ARRAY
53522: PUSH
53523: LD_INT 1
53525: ARRAY
53526: PPUSH
53527: LD_VAR 0 12
53531: PUSH
53532: LD_VAR 0 7
53536: ARRAY
53537: PUSH
53538: LD_INT 2
53540: ARRAY
53541: PPUSH
53542: CALL_OW 428
53546: PUSH
53547: LD_INT 0
53549: GREATER
53550: OR
53551: PUSH
53552: LD_VAR 0 12
53556: PUSH
53557: LD_VAR 0 7
53561: ARRAY
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PPUSH
53567: LD_VAR 0 12
53571: PUSH
53572: LD_VAR 0 7
53576: ARRAY
53577: PUSH
53578: LD_INT 2
53580: ARRAY
53581: PPUSH
53582: CALL_OW 351
53586: OR
53587: IFFALSE 53593
// exit ;
53589: POP
53590: POP
53591: GO 53885
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53593: LD_ADDR_VAR 0 8
53597: PUSH
53598: LD_VAR 0 12
53602: PUSH
53603: LD_VAR 0 7
53607: ARRAY
53608: PUSH
53609: LD_INT 1
53611: ARRAY
53612: PPUSH
53613: LD_VAR 0 12
53617: PUSH
53618: LD_VAR 0 7
53622: ARRAY
53623: PUSH
53624: LD_INT 2
53626: ARRAY
53627: PPUSH
53628: CALL_OW 546
53632: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53633: LD_VAR 0 8
53637: PUSH
53638: LD_INT 1
53640: ARRAY
53641: PUSH
53642: LD_VAR 0 8
53646: PUSH
53647: LD_INT 2
53649: ARRAY
53650: PUSH
53651: LD_VAR 0 13
53655: PUSH
53656: LD_INT 2
53658: PLUS
53659: GREATER
53660: OR
53661: PUSH
53662: LD_VAR 0 8
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: PUSH
53671: LD_VAR 0 13
53675: PUSH
53676: LD_INT 2
53678: MINUS
53679: LESS
53680: OR
53681: PUSH
53682: LD_VAR 0 8
53686: PUSH
53687: LD_INT 3
53689: ARRAY
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 8
53696: PUSH
53697: LD_INT 9
53699: PUSH
53700: LD_INT 10
53702: PUSH
53703: LD_INT 11
53705: PUSH
53706: LD_INT 12
53708: PUSH
53709: LD_INT 13
53711: PUSH
53712: LD_INT 16
53714: PUSH
53715: LD_INT 17
53717: PUSH
53718: LD_INT 18
53720: PUSH
53721: LD_INT 19
53723: PUSH
53724: LD_INT 20
53726: PUSH
53727: LD_INT 21
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: IN
53745: NOT
53746: OR
53747: PUSH
53748: LD_VAR 0 8
53752: PUSH
53753: LD_INT 5
53755: ARRAY
53756: NOT
53757: OR
53758: PUSH
53759: LD_VAR 0 8
53763: PUSH
53764: LD_INT 6
53766: ARRAY
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 7
53776: PUSH
53777: LD_INT 9
53779: PUSH
53780: LD_INT 10
53782: PUSH
53783: LD_INT 11
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: IN
53794: NOT
53795: OR
53796: IFFALSE 53802
// exit ;
53798: POP
53799: POP
53800: GO 53885
// end ;
53802: GO 53473
53804: POP
53805: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53806: LD_VAR 0 9
53810: PPUSH
53811: LD_VAR 0 3
53815: PPUSH
53816: LD_VAR 0 4
53820: PPUSH
53821: LD_INT 20
53823: PPUSH
53824: CALL 45831 0 4
53828: PUSH
53829: LD_INT 4
53831: ARRAY
53832: IFFALSE 53836
// exit ;
53834: GO 53885
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 29
53843: PUSH
53844: LD_INT 30
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: IN
53851: PUSH
53852: LD_VAR 0 3
53856: PPUSH
53857: LD_VAR 0 4
53861: PPUSH
53862: LD_VAR 0 9
53866: PPUSH
53867: CALL_OW 440
53871: NOT
53872: AND
53873: IFFALSE 53877
// exit ;
53875: GO 53885
// result := true ;
53877: LD_ADDR_VAR 0 6
53881: PUSH
53882: LD_INT 1
53884: ST_TO_ADDR
// end ;
53885: LD_VAR 0 6
53889: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53890: LD_INT 0
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
// result = [ ] ;
53950: LD_ADDR_VAR 0 7
53954: PUSH
53955: EMPTY
53956: ST_TO_ADDR
// temp_list = [ ] ;
53957: LD_ADDR_VAR 0 9
53961: PUSH
53962: EMPTY
53963: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53964: LD_VAR 0 4
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: LD_INT 4
53983: PUSH
53984: LD_INT 5
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: IN
53995: NOT
53996: PUSH
53997: LD_VAR 0 1
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: IN
54012: PUSH
54013: LD_VAR 0 5
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: IN
54032: NOT
54033: AND
54034: OR
54035: IFFALSE 54039
// exit ;
54037: GO 72430
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54039: LD_VAR 0 1
54043: PUSH
54044: LD_INT 6
54046: PUSH
54047: LD_INT 7
54049: PUSH
54050: LD_INT 8
54052: PUSH
54053: LD_INT 13
54055: PUSH
54056: LD_INT 12
54058: PUSH
54059: LD_INT 15
54061: PUSH
54062: LD_INT 11
54064: PUSH
54065: LD_INT 14
54067: PUSH
54068: LD_INT 10
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: IN
54082: IFFALSE 54092
// btype = b_lab ;
54084: LD_ADDR_VAR 0 1
54088: PUSH
54089: LD_INT 6
54091: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54092: LD_VAR 0 6
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: IN
54111: NOT
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 6
54132: PUSH
54133: LD_INT 36
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: LD_INT 5
54141: PUSH
54142: LD_INT 31
54144: PUSH
54145: LD_INT 32
54147: PUSH
54148: LD_INT 33
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: IN
54164: NOT
54165: PUSH
54166: LD_VAR 0 6
54170: PUSH
54171: LD_INT 1
54173: EQUAL
54174: AND
54175: OR
54176: PUSH
54177: LD_VAR 0 1
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 3
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: IN
54192: NOT
54193: PUSH
54194: LD_VAR 0 6
54198: PUSH
54199: LD_INT 2
54201: EQUAL
54202: AND
54203: OR
54204: IFFALSE 54214
// mode = 0 ;
54206: LD_ADDR_VAR 0 6
54210: PUSH
54211: LD_INT 0
54213: ST_TO_ADDR
// case mode of 0 :
54214: LD_VAR 0 6
54218: PUSH
54219: LD_INT 0
54221: DOUBLE
54222: EQUAL
54223: IFTRUE 54227
54225: GO 65680
54227: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54228: LD_ADDR_VAR 0 11
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54421: LD_ADDR_VAR 0 12
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 3
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54617: LD_ADDR_VAR 0 13
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54816: LD_ADDR_VAR 0 14
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55012: LD_ADDR_VAR 0 15
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55205: LD_ADDR_VAR 0 16
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55398: LD_ADDR_VAR 0 17
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55628: LD_ADDR_VAR 0 18
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55858: LD_ADDR_VAR 0 19
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56088: LD_ADDR_VAR 0 20
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56318: LD_ADDR_VAR 0 21
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56548: LD_ADDR_VAR 0 22
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56778: LD_ADDR_VAR 0 23
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57058: LD_ADDR_VAR 0 24
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57334: LD_ADDR_VAR 0 25
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57608: LD_ADDR_VAR 0 26
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57884: LD_ADDR_VAR 0 27
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58164: LD_ADDR_VAR 0 28
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58446: LD_ADDR_VAR 0 29
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58725: LD_ADDR_VAR 0 30
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59003: LD_ADDR_VAR 0 31
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59281: LD_ADDR_VAR 0 32
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59559: LD_ADDR_VAR 0 33
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59838: LD_ADDR_VAR 0 34
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60118: LD_ADDR_VAR 0 35
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60230: LD_ADDR_VAR 0 36
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60342: LD_ADDR_VAR 0 37
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60454: LD_ADDR_VAR 0 38
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60566: LD_ADDR_VAR 0 39
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60678: LD_ADDR_VAR 0 40
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60790: LD_ADDR_VAR 0 41
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61140: LD_ADDR_VAR 0 42
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61490: LD_ADDR_VAR 0 43
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 3
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61838: LD_ADDR_VAR 0 44
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 3
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: NEG
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: LD_INT 3
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62188: LD_ADDR_VAR 0 45
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: LD_INT 2
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: LD_INT 3
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 3
62485: NEG
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: NEG
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62538: LD_ADDR_VAR 0 46
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 2
62704: NEG
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 3
62834: NEG
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62886: LD_ADDR_VAR 0 47
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63037: LD_ADDR_VAR 0 48
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63184: LD_ADDR_VAR 0 49
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63328: LD_ADDR_VAR 0 50
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63472: LD_ADDR_VAR 0 51
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63619: LD_ADDR_VAR 0 52
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63770: LD_ADDR_VAR 0 53
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64000: LD_ADDR_VAR 0 54
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64230: LD_ADDR_VAR 0 55
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64460: LD_ADDR_VAR 0 56
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64690: LD_ADDR_VAR 0 57
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 2
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: NEG
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64920: LD_ADDR_VAR 0 58
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65150: LD_ADDR_VAR 0 59
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65238: LD_ADDR_VAR 0 60
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65326: LD_ADDR_VAR 0 61
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65414: LD_ADDR_VAR 0 62
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 1
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65502: LD_ADDR_VAR 0 63
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65590: LD_ADDR_VAR 0 64
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// end ; 1 :
65678: GO 71575
65680: LD_INT 1
65682: DOUBLE
65683: EQUAL
65684: IFTRUE 65688
65686: GO 68311
65688: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65689: LD_ADDR_VAR 0 11
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 3
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 2
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65733: LD_ADDR_VAR 0 12
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65774: LD_ADDR_VAR 0 13
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: LD_INT 3
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: LIST
65813: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65814: LD_ADDR_VAR 0 14
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65855: LD_ADDR_VAR 0 15
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65899: LD_ADDR_VAR 0 16
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65945: LD_ADDR_VAR 0 17
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 3
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65989: LD_ADDR_VAR 0 18
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: LIST
66029: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66030: LD_ADDR_VAR 0 19
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 3
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: LIST
66069: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66070: LD_ADDR_VAR 0 20
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: LD_INT 3
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66111: LD_ADDR_VAR 0 21
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 3
66129: NEG
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66155: LD_ADDR_VAR 0 22
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 3
66174: NEG
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66201: LD_ADDR_VAR 0 23
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 4
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66245: LD_ADDR_VAR 0 24
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66286: LD_ADDR_VAR 0 25
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 4
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 4
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66326: LD_ADDR_VAR 0 26
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 4
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66367: LD_ADDR_VAR 0 27
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 4
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66411: LD_ADDR_VAR 0 28
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: LD_INT 4
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 4
66442: NEG
66443: PUSH
66444: LD_INT 3
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66457: LD_ADDR_VAR 0 29
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 2
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 4
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: LD_INT 4
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 5
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 5
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: LD_INT 6
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 6
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 5
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66612: LD_ADDR_VAR 0 30
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 4
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 4
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 4
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 5
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 5
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 5
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 6
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 6
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66755: LD_ADDR_VAR 0 31
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 3
66772: PUSH
66773: LD_INT 3
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 4
66792: PUSH
66793: LD_INT 3
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 4
66802: PUSH
66803: LD_INT 4
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 3
66812: PUSH
66813: LD_INT 4
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 5
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 5
66832: PUSH
66833: LD_INT 5
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 4
66842: PUSH
66843: LD_INT 5
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 6
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 6
66862: PUSH
66863: LD_INT 6
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: LD_INT 6
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66894: LD_ADDR_VAR 0 32
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 3
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: LD_INT 2
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 4
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 4
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 5
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 5
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: LD_INT 6
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 6
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 5
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67037: LD_ADDR_VAR 0 33
67041: PUSH
67042: LD_INT 2
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 4
67089: NEG
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 4
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 4
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 5
67123: NEG
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 5
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 5
67146: NEG
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 6
67157: NEG
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 6
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67192: LD_ADDR_VAR 0 34
67196: PUSH
67197: LD_INT 2
67199: NEG
67200: PUSH
67201: LD_INT 3
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: NEG
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 3
67223: NEG
67224: PUSH
67225: LD_INT 3
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 3
67235: NEG
67236: PUSH
67237: LD_INT 4
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: NEG
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 4
67259: NEG
67260: PUSH
67261: LD_INT 4
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: LD_INT 5
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 5
67283: NEG
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 5
67295: NEG
67296: PUSH
67297: LD_INT 5
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 5
67307: NEG
67308: PUSH
67309: LD_INT 6
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 6
67319: NEG
67320: PUSH
67321: LD_INT 5
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 6
67331: NEG
67332: PUSH
67333: LD_INT 6
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67355: LD_ADDR_VAR 0 41
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67399: LD_ADDR_VAR 0 42
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67440: LD_ADDR_VAR 0 43
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67480: LD_ADDR_VAR 0 44
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67521: LD_ADDR_VAR 0 45
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 3
67550: NEG
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67565: LD_ADDR_VAR 0 46
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: LD_INT 2
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 2
67584: NEG
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: NEG
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: LIST
67610: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67611: LD_ADDR_VAR 0 47
67615: PUSH
67616: LD_INT 2
67618: NEG
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67644: LD_ADDR_VAR 0 48
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67675: LD_ADDR_VAR 0 49
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67704: LD_ADDR_VAR 0 50
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67733: LD_ADDR_VAR 0 51
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67764: LD_ADDR_VAR 0 52
67768: PUSH
67769: LD_INT 3
67771: NEG
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 3
67783: NEG
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67797: LD_ADDR_VAR 0 53
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 3
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 2
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67841: LD_ADDR_VAR 0 54
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67882: LD_ADDR_VAR 0 55
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67922: LD_ADDR_VAR 0 56
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: LD_INT 2
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67963: LD_ADDR_VAR 0 57
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 1
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68007: LD_ADDR_VAR 0 58
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68053: LD_ADDR_VAR 0 59
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: LD_INT 2
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68097: LD_ADDR_VAR 0 60
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 2
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68138: LD_ADDR_VAR 0 61
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68178: LD_ADDR_VAR 0 62
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: LD_INT 2
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: LD_INT 2
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68219: LD_ADDR_VAR 0 63
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 2
68237: NEG
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 2
68248: NEG
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68263: LD_ADDR_VAR 0 64
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: ST_TO_ADDR
// end ; 2 :
68309: GO 71575
68311: LD_INT 2
68313: DOUBLE
68314: EQUAL
68315: IFTRUE 68319
68317: GO 71574
68319: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68320: LD_ADDR_VAR 0 29
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 5
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 5
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 4
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 3
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 5
68410: PUSH
68411: LD_INT 2
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 3
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 3
68430: PUSH
68431: LD_INT 2
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 4
68450: PUSH
68451: LD_INT 4
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 2
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: LD_INT 2
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: LD_INT 4
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: LD_INT 5
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 5
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: LD_INT 4
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 1
68571: NEG
68572: PUSH
68573: LD_INT 3
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: LD_INT 1
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 3
68648: NEG
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 4
68659: NEG
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 4
68670: NEG
68671: PUSH
68672: LD_INT 1
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 4
68682: NEG
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 4
68705: NEG
68706: PUSH
68707: LD_INT 4
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 4
68717: NEG
68718: PUSH
68719: LD_INT 5
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: LD_INT 4
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 5
68765: NEG
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 5
68777: NEG
68778: PUSH
68779: LD_INT 5
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: LD_INT 5
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 5
68801: NEG
68802: PUSH
68803: LD_INT 3
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68858: LD_ADDR_VAR 0 30
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: LD_INT 3
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 5
68885: PUSH
68886: LD_INT 4
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 5
68895: PUSH
68896: LD_INT 5
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 4
68905: PUSH
68906: LD_INT 5
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 3
68915: PUSH
68916: LD_INT 4
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 3
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 5
68935: PUSH
68936: LD_INT 3
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: LD_INT 5
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 3
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: LD_INT 2
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: NEG
69006: PUSH
69007: LD_INT 3
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: LD_INT 4
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: LD_INT 2
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 4
69048: NEG
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 4
69059: NEG
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: LD_INT 1
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 4
69093: NEG
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 5
69104: NEG
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 5
69115: NEG
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 5
69127: NEG
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: LD_INT 2
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 3
69162: NEG
69163: PUSH
69164: LD_INT 4
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: NEG
69175: PUSH
69176: LD_INT 3
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: LD_INT 2
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 3
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 4
69222: NEG
69223: PUSH
69224: LD_INT 4
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 4
69246: NEG
69247: PUSH
69248: LD_INT 2
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 4
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 5
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 4
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: LD_INT 3
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: LD_INT 4
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: LD_INT 5
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 5
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69405: LD_ADDR_VAR 0 31
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 4
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: LD_INT 3
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: LD_INT 4
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: LD_INT 5
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 5
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 4
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: LD_INT 3
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: LD_INT 5
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: LD_INT 3
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: LD_INT 1
69520: NEG
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 2
69539: NEG
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: NEG
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 4
69561: NEG
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 4
69572: NEG
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 2
69596: NEG
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 4
69607: NEG
69608: PUSH
69609: LD_INT 4
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 4
69619: NEG
69620: PUSH
69621: LD_INT 5
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 3
69631: NEG
69632: PUSH
69633: LD_INT 4
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 3
69643: NEG
69644: PUSH
69645: LD_INT 3
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 5
69667: NEG
69668: PUSH
69669: LD_INT 4
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 5
69679: NEG
69680: PUSH
69681: LD_INT 5
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: LD_INT 5
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 5
69703: NEG
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: LD_INT 3
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 4
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: LD_INT 2
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: LD_INT 3
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: LD_INT 4
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 2
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 2
69805: NEG
69806: PUSH
69807: LD_INT 4
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 5
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 5
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 3
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 3
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 5
69900: PUSH
69901: LD_INT 2
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69955: LD_ADDR_VAR 0 32
69959: PUSH
69960: LD_INT 4
69962: NEG
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 4
69973: NEG
69974: PUSH
69975: LD_INT 1
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 3
69985: NEG
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: LD_INT 1
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 4
70007: NEG
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 5
70018: NEG
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 5
70029: NEG
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 5
70041: NEG
70042: PUSH
70043: LD_INT 2
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 2
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 3
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 4
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 2
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 2
70100: NEG
70101: PUSH
70102: LD_INT 2
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: NEG
70125: PUSH
70126: LD_INT 3
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 4
70136: NEG
70137: PUSH
70138: LD_INT 4
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: NEG
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 4
70160: NEG
70161: PUSH
70162: LD_INT 2
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 4
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 5
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: LD_INT 4
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: LD_INT 3
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: LD_INT 3
70219: NEG
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 1
70227: NEG
70228: PUSH
70229: LD_INT 4
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 1
70239: NEG
70240: PUSH
70241: LD_INT 5
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: LD_INT 5
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 4
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 3
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: LD_INT 1
70338: NEG
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: LD_INT 2
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: LD_INT 2
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 4
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 5
70387: PUSH
70388: LD_INT 4
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 5
70397: PUSH
70398: LD_INT 5
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: LD_INT 5
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: PUSH
70418: LD_INT 4
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 5
70437: PUSH
70438: LD_INT 3
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: LD_INT 5
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70502: LD_ADDR_VAR 0 33
70506: PUSH
70507: LD_INT 4
70509: NEG
70510: PUSH
70511: LD_INT 4
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: LD_INT 5
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 3
70533: NEG
70534: PUSH
70535: LD_INT 4
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: NEG
70546: PUSH
70547: LD_INT 3
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 4
70557: NEG
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 5
70569: NEG
70570: PUSH
70571: LD_INT 4
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 5
70581: NEG
70582: PUSH
70583: LD_INT 5
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 3
70593: NEG
70594: PUSH
70595: LD_INT 5
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 5
70605: NEG
70606: PUSH
70607: LD_INT 3
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 0
70617: PUSH
70618: LD_INT 3
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 4
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 1
70639: PUSH
70640: LD_INT 3
70642: NEG
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: LD_INT 2
70653: NEG
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 2
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: LD_INT 3
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 1
70684: NEG
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 2
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: LD_INT 4
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 4
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 5
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 5
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 4
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: PUSH
70781: LD_INT 1
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: LD_INT 2
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 5
70802: PUSH
70803: LD_INT 2
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 4
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 4
70842: PUSH
70843: LD_INT 4
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: LD_INT 4
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: PUSH
70863: LD_INT 3
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 2
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 4
70882: PUSH
70883: LD_INT 2
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 4
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 0
70902: PUSH
70903: LD_INT 4
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: LD_INT 5
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: LD_INT 5
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: LD_INT 4
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 1
70963: NEG
70964: PUSH
70965: LD_INT 3
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 2
70974: PUSH
70975: LD_INT 5
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 2
70984: NEG
70985: PUSH
70986: LD_INT 3
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71040: LD_ADDR_VAR 0 34
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: LD_INT 4
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: LD_INT 5
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 1
71069: PUSH
71070: LD_INT 4
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: LD_INT 3
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: LD_INT 3
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: LD_INT 4
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 5
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 2
71126: PUSH
71127: LD_INT 3
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 2
71137: NEG
71138: PUSH
71139: LD_INT 5
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 3
71149: PUSH
71150: LD_INT 0
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 3
71159: PUSH
71160: LD_INT 1
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 4
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 4
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 3
71190: PUSH
71191: LD_INT 1
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 2
71210: PUSH
71211: LD_INT 1
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: LD_INT 2
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 4
71242: PUSH
71243: LD_INT 4
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 4
71252: PUSH
71253: LD_INT 3
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 5
71262: PUSH
71263: LD_INT 4
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 5
71272: PUSH
71273: LD_INT 5
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: LD_INT 5
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 3
71292: PUSH
71293: LD_INT 4
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: LD_INT 3
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 5
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: LD_INT 5
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 0
71332: PUSH
71333: LD_INT 3
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: LD_INT 2
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 1
71362: PUSH
71363: LD_INT 4
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_INT 4
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: LD_INT 3
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 1
71393: NEG
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: LD_INT 4
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 2
71414: NEG
71415: PUSH
71416: LD_INT 2
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 4
71425: NEG
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 4
71436: NEG
71437: PUSH
71438: LD_INT 1
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: LD_INT 0
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 3
71459: NEG
71460: PUSH
71461: LD_INT 1
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 4
71470: NEG
71471: PUSH
71472: LD_INT 1
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: LD_INT 0
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 5
71492: NEG
71493: PUSH
71494: LD_INT 1
71496: NEG
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 5
71504: NEG
71505: PUSH
71506: LD_INT 2
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 3
71516: NEG
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: ST_TO_ADDR
// end ; end ;
71572: GO 71575
71574: POP
// case btype of b_depot , b_warehouse :
71575: LD_VAR 0 1
71579: PUSH
71580: LD_INT 0
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71594
71586: LD_INT 1
71588: DOUBLE
71589: EQUAL
71590: IFTRUE 71594
71592: GO 71795
71594: POP
// case nation of nation_american :
71595: LD_VAR 0 5
71599: PUSH
71600: LD_INT 1
71602: DOUBLE
71603: EQUAL
71604: IFTRUE 71608
71606: GO 71664
71608: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71609: LD_ADDR_VAR 0 9
71613: PUSH
71614: LD_VAR 0 11
71618: PUSH
71619: LD_VAR 0 12
71623: PUSH
71624: LD_VAR 0 13
71628: PUSH
71629: LD_VAR 0 14
71633: PUSH
71634: LD_VAR 0 15
71638: PUSH
71639: LD_VAR 0 16
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: PUSH
71652: LD_VAR 0 4
71656: PUSH
71657: LD_INT 1
71659: PLUS
71660: ARRAY
71661: ST_TO_ADDR
71662: GO 71793
71664: LD_INT 2
71666: DOUBLE
71667: EQUAL
71668: IFTRUE 71672
71670: GO 71728
71672: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71673: LD_ADDR_VAR 0 9
71677: PUSH
71678: LD_VAR 0 17
71682: PUSH
71683: LD_VAR 0 18
71687: PUSH
71688: LD_VAR 0 19
71692: PUSH
71693: LD_VAR 0 20
71697: PUSH
71698: LD_VAR 0 21
71702: PUSH
71703: LD_VAR 0 22
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: PUSH
71716: LD_VAR 0 4
71720: PUSH
71721: LD_INT 1
71723: PLUS
71724: ARRAY
71725: ST_TO_ADDR
71726: GO 71793
71728: LD_INT 3
71730: DOUBLE
71731: EQUAL
71732: IFTRUE 71736
71734: GO 71792
71736: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71737: LD_ADDR_VAR 0 9
71741: PUSH
71742: LD_VAR 0 23
71746: PUSH
71747: LD_VAR 0 24
71751: PUSH
71752: LD_VAR 0 25
71756: PUSH
71757: LD_VAR 0 26
71761: PUSH
71762: LD_VAR 0 27
71766: PUSH
71767: LD_VAR 0 28
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: PUSH
71780: LD_VAR 0 4
71784: PUSH
71785: LD_INT 1
71787: PLUS
71788: ARRAY
71789: ST_TO_ADDR
71790: GO 71793
71792: POP
71793: GO 72348
71795: LD_INT 2
71797: DOUBLE
71798: EQUAL
71799: IFTRUE 71809
71801: LD_INT 3
71803: DOUBLE
71804: EQUAL
71805: IFTRUE 71809
71807: GO 71865
71809: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71810: LD_ADDR_VAR 0 9
71814: PUSH
71815: LD_VAR 0 29
71819: PUSH
71820: LD_VAR 0 30
71824: PUSH
71825: LD_VAR 0 31
71829: PUSH
71830: LD_VAR 0 32
71834: PUSH
71835: LD_VAR 0 33
71839: PUSH
71840: LD_VAR 0 34
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: PUSH
71853: LD_VAR 0 4
71857: PUSH
71858: LD_INT 1
71860: PLUS
71861: ARRAY
71862: ST_TO_ADDR
71863: GO 72348
71865: LD_INT 16
71867: DOUBLE
71868: EQUAL
71869: IFTRUE 71927
71871: LD_INT 17
71873: DOUBLE
71874: EQUAL
71875: IFTRUE 71927
71877: LD_INT 18
71879: DOUBLE
71880: EQUAL
71881: IFTRUE 71927
71883: LD_INT 19
71885: DOUBLE
71886: EQUAL
71887: IFTRUE 71927
71889: LD_INT 22
71891: DOUBLE
71892: EQUAL
71893: IFTRUE 71927
71895: LD_INT 20
71897: DOUBLE
71898: EQUAL
71899: IFTRUE 71927
71901: LD_INT 21
71903: DOUBLE
71904: EQUAL
71905: IFTRUE 71927
71907: LD_INT 23
71909: DOUBLE
71910: EQUAL
71911: IFTRUE 71927
71913: LD_INT 24
71915: DOUBLE
71916: EQUAL
71917: IFTRUE 71927
71919: LD_INT 25
71921: DOUBLE
71922: EQUAL
71923: IFTRUE 71927
71925: GO 71983
71927: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71928: LD_ADDR_VAR 0 9
71932: PUSH
71933: LD_VAR 0 35
71937: PUSH
71938: LD_VAR 0 36
71942: PUSH
71943: LD_VAR 0 37
71947: PUSH
71948: LD_VAR 0 38
71952: PUSH
71953: LD_VAR 0 39
71957: PUSH
71958: LD_VAR 0 40
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: PUSH
71971: LD_VAR 0 4
71975: PUSH
71976: LD_INT 1
71978: PLUS
71979: ARRAY
71980: ST_TO_ADDR
71981: GO 72348
71983: LD_INT 6
71985: DOUBLE
71986: EQUAL
71987: IFTRUE 72039
71989: LD_INT 7
71991: DOUBLE
71992: EQUAL
71993: IFTRUE 72039
71995: LD_INT 8
71997: DOUBLE
71998: EQUAL
71999: IFTRUE 72039
72001: LD_INT 13
72003: DOUBLE
72004: EQUAL
72005: IFTRUE 72039
72007: LD_INT 12
72009: DOUBLE
72010: EQUAL
72011: IFTRUE 72039
72013: LD_INT 15
72015: DOUBLE
72016: EQUAL
72017: IFTRUE 72039
72019: LD_INT 11
72021: DOUBLE
72022: EQUAL
72023: IFTRUE 72039
72025: LD_INT 14
72027: DOUBLE
72028: EQUAL
72029: IFTRUE 72039
72031: LD_INT 10
72033: DOUBLE
72034: EQUAL
72035: IFTRUE 72039
72037: GO 72095
72039: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72040: LD_ADDR_VAR 0 9
72044: PUSH
72045: LD_VAR 0 41
72049: PUSH
72050: LD_VAR 0 42
72054: PUSH
72055: LD_VAR 0 43
72059: PUSH
72060: LD_VAR 0 44
72064: PUSH
72065: LD_VAR 0 45
72069: PUSH
72070: LD_VAR 0 46
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: PUSH
72083: LD_VAR 0 4
72087: PUSH
72088: LD_INT 1
72090: PLUS
72091: ARRAY
72092: ST_TO_ADDR
72093: GO 72348
72095: LD_INT 36
72097: DOUBLE
72098: EQUAL
72099: IFTRUE 72103
72101: GO 72159
72103: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72104: LD_ADDR_VAR 0 9
72108: PUSH
72109: LD_VAR 0 47
72113: PUSH
72114: LD_VAR 0 48
72118: PUSH
72119: LD_VAR 0 49
72123: PUSH
72124: LD_VAR 0 50
72128: PUSH
72129: LD_VAR 0 51
72133: PUSH
72134: LD_VAR 0 52
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: PUSH
72147: LD_VAR 0 4
72151: PUSH
72152: LD_INT 1
72154: PLUS
72155: ARRAY
72156: ST_TO_ADDR
72157: GO 72348
72159: LD_INT 4
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72185
72165: LD_INT 5
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72185
72171: LD_INT 34
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72185
72177: LD_INT 37
72179: DOUBLE
72180: EQUAL
72181: IFTRUE 72185
72183: GO 72241
72185: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72186: LD_ADDR_VAR 0 9
72190: PUSH
72191: LD_VAR 0 53
72195: PUSH
72196: LD_VAR 0 54
72200: PUSH
72201: LD_VAR 0 55
72205: PUSH
72206: LD_VAR 0 56
72210: PUSH
72211: LD_VAR 0 57
72215: PUSH
72216: LD_VAR 0 58
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: PUSH
72229: LD_VAR 0 4
72233: PUSH
72234: LD_INT 1
72236: PLUS
72237: ARRAY
72238: ST_TO_ADDR
72239: GO 72348
72241: LD_INT 31
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72291
72247: LD_INT 32
72249: DOUBLE
72250: EQUAL
72251: IFTRUE 72291
72253: LD_INT 33
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72291
72259: LD_INT 27
72261: DOUBLE
72262: EQUAL
72263: IFTRUE 72291
72265: LD_INT 26
72267: DOUBLE
72268: EQUAL
72269: IFTRUE 72291
72271: LD_INT 28
72273: DOUBLE
72274: EQUAL
72275: IFTRUE 72291
72277: LD_INT 29
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72291
72283: LD_INT 30
72285: DOUBLE
72286: EQUAL
72287: IFTRUE 72291
72289: GO 72347
72291: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72292: LD_ADDR_VAR 0 9
72296: PUSH
72297: LD_VAR 0 59
72301: PUSH
72302: LD_VAR 0 60
72306: PUSH
72307: LD_VAR 0 61
72311: PUSH
72312: LD_VAR 0 62
72316: PUSH
72317: LD_VAR 0 63
72321: PUSH
72322: LD_VAR 0 64
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: PUSH
72335: LD_VAR 0 4
72339: PUSH
72340: LD_INT 1
72342: PLUS
72343: ARRAY
72344: ST_TO_ADDR
72345: GO 72348
72347: POP
// temp_list2 = [ ] ;
72348: LD_ADDR_VAR 0 10
72352: PUSH
72353: EMPTY
72354: ST_TO_ADDR
// for i in temp_list do
72355: LD_ADDR_VAR 0 8
72359: PUSH
72360: LD_VAR 0 9
72364: PUSH
72365: FOR_IN
72366: IFFALSE 72418
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72368: LD_ADDR_VAR 0 10
72372: PUSH
72373: LD_VAR 0 10
72377: PUSH
72378: LD_VAR 0 8
72382: PUSH
72383: LD_INT 1
72385: ARRAY
72386: PUSH
72387: LD_VAR 0 2
72391: PLUS
72392: PUSH
72393: LD_VAR 0 8
72397: PUSH
72398: LD_INT 2
72400: ARRAY
72401: PUSH
72402: LD_VAR 0 3
72406: PLUS
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: EMPTY
72413: LIST
72414: ADD
72415: ST_TO_ADDR
72416: GO 72365
72418: POP
72419: POP
// result = temp_list2 ;
72420: LD_ADDR_VAR 0 7
72424: PUSH
72425: LD_VAR 0 10
72429: ST_TO_ADDR
// end ;
72430: LD_VAR 0 7
72434: RET
// export function EnemyInRange ( unit , dist ) ; begin
72435: LD_INT 0
72437: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72438: LD_ADDR_VAR 0 3
72442: PUSH
72443: LD_VAR 0 1
72447: PPUSH
72448: CALL_OW 255
72452: PPUSH
72453: LD_VAR 0 1
72457: PPUSH
72458: CALL_OW 250
72462: PPUSH
72463: LD_VAR 0 1
72467: PPUSH
72468: CALL_OW 251
72472: PPUSH
72473: LD_VAR 0 2
72477: PPUSH
72478: CALL 45831 0 4
72482: PUSH
72483: LD_INT 4
72485: ARRAY
72486: ST_TO_ADDR
// end ;
72487: LD_VAR 0 3
72491: RET
// export function PlayerSeeMe ( unit ) ; begin
72492: LD_INT 0
72494: PPUSH
// result := See ( your_side , unit ) ;
72495: LD_ADDR_VAR 0 2
72499: PUSH
72500: LD_OWVAR 2
72504: PPUSH
72505: LD_VAR 0 1
72509: PPUSH
72510: CALL_OW 292
72514: ST_TO_ADDR
// end ;
72515: LD_VAR 0 2
72519: RET
// export function ReverseDir ( unit ) ; begin
72520: LD_INT 0
72522: PPUSH
// if not unit then
72523: LD_VAR 0 1
72527: NOT
72528: IFFALSE 72532
// exit ;
72530: GO 72555
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72532: LD_ADDR_VAR 0 2
72536: PUSH
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 254
72546: PUSH
72547: LD_INT 3
72549: PLUS
72550: PUSH
72551: LD_INT 6
72553: MOD
72554: ST_TO_ADDR
// end ;
72555: LD_VAR 0 2
72559: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72560: LD_INT 0
72562: PPUSH
72563: PPUSH
72564: PPUSH
72565: PPUSH
72566: PPUSH
// if not hexes then
72567: LD_VAR 0 2
72571: NOT
72572: IFFALSE 72576
// exit ;
72574: GO 72724
// dist := 9999 ;
72576: LD_ADDR_VAR 0 5
72580: PUSH
72581: LD_INT 9999
72583: ST_TO_ADDR
// for i = 1 to hexes do
72584: LD_ADDR_VAR 0 4
72588: PUSH
72589: DOUBLE
72590: LD_INT 1
72592: DEC
72593: ST_TO_ADDR
72594: LD_VAR 0 2
72598: PUSH
72599: FOR_TO
72600: IFFALSE 72712
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72602: LD_VAR 0 1
72606: PPUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_VAR 0 4
72616: ARRAY
72617: PUSH
72618: LD_INT 1
72620: ARRAY
72621: PPUSH
72622: LD_VAR 0 2
72626: PUSH
72627: LD_VAR 0 4
72631: ARRAY
72632: PUSH
72633: LD_INT 2
72635: ARRAY
72636: PPUSH
72637: CALL_OW 297
72641: PUSH
72642: LD_VAR 0 5
72646: LESS
72647: IFFALSE 72710
// begin hex := hexes [ i ] ;
72649: LD_ADDR_VAR 0 7
72653: PUSH
72654: LD_VAR 0 2
72658: PUSH
72659: LD_VAR 0 4
72663: ARRAY
72664: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72665: LD_ADDR_VAR 0 5
72669: PUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: LD_VAR 0 2
72679: PUSH
72680: LD_VAR 0 4
72684: ARRAY
72685: PUSH
72686: LD_INT 1
72688: ARRAY
72689: PPUSH
72690: LD_VAR 0 2
72694: PUSH
72695: LD_VAR 0 4
72699: ARRAY
72700: PUSH
72701: LD_INT 2
72703: ARRAY
72704: PPUSH
72705: CALL_OW 297
72709: ST_TO_ADDR
// end ; end ;
72710: GO 72599
72712: POP
72713: POP
// result := hex ;
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: LD_VAR 0 7
72723: ST_TO_ADDR
// end ;
72724: LD_VAR 0 3
72728: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72729: LD_INT 0
72731: PPUSH
72732: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72733: LD_VAR 0 1
72737: NOT
72738: PUSH
72739: LD_VAR 0 1
72743: PUSH
72744: LD_INT 21
72746: PUSH
72747: LD_INT 2
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 23
72756: PUSH
72757: LD_INT 2
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PPUSH
72768: CALL_OW 69
72772: IN
72773: NOT
72774: OR
72775: IFFALSE 72779
// exit ;
72777: GO 72826
// for i = 1 to 3 do
72779: LD_ADDR_VAR 0 3
72783: PUSH
72784: DOUBLE
72785: LD_INT 1
72787: DEC
72788: ST_TO_ADDR
72789: LD_INT 3
72791: PUSH
72792: FOR_TO
72793: IFFALSE 72824
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72795: LD_VAR 0 1
72799: PPUSH
72800: CALL_OW 250
72804: PPUSH
72805: LD_VAR 0 1
72809: PPUSH
72810: CALL_OW 251
72814: PPUSH
72815: LD_INT 1
72817: PPUSH
72818: CALL_OW 453
72822: GO 72792
72824: POP
72825: POP
// end ;
72826: LD_VAR 0 2
72830: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72831: LD_INT 0
72833: PPUSH
72834: PPUSH
72835: PPUSH
72836: PPUSH
72837: PPUSH
72838: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72839: LD_VAR 0 1
72843: NOT
72844: PUSH
72845: LD_VAR 0 2
72849: NOT
72850: OR
72851: PUSH
72852: LD_VAR 0 1
72856: PPUSH
72857: CALL_OW 314
72861: OR
72862: IFFALSE 72866
// exit ;
72864: GO 73307
// x := GetX ( enemy_unit ) ;
72866: LD_ADDR_VAR 0 7
72870: PUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: CALL_OW 250
72880: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72881: LD_ADDR_VAR 0 8
72885: PUSH
72886: LD_VAR 0 2
72890: PPUSH
72891: CALL_OW 251
72895: ST_TO_ADDR
// if not x or not y then
72896: LD_VAR 0 7
72900: NOT
72901: PUSH
72902: LD_VAR 0 8
72906: NOT
72907: OR
72908: IFFALSE 72912
// exit ;
72910: GO 73307
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72912: LD_ADDR_VAR 0 6
72916: PUSH
72917: LD_VAR 0 7
72921: PPUSH
72922: LD_INT 0
72924: PPUSH
72925: LD_INT 4
72927: PPUSH
72928: CALL_OW 272
72932: PUSH
72933: LD_VAR 0 8
72937: PPUSH
72938: LD_INT 0
72940: PPUSH
72941: LD_INT 4
72943: PPUSH
72944: CALL_OW 273
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_VAR 0 7
72957: PPUSH
72958: LD_INT 1
72960: PPUSH
72961: LD_INT 4
72963: PPUSH
72964: CALL_OW 272
72968: PUSH
72969: LD_VAR 0 8
72973: PPUSH
72974: LD_INT 1
72976: PPUSH
72977: LD_INT 4
72979: PPUSH
72980: CALL_OW 273
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_VAR 0 7
72993: PPUSH
72994: LD_INT 2
72996: PPUSH
72997: LD_INT 4
72999: PPUSH
73000: CALL_OW 272
73004: PUSH
73005: LD_VAR 0 8
73009: PPUSH
73010: LD_INT 2
73012: PPUSH
73013: LD_INT 4
73015: PPUSH
73016: CALL_OW 273
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_VAR 0 7
73029: PPUSH
73030: LD_INT 3
73032: PPUSH
73033: LD_INT 4
73035: PPUSH
73036: CALL_OW 272
73040: PUSH
73041: LD_VAR 0 8
73045: PPUSH
73046: LD_INT 3
73048: PPUSH
73049: LD_INT 4
73051: PPUSH
73052: CALL_OW 273
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_VAR 0 7
73065: PPUSH
73066: LD_INT 4
73068: PPUSH
73069: LD_INT 4
73071: PPUSH
73072: CALL_OW 272
73076: PUSH
73077: LD_VAR 0 8
73081: PPUSH
73082: LD_INT 4
73084: PPUSH
73085: LD_INT 4
73087: PPUSH
73088: CALL_OW 273
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_VAR 0 7
73101: PPUSH
73102: LD_INT 5
73104: PPUSH
73105: LD_INT 4
73107: PPUSH
73108: CALL_OW 272
73112: PUSH
73113: LD_VAR 0 8
73117: PPUSH
73118: LD_INT 5
73120: PPUSH
73121: LD_INT 4
73123: PPUSH
73124: CALL_OW 273
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: ST_TO_ADDR
// for i = tmp downto 1 do
73141: LD_ADDR_VAR 0 4
73145: PUSH
73146: DOUBLE
73147: LD_VAR 0 6
73151: INC
73152: ST_TO_ADDR
73153: LD_INT 1
73155: PUSH
73156: FOR_DOWNTO
73157: IFFALSE 73258
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73159: LD_VAR 0 6
73163: PUSH
73164: LD_VAR 0 4
73168: ARRAY
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: PPUSH
73174: LD_VAR 0 6
73178: PUSH
73179: LD_VAR 0 4
73183: ARRAY
73184: PUSH
73185: LD_INT 2
73187: ARRAY
73188: PPUSH
73189: CALL_OW 488
73193: NOT
73194: PUSH
73195: LD_VAR 0 6
73199: PUSH
73200: LD_VAR 0 4
73204: ARRAY
73205: PUSH
73206: LD_INT 1
73208: ARRAY
73209: PPUSH
73210: LD_VAR 0 6
73214: PUSH
73215: LD_VAR 0 4
73219: ARRAY
73220: PUSH
73221: LD_INT 2
73223: ARRAY
73224: PPUSH
73225: CALL_OW 428
73229: PUSH
73230: LD_INT 0
73232: NONEQUAL
73233: OR
73234: IFFALSE 73256
// tmp := Delete ( tmp , i ) ;
73236: LD_ADDR_VAR 0 6
73240: PUSH
73241: LD_VAR 0 6
73245: PPUSH
73246: LD_VAR 0 4
73250: PPUSH
73251: CALL_OW 3
73255: ST_TO_ADDR
73256: GO 73156
73258: POP
73259: POP
// j := GetClosestHex ( unit , tmp ) ;
73260: LD_ADDR_VAR 0 5
73264: PUSH
73265: LD_VAR 0 1
73269: PPUSH
73270: LD_VAR 0 6
73274: PPUSH
73275: CALL 72560 0 2
73279: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73280: LD_VAR 0 1
73284: PPUSH
73285: LD_VAR 0 5
73289: PUSH
73290: LD_INT 1
73292: ARRAY
73293: PPUSH
73294: LD_VAR 0 5
73298: PUSH
73299: LD_INT 2
73301: ARRAY
73302: PPUSH
73303: CALL_OW 111
// end ;
73307: LD_VAR 0 3
73311: RET
// export function PrepareApemanSoldier ( ) ; begin
73312: LD_INT 0
73314: PPUSH
// uc_nation := 0 ;
73315: LD_ADDR_OWVAR 21
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
// hc_sex := sex_male ;
73323: LD_ADDR_OWVAR 27
73327: PUSH
73328: LD_INT 1
73330: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73331: LD_ADDR_OWVAR 28
73335: PUSH
73336: LD_INT 15
73338: ST_TO_ADDR
// hc_gallery :=  ;
73339: LD_ADDR_OWVAR 33
73343: PUSH
73344: LD_STRING 
73346: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73347: LD_ADDR_OWVAR 31
73351: PUSH
73352: LD_INT 0
73354: PPUSH
73355: LD_INT 3
73357: PPUSH
73358: CALL_OW 12
73362: PUSH
73363: LD_INT 0
73365: PPUSH
73366: LD_INT 3
73368: PPUSH
73369: CALL_OW 12
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 0
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: ST_TO_ADDR
// end ;
73386: LD_VAR 0 1
73390: RET
// export function PrepareApemanEngineer ( ) ; begin
73391: LD_INT 0
73393: PPUSH
// uc_nation := 0 ;
73394: LD_ADDR_OWVAR 21
73398: PUSH
73399: LD_INT 0
73401: ST_TO_ADDR
// hc_sex := sex_male ;
73402: LD_ADDR_OWVAR 27
73406: PUSH
73407: LD_INT 1
73409: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73410: LD_ADDR_OWVAR 28
73414: PUSH
73415: LD_INT 16
73417: ST_TO_ADDR
// hc_gallery :=  ;
73418: LD_ADDR_OWVAR 33
73422: PUSH
73423: LD_STRING 
73425: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73426: LD_ADDR_OWVAR 31
73430: PUSH
73431: LD_INT 0
73433: PPUSH
73434: LD_INT 3
73436: PPUSH
73437: CALL_OW 12
73441: PUSH
73442: LD_INT 0
73444: PPUSH
73445: LD_INT 3
73447: PPUSH
73448: CALL_OW 12
73452: PUSH
73453: LD_INT 0
73455: PUSH
73456: LD_INT 0
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: ST_TO_ADDR
// end ;
73465: LD_VAR 0 1
73469: RET
// export function PrepareApeman ( agressivity ) ; begin
73470: LD_INT 0
73472: PPUSH
// uc_side := 0 ;
73473: LD_ADDR_OWVAR 20
73477: PUSH
73478: LD_INT 0
73480: ST_TO_ADDR
// uc_nation := 0 ;
73481: LD_ADDR_OWVAR 21
73485: PUSH
73486: LD_INT 0
73488: ST_TO_ADDR
// hc_sex := sex_male ;
73489: LD_ADDR_OWVAR 27
73493: PUSH
73494: LD_INT 1
73496: ST_TO_ADDR
// hc_class := class_apeman ;
73497: LD_ADDR_OWVAR 28
73501: PUSH
73502: LD_INT 12
73504: ST_TO_ADDR
// hc_gallery :=  ;
73505: LD_ADDR_OWVAR 33
73509: PUSH
73510: LD_STRING 
73512: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73513: LD_ADDR_OWVAR 35
73517: PUSH
73518: LD_VAR 0 1
73522: NEG
73523: PPUSH
73524: LD_VAR 0 1
73528: PPUSH
73529: CALL_OW 12
73533: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73534: LD_ADDR_OWVAR 31
73538: PUSH
73539: LD_INT 0
73541: PPUSH
73542: LD_INT 3
73544: PPUSH
73545: CALL_OW 12
73549: PUSH
73550: LD_INT 0
73552: PPUSH
73553: LD_INT 3
73555: PPUSH
73556: CALL_OW 12
73560: PUSH
73561: LD_INT 0
73563: PUSH
73564: LD_INT 0
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: ST_TO_ADDR
// end ;
73573: LD_VAR 0 2
73577: RET
// export function PrepareTiger ( agressivity ) ; begin
73578: LD_INT 0
73580: PPUSH
// uc_side := 0 ;
73581: LD_ADDR_OWVAR 20
73585: PUSH
73586: LD_INT 0
73588: ST_TO_ADDR
// uc_nation := 0 ;
73589: LD_ADDR_OWVAR 21
73593: PUSH
73594: LD_INT 0
73596: ST_TO_ADDR
// hc_class := class_tiger ;
73597: LD_ADDR_OWVAR 28
73601: PUSH
73602: LD_INT 14
73604: ST_TO_ADDR
// hc_gallery :=  ;
73605: LD_ADDR_OWVAR 33
73609: PUSH
73610: LD_STRING 
73612: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73613: LD_ADDR_OWVAR 35
73617: PUSH
73618: LD_VAR 0 1
73622: NEG
73623: PPUSH
73624: LD_VAR 0 1
73628: PPUSH
73629: CALL_OW 12
73633: ST_TO_ADDR
// end ;
73634: LD_VAR 0 2
73638: RET
// export function PrepareEnchidna ( ) ; begin
73639: LD_INT 0
73641: PPUSH
// uc_side := 0 ;
73642: LD_ADDR_OWVAR 20
73646: PUSH
73647: LD_INT 0
73649: ST_TO_ADDR
// uc_nation := 0 ;
73650: LD_ADDR_OWVAR 21
73654: PUSH
73655: LD_INT 0
73657: ST_TO_ADDR
// hc_class := class_baggie ;
73658: LD_ADDR_OWVAR 28
73662: PUSH
73663: LD_INT 13
73665: ST_TO_ADDR
// hc_gallery :=  ;
73666: LD_ADDR_OWVAR 33
73670: PUSH
73671: LD_STRING 
73673: ST_TO_ADDR
// end ;
73674: LD_VAR 0 1
73678: RET
// export function PrepareFrog ( ) ; begin
73679: LD_INT 0
73681: PPUSH
// uc_side := 0 ;
73682: LD_ADDR_OWVAR 20
73686: PUSH
73687: LD_INT 0
73689: ST_TO_ADDR
// uc_nation := 0 ;
73690: LD_ADDR_OWVAR 21
73694: PUSH
73695: LD_INT 0
73697: ST_TO_ADDR
// hc_class := class_frog ;
73698: LD_ADDR_OWVAR 28
73702: PUSH
73703: LD_INT 19
73705: ST_TO_ADDR
// hc_gallery :=  ;
73706: LD_ADDR_OWVAR 33
73710: PUSH
73711: LD_STRING 
73713: ST_TO_ADDR
// end ;
73714: LD_VAR 0 1
73718: RET
// export function PrepareFish ( ) ; begin
73719: LD_INT 0
73721: PPUSH
// uc_side := 0 ;
73722: LD_ADDR_OWVAR 20
73726: PUSH
73727: LD_INT 0
73729: ST_TO_ADDR
// uc_nation := 0 ;
73730: LD_ADDR_OWVAR 21
73734: PUSH
73735: LD_INT 0
73737: ST_TO_ADDR
// hc_class := class_fish ;
73738: LD_ADDR_OWVAR 28
73742: PUSH
73743: LD_INT 20
73745: ST_TO_ADDR
// hc_gallery :=  ;
73746: LD_ADDR_OWVAR 33
73750: PUSH
73751: LD_STRING 
73753: ST_TO_ADDR
// end ;
73754: LD_VAR 0 1
73758: RET
// export function PrepareBird ( ) ; begin
73759: LD_INT 0
73761: PPUSH
// uc_side := 0 ;
73762: LD_ADDR_OWVAR 20
73766: PUSH
73767: LD_INT 0
73769: ST_TO_ADDR
// uc_nation := 0 ;
73770: LD_ADDR_OWVAR 21
73774: PUSH
73775: LD_INT 0
73777: ST_TO_ADDR
// hc_class := class_phororhacos ;
73778: LD_ADDR_OWVAR 28
73782: PUSH
73783: LD_INT 18
73785: ST_TO_ADDR
// hc_gallery :=  ;
73786: LD_ADDR_OWVAR 33
73790: PUSH
73791: LD_STRING 
73793: ST_TO_ADDR
// end ;
73794: LD_VAR 0 1
73798: RET
// export function PrepareHorse ( ) ; begin
73799: LD_INT 0
73801: PPUSH
// uc_side := 0 ;
73802: LD_ADDR_OWVAR 20
73806: PUSH
73807: LD_INT 0
73809: ST_TO_ADDR
// uc_nation := 0 ;
73810: LD_ADDR_OWVAR 21
73814: PUSH
73815: LD_INT 0
73817: ST_TO_ADDR
// hc_class := class_horse ;
73818: LD_ADDR_OWVAR 28
73822: PUSH
73823: LD_INT 21
73825: ST_TO_ADDR
// hc_gallery :=  ;
73826: LD_ADDR_OWVAR 33
73830: PUSH
73831: LD_STRING 
73833: ST_TO_ADDR
// end ;
73834: LD_VAR 0 1
73838: RET
// export function PrepareMastodont ( ) ; begin
73839: LD_INT 0
73841: PPUSH
// uc_side := 0 ;
73842: LD_ADDR_OWVAR 20
73846: PUSH
73847: LD_INT 0
73849: ST_TO_ADDR
// uc_nation := 0 ;
73850: LD_ADDR_OWVAR 21
73854: PUSH
73855: LD_INT 0
73857: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73858: LD_ADDR_OWVAR 37
73862: PUSH
73863: LD_INT 31
73865: ST_TO_ADDR
// vc_control := control_rider ;
73866: LD_ADDR_OWVAR 38
73870: PUSH
73871: LD_INT 4
73873: ST_TO_ADDR
// end ;
73874: LD_VAR 0 1
73878: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73879: LD_INT 0
73881: PPUSH
73882: PPUSH
73883: PPUSH
// uc_side = 0 ;
73884: LD_ADDR_OWVAR 20
73888: PUSH
73889: LD_INT 0
73891: ST_TO_ADDR
// uc_nation = 0 ;
73892: LD_ADDR_OWVAR 21
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
// InitHc_All ( ) ;
73900: CALL_OW 584
// InitVc ;
73904: CALL_OW 20
// if mastodonts then
73908: LD_VAR 0 6
73912: IFFALSE 73979
// for i = 1 to mastodonts do
73914: LD_ADDR_VAR 0 11
73918: PUSH
73919: DOUBLE
73920: LD_INT 1
73922: DEC
73923: ST_TO_ADDR
73924: LD_VAR 0 6
73928: PUSH
73929: FOR_TO
73930: IFFALSE 73977
// begin vc_chassis := 31 ;
73932: LD_ADDR_OWVAR 37
73936: PUSH
73937: LD_INT 31
73939: ST_TO_ADDR
// vc_control := control_rider ;
73940: LD_ADDR_OWVAR 38
73944: PUSH
73945: LD_INT 4
73947: ST_TO_ADDR
// animal := CreateVehicle ;
73948: LD_ADDR_VAR 0 12
73952: PUSH
73953: CALL_OW 45
73957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73958: LD_VAR 0 12
73962: PPUSH
73963: LD_VAR 0 8
73967: PPUSH
73968: LD_INT 0
73970: PPUSH
73971: CALL 76114 0 3
// end ;
73975: GO 73929
73977: POP
73978: POP
// if horses then
73979: LD_VAR 0 5
73983: IFFALSE 74050
// for i = 1 to horses do
73985: LD_ADDR_VAR 0 11
73989: PUSH
73990: DOUBLE
73991: LD_INT 1
73993: DEC
73994: ST_TO_ADDR
73995: LD_VAR 0 5
73999: PUSH
74000: FOR_TO
74001: IFFALSE 74048
// begin hc_class := 21 ;
74003: LD_ADDR_OWVAR 28
74007: PUSH
74008: LD_INT 21
74010: ST_TO_ADDR
// hc_gallery :=  ;
74011: LD_ADDR_OWVAR 33
74015: PUSH
74016: LD_STRING 
74018: ST_TO_ADDR
// animal := CreateHuman ;
74019: LD_ADDR_VAR 0 12
74023: PUSH
74024: CALL_OW 44
74028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74029: LD_VAR 0 12
74033: PPUSH
74034: LD_VAR 0 8
74038: PPUSH
74039: LD_INT 0
74041: PPUSH
74042: CALL 76114 0 3
// end ;
74046: GO 74000
74048: POP
74049: POP
// if birds then
74050: LD_VAR 0 1
74054: IFFALSE 74121
// for i = 1 to birds do
74056: LD_ADDR_VAR 0 11
74060: PUSH
74061: DOUBLE
74062: LD_INT 1
74064: DEC
74065: ST_TO_ADDR
74066: LD_VAR 0 1
74070: PUSH
74071: FOR_TO
74072: IFFALSE 74119
// begin hc_class = 18 ;
74074: LD_ADDR_OWVAR 28
74078: PUSH
74079: LD_INT 18
74081: ST_TO_ADDR
// hc_gallery =  ;
74082: LD_ADDR_OWVAR 33
74086: PUSH
74087: LD_STRING 
74089: ST_TO_ADDR
// animal := CreateHuman ;
74090: LD_ADDR_VAR 0 12
74094: PUSH
74095: CALL_OW 44
74099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74100: LD_VAR 0 12
74104: PPUSH
74105: LD_VAR 0 8
74109: PPUSH
74110: LD_INT 0
74112: PPUSH
74113: CALL 76114 0 3
// end ;
74117: GO 74071
74119: POP
74120: POP
// if tigers then
74121: LD_VAR 0 2
74125: IFFALSE 74209
// for i = 1 to tigers do
74127: LD_ADDR_VAR 0 11
74131: PUSH
74132: DOUBLE
74133: LD_INT 1
74135: DEC
74136: ST_TO_ADDR
74137: LD_VAR 0 2
74141: PUSH
74142: FOR_TO
74143: IFFALSE 74207
// begin hc_class = class_tiger ;
74145: LD_ADDR_OWVAR 28
74149: PUSH
74150: LD_INT 14
74152: ST_TO_ADDR
// hc_gallery =  ;
74153: LD_ADDR_OWVAR 33
74157: PUSH
74158: LD_STRING 
74160: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74161: LD_ADDR_OWVAR 35
74165: PUSH
74166: LD_INT 7
74168: NEG
74169: PPUSH
74170: LD_INT 7
74172: PPUSH
74173: CALL_OW 12
74177: ST_TO_ADDR
// animal := CreateHuman ;
74178: LD_ADDR_VAR 0 12
74182: PUSH
74183: CALL_OW 44
74187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74188: LD_VAR 0 12
74192: PPUSH
74193: LD_VAR 0 8
74197: PPUSH
74198: LD_INT 0
74200: PPUSH
74201: CALL 76114 0 3
// end ;
74205: GO 74142
74207: POP
74208: POP
// if apemans then
74209: LD_VAR 0 3
74213: IFFALSE 74336
// for i = 1 to apemans do
74215: LD_ADDR_VAR 0 11
74219: PUSH
74220: DOUBLE
74221: LD_INT 1
74223: DEC
74224: ST_TO_ADDR
74225: LD_VAR 0 3
74229: PUSH
74230: FOR_TO
74231: IFFALSE 74334
// begin hc_class = class_apeman ;
74233: LD_ADDR_OWVAR 28
74237: PUSH
74238: LD_INT 12
74240: ST_TO_ADDR
// hc_gallery =  ;
74241: LD_ADDR_OWVAR 33
74245: PUSH
74246: LD_STRING 
74248: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74249: LD_ADDR_OWVAR 35
74253: PUSH
74254: LD_INT 2
74256: NEG
74257: PPUSH
74258: LD_INT 2
74260: PPUSH
74261: CALL_OW 12
74265: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74266: LD_ADDR_OWVAR 31
74270: PUSH
74271: LD_INT 1
74273: PPUSH
74274: LD_INT 3
74276: PPUSH
74277: CALL_OW 12
74281: PUSH
74282: LD_INT 1
74284: PPUSH
74285: LD_INT 3
74287: PPUSH
74288: CALL_OW 12
74292: PUSH
74293: LD_INT 0
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: ST_TO_ADDR
// animal := CreateHuman ;
74305: LD_ADDR_VAR 0 12
74309: PUSH
74310: CALL_OW 44
74314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74315: LD_VAR 0 12
74319: PPUSH
74320: LD_VAR 0 8
74324: PPUSH
74325: LD_INT 0
74327: PPUSH
74328: CALL 76114 0 3
// end ;
74332: GO 74230
74334: POP
74335: POP
// if enchidnas then
74336: LD_VAR 0 4
74340: IFFALSE 74407
// for i = 1 to enchidnas do
74342: LD_ADDR_VAR 0 11
74346: PUSH
74347: DOUBLE
74348: LD_INT 1
74350: DEC
74351: ST_TO_ADDR
74352: LD_VAR 0 4
74356: PUSH
74357: FOR_TO
74358: IFFALSE 74405
// begin hc_class = 13 ;
74360: LD_ADDR_OWVAR 28
74364: PUSH
74365: LD_INT 13
74367: ST_TO_ADDR
// hc_gallery =  ;
74368: LD_ADDR_OWVAR 33
74372: PUSH
74373: LD_STRING 
74375: ST_TO_ADDR
// animal := CreateHuman ;
74376: LD_ADDR_VAR 0 12
74380: PUSH
74381: CALL_OW 44
74385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74386: LD_VAR 0 12
74390: PPUSH
74391: LD_VAR 0 8
74395: PPUSH
74396: LD_INT 0
74398: PPUSH
74399: CALL 76114 0 3
// end ;
74403: GO 74357
74405: POP
74406: POP
// if fishes then
74407: LD_VAR 0 7
74411: IFFALSE 74478
// for i = 1 to fishes do
74413: LD_ADDR_VAR 0 11
74417: PUSH
74418: DOUBLE
74419: LD_INT 1
74421: DEC
74422: ST_TO_ADDR
74423: LD_VAR 0 7
74427: PUSH
74428: FOR_TO
74429: IFFALSE 74476
// begin hc_class = 20 ;
74431: LD_ADDR_OWVAR 28
74435: PUSH
74436: LD_INT 20
74438: ST_TO_ADDR
// hc_gallery =  ;
74439: LD_ADDR_OWVAR 33
74443: PUSH
74444: LD_STRING 
74446: ST_TO_ADDR
// animal := CreateHuman ;
74447: LD_ADDR_VAR 0 12
74451: PUSH
74452: CALL_OW 44
74456: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74457: LD_VAR 0 12
74461: PPUSH
74462: LD_VAR 0 9
74466: PPUSH
74467: LD_INT 0
74469: PPUSH
74470: CALL 76114 0 3
// end ;
74474: GO 74428
74476: POP
74477: POP
// end ;
74478: LD_VAR 0 10
74482: RET
// export function WantHeal ( sci , unit ) ; begin
74483: LD_INT 0
74485: PPUSH
// if GetTaskList ( sci ) > 0 then
74486: LD_VAR 0 1
74490: PPUSH
74491: CALL_OW 437
74495: PUSH
74496: LD_INT 0
74498: GREATER
74499: IFFALSE 74569
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 437
74510: PUSH
74511: LD_INT 1
74513: ARRAY
74514: PUSH
74515: LD_INT 1
74517: ARRAY
74518: PUSH
74519: LD_STRING l
74521: EQUAL
74522: PUSH
74523: LD_VAR 0 1
74527: PPUSH
74528: CALL_OW 437
74532: PUSH
74533: LD_INT 1
74535: ARRAY
74536: PUSH
74537: LD_INT 4
74539: ARRAY
74540: PUSH
74541: LD_VAR 0 2
74545: EQUAL
74546: AND
74547: IFFALSE 74559
// result := true else
74549: LD_ADDR_VAR 0 3
74553: PUSH
74554: LD_INT 1
74556: ST_TO_ADDR
74557: GO 74567
// result := false ;
74559: LD_ADDR_VAR 0 3
74563: PUSH
74564: LD_INT 0
74566: ST_TO_ADDR
// end else
74567: GO 74577
// result := false ;
74569: LD_ADDR_VAR 0 3
74573: PUSH
74574: LD_INT 0
74576: ST_TO_ADDR
// end ;
74577: LD_VAR 0 3
74581: RET
// export function HealTarget ( sci ) ; begin
74582: LD_INT 0
74584: PPUSH
// if not sci then
74585: LD_VAR 0 1
74589: NOT
74590: IFFALSE 74594
// exit ;
74592: GO 74659
// result := 0 ;
74594: LD_ADDR_VAR 0 2
74598: PUSH
74599: LD_INT 0
74601: ST_TO_ADDR
// if GetTaskList ( sci ) then
74602: LD_VAR 0 1
74606: PPUSH
74607: CALL_OW 437
74611: IFFALSE 74659
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74613: LD_VAR 0 1
74617: PPUSH
74618: CALL_OW 437
74622: PUSH
74623: LD_INT 1
74625: ARRAY
74626: PUSH
74627: LD_INT 1
74629: ARRAY
74630: PUSH
74631: LD_STRING l
74633: EQUAL
74634: IFFALSE 74659
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74636: LD_ADDR_VAR 0 2
74640: PUSH
74641: LD_VAR 0 1
74645: PPUSH
74646: CALL_OW 437
74650: PUSH
74651: LD_INT 1
74653: ARRAY
74654: PUSH
74655: LD_INT 4
74657: ARRAY
74658: ST_TO_ADDR
// end ;
74659: LD_VAR 0 2
74663: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74664: LD_INT 0
74666: PPUSH
74667: PPUSH
74668: PPUSH
74669: PPUSH
// if not base_units then
74670: LD_VAR 0 1
74674: NOT
74675: IFFALSE 74679
// exit ;
74677: GO 74766
// result := false ;
74679: LD_ADDR_VAR 0 2
74683: PUSH
74684: LD_INT 0
74686: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74687: LD_ADDR_VAR 0 5
74691: PUSH
74692: LD_VAR 0 1
74696: PPUSH
74697: LD_INT 21
74699: PUSH
74700: LD_INT 3
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PPUSH
74707: CALL_OW 72
74711: ST_TO_ADDR
// if not tmp then
74712: LD_VAR 0 5
74716: NOT
74717: IFFALSE 74721
// exit ;
74719: GO 74766
// for i in tmp do
74721: LD_ADDR_VAR 0 3
74725: PUSH
74726: LD_VAR 0 5
74730: PUSH
74731: FOR_IN
74732: IFFALSE 74764
// begin result := EnemyInRange ( i , 22 ) ;
74734: LD_ADDR_VAR 0 2
74738: PUSH
74739: LD_VAR 0 3
74743: PPUSH
74744: LD_INT 22
74746: PPUSH
74747: CALL 72435 0 2
74751: ST_TO_ADDR
// if result then
74752: LD_VAR 0 2
74756: IFFALSE 74762
// exit ;
74758: POP
74759: POP
74760: GO 74766
// end ;
74762: GO 74731
74764: POP
74765: POP
// end ;
74766: LD_VAR 0 2
74770: RET
// export function FilterByTag ( units , tag ) ; begin
74771: LD_INT 0
74773: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74774: LD_ADDR_VAR 0 3
74778: PUSH
74779: LD_VAR 0 1
74783: PPUSH
74784: LD_INT 120
74786: PUSH
74787: LD_VAR 0 2
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PPUSH
74796: CALL_OW 72
74800: ST_TO_ADDR
// end ;
74801: LD_VAR 0 3
74805: RET
// export function IsDriver ( un ) ; begin
74806: LD_INT 0
74808: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74809: LD_ADDR_VAR 0 2
74813: PUSH
74814: LD_VAR 0 1
74818: PUSH
74819: LD_INT 55
74821: PUSH
74822: EMPTY
74823: LIST
74824: PPUSH
74825: CALL_OW 69
74829: IN
74830: ST_TO_ADDR
// end ;
74831: LD_VAR 0 2
74835: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
// list := [ ] ;
74840: LD_ADDR_VAR 0 5
74844: PUSH
74845: EMPTY
74846: ST_TO_ADDR
// case d of 0 :
74847: LD_VAR 0 3
74851: PUSH
74852: LD_INT 0
74854: DOUBLE
74855: EQUAL
74856: IFTRUE 74860
74858: GO 74993
74860: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74861: LD_ADDR_VAR 0 5
74865: PUSH
74866: LD_VAR 0 1
74870: PUSH
74871: LD_INT 4
74873: MINUS
74874: PUSH
74875: LD_VAR 0 2
74879: PUSH
74880: LD_INT 4
74882: MINUS
74883: PUSH
74884: LD_INT 2
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_INT 3
74899: MINUS
74900: PUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_INT 1
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_INT 4
74921: PLUS
74922: PUSH
74923: LD_VAR 0 2
74927: PUSH
74928: LD_INT 4
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: PUSH
74936: LD_VAR 0 1
74940: PUSH
74941: LD_INT 3
74943: PLUS
74944: PUSH
74945: LD_VAR 0 2
74949: PUSH
74950: LD_INT 3
74952: PLUS
74953: PUSH
74954: LD_INT 5
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: LIST
74961: PUSH
74962: LD_VAR 0 1
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 4
74974: PLUS
74975: PUSH
74976: LD_INT 0
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: ST_TO_ADDR
// end ; 1 :
74991: GO 75691
74993: LD_INT 1
74995: DOUBLE
74996: EQUAL
74997: IFTRUE 75001
74999: GO 75134
75001: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75002: LD_ADDR_VAR 0 5
75006: PUSH
75007: LD_VAR 0 1
75011: PUSH
75012: LD_VAR 0 2
75016: PUSH
75017: LD_INT 4
75019: MINUS
75020: PUSH
75021: LD_INT 3
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: PUSH
75029: LD_VAR 0 1
75033: PUSH
75034: LD_INT 3
75036: MINUS
75037: PUSH
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 3
75045: MINUS
75046: PUSH
75047: LD_INT 2
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: PUSH
75055: LD_VAR 0 1
75059: PUSH
75060: LD_INT 4
75062: MINUS
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 1
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: LD_VAR 0 1
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: LD_INT 3
75089: PLUS
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: LIST
75098: PUSH
75099: LD_VAR 0 1
75103: PUSH
75104: LD_INT 4
75106: PLUS
75107: PUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 4
75115: PLUS
75116: PUSH
75117: LD_INT 5
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: ST_TO_ADDR
// end ; 2 :
75132: GO 75691
75134: LD_INT 2
75136: DOUBLE
75137: EQUAL
75138: IFTRUE 75142
75140: GO 75271
75142: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75143: LD_ADDR_VAR 0 5
75147: PUSH
75148: LD_VAR 0 1
75152: PUSH
75153: LD_VAR 0 2
75157: PUSH
75158: LD_INT 3
75160: MINUS
75161: PUSH
75162: LD_INT 3
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: PUSH
75170: LD_VAR 0 1
75174: PUSH
75175: LD_INT 4
75177: PLUS
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_INT 4
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: PUSH
75192: LD_VAR 0 1
75196: PUSH
75197: LD_VAR 0 2
75201: PUSH
75202: LD_INT 4
75204: PLUS
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: LIST
75213: PUSH
75214: LD_VAR 0 1
75218: PUSH
75219: LD_INT 3
75221: MINUS
75222: PUSH
75223: LD_VAR 0 2
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: LIST
75235: PUSH
75236: LD_VAR 0 1
75240: PUSH
75241: LD_INT 4
75243: MINUS
75244: PUSH
75245: LD_VAR 0 2
75249: PUSH
75250: LD_INT 4
75252: MINUS
75253: PUSH
75254: LD_INT 2
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: LIST
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: ST_TO_ADDR
// end ; 3 :
75269: GO 75691
75271: LD_INT 3
75273: DOUBLE
75274: EQUAL
75275: IFTRUE 75279
75277: GO 75412
75279: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75280: LD_ADDR_VAR 0 5
75284: PUSH
75285: LD_VAR 0 1
75289: PUSH
75290: LD_INT 3
75292: PLUS
75293: PUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_INT 4
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: PUSH
75307: LD_VAR 0 1
75311: PUSH
75312: LD_INT 4
75314: PLUS
75315: PUSH
75316: LD_VAR 0 2
75320: PUSH
75321: LD_INT 4
75323: PLUS
75324: PUSH
75325: LD_INT 5
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 4
75340: MINUS
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 1
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: LIST
75354: PUSH
75355: LD_VAR 0 1
75359: PUSH
75360: LD_VAR 0 2
75364: PUSH
75365: LD_INT 4
75367: MINUS
75368: PUSH
75369: LD_INT 3
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: LIST
75376: PUSH
75377: LD_VAR 0 1
75381: PUSH
75382: LD_INT 3
75384: MINUS
75385: PUSH
75386: LD_VAR 0 2
75390: PUSH
75391: LD_INT 3
75393: MINUS
75394: PUSH
75395: LD_INT 2
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: ST_TO_ADDR
// end ; 4 :
75410: GO 75691
75412: LD_INT 4
75414: DOUBLE
75415: EQUAL
75416: IFTRUE 75420
75418: GO 75553
75420: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75421: LD_ADDR_VAR 0 5
75425: PUSH
75426: LD_VAR 0 1
75430: PUSH
75431: LD_VAR 0 2
75435: PUSH
75436: LD_INT 4
75438: PLUS
75439: PUSH
75440: LD_INT 0
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: LIST
75447: PUSH
75448: LD_VAR 0 1
75452: PUSH
75453: LD_INT 3
75455: PLUS
75456: PUSH
75457: LD_VAR 0 2
75461: PUSH
75462: LD_INT 3
75464: PLUS
75465: PUSH
75466: LD_INT 5
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: LIST
75473: PUSH
75474: LD_VAR 0 1
75478: PUSH
75479: LD_INT 4
75481: PLUS
75482: PUSH
75483: LD_VAR 0 2
75487: PUSH
75488: LD_INT 4
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: LIST
75495: PUSH
75496: LD_VAR 0 1
75500: PUSH
75501: LD_VAR 0 2
75505: PUSH
75506: LD_INT 3
75508: MINUS
75509: PUSH
75510: LD_INT 3
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: LIST
75517: PUSH
75518: LD_VAR 0 1
75522: PUSH
75523: LD_INT 4
75525: MINUS
75526: PUSH
75527: LD_VAR 0 2
75531: PUSH
75532: LD_INT 4
75534: MINUS
75535: PUSH
75536: LD_INT 2
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: ST_TO_ADDR
// end ; 5 :
75551: GO 75691
75553: LD_INT 5
75555: DOUBLE
75556: EQUAL
75557: IFTRUE 75561
75559: GO 75690
75561: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75562: LD_ADDR_VAR 0 5
75566: PUSH
75567: LD_VAR 0 1
75571: PUSH
75572: LD_INT 4
75574: MINUS
75575: PUSH
75576: LD_VAR 0 2
75580: PUSH
75581: LD_INT 1
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: LIST
75588: PUSH
75589: LD_VAR 0 1
75593: PUSH
75594: LD_VAR 0 2
75598: PUSH
75599: LD_INT 4
75601: MINUS
75602: PUSH
75603: LD_INT 3
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: LIST
75610: PUSH
75611: LD_VAR 0 1
75615: PUSH
75616: LD_INT 4
75618: PLUS
75619: PUSH
75620: LD_VAR 0 2
75624: PUSH
75625: LD_INT 4
75627: PLUS
75628: PUSH
75629: LD_INT 5
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: PUSH
75637: LD_VAR 0 1
75641: PUSH
75642: LD_INT 3
75644: PLUS
75645: PUSH
75646: LD_VAR 0 2
75650: PUSH
75651: LD_INT 4
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: LIST
75658: PUSH
75659: LD_VAR 0 1
75663: PUSH
75664: LD_VAR 0 2
75668: PUSH
75669: LD_INT 3
75671: PLUS
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: LIST
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: ST_TO_ADDR
// end ; end ;
75688: GO 75691
75690: POP
// result := list ;
75691: LD_ADDR_VAR 0 4
75695: PUSH
75696: LD_VAR 0 5
75700: ST_TO_ADDR
// end ;
75701: LD_VAR 0 4
75705: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75706: LD_INT 0
75708: PPUSH
75709: PPUSH
75710: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75711: LD_VAR 0 1
75715: NOT
75716: PUSH
75717: LD_VAR 0 2
75721: PUSH
75722: LD_INT 1
75724: PUSH
75725: LD_INT 2
75727: PUSH
75728: LD_INT 3
75730: PUSH
75731: LD_INT 4
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: IN
75740: NOT
75741: OR
75742: IFFALSE 75746
// exit ;
75744: GO 75838
// tmp := [ ] ;
75746: LD_ADDR_VAR 0 5
75750: PUSH
75751: EMPTY
75752: ST_TO_ADDR
// for i in units do
75753: LD_ADDR_VAR 0 4
75757: PUSH
75758: LD_VAR 0 1
75762: PUSH
75763: FOR_IN
75764: IFFALSE 75807
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75766: LD_ADDR_VAR 0 5
75770: PUSH
75771: LD_VAR 0 5
75775: PPUSH
75776: LD_VAR 0 5
75780: PUSH
75781: LD_INT 1
75783: PLUS
75784: PPUSH
75785: LD_VAR 0 4
75789: PPUSH
75790: LD_VAR 0 2
75794: PPUSH
75795: CALL_OW 259
75799: PPUSH
75800: CALL_OW 2
75804: ST_TO_ADDR
75805: GO 75763
75807: POP
75808: POP
// if not tmp then
75809: LD_VAR 0 5
75813: NOT
75814: IFFALSE 75818
// exit ;
75816: GO 75838
// result := SortListByListDesc ( units , tmp ) ;
75818: LD_ADDR_VAR 0 3
75822: PUSH
75823: LD_VAR 0 1
75827: PPUSH
75828: LD_VAR 0 5
75832: PPUSH
75833: CALL_OW 77
75837: ST_TO_ADDR
// end ;
75838: LD_VAR 0 3
75842: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75843: LD_INT 0
75845: PPUSH
75846: PPUSH
75847: PPUSH
// result := false ;
75848: LD_ADDR_VAR 0 3
75852: PUSH
75853: LD_INT 0
75855: ST_TO_ADDR
// x := GetX ( building ) ;
75856: LD_ADDR_VAR 0 4
75860: PUSH
75861: LD_VAR 0 2
75865: PPUSH
75866: CALL_OW 250
75870: ST_TO_ADDR
// y := GetY ( building ) ;
75871: LD_ADDR_VAR 0 5
75875: PUSH
75876: LD_VAR 0 2
75880: PPUSH
75881: CALL_OW 251
75885: ST_TO_ADDR
// if not building or not x or not y then
75886: LD_VAR 0 2
75890: NOT
75891: PUSH
75892: LD_VAR 0 4
75896: NOT
75897: OR
75898: PUSH
75899: LD_VAR 0 5
75903: NOT
75904: OR
75905: IFFALSE 75909
// exit ;
75907: GO 76001
// if GetTaskList ( unit ) then
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 437
75918: IFFALSE 76001
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75920: LD_STRING e
75922: PUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: CALL_OW 437
75932: PUSH
75933: LD_INT 1
75935: ARRAY
75936: PUSH
75937: LD_INT 1
75939: ARRAY
75940: EQUAL
75941: PUSH
75942: LD_VAR 0 4
75946: PUSH
75947: LD_VAR 0 1
75951: PPUSH
75952: CALL_OW 437
75956: PUSH
75957: LD_INT 1
75959: ARRAY
75960: PUSH
75961: LD_INT 2
75963: ARRAY
75964: EQUAL
75965: AND
75966: PUSH
75967: LD_VAR 0 5
75971: PUSH
75972: LD_VAR 0 1
75976: PPUSH
75977: CALL_OW 437
75981: PUSH
75982: LD_INT 1
75984: ARRAY
75985: PUSH
75986: LD_INT 3
75988: ARRAY
75989: EQUAL
75990: AND
75991: IFFALSE 76001
// result := true end ;
75993: LD_ADDR_VAR 0 3
75997: PUSH
75998: LD_INT 1
76000: ST_TO_ADDR
// end ;
76001: LD_VAR 0 3
76005: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76006: LD_INT 0
76008: PPUSH
// result := false ;
76009: LD_ADDR_VAR 0 4
76013: PUSH
76014: LD_INT 0
76016: ST_TO_ADDR
// if GetTaskList ( unit ) then
76017: LD_VAR 0 1
76021: PPUSH
76022: CALL_OW 437
76026: IFFALSE 76109
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76028: LD_STRING M
76030: PUSH
76031: LD_VAR 0 1
76035: PPUSH
76036: CALL_OW 437
76040: PUSH
76041: LD_INT 1
76043: ARRAY
76044: PUSH
76045: LD_INT 1
76047: ARRAY
76048: EQUAL
76049: PUSH
76050: LD_VAR 0 2
76054: PUSH
76055: LD_VAR 0 1
76059: PPUSH
76060: CALL_OW 437
76064: PUSH
76065: LD_INT 1
76067: ARRAY
76068: PUSH
76069: LD_INT 2
76071: ARRAY
76072: EQUAL
76073: AND
76074: PUSH
76075: LD_VAR 0 3
76079: PUSH
76080: LD_VAR 0 1
76084: PPUSH
76085: CALL_OW 437
76089: PUSH
76090: LD_INT 1
76092: ARRAY
76093: PUSH
76094: LD_INT 3
76096: ARRAY
76097: EQUAL
76098: AND
76099: IFFALSE 76109
// result := true ;
76101: LD_ADDR_VAR 0 4
76105: PUSH
76106: LD_INT 1
76108: ST_TO_ADDR
// end ; end ;
76109: LD_VAR 0 4
76113: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76114: LD_INT 0
76116: PPUSH
76117: PPUSH
76118: PPUSH
76119: PPUSH
// if not unit or not area then
76120: LD_VAR 0 1
76124: NOT
76125: PUSH
76126: LD_VAR 0 2
76130: NOT
76131: OR
76132: IFFALSE 76136
// exit ;
76134: GO 76300
// tmp := AreaToList ( area , i ) ;
76136: LD_ADDR_VAR 0 6
76140: PUSH
76141: LD_VAR 0 2
76145: PPUSH
76146: LD_VAR 0 5
76150: PPUSH
76151: CALL_OW 517
76155: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76156: LD_ADDR_VAR 0 5
76160: PUSH
76161: DOUBLE
76162: LD_INT 1
76164: DEC
76165: ST_TO_ADDR
76166: LD_VAR 0 6
76170: PUSH
76171: LD_INT 1
76173: ARRAY
76174: PUSH
76175: FOR_TO
76176: IFFALSE 76298
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76178: LD_ADDR_VAR 0 7
76182: PUSH
76183: LD_VAR 0 6
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PUSH
76192: LD_VAR 0 5
76196: ARRAY
76197: PUSH
76198: LD_VAR 0 6
76202: PUSH
76203: LD_INT 2
76205: ARRAY
76206: PUSH
76207: LD_VAR 0 5
76211: ARRAY
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76217: LD_VAR 0 7
76221: PUSH
76222: LD_INT 1
76224: ARRAY
76225: PPUSH
76226: LD_VAR 0 7
76230: PUSH
76231: LD_INT 2
76233: ARRAY
76234: PPUSH
76235: CALL_OW 428
76239: PUSH
76240: LD_INT 0
76242: EQUAL
76243: IFFALSE 76296
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76245: LD_VAR 0 1
76249: PPUSH
76250: LD_VAR 0 7
76254: PUSH
76255: LD_INT 1
76257: ARRAY
76258: PPUSH
76259: LD_VAR 0 7
76263: PUSH
76264: LD_INT 2
76266: ARRAY
76267: PPUSH
76268: LD_VAR 0 3
76272: PPUSH
76273: CALL_OW 48
// result := IsPlaced ( unit ) ;
76277: LD_ADDR_VAR 0 4
76281: PUSH
76282: LD_VAR 0 1
76286: PPUSH
76287: CALL_OW 305
76291: ST_TO_ADDR
// exit ;
76292: POP
76293: POP
76294: GO 76300
// end ; end ;
76296: GO 76175
76298: POP
76299: POP
// end ;
76300: LD_VAR 0 4
76304: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76305: LD_INT 0
76307: PPUSH
76308: PPUSH
76309: PPUSH
// if not side or side > 8 then
76310: LD_VAR 0 1
76314: NOT
76315: PUSH
76316: LD_VAR 0 1
76320: PUSH
76321: LD_INT 8
76323: GREATER
76324: OR
76325: IFFALSE 76329
// exit ;
76327: GO 76516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76329: LD_ADDR_VAR 0 4
76333: PUSH
76334: LD_INT 22
76336: PUSH
76337: LD_VAR 0 1
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 21
76348: PUSH
76349: LD_INT 3
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PPUSH
76360: CALL_OW 69
76364: ST_TO_ADDR
// if not tmp then
76365: LD_VAR 0 4
76369: NOT
76370: IFFALSE 76374
// exit ;
76372: GO 76516
// enable_addtolog := true ;
76374: LD_ADDR_OWVAR 81
76378: PUSH
76379: LD_INT 1
76381: ST_TO_ADDR
// AddToLog ( [ ) ;
76382: LD_STRING [
76384: PPUSH
76385: CALL_OW 561
// for i in tmp do
76389: LD_ADDR_VAR 0 3
76393: PUSH
76394: LD_VAR 0 4
76398: PUSH
76399: FOR_IN
76400: IFFALSE 76507
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76402: LD_STRING [
76404: PUSH
76405: LD_VAR 0 3
76409: PPUSH
76410: CALL_OW 266
76414: STR
76415: PUSH
76416: LD_STRING , 
76418: STR
76419: PUSH
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 250
76429: STR
76430: PUSH
76431: LD_STRING , 
76433: STR
76434: PUSH
76435: LD_VAR 0 3
76439: PPUSH
76440: CALL_OW 251
76444: STR
76445: PUSH
76446: LD_STRING , 
76448: STR
76449: PUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: CALL_OW 254
76459: STR
76460: PUSH
76461: LD_STRING , 
76463: STR
76464: PUSH
76465: LD_VAR 0 3
76469: PPUSH
76470: LD_INT 1
76472: PPUSH
76473: CALL_OW 268
76477: STR
76478: PUSH
76479: LD_STRING , 
76481: STR
76482: PUSH
76483: LD_VAR 0 3
76487: PPUSH
76488: LD_INT 2
76490: PPUSH
76491: CALL_OW 268
76495: STR
76496: PUSH
76497: LD_STRING ],
76499: STR
76500: PPUSH
76501: CALL_OW 561
// end ;
76505: GO 76399
76507: POP
76508: POP
// AddToLog ( ]; ) ;
76509: LD_STRING ];
76511: PPUSH
76512: CALL_OW 561
// end ;
76516: LD_VAR 0 2
76520: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76521: LD_INT 0
76523: PPUSH
76524: PPUSH
76525: PPUSH
76526: PPUSH
76527: PPUSH
// if not area or not rate or not max then
76528: LD_VAR 0 1
76532: NOT
76533: PUSH
76534: LD_VAR 0 2
76538: NOT
76539: OR
76540: PUSH
76541: LD_VAR 0 4
76545: NOT
76546: OR
76547: IFFALSE 76551
// exit ;
76549: GO 76740
// while 1 do
76551: LD_INT 1
76553: IFFALSE 76740
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76555: LD_ADDR_VAR 0 9
76559: PUSH
76560: LD_VAR 0 1
76564: PPUSH
76565: LD_INT 1
76567: PPUSH
76568: CALL_OW 287
76572: PUSH
76573: LD_INT 10
76575: MUL
76576: ST_TO_ADDR
// r := rate / 10 ;
76577: LD_ADDR_VAR 0 7
76581: PUSH
76582: LD_VAR 0 2
76586: PUSH
76587: LD_INT 10
76589: DIVREAL
76590: ST_TO_ADDR
// time := 1 1$00 ;
76591: LD_ADDR_VAR 0 8
76595: PUSH
76596: LD_INT 2100
76598: ST_TO_ADDR
// if amount < min then
76599: LD_VAR 0 9
76603: PUSH
76604: LD_VAR 0 3
76608: LESS
76609: IFFALSE 76627
// r := r * 2 else
76611: LD_ADDR_VAR 0 7
76615: PUSH
76616: LD_VAR 0 7
76620: PUSH
76621: LD_INT 2
76623: MUL
76624: ST_TO_ADDR
76625: GO 76653
// if amount > max then
76627: LD_VAR 0 9
76631: PUSH
76632: LD_VAR 0 4
76636: GREATER
76637: IFFALSE 76653
// r := r / 2 ;
76639: LD_ADDR_VAR 0 7
76643: PUSH
76644: LD_VAR 0 7
76648: PUSH
76649: LD_INT 2
76651: DIVREAL
76652: ST_TO_ADDR
// time := time / r ;
76653: LD_ADDR_VAR 0 8
76657: PUSH
76658: LD_VAR 0 8
76662: PUSH
76663: LD_VAR 0 7
76667: DIVREAL
76668: ST_TO_ADDR
// if time < 0 then
76669: LD_VAR 0 8
76673: PUSH
76674: LD_INT 0
76676: LESS
76677: IFFALSE 76694
// time := time * - 1 ;
76679: LD_ADDR_VAR 0 8
76683: PUSH
76684: LD_VAR 0 8
76688: PUSH
76689: LD_INT 1
76691: NEG
76692: MUL
76693: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76694: LD_VAR 0 8
76698: PUSH
76699: LD_INT 35
76701: PPUSH
76702: LD_INT 875
76704: PPUSH
76705: CALL_OW 12
76709: PLUS
76710: PPUSH
76711: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76715: LD_INT 1
76717: PPUSH
76718: LD_INT 5
76720: PPUSH
76721: CALL_OW 12
76725: PPUSH
76726: LD_VAR 0 1
76730: PPUSH
76731: LD_INT 1
76733: PPUSH
76734: CALL_OW 55
// end ;
76738: GO 76551
// end ;
76740: LD_VAR 0 5
76744: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76745: LD_INT 0
76747: PPUSH
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
76752: PPUSH
76753: PPUSH
76754: PPUSH
// if not turrets or not factories then
76755: LD_VAR 0 1
76759: NOT
76760: PUSH
76761: LD_VAR 0 2
76765: NOT
76766: OR
76767: IFFALSE 76771
// exit ;
76769: GO 77078
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76771: LD_ADDR_VAR 0 10
76775: PUSH
76776: LD_INT 5
76778: PUSH
76779: LD_INT 6
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 2
76788: PUSH
76789: LD_INT 4
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: LD_INT 3
76798: PUSH
76799: LD_INT 5
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 24
76813: PUSH
76814: LD_INT 25
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 23
76823: PUSH
76824: LD_INT 27
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 42
76837: PUSH
76838: LD_INT 43
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 44
76847: PUSH
76848: LD_INT 46
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 45
76857: PUSH
76858: LD_INT 47
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: LIST
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: LIST
76874: ST_TO_ADDR
// result := [ ] ;
76875: LD_ADDR_VAR 0 3
76879: PUSH
76880: EMPTY
76881: ST_TO_ADDR
// for i in turrets do
76882: LD_ADDR_VAR 0 4
76886: PUSH
76887: LD_VAR 0 1
76891: PUSH
76892: FOR_IN
76893: IFFALSE 77076
// begin nat := GetNation ( i ) ;
76895: LD_ADDR_VAR 0 7
76899: PUSH
76900: LD_VAR 0 4
76904: PPUSH
76905: CALL_OW 248
76909: ST_TO_ADDR
// weapon := 0 ;
76910: LD_ADDR_VAR 0 8
76914: PUSH
76915: LD_INT 0
76917: ST_TO_ADDR
// if not nat then
76918: LD_VAR 0 7
76922: NOT
76923: IFFALSE 76927
// continue ;
76925: GO 76892
// for j in list [ nat ] do
76927: LD_ADDR_VAR 0 5
76931: PUSH
76932: LD_VAR 0 10
76936: PUSH
76937: LD_VAR 0 7
76941: ARRAY
76942: PUSH
76943: FOR_IN
76944: IFFALSE 76985
// if GetBWeapon ( i ) = j [ 1 ] then
76946: LD_VAR 0 4
76950: PPUSH
76951: CALL_OW 269
76955: PUSH
76956: LD_VAR 0 5
76960: PUSH
76961: LD_INT 1
76963: ARRAY
76964: EQUAL
76965: IFFALSE 76983
// begin weapon := j [ 2 ] ;
76967: LD_ADDR_VAR 0 8
76971: PUSH
76972: LD_VAR 0 5
76976: PUSH
76977: LD_INT 2
76979: ARRAY
76980: ST_TO_ADDR
// break ;
76981: GO 76985
// end ;
76983: GO 76943
76985: POP
76986: POP
// if not weapon then
76987: LD_VAR 0 8
76991: NOT
76992: IFFALSE 76996
// continue ;
76994: GO 76892
// for k in factories do
76996: LD_ADDR_VAR 0 6
77000: PUSH
77001: LD_VAR 0 2
77005: PUSH
77006: FOR_IN
77007: IFFALSE 77072
// begin weapons := AvailableWeaponList ( k ) ;
77009: LD_ADDR_VAR 0 9
77013: PUSH
77014: LD_VAR 0 6
77018: PPUSH
77019: CALL_OW 478
77023: ST_TO_ADDR
// if not weapons then
77024: LD_VAR 0 9
77028: NOT
77029: IFFALSE 77033
// continue ;
77031: GO 77006
// if weapon in weapons then
77033: LD_VAR 0 8
77037: PUSH
77038: LD_VAR 0 9
77042: IN
77043: IFFALSE 77070
// begin result := [ i , weapon ] ;
77045: LD_ADDR_VAR 0 3
77049: PUSH
77050: LD_VAR 0 4
77054: PUSH
77055: LD_VAR 0 8
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: ST_TO_ADDR
// exit ;
77064: POP
77065: POP
77066: POP
77067: POP
77068: GO 77078
// end ; end ;
77070: GO 77006
77072: POP
77073: POP
// end ;
77074: GO 76892
77076: POP
77077: POP
// end ;
77078: LD_VAR 0 3
77082: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77083: LD_INT 0
77085: PPUSH
// if not side or side > 8 then
77086: LD_VAR 0 3
77090: NOT
77091: PUSH
77092: LD_VAR 0 3
77096: PUSH
77097: LD_INT 8
77099: GREATER
77100: OR
77101: IFFALSE 77105
// exit ;
77103: GO 77164
// if not range then
77105: LD_VAR 0 4
77109: NOT
77110: IFFALSE 77121
// range := - 12 ;
77112: LD_ADDR_VAR 0 4
77116: PUSH
77117: LD_INT 12
77119: NEG
77120: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77121: LD_VAR 0 1
77125: PPUSH
77126: LD_VAR 0 2
77130: PPUSH
77131: LD_VAR 0 3
77135: PPUSH
77136: LD_VAR 0 4
77140: PPUSH
77141: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77145: LD_VAR 0 1
77149: PPUSH
77150: LD_VAR 0 2
77154: PPUSH
77155: LD_VAR 0 3
77159: PPUSH
77160: CALL_OW 331
// end ;
77164: LD_VAR 0 5
77168: RET
// export function Video ( mode ) ; begin
77169: LD_INT 0
77171: PPUSH
// ingame_video = mode ;
77172: LD_ADDR_OWVAR 52
77176: PUSH
77177: LD_VAR 0 1
77181: ST_TO_ADDR
// interface_hidden = mode ;
77182: LD_ADDR_OWVAR 54
77186: PUSH
77187: LD_VAR 0 1
77191: ST_TO_ADDR
// end ;
77192: LD_VAR 0 2
77196: RET
// export function Join ( array , element ) ; begin
77197: LD_INT 0
77199: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77200: LD_ADDR_VAR 0 3
77204: PUSH
77205: LD_VAR 0 1
77209: PPUSH
77210: LD_VAR 0 1
77214: PUSH
77215: LD_INT 1
77217: PLUS
77218: PPUSH
77219: LD_VAR 0 2
77223: PPUSH
77224: CALL_OW 1
77228: ST_TO_ADDR
// end ;
77229: LD_VAR 0 3
77233: RET
// export function JoinUnion ( array , element ) ; begin
77234: LD_INT 0
77236: PPUSH
// result := array union element ;
77237: LD_ADDR_VAR 0 3
77241: PUSH
77242: LD_VAR 0 1
77246: PUSH
77247: LD_VAR 0 2
77251: UNION
77252: ST_TO_ADDR
// end ;
77253: LD_VAR 0 3
77257: RET
// export function GetBehemoths ( side ) ; begin
77258: LD_INT 0
77260: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77261: LD_ADDR_VAR 0 2
77265: PUSH
77266: LD_INT 22
77268: PUSH
77269: LD_VAR 0 1
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PUSH
77278: LD_INT 31
77280: PUSH
77281: LD_INT 25
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PPUSH
77292: CALL_OW 69
77296: ST_TO_ADDR
// end ;
77297: LD_VAR 0 2
77301: RET
// export function Shuffle ( array ) ; var i , index ; begin
77302: LD_INT 0
77304: PPUSH
77305: PPUSH
77306: PPUSH
// result := [ ] ;
77307: LD_ADDR_VAR 0 2
77311: PUSH
77312: EMPTY
77313: ST_TO_ADDR
// if not array then
77314: LD_VAR 0 1
77318: NOT
77319: IFFALSE 77323
// exit ;
77321: GO 77422
// Randomize ;
77323: CALL_OW 10
// for i = array downto 1 do
77327: LD_ADDR_VAR 0 3
77331: PUSH
77332: DOUBLE
77333: LD_VAR 0 1
77337: INC
77338: ST_TO_ADDR
77339: LD_INT 1
77341: PUSH
77342: FOR_DOWNTO
77343: IFFALSE 77420
// begin index := rand ( 1 , array ) ;
77345: LD_ADDR_VAR 0 4
77349: PUSH
77350: LD_INT 1
77352: PPUSH
77353: LD_VAR 0 1
77357: PPUSH
77358: CALL_OW 12
77362: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77363: LD_ADDR_VAR 0 2
77367: PUSH
77368: LD_VAR 0 2
77372: PPUSH
77373: LD_VAR 0 2
77377: PUSH
77378: LD_INT 1
77380: PLUS
77381: PPUSH
77382: LD_VAR 0 1
77386: PUSH
77387: LD_VAR 0 4
77391: ARRAY
77392: PPUSH
77393: CALL_OW 2
77397: ST_TO_ADDR
// array := Delete ( array , index ) ;
77398: LD_ADDR_VAR 0 1
77402: PUSH
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 4
77412: PPUSH
77413: CALL_OW 3
77417: ST_TO_ADDR
// end ;
77418: GO 77342
77420: POP
77421: POP
// end ;
77422: LD_VAR 0 2
77426: RET
// export function GetBaseMaterials ( base ) ; begin
77427: LD_INT 0
77429: PPUSH
// result := [ 0 , 0 , 0 ] ;
77430: LD_ADDR_VAR 0 2
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: LD_INT 0
77440: PUSH
77441: LD_INT 0
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: LIST
77448: ST_TO_ADDR
// if not base then
77449: LD_VAR 0 1
77453: NOT
77454: IFFALSE 77458
// exit ;
77456: GO 77507
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77458: LD_ADDR_VAR 0 2
77462: PUSH
77463: LD_VAR 0 1
77467: PPUSH
77468: LD_INT 1
77470: PPUSH
77471: CALL_OW 275
77475: PUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: LD_INT 2
77483: PPUSH
77484: CALL_OW 275
77488: PUSH
77489: LD_VAR 0 1
77493: PPUSH
77494: LD_INT 3
77496: PPUSH
77497: CALL_OW 275
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: LIST
77506: ST_TO_ADDR
// end ;
77507: LD_VAR 0 2
77511: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77512: LD_INT 0
77514: PPUSH
77515: PPUSH
// result := array ;
77516: LD_ADDR_VAR 0 3
77520: PUSH
77521: LD_VAR 0 1
77525: ST_TO_ADDR
// if size >= result then
77526: LD_VAR 0 2
77530: PUSH
77531: LD_VAR 0 3
77535: GREATEREQUAL
77536: IFFALSE 77540
// exit ;
77538: GO 77590
// if size then
77540: LD_VAR 0 2
77544: IFFALSE 77590
// for i := array downto size do
77546: LD_ADDR_VAR 0 4
77550: PUSH
77551: DOUBLE
77552: LD_VAR 0 1
77556: INC
77557: ST_TO_ADDR
77558: LD_VAR 0 2
77562: PUSH
77563: FOR_DOWNTO
77564: IFFALSE 77588
// result := Delete ( result , result ) ;
77566: LD_ADDR_VAR 0 3
77570: PUSH
77571: LD_VAR 0 3
77575: PPUSH
77576: LD_VAR 0 3
77580: PPUSH
77581: CALL_OW 3
77585: ST_TO_ADDR
77586: GO 77563
77588: POP
77589: POP
// end ;
77590: LD_VAR 0 3
77594: RET
// export function ComExit ( unit ) ; var tmp ; begin
77595: LD_INT 0
77597: PPUSH
77598: PPUSH
// if not IsInUnit ( unit ) then
77599: LD_VAR 0 1
77603: PPUSH
77604: CALL_OW 310
77608: NOT
77609: IFFALSE 77613
// exit ;
77611: GO 77673
// tmp := IsInUnit ( unit ) ;
77613: LD_ADDR_VAR 0 3
77617: PUSH
77618: LD_VAR 0 1
77622: PPUSH
77623: CALL_OW 310
77627: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77628: LD_VAR 0 3
77632: PPUSH
77633: CALL_OW 247
77637: PUSH
77638: LD_INT 2
77640: EQUAL
77641: IFFALSE 77654
// ComExitVehicle ( unit ) else
77643: LD_VAR 0 1
77647: PPUSH
77648: CALL_OW 121
77652: GO 77663
// ComExitBuilding ( unit ) ;
77654: LD_VAR 0 1
77658: PPUSH
77659: CALL_OW 122
// result := tmp ;
77663: LD_ADDR_VAR 0 2
77667: PUSH
77668: LD_VAR 0 3
77672: ST_TO_ADDR
// end ;
77673: LD_VAR 0 2
77677: RET
// export function ComExitAll ( units ) ; var i ; begin
77678: LD_INT 0
77680: PPUSH
77681: PPUSH
// if not units then
77682: LD_VAR 0 1
77686: NOT
77687: IFFALSE 77691
// exit ;
77689: GO 77717
// for i in units do
77691: LD_ADDR_VAR 0 3
77695: PUSH
77696: LD_VAR 0 1
77700: PUSH
77701: FOR_IN
77702: IFFALSE 77715
// ComExit ( i ) ;
77704: LD_VAR 0 3
77708: PPUSH
77709: CALL 77595 0 1
77713: GO 77701
77715: POP
77716: POP
// end ;
77717: LD_VAR 0 2
77721: RET
// export function ResetHc ; begin
77722: LD_INT 0
77724: PPUSH
// InitHc ;
77725: CALL_OW 19
// hc_importance := 0 ;
77729: LD_ADDR_OWVAR 32
77733: PUSH
77734: LD_INT 0
77736: ST_TO_ADDR
// end ;
77737: LD_VAR 0 1
77741: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77742: LD_INT 0
77744: PPUSH
77745: PPUSH
77746: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77747: LD_ADDR_VAR 0 6
77751: PUSH
77752: LD_VAR 0 1
77756: PUSH
77757: LD_VAR 0 3
77761: PLUS
77762: PUSH
77763: LD_INT 2
77765: DIV
77766: ST_TO_ADDR
// if _x < 0 then
77767: LD_VAR 0 6
77771: PUSH
77772: LD_INT 0
77774: LESS
77775: IFFALSE 77792
// _x := _x * - 1 ;
77777: LD_ADDR_VAR 0 6
77781: PUSH
77782: LD_VAR 0 6
77786: PUSH
77787: LD_INT 1
77789: NEG
77790: MUL
77791: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77792: LD_ADDR_VAR 0 7
77796: PUSH
77797: LD_VAR 0 2
77801: PUSH
77802: LD_VAR 0 4
77806: PLUS
77807: PUSH
77808: LD_INT 2
77810: DIV
77811: ST_TO_ADDR
// if _y < 0 then
77812: LD_VAR 0 7
77816: PUSH
77817: LD_INT 0
77819: LESS
77820: IFFALSE 77837
// _y := _y * - 1 ;
77822: LD_ADDR_VAR 0 7
77826: PUSH
77827: LD_VAR 0 7
77831: PUSH
77832: LD_INT 1
77834: NEG
77835: MUL
77836: ST_TO_ADDR
// result := [ _x , _y ] ;
77837: LD_ADDR_VAR 0 5
77841: PUSH
77842: LD_VAR 0 6
77846: PUSH
77847: LD_VAR 0 7
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: ST_TO_ADDR
// end ;
77856: LD_VAR 0 5
77860: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
// task := GetTaskList ( unit ) ;
77867: LD_ADDR_VAR 0 7
77871: PUSH
77872: LD_VAR 0 1
77876: PPUSH
77877: CALL_OW 437
77881: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77882: LD_VAR 0 7
77886: NOT
77887: PUSH
77888: LD_VAR 0 1
77892: PPUSH
77893: LD_VAR 0 2
77897: PPUSH
77898: CALL_OW 308
77902: NOT
77903: AND
77904: IFFALSE 77908
// exit ;
77906: GO 78026
// if IsInArea ( unit , area ) then
77908: LD_VAR 0 1
77912: PPUSH
77913: LD_VAR 0 2
77917: PPUSH
77918: CALL_OW 308
77922: IFFALSE 77940
// begin ComMoveToArea ( unit , goAway ) ;
77924: LD_VAR 0 1
77928: PPUSH
77929: LD_VAR 0 3
77933: PPUSH
77934: CALL_OW 113
// exit ;
77938: GO 78026
// end ; if task [ 1 ] [ 1 ] <> M then
77940: LD_VAR 0 7
77944: PUSH
77945: LD_INT 1
77947: ARRAY
77948: PUSH
77949: LD_INT 1
77951: ARRAY
77952: PUSH
77953: LD_STRING M
77955: NONEQUAL
77956: IFFALSE 77960
// exit ;
77958: GO 78026
// x := task [ 1 ] [ 2 ] ;
77960: LD_ADDR_VAR 0 5
77964: PUSH
77965: LD_VAR 0 7
77969: PUSH
77970: LD_INT 1
77972: ARRAY
77973: PUSH
77974: LD_INT 2
77976: ARRAY
77977: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77978: LD_ADDR_VAR 0 6
77982: PUSH
77983: LD_VAR 0 7
77987: PUSH
77988: LD_INT 1
77990: ARRAY
77991: PUSH
77992: LD_INT 3
77994: ARRAY
77995: ST_TO_ADDR
// if InArea ( x , y , area ) then
77996: LD_VAR 0 5
78000: PPUSH
78001: LD_VAR 0 6
78005: PPUSH
78006: LD_VAR 0 2
78010: PPUSH
78011: CALL_OW 309
78015: IFFALSE 78026
// ComStop ( unit ) ;
78017: LD_VAR 0 1
78021: PPUSH
78022: CALL_OW 141
// end ;
78026: LD_VAR 0 4
78030: RET
// export function Abs ( value ) ; begin
78031: LD_INT 0
78033: PPUSH
// result := value ;
78034: LD_ADDR_VAR 0 2
78038: PUSH
78039: LD_VAR 0 1
78043: ST_TO_ADDR
// if value < 0 then
78044: LD_VAR 0 1
78048: PUSH
78049: LD_INT 0
78051: LESS
78052: IFFALSE 78069
// result := value * - 1 ;
78054: LD_ADDR_VAR 0 2
78058: PUSH
78059: LD_VAR 0 1
78063: PUSH
78064: LD_INT 1
78066: NEG
78067: MUL
78068: ST_TO_ADDR
// end ;
78069: LD_VAR 0 2
78073: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78074: LD_INT 0
78076: PPUSH
78077: PPUSH
78078: PPUSH
78079: PPUSH
78080: PPUSH
78081: PPUSH
78082: PPUSH
78083: PPUSH
// if not unit or not building then
78084: LD_VAR 0 1
78088: NOT
78089: PUSH
78090: LD_VAR 0 2
78094: NOT
78095: OR
78096: IFFALSE 78100
// exit ;
78098: GO 78326
// x := GetX ( building ) ;
78100: LD_ADDR_VAR 0 4
78104: PUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: CALL_OW 250
78114: ST_TO_ADDR
// y := GetY ( building ) ;
78115: LD_ADDR_VAR 0 6
78119: PUSH
78120: LD_VAR 0 2
78124: PPUSH
78125: CALL_OW 251
78129: ST_TO_ADDR
// d := GetDir ( building ) ;
78130: LD_ADDR_VAR 0 8
78134: PUSH
78135: LD_VAR 0 2
78139: PPUSH
78140: CALL_OW 254
78144: ST_TO_ADDR
// r := 4 ;
78145: LD_ADDR_VAR 0 9
78149: PUSH
78150: LD_INT 4
78152: ST_TO_ADDR
// for i := 1 to 5 do
78153: LD_ADDR_VAR 0 10
78157: PUSH
78158: DOUBLE
78159: LD_INT 1
78161: DEC
78162: ST_TO_ADDR
78163: LD_INT 5
78165: PUSH
78166: FOR_TO
78167: IFFALSE 78324
// begin _x := ShiftX ( x , d , r + i ) ;
78169: LD_ADDR_VAR 0 5
78173: PUSH
78174: LD_VAR 0 4
78178: PPUSH
78179: LD_VAR 0 8
78183: PPUSH
78184: LD_VAR 0 9
78188: PUSH
78189: LD_VAR 0 10
78193: PLUS
78194: PPUSH
78195: CALL_OW 272
78199: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78200: LD_ADDR_VAR 0 7
78204: PUSH
78205: LD_VAR 0 6
78209: PPUSH
78210: LD_VAR 0 8
78214: PPUSH
78215: LD_VAR 0 9
78219: PUSH
78220: LD_VAR 0 10
78224: PLUS
78225: PPUSH
78226: CALL_OW 273
78230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78231: LD_VAR 0 5
78235: PPUSH
78236: LD_VAR 0 7
78240: PPUSH
78241: CALL_OW 488
78245: PUSH
78246: LD_VAR 0 5
78250: PPUSH
78251: LD_VAR 0 7
78255: PPUSH
78256: CALL_OW 428
78260: PPUSH
78261: CALL_OW 247
78265: PUSH
78266: LD_INT 3
78268: PUSH
78269: LD_INT 2
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: IN
78276: NOT
78277: AND
78278: IFFALSE 78322
// begin ComMoveXY ( unit , _x , _y ) ;
78280: LD_VAR 0 1
78284: PPUSH
78285: LD_VAR 0 5
78289: PPUSH
78290: LD_VAR 0 7
78294: PPUSH
78295: CALL_OW 111
// result := [ _x , _y ] ;
78299: LD_ADDR_VAR 0 3
78303: PUSH
78304: LD_VAR 0 5
78308: PUSH
78309: LD_VAR 0 7
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: ST_TO_ADDR
// exit ;
78318: POP
78319: POP
78320: GO 78326
// end ; end ;
78322: GO 78166
78324: POP
78325: POP
// end ;
78326: LD_VAR 0 3
78330: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78331: LD_INT 0
78333: PPUSH
78334: PPUSH
78335: PPUSH
// result := 0 ;
78336: LD_ADDR_VAR 0 3
78340: PUSH
78341: LD_INT 0
78343: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78344: LD_VAR 0 1
78348: PUSH
78349: LD_INT 0
78351: LESS
78352: PUSH
78353: LD_VAR 0 1
78357: PUSH
78358: LD_INT 8
78360: GREATER
78361: OR
78362: PUSH
78363: LD_VAR 0 2
78367: PUSH
78368: LD_INT 0
78370: LESS
78371: OR
78372: PUSH
78373: LD_VAR 0 2
78377: PUSH
78378: LD_INT 8
78380: GREATER
78381: OR
78382: IFFALSE 78386
// exit ;
78384: GO 78461
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78386: LD_ADDR_VAR 0 4
78390: PUSH
78391: LD_INT 22
78393: PUSH
78394: LD_VAR 0 2
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PPUSH
78403: CALL_OW 69
78407: PUSH
78408: FOR_IN
78409: IFFALSE 78459
// begin un := UnitShoot ( i ) ;
78411: LD_ADDR_VAR 0 5
78415: PUSH
78416: LD_VAR 0 4
78420: PPUSH
78421: CALL_OW 504
78425: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78426: LD_VAR 0 5
78430: PPUSH
78431: CALL_OW 255
78435: PUSH
78436: LD_VAR 0 1
78440: EQUAL
78441: IFFALSE 78457
// begin result := un ;
78443: LD_ADDR_VAR 0 3
78447: PUSH
78448: LD_VAR 0 5
78452: ST_TO_ADDR
// exit ;
78453: POP
78454: POP
78455: GO 78461
// end ; end ;
78457: GO 78408
78459: POP
78460: POP
// end ;
78461: LD_VAR 0 3
78465: RET
// export function GetCargoBay ( units ) ; begin
78466: LD_INT 0
78468: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78469: LD_ADDR_VAR 0 2
78473: PUSH
78474: LD_VAR 0 1
78478: PPUSH
78479: LD_INT 2
78481: PUSH
78482: LD_INT 34
78484: PUSH
78485: LD_INT 12
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 34
78494: PUSH
78495: LD_INT 51
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: LD_INT 34
78504: PUSH
78505: LD_INT 32
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: LD_INT 34
78514: PUSH
78515: LD_EXP 49
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: PPUSH
78531: CALL_OW 72
78535: ST_TO_ADDR
// end ;
78536: LD_VAR 0 2
78540: RET
// export function Negate ( value ) ; begin
78541: LD_INT 0
78543: PPUSH
// result := not value ;
78544: LD_ADDR_VAR 0 2
78548: PUSH
78549: LD_VAR 0 1
78553: NOT
78554: ST_TO_ADDR
// end ;
78555: LD_VAR 0 2
78559: RET
// export function Inc ( value ) ; begin
78560: LD_INT 0
78562: PPUSH
// result := value + 1 ;
78563: LD_ADDR_VAR 0 2
78567: PUSH
78568: LD_VAR 0 1
78572: PUSH
78573: LD_INT 1
78575: PLUS
78576: ST_TO_ADDR
// end ;
78577: LD_VAR 0 2
78581: RET
// export function Dec ( value ) ; begin
78582: LD_INT 0
78584: PPUSH
// result := value - 1 ;
78585: LD_ADDR_VAR 0 2
78589: PUSH
78590: LD_VAR 0 1
78594: PUSH
78595: LD_INT 1
78597: MINUS
78598: ST_TO_ADDR
// end ;
78599: LD_VAR 0 2
78603: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78604: LD_INT 0
78606: PPUSH
78607: PPUSH
78608: PPUSH
78609: PPUSH
78610: PPUSH
78611: PPUSH
78612: PPUSH
78613: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78614: LD_VAR 0 1
78618: PPUSH
78619: LD_VAR 0 2
78623: PPUSH
78624: CALL_OW 488
78628: NOT
78629: PUSH
78630: LD_VAR 0 3
78634: PPUSH
78635: LD_VAR 0 4
78639: PPUSH
78640: CALL_OW 488
78644: NOT
78645: OR
78646: IFFALSE 78659
// begin result := - 1 ;
78648: LD_ADDR_VAR 0 5
78652: PUSH
78653: LD_INT 1
78655: NEG
78656: ST_TO_ADDR
// exit ;
78657: GO 78894
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78659: LD_ADDR_VAR 0 12
78663: PUSH
78664: LD_VAR 0 1
78668: PPUSH
78669: LD_VAR 0 2
78673: PPUSH
78674: LD_VAR 0 3
78678: PPUSH
78679: LD_VAR 0 4
78683: PPUSH
78684: CALL 77742 0 4
78688: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78689: LD_ADDR_VAR 0 11
78693: PUSH
78694: LD_VAR 0 1
78698: PPUSH
78699: LD_VAR 0 2
78703: PPUSH
78704: LD_VAR 0 12
78708: PUSH
78709: LD_INT 1
78711: ARRAY
78712: PPUSH
78713: LD_VAR 0 12
78717: PUSH
78718: LD_INT 2
78720: ARRAY
78721: PPUSH
78722: CALL_OW 298
78726: ST_TO_ADDR
// distance := 9999 ;
78727: LD_ADDR_VAR 0 10
78731: PUSH
78732: LD_INT 9999
78734: ST_TO_ADDR
// for i := 0 to 5 do
78735: LD_ADDR_VAR 0 6
78739: PUSH
78740: DOUBLE
78741: LD_INT 0
78743: DEC
78744: ST_TO_ADDR
78745: LD_INT 5
78747: PUSH
78748: FOR_TO
78749: IFFALSE 78892
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78751: LD_ADDR_VAR 0 7
78755: PUSH
78756: LD_VAR 0 1
78760: PPUSH
78761: LD_VAR 0 6
78765: PPUSH
78766: LD_VAR 0 11
78770: PPUSH
78771: CALL_OW 272
78775: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78776: LD_ADDR_VAR 0 8
78780: PUSH
78781: LD_VAR 0 2
78785: PPUSH
78786: LD_VAR 0 6
78790: PPUSH
78791: LD_VAR 0 11
78795: PPUSH
78796: CALL_OW 273
78800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78801: LD_VAR 0 7
78805: PPUSH
78806: LD_VAR 0 8
78810: PPUSH
78811: CALL_OW 488
78815: NOT
78816: IFFALSE 78820
// continue ;
78818: GO 78748
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78820: LD_ADDR_VAR 0 9
78824: PUSH
78825: LD_VAR 0 12
78829: PUSH
78830: LD_INT 1
78832: ARRAY
78833: PPUSH
78834: LD_VAR 0 12
78838: PUSH
78839: LD_INT 2
78841: ARRAY
78842: PPUSH
78843: LD_VAR 0 7
78847: PPUSH
78848: LD_VAR 0 8
78852: PPUSH
78853: CALL_OW 298
78857: ST_TO_ADDR
// if tmp < distance then
78858: LD_VAR 0 9
78862: PUSH
78863: LD_VAR 0 10
78867: LESS
78868: IFFALSE 78890
// begin result := i ;
78870: LD_ADDR_VAR 0 5
78874: PUSH
78875: LD_VAR 0 6
78879: ST_TO_ADDR
// distance := tmp ;
78880: LD_ADDR_VAR 0 10
78884: PUSH
78885: LD_VAR 0 9
78889: ST_TO_ADDR
// end ; end ;
78890: GO 78748
78892: POP
78893: POP
// end ;
78894: LD_VAR 0 5
78898: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78899: LD_INT 0
78901: PPUSH
78902: PPUSH
// if not driver or not IsInUnit ( driver ) then
78903: LD_VAR 0 1
78907: NOT
78908: PUSH
78909: LD_VAR 0 1
78913: PPUSH
78914: CALL_OW 310
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79014
// vehicle := IsInUnit ( driver ) ;
78924: LD_ADDR_VAR 0 3
78928: PUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: CALL_OW 310
78938: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78939: LD_VAR 0 1
78943: PPUSH
78944: LD_STRING \
78946: PUSH
78947: LD_INT 0
78949: PUSH
78950: LD_INT 0
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: LD_INT 0
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: PUSH
78974: LD_STRING E
78976: PUSH
78977: LD_INT 0
78979: PUSH
78980: LD_INT 0
78982: PUSH
78983: LD_VAR 0 3
78987: PUSH
78988: LD_INT 0
78990: PUSH
78991: LD_INT 0
78993: PUSH
78994: LD_INT 0
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: LIST
79004: LIST
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PPUSH
79010: CALL_OW 446
// end ;
79014: LD_VAR 0 2
79018: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79019: LD_INT 0
79021: PPUSH
79022: PPUSH
// if not driver or not IsInUnit ( driver ) then
79023: LD_VAR 0 1
79027: NOT
79028: PUSH
79029: LD_VAR 0 1
79033: PPUSH
79034: CALL_OW 310
79038: NOT
79039: OR
79040: IFFALSE 79044
// exit ;
79042: GO 79134
// vehicle := IsInUnit ( driver ) ;
79044: LD_ADDR_VAR 0 3
79048: PUSH
79049: LD_VAR 0 1
79053: PPUSH
79054: CALL_OW 310
79058: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79059: LD_VAR 0 1
79063: PPUSH
79064: LD_STRING \
79066: PUSH
79067: LD_INT 0
79069: PUSH
79070: LD_INT 0
79072: PUSH
79073: LD_INT 0
79075: PUSH
79076: LD_INT 0
79078: PUSH
79079: LD_INT 0
79081: PUSH
79082: LD_INT 0
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: PUSH
79094: LD_STRING E
79096: PUSH
79097: LD_INT 0
79099: PUSH
79100: LD_INT 0
79102: PUSH
79103: LD_VAR 0 3
79107: PUSH
79108: LD_INT 0
79110: PUSH
79111: LD_INT 0
79113: PUSH
79114: LD_INT 0
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PPUSH
79130: CALL_OW 447
// end ;
79134: LD_VAR 0 2
79138: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79139: LD_INT 0
79141: PPUSH
79142: PPUSH
79143: PPUSH
// tmp := [ ] ;
79144: LD_ADDR_VAR 0 5
79148: PUSH
79149: EMPTY
79150: ST_TO_ADDR
// for i in units do
79151: LD_ADDR_VAR 0 4
79155: PUSH
79156: LD_VAR 0 1
79160: PUSH
79161: FOR_IN
79162: IFFALSE 79200
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79164: LD_ADDR_VAR 0 5
79168: PUSH
79169: LD_VAR 0 5
79173: PPUSH
79174: LD_VAR 0 5
79178: PUSH
79179: LD_INT 1
79181: PLUS
79182: PPUSH
79183: LD_VAR 0 4
79187: PPUSH
79188: CALL_OW 256
79192: PPUSH
79193: CALL_OW 2
79197: ST_TO_ADDR
79198: GO 79161
79200: POP
79201: POP
// if not tmp then
79202: LD_VAR 0 5
79206: NOT
79207: IFFALSE 79211
// exit ;
79209: GO 79259
// if asc then
79211: LD_VAR 0 2
79215: IFFALSE 79239
// result := SortListByListAsc ( units , tmp ) else
79217: LD_ADDR_VAR 0 3
79221: PUSH
79222: LD_VAR 0 1
79226: PPUSH
79227: LD_VAR 0 5
79231: PPUSH
79232: CALL_OW 76
79236: ST_TO_ADDR
79237: GO 79259
// result := SortListByListDesc ( units , tmp ) ;
79239: LD_ADDR_VAR 0 3
79243: PUSH
79244: LD_VAR 0 1
79248: PPUSH
79249: LD_VAR 0 5
79253: PPUSH
79254: CALL_OW 77
79258: ST_TO_ADDR
// end ;
79259: LD_VAR 0 3
79263: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79264: LD_INT 0
79266: PPUSH
79267: PPUSH
// task := GetTaskList ( mech ) ;
79268: LD_ADDR_VAR 0 4
79272: PUSH
79273: LD_VAR 0 1
79277: PPUSH
79278: CALL_OW 437
79282: ST_TO_ADDR
// if not task then
79283: LD_VAR 0 4
79287: NOT
79288: IFFALSE 79292
// exit ;
79290: GO 79334
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79292: LD_ADDR_VAR 0 3
79296: PUSH
79297: LD_VAR 0 4
79301: PUSH
79302: LD_INT 1
79304: ARRAY
79305: PUSH
79306: LD_INT 1
79308: ARRAY
79309: PUSH
79310: LD_STRING r
79312: EQUAL
79313: PUSH
79314: LD_VAR 0 4
79318: PUSH
79319: LD_INT 1
79321: ARRAY
79322: PUSH
79323: LD_INT 4
79325: ARRAY
79326: PUSH
79327: LD_VAR 0 2
79331: EQUAL
79332: AND
79333: ST_TO_ADDR
// end ;
79334: LD_VAR 0 3
79338: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79339: LD_INT 0
79341: PPUSH
// SetDir ( unit , d ) ;
79342: LD_VAR 0 1
79346: PPUSH
79347: LD_VAR 0 4
79351: PPUSH
79352: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79356: LD_VAR 0 1
79360: PPUSH
79361: LD_VAR 0 2
79365: PPUSH
79366: LD_VAR 0 3
79370: PPUSH
79371: LD_VAR 0 5
79375: PPUSH
79376: CALL_OW 48
// end ;
79380: LD_VAR 0 6
79384: RET
// export function ToNaturalNumber ( number ) ; begin
79385: LD_INT 0
79387: PPUSH
// result := number div 1 ;
79388: LD_ADDR_VAR 0 2
79392: PUSH
79393: LD_VAR 0 1
79397: PUSH
79398: LD_INT 1
79400: DIV
79401: ST_TO_ADDR
// if number < 0 then
79402: LD_VAR 0 1
79406: PUSH
79407: LD_INT 0
79409: LESS
79410: IFFALSE 79420
// result := 0 ;
79412: LD_ADDR_VAR 0 2
79416: PUSH
79417: LD_INT 0
79419: ST_TO_ADDR
// end ;
79420: LD_VAR 0 2
79424: RET
// export function SortByClass ( units , class ) ; var un ; begin
79425: LD_INT 0
79427: PPUSH
79428: PPUSH
// if not units or not class then
79429: LD_VAR 0 1
79433: NOT
79434: PUSH
79435: LD_VAR 0 2
79439: NOT
79440: OR
79441: IFFALSE 79445
// exit ;
79443: GO 79540
// result := [ ] ;
79445: LD_ADDR_VAR 0 3
79449: PUSH
79450: EMPTY
79451: ST_TO_ADDR
// for un in units do
79452: LD_ADDR_VAR 0 4
79456: PUSH
79457: LD_VAR 0 1
79461: PUSH
79462: FOR_IN
79463: IFFALSE 79538
// if GetClass ( un ) = class then
79465: LD_VAR 0 4
79469: PPUSH
79470: CALL_OW 257
79474: PUSH
79475: LD_VAR 0 2
79479: EQUAL
79480: IFFALSE 79507
// result := Insert ( result , 1 , un ) else
79482: LD_ADDR_VAR 0 3
79486: PUSH
79487: LD_VAR 0 3
79491: PPUSH
79492: LD_INT 1
79494: PPUSH
79495: LD_VAR 0 4
79499: PPUSH
79500: CALL_OW 2
79504: ST_TO_ADDR
79505: GO 79536
// result := Replace ( result , result + 1 , un ) ;
79507: LD_ADDR_VAR 0 3
79511: PUSH
79512: LD_VAR 0 3
79516: PPUSH
79517: LD_VAR 0 3
79521: PUSH
79522: LD_INT 1
79524: PLUS
79525: PPUSH
79526: LD_VAR 0 4
79530: PPUSH
79531: CALL_OW 1
79535: ST_TO_ADDR
79536: GO 79462
79538: POP
79539: POP
// end ;
79540: LD_VAR 0 3
79544: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79545: LD_INT 0
79547: PPUSH
79548: PPUSH
79549: PPUSH
79550: PPUSH
79551: PPUSH
79552: PPUSH
79553: PPUSH
// result := [ ] ;
79554: LD_ADDR_VAR 0 4
79558: PUSH
79559: EMPTY
79560: ST_TO_ADDR
// if x - r < 0 then
79561: LD_VAR 0 1
79565: PUSH
79566: LD_VAR 0 3
79570: MINUS
79571: PUSH
79572: LD_INT 0
79574: LESS
79575: IFFALSE 79587
// min_x := 0 else
79577: LD_ADDR_VAR 0 8
79581: PUSH
79582: LD_INT 0
79584: ST_TO_ADDR
79585: GO 79603
// min_x := x - r ;
79587: LD_ADDR_VAR 0 8
79591: PUSH
79592: LD_VAR 0 1
79596: PUSH
79597: LD_VAR 0 3
79601: MINUS
79602: ST_TO_ADDR
// if y - r < 0 then
79603: LD_VAR 0 2
79607: PUSH
79608: LD_VAR 0 3
79612: MINUS
79613: PUSH
79614: LD_INT 0
79616: LESS
79617: IFFALSE 79629
// min_y := 0 else
79619: LD_ADDR_VAR 0 7
79623: PUSH
79624: LD_INT 0
79626: ST_TO_ADDR
79627: GO 79645
// min_y := y - r ;
79629: LD_ADDR_VAR 0 7
79633: PUSH
79634: LD_VAR 0 2
79638: PUSH
79639: LD_VAR 0 3
79643: MINUS
79644: ST_TO_ADDR
// max_x := x + r ;
79645: LD_ADDR_VAR 0 9
79649: PUSH
79650: LD_VAR 0 1
79654: PUSH
79655: LD_VAR 0 3
79659: PLUS
79660: ST_TO_ADDR
// max_y := y + r ;
79661: LD_ADDR_VAR 0 10
79665: PUSH
79666: LD_VAR 0 2
79670: PUSH
79671: LD_VAR 0 3
79675: PLUS
79676: ST_TO_ADDR
// for _x = min_x to max_x do
79677: LD_ADDR_VAR 0 5
79681: PUSH
79682: DOUBLE
79683: LD_VAR 0 8
79687: DEC
79688: ST_TO_ADDR
79689: LD_VAR 0 9
79693: PUSH
79694: FOR_TO
79695: IFFALSE 79796
// for _y = min_y to max_y do
79697: LD_ADDR_VAR 0 6
79701: PUSH
79702: DOUBLE
79703: LD_VAR 0 7
79707: DEC
79708: ST_TO_ADDR
79709: LD_VAR 0 10
79713: PUSH
79714: FOR_TO
79715: IFFALSE 79792
// begin if not ValidHex ( _x , _y ) then
79717: LD_VAR 0 5
79721: PPUSH
79722: LD_VAR 0 6
79726: PPUSH
79727: CALL_OW 488
79731: NOT
79732: IFFALSE 79736
// continue ;
79734: GO 79714
// if GetResourceTypeXY ( _x , _y ) then
79736: LD_VAR 0 5
79740: PPUSH
79741: LD_VAR 0 6
79745: PPUSH
79746: CALL_OW 283
79750: IFFALSE 79790
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79752: LD_ADDR_VAR 0 4
79756: PUSH
79757: LD_VAR 0 4
79761: PPUSH
79762: LD_VAR 0 4
79766: PUSH
79767: LD_INT 1
79769: PLUS
79770: PPUSH
79771: LD_VAR 0 5
79775: PUSH
79776: LD_VAR 0 6
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PPUSH
79785: CALL_OW 1
79789: ST_TO_ADDR
// end ;
79790: GO 79714
79792: POP
79793: POP
79794: GO 79694
79796: POP
79797: POP
// end ;
79798: LD_VAR 0 4
79802: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79803: LD_INT 0
79805: PPUSH
79806: PPUSH
79807: PPUSH
79808: PPUSH
79809: PPUSH
79810: PPUSH
79811: PPUSH
79812: PPUSH
// if not units then
79813: LD_VAR 0 1
79817: NOT
79818: IFFALSE 79822
// exit ;
79820: GO 80348
// result := UnitFilter ( units , [ f_ok ] ) ;
79822: LD_ADDR_VAR 0 3
79826: PUSH
79827: LD_VAR 0 1
79831: PPUSH
79832: LD_INT 50
79834: PUSH
79835: EMPTY
79836: LIST
79837: PPUSH
79838: CALL_OW 72
79842: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79843: LD_ADDR_VAR 0 8
79847: PUSH
79848: LD_VAR 0 1
79852: PUSH
79853: LD_INT 1
79855: ARRAY
79856: PPUSH
79857: CALL_OW 255
79861: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79862: LD_ADDR_VAR 0 10
79866: PUSH
79867: LD_INT 29
79869: PUSH
79870: LD_EXP 52
79874: PUSH
79875: LD_INT 49
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: LIST
79882: ST_TO_ADDR
// if not result then
79883: LD_VAR 0 3
79887: NOT
79888: IFFALSE 79892
// exit ;
79890: GO 80348
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79892: LD_ADDR_VAR 0 5
79896: PUSH
79897: LD_INT 81
79899: PUSH
79900: LD_VAR 0 8
79904: PUSH
79905: EMPTY
79906: LIST
79907: LIST
79908: PPUSH
79909: CALL_OW 69
79913: ST_TO_ADDR
// for i in result do
79914: LD_ADDR_VAR 0 4
79918: PUSH
79919: LD_VAR 0 3
79923: PUSH
79924: FOR_IN
79925: IFFALSE 80346
// begin tag := GetTag ( i ) + 1 ;
79927: LD_ADDR_VAR 0 9
79931: PUSH
79932: LD_VAR 0 4
79936: PPUSH
79937: CALL_OW 110
79941: PUSH
79942: LD_INT 1
79944: PLUS
79945: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79946: LD_ADDR_VAR 0 7
79950: PUSH
79951: LD_VAR 0 4
79955: PPUSH
79956: CALL_OW 250
79960: PPUSH
79961: LD_VAR 0 4
79965: PPUSH
79966: CALL_OW 251
79970: PPUSH
79971: LD_INT 6
79973: PPUSH
79974: CALL 79545 0 3
79978: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79979: LD_VAR 0 4
79983: PPUSH
79984: CALL_OW 247
79988: PUSH
79989: LD_INT 2
79991: EQUAL
79992: PUSH
79993: LD_VAR 0 7
79997: AND
79998: PUSH
79999: LD_VAR 0 4
80003: PPUSH
80004: CALL_OW 264
80008: PUSH
80009: LD_VAR 0 10
80013: IN
80014: NOT
80015: AND
80016: IFFALSE 80055
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80018: LD_VAR 0 4
80022: PPUSH
80023: LD_VAR 0 7
80027: PUSH
80028: LD_INT 1
80030: ARRAY
80031: PUSH
80032: LD_INT 1
80034: ARRAY
80035: PPUSH
80036: LD_VAR 0 7
80040: PUSH
80041: LD_INT 1
80043: ARRAY
80044: PUSH
80045: LD_INT 2
80047: ARRAY
80048: PPUSH
80049: CALL_OW 116
80053: GO 80344
// if path > tag then
80055: LD_VAR 0 2
80059: PUSH
80060: LD_VAR 0 9
80064: GREATER
80065: IFFALSE 80273
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80067: LD_ADDR_VAR 0 6
80071: PUSH
80072: LD_VAR 0 5
80076: PPUSH
80077: LD_INT 91
80079: PUSH
80080: LD_VAR 0 4
80084: PUSH
80085: LD_INT 8
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: LIST
80092: PPUSH
80093: CALL_OW 72
80097: ST_TO_ADDR
// if nearEnemy then
80098: LD_VAR 0 6
80102: IFFALSE 80171
// begin if GetWeapon ( i ) = ru_time_lapser then
80104: LD_VAR 0 4
80108: PPUSH
80109: CALL_OW 264
80113: PUSH
80114: LD_INT 49
80116: EQUAL
80117: IFFALSE 80145
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80119: LD_VAR 0 4
80123: PPUSH
80124: LD_VAR 0 6
80128: PPUSH
80129: LD_VAR 0 4
80133: PPUSH
80134: CALL_OW 74
80138: PPUSH
80139: CALL_OW 112
80143: GO 80169
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80145: LD_VAR 0 4
80149: PPUSH
80150: LD_VAR 0 6
80154: PPUSH
80155: LD_VAR 0 4
80159: PPUSH
80160: CALL_OW 74
80164: PPUSH
80165: CALL_OW 115
// end else
80169: GO 80271
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80171: LD_VAR 0 4
80175: PPUSH
80176: LD_VAR 0 2
80180: PUSH
80181: LD_VAR 0 9
80185: ARRAY
80186: PUSH
80187: LD_INT 1
80189: ARRAY
80190: PPUSH
80191: LD_VAR 0 2
80195: PUSH
80196: LD_VAR 0 9
80200: ARRAY
80201: PUSH
80202: LD_INT 2
80204: ARRAY
80205: PPUSH
80206: CALL_OW 297
80210: PUSH
80211: LD_INT 6
80213: GREATER
80214: IFFALSE 80257
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80216: LD_VAR 0 4
80220: PPUSH
80221: LD_VAR 0 2
80225: PUSH
80226: LD_VAR 0 9
80230: ARRAY
80231: PUSH
80232: LD_INT 1
80234: ARRAY
80235: PPUSH
80236: LD_VAR 0 2
80240: PUSH
80241: LD_VAR 0 9
80245: ARRAY
80246: PUSH
80247: LD_INT 2
80249: ARRAY
80250: PPUSH
80251: CALL_OW 114
80255: GO 80271
// SetTag ( i , tag ) ;
80257: LD_VAR 0 4
80261: PPUSH
80262: LD_VAR 0 9
80266: PPUSH
80267: CALL_OW 109
// end else
80271: GO 80344
// if enemy then
80273: LD_VAR 0 5
80277: IFFALSE 80344
// begin if GetWeapon ( i ) = ru_time_lapser then
80279: LD_VAR 0 4
80283: PPUSH
80284: CALL_OW 264
80288: PUSH
80289: LD_INT 49
80291: EQUAL
80292: IFFALSE 80320
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80294: LD_VAR 0 4
80298: PPUSH
80299: LD_VAR 0 5
80303: PPUSH
80304: LD_VAR 0 4
80308: PPUSH
80309: CALL_OW 74
80313: PPUSH
80314: CALL_OW 112
80318: GO 80344
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80320: LD_VAR 0 4
80324: PPUSH
80325: LD_VAR 0 5
80329: PPUSH
80330: LD_VAR 0 4
80334: PPUSH
80335: CALL_OW 74
80339: PPUSH
80340: CALL_OW 115
// end ; end ;
80344: GO 79924
80346: POP
80347: POP
// end ;
80348: LD_VAR 0 3
80352: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80353: LD_INT 0
80355: PPUSH
80356: PPUSH
80357: PPUSH
// if not unit or IsInUnit ( unit ) then
80358: LD_VAR 0 1
80362: NOT
80363: PUSH
80364: LD_VAR 0 1
80368: PPUSH
80369: CALL_OW 310
80373: OR
80374: IFFALSE 80378
// exit ;
80376: GO 80469
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80378: LD_ADDR_VAR 0 4
80382: PUSH
80383: LD_VAR 0 1
80387: PPUSH
80388: CALL_OW 250
80392: PPUSH
80393: LD_VAR 0 2
80397: PPUSH
80398: LD_INT 1
80400: PPUSH
80401: CALL_OW 272
80405: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80406: LD_ADDR_VAR 0 5
80410: PUSH
80411: LD_VAR 0 1
80415: PPUSH
80416: CALL_OW 251
80420: PPUSH
80421: LD_VAR 0 2
80425: PPUSH
80426: LD_INT 1
80428: PPUSH
80429: CALL_OW 273
80433: ST_TO_ADDR
// if ValidHex ( x , y ) then
80434: LD_VAR 0 4
80438: PPUSH
80439: LD_VAR 0 5
80443: PPUSH
80444: CALL_OW 488
80448: IFFALSE 80469
// ComTurnXY ( unit , x , y ) ;
80450: LD_VAR 0 1
80454: PPUSH
80455: LD_VAR 0 4
80459: PPUSH
80460: LD_VAR 0 5
80464: PPUSH
80465: CALL_OW 118
// end ;
80469: LD_VAR 0 3
80473: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80474: LD_INT 0
80476: PPUSH
80477: PPUSH
// result := false ;
80478: LD_ADDR_VAR 0 3
80482: PUSH
80483: LD_INT 0
80485: ST_TO_ADDR
// if not units then
80486: LD_VAR 0 2
80490: NOT
80491: IFFALSE 80495
// exit ;
80493: GO 80540
// for i in units do
80495: LD_ADDR_VAR 0 4
80499: PUSH
80500: LD_VAR 0 2
80504: PUSH
80505: FOR_IN
80506: IFFALSE 80538
// if See ( side , i ) then
80508: LD_VAR 0 1
80512: PPUSH
80513: LD_VAR 0 4
80517: PPUSH
80518: CALL_OW 292
80522: IFFALSE 80536
// begin result := true ;
80524: LD_ADDR_VAR 0 3
80528: PUSH
80529: LD_INT 1
80531: ST_TO_ADDR
// exit ;
80532: POP
80533: POP
80534: GO 80540
// end ;
80536: GO 80505
80538: POP
80539: POP
// end ;
80540: LD_VAR 0 3
80544: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80545: LD_INT 0
80547: PPUSH
80548: PPUSH
80549: PPUSH
80550: PPUSH
// if not unit or not points then
80551: LD_VAR 0 1
80555: NOT
80556: PUSH
80557: LD_VAR 0 2
80561: NOT
80562: OR
80563: IFFALSE 80567
// exit ;
80565: GO 80657
// dist := 99999 ;
80567: LD_ADDR_VAR 0 5
80571: PUSH
80572: LD_INT 99999
80574: ST_TO_ADDR
// for i in points do
80575: LD_ADDR_VAR 0 4
80579: PUSH
80580: LD_VAR 0 2
80584: PUSH
80585: FOR_IN
80586: IFFALSE 80655
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80588: LD_ADDR_VAR 0 6
80592: PUSH
80593: LD_VAR 0 1
80597: PPUSH
80598: LD_VAR 0 4
80602: PUSH
80603: LD_INT 1
80605: ARRAY
80606: PPUSH
80607: LD_VAR 0 4
80611: PUSH
80612: LD_INT 2
80614: ARRAY
80615: PPUSH
80616: CALL_OW 297
80620: ST_TO_ADDR
// if tmpDist < dist then
80621: LD_VAR 0 6
80625: PUSH
80626: LD_VAR 0 5
80630: LESS
80631: IFFALSE 80653
// begin result := i ;
80633: LD_ADDR_VAR 0 3
80637: PUSH
80638: LD_VAR 0 4
80642: ST_TO_ADDR
// dist := tmpDist ;
80643: LD_ADDR_VAR 0 5
80647: PUSH
80648: LD_VAR 0 6
80652: ST_TO_ADDR
// end ; end ;
80653: GO 80585
80655: POP
80656: POP
// end ;
80657: LD_VAR 0 3
80661: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80662: LD_INT 0
80664: PPUSH
// uc_side := side ;
80665: LD_ADDR_OWVAR 20
80669: PUSH
80670: LD_VAR 0 1
80674: ST_TO_ADDR
// uc_nation := 3 ;
80675: LD_ADDR_OWVAR 21
80679: PUSH
80680: LD_INT 3
80682: ST_TO_ADDR
// vc_chassis := 25 ;
80683: LD_ADDR_OWVAR 37
80687: PUSH
80688: LD_INT 25
80690: ST_TO_ADDR
// vc_engine := engine_siberite ;
80691: LD_ADDR_OWVAR 39
80695: PUSH
80696: LD_INT 3
80698: ST_TO_ADDR
// vc_control := control_computer ;
80699: LD_ADDR_OWVAR 38
80703: PUSH
80704: LD_INT 3
80706: ST_TO_ADDR
// vc_weapon := 59 ;
80707: LD_ADDR_OWVAR 40
80711: PUSH
80712: LD_INT 59
80714: ST_TO_ADDR
// result := CreateVehicle ;
80715: LD_ADDR_VAR 0 5
80719: PUSH
80720: CALL_OW 45
80724: ST_TO_ADDR
// SetDir ( result , d ) ;
80725: LD_VAR 0 5
80729: PPUSH
80730: LD_VAR 0 4
80734: PPUSH
80735: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80739: LD_VAR 0 5
80743: PPUSH
80744: LD_VAR 0 2
80748: PPUSH
80749: LD_VAR 0 3
80753: PPUSH
80754: LD_INT 0
80756: PPUSH
80757: CALL_OW 48
// end ;
80761: LD_VAR 0 5
80765: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80766: LD_INT 0
80768: PPUSH
80769: PPUSH
80770: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80771: LD_ADDR_VAR 0 2
80775: PUSH
80776: LD_INT 0
80778: PUSH
80779: LD_INT 0
80781: PUSH
80782: LD_INT 0
80784: PUSH
80785: LD_INT 0
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80794: LD_VAR 0 1
80798: NOT
80799: PUSH
80800: LD_VAR 0 1
80804: PPUSH
80805: CALL_OW 264
80809: PUSH
80810: LD_INT 12
80812: PUSH
80813: LD_INT 51
80815: PUSH
80816: LD_INT 32
80818: PUSH
80819: LD_EXP 49
80823: PUSH
80824: EMPTY
80825: LIST
80826: LIST
80827: LIST
80828: LIST
80829: IN
80830: NOT
80831: OR
80832: IFFALSE 80836
// exit ;
80834: GO 80934
// for i := 1 to 3 do
80836: LD_ADDR_VAR 0 3
80840: PUSH
80841: DOUBLE
80842: LD_INT 1
80844: DEC
80845: ST_TO_ADDR
80846: LD_INT 3
80848: PUSH
80849: FOR_TO
80850: IFFALSE 80932
// begin tmp := GetCargo ( cargo , i ) ;
80852: LD_ADDR_VAR 0 4
80856: PUSH
80857: LD_VAR 0 1
80861: PPUSH
80862: LD_VAR 0 3
80866: PPUSH
80867: CALL_OW 289
80871: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80872: LD_ADDR_VAR 0 2
80876: PUSH
80877: LD_VAR 0 2
80881: PPUSH
80882: LD_VAR 0 3
80886: PPUSH
80887: LD_VAR 0 4
80891: PPUSH
80892: CALL_OW 1
80896: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80897: LD_ADDR_VAR 0 2
80901: PUSH
80902: LD_VAR 0 2
80906: PPUSH
80907: LD_INT 4
80909: PPUSH
80910: LD_VAR 0 2
80914: PUSH
80915: LD_INT 4
80917: ARRAY
80918: PUSH
80919: LD_VAR 0 4
80923: PLUS
80924: PPUSH
80925: CALL_OW 1
80929: ST_TO_ADDR
// end ;
80930: GO 80849
80932: POP
80933: POP
// end ;
80934: LD_VAR 0 2
80938: RET
// export function Length ( array ) ; begin
80939: LD_INT 0
80941: PPUSH
// result := array + 0 ;
80942: LD_ADDR_VAR 0 2
80946: PUSH
80947: LD_VAR 0 1
80951: PUSH
80952: LD_INT 0
80954: PLUS
80955: ST_TO_ADDR
// end ;
80956: LD_VAR 0 2
80960: RET
// export function PrepareArray ( array ) ; begin
80961: LD_INT 0
80963: PPUSH
// result := array diff 0 ;
80964: LD_ADDR_VAR 0 2
80968: PUSH
80969: LD_VAR 0 1
80973: PUSH
80974: LD_INT 0
80976: DIFF
80977: ST_TO_ADDR
// if not result [ 1 ] then
80978: LD_VAR 0 2
80982: PUSH
80983: LD_INT 1
80985: ARRAY
80986: NOT
80987: IFFALSE 81007
// result := Delete ( result , 1 ) ;
80989: LD_ADDR_VAR 0 2
80993: PUSH
80994: LD_VAR 0 2
80998: PPUSH
80999: LD_INT 1
81001: PPUSH
81002: CALL_OW 3
81006: ST_TO_ADDR
// end ; end_of_file
81007: LD_VAR 0 2
81011: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81012: LD_VAR 0 1
81016: PUSH
81017: LD_INT 200
81019: DOUBLE
81020: GREATEREQUAL
81021: IFFALSE 81029
81023: LD_INT 299
81025: DOUBLE
81026: LESSEQUAL
81027: IFTRUE 81031
81029: GO 81063
81031: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81032: LD_VAR 0 1
81036: PPUSH
81037: LD_VAR 0 2
81041: PPUSH
81042: LD_VAR 0 3
81046: PPUSH
81047: LD_VAR 0 4
81051: PPUSH
81052: LD_VAR 0 5
81056: PPUSH
81057: CALL 35863 0 5
81061: GO 81140
81063: LD_INT 300
81065: DOUBLE
81066: GREATEREQUAL
81067: IFFALSE 81075
81069: LD_INT 399
81071: DOUBLE
81072: LESSEQUAL
81073: IFTRUE 81077
81075: GO 81139
81077: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81078: LD_VAR 0 1
81082: PPUSH
81083: LD_VAR 0 2
81087: PPUSH
81088: LD_VAR 0 3
81092: PPUSH
81093: LD_VAR 0 4
81097: PPUSH
81098: LD_VAR 0 5
81102: PPUSH
81103: LD_VAR 0 6
81107: PPUSH
81108: LD_VAR 0 7
81112: PPUSH
81113: LD_VAR 0 8
81117: PPUSH
81118: LD_VAR 0 9
81122: PPUSH
81123: LD_VAR 0 10
81127: PPUSH
81128: LD_VAR 0 11
81132: PPUSH
81133: CALL 32192 0 11
81137: GO 81140
81139: POP
// end ;
81140: PPOPN 11
81142: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81143: LD_VAR 0 1
81147: PPUSH
81148: LD_VAR 0 2
81152: PPUSH
81153: LD_VAR 0 3
81157: PPUSH
81158: LD_VAR 0 4
81162: PPUSH
81163: LD_VAR 0 5
81167: PPUSH
81168: CALL 35599 0 5
// end ; end_of_file
81172: PPOPN 5
81174: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81175: LD_VAR 0 1
81179: PPUSH
81180: LD_VAR 0 2
81184: PPUSH
81185: LD_VAR 0 3
81189: PPUSH
81190: LD_VAR 0 4
81194: PPUSH
81195: LD_VAR 0 5
81199: PPUSH
81200: LD_VAR 0 6
81204: PPUSH
81205: CALL 19885 0 6
// end ;
81209: PPOPN 6
81211: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81212: LD_INT 0
81214: PPUSH
// begin if not units then
81215: LD_VAR 0 1
81219: NOT
81220: IFFALSE 81224
// exit ;
81222: GO 81224
// end ;
81224: PPOPN 7
81226: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81227: CALL 19856 0 0
// end ;
81231: PPOPN 1
81233: END
