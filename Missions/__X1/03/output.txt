// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1008 0 0
// PrepareAmerican ;
  16: CALL 4089 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9238 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: IFTRUE 857
 850: PUSH
 851: LD_VAR 0 2
 855: NOT
 856: OR
 857: IFFALSE 861
// exit ;
 859: GO 909
// if not See ( GetSide ( observer ) , unit ) then
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 255
 870: PPUSH
 871: LD_VAR 0 2
 875: PPUSH
 876: CALL_OW 292
 880: NOT
 881: IFFALSE 885
// exit ;
 883: GO 909
// result := GetDistUnits ( observer , unit ) < 12 ;
 885: LD_ADDR_VAR 0 3
 889: PUSH
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 296
 904: PUSH
 905: LD_INT 12
 907: LESS
 908: ST_TO_ADDR
// end ;
 909: LD_VAR 0 3
 913: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 914: LD_INT 0
 916: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 1
 924: ARRAY
 925: PPUSH
 926: LD_VAR 0 2
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: PPUSH
 935: CALL_OW 488
 939: IFFALSE 969
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ; end_of_file
1003: LD_VAR 0 4
1007: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
// uc_side := 5 ;
1014: LD_ADDR_OWVAR 20
1018: PUSH
1019: LD_INT 5
1021: ST_TO_ADDR
// uc_nation := 2 ;
1022: LD_ADDR_OWVAR 21
1026: PUSH
1027: LD_INT 2
1029: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1030: LD_INT 5
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 65
1043: PPUSH
1044: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1048: LD_ADDR_EXP 39
1052: PUSH
1053: LD_STRING Farmer
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: LD_STRING 
1061: PPUSH
1062: CALL 42591 0 3
1066: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1067: LD_ADDR_EXP 40
1071: PUSH
1072: LD_STRING Omar
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: LD_STRING 
1080: PPUSH
1081: CALL 42591 0 3
1085: ST_TO_ADDR
// omarSquad := [ ] ;
1086: LD_ADDR_EXP 43
1090: PUSH
1091: EMPTY
1092: ST_TO_ADDR
// heikeSquad := [ ] ;
1093: LD_ADDR_EXP 44
1097: PUSH
1098: EMPTY
1099: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1100: LD_ADDR_EXP 45
1104: PUSH
1105: EMPTY
1106: ST_TO_ADDR
// omarCargo := [ ] ;
1107: LD_ADDR_EXP 46
1111: PUSH
1112: EMPTY
1113: ST_TO_ADDR
// for i := 1 to 5 do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1286
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1130: LD_INT 0
1132: PPUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_VAR 0 2
1159: ARRAY
1160: PPUSH
1161: LD_INT 3
1163: PPUSH
1164: CALL_OW 380
// un := CreateHuman ;
1168: LD_ADDR_VAR 0 3
1172: PUSH
1173: CALL_OW 44
1177: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1178: LD_ADDR_EXP 43
1182: PUSH
1183: LD_EXP 43
1187: PUSH
1188: LD_VAR 0 3
1192: UNION
1193: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1194: LD_VAR 0 3
1198: PPUSH
1199: LD_INT 87
1201: PUSH
1202: LD_INT 30
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 91
1211: PUSH
1212: LD_INT 32
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 82
1221: PUSH
1222: LD_INT 15
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 79
1231: PUSH
1232: LD_INT 14
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 13
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: PUSH
1256: LD_VAR 0 2
1260: ARRAY
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL 914 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 93
1276: PPUSH
1277: LD_INT 21
1279: PPUSH
1280: CALL_OW 118
// end ;
1284: GO 1127
1286: POP
1287: POP
// uc_side := 2 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 2
1295: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 31
1300: PUSH
1301: LD_STRING Heike
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 42591 0 3
1319: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 35
1324: PUSH
1325: LD_STRING Aviradze
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 42591 0 3
1343: ST_TO_ADDR
// tmp := [ ] ;
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: EMPTY
1350: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1351: LD_ADDR_EXP 32
1355: PUSH
1356: LD_STRING Givi
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_EXP 2
1369: PPUSH
1370: CALL 42591 0 3
1374: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1375: LD_ADDR_EXP 33
1379: PUSH
1380: LD_STRING Mike
1382: PPUSH
1383: LD_EXP 1
1387: NOT
1388: PPUSH
1389: LD_EXP 2
1393: PPUSH
1394: CALL 42591 0 3
1398: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 34
1403: PUSH
1404: LD_STRING Kamil
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 42591 0 3
1422: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 36
1427: PUSH
1428: LD_STRING Kaia
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 42591 0 3
1446: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 37
1451: PUSH
1452: LD_STRING Sophia
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 42591 0 3
1470: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 38
1475: PUSH
1476: LD_STRING Markov
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 42591 0 3
1494: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1495: LD_ADDR_EXP 45
1499: PUSH
1500: LD_STRING 02_others
1502: PPUSH
1503: CALL_OW 31
1507: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_EXP 33
1517: PUSH
1518: LD_EXP 34
1522: PUSH
1523: LD_EXP 36
1527: PUSH
1528: LD_EXP 37
1532: PUSH
1533: LD_EXP 38
1537: PUSH
1538: LD_EXP 32
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_EXP 45
1555: ADD
1556: PUSH
1557: LD_INT 0
1559: DIFF
1560: ST_TO_ADDR
// heikeSquad := tmp ;
1561: LD_ADDR_EXP 44
1565: PUSH
1566: LD_VAR 0 4
1570: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1571: LD_EXP 44
1575: PPUSH
1576: LD_INT 25
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PPUSH
1586: CALL_OW 72
1590: PUSH
1591: LD_INT 3
1593: LESS
1594: IFFALSE 1644
// begin SetClass ( Kaia , 1 ) ;
1596: LD_EXP 36
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1608: LD_EXP 33
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1620: LD_EXP 32
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1632: LD_EXP 31
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_VAR 0 4
1653: PUSH
1654: LD_STRING 02_ape
1656: PPUSH
1657: CALL_OW 31
1661: UNION
1662: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1663: LD_EXP 31
1667: PPUSH
1668: LD_INT 92
1670: PPUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1681: LD_EXP 39
1685: PPUSH
1686: LD_INT 95
1688: PPUSH
1689: LD_INT 19
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1699: LD_EXP 40
1703: PPUSH
1704: LD_INT 89
1706: PPUSH
1707: LD_INT 25
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1717: LD_EXP 35
1721: PPUSH
1722: LD_INT 92
1724: PPUSH
1725: LD_INT 27
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1735: LD_EXP 40
1739: PPUSH
1740: LD_EXP 35
1744: PPUSH
1745: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1749: LD_EXP 35
1753: PPUSH
1754: LD_EXP 40
1758: PPUSH
1759: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1763: LD_EXP 31
1767: PUSH
1768: LD_EXP 39
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: LD_EXP 40
1781: PPUSH
1782: CALL_OW 119
// if tmp then
1786: LD_VAR 0 4
1790: IFFALSE 1844
// for i in tmp do
1792: LD_ADDR_VAR 0 2
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1842
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_INT 94
1812: PPUSH
1813: LD_INT 14
1815: PPUSH
1816: LD_INT 4
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1826: LD_VAR 0 2
1830: PPUSH
1831: LD_EXP 31
1835: PPUSH
1836: CALL_OW 119
// end ;
1840: GO 1802
1842: POP
1843: POP
// farmerSquad := [ ] ;
1844: LD_ADDR_EXP 42
1848: PUSH
1849: EMPTY
1850: ST_TO_ADDR
// uc_side := 5 ;
1851: LD_ADDR_OWVAR 20
1855: PUSH
1856: LD_INT 5
1858: ST_TO_ADDR
// uc_nation := 2 ;
1859: LD_ADDR_OWVAR 21
1863: PUSH
1864: LD_INT 2
1866: ST_TO_ADDR
// for i := 1 to 4 do
1867: LD_ADDR_VAR 0 2
1871: PUSH
1872: DOUBLE
1873: LD_INT 1
1875: DEC
1876: ST_TO_ADDR
1877: LD_INT 4
1879: PUSH
1880: FOR_TO
1881: IFFALSE 1959
// begin PrepareHuman ( false , 1 , 2 ) ;
1883: LD_INT 0
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: CALL_OW 380
// un := CreateHuman ;
1896: LD_ADDR_VAR 0 3
1900: PUSH
1901: CALL_OW 44
1905: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1906: LD_VAR 0 3
1910: PPUSH
1911: LD_INT 102
1913: PPUSH
1914: LD_INT 27
1916: PPUSH
1917: LD_INT 4
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1927: LD_ADDR_EXP 42
1931: PUSH
1932: LD_EXP 42
1936: PUSH
1937: LD_VAR 0 3
1941: UNION
1942: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1943: LD_VAR 0 3
1947: PPUSH
1948: LD_EXP 40
1952: PPUSH
1953: CALL_OW 119
// end ;
1957: GO 1880
1959: POP
1960: POP
// for i := 1 to 2 do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: DOUBLE
1967: LD_INT 1
1969: DEC
1970: ST_TO_ADDR
1971: LD_INT 2
1973: PUSH
1974: FOR_TO
1975: IFFALSE 2053
// begin PrepareHuman ( false , 2 , 2 ) ;
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 2
1982: PPUSH
1983: LD_INT 2
1985: PPUSH
1986: CALL_OW 380
// un := CreateHuman ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: CALL_OW 44
1999: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_INT 108
2007: PPUSH
2008: LD_INT 62
2010: PPUSH
2011: LD_INT 2
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2021: LD_ADDR_EXP 42
2025: PUSH
2026: LD_EXP 42
2030: PUSH
2031: LD_VAR 0 3
2035: UNION
2036: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_EXP 40
2046: PPUSH
2047: CALL_OW 119
// end ;
2051: GO 1974
2053: POP
2054: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2055: LD_INT 109
2057: PPUSH
2058: LD_INT 63
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: LD_INT 15
2066: NEG
2067: PPUSH
2068: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2072: LD_INT 109
2074: PPUSH
2075: LD_INT 63
2077: PPUSH
2078: LD_INT 2
2080: PPUSH
2081: CALL_OW 331
// end ;
2085: LD_VAR 0 1
2089: RET
// export function PrepareIbrahim ( x , y ) ; begin
2090: LD_INT 0
2092: PPUSH
// uc_side := 6 ;
2093: LD_ADDR_OWVAR 20
2097: PUSH
2098: LD_INT 6
2100: ST_TO_ADDR
// uc_nation := 3 ;
2101: LD_ADDR_OWVAR 21
2105: PUSH
2106: LD_INT 3
2108: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2109: LD_ADDR_EXP 41
2113: PUSH
2114: LD_STRING IbrahimRu
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: LD_STRING 
2122: PPUSH
2123: CALL 42591 0 3
2127: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2128: LD_EXP 41
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: LD_VAR 0 2
2142: PPUSH
2143: LD_INT 8
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 50
// end ;
2153: LD_VAR 0 3
2157: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2158: LD_EXP 40
2162: PUSH
2163: LD_EXP 43
2167: ADD
2168: PPUSH
2169: LD_INT 95
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 72
2183: IFFALSE 2239
2185: GO 2187
2187: DISABLE
2188: LD_INT 0
2190: PPUSH
// begin enable ;
2191: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2192: LD_ADDR_VAR 0 1
2196: PUSH
2197: LD_EXP 40
2201: PUSH
2202: LD_EXP 43
2206: ADD
2207: PPUSH
2208: LD_INT 95
2210: PUSH
2211: LD_INT 3
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 72
2222: PUSH
2223: FOR_IN
2224: IFFALSE 2237
// RemoveUnit ( i ) ;
2226: LD_VAR 0 1
2230: PPUSH
2231: CALL_OW 64
2235: GO 2223
2237: POP
2238: POP
// end ;
2239: PPOPN 1
2241: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2242: LD_EXP 3
2246: IFFALSE 2262
2248: PUSH
2249: LD_EXP 39
2253: PPUSH
2254: LD_INT 4
2256: PPUSH
2257: CALL_OW 308
2261: AND
2262: IFFALSE 3066
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2273: LD_EXP 39
2277: PPUSH
2278: LD_INT 110
2280: PPUSH
2281: LD_INT 60
2283: PPUSH
2284: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2288: LD_EXP 39
2292: PPUSH
2293: LD_INT 110
2295: PPUSH
2296: LD_INT 61
2298: PPUSH
2299: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_EXP 42
2312: PPUSH
2313: LD_INT 25
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 72
2327: ST_TO_ADDR
// if tmp then
2328: LD_VAR 0 2
2332: IFFALSE 2426
// begin for i := 1 to 2 do
2334: LD_ADDR_VAR 0 1
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2424
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 1
2359: ARRAY
2360: PPUSH
2361: LD_INT 5
2363: PPUSH
2364: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2368: LD_VAR 0 2
2372: PUSH
2373: LD_VAR 0 1
2377: ARRAY
2378: PPUSH
2379: LD_INT 2
2381: PPUSH
2382: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 1
2395: ARRAY
2396: PPUSH
2397: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2401: LD_VAR 0 2
2405: PUSH
2406: LD_VAR 0 1
2410: ARRAY
2411: PPUSH
2412: LD_INT 107
2414: PPUSH
2415: LD_INT 66
2417: PPUSH
2418: CALL_OW 171
// end ;
2422: GO 2347
2424: POP
2425: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_EXP 42
2435: PPUSH
2436: LD_INT 25
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PPUSH
2446: CALL_OW 72
2450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2451: LD_INT 35
2453: PPUSH
2454: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: LD_EXP 42
2467: PPUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 72
2482: ST_TO_ADDR
// until tmp ;
2483: LD_VAR 0 2
2487: IFFALSE 2451
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_INT 31
2496: PPUSH
2497: LD_INT 102
2499: PPUSH
2500: LD_INT 69
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2510: LD_INT 35
2512: PPUSH
2513: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2517: LD_EXP 42
2521: PPUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 60
2527: PUSH
2528: EMPTY
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 25
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 72
2553: IFFALSE 2510
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2555: LD_ADDR_VAR 0 2
2559: PUSH
2560: LD_EXP 42
2564: PPUSH
2565: LD_INT 25
2567: PUSH
2568: LD_INT 2
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL_OW 72
2579: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_INT 6
2587: PPUSH
2588: LD_INT 116
2590: PPUSH
2591: LD_INT 55
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2601: LD_VAR 0 2
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 116
2611: PPUSH
2612: LD_INT 70
2614: PPUSH
2615: LD_INT 5
2617: PPUSH
2618: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2622: LD_VAR 0 2
2626: PPUSH
2627: LD_INT 31
2629: PPUSH
2630: LD_INT 109
2632: PPUSH
2633: LD_INT 50
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2643: LD_INT 35
2645: PPUSH
2646: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2650: LD_INT 22
2652: PUSH
2653: LD_INT 5
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 4
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 57
2675: PUSH
2676: EMPTY
2677: LIST
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: IFFALSE 2643
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 4
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 57
2724: PUSH
2725: EMPTY
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_EXP 42
2755: PPUSH
2756: LD_INT 25
2758: PUSH
2759: LD_INT 1
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 72
2770: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_VAR 0 3
2780: PPUSH
2781: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2785: LD_INT 35
2787: PPUSH
2788: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2792: LD_INT 22
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 30
2804: PUSH
2805: LD_INT 31
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 57
2817: PUSH
2818: EMPTY
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 2
2837: GREATEREQUAL
2838: IFFALSE 2785
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2840: LD_ADDR_VAR 0 2
2844: PUSH
2845: LD_EXP 42
2849: PPUSH
2850: LD_INT 25
2852: PUSH
2853: LD_INT 2
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 72
2864: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2865: LD_VAR 0 2
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: LD_INT 5
2876: PPUSH
2877: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2881: LD_VAR 0 2
2885: PUSH
2886: LD_INT 2
2888: ARRAY
2889: PUSH
2890: LD_VAR 0 2
2894: PUSH
2895: LD_INT 3
2897: ARRAY
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2912: LD_VAR 0 2
2916: PUSH
2917: LD_INT 2
2919: ARRAY
2920: PUSH
2921: LD_VAR 0 2
2925: PUSH
2926: LD_INT 3
2928: ARRAY
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2941: LD_VAR 0 2
2945: PUSH
2946: LD_INT 2
2948: ARRAY
2949: PUSH
2950: LD_VAR 0 2
2954: PUSH
2955: LD_INT 3
2957: ARRAY
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2967: LD_ADDR_VAR 0 4
2971: PUSH
2972: LD_INT 22
2974: PUSH
2975: LD_INT 5
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 30
2984: PUSH
2985: LD_INT 31
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 69
3000: ST_TO_ADDR
// for i := 1 to 2 do
3001: LD_ADDR_VAR 0 1
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 2
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3049
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3017: LD_VAR 0 2
3021: PUSH
3022: LD_VAR 0 1
3026: PUSH
3027: LD_INT 1
3029: PLUS
3030: ARRAY
3031: PPUSH
3032: LD_VAR 0 4
3036: PUSH
3037: LD_VAR 0 1
3041: ARRAY
3042: PPUSH
3043: CALL_OW 180
3047: GO 3014
3049: POP
3050: POP
// wait ( 1 1$00 ) ;
3051: LD_INT 2100
3053: PPUSH
3054: CALL_OW 67
// farmerBaseReady := true ;
3058: LD_ADDR_EXP 4
3062: PUSH
3063: LD_INT 1
3065: ST_TO_ADDR
// end ;
3066: PPOPN 4
3068: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3069: LD_EXP 4
3073: IFFALSE 3082
3075: PUSH
3076: LD_EXP 12
3080: NOT
3081: AND
3082: IFFALSE 3610
3084: GO 3086
3086: DISABLE
3087: LD_INT 0
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_EXP 42
3104: PPUSH
3105: LD_INT 25
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_EXP 39
3124: ADD
3125: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_EXP 42
3135: PPUSH
3136: LD_INT 25
3138: PUSH
3139: LD_INT 2
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 72
3150: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_INT 22
3158: PUSH
3159: LD_INT 5
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 21
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 24
3181: PUSH
3182: LD_INT 1000
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 69
3202: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 5
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 4
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PPUSH
3232: CALL_OW 69
3236: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3237: LD_VAR 0 4
3241: PUSH
3242: LD_INT 1
3244: ARRAY
3245: PPUSH
3246: CALL_OW 302
3250: IFFALSE 3316
// for i in sol do
3252: LD_ADDR_VAR 0 1
3256: PUSH
3257: LD_VAR 0 3
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3314
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3265: LD_VAR 0 1
3269: PPUSH
3270: CALL_OW 256
3274: PUSH
3275: LD_INT 999
3277: LESS
3278: IFFALSE 3292
3280: PUSH
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 310
3290: NOT
3291: AND
3292: IFFALSE 3312
// ComEnterUnit ( i , arm [ 1 ] ) ;
3294: LD_VAR 0 1
3298: PPUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 120
3312: GO 3262
3314: POP
3315: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3316: LD_VAR 0 2
3320: NOT
3321: IFFALSE 3354
3323: PUSH
3324: LD_INT 22
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 21
3336: PUSH
3337: LD_INT 1
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PPUSH
3348: CALL_OW 69
3352: NOT
3353: AND
3354: IFFALSE 3446
// begin uc_side := 5 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 5
3363: ST_TO_ADDR
// uc_nation := 2 ;
3364: LD_ADDR_OWVAR 21
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3372: LD_INT 0
3374: PPUSH
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 380
// eng := CreateHuman ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3395: LD_VAR 0 2
3399: PPUSH
3400: LD_INT 102
3402: PPUSH
3403: LD_INT 8
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3413: LD_VAR 0 2
3417: PPUSH
3418: LD_INT 110
3420: PPUSH
3421: LD_INT 60
3423: PPUSH
3424: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3428: LD_ADDR_EXP 42
3432: PUSH
3433: LD_EXP 42
3437: PUSH
3438: LD_VAR 0 2
3442: UNION
3443: ST_TO_ADDR
// end else
3444: GO 3610
// begin for i in eng do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: FOR_IN
3457: IFFALSE 3608
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3459: LD_INT 10
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL_OW 287
3469: IFFALSE 3520
// begin if IsInUnit ( i ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 310
3480: IFFALSE 3491
// ComExitBuilding ( i ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 308
3503: NOT
3504: IFFALSE 3518
// AddComMoveToArea ( i , collectFarmerArea ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 10
3513: PPUSH
3514: CALL_OW 173
// end else
3518: GO 3606
// begin if damagedBuilding then
3520: LD_VAR 0 5
3524: IFFALSE 3568
// begin if IsInUnit ( i ) then
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 310
3535: IFFALSE 3548
// ComExitBuilding ( i ) else
3537: LD_VAR 0 1
3541: PPUSH
3542: CALL_OW 122
3546: GO 3566
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_VAR 0 5
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 130
// end else
3566: GO 3606
// if not IsInUnit ( i ) and not HasTask ( i ) then
3568: LD_VAR 0 1
3572: PPUSH
3573: CALL_OW 310
3577: NOT
3578: IFFALSE 3592
3580: PUSH
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 314
3590: NOT
3591: AND
3592: IFFALSE 3606
// ComEnterUnit ( i , arDepot ) ;
3594: LD_VAR 0 1
3598: PPUSH
3599: LD_INT 5
3601: PPUSH
3602: CALL_OW 120
// end ; end ;
3606: GO 3456
3608: POP
3609: POP
// end ; end ;
3610: PPOPN 5
3612: END
// export function CargoEvacuation ; begin
3613: LD_INT 0
3615: PPUSH
// wait ( 0 0$3 ) ;
3616: LD_INT 105
3618: PPUSH
3619: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3623: LD_ADDR_EXP 22
3627: PUSH
3628: LD_EXP 22
3632: PUSH
3633: LD_INT 1
3635: MINUS
3636: ST_TO_ADDR
// if omarCargoCounter = 0 then
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3649
// exit ;
3647: GO 3966
// if omarCargo then
3649: LD_EXP 46
3653: IFFALSE 3664
// RemoveUnit ( omarCargo ) ;
3655: LD_EXP 46
3659: PPUSH
3660: CALL_OW 64
// omarCargo := PrepareCargo ;
3664: LD_ADDR_EXP 46
3668: PUSH
3669: CALL 3971 0 0
3673: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3674: LD_EXP 46
3678: PPUSH
3679: LD_INT 0
3681: PPUSH
3682: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 46
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3701: LD_INT 35
3703: PPUSH
3704: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3708: LD_EXP 46
3712: PPUSH
3713: LD_INT 107
3715: PPUSH
3716: LD_INT 59
3718: PPUSH
3719: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3723: LD_EXP 46
3727: PPUSH
3728: CALL_OW 302
3732: NOT
3733: IFTRUE 3746
3735: PUSH
3736: LD_EXP 46
3740: PPUSH
3741: CALL_OW 301
3745: OR
3746: IFFALSE 3750
// exit ;
3748: GO 3966
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 107
3757: PPUSH
3758: LD_INT 59
3760: PPUSH
3761: CALL_OW 307
3765: IFTRUE 3785
3767: PUSH
3768: LD_EXP 46
3772: PPUSH
3773: LD_INT 5
3775: PPUSH
3776: CALL_OW 296
3780: PUSH
3781: LD_INT 6
3783: LESS
3784: OR
3785: IFFALSE 3701
// SetTag ( omarCargo , 1 ) ;
3787: LD_EXP 46
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: CALL_OW 109
// wait ( 0 0$03 ) ;
3799: LD_INT 105
3801: PPUSH
3802: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3806: LD_EXP 46
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3821: LD_EXP 46
3825: PPUSH
3826: LD_INT 103
3828: PPUSH
3829: LD_INT 9
3831: PPUSH
3832: CALL_OW 171
// wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3843: LD_EXP 46
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 100
3853: PPUSH
3854: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3858: LD_INT 35
3860: PPUSH
3861: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3865: LD_EXP 46
3869: PPUSH
3870: LD_INT 103
3872: PPUSH
3873: LD_INT 9
3875: PPUSH
3876: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3880: LD_EXP 46
3884: PPUSH
3885: CALL_OW 302
3889: NOT
3890: IFTRUE 3903
3892: PUSH
3893: LD_EXP 46
3897: PPUSH
3898: CALL_OW 301
3902: OR
3903: IFFALSE 3907
// exit ;
3905: GO 3966
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_INT 103
3914: PPUSH
3915: LD_INT 9
3917: PPUSH
3918: CALL_OW 307
3922: IFTRUE 3938
3924: PUSH
3925: LD_EXP 46
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: CALL_OW 308
3937: OR
3938: IFFALSE 3955
3940: PUSH
3941: LD_EXP 46
3945: PPUSH
3946: CALL_OW 110
3950: PUSH
3951: LD_INT 0
3953: GREATER
3954: AND
3955: IFFALSE 3858
// RemoveUnit ( omarCargo ) ;
3957: LD_EXP 46
3961: PPUSH
3962: CALL_OW 64
// end ;
3966: LD_VAR 0 1
3970: RET
// export function PrepareCargo ; var un , veh ; begin
3971: LD_INT 0
3973: PPUSH
3974: PPUSH
3975: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_INT 5
3983: PPUSH
3984: LD_INT 2
3986: PPUSH
3987: LD_INT 14
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 32
3998: PPUSH
3999: LD_INT 80
4001: PPUSH
4002: CALL 349 0 7
4006: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_INT 4
4014: PPUSH
4015: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 101
4026: PPUSH
4027: LD_INT 8
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4037: LD_INT 0
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 4
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_VAR 0 3
4069: PPUSH
4070: CALL_OW 52
// result := veh ;
4074: LD_ADDR_VAR 0 1
4078: PUSH
4079: LD_VAR 0 3
4083: ST_TO_ADDR
// end ; end_of_file
4084: LD_VAR 0 1
4088: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
4093: PPUSH
// usForces := [ ] ;
4094: LD_ADDR_EXP 47
4098: PUSH
4099: EMPTY
4100: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4101: LD_ADDR_EXP 49
4105: PUSH
4106: LD_INT 6
4108: PUSH
4109: LD_INT 32
4111: PUSH
4112: LD_INT 27
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 4
4126: PUSH
4127: LD_INT 43
4129: PUSH
4130: LD_INT 24
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 27
4144: PUSH
4145: LD_INT 29
4147: PUSH
4148: LD_INT 21
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4165: LD_INT 11
4167: PPUSH
4168: CALL_OW 274
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 150
4178: PUSH
4179: LD_INT 120
4181: PUSH
4182: LD_INT 100
4184: PUSH
4185: LD_INT 80
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_OWVAR 67
4198: ARRAY
4199: PPUSH
4200: CALL_OW 277
// if Difficulty = 1 then
4204: LD_OWVAR 67
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: IFFALSE 4221
// RemoveUnit ( hillBun ) ;
4214: LD_INT 14
4216: PPUSH
4217: CALL_OW 64
// uc_side := 1 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// uc_nation := 1 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hc_gallery :=  ;
4237: LD_ADDR_OWVAR 33
4241: PUSH
4242: LD_STRING 
4244: ST_TO_ADDR
// hc_name :=  ;
4245: LD_ADDR_OWVAR 26
4249: PUSH
4250: LD_STRING 
4252: ST_TO_ADDR
// hc_importance := 0 ;
4253: LD_ADDR_OWVAR 32
4257: PUSH
4258: LD_INT 0
4260: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 380
// usCommander := CreateHuman ;
4274: LD_ADDR_EXP 48
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4284: LD_EXP 48
4288: PPUSH
4289: LD_INT 11
4291: PPUSH
4292: CALL_OW 52
// if Difficulty > 1 then
4296: LD_OWVAR 67
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4386
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 1
4311: PPUSH
4312: LD_INT 1
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: LD_OWVAR 67
4330: ARRAY
4331: PPUSH
4332: CALL_OW 380
// un := CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// usForces := usForces union un ;
4346: LD_ADDR_EXP 47
4350: PUSH
4351: LD_EXP 47
4355: PUSH
4356: LD_VAR 0 3
4360: UNION
4361: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_INT 1
4369: PPUSH
4370: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 14
4381: PPUSH
4382: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4386: LD_ADDR_VAR 0 2
4390: PUSH
4391: DOUBLE
4392: LD_INT 1
4394: DEC
4395: ST_TO_ADDR
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 4
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: PUSH
4414: LD_OWVAR 67
4418: ARRAY
4419: PUSH
4420: FOR_TO
4421: IFFALSE 4567
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: LD_INT 1
4431: PUSH
4432: LD_INT 2
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: LD_OWVAR 67
4451: ARRAY
4452: PPUSH
4453: CALL_OW 380
// un := CreateHuman ;
4457: LD_ADDR_VAR 0 3
4461: PUSH
4462: CALL_OW 44
4466: ST_TO_ADDR
// usForces := usForces union un ;
4467: LD_ADDR_EXP 47
4471: PUSH
4472: LD_EXP 47
4476: PUSH
4477: LD_VAR 0 3
4481: UNION
4482: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4483: LD_VAR 0 3
4487: PPUSH
4488: LD_INT 39
4490: PPUSH
4491: LD_INT 24
4493: PPUSH
4494: LD_INT 4
4496: PPUSH
4497: LD_INT 0
4499: PPUSH
4500: CALL_OW 50
// if i < 3 then
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 3
4511: LESS
4512: IFFALSE 4565
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4514: LD_VAR 0 3
4518: PPUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 58
4531: PUSH
4532: EMPTY
4533: LIST
4534: PUSH
4535: LD_INT 30
4537: PUSH
4538: LD_INT 31
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: PPUSH
4550: CALL_OW 69
4554: PUSH
4555: LD_VAR 0 2
4559: ARRAY
4560: PPUSH
4561: CALL_OW 120
// end ;
4565: GO 4420
4567: POP
4568: POP
// for i := 1 to 2 do
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_INT 2
4581: PUSH
4582: FOR_TO
4583: IFFALSE 4647
// begin PrepareHuman ( false , 2 , 2 ) ;
4585: LD_INT 0
4587: PPUSH
4588: LD_INT 2
4590: PPUSH
4591: LD_INT 2
4593: PPUSH
4594: CALL_OW 380
// un := CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// usForces := usForces union un ;
4608: LD_ADDR_EXP 47
4612: PUSH
4613: LD_EXP 47
4617: PUSH
4618: LD_VAR 0 3
4622: UNION
4623: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_INT 39
4631: PPUSH
4632: LD_INT 24
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 50
// end ;
4645: GO 4582
4647: POP
4648: POP
// PrepareHuman ( false , 4 , 1 ) ;
4649: LD_INT 0
4651: PPUSH
4652: LD_INT 4
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 380
// un := CreateHuman ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// usForces := usForces union un ;
4672: LD_ADDR_EXP 47
4676: PUSH
4677: LD_EXP 47
4681: PUSH
4682: LD_VAR 0 3
4686: UNION
4687: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4688: LD_VAR 0 3
4692: PPUSH
4693: LD_INT 39
4695: PPUSH
4696: LD_INT 24
4698: PPUSH
4699: LD_INT 4
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: CALL_OW 50
// end ;
4709: LD_VAR 0 1
4713: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4714: LD_EXP 47
4718: IFFALSE 4727
4720: PUSH
4721: LD_EXP 7
4725: NOT
4726: AND
4727: IFFALSE 4736
4729: PUSH
4730: LD_EXP 15
4734: NOT
4735: AND
4736: IFFALSE 5169
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
4744: PPUSH
4745: PPUSH
4746: PPUSH
4747: PPUSH
// begin enable ;
4748: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: LD_EXP 47
4758: PPUSH
4759: LD_INT 25
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 72
4773: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4774: LD_ADDR_VAR 0 4
4778: PUSH
4779: LD_EXP 47
4783: PPUSH
4784: LD_INT 25
4786: PUSH
4787: LD_INT 1
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PPUSH
4794: CALL_OW 72
4798: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4799: LD_ADDR_VAR 0 5
4803: PUSH
4804: LD_EXP 47
4808: PPUSH
4809: LD_INT 25
4811: PUSH
4812: LD_INT 4
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PPUSH
4819: CALL_OW 72
4823: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4824: LD_INT 7
4826: PPUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 70
4841: PUSH
4842: LD_INT 1
4844: EQUAL
4845: IFFALSE 4923
// for i in sol do
4847: LD_ADDR_VAR 0 1
4851: PUSH
4852: LD_VAR 0 4
4856: PUSH
4857: FOR_IN
4858: IFFALSE 4921
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4860: LD_VAR 0 1
4864: PPUSH
4865: CALL_OW 310
4869: NOT
4870: IFTRUE 4893
4872: PUSH
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 310
4882: PPUSH
4883: CALL_OW 266
4887: PUSH
4888: LD_INT 4
4890: EQUAL
4891: NOT
4892: OR
4893: IFFALSE 4919
// begin ComExitBuilding ( i ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 37
4911: PPUSH
4912: LD_INT 23
4914: PPUSH
4915: CALL_OW 174
// end ;
4919: GO 4857
4921: POP
4922: POP
// if eng then
4923: LD_VAR 0 3
4927: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 22
4936: PUSH
4937: LD_INT 1
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 95
4946: PUSH
4947: LD_INT 7
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 21
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: LD_INT 24
4969: PUSH
4970: LD_INT 1000
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// if b then
4992: LD_VAR 0 2
4996: IFFALSE 5027
// begin ComExitBuilding ( eng ) ;
4998: LD_VAR 0 3
5002: PPUSH
5003: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: LD_VAR 0 2
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: CALL_OW 190
// end else
5025: GO 5169
// begin for i in eng do
5027: LD_ADDR_VAR 0 1
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: FOR_IN
5038: IFFALSE 5167
// if not HasTask ( i ) then
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 314
5049: NOT
5050: IFFALSE 5165
// begin if americanBuildList then
5052: LD_EXP 49
5056: IFFALSE 5141
// begin if IsInUnit ( i ) then
5058: LD_VAR 0 1
5062: PPUSH
5063: CALL_OW 310
5067: IFFALSE 5078
// ComExitBuilding ( i ) ;
5069: LD_VAR 0 1
5073: PPUSH
5074: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5078: LD_VAR 0 1
5082: PPUSH
5083: LD_EXP 49
5087: PUSH
5088: LD_INT 1
5090: ARRAY
5091: PUSH
5092: LD_INT 1
5094: ARRAY
5095: PPUSH
5096: LD_EXP 49
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PUSH
5105: LD_INT 2
5107: ARRAY
5108: PPUSH
5109: LD_EXP 49
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PUSH
5118: LD_INT 3
5120: ARRAY
5121: PPUSH
5122: LD_EXP 49
5126: PUSH
5127: LD_INT 1
5129: ARRAY
5130: PUSH
5131: LD_INT 4
5133: ARRAY
5134: PPUSH
5135: CALL_OW 205
// end else
5139: GO 5165
// if not IsInUnit ( i ) then
5141: LD_VAR 0 1
5145: PPUSH
5146: CALL_OW 310
5150: NOT
5151: IFFALSE 5165
// ComEnterUnit ( i , usDepot ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 11
5160: PPUSH
5161: CALL_OW 120
// end ;
5165: GO 5037
5167: POP
5168: POP
// end ; end ; end ;
5169: PPOPN 5
5171: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: LD_INT 35
5184: PUSH
5185: LD_INT 45
5187: PUSH
5188: LD_INT 48
5190: PUSH
5191: LD_INT 82
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: ST_TO_ADDR
// for i in tech do
5200: LD_ADDR_VAR 0 4
5204: PUSH
5205: LD_VAR 0 3
5209: PUSH
5210: FOR_IN
5211: IFFALSE 5229
// AddComResearch ( lab , i ) ;
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 4
5222: PPUSH
5223: CALL_OW 184
5227: GO 5210
5229: POP
5230: POP
// end ;
5231: LD_VAR 0 2
5235: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5236: LD_EXP 13
5240: IFFALSE 5254
5242: PUSH
5243: LD_EXP 24
5247: PUSH
5248: LD_EXP 28
5252: LESSEQUAL
5253: AND
5254: IFFALSE 5279
5256: GO 5258
5258: DISABLE
// begin enable ;
5259: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5260: LD_INT 35
5262: PPUSH
5263: LD_INT 2065
5265: PPUSH
5266: CALL_OW 12
5270: PPUSH
5271: CALL_OW 67
// SendConvoy ;
5275: CALL 5387 0 0
// end ;
5279: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5280: LD_EXP 7
5284: IFFALSE 5292
5286: PUSH
5287: LD_EXP 19
5291: AND
5292: IFFALSE 5386
5294: GO 5296
5296: DISABLE
// begin if americanHasEscaped then
5297: LD_EXP 9
5301: IFFALSE 5312
// wait ( 3 3$20 ) else
5303: LD_INT 7000
5305: PPUSH
5306: CALL_OW 67
5310: GO 5319
// wait ( 6 6$40 ) ;
5312: LD_INT 14000
5314: PPUSH
5315: CALL_OW 67
// SendAttack ;
5319: CALL 6172 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5323: LD_INT 16100
5325: PUSH
5326: LD_INT 14000
5328: PUSH
5329: LD_INT 13300
5331: PUSH
5332: LD_INT 12250
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PPUSH
5347: CALL_OW 67
// SendAttack ;
5351: CALL 6172 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5355: LD_EXP 20
5359: PUSH
5360: LD_INT 5
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 7
5368: PUSH
5369: LD_INT 8
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_OWVAR 67
5382: ARRAY
5383: LESS
5384: IFFALSE 5323
// end ;
5386: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5387: LD_INT 0
5389: PPUSH
5390: PPUSH
5391: PPUSH
5392: PPUSH
5393: PPUSH
5394: PPUSH
5395: PPUSH
5396: PPUSH
// road := rand ( 1 , 2 ) ;
5397: LD_ADDR_VAR 0 4
5401: PUSH
5402: LD_INT 1
5404: PPUSH
5405: LD_INT 2
5407: PPUSH
5408: CALL_OW 12
5412: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5413: LD_ADDR_VAR 0 8
5417: PUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 8
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5434: LD_ADDR_VAR 0 5
5438: PUSH
5439: LD_INT 35
5441: PUSH
5442: LD_INT 66
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 101
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5471: LD_ADDR_VAR 0 6
5475: PUSH
5476: LD_INT 34
5478: PUSH
5479: LD_INT 67
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 38
5488: PUSH
5489: LD_INT 62
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 43
5498: PUSH
5499: LD_INT 54
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 57
5508: PUSH
5509: LD_INT 57
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 77
5518: PUSH
5519: LD_INT 71
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 86
5528: PUSH
5529: LD_INT 60
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 89
5538: PUSH
5539: LD_INT 35
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 93
5548: PUSH
5549: LD_INT 17
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 97
5558: PUSH
5559: LD_INT 10
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 9
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: ST_TO_ADDR
// if road = 2 then
5588: LD_VAR 0 4
5592: PUSH
5593: LD_INT 2
5595: EQUAL
5596: IFFALSE 5613
// points := ReverseArray ( points ) ;
5598: LD_ADDR_VAR 0 6
5602: PUSH
5603: LD_VAR 0 6
5607: PPUSH
5608: CALL 75837 0 1
5612: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: LD_INT 1
5627: PPUSH
5628: LD_INT 12
5630: PPUSH
5631: LD_INT 80
5633: PPUSH
5634: CALL 349 0 7
// veh := CreateVehicle ;
5638: LD_ADDR_VAR 0 3
5642: PUSH
5643: CALL_OW 45
5647: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5648: LD_VAR 0 3
5652: PPUSH
5653: LD_VAR 0 5
5657: PUSH
5658: LD_VAR 0 4
5662: ARRAY
5663: PUSH
5664: LD_INT 3
5666: ARRAY
5667: PPUSH
5668: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_VAR 0 5
5681: PUSH
5682: LD_VAR 0 4
5686: ARRAY
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_VAR 0 5
5696: PUSH
5697: LD_VAR 0 4
5701: ARRAY
5702: PUSH
5703: LD_INT 2
5705: ARRAY
5706: PPUSH
5707: LD_INT 0
5709: PPUSH
5710: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5714: LD_INT 0
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_OWVAR 67
5724: PPUSH
5725: CALL_OW 380
// un := CreateHuman ;
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 3
5748: PPUSH
5749: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5753: LD_INT 70
5755: PUSH
5756: LD_INT 66
5758: PUSH
5759: LD_INT 62
5761: PUSH
5762: LD_INT 58
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: PUSH
5771: LD_OWVAR 67
5775: ARRAY
5776: PPUSH
5777: CALL_OW 13
5781: PUSH
5782: LD_OWVAR 1
5786: PUSH
5787: LD_INT 30
5789: MOD
5790: PLUS
5791: IFTRUE 5803
5793: PUSH
5794: LD_EXP 24
5798: PUSH
5799: LD_INT 4
5801: LESS
5802: OR
5803: IFFALSE 5820
// SetCargo ( veh , mat_cans , 100 ) ;
5805: LD_VAR 0 3
5809: PPUSH
5810: LD_INT 1
5812: PPUSH
5813: LD_INT 100
5815: PPUSH
5816: CALL_OW 290
// for i := 2 to points do
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: DOUBLE
5826: LD_INT 2
5828: DEC
5829: ST_TO_ADDR
5830: LD_VAR 0 6
5834: PUSH
5835: FOR_TO
5836: IFFALSE 5879
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5838: LD_VAR 0 3
5842: PPUSH
5843: LD_VAR 0 6
5847: PUSH
5848: LD_VAR 0 7
5852: ARRAY
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_VAR 0 6
5862: PUSH
5863: LD_VAR 0 7
5867: ARRAY
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PPUSH
5873: CALL_OW 171
5877: GO 5835
5879: POP
5880: POP
// convoyCounter := convoyCounter + 1 ;
5881: LD_ADDR_EXP 24
5885: PUSH
5886: LD_EXP 24
5890: PUSH
5891: LD_INT 1
5893: PLUS
5894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5902: LD_VAR 0 3
5906: PPUSH
5907: CALL_OW 255
5911: PUSH
5912: LD_INT 4
5914: NONEQUAL
5915: IFFALSE 5928
// begin ComStop ( veh ) ;
5917: LD_VAR 0 3
5921: PPUSH
5922: CALL_OW 141
// exit ;
5926: GO 6167
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5928: LD_VAR 0 3
5932: PPUSH
5933: CALL_OW 314
5937: NOT
5938: IFFALSE 5951
5940: PUSH
5941: LD_VAR 0 3
5945: PPUSH
5946: CALL_OW 302
5950: AND
5951: IFFALSE 5992
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_VAR 0 6
5962: PUSH
5963: LD_VAR 0 6
5967: ARRAY
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_VAR 0 6
5977: PUSH
5978: LD_VAR 0 6
5982: ARRAY
5983: PUSH
5984: LD_INT 2
5986: ARRAY
5987: PPUSH
5988: CALL_OW 111
// if not IsInUnit ( un ) then
5992: LD_VAR 0 2
5996: PPUSH
5997: CALL_OW 310
6001: NOT
6002: IFFALSE 6043
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: LD_VAR 0 6
6013: PUSH
6014: LD_VAR 0 6
6018: ARRAY
6019: PUSH
6020: LD_INT 1
6022: ARRAY
6023: PPUSH
6024: LD_VAR 0 6
6028: PUSH
6029: LD_VAR 0 6
6033: ARRAY
6034: PUSH
6035: LD_INT 2
6037: ARRAY
6038: PPUSH
6039: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6043: LD_VAR 0 3
6047: PPUSH
6048: LD_VAR 0 8
6052: PPUSH
6053: CALL_OW 308
6057: IFTRUE 6075
6059: PUSH
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_VAR 0 8
6069: PPUSH
6070: CALL_OW 308
6074: OR
6075: IFFALSE 5895
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6077: LD_VAR 0 2
6081: PPUSH
6082: CALL_OW 302
6086: IFFALSE 6100
6088: PUSH
6089: LD_VAR 0 3
6093: PPUSH
6094: CALL_OW 302
6098: NOT
6099: AND
6100: IFFALSE 6118
6102: PUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_VAR 0 8
6112: PPUSH
6113: CALL_OW 308
6117: AND
6118: IFFALSE 6129
// RemoveUnit ( un ) ;
6120: LD_VAR 0 2
6124: PPUSH
6125: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6129: LD_VAR 0 3
6133: PPUSH
6134: LD_VAR 0 8
6138: PPUSH
6139: CALL_OW 308
6143: IFFALSE 6156
6145: PUSH
6146: LD_VAR 0 3
6150: PPUSH
6151: CALL_OW 302
6155: AND
6156: IFFALSE 6167
// RemoveUnit ( veh ) ;
6158: LD_VAR 0 3
6162: PPUSH
6163: CALL_OW 64
// end ;
6167: LD_VAR 0 1
6171: RET
// export function SendAttack ; var un , veh , i ; begin
6172: LD_INT 0
6174: PPUSH
6175: PPUSH
6176: PPUSH
6177: PPUSH
// if blockAttack then
6178: LD_EXP 29
6182: IFFALSE 6205
// begin repeat wait ( 0 0$1 ) ;
6184: LD_INT 35
6186: PPUSH
6187: CALL_OW 67
// until not blockAttack ;
6191: LD_EXP 29
6195: NOT
6196: IFFALSE 6184
// wait ( 0 0$5 ) ;
6198: LD_INT 175
6200: PPUSH
6201: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6205: LD_INT 22
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 21
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PUSH
6234: LD_INT 10
6236: GREATER
6237: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6239: LD_INT 35
6241: PPUSH
6242: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6246: LD_INT 22
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: PUSH
6275: LD_INT 10
6277: LESSEQUAL
6278: IFFALSE 6239
// end ; IncomingAttack ;
6280: CALL 15716 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6284: LD_INT 2100
6286: PPUSH
6287: LD_INT 3500
6289: PPUSH
6290: CALL_OW 12
6294: PPUSH
6295: CALL_OW 67
// if blockAttack then
6299: LD_EXP 29
6303: IFFALSE 6326
// begin repeat wait ( 0 0$1 ) ;
6305: LD_INT 35
6307: PPUSH
6308: CALL_OW 67
// until not blockAttack ;
6312: LD_EXP 29
6316: NOT
6317: IFFALSE 6305
// wait ( 0 0$5 ) ;
6319: LD_INT 175
6321: PPUSH
6322: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6326: LD_ADDR_VAR 0 4
6330: PUSH
6331: DOUBLE
6332: LD_INT 1
6334: DEC
6335: ST_TO_ADDR
6336: LD_INT 3
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 5
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_OWVAR 67
6358: ARRAY
6359: PUSH
6360: LD_EXP 20
6364: PUSH
6365: LD_INT 3
6367: DIV
6368: PLUS
6369: PUSH
6370: FOR_TO
6371: IFFALSE 6487
// begin uc_side := 1 ;
6373: LD_ADDR_OWVAR 20
6377: PUSH
6378: LD_INT 1
6380: ST_TO_ADDR
// uc_nation := 1 ;
6381: LD_ADDR_OWVAR 21
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6389: LD_INT 0
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_OWVAR 67
6417: ARRAY
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6433: LD_VAR 0 2
6437: PPUSH
6438: LD_INT 37
6440: PPUSH
6441: LD_INT 70
6443: PPUSH
6444: LD_INT 3
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: CALL_OW 50
// usAttackers := usAttackers union un ;
6454: LD_ADDR_EXP 50
6458: PUSH
6459: LD_EXP 50
6463: PUSH
6464: LD_VAR 0 2
6468: UNION
6469: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6470: LD_VAR 0 2
6474: PPUSH
6475: LD_INT 40
6477: PPUSH
6478: LD_INT 65
6480: PPUSH
6481: CALL_OW 111
// end ;
6485: GO 6370
6487: POP
6488: POP
// uc_side := 1 ;
6489: LD_ADDR_OWVAR 20
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// uc_nation := 1 ;
6497: LD_ADDR_OWVAR 21
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6505: LD_INT 0
6507: PPUSH
6508: LD_INT 4
6510: PPUSH
6511: LD_INT 2
6513: PPUSH
6514: CALL_OW 380
// un := CreateHuman ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL_OW 44
6527: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 37
6535: PPUSH
6536: LD_INT 70
6538: PPUSH
6539: LD_INT 3
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 50
// usAttackers := usAttackers union un ;
6549: LD_ADDR_EXP 50
6553: PUSH
6554: LD_EXP 50
6558: PUSH
6559: LD_VAR 0 2
6563: UNION
6564: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6565: LD_VAR 0 2
6569: PPUSH
6570: LD_INT 40
6572: PPUSH
6573: LD_INT 65
6575: PPUSH
6576: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6580: LD_ADDR_VAR 0 4
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_OWVAR 67
6594: PUSH
6595: LD_EXP 20
6599: PUSH
6600: LD_INT 4
6602: DIV
6603: PLUS
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6802
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_INT 4
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PUSH
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 3
6670: PPUSH
6671: CALL_OW 12
6675: ARRAY
6676: PPUSH
6677: LD_INT 90
6679: PPUSH
6680: CALL 349 0 7
6684: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 35
6692: PPUSH
6693: LD_INT 65
6695: PPUSH
6696: LD_INT 0
6698: PPUSH
6699: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6703: LD_INT 0
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: LD_OWVAR 67
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: PPUSH
6718: CALL_OW 380
// un := CreateHuman ;
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: CALL_OW 44
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_VAR 0 3
6741: PPUSH
6742: CALL_OW 52
// usAttackers := usAttackers union un ;
6746: LD_ADDR_EXP 50
6750: PUSH
6751: LD_EXP 50
6755: PUSH
6756: LD_VAR 0 2
6760: UNION
6761: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6762: LD_VAR 0 3
6766: PPUSH
6767: LD_INT 39
6769: PPUSH
6770: LD_INT 60
6772: PPUSH
6773: CALL_OW 111
// wait ( 0 0$3 ) ;
6777: LD_INT 105
6779: PPUSH
6780: CALL_OW 67
// usAttackers := usAttackers union veh ;
6784: LD_ADDR_EXP 50
6788: PUSH
6789: LD_EXP 50
6793: PUSH
6794: LD_VAR 0 3
6798: UNION
6799: ST_TO_ADDR
// end ;
6800: GO 6605
6802: POP
6803: POP
// attackWave := attackWave + 1 ;
6804: LD_ADDR_EXP 20
6808: PUSH
6809: LD_EXP 20
6813: PUSH
6814: LD_INT 1
6816: PLUS
6817: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6818: LD_EXP 25
6822: PPUSH
6823: CALL_OW 427
// end ;
6827: LD_VAR 0 1
6831: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6832: LD_INT 0
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
// if retreatAllowed then
6845: LD_EXP 12
6849: IFFALSE 6861
// strategy := 2 else
6851: LD_ADDR_VAR 0 5
6855: PUSH
6856: LD_INT 2
6858: ST_TO_ADDR
6859: GO 6877
// strategy := rand ( 0 , 2 ) ;
6861: LD_ADDR_VAR 0 5
6865: PUSH
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 2
6871: PPUSH
6872: CALL_OW 12
6876: ST_TO_ADDR
// attackFormula := [ ] ;
6877: LD_ADDR_VAR 0 6
6881: PUSH
6882: EMPTY
6883: ST_TO_ADDR
// case strategy of 0 :
6884: LD_VAR 0 5
6888: PUSH
6889: LD_INT 0
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 7227
6897: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6898: LD_INT 11
6900: PPUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 30
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 70
6929: NOT
6930: IFFALSE 7002
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6932: LD_ADDR_VAR 0 6
6936: PUSH
6937: LD_INT 41
6939: PUSH
6940: LD_INT 34
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: PUSH
6950: LD_INT 53
6952: PUSH
6953: LD_INT 62
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 63
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 44
6972: PUSH
6973: LD_INT 45
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 37
6982: PUSH
6983: LD_INT 28
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7225
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7002: LD_INT 12
7004: PPUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 30
7020: PUSH
7021: LD_INT 4
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 30
7030: PUSH
7031: LD_INT 31
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 30
7040: PUSH
7041: LD_INT 32
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 70
7062: NOT
7063: IFFALSE 7146
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7065: LD_ADDR_VAR 0 6
7069: PUSH
7070: LD_INT 27
7072: PUSH
7073: LD_INT 42
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 27
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 53
7096: PUSH
7097: LD_INT 62
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 37
7106: PUSH
7107: LD_INT 63
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 44
7116: PUSH
7117: LD_INT 45
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 37
7126: PUSH
7127: LD_INT 28
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: ST_TO_ADDR
7144: GO 7225
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7146: LD_ADDR_VAR 0 6
7150: PUSH
7151: LD_INT 71
7153: PUSH
7154: LD_INT 67
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 54
7163: PUSH
7164: LD_INT 35
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 63
7177: PUSH
7178: LD_INT 40
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 37
7187: PUSH
7188: LD_INT 63
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 44
7197: PUSH
7198: LD_INT 45
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 37
7207: PUSH
7208: LD_INT 28
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
// end ; 1 :
7225: GO 7430
7227: LD_INT 1
7229: DOUBLE
7230: EQUAL
7231: IFTRUE 7235
7233: GO 7339
7235: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: LD_INT 71
7243: PUSH
7244: LD_INT 67
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 82
7253: PUSH
7254: LD_INT 23
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 53
7263: PUSH
7264: LD_INT 7
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 43
7273: PUSH
7274: LD_INT 10
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 53
7289: PUSH
7290: LD_INT 62
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 37
7299: PUSH
7300: LD_INT 63
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 44
7309: PUSH
7310: LD_INT 45
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 37
7319: PUSH
7320: LD_INT 28
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: ST_TO_ADDR
7337: GO 7430
7339: LD_INT 2
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7347
7345: GO 7429
7347: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7348: LD_ADDR_VAR 0 6
7352: PUSH
7353: LD_INT 90
7355: PUSH
7356: LD_INT 59
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 108
7365: PUSH
7366: LD_INT 64
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 82
7379: PUSH
7380: LD_INT 75
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 73
7389: PUSH
7390: LD_INT 67
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 101
7399: PUSH
7400: LD_INT 65
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 108
7409: PUSH
7410: LD_INT 62
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: ST_TO_ADDR
7427: GO 7430
7429: POP
// if not attackFormula then
7430: LD_VAR 0 6
7434: NOT
7435: IFFALSE 7439
// exit ;
7437: GO 9125
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7439: LD_ADDR_VAR 0 7
7443: PUSH
7444: LD_EXP 50
7448: PPUSH
7449: LD_INT 25
7451: PUSH
7452: LD_INT 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 72
7463: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_EXP 50
7473: PPUSH
7474: LD_INT 25
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 72
7488: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7489: LD_ADDR_VAR 0 9
7493: PUSH
7494: LD_EXP 50
7498: PPUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PPUSH
7509: CALL_OW 72
7513: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7514: LD_ADDR_VAR 0 10
7518: PUSH
7519: LD_EXP 50
7523: PPUSH
7524: LD_INT 21
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PPUSH
7534: CALL_OW 72
7538: ST_TO_ADDR
// if sci then
7539: LD_VAR 0 8
7543: IFFALSE 7580
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7545: LD_VAR 0 8
7549: PPUSH
7550: LD_VAR 0 6
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PUSH
7559: LD_INT 1
7561: ARRAY
7562: PPUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: PUSH
7572: LD_INT 2
7574: ARRAY
7575: PPUSH
7576: CALL_OW 111
// repeat wait ( 10 ) ;
7580: LD_INT 10
7582: PPUSH
7583: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7587: LD_ADDR_VAR 0 7
7591: PUSH
7592: LD_EXP 50
7596: PPUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PPUSH
7607: CALL_OW 72
7611: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7612: LD_ADDR_VAR 0 8
7616: PUSH
7617: LD_EXP 50
7621: PPUSH
7622: LD_INT 25
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 72
7636: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7637: LD_ADDR_VAR 0 9
7641: PUSH
7642: LD_EXP 50
7646: PPUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PPUSH
7657: CALL_OW 72
7661: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7662: LD_ADDR_VAR 0 10
7666: PUSH
7667: LD_EXP 50
7671: PPUSH
7672: LD_INT 21
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 72
7686: ST_TO_ADDR
// if sol then
7687: LD_VAR 0 7
7691: IFFALSE 8112
// begin for i in sol do
7693: LD_ADDR_VAR 0 2
7697: PUSH
7698: LD_VAR 0 7
7702: PUSH
7703: FOR_IN
7704: IFFALSE 8110
// begin tag := GetTag ( i ) ;
7706: LD_ADDR_VAR 0 4
7710: PUSH
7711: LD_VAR 0 2
7715: PPUSH
7716: CALL_OW 110
7720: ST_TO_ADDR
// if not tag then
7721: LD_VAR 0 4
7725: NOT
7726: IFFALSE 7835
// begin if GetLives ( i ) = 1000 then
7728: LD_VAR 0 2
7732: PPUSH
7733: CALL_OW 256
7737: PUSH
7738: LD_INT 1000
7740: EQUAL
7741: IFFALSE 7757
// SetTag ( i , 1 ) else
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_INT 1
7750: PPUSH
7751: CALL_OW 109
7755: GO 7833
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7757: LD_VAR 0 2
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_VAR 0 6
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PUSH
7784: LD_INT 2
7786: ARRAY
7787: PPUSH
7788: CALL_OW 297
7792: PUSH
7793: LD_INT 10
7795: GREATER
7796: IFFALSE 7833
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7798: LD_VAR 0 2
7802: PPUSH
7803: LD_VAR 0 6
7807: PUSH
7808: LD_INT 2
7810: ARRAY
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: LD_VAR 0 6
7820: PUSH
7821: LD_INT 2
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 111
// end else
7833: GO 8108
// begin if GetLives ( i ) < 760 then
7835: LD_VAR 0 2
7839: PPUSH
7840: CALL_OW 256
7844: PUSH
7845: LD_INT 760
7847: LESS
7848: IFFALSE 7899
// begin SetTag ( i , 0 ) ;
7850: LD_VAR 0 2
7854: PPUSH
7855: LD_INT 0
7857: PPUSH
7858: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7862: LD_VAR 0 2
7866: PPUSH
7867: LD_VAR 0 6
7871: PUSH
7872: LD_INT 2
7874: ARRAY
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: LD_VAR 0 6
7884: PUSH
7885: LD_INT 2
7887: ARRAY
7888: PUSH
7889: LD_INT 2
7891: ARRAY
7892: PPUSH
7893: CALL_OW 111
// end else
7897: GO 8108
// if tag <= attackFormula [ 1 ] then
7899: LD_VAR 0 4
7903: PUSH
7904: LD_VAR 0 6
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: LESSEQUAL
7913: IFFALSE 8074
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7915: LD_VAR 0 2
7919: PPUSH
7920: LD_VAR 0 6
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: LD_VAR 0 6
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PUSH
7948: LD_VAR 0 4
7952: ARRAY
7953: PUSH
7954: LD_INT 2
7956: ARRAY
7957: PPUSH
7958: CALL_OW 297
7962: PUSH
7963: LD_INT 6
7965: GREATER
7966: IFFALSE 8017
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7968: LD_VAR 0 2
7972: PPUSH
7973: LD_VAR 0 6
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PUSH
7982: LD_VAR 0 4
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_VAR 0 6
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_VAR 0 4
8005: ARRAY
8006: PUSH
8007: LD_INT 2
8009: ARRAY
8010: PPUSH
8011: CALL_OW 114
8015: GO 8072
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8017: LD_INT 81
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 91
8029: PUSH
8030: LD_VAR 0 2
8034: PUSH
8035: LD_INT 10
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 69
8051: NOT
8052: IFFALSE 8072
// SetTag ( i , tag + 1 ) ;
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 4
8063: PUSH
8064: LD_INT 1
8066: PLUS
8067: PPUSH
8068: CALL_OW 109
// end else
8072: GO 8108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8074: LD_VAR 0 2
8078: PPUSH
8079: LD_INT 81
8081: PUSH
8082: LD_INT 1
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PPUSH
8089: CALL_OW 69
8093: PPUSH
8094: LD_VAR 0 2
8098: PPUSH
8099: CALL_OW 74
8103: PPUSH
8104: CALL_OW 115
// end ; end ;
8108: GO 7703
8110: POP
8111: POP
// end ; if sci then
8112: LD_VAR 0 8
8116: IFFALSE 8387
// begin if not sol and not mech then
8118: LD_VAR 0 7
8122: NOT
8123: IFFALSE 8132
8125: PUSH
8126: LD_VAR 0 9
8130: NOT
8131: AND
8132: IFFALSE 8184
// begin for i in sci do
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_VAR 0 8
8143: PUSH
8144: FOR_IN
8145: IFFALSE 8180
// begin usForces := usForces union i ;
8147: LD_ADDR_EXP 47
8151: PUSH
8152: LD_EXP 47
8156: PUSH
8157: LD_VAR 0 2
8161: UNION
8162: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8163: LD_VAR 0 2
8167: PPUSH
8168: LD_INT 34
8170: PPUSH
8171: LD_INT 68
8173: PPUSH
8174: CALL_OW 111
// end ;
8178: GO 8144
8180: POP
8181: POP
// end else
8182: GO 8387
// for i in sci do
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: FOR_IN
8195: IFFALSE 8385
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8197: LD_VAR 0 2
8201: PPUSH
8202: LD_VAR 0 6
8206: PUSH
8207: LD_INT 2
8209: ARRAY
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 6
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 297
8232: PUSH
8233: LD_INT 10
8235: GREATER
8236: IFFALSE 8275
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8238: LD_VAR 0 2
8242: PPUSH
8243: LD_VAR 0 6
8247: PUSH
8248: LD_INT 2
8250: ARRAY
8251: PUSH
8252: LD_INT 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 6
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PUSH
8265: LD_INT 2
8267: ARRAY
8268: PPUSH
8269: CALL_OW 111
8273: GO 8383
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 1000
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 91
8299: PUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_INT 10
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PPUSH
8317: CALL_OW 72
8321: IFFALSE 8383
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8323: LD_VAR 0 2
8327: PPUSH
8328: LD_VAR 0 7
8332: PPUSH
8333: LD_INT 3
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 1000
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 91
8352: PUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 10
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 72
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 128
8383: GO 8194
8385: POP
8386: POP
// end ; if mech then
8387: LD_VAR 0 9
8391: IFFALSE 9107
// begin for i in mech do
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_VAR 0 9
8402: PUSH
8403: FOR_IN
8404: IFFALSE 9105
// begin tag := GetTag ( i ) ;
8406: LD_ADDR_VAR 0 4
8410: PUSH
8411: LD_VAR 0 2
8415: PPUSH
8416: CALL_OW 110
8420: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8421: LD_ADDR_VAR 0 11
8425: PUSH
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 310
8435: ST_TO_ADDR
// if not tag then
8436: LD_VAR 0 4
8440: NOT
8441: IFFALSE 8816
// begin if veh then
8443: LD_VAR 0 11
8447: IFFALSE 8618
// begin if GetLives ( veh ) = 1000 then
8449: LD_VAR 0 11
8453: PPUSH
8454: CALL_OW 256
8458: PUSH
8459: LD_INT 1000
8461: EQUAL
8462: IFFALSE 8478
// SetTag ( i , 1 ) else
8464: LD_VAR 0 2
8468: PPUSH
8469: LD_INT 1
8471: PPUSH
8472: CALL_OW 109
8476: GO 8616
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8478: LD_VAR 0 11
8482: PPUSH
8483: LD_VAR 0 6
8487: PUSH
8488: LD_INT 3
8490: ARRAY
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: LD_VAR 0 6
8500: PUSH
8501: LD_INT 3
8503: ARRAY
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PPUSH
8509: CALL_OW 297
8513: PUSH
8514: LD_INT 8
8516: GREATER
8517: IFFALSE 8556
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8519: LD_VAR 0 11
8523: PPUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_INT 3
8531: ARRAY
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 3
8544: ARRAY
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: CALL_OW 111
8554: GO 8616
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8556: LD_INT 81
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 12
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: NOT
8591: IFFALSE 8616
// begin ComExitVehicle ( i ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 11
8611: PPUSH
8612: CALL_OW 189
// end ; end else
8616: GO 8814
// if GetLives ( i ) < 400 then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 256
8627: PUSH
8628: LD_INT 400
8630: LESS
8631: IFFALSE 8682
// begin usAttackers := usAttackers diff i ;
8633: LD_ADDR_EXP 50
8637: PUSH
8638: LD_EXP 50
8642: PUSH
8643: LD_VAR 0 2
8647: DIFF
8648: ST_TO_ADDR
// usForces := usForces union i ;
8649: LD_ADDR_EXP 47
8653: PUSH
8654: LD_EXP 47
8658: PUSH
8659: LD_VAR 0 2
8663: UNION
8664: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 34
8672: PPUSH
8673: LD_INT 68
8675: PPUSH
8676: CALL_OW 111
// end else
8680: GO 8814
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8682: LD_VAR 0 10
8686: PPUSH
8687: LD_INT 58
8689: PUSH
8690: EMPTY
8691: LIST
8692: PUSH
8693: LD_INT 24
8695: PUSH
8696: LD_INT 1000
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 72
8711: IFFALSE 8725
8713: PUSH
8714: LD_VAR 0 2
8718: PPUSH
8719: CALL_OW 314
8723: NOT
8724: AND
8725: IFTRUE 8763
8727: PUSH
8728: LD_INT 81
8730: PUSH
8731: LD_INT 1
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: LD_INT 91
8740: PUSH
8741: LD_VAR 0 2
8745: PUSH
8746: LD_INT 9
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: OR
8763: IFFALSE 8814
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8765: LD_VAR 0 2
8769: PPUSH
8770: LD_VAR 0 10
8774: PPUSH
8775: LD_INT 58
8777: PUSH
8778: EMPTY
8779: LIST
8780: PUSH
8781: LD_INT 24
8783: PUSH
8784: LD_INT 250
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 72
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: CALL_OW 74
8809: PPUSH
8810: CALL_OW 120
// end else
8814: GO 9103
// begin if veh and GetLives ( veh ) < 760 then
8816: LD_VAR 0 11
8820: IFFALSE 8837
8822: PUSH
8823: LD_VAR 0 11
8827: PPUSH
8828: CALL_OW 256
8832: PUSH
8833: LD_INT 760
8835: LESS
8836: AND
8837: IFFALSE 8888
// begin SetTag ( i , 0 ) ;
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_INT 0
8846: PPUSH
8847: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8851: LD_VAR 0 11
8855: PPUSH
8856: LD_VAR 0 6
8860: PUSH
8861: LD_INT 3
8863: ARRAY
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 6
8873: PUSH
8874: LD_INT 3
8876: ARRAY
8877: PUSH
8878: LD_INT 2
8880: ARRAY
8881: PPUSH
8882: CALL_OW 111
// end else
8886: GO 9103
// if veh then
8888: LD_VAR 0 11
8892: IFFALSE 9103
// if tag <= attackFormula [ 4 ] then
8894: LD_VAR 0 4
8898: PUSH
8899: LD_VAR 0 6
8903: PUSH
8904: LD_INT 4
8906: ARRAY
8907: LESSEQUAL
8908: IFFALSE 9069
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8910: LD_VAR 0 11
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 4
8922: ARRAY
8923: PUSH
8924: LD_VAR 0 4
8928: ARRAY
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: LD_VAR 0 6
8938: PUSH
8939: LD_INT 4
8941: ARRAY
8942: PUSH
8943: LD_VAR 0 4
8947: ARRAY
8948: PUSH
8949: LD_INT 2
8951: ARRAY
8952: PPUSH
8953: CALL_OW 297
8957: PUSH
8958: LD_INT 6
8960: GREATER
8961: IFFALSE 9012
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8963: LD_VAR 0 11
8967: PPUSH
8968: LD_VAR 0 6
8972: PUSH
8973: LD_INT 4
8975: ARRAY
8976: PUSH
8977: LD_VAR 0 4
8981: ARRAY
8982: PUSH
8983: LD_INT 1
8985: ARRAY
8986: PPUSH
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 4
8994: ARRAY
8995: PUSH
8996: LD_VAR 0 4
9000: ARRAY
9001: PUSH
9002: LD_INT 2
9004: ARRAY
9005: PPUSH
9006: CALL_OW 114
9010: GO 9067
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 91
9024: PUSH
9025: LD_VAR 0 11
9029: PUSH
9030: LD_INT 10
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 69
9046: NOT
9047: IFFALSE 9067
// SetTag ( i , tag + 1 ) ;
9049: LD_VAR 0 2
9053: PPUSH
9054: LD_VAR 0 4
9058: PUSH
9059: LD_INT 1
9061: PLUS
9062: PPUSH
9063: CALL_OW 109
// end else
9067: GO 9103
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9069: LD_VAR 0 11
9073: PPUSH
9074: LD_INT 81
9076: PUSH
9077: LD_INT 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PPUSH
9084: CALL_OW 69
9088: PPUSH
9089: LD_VAR 0 2
9093: PPUSH
9094: CALL_OW 74
9098: PPUSH
9099: CALL_OW 115
// end ; end ;
9103: GO 8403
9105: POP
9106: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9107: LD_EXP 50
9111: PPUSH
9112: LD_INT 52
9114: PUSH
9115: EMPTY
9116: LIST
9117: PPUSH
9118: CALL_OW 72
9122: NOT
9123: IFFALSE 7580
// end ;
9125: LD_VAR 0 1
9129: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9130: LD_INT 22
9132: PUSH
9133: LD_INT 1
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 32
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: IFFALSE 9235
9160: GO 9162
9162: DISABLE
9163: LD_INT 0
9165: PPUSH
// begin enable ;
9166: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9167: LD_ADDR_VAR 0 1
9171: PUSH
9172: LD_INT 22
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 32
9184: PUSH
9185: LD_INT 1
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 69
9200: PUSH
9201: FOR_IN
9202: IFFALSE 9233
// if GetFuel ( i ) < 10 then
9204: LD_VAR 0 1
9208: PPUSH
9209: CALL_OW 261
9213: PUSH
9214: LD_INT 10
9216: LESS
9217: IFFALSE 9231
// SetFuel ( i , 10 ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_INT 10
9226: PPUSH
9227: CALL_OW 240
9231: GO 9201
9233: POP
9234: POP
// end ; end_of_file
9235: PPOPN 1
9237: END
// export function Action ; var hasAll , i , tmp ; begin
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 21
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 23
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: PUSH
9289: LD_INT 7
9291: GREATEREQUAL
9292: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9293: LD_VAR 0 2
9297: PPUSH
9298: LD_STRING 03_HasAll
9300: PPUSH
9301: CALL_OW 39
// Video ( true ) ;
9305: LD_INT 1
9307: PPUSH
9308: CALL 80719 0 1
// CenterNowOnUnits ( Heike ) ;
9312: LD_EXP 31
9316: PPUSH
9317: CALL_OW 87
// wait ( 0 0$2 ) ;
9321: LD_INT 70
9323: PPUSH
9324: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9328: LD_EXP 39
9332: PPUSH
9333: LD_STRING DF-1-start
9335: PPUSH
9336: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9340: LD_EXP 31
9344: PPUSH
9345: LD_EXP 39
9349: PPUSH
9350: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9354: LD_EXP 31
9358: PPUSH
9359: LD_STRING DH-1-start
9361: PPUSH
9362: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9366: LD_EXP 40
9370: PPUSH
9371: LD_INT 92
9373: PPUSH
9374: LD_INT 21
9376: PPUSH
9377: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9381: LD_EXP 35
9385: PPUSH
9386: LD_INT 94
9388: PPUSH
9389: LD_INT 23
9391: PPUSH
9392: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9396: LD_EXP 43
9400: PUSH
9401: LD_INT 1
9403: ARRAY
9404: PPUSH
9405: LD_INT 90
9407: PPUSH
9408: LD_INT 23
9410: PPUSH
9411: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9415: LD_EXP 43
9419: PUSH
9420: LD_INT 2
9422: ARRAY
9423: PPUSH
9424: LD_INT 93
9426: PPUSH
9427: LD_INT 25
9429: PPUSH
9430: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9434: LD_EXP 43
9438: PPUSH
9439: LD_EXP 40
9443: PPUSH
9444: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9448: LD_EXP 40
9452: PUSH
9453: LD_EXP 35
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_EXP 31
9466: PPUSH
9467: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9471: LD_EXP 31
9475: PPUSH
9476: LD_EXP 40
9480: PPUSH
9481: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9485: LD_INT 35
9487: PPUSH
9488: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9492: LD_EXP 40
9496: PPUSH
9497: LD_INT 92
9499: PPUSH
9500: LD_INT 21
9502: PPUSH
9503: CALL_OW 307
9507: IFFALSE 9485
// Say ( Omar , DO-1-start ) ;
9509: LD_EXP 40
9513: PPUSH
9514: LD_STRING DO-1-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9521: LD_EXP 31
9525: PPUSH
9526: LD_STRING DH-2-start
9528: PPUSH
9529: CALL_OW 88
// if hasAll then
9533: LD_VAR 0 2
9537: IFFALSE 9665
// begin Say ( Omar , DO-2-start ) ;
9539: LD_EXP 40
9543: PPUSH
9544: LD_STRING DO-2-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9551: LD_EXP 40
9555: PPUSH
9556: LD_STRING DO-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9563: LD_EXP 31
9567: PPUSH
9568: LD_STRING DH-3-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9575: LD_EXP 39
9579: PPUSH
9580: LD_STRING DF-2-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9587: LD_EXP 40
9591: PPUSH
9592: LD_EXP 39
9596: PPUSH
9597: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9601: LD_EXP 40
9605: PPUSH
9606: LD_STRING DO-4-start
9608: PPUSH
9609: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9613: LD_EXP 39
9617: PPUSH
9618: LD_STRING DF-3-start
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_STRING DO-5-start
9632: PPUSH
9633: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9637: LD_EXP 39
9641: PPUSH
9642: LD_STRING DF-4-start
9644: PPUSH
9645: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9649: LD_EXP 40
9653: PPUSH
9654: LD_EXP 31
9658: PPUSH
9659: CALL_OW 119
// end else
9663: GO 9765
// begin Say ( Omar , DO-2-start-a ) ;
9665: LD_EXP 40
9669: PPUSH
9670: LD_STRING DO-2-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING DO-3-start-a
9684: PPUSH
9685: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9689: LD_EXP 31
9693: PPUSH
9694: LD_STRING DH-3-start-a
9696: PPUSH
9697: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9701: LD_EXP 39
9705: PPUSH
9706: LD_STRING DF-2-start-a
9708: PPUSH
9709: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9713: LD_EXP 40
9717: PPUSH
9718: LD_EXP 39
9722: PPUSH
9723: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9727: LD_EXP 40
9731: PPUSH
9732: LD_STRING DO-4-start-a
9734: PPUSH
9735: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9739: LD_EXP 39
9743: PPUSH
9744: LD_STRING DF-3-start-a
9746: PPUSH
9747: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9751: LD_EXP 40
9755: PPUSH
9756: LD_EXP 31
9760: PPUSH
9761: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9765: LD_INT 10
9767: PPUSH
9768: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9772: LD_EXP 40
9776: PPUSH
9777: LD_STRING DO-1-mission
9779: PPUSH
9780: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9784: LD_EXP 40
9788: PPUSH
9789: LD_STRING DO-2-mission
9791: PPUSH
9792: CALL_OW 88
// if not hasAll then
9796: LD_VAR 0 2
9800: NOT
9801: IFFALSE 9815
// Say ( Omar , DO-3-mission ) ;
9803: LD_EXP 40
9807: PPUSH
9808: LD_STRING DO-3-mission
9810: PPUSH
9811: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9815: LD_EXP 40
9819: PPUSH
9820: LD_STRING DO-4-mission
9822: PPUSH
9823: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9827: LD_EXP 31
9831: PPUSH
9832: LD_STRING DH-1-mission
9834: PPUSH
9835: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9839: LD_EXP 39
9843: PPUSH
9844: LD_STRING DF-1-mission
9846: PPUSH
9847: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9851: LD_EXP 40
9855: PPUSH
9856: LD_STRING DO-5-mission
9858: PPUSH
9859: CALL_OW 88
// if not hasAll then
9863: LD_VAR 0 2
9867: NOT
9868: IFFALSE 10003
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9870: LD_ADDR_VAR 0 4
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 21
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 23
9897: PUSH
9898: LD_INT 2
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 69
9914: ST_TO_ADDR
// for i := 7 downto tmp do
9915: LD_ADDR_VAR 0 3
9919: PUSH
9920: DOUBLE
9921: LD_INT 7
9923: INC
9924: ST_TO_ADDR
9925: LD_VAR 0 4
9929: PUSH
9930: FOR_DOWNTO
9931: IFFALSE 10001
// begin if omarSquad < 3 then
9933: LD_EXP 43
9937: PUSH
9938: LD_INT 3
9940: LESS
9941: IFFALSE 9945
// break ;
9943: GO 10001
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9945: LD_EXP 43
9949: PUSH
9950: LD_INT 3
9952: ARRAY
9953: PPUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9961: LD_ADDR_EXP 45
9965: PUSH
9966: LD_EXP 45
9970: PUSH
9971: LD_EXP 43
9975: PUSH
9976: LD_INT 3
9978: ARRAY
9979: UNION
9980: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9981: LD_ADDR_EXP 43
9985: PUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 3
9993: PPUSH
9994: CALL_OW 3
9998: ST_TO_ADDR
// end ;
9999: GO 9930
10001: POP
10002: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10003: LD_EXP 40
10007: PUSH
10008: LD_EXP 43
10012: ADD
10013: PPUSH
10014: LD_INT 103
10016: PPUSH
10017: LD_INT 9
10019: PPUSH
10020: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10024: LD_VAR 0 2
10028: IFFALSE 10041
10030: PUSH
10031: LD_EXP 36
10035: PPUSH
10036: CALL_OW 302
10040: AND
10041: IFFALSE 10102
// begin wait ( 0 0$3 ) ;
10043: LD_INT 105
10045: PPUSH
10046: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10050: LD_EXP 36
10054: PPUSH
10055: LD_EXP 39
10059: PPUSH
10060: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10064: LD_EXP 36
10068: PPUSH
10069: LD_STRING DK-1-side
10071: PPUSH
10072: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10076: LD_EXP 39
10080: PPUSH
10081: LD_EXP 36
10085: PPUSH
10086: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10090: LD_EXP 39
10094: PPUSH
10095: LD_STRING DF-1-side
10097: PPUSH
10098: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10102: LD_INT 22
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 69
10116: PPUSH
10117: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10121: LD_EXP 39
10125: PUSH
10126: LD_EXP 42
10130: ADD
10131: PPUSH
10132: LD_INT 108
10134: PPUSH
10135: LD_INT 62
10137: PPUSH
10138: CALL_OW 111
// gameStarted := true ;
10142: LD_ADDR_EXP 3
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10150: LD_INT 105
10152: PPUSH
10153: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10157: LD_EXP 31
10161: PPUSH
10162: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10166: LD_EXP 31
10170: PPUSH
10171: LD_EXP 35
10175: PPUSH
10176: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10180: LD_INT 22
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PUSH
10195: LD_EXP 31
10199: DIFF
10200: PPUSH
10201: LD_EXP 31
10205: PPUSH
10206: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10210: LD_EXP 31
10214: PPUSH
10215: LD_STRING DH-1-explore
10217: PPUSH
10218: CALL_OW 88
// if Givi then
10222: LD_EXP 32
10226: IFFALSE 10242
// Say ( Givi , DG-1-explore ) else
10228: LD_EXP 32
10232: PPUSH
10233: LD_STRING DG-1-explore
10235: PPUSH
10236: CALL_OW 88
10240: GO 10279
// if heikeSecondSquad then
10242: LD_EXP 45
10246: IFFALSE 10279
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10248: LD_EXP 45
10252: PPUSH
10253: LD_INT 26
10255: PUSH
10256: LD_INT 1
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 72
10267: PUSH
10268: LD_INT 1
10270: ARRAY
10271: PPUSH
10272: LD_STRING DArm-1-explore
10274: PPUSH
10275: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_STRING DA-1-explore
10286: PPUSH
10287: CALL_OW 88
// if Sophia then
10291: LD_EXP 37
10295: IFFALSE 10373
// begin Say ( Sophia , DS-2-explore ) ;
10297: LD_EXP 37
10301: PPUSH
10302: LD_STRING DS-2-explore
10304: PPUSH
10305: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10309: LD_EXP 35
10313: PPUSH
10314: LD_STRING DA-2-explore
10316: PPUSH
10317: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10321: LD_EXP 37
10325: PPUSH
10326: LD_EXP 35
10330: PPUSH
10331: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10335: LD_EXP 35
10339: PPUSH
10340: LD_EXP 37
10344: PPUSH
10345: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DS-3-explore
10356: PPUSH
10357: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10361: LD_EXP 35
10365: PPUSH
10366: LD_STRING DA-3-explore
10368: PPUSH
10369: CALL_OW 88
// end ; if Mike then
10373: LD_EXP 33
10377: IFFALSE 10433
// begin Say ( Mike , DM-1-explore ) ;
10379: LD_EXP 33
10383: PPUSH
10384: LD_STRING DM-1-explore
10386: PPUSH
10387: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10391: LD_EXP 31
10395: PPUSH
10396: LD_STRING DH-2-explore
10398: PPUSH
10399: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10403: LD_EXP 33
10407: PPUSH
10408: LD_STRING DM-2-explore
10410: PPUSH
10411: CALL_OW 88
// if Kaia then
10415: LD_EXP 36
10419: IFFALSE 10433
// Say ( Kaia , DK-1-explore ) ;
10421: LD_EXP 36
10425: PPUSH
10426: LD_STRING DK-1-explore
10428: PPUSH
10429: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10433: LD_INT 22
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: PPUSH
10448: CALL_OW 139
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 80719 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10459: LD_STRING BuildBase
10461: PPUSH
10462: CALL_OW 337
// SaveForQuickRestart ;
10466: CALL_OW 22
// end ;
10470: LD_VAR 0 1
10474: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10475: LD_EXP 5
10479: IFFALSE 10488
10481: PUSH
10482: LD_EXP 7
10486: NOT
10487: AND
10488: IFFALSE 10679
10490: GO 10492
10492: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10493: LD_EXP 48
10497: PPUSH
10498: LD_STRING DUsm-4-assault
10500: PPUSH
10501: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10505: LD_INT 35
10507: PPUSH
10508: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 50
10534: PUSH
10535: EMPTY
10536: LIST
10537: PUSH
10538: LD_INT 95
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: IFFALSE 10505
// if not IsOk ( usCommander ) or americanBaseCaptured then
10560: LD_EXP 48
10564: PPUSH
10565: CALL_OW 302
10569: NOT
10570: IFTRUE 10578
10572: PUSH
10573: LD_EXP 7
10577: OR
10578: IFFALSE 10582
// exit ;
10580: GO 10679
// repeat wait ( 0 0$1 ) ;
10582: LD_INT 35
10584: PPUSH
10585: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10589: LD_INT 22
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 21
10601: PUSH
10602: LD_INT 1
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 50
10611: PUSH
10612: EMPTY
10613: LIST
10614: PUSH
10615: LD_INT 95
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: NOT
10636: IFFALSE 10582
// wait ( 0 0$3 ) ;
10638: LD_INT 105
10640: PPUSH
10641: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10645: LD_EXP 48
10649: PPUSH
10650: CALL_OW 302
10654: NOT
10655: IFTRUE 10663
10657: PUSH
10658: LD_EXP 7
10662: OR
10663: IFFALSE 10667
// exit ;
10665: GO 10679
// Say ( usCommander , DUsm-3-assault ) ;
10667: LD_EXP 48
10671: PPUSH
10672: LD_STRING DUsm-3-assault
10674: PPUSH
10675: CALL_OW 88
// end ;
10679: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10680: LD_EXP 6
10684: NOT
10685: IFFALSE 10694
10687: PUSH
10688: LD_EXP 7
10692: NOT
10693: AND
10694: IFFALSE 10729
10696: PUSH
10697: LD_INT 5
10699: PPUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 70
10728: AND
10729: IFFALSE 10738
10731: PUSH
10732: LD_EXP 7
10736: NOT
10737: AND
10738: IFFALSE 10823
10740: GO 10742
10742: DISABLE
// begin if Mike then
10743: LD_EXP 33
10747: IFFALSE 10763
// Say ( Mike , DM-1-scout ) else
10749: LD_EXP 33
10753: PPUSH
10754: LD_STRING DM-1-scout
10756: PPUSH
10757: CALL_OW 88
10761: GO 10794
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10763: LD_EXP 45
10767: PPUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 72
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PPUSH
10787: LD_STRING DArm-1-explore
10789: PPUSH
10790: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10794: LD_INT 54
10796: PPUSH
10797: LD_INT 35
10799: PPUSH
10800: LD_INT 2
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10810: LD_INT 54
10812: PPUSH
10813: LD_INT 35
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 331
// end ;
10823: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10824: LD_INT 6
10826: PPUSH
10827: LD_INT 22
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 70
10855: IFFALSE 10864
10857: PUSH
10858: LD_EXP 6
10862: NOT
10863: AND
10864: IFFALSE 10873
10866: PUSH
10867: LD_EXP 7
10871: NOT
10872: AND
10873: IFFALSE 11127
10875: GO 10877
10877: DISABLE
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
10882: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_EXP 45
10892: PPUSH
10893: LD_INT 26
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_EXP 45
10917: PPUSH
10918: LD_INT 26
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PPUSH
10928: CALL_OW 72
10932: ST_TO_ADDR
// DialogueOn ;
10933: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10937: LD_INT 36
10939: PPUSH
10940: LD_INT 22
10942: PPUSH
10943: LD_INT 2
10945: PPUSH
10946: LD_INT 8
10948: PPUSH
10949: CALL_OW 330
// dwait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: CALL_OW 68
// speakerOk := false ;
10960: LD_ADDR_VAR 0 3
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// if Mike then
10968: LD_EXP 33
10972: IFFALSE 10994
// speakerOk := Say ( Mike , DM-1-spot ) else
10974: LD_ADDR_VAR 0 3
10978: PUSH
10979: LD_EXP 33
10983: PPUSH
10984: LD_STRING DM-1-spot
10986: PPUSH
10987: CALL_OW 88
10991: ST_TO_ADDR
10992: GO 11022
// if randomMen then
10994: LD_VAR 0 1
10998: IFFALSE 11022
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 1
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PPUSH
11014: LD_STRING DArm-1-spot-a
11016: PPUSH
11017: CALL_OW 88
11021: ST_TO_ADDR
// if speakerOk then
11022: LD_VAR 0 3
11026: IFFALSE 11070
// begin if Givi then
11028: LD_EXP 32
11032: IFFALSE 11048
// Say ( Givi , DG-1-spot ) else
11034: LD_EXP 32
11038: PPUSH
11039: LD_STRING DG-1-spot
11041: PPUSH
11042: CALL_OW 88
11046: GO 11070
// if randomWomen then
11048: LD_VAR 0 2
11052: IFFALSE 11070
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11054: LD_VAR 0 2
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PPUSH
11063: LD_STRING DArf-1-spot-a
11065: PPUSH
11066: CALL_OW 88
// end ; if Mike then
11070: LD_EXP 33
11074: IFFALSE 11090
// Say ( Heike , DH-1-spot ) else
11076: LD_EXP 31
11080: PPUSH
11081: LD_STRING DH-1-spot
11083: PPUSH
11084: CALL_OW 88
11088: GO 11102
// Say ( Heike , DH-1-spot-a ) ;
11090: LD_EXP 31
11094: PPUSH
11095: LD_STRING DH-1-spot-a
11097: PPUSH
11098: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11102: LD_INT 36
11104: PPUSH
11105: LD_INT 22
11107: PPUSH
11108: LD_INT 2
11110: PPUSH
11111: CALL_OW 331
// DialogueOff ;
11115: CALL_OW 7
// americanBaseSpoted := true ;
11119: LD_ADDR_EXP 6
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// end ;
11127: PPOPN 3
11129: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11130: LD_EXP 6
11134: NOT
11135: IFFALSE 11167
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: AND
11167: IFFALSE 11176
11169: PUSH
11170: LD_EXP 7
11174: NOT
11175: AND
11176: IFFALSE 11262
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin americanBaseSpoted := true ;
11184: LD_ADDR_EXP 6
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11192: LD_ADDR_VAR 0 1
11196: PUSH
11197: LD_EXP 45
11201: PPUSH
11202: LD_INT 26
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 72
11216: ST_TO_ADDR
// if not randomMen then
11217: LD_VAR 0 1
11221: NOT
11222: IFFALSE 11226
// exit ;
11224: GO 11262
// DialogueOn ;
11226: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 1
11237: ARRAY
11238: PPUSH
11239: LD_STRING DArm-1-spot-a
11241: PPUSH
11242: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11246: LD_EXP 31
11250: PPUSH
11251: LD_STRING DH-1-spot-a
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// end ;
11262: PPOPN 1
11264: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11265: LD_INT 11
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: IFTRUE 11325
11278: PUSH
11279: LD_INT 7
11281: PPUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 3
11294: PUSH
11295: LD_INT 50
11297: PUSH
11298: EMPTY
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 31
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: OR
11325: IFTRUE 11350
11327: PUSH
11328: LD_INT 7
11330: PPUSH
11331: LD_INT 22
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 70
11345: PUSH
11346: LD_INT 2
11348: GREATER
11349: OR
11350: IFTRUE 11362
11352: PUSH
11353: LD_EXP 47
11357: PUSH
11358: LD_INT 4
11360: LESSEQUAL
11361: OR
11362: IFFALSE 11958
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
// begin wait ( 0 0$3 ) ;
11371: LD_INT 105
11373: PPUSH
11374: CALL_OW 67
// americanStartRun := true ;
11378: LD_ADDR_EXP 15
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// if IsOk ( usCommander ) then
11386: LD_EXP 48
11390: PPUSH
11391: CALL_OW 302
11395: IFFALSE 11425
// begin usForces := usForces union usCommander ;
11397: LD_ADDR_EXP 47
11401: PUSH
11402: LD_EXP 47
11406: PUSH
11407: LD_EXP 48
11411: UNION
11412: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11413: LD_EXP 48
11417: PPUSH
11418: LD_STRING DUsm-1-assault
11420: PPUSH
11421: CALL_OW 88
// end ; for i in usForces do
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_EXP 47
11434: PUSH
11435: FOR_IN
11436: IFFALSE 11482
// begin if IsInUnit ( i ) then
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 310
11447: IFFALSE 11458
// ComExitBuilding ( i ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: CALL_OW 122
// wait ( 3 ) ;
11458: LD_INT 3
11460: PPUSH
11461: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 34
11472: PPUSH
11473: LD_INT 67
11475: PPUSH
11476: CALL_OW 111
// end ;
11480: GO 11435
11482: POP
11483: POP
// Say ( Heike , DH-1-assault ) ;
11484: LD_EXP 31
11488: PPUSH
11489: LD_STRING DH-1-assault
11491: PPUSH
11492: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11496: LD_INT 35
11498: PPUSH
11499: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11503: LD_VAR 0 1
11507: PPUSH
11508: LD_INT 34
11510: PPUSH
11511: LD_INT 67
11513: PPUSH
11514: CALL_OW 111
// until not usForces ;
11518: LD_EXP 47
11522: NOT
11523: IFFALSE 11496
// music_nat := 2 ;
11525: LD_ADDR_OWVAR 71
11529: PUSH
11530: LD_INT 2
11532: ST_TO_ADDR
// music_class := music_victory ;
11533: LD_ADDR_OWVAR 72
11537: PUSH
11538: LD_INT 4
11540: ST_TO_ADDR
// if not americanHasEscaped then
11541: LD_EXP 9
11545: NOT
11546: IFFALSE 11567
// begin Say ( Heike , DH-2-assault ) ;
11548: LD_EXP 31
11552: PPUSH
11553: LD_STRING DH-2-assault
11555: PPUSH
11556: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11560: LD_STRING ACH_CLEAN
11562: PPUSH
11563: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11567: LD_INT 70
11569: PPUSH
11570: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11574: LD_INT 35
11576: PPUSH
11577: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11581: LD_INT 22
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 21
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: LD_INT 50
11606: PUSH
11607: EMPTY
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: NOT
11624: IFFALSE 11574
// InGameOn ;
11626: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11630: LD_INT 11
11632: PPUSH
11633: CALL_OW 255
11637: PUSH
11638: LD_INT 2
11640: EQUAL
11641: NOT
11642: IFFALSE 11654
// SetSide ( usDepot , 2 ) ;
11644: LD_INT 11
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11654: LD_INT 35
11656: PPUSH
11657: LD_INT 22
11659: PPUSH
11660: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11664: LD_EXP 31
11668: PPUSH
11669: LD_INT 35
11671: PPUSH
11672: LD_INT 22
11674: PPUSH
11675: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11679: LD_EXP 31
11683: PPUSH
11684: LD_INT 38
11686: PPUSH
11687: LD_INT 25
11689: PPUSH
11690: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11694: LD_EXP 35
11698: PUSH
11699: LD_EXP 44
11703: UNION
11704: PUSH
11705: LD_EXP 45
11709: UNION
11710: PPUSH
11711: LD_INT 39
11713: PPUSH
11714: LD_INT 26
11716: PPUSH
11717: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11721: LD_EXP 35
11725: PUSH
11726: LD_EXP 44
11730: UNION
11731: PUSH
11732: LD_EXP 45
11736: UNION
11737: PPUSH
11738: LD_EXP 31
11742: PPUSH
11743: CALL_OW 179
// p := 0 ;
11747: LD_ADDR_VAR 0 2
11751: PUSH
11752: LD_INT 0
11754: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11755: LD_INT 35
11757: PPUSH
11758: CALL_OW 67
// p := p + 1 ;
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: LD_INT 1
11774: PLUS
11775: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11776: LD_EXP 31
11780: PPUSH
11781: CALL_OW 314
11785: NOT
11786: IFTRUE 11798
11788: PUSH
11789: LD_VAR 0 2
11793: PUSH
11794: LD_INT 10
11796: GREATER
11797: OR
11798: IFFALSE 11755
// Say ( Heike , DH-1-capture ) ;
11800: LD_EXP 31
11804: PPUSH
11805: LD_STRING DH-1-capture
11807: PPUSH
11808: CALL_OW 88
// if IsOk ( Markov ) then
11812: LD_EXP 38
11816: PPUSH
11817: CALL_OW 302
11821: IFFALSE 11835
// Say ( Markov , DMar-1-capture ) ;
11823: LD_EXP 38
11827: PPUSH
11828: LD_STRING DMar-1-capture
11830: PPUSH
11831: CALL_OW 88
// if IsOk ( Sophia ) then
11835: LD_EXP 37
11839: PPUSH
11840: CALL_OW 302
11844: IFFALSE 11870
// begin Say ( Heike , DH-2-capture ) ;
11846: LD_EXP 31
11850: PPUSH
11851: LD_STRING DH-2-capture
11853: PPUSH
11854: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING DS-1-capture
11865: PPUSH
11866: CALL_OW 88
// end ; americanBaseCaptured := true ;
11870: LD_ADDR_EXP 7
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// InGameOff ;
11878: CALL_OW 9
// music_nat := music_auto ;
11882: LD_ADDR_OWVAR 71
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
// music_class := music_auto ;
11890: LD_ADDR_OWVAR 72
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11898: LD_STRING ConstructBase
11900: PPUSH
11901: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11905: LD_ADDR_VAR 0 1
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 3
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: PUSH
11939: FOR_IN
11940: IFFALSE 11956
// SetSide ( i , 2 ) ;
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 235
11954: GO 11939
11956: POP
11957: POP
// end ;
11958: PPOPN 2
11960: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11961: LD_EXP 14
11965: PUSH
11966: LD_INT 3
11968: GREATEREQUAL
11969: IFFALSE 11981
11971: GO 11973
11973: DISABLE
// SetAchievement ( ACH_ENG ) ;
11974: LD_STRING ACH_ENG
11976: PPUSH
11977: CALL_OW 543
11981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11982: LD_INT 22
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 15
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 69
12010: PUSH
12011: LD_INT 4
12013: GREATEREQUAL
12014: IFFALSE 12026
12016: GO 12018
12018: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12019: LD_STRING ACH_APEGEN
12021: PPUSH
12022: CALL_OW 543
12026: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12027: LD_INT 22
12029: PUSH
12030: LD_INT 2
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 3
12049: PUSH
12050: LD_INT 57
12052: PUSH
12053: EMPTY
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: IFFALSE 12340
12071: GO 12073
12073: DISABLE
// begin workshopBuilded := true ;
12074: LD_ADDR_EXP 11
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if IsOk ( Markov ) then
12082: LD_EXP 38
12086: PPUSH
12087: CALL_OW 302
12091: IFFALSE 12152
// begin Say ( Heike , DH-1-shop-a ) ;
12093: LD_EXP 31
12097: PPUSH
12098: LD_STRING DH-1-shop-a
12100: PPUSH
12101: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12105: LD_INT 47
12107: PPUSH
12108: LD_INT 2
12110: PPUSH
12111: CALL_OW 321
12115: PUSH
12116: LD_INT 2
12118: EQUAL
12119: IFFALSE 12137
12121: PUSH
12122: LD_INT 45
12124: PPUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 321
12132: PUSH
12133: LD_INT 2
12135: EQUAL
12136: AND
12137: NOT
12138: IFFALSE 12152
// Say ( Markov , DMar-1-shop-a ) ;
12140: LD_EXP 38
12144: PPUSH
12145: LD_STRING DMar-1-shop-a
12147: PPUSH
12148: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12152: LD_INT 35
12154: PPUSH
12155: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12159: LD_INT 47
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: CALL_OW 321
12169: PUSH
12170: LD_INT 2
12172: EQUAL
12173: IFTRUE 12191
12175: PUSH
12176: LD_INT 45
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 321
12186: PUSH
12187: LD_INT 2
12189: EQUAL
12190: OR
12191: IFFALSE 12152
// if IsOk ( Markov ) and IsOk ( Heike ) then
12193: LD_EXP 38
12197: PPUSH
12198: CALL_OW 302
12202: IFFALSE 12215
12204: PUSH
12205: LD_EXP 31
12209: PPUSH
12210: CALL_OW 302
12214: AND
12215: IFFALSE 12333
// begin DialogueOn ;
12217: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12221: LD_EXP 38
12225: PPUSH
12226: LD_STRING DMar-1-shop
12228: PPUSH
12229: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12233: LD_EXP 31
12237: PPUSH
12238: LD_STRING DH-1-shop
12240: PPUSH
12241: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12245: LD_EXP 38
12249: PPUSH
12250: LD_STRING DMar-2-shop
12252: PPUSH
12253: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12257: LD_EXP 38
12261: PPUSH
12262: LD_STRING DMar-3-shop
12264: PPUSH
12265: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12269: LD_EXP 31
12273: PPUSH
12274: LD_STRING DH-2-shop
12276: PPUSH
12277: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_STRING DMar-4-shop
12288: PPUSH
12289: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12293: LD_EXP 31
12297: PPUSH
12298: LD_STRING DH-3-shop
12300: PPUSH
12301: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12305: LD_EXP 38
12309: PPUSH
12310: LD_STRING DMar-5-shop
12312: PPUSH
12313: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12317: LD_EXP 31
12321: PPUSH
12322: LD_STRING DH-4-shop
12324: PPUSH
12325: CALL_OW 88
// DialogueOff ;
12329: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12333: LD_STRING ConstructVeh
12335: PPUSH
12336: CALL_OW 337
// end ;
12340: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12341: LD_INT 2
12343: PPUSH
12344: LD_INT 2
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL 42738 0 3
12354: PUSH
12355: LD_INT 0
12357: EQUAL
12358: IFFALSE 12370
12360: GO 12362
12362: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12363: LD_STRING Techs
12365: PPUSH
12366: CALL_OW 337
12370: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12371: LD_EXP 38
12375: PPUSH
12376: CALL_OW 302
12380: IFFALSE 12430
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 2
12395: PUSH
12396: LD_INT 34
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 35
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: AND
12430: IFFALSE 12537
12432: GO 12434
12434: DISABLE
// begin DialogueOn ;
12435: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12439: LD_INT 22
12441: PUSH
12442: LD_INT 2
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: LD_INT 34
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 35
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 69
12485: PPUSH
12486: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12490: LD_INT 10
12492: PPUSH
12493: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12497: LD_EXP 31
12501: PPUSH
12502: LD_STRING DH-1-bal
12504: PPUSH
12505: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12509: LD_EXP 38
12513: PPUSH
12514: LD_STRING DMar-1-bal
12516: PPUSH
12517: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12521: LD_EXP 31
12525: PPUSH
12526: LD_STRING DH-2-bal
12528: PPUSH
12529: CALL_OW 88
// DialogueOff ;
12533: CALL_OW 7
// end ;
12537: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12538: LD_EXP 35
12542: PPUSH
12543: CALL_OW 302
12547: IFFALSE 12579
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 6
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: AND
12579: IFFALSE 12640
12581: GO 12583
12583: DISABLE
// begin DialogueOn ;
12584: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12588: LD_EXP 35
12592: PPUSH
12593: LD_STRING DA-1-lab
12595: PPUSH
12596: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12600: LD_EXP 31
12604: PPUSH
12605: LD_STRING DH-1-lab
12607: PPUSH
12608: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12612: LD_EXP 35
12616: PPUSH
12617: LD_STRING DA-2-lab
12619: PPUSH
12620: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12624: LD_EXP 31
12628: PPUSH
12629: LD_STRING DH-2-lab
12631: PPUSH
12632: CALL_OW 88
// DialogueOff ;
12636: CALL_OW 7
// end ;
12640: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12641: LD_EXP 36
12645: PPUSH
12646: CALL_OW 302
12650: IFFALSE 12682
12652: PUSH
12653: LD_INT 22
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 15
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 69
12681: AND
12682: IFFALSE 12701
12684: PUSH
12685: LD_INT 81
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 69
12699: NOT
12700: AND
12701: IFFALSE 12890
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 15
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: ST_TO_ADDR
// InGameOn ;
12743: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12747: LD_VAR 0 1
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12760: LD_VAR 0 1
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12773: LD_EXP 36
12777: PPUSH
12778: LD_STRING DK-1-apesol
12780: PPUSH
12781: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12785: LD_VAR 0 1
12789: PUSH
12790: LD_INT 1
12792: ARRAY
12793: PPUSH
12794: LD_INT 35
12796: PPUSH
12797: LD_INT 28
12799: PPUSH
12800: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12804: LD_VAR 0 1
12808: PUSH
12809: LD_INT 1
12811: ARRAY
12812: PPUSH
12813: LD_INT 36
12815: PPUSH
12816: LD_INT 17
12818: PPUSH
12819: CALL_OW 171
// wait ( 0 0$2 ) ;
12823: LD_INT 70
12825: PPUSH
12826: CALL_OW 67
// DialogueOn ;
12830: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING DA-1-apesol
12841: PPUSH
12842: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12846: LD_EXP 36
12850: PPUSH
12851: LD_STRING DK-2-apesol
12853: PPUSH
12854: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12858: LD_EXP 35
12862: PPUSH
12863: LD_STRING DA-2-apesol
12865: PPUSH
12866: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12870: LD_EXP 36
12874: PPUSH
12875: LD_STRING DK-3-apesol
12877: PPUSH
12878: CALL_OW 88
// DialogueOff ;
12882: CALL_OW 7
// InGameOff ;
12886: CALL_OW 9
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12893: LD_EXP 37
12897: PPUSH
12898: CALL_OW 302
12902: IFFALSE 12934
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 16
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 69
12933: AND
12934: IFFALSE 12953
12936: PUSH
12937: LD_INT 81
12939: PUSH
12940: LD_INT 2
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: NOT
12952: AND
12953: IFFALSE 13267
12955: GO 12957
12957: DISABLE
12958: LD_INT 0
12960: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12961: LD_ADDR_VAR 0 1
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 16
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: ST_TO_ADDR
// blockAttack := true ;
12995: LD_ADDR_EXP 29
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// InGameOn ;
13003: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
13007: LD_INT 35
13009: PPUSH
13010: LD_INT 22
13012: PPUSH
13013: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13017: LD_INT 5
13019: PPUSH
13020: LD_INT 35
13022: PPUSH
13023: LD_INT 22
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13033: LD_EXP 37
13037: PPUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: PPUSH
13047: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: PPUSH
13073: CALL_OW 122
// wait ( 0 0$2 ) ;
13077: LD_INT 70
13079: PPUSH
13080: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13084: LD_EXP 37
13088: PPUSH
13089: LD_STRING DS-1-apeeng
13091: PPUSH
13092: CALL_OW 88
// if IsOk ( Kamil ) then
13096: LD_EXP 34
13100: PPUSH
13101: CALL_OW 302
13105: IFFALSE 13255
// begin Say ( Kamil , DKam-1-apeeng ) ;
13107: LD_EXP 34
13111: PPUSH
13112: LD_STRING DKam-1-apeeng
13114: PPUSH
13115: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13119: LD_EXP 37
13123: PPUSH
13124: LD_STRING DS-2-apeeng
13126: PPUSH
13127: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13131: LD_EXP 34
13135: PPUSH
13136: LD_STRING DKam-2-apeeng
13138: PPUSH
13139: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13143: LD_EXP 37
13147: PPUSH
13148: LD_STRING DS-3-apeeng
13150: PPUSH
13151: CALL_OW 88
// if not IsOK ( Kaia ) then
13155: LD_EXP 36
13159: PPUSH
13160: CALL_OW 302
13164: NOT
13165: IFFALSE 13181
// begin InGameOff ;
13167: CALL_OW 9
// blockAttack := false ;
13171: LD_ADDR_EXP 29
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// exit ;
13179: GO 13267
// end ; Say ( Kaia , DK-1-apeeng ) ;
13181: LD_EXP 36
13185: PPUSH
13186: LD_STRING DK-1-apeeng
13188: PPUSH
13189: CALL_OW 88
// if not IsOk ( Givi ) then
13193: LD_EXP 32
13197: PPUSH
13198: CALL_OW 302
13202: NOT
13203: IFFALSE 13219
// begin InGameOff ;
13205: CALL_OW 9
// blockAttack := false ;
13209: LD_ADDR_EXP 29
13213: PUSH
13214: LD_INT 0
13216: ST_TO_ADDR
// exit ;
13217: GO 13267
// end ; Say ( Givi , DG-1-apeeng ) ;
13219: LD_EXP 32
13223: PPUSH
13224: LD_STRING DG-1-apeeng
13226: PPUSH
13227: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13231: LD_EXP 36
13235: PPUSH
13236: LD_STRING DK-2-apeeng
13238: PPUSH
13239: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13243: LD_EXP 36
13247: PPUSH
13248: LD_STRING DK-3-apeeng
13250: PPUSH
13251: CALL_OW 88
// end ; InGameOff ;
13255: CALL_OW 9
// blockAttack := false ;
13259: LD_ADDR_EXP 29
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// end ;
13267: PPOPN 1
13269: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13270: LD_EXP 4
13274: IFFALSE 13306
13276: PUSH
13277: LD_INT 22
13279: PUSH
13280: LD_INT 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 0
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: AND
13306: IFFALSE 13487
13308: GO 13310
13310: DISABLE
// begin blockAttack := true ;
13311: LD_ADDR_EXP 29
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13319: LD_INT 350
13321: PPUSH
13322: CALL_OW 67
// DialogueOn ;
13326: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13330: LD_EXP 39
13334: PPUSH
13335: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13339: LD_EXP 39
13343: PPUSH
13344: LD_STRING DF-1-distribution
13346: PPUSH
13347: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13351: LD_EXP 31
13355: PPUSH
13356: LD_STRING DH-2-distribution
13358: PPUSH
13359: CALL_OW 88
// if IsOk ( Kaia ) then
13363: LD_EXP 36
13367: PPUSH
13368: CALL_OW 302
13372: IFFALSE 13433
// begin Say ( Kaia , DK-1-distribution ) ;
13374: LD_EXP 36
13378: PPUSH
13379: LD_STRING DK-1-distribution
13381: PPUSH
13382: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13386: LD_EXP 31
13390: PPUSH
13391: LD_STRING DH-1-distribution
13393: PPUSH
13394: CALL_OW 88
// if IsOk ( Givi ) then
13398: LD_EXP 32
13402: PPUSH
13403: CALL_OW 302
13407: IFFALSE 13433
// begin Say ( Givi , DG-1-distribution ) ;
13409: LD_EXP 32
13413: PPUSH
13414: LD_STRING DG-1-distribution
13416: PPUSH
13417: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13421: LD_EXP 31
13425: PPUSH
13426: LD_STRING DH-3-distribution
13428: PPUSH
13429: CALL_OW 88
// end ; end ; DialogueOff ;
13433: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13437: LD_STRING Crates1
13439: PPUSH
13440: CALL_OW 337
// farmerRequestedCrates := 300 ;
13444: LD_ADDR_EXP 17
13448: PUSH
13449: LD_INT 300
13451: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13452: LD_STRING FarmerCrates
13454: PPUSH
13455: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13459: LD_INT 10
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 424
// blockAttack := false ;
13469: LD_ADDR_EXP 29
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13477: LD_INT 108
13479: PPUSH
13480: LD_INT 61
13482: PPUSH
13483: CALL_OW 86
// end ;
13487: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13488: LD_EXP 7
13492: IFFALSE 13556
13494: PUSH
13495: LD_INT 22
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: LD_INT 57
13510: PUSH
13511: EMPTY
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 2
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 6
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 7
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: AND
13556: IFFALSE 13602
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: LD_INT 57
13574: PUSH
13575: EMPTY
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 4
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: AND
13602: IFFALSE 13766
13604: GO 13606
13606: DISABLE
13607: LD_INT 0
13609: PPUSH
// begin wait ( 0 0$10 ) ;
13610: LD_INT 350
13612: PPUSH
13613: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13617: LD_ADDR_VAR 0 1
13621: PUSH
13622: LD_EXP 45
13626: PPUSH
13627: LD_INT 26
13629: PUSH
13630: LD_INT 1
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 25
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PPUSH
13651: CALL_OW 72
13655: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13656: LD_EXP 31
13660: PPUSH
13661: LD_STRING DH-1-task
13663: PPUSH
13664: CALL_OW 88
// if IsOk ( Sophia ) then
13668: LD_EXP 37
13672: PPUSH
13673: CALL_OW 302
13677: IFFALSE 13717
// begin Say ( Sophia , DS-1-task ) ;
13679: LD_EXP 37
13683: PPUSH
13684: LD_STRING DS-1-task
13686: PPUSH
13687: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13691: LD_EXP 37
13695: PPUSH
13696: LD_STRING DS-2-task
13698: PPUSH
13699: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13703: LD_EXP 31
13707: PPUSH
13708: LD_STRING DH-2-task
13710: PPUSH
13711: CALL_OW 88
// end else
13715: GO 13751
// if eng then
13717: LD_VAR 0 1
13721: IFFALSE 13751
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13723: LD_VAR 0 1
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PPUSH
13732: LD_STRING DArm-1-task
13734: PPUSH
13735: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13739: LD_EXP 31
13743: PPUSH
13744: LD_STRING DH-2-task
13746: PPUSH
13747: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13751: LD_STRING BaseConstructed
13753: PPUSH
13754: CALL_OW 337
// allowConvoys := true ;
13758: LD_ADDR_EXP 13
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// end ;
13766: PPOPN 1
13768: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13769: LD_INT 22
13771: PUSH
13772: LD_INT 4
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 34
13781: PUSH
13782: LD_INT 12
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 69
13797: IFFALSE 13965
13799: GO 13801
13801: DISABLE
13802: LD_INT 0
13804: PPUSH
13805: PPUSH
13806: PPUSH
// begin wait ( 0 0$2 ) ;
13807: LD_INT 70
13809: PPUSH
13810: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 4
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 34
13831: PUSH
13832: LD_INT 12
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13848: LD_ADDR_VAR 0 2
13852: PUSH
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 250
13866: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13867: LD_ADDR_VAR 0 3
13871: PUSH
13872: LD_VAR 0 1
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: CALL_OW 251
13885: ST_TO_ADDR
// DialogueOn ;
13886: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13890: LD_VAR 0 2
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13904: LD_VAR 0 2
13908: PPUSH
13909: LD_VAR 0 3
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: LD_INT 6
13919: NEG
13920: PPUSH
13921: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13925: LD_INT 10
13927: PPUSH
13928: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13932: LD_EXP 31
13936: PPUSH
13937: LD_STRING DH-1-seecargo
13939: PPUSH
13940: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 3
13953: PPUSH
13954: LD_INT 2
13956: PPUSH
13957: CALL_OW 331
// DialogueOff ;
13961: CALL_OW 7
// end ;
13965: PPOPN 3
13967: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13968: LD_EXP 4
13972: IFFALSE 13984
13974: PUSH
13975: LD_EXP 16
13979: PUSH
13980: LD_INT 300
13982: GREATEREQUAL
13983: AND
13984: IFFALSE 14056
13986: GO 13988
13988: DISABLE
// begin DialogueOn ;
13989: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13993: LD_EXP 39
13997: PPUSH
13998: LD_STRING DF-1-delivery-2
14000: PPUSH
14001: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DH-1-delivery-2
14012: PPUSH
14013: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
14017: LD_EXP 39
14021: PPUSH
14022: LD_STRING DF-2-delivery-2
14024: PPUSH
14025: CALL_OW 94
// DialogueOff ;
14029: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
14033: LD_STRING Crates2
14035: PPUSH
14036: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14040: LD_ADDR_EXP 18
14044: PUSH
14045: LD_INT 63000
14047: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14048: LD_ADDR_EXP 17
14052: PUSH
14053: LD_INT 600
14055: ST_TO_ADDR
// end ;
14056: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
14057: LD_EXP 4
14061: IFFALSE 14073
14063: PUSH
14064: LD_EXP 16
14068: PUSH
14069: LD_INT 600
14071: GREATEREQUAL
14072: AND
14073: IFFALSE 14085
14075: PUSH
14076: LD_OWVAR 67
14080: PUSH
14081: LD_INT 1
14083: GREATER
14084: AND
14085: IFFALSE 14285
14087: GO 14089
14089: DISABLE
// begin DialogueOn ;
14090: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14094: LD_EXP 39
14098: PPUSH
14099: LD_STRING DF-1-delivery-3
14101: PPUSH
14102: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14106: LD_EXP 31
14110: PPUSH
14111: LD_STRING DH-1-delivery-3
14113: PPUSH
14114: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14118: LD_EXP 39
14122: PPUSH
14123: LD_STRING DF-2-delivery-3
14125: PPUSH
14126: CALL_OW 94
// if IsOk ( Kaia ) then
14130: LD_EXP 36
14134: PPUSH
14135: CALL_OW 302
14139: IFFALSE 14189
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14141: LD_EXP 36
14145: PPUSH
14146: LD_STRING DK-1-delivery-3
14148: PPUSH
14149: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14153: LD_EXP 31
14157: PPUSH
14158: LD_STRING DH-2-delivery-3
14160: PPUSH
14161: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14165: LD_EXP 32
14169: PPUSH
14170: LD_STRING DG-1-delivery-3
14172: PPUSH
14173: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14177: LD_EXP 33
14181: PPUSH
14182: LD_STRING DM-1-delivery-3
14184: PPUSH
14185: CALL_OW 88
// end ; DialogueOff ;
14189: CALL_OW 7
// case Difficulty of 2 :
14193: LD_OWVAR 67
14197: PUSH
14198: LD_INT 2
14200: DOUBLE
14201: EQUAL
14202: IFTRUE 14206
14204: GO 14224
14206: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14207: LD_STRING Crates3
14209: PPUSH
14210: CALL_OW 337
// farmerRequestedCrates := 900 ;
14214: LD_ADDR_EXP 17
14218: PUSH
14219: LD_INT 900
14221: ST_TO_ADDR
// end ; 3 :
14222: GO 14277
14224: LD_INT 3
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14250
14232: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14233: LD_STRING Crates4
14235: PPUSH
14236: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14240: LD_ADDR_EXP 17
14244: PUSH
14245: LD_INT 1200
14247: ST_TO_ADDR
// end ; 4 :
14248: GO 14277
14250: LD_INT 4
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14276
14258: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14259: LD_STRING Crates5
14261: PPUSH
14262: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14266: LD_ADDR_EXP 17
14270: PUSH
14271: LD_INT 1400
14273: ST_TO_ADDR
// end ; end ;
14274: GO 14277
14276: POP
// farmerCratesCounter := 30 30$00 ;
14277: LD_ADDR_EXP 18
14281: PUSH
14282: LD_INT 63000
14284: ST_TO_ADDR
// end ;
14285: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14286: LD_EXP 4
14290: IFFALSE 14323
14292: PUSH
14293: LD_EXP 16
14297: PUSH
14298: LD_INT 600
14300: PUSH
14301: LD_INT 900
14303: PUSH
14304: LD_INT 1200
14306: PUSH
14307: LD_INT 1400
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_OWVAR 67
14320: ARRAY
14321: GREATEREQUAL
14322: AND
14323: IFFALSE 14409
14325: GO 14327
14327: DISABLE
// begin retreatAllowed := true ;
14328: LD_ADDR_EXP 12
14332: PUSH
14333: LD_INT 1
14335: ST_TO_ADDR
// display_strings := [ ] ;
14336: LD_ADDR_OWVAR 47
14340: PUSH
14341: EMPTY
14342: ST_TO_ADDR
// DialogueOn ;
14343: CALL_OW 6
// InGameOn ;
14347: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14351: LD_EXP 40
14355: PPUSH
14356: LD_STRING DO-radio-end
14358: PPUSH
14359: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14363: LD_EXP 31
14367: PPUSH
14368: LD_STRING DH-1-radio-end
14370: PPUSH
14371: CALL_OW 88
// InGameOff ;
14375: CALL_OW 9
// DialogueOff ;
14379: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14383: LD_STRING Retreat
14385: PPUSH
14386: CALL_OW 337
// wait ( 0 0$2 ) ;
14390: LD_INT 70
14392: PPUSH
14393: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14397: LD_EXP 31
14401: PPUSH
14402: LD_STRING DH-2-radio-end
14404: PPUSH
14405: CALL_OW 88
// end ;
14409: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14410: LD_EXP 12
14414: IFFALSE 14547
14416: GO 14418
14418: DISABLE
14419: LD_INT 0
14421: PPUSH
14422: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14423: LD_INT 10
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 42
14442: PPUSH
14443: LD_INT 25
14445: PUSH
14446: LD_INT 2
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 72
14457: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14458: LD_VAR 0 1
14462: IFFALSE 14480
14464: PUSH
14465: LD_INT 102
14467: PPUSH
14468: LD_INT 69
14470: PPUSH
14471: CALL_OW 428
14475: PUSH
14476: LD_INT 0
14478: EQUAL
14479: AND
14480: IFFALSE 14547
// begin for i in tmp do
14482: LD_ADDR_VAR 0 2
14486: PUSH
14487: LD_VAR 0 1
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14517
// if IsInUnit ( i ) then
14495: LD_VAR 0 2
14499: PPUSH
14500: CALL_OW 310
14504: IFFALSE 14515
// ComExitBuilding ( i ) ;
14506: LD_VAR 0 2
14510: PPUSH
14511: CALL_OW 122
14515: GO 14492
14517: POP
14518: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: LD_INT 31
14526: PPUSH
14527: LD_INT 102
14529: PPUSH
14530: LD_INT 69
14532: PPUSH
14533: LD_INT 2
14535: PPUSH
14536: CALL_OW 205
// wait ( 0 0$3 ) ;
14540: LD_INT 105
14542: PPUSH
14543: CALL_OW 67
// end ; end ;
14547: PPOPN 2
14549: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14550: LD_EXP 12
14554: NOT
14555: IFFALSE 14566
14557: PUSH
14558: LD_INT 5
14560: PPUSH
14561: CALL_OW 301
14565: AND
14566: IFFALSE 14598
14568: GO 14570
14570: DISABLE
// begin DialogueOn ;
14571: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14575: LD_EXP 39
14579: PPUSH
14580: LD_STRING DF-1-failure
14582: PPUSH
14583: CALL_OW 94
// DialogueOff ;
14587: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14591: LD_STRING FarmerDepot
14593: PPUSH
14594: CALL_OW 104
// end ;
14598: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14599: LD_EXP 12
14603: IFFALSE 14625
14605: PUSH
14606: LD_EXP 31
14610: PPUSH
14611: LD_EXP 39
14615: PPUSH
14616: CALL_OW 296
14620: PUSH
14621: LD_INT 12
14623: LESS
14624: AND
14625: IFFALSE 14658
14627: PUSH
14628: LD_INT 81
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 1
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: NOT
14657: AND
14658: IFFALSE 15346
14660: GO 14662
14662: DISABLE
14663: LD_INT 0
14665: PPUSH
14666: PPUSH
14667: PPUSH
// begin allowConvoys := false ;
14668: LD_ADDR_EXP 13
14672: PUSH
14673: LD_INT 0
14675: ST_TO_ADDR
// InGameOn ;
14676: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14680: LD_EXP 31
14684: PPUSH
14685: LD_EXP 39
14689: PPUSH
14690: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14694: LD_EXP 39
14698: PPUSH
14699: LD_EXP 31
14703: PPUSH
14704: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14708: LD_EXP 39
14712: PPUSH
14713: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14717: LD_EXP 31
14721: PPUSH
14722: LD_STRING DH-1-end
14724: PPUSH
14725: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14729: LD_EXP 39
14733: PPUSH
14734: LD_STRING DF-1-end
14736: PPUSH
14737: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14741: LD_EXP 39
14745: PPUSH
14746: LD_STRING DF-2-end
14748: PPUSH
14749: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14753: LD_EXP 31
14757: PPUSH
14758: LD_STRING DH-2-end
14760: PPUSH
14761: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14765: LD_EXP 39
14769: PPUSH
14770: LD_STRING DF-3-end
14772: PPUSH
14773: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14777: LD_EXP 31
14781: PPUSH
14782: LD_STRING DH-3-end
14784: PPUSH
14785: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14789: LD_EXP 32
14793: PPUSH
14794: LD_STRING DG-1-end
14796: PPUSH
14797: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14801: LD_EXP 31
14805: PPUSH
14806: LD_STRING DH-4-end
14808: PPUSH
14809: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14813: LD_EXP 39
14817: PPUSH
14818: LD_STRING DF-4-end
14820: PPUSH
14821: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14825: LD_EXP 31
14829: PPUSH
14830: LD_STRING DH-5-end
14832: PPUSH
14833: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14837: LD_EXP 39
14841: PPUSH
14842: LD_STRING DF-5-end
14844: PPUSH
14845: CALL_OW 88
// InGameOff ;
14849: CALL_OW 9
// allowCargoEvacuation := true ;
14853: LD_ADDR_EXP 8
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_OWVAR 67
14888: ARRAY
14889: ST_TO_ADDR
// if farmerSquad < max then
14890: LD_EXP 42
14894: PUSH
14895: LD_VAR 0 2
14899: LESS
14900: IFFALSE 14912
// max := farmerSquad ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_EXP 42
14911: ST_TO_ADDR
// for i := 1 to max do
14912: LD_ADDR_VAR 0 1
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_VAR 0 2
14926: PUSH
14927: FOR_TO
14928: IFFALSE 14966
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14930: LD_EXP 42
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: PPUSH
14939: LD_INT 2
14941: PPUSH
14942: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14946: LD_ADDR_EXP 42
14950: PUSH
14951: LD_EXP 42
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: ST_TO_ADDR
// end ;
14964: GO 14927
14966: POP
14967: POP
// for i in Farmer ^ farmerSquad do
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_EXP 39
14977: PUSH
14978: LD_EXP 42
14982: ADD
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15024
// begin if IsInUnit ( i ) then
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 310
14996: IFFALSE 15007
// ComExitBuilding ( i ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_INT 102
15014: PPUSH
15015: LD_INT 7
15017: PPUSH
15018: CALL_OW 171
// end ;
15022: GO 14984
15024: POP
15025: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_INT 22
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 21
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: PUSH
15060: LD_INT 5
15062: DIFF
15063: PUSH
15064: FOR_IN
15065: IFFALSE 15081
// SetSide ( i , 2 ) ;
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_INT 2
15074: PPUSH
15075: CALL_OW 235
15079: GO 15064
15081: POP
15082: POP
// wait ( 0 0$2 ) ;
15083: LD_INT 70
15085: PPUSH
15086: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
15090: LD_EXP 31
15094: PPUSH
15095: LD_STRING DH-6-end
15097: PPUSH
15098: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
15102: LD_INT 35
15104: PPUSH
15105: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_EXP 39
15118: PUSH
15119: LD_EXP 42
15123: ADD
15124: PPUSH
15125: LD_INT 95
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 72
15139: ST_TO_ADDR
// if tmp then
15140: LD_VAR 0 3
15144: IFFALSE 15188
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 3
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15186
// begin farmerSquad := farmerSquad diff i ;
15159: LD_ADDR_EXP 42
15163: PUSH
15164: LD_EXP 42
15168: PUSH
15169: LD_VAR 0 1
15173: DIFF
15174: ST_TO_ADDR
// RemoveUnit ( i ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: CALL_OW 64
// end ;
15184: GO 15156
15186: POP
15187: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15188: LD_EXP 42
15192: PUSH
15193: EMPTY
15194: EQUAL
15195: IFFALSE 15209
15197: PUSH
15198: LD_EXP 39
15202: PPUSH
15203: CALL_OW 305
15207: NOT
15208: AND
15209: IFFALSE 15102
// if farmerHumanLoseCounter = 0 then
15211: LD_EXP 21
15215: PUSH
15216: LD_INT 0
15218: EQUAL
15219: IFFALSE 15228
// SetAchievement ( ACH_BABY ) ;
15221: LD_STRING ACH_BABY
15223: PPUSH
15224: CALL_OW 543
// wait ( 1 1$00 ) ;
15228: LD_INT 2100
15230: PPUSH
15231: CALL_OW 67
// SendAttack ;
15235: CALL 6172 0 0
// Say ( Heike , DH-7-end ) ;
15239: LD_EXP 31
15243: PPUSH
15244: LD_STRING DH-7-end
15246: PPUSH
15247: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15251: LD_ADDR_VAR 0 1
15255: PUSH
15256: DOUBLE
15257: LD_INT 1
15259: DEC
15260: ST_TO_ADDR
15261: LD_INT 2
15263: PUSH
15264: LD_INT 3
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: LD_OWVAR 67
15283: ARRAY
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15344
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15288: LD_INT 4200
15290: PUSH
15291: LD_INT 3500
15293: PUSH
15294: LD_INT 3150
15296: PUSH
15297: LD_INT 2800
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: LD_OWVAR 67
15310: ARRAY
15311: PPUSH
15312: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15316: LD_EXP 12
15320: IFFALSE 15332
15322: PUSH
15323: LD_EXP 22
15327: PUSH
15328: LD_INT 1
15330: LESS
15331: AND
15332: IFFALSE 15338
// exit ;
15334: POP
15335: POP
15336: GO 15346
// SendAttack ;
15338: CALL 6172 0 0
// end ;
15342: GO 15285
15344: POP
15345: POP
// end ;
15346: PPOPN 3
15348: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15349: LD_EXP 8
15353: IFFALSE 15365
15355: PUSH
15356: LD_EXP 22
15360: PUSH
15361: LD_INT 0
15363: GREATER
15364: AND
15365: IFFALSE 15375
15367: GO 15369
15369: DISABLE
// begin enable ;
15370: ENABLE
// CargoEvacuation ;
15371: CALL 3613 0 0
// end ;
15375: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15376: LD_EXP 18
15380: PUSH
15381: LD_INT 18900
15383: LESSEQUAL
15384: IFFALSE 15433
15386: GO 15388
15388: DISABLE
// begin DialogueOn ;
15389: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15393: LD_EXP 39
15397: PPUSH
15398: LD_STRING DF-1-distribution-a
15400: PPUSH
15401: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15405: LD_EXP 31
15409: PPUSH
15410: LD_STRING DH-1-distribution-a
15412: PPUSH
15413: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15417: LD_EXP 39
15421: PPUSH
15422: LD_STRING DF-2-distribution-a
15424: PPUSH
15425: CALL_OW 94
// DialogueOff ;
15429: CALL_OW 7
// end ;
15433: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15434: LD_EXP 18
15438: PUSH
15439: LD_INT 0
15441: LESSEQUAL
15442: IFFALSE 15474
15444: GO 15446
15446: DISABLE
// begin DialogueOn ;
15447: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15451: LD_EXP 39
15455: PPUSH
15456: LD_STRING DF-3-distribution-a
15458: PPUSH
15459: CALL_OW 94
// YouLost ( Distribution ) ;
15463: LD_STRING Distribution
15465: PPUSH
15466: CALL_OW 104
// DialogueOff ;
15470: CALL_OW 7
// end ;
15474: END
// every 0 0$1 trigger vehCounter >= 2 do
15475: LD_EXP 23
15479: PUSH
15480: LD_INT 2
15482: GREATEREQUAL
15483: IFFALSE 15495
15485: GO 15487
15487: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15488: LD_STRING VehConstructed
15490: PPUSH
15491: CALL_OW 337
15495: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15496: LD_INT 22
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 34
15508: PUSH
15509: LD_INT 12
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: IFFALSE 15584
15526: GO 15528
15528: DISABLE
// begin DialogueOn ;
15529: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15533: LD_EXP 31
15537: PPUSH
15538: LD_STRING DH-1-truck
15540: PPUSH
15541: CALL_OW 88
// if IsOk ( Markov ) then
15545: LD_EXP 38
15549: PPUSH
15550: CALL_OW 302
15554: IFFALSE 15580
// begin Say ( Markov , DMar-1-truck ) ;
15556: LD_EXP 38
15560: PPUSH
15561: LD_STRING DMar-1-truck
15563: PPUSH
15564: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15568: LD_EXP 31
15572: PPUSH
15573: LD_STRING DH-2-truck
15575: PPUSH
15576: CALL_OW 88
// end ; DialogueOff ;
15580: CALL_OW 7
// end ;
15584: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15585: LD_INT 0
15587: PPUSH
15588: PPUSH
15589: PPUSH
// if IsOk ( Givi ) then
15590: LD_EXP 32
15594: PPUSH
15595: CALL_OW 302
15599: IFFALSE 15615
// begin Say ( Givi , DG-1-nocargo ) ;
15601: LD_EXP 32
15605: PPUSH
15606: LD_STRING DG-1-nocargo
15608: PPUSH
15609: CALL_OW 88
// exit ;
15613: GO 15711
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15615: LD_ADDR_VAR 0 2
15619: PUSH
15620: LD_EXP 45
15624: PPUSH
15625: LD_INT 26
15627: PUSH
15628: LD_INT 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PPUSH
15635: CALL_OW 72
15639: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15640: LD_ADDR_VAR 0 3
15644: PUSH
15645: LD_EXP 45
15649: PPUSH
15650: LD_INT 26
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 72
15664: ST_TO_ADDR
// if randomMen then
15665: LD_VAR 0 2
15669: IFFALSE 15689
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15671: LD_VAR 0 2
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_STRING DArm-1-nocargo
15682: PPUSH
15683: CALL_OW 88
15687: GO 15711
// if randomWomen then
15689: LD_VAR 0 3
15693: IFFALSE 15711
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: PPUSH
15704: LD_STRING DArf-1-nocargo
15706: PPUSH
15707: CALL_OW 88
// end ;
15711: LD_VAR 0 1
15715: RET
// export function IncomingAttack ; begin
15716: LD_INT 0
15718: PPUSH
// if attackWave = 1 then
15719: LD_EXP 20
15723: PUSH
15724: LD_INT 1
15726: EQUAL
15727: IFFALSE 15798
// begin DialogueOn ;
15729: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15733: LD_EXP 40
15737: PPUSH
15738: LD_STRING DO-1-radio-1
15740: PPUSH
15741: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15745: LD_EXP 31
15749: PPUSH
15750: LD_STRING DH-1-radio-1-
15752: PPUSH
15753: CALL_OW 88
// if IsOk ( Markov ) then
15757: LD_EXP 38
15761: PPUSH
15762: CALL_OW 302
15766: IFFALSE 15792
// begin Say ( Markov , DMar-1-radio-1 ) ;
15768: LD_EXP 38
15772: PPUSH
15773: LD_STRING DMar-1-radio-1
15775: PPUSH
15776: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15780: LD_EXP 31
15784: PPUSH
15785: LD_STRING DH-2-radio-1
15787: PPUSH
15788: CALL_OW 88
// end ; DialogueOff ;
15792: CALL_OW 7
// end else
15796: GO 15822
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15798: LD_EXP 40
15802: PPUSH
15803: LD_STRING DO-1-radio-u
15805: PPUSH
15806: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15810: LD_EXP 31
15814: PPUSH
15815: LD_STRING DH-1-radio-u
15817: PPUSH
15818: CALL_OW 88
// end ; end ;
15822: LD_VAR 0 1
15826: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15827: LD_EXP 47
15831: PPUSH
15832: LD_INT 95
15834: PUSH
15835: LD_INT 8
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 72
15846: IFFALSE 15951
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
// begin enable ;
15854: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_EXP 47
15864: PPUSH
15865: LD_INT 95
15867: PUSH
15868: LD_INT 8
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 72
15879: PUSH
15880: FOR_IN
15881: IFFALSE 15910
// begin usForces := usForces diff i ;
15883: LD_ADDR_EXP 47
15887: PUSH
15888: LD_EXP 47
15892: PUSH
15893: LD_VAR 0 1
15897: DIFF
15898: ST_TO_ADDR
// RemoveUnit ( i ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 64
// end ;
15908: GO 15880
15910: POP
15911: POP
// if not americanHasEscaped and attackWave = 1 then
15912: LD_EXP 9
15916: NOT
15917: IFFALSE 15929
15919: PUSH
15920: LD_EXP 20
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: AND
15929: IFFALSE 15951
// begin americanHasEscaped := true ;
15931: LD_ADDR_EXP 9
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15939: LD_EXP 31
15943: PPUSH
15944: LD_STRING DH-2-assault-a
15946: PPUSH
15947: CALL_OW 88
// end ; end ;
15951: PPOPN 1
15953: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15954: LD_INT 4
15956: PPUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 70
15971: IFFALSE 15980
15973: PUSH
15974: LD_EXP 12
15978: NOT
15979: AND
15980: IFFALSE 15997
15982: GO 15984
15984: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15985: LD_EXP 39
15989: PPUSH
15990: LD_STRING DF-1-attack
15992: PPUSH
15993: CALL_OW 94
15997: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15998: LD_INT 5
16000: PPUSH
16001: CALL_OW 255
16005: PUSH
16006: LD_INT 2
16008: EQUAL
16009: IFFALSE 16025
16011: GO 16013
16013: DISABLE
// begin enable ;
16014: ENABLE
// SetSide ( arDepot , 5 ) ;
16015: LD_INT 5
16017: PPUSH
16018: LD_INT 5
16020: PPUSH
16021: CALL_OW 235
// end ;
16025: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
16026: LD_INT 22
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 21
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: NOT
16055: IFFALSE 16074
16057: PUSH
16058: LD_INT 22
16060: PUSH
16061: LD_INT 4
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PPUSH
16068: CALL_OW 69
16072: NOT
16073: AND
16074: IFFALSE 16083
16076: PUSH
16077: LD_EXP 12
16081: NOT
16082: AND
16083: IFFALSE 16095
16085: PUSH
16086: LD_EXP 16
16090: PUSH
16091: LD_INT 90
16093: GREATER
16094: AND
16095: IFFALSE 16130
16097: PUSH
16098: LD_INT 7
16100: PPUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 2
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 21
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 70
16129: AND
16130: IFFALSE 16169
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 50
16145: PUSH
16146: EMPTY
16147: LIST
16148: PUSH
16149: LD_INT 30
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: AND
16169: IFFALSE 16984
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
16178: PPUSH
16179: PPUSH
16180: PPUSH
// begin depot := usDepot ;
16181: LD_ADDR_VAR 0 5
16185: PUSH
16186: LD_INT 11
16188: ST_TO_ADDR
// if not depot then
16189: LD_VAR 0 5
16193: NOT
16194: IFFALSE 16234
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 30
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PPUSH
16225: CALL_OW 69
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_EXP 45
16243: PPUSH
16244: LD_INT 26
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 72
16258: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16259: LD_ADDR_VAR 0 2
16263: PUSH
16264: LD_EXP 45
16268: PPUSH
16269: LD_INT 26
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PPUSH
16279: CALL_OW 72
16283: ST_TO_ADDR
// if IsOk ( Kaia ) then
16284: LD_EXP 36
16288: PPUSH
16289: CALL_OW 302
16293: IFFALSE 16314
// speaker := [ Kaia , DK ] else
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: LD_EXP 36
16304: PUSH
16305: LD_STRING DK
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: ST_TO_ADDR
16312: GO 16394
// if randomMen then
16314: LD_VAR 0 1
16318: IFFALSE 16353
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_VAR 0 1
16329: PUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 12
16342: ARRAY
16343: PUSH
16344: LD_STRING DArm
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: ST_TO_ADDR
16351: GO 16394
// if randomWomen then
16353: LD_VAR 0 2
16357: IFFALSE 16392
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16359: LD_ADDR_VAR 0 3
16363: PUSH
16364: LD_VAR 0 2
16368: PUSH
16369: LD_INT 1
16371: PPUSH
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL_OW 12
16381: ARRAY
16382: PUSH
16383: LD_STRING DArf
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: ST_TO_ADDR
16390: GO 16394
// exit ;
16392: GO 16984
// if IsInUnit ( speaker [ 1 ] ) then
16394: LD_VAR 0 3
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: CALL_OW 310
16407: IFFALSE 16430
// place := IsInUnit ( speaker [ 1 ] ) else
16409: LD_ADDR_VAR 0 4
16413: PUSH
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 1
16421: ARRAY
16422: PPUSH
16423: CALL_OW 310
16427: ST_TO_ADDR
16428: GO 16444
// place := speaker [ 1 ] ;
16430: LD_ADDR_VAR 0 4
16434: PUSH
16435: LD_VAR 0 3
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16444: LD_VAR 0 4
16448: PPUSH
16449: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16453: LD_VAR 0 4
16457: PPUSH
16458: CALL_OW 250
16462: PPUSH
16463: LD_VAR 0 4
16467: PPUSH
16468: CALL_OW 251
16472: PPUSH
16473: CALL 2090 0 2
// wait ( 0 0$2 ) ;
16477: LD_INT 70
16479: PPUSH
16480: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16484: LD_EXP 41
16488: PPUSH
16489: CALL_OW 305
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16984
// allowConvoys := false ;
16498: LD_ADDR_EXP 13
16502: PUSH
16503: LD_INT 0
16505: ST_TO_ADDR
// blockAttack := true ;
16506: LD_ADDR_EXP 29
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// InGameOn ;
16514: CALL_OW 8
// wait ( 0 0$1 ) ;
16518: LD_INT 35
16520: PPUSH
16521: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16525: LD_EXP 41
16529: PPUSH
16530: LD_STRING DI-1-land
16532: PPUSH
16533: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16537: LD_VAR 0 3
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: CALL_OW 310
16550: IFFALSE 16565
// ComExit ( speaker [ 1 ] ) ;
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: CALL 81145 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16565: LD_VAR 0 3
16569: PUSH
16570: LD_INT 1
16572: ARRAY
16573: PPUSH
16574: LD_EXP 41
16578: PPUSH
16579: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16583: LD_VAR 0 3
16587: PUSH
16588: LD_INT 1
16590: ARRAY
16591: PPUSH
16592: LD_EXP 41
16596: PPUSH
16597: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16601: LD_EXP 41
16605: PPUSH
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: CALL_OW 119
// wait ( 0 0$1 ) ;
16619: LD_INT 35
16621: PPUSH
16622: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16626: LD_VAR 0 3
16630: PUSH
16631: LD_INT 1
16633: ARRAY
16634: PPUSH
16635: LD_VAR 0 3
16639: PUSH
16640: LD_INT 2
16642: ARRAY
16643: PUSH
16644: LD_STRING -1-land
16646: STR
16647: PPUSH
16648: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16652: LD_EXP 41
16656: PPUSH
16657: LD_STRING DI-2-land
16659: PPUSH
16660: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16664: LD_VAR 0 3
16668: PUSH
16669: LD_INT 1
16671: ARRAY
16672: PPUSH
16673: LD_VAR 0 3
16677: PUSH
16678: LD_INT 2
16680: ARRAY
16681: PUSH
16682: LD_STRING -2-land
16684: STR
16685: PPUSH
16686: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16690: LD_VAR 0 3
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 2
16706: ARRAY
16707: PUSH
16708: LD_STRING -3-land
16710: STR
16711: PPUSH
16712: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16716: LD_EXP 31
16720: PPUSH
16721: LD_STRING DH-1-land
16723: PPUSH
16724: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16728: LD_VAR 0 5
16732: PPUSH
16733: CALL_OW 313
16737: PUSH
16738: LD_INT 6
16740: EQUAL
16741: IFFALSE 16761
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL_OW 313
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: PPUSH
16757: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16761: LD_EXP 41
16765: PPUSH
16766: LD_INT 2
16768: PPUSH
16769: CALL_OW 235
// CenterOnUnits ( depot ) ;
16773: LD_VAR 0 5
16777: PPUSH
16778: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16782: LD_EXP 41
16786: PPUSH
16787: LD_VAR 0 5
16791: PPUSH
16792: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16796: LD_VAR 0 3
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: PPUSH
16805: LD_VAR 0 5
16809: PPUSH
16810: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16814: LD_INT 35
16816: PPUSH
16817: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16821: LD_EXP 41
16825: PPUSH
16826: CALL_OW 310
16830: IFTRUE 16844
16832: PUSH
16833: LD_EXP 41
16837: PPUSH
16838: CALL_OW 302
16842: NOT
16843: OR
16844: IFTRUE 16858
16846: PUSH
16847: LD_VAR 0 5
16851: PPUSH
16852: CALL_OW 302
16856: NOT
16857: OR
16858: IFFALSE 16814
// InGameOff ;
16860: CALL_OW 9
// blockAttack := false ;
16864: LD_ADDR_EXP 29
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16872: LD_EXP 41
16876: PPUSH
16877: CALL_OW 302
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 16984
// if not IsOk ( depot ) then
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 302
16895: NOT
16896: IFFALSE 16961
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16898: LD_EXP 41
16902: PPUSH
16903: LD_INT 30
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16913: LD_INT 35
16915: PPUSH
16916: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16920: LD_EXP 41
16924: PPUSH
16925: LD_INT 30
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 307
16935: IFTRUE 16948
16937: PUSH
16938: LD_EXP 41
16942: PPUSH
16943: CALL_OW 301
16947: OR
16948: IFFALSE 16913
// RemoveUnit ( Ibrahim ) ;
16950: LD_EXP 41
16954: PPUSH
16955: CALL_OW 64
// exit ;
16959: GO 16984
// end ; ibrahimInDepot := true ;
16961: LD_ADDR_EXP 26
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// allowConvoys := true ;
16969: LD_ADDR_EXP 13
16973: PUSH
16974: LD_INT 1
16976: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16977: LD_STRING IbrahimInDepot
16979: PPUSH
16980: CALL_OW 97
// end ;
16984: PPOPN 5
16986: END
// export function IbrahimQuery ; begin
16987: LD_INT 0
16989: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16990: LD_STRING IbrahimQuery
16992: PPUSH
16993: CALL_OW 97
16997: PUSH
16998: LD_INT 1
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17376
17006: POP
// begin allowConvoys := false ;
17007: LD_ADDR_EXP 13
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// ibrahimInDepot := false ;
17015: LD_ADDR_EXP 26
17019: PUSH
17020: LD_INT 0
17022: ST_TO_ADDR
// InGameOn ;
17023: CALL_OW 8
// DialogueOn ;
17027: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
17031: LD_EXP 31
17035: PPUSH
17036: CALL_OW 87
// wait ( 0 0$1 ) ;
17040: LD_INT 35
17042: PPUSH
17043: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
17047: LD_EXP 31
17051: PPUSH
17052: LD_STRING DH-1-interrogation
17054: PPUSH
17055: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
17059: LD_EXP 41
17063: PPUSH
17064: LD_STRING DI-1-interrogation
17066: PPUSH
17067: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
17071: LD_EXP 31
17075: PPUSH
17076: LD_STRING DH-2-interrogation
17078: PPUSH
17079: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
17083: LD_EXP 41
17087: PPUSH
17088: LD_STRING DI-2-interrogation
17090: PPUSH
17091: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
17095: LD_EXP 31
17099: PPUSH
17100: LD_STRING DH-3-interrogation
17102: PPUSH
17103: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
17107: LD_EXP 41
17111: PPUSH
17112: LD_STRING DI-3-interrogation
17114: PPUSH
17115: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
17119: LD_EXP 31
17123: PPUSH
17124: LD_STRING DH-4-interrogation
17126: PPUSH
17127: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
17131: LD_EXP 41
17135: PPUSH
17136: LD_STRING DI-4-interrogation
17138: PPUSH
17139: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
17143: LD_EXP 31
17147: PPUSH
17148: LD_STRING DH-5-interrogation
17150: PPUSH
17151: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
17155: LD_EXP 41
17159: PPUSH
17160: LD_STRING DI-5-interrogation
17162: PPUSH
17163: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17167: LD_INT 10
17169: PPUSH
17170: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17174: LD_EXP 31
17178: PPUSH
17179: LD_STRING DH-6-interrogation
17181: PPUSH
17182: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17186: LD_EXP 41
17190: PPUSH
17191: LD_STRING DI-6-interrogation
17193: PPUSH
17194: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17198: LD_EXP 41
17202: PPUSH
17203: LD_STRING DI-7-interrogation
17205: PPUSH
17206: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17210: LD_EXP 31
17214: PPUSH
17215: LD_STRING DH-7-interrogation
17217: PPUSH
17218: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17222: LD_INT 10
17224: PPUSH
17225: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17229: LD_EXP 31
17233: PPUSH
17234: LD_STRING DH-8-interrogation
17236: PPUSH
17237: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17241: LD_EXP 41
17245: PPUSH
17246: LD_STRING DI-8-interrogation
17248: PPUSH
17249: CALL_OW 88
// wait ( 0 0$1 ) ;
17253: LD_INT 35
17255: PPUSH
17256: CALL_OW 67
// DialogueOff ;
17260: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17264: LD_STRING IbrahimDecisionQuery
17266: PPUSH
17267: CALL_OW 97
17271: PUSH
17272: LD_INT 1
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17304
17280: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17281: LD_EXP 41
17285: PPUSH
17286: LD_STRING DI-1-kill
17288: PPUSH
17289: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17293: LD_EXP 41
17297: PPUSH
17298: CALL_OW 66
// end ; 2 :
17302: GO 17370
17304: LD_INT 2
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17369
17312: POP
// begin SetSide ( Ibrahim , 6 ) ;
17313: LD_EXP 41
17317: PPUSH
17318: LD_INT 6
17320: PPUSH
17321: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17325: LD_EXP 41
17329: PPUSH
17330: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17334: LD_EXP 41
17338: PPUSH
17339: LD_INT 66
17341: PPUSH
17342: LD_INT 2
17344: PPUSH
17345: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17349: LD_EXP 41
17353: PPUSH
17354: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17358: LD_EXP 31
17362: PPUSH
17363: CALL_OW 122
// end ; end ;
17367: GO 17370
17369: POP
// InGameOff ;
17370: CALL_OW 9
// end ; 2 :
17374: GO 17390
17376: LD_INT 2
17378: DOUBLE
17379: EQUAL
17380: IFTRUE 17384
17382: GO 17389
17384: POP
// exit ; end ;
17385: GO 17474
17387: GO 17390
17389: POP
// allowConvoys := true ;
17390: LD_ADDR_EXP 13
17394: PUSH
17395: LD_INT 1
17397: ST_TO_ADDR
// blockAttack := false ;
17398: LD_ADDR_EXP 29
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17406: LD_INT 5250
17408: PPUSH
17409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17413: LD_INT 35
17415: PPUSH
17416: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17420: LD_INT 81
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: NOT
17449: IFFALSE 17413
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17451: LD_EXP 41
17455: PPUSH
17456: LD_INT 34
17458: PPUSH
17459: LD_INT 21
17461: PPUSH
17462: CALL_OW 111
// ibrahimIsFree := true ;
17466: LD_ADDR_EXP 27
17470: PUSH
17471: LD_INT 1
17473: ST_TO_ADDR
// end ;
17474: LD_VAR 0 1
17478: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17479: LD_EXP 27
17483: IFFALSE 17496
17485: PUSH
17486: LD_EXP 41
17490: PPUSH
17491: CALL_OW 302
17495: AND
17496: IFFALSE 17512
17498: PUSH
17499: LD_INT 2
17501: PPUSH
17502: LD_EXP 41
17506: PPUSH
17507: CALL_OW 292
17511: AND
17512: IFFALSE 18330
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
// begin wait ( 0 0$10 ) ;
17525: LD_INT 350
17527: PPUSH
17528: CALL_OW 67
// allowConvoys := false ;
17532: LD_ADDR_EXP 13
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// blockAttack := true ;
17540: LD_ADDR_EXP 29
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// depot := usDepot ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 11
17555: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17556: LD_INT 11
17558: NOT
17559: IFFALSE 17598
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 50
17574: PUSH
17575: EMPTY
17576: LIST
17577: PUSH
17578: LD_INT 30
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: PPUSH
17593: CALL_OW 69
17597: AND
17598: IFFALSE 17645
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: EMPTY
17619: LIST
17620: PUSH
17621: LD_INT 30
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PPUSH
17636: CALL_OW 69
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: ST_TO_ADDR
// InGameOn ;
17645: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17649: LD_EXP 41
17653: PPUSH
17654: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17658: LD_EXP 31
17662: PPUSH
17663: LD_EXP 41
17667: PPUSH
17668: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17672: LD_EXP 41
17676: PPUSH
17677: LD_EXP 31
17681: PPUSH
17682: CALL_OW 119
// DialogueOn ;
17686: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17690: LD_EXP 41
17694: PPUSH
17695: LD_STRING DI-1-free
17697: PPUSH
17698: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17702: LD_EXP 31
17706: PPUSH
17707: LD_STRING DH-1-free
17709: PPUSH
17710: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17714: LD_EXP 41
17718: PPUSH
17719: LD_STRING DI-2-free
17721: PPUSH
17722: CALL_OW 88
// changeClass := 0 ;
17726: LD_ADDR_VAR 0 1
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17734: LD_STRING IbrahimJoinQuery
17736: PPUSH
17737: CALL_OW 97
17741: PUSH
17742: LD_INT 1
17744: DOUBLE
17745: EQUAL
17746: IFTRUE 17750
17748: GO 17761
17750: POP
// begin changeClass := 1 ;
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: LD_INT 1
17758: ST_TO_ADDR
// end ; 2 :
17759: GO 18017
17761: LD_INT 2
17763: DOUBLE
17764: EQUAL
17765: IFTRUE 17769
17767: GO 17937
17769: POP
// begin Say ( Heike , DH-1-decline ) ;
17770: LD_EXP 31
17774: PPUSH
17775: LD_STRING DH-1-decline
17777: PPUSH
17778: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17782: LD_EXP 41
17786: PPUSH
17787: LD_STRING DI-1-decline
17789: PPUSH
17790: CALL_OW 88
// DialogueOff ;
17794: CALL_OW 7
// InGameOff ;
17798: CALL_OW 9
// blockAttack := false ;
17802: LD_ADDR_EXP 29
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17810: LD_EXP 41
17814: PPUSH
17815: LD_INT 30
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 111
// p := 0 ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
// repeat p := p + 1 ;
17833: LD_ADDR_VAR 0 3
17837: PUSH
17838: LD_VAR 0 3
17842: PUSH
17843: LD_INT 1
17845: PLUS
17846: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17847: LD_INT 35
17849: PPUSH
17850: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17854: LD_EXP 41
17858: PPUSH
17859: LD_INT 30
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 307
17869: IFTRUE 17902
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 101
17884: PUSH
17885: LD_INT 6
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: NOT
17901: OR
17902: IFTRUE 17914
17904: PUSH
17905: LD_VAR 0 3
17909: PUSH
17910: LD_INT 10
17912: GREATER
17913: OR
17914: IFFALSE 17833
// RemoveUnit ( Ibrahim ) ;
17916: LD_EXP 41
17920: PPUSH
17921: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17925: LD_INT 1
17927: PPUSH
17928: LD_STRING 03_IbrahimHasEscaped
17930: PPUSH
17931: CALL_OW 39
// end ; 3 :
17935: GO 18017
17937: LD_INT 3
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 18016
17945: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17946: LD_EXP 31
17950: PPUSH
17951: LD_STRING DH-1-radio-hq
17953: PPUSH
17954: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17958: LD_EXP 40
17962: PPUSH
17963: LD_STRING DO-1-radio-hq
17965: PPUSH
17966: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17970: LD_EXP 31
17974: PPUSH
17975: LD_STRING DH-2-radio-hq
17977: PPUSH
17978: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17982: LD_EXP 40
17986: PPUSH
17987: LD_STRING DO-2-radio-hq
17989: PPUSH
17990: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17994: LD_EXP 31
17998: PPUSH
17999: LD_STRING DH-3-radio-hq
18001: PPUSH
18002: CALL_OW 88
// changeClass := 1 ;
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// end ; end ;
18014: GO 18017
18016: POP
// if changeClass then
18017: LD_VAR 0 1
18021: IFFALSE 18330
// begin Say ( Heike , DH-1-agree ) ;
18023: LD_EXP 31
18027: PPUSH
18028: LD_STRING DH-1-agree
18030: PPUSH
18031: CALL_OW 88
// if IsOk ( Givi ) then
18035: LD_EXP 32
18039: PPUSH
18040: CALL_OW 302
18044: IFFALSE 18082
// begin Say ( Givi , DG-1-agree ) ;
18046: LD_EXP 32
18050: PPUSH
18051: LD_STRING DG-1-agree
18053: PPUSH
18054: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
18058: LD_EXP 31
18062: PPUSH
18063: LD_STRING DH-2-agree
18065: PPUSH
18066: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
18070: LD_EXP 32
18074: PPUSH
18075: LD_STRING DG-2-agree
18077: PPUSH
18078: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
18082: LD_EXP 41
18086: PPUSH
18087: CALL_OW 87
// DialogueOff ;
18091: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
18095: LD_VAR 0 4
18099: PPUSH
18100: CALL_OW 313
18104: PUSH
18105: LD_INT 6
18107: EQUAL
18108: IFFALSE 18128
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
18110: LD_VAR 0 4
18114: PPUSH
18115: CALL_OW 313
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PPUSH
18124: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
18128: LD_EXP 41
18132: PPUSH
18133: LD_INT 2
18135: PPUSH
18136: CALL_OW 235
// x := GetX ( Ibrahim ) ;
18140: LD_ADDR_VAR 0 5
18144: PUSH
18145: LD_EXP 41
18149: PPUSH
18150: CALL_OW 250
18154: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
18155: LD_ADDR_VAR 0 6
18159: PUSH
18160: LD_EXP 41
18164: PPUSH
18165: CALL_OW 251
18169: ST_TO_ADDR
// if depot then
18170: LD_VAR 0 4
18174: IFFALSE 18223
// begin ComEnterUnit ( Ibrahim , depot ) ;
18176: LD_EXP 41
18180: PPUSH
18181: LD_VAR 0 4
18185: PPUSH
18186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18190: LD_INT 35
18192: PPUSH
18193: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18197: LD_EXP 41
18201: PPUSH
18202: CALL_OW 310
18206: IFFALSE 18190
// b := IsInUnit ( Ibrahim ) ;
18208: LD_ADDR_VAR 0 2
18212: PUSH
18213: LD_EXP 41
18217: PPUSH
18218: CALL_OW 310
18222: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18223: LD_EXP 41
18227: PPUSH
18228: CALL_OW 64
// uc_side := 2 ;
18232: LD_ADDR_OWVAR 20
18236: PUSH
18237: LD_INT 2
18239: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18240: LD_ADDR_EXP 41
18244: PUSH
18245: LD_STRING Ibrahim
18247: PPUSH
18248: LD_INT 0
18250: PPUSH
18251: LD_STRING 
18253: PPUSH
18254: CALL 42591 0 3
18258: ST_TO_ADDR
// if depot then
18259: LD_VAR 0 4
18263: IFFALSE 18281
// PlaceHumanInUnit ( Ibrahim , b ) else
18265: LD_EXP 41
18269: PPUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 52
18279: GO 18303
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18281: LD_EXP 41
18285: PPUSH
18286: LD_VAR 0 5
18290: PPUSH
18291: LD_VAR 0 6
18295: PPUSH
18296: LD_INT 0
18298: PPUSH
18299: CALL_OW 48
// InGameOff ;
18303: CALL_OW 9
// allowConvoys := true ;
18307: LD_ADDR_EXP 13
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// blockAttack := false ;
18315: LD_ADDR_EXP 29
18319: PUSH
18320: LD_INT 0
18322: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18323: LD_STRING ACH_IBRAHIM
18325: PPUSH
18326: CALL_OW 543
// end ; end ;
18330: PPOPN 6
18332: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18333: LD_EXP 36
18337: PPUSH
18338: CALL_OW 256
18342: PUSH
18343: LD_INT 3
18345: LESS
18346: IFFALSE 18413
18348: GO 18350
18350: DISABLE
// begin DialogueOn ;
18351: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18355: LD_EXP 36
18359: PPUSH
18360: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18364: LD_EXP 36
18368: PPUSH
18369: LD_STRING DK-keydeath-1
18371: PPUSH
18372: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18376: LD_EXP 31
18380: PPUSH
18381: LD_STRING DH-keydeath-2
18383: PPUSH
18384: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18388: LD_EXP 31
18392: PPUSH
18393: LD_STRING DH-keydeath-3
18395: PPUSH
18396: CALL_OW 88
// DialogueOff ;
18400: CALL_OW 7
// KillUnit ( Kaia ) ;
18404: LD_EXP 36
18408: PPUSH
18409: CALL_OW 66
// end ;
18413: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18414: LD_EXP 12
18418: IFFALSE 18430
18420: PUSH
18421: LD_EXP 22
18425: PUSH
18426: LD_INT 1
18428: LESS
18429: AND
18430: IFFALSE 19001
18432: GO 18434
18434: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18435: LD_INT 22
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 25
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 25
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PPUSH
18477: CALL_OW 69
18481: IFFALSE 18559
// begin ChangeSideFog ( 1 , 2 ) ;
18483: LD_INT 1
18485: PPUSH
18486: LD_INT 2
18488: PPUSH
18489: CALL_OW 343
// Query ( DestroyEnemy ) ;
18493: LD_STRING DestroyEnemy
18495: PPUSH
18496: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18500: LD_INT 35
18502: PPUSH
18503: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18507: LD_INT 22
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 25
18532: PUSH
18533: LD_INT 3
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: PUSH
18554: LD_INT 0
18556: EQUAL
18557: IFFALSE 18500
// end ; if tick <= 45 45$00 then
18559: LD_OWVAR 1
18563: PUSH
18564: LD_INT 94500
18566: LESSEQUAL
18567: IFFALSE 18576
// SetAchievement ( ACH_HSPEED_3 ) ;
18569: LD_STRING ACH_HSPEED_3
18571: PPUSH
18572: CALL_OW 543
// DialogueOn ;
18576: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18580: LD_EXP 31
18584: PPUSH
18585: LD_STRING DH-1-final
18587: PPUSH
18588: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18592: LD_OWVAR 1
18596: PUSH
18597: LD_INT 138600
18599: PUSH
18600: LD_INT 134400
18602: PUSH
18603: LD_INT 130200
18605: PUSH
18606: LD_INT 126000
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: LD_OWVAR 67
18619: ARRAY
18620: LESSEQUAL
18621: IFFALSE 18635
// AddMedal ( med1 , 1 ) else
18623: LD_STRING med1
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 101
18633: GO 18646
// AddMedal ( med1 , - 1 ) ;
18635: LD_STRING med1
18637: PPUSH
18638: LD_INT 1
18640: NEG
18641: PPUSH
18642: CALL_OW 101
// if vehCounter >= 2 then
18646: LD_EXP 23
18650: PUSH
18651: LD_INT 2
18653: GREATEREQUAL
18654: IFFALSE 18668
// AddMedal ( med2 , 1 ) else
18656: LD_STRING med2
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 101
18666: GO 18679
// AddMedal ( med2 , - 1 ) ;
18668: LD_STRING med2
18670: PPUSH
18671: LD_INT 1
18673: NEG
18674: PPUSH
18675: CALL_OW 101
// if deadCounter = 0 then
18679: LD_EXP 10
18683: PUSH
18684: LD_INT 0
18686: EQUAL
18687: IFFALSE 18701
// AddMedal ( med3 , 1 ) else
18689: LD_STRING med3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 101
18699: GO 18712
// AddMedal ( med3 , - 1 ) ;
18701: LD_STRING med3
18703: PPUSH
18704: LD_INT 1
18706: NEG
18707: PPUSH
18708: CALL_OW 101
// GiveMedals ( MAIN ) ;
18712: LD_STRING MAIN
18714: PPUSH
18715: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18719: LD_INT 22
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 23
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18763: LD_EXP 31
18767: PPUSH
18768: LD_STRING 03_Heike
18770: PPUSH
18771: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18775: LD_EXP 35
18779: PPUSH
18780: LD_STRING 03_Aviradze
18782: PPUSH
18783: CALL_OW 38
// if Givi then
18787: LD_EXP 32
18791: IFFALSE 18805
// SaveCharacters ( Givi , 03_Givi ) ;
18793: LD_EXP 32
18797: PPUSH
18798: LD_STRING 03_Givi
18800: PPUSH
18801: CALL_OW 38
// if Mike then
18805: LD_EXP 33
18809: IFFALSE 18823
// SaveCharacters ( Mike , 03_Mike ) ;
18811: LD_EXP 33
18815: PPUSH
18816: LD_STRING 03_Mike
18818: PPUSH
18819: CALL_OW 38
// if Kamil then
18823: LD_EXP 34
18827: IFFALSE 18841
// SaveCharacters ( Kamil , 03_Kamil ) ;
18829: LD_EXP 34
18833: PPUSH
18834: LD_STRING 03_Kamil
18836: PPUSH
18837: CALL_OW 38
// if Kaia then
18841: LD_EXP 36
18845: IFFALSE 18859
// SaveCharacters ( Kaia , 03_Kaia ) ;
18847: LD_EXP 36
18851: PPUSH
18852: LD_STRING 03_Kaia
18854: PPUSH
18855: CALL_OW 38
// if Sophia then
18859: LD_EXP 37
18863: IFFALSE 18877
// SaveCharacters ( Sophia , 03_Sophia ) ;
18865: LD_EXP 37
18869: PPUSH
18870: LD_STRING 03_Sophia
18872: PPUSH
18873: CALL_OW 38
// if Markov then
18877: LD_EXP 38
18881: IFFALSE 18895
// SaveCharacters ( Markov , 03_Markov ) ;
18883: LD_EXP 38
18887: PPUSH
18888: LD_STRING 03_Markov
18890: PPUSH
18891: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18895: LD_EXP 41
18899: IFFALSE 18916
18901: PUSH
18902: LD_EXP 41
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 2
18914: EQUAL
18915: AND
18916: IFFALSE 18937
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18918: LD_STRING enableBioCharacter(BIO_IBRA)
18920: PPUSH
18921: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18925: LD_EXP 41
18929: PPUSH
18930: LD_STRING 03_Ibrahim
18932: PPUSH
18933: CALL_OW 38
// end ; if heikeSecondSquad then
18937: LD_EXP 45
18941: IFFALSE 18955
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18943: LD_EXP 45
18947: PPUSH
18948: LD_STRING 03_others
18950: PPUSH
18951: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18955: LD_EXP 10
18959: PPUSH
18960: LD_STRING 03_DeadCounter
18962: PPUSH
18963: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18967: LD_EXP 30
18971: PPUSH
18972: LD_STRING 03_CargoRecycled
18974: PPUSH
18975: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18979: LD_STRING enableBioCharacter(BIO_OMAR)
18981: PPUSH
18982: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18986: LD_STRING enableBioCharacter(BIO_FARM)
18988: PPUSH
18989: CALL_OW 559
// YouWin ;
18993: CALL_OW 103
// DialogueOff ;
18997: CALL_OW 7
// end ; end_of_file
19001: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL 36388 0 1
// if un = Heike then
19011: LD_VAR 0 1
19015: PUSH
19016: LD_EXP 31
19020: EQUAL
19021: IFFALSE 19030
// YouLost ( Heike ) ;
19023: LD_STRING Heike
19025: PPUSH
19026: CALL_OW 104
// if un = Aviradze then
19030: LD_VAR 0 1
19034: PUSH
19035: LD_EXP 35
19039: EQUAL
19040: IFFALSE 19049
// YouLost ( Aviradze ) ;
19042: LD_STRING Aviradze
19044: PPUSH
19045: CALL_OW 104
// if un = usDepot and not retreatAllowed then
19049: LD_VAR 0 1
19053: PUSH
19054: LD_INT 11
19056: EQUAL
19057: IFFALSE 19066
19059: PUSH
19060: LD_EXP 12
19064: NOT
19065: AND
19066: IFFALSE 19075
// YouLost ( Depot ) ;
19068: LD_STRING Depot
19070: PPUSH
19071: CALL_OW 104
// if un = arDepot then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_INT 5
19082: EQUAL
19083: IFFALSE 19092
// YouLost ( FarmerDepot ) ;
19085: LD_STRING FarmerDepot
19087: PPUSH
19088: CALL_OW 104
// if un = Farmer then
19092: LD_VAR 0 1
19096: PUSH
19097: LD_EXP 39
19101: EQUAL
19102: IFFALSE 19111
// YouLost ( Farmer ) ;
19104: LD_STRING Farmer
19106: PPUSH
19107: CALL_OW 104
// if un in usForces then
19111: LD_VAR 0 1
19115: PUSH
19116: LD_EXP 47
19120: IN
19121: IFFALSE 19139
// usForces := usForces diff un ;
19123: LD_ADDR_EXP 47
19127: PUSH
19128: LD_EXP 47
19132: PUSH
19133: LD_VAR 0 1
19137: DIFF
19138: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
19139: LD_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 21
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: IN
19184: IFFALSE 19200
// deadCounter := deadCounter + 1 ;
19186: LD_ADDR_EXP 10
19190: PUSH
19191: LD_EXP 10
19195: PUSH
19196: LD_INT 1
19198: PLUS
19199: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19200: LD_VAR 0 1
19204: PUSH
19205: LD_INT 22
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 34
19217: PUSH
19218: LD_INT 12
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: IN
19234: IFFALSE 19243
19236: PUSH
19237: LD_EXP 19
19241: NOT
19242: AND
19243: IFFALSE 19253
// firstConvoyDestroyed := true ;
19245: LD_ADDR_EXP 19
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if un in usAttackers then
19253: LD_VAR 0 1
19257: PUSH
19258: LD_EXP 50
19262: IN
19263: IFFALSE 19281
// usAttackers := usAttackers diff un ;
19265: LD_ADDR_EXP 50
19269: PUSH
19270: LD_EXP 50
19274: PUSH
19275: LD_VAR 0 1
19279: DIFF
19280: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19281: LD_VAR 0 1
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 5
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: IN
19315: IFFALSE 19331
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19317: LD_ADDR_EXP 21
19321: PUSH
19322: LD_EXP 21
19326: PUSH
19327: LD_INT 1
19329: PLUS
19330: ST_TO_ADDR
// end ;
19331: PPOPN 1
19333: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19334: LD_VAR 0 2
19338: PUSH
19339: LD_EXP 41
19343: EQUAL
19344: IFFALSE 19352
19346: PUSH
19347: LD_EXP 26
19351: AND
19352: IFFALSE 19539
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19354: LD_INT 22
19356: PUSH
19357: LD_INT 2
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 30
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 50
19376: PUSH
19377: EMPTY
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: IFFALSE 19443
// begin InGameOn ;
19391: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19395: LD_EXP 41
19399: PPUSH
19400: LD_INT 11
19402: PPUSH
19403: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19407: LD_INT 35
19409: PPUSH
19410: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19414: LD_EXP 41
19418: PPUSH
19419: LD_INT 11
19421: PPUSH
19422: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19426: LD_EXP 41
19430: PPUSH
19431: CALL_OW 310
19435: IFFALSE 19407
// InGameOff ;
19437: CALL_OW 9
// end else
19441: GO 19539
// begin SetSide ( Ibrahim , 6 ) ;
19443: LD_EXP 41
19447: PPUSH
19448: LD_INT 6
19450: PPUSH
19451: CALL_OW 235
// ibrahimInDepot := false ;
19455: LD_ADDR_EXP 26
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19463: LD_EXP 41
19467: PPUSH
19468: LD_INT 30
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19478: LD_INT 35
19480: PPUSH
19481: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19485: LD_EXP 41
19489: PPUSH
19490: LD_INT 30
19492: PPUSH
19493: LD_INT 1
19495: PPUSH
19496: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19500: LD_EXP 41
19504: PPUSH
19505: LD_INT 30
19507: PPUSH
19508: LD_INT 1
19510: PPUSH
19511: CALL_OW 307
19515: IFTRUE 19528
19517: PUSH
19518: LD_EXP 41
19522: PPUSH
19523: CALL_OW 301
19527: OR
19528: IFFALSE 19478
// RemoveUnit ( Ibrahim ) ;
19530: LD_EXP 41
19534: PPUSH
19535: CALL_OW 64
// end ; end ; end ;
19539: PPOPN 2
19541: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19542: LD_VAR 0 2
19546: PUSH
19547: LD_EXP 31
19551: EQUAL
19552: IFFALSE 19564
19554: PUSH
19555: LD_VAR 0 1
19559: PUSH
19560: LD_INT 11
19562: EQUAL
19563: AND
19564: IFFALSE 19572
19566: PUSH
19567: LD_EXP 26
19571: AND
19572: IFFALSE 19578
// IbrahimQuery ;
19574: CALL 16987 0 0
// end ;
19578: PPOPN 2
19580: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: CALL_OW 141
// if oldId in usAttackers then
19590: LD_VAR 0 2
19594: PUSH
19595: LD_EXP 50
19599: IN
19600: IFFALSE 19618
// usAttackers := usAttackers diff oldId ;
19602: LD_ADDR_EXP 50
19606: PUSH
19607: LD_EXP 50
19611: PUSH
19612: LD_VAR 0 2
19616: DIFF
19617: ST_TO_ADDR
// if newId in usAttackers then
19618: LD_VAR 0 1
19622: PUSH
19623: LD_EXP 50
19627: IN
19628: IFFALSE 19646
// usAttackers := usAttackers diff newId ;
19630: LD_ADDR_EXP 50
19634: PUSH
19635: LD_EXP 50
19639: PUSH
19640: LD_VAR 0 1
19644: DIFF
19645: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 4
19653: EQUAL
19654: IFFALSE 19663
19656: PUSH
19657: LD_EXP 19
19661: NOT
19662: AND
19663: IFFALSE 19673
// firstConvoyDestroyed := true ;
19665: LD_ADDR_EXP 19
19669: PUSH
19670: LD_INT 1
19672: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 264
19682: PUSH
19683: LD_INT 12
19685: EQUAL
19686: IFFALSE 19724
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19688: LD_ADDR_EXP 14
19692: PUSH
19693: LD_EXP 14
19697: PUSH
19698: LD_INT 1
19700: PLUS
19701: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19702: LD_VAR 0 1
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 289
19714: PUSH
19715: LD_INT 0
19717: EQUAL
19718: IFFALSE 19724
// EmptyCargoDialog ;
19720: CALL 15585 0 0
// end ; end ;
19724: PPOPN 4
19726: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19727: LD_VAR 0 1
19731: PUSH
19732: LD_INT 2
19734: EQUAL
19735: IFFALSE 19747
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: LD_INT 5
19745: EQUAL
19746: AND
19747: IFFALSE 19756
// YouLost ( Attack ) ;
19749: LD_STRING Attack
19751: PPUSH
19752: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19756: LD_VAR 0 1
19760: PUSH
19761: LD_INT 2
19763: EQUAL
19764: IFFALSE 19776
19766: PUSH
19767: LD_VAR 0 2
19771: PUSH
19772: LD_INT 1
19774: EQUAL
19775: AND
19776: IFFALSE 19786
// americanContact := true ;
19778: LD_ADDR_EXP 5
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// end ;
19786: PPOPN 2
19788: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19789: LD_VAR 0 1
19793: PPUSH
19794: CALL_OW 255
19798: PUSH
19799: LD_INT 1
19801: EQUAL
19802: IFFALSE 19811
19804: PUSH
19805: LD_EXP 7
19809: NOT
19810: AND
19811: IFFALSE 19945
// begin if GetBType ( b ) = b_lab then
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 266
19822: PUSH
19823: LD_INT 6
19825: EQUAL
19826: IFFALSE 19866
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19828: LD_EXP 47
19832: PPUSH
19833: LD_INT 25
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PPUSH
19843: CALL_OW 72
19847: PPUSH
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 120
// AmLabResearch ( b ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL 5172 0 1
// end ; if GetBType ( b ) = b_armoury then
19866: LD_VAR 0 1
19870: PPUSH
19871: CALL_OW 266
19875: PUSH
19876: LD_INT 4
19878: EQUAL
19879: IFFALSE 19927
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19881: LD_EXP 47
19885: PPUSH
19886: LD_INT 25
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 54
19901: PUSH
19902: EMPTY
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 72
19917: PPUSH
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19927: LD_ADDR_EXP 49
19931: PUSH
19932: LD_EXP 49
19936: PPUSH
19937: LD_INT 1
19939: PPUSH
19940: CALL_OW 3
19944: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 255
19954: PUSH
19955: LD_INT 5
19957: EQUAL
19958: IFFALSE 19972
// SetBLevel ( b , 5 ) ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_INT 5
19967: PPUSH
19968: CALL_OW 241
// end ;
19972: PPOPN 1
19974: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19975: LD_VAR 0 11
19979: PUSH
19980: LD_INT 12
19982: EQUAL
19983: IFFALSE 19993
// cargoRecycled := true ;
19985: LD_ADDR_EXP 30
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// end ;
19993: PPOPN 11
19995: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 255
20005: PUSH
20006: LD_INT 2
20008: EQUAL
20009: IFFALSE 20025
// vehCounter := vehCounter + 1 ;
20011: LD_ADDR_EXP 23
20015: PUSH
20016: LD_EXP 23
20020: PUSH
20021: LD_INT 1
20023: PLUS
20024: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
20025: LD_VAR 0 1
20029: PPUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL 36446 0 2
// end ;
20039: PPOPN 2
20041: END
// on SailEvent ( event ) do begin if event = eventAttack then
20042: LD_VAR 0 1
20046: PUSH
20047: LD_EXP 25
20051: EQUAL
20052: IFFALSE 20058
// AmericanAttack ;
20054: CALL 6832 0 0
// end ; end_of_file
20058: PPOPN 1
20060: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
20061: LD_OWVAR 1
20065: PUSH
20066: LD_INT 10500
20068: PUSH
20069: LD_INT 9800
20071: PUSH
20072: LD_INT 9450
20074: PUSH
20075: LD_INT 9100
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: LD_OWVAR 67
20088: ARRAY
20089: LESSEQUAL
20090: IFFALSE 20117
20092: GO 20094
20094: DISABLE
// begin enable ;
20095: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
20096: LD_INT 1
20098: PPUSH
20099: LD_INT 5
20101: PPUSH
20102: CALL_OW 12
20106: PPUSH
20107: LD_INT 9
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: CALL_OW 55
// end ;
20117: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
20118: LD_EXP 7
20122: IFFALSE 20134
20124: PUSH
20125: LD_OWVAR 1
20129: PUSH
20130: LD_INT 94500
20132: LESSEQUAL
20133: AND
20134: IFFALSE 20161
20136: GO 20138
20138: DISABLE
// begin enable ;
20139: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 5
20145: PPUSH
20146: CALL_OW 12
20150: PPUSH
20151: LD_INT 9
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL_OW 55
// end ; end_of_file
20161: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
20162: LD_EXP 12
20166: NOT
20167: IFFALSE 20175
20169: PUSH
20170: LD_EXP 17
20174: AND
20175: IFFALSE 20183
20177: PUSH
20178: LD_EXP 4
20182: AND
20183: IFFALSE 20197
20185: PUSH
20186: LD_EXP 16
20190: PUSH
20191: LD_EXP 17
20195: LESSEQUAL
20196: AND
20197: IFFALSE 20308
20199: GO 20201
20201: DISABLE
// begin enable ;
20202: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20203: LD_ADDR_OWVAR 47
20207: PUSH
20208: LD_STRING #X103-1
20210: PUSH
20211: LD_EXP 17
20215: PUSH
20216: LD_EXP 16
20220: MINUS
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20226: LD_ADDR_EXP 16
20230: PUSH
20231: LD_INT 5
20233: PPUSH
20234: CALL_OW 274
20238: PPUSH
20239: LD_INT 1
20241: PPUSH
20242: CALL_OW 275
20246: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20247: LD_INT 10
20249: PPUSH
20250: LD_INT 1
20252: PPUSH
20253: CALL_OW 287
20257: PUSH
20258: LD_INT 0
20260: EQUAL
20261: IFFALSE 20279
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20263: LD_ADDR_EXP 18
20267: PUSH
20268: LD_EXP 18
20272: PUSH
20273: LD_INT 35
20275: MINUS
20276: ST_TO_ADDR
20277: GO 20308
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20279: LD_ADDR_EXP 18
20283: PUSH
20284: LD_INT 42000
20286: PUSH
20287: LD_INT 31500
20289: PUSH
20290: LD_INT 25200
20292: PUSH
20293: LD_INT 21000
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_OWVAR 67
20306: ARRAY
20307: ST_TO_ADDR
// end ; end_of_file
20308: END
// export globalGameSaveCounter ; every 0 0$1 do
20309: GO 20311
20311: DISABLE
// begin enable ;
20312: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20313: LD_STRING updateTimer(
20315: PUSH
20316: LD_OWVAR 1
20320: STR
20321: PUSH
20322: LD_STRING );
20324: STR
20325: PPUSH
20326: CALL_OW 559
// end ;
20330: END
// every 0 0$1 do
20331: GO 20333
20333: DISABLE
// begin globalGameSaveCounter := 0 ;
20334: LD_ADDR_EXP 51
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20342: LD_STRING setGameSaveCounter(0)
20344: PPUSH
20345: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20349: LD_STRING initStreamRollete();
20351: PPUSH
20352: CALL_OW 559
// InitStreamMode ;
20356: CALL 21701 0 0
// DefineStreamItems ( false ) ;
20360: LD_INT 0
20362: PPUSH
20363: CALL 22165 0 1
// end ;
20367: END
// export function SOS_MapStart ( ) ; begin
20368: LD_INT 0
20370: PPUSH
// if streamModeActive then
20371: LD_EXP 52
20375: IFFALSE 20384
// DefineStreamItems ( true ) ;
20377: LD_INT 1
20379: PPUSH
20380: CALL 22165 0 1
// UpdateLuaVariables ( ) ;
20384: CALL 20401 0 0
// UpdateFactoryWaypoints ( ) ;
20388: CALL 35287 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20392: CALL 35539 0 0
// end ;
20396: LD_VAR 0 1
20400: RET
// function UpdateLuaVariables ( ) ; begin
20401: LD_INT 0
20403: PPUSH
// if globalGameSaveCounter then
20404: LD_EXP 51
20408: IFFALSE 20442
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20410: LD_ADDR_EXP 51
20414: PUSH
20415: LD_EXP 51
20419: PPUSH
20420: CALL 82120 0 1
20424: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20425: LD_STRING setGameSaveCounter(
20427: PUSH
20428: LD_EXP 51
20432: STR
20433: PUSH
20434: LD_STRING )
20436: STR
20437: PPUSH
20438: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20442: LD_STRING setGameDifficulty(
20444: PUSH
20445: LD_OWVAR 67
20449: STR
20450: PUSH
20451: LD_STRING )
20453: STR
20454: PPUSH
20455: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20459: LD_STRING displayDifficulty(
20461: PUSH
20462: LD_OWVAR 67
20466: STR
20467: PUSH
20468: LD_STRING )
20470: STR
20471: PPUSH
20472: CALL_OW 559
// end ;
20476: LD_VAR 0 1
20480: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20481: LD_INT 0
20483: PPUSH
// if p2 = stream_mode then
20484: LD_VAR 0 2
20488: PUSH
20489: LD_INT 100
20491: EQUAL
20492: IFFALSE 21495
// begin if not StreamModeActive then
20494: LD_EXP 52
20498: NOT
20499: IFFALSE 20509
// StreamModeActive := true ;
20501: LD_ADDR_EXP 52
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 0 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 0
20516: EQUAL
20517: IFFALSE 20523
// InitStreamMode ;
20519: CALL 21701 0 0
// if p3 = 1 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 1
20530: EQUAL
20531: IFFALSE 20541
// sRocket := true ;
20533: LD_ADDR_EXP 57
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 2 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 2
20548: EQUAL
20549: IFFALSE 20559
// sSpeed := true ;
20551: LD_ADDR_EXP 56
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 3 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 3
20566: EQUAL
20567: IFFALSE 20577
// sEngine := true ;
20569: LD_ADDR_EXP 58
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 4 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 4
20584: EQUAL
20585: IFFALSE 20595
// sSpec := true ;
20587: LD_ADDR_EXP 55
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 5 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 5
20602: EQUAL
20603: IFFALSE 20613
// sLevel := true ;
20605: LD_ADDR_EXP 59
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 6 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 6
20620: EQUAL
20621: IFFALSE 20631
// sArmoury := true ;
20623: LD_ADDR_EXP 60
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 7 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 7
20638: EQUAL
20639: IFFALSE 20649
// sRadar := true ;
20641: LD_ADDR_EXP 61
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 8 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 8
20656: EQUAL
20657: IFFALSE 20667
// sBunker := true ;
20659: LD_ADDR_EXP 62
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 9 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 9
20674: EQUAL
20675: IFFALSE 20685
// sHack := true ;
20677: LD_ADDR_EXP 63
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 10 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 10
20692: EQUAL
20693: IFFALSE 20703
// sFire := true ;
20695: LD_ADDR_EXP 64
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 11 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 11
20710: EQUAL
20711: IFFALSE 20721
// sRefresh := true ;
20713: LD_ADDR_EXP 65
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 12 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 12
20728: EQUAL
20729: IFFALSE 20739
// sExp := true ;
20731: LD_ADDR_EXP 66
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 13 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 13
20746: EQUAL
20747: IFFALSE 20757
// sDepot := true ;
20749: LD_ADDR_EXP 67
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 14 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 14
20764: EQUAL
20765: IFFALSE 20775
// sFlag := true ;
20767: LD_ADDR_EXP 68
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 15 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 15
20782: EQUAL
20783: IFFALSE 20793
// sKamikadze := true ;
20785: LD_ADDR_EXP 76
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 16 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 16
20800: EQUAL
20801: IFFALSE 20811
// sTroll := true ;
20803: LD_ADDR_EXP 77
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 17 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 17
20818: EQUAL
20819: IFFALSE 20829
// sSlow := true ;
20821: LD_ADDR_EXP 78
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 18 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 18
20836: EQUAL
20837: IFFALSE 20847
// sLack := true ;
20839: LD_ADDR_EXP 79
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 19 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 19
20854: EQUAL
20855: IFFALSE 20865
// sTank := true ;
20857: LD_ADDR_EXP 81
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 20 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 20
20872: EQUAL
20873: IFFALSE 20883
// sRemote := true ;
20875: LD_ADDR_EXP 82
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 21 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 21
20890: EQUAL
20891: IFFALSE 20901
// sPowell := true ;
20893: LD_ADDR_EXP 83
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 22 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 22
20908: EQUAL
20909: IFFALSE 20919
// sTeleport := true ;
20911: LD_ADDR_EXP 86
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 23 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 23
20926: EQUAL
20927: IFFALSE 20937
// sOilTower := true ;
20929: LD_ADDR_EXP 88
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 24 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 24
20944: EQUAL
20945: IFFALSE 20955
// sShovel := true ;
20947: LD_ADDR_EXP 89
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 25 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 25
20962: EQUAL
20963: IFFALSE 20973
// sSheik := true ;
20965: LD_ADDR_EXP 90
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 26 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 26
20980: EQUAL
20981: IFFALSE 20991
// sEarthquake := true ;
20983: LD_ADDR_EXP 92
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 27 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 27
20998: EQUAL
20999: IFFALSE 21009
// sAI := true ;
21001: LD_ADDR_EXP 93
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 28 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 28
21016: EQUAL
21017: IFFALSE 21027
// sCargo := true ;
21019: LD_ADDR_EXP 96
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 29 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 29
21034: EQUAL
21035: IFFALSE 21045
// sDLaser := true ;
21037: LD_ADDR_EXP 97
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 30 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 30
21052: EQUAL
21053: IFFALSE 21063
// sExchange := true ;
21055: LD_ADDR_EXP 98
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 31 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 31
21070: EQUAL
21071: IFFALSE 21081
// sFac := true ;
21073: LD_ADDR_EXP 99
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 32 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 32
21088: EQUAL
21089: IFFALSE 21099
// sPower := true ;
21091: LD_ADDR_EXP 100
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 33 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 33
21106: EQUAL
21107: IFFALSE 21117
// sRandom := true ;
21109: LD_ADDR_EXP 101
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 34 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 34
21124: EQUAL
21125: IFFALSE 21135
// sShield := true ;
21127: LD_ADDR_EXP 102
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 35 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 35
21142: EQUAL
21143: IFFALSE 21153
// sTime := true ;
21145: LD_ADDR_EXP 103
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 36 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 36
21160: EQUAL
21161: IFFALSE 21171
// sTools := true ;
21163: LD_ADDR_EXP 104
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 101 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 101
21178: EQUAL
21179: IFFALSE 21189
// sSold := true ;
21181: LD_ADDR_EXP 69
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 102 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 102
21196: EQUAL
21197: IFFALSE 21207
// sDiff := true ;
21199: LD_ADDR_EXP 70
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 103 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 103
21214: EQUAL
21215: IFFALSE 21225
// sFog := true ;
21217: LD_ADDR_EXP 73
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 104 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 104
21232: EQUAL
21233: IFFALSE 21243
// sReset := true ;
21235: LD_ADDR_EXP 74
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 105 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 105
21250: EQUAL
21251: IFFALSE 21261
// sSun := true ;
21253: LD_ADDR_EXP 75
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 106 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 106
21268: EQUAL
21269: IFFALSE 21279
// sTiger := true ;
21271: LD_ADDR_EXP 71
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 107 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 107
21286: EQUAL
21287: IFFALSE 21297
// sBomb := true ;
21289: LD_ADDR_EXP 72
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 108 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 108
21304: EQUAL
21305: IFFALSE 21315
// sWound := true ;
21307: LD_ADDR_EXP 80
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 109 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 109
21322: EQUAL
21323: IFFALSE 21333
// sBetray := true ;
21325: LD_ADDR_EXP 84
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 110 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 110
21340: EQUAL
21341: IFFALSE 21351
// sContamin := true ;
21343: LD_ADDR_EXP 85
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 111 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 111
21358: EQUAL
21359: IFFALSE 21369
// sOil := true ;
21361: LD_ADDR_EXP 87
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 112 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 112
21376: EQUAL
21377: IFFALSE 21387
// sStu := true ;
21379: LD_ADDR_EXP 91
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 113 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 113
21394: EQUAL
21395: IFFALSE 21405
// sBazooka := true ;
21397: LD_ADDR_EXP 94
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 114 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 114
21412: EQUAL
21413: IFFALSE 21423
// sMortar := true ;
21415: LD_ADDR_EXP 95
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 115 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 115
21430: EQUAL
21431: IFFALSE 21441
// sRanger := true ;
21433: LD_ADDR_EXP 105
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 116 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 116
21448: EQUAL
21449: IFFALSE 21459
// sComputer := true ;
21451: LD_ADDR_EXP 106
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 117 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 117
21466: EQUAL
21467: IFFALSE 21477
// s30 := true ;
21469: LD_ADDR_EXP 107
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 118 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 118
21484: EQUAL
21485: IFFALSE 21495
// s60 := true ;
21487: LD_ADDR_EXP 108
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// end ; if p2 = hack_mode then
21495: LD_VAR 0 2
21499: PUSH
21500: LD_INT 101
21502: EQUAL
21503: IFFALSE 21631
// begin case p3 of 1 :
21505: LD_VAR 0 3
21509: PUSH
21510: LD_INT 1
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21525
21518: POP
// hHackUnlimitedResources ; 2 :
21519: CALL 33894 0 0
21523: GO 21631
21525: LD_INT 2
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21540
21533: POP
// hHackSetLevel10 ; 3 :
21534: CALL 34027 0 0
21538: GO 21631
21540: LD_INT 3
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21548
21546: GO 21555
21548: POP
// hHackSetLevel10YourUnits ; 4 :
21549: CALL 34112 0 0
21553: GO 21631
21555: LD_INT 4
21557: DOUBLE
21558: EQUAL
21559: IFTRUE 21563
21561: GO 21570
21563: POP
// hHackInvincible ; 5 :
21564: CALL 34560 0 0
21568: GO 21631
21570: LD_INT 5
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21585
21578: POP
// hHackInvisible ; 6 :
21579: CALL 34671 0 0
21583: GO 21631
21585: LD_INT 6
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21600
21593: POP
// hHackChangeYourSide ; 7 :
21594: CALL 34728 0 0
21598: GO 21631
21600: LD_INT 7
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21615
21608: POP
// hHackChangeUnitSide ; 8 :
21609: CALL 34770 0 0
21613: GO 21631
21615: LD_INT 8
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21630
21623: POP
// hHackFog ; end ;
21624: CALL 34871 0 0
21628: GO 21631
21630: POP
// end ; if p2 = game_save_mode then
21631: LD_VAR 0 2
21635: PUSH
21636: LD_INT 102
21638: EQUAL
21639: IFFALSE 21696
// begin if p3 = 1 then
21641: LD_VAR 0 3
21645: PUSH
21646: LD_INT 1
21648: EQUAL
21649: IFFALSE 21661
// globalGameSaveCounter := p4 ;
21651: LD_ADDR_EXP 51
21655: PUSH
21656: LD_VAR 0 4
21660: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21661: LD_VAR 0 3
21665: PUSH
21666: LD_INT 2
21668: EQUAL
21669: IFFALSE 21677
21671: PUSH
21672: LD_EXP 51
21676: AND
21677: IFFALSE 21696
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21679: LD_STRING setGameSaveCounter(
21681: PUSH
21682: LD_EXP 51
21686: STR
21687: PUSH
21688: LD_STRING )
21690: STR
21691: PPUSH
21692: CALL_OW 559
// end ; end ;
21696: LD_VAR 0 7
21700: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21701: LD_INT 0
21703: PPUSH
// streamModeActive := false ;
21704: LD_ADDR_EXP 52
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// normalCounter := 36 ;
21712: LD_ADDR_EXP 53
21716: PUSH
21717: LD_INT 36
21719: ST_TO_ADDR
// hardcoreCounter := 18 ;
21720: LD_ADDR_EXP 54
21724: PUSH
21725: LD_INT 18
21727: ST_TO_ADDR
// sRocket := false ;
21728: LD_ADDR_EXP 57
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sSpeed := false ;
21736: LD_ADDR_EXP 56
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sEngine := false ;
21744: LD_ADDR_EXP 58
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sSpec := false ;
21752: LD_ADDR_EXP 55
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sLevel := false ;
21760: LD_ADDR_EXP 59
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sArmoury := false ;
21768: LD_ADDR_EXP 60
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sRadar := false ;
21776: LD_ADDR_EXP 61
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sBunker := false ;
21784: LD_ADDR_EXP 62
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sHack := false ;
21792: LD_ADDR_EXP 63
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sFire := false ;
21800: LD_ADDR_EXP 64
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sRefresh := false ;
21808: LD_ADDR_EXP 65
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sExp := false ;
21816: LD_ADDR_EXP 66
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sDepot := false ;
21824: LD_ADDR_EXP 67
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sFlag := false ;
21832: LD_ADDR_EXP 68
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sKamikadze := false ;
21840: LD_ADDR_EXP 76
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sTroll := false ;
21848: LD_ADDR_EXP 77
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sSlow := false ;
21856: LD_ADDR_EXP 78
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sLack := false ;
21864: LD_ADDR_EXP 79
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sTank := false ;
21872: LD_ADDR_EXP 81
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sRemote := false ;
21880: LD_ADDR_EXP 82
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sPowell := false ;
21888: LD_ADDR_EXP 83
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sTeleport := false ;
21896: LD_ADDR_EXP 86
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sOilTower := false ;
21904: LD_ADDR_EXP 88
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sShovel := false ;
21912: LD_ADDR_EXP 89
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sSheik := false ;
21920: LD_ADDR_EXP 90
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sEarthquake := false ;
21928: LD_ADDR_EXP 92
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sAI := false ;
21936: LD_ADDR_EXP 93
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sCargo := false ;
21944: LD_ADDR_EXP 96
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sDLaser := false ;
21952: LD_ADDR_EXP 97
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sExchange := false ;
21960: LD_ADDR_EXP 98
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sFac := false ;
21968: LD_ADDR_EXP 99
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sPower := false ;
21976: LD_ADDR_EXP 100
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sRandom := false ;
21984: LD_ADDR_EXP 101
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sShield := false ;
21992: LD_ADDR_EXP 102
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sTime := false ;
22000: LD_ADDR_EXP 103
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sTools := false ;
22008: LD_ADDR_EXP 104
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sSold := false ;
22016: LD_ADDR_EXP 69
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sDiff := false ;
22024: LD_ADDR_EXP 70
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sFog := false ;
22032: LD_ADDR_EXP 73
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sReset := false ;
22040: LD_ADDR_EXP 74
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sSun := false ;
22048: LD_ADDR_EXP 75
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sTiger := false ;
22056: LD_ADDR_EXP 71
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sBomb := false ;
22064: LD_ADDR_EXP 72
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sWound := false ;
22072: LD_ADDR_EXP 80
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sBetray := false ;
22080: LD_ADDR_EXP 84
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sContamin := false ;
22088: LD_ADDR_EXP 85
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sOil := false ;
22096: LD_ADDR_EXP 87
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sStu := false ;
22104: LD_ADDR_EXP 91
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sBazooka := false ;
22112: LD_ADDR_EXP 94
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sMortar := false ;
22120: LD_ADDR_EXP 95
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sRanger := false ;
22128: LD_ADDR_EXP 105
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sComputer := false ;
22136: LD_ADDR_EXP 106
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// s30 := false ;
22144: LD_ADDR_EXP 107
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// s60 := false ;
22152: LD_ADDR_EXP 108
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// end ;
22160: LD_VAR 0 1
22164: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
// result := [ ] ;
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: EMPTY
22180: ST_TO_ADDR
// if campaign_id = 1 then
22181: LD_OWVAR 69
22185: PUSH
22186: LD_INT 1
22188: EQUAL
22189: IFFALSE 25355
// begin case mission_number of 1 :
22191: LD_OWVAR 70
22195: PUSH
22196: LD_INT 1
22198: DOUBLE
22199: EQUAL
22200: IFTRUE 22204
22202: GO 22280
22204: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22205: LD_ADDR_VAR 0 2
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 4
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 12
22221: PUSH
22222: LD_INT 15
22224: PUSH
22225: LD_INT 16
22227: PUSH
22228: LD_INT 22
22230: PUSH
22231: LD_INT 23
22233: PUSH
22234: LD_INT 26
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 101
22250: PUSH
22251: LD_INT 102
22253: PUSH
22254: LD_INT 106
22256: PUSH
22257: LD_INT 116
22259: PUSH
22260: LD_INT 117
22262: PUSH
22263: LD_INT 118
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: ST_TO_ADDR
22278: GO 25353
22280: LD_INT 2
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22372
22288: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 4
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 15
22308: PUSH
22309: LD_INT 16
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 26
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 101
22334: PUSH
22335: LD_INT 102
22337: PUSH
22338: LD_INT 105
22340: PUSH
22341: LD_INT 106
22343: PUSH
22344: LD_INT 108
22346: PUSH
22347: LD_INT 116
22349: PUSH
22350: LD_INT 117
22352: PUSH
22353: LD_INT 118
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: ST_TO_ADDR
22370: GO 25353
22372: LD_INT 3
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22468
22380: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 4
22391: PUSH
22392: LD_INT 5
22394: PUSH
22395: LD_INT 11
22397: PUSH
22398: LD_INT 12
22400: PUSH
22401: LD_INT 15
22403: PUSH
22404: LD_INT 16
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 26
22412: PUSH
22413: LD_INT 36
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 101
22430: PUSH
22431: LD_INT 102
22433: PUSH
22434: LD_INT 105
22436: PUSH
22437: LD_INT 106
22439: PUSH
22440: LD_INT 108
22442: PUSH
22443: LD_INT 116
22445: PUSH
22446: LD_INT 117
22448: PUSH
22449: LD_INT 118
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: ST_TO_ADDR
22466: GO 25353
22468: LD_INT 4
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22572
22476: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 4
22487: PUSH
22488: LD_INT 5
22490: PUSH
22491: LD_INT 8
22493: PUSH
22494: LD_INT 11
22496: PUSH
22497: LD_INT 12
22499: PUSH
22500: LD_INT 15
22502: PUSH
22503: LD_INT 16
22505: PUSH
22506: LD_INT 22
22508: PUSH
22509: LD_INT 23
22511: PUSH
22512: LD_INT 26
22514: PUSH
22515: LD_INT 36
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 101
22534: PUSH
22535: LD_INT 102
22537: PUSH
22538: LD_INT 105
22540: PUSH
22541: LD_INT 106
22543: PUSH
22544: LD_INT 108
22546: PUSH
22547: LD_INT 116
22549: PUSH
22550: LD_INT 117
22552: PUSH
22553: LD_INT 118
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: ST_TO_ADDR
22570: GO 25353
22572: LD_INT 5
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22692
22580: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22581: LD_ADDR_VAR 0 2
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 4
22591: PUSH
22592: LD_INT 5
22594: PUSH
22595: LD_INT 6
22597: PUSH
22598: LD_INT 8
22600: PUSH
22601: LD_INT 11
22603: PUSH
22604: LD_INT 12
22606: PUSH
22607: LD_INT 15
22609: PUSH
22610: LD_INT 16
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 101
22646: PUSH
22647: LD_INT 102
22649: PUSH
22650: LD_INT 105
22652: PUSH
22653: LD_INT 106
22655: PUSH
22656: LD_INT 108
22658: PUSH
22659: LD_INT 109
22661: PUSH
22662: LD_INT 112
22664: PUSH
22665: LD_INT 116
22667: PUSH
22668: LD_INT 117
22670: PUSH
22671: LD_INT 118
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 25353
22692: LD_INT 6
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22832
22700: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 6
22717: PUSH
22718: LD_INT 8
22720: PUSH
22721: LD_INT 11
22723: PUSH
22724: LD_INT 12
22726: PUSH
22727: LD_INT 15
22729: PUSH
22730: LD_INT 16
22732: PUSH
22733: LD_INT 20
22735: PUSH
22736: LD_INT 21
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_INT 23
22744: PUSH
22745: LD_INT 25
22747: PUSH
22748: LD_INT 26
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 36
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 101
22786: PUSH
22787: LD_INT 102
22789: PUSH
22790: LD_INT 105
22792: PUSH
22793: LD_INT 106
22795: PUSH
22796: LD_INT 108
22798: PUSH
22799: LD_INT 109
22801: PUSH
22802: LD_INT 112
22804: PUSH
22805: LD_INT 116
22807: PUSH
22808: LD_INT 117
22810: PUSH
22811: LD_INT 118
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: ST_TO_ADDR
22830: GO 25353
22832: LD_INT 7
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22952
22840: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22841: LD_ADDR_VAR 0 2
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: LD_INT 7
22857: PUSH
22858: LD_INT 11
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 15
22866: PUSH
22867: LD_INT 16
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 26
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 101
22906: PUSH
22907: LD_INT 102
22909: PUSH
22910: LD_INT 103
22912: PUSH
22913: LD_INT 105
22915: PUSH
22916: LD_INT 106
22918: PUSH
22919: LD_INT 108
22921: PUSH
22922: LD_INT 112
22924: PUSH
22925: LD_INT 116
22927: PUSH
22928: LD_INT 117
22930: PUSH
22931: LD_INT 118
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: ST_TO_ADDR
22950: GO 25353
22952: LD_INT 8
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 23100
22960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22961: LD_ADDR_VAR 0 2
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 5
22974: PUSH
22975: LD_INT 6
22977: PUSH
22978: LD_INT 7
22980: PUSH
22981: LD_INT 8
22983: PUSH
22984: LD_INT 11
22986: PUSH
22987: LD_INT 12
22989: PUSH
22990: LD_INT 15
22992: PUSH
22993: LD_INT 16
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_INT 23
23007: PUSH
23008: LD_INT 25
23010: PUSH
23011: LD_INT 26
23013: PUSH
23014: LD_INT 30
23016: PUSH
23017: LD_INT 31
23019: PUSH
23020: LD_INT 32
23022: PUSH
23023: LD_INT 36
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 101
23050: PUSH
23051: LD_INT 102
23053: PUSH
23054: LD_INT 103
23056: PUSH
23057: LD_INT 105
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 108
23065: PUSH
23066: LD_INT 109
23068: PUSH
23069: LD_INT 112
23071: PUSH
23072: LD_INT 116
23074: PUSH
23075: LD_INT 117
23077: PUSH
23078: LD_INT 118
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: ST_TO_ADDR
23098: GO 25353
23100: LD_INT 9
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23256
23108: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23109: LD_ADDR_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: LD_INT 4
23119: PUSH
23120: LD_INT 5
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_INT 8
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 15
23140: PUSH
23141: LD_INT 16
23143: PUSH
23144: LD_INT 20
23146: PUSH
23147: LD_INT 21
23149: PUSH
23150: LD_INT 22
23152: PUSH
23153: LD_INT 23
23155: PUSH
23156: LD_INT 25
23158: PUSH
23159: LD_INT 26
23161: PUSH
23162: LD_INT 28
23164: PUSH
23165: LD_INT 30
23167: PUSH
23168: LD_INT 31
23170: PUSH
23171: LD_INT 32
23173: PUSH
23174: LD_INT 36
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 101
23202: PUSH
23203: LD_INT 102
23205: PUSH
23206: LD_INT 103
23208: PUSH
23209: LD_INT 105
23211: PUSH
23212: LD_INT 106
23214: PUSH
23215: LD_INT 108
23217: PUSH
23218: LD_INT 109
23220: PUSH
23221: LD_INT 112
23223: PUSH
23224: LD_INT 114
23226: PUSH
23227: LD_INT 116
23229: PUSH
23230: LD_INT 117
23232: PUSH
23233: LD_INT 118
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 25353
23256: LD_INT 10
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23460
23264: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 6
23281: PUSH
23282: LD_INT 7
23284: PUSH
23285: LD_INT 8
23287: PUSH
23288: LD_INT 9
23290: PUSH
23291: LD_INT 10
23293: PUSH
23294: LD_INT 11
23296: PUSH
23297: LD_INT 12
23299: PUSH
23300: LD_INT 13
23302: PUSH
23303: LD_INT 14
23305: PUSH
23306: LD_INT 15
23308: PUSH
23309: LD_INT 16
23311: PUSH
23312: LD_INT 17
23314: PUSH
23315: LD_INT 18
23317: PUSH
23318: LD_INT 19
23320: PUSH
23321: LD_INT 20
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 23
23332: PUSH
23333: LD_INT 24
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 26
23341: PUSH
23342: LD_INT 28
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 31
23350: PUSH
23351: LD_INT 32
23353: PUSH
23354: LD_INT 36
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 101
23390: PUSH
23391: LD_INT 102
23393: PUSH
23394: LD_INT 103
23396: PUSH
23397: LD_INT 104
23399: PUSH
23400: LD_INT 105
23402: PUSH
23403: LD_INT 106
23405: PUSH
23406: LD_INT 107
23408: PUSH
23409: LD_INT 108
23411: PUSH
23412: LD_INT 109
23414: PUSH
23415: LD_INT 110
23417: PUSH
23418: LD_INT 111
23420: PUSH
23421: LD_INT 112
23423: PUSH
23424: LD_INT 114
23426: PUSH
23427: LD_INT 116
23429: PUSH
23430: LD_INT 117
23432: PUSH
23433: LD_INT 118
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: ST_TO_ADDR
23458: GO 25353
23460: LD_INT 11
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23672
23468: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: LD_INT 4
23482: PUSH
23483: LD_INT 5
23485: PUSH
23486: LD_INT 6
23488: PUSH
23489: LD_INT 7
23491: PUSH
23492: LD_INT 8
23494: PUSH
23495: LD_INT 9
23497: PUSH
23498: LD_INT 10
23500: PUSH
23501: LD_INT 11
23503: PUSH
23504: LD_INT 12
23506: PUSH
23507: LD_INT 13
23509: PUSH
23510: LD_INT 14
23512: PUSH
23513: LD_INT 15
23515: PUSH
23516: LD_INT 16
23518: PUSH
23519: LD_INT 17
23521: PUSH
23522: LD_INT 18
23524: PUSH
23525: LD_INT 19
23527: PUSH
23528: LD_INT 20
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_INT 23
23539: PUSH
23540: LD_INT 24
23542: PUSH
23543: LD_INT 25
23545: PUSH
23546: LD_INT 26
23548: PUSH
23549: LD_INT 28
23551: PUSH
23552: LD_INT 30
23554: PUSH
23555: LD_INT 31
23557: PUSH
23558: LD_INT 32
23560: PUSH
23561: LD_INT 34
23563: PUSH
23564: LD_INT 36
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 101
23602: PUSH
23603: LD_INT 102
23605: PUSH
23606: LD_INT 103
23608: PUSH
23609: LD_INT 104
23611: PUSH
23612: LD_INT 105
23614: PUSH
23615: LD_INT 106
23617: PUSH
23618: LD_INT 107
23620: PUSH
23621: LD_INT 108
23623: PUSH
23624: LD_INT 109
23626: PUSH
23627: LD_INT 110
23629: PUSH
23630: LD_INT 111
23632: PUSH
23633: LD_INT 112
23635: PUSH
23636: LD_INT 114
23638: PUSH
23639: LD_INT 116
23641: PUSH
23642: LD_INT 117
23644: PUSH
23645: LD_INT 118
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: ST_TO_ADDR
23670: GO 25353
23672: LD_INT 12
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23900
23680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 4
23697: PUSH
23698: LD_INT 5
23700: PUSH
23701: LD_INT 6
23703: PUSH
23704: LD_INT 7
23706: PUSH
23707: LD_INT 8
23709: PUSH
23710: LD_INT 9
23712: PUSH
23713: LD_INT 10
23715: PUSH
23716: LD_INT 11
23718: PUSH
23719: LD_INT 12
23721: PUSH
23722: LD_INT 13
23724: PUSH
23725: LD_INT 14
23727: PUSH
23728: LD_INT 15
23730: PUSH
23731: LD_INT 16
23733: PUSH
23734: LD_INT 17
23736: PUSH
23737: LD_INT 18
23739: PUSH
23740: LD_INT 19
23742: PUSH
23743: LD_INT 20
23745: PUSH
23746: LD_INT 21
23748: PUSH
23749: LD_INT 22
23751: PUSH
23752: LD_INT 23
23754: PUSH
23755: LD_INT 24
23757: PUSH
23758: LD_INT 25
23760: PUSH
23761: LD_INT 26
23763: PUSH
23764: LD_INT 27
23766: PUSH
23767: LD_INT 28
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 33
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 36
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 101
23826: PUSH
23827: LD_INT 102
23829: PUSH
23830: LD_INT 103
23832: PUSH
23833: LD_INT 104
23835: PUSH
23836: LD_INT 105
23838: PUSH
23839: LD_INT 106
23841: PUSH
23842: LD_INT 107
23844: PUSH
23845: LD_INT 108
23847: PUSH
23848: LD_INT 109
23850: PUSH
23851: LD_INT 110
23853: PUSH
23854: LD_INT 111
23856: PUSH
23857: LD_INT 112
23859: PUSH
23860: LD_INT 113
23862: PUSH
23863: LD_INT 114
23865: PUSH
23866: LD_INT 116
23868: PUSH
23869: LD_INT 117
23871: PUSH
23872: LD_INT 118
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: ST_TO_ADDR
23898: GO 25353
23900: LD_INT 13
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 24116
23908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: LD_INT 4
23925: PUSH
23926: LD_INT 5
23928: PUSH
23929: LD_INT 8
23931: PUSH
23932: LD_INT 9
23934: PUSH
23935: LD_INT 10
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 14
23946: PUSH
23947: LD_INT 15
23949: PUSH
23950: LD_INT 16
23952: PUSH
23953: LD_INT 17
23955: PUSH
23956: LD_INT 18
23958: PUSH
23959: LD_INT 19
23961: PUSH
23962: LD_INT 20
23964: PUSH
23965: LD_INT 21
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_INT 23
23973: PUSH
23974: LD_INT 24
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 26
23982: PUSH
23983: LD_INT 27
23985: PUSH
23986: LD_INT 28
23988: PUSH
23989: LD_INT 30
23991: PUSH
23992: LD_INT 31
23994: PUSH
23995: LD_INT 32
23997: PUSH
23998: LD_INT 33
24000: PUSH
24001: LD_INT 34
24003: PUSH
24004: LD_INT 36
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 101
24042: PUSH
24043: LD_INT 102
24045: PUSH
24046: LD_INT 103
24048: PUSH
24049: LD_INT 104
24051: PUSH
24052: LD_INT 105
24054: PUSH
24055: LD_INT 106
24057: PUSH
24058: LD_INT 107
24060: PUSH
24061: LD_INT 108
24063: PUSH
24064: LD_INT 109
24066: PUSH
24067: LD_INT 110
24069: PUSH
24070: LD_INT 111
24072: PUSH
24073: LD_INT 112
24075: PUSH
24076: LD_INT 113
24078: PUSH
24079: LD_INT 114
24081: PUSH
24082: LD_INT 116
24084: PUSH
24085: LD_INT 117
24087: PUSH
24088: LD_INT 118
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: ST_TO_ADDR
24114: GO 25353
24116: LD_INT 14
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24348
24124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24125: LD_ADDR_VAR 0 2
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 3
24138: PUSH
24139: LD_INT 4
24141: PUSH
24142: LD_INT 5
24144: PUSH
24145: LD_INT 6
24147: PUSH
24148: LD_INT 7
24150: PUSH
24151: LD_INT 8
24153: PUSH
24154: LD_INT 9
24156: PUSH
24157: LD_INT 10
24159: PUSH
24160: LD_INT 11
24162: PUSH
24163: LD_INT 12
24165: PUSH
24166: LD_INT 13
24168: PUSH
24169: LD_INT 14
24171: PUSH
24172: LD_INT 15
24174: PUSH
24175: LD_INT 16
24177: PUSH
24178: LD_INT 17
24180: PUSH
24181: LD_INT 18
24183: PUSH
24184: LD_INT 19
24186: PUSH
24187: LD_INT 20
24189: PUSH
24190: LD_INT 21
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_INT 23
24198: PUSH
24199: LD_INT 24
24201: PUSH
24202: LD_INT 25
24204: PUSH
24205: LD_INT 26
24207: PUSH
24208: LD_INT 27
24210: PUSH
24211: LD_INT 28
24213: PUSH
24214: LD_INT 29
24216: PUSH
24217: LD_INT 30
24219: PUSH
24220: LD_INT 31
24222: PUSH
24223: LD_INT 32
24225: PUSH
24226: LD_INT 33
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 101
24274: PUSH
24275: LD_INT 102
24277: PUSH
24278: LD_INT 103
24280: PUSH
24281: LD_INT 104
24283: PUSH
24284: LD_INT 105
24286: PUSH
24287: LD_INT 106
24289: PUSH
24290: LD_INT 107
24292: PUSH
24293: LD_INT 108
24295: PUSH
24296: LD_INT 109
24298: PUSH
24299: LD_INT 110
24301: PUSH
24302: LD_INT 111
24304: PUSH
24305: LD_INT 112
24307: PUSH
24308: LD_INT 113
24310: PUSH
24311: LD_INT 114
24313: PUSH
24314: LD_INT 116
24316: PUSH
24317: LD_INT 117
24319: PUSH
24320: LD_INT 118
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: ST_TO_ADDR
24346: GO 25353
24348: LD_INT 15
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24580
24356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24357: LD_ADDR_VAR 0 2
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 3
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: LD_INT 5
24376: PUSH
24377: LD_INT 6
24379: PUSH
24380: LD_INT 7
24382: PUSH
24383: LD_INT 8
24385: PUSH
24386: LD_INT 9
24388: PUSH
24389: LD_INT 10
24391: PUSH
24392: LD_INT 11
24394: PUSH
24395: LD_INT 12
24397: PUSH
24398: LD_INT 13
24400: PUSH
24401: LD_INT 14
24403: PUSH
24404: LD_INT 15
24406: PUSH
24407: LD_INT 16
24409: PUSH
24410: LD_INT 17
24412: PUSH
24413: LD_INT 18
24415: PUSH
24416: LD_INT 19
24418: PUSH
24419: LD_INT 20
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_INT 23
24430: PUSH
24431: LD_INT 24
24433: PUSH
24434: LD_INT 25
24436: PUSH
24437: LD_INT 26
24439: PUSH
24440: LD_INT 27
24442: PUSH
24443: LD_INT 28
24445: PUSH
24446: LD_INT 29
24448: PUSH
24449: LD_INT 30
24451: PUSH
24452: LD_INT 31
24454: PUSH
24455: LD_INT 32
24457: PUSH
24458: LD_INT 33
24460: PUSH
24461: LD_INT 34
24463: PUSH
24464: LD_INT 36
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 101
24506: PUSH
24507: LD_INT 102
24509: PUSH
24510: LD_INT 103
24512: PUSH
24513: LD_INT 104
24515: PUSH
24516: LD_INT 105
24518: PUSH
24519: LD_INT 106
24521: PUSH
24522: LD_INT 107
24524: PUSH
24525: LD_INT 108
24527: PUSH
24528: LD_INT 109
24530: PUSH
24531: LD_INT 110
24533: PUSH
24534: LD_INT 111
24536: PUSH
24537: LD_INT 112
24539: PUSH
24540: LD_INT 113
24542: PUSH
24543: LD_INT 114
24545: PUSH
24546: LD_INT 116
24548: PUSH
24549: LD_INT 117
24551: PUSH
24552: LD_INT 118
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: ST_TO_ADDR
24578: GO 25353
24580: LD_INT 16
24582: DOUBLE
24583: EQUAL
24584: IFTRUE 24588
24586: GO 24724
24588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24589: LD_ADDR_VAR 0 2
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 4
24599: PUSH
24600: LD_INT 5
24602: PUSH
24603: LD_INT 7
24605: PUSH
24606: LD_INT 11
24608: PUSH
24609: LD_INT 12
24611: PUSH
24612: LD_INT 15
24614: PUSH
24615: LD_INT 16
24617: PUSH
24618: LD_INT 20
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 22
24626: PUSH
24627: LD_INT 23
24629: PUSH
24630: LD_INT 25
24632: PUSH
24633: LD_INT 26
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 31
24641: PUSH
24642: LD_INT 32
24644: PUSH
24645: LD_INT 33
24647: PUSH
24648: LD_INT 34
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 101
24674: PUSH
24675: LD_INT 102
24677: PUSH
24678: LD_INT 103
24680: PUSH
24681: LD_INT 106
24683: PUSH
24684: LD_INT 108
24686: PUSH
24687: LD_INT 112
24689: PUSH
24690: LD_INT 113
24692: PUSH
24693: LD_INT 114
24695: PUSH
24696: LD_INT 116
24698: PUSH
24699: LD_INT 117
24701: PUSH
24702: LD_INT 118
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: ST_TO_ADDR
24722: GO 25353
24724: LD_INT 17
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24956
24732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24733: LD_ADDR_VAR 0 2
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: LD_INT 6
24755: PUSH
24756: LD_INT 7
24758: PUSH
24759: LD_INT 8
24761: PUSH
24762: LD_INT 9
24764: PUSH
24765: LD_INT 10
24767: PUSH
24768: LD_INT 11
24770: PUSH
24771: LD_INT 12
24773: PUSH
24774: LD_INT 13
24776: PUSH
24777: LD_INT 14
24779: PUSH
24780: LD_INT 15
24782: PUSH
24783: LD_INT 16
24785: PUSH
24786: LD_INT 17
24788: PUSH
24789: LD_INT 18
24791: PUSH
24792: LD_INT 19
24794: PUSH
24795: LD_INT 20
24797: PUSH
24798: LD_INT 21
24800: PUSH
24801: LD_INT 22
24803: PUSH
24804: LD_INT 23
24806: PUSH
24807: LD_INT 24
24809: PUSH
24810: LD_INT 25
24812: PUSH
24813: LD_INT 26
24815: PUSH
24816: LD_INT 27
24818: PUSH
24819: LD_INT 28
24821: PUSH
24822: LD_INT 29
24824: PUSH
24825: LD_INT 30
24827: PUSH
24828: LD_INT 31
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 33
24836: PUSH
24837: LD_INT 34
24839: PUSH
24840: LD_INT 36
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 101
24882: PUSH
24883: LD_INT 102
24885: PUSH
24886: LD_INT 103
24888: PUSH
24889: LD_INT 104
24891: PUSH
24892: LD_INT 105
24894: PUSH
24895: LD_INT 106
24897: PUSH
24898: LD_INT 107
24900: PUSH
24901: LD_INT 108
24903: PUSH
24904: LD_INT 109
24906: PUSH
24907: LD_INT 110
24909: PUSH
24910: LD_INT 111
24912: PUSH
24913: LD_INT 112
24915: PUSH
24916: LD_INT 113
24918: PUSH
24919: LD_INT 114
24921: PUSH
24922: LD_INT 116
24924: PUSH
24925: LD_INT 117
24927: PUSH
24928: LD_INT 118
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25353
24956: LD_INT 18
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 25112
24964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 4
24975: PUSH
24976: LD_INT 5
24978: PUSH
24979: LD_INT 7
24981: PUSH
24982: LD_INT 11
24984: PUSH
24985: LD_INT 12
24987: PUSH
24988: LD_INT 15
24990: PUSH
24991: LD_INT 16
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 23
25005: PUSH
25006: LD_INT 25
25008: PUSH
25009: LD_INT 26
25011: PUSH
25012: LD_INT 30
25014: PUSH
25015: LD_INT 31
25017: PUSH
25018: LD_INT 32
25020: PUSH
25021: LD_INT 33
25023: PUSH
25024: LD_INT 34
25026: PUSH
25027: LD_INT 35
25029: PUSH
25030: LD_INT 36
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 101
25058: PUSH
25059: LD_INT 102
25061: PUSH
25062: LD_INT 103
25064: PUSH
25065: LD_INT 106
25067: PUSH
25068: LD_INT 108
25070: PUSH
25071: LD_INT 112
25073: PUSH
25074: LD_INT 113
25076: PUSH
25077: LD_INT 114
25079: PUSH
25080: LD_INT 115
25082: PUSH
25083: LD_INT 116
25085: PUSH
25086: LD_INT 117
25088: PUSH
25089: LD_INT 118
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: ST_TO_ADDR
25110: GO 25353
25112: LD_INT 19
25114: DOUBLE
25115: EQUAL
25116: IFTRUE 25120
25118: GO 25352
25120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25121: LD_ADDR_VAR 0 2
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 3
25134: PUSH
25135: LD_INT 4
25137: PUSH
25138: LD_INT 5
25140: PUSH
25141: LD_INT 6
25143: PUSH
25144: LD_INT 7
25146: PUSH
25147: LD_INT 8
25149: PUSH
25150: LD_INT 9
25152: PUSH
25153: LD_INT 10
25155: PUSH
25156: LD_INT 11
25158: PUSH
25159: LD_INT 12
25161: PUSH
25162: LD_INT 13
25164: PUSH
25165: LD_INT 14
25167: PUSH
25168: LD_INT 15
25170: PUSH
25171: LD_INT 16
25173: PUSH
25174: LD_INT 17
25176: PUSH
25177: LD_INT 18
25179: PUSH
25180: LD_INT 19
25182: PUSH
25183: LD_INT 20
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 22
25191: PUSH
25192: LD_INT 23
25194: PUSH
25195: LD_INT 24
25197: PUSH
25198: LD_INT 25
25200: PUSH
25201: LD_INT 26
25203: PUSH
25204: LD_INT 27
25206: PUSH
25207: LD_INT 28
25209: PUSH
25210: LD_INT 29
25212: PUSH
25213: LD_INT 30
25215: PUSH
25216: LD_INT 31
25218: PUSH
25219: LD_INT 32
25221: PUSH
25222: LD_INT 33
25224: PUSH
25225: LD_INT 34
25227: PUSH
25228: LD_INT 35
25230: PUSH
25231: LD_INT 36
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 101
25274: PUSH
25275: LD_INT 102
25277: PUSH
25278: LD_INT 103
25280: PUSH
25281: LD_INT 104
25283: PUSH
25284: LD_INT 105
25286: PUSH
25287: LD_INT 106
25289: PUSH
25290: LD_INT 107
25292: PUSH
25293: LD_INT 108
25295: PUSH
25296: LD_INT 109
25298: PUSH
25299: LD_INT 110
25301: PUSH
25302: LD_INT 111
25304: PUSH
25305: LD_INT 112
25307: PUSH
25308: LD_INT 113
25310: PUSH
25311: LD_INT 114
25313: PUSH
25314: LD_INT 115
25316: PUSH
25317: LD_INT 116
25319: PUSH
25320: LD_INT 117
25322: PUSH
25323: LD_INT 118
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: ST_TO_ADDR
25350: GO 25353
25352: POP
// end else
25353: GO 25584
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25355: LD_ADDR_VAR 0 2
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: LD_INT 4
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: LD_INT 6
25377: PUSH
25378: LD_INT 7
25380: PUSH
25381: LD_INT 8
25383: PUSH
25384: LD_INT 9
25386: PUSH
25387: LD_INT 10
25389: PUSH
25390: LD_INT 11
25392: PUSH
25393: LD_INT 12
25395: PUSH
25396: LD_INT 13
25398: PUSH
25399: LD_INT 14
25401: PUSH
25402: LD_INT 15
25404: PUSH
25405: LD_INT 16
25407: PUSH
25408: LD_INT 17
25410: PUSH
25411: LD_INT 18
25413: PUSH
25414: LD_INT 19
25416: PUSH
25417: LD_INT 20
25419: PUSH
25420: LD_INT 21
25422: PUSH
25423: LD_INT 22
25425: PUSH
25426: LD_INT 23
25428: PUSH
25429: LD_INT 24
25431: PUSH
25432: LD_INT 25
25434: PUSH
25435: LD_INT 26
25437: PUSH
25438: LD_INT 27
25440: PUSH
25441: LD_INT 28
25443: PUSH
25444: LD_INT 29
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: LD_INT 31
25452: PUSH
25453: LD_INT 32
25455: PUSH
25456: LD_INT 33
25458: PUSH
25459: LD_INT 34
25461: PUSH
25462: LD_INT 35
25464: PUSH
25465: LD_INT 36
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 101
25508: PUSH
25509: LD_INT 102
25511: PUSH
25512: LD_INT 103
25514: PUSH
25515: LD_INT 104
25517: PUSH
25518: LD_INT 105
25520: PUSH
25521: LD_INT 106
25523: PUSH
25524: LD_INT 107
25526: PUSH
25527: LD_INT 108
25529: PUSH
25530: LD_INT 109
25532: PUSH
25533: LD_INT 110
25535: PUSH
25536: LD_INT 111
25538: PUSH
25539: LD_INT 112
25541: PUSH
25542: LD_INT 113
25544: PUSH
25545: LD_INT 114
25547: PUSH
25548: LD_INT 115
25550: PUSH
25551: LD_INT 116
25553: PUSH
25554: LD_INT 117
25556: PUSH
25557: LD_INT 118
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// if result then
25584: LD_VAR 0 2
25588: IFFALSE 26374
// begin normal :=  ;
25590: LD_ADDR_VAR 0 5
25594: PUSH
25595: LD_STRING 
25597: ST_TO_ADDR
// hardcore :=  ;
25598: LD_ADDR_VAR 0 6
25602: PUSH
25603: LD_STRING 
25605: ST_TO_ADDR
// active :=  ;
25606: LD_ADDR_VAR 0 7
25610: PUSH
25611: LD_STRING 
25613: ST_TO_ADDR
// for i = 1 to normalCounter do
25614: LD_ADDR_VAR 0 8
25618: PUSH
25619: DOUBLE
25620: LD_INT 1
25622: DEC
25623: ST_TO_ADDR
25624: LD_EXP 53
25628: PUSH
25629: FOR_TO
25630: IFFALSE 25731
// begin tmp := 0 ;
25632: LD_ADDR_VAR 0 3
25636: PUSH
25637: LD_STRING 0
25639: ST_TO_ADDR
// if result [ 1 ] then
25640: LD_VAR 0 2
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: IFFALSE 25713
// if result [ 1 ] [ 1 ] = i then
25650: LD_VAR 0 2
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: PUSH
25659: LD_INT 1
25661: ARRAY
25662: PUSH
25663: LD_VAR 0 8
25667: EQUAL
25668: IFFALSE 25713
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_INT 1
25682: PPUSH
25683: LD_VAR 0 2
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PPUSH
25692: LD_INT 1
25694: PPUSH
25695: CALL_OW 3
25699: PPUSH
25700: CALL_OW 1
25704: ST_TO_ADDR
// tmp := 1 ;
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_STRING 1
25712: ST_TO_ADDR
// end ; normal := normal & tmp ;
25713: LD_ADDR_VAR 0 5
25717: PUSH
25718: LD_VAR 0 5
25722: PUSH
25723: LD_VAR 0 3
25727: STR
25728: ST_TO_ADDR
// end ;
25729: GO 25629
25731: POP
25732: POP
// for i = 1 to hardcoreCounter do
25733: LD_ADDR_VAR 0 8
25737: PUSH
25738: DOUBLE
25739: LD_INT 1
25741: DEC
25742: ST_TO_ADDR
25743: LD_EXP 54
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25854
// begin tmp := 0 ;
25751: LD_ADDR_VAR 0 3
25755: PUSH
25756: LD_STRING 0
25758: ST_TO_ADDR
// if result [ 2 ] then
25759: LD_VAR 0 2
25763: PUSH
25764: LD_INT 2
25766: ARRAY
25767: IFFALSE 25836
// if result [ 2 ] [ 1 ] = 100 + i then
25769: LD_VAR 0 2
25773: PUSH
25774: LD_INT 2
25776: ARRAY
25777: PUSH
25778: LD_INT 1
25780: ARRAY
25781: PUSH
25782: LD_INT 100
25784: PUSH
25785: LD_VAR 0 8
25789: PLUS
25790: EQUAL
25791: IFFALSE 25836
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: LD_INT 2
25805: PPUSH
25806: LD_VAR 0 2
25810: PUSH
25811: LD_INT 2
25813: ARRAY
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 3
25822: PPUSH
25823: CALL_OW 1
25827: ST_TO_ADDR
// tmp := 1 ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_STRING 1
25835: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25836: LD_ADDR_VAR 0 6
25840: PUSH
25841: LD_VAR 0 6
25845: PUSH
25846: LD_VAR 0 3
25850: STR
25851: ST_TO_ADDR
// end ;
25852: GO 25748
25854: POP
25855: POP
// if isGameLoad then
25856: LD_VAR 0 1
25860: IFFALSE 26335
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25862: LD_ADDR_VAR 0 4
25866: PUSH
25867: LD_EXP 57
25871: PUSH
25872: LD_EXP 56
25876: PUSH
25877: LD_EXP 58
25881: PUSH
25882: LD_EXP 55
25886: PUSH
25887: LD_EXP 59
25891: PUSH
25892: LD_EXP 60
25896: PUSH
25897: LD_EXP 61
25901: PUSH
25902: LD_EXP 62
25906: PUSH
25907: LD_EXP 63
25911: PUSH
25912: LD_EXP 64
25916: PUSH
25917: LD_EXP 65
25921: PUSH
25922: LD_EXP 66
25926: PUSH
25927: LD_EXP 67
25931: PUSH
25932: LD_EXP 68
25936: PUSH
25937: LD_EXP 76
25941: PUSH
25942: LD_EXP 77
25946: PUSH
25947: LD_EXP 78
25951: PUSH
25952: LD_EXP 79
25956: PUSH
25957: LD_EXP 81
25961: PUSH
25962: LD_EXP 82
25966: PUSH
25967: LD_EXP 83
25971: PUSH
25972: LD_EXP 86
25976: PUSH
25977: LD_EXP 88
25981: PUSH
25982: LD_EXP 89
25986: PUSH
25987: LD_EXP 90
25991: PUSH
25992: LD_EXP 92
25996: PUSH
25997: LD_EXP 93
26001: PUSH
26002: LD_EXP 96
26006: PUSH
26007: LD_EXP 97
26011: PUSH
26012: LD_EXP 98
26016: PUSH
26017: LD_EXP 99
26021: PUSH
26022: LD_EXP 100
26026: PUSH
26027: LD_EXP 101
26031: PUSH
26032: LD_EXP 102
26036: PUSH
26037: LD_EXP 103
26041: PUSH
26042: LD_EXP 104
26046: PUSH
26047: LD_EXP 69
26051: PUSH
26052: LD_EXP 70
26056: PUSH
26057: LD_EXP 73
26061: PUSH
26062: LD_EXP 74
26066: PUSH
26067: LD_EXP 75
26071: PUSH
26072: LD_EXP 71
26076: PUSH
26077: LD_EXP 72
26081: PUSH
26082: LD_EXP 80
26086: PUSH
26087: LD_EXP 84
26091: PUSH
26092: LD_EXP 85
26096: PUSH
26097: LD_EXP 87
26101: PUSH
26102: LD_EXP 91
26106: PUSH
26107: LD_EXP 94
26111: PUSH
26112: LD_EXP 95
26116: PUSH
26117: LD_EXP 105
26121: PUSH
26122: LD_EXP 106
26126: PUSH
26127: LD_EXP 107
26131: PUSH
26132: LD_EXP 108
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// tmp :=  ;
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_STRING 
26200: ST_TO_ADDR
// for i = 1 to normalCounter do
26201: LD_ADDR_VAR 0 8
26205: PUSH
26206: DOUBLE
26207: LD_INT 1
26209: DEC
26210: ST_TO_ADDR
26211: LD_EXP 53
26215: PUSH
26216: FOR_TO
26217: IFFALSE 26253
// begin if flags [ i ] then
26219: LD_VAR 0 4
26223: PUSH
26224: LD_VAR 0 8
26228: ARRAY
26229: IFFALSE 26251
// tmp := tmp & i & ; ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 3
26240: PUSH
26241: LD_VAR 0 8
26245: STR
26246: PUSH
26247: LD_STRING ;
26249: STR
26250: ST_TO_ADDR
// end ;
26251: GO 26216
26253: POP
26254: POP
// for i = 1 to hardcoreCounter do
26255: LD_ADDR_VAR 0 8
26259: PUSH
26260: DOUBLE
26261: LD_INT 1
26263: DEC
26264: ST_TO_ADDR
26265: LD_EXP 54
26269: PUSH
26270: FOR_TO
26271: IFFALSE 26317
// begin if flags [ normalCounter + i ] then
26273: LD_VAR 0 4
26277: PUSH
26278: LD_EXP 53
26282: PUSH
26283: LD_VAR 0 8
26287: PLUS
26288: ARRAY
26289: IFFALSE 26315
// tmp := tmp & ( 100 + i ) & ; ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 100
26303: PUSH
26304: LD_VAR 0 8
26308: PLUS
26309: STR
26310: PUSH
26311: LD_STRING ;
26313: STR
26314: ST_TO_ADDR
// end ;
26315: GO 26270
26317: POP
26318: POP
// if tmp then
26319: LD_VAR 0 3
26323: IFFALSE 26335
// active := tmp ;
26325: LD_ADDR_VAR 0 7
26329: PUSH
26330: LD_VAR 0 3
26334: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26335: LD_STRING getStreamItemsFromMission("
26337: PUSH
26338: LD_VAR 0 5
26342: STR
26343: PUSH
26344: LD_STRING ","
26346: STR
26347: PUSH
26348: LD_VAR 0 6
26352: STR
26353: PUSH
26354: LD_STRING ","
26356: STR
26357: PUSH
26358: LD_VAR 0 7
26362: STR
26363: PUSH
26364: LD_STRING ")
26366: STR
26367: PPUSH
26368: CALL_OW 559
// end else
26372: GO 26381
// ToLua ( getStreamItemsFromMission("","","") ) ;
26374: LD_STRING getStreamItemsFromMission("","","")
26376: PPUSH
26377: CALL_OW 559
// end ;
26381: LD_VAR 0 2
26385: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26386: LD_EXP 52
26390: IFFALSE 26398
26392: PUSH
26393: LD_EXP 57
26397: AND
26398: IFFALSE 26522
26400: GO 26402
26402: DISABLE
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// begin enable ;
26407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_OWVAR 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 7
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 45
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 34
26450: PUSH
26451: LD_INT 28
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 34
26460: PUSH
26461: LD_INT 47
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PPUSH
26479: CALL_OW 69
26483: ST_TO_ADDR
// if not tmp then
26484: LD_VAR 0 2
26488: NOT
26489: IFFALSE 26493
// exit ;
26491: GO 26522
// for i in tmp do
26493: LD_ADDR_VAR 0 1
26497: PUSH
26498: LD_VAR 0 2
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26520
// begin SetLives ( i , 0 ) ;
26506: LD_VAR 0 1
26510: PPUSH
26511: LD_INT 0
26513: PPUSH
26514: CALL_OW 234
// end ;
26518: GO 26503
26520: POP
26521: POP
// end ;
26522: PPOPN 2
26524: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26525: LD_EXP 52
26529: IFFALSE 26537
26531: PUSH
26532: LD_EXP 58
26536: AND
26537: IFFALSE 26621
26539: GO 26541
26541: DISABLE
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
// begin enable ;
26546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26547: LD_ADDR_VAR 0 2
26551: PUSH
26552: LD_INT 22
26554: PUSH
26555: LD_OWVAR 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 32
26566: PUSH
26567: LD_INT 3
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PPUSH
26578: CALL_OW 69
26582: ST_TO_ADDR
// if not tmp then
26583: LD_VAR 0 2
26587: NOT
26588: IFFALSE 26592
// exit ;
26590: GO 26621
// for i in tmp do
26592: LD_ADDR_VAR 0 1
26596: PUSH
26597: LD_VAR 0 2
26601: PUSH
26602: FOR_IN
26603: IFFALSE 26619
// begin SetLives ( i , 0 ) ;
26605: LD_VAR 0 1
26609: PPUSH
26610: LD_INT 0
26612: PPUSH
26613: CALL_OW 234
// end ;
26617: GO 26602
26619: POP
26620: POP
// end ;
26621: PPOPN 2
26623: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26624: LD_EXP 52
26628: IFFALSE 26636
26630: PUSH
26631: LD_EXP 55
26635: AND
26636: IFFALSE 26729
26638: GO 26640
26640: DISABLE
26641: LD_INT 0
26643: PPUSH
// begin enable ;
26644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26645: LD_ADDR_VAR 0 1
26649: PUSH
26650: LD_INT 22
26652: PUSH
26653: LD_OWVAR 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 25
26667: PUSH
26668: LD_INT 5
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 25
26677: PUSH
26678: LD_INT 9
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 25
26687: PUSH
26688: LD_INT 8
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 69
26709: PUSH
26710: FOR_IN
26711: IFFALSE 26727
// begin SetClass ( i , 1 ) ;
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_INT 1
26720: PPUSH
26721: CALL_OW 336
// end ;
26725: GO 26710
26727: POP
26728: POP
// end ;
26729: PPOPN 1
26731: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26732: LD_EXP 52
26736: IFFALSE 26744
26738: PUSH
26739: LD_EXP 56
26743: AND
26744: IFFALSE 26756
26746: PUSH
26747: LD_OWVAR 65
26751: PUSH
26752: LD_INT 7
26754: LESS
26755: AND
26756: IFFALSE 26770
26758: GO 26760
26760: DISABLE
// begin enable ;
26761: ENABLE
// game_speed := 7 ;
26762: LD_ADDR_OWVAR 65
26766: PUSH
26767: LD_INT 7
26769: ST_TO_ADDR
// end ;
26770: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26771: LD_EXP 52
26775: IFFALSE 26783
26777: PUSH
26778: LD_EXP 59
26782: AND
26783: IFFALSE 26985
26785: GO 26787
26787: DISABLE
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_INT 81
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 21
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 3
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26985
// if tmp > 5 then
26838: LD_VAR 0 3
26842: PUSH
26843: LD_INT 5
26845: GREATER
26846: IFFALSE 26858
// k := 5 else
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_INT 5
26855: ST_TO_ADDR
26856: GO 26868
// k := tmp ;
26858: LD_ADDR_VAR 0 2
26862: PUSH
26863: LD_VAR 0 3
26867: ST_TO_ADDR
// for i := 1 to k do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: DOUBLE
26874: LD_INT 1
26876: DEC
26877: ST_TO_ADDR
26878: LD_VAR 0 2
26882: PUSH
26883: FOR_TO
26884: IFFALSE 26983
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26886: LD_VAR 0 3
26890: PUSH
26891: LD_VAR 0 1
26895: ARRAY
26896: PPUSH
26897: LD_VAR 0 1
26901: PUSH
26902: LD_INT 4
26904: MOD
26905: PUSH
26906: LD_INT 1
26908: PLUS
26909: PPUSH
26910: CALL_OW 259
26914: PUSH
26915: LD_INT 10
26917: LESS
26918: IFFALSE 26981
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26920: LD_VAR 0 3
26924: PUSH
26925: LD_VAR 0 1
26929: ARRAY
26930: PPUSH
26931: LD_VAR 0 1
26935: PUSH
26936: LD_INT 4
26938: MOD
26939: PUSH
26940: LD_INT 1
26942: PLUS
26943: PPUSH
26944: LD_VAR 0 3
26948: PUSH
26949: LD_VAR 0 1
26953: ARRAY
26954: PPUSH
26955: LD_VAR 0 1
26959: PUSH
26960: LD_INT 4
26962: MOD
26963: PUSH
26964: LD_INT 1
26966: PLUS
26967: PPUSH
26968: CALL_OW 259
26972: PUSH
26973: LD_INT 1
26975: PLUS
26976: PPUSH
26977: CALL_OW 237
26981: GO 26883
26983: POP
26984: POP
// end ;
26985: PPOPN 3
26987: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26988: LD_EXP 52
26992: IFFALSE 27000
26994: PUSH
26995: LD_EXP 60
26999: AND
27000: IFFALSE 27020
27002: GO 27004
27004: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27005: LD_INT 4
27007: PPUSH
27008: LD_OWVAR 2
27012: PPUSH
27013: LD_INT 0
27015: PPUSH
27016: CALL_OW 324
27020: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27021: LD_EXP 52
27025: IFFALSE 27033
27027: PUSH
27028: LD_EXP 89
27032: AND
27033: IFFALSE 27053
27035: GO 27037
27037: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27038: LD_INT 19
27040: PPUSH
27041: LD_OWVAR 2
27045: PPUSH
27046: LD_INT 0
27048: PPUSH
27049: CALL_OW 324
27053: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27054: LD_EXP 52
27058: IFFALSE 27066
27060: PUSH
27061: LD_EXP 61
27065: AND
27066: IFFALSE 27168
27068: GO 27070
27070: DISABLE
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
// begin enable ;
27075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_INT 22
27083: PUSH
27084: LD_OWVAR 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 34
27098: PUSH
27099: LD_INT 11
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 34
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PPUSH
27125: CALL_OW 69
27129: ST_TO_ADDR
// if not tmp then
27130: LD_VAR 0 2
27134: NOT
27135: IFFALSE 27139
// exit ;
27137: GO 27168
// for i in tmp do
27139: LD_ADDR_VAR 0 1
27143: PUSH
27144: LD_VAR 0 2
27148: PUSH
27149: FOR_IN
27150: IFFALSE 27166
// begin SetLives ( i , 0 ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_INT 0
27159: PPUSH
27160: CALL_OW 234
// end ;
27164: GO 27149
27166: POP
27167: POP
// end ;
27168: PPOPN 2
27170: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27171: LD_EXP 52
27175: IFFALSE 27183
27177: PUSH
27178: LD_EXP 62
27182: AND
27183: IFFALSE 27203
27185: GO 27187
27187: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27188: LD_INT 32
27190: PPUSH
27191: LD_OWVAR 2
27195: PPUSH
27196: LD_INT 0
27198: PPUSH
27199: CALL_OW 324
27203: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27204: LD_EXP 52
27208: IFFALSE 27216
27210: PUSH
27211: LD_EXP 63
27215: AND
27216: IFFALSE 27399
27218: GO 27220
27220: DISABLE
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27226: LD_ADDR_VAR 0 2
27230: PUSH
27231: LD_INT 22
27233: PUSH
27234: LD_OWVAR 2
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 33
27245: PUSH
27246: LD_INT 3
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PPUSH
27257: CALL_OW 69
27261: ST_TO_ADDR
// if not tmp then
27262: LD_VAR 0 2
27266: NOT
27267: IFFALSE 27271
// exit ;
27269: GO 27399
// side := 0 ;
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 0
27278: ST_TO_ADDR
// for i := 1 to 8 do
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_INT 8
27291: PUSH
27292: FOR_TO
27293: IFFALSE 27343
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27295: LD_OWVAR 2
27299: PUSH
27300: LD_VAR 0 1
27304: NONEQUAL
27305: IFFALSE 27327
27307: PUSH
27308: LD_OWVAR 2
27312: PPUSH
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL_OW 81
27322: PUSH
27323: LD_INT 2
27325: EQUAL
27326: AND
27327: IFFALSE 27341
// begin side := i ;
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_VAR 0 1
27338: ST_TO_ADDR
// break ;
27339: GO 27343
// end ;
27341: GO 27292
27343: POP
27344: POP
// if not side then
27345: LD_VAR 0 3
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27399
// for i := 1 to tmp do
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: DOUBLE
27360: LD_INT 1
27362: DEC
27363: ST_TO_ADDR
27364: LD_VAR 0 2
27368: PUSH
27369: FOR_TO
27370: IFFALSE 27397
// if Prob ( 60 ) then
27372: LD_INT 60
27374: PPUSH
27375: CALL_OW 13
27379: IFFALSE 27395
// SetSide ( i , side ) ;
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL_OW 235
27395: GO 27369
27397: POP
27398: POP
// end ;
27399: PPOPN 3
27401: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27402: LD_EXP 52
27406: IFFALSE 27414
27408: PUSH
27409: LD_EXP 65
27413: AND
27414: IFFALSE 27533
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27422: LD_ADDR_VAR 0 1
27426: PUSH
27427: LD_INT 22
27429: PUSH
27430: LD_OWVAR 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 21
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 3
27451: PUSH
27452: LD_INT 23
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: PPUSH
27471: CALL_OW 69
27475: PUSH
27476: FOR_IN
27477: IFFALSE 27531
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 257
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 3
27497: PUSH
27498: LD_INT 4
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: IN
27507: IFFALSE 27529
// SetClass ( un , rand ( 1 , 4 ) ) ;
27509: LD_VAR 0 1
27513: PPUSH
27514: LD_INT 1
27516: PPUSH
27517: LD_INT 4
27519: PPUSH
27520: CALL_OW 12
27524: PPUSH
27525: CALL_OW 336
27529: GO 27476
27531: POP
27532: POP
// end ;
27533: PPOPN 1
27535: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27536: LD_EXP 52
27540: IFFALSE 27548
27542: PUSH
27543: LD_EXP 64
27547: AND
27548: IFFALSE 27627
27550: GO 27552
27552: DISABLE
27553: LD_INT 0
27555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_OWVAR 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 3
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PPUSH
27587: CALL_OW 69
27591: ST_TO_ADDR
// if not tmp then
27592: LD_VAR 0 1
27596: NOT
27597: IFFALSE 27601
// exit ;
27599: GO 27627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27601: LD_VAR 0 1
27605: PUSH
27606: LD_INT 1
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 12
27618: ARRAY
27619: PPUSH
27620: LD_INT 100
27622: PPUSH
27623: CALL_OW 234
// end ;
27627: PPOPN 1
27629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27630: LD_EXP 52
27634: IFFALSE 27642
27636: PUSH
27637: LD_EXP 66
27641: AND
27642: IFFALSE 27740
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_OWVAR 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PPUSH
27681: CALL_OW 69
27685: ST_TO_ADDR
// if not tmp then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27740
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27695: LD_VAR 0 1
27699: PUSH
27700: LD_INT 1
27702: PPUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 12
27712: ARRAY
27713: PPUSH
27714: LD_INT 1
27716: PPUSH
27717: LD_INT 4
27719: PPUSH
27720: CALL_OW 12
27724: PPUSH
27725: LD_INT 3000
27727: PPUSH
27728: LD_INT 9000
27730: PPUSH
27731: CALL_OW 12
27735: PPUSH
27736: CALL_OW 492
// end ;
27740: PPOPN 1
27742: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27743: LD_EXP 52
27747: IFFALSE 27755
27749: PUSH
27750: LD_EXP 67
27754: AND
27755: IFFALSE 27775
27757: GO 27759
27759: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27760: LD_INT 1
27762: PPUSH
27763: LD_OWVAR 2
27767: PPUSH
27768: LD_INT 0
27770: PPUSH
27771: CALL_OW 324
27775: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27776: LD_EXP 52
27780: IFFALSE 27788
27782: PUSH
27783: LD_EXP 68
27787: AND
27788: IFFALSE 27871
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27797: LD_ADDR_VAR 0 2
27801: PUSH
27802: LD_INT 22
27804: PUSH
27805: LD_OWVAR 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 21
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// if not tmp then
27833: LD_VAR 0 2
27837: NOT
27838: IFFALSE 27842
// exit ;
27840: GO 27871
// for i in tmp do
27842: LD_ADDR_VAR 0 1
27846: PUSH
27847: LD_VAR 0 2
27851: PUSH
27852: FOR_IN
27853: IFFALSE 27869
// SetBLevel ( i , 10 ) ;
27855: LD_VAR 0 1
27859: PPUSH
27860: LD_INT 10
27862: PPUSH
27863: CALL_OW 241
27867: GO 27852
27869: POP
27870: POP
// end ;
27871: PPOPN 2
27873: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27874: LD_EXP 52
27878: IFFALSE 27886
27880: PUSH
27881: LD_EXP 69
27885: AND
27886: IFFALSE 27997
27888: GO 27890
27890: DISABLE
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
27895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: LD_INT 22
27903: PUSH
27904: LD_OWVAR 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 25
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PPUSH
27927: CALL_OW 69
27931: ST_TO_ADDR
// if not tmp then
27932: LD_VAR 0 3
27936: NOT
27937: IFFALSE 27941
// exit ;
27939: GO 27997
// un := tmp [ rand ( 1 , tmp ) ] ;
27941: LD_ADDR_VAR 0 2
27945: PUSH
27946: LD_VAR 0 3
27950: PUSH
27951: LD_INT 1
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 12
27963: ARRAY
27964: ST_TO_ADDR
// if Crawls ( un ) then
27965: LD_VAR 0 2
27969: PPUSH
27970: CALL_OW 318
27974: IFFALSE 27985
// ComWalk ( un ) ;
27976: LD_VAR 0 2
27980: PPUSH
27981: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 5
27992: PPUSH
27993: CALL_OW 336
// end ;
27997: PPOPN 3
27999: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28000: LD_EXP 52
28004: IFFALSE 28012
28006: PUSH
28007: LD_EXP 70
28011: AND
28012: IFFALSE 28024
28014: PUSH
28015: LD_OWVAR 67
28019: PUSH
28020: LD_INT 4
28022: LESS
28023: AND
28024: IFFALSE 28043
28026: GO 28028
28028: DISABLE
// begin Difficulty := Difficulty + 1 ;
28029: LD_ADDR_OWVAR 67
28033: PUSH
28034: LD_OWVAR 67
28038: PUSH
28039: LD_INT 1
28041: PLUS
28042: ST_TO_ADDR
// end ;
28043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28044: LD_EXP 52
28048: IFFALSE 28056
28050: PUSH
28051: LD_EXP 71
28055: AND
28056: IFFALSE 28159
28058: GO 28060
28060: DISABLE
28061: LD_INT 0
28063: PPUSH
// begin for i := 1 to 5 do
28064: LD_ADDR_VAR 0 1
28068: PUSH
28069: DOUBLE
28070: LD_INT 1
28072: DEC
28073: ST_TO_ADDR
28074: LD_INT 5
28076: PUSH
28077: FOR_TO
28078: IFFALSE 28157
// begin uc_nation := nation_nature ;
28080: LD_ADDR_OWVAR 21
28084: PUSH
28085: LD_INT 0
28087: ST_TO_ADDR
// uc_side := 0 ;
28088: LD_ADDR_OWVAR 20
28092: PUSH
28093: LD_INT 0
28095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28096: LD_ADDR_OWVAR 29
28100: PUSH
28101: LD_INT 12
28103: PUSH
28104: LD_INT 12
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// hc_agressivity := 20 ;
28111: LD_ADDR_OWVAR 35
28115: PUSH
28116: LD_INT 20
28118: ST_TO_ADDR
// hc_class := class_tiger ;
28119: LD_ADDR_OWVAR 28
28123: PUSH
28124: LD_INT 14
28126: ST_TO_ADDR
// hc_gallery :=  ;
28127: LD_ADDR_OWVAR 33
28131: PUSH
28132: LD_STRING 
28134: ST_TO_ADDR
// hc_name :=  ;
28135: LD_ADDR_OWVAR 26
28139: PUSH
28140: LD_STRING 
28142: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28143: CALL_OW 44
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL_OW 51
// end ;
28155: GO 28077
28157: POP
28158: POP
// end ;
28159: PPOPN 1
28161: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28162: LD_EXP 52
28166: IFFALSE 28174
28168: PUSH
28169: LD_EXP 72
28173: AND
28174: IFFALSE 28183
28176: GO 28178
28178: DISABLE
// StreamSibBomb ;
28179: CALL 28184 0 0
28183: END
// export function StreamSibBomb ; var i , x , y ; begin
28184: LD_INT 0
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
// result := false ;
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: LD_INT 0
28197: ST_TO_ADDR
// for i := 1 to 16 do
28198: LD_ADDR_VAR 0 2
28202: PUSH
28203: DOUBLE
28204: LD_INT 1
28206: DEC
28207: ST_TO_ADDR
28208: LD_INT 16
28210: PUSH
28211: FOR_TO
28212: IFFALSE 28411
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 10
28221: PUSH
28222: LD_INT 20
28224: PUSH
28225: LD_INT 30
28227: PUSH
28228: LD_INT 40
28230: PUSH
28231: LD_INT 50
28233: PUSH
28234: LD_INT 60
28236: PUSH
28237: LD_INT 70
28239: PUSH
28240: LD_INT 80
28242: PUSH
28243: LD_INT 90
28245: PUSH
28246: LD_INT 100
28248: PUSH
28249: LD_INT 110
28251: PUSH
28252: LD_INT 120
28254: PUSH
28255: LD_INT 130
28257: PUSH
28258: LD_INT 140
28260: PUSH
28261: LD_INT 150
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PPUSH
28284: LD_INT 15
28286: PPUSH
28287: CALL_OW 12
28291: ARRAY
28292: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_INT 10
28300: PUSH
28301: LD_INT 20
28303: PUSH
28304: LD_INT 30
28306: PUSH
28307: LD_INT 40
28309: PUSH
28310: LD_INT 50
28312: PUSH
28313: LD_INT 60
28315: PUSH
28316: LD_INT 70
28318: PUSH
28319: LD_INT 80
28321: PUSH
28322: LD_INT 90
28324: PUSH
28325: LD_INT 100
28327: PUSH
28328: LD_INT 110
28330: PUSH
28331: LD_INT 120
28333: PUSH
28334: LD_INT 130
28336: PUSH
28337: LD_INT 140
28339: PUSH
28340: LD_INT 150
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PPUSH
28363: LD_INT 15
28365: PPUSH
28366: CALL_OW 12
28370: ARRAY
28371: ST_TO_ADDR
// if ValidHex ( x , y ) then
28372: LD_VAR 0 3
28376: PPUSH
28377: LD_VAR 0 4
28381: PPUSH
28382: CALL_OW 488
28386: IFFALSE 28409
// begin result := [ x , y ] ;
28388: LD_ADDR_VAR 0 1
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: ST_TO_ADDR
// break ;
28407: GO 28411
// end ; end ;
28409: GO 28211
28411: POP
28412: POP
// if result then
28413: LD_VAR 0 1
28417: IFFALSE 28477
// begin ToLua ( playSibBomb() ) ;
28419: LD_STRING playSibBomb()
28421: PPUSH
28422: CALL_OW 559
// wait ( 0 0$14 ) ;
28426: LD_INT 490
28428: PPUSH
28429: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28433: LD_VAR 0 1
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: LD_VAR 0 1
28446: PUSH
28447: LD_INT 2
28449: ARRAY
28450: PPUSH
28451: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28455: LD_VAR 0 1
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 2
28471: ARRAY
28472: PPUSH
28473: CALL_OW 429
// end ; end ;
28477: LD_VAR 0 1
28481: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28482: LD_EXP 52
28486: IFFALSE 28494
28488: PUSH
28489: LD_EXP 74
28493: AND
28494: IFFALSE 28506
28496: GO 28498
28498: DISABLE
// YouLost (  ) ;
28499: LD_STRING 
28501: PPUSH
28502: CALL_OW 104
28506: END
// every 0 0$1 trigger StreamModeActive and sFog do
28507: LD_EXP 52
28511: IFFALSE 28519
28513: PUSH
28514: LD_EXP 73
28518: AND
28519: IFFALSE 28533
28521: GO 28523
28523: DISABLE
// FogOff ( your_side ) ;
28524: LD_OWVAR 2
28528: PPUSH
28529: CALL_OW 344
28533: END
// every 0 0$1 trigger StreamModeActive and sSun do
28534: LD_EXP 52
28538: IFFALSE 28546
28540: PUSH
28541: LD_EXP 75
28545: AND
28546: IFFALSE 28574
28548: GO 28550
28550: DISABLE
// begin solar_recharge_percent := 0 ;
28551: LD_ADDR_OWVAR 79
28555: PUSH
28556: LD_INT 0
28558: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28559: LD_INT 10500
28561: PPUSH
28562: CALL_OW 67
// solar_recharge_percent := 100 ;
28566: LD_ADDR_OWVAR 79
28570: PUSH
28571: LD_INT 100
28573: ST_TO_ADDR
// end ;
28574: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28575: LD_EXP 52
28579: IFFALSE 28587
28581: PUSH
28582: LD_EXP 76
28586: AND
28587: IFFALSE 28826
28589: GO 28591
28591: DISABLE
28592: LD_INT 0
28594: PPUSH
28595: PPUSH
28596: PPUSH
// begin tmp := [ ] ;
28597: LD_ADDR_VAR 0 3
28601: PUSH
28602: EMPTY
28603: ST_TO_ADDR
// for i := 1 to 6 do
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: DOUBLE
28610: LD_INT 1
28612: DEC
28613: ST_TO_ADDR
28614: LD_INT 6
28616: PUSH
28617: FOR_TO
28618: IFFALSE 28723
// begin uc_nation := nation_nature ;
28620: LD_ADDR_OWVAR 21
28624: PUSH
28625: LD_INT 0
28627: ST_TO_ADDR
// uc_side := 0 ;
28628: LD_ADDR_OWVAR 20
28632: PUSH
28633: LD_INT 0
28635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28636: LD_ADDR_OWVAR 29
28640: PUSH
28641: LD_INT 12
28643: PUSH
28644: LD_INT 12
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// hc_agressivity := 20 ;
28651: LD_ADDR_OWVAR 35
28655: PUSH
28656: LD_INT 20
28658: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28659: LD_ADDR_OWVAR 28
28663: PUSH
28664: LD_INT 17
28666: ST_TO_ADDR
// hc_gallery :=  ;
28667: LD_ADDR_OWVAR 33
28671: PUSH
28672: LD_STRING 
28674: ST_TO_ADDR
// hc_name :=  ;
28675: LD_ADDR_OWVAR 26
28679: PUSH
28680: LD_STRING 
28682: ST_TO_ADDR
// un := CreateHuman ;
28683: LD_ADDR_VAR 0 2
28687: PUSH
28688: CALL_OW 44
28692: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28693: LD_VAR 0 2
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: CALL_OW 51
// tmp := tmp ^ un ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_VAR 0 3
28714: PUSH
28715: LD_VAR 0 2
28719: ADD
28720: ST_TO_ADDR
// end ;
28721: GO 28617
28723: POP
28724: POP
// repeat wait ( 0 0$1 ) ;
28725: LD_INT 35
28727: PPUSH
28728: CALL_OW 67
// for un in tmp do
28732: LD_ADDR_VAR 0 2
28736: PUSH
28737: LD_VAR 0 3
28741: PUSH
28742: FOR_IN
28743: IFFALSE 28817
// begin if IsDead ( un ) then
28745: LD_VAR 0 2
28749: PPUSH
28750: CALL_OW 301
28754: IFFALSE 28774
// begin tmp := tmp diff un ;
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_VAR 0 3
28765: PUSH
28766: LD_VAR 0 2
28770: DIFF
28771: ST_TO_ADDR
// continue ;
28772: GO 28742
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_INT 3
28781: PUSH
28782: LD_INT 22
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PPUSH
28796: CALL_OW 69
28800: PPUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: CALL_OW 74
28810: PPUSH
28811: CALL_OW 115
// end ;
28815: GO 28742
28817: POP
28818: POP
// until not tmp ;
28819: LD_VAR 0 3
28823: NOT
28824: IFFALSE 28725
// end ;
28826: PPOPN 3
28828: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28829: LD_EXP 52
28833: IFFALSE 28841
28835: PUSH
28836: LD_EXP 77
28840: AND
28841: IFFALSE 28895
28843: GO 28845
28845: DISABLE
// begin ToLua ( displayTroll(); ) ;
28846: LD_STRING displayTroll();
28848: PPUSH
28849: CALL_OW 559
// wait ( 3 3$00 ) ;
28853: LD_INT 6300
28855: PPUSH
28856: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28860: LD_STRING hideTroll();
28862: PPUSH
28863: CALL_OW 559
// wait ( 1 1$00 ) ;
28867: LD_INT 2100
28869: PPUSH
28870: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28874: LD_STRING displayTroll();
28876: PPUSH
28877: CALL_OW 559
// wait ( 1 1$00 ) ;
28881: LD_INT 2100
28883: PPUSH
28884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28888: LD_STRING hideTroll();
28890: PPUSH
28891: CALL_OW 559
// end ;
28895: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28896: LD_EXP 52
28900: IFFALSE 28908
28902: PUSH
28903: LD_EXP 78
28907: AND
28908: IFFALSE 28971
28910: GO 28912
28912: DISABLE
28913: LD_INT 0
28915: PPUSH
// begin p := 0 ;
28916: LD_ADDR_VAR 0 1
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
// repeat game_speed := 1 ;
28924: LD_ADDR_OWVAR 65
28928: PUSH
28929: LD_INT 1
28931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28932: LD_INT 35
28934: PPUSH
28935: CALL_OW 67
// p := p + 1 ;
28939: LD_ADDR_VAR 0 1
28943: PUSH
28944: LD_VAR 0 1
28948: PUSH
28949: LD_INT 1
28951: PLUS
28952: ST_TO_ADDR
// until p >= 60 ;
28953: LD_VAR 0 1
28957: PUSH
28958: LD_INT 60
28960: GREATEREQUAL
28961: IFFALSE 28924
// game_speed := 4 ;
28963: LD_ADDR_OWVAR 65
28967: PUSH
28968: LD_INT 4
28970: ST_TO_ADDR
// end ;
28971: PPOPN 1
28973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28974: LD_EXP 52
28978: IFFALSE 28986
28980: PUSH
28981: LD_EXP 79
28985: AND
28986: IFFALSE 29132
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 30
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 30
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: ST_TO_ADDR
// if not depot then
29049: LD_VAR 0 1
29053: NOT
29054: IFFALSE 29058
// exit ;
29056: GO 29132
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_VAR 0 1
29067: PUSH
29068: LD_INT 1
29070: PPUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 12
29080: ARRAY
29081: PPUSH
29082: CALL_OW 274
29086: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29087: LD_VAR 0 2
29091: PPUSH
29092: LD_INT 1
29094: PPUSH
29095: LD_INT 0
29097: PPUSH
29098: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29102: LD_VAR 0 2
29106: PPUSH
29107: LD_INT 2
29109: PPUSH
29110: LD_INT 0
29112: PPUSH
29113: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29117: LD_VAR 0 2
29121: PPUSH
29122: LD_INT 3
29124: PPUSH
29125: LD_INT 0
29127: PPUSH
29128: CALL_OW 277
// end ;
29132: PPOPN 2
29134: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29135: LD_EXP 52
29139: IFFALSE 29147
29141: PUSH
29142: LD_EXP 80
29146: AND
29147: IFFALSE 29244
29149: GO 29151
29151: DISABLE
29152: LD_INT 0
29154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_INT 22
29162: PUSH
29163: LD_OWVAR 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 21
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 23
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 69
29208: ST_TO_ADDR
// if not tmp then
29209: LD_VAR 0 1
29213: NOT
29214: IFFALSE 29218
// exit ;
29216: GO 29244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29218: LD_VAR 0 1
29222: PUSH
29223: LD_INT 1
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 12
29235: ARRAY
29236: PPUSH
29237: LD_INT 200
29239: PPUSH
29240: CALL_OW 234
// end ;
29244: PPOPN 1
29246: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29247: LD_EXP 52
29251: IFFALSE 29259
29253: PUSH
29254: LD_EXP 81
29258: AND
29259: IFFALSE 29338
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29267: LD_ADDR_VAR 0 1
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: LD_OWVAR 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 21
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 1
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29312: LD_VAR 0 1
29316: PUSH
29317: LD_INT 1
29319: PPUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 12
29329: ARRAY
29330: PPUSH
29331: LD_INT 60
29333: PPUSH
29334: CALL_OW 234
// end ;
29338: PPOPN 1
29340: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29341: LD_EXP 52
29345: IFFALSE 29353
29347: PUSH
29348: LD_EXP 82
29352: AND
29353: IFFALSE 29452
29355: GO 29357
29357: DISABLE
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
// begin enable ;
29362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29363: LD_ADDR_VAR 0 1
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 61
29382: PUSH
29383: EMPTY
29384: LIST
29385: PUSH
29386: LD_INT 33
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: PPUSH
29401: CALL_OW 69
29405: ST_TO_ADDR
// if not tmp then
29406: LD_VAR 0 1
29410: NOT
29411: IFFALSE 29415
// exit ;
29413: GO 29452
// for i in tmp do
29415: LD_ADDR_VAR 0 2
29419: PUSH
29420: LD_VAR 0 1
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29450
// if IsControledBy ( i ) then
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL_OW 312
29437: IFFALSE 29448
// ComUnlink ( i ) ;
29439: LD_VAR 0 2
29443: PPUSH
29444: CALL_OW 136
29448: GO 29425
29450: POP
29451: POP
// end ;
29452: PPOPN 2
29454: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29455: LD_EXP 52
29459: IFFALSE 29467
29461: PUSH
29462: LD_EXP 83
29466: AND
29467: IFFALSE 29607
29469: GO 29471
29471: DISABLE
29472: LD_INT 0
29474: PPUSH
29475: PPUSH
// begin ToLua ( displayPowell(); ) ;
29476: LD_STRING displayPowell();
29478: PPUSH
29479: CALL_OW 559
// uc_side := 0 ;
29483: LD_ADDR_OWVAR 20
29487: PUSH
29488: LD_INT 0
29490: ST_TO_ADDR
// uc_nation := 2 ;
29491: LD_ADDR_OWVAR 21
29495: PUSH
29496: LD_INT 2
29498: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29499: LD_ADDR_OWVAR 37
29503: PUSH
29504: LD_INT 14
29506: ST_TO_ADDR
// vc_engine := engine_siberite ;
29507: LD_ADDR_OWVAR 39
29511: PUSH
29512: LD_INT 3
29514: ST_TO_ADDR
// vc_control := control_apeman ;
29515: LD_ADDR_OWVAR 38
29519: PUSH
29520: LD_INT 5
29522: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29523: LD_ADDR_OWVAR 40
29527: PUSH
29528: LD_INT 29
29530: ST_TO_ADDR
// un := CreateVehicle ;
29531: LD_ADDR_VAR 0 2
29535: PUSH
29536: CALL_OW 45
29540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29541: LD_VAR 0 2
29545: PPUSH
29546: LD_INT 1
29548: PPUSH
29549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29553: LD_INT 35
29555: PPUSH
29556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29560: LD_VAR 0 2
29564: PPUSH
29565: LD_INT 22
29567: PUSH
29568: LD_OWVAR 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: PPUSH
29582: LD_VAR 0 2
29586: PPUSH
29587: CALL_OW 74
29591: PPUSH
29592: CALL_OW 115
// until IsDead ( un ) ;
29596: LD_VAR 0 2
29600: PPUSH
29601: CALL_OW 301
29605: IFFALSE 29553
// end ;
29607: PPOPN 2
29609: END
// every 0 0$1 trigger StreamModeActive and sStu do
29610: LD_EXP 52
29614: IFFALSE 29622
29616: PUSH
29617: LD_EXP 91
29621: AND
29622: IFFALSE 29638
29624: GO 29626
29626: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29627: LD_STRING displayStucuk();
29629: PPUSH
29630: CALL_OW 559
// ResetFog ;
29634: CALL_OW 335
// end ;
29638: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29639: LD_EXP 52
29643: IFFALSE 29651
29645: PUSH
29646: LD_EXP 84
29650: AND
29651: IFFALSE 29792
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PPUSH
29691: CALL_OW 69
29695: ST_TO_ADDR
// if not tmp then
29696: LD_VAR 0 2
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 29792
// un := tmp [ rand ( 1 , tmp ) ] ;
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_VAR 0 2
29714: PUSH
29715: LD_INT 1
29717: PPUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: CALL_OW 12
29727: ARRAY
29728: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29729: LD_VAR 0 1
29733: PPUSH
29734: LD_INT 0
29736: PPUSH
29737: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_OWVAR 3
29750: PUSH
29751: LD_VAR 0 1
29755: DIFF
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 74
29766: PPUSH
29767: CALL_OW 115
// wait ( 0 0$20 ) ;
29771: LD_INT 700
29773: PPUSH
29774: CALL_OW 67
// SetSide ( un , your_side ) ;
29778: LD_VAR 0 1
29782: PPUSH
29783: LD_OWVAR 2
29787: PPUSH
29788: CALL_OW 235
// end ;
29792: PPOPN 2
29794: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29795: LD_EXP 52
29799: IFFALSE 29807
29801: PUSH
29802: LD_EXP 85
29806: AND
29807: IFFALSE 29913
29809: GO 29811
29811: DISABLE
29812: LD_INT 0
29814: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29815: LD_ADDR_VAR 0 1
29819: PUSH
29820: LD_INT 22
29822: PUSH
29823: LD_OWVAR 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 30
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not depot then
29869: LD_VAR 0 1
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 29913
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29878: LD_VAR 0 1
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: CALL_OW 250
29891: PPUSH
29892: LD_VAR 0 1
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: CALL_OW 251
29905: PPUSH
29906: LD_INT 70
29908: PPUSH
29909: CALL_OW 495
// end ;
29913: PPOPN 1
29915: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29916: LD_EXP 52
29920: IFFALSE 29928
29922: PUSH
29923: LD_EXP 86
29927: AND
29928: IFFALSE 30139
29930: GO 29932
29932: DISABLE
29933: LD_INT 0
29935: PPUSH
29936: PPUSH
29937: PPUSH
29938: PPUSH
29939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29940: LD_ADDR_VAR 0 5
29944: PUSH
29945: LD_INT 22
29947: PUSH
29948: LD_OWVAR 2
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 21
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 69
29975: ST_TO_ADDR
// if not tmp then
29976: LD_VAR 0 5
29980: NOT
29981: IFFALSE 29985
// exit ;
29983: GO 30139
// for i in tmp do
29985: LD_ADDR_VAR 0 1
29989: PUSH
29990: LD_VAR 0 5
29994: PUSH
29995: FOR_IN
29996: IFFALSE 30137
// begin d := rand ( 0 , 5 ) ;
29998: LD_ADDR_VAR 0 4
30002: PUSH
30003: LD_INT 0
30005: PPUSH
30006: LD_INT 5
30008: PPUSH
30009: CALL_OW 12
30013: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30014: LD_ADDR_VAR 0 2
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 250
30028: PPUSH
30029: LD_VAR 0 4
30033: PPUSH
30034: LD_INT 3
30036: PPUSH
30037: LD_INT 12
30039: PPUSH
30040: CALL_OW 12
30044: PPUSH
30045: CALL_OW 272
30049: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30050: LD_ADDR_VAR 0 3
30054: PUSH
30055: LD_VAR 0 1
30059: PPUSH
30060: CALL_OW 251
30064: PPUSH
30065: LD_VAR 0 4
30069: PPUSH
30070: LD_INT 3
30072: PPUSH
30073: LD_INT 12
30075: PPUSH
30076: CALL_OW 12
30080: PPUSH
30081: CALL_OW 273
30085: ST_TO_ADDR
// if ValidHex ( x , y ) then
30086: LD_VAR 0 2
30090: PPUSH
30091: LD_VAR 0 3
30095: PPUSH
30096: CALL_OW 488
30100: IFFALSE 30135
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30102: LD_VAR 0 1
30106: PPUSH
30107: LD_VAR 0 2
30111: PPUSH
30112: LD_VAR 0 3
30116: PPUSH
30117: LD_INT 3
30119: PPUSH
30120: LD_INT 6
30122: PPUSH
30123: CALL_OW 12
30127: PPUSH
30128: LD_INT 1
30130: PPUSH
30131: CALL_OW 483
// end ;
30135: GO 29995
30137: POP
30138: POP
// end ;
30139: PPOPN 5
30141: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30142: LD_EXP 52
30146: IFFALSE 30154
30148: PUSH
30149: LD_EXP 87
30153: AND
30154: IFFALSE 30248
30156: GO 30158
30158: DISABLE
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30163: LD_ADDR_VAR 0 2
30167: PUSH
30168: LD_INT 22
30170: PUSH
30171: LD_OWVAR 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 32
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 21
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 69
30209: ST_TO_ADDR
// if not tmp then
30210: LD_VAR 0 2
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30248
// for i in tmp do
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_VAR 0 2
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30246
// SetFuel ( i , 0 ) ;
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 0
30239: PPUSH
30240: CALL_OW 240
30244: GO 30229
30246: POP
30247: POP
// end ;
30248: PPOPN 2
30250: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30251: LD_EXP 52
30255: IFFALSE 30263
30257: PUSH
30258: LD_EXP 88
30262: AND
30263: IFFALSE 30329
30265: GO 30267
30267: DISABLE
30268: LD_INT 0
30270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30271: LD_ADDR_VAR 0 1
30275: PUSH
30276: LD_INT 22
30278: PUSH
30279: LD_OWVAR 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 29
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PPUSH
30302: CALL_OW 69
30306: ST_TO_ADDR
// if not tmp then
30307: LD_VAR 0 1
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30329
// DestroyUnit ( tmp [ 1 ] ) ;
30316: LD_VAR 0 1
30320: PUSH
30321: LD_INT 1
30323: ARRAY
30324: PPUSH
30325: CALL_OW 65
// end ;
30329: PPOPN 1
30331: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30332: LD_EXP 52
30336: IFFALSE 30344
30338: PUSH
30339: LD_EXP 90
30343: AND
30344: IFFALSE 30473
30346: GO 30348
30348: DISABLE
30349: LD_INT 0
30351: PPUSH
// begin uc_side := 0 ;
30352: LD_ADDR_OWVAR 20
30356: PUSH
30357: LD_INT 0
30359: ST_TO_ADDR
// uc_nation := nation_arabian ;
30360: LD_ADDR_OWVAR 21
30364: PUSH
30365: LD_INT 2
30367: ST_TO_ADDR
// hc_gallery :=  ;
30368: LD_ADDR_OWVAR 33
30372: PUSH
30373: LD_STRING 
30375: ST_TO_ADDR
// hc_name :=  ;
30376: LD_ADDR_OWVAR 26
30380: PUSH
30381: LD_STRING 
30383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30384: LD_INT 1
30386: PPUSH
30387: LD_INT 11
30389: PPUSH
30390: LD_INT 10
30392: PPUSH
30393: CALL_OW 380
// un := CreateHuman ;
30397: LD_ADDR_VAR 0 1
30401: PUSH
30402: CALL_OW 44
30406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30407: LD_VAR 0 1
30411: PPUSH
30412: LD_INT 1
30414: PPUSH
30415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30419: LD_INT 35
30421: PPUSH
30422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_INT 22
30433: PUSH
30434: LD_OWVAR 2
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: PPUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 74
30457: PPUSH
30458: CALL_OW 115
// until IsDead ( un ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 301
30471: IFFALSE 30419
// end ;
30473: PPOPN 1
30475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30476: LD_EXP 52
30480: IFFALSE 30488
30482: PUSH
30483: LD_EXP 92
30487: AND
30488: IFFALSE 30500
30490: GO 30492
30492: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30493: LD_STRING earthquake(getX(game), 0, 32)
30495: PPUSH
30496: CALL_OW 559
30500: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30501: LD_EXP 52
30505: IFFALSE 30513
30507: PUSH
30508: LD_EXP 93
30512: AND
30513: IFFALSE 30604
30515: GO 30517
30517: DISABLE
30518: LD_INT 0
30520: PPUSH
// begin enable ;
30521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 21
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 33
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: PPUSH
30564: CALL_OW 69
30568: ST_TO_ADDR
// if not tmp then
30569: LD_VAR 0 1
30573: NOT
30574: IFFALSE 30578
// exit ;
30576: GO 30604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30578: LD_VAR 0 1
30582: PUSH
30583: LD_INT 1
30585: PPUSH
30586: LD_VAR 0 1
30590: PPUSH
30591: CALL_OW 12
30595: ARRAY
30596: PPUSH
30597: LD_INT 1
30599: PPUSH
30600: CALL_OW 234
// end ;
30604: PPOPN 1
30606: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30607: LD_EXP 52
30611: IFFALSE 30619
30613: PUSH
30614: LD_EXP 94
30618: AND
30619: IFFALSE 30760
30621: GO 30623
30623: DISABLE
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
30628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30629: LD_ADDR_VAR 0 3
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_OWVAR 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 25
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 69
30664: ST_TO_ADDR
// if not tmp then
30665: LD_VAR 0 3
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 30760
// un := tmp [ rand ( 1 , tmp ) ] ;
30674: LD_ADDR_VAR 0 2
30678: PUSH
30679: LD_VAR 0 3
30683: PUSH
30684: LD_INT 1
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: CALL_OW 12
30696: ARRAY
30697: ST_TO_ADDR
// if Crawls ( un ) then
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 318
30707: IFFALSE 30718
// ComWalk ( un ) ;
30709: LD_VAR 0 2
30713: PPUSH
30714: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30718: LD_VAR 0 2
30722: PPUSH
30723: LD_INT 9
30725: PPUSH
30726: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30730: LD_INT 28
30732: PPUSH
30733: LD_OWVAR 2
30737: PPUSH
30738: LD_INT 2
30740: PPUSH
30741: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30745: LD_INT 29
30747: PPUSH
30748: LD_OWVAR 2
30752: PPUSH
30753: LD_INT 2
30755: PPUSH
30756: CALL_OW 322
// end ;
30760: PPOPN 3
30762: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30763: LD_EXP 52
30767: IFFALSE 30775
30769: PUSH
30770: LD_EXP 95
30774: AND
30775: IFFALSE 30886
30777: GO 30779
30779: DISABLE
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
30784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: LD_INT 22
30792: PUSH
30793: LD_OWVAR 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 25
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 69
30820: ST_TO_ADDR
// if not tmp then
30821: LD_VAR 0 3
30825: NOT
30826: IFFALSE 30830
// exit ;
30828: GO 30886
// un := tmp [ rand ( 1 , tmp ) ] ;
30830: LD_ADDR_VAR 0 2
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: PPUSH
30843: LD_VAR 0 3
30847: PPUSH
30848: CALL_OW 12
30852: ARRAY
30853: ST_TO_ADDR
// if Crawls ( un ) then
30854: LD_VAR 0 2
30858: PPUSH
30859: CALL_OW 318
30863: IFFALSE 30874
// ComWalk ( un ) ;
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_INT 8
30881: PPUSH
30882: CALL_OW 336
// end ;
30886: PPOPN 3
30888: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30889: LD_EXP 52
30893: IFFALSE 30901
30895: PUSH
30896: LD_EXP 96
30900: AND
30901: IFFALSE 31045
30903: GO 30905
30905: DISABLE
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30910: LD_ADDR_VAR 0 2
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 21
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 34
30942: PUSH
30943: LD_INT 12
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 34
30952: PUSH
30953: LD_INT 51
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 34
30962: PUSH
30963: LD_INT 32
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 69
30985: ST_TO_ADDR
// if not tmp then
30986: LD_VAR 0 2
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31045
// for i in tmp do
30995: LD_ADDR_VAR 0 1
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: FOR_IN
31006: IFFALSE 31043
// if GetCargo ( i , mat_artifact ) = 0 then
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_INT 4
31015: PPUSH
31016: CALL_OW 289
31020: PUSH
31021: LD_INT 0
31023: EQUAL
31024: IFFALSE 31041
// SetCargo ( i , mat_siberit , 100 ) ;
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_INT 3
31033: PPUSH
31034: LD_INT 100
31036: PPUSH
31037: CALL_OW 290
31041: GO 31005
31043: POP
31044: POP
// end ;
31045: PPOPN 2
31047: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31048: LD_EXP 52
31052: IFFALSE 31060
31054: PUSH
31055: LD_EXP 97
31059: AND
31060: IFFALSE 31243
31062: GO 31064
31064: DISABLE
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31069: LD_ADDR_VAR 0 2
31073: PUSH
31074: LD_INT 22
31076: PUSH
31077: LD_OWVAR 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 2
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31243
// for i := 1 to 2 do
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: DOUBLE
31106: LD_INT 1
31108: DEC
31109: ST_TO_ADDR
31110: LD_INT 2
31112: PUSH
31113: FOR_TO
31114: IFFALSE 31241
// begin uc_side := your_side ;
31116: LD_ADDR_OWVAR 20
31120: PUSH
31121: LD_OWVAR 2
31125: ST_TO_ADDR
// uc_nation := nation_american ;
31126: LD_ADDR_OWVAR 21
31130: PUSH
31131: LD_INT 1
31133: ST_TO_ADDR
// vc_chassis := us_morphling ;
31134: LD_ADDR_OWVAR 37
31138: PUSH
31139: LD_INT 5
31141: ST_TO_ADDR
// vc_engine := engine_siberite ;
31142: LD_ADDR_OWVAR 39
31146: PUSH
31147: LD_INT 3
31149: ST_TO_ADDR
// vc_control := control_computer ;
31150: LD_ADDR_OWVAR 38
31154: PUSH
31155: LD_INT 3
31157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31158: LD_ADDR_OWVAR 40
31162: PUSH
31163: LD_INT 10
31165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31166: LD_VAR 0 2
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: PPUSH
31175: CALL_OW 310
31179: NOT
31180: IFFALSE 31227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31182: CALL_OW 45
31186: PPUSH
31187: LD_VAR 0 2
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: CALL_OW 250
31200: PPUSH
31201: LD_VAR 0 2
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PPUSH
31210: CALL_OW 251
31214: PPUSH
31215: LD_INT 12
31217: PPUSH
31218: LD_INT 1
31220: PPUSH
31221: CALL_OW 50
31225: GO 31239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31227: CALL_OW 45
31231: PPUSH
31232: LD_INT 1
31234: PPUSH
31235: CALL_OW 51
// end ;
31239: GO 31113
31241: POP
31242: POP
// end ;
31243: PPOPN 2
31245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31246: LD_EXP 52
31250: IFFALSE 31258
31252: PUSH
31253: LD_EXP 98
31257: AND
31258: IFFALSE 31480
31260: GO 31262
31262: DISABLE
31263: LD_INT 0
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31271: LD_ADDR_VAR 0 6
31275: PUSH
31276: LD_INT 22
31278: PUSH
31279: LD_OWVAR 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 21
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 23
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 69
31324: ST_TO_ADDR
// if not tmp then
31325: LD_VAR 0 6
31329: NOT
31330: IFFALSE 31334
// exit ;
31332: GO 31480
// s1 := rand ( 1 , 4 ) ;
31334: LD_ADDR_VAR 0 2
31338: PUSH
31339: LD_INT 1
31341: PPUSH
31342: LD_INT 4
31344: PPUSH
31345: CALL_OW 12
31349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31350: LD_ADDR_VAR 0 4
31354: PUSH
31355: LD_VAR 0 6
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: LD_VAR 0 2
31368: PPUSH
31369: CALL_OW 259
31373: ST_TO_ADDR
// if s1 = 1 then
31374: LD_VAR 0 2
31378: PUSH
31379: LD_INT 1
31381: EQUAL
31382: IFFALSE 31402
// s2 := rand ( 2 , 4 ) else
31384: LD_ADDR_VAR 0 3
31388: PUSH
31389: LD_INT 2
31391: PPUSH
31392: LD_INT 4
31394: PPUSH
31395: CALL_OW 12
31399: ST_TO_ADDR
31400: GO 31410
// s2 := 1 ;
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 1
31409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_VAR 0 6
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PPUSH
31424: LD_VAR 0 3
31428: PPUSH
31429: CALL_OW 259
31433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31434: LD_VAR 0 6
31438: PUSH
31439: LD_INT 1
31441: ARRAY
31442: PPUSH
31443: LD_VAR 0 2
31447: PPUSH
31448: LD_VAR 0 5
31452: PPUSH
31453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31457: LD_VAR 0 6
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: PPUSH
31466: LD_VAR 0 3
31470: PPUSH
31471: LD_VAR 0 4
31475: PPUSH
31476: CALL_OW 237
// end ;
31480: PPOPN 6
31482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31483: LD_EXP 52
31487: IFFALSE 31495
31489: PUSH
31490: LD_EXP 99
31494: AND
31495: IFFALSE 31574
31497: GO 31499
31499: DISABLE
31500: LD_INT 0
31502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31503: LD_ADDR_VAR 0 1
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 1
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31548: LD_VAR 0 1
31552: PUSH
31553: LD_INT 1
31555: PPUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 12
31565: ARRAY
31566: PPUSH
31567: LD_INT 1
31569: PPUSH
31570: CALL_OW 234
// end ;
31574: PPOPN 1
31576: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31577: LD_EXP 52
31581: IFFALSE 31589
31583: PUSH
31584: LD_EXP 100
31588: AND
31589: IFFALSE 31701
31591: GO 31593
31593: DISABLE
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31598: LD_ADDR_VAR 0 2
31602: PUSH
31603: LD_INT 22
31605: PUSH
31606: LD_OWVAR 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: LD_INT 27
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 30
31630: PUSH
31631: LD_INT 26
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 30
31640: PUSH
31641: LD_INT 28
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: ST_TO_ADDR
// if not tmp then
31663: LD_VAR 0 2
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 31701
// for i in tmp do
31672: LD_ADDR_VAR 0 1
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: FOR_IN
31683: IFFALSE 31699
// SetLives ( i , 1 ) ;
31685: LD_VAR 0 1
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 234
31697: GO 31682
31699: POP
31700: POP
// end ;
31701: PPOPN 2
31703: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31704: LD_EXP 52
31708: IFFALSE 31716
31710: PUSH
31711: LD_EXP 101
31715: AND
31716: IFFALSE 32003
31718: GO 31720
31720: DISABLE
31721: LD_INT 0
31723: PPUSH
31724: PPUSH
31725: PPUSH
// begin i := rand ( 1 , 7 ) ;
31726: LD_ADDR_VAR 0 1
31730: PUSH
31731: LD_INT 1
31733: PPUSH
31734: LD_INT 7
31736: PPUSH
31737: CALL_OW 12
31741: ST_TO_ADDR
// case i of 1 :
31742: LD_VAR 0 1
31746: PUSH
31747: LD_INT 1
31749: DOUBLE
31750: EQUAL
31751: IFTRUE 31755
31753: GO 31765
31755: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31756: LD_STRING earthquake(getX(game), 0, 32)
31758: PPUSH
31759: CALL_OW 559
31763: GO 32003
31765: LD_INT 2
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31787
31773: POP
// begin ToLua ( displayStucuk(); ) ;
31774: LD_STRING displayStucuk();
31776: PPUSH
31777: CALL_OW 559
// ResetFog ;
31781: CALL_OW 335
// end ; 3 :
31785: GO 32003
31787: LD_INT 3
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31899
31795: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31796: LD_ADDR_VAR 0 2
31800: PUSH
31801: LD_INT 22
31803: PUSH
31804: LD_OWVAR 2
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 25
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PPUSH
31827: CALL_OW 69
31831: ST_TO_ADDR
// if not tmp then
31832: LD_VAR 0 2
31836: NOT
31837: IFFALSE 31841
// exit ;
31839: GO 32003
// un := tmp [ rand ( 1 , tmp ) ] ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 2
31850: PUSH
31851: LD_INT 1
31853: PPUSH
31854: LD_VAR 0 2
31858: PPUSH
31859: CALL_OW 12
31863: ARRAY
31864: ST_TO_ADDR
// if Crawls ( un ) then
31865: LD_VAR 0 3
31869: PPUSH
31870: CALL_OW 318
31874: IFFALSE 31885
// ComWalk ( un ) ;
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31885: LD_VAR 0 3
31889: PPUSH
31890: LD_INT 8
31892: PPUSH
31893: CALL_OW 336
// end ; 4 :
31897: GO 32003
31899: LD_INT 4
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31981
31907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_INT 22
31915: PUSH
31916: LD_OWVAR 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 30
31927: PUSH
31928: LD_INT 29
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL_OW 69
31943: ST_TO_ADDR
// if not tmp then
31944: LD_VAR 0 2
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 32003
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31953: LD_VAR 0 2
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: PPUSH
31962: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31966: LD_VAR 0 2
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: CALL_OW 65
// end ; 5 .. 7 :
31979: GO 32003
31981: LD_INT 5
31983: DOUBLE
31984: GREATEREQUAL
31985: IFFALSE 31993
31987: LD_INT 7
31989: DOUBLE
31990: LESSEQUAL
31991: IFTRUE 31995
31993: GO 32002
31995: POP
// StreamSibBomb ; end ;
31996: CALL 28184 0 0
32000: GO 32003
32002: POP
// end ;
32003: PPOPN 3
32005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32006: LD_EXP 52
32010: IFFALSE 32018
32012: PUSH
32013: LD_EXP 102
32017: AND
32018: IFFALSE 32174
32020: GO 32022
32022: DISABLE
32023: LD_INT 0
32025: PPUSH
32026: PPUSH
32027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32028: LD_ADDR_VAR 0 2
32032: PUSH
32033: LD_INT 81
32035: PUSH
32036: LD_OWVAR 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PPUSH
32077: CALL_OW 69
32081: ST_TO_ADDR
// if not tmp then
32082: LD_VAR 0 2
32086: NOT
32087: IFFALSE 32091
// exit ;
32089: GO 32174
// p := 0 ;
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 0
32098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32099: LD_INT 35
32101: PPUSH
32102: CALL_OW 67
// p := p + 1 ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 3
32115: PUSH
32116: LD_INT 1
32118: PLUS
32119: ST_TO_ADDR
// for i in tmp do
32120: LD_ADDR_VAR 0 1
32124: PUSH
32125: LD_VAR 0 2
32129: PUSH
32130: FOR_IN
32131: IFFALSE 32162
// if GetLives ( i ) < 1000 then
32133: LD_VAR 0 1
32137: PPUSH
32138: CALL_OW 256
32142: PUSH
32143: LD_INT 1000
32145: LESS
32146: IFFALSE 32160
// SetLives ( i , 1000 ) ;
32148: LD_VAR 0 1
32152: PPUSH
32153: LD_INT 1000
32155: PPUSH
32156: CALL_OW 234
32160: GO 32130
32162: POP
32163: POP
// until p > 20 ;
32164: LD_VAR 0 3
32168: PUSH
32169: LD_INT 20
32171: GREATER
32172: IFFALSE 32099
// end ;
32174: PPOPN 3
32176: END
// every 0 0$1 trigger StreamModeActive and sTime do
32177: LD_EXP 52
32181: IFFALSE 32189
32183: PUSH
32184: LD_EXP 103
32188: AND
32189: IFFALSE 32224
32191: GO 32193
32193: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32194: LD_INT 28
32196: PPUSH
32197: LD_OWVAR 2
32201: PPUSH
32202: LD_INT 2
32204: PPUSH
32205: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32209: LD_INT 30
32211: PPUSH
32212: LD_OWVAR 2
32216: PPUSH
32217: LD_INT 2
32219: PPUSH
32220: CALL_OW 322
// end ;
32224: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32225: LD_EXP 52
32229: IFFALSE 32237
32231: PUSH
32232: LD_EXP 104
32236: AND
32237: IFFALSE 32358
32239: GO 32241
32241: DISABLE
32242: LD_INT 0
32244: PPUSH
32245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32246: LD_ADDR_VAR 0 2
32250: PUSH
32251: LD_INT 22
32253: PUSH
32254: LD_OWVAR 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 23
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: PPUSH
32295: CALL_OW 69
32299: ST_TO_ADDR
// if not tmp then
32300: LD_VAR 0 2
32304: NOT
32305: IFFALSE 32309
// exit ;
32307: GO 32358
// for i in tmp do
32309: LD_ADDR_VAR 0 1
32313: PUSH
32314: LD_VAR 0 2
32318: PUSH
32319: FOR_IN
32320: IFFALSE 32356
// begin if Crawls ( i ) then
32322: LD_VAR 0 1
32326: PPUSH
32327: CALL_OW 318
32331: IFFALSE 32342
// ComWalk ( i ) ;
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 138
// SetClass ( i , 2 ) ;
32342: LD_VAR 0 1
32346: PPUSH
32347: LD_INT 2
32349: PPUSH
32350: CALL_OW 336
// end ;
32354: GO 32319
32356: POP
32357: POP
// end ;
32358: PPOPN 2
32360: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32361: LD_EXP 52
32365: IFFALSE 32373
32367: PUSH
32368: LD_EXP 105
32372: AND
32373: IFFALSE 32663
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32383: LD_OWVAR 2
32387: PPUSH
32388: LD_INT 9
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: LD_INT 1
32396: PPUSH
32397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32401: LD_INT 9
32403: PPUSH
32404: LD_OWVAR 2
32408: PPUSH
32409: CALL_OW 343
// uc_side := 9 ;
32413: LD_ADDR_OWVAR 20
32417: PUSH
32418: LD_INT 9
32420: ST_TO_ADDR
// uc_nation := 2 ;
32421: LD_ADDR_OWVAR 21
32425: PUSH
32426: LD_INT 2
32428: ST_TO_ADDR
// hc_name := Dark Warrior ;
32429: LD_ADDR_OWVAR 26
32433: PUSH
32434: LD_STRING Dark Warrior
32436: ST_TO_ADDR
// hc_gallery :=  ;
32437: LD_ADDR_OWVAR 33
32441: PUSH
32442: LD_STRING 
32444: ST_TO_ADDR
// hc_noskilllimit := true ;
32445: LD_ADDR_OWVAR 76
32449: PUSH
32450: LD_INT 1
32452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32453: LD_ADDR_OWVAR 31
32457: PUSH
32458: LD_INT 30
32460: PUSH
32461: LD_INT 30
32463: PUSH
32464: LD_INT 30
32466: PUSH
32467: LD_INT 30
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// un := CreateHuman ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: CALL_OW 44
32485: ST_TO_ADDR
// hc_noskilllimit := false ;
32486: LD_ADDR_OWVAR 76
32490: PUSH
32491: LD_INT 0
32493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32494: LD_VAR 0 3
32498: PPUSH
32499: LD_INT 1
32501: PPUSH
32502: CALL_OW 51
// ToLua ( playRanger() ) ;
32506: LD_STRING playRanger()
32508: PPUSH
32509: CALL_OW 559
// p := 0 ;
32513: LD_ADDR_VAR 0 2
32517: PUSH
32518: LD_INT 0
32520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32521: LD_INT 35
32523: PPUSH
32524: CALL_OW 67
// p := p + 1 ;
32528: LD_ADDR_VAR 0 2
32532: PUSH
32533: LD_VAR 0 2
32537: PUSH
32538: LD_INT 1
32540: PLUS
32541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32542: LD_VAR 0 3
32546: PPUSH
32547: CALL_OW 256
32551: PUSH
32552: LD_INT 1000
32554: LESS
32555: IFFALSE 32569
// SetLives ( un , 1000 ) ;
32557: LD_VAR 0 3
32561: PPUSH
32562: LD_INT 1000
32564: PPUSH
32565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_INT 81
32576: PUSH
32577: LD_OWVAR 2
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 91
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_INT 30
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 69
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: CALL_OW 74
32620: PPUSH
32621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32625: LD_VAR 0 2
32629: PUSH
32630: LD_INT 80
32632: GREATER
32633: IFTRUE 32646
32635: PUSH
32636: LD_VAR 0 3
32640: PPUSH
32641: CALL_OW 301
32645: OR
32646: IFFALSE 32521
// if un then
32648: LD_VAR 0 3
32652: IFFALSE 32663
// RemoveUnit ( un ) ;
32654: LD_VAR 0 3
32658: PPUSH
32659: CALL_OW 64
// end ;
32663: PPOPN 3
32665: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32666: LD_EXP 106
32670: IFFALSE 32786
32672: GO 32674
32674: DISABLE
32675: LD_INT 0
32677: PPUSH
32678: PPUSH
32679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32680: LD_ADDR_VAR 0 2
32684: PUSH
32685: LD_INT 81
32687: PUSH
32688: LD_OWVAR 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 21
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PPUSH
32711: CALL_OW 69
32715: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32716: LD_STRING playComputer()
32718: PPUSH
32719: CALL_OW 559
// if not tmp then
32723: LD_VAR 0 2
32727: NOT
32728: IFFALSE 32732
// exit ;
32730: GO 32786
// for i in tmp do
32732: LD_ADDR_VAR 0 1
32736: PUSH
32737: LD_VAR 0 2
32741: PUSH
32742: FOR_IN
32743: IFFALSE 32784
// for j := 1 to 4 do
32745: LD_ADDR_VAR 0 3
32749: PUSH
32750: DOUBLE
32751: LD_INT 1
32753: DEC
32754: ST_TO_ADDR
32755: LD_INT 4
32757: PUSH
32758: FOR_TO
32759: IFFALSE 32780
// SetSkill ( i , j , 10 ) ;
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 3
32770: PPUSH
32771: LD_INT 10
32773: PPUSH
32774: CALL_OW 237
32778: GO 32758
32780: POP
32781: POP
32782: GO 32742
32784: POP
32785: POP
// end ;
32786: PPOPN 3
32788: END
// every 0 0$1 trigger s30 do var i , tmp ;
32789: LD_EXP 107
32793: IFFALSE 32862
32795: GO 32797
32797: DISABLE
32798: LD_INT 0
32800: PPUSH
32801: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: LD_INT 22
32809: PUSH
32810: LD_OWVAR 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: ST_TO_ADDR
// if not tmp then
32824: LD_VAR 0 2
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32862
// for i in tmp do
32833: LD_ADDR_VAR 0 1
32837: PUSH
32838: LD_VAR 0 2
32842: PUSH
32843: FOR_IN
32844: IFFALSE 32860
// SetLives ( i , 300 ) ;
32846: LD_VAR 0 1
32850: PPUSH
32851: LD_INT 300
32853: PPUSH
32854: CALL_OW 234
32858: GO 32843
32860: POP
32861: POP
// end ;
32862: PPOPN 2
32864: END
// every 0 0$1 trigger s60 do var i , tmp ;
32865: LD_EXP 108
32869: IFFALSE 32938
32871: GO 32873
32873: DISABLE
32874: LD_INT 0
32876: PPUSH
32877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_INT 22
32885: PUSH
32886: LD_OWVAR 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PPUSH
32895: CALL_OW 69
32899: ST_TO_ADDR
// if not tmp then
32900: LD_VAR 0 2
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 32938
// for i in tmp do
32909: LD_ADDR_VAR 0 1
32913: PUSH
32914: LD_VAR 0 2
32918: PUSH
32919: FOR_IN
32920: IFFALSE 32936
// SetLives ( i , 600 ) ;
32922: LD_VAR 0 1
32926: PPUSH
32927: LD_INT 600
32929: PPUSH
32930: CALL_OW 234
32934: GO 32919
32936: POP
32937: POP
// end ;
32938: PPOPN 2
32940: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32941: LD_INT 0
32943: PPUSH
// case cmd of 301 :
32944: LD_VAR 0 1
32948: PUSH
32949: LD_INT 301
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32989
32957: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32958: LD_VAR 0 6
32962: PPUSH
32963: LD_VAR 0 7
32967: PPUSH
32968: LD_VAR 0 8
32972: PPUSH
32973: LD_VAR 0 4
32977: PPUSH
32978: LD_VAR 0 5
32982: PPUSH
32983: CALL 34202 0 5
32987: GO 33110
32989: LD_INT 302
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33034
32997: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32998: LD_VAR 0 6
33002: PPUSH
33003: LD_VAR 0 7
33007: PPUSH
33008: LD_VAR 0 8
33012: PPUSH
33013: LD_VAR 0 9
33017: PPUSH
33018: LD_VAR 0 4
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL 34293 0 6
33032: GO 33110
33034: LD_INT 303
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33079
33042: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33043: LD_VAR 0 6
33047: PPUSH
33048: LD_VAR 0 7
33052: PPUSH
33053: LD_VAR 0 8
33057: PPUSH
33058: LD_VAR 0 9
33062: PPUSH
33063: LD_VAR 0 4
33067: PPUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: CALL 33115 0 6
33077: GO 33110
33079: LD_INT 304
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33109
33087: POP
// hHackTeleport ( unit , x , y ) ; end ;
33088: LD_VAR 0 2
33092: PPUSH
33093: LD_VAR 0 4
33097: PPUSH
33098: LD_VAR 0 5
33102: PPUSH
33103: CALL 34886 0 3
33107: GO 33110
33109: POP
// end ;
33110: LD_VAR 0 12
33114: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33115: LD_INT 0
33117: PPUSH
33118: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33119: LD_VAR 0 1
33123: PUSH
33124: LD_INT 1
33126: LESS
33127: IFTRUE 33139
33129: PUSH
33130: LD_VAR 0 1
33134: PUSH
33135: LD_INT 3
33137: GREATER
33138: OR
33139: IFTRUE 33157
33141: PUSH
33142: LD_VAR 0 5
33146: PPUSH
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 428
33156: OR
33157: IFFALSE 33161
// exit ;
33159: GO 33889
// uc_side := your_side ;
33161: LD_ADDR_OWVAR 20
33165: PUSH
33166: LD_OWVAR 2
33170: ST_TO_ADDR
// uc_nation := nation ;
33171: LD_ADDR_OWVAR 21
33175: PUSH
33176: LD_VAR 0 1
33180: ST_TO_ADDR
// bc_level = 1 ;
33181: LD_ADDR_OWVAR 43
33185: PUSH
33186: LD_INT 1
33188: ST_TO_ADDR
// case btype of 1 :
33189: LD_VAR 0 2
33193: PUSH
33194: LD_INT 1
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33213
33202: POP
// bc_type := b_depot ; 2 :
33203: LD_ADDR_OWVAR 42
33207: PUSH
33208: LD_INT 0
33210: ST_TO_ADDR
33211: GO 33833
33213: LD_INT 2
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33221
33219: GO 33232
33221: POP
// bc_type := b_warehouse ; 3 :
33222: LD_ADDR_OWVAR 42
33226: PUSH
33227: LD_INT 1
33229: ST_TO_ADDR
33230: GO 33833
33232: LD_INT 3
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33251
33240: POP
// bc_type := b_lab ; 4 .. 9 :
33241: LD_ADDR_OWVAR 42
33245: PUSH
33246: LD_INT 6
33248: ST_TO_ADDR
33249: GO 33833
33251: LD_INT 4
33253: DOUBLE
33254: GREATEREQUAL
33255: IFFALSE 33263
33257: LD_INT 9
33259: DOUBLE
33260: LESSEQUAL
33261: IFTRUE 33265
33263: GO 33325
33265: POP
// begin bc_type := b_lab_half ;
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 7
33273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33274: LD_ADDR_OWVAR 44
33278: PUSH
33279: LD_INT 10
33281: PUSH
33282: LD_INT 11
33284: PUSH
33285: LD_INT 12
33287: PUSH
33288: LD_INT 15
33290: PUSH
33291: LD_INT 14
33293: PUSH
33294: LD_INT 13
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: PUSH
33305: LD_VAR 0 2
33309: PUSH
33310: LD_INT 3
33312: MINUS
33313: ARRAY
33314: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33315: LD_ADDR_OWVAR 45
33319: PUSH
33320: LD_INT 9
33322: ST_TO_ADDR
// end ; 10 .. 13 :
33323: GO 33833
33325: LD_INT 10
33327: DOUBLE
33328: GREATEREQUAL
33329: IFFALSE 33337
33331: LD_INT 13
33333: DOUBLE
33334: LESSEQUAL
33335: IFTRUE 33339
33337: GO 33416
33339: POP
// begin bc_type := b_lab_full ;
33340: LD_ADDR_OWVAR 42
33344: PUSH
33345: LD_INT 8
33347: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33348: LD_ADDR_OWVAR 44
33352: PUSH
33353: LD_INT 10
33355: PUSH
33356: LD_INT 12
33358: PUSH
33359: LD_INT 14
33361: PUSH
33362: LD_INT 13
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_INT 9
33378: MINUS
33379: ARRAY
33380: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33381: LD_ADDR_OWVAR 45
33385: PUSH
33386: LD_INT 11
33388: PUSH
33389: LD_INT 15
33391: PUSH
33392: LD_INT 12
33394: PUSH
33395: LD_INT 15
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: PUSH
33404: LD_VAR 0 2
33408: PUSH
33409: LD_INT 9
33411: MINUS
33412: ARRAY
33413: ST_TO_ADDR
// end ; 14 :
33414: GO 33833
33416: LD_INT 14
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33424
33422: GO 33435
33424: POP
// bc_type := b_workshop ; 15 :
33425: LD_ADDR_OWVAR 42
33429: PUSH
33430: LD_INT 2
33432: ST_TO_ADDR
33433: GO 33833
33435: LD_INT 15
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33454
33443: POP
// bc_type := b_factory ; 16 :
33444: LD_ADDR_OWVAR 42
33448: PUSH
33449: LD_INT 3
33451: ST_TO_ADDR
33452: GO 33833
33454: LD_INT 16
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33473
33462: POP
// bc_type := b_ext_gun ; 17 :
33463: LD_ADDR_OWVAR 42
33467: PUSH
33468: LD_INT 17
33470: ST_TO_ADDR
33471: GO 33833
33473: LD_INT 17
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33509
33481: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33482: LD_ADDR_OWVAR 42
33486: PUSH
33487: LD_INT 19
33489: PUSH
33490: LD_INT 23
33492: PUSH
33493: LD_INT 19
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: PUSH
33501: LD_VAR 0 1
33505: ARRAY
33506: ST_TO_ADDR
33507: GO 33833
33509: LD_INT 18
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33528
33517: POP
// bc_type := b_ext_radar ; 19 :
33518: LD_ADDR_OWVAR 42
33522: PUSH
33523: LD_INT 20
33525: ST_TO_ADDR
33526: GO 33833
33528: LD_INT 19
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33547
33536: POP
// bc_type := b_ext_radio ; 20 :
33537: LD_ADDR_OWVAR 42
33541: PUSH
33542: LD_INT 22
33544: ST_TO_ADDR
33545: GO 33833
33547: LD_INT 20
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33566
33555: POP
// bc_type := b_ext_siberium ; 21 :
33556: LD_ADDR_OWVAR 42
33560: PUSH
33561: LD_INT 21
33563: ST_TO_ADDR
33564: GO 33833
33566: LD_INT 21
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33585
33574: POP
// bc_type := b_ext_computer ; 22 :
33575: LD_ADDR_OWVAR 42
33579: PUSH
33580: LD_INT 24
33582: ST_TO_ADDR
33583: GO 33833
33585: LD_INT 22
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33604
33593: POP
// bc_type := b_ext_track ; 23 :
33594: LD_ADDR_OWVAR 42
33598: PUSH
33599: LD_INT 16
33601: ST_TO_ADDR
33602: GO 33833
33604: LD_INT 23
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33623
33612: POP
// bc_type := b_ext_laser ; 24 :
33613: LD_ADDR_OWVAR 42
33617: PUSH
33618: LD_INT 25
33620: ST_TO_ADDR
33621: GO 33833
33623: LD_INT 24
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33642
33631: POP
// bc_type := b_control_tower ; 25 :
33632: LD_ADDR_OWVAR 42
33636: PUSH
33637: LD_INT 36
33639: ST_TO_ADDR
33640: GO 33833
33642: LD_INT 25
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33661
33650: POP
// bc_type := b_breastwork ; 26 :
33651: LD_ADDR_OWVAR 42
33655: PUSH
33656: LD_INT 31
33658: ST_TO_ADDR
33659: GO 33833
33661: LD_INT 26
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33680
33669: POP
// bc_type := b_bunker ; 27 :
33670: LD_ADDR_OWVAR 42
33674: PUSH
33675: LD_INT 32
33677: ST_TO_ADDR
33678: GO 33833
33680: LD_INT 27
33682: DOUBLE
33683: EQUAL
33684: IFTRUE 33688
33686: GO 33699
33688: POP
// bc_type := b_turret ; 28 :
33689: LD_ADDR_OWVAR 42
33693: PUSH
33694: LD_INT 33
33696: ST_TO_ADDR
33697: GO 33833
33699: LD_INT 28
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33707
33705: GO 33718
33707: POP
// bc_type := b_armoury ; 29 :
33708: LD_ADDR_OWVAR 42
33712: PUSH
33713: LD_INT 4
33715: ST_TO_ADDR
33716: GO 33833
33718: LD_INT 29
33720: DOUBLE
33721: EQUAL
33722: IFTRUE 33726
33724: GO 33737
33726: POP
// bc_type := b_barracks ; 30 :
33727: LD_ADDR_OWVAR 42
33731: PUSH
33732: LD_INT 5
33734: ST_TO_ADDR
33735: GO 33833
33737: LD_INT 30
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33756
33745: POP
// bc_type := b_solar_power ; 31 :
33746: LD_ADDR_OWVAR 42
33750: PUSH
33751: LD_INT 27
33753: ST_TO_ADDR
33754: GO 33833
33756: LD_INT 31
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33775
33764: POP
// bc_type := b_oil_power ; 32 :
33765: LD_ADDR_OWVAR 42
33769: PUSH
33770: LD_INT 26
33772: ST_TO_ADDR
33773: GO 33833
33775: LD_INT 32
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33794
33783: POP
// bc_type := b_siberite_power ; 33 :
33784: LD_ADDR_OWVAR 42
33788: PUSH
33789: LD_INT 28
33791: ST_TO_ADDR
33792: GO 33833
33794: LD_INT 33
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33813
33802: POP
// bc_type := b_oil_mine ; 34 :
33803: LD_ADDR_OWVAR 42
33807: PUSH
33808: LD_INT 29
33810: ST_TO_ADDR
33811: GO 33833
33813: LD_INT 34
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33832
33821: POP
// bc_type := b_siberite_mine ; end ;
33822: LD_ADDR_OWVAR 42
33826: PUSH
33827: LD_INT 30
33829: ST_TO_ADDR
33830: GO 33833
33832: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33833: LD_ADDR_VAR 0 8
33837: PUSH
33838: LD_VAR 0 5
33842: PPUSH
33843: LD_VAR 0 6
33847: PPUSH
33848: LD_VAR 0 3
33852: PPUSH
33853: CALL_OW 47
33857: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33858: LD_OWVAR 42
33862: PUSH
33863: LD_INT 32
33865: PUSH
33866: LD_INT 33
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: IN
33873: IFFALSE 33889
// PlaceWeaponTurret ( b , weapon ) ;
33875: LD_VAR 0 8
33879: PPUSH
33880: LD_VAR 0 4
33884: PPUSH
33885: CALL_OW 431
// end ;
33889: LD_VAR 0 7
33893: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33900: LD_ADDR_VAR 0 4
33904: PUSH
33905: LD_INT 22
33907: PUSH
33908: LD_OWVAR 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 30
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 30
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PPUSH
33949: CALL_OW 69
33953: ST_TO_ADDR
// if not tmp then
33954: LD_VAR 0 4
33958: NOT
33959: IFFALSE 33963
// exit ;
33961: GO 34022
// for i in tmp do
33963: LD_ADDR_VAR 0 2
33967: PUSH
33968: LD_VAR 0 4
33972: PUSH
33973: FOR_IN
33974: IFFALSE 34020
// for j = 1 to 3 do
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: DOUBLE
33982: LD_INT 1
33984: DEC
33985: ST_TO_ADDR
33986: LD_INT 3
33988: PUSH
33989: FOR_TO
33990: IFFALSE 34016
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33992: LD_VAR 0 2
33996: PPUSH
33997: CALL_OW 274
34001: PPUSH
34002: LD_VAR 0 3
34006: PPUSH
34007: LD_INT 99999
34009: PPUSH
34010: CALL_OW 277
34014: GO 33989
34016: POP
34017: POP
34018: GO 33973
34020: POP
34021: POP
// end ;
34022: LD_VAR 0 1
34026: RET
// export function hHackSetLevel10 ; var i , j ; begin
34027: LD_INT 0
34029: PPUSH
34030: PPUSH
34031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34032: LD_ADDR_VAR 0 2
34036: PUSH
34037: LD_INT 21
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PPUSH
34047: CALL_OW 69
34051: PUSH
34052: FOR_IN
34053: IFFALSE 34105
// if IsSelected ( i ) then
34055: LD_VAR 0 2
34059: PPUSH
34060: CALL_OW 306
34064: IFFALSE 34103
// begin for j := 1 to 4 do
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: DOUBLE
34072: LD_INT 1
34074: DEC
34075: ST_TO_ADDR
34076: LD_INT 4
34078: PUSH
34079: FOR_TO
34080: IFFALSE 34101
// SetSkill ( i , j , 10 ) ;
34082: LD_VAR 0 2
34086: PPUSH
34087: LD_VAR 0 3
34091: PPUSH
34092: LD_INT 10
34094: PPUSH
34095: CALL_OW 237
34099: GO 34079
34101: POP
34102: POP
// end ;
34103: GO 34052
34105: POP
34106: POP
// end ;
34107: LD_VAR 0 1
34111: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34117: LD_ADDR_VAR 0 2
34121: PUSH
34122: LD_INT 22
34124: PUSH
34125: LD_OWVAR 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 21
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PPUSH
34148: CALL_OW 69
34152: PUSH
34153: FOR_IN
34154: IFFALSE 34195
// begin for j := 1 to 4 do
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: DOUBLE
34162: LD_INT 1
34164: DEC
34165: ST_TO_ADDR
34166: LD_INT 4
34168: PUSH
34169: FOR_TO
34170: IFFALSE 34191
// SetSkill ( i , j , 10 ) ;
34172: LD_VAR 0 2
34176: PPUSH
34177: LD_VAR 0 3
34181: PPUSH
34182: LD_INT 10
34184: PPUSH
34185: CALL_OW 237
34189: GO 34169
34191: POP
34192: POP
// end ;
34193: GO 34153
34195: POP
34196: POP
// end ;
34197: LD_VAR 0 1
34201: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34202: LD_INT 0
34204: PPUSH
// uc_side := your_side ;
34205: LD_ADDR_OWVAR 20
34209: PUSH
34210: LD_OWVAR 2
34214: ST_TO_ADDR
// uc_nation := nation ;
34215: LD_ADDR_OWVAR 21
34219: PUSH
34220: LD_VAR 0 1
34224: ST_TO_ADDR
// InitHc ;
34225: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34229: LD_INT 0
34231: PPUSH
34232: LD_VAR 0 2
34236: PPUSH
34237: LD_VAR 0 3
34241: PPUSH
34242: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34246: LD_VAR 0 4
34250: PPUSH
34251: LD_VAR 0 5
34255: PPUSH
34256: CALL_OW 428
34260: PUSH
34261: LD_INT 0
34263: EQUAL
34264: IFFALSE 34288
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34266: CALL_OW 44
34270: PPUSH
34271: LD_VAR 0 4
34275: PPUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: LD_INT 1
34283: PPUSH
34284: CALL_OW 48
// end ;
34288: LD_VAR 0 6
34292: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34293: LD_INT 0
34295: PPUSH
34296: PPUSH
// uc_side := your_side ;
34297: LD_ADDR_OWVAR 20
34301: PUSH
34302: LD_OWVAR 2
34306: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34307: LD_VAR 0 1
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: LD_INT 3
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: LD_INT 5
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: IN
34334: IFFALSE 34346
// uc_nation := nation_american else
34336: LD_ADDR_OWVAR 21
34340: PUSH
34341: LD_INT 1
34343: ST_TO_ADDR
34344: GO 34389
// if chassis in [ 11 , 12 , 13 , 14 ] then
34346: LD_VAR 0 1
34350: PUSH
34351: LD_INT 11
34353: PUSH
34354: LD_INT 12
34356: PUSH
34357: LD_INT 13
34359: PUSH
34360: LD_INT 14
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: IN
34369: IFFALSE 34381
// uc_nation := nation_arabian else
34371: LD_ADDR_OWVAR 21
34375: PUSH
34376: LD_INT 2
34378: ST_TO_ADDR
34379: GO 34389
// uc_nation := nation_russian ;
34381: LD_ADDR_OWVAR 21
34385: PUSH
34386: LD_INT 3
34388: ST_TO_ADDR
// vc_chassis := chassis ;
34389: LD_ADDR_OWVAR 37
34393: PUSH
34394: LD_VAR 0 1
34398: ST_TO_ADDR
// vc_engine := engine ;
34399: LD_ADDR_OWVAR 39
34403: PUSH
34404: LD_VAR 0 2
34408: ST_TO_ADDR
// vc_control := control ;
34409: LD_ADDR_OWVAR 38
34413: PUSH
34414: LD_VAR 0 3
34418: ST_TO_ADDR
// vc_weapon := weapon ;
34419: LD_ADDR_OWVAR 40
34423: PUSH
34424: LD_VAR 0 4
34428: ST_TO_ADDR
// un := CreateVehicle ;
34429: LD_ADDR_VAR 0 8
34433: PUSH
34434: CALL_OW 45
34438: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34439: LD_VAR 0 8
34443: PPUSH
34444: LD_INT 0
34446: PPUSH
34447: LD_INT 5
34449: PPUSH
34450: CALL_OW 12
34454: PPUSH
34455: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34459: LD_VAR 0 8
34463: PPUSH
34464: LD_VAR 0 5
34468: PPUSH
34469: LD_VAR 0 6
34473: PPUSH
34474: LD_INT 1
34476: PPUSH
34477: CALL_OW 48
// end ;
34481: LD_VAR 0 7
34485: RET
// export hInvincible ; every 1 do
34486: GO 34488
34488: DISABLE
// hInvincible := [ ] ;
34489: LD_ADDR_EXP 109
34493: PUSH
34494: EMPTY
34495: ST_TO_ADDR
34496: END
// every 10 do var i ;
34497: GO 34499
34499: DISABLE
34500: LD_INT 0
34502: PPUSH
// begin enable ;
34503: ENABLE
// if not hInvincible then
34504: LD_EXP 109
34508: NOT
34509: IFFALSE 34513
// exit ;
34511: GO 34557
// for i in hInvincible do
34513: LD_ADDR_VAR 0 1
34517: PUSH
34518: LD_EXP 109
34522: PUSH
34523: FOR_IN
34524: IFFALSE 34555
// if GetLives ( i ) < 1000 then
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 256
34535: PUSH
34536: LD_INT 1000
34538: LESS
34539: IFFALSE 34553
// SetLives ( i , 1000 ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_INT 1000
34548: PPUSH
34549: CALL_OW 234
34553: GO 34523
34555: POP
34556: POP
// end ;
34557: PPOPN 1
34559: END
// export function hHackInvincible ; var i ; begin
34560: LD_INT 0
34562: PPUSH
34563: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34564: LD_ADDR_VAR 0 2
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 21
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 21
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: PPUSH
34597: CALL_OW 69
34601: PUSH
34602: FOR_IN
34603: IFFALSE 34664
// if IsSelected ( i ) then
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 306
34614: IFFALSE 34662
// begin if i in hInvincible then
34616: LD_VAR 0 2
34620: PUSH
34621: LD_EXP 109
34625: IN
34626: IFFALSE 34646
// hInvincible := hInvincible diff i else
34628: LD_ADDR_EXP 109
34632: PUSH
34633: LD_EXP 109
34637: PUSH
34638: LD_VAR 0 2
34642: DIFF
34643: ST_TO_ADDR
34644: GO 34662
// hInvincible := hInvincible union i ;
34646: LD_ADDR_EXP 109
34650: PUSH
34651: LD_EXP 109
34655: PUSH
34656: LD_VAR 0 2
34660: UNION
34661: ST_TO_ADDR
// end ;
34662: GO 34602
34664: POP
34665: POP
// end ;
34666: LD_VAR 0 1
34670: RET
// export function hHackInvisible ; var i , j ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34676: LD_ADDR_VAR 0 2
34680: PUSH
34681: LD_INT 21
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PPUSH
34691: CALL_OW 69
34695: PUSH
34696: FOR_IN
34697: IFFALSE 34721
// if IsSelected ( i ) then
34699: LD_VAR 0 2
34703: PPUSH
34704: CALL_OW 306
34708: IFFALSE 34719
// ComForceInvisible ( i ) ;
34710: LD_VAR 0 2
34714: PPUSH
34715: CALL_OW 496
34719: GO 34696
34721: POP
34722: POP
// end ;
34723: LD_VAR 0 1
34727: RET
// export function hHackChangeYourSide ; begin
34728: LD_INT 0
34730: PPUSH
// if your_side = 8 then
34731: LD_OWVAR 2
34735: PUSH
34736: LD_INT 8
34738: EQUAL
34739: IFFALSE 34751
// your_side := 0 else
34741: LD_ADDR_OWVAR 2
34745: PUSH
34746: LD_INT 0
34748: ST_TO_ADDR
34749: GO 34765
// your_side := your_side + 1 ;
34751: LD_ADDR_OWVAR 2
34755: PUSH
34756: LD_OWVAR 2
34760: PUSH
34761: LD_INT 1
34763: PLUS
34764: ST_TO_ADDR
// end ;
34765: LD_VAR 0 1
34769: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34770: LD_INT 0
34772: PPUSH
34773: PPUSH
34774: PPUSH
// for i in all_units do
34775: LD_ADDR_VAR 0 2
34779: PUSH
34780: LD_OWVAR 3
34784: PUSH
34785: FOR_IN
34786: IFFALSE 34864
// if IsSelected ( i ) then
34788: LD_VAR 0 2
34792: PPUSH
34793: CALL_OW 306
34797: IFFALSE 34862
// begin j := GetSide ( i ) ;
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_VAR 0 2
34808: PPUSH
34809: CALL_OW 255
34813: ST_TO_ADDR
// if j = 8 then
34814: LD_VAR 0 3
34818: PUSH
34819: LD_INT 8
34821: EQUAL
34822: IFFALSE 34834
// j := 0 else
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_INT 0
34831: ST_TO_ADDR
34832: GO 34848
// j := j + 1 ;
34834: LD_ADDR_VAR 0 3
34838: PUSH
34839: LD_VAR 0 3
34843: PUSH
34844: LD_INT 1
34846: PLUS
34847: ST_TO_ADDR
// SetSide ( i , j ) ;
34848: LD_VAR 0 2
34852: PPUSH
34853: LD_VAR 0 3
34857: PPUSH
34858: CALL_OW 235
// end ;
34862: GO 34785
34864: POP
34865: POP
// end ;
34866: LD_VAR 0 1
34870: RET
// export function hHackFog ; begin
34871: LD_INT 0
34873: PPUSH
// FogOff ( true ) ;
34874: LD_INT 1
34876: PPUSH
34877: CALL_OW 344
// end ;
34881: LD_VAR 0 1
34885: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34886: LD_INT 0
34888: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34889: LD_VAR 0 1
34893: PPUSH
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: LD_INT 1
34906: PPUSH
34907: LD_INT 1
34909: PPUSH
34910: CALL_OW 483
// CenterOnXY ( x , y ) ;
34914: LD_VAR 0 2
34918: PPUSH
34919: LD_VAR 0 3
34923: PPUSH
34924: CALL_OW 84
// end ;
34928: LD_VAR 0 4
34932: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34933: LD_INT 0
34935: PPUSH
34936: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34937: LD_VAR 0 1
34941: NOT
34942: IFTRUE 34961
34944: PUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL_OW 488
34959: NOT
34960: OR
34961: IFTRUE 34996
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 266
34973: PUSH
34974: LD_INT 3
34976: NONEQUAL
34977: IFFALSE 34995
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 247
34989: PUSH
34990: LD_INT 1
34992: EQUAL
34993: NOT
34994: AND
34995: OR
34996: IFFALSE 35000
// exit ;
34998: GO 35282
// if GetType ( factory ) = unit_human then
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 247
35009: PUSH
35010: LD_INT 1
35012: EQUAL
35013: IFFALSE 35030
// factory := IsInUnit ( factory ) ;
35015: LD_ADDR_VAR 0 1
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 310
35029: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 266
35039: PUSH
35040: LD_INT 3
35042: NONEQUAL
35043: IFFALSE 35047
// exit ;
35045: GO 35282
// for i := 1 to Count ( factoryWaypoints ) do
35047: LD_ADDR_VAR 0 5
35051: PUSH
35052: DOUBLE
35053: LD_INT 1
35055: DEC
35056: ST_TO_ADDR
35057: LD_EXP 110
35061: PPUSH
35062: CALL 44815 0 1
35066: PUSH
35067: FOR_TO
35068: IFFALSE 35230
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35070: LD_VAR 0 2
35074: PPUSH
35075: LD_VAR 0 3
35079: PPUSH
35080: CALL_OW 428
35084: PUSH
35085: LD_EXP 110
35089: PUSH
35090: LD_VAR 0 5
35094: ARRAY
35095: PUSH
35096: LD_INT 2
35098: ARRAY
35099: EQUAL
35100: IFFALSE 35132
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35102: LD_ADDR_EXP 110
35106: PUSH
35107: LD_EXP 110
35111: PPUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: CALL_OW 3
35121: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35122: CALL 35287 0 0
// exit ;
35126: POP
35127: POP
35128: GO 35282
// end else
35130: GO 35228
// if factory = factoryWaypoints [ i ] [ 2 ] then
35132: LD_VAR 0 1
35136: PUSH
35137: LD_EXP 110
35141: PUSH
35142: LD_VAR 0 5
35146: ARRAY
35147: PUSH
35148: LD_INT 2
35150: ARRAY
35151: EQUAL
35152: IFFALSE 35228
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35154: LD_ADDR_EXP 110
35158: PUSH
35159: LD_EXP 110
35163: PPUSH
35164: LD_VAR 0 5
35168: PPUSH
35169: CALL_OW 3
35173: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35174: LD_ADDR_EXP 110
35178: PUSH
35179: LD_EXP 110
35183: PPUSH
35184: LD_VAR 0 1
35188: PPUSH
35189: CALL_OW 255
35193: PUSH
35194: LD_VAR 0 1
35198: PUSH
35199: LD_VAR 0 2
35203: PUSH
35204: LD_VAR 0 3
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: PPUSH
35215: CALL 80747 0 2
35219: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35220: CALL 35287 0 0
// exit ;
35224: POP
35225: POP
35226: GO 35282
// end ; end ;
35228: GO 35067
35230: POP
35231: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35232: LD_ADDR_EXP 110
35236: PUSH
35237: LD_EXP 110
35241: PPUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 255
35251: PUSH
35252: LD_VAR 0 1
35256: PUSH
35257: LD_VAR 0 2
35261: PUSH
35262: LD_VAR 0 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL 80747 0 2
35277: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35278: CALL 35287 0 0
// end ;
35282: LD_VAR 0 4
35286: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
35291: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35292: LD_STRING resetFactoryWaypoint();
35294: PPUSH
35295: CALL_OW 559
// if factoryWaypoints then
35299: LD_EXP 110
35303: IFFALSE 35424
// begin list := factoryWaypoints ;
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_EXP 110
35314: ST_TO_ADDR
// for i := 1 to list do
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: DOUBLE
35321: LD_INT 1
35323: DEC
35324: ST_TO_ADDR
35325: LD_VAR 0 3
35329: PUSH
35330: FOR_TO
35331: IFFALSE 35422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35333: LD_STRING setFactoryWaypointXY(
35335: PUSH
35336: LD_VAR 0 3
35340: PUSH
35341: LD_VAR 0 2
35345: ARRAY
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: STR
35351: PUSH
35352: LD_STRING ,
35354: STR
35355: PUSH
35356: LD_VAR 0 3
35360: PUSH
35361: LD_VAR 0 2
35365: ARRAY
35366: PUSH
35367: LD_INT 2
35369: ARRAY
35370: STR
35371: PUSH
35372: LD_STRING ,
35374: STR
35375: PUSH
35376: LD_VAR 0 3
35380: PUSH
35381: LD_VAR 0 2
35385: ARRAY
35386: PUSH
35387: LD_INT 3
35389: ARRAY
35390: STR
35391: PUSH
35392: LD_STRING ,
35394: STR
35395: PUSH
35396: LD_VAR 0 3
35400: PUSH
35401: LD_VAR 0 2
35405: ARRAY
35406: PUSH
35407: LD_INT 4
35409: ARRAY
35410: STR
35411: PUSH
35412: LD_STRING )
35414: STR
35415: PPUSH
35416: CALL_OW 559
35420: GO 35330
35422: POP
35423: POP
// end ; end ;
35424: LD_VAR 0 1
35428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35429: LD_INT 0
35431: PPUSH
// if HexInfo ( x , y ) = warehouse then
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 3
35441: PPUSH
35442: CALL_OW 428
35446: PUSH
35447: LD_VAR 0 1
35451: EQUAL
35452: IFFALSE 35479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35454: LD_ADDR_EXP 112
35458: PUSH
35459: LD_EXP 112
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_INT 0
35471: PPUSH
35472: CALL_OW 1
35476: ST_TO_ADDR
35477: GO 35530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35479: LD_ADDR_EXP 112
35483: PUSH
35484: LD_EXP 112
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 255
35503: PUSH
35504: LD_VAR 0 1
35508: PUSH
35509: LD_VAR 0 2
35513: PUSH
35514: LD_VAR 0 3
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35530: CALL 35539 0 0
// end ;
35534: LD_VAR 0 4
35538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35544: LD_STRING resetWarehouseGatheringPoints();
35546: PPUSH
35547: CALL_OW 559
// if warehouseGatheringPoints then
35551: LD_EXP 112
35555: IFFALSE 35681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_EXP 112
35566: PPUSH
35567: CALL 84681 0 1
35571: ST_TO_ADDR
// for i := 1 to list do
35572: LD_ADDR_VAR 0 2
35576: PUSH
35577: DOUBLE
35578: LD_INT 1
35580: DEC
35581: ST_TO_ADDR
35582: LD_VAR 0 3
35586: PUSH
35587: FOR_TO
35588: IFFALSE 35679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35590: LD_STRING setWarehouseGatheringPointXY(
35592: PUSH
35593: LD_VAR 0 3
35597: PUSH
35598: LD_VAR 0 2
35602: ARRAY
35603: PUSH
35604: LD_INT 1
35606: ARRAY
35607: STR
35608: PUSH
35609: LD_STRING ,
35611: STR
35612: PUSH
35613: LD_VAR 0 3
35617: PUSH
35618: LD_VAR 0 2
35622: ARRAY
35623: PUSH
35624: LD_INT 2
35626: ARRAY
35627: STR
35628: PUSH
35629: LD_STRING ,
35631: STR
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: ARRAY
35643: PUSH
35644: LD_INT 3
35646: ARRAY
35647: STR
35648: PUSH
35649: LD_STRING ,
35651: STR
35652: PUSH
35653: LD_VAR 0 3
35657: PUSH
35658: LD_VAR 0 2
35662: ARRAY
35663: PUSH
35664: LD_INT 4
35666: ARRAY
35667: STR
35668: PUSH
35669: LD_STRING )
35671: STR
35672: PPUSH
35673: CALL_OW 559
35677: GO 35587
35679: POP
35680: POP
// end ; end ;
35681: LD_VAR 0 1
35685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35686: LD_EXP 112
35690: IFFALSE 36385
35692: GO 35694
35694: DISABLE
35695: LD_INT 0
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
// begin enable ;
35706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_EXP 112
35716: PPUSH
35717: CALL 84681 0 1
35721: ST_TO_ADDR
// if not list then
35722: LD_VAR 0 3
35726: NOT
35727: IFFALSE 35731
// exit ;
35729: GO 36385
// for i := 1 to list do
35731: LD_ADDR_VAR 0 1
35735: PUSH
35736: DOUBLE
35737: LD_INT 1
35739: DEC
35740: ST_TO_ADDR
35741: LD_VAR 0 3
35745: PUSH
35746: FOR_TO
35747: IFFALSE 36383
// begin depot := list [ i ] [ 2 ] ;
35749: LD_ADDR_VAR 0 8
35753: PUSH
35754: LD_VAR 0 3
35758: PUSH
35759: LD_VAR 0 1
35763: ARRAY
35764: PUSH
35765: LD_INT 2
35767: ARRAY
35768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35769: LD_ADDR_VAR 0 5
35773: PUSH
35774: LD_VAR 0 3
35778: PUSH
35779: LD_VAR 0 1
35783: ARRAY
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35789: LD_VAR 0 8
35793: PPUSH
35794: CALL_OW 301
35798: IFTRUE 35817
35800: PUSH
35801: LD_VAR 0 5
35805: PUSH
35806: LD_VAR 0 8
35810: PPUSH
35811: CALL_OW 255
35815: NONEQUAL
35816: OR
35817: IFFALSE 35846
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35819: LD_ADDR_EXP 112
35823: PUSH
35824: LD_EXP 112
35828: PPUSH
35829: LD_VAR 0 8
35833: PPUSH
35834: LD_INT 0
35836: PPUSH
35837: CALL_OW 1
35841: ST_TO_ADDR
// exit ;
35842: POP
35843: POP
35844: GO 36385
// end ; x := list [ i ] [ 3 ] ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_VAR 0 3
35855: PUSH
35856: LD_VAR 0 1
35860: ARRAY
35861: PUSH
35862: LD_INT 3
35864: ARRAY
35865: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35866: LD_ADDR_VAR 0 7
35870: PUSH
35871: LD_VAR 0 3
35875: PUSH
35876: LD_VAR 0 1
35880: ARRAY
35881: PUSH
35882: LD_INT 4
35884: ARRAY
35885: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_VAR 0 6
35895: PPUSH
35896: LD_VAR 0 7
35900: PPUSH
35901: LD_INT 16
35903: PPUSH
35904: CALL 83255 0 3
35908: ST_TO_ADDR
// if not cratesNearbyPoint then
35909: LD_VAR 0 9
35913: NOT
35914: IFFALSE 35920
// exit ;
35916: POP
35917: POP
35918: GO 36385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35920: LD_ADDR_VAR 0 4
35924: PUSH
35925: LD_INT 22
35927: PUSH
35928: LD_VAR 0 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 3
35939: PUSH
35940: LD_INT 60
35942: PUSH
35943: EMPTY
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 91
35952: PUSH
35953: LD_VAR 0 8
35957: PUSH
35958: LD_INT 6
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 25
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 25
35981: PUSH
35982: LD_INT 16
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: PPUSH
36000: CALL_OW 69
36004: PUSH
36005: LD_VAR 0 8
36009: PPUSH
36010: CALL_OW 313
36014: PPUSH
36015: LD_INT 3
36017: PUSH
36018: LD_INT 60
36020: PUSH
36021: EMPTY
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 25
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 25
36043: PUSH
36044: LD_INT 16
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PPUSH
36060: CALL_OW 72
36064: UNION
36065: ST_TO_ADDR
// if tmp then
36066: LD_VAR 0 4
36070: IFFALSE 36150
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36072: LD_ADDR_VAR 0 4
36076: PUSH
36077: LD_VAR 0 4
36081: PPUSH
36082: LD_INT 3
36084: PPUSH
36085: CALL 81062 0 2
36089: ST_TO_ADDR
// for j in tmp do
36090: LD_ADDR_VAR 0 2
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: FOR_IN
36101: IFFALSE 36144
// begin if IsInUnit ( j ) then
36103: LD_VAR 0 2
36107: PPUSH
36108: CALL_OW 310
36112: IFFALSE 36123
// ComExit ( j ) ;
36114: LD_VAR 0 2
36118: PPUSH
36119: CALL 81145 0 1
// AddComCollect ( j , x , y ) ;
36123: LD_VAR 0 2
36127: PPUSH
36128: LD_VAR 0 6
36132: PPUSH
36133: LD_VAR 0 7
36137: PPUSH
36138: CALL_OW 177
// end ;
36142: GO 36100
36144: POP
36145: POP
// exit ;
36146: POP
36147: POP
36148: GO 36385
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36150: LD_ADDR_VAR 0 4
36154: PUSH
36155: LD_INT 22
36157: PUSH
36158: LD_VAR 0 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 91
36169: PUSH
36170: LD_VAR 0 8
36174: PUSH
36175: LD_INT 8
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 34
36188: PUSH
36189: LD_INT 12
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 34
36198: PUSH
36199: LD_INT 51
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 34
36208: PUSH
36209: LD_INT 32
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 34
36218: PUSH
36219: LD_INT 89
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PPUSH
36238: CALL_OW 69
36242: ST_TO_ADDR
// if tmp then
36243: LD_VAR 0 4
36247: IFFALSE 36381
// begin for j in tmp do
36249: LD_ADDR_VAR 0 2
36253: PUSH
36254: LD_VAR 0 4
36258: PUSH
36259: FOR_IN
36260: IFFALSE 36379
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL_OW 262
36271: PUSH
36272: LD_INT 3
36274: EQUAL
36275: IFTRUE 36292
36277: PUSH
36278: LD_VAR 0 2
36282: PPUSH
36283: CALL_OW 261
36287: PUSH
36288: LD_INT 20
36290: GREATER
36291: OR
36292: IFFALSE 36306
36294: PUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: CALL_OW 314
36304: NOT
36305: AND
36306: IFFALSE 36336
36308: PUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: CALL_OW 263
36318: PUSH
36319: LD_INT 1
36321: NONEQUAL
36322: IFTRUE 36335
36324: PUSH
36325: LD_VAR 0 2
36329: PPUSH
36330: CALL_OW 311
36334: OR
36335: AND
36336: IFFALSE 36377
// begin ComCollect ( j , x , y ) ;
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 6
36347: PPUSH
36348: LD_VAR 0 7
36352: PPUSH
36353: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 8
36366: PPUSH
36367: CALL_OW 172
// exit ;
36371: POP
36372: POP
36373: POP
36374: POP
36375: GO 36385
// end ;
36377: GO 36259
36379: POP
36380: POP
// end ; end ;
36381: GO 35746
36383: POP
36384: POP
// end ; end_of_file
36385: PPOPN 9
36387: END
// export function SOS_UnitDestroyed ( un ) ; begin
36388: LD_INT 0
36390: PPUSH
// ComRadiation ( un ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL 37477 0 1
// end ;
36400: LD_VAR 0 2
36404: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36405: LD_INT 0
36407: PPUSH
// ComRadiation ( un ) ;
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL 37477 0 1
// end ;
36417: LD_VAR 0 2
36421: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36422: LD_INT 0
36424: PPUSH
// end ;
36425: LD_VAR 0 4
36429: RET
// export function SOS_Command ( cmd ) ; begin
36430: LD_INT 0
36432: PPUSH
// end ;
36433: LD_VAR 0 2
36437: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36438: LD_INT 0
36440: PPUSH
// end ;
36441: LD_VAR 0 6
36445: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36446: LD_INT 0
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
// if not vehicle or not factory then
36452: LD_VAR 0 1
36456: NOT
36457: IFTRUE 36466
36459: PUSH
36460: LD_VAR 0 2
36464: NOT
36465: OR
36466: IFFALSE 36470
// exit ;
36468: GO 37052
// if not factoryWaypoints then
36470: LD_EXP 110
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 37052
// for i := 1 to Count ( factoryWaypoints ) do
36479: LD_ADDR_VAR 0 4
36483: PUSH
36484: DOUBLE
36485: LD_INT 1
36487: DEC
36488: ST_TO_ADDR
36489: LD_EXP 110
36493: PPUSH
36494: CALL 44815 0 1
36498: PUSH
36499: FOR_TO
36500: IFFALSE 37050
// if factoryWaypoints [ i ] [ 2 ] = factory then
36502: LD_EXP 110
36506: PUSH
36507: LD_VAR 0 4
36511: ARRAY
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: PUSH
36517: LD_VAR 0 2
36521: EQUAL
36522: IFFALSE 37048
// begin if GetControl ( vehicle ) = control_manual then
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 263
36533: PUSH
36534: LD_INT 1
36536: EQUAL
36537: IFFALSE 36901
// begin driver := IsDrivenBy ( vehicle ) ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: LD_VAR 0 1
36548: PPUSH
36549: CALL_OW 311
36553: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36554: LD_VAR 0 5
36558: PUSH
36559: LD_EXP 111
36563: IN
36564: IFTRUE 36578
36566: PUSH
36567: LD_VAR 0 1
36571: PUSH
36572: LD_EXP 111
36576: IN
36577: OR
36578: IFFALSE 36584
// exit ;
36580: POP
36581: POP
36582: GO 37052
// if not HasTask ( driver ) then
36584: LD_VAR 0 5
36588: PPUSH
36589: CALL_OW 314
36593: NOT
36594: IFFALSE 36899
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36596: LD_ADDR_EXP 111
36600: PUSH
36601: LD_EXP 111
36605: PPUSH
36606: LD_VAR 0 5
36610: PPUSH
36611: CALL 80747 0 2
36615: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36616: LD_ADDR_EXP 111
36620: PUSH
36621: LD_EXP 111
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL 80747 0 2
36635: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36636: LD_ADDR_VAR 0 6
36640: PUSH
36641: LD_EXP 110
36645: PUSH
36646: LD_VAR 0 4
36650: ARRAY
36651: PUSH
36652: LD_INT 3
36654: ARRAY
36655: PPUSH
36656: LD_EXP 110
36660: PUSH
36661: LD_VAR 0 4
36665: ARRAY
36666: PUSH
36667: LD_INT 4
36669: ARRAY
36670: PPUSH
36671: CALL_OW 428
36675: ST_TO_ADDR
// if hex then
36676: LD_VAR 0 6
36680: IFFALSE 36698
// ComMoveUnit ( driver , hex ) else
36682: LD_VAR 0 5
36686: PPUSH
36687: LD_VAR 0 6
36691: PPUSH
36692: CALL_OW 112
36696: GO 36782
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36698: LD_VAR 0 1
36702: PPUSH
36703: LD_EXP 110
36707: PUSH
36708: LD_VAR 0 4
36712: ARRAY
36713: PUSH
36714: LD_INT 3
36716: ARRAY
36717: PPUSH
36718: LD_EXP 110
36722: PUSH
36723: LD_VAR 0 4
36727: ARRAY
36728: PUSH
36729: LD_INT 4
36731: ARRAY
36732: PPUSH
36733: CALL_OW 297
36737: PUSH
36738: LD_INT 0
36740: GREATER
36741: IFFALSE 36782
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36743: LD_VAR 0 5
36747: PPUSH
36748: LD_EXP 110
36752: PUSH
36753: LD_VAR 0 4
36757: ARRAY
36758: PUSH
36759: LD_INT 3
36761: ARRAY
36762: PPUSH
36763: LD_EXP 110
36767: PUSH
36768: LD_VAR 0 4
36772: ARRAY
36773: PUSH
36774: LD_INT 4
36776: ARRAY
36777: PPUSH
36778: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36782: LD_VAR 0 5
36786: PPUSH
36787: CALL_OW 181
// if Multiplayer then
36791: LD_OWVAR 4
36795: IFFALSE 36844
// begin repeat wait ( 10 ) ;
36797: LD_INT 10
36799: PPUSH
36800: CALL_OW 67
// until not IsInUnit ( driver ) ;
36804: LD_VAR 0 5
36808: PPUSH
36809: CALL_OW 310
36813: NOT
36814: IFFALSE 36797
// if not HasTask ( driver ) then
36816: LD_VAR 0 5
36820: PPUSH
36821: CALL_OW 314
36825: NOT
36826: IFFALSE 36842
// ComEnterUnit ( driver , factory ) ;
36828: LD_VAR 0 5
36832: PPUSH
36833: LD_VAR 0 2
36837: PPUSH
36838: CALL_OW 120
// end else
36842: GO 36858
// AddComEnterUnit ( driver , factory ) ;
36844: LD_VAR 0 5
36848: PPUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: CALL_OW 180
// wait ( 0 0$1 ) ;
36858: LD_INT 35
36860: PPUSH
36861: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36865: LD_ADDR_EXP 111
36869: PUSH
36870: LD_EXP 111
36874: PUSH
36875: LD_VAR 0 5
36879: DIFF
36880: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36881: LD_ADDR_EXP 111
36885: PUSH
36886: LD_EXP 111
36890: PUSH
36891: LD_VAR 0 1
36895: DIFF
36896: ST_TO_ADDR
// break ;
36897: GO 37050
// end ; end else
36899: GO 37048
// if GetControl ( vehicle ) = control_remote then
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 263
36910: PUSH
36911: LD_INT 2
36913: EQUAL
36914: IFFALSE 37000
// begin wait ( 0 0$2 ) ;
36916: LD_INT 70
36918: PPUSH
36919: CALL_OW 67
// repeat wait ( 10 ) ;
36923: LD_INT 10
36925: PPUSH
36926: CALL_OW 67
// Connect ( vehicle ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL 51059 0 1
// until IsControledBy ( vehicle ) ;
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 312
36948: IFFALSE 36923
// wait ( 10 ) ;
36950: LD_INT 10
36952: PPUSH
36953: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36957: LD_VAR 0 1
36961: PPUSH
36962: LD_EXP 110
36966: PUSH
36967: LD_VAR 0 4
36971: ARRAY
36972: PUSH
36973: LD_INT 3
36975: ARRAY
36976: PPUSH
36977: LD_EXP 110
36981: PUSH
36982: LD_VAR 0 4
36986: ARRAY
36987: PUSH
36988: LD_INT 4
36990: ARRAY
36991: PPUSH
36992: CALL_OW 111
// break ;
36996: GO 37050
// end else
36998: GO 37048
// begin wait ( 0 0$3 ) ;
37000: LD_INT 105
37002: PPUSH
37003: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37007: LD_VAR 0 1
37011: PPUSH
37012: LD_EXP 110
37016: PUSH
37017: LD_VAR 0 4
37021: ARRAY
37022: PUSH
37023: LD_INT 3
37025: ARRAY
37026: PPUSH
37027: LD_EXP 110
37031: PUSH
37032: LD_VAR 0 4
37036: ARRAY
37037: PUSH
37038: LD_INT 4
37040: ARRAY
37041: PPUSH
37042: CALL_OW 111
// break ;
37046: GO 37050
// end ; end ;
37048: GO 36499
37050: POP
37051: POP
// end ;
37052: LD_VAR 0 3
37056: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37057: LD_INT 0
37059: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37060: LD_VAR 0 1
37064: PUSH
37065: LD_INT 250
37067: EQUAL
37068: IFFALSE 37085
37070: PUSH
37071: LD_VAR 0 2
37075: PPUSH
37076: CALL_OW 264
37080: PUSH
37081: LD_INT 81
37083: EQUAL
37084: AND
37085: IFFALSE 37106
// MinerPlaceMine ( unit , x , y ) ;
37087: LD_VAR 0 2
37091: PPUSH
37092: LD_VAR 0 4
37096: PPUSH
37097: LD_VAR 0 5
37101: PPUSH
37102: CALL 40238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37106: LD_VAR 0 1
37110: PUSH
37111: LD_INT 251
37113: EQUAL
37114: IFFALSE 37131
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL_OW 264
37126: PUSH
37127: LD_INT 81
37129: EQUAL
37130: AND
37131: IFFALSE 37152
// MinerDetonateMine ( unit , x , y ) ;
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_VAR 0 4
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL 40517 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37152: LD_VAR 0 1
37156: PUSH
37157: LD_INT 252
37159: EQUAL
37160: IFFALSE 37177
37162: PUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: CALL_OW 264
37172: PUSH
37173: LD_INT 81
37175: EQUAL
37176: AND
37177: IFFALSE 37198
// MinerCreateMinefield ( unit , x , y ) ;
37179: LD_VAR 0 2
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: CALL 40936 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37198: LD_VAR 0 1
37202: PUSH
37203: LD_INT 253
37205: EQUAL
37206: IFFALSE 37223
37208: PUSH
37209: LD_VAR 0 2
37213: PPUSH
37214: CALL_OW 257
37218: PUSH
37219: LD_INT 5
37221: EQUAL
37222: AND
37223: IFFALSE 37244
// ComBinocular ( unit , x , y ) ;
37225: LD_VAR 0 2
37229: PPUSH
37230: LD_VAR 0 4
37234: PPUSH
37235: LD_VAR 0 5
37239: PPUSH
37240: CALL 41311 0 3
// if selectedUnit then
37244: LD_VAR 0 3
37248: IFFALSE 37308
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 254
37257: EQUAL
37258: IFFALSE 37275
37260: PUSH
37261: LD_VAR 0 2
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 99
37273: EQUAL
37274: AND
37275: IFFALSE 37292
37277: PUSH
37278: LD_VAR 0 3
37282: PPUSH
37283: CALL_OW 263
37287: PUSH
37288: LD_INT 3
37290: EQUAL
37291: AND
37292: IFFALSE 37308
// HackDestroyVehicle ( unit , selectedUnit ) ;
37294: LD_VAR 0 2
37298: PPUSH
37299: LD_VAR 0 3
37303: PPUSH
37304: CALL 39598 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37308: LD_VAR 0 1
37312: PUSH
37313: LD_INT 255
37315: EQUAL
37316: IFFALSE 37340
37318: PUSH
37319: LD_VAR 0 2
37323: PPUSH
37324: CALL_OW 264
37328: PUSH
37329: LD_INT 14
37331: PUSH
37332: LD_INT 53
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: IN
37339: AND
37340: IFFALSE 37358
37342: PUSH
37343: LD_VAR 0 4
37347: PPUSH
37348: LD_VAR 0 5
37352: PPUSH
37353: CALL_OW 488
37357: AND
37358: IFFALSE 37382
// CutTreeXYR ( unit , x , y , 12 ) ;
37360: LD_VAR 0 2
37364: PPUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: LD_VAR 0 5
37374: PPUSH
37375: LD_INT 12
37377: PPUSH
37378: CALL 37573 0 4
// if cmd = 256 then
37382: LD_VAR 0 1
37386: PUSH
37387: LD_INT 256
37389: EQUAL
37390: IFFALSE 37411
// SetFactoryWaypoint ( unit , x , y ) ;
37392: LD_VAR 0 2
37396: PPUSH
37397: LD_VAR 0 4
37401: PPUSH
37402: LD_VAR 0 5
37406: PPUSH
37407: CALL 34933 0 3
// if cmd = 257 then
37411: LD_VAR 0 1
37415: PUSH
37416: LD_INT 257
37418: EQUAL
37419: IFFALSE 37440
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_VAR 0 4
37430: PPUSH
37431: LD_VAR 0 5
37435: PPUSH
37436: CALL 35429 0 3
// if cmd = 258 then
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 258
37447: EQUAL
37448: IFFALSE 37472
// BurnTreeXYR ( unit , x , y , 8 ) ;
37450: LD_VAR 0 2
37454: PPUSH
37455: LD_VAR 0 4
37459: PPUSH
37460: LD_VAR 0 5
37464: PPUSH
37465: LD_INT 8
37467: PPUSH
37468: CALL 37973 0 4
// end ;
37472: LD_VAR 0 6
37476: RET
// export function ComRadiation ( un ) ; var eff ; begin
37477: LD_INT 0
37479: PPUSH
37480: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37481: LD_VAR 0 1
37485: PPUSH
37486: CALL_OW 264
37490: PUSH
37491: LD_INT 91
37493: NONEQUAL
37494: IFFALSE 37498
// exit ;
37496: GO 37568
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37498: LD_INT 68
37500: PPUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: CALL_OW 255
37510: PPUSH
37511: CALL_OW 321
37515: PUSH
37516: LD_INT 2
37518: EQUAL
37519: IFFALSE 37531
// eff := 50 else
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 50
37528: ST_TO_ADDR
37529: GO 37539
// eff := 25 ;
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 25
37538: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 250
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 251
37558: PPUSH
37559: LD_VAR 0 3
37563: PPUSH
37564: CALL_OW 495
// end ;
37568: LD_VAR 0 2
37572: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37573: LD_INT 0
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 302
37593: NOT
37594: IFTRUE 37613
37596: PUSH
37597: LD_VAR 0 2
37601: PPUSH
37602: LD_VAR 0 3
37606: PPUSH
37607: CALL_OW 488
37611: NOT
37612: OR
37613: IFTRUE 37622
37615: PUSH
37616: LD_VAR 0 4
37620: NOT
37621: OR
37622: IFFALSE 37626
// exit ;
37624: GO 37968
// list := [ ] ;
37626: LD_ADDR_VAR 0 13
37630: PUSH
37631: EMPTY
37632: ST_TO_ADDR
// if x - r < 0 then
37633: LD_VAR 0 2
37637: PUSH
37638: LD_VAR 0 4
37642: MINUS
37643: PUSH
37644: LD_INT 0
37646: LESS
37647: IFFALSE 37659
// min_x := 0 else
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_INT 0
37656: ST_TO_ADDR
37657: GO 37675
// min_x := x - r ;
37659: LD_ADDR_VAR 0 7
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_VAR 0 4
37673: MINUS
37674: ST_TO_ADDR
// if y - r < 0 then
37675: LD_VAR 0 3
37679: PUSH
37680: LD_VAR 0 4
37684: MINUS
37685: PUSH
37686: LD_INT 0
37688: LESS
37689: IFFALSE 37701
// min_y := 0 else
37691: LD_ADDR_VAR 0 8
37695: PUSH
37696: LD_INT 0
37698: ST_TO_ADDR
37699: GO 37717
// min_y := y - r ;
37701: LD_ADDR_VAR 0 8
37705: PUSH
37706: LD_VAR 0 3
37710: PUSH
37711: LD_VAR 0 4
37715: MINUS
37716: ST_TO_ADDR
// max_x := x + r ;
37717: LD_ADDR_VAR 0 9
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_VAR 0 4
37731: PLUS
37732: ST_TO_ADDR
// max_y := y + r ;
37733: LD_ADDR_VAR 0 10
37737: PUSH
37738: LD_VAR 0 3
37742: PUSH
37743: LD_VAR 0 4
37747: PLUS
37748: ST_TO_ADDR
// for _x = min_x to max_x do
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: DOUBLE
37755: LD_VAR 0 7
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 9
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37886
// for _y = min_y to max_y do
37769: LD_ADDR_VAR 0 12
37773: PUSH
37774: DOUBLE
37775: LD_VAR 0 8
37779: DEC
37780: ST_TO_ADDR
37781: LD_VAR 0 10
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37882
// begin if not ValidHex ( _x , _y ) then
37789: LD_VAR 0 11
37793: PPUSH
37794: LD_VAR 0 12
37798: PPUSH
37799: CALL_OW 488
37803: NOT
37804: IFFALSE 37808
// continue ;
37806: GO 37786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37808: LD_VAR 0 11
37812: PPUSH
37813: LD_VAR 0 12
37817: PPUSH
37818: CALL_OW 351
37822: IFFALSE 37840
37824: PUSH
37825: LD_VAR 0 11
37829: PPUSH
37830: LD_VAR 0 12
37834: PPUSH
37835: CALL_OW 554
37839: AND
37840: IFFALSE 37880
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37842: LD_ADDR_VAR 0 13
37846: PUSH
37847: LD_VAR 0 13
37851: PPUSH
37852: LD_VAR 0 13
37856: PUSH
37857: LD_INT 1
37859: PLUS
37860: PPUSH
37861: LD_VAR 0 11
37865: PUSH
37866: LD_VAR 0 12
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 2
37879: ST_TO_ADDR
// end ;
37880: GO 37786
37882: POP
37883: POP
37884: GO 37766
37886: POP
37887: POP
// if not list then
37888: LD_VAR 0 13
37892: NOT
37893: IFFALSE 37897
// exit ;
37895: GO 37968
// for i in list do
37897: LD_ADDR_VAR 0 6
37901: PUSH
37902: LD_VAR 0 13
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37966
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37910: LD_VAR 0 1
37914: PPUSH
37915: LD_STRING M
37917: PUSH
37918: LD_VAR 0 6
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PUSH
37927: LD_VAR 0 6
37931: PUSH
37932: LD_INT 2
37934: ARRAY
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: PPUSH
37960: CALL_OW 447
37964: GO 37907
37966: POP
37967: POP
// end ;
37968: LD_VAR 0 5
37972: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37973: LD_INT 0
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 302
37994: NOT
37995: IFTRUE 38014
37997: PUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: CALL_OW 488
38012: NOT
38013: OR
38014: IFTRUE 38023
38016: PUSH
38017: LD_VAR 0 4
38021: NOT
38022: OR
38023: IFFALSE 38027
// exit ;
38025: GO 38544
// list := [ ] ;
38027: LD_ADDR_VAR 0 13
38031: PUSH
38032: EMPTY
38033: ST_TO_ADDR
// if x - r < 0 then
38034: LD_VAR 0 2
38038: PUSH
38039: LD_VAR 0 4
38043: MINUS
38044: PUSH
38045: LD_INT 0
38047: LESS
38048: IFFALSE 38060
// min_x := 0 else
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
38058: GO 38076
// min_x := x - r ;
38060: LD_ADDR_VAR 0 7
38064: PUSH
38065: LD_VAR 0 2
38069: PUSH
38070: LD_VAR 0 4
38074: MINUS
38075: ST_TO_ADDR
// if y - r < 0 then
38076: LD_VAR 0 3
38080: PUSH
38081: LD_VAR 0 4
38085: MINUS
38086: PUSH
38087: LD_INT 0
38089: LESS
38090: IFFALSE 38102
// min_y := 0 else
38092: LD_ADDR_VAR 0 8
38096: PUSH
38097: LD_INT 0
38099: ST_TO_ADDR
38100: GO 38118
// min_y := y - r ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_VAR 0 3
38111: PUSH
38112: LD_VAR 0 4
38116: MINUS
38117: ST_TO_ADDR
// max_x := x + r ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 4
38132: PLUS
38133: ST_TO_ADDR
// max_y := y + r ;
38134: LD_ADDR_VAR 0 10
38138: PUSH
38139: LD_VAR 0 3
38143: PUSH
38144: LD_VAR 0 4
38148: PLUS
38149: ST_TO_ADDR
// for _x = min_x to max_x do
38150: LD_ADDR_VAR 0 11
38154: PUSH
38155: DOUBLE
38156: LD_VAR 0 7
38160: DEC
38161: ST_TO_ADDR
38162: LD_VAR 0 9
38166: PUSH
38167: FOR_TO
38168: IFFALSE 38287
// for _y = min_y to max_y do
38170: LD_ADDR_VAR 0 12
38174: PUSH
38175: DOUBLE
38176: LD_VAR 0 8
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 10
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38283
// begin if not ValidHex ( _x , _y ) then
38190: LD_VAR 0 11
38194: PPUSH
38195: LD_VAR 0 12
38199: PPUSH
38200: CALL_OW 488
38204: NOT
38205: IFFALSE 38209
// continue ;
38207: GO 38187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38209: LD_VAR 0 11
38213: PPUSH
38214: LD_VAR 0 12
38218: PPUSH
38219: CALL_OW 351
38223: IFFALSE 38241
38225: PUSH
38226: LD_VAR 0 11
38230: PPUSH
38231: LD_VAR 0 12
38235: PPUSH
38236: CALL_OW 554
38240: AND
38241: IFFALSE 38281
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38243: LD_ADDR_VAR 0 13
38247: PUSH
38248: LD_VAR 0 13
38252: PPUSH
38253: LD_VAR 0 13
38257: PUSH
38258: LD_INT 1
38260: PLUS
38261: PPUSH
38262: LD_VAR 0 11
38266: PUSH
38267: LD_VAR 0 12
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PPUSH
38276: CALL_OW 2
38280: ST_TO_ADDR
// end ;
38281: GO 38187
38283: POP
38284: POP
38285: GO 38167
38287: POP
38288: POP
// if not list then
38289: LD_VAR 0 13
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 38544
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38298: LD_ADDR_VAR 0 13
38302: PUSH
38303: LD_VAR 0 1
38307: PPUSH
38308: LD_VAR 0 13
38312: PPUSH
38313: LD_INT 1
38315: PPUSH
38316: LD_INT 1
38318: PPUSH
38319: CALL 48187 0 4
38323: ST_TO_ADDR
// ComStop ( flame ) ;
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 141
// for i in list do
38333: LD_ADDR_VAR 0 6
38337: PUSH
38338: LD_VAR 0 13
38342: PUSH
38343: FOR_IN
38344: IFFALSE 38375
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_VAR 0 6
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 6
38364: PUSH
38365: LD_INT 2
38367: ARRAY
38368: PPUSH
38369: CALL_OW 176
38373: GO 38343
38375: POP
38376: POP
// repeat wait ( 0 0$1 ) ;
38377: LD_INT 35
38379: PPUSH
38380: CALL_OW 67
// task := GetTaskList ( flame ) ;
38384: LD_ADDR_VAR 0 14
38388: PUSH
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 437
38398: ST_TO_ADDR
// if not task then
38399: LD_VAR 0 14
38403: NOT
38404: IFFALSE 38408
// exit ;
38406: GO 38544
// if task [ 1 ] [ 1 ] <> | then
38408: LD_VAR 0 14
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PUSH
38421: LD_STRING |
38423: NONEQUAL
38424: IFFALSE 38428
// exit ;
38426: GO 38544
// _x := task [ 1 ] [ 2 ] ;
38428: LD_ADDR_VAR 0 11
38432: PUSH
38433: LD_VAR 0 14
38437: PUSH
38438: LD_INT 1
38440: ARRAY
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38446: LD_ADDR_VAR 0 12
38450: PUSH
38451: LD_VAR 0 14
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: PUSH
38460: LD_INT 3
38462: ARRAY
38463: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38464: LD_VAR 0 11
38468: PPUSH
38469: LD_VAR 0 12
38473: PPUSH
38474: CALL_OW 351
38478: NOT
38479: IFTRUE 38498
38481: PUSH
38482: LD_VAR 0 11
38486: PPUSH
38487: LD_VAR 0 12
38491: PPUSH
38492: CALL_OW 554
38496: NOT
38497: OR
38498: IFFALSE 38532
// begin task := Delete ( task , 1 ) ;
38500: LD_ADDR_VAR 0 14
38504: PUSH
38505: LD_VAR 0 14
38509: PPUSH
38510: LD_INT 1
38512: PPUSH
38513: CALL_OW 3
38517: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 14
38527: PPUSH
38528: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 314
38541: NOT
38542: IFFALSE 38377
// end ;
38544: LD_VAR 0 5
38548: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38549: LD_EXP 114
38553: NOT
38554: IFFALSE 38604
38556: GO 38558
38558: DISABLE
// begin initHack := true ;
38559: LD_ADDR_EXP 114
38563: PUSH
38564: LD_INT 1
38566: ST_TO_ADDR
// hackTanks := [ ] ;
38567: LD_ADDR_EXP 115
38571: PUSH
38572: EMPTY
38573: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38574: LD_ADDR_EXP 116
38578: PUSH
38579: EMPTY
38580: ST_TO_ADDR
// hackLimit := 3 ;
38581: LD_ADDR_EXP 117
38585: PUSH
38586: LD_INT 3
38588: ST_TO_ADDR
// hackDist := 12 ;
38589: LD_ADDR_EXP 118
38593: PUSH
38594: LD_INT 12
38596: ST_TO_ADDR
// hackCounter := [ ] ;
38597: LD_ADDR_EXP 119
38601: PUSH
38602: EMPTY
38603: ST_TO_ADDR
// end ;
38604: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38605: LD_EXP 114
38609: IFFALSE 38627
38611: PUSH
38612: LD_INT 34
38614: PUSH
38615: LD_INT 99
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PPUSH
38622: CALL_OW 69
38626: AND
38627: IFFALSE 38880
38629: GO 38631
38631: DISABLE
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
// begin enable ;
38636: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38637: LD_ADDR_VAR 0 1
38641: PUSH
38642: LD_INT 34
38644: PUSH
38645: LD_INT 99
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PPUSH
38652: CALL_OW 69
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38878
// begin if not i in hackTanks then
38660: LD_VAR 0 1
38664: PUSH
38665: LD_EXP 115
38669: IN
38670: NOT
38671: IFFALSE 38754
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38673: LD_ADDR_EXP 115
38677: PUSH
38678: LD_EXP 115
38682: PPUSH
38683: LD_EXP 115
38687: PUSH
38688: LD_INT 1
38690: PLUS
38691: PPUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 1
38701: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38702: LD_ADDR_EXP 116
38706: PUSH
38707: LD_EXP 116
38711: PPUSH
38712: LD_EXP 116
38716: PUSH
38717: LD_INT 1
38719: PLUS
38720: PPUSH
38721: EMPTY
38722: PPUSH
38723: CALL_OW 1
38727: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38728: LD_ADDR_EXP 119
38732: PUSH
38733: LD_EXP 119
38737: PPUSH
38738: LD_EXP 119
38742: PUSH
38743: LD_INT 1
38745: PLUS
38746: PPUSH
38747: EMPTY
38748: PPUSH
38749: CALL_OW 1
38753: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL_OW 302
38763: NOT
38764: IFFALSE 38777
// begin HackUnlinkAll ( i ) ;
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL 38883 0 1
// continue ;
38775: GO 38657
// end ; HackCheckCapturedStatus ( i ) ;
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL 39328 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38786: LD_ADDR_VAR 0 2
38790: PUSH
38791: LD_INT 81
38793: PUSH
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 255
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 33
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 91
38820: PUSH
38821: LD_VAR 0 1
38825: PUSH
38826: LD_EXP 118
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 50
38838: PUSH
38839: EMPTY
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: PPUSH
38848: CALL_OW 69
38852: ST_TO_ADDR
// if not tmp then
38853: LD_VAR 0 2
38857: NOT
38858: IFFALSE 38862
// continue ;
38860: GO 38657
// HackLink ( i , tmp ) ;
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: CALL 39019 0 2
// end ;
38876: GO 38657
38878: POP
38879: POP
// end ;
38880: PPOPN 2
38882: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38883: LD_INT 0
38885: PPUSH
38886: PPUSH
38887: PPUSH
// if not hack in hackTanks then
38888: LD_VAR 0 1
38892: PUSH
38893: LD_EXP 115
38897: IN
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 39014
// index := GetElementIndex ( hackTanks , hack ) ;
38903: LD_ADDR_VAR 0 4
38907: PUSH
38908: LD_EXP 115
38912: PPUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL 47482 0 2
38922: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38923: LD_EXP 116
38927: PUSH
38928: LD_VAR 0 4
38932: ARRAY
38933: IFFALSE 39014
// begin for i in hackTanksCaptured [ index ] do
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_EXP 116
38944: PUSH
38945: LD_VAR 0 4
38949: ARRAY
38950: PUSH
38951: FOR_IN
38952: IFFALSE 38978
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38954: LD_VAR 0 3
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: PPUSH
38963: LD_VAR 0 3
38967: PUSH
38968: LD_INT 2
38970: ARRAY
38971: PPUSH
38972: CALL_OW 235
38976: GO 38951
38978: POP
38979: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38980: LD_ADDR_EXP 116
38984: PUSH
38985: LD_EXP 116
38989: PPUSH
38990: LD_VAR 0 4
38994: PPUSH
38995: EMPTY
38996: PPUSH
38997: CALL_OW 1
39001: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39002: LD_VAR 0 1
39006: PPUSH
39007: LD_INT 0
39009: PPUSH
39010: CALL_OW 505
// end ; end ;
39014: LD_VAR 0 2
39018: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39019: LD_INT 0
39021: PPUSH
39022: PPUSH
39023: PPUSH
// if not hack in hackTanks or not vehicles then
39024: LD_VAR 0 1
39028: PUSH
39029: LD_EXP 115
39033: IN
39034: NOT
39035: IFTRUE 39044
39037: PUSH
39038: LD_VAR 0 2
39042: NOT
39043: OR
39044: IFFALSE 39048
// exit ;
39046: GO 39323
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39048: LD_ADDR_VAR 0 2
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: LD_VAR 0 2
39062: PPUSH
39063: LD_INT 1
39065: PPUSH
39066: LD_INT 1
39068: PPUSH
39069: CALL 48134 0 4
39073: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_EXP 115
39083: PPUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL 47482 0 2
39093: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39094: LD_EXP 116
39098: PUSH
39099: LD_VAR 0 5
39103: ARRAY
39104: PUSH
39105: LD_EXP 117
39109: LESS
39110: IFFALSE 39299
// begin for i := 1 to vehicles do
39112: LD_ADDR_VAR 0 4
39116: PUSH
39117: DOUBLE
39118: LD_INT 1
39120: DEC
39121: ST_TO_ADDR
39122: LD_VAR 0 2
39126: PUSH
39127: FOR_TO
39128: IFFALSE 39297
// begin if hackTanksCaptured [ index ] = hackLimit then
39130: LD_EXP 116
39134: PUSH
39135: LD_VAR 0 5
39139: ARRAY
39140: PUSH
39141: LD_EXP 117
39145: EQUAL
39146: IFFALSE 39150
// break ;
39148: GO 39297
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39150: LD_ADDR_EXP 119
39154: PUSH
39155: LD_EXP 119
39159: PPUSH
39160: LD_VAR 0 5
39164: PPUSH
39165: LD_EXP 119
39169: PUSH
39170: LD_VAR 0 5
39174: ARRAY
39175: PUSH
39176: LD_INT 1
39178: PLUS
39179: PPUSH
39180: CALL_OW 1
39184: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39185: LD_ADDR_EXP 116
39189: PUSH
39190: LD_EXP 116
39194: PPUSH
39195: LD_VAR 0 5
39199: PUSH
39200: LD_EXP 116
39204: PUSH
39205: LD_VAR 0 5
39209: ARRAY
39210: PUSH
39211: LD_INT 1
39213: PLUS
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PPUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_VAR 0 4
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 2
39234: PUSH
39235: LD_VAR 0 4
39239: ARRAY
39240: PPUSH
39241: CALL_OW 255
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL 47699 0 3
39254: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39255: LD_VAR 0 2
39259: PUSH
39260: LD_VAR 0 4
39264: ARRAY
39265: PPUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 255
39275: PPUSH
39276: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39280: LD_VAR 0 2
39284: PUSH
39285: LD_VAR 0 4
39289: ARRAY
39290: PPUSH
39291: CALL_OW 141
// end ;
39295: GO 39127
39297: POP
39298: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39299: LD_VAR 0 1
39303: PPUSH
39304: LD_EXP 116
39308: PUSH
39309: LD_VAR 0 5
39313: ARRAY
39314: PUSH
39315: LD_INT 0
39317: PLUS
39318: PPUSH
39319: CALL_OW 505
// end ;
39323: LD_VAR 0 3
39327: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
// if not hack in hackTanks then
39334: LD_VAR 0 1
39338: PUSH
39339: LD_EXP 115
39343: IN
39344: NOT
39345: IFFALSE 39349
// exit ;
39347: GO 39593
// index := GetElementIndex ( hackTanks , hack ) ;
39349: LD_ADDR_VAR 0 4
39353: PUSH
39354: LD_EXP 115
39358: PPUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL 47482 0 2
39368: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: DOUBLE
39375: LD_EXP 116
39379: PUSH
39380: LD_VAR 0 4
39384: ARRAY
39385: INC
39386: ST_TO_ADDR
39387: LD_INT 1
39389: PUSH
39390: FOR_DOWNTO
39391: IFFALSE 39567
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39393: LD_ADDR_VAR 0 5
39397: PUSH
39398: LD_EXP 116
39402: PUSH
39403: LD_VAR 0 4
39407: ARRAY
39408: PUSH
39409: LD_VAR 0 3
39413: ARRAY
39414: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39415: LD_VAR 0 5
39419: PUSH
39420: LD_INT 1
39422: ARRAY
39423: PPUSH
39424: CALL_OW 302
39428: NOT
39429: IFTRUE 39457
39431: PUSH
39432: LD_VAR 0 5
39436: PUSH
39437: LD_INT 1
39439: ARRAY
39440: PPUSH
39441: CALL_OW 255
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 255
39455: NONEQUAL
39456: OR
39457: IFFALSE 39565
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39459: LD_VAR 0 5
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: CALL_OW 305
39472: IFFALSE 39500
39474: PUSH
39475: LD_VAR 0 5
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PPUSH
39484: CALL_OW 255
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 255
39498: EQUAL
39499: AND
39500: IFFALSE 39524
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39502: LD_VAR 0 5
39506: PUSH
39507: LD_INT 1
39509: ARRAY
39510: PPUSH
39511: LD_VAR 0 5
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: PPUSH
39520: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39524: LD_ADDR_EXP 116
39528: PUSH
39529: LD_EXP 116
39533: PPUSH
39534: LD_VAR 0 4
39538: PPUSH
39539: LD_EXP 116
39543: PUSH
39544: LD_VAR 0 4
39548: ARRAY
39549: PPUSH
39550: LD_VAR 0 3
39554: PPUSH
39555: CALL_OW 3
39559: PPUSH
39560: CALL_OW 1
39564: ST_TO_ADDR
// end ; end ;
39565: GO 39390
39567: POP
39568: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_EXP 116
39578: PUSH
39579: LD_VAR 0 4
39583: ARRAY
39584: PUSH
39585: LD_INT 0
39587: PLUS
39588: PPUSH
39589: CALL_OW 505
// end ;
39593: LD_VAR 0 2
39597: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39598: LD_INT 0
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
// if not hack in hackTanks then
39604: LD_VAR 0 1
39608: PUSH
39609: LD_EXP 115
39613: IN
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 39704
// index := GetElementIndex ( hackTanks , hack ) ;
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: LD_EXP 115
39628: PPUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL 47482 0 2
39638: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39639: LD_ADDR_VAR 0 4
39643: PUSH
39644: DOUBLE
39645: LD_INT 1
39647: DEC
39648: ST_TO_ADDR
39649: LD_EXP 116
39653: PUSH
39654: LD_VAR 0 5
39658: ARRAY
39659: PUSH
39660: FOR_TO
39661: IFFALSE 39702
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39663: LD_EXP 116
39667: PUSH
39668: LD_VAR 0 5
39672: ARRAY
39673: PUSH
39674: LD_VAR 0 4
39678: ARRAY
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: PUSH
39684: LD_VAR 0 2
39688: EQUAL
39689: IFFALSE 39700
// KillUnit ( vehicle ) ;
39691: LD_VAR 0 2
39695: PPUSH
39696: CALL_OW 66
39700: GO 39660
39702: POP
39703: POP
// end ;
39704: LD_VAR 0 3
39708: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39709: LD_EXP 120
39713: NOT
39714: IFFALSE 39749
39716: GO 39718
39718: DISABLE
// begin initMiner := true ;
39719: LD_ADDR_EXP 120
39723: PUSH
39724: LD_INT 1
39726: ST_TO_ADDR
// minersList := [ ] ;
39727: LD_ADDR_EXP 121
39731: PUSH
39732: EMPTY
39733: ST_TO_ADDR
// minerMinesList := [ ] ;
39734: LD_ADDR_EXP 122
39738: PUSH
39739: EMPTY
39740: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39741: LD_ADDR_EXP 123
39745: PUSH
39746: LD_INT 5
39748: ST_TO_ADDR
// end ;
39749: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39750: LD_EXP 120
39754: IFFALSE 39772
39756: PUSH
39757: LD_INT 34
39759: PUSH
39760: LD_INT 81
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PPUSH
39767: CALL_OW 69
39771: AND
39772: IFFALSE 40235
39774: GO 39776
39776: DISABLE
39777: LD_INT 0
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
// begin enable ;
39783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39784: LD_ADDR_VAR 0 1
39788: PUSH
39789: LD_INT 34
39791: PUSH
39792: LD_INT 81
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PPUSH
39799: CALL_OW 69
39803: PUSH
39804: FOR_IN
39805: IFFALSE 39877
// begin if not i in minersList then
39807: LD_VAR 0 1
39811: PUSH
39812: LD_EXP 121
39816: IN
39817: NOT
39818: IFFALSE 39875
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39820: LD_ADDR_EXP 121
39824: PUSH
39825: LD_EXP 121
39829: PPUSH
39830: LD_EXP 121
39834: PUSH
39835: LD_INT 1
39837: PLUS
39838: PPUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 1
39848: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39849: LD_ADDR_EXP 122
39853: PUSH
39854: LD_EXP 122
39858: PPUSH
39859: LD_EXP 122
39863: PUSH
39864: LD_INT 1
39866: PLUS
39867: PPUSH
39868: EMPTY
39869: PPUSH
39870: CALL_OW 1
39874: ST_TO_ADDR
// end end ;
39875: GO 39804
39877: POP
39878: POP
// for i := minerMinesList downto 1 do
39879: LD_ADDR_VAR 0 1
39883: PUSH
39884: DOUBLE
39885: LD_EXP 122
39889: INC
39890: ST_TO_ADDR
39891: LD_INT 1
39893: PUSH
39894: FOR_DOWNTO
39895: IFFALSE 40233
// begin if IsLive ( minersList [ i ] ) then
39897: LD_EXP 121
39901: PUSH
39902: LD_VAR 0 1
39906: ARRAY
39907: PPUSH
39908: CALL_OW 300
39912: IFFALSE 39940
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39914: LD_EXP 121
39918: PUSH
39919: LD_VAR 0 1
39923: ARRAY
39924: PPUSH
39925: LD_EXP 122
39929: PUSH
39930: LD_VAR 0 1
39934: ARRAY
39935: PPUSH
39936: CALL_OW 505
// if not minerMinesList [ i ] then
39940: LD_EXP 122
39944: PUSH
39945: LD_VAR 0 1
39949: ARRAY
39950: NOT
39951: IFFALSE 39955
// continue ;
39953: GO 39894
// for j := minerMinesList [ i ] downto 1 do
39955: LD_ADDR_VAR 0 2
39959: PUSH
39960: DOUBLE
39961: LD_EXP 122
39965: PUSH
39966: LD_VAR 0 1
39970: ARRAY
39971: INC
39972: ST_TO_ADDR
39973: LD_INT 1
39975: PUSH
39976: FOR_DOWNTO
39977: IFFALSE 40229
// begin side := GetSide ( minersList [ i ] ) ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_EXP 121
39988: PUSH
39989: LD_VAR 0 1
39993: ARRAY
39994: PPUSH
39995: CALL_OW 255
39999: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_EXP 122
40009: PUSH
40010: LD_VAR 0 1
40014: ARRAY
40015: PUSH
40016: LD_VAR 0 2
40020: ARRAY
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PPUSH
40026: LD_EXP 122
40030: PUSH
40031: LD_VAR 0 1
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: ARRAY
40042: PUSH
40043: LD_INT 2
40045: ARRAY
40046: PPUSH
40047: CALL_OW 428
40051: ST_TO_ADDR
// if not tmp then
40052: LD_VAR 0 4
40056: NOT
40057: IFFALSE 40061
// continue ;
40059: GO 39976
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40061: LD_VAR 0 4
40065: PUSH
40066: LD_INT 81
40068: PUSH
40069: LD_VAR 0 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PPUSH
40078: CALL_OW 69
40082: IN
40083: IFFALSE 40133
40085: PUSH
40086: LD_EXP 122
40090: PUSH
40091: LD_VAR 0 1
40095: ARRAY
40096: PUSH
40097: LD_VAR 0 2
40101: ARRAY
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: LD_EXP 122
40111: PUSH
40112: LD_VAR 0 1
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 2
40122: ARRAY
40123: PUSH
40124: LD_INT 2
40126: ARRAY
40127: PPUSH
40128: CALL_OW 458
40132: AND
40133: IFFALSE 40227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40135: LD_EXP 122
40139: PUSH
40140: LD_VAR 0 1
40144: ARRAY
40145: PUSH
40146: LD_VAR 0 2
40150: ARRAY
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PPUSH
40156: LD_EXP 122
40160: PUSH
40161: LD_VAR 0 1
40165: ARRAY
40166: PUSH
40167: LD_VAR 0 2
40171: ARRAY
40172: PUSH
40173: LD_INT 2
40175: ARRAY
40176: PPUSH
40177: LD_VAR 0 3
40181: PPUSH
40182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40186: LD_ADDR_EXP 122
40190: PUSH
40191: LD_EXP 122
40195: PPUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: LD_EXP 122
40205: PUSH
40206: LD_VAR 0 1
40210: ARRAY
40211: PPUSH
40212: LD_VAR 0 2
40216: PPUSH
40217: CALL_OW 3
40221: PPUSH
40222: CALL_OW 1
40226: ST_TO_ADDR
// end ; end ;
40227: GO 39976
40229: POP
40230: POP
// end ;
40231: GO 39894
40233: POP
40234: POP
// end ;
40235: PPOPN 4
40237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
// result := false ;
40242: LD_ADDR_VAR 0 4
40246: PUSH
40247: LD_INT 0
40249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 264
40259: PUSH
40260: LD_INT 81
40262: EQUAL
40263: NOT
40264: IFFALSE 40268
// exit ;
40266: GO 40512
// index := GetElementIndex ( minersList , unit ) ;
40268: LD_ADDR_VAR 0 5
40272: PUSH
40273: LD_EXP 121
40277: PPUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL 47482 0 2
40287: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40288: LD_EXP 122
40292: PUSH
40293: LD_VAR 0 5
40297: ARRAY
40298: PUSH
40299: LD_EXP 123
40303: GREATEREQUAL
40304: IFFALSE 40308
// exit ;
40306: GO 40512
// ComMoveXY ( unit , x , y ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 2
40317: PPUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40327: LD_INT 35
40329: PPUSH
40330: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40334: LD_VAR 0 1
40338: PPUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: LD_VAR 0 3
40348: PPUSH
40349: CALL 79528 0 3
40353: NOT
40354: IFFALSE 40367
40356: PUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL_OW 314
40366: AND
40367: IFFALSE 40371
// exit ;
40369: GO 40512
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40371: LD_VAR 0 2
40375: PPUSH
40376: LD_VAR 0 3
40380: PPUSH
40381: CALL_OW 428
40385: PUSH
40386: LD_VAR 0 1
40390: EQUAL
40391: IFFALSE 40405
40393: PUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 314
40403: NOT
40404: AND
40405: IFFALSE 40327
// PlaySoundXY ( x , y , PlantMine ) ;
40407: LD_VAR 0 2
40411: PPUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: LD_STRING PlantMine
40419: PPUSH
40420: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40424: LD_VAR 0 2
40428: PPUSH
40429: LD_VAR 0 3
40433: PPUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: CALL_OW 255
40443: PPUSH
40444: LD_INT 0
40446: PPUSH
40447: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40451: LD_ADDR_EXP 122
40455: PUSH
40456: LD_EXP 122
40460: PPUSH
40461: LD_VAR 0 5
40465: PUSH
40466: LD_EXP 122
40470: PUSH
40471: LD_VAR 0 5
40475: ARRAY
40476: PUSH
40477: LD_INT 1
40479: PLUS
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PPUSH
40485: LD_VAR 0 2
40489: PUSH
40490: LD_VAR 0 3
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL 47699 0 3
40503: ST_TO_ADDR
// result := true ;
40504: LD_ADDR_VAR 0 4
40508: PUSH
40509: LD_INT 1
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 4
40516: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
40521: PPUSH
// if not unit in minersList then
40522: LD_VAR 0 1
40526: PUSH
40527: LD_EXP 121
40531: IN
40532: NOT
40533: IFFALSE 40537
// exit ;
40535: GO 40931
// index := GetElementIndex ( minersList , unit ) ;
40537: LD_ADDR_VAR 0 6
40541: PUSH
40542: LD_EXP 121
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL 47482 0 2
40556: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40557: LD_ADDR_VAR 0 5
40561: PUSH
40562: DOUBLE
40563: LD_EXP 122
40567: PUSH
40568: LD_VAR 0 6
40572: ARRAY
40573: INC
40574: ST_TO_ADDR
40575: LD_INT 1
40577: PUSH
40578: FOR_DOWNTO
40579: IFFALSE 40742
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40581: LD_EXP 122
40585: PUSH
40586: LD_VAR 0 6
40590: ARRAY
40591: PUSH
40592: LD_VAR 0 5
40596: ARRAY
40597: PUSH
40598: LD_INT 1
40600: ARRAY
40601: PUSH
40602: LD_VAR 0 2
40606: EQUAL
40607: IFFALSE 40637
40609: PUSH
40610: LD_EXP 122
40614: PUSH
40615: LD_VAR 0 6
40619: ARRAY
40620: PUSH
40621: LD_VAR 0 5
40625: ARRAY
40626: PUSH
40627: LD_INT 2
40629: ARRAY
40630: PUSH
40631: LD_VAR 0 3
40635: EQUAL
40636: AND
40637: IFFALSE 40740
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40639: LD_EXP 122
40643: PUSH
40644: LD_VAR 0 6
40648: ARRAY
40649: PUSH
40650: LD_VAR 0 5
40654: ARRAY
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PPUSH
40660: LD_EXP 122
40664: PUSH
40665: LD_VAR 0 6
40669: ARRAY
40670: PUSH
40671: LD_VAR 0 5
40675: ARRAY
40676: PUSH
40677: LD_INT 2
40679: ARRAY
40680: PPUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 255
40690: PPUSH
40691: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40695: LD_ADDR_EXP 122
40699: PUSH
40700: LD_EXP 122
40704: PPUSH
40705: LD_VAR 0 6
40709: PPUSH
40710: LD_EXP 122
40714: PUSH
40715: LD_VAR 0 6
40719: ARRAY
40720: PPUSH
40721: LD_VAR 0 5
40725: PPUSH
40726: CALL_OW 3
40730: PPUSH
40731: CALL_OW 1
40735: ST_TO_ADDR
// exit ;
40736: POP
40737: POP
40738: GO 40931
// end ; end ;
40740: GO 40578
40742: POP
40743: POP
// for i := minerMinesList [ index ] downto 1 do
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: DOUBLE
40750: LD_EXP 122
40754: PUSH
40755: LD_VAR 0 6
40759: ARRAY
40760: INC
40761: ST_TO_ADDR
40762: LD_INT 1
40764: PUSH
40765: FOR_DOWNTO
40766: IFFALSE 40929
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40768: LD_EXP 122
40772: PUSH
40773: LD_VAR 0 6
40777: ARRAY
40778: PUSH
40779: LD_VAR 0 5
40783: ARRAY
40784: PUSH
40785: LD_INT 1
40787: ARRAY
40788: PPUSH
40789: LD_EXP 122
40793: PUSH
40794: LD_VAR 0 6
40798: ARRAY
40799: PUSH
40800: LD_VAR 0 5
40804: ARRAY
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: CALL_OW 298
40824: PUSH
40825: LD_INT 6
40827: LESS
40828: IFFALSE 40927
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40830: LD_EXP 122
40834: PUSH
40835: LD_VAR 0 6
40839: ARRAY
40840: PUSH
40841: LD_VAR 0 5
40845: ARRAY
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PPUSH
40851: LD_EXP 122
40855: PUSH
40856: LD_VAR 0 6
40860: ARRAY
40861: PUSH
40862: LD_VAR 0 5
40866: ARRAY
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: PPUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 255
40881: PPUSH
40882: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40886: LD_ADDR_EXP 122
40890: PUSH
40891: LD_EXP 122
40895: PPUSH
40896: LD_VAR 0 6
40900: PPUSH
40901: LD_EXP 122
40905: PUSH
40906: LD_VAR 0 6
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 5
40916: PPUSH
40917: CALL_OW 3
40921: PPUSH
40922: CALL_OW 1
40926: ST_TO_ADDR
// end ; end ;
40927: GO 40765
40929: POP
40930: POP
// end ;
40931: LD_VAR 0 4
40935: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 264
40956: PUSH
40957: LD_INT 81
40959: EQUAL
40960: NOT
40961: IFTRUE 40976
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_EXP 121
40973: IN
40974: NOT
40975: OR
40976: IFFALSE 40980
// exit ;
40978: GO 41306
// index := GetElementIndex ( minersList , unit ) ;
40980: LD_ADDR_VAR 0 6
40984: PUSH
40985: LD_EXP 121
40989: PPUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL 47482 0 2
40999: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_EXP 123
41009: PUSH
41010: LD_EXP 122
41014: PUSH
41015: LD_VAR 0 6
41019: ARRAY
41020: MINUS
41021: ST_TO_ADDR
// if not minesFreeAmount then
41022: LD_VAR 0 8
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41306
// tmp := [ ] ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: EMPTY
41037: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41038: LD_ADDR_VAR 0 5
41042: PUSH
41043: DOUBLE
41044: LD_INT 1
41046: DEC
41047: ST_TO_ADDR
41048: LD_VAR 0 8
41052: PUSH
41053: FOR_TO
41054: IFFALSE 41253
// begin _d := rand ( 0 , 5 ) ;
41056: LD_ADDR_VAR 0 11
41060: PUSH
41061: LD_INT 0
41063: PPUSH
41064: LD_INT 5
41066: PPUSH
41067: CALL_OW 12
41071: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41072: LD_ADDR_VAR 0 12
41076: PUSH
41077: LD_INT 2
41079: PPUSH
41080: LD_INT 6
41082: PPUSH
41083: CALL_OW 12
41087: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 12
41107: PPUSH
41108: CALL_OW 272
41112: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41113: LD_ADDR_VAR 0 10
41117: PUSH
41118: LD_VAR 0 3
41122: PPUSH
41123: LD_VAR 0 11
41127: PPUSH
41128: LD_VAR 0 12
41132: PPUSH
41133: CALL_OW 273
41137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41138: LD_VAR 0 9
41142: PPUSH
41143: LD_VAR 0 10
41147: PPUSH
41148: CALL_OW 488
41152: IFFALSE 41176
41154: PUSH
41155: LD_VAR 0 9
41159: PUSH
41160: LD_VAR 0 10
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_VAR 0 7
41173: IN
41174: NOT
41175: AND
41176: IFFALSE 41195
41178: PUSH
41179: LD_VAR 0 9
41183: PPUSH
41184: LD_VAR 0 10
41188: PPUSH
41189: CALL_OW 458
41193: NOT
41194: AND
41195: IFFALSE 41237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41197: LD_ADDR_VAR 0 7
41201: PUSH
41202: LD_VAR 0 7
41206: PPUSH
41207: LD_VAR 0 7
41211: PUSH
41212: LD_INT 1
41214: PLUS
41215: PPUSH
41216: LD_VAR 0 9
41220: PUSH
41221: LD_VAR 0 10
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PPUSH
41230: CALL_OW 1
41234: ST_TO_ADDR
41235: GO 41251
// i := i - 1 ;
41237: LD_ADDR_VAR 0 5
41241: PUSH
41242: LD_VAR 0 5
41246: PUSH
41247: LD_INT 1
41249: MINUS
41250: ST_TO_ADDR
// end ;
41251: GO 41053
41253: POP
41254: POP
// for i in tmp do
41255: LD_ADDR_VAR 0 5
41259: PUSH
41260: LD_VAR 0 7
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_VAR 0 5
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: LD_VAR 0 5
41286: PUSH
41287: LD_INT 2
41289: ARRAY
41290: PPUSH
41291: CALL 40238 0 3
41295: NOT
41296: IFFALSE 41302
// exit ;
41298: POP
41299: POP
41300: GO 41306
41302: GO 41265
41304: POP
41305: POP
// end ;
41306: LD_VAR 0 4
41310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41311: LD_INT 0
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// if GetClass ( unit ) <> class_sniper then
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 257
41331: PUSH
41332: LD_INT 5
41334: NONEQUAL
41335: IFFALSE 41339
// exit ;
41337: GO 41809
// dist := 8 ;
41339: LD_ADDR_VAR 0 5
41343: PUSH
41344: LD_INT 8
41346: ST_TO_ADDR
// viewRange := 12 ;
41347: LD_ADDR_VAR 0 8
41351: PUSH
41352: LD_INT 12
41354: ST_TO_ADDR
// side := GetSide ( unit ) ;
41355: LD_ADDR_VAR 0 6
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 255
41369: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41370: LD_INT 61
41372: PPUSH
41373: LD_VAR 0 6
41377: PPUSH
41378: CALL_OW 321
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: IFFALSE 41396
// viewRange := 16 ;
41388: LD_ADDR_VAR 0 8
41392: PUSH
41393: LD_INT 16
41395: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41396: LD_VAR 0 1
41400: PPUSH
41401: LD_VAR 0 2
41405: PPUSH
41406: LD_VAR 0 3
41410: PPUSH
41411: CALL_OW 297
41415: PUSH
41416: LD_VAR 0 5
41420: GREATER
41421: IFFALSE 41500
// begin ComMoveXY ( unit , x , y ) ;
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_VAR 0 2
41432: PPUSH
41433: LD_VAR 0 3
41437: PPUSH
41438: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41442: LD_INT 35
41444: PPUSH
41445: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41449: LD_VAR 0 1
41453: PPUSH
41454: LD_VAR 0 2
41458: PPUSH
41459: LD_VAR 0 3
41463: PPUSH
41464: CALL 79528 0 3
41468: NOT
41469: IFFALSE 41473
// exit ;
41471: GO 41809
// until GetDistUnitXY ( unit , x , y ) < dist ;
41473: LD_VAR 0 1
41477: PPUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: LD_VAR 0 3
41487: PPUSH
41488: CALL_OW 297
41492: PUSH
41493: LD_VAR 0 5
41497: LESS
41498: IFFALSE 41442
// end ; ComTurnXY ( unit , x , y ) ;
41500: LD_VAR 0 1
41504: PPUSH
41505: LD_VAR 0 2
41509: PPUSH
41510: LD_VAR 0 3
41514: PPUSH
41515: CALL_OW 118
// repeat if Multiplayer then
41519: LD_OWVAR 4
41523: IFFALSE 41534
// wait ( 35 ) else
41525: LD_INT 35
41527: PPUSH
41528: CALL_OW 67
41532: GO 41541
// wait ( 5 ) ;
41534: LD_INT 5
41536: PPUSH
41537: CALL_OW 67
// _d := GetDir ( unit ) ;
41541: LD_ADDR_VAR 0 11
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 254
41555: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41556: LD_ADDR_VAR 0 7
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 250
41570: PPUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_VAR 0 3
41590: PPUSH
41591: CALL 82164 0 4
41595: ST_TO_ADDR
// until dir = _d ;
41596: LD_VAR 0 7
41600: PUSH
41601: LD_VAR 0 11
41605: EQUAL
41606: IFFALSE 41519
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41608: LD_ADDR_VAR 0 9
41612: PUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL_OW 250
41622: PPUSH
41623: LD_VAR 0 7
41627: PPUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: CALL_OW 272
41637: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41638: LD_ADDR_VAR 0 10
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 251
41652: PPUSH
41653: LD_VAR 0 7
41657: PPUSH
41658: LD_VAR 0 5
41662: PPUSH
41663: CALL_OW 273
41667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41668: LD_VAR 0 9
41672: PPUSH
41673: LD_VAR 0 10
41677: PPUSH
41678: CALL_OW 488
41682: NOT
41683: IFFALSE 41687
// exit ;
41685: GO 41809
// ComAnimCustom ( unit , 1 ) ;
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_INT 1
41694: PPUSH
41695: CALL_OW 592
// p := 0 ;
41699: LD_ADDR_VAR 0 12
41703: PUSH
41704: LD_INT 0
41706: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41707: LD_VAR 0 9
41711: PPUSH
41712: LD_VAR 0 10
41716: PPUSH
41717: LD_VAR 0 6
41721: PPUSH
41722: LD_VAR 0 8
41726: PPUSH
41727: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41731: LD_INT 35
41733: PPUSH
41734: CALL_OW 67
// p := Inc ( p ) ;
41738: LD_ADDR_VAR 0 12
41742: PUSH
41743: LD_VAR 0 12
41747: PPUSH
41748: CALL 82120 0 1
41752: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41753: LD_VAR 0 12
41757: PUSH
41758: LD_INT 3
41760: EQUAL
41761: IFTRUE 41775
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 302
41773: NOT
41774: OR
41775: IFTRUE 41788
41777: PUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 301
41787: OR
41788: IFFALSE 41731
// RemoveSeeing ( _x , _y , side ) ;
41790: LD_VAR 0 9
41794: PPUSH
41795: LD_VAR 0 10
41799: PPUSH
41800: LD_VAR 0 6
41804: PPUSH
41805: CALL_OW 331
// end ;
41809: LD_VAR 0 4
41813: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41814: LD_INT 0
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
// if not unit then
41827: LD_VAR 0 1
41831: NOT
41832: IFFALSE 41836
// exit ;
41834: GO 42107
// side := GetSide ( unit ) ;
41836: LD_ADDR_VAR 0 3
41840: PUSH
41841: LD_VAR 0 1
41845: PPUSH
41846: CALL_OW 255
41850: ST_TO_ADDR
// x := GetX ( unit ) ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_VAR 0 1
41860: PPUSH
41861: CALL_OW 250
41865: ST_TO_ADDR
// y := GetY ( unit ) ;
41866: LD_ADDR_VAR 0 6
41870: PUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 251
41880: ST_TO_ADDR
// r := 8 ;
41881: LD_ADDR_VAR 0 4
41885: PUSH
41886: LD_INT 8
41888: ST_TO_ADDR
// if x - r < 0 then
41889: LD_VAR 0 5
41893: PUSH
41894: LD_VAR 0 4
41898: MINUS
41899: PUSH
41900: LD_INT 0
41902: LESS
41903: IFFALSE 41915
// min_x := 0 else
41905: LD_ADDR_VAR 0 7
41909: PUSH
41910: LD_INT 0
41912: ST_TO_ADDR
41913: GO 41931
// min_x := x - r ;
41915: LD_ADDR_VAR 0 7
41919: PUSH
41920: LD_VAR 0 5
41924: PUSH
41925: LD_VAR 0 4
41929: MINUS
41930: ST_TO_ADDR
// if y - r < 0 then
41931: LD_VAR 0 6
41935: PUSH
41936: LD_VAR 0 4
41940: MINUS
41941: PUSH
41942: LD_INT 0
41944: LESS
41945: IFFALSE 41957
// min_y := 0 else
41947: LD_ADDR_VAR 0 8
41951: PUSH
41952: LD_INT 0
41954: ST_TO_ADDR
41955: GO 41973
// min_y := y - r ;
41957: LD_ADDR_VAR 0 8
41961: PUSH
41962: LD_VAR 0 6
41966: PUSH
41967: LD_VAR 0 4
41971: MINUS
41972: ST_TO_ADDR
// max_x := x + r ;
41973: LD_ADDR_VAR 0 9
41977: PUSH
41978: LD_VAR 0 5
41982: PUSH
41983: LD_VAR 0 4
41987: PLUS
41988: ST_TO_ADDR
// max_y := y + r ;
41989: LD_ADDR_VAR 0 10
41993: PUSH
41994: LD_VAR 0 6
41998: PUSH
41999: LD_VAR 0 4
42003: PLUS
42004: ST_TO_ADDR
// for _x = min_x to max_x do
42005: LD_ADDR_VAR 0 11
42009: PUSH
42010: DOUBLE
42011: LD_VAR 0 7
42015: DEC
42016: ST_TO_ADDR
42017: LD_VAR 0 9
42021: PUSH
42022: FOR_TO
42023: IFFALSE 42105
// for _y = min_y to max_y do
42025: LD_ADDR_VAR 0 12
42029: PUSH
42030: DOUBLE
42031: LD_VAR 0 8
42035: DEC
42036: ST_TO_ADDR
42037: LD_VAR 0 10
42041: PUSH
42042: FOR_TO
42043: IFFALSE 42101
// begin if not ValidHex ( _x , _y ) then
42045: LD_VAR 0 11
42049: PPUSH
42050: LD_VAR 0 12
42054: PPUSH
42055: CALL_OW 488
42059: NOT
42060: IFFALSE 42064
// continue ;
42062: GO 42042
// if MineAtPos ( _x , _y ) then
42064: LD_VAR 0 11
42068: PPUSH
42069: LD_VAR 0 12
42073: PPUSH
42074: CALL_OW 458
42078: IFFALSE 42099
// ViewMineAtPos ( _x , _y , side ) ;
42080: LD_VAR 0 11
42084: PPUSH
42085: LD_VAR 0 12
42089: PPUSH
42090: LD_VAR 0 3
42094: PPUSH
42095: CALL_OW 457
// end ;
42099: GO 42042
42101: POP
42102: POP
42103: GO 42022
42105: POP
42106: POP
// end ;
42107: LD_VAR 0 2
42111: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
42112: LD_INT 0
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
// if not units then
42120: LD_VAR 0 1
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42559
// scaners := [ ] ;
42129: LD_ADDR_VAR 0 6
42133: PUSH
42134: EMPTY
42135: ST_TO_ADDR
// for i in units do
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 1
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42304
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42149: LD_VAR 0 3
42153: PPUSH
42154: CALL_OW 264
42158: PUSH
42159: LD_INT 11
42161: NONEQUAL
42162: IFTRUE 42176
42164: PUSH
42165: LD_VAR 0 3
42169: PPUSH
42170: CALL_OW 302
42174: NOT
42175: OR
42176: IFTRUE 42193
42178: PUSH
42179: LD_VAR 0 3
42183: PPUSH
42184: CALL_OW 110
42188: PUSH
42189: LD_INT 502
42191: EQUAL
42192: OR
42193: IFFALSE 42197
// continue ;
42195: GO 42146
// ComStop ( i ) ;
42197: LD_VAR 0 3
42201: PPUSH
42202: CALL_OW 141
// x := GetX ( i ) ;
42206: LD_ADDR_VAR 0 4
42210: PUSH
42211: LD_VAR 0 3
42215: PPUSH
42216: CALL_OW 250
42220: ST_TO_ADDR
// y := GetY ( i ) ;
42221: LD_ADDR_VAR 0 5
42225: PUSH
42226: LD_VAR 0 3
42230: PPUSH
42231: CALL_OW 251
42235: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42236: LD_VAR 0 3
42240: PPUSH
42241: CALL_OW 255
42245: PUSH
42246: LD_OWVAR 2
42250: EQUAL
42251: IFFALSE 42270
// PlaySoundXY ( x , y , mineDetector ) ;
42253: LD_VAR 0 4
42257: PPUSH
42258: LD_VAR 0 5
42262: PPUSH
42263: LD_STRING mineDetector
42265: PPUSH
42266: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42270: LD_ADDR_VAR 0 6
42274: PUSH
42275: LD_VAR 0 6
42279: PPUSH
42280: LD_VAR 0 3
42284: PPUSH
42285: CALL 80747 0 2
42289: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42290: LD_VAR 0 3
42294: PPUSH
42295: LD_INT 502
42297: PPUSH
42298: CALL_OW 109
// end ;
42302: GO 42146
42304: POP
42305: POP
// if not scaners then
42306: LD_VAR 0 6
42310: NOT
42311: IFFALSE 42315
// exit ;
42313: GO 42559
// wait ( 3 ) ;
42315: LD_INT 3
42317: PPUSH
42318: CALL_OW 67
// timer := 6 ;
42322: LD_ADDR_VAR 0 7
42326: PUSH
42327: LD_INT 6
42329: ST_TO_ADDR
// repeat for i in scaners do
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_VAR 0 6
42339: PUSH
42340: FOR_IN
42341: IFFALSE 42457
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42343: LD_VAR 0 3
42347: PPUSH
42348: CALL_OW 302
42352: NOT
42353: IFTRUE 42366
42355: PUSH
42356: LD_VAR 0 3
42360: PPUSH
42361: CALL_OW 314
42365: OR
42366: IFTRUE 42397
42368: PUSH
42369: LD_VAR 0 3
42373: PPUSH
42374: CALL_OW 263
42378: PUSH
42379: LD_INT 1
42381: EQUAL
42382: IFFALSE 42396
42384: PUSH
42385: LD_VAR 0 3
42389: PPUSH
42390: CALL_OW 311
42394: NOT
42395: AND
42396: OR
42397: IFFALSE 42441
// begin SetUnitDisplayNumber ( i , 0 ) ;
42399: LD_VAR 0 3
42403: PPUSH
42404: LD_INT 0
42406: PPUSH
42407: CALL_OW 505
// SetTag ( i , 0 ) ;
42411: LD_VAR 0 3
42415: PPUSH
42416: LD_INT 0
42418: PPUSH
42419: CALL_OW 109
// scaners := scaners diff i ;
42423: LD_ADDR_VAR 0 6
42427: PUSH
42428: LD_VAR 0 6
42432: PUSH
42433: LD_VAR 0 3
42437: DIFF
42438: ST_TO_ADDR
// continue ;
42439: GO 42340
// end ; SetUnitDisplayNumber ( i , timer ) ;
42441: LD_VAR 0 3
42445: PPUSH
42446: LD_VAR 0 7
42450: PPUSH
42451: CALL_OW 505
// end ;
42455: GO 42340
42457: POP
42458: POP
// if not scaners then
42459: LD_VAR 0 6
42463: NOT
42464: IFFALSE 42468
// exit ;
42466: GO 42559
// timer := Dec ( timer ) ;
42468: LD_ADDR_VAR 0 7
42472: PUSH
42473: LD_VAR 0 7
42477: PPUSH
42478: CALL 82142 0 1
42482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42483: LD_INT 35
42485: PPUSH
42486: CALL_OW 67
// until timer = 0 ;
42490: LD_VAR 0 7
42494: PUSH
42495: LD_INT 0
42497: EQUAL
42498: IFFALSE 42330
// if not scaners then
42500: LD_VAR 0 6
42504: NOT
42505: IFFALSE 42509
// exit ;
42507: GO 42559
// for i in scaners do
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_VAR 0 6
42518: PUSH
42519: FOR_IN
42520: IFFALSE 42557
// begin SetUnitDisplayNumber ( i , 0 ) ;
42522: LD_VAR 0 3
42526: PPUSH
42527: LD_INT 0
42529: PPUSH
42530: CALL_OW 505
// SetTag ( i , 0 ) ;
42534: LD_VAR 0 3
42538: PPUSH
42539: LD_INT 0
42541: PPUSH
42542: CALL_OW 109
// RevealDetectorMine ( i ) ;
42546: LD_VAR 0 3
42550: PPUSH
42551: CALL 41814 0 1
// end ;
42555: GO 42519
42557: POP
42558: POP
// end ;
42559: LD_VAR 0 2
42563: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42564: LD_INT 0
42566: PPUSH
// if p1 = mine_detector_mode then
42567: LD_VAR 0 2
42571: PUSH
42572: LD_INT 103
42574: EQUAL
42575: IFFALSE 42586
// DetectMine ( units ) ;
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL 42112 0 1
// end ; end_of_file
42586: LD_VAR 0 7
42590: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42591: LD_INT 0
42593: PPUSH
42594: PPUSH
// if exist_mode then
42595: LD_VAR 0 2
42599: IFFALSE 42645
// begin unit := CreateCharacter ( prefix & ident ) ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_VAR 0 3
42610: PUSH
42611: LD_VAR 0 1
42615: STR
42616: PPUSH
42617: CALL_OW 34
42621: ST_TO_ADDR
// if unit then
42622: LD_VAR 0 5
42626: IFFALSE 42643
// DeleteCharacters ( prefix & ident ) ;
42628: LD_VAR 0 3
42632: PUSH
42633: LD_VAR 0 1
42637: STR
42638: PPUSH
42639: CALL_OW 40
// end else
42643: GO 42660
// unit := NewCharacter ( ident ) ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: CALL_OW 25
42659: ST_TO_ADDR
// result := unit ;
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: LD_VAR 0 5
42669: ST_TO_ADDR
// end ;
42670: LD_VAR 0 4
42674: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42675: LD_INT 0
42677: PPUSH
42678: PPUSH
// if exist_mode then
42679: LD_VAR 0 2
42683: IFFALSE 42708
// unit := CreateCharacter ( prefix & ident ) else
42685: LD_ADDR_VAR 0 5
42689: PUSH
42690: LD_VAR 0 3
42694: PUSH
42695: LD_VAR 0 1
42699: STR
42700: PPUSH
42701: CALL_OW 34
42705: ST_TO_ADDR
42706: GO 42723
// unit := NewCharacter ( ident ) ;
42708: LD_ADDR_VAR 0 5
42712: PUSH
42713: LD_VAR 0 1
42717: PPUSH
42718: CALL_OW 25
42722: ST_TO_ADDR
// result := unit ;
42723: LD_ADDR_VAR 0 4
42727: PUSH
42728: LD_VAR 0 5
42732: ST_TO_ADDR
// end ;
42733: LD_VAR 0 4
42737: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42738: LD_INT 0
42740: PPUSH
42741: PPUSH
// if not side or not nation then
42742: LD_VAR 0 1
42746: NOT
42747: IFTRUE 42756
42749: PUSH
42750: LD_VAR 0 2
42754: NOT
42755: OR
42756: IFFALSE 42760
// exit ;
42758: GO 43554
// case nation of nation_american :
42760: LD_VAR 0 2
42764: PUSH
42765: LD_INT 1
42767: DOUBLE
42768: EQUAL
42769: IFTRUE 42773
42771: GO 42995
42773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42774: LD_ADDR_VAR 0 4
42778: PUSH
42779: LD_INT 35
42781: PUSH
42782: LD_INT 45
42784: PUSH
42785: LD_INT 46
42787: PUSH
42788: LD_INT 47
42790: PUSH
42791: LD_INT 82
42793: PUSH
42794: LD_INT 83
42796: PUSH
42797: LD_INT 84
42799: PUSH
42800: LD_INT 85
42802: PUSH
42803: LD_INT 86
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 6
42814: PUSH
42815: LD_INT 15
42817: PUSH
42818: LD_INT 16
42820: PUSH
42821: LD_INT 7
42823: PUSH
42824: LD_INT 12
42826: PUSH
42827: LD_INT 13
42829: PUSH
42830: LD_INT 10
42832: PUSH
42833: LD_INT 14
42835: PUSH
42836: LD_INT 20
42838: PUSH
42839: LD_INT 21
42841: PUSH
42842: LD_INT 22
42844: PUSH
42845: LD_INT 25
42847: PUSH
42848: LD_INT 32
42850: PUSH
42851: LD_INT 27
42853: PUSH
42854: LD_INT 36
42856: PUSH
42857: LD_INT 69
42859: PUSH
42860: LD_INT 39
42862: PUSH
42863: LD_INT 34
42865: PUSH
42866: LD_INT 40
42868: PUSH
42869: LD_INT 48
42871: PUSH
42872: LD_INT 49
42874: PUSH
42875: LD_INT 50
42877: PUSH
42878: LD_INT 51
42880: PUSH
42881: LD_INT 52
42883: PUSH
42884: LD_INT 53
42886: PUSH
42887: LD_INT 54
42889: PUSH
42890: LD_INT 55
42892: PUSH
42893: LD_INT 56
42895: PUSH
42896: LD_INT 57
42898: PUSH
42899: LD_INT 58
42901: PUSH
42902: LD_INT 59
42904: PUSH
42905: LD_INT 60
42907: PUSH
42908: LD_INT 61
42910: PUSH
42911: LD_INT 62
42913: PUSH
42914: LD_INT 80
42916: PUSH
42917: LD_INT 82
42919: PUSH
42920: LD_INT 83
42922: PUSH
42923: LD_INT 84
42925: PUSH
42926: LD_INT 85
42928: PUSH
42929: LD_INT 86
42931: PUSH
42932: LD_INT 90
42934: PUSH
42935: LD_INT 93
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
42993: GO 43476
42995: LD_INT 2
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43237
43003: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: LD_INT 35
43011: PUSH
43012: LD_INT 45
43014: PUSH
43015: LD_INT 46
43017: PUSH
43018: LD_INT 47
43020: PUSH
43021: LD_INT 82
43023: PUSH
43024: LD_INT 83
43026: PUSH
43027: LD_INT 84
43029: PUSH
43030: LD_INT 85
43032: PUSH
43033: LD_INT 87
43035: PUSH
43036: LD_INT 70
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 11
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: LD_INT 4
43050: PUSH
43051: LD_INT 5
43053: PUSH
43054: LD_INT 6
43056: PUSH
43057: LD_INT 15
43059: PUSH
43060: LD_INT 18
43062: PUSH
43063: LD_INT 7
43065: PUSH
43066: LD_INT 17
43068: PUSH
43069: LD_INT 8
43071: PUSH
43072: LD_INT 20
43074: PUSH
43075: LD_INT 21
43077: PUSH
43078: LD_INT 22
43080: PUSH
43081: LD_INT 72
43083: PUSH
43084: LD_INT 26
43086: PUSH
43087: LD_INT 69
43089: PUSH
43090: LD_INT 39
43092: PUSH
43093: LD_INT 40
43095: PUSH
43096: LD_INT 41
43098: PUSH
43099: LD_INT 42
43101: PUSH
43102: LD_INT 43
43104: PUSH
43105: LD_INT 48
43107: PUSH
43108: LD_INT 49
43110: PUSH
43111: LD_INT 50
43113: PUSH
43114: LD_INT 51
43116: PUSH
43117: LD_INT 52
43119: PUSH
43120: LD_INT 53
43122: PUSH
43123: LD_INT 54
43125: PUSH
43126: LD_INT 55
43128: PUSH
43129: LD_INT 56
43131: PUSH
43132: LD_INT 60
43134: PUSH
43135: LD_INT 61
43137: PUSH
43138: LD_INT 62
43140: PUSH
43141: LD_INT 66
43143: PUSH
43144: LD_INT 67
43146: PUSH
43147: LD_INT 68
43149: PUSH
43150: LD_INT 81
43152: PUSH
43153: LD_INT 82
43155: PUSH
43156: LD_INT 83
43158: PUSH
43159: LD_INT 84
43161: PUSH
43162: LD_INT 85
43164: PUSH
43165: LD_INT 87
43167: PUSH
43168: LD_INT 88
43170: PUSH
43171: LD_INT 92
43173: PUSH
43174: LD_INT 94
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
43235: GO 43476
43237: LD_INT 3
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43245
43243: GO 43475
43245: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43246: LD_ADDR_VAR 0 4
43250: PUSH
43251: LD_INT 46
43253: PUSH
43254: LD_INT 47
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 82
43265: PUSH
43266: LD_INT 83
43268: PUSH
43269: LD_INT 84
43271: PUSH
43272: LD_INT 85
43274: PUSH
43275: LD_INT 86
43277: PUSH
43278: LD_INT 11
43280: PUSH
43281: LD_INT 9
43283: PUSH
43284: LD_INT 20
43286: PUSH
43287: LD_INT 19
43289: PUSH
43290: LD_INT 21
43292: PUSH
43293: LD_INT 24
43295: PUSH
43296: LD_INT 22
43298: PUSH
43299: LD_INT 25
43301: PUSH
43302: LD_INT 28
43304: PUSH
43305: LD_INT 29
43307: PUSH
43308: LD_INT 30
43310: PUSH
43311: LD_INT 31
43313: PUSH
43314: LD_INT 37
43316: PUSH
43317: LD_INT 38
43319: PUSH
43320: LD_INT 32
43322: PUSH
43323: LD_INT 27
43325: PUSH
43326: LD_INT 33
43328: PUSH
43329: LD_INT 69
43331: PUSH
43332: LD_INT 39
43334: PUSH
43335: LD_INT 34
43337: PUSH
43338: LD_INT 40
43340: PUSH
43341: LD_INT 71
43343: PUSH
43344: LD_INT 23
43346: PUSH
43347: LD_INT 44
43349: PUSH
43350: LD_INT 48
43352: PUSH
43353: LD_INT 49
43355: PUSH
43356: LD_INT 50
43358: PUSH
43359: LD_INT 51
43361: PUSH
43362: LD_INT 52
43364: PUSH
43365: LD_INT 53
43367: PUSH
43368: LD_INT 54
43370: PUSH
43371: LD_INT 55
43373: PUSH
43374: LD_INT 56
43376: PUSH
43377: LD_INT 57
43379: PUSH
43380: LD_INT 58
43382: PUSH
43383: LD_INT 59
43385: PUSH
43386: LD_INT 63
43388: PUSH
43389: LD_INT 64
43391: PUSH
43392: LD_INT 65
43394: PUSH
43395: LD_INT 82
43397: PUSH
43398: LD_INT 83
43400: PUSH
43401: LD_INT 84
43403: PUSH
43404: LD_INT 85
43406: PUSH
43407: LD_INT 86
43409: PUSH
43410: LD_INT 89
43412: PUSH
43413: LD_INT 91
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: ST_TO_ADDR
43473: GO 43476
43475: POP
// if state > - 1 and state < 3 then
43476: LD_VAR 0 3
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: GREATER
43485: IFFALSE 43497
43487: PUSH
43488: LD_VAR 0 3
43492: PUSH
43493: LD_INT 3
43495: LESS
43496: AND
43497: IFFALSE 43554
// for i in result do
43499: LD_ADDR_VAR 0 5
43503: PUSH
43504: LD_VAR 0 4
43508: PUSH
43509: FOR_IN
43510: IFFALSE 43552
// if GetTech ( i , side ) <> state then
43512: LD_VAR 0 5
43516: PPUSH
43517: LD_VAR 0 1
43521: PPUSH
43522: CALL_OW 321
43526: PUSH
43527: LD_VAR 0 3
43531: NONEQUAL
43532: IFFALSE 43550
// result := result diff i ;
43534: LD_ADDR_VAR 0 4
43538: PUSH
43539: LD_VAR 0 4
43543: PUSH
43544: LD_VAR 0 5
43548: DIFF
43549: ST_TO_ADDR
43550: GO 43509
43552: POP
43553: POP
// end ;
43554: LD_VAR 0 4
43558: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43559: LD_INT 0
43561: PPUSH
43562: PPUSH
43563: PPUSH
// result := true ;
43564: LD_ADDR_VAR 0 3
43568: PUSH
43569: LD_INT 1
43571: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43572: LD_ADDR_VAR 0 5
43576: PUSH
43577: LD_VAR 0 2
43581: PPUSH
43582: CALL_OW 480
43586: ST_TO_ADDR
// if not tmp then
43587: LD_VAR 0 5
43591: NOT
43592: IFFALSE 43596
// exit ;
43594: GO 43645
// for i in tmp do
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_VAR 0 5
43605: PUSH
43606: FOR_IN
43607: IFFALSE 43643
// if GetTech ( i , side ) <> state_researched then
43609: LD_VAR 0 4
43613: PPUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: CALL_OW 321
43623: PUSH
43624: LD_INT 2
43626: NONEQUAL
43627: IFFALSE 43641
// begin result := false ;
43629: LD_ADDR_VAR 0 3
43633: PUSH
43634: LD_INT 0
43636: ST_TO_ADDR
// exit ;
43637: POP
43638: POP
43639: GO 43645
// end ;
43641: GO 43606
43643: POP
43644: POP
// end ;
43645: LD_VAR 0 3
43649: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43650: LD_INT 0
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43665: LD_VAR 0 1
43669: NOT
43670: IFTRUE 43687
43672: PUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 257
43682: PUSH
43683: LD_INT 9
43685: NONEQUAL
43686: OR
43687: IFFALSE 43691
// exit ;
43689: GO 44270
// side := GetSide ( unit ) ;
43691: LD_ADDR_VAR 0 9
43695: PUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 255
43705: ST_TO_ADDR
// tech_space := tech_spacanom ;
43706: LD_ADDR_VAR 0 12
43710: PUSH
43711: LD_INT 29
43713: ST_TO_ADDR
// tech_time := tech_taurad ;
43714: LD_ADDR_VAR 0 13
43718: PUSH
43719: LD_INT 28
43721: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43722: LD_ADDR_VAR 0 11
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 310
43736: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43737: LD_VAR 0 11
43741: PPUSH
43742: CALL_OW 247
43746: PUSH
43747: LD_INT 2
43749: EQUAL
43750: IFFALSE 43754
// exit ;
43752: GO 44270
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43754: LD_ADDR_VAR 0 8
43758: PUSH
43759: LD_INT 81
43761: PUSH
43762: LD_VAR 0 9
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 21
43776: PUSH
43777: LD_INT 3
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PPUSH
43792: CALL_OW 69
43796: ST_TO_ADDR
// if not tmp then
43797: LD_VAR 0 8
43801: NOT
43802: IFFALSE 43806
// exit ;
43804: GO 44270
// if in_unit then
43806: LD_VAR 0 11
43810: IFFALSE 43834
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43812: LD_ADDR_VAR 0 10
43816: PUSH
43817: LD_VAR 0 8
43821: PPUSH
43822: LD_VAR 0 11
43826: PPUSH
43827: CALL_OW 74
43831: ST_TO_ADDR
43832: GO 43854
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43834: LD_ADDR_VAR 0 10
43838: PUSH
43839: LD_VAR 0 8
43843: PPUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 74
43853: ST_TO_ADDR
// if not enemy then
43854: LD_VAR 0 10
43858: NOT
43859: IFFALSE 43863
// exit ;
43861: GO 44270
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43863: LD_VAR 0 11
43867: IFFALSE 43889
43869: PUSH
43870: LD_VAR 0 11
43874: PPUSH
43875: LD_VAR 0 10
43879: PPUSH
43880: CALL_OW 296
43884: PUSH
43885: LD_INT 13
43887: GREATER
43888: AND
43889: IFTRUE 43911
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: LD_VAR 0 10
43901: PPUSH
43902: CALL_OW 296
43906: PUSH
43907: LD_INT 12
43909: GREATER
43910: OR
43911: IFFALSE 43915
// exit ;
43913: GO 44270
// missile := [ 1 ] ;
43915: LD_ADDR_VAR 0 14
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43926: LD_VAR 0 9
43930: PPUSH
43931: LD_VAR 0 12
43935: PPUSH
43936: CALL_OW 325
43940: IFFALSE 43969
// missile := Replace ( missile , missile + 1 , 2 ) ;
43942: LD_ADDR_VAR 0 14
43946: PUSH
43947: LD_VAR 0 14
43951: PPUSH
43952: LD_VAR 0 14
43956: PUSH
43957: LD_INT 1
43959: PLUS
43960: PPUSH
43961: LD_INT 2
43963: PPUSH
43964: CALL_OW 1
43968: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43969: LD_VAR 0 9
43973: PPUSH
43974: LD_VAR 0 13
43978: PPUSH
43979: CALL_OW 325
43983: IFFALSE 44007
43985: PUSH
43986: LD_VAR 0 10
43990: PPUSH
43991: CALL_OW 255
43995: PPUSH
43996: LD_VAR 0 13
44000: PPUSH
44001: CALL_OW 325
44005: NOT
44006: AND
44007: IFFALSE 44036
// missile := Replace ( missile , missile + 1 , 3 ) ;
44009: LD_ADDR_VAR 0 14
44013: PUSH
44014: LD_VAR 0 14
44018: PPUSH
44019: LD_VAR 0 14
44023: PUSH
44024: LD_INT 1
44026: PLUS
44027: PPUSH
44028: LD_INT 3
44030: PPUSH
44031: CALL_OW 1
44035: ST_TO_ADDR
// if missile < 2 then
44036: LD_VAR 0 14
44040: PUSH
44041: LD_INT 2
44043: LESS
44044: IFFALSE 44048
// exit ;
44046: GO 44270
// x := GetX ( enemy ) ;
44048: LD_ADDR_VAR 0 4
44052: PUSH
44053: LD_VAR 0 10
44057: PPUSH
44058: CALL_OW 250
44062: ST_TO_ADDR
// y := GetY ( enemy ) ;
44063: LD_ADDR_VAR 0 5
44067: PUSH
44068: LD_VAR 0 10
44072: PPUSH
44073: CALL_OW 251
44077: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44078: LD_ADDR_VAR 0 6
44082: PUSH
44083: LD_VAR 0 4
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PPUSH
44092: LD_INT 1
44094: PPUSH
44095: CALL_OW 12
44099: PLUS
44100: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44101: LD_ADDR_VAR 0 7
44105: PUSH
44106: LD_VAR 0 5
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PPUSH
44115: LD_INT 1
44117: PPUSH
44118: CALL_OW 12
44122: PLUS
44123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44124: LD_VAR 0 6
44128: PPUSH
44129: LD_VAR 0 7
44133: PPUSH
44134: CALL_OW 488
44138: NOT
44139: IFFALSE 44161
// begin _x := x ;
44141: LD_ADDR_VAR 0 6
44145: PUSH
44146: LD_VAR 0 4
44150: ST_TO_ADDR
// _y := y ;
44151: LD_ADDR_VAR 0 7
44155: PUSH
44156: LD_VAR 0 5
44160: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_INT 1
44168: PPUSH
44169: LD_VAR 0 14
44173: PPUSH
44174: CALL_OW 12
44178: ST_TO_ADDR
// case i of 1 :
44179: LD_VAR 0 3
44183: PUSH
44184: LD_INT 1
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44192
44190: GO 44209
44192: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44193: LD_VAR 0 1
44197: PPUSH
44198: LD_VAR 0 10
44202: PPUSH
44203: CALL_OW 115
44207: GO 44270
44209: LD_INT 2
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44217
44215: GO 44239
44217: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44218: LD_VAR 0 1
44222: PPUSH
44223: LD_VAR 0 6
44227: PPUSH
44228: LD_VAR 0 7
44232: PPUSH
44233: CALL_OW 153
44237: GO 44270
44239: LD_INT 3
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44247
44245: GO 44269
44247: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44248: LD_VAR 0 1
44252: PPUSH
44253: LD_VAR 0 6
44257: PPUSH
44258: LD_VAR 0 7
44262: PPUSH
44263: CALL_OW 154
44267: GO 44270
44269: POP
// end ;
44270: LD_VAR 0 2
44274: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
// if not unit or not building then
44283: LD_VAR 0 1
44287: NOT
44288: IFTRUE 44297
44290: PUSH
44291: LD_VAR 0 2
44295: NOT
44296: OR
44297: IFFALSE 44301
// exit ;
44299: GO 44459
// x := GetX ( building ) ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_VAR 0 2
44310: PPUSH
44311: CALL_OW 250
44315: ST_TO_ADDR
// y := GetY ( building ) ;
44316: LD_ADDR_VAR 0 6
44320: PUSH
44321: LD_VAR 0 2
44325: PPUSH
44326: CALL_OW 251
44330: ST_TO_ADDR
// for i := 0 to 5 do
44331: LD_ADDR_VAR 0 4
44335: PUSH
44336: DOUBLE
44337: LD_INT 0
44339: DEC
44340: ST_TO_ADDR
44341: LD_INT 5
44343: PUSH
44344: FOR_TO
44345: IFFALSE 44457
// begin _x := ShiftX ( x , i , 3 ) ;
44347: LD_ADDR_VAR 0 7
44351: PUSH
44352: LD_VAR 0 5
44356: PPUSH
44357: LD_VAR 0 4
44361: PPUSH
44362: LD_INT 3
44364: PPUSH
44365: CALL_OW 272
44369: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44370: LD_ADDR_VAR 0 8
44374: PUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: LD_VAR 0 4
44384: PPUSH
44385: LD_INT 3
44387: PPUSH
44388: CALL_OW 273
44392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44393: LD_VAR 0 7
44397: PPUSH
44398: LD_VAR 0 8
44402: PPUSH
44403: CALL_OW 488
44407: NOT
44408: IFFALSE 44412
// continue ;
44410: GO 44344
// if HexInfo ( _x , _y ) = 0 then
44412: LD_VAR 0 7
44416: PPUSH
44417: LD_VAR 0 8
44421: PPUSH
44422: CALL_OW 428
44426: PUSH
44427: LD_INT 0
44429: EQUAL
44430: IFFALSE 44455
// begin ComMoveXY ( unit , _x , _y ) ;
44432: LD_VAR 0 1
44436: PPUSH
44437: LD_VAR 0 7
44441: PPUSH
44442: LD_VAR 0 8
44446: PPUSH
44447: CALL_OW 111
// exit ;
44451: POP
44452: POP
44453: GO 44459
// end ; end ;
44455: GO 44344
44457: POP
44458: POP
// end ;
44459: LD_VAR 0 3
44463: RET
// export function ScanBase ( side , base_area ) ; begin
44464: LD_INT 0
44466: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_VAR 0 2
44476: PPUSH
44477: LD_INT 81
44479: PUSH
44480: LD_VAR 0 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PPUSH
44489: CALL_OW 70
44493: ST_TO_ADDR
// end ;
44494: LD_VAR 0 3
44498: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44499: LD_INT 0
44501: PPUSH
44502: PPUSH
44503: PPUSH
44504: PPUSH
// result := false ;
44505: LD_ADDR_VAR 0 2
44509: PUSH
44510: LD_INT 0
44512: ST_TO_ADDR
// side := GetSide ( unit ) ;
44513: LD_ADDR_VAR 0 3
44517: PUSH
44518: LD_VAR 0 1
44522: PPUSH
44523: CALL_OW 255
44527: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 248
44542: ST_TO_ADDR
// case nat of 1 :
44543: LD_VAR 0 4
44547: PUSH
44548: LD_INT 1
44550: DOUBLE
44551: EQUAL
44552: IFTRUE 44556
44554: GO 44567
44556: POP
// tech := tech_lassight ; 2 :
44557: LD_ADDR_VAR 0 5
44561: PUSH
44562: LD_INT 12
44564: ST_TO_ADDR
44565: GO 44606
44567: LD_INT 2
44569: DOUBLE
44570: EQUAL
44571: IFTRUE 44575
44573: GO 44586
44575: POP
// tech := tech_mortar ; 3 :
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_INT 41
44583: ST_TO_ADDR
44584: GO 44606
44586: LD_INT 3
44588: DOUBLE
44589: EQUAL
44590: IFTRUE 44594
44592: GO 44605
44594: POP
// tech := tech_bazooka ; end ;
44595: LD_ADDR_VAR 0 5
44599: PUSH
44600: LD_INT 44
44602: ST_TO_ADDR
44603: GO 44606
44605: POP
// if Researched ( side , tech ) then
44606: LD_VAR 0 3
44610: PPUSH
44611: LD_VAR 0 5
44615: PPUSH
44616: CALL_OW 325
44620: IFFALSE 44647
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44622: LD_ADDR_VAR 0 2
44626: PUSH
44627: LD_INT 5
44629: PUSH
44630: LD_INT 8
44632: PUSH
44633: LD_INT 9
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: PUSH
44641: LD_VAR 0 4
44645: ARRAY
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 2
44651: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44652: LD_INT 0
44654: PPUSH
44655: PPUSH
44656: PPUSH
// if not mines then
44657: LD_VAR 0 2
44661: NOT
44662: IFFALSE 44666
// exit ;
44664: GO 44810
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44666: LD_ADDR_VAR 0 5
44670: PUSH
44671: LD_INT 81
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: LD_INT 21
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PPUSH
44704: CALL_OW 69
44708: ST_TO_ADDR
// for i in mines do
44709: LD_ADDR_VAR 0 4
44713: PUSH
44714: LD_VAR 0 2
44718: PUSH
44719: FOR_IN
44720: IFFALSE 44808
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44722: LD_VAR 0 4
44726: PUSH
44727: LD_INT 1
44729: ARRAY
44730: PPUSH
44731: LD_VAR 0 4
44735: PUSH
44736: LD_INT 2
44738: ARRAY
44739: PPUSH
44740: CALL_OW 458
44744: NOT
44745: IFFALSE 44749
// continue ;
44747: GO 44719
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44749: LD_VAR 0 4
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: PPUSH
44758: LD_VAR 0 4
44762: PUSH
44763: LD_INT 2
44765: ARRAY
44766: PPUSH
44767: CALL_OW 428
44771: PUSH
44772: LD_VAR 0 5
44776: IN
44777: IFFALSE 44806
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44779: LD_VAR 0 4
44783: PUSH
44784: LD_INT 1
44786: ARRAY
44787: PPUSH
44788: LD_VAR 0 4
44792: PUSH
44793: LD_INT 2
44795: ARRAY
44796: PPUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 456
// end ;
44806: GO 44719
44808: POP
44809: POP
// end ;
44810: LD_VAR 0 3
44814: RET
// export function Count ( array ) ; begin
44815: LD_INT 0
44817: PPUSH
// result := array + 0 ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_VAR 0 1
44827: PUSH
44828: LD_INT 0
44830: PLUS
44831: ST_TO_ADDR
// end ;
44832: LD_VAR 0 2
44836: RET
// export function IsEmpty ( building ) ; begin
44837: LD_INT 0
44839: PPUSH
// if not building then
44840: LD_VAR 0 1
44844: NOT
44845: IFFALSE 44849
// exit ;
44847: GO 44892
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44849: LD_ADDR_VAR 0 2
44853: PUSH
44854: LD_VAR 0 1
44858: PUSH
44859: LD_INT 22
44861: PUSH
44862: LD_VAR 0 1
44866: PPUSH
44867: CALL_OW 255
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 58
44878: PUSH
44879: EMPTY
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PPUSH
44886: CALL_OW 69
44890: IN
44891: ST_TO_ADDR
// end ;
44892: LD_VAR 0 2
44896: RET
// export function IsNotFull ( building ) ; var places ; begin
44897: LD_INT 0
44899: PPUSH
44900: PPUSH
// if not building then
44901: LD_VAR 0 1
44905: NOT
44906: IFFALSE 44910
// exit ;
44908: GO 44938
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: LD_VAR 0 1
44919: PPUSH
44920: LD_INT 3
44922: PUSH
44923: LD_INT 62
44925: PUSH
44926: EMPTY
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PPUSH
44933: CALL_OW 72
44937: ST_TO_ADDR
// end ;
44938: LD_VAR 0 2
44942: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44943: LD_INT 0
44945: PPUSH
44946: PPUSH
44947: PPUSH
44948: PPUSH
// tmp := [ ] ;
44949: LD_ADDR_VAR 0 3
44953: PUSH
44954: EMPTY
44955: ST_TO_ADDR
// list := [ ] ;
44956: LD_ADDR_VAR 0 5
44960: PUSH
44961: EMPTY
44962: ST_TO_ADDR
// for i = 16 to 25 do
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: DOUBLE
44969: LD_INT 16
44971: DEC
44972: ST_TO_ADDR
44973: LD_INT 25
44975: PUSH
44976: FOR_TO
44977: IFFALSE 45050
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_VAR 0 3
44988: PUSH
44989: LD_INT 22
44991: PUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: CALL_OW 255
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 91
45008: PUSH
45009: LD_VAR 0 1
45013: PUSH
45014: LD_INT 6
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 30
45024: PUSH
45025: LD_VAR 0 4
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: PPUSH
45042: CALL_OW 69
45046: ADD
45047: ST_TO_ADDR
45048: GO 44976
45050: POP
45051: POP
// for i = 1 to tmp do
45052: LD_ADDR_VAR 0 4
45056: PUSH
45057: DOUBLE
45058: LD_INT 1
45060: DEC
45061: ST_TO_ADDR
45062: LD_VAR 0 3
45066: PUSH
45067: FOR_TO
45068: IFFALSE 45156
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45070: LD_ADDR_VAR 0 5
45074: PUSH
45075: LD_VAR 0 5
45079: PUSH
45080: LD_VAR 0 3
45084: PUSH
45085: LD_VAR 0 4
45089: ARRAY
45090: PPUSH
45091: CALL_OW 266
45095: PUSH
45096: LD_VAR 0 3
45100: PUSH
45101: LD_VAR 0 4
45105: ARRAY
45106: PPUSH
45107: CALL_OW 250
45111: PUSH
45112: LD_VAR 0 3
45116: PUSH
45117: LD_VAR 0 4
45121: ARRAY
45122: PPUSH
45123: CALL_OW 251
45127: PUSH
45128: LD_VAR 0 3
45132: PUSH
45133: LD_VAR 0 4
45137: ARRAY
45138: PPUSH
45139: CALL_OW 254
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: PUSH
45150: EMPTY
45151: LIST
45152: ADD
45153: ST_TO_ADDR
45154: GO 45067
45156: POP
45157: POP
// result := list ;
45158: LD_ADDR_VAR 0 2
45162: PUSH
45163: LD_VAR 0 5
45167: ST_TO_ADDR
// end ;
45168: LD_VAR 0 2
45172: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45173: LD_INT 0
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
// if not factory then
45182: LD_VAR 0 1
45186: NOT
45187: IFFALSE 45191
// exit ;
45189: GO 45794
// if control = control_apeman then
45191: LD_VAR 0 4
45195: PUSH
45196: LD_INT 5
45198: EQUAL
45199: IFFALSE 45308
// begin tmp := UnitsInside ( factory ) ;
45201: LD_ADDR_VAR 0 8
45205: PUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 313
45215: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45216: LD_VAR 0 8
45220: PPUSH
45221: LD_INT 25
45223: PUSH
45224: LD_INT 12
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PPUSH
45231: CALL_OW 72
45235: NOT
45236: IFFALSE 45246
// control := control_manual ;
45238: LD_ADDR_VAR 0 4
45242: PUSH
45243: LD_INT 1
45245: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45246: LD_ADDR_VAR 0 8
45250: PUSH
45251: LD_VAR 0 1
45255: PPUSH
45256: CALL 44943 0 1
45260: ST_TO_ADDR
// if tmp then
45261: LD_VAR 0 8
45265: IFFALSE 45308
// begin for i in tmp do
45267: LD_ADDR_VAR 0 7
45271: PUSH
45272: LD_VAR 0 8
45276: PUSH
45277: FOR_IN
45278: IFFALSE 45306
// if i [ 1 ] = b_ext_radio then
45280: LD_VAR 0 7
45284: PUSH
45285: LD_INT 1
45287: ARRAY
45288: PUSH
45289: LD_INT 22
45291: EQUAL
45292: IFFALSE 45304
// begin control := control_remote ;
45294: LD_ADDR_VAR 0 4
45298: PUSH
45299: LD_INT 2
45301: ST_TO_ADDR
// break ;
45302: GO 45306
// end ;
45304: GO 45277
45306: POP
45307: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45308: LD_VAR 0 1
45312: PPUSH
45313: LD_VAR 0 2
45317: PPUSH
45318: LD_VAR 0 3
45322: PPUSH
45323: LD_VAR 0 4
45327: PPUSH
45328: LD_VAR 0 5
45332: PPUSH
45333: CALL_OW 448
45337: IFFALSE 45372
// begin result := [ chassis , engine , control , weapon ] ;
45339: LD_ADDR_VAR 0 6
45343: PUSH
45344: LD_VAR 0 2
45348: PUSH
45349: LD_VAR 0 3
45353: PUSH
45354: LD_VAR 0 4
45358: PUSH
45359: LD_VAR 0 5
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// exit ;
45370: GO 45794
// end ; _chassis := AvailableChassisList ( factory ) ;
45372: LD_ADDR_VAR 0 9
45376: PUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 475
45386: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45387: LD_ADDR_VAR 0 11
45391: PUSH
45392: LD_VAR 0 1
45396: PPUSH
45397: CALL_OW 476
45401: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45402: LD_ADDR_VAR 0 12
45406: PUSH
45407: LD_VAR 0 1
45411: PPUSH
45412: CALL_OW 477
45416: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45417: LD_ADDR_VAR 0 10
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 478
45431: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45432: LD_VAR 0 9
45436: NOT
45437: IFTRUE 45446
45439: PUSH
45440: LD_VAR 0 11
45444: NOT
45445: OR
45446: IFTRUE 45455
45448: PUSH
45449: LD_VAR 0 12
45453: NOT
45454: OR
45455: IFTRUE 45464
45457: PUSH
45458: LD_VAR 0 10
45462: NOT
45463: OR
45464: IFFALSE 45499
// begin result := [ chassis , engine , control , weapon ] ;
45466: LD_ADDR_VAR 0 6
45470: PUSH
45471: LD_VAR 0 2
45475: PUSH
45476: LD_VAR 0 3
45480: PUSH
45481: LD_VAR 0 4
45485: PUSH
45486: LD_VAR 0 5
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// exit ;
45497: GO 45794
// end ; if not chassis in _chassis then
45499: LD_VAR 0 2
45503: PUSH
45504: LD_VAR 0 9
45508: IN
45509: NOT
45510: IFFALSE 45536
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45512: LD_ADDR_VAR 0 2
45516: PUSH
45517: LD_VAR 0 9
45521: PUSH
45522: LD_INT 1
45524: PPUSH
45525: LD_VAR 0 9
45529: PPUSH
45530: CALL_OW 12
45534: ARRAY
45535: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45536: LD_VAR 0 2
45540: PPUSH
45541: LD_VAR 0 3
45545: PPUSH
45546: CALL 45799 0 2
45550: NOT
45551: IFFALSE 45612
// repeat engine := _engine [ 1 ] ;
45553: LD_ADDR_VAR 0 3
45557: PUSH
45558: LD_VAR 0 11
45562: PUSH
45563: LD_INT 1
45565: ARRAY
45566: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45567: LD_ADDR_VAR 0 11
45571: PUSH
45572: LD_VAR 0 11
45576: PPUSH
45577: LD_INT 1
45579: PPUSH
45580: CALL_OW 3
45584: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45585: LD_VAR 0 2
45589: PPUSH
45590: LD_VAR 0 3
45594: PPUSH
45595: CALL 45799 0 2
45599: IFTRUE 45610
45601: PUSH
45602: LD_VAR 0 11
45606: PUSH
45607: EMPTY
45608: EQUAL
45609: OR
45610: IFFALSE 45553
// if not control in _control then
45612: LD_VAR 0 4
45616: PUSH
45617: LD_VAR 0 12
45621: IN
45622: NOT
45623: IFFALSE 45649
// control := _control [ rand ( 1 , _control ) ] ;
45625: LD_ADDR_VAR 0 4
45629: PUSH
45630: LD_VAR 0 12
45634: PUSH
45635: LD_INT 1
45637: PPUSH
45638: LD_VAR 0 12
45642: PPUSH
45643: CALL_OW 12
45647: ARRAY
45648: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45649: LD_VAR 0 2
45653: PPUSH
45654: LD_VAR 0 5
45658: PPUSH
45659: CALL 46021 0 2
45663: NOT
45664: IFFALSE 45725
// repeat weapon := _weapon [ 1 ] ;
45666: LD_ADDR_VAR 0 5
45670: PUSH
45671: LD_VAR 0 10
45675: PUSH
45676: LD_INT 1
45678: ARRAY
45679: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45680: LD_ADDR_VAR 0 10
45684: PUSH
45685: LD_VAR 0 10
45689: PPUSH
45690: LD_INT 1
45692: PPUSH
45693: CALL_OW 3
45697: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45698: LD_VAR 0 2
45702: PPUSH
45703: LD_VAR 0 5
45707: PPUSH
45708: CALL 46021 0 2
45712: IFTRUE 45723
45714: PUSH
45715: LD_VAR 0 10
45719: PUSH
45720: EMPTY
45721: EQUAL
45722: OR
45723: IFFALSE 45666
// result := [ ] ;
45725: LD_ADDR_VAR 0 6
45729: PUSH
45730: EMPTY
45731: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45732: LD_VAR 0 1
45736: PPUSH
45737: LD_VAR 0 2
45741: PPUSH
45742: LD_VAR 0 3
45746: PPUSH
45747: LD_VAR 0 4
45751: PPUSH
45752: LD_VAR 0 5
45756: PPUSH
45757: CALL_OW 448
45761: IFFALSE 45794
// result := [ chassis , engine , control , weapon ] ;
45763: LD_ADDR_VAR 0 6
45767: PUSH
45768: LD_VAR 0 2
45772: PUSH
45773: LD_VAR 0 3
45777: PUSH
45778: LD_VAR 0 4
45782: PUSH
45783: LD_VAR 0 5
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// end ;
45794: LD_VAR 0 6
45798: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45799: LD_INT 0
45801: PPUSH
// if not chassis or not engine then
45802: LD_VAR 0 1
45806: NOT
45807: IFTRUE 45816
45809: PUSH
45810: LD_VAR 0 2
45814: NOT
45815: OR
45816: IFFALSE 45820
// exit ;
45818: GO 46016
// case engine of engine_solar :
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 2
45827: DOUBLE
45828: EQUAL
45829: IFTRUE 45833
45831: GO 45871
45833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_INT 11
45841: PUSH
45842: LD_INT 12
45844: PUSH
45845: LD_INT 13
45847: PUSH
45848: LD_INT 14
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
45869: GO 46000
45871: LD_INT 1
45873: DOUBLE
45874: EQUAL
45875: IFTRUE 45879
45877: GO 45941
45879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_INT 11
45887: PUSH
45888: LD_INT 12
45890: PUSH
45891: LD_INT 13
45893: PUSH
45894: LD_INT 14
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 4
45908: PUSH
45909: LD_INT 5
45911: PUSH
45912: LD_INT 21
45914: PUSH
45915: LD_INT 23
45917: PUSH
45918: LD_INT 22
45920: PUSH
45921: LD_INT 24
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
45939: GO 46000
45941: LD_INT 3
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45949
45947: GO 45999
45949: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45950: LD_ADDR_VAR 0 3
45954: PUSH
45955: LD_INT 13
45957: PUSH
45958: LD_INT 14
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: LD_INT 4
45969: PUSH
45970: LD_INT 5
45972: PUSH
45973: LD_INT 21
45975: PUSH
45976: LD_INT 22
45978: PUSH
45979: LD_INT 23
45981: PUSH
45982: LD_INT 24
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
45997: GO 46000
45999: POP
// result := ( chassis in result ) ;
46000: LD_ADDR_VAR 0 3
46004: PUSH
46005: LD_VAR 0 1
46009: PUSH
46010: LD_VAR 0 3
46014: IN
46015: ST_TO_ADDR
// end ;
46016: LD_VAR 0 3
46020: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46021: LD_INT 0
46023: PPUSH
// if not chassis or not weapon then
46024: LD_VAR 0 1
46028: NOT
46029: IFTRUE 46038
46031: PUSH
46032: LD_VAR 0 2
46036: NOT
46037: OR
46038: IFFALSE 46042
// exit ;
46040: GO 47102
// case weapon of us_machine_gun :
46042: LD_VAR 0 2
46046: PUSH
46047: LD_INT 2
46049: DOUBLE
46050: EQUAL
46051: IFTRUE 46055
46053: GO 46085
46055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46056: LD_ADDR_VAR 0 3
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: LD_INT 4
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
46083: GO 47086
46085: LD_INT 3
46087: DOUBLE
46088: EQUAL
46089: IFTRUE 46093
46091: GO 46123
46093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46094: LD_ADDR_VAR 0 3
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: LD_INT 5
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
46121: GO 47086
46123: LD_INT 11
46125: DOUBLE
46126: EQUAL
46127: IFTRUE 46131
46129: GO 46161
46131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46132: LD_ADDR_VAR 0 3
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: LD_INT 4
46148: PUSH
46149: LD_INT 5
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
46159: GO 47086
46161: LD_INT 4
46163: DOUBLE
46164: EQUAL
46165: IFTRUE 46169
46167: GO 46195
46169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46170: LD_ADDR_VAR 0 3
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 4
46183: PUSH
46184: LD_INT 5
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
46193: GO 47086
46195: LD_INT 5
46197: DOUBLE
46198: EQUAL
46199: IFTRUE 46203
46201: GO 46229
46203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46204: LD_ADDR_VAR 0 3
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 4
46217: PUSH
46218: LD_INT 5
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: ST_TO_ADDR
46227: GO 47086
46229: LD_INT 9
46231: DOUBLE
46232: EQUAL
46233: IFTRUE 46237
46235: GO 46263
46237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46238: LD_ADDR_VAR 0 3
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: LD_INT 5
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
46261: GO 47086
46263: LD_INT 7
46265: DOUBLE
46266: EQUAL
46267: IFTRUE 46271
46269: GO 46297
46271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46272: LD_ADDR_VAR 0 3
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
46295: GO 47086
46297: LD_INT 12
46299: DOUBLE
46300: EQUAL
46301: IFTRUE 46305
46303: GO 46331
46305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46306: LD_ADDR_VAR 0 3
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: LD_INT 4
46319: PUSH
46320: LD_INT 5
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
46329: GO 47086
46331: LD_INT 13
46333: DOUBLE
46334: EQUAL
46335: IFTRUE 46339
46337: GO 46365
46339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46340: LD_ADDR_VAR 0 3
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 4
46353: PUSH
46354: LD_INT 5
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
46363: GO 47086
46365: LD_INT 14
46367: DOUBLE
46368: EQUAL
46369: IFTRUE 46373
46371: GO 46391
46373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46374: LD_ADDR_VAR 0 3
46378: PUSH
46379: LD_INT 4
46381: PUSH
46382: LD_INT 5
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: ST_TO_ADDR
46389: GO 47086
46391: LD_INT 6
46393: DOUBLE
46394: EQUAL
46395: IFTRUE 46399
46397: GO 46417
46399: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46400: LD_ADDR_VAR 0 3
46404: PUSH
46405: LD_INT 4
46407: PUSH
46408: LD_INT 5
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: ST_TO_ADDR
46415: GO 47086
46417: LD_INT 10
46419: DOUBLE
46420: EQUAL
46421: IFTRUE 46425
46423: GO 46443
46425: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46426: LD_ADDR_VAR 0 3
46430: PUSH
46431: LD_INT 4
46433: PUSH
46434: LD_INT 5
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: ST_TO_ADDR
46441: GO 47086
46443: LD_INT 22
46445: DOUBLE
46446: EQUAL
46447: IFTRUE 46451
46449: GO 46477
46451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46452: LD_ADDR_VAR 0 3
46456: PUSH
46457: LD_INT 11
46459: PUSH
46460: LD_INT 12
46462: PUSH
46463: LD_INT 13
46465: PUSH
46466: LD_INT 14
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
46475: GO 47086
46477: LD_INT 23
46479: DOUBLE
46480: EQUAL
46481: IFTRUE 46485
46483: GO 46511
46485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46486: LD_ADDR_VAR 0 3
46490: PUSH
46491: LD_INT 11
46493: PUSH
46494: LD_INT 12
46496: PUSH
46497: LD_INT 13
46499: PUSH
46500: LD_INT 14
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: ST_TO_ADDR
46509: GO 47086
46511: LD_INT 24
46513: DOUBLE
46514: EQUAL
46515: IFTRUE 46519
46517: GO 46545
46519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46520: LD_ADDR_VAR 0 3
46524: PUSH
46525: LD_INT 11
46527: PUSH
46528: LD_INT 12
46530: PUSH
46531: LD_INT 13
46533: PUSH
46534: LD_INT 14
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
46543: GO 47086
46545: LD_INT 30
46547: DOUBLE
46548: EQUAL
46549: IFTRUE 46553
46551: GO 46579
46553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46554: LD_ADDR_VAR 0 3
46558: PUSH
46559: LD_INT 11
46561: PUSH
46562: LD_INT 12
46564: PUSH
46565: LD_INT 13
46567: PUSH
46568: LD_INT 14
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
46577: GO 47086
46579: LD_INT 25
46581: DOUBLE
46582: EQUAL
46583: IFTRUE 46587
46585: GO 46605
46587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46588: LD_ADDR_VAR 0 3
46592: PUSH
46593: LD_INT 13
46595: PUSH
46596: LD_INT 14
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: ST_TO_ADDR
46603: GO 47086
46605: LD_INT 27
46607: DOUBLE
46608: EQUAL
46609: IFTRUE 46613
46611: GO 46631
46613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46614: LD_ADDR_VAR 0 3
46618: PUSH
46619: LD_INT 13
46621: PUSH
46622: LD_INT 14
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: ST_TO_ADDR
46629: GO 47086
46631: LD_INT 92
46633: DOUBLE
46634: EQUAL
46635: IFTRUE 46639
46637: GO 46665
46639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46640: LD_ADDR_VAR 0 3
46644: PUSH
46645: LD_INT 11
46647: PUSH
46648: LD_INT 12
46650: PUSH
46651: LD_INT 13
46653: PUSH
46654: LD_INT 14
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
46663: GO 47086
46665: LD_INT 28
46667: DOUBLE
46668: EQUAL
46669: IFTRUE 46673
46671: GO 46691
46673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46674: LD_ADDR_VAR 0 3
46678: PUSH
46679: LD_INT 13
46681: PUSH
46682: LD_INT 14
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: ST_TO_ADDR
46689: GO 47086
46691: LD_INT 29
46693: DOUBLE
46694: EQUAL
46695: IFTRUE 46699
46697: GO 46717
46699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46700: LD_ADDR_VAR 0 3
46704: PUSH
46705: LD_INT 13
46707: PUSH
46708: LD_INT 14
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: ST_TO_ADDR
46715: GO 47086
46717: LD_INT 31
46719: DOUBLE
46720: EQUAL
46721: IFTRUE 46725
46723: GO 46743
46725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46726: LD_ADDR_VAR 0 3
46730: PUSH
46731: LD_INT 13
46733: PUSH
46734: LD_INT 14
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: ST_TO_ADDR
46741: GO 47086
46743: LD_INT 26
46745: DOUBLE
46746: EQUAL
46747: IFTRUE 46751
46749: GO 46769
46751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46752: LD_ADDR_VAR 0 3
46756: PUSH
46757: LD_INT 13
46759: PUSH
46760: LD_INT 14
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: ST_TO_ADDR
46767: GO 47086
46769: LD_INT 42
46771: DOUBLE
46772: EQUAL
46773: IFTRUE 46777
46775: GO 46803
46777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46778: LD_ADDR_VAR 0 3
46782: PUSH
46783: LD_INT 21
46785: PUSH
46786: LD_INT 22
46788: PUSH
46789: LD_INT 23
46791: PUSH
46792: LD_INT 24
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: ST_TO_ADDR
46801: GO 47086
46803: LD_INT 43
46805: DOUBLE
46806: EQUAL
46807: IFTRUE 46811
46809: GO 46837
46811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46812: LD_ADDR_VAR 0 3
46816: PUSH
46817: LD_INT 21
46819: PUSH
46820: LD_INT 22
46822: PUSH
46823: LD_INT 23
46825: PUSH
46826: LD_INT 24
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
46835: GO 47086
46837: LD_INT 44
46839: DOUBLE
46840: EQUAL
46841: IFTRUE 46845
46843: GO 46871
46845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46846: LD_ADDR_VAR 0 3
46850: PUSH
46851: LD_INT 21
46853: PUSH
46854: LD_INT 22
46856: PUSH
46857: LD_INT 23
46859: PUSH
46860: LD_INT 24
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: ST_TO_ADDR
46869: GO 47086
46871: LD_INT 45
46873: DOUBLE
46874: EQUAL
46875: IFTRUE 46879
46877: GO 46905
46879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46880: LD_ADDR_VAR 0 3
46884: PUSH
46885: LD_INT 21
46887: PUSH
46888: LD_INT 22
46890: PUSH
46891: LD_INT 23
46893: PUSH
46894: LD_INT 24
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
46903: GO 47086
46905: LD_INT 49
46907: DOUBLE
46908: EQUAL
46909: IFTRUE 46913
46911: GO 46939
46913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46914: LD_ADDR_VAR 0 3
46918: PUSH
46919: LD_INT 21
46921: PUSH
46922: LD_INT 22
46924: PUSH
46925: LD_INT 23
46927: PUSH
46928: LD_INT 24
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
46937: GO 47086
46939: LD_INT 51
46941: DOUBLE
46942: EQUAL
46943: IFTRUE 46947
46945: GO 46973
46947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46948: LD_ADDR_VAR 0 3
46952: PUSH
46953: LD_INT 21
46955: PUSH
46956: LD_INT 22
46958: PUSH
46959: LD_INT 23
46961: PUSH
46962: LD_INT 24
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
46971: GO 47086
46973: LD_INT 52
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 47007
46981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46982: LD_ADDR_VAR 0 3
46986: PUSH
46987: LD_INT 21
46989: PUSH
46990: LD_INT 22
46992: PUSH
46993: LD_INT 23
46995: PUSH
46996: LD_INT 24
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
47005: GO 47086
47007: LD_INT 53
47009: DOUBLE
47010: EQUAL
47011: IFTRUE 47015
47013: GO 47033
47015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47016: LD_ADDR_VAR 0 3
47020: PUSH
47021: LD_INT 23
47023: PUSH
47024: LD_INT 24
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: ST_TO_ADDR
47031: GO 47086
47033: LD_INT 46
47035: DOUBLE
47036: EQUAL
47037: IFTRUE 47041
47039: GO 47059
47041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47042: LD_ADDR_VAR 0 3
47046: PUSH
47047: LD_INT 23
47049: PUSH
47050: LD_INT 24
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: ST_TO_ADDR
47057: GO 47086
47059: LD_INT 47
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47085
47067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47068: LD_ADDR_VAR 0 3
47072: PUSH
47073: LD_INT 23
47075: PUSH
47076: LD_INT 24
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: ST_TO_ADDR
47083: GO 47086
47085: POP
// result := ( chassis in result ) ;
47086: LD_ADDR_VAR 0 3
47090: PUSH
47091: LD_VAR 0 1
47095: PUSH
47096: LD_VAR 0 3
47100: IN
47101: ST_TO_ADDR
// end ;
47102: LD_VAR 0 3
47106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47107: LD_INT 0
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
// result := array ;
47116: LD_ADDR_VAR 0 5
47120: PUSH
47121: LD_VAR 0 1
47125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47126: LD_VAR 0 1
47130: NOT
47131: IFTRUE 47140
47133: PUSH
47134: LD_VAR 0 2
47138: NOT
47139: OR
47140: IFTRUE 47149
47142: PUSH
47143: LD_VAR 0 3
47147: NOT
47148: OR
47149: IFTRUE 47163
47151: PUSH
47152: LD_VAR 0 2
47156: PUSH
47157: LD_VAR 0 1
47161: GREATER
47162: OR
47163: IFTRUE 47177
47165: PUSH
47166: LD_VAR 0 3
47170: PUSH
47171: LD_VAR 0 1
47175: GREATER
47176: OR
47177: IFFALSE 47181
// exit ;
47179: GO 47477
// if direction then
47181: LD_VAR 0 4
47185: IFFALSE 47249
// begin d := 1 ;
47187: LD_ADDR_VAR 0 9
47191: PUSH
47192: LD_INT 1
47194: ST_TO_ADDR
// if i_from > i_to then
47195: LD_VAR 0 2
47199: PUSH
47200: LD_VAR 0 3
47204: GREATER
47205: IFFALSE 47231
// length := ( array - i_from ) + i_to else
47207: LD_ADDR_VAR 0 11
47211: PUSH
47212: LD_VAR 0 1
47216: PUSH
47217: LD_VAR 0 2
47221: MINUS
47222: PUSH
47223: LD_VAR 0 3
47227: PLUS
47228: ST_TO_ADDR
47229: GO 47247
// length := i_to - i_from ;
47231: LD_ADDR_VAR 0 11
47235: PUSH
47236: LD_VAR 0 3
47240: PUSH
47241: LD_VAR 0 2
47245: MINUS
47246: ST_TO_ADDR
// end else
47247: GO 47310
// begin d := - 1 ;
47249: LD_ADDR_VAR 0 9
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: ST_TO_ADDR
// if i_from > i_to then
47258: LD_VAR 0 2
47262: PUSH
47263: LD_VAR 0 3
47267: GREATER
47268: IFFALSE 47288
// length := i_from - i_to else
47270: LD_ADDR_VAR 0 11
47274: PUSH
47275: LD_VAR 0 2
47279: PUSH
47280: LD_VAR 0 3
47284: MINUS
47285: ST_TO_ADDR
47286: GO 47310
// length := ( array - i_to ) + i_from ;
47288: LD_ADDR_VAR 0 11
47292: PUSH
47293: LD_VAR 0 1
47297: PUSH
47298: LD_VAR 0 3
47302: MINUS
47303: PUSH
47304: LD_VAR 0 2
47308: PLUS
47309: ST_TO_ADDR
// end ; if not length then
47310: LD_VAR 0 11
47314: NOT
47315: IFFALSE 47319
// exit ;
47317: GO 47477
// tmp := array ;
47319: LD_ADDR_VAR 0 10
47323: PUSH
47324: LD_VAR 0 1
47328: ST_TO_ADDR
// for i = 1 to length do
47329: LD_ADDR_VAR 0 6
47333: PUSH
47334: DOUBLE
47335: LD_INT 1
47337: DEC
47338: ST_TO_ADDR
47339: LD_VAR 0 11
47343: PUSH
47344: FOR_TO
47345: IFFALSE 47465
// begin for j = 1 to array do
47347: LD_ADDR_VAR 0 7
47351: PUSH
47352: DOUBLE
47353: LD_INT 1
47355: DEC
47356: ST_TO_ADDR
47357: LD_VAR 0 1
47361: PUSH
47362: FOR_TO
47363: IFFALSE 47451
// begin k := j + d ;
47365: LD_ADDR_VAR 0 8
47369: PUSH
47370: LD_VAR 0 7
47374: PUSH
47375: LD_VAR 0 9
47379: PLUS
47380: ST_TO_ADDR
// if k > array then
47381: LD_VAR 0 8
47385: PUSH
47386: LD_VAR 0 1
47390: GREATER
47391: IFFALSE 47401
// k := 1 ;
47393: LD_ADDR_VAR 0 8
47397: PUSH
47398: LD_INT 1
47400: ST_TO_ADDR
// if not k then
47401: LD_VAR 0 8
47405: NOT
47406: IFFALSE 47418
// k := array ;
47408: LD_ADDR_VAR 0 8
47412: PUSH
47413: LD_VAR 0 1
47417: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47418: LD_ADDR_VAR 0 10
47422: PUSH
47423: LD_VAR 0 10
47427: PPUSH
47428: LD_VAR 0 8
47432: PPUSH
47433: LD_VAR 0 1
47437: PUSH
47438: LD_VAR 0 7
47442: ARRAY
47443: PPUSH
47444: CALL_OW 1
47448: ST_TO_ADDR
// end ;
47449: GO 47362
47451: POP
47452: POP
// array := tmp ;
47453: LD_ADDR_VAR 0 1
47457: PUSH
47458: LD_VAR 0 10
47462: ST_TO_ADDR
// end ;
47463: GO 47344
47465: POP
47466: POP
// result := array ;
47467: LD_ADDR_VAR 0 5
47471: PUSH
47472: LD_VAR 0 1
47476: ST_TO_ADDR
// end ;
47477: LD_VAR 0 5
47481: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47482: LD_INT 0
47484: PPUSH
47485: PPUSH
// result := 0 ;
47486: LD_ADDR_VAR 0 3
47490: PUSH
47491: LD_INT 0
47493: ST_TO_ADDR
// if not array or not value in array then
47494: LD_VAR 0 1
47498: NOT
47499: IFTRUE 47514
47501: PUSH
47502: LD_VAR 0 2
47506: PUSH
47507: LD_VAR 0 1
47511: IN
47512: NOT
47513: OR
47514: IFFALSE 47518
// exit ;
47516: GO 47572
// for i = 1 to array do
47518: LD_ADDR_VAR 0 4
47522: PUSH
47523: DOUBLE
47524: LD_INT 1
47526: DEC
47527: ST_TO_ADDR
47528: LD_VAR 0 1
47532: PUSH
47533: FOR_TO
47534: IFFALSE 47570
// if value = array [ i ] then
47536: LD_VAR 0 2
47540: PUSH
47541: LD_VAR 0 1
47545: PUSH
47546: LD_VAR 0 4
47550: ARRAY
47551: EQUAL
47552: IFFALSE 47568
// begin result := i ;
47554: LD_ADDR_VAR 0 3
47558: PUSH
47559: LD_VAR 0 4
47563: ST_TO_ADDR
// exit ;
47564: POP
47565: POP
47566: GO 47572
// end ;
47568: GO 47533
47570: POP
47571: POP
// end ;
47572: LD_VAR 0 3
47576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47577: LD_INT 0
47579: PPUSH
// vc_chassis := chassis ;
47580: LD_ADDR_OWVAR 37
47584: PUSH
47585: LD_VAR 0 1
47589: ST_TO_ADDR
// vc_engine := engine ;
47590: LD_ADDR_OWVAR 39
47594: PUSH
47595: LD_VAR 0 2
47599: ST_TO_ADDR
// vc_control := control ;
47600: LD_ADDR_OWVAR 38
47604: PUSH
47605: LD_VAR 0 3
47609: ST_TO_ADDR
// vc_weapon := weapon ;
47610: LD_ADDR_OWVAR 40
47614: PUSH
47615: LD_VAR 0 4
47619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47620: LD_ADDR_OWVAR 41
47624: PUSH
47625: LD_VAR 0 5
47629: ST_TO_ADDR
// end ;
47630: LD_VAR 0 6
47634: RET
// export function WantPlant ( unit ) ; var task ; begin
47635: LD_INT 0
47637: PPUSH
47638: PPUSH
// result := false ;
47639: LD_ADDR_VAR 0 2
47643: PUSH
47644: LD_INT 0
47646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47647: LD_ADDR_VAR 0 3
47651: PUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 437
47661: ST_TO_ADDR
// if task then
47662: LD_VAR 0 3
47666: IFFALSE 47694
// if task [ 1 ] [ 1 ] = p then
47668: LD_VAR 0 3
47672: PUSH
47673: LD_INT 1
47675: ARRAY
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PUSH
47681: LD_STRING p
47683: EQUAL
47684: IFFALSE 47694
// result := true ;
47686: LD_ADDR_VAR 0 2
47690: PUSH
47691: LD_INT 1
47693: ST_TO_ADDR
// end ;
47694: LD_VAR 0 2
47698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47699: LD_INT 0
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
// if pos < 1 then
47705: LD_VAR 0 2
47709: PUSH
47710: LD_INT 1
47712: LESS
47713: IFFALSE 47717
// exit ;
47715: GO 48020
// if pos = 1 then
47717: LD_VAR 0 2
47721: PUSH
47722: LD_INT 1
47724: EQUAL
47725: IFFALSE 47758
// result := Replace ( arr , pos [ 1 ] , value ) else
47727: LD_ADDR_VAR 0 4
47731: PUSH
47732: LD_VAR 0 1
47736: PPUSH
47737: LD_VAR 0 2
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_VAR 0 3
47750: PPUSH
47751: CALL_OW 1
47755: ST_TO_ADDR
47756: GO 48020
// begin tmp := arr ;
47758: LD_ADDR_VAR 0 6
47762: PUSH
47763: LD_VAR 0 1
47767: ST_TO_ADDR
// s_arr := [ tmp ] ;
47768: LD_ADDR_VAR 0 7
47772: PUSH
47773: LD_VAR 0 6
47777: PUSH
47778: EMPTY
47779: LIST
47780: ST_TO_ADDR
// for i = 1 to pos - 1 do
47781: LD_ADDR_VAR 0 5
47785: PUSH
47786: DOUBLE
47787: LD_INT 1
47789: DEC
47790: ST_TO_ADDR
47791: LD_VAR 0 2
47795: PUSH
47796: LD_INT 1
47798: MINUS
47799: PUSH
47800: FOR_TO
47801: IFFALSE 47846
// begin tmp := tmp [ pos [ i ] ] ;
47803: LD_ADDR_VAR 0 6
47807: PUSH
47808: LD_VAR 0 6
47812: PUSH
47813: LD_VAR 0 2
47817: PUSH
47818: LD_VAR 0 5
47822: ARRAY
47823: ARRAY
47824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47825: LD_ADDR_VAR 0 7
47829: PUSH
47830: LD_VAR 0 7
47834: PUSH
47835: LD_VAR 0 6
47839: PUSH
47840: EMPTY
47841: LIST
47842: ADD
47843: ST_TO_ADDR
// end ;
47844: GO 47800
47846: POP
47847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47848: LD_ADDR_VAR 0 6
47852: PUSH
47853: LD_VAR 0 6
47857: PPUSH
47858: LD_VAR 0 2
47862: PUSH
47863: LD_VAR 0 2
47867: ARRAY
47868: PPUSH
47869: LD_VAR 0 3
47873: PPUSH
47874: CALL_OW 1
47878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47879: LD_ADDR_VAR 0 7
47883: PUSH
47884: LD_VAR 0 7
47888: PPUSH
47889: LD_VAR 0 7
47893: PPUSH
47894: LD_VAR 0 6
47898: PPUSH
47899: CALL_OW 1
47903: ST_TO_ADDR
// for i = s_arr downto 2 do
47904: LD_ADDR_VAR 0 5
47908: PUSH
47909: DOUBLE
47910: LD_VAR 0 7
47914: INC
47915: ST_TO_ADDR
47916: LD_INT 2
47918: PUSH
47919: FOR_DOWNTO
47920: IFFALSE 48004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47922: LD_ADDR_VAR 0 6
47926: PUSH
47927: LD_VAR 0 7
47931: PUSH
47932: LD_VAR 0 5
47936: PUSH
47937: LD_INT 1
47939: MINUS
47940: ARRAY
47941: PPUSH
47942: LD_VAR 0 2
47946: PUSH
47947: LD_VAR 0 5
47951: PUSH
47952: LD_INT 1
47954: MINUS
47955: ARRAY
47956: PPUSH
47957: LD_VAR 0 7
47961: PUSH
47962: LD_VAR 0 5
47966: ARRAY
47967: PPUSH
47968: CALL_OW 1
47972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47973: LD_ADDR_VAR 0 7
47977: PUSH
47978: LD_VAR 0 7
47982: PPUSH
47983: LD_VAR 0 5
47987: PUSH
47988: LD_INT 1
47990: MINUS
47991: PPUSH
47992: LD_VAR 0 6
47996: PPUSH
47997: CALL_OW 1
48001: ST_TO_ADDR
// end ;
48002: GO 47919
48004: POP
48005: POP
// result := s_arr [ 1 ] ;
48006: LD_ADDR_VAR 0 4
48010: PUSH
48011: LD_VAR 0 7
48015: PUSH
48016: LD_INT 1
48018: ARRAY
48019: ST_TO_ADDR
// end ; end ;
48020: LD_VAR 0 4
48024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48025: LD_INT 0
48027: PPUSH
48028: PPUSH
// if not list then
48029: LD_VAR 0 1
48033: NOT
48034: IFFALSE 48038
// exit ;
48036: GO 48129
// i := list [ pos1 ] ;
48038: LD_ADDR_VAR 0 5
48042: PUSH
48043: LD_VAR 0 1
48047: PUSH
48048: LD_VAR 0 2
48052: ARRAY
48053: ST_TO_ADDR
// if not i then
48054: LD_VAR 0 5
48058: NOT
48059: IFFALSE 48063
// exit ;
48061: GO 48129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48063: LD_ADDR_VAR 0 1
48067: PUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: LD_VAR 0 2
48077: PPUSH
48078: LD_VAR 0 1
48082: PUSH
48083: LD_VAR 0 3
48087: ARRAY
48088: PPUSH
48089: CALL_OW 1
48093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48094: LD_ADDR_VAR 0 1
48098: PUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: LD_VAR 0 3
48108: PPUSH
48109: LD_VAR 0 5
48113: PPUSH
48114: CALL_OW 1
48118: ST_TO_ADDR
// result := list ;
48119: LD_ADDR_VAR 0 4
48123: PUSH
48124: LD_VAR 0 1
48128: ST_TO_ADDR
// end ;
48129: LD_VAR 0 4
48133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48134: LD_INT 0
48136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48137: LD_ADDR_VAR 0 5
48141: PUSH
48142: LD_VAR 0 1
48146: PPUSH
48147: CALL_OW 250
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 251
48161: PPUSH
48162: LD_VAR 0 2
48166: PPUSH
48167: LD_VAR 0 3
48171: PPUSH
48172: LD_VAR 0 4
48176: PPUSH
48177: CALL 48559 0 5
48181: ST_TO_ADDR
// end ;
48182: LD_VAR 0 5
48186: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48187: LD_INT 0
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
// if not list or not unit then
48193: LD_VAR 0 2
48197: NOT
48198: IFTRUE 48207
48200: PUSH
48201: LD_VAR 0 1
48205: NOT
48206: OR
48207: IFFALSE 48211
// exit ;
48209: GO 48554
// result := [ ] ;
48211: LD_ADDR_VAR 0 5
48215: PUSH
48216: EMPTY
48217: ST_TO_ADDR
// for i in list do
48218: LD_ADDR_VAR 0 6
48222: PUSH
48223: LD_VAR 0 2
48227: PUSH
48228: FOR_IN
48229: IFFALSE 48447
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48231: LD_ADDR_VAR 0 8
48235: PUSH
48236: LD_VAR 0 1
48240: PPUSH
48241: LD_VAR 0 6
48245: PUSH
48246: LD_INT 1
48248: ARRAY
48249: PPUSH
48250: LD_VAR 0 6
48254: PUSH
48255: LD_INT 2
48257: ARRAY
48258: PPUSH
48259: CALL_OW 297
48263: ST_TO_ADDR
// if not Count ( result ) then
48264: LD_VAR 0 5
48268: PPUSH
48269: CALL 44815 0 1
48273: NOT
48274: IFFALSE 48307
// begin result := Join ( result , [ i , tmp ] ) ;
48276: LD_ADDR_VAR 0 5
48280: PUSH
48281: LD_VAR 0 5
48285: PPUSH
48286: LD_VAR 0 6
48290: PUSH
48291: LD_VAR 0 8
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PPUSH
48300: CALL 80747 0 2
48304: ST_TO_ADDR
// continue ;
48305: GO 48228
// end ; if result [ result ] [ 2 ] <= tmp then
48307: LD_VAR 0 5
48311: PUSH
48312: LD_VAR 0 5
48316: ARRAY
48317: PUSH
48318: LD_INT 2
48320: ARRAY
48321: PUSH
48322: LD_VAR 0 8
48326: LESSEQUAL
48327: IFFALSE 48360
// result := Join ( result , [ i , tmp ] ) else
48329: LD_ADDR_VAR 0 5
48333: PUSH
48334: LD_VAR 0 5
48338: PPUSH
48339: LD_VAR 0 6
48343: PUSH
48344: LD_VAR 0 8
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PPUSH
48353: CALL 80747 0 2
48357: ST_TO_ADDR
48358: GO 48445
// begin for j := 1 to Count ( result ) do
48360: LD_ADDR_VAR 0 7
48364: PUSH
48365: DOUBLE
48366: LD_INT 1
48368: DEC
48369: ST_TO_ADDR
48370: LD_VAR 0 5
48374: PPUSH
48375: CALL 44815 0 1
48379: PUSH
48380: FOR_TO
48381: IFFALSE 48443
// begin if tmp < result [ j ] [ 2 ] then
48383: LD_VAR 0 8
48387: PUSH
48388: LD_VAR 0 5
48392: PUSH
48393: LD_VAR 0 7
48397: ARRAY
48398: PUSH
48399: LD_INT 2
48401: ARRAY
48402: LESS
48403: IFFALSE 48441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48405: LD_ADDR_VAR 0 5
48409: PUSH
48410: LD_VAR 0 5
48414: PPUSH
48415: LD_VAR 0 7
48419: PPUSH
48420: LD_VAR 0 6
48424: PUSH
48425: LD_VAR 0 8
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PPUSH
48434: CALL_OW 2
48438: ST_TO_ADDR
// break ;
48439: GO 48443
// end ; end ;
48441: GO 48380
48443: POP
48444: POP
// end ; end ;
48445: GO 48228
48447: POP
48448: POP
// if result and not asc then
48449: LD_VAR 0 5
48453: IFFALSE 48462
48455: PUSH
48456: LD_VAR 0 3
48460: NOT
48461: AND
48462: IFFALSE 48479
// result := ReverseArray ( result ) ;
48464: LD_ADDR_VAR 0 5
48468: PUSH
48469: LD_VAR 0 5
48473: PPUSH
48474: CALL 75837 0 1
48478: ST_TO_ADDR
// tmp := [ ] ;
48479: LD_ADDR_VAR 0 8
48483: PUSH
48484: EMPTY
48485: ST_TO_ADDR
// if mode then
48486: LD_VAR 0 4
48490: IFFALSE 48554
// begin for i := 1 to result do
48492: LD_ADDR_VAR 0 6
48496: PUSH
48497: DOUBLE
48498: LD_INT 1
48500: DEC
48501: ST_TO_ADDR
48502: LD_VAR 0 5
48506: PUSH
48507: FOR_TO
48508: IFFALSE 48542
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48510: LD_ADDR_VAR 0 8
48514: PUSH
48515: LD_VAR 0 8
48519: PPUSH
48520: LD_VAR 0 5
48524: PUSH
48525: LD_VAR 0 6
48529: ARRAY
48530: PUSH
48531: LD_INT 1
48533: ARRAY
48534: PPUSH
48535: CALL 80747 0 2
48539: ST_TO_ADDR
48540: GO 48507
48542: POP
48543: POP
// result := tmp ;
48544: LD_ADDR_VAR 0 5
48548: PUSH
48549: LD_VAR 0 8
48553: ST_TO_ADDR
// end ; end ;
48554: LD_VAR 0 5
48558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48559: LD_INT 0
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
// if not list then
48565: LD_VAR 0 3
48569: NOT
48570: IFFALSE 48574
// exit ;
48572: GO 48964
// result := [ ] ;
48574: LD_ADDR_VAR 0 6
48578: PUSH
48579: EMPTY
48580: ST_TO_ADDR
// for i in list do
48581: LD_ADDR_VAR 0 7
48585: PUSH
48586: LD_VAR 0 3
48590: PUSH
48591: FOR_IN
48592: IFFALSE 48794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48594: LD_ADDR_VAR 0 9
48598: PUSH
48599: LD_VAR 0 7
48603: PPUSH
48604: LD_VAR 0 1
48608: PPUSH
48609: LD_VAR 0 2
48613: PPUSH
48614: CALL_OW 297
48618: ST_TO_ADDR
// if not result then
48619: LD_VAR 0 6
48623: NOT
48624: IFFALSE 48650
// result := [ [ i , tmp ] ] else
48626: LD_ADDR_VAR 0 6
48630: PUSH
48631: LD_VAR 0 7
48635: PUSH
48636: LD_VAR 0 9
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: ST_TO_ADDR
48648: GO 48792
// begin if result [ result ] [ 2 ] <= tmp then
48650: LD_VAR 0 6
48654: PUSH
48655: LD_VAR 0 6
48659: ARRAY
48660: PUSH
48661: LD_INT 2
48663: ARRAY
48664: PUSH
48665: LD_VAR 0 9
48669: LESSEQUAL
48670: IFFALSE 48712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48672: LD_ADDR_VAR 0 6
48676: PUSH
48677: LD_VAR 0 6
48681: PPUSH
48682: LD_VAR 0 6
48686: PUSH
48687: LD_INT 1
48689: PLUS
48690: PPUSH
48691: LD_VAR 0 7
48695: PUSH
48696: LD_VAR 0 9
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PPUSH
48705: CALL_OW 2
48709: ST_TO_ADDR
48710: GO 48792
// for j := 1 to result do
48712: LD_ADDR_VAR 0 8
48716: PUSH
48717: DOUBLE
48718: LD_INT 1
48720: DEC
48721: ST_TO_ADDR
48722: LD_VAR 0 6
48726: PUSH
48727: FOR_TO
48728: IFFALSE 48790
// begin if tmp < result [ j ] [ 2 ] then
48730: LD_VAR 0 9
48734: PUSH
48735: LD_VAR 0 6
48739: PUSH
48740: LD_VAR 0 8
48744: ARRAY
48745: PUSH
48746: LD_INT 2
48748: ARRAY
48749: LESS
48750: IFFALSE 48788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48752: LD_ADDR_VAR 0 6
48756: PUSH
48757: LD_VAR 0 6
48761: PPUSH
48762: LD_VAR 0 8
48766: PPUSH
48767: LD_VAR 0 7
48771: PUSH
48772: LD_VAR 0 9
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PPUSH
48781: CALL_OW 2
48785: ST_TO_ADDR
// break ;
48786: GO 48790
// end ; end ;
48788: GO 48727
48790: POP
48791: POP
// end ; end ;
48792: GO 48591
48794: POP
48795: POP
// if result and not asc then
48796: LD_VAR 0 6
48800: IFFALSE 48809
48802: PUSH
48803: LD_VAR 0 4
48807: NOT
48808: AND
48809: IFFALSE 48884
// begin tmp := result ;
48811: LD_ADDR_VAR 0 9
48815: PUSH
48816: LD_VAR 0 6
48820: ST_TO_ADDR
// for i = tmp downto 1 do
48821: LD_ADDR_VAR 0 7
48825: PUSH
48826: DOUBLE
48827: LD_VAR 0 9
48831: INC
48832: ST_TO_ADDR
48833: LD_INT 1
48835: PUSH
48836: FOR_DOWNTO
48837: IFFALSE 48882
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48839: LD_ADDR_VAR 0 6
48843: PUSH
48844: LD_VAR 0 6
48848: PPUSH
48849: LD_VAR 0 9
48853: PUSH
48854: LD_VAR 0 7
48858: MINUS
48859: PUSH
48860: LD_INT 1
48862: PLUS
48863: PPUSH
48864: LD_VAR 0 9
48868: PUSH
48869: LD_VAR 0 7
48873: ARRAY
48874: PPUSH
48875: CALL_OW 1
48879: ST_TO_ADDR
48880: GO 48836
48882: POP
48883: POP
// end ; tmp := [ ] ;
48884: LD_ADDR_VAR 0 9
48888: PUSH
48889: EMPTY
48890: ST_TO_ADDR
// if mode then
48891: LD_VAR 0 5
48895: IFFALSE 48964
// begin for i = 1 to result do
48897: LD_ADDR_VAR 0 7
48901: PUSH
48902: DOUBLE
48903: LD_INT 1
48905: DEC
48906: ST_TO_ADDR
48907: LD_VAR 0 6
48911: PUSH
48912: FOR_TO
48913: IFFALSE 48952
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48915: LD_ADDR_VAR 0 9
48919: PUSH
48920: LD_VAR 0 9
48924: PPUSH
48925: LD_VAR 0 7
48929: PPUSH
48930: LD_VAR 0 6
48934: PUSH
48935: LD_VAR 0 7
48939: ARRAY
48940: PUSH
48941: LD_INT 1
48943: ARRAY
48944: PPUSH
48945: CALL_OW 1
48949: ST_TO_ADDR
48950: GO 48912
48952: POP
48953: POP
// result := tmp ;
48954: LD_ADDR_VAR 0 6
48958: PUSH
48959: LD_VAR 0 9
48963: ST_TO_ADDR
// end ; end ;
48964: LD_VAR 0 6
48968: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48969: LD_INT 0
48971: PPUSH
48972: PPUSH
48973: PPUSH
48974: PPUSH
48975: PPUSH
48976: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48977: LD_ADDR_VAR 0 5
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// if not x or not y then
48999: LD_VAR 0 2
49003: NOT
49004: IFTRUE 49013
49006: PUSH
49007: LD_VAR 0 3
49011: NOT
49012: OR
49013: IFFALSE 49017
// exit ;
49015: GO 50673
// if not range then
49017: LD_VAR 0 4
49021: NOT
49022: IFFALSE 49032
// range := 10 ;
49024: LD_ADDR_VAR 0 4
49028: PUSH
49029: LD_INT 10
49031: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49032: LD_ADDR_VAR 0 8
49036: PUSH
49037: LD_INT 81
49039: PUSH
49040: LD_VAR 0 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 92
49051: PUSH
49052: LD_VAR 0 2
49056: PUSH
49057: LD_VAR 0 3
49061: PUSH
49062: LD_VAR 0 4
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 21
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: PPUSH
49095: CALL_OW 69
49099: ST_TO_ADDR
// if not tmp then
49100: LD_VAR 0 8
49104: NOT
49105: IFFALSE 49109
// exit ;
49107: GO 50673
// for i in tmp do
49109: LD_ADDR_VAR 0 6
49113: PUSH
49114: LD_VAR 0 8
49118: PUSH
49119: FOR_IN
49120: IFFALSE 50648
// begin points := [ 0 , 0 , 0 ] ;
49122: LD_ADDR_VAR 0 9
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: LIST
49140: ST_TO_ADDR
// bpoints := 1 ;
49141: LD_ADDR_VAR 0 10
49145: PUSH
49146: LD_INT 1
49148: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49149: LD_VAR 0 6
49153: PPUSH
49154: CALL_OW 247
49158: PUSH
49159: LD_INT 1
49161: DOUBLE
49162: EQUAL
49163: IFTRUE 49167
49165: GO 49749
49167: POP
// begin if GetClass ( i ) = 1 then
49168: LD_VAR 0 6
49172: PPUSH
49173: CALL_OW 257
49177: PUSH
49178: LD_INT 1
49180: EQUAL
49181: IFFALSE 49202
// points := [ 10 , 5 , 3 ] ;
49183: LD_ADDR_VAR 0 9
49187: PUSH
49188: LD_INT 10
49190: PUSH
49191: LD_INT 5
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49202: LD_VAR 0 6
49206: PPUSH
49207: CALL_OW 257
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: LD_INT 4
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: IN
49226: IFFALSE 49247
// points := [ 3 , 2 , 1 ] ;
49228: LD_ADDR_VAR 0 9
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49247: LD_VAR 0 6
49251: PPUSH
49252: CALL_OW 257
49256: PUSH
49257: LD_INT 5
49259: EQUAL
49260: IFFALSE 49281
// points := [ 130 , 5 , 2 ] ;
49262: LD_ADDR_VAR 0 9
49266: PUSH
49267: LD_INT 130
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49281: LD_VAR 0 6
49285: PPUSH
49286: CALL_OW 257
49290: PUSH
49291: LD_INT 8
49293: EQUAL
49294: IFFALSE 49315
// points := [ 35 , 35 , 30 ] ;
49296: LD_ADDR_VAR 0 9
49300: PUSH
49301: LD_INT 35
49303: PUSH
49304: LD_INT 35
49306: PUSH
49307: LD_INT 30
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49315: LD_VAR 0 6
49319: PPUSH
49320: CALL_OW 257
49324: PUSH
49325: LD_INT 9
49327: EQUAL
49328: IFFALSE 49349
// points := [ 20 , 55 , 40 ] ;
49330: LD_ADDR_VAR 0 9
49334: PUSH
49335: LD_INT 20
49337: PUSH
49338: LD_INT 55
49340: PUSH
49341: LD_INT 40
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49349: LD_VAR 0 6
49353: PPUSH
49354: CALL_OW 257
49358: PUSH
49359: LD_INT 12
49361: PUSH
49362: LD_INT 16
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: IN
49369: IFFALSE 49390
// points := [ 5 , 3 , 2 ] ;
49371: LD_ADDR_VAR 0 9
49375: PUSH
49376: LD_INT 5
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49390: LD_VAR 0 6
49394: PPUSH
49395: CALL_OW 257
49399: PUSH
49400: LD_INT 17
49402: EQUAL
49403: IFFALSE 49424
// points := [ 100 , 50 , 75 ] ;
49405: LD_ADDR_VAR 0 9
49409: PUSH
49410: LD_INT 100
49412: PUSH
49413: LD_INT 50
49415: PUSH
49416: LD_INT 75
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49424: LD_VAR 0 6
49428: PPUSH
49429: CALL_OW 257
49433: PUSH
49434: LD_INT 15
49436: EQUAL
49437: IFFALSE 49458
// points := [ 10 , 5 , 3 ] ;
49439: LD_ADDR_VAR 0 9
49443: PUSH
49444: LD_INT 10
49446: PUSH
49447: LD_INT 5
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49458: LD_VAR 0 6
49462: PPUSH
49463: CALL_OW 257
49467: PUSH
49468: LD_INT 14
49470: EQUAL
49471: IFFALSE 49492
// points := [ 10 , 0 , 0 ] ;
49473: LD_ADDR_VAR 0 9
49477: PUSH
49478: LD_INT 10
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49492: LD_VAR 0 6
49496: PPUSH
49497: CALL_OW 257
49501: PUSH
49502: LD_INT 11
49504: EQUAL
49505: IFFALSE 49526
// points := [ 30 , 10 , 5 ] ;
49507: LD_ADDR_VAR 0 9
49511: PUSH
49512: LD_INT 30
49514: PUSH
49515: LD_INT 10
49517: PUSH
49518: LD_INT 5
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49526: LD_VAR 0 1
49530: PPUSH
49531: LD_INT 5
49533: PPUSH
49534: CALL_OW 321
49538: PUSH
49539: LD_INT 2
49541: EQUAL
49542: IFFALSE 49559
// bpoints := bpoints * 1.8 ;
49544: LD_ADDR_VAR 0 10
49548: PUSH
49549: LD_VAR 0 10
49553: PUSH
49554: LD_REAL  1.80000000000000E+0000
49557: MUL
49558: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49559: LD_VAR 0 6
49563: PPUSH
49564: CALL_OW 257
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 4
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: IN
49587: IFFALSE 49607
49589: PUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: LD_INT 51
49597: PPUSH
49598: CALL_OW 321
49602: PUSH
49603: LD_INT 2
49605: EQUAL
49606: AND
49607: IFFALSE 49624
// bpoints := bpoints * 1.2 ;
49609: LD_ADDR_VAR 0 10
49613: PUSH
49614: LD_VAR 0 10
49618: PUSH
49619: LD_REAL  1.20000000000000E+0000
49622: MUL
49623: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49624: LD_VAR 0 6
49628: PPUSH
49629: CALL_OW 257
49633: PUSH
49634: LD_INT 5
49636: PUSH
49637: LD_INT 7
49639: PUSH
49640: LD_INT 9
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: IN
49648: IFFALSE 49668
49650: PUSH
49651: LD_VAR 0 1
49655: PPUSH
49656: LD_INT 52
49658: PPUSH
49659: CALL_OW 321
49663: PUSH
49664: LD_INT 2
49666: EQUAL
49667: AND
49668: IFFALSE 49685
// bpoints := bpoints * 1.5 ;
49670: LD_ADDR_VAR 0 10
49674: PUSH
49675: LD_VAR 0 10
49679: PUSH
49680: LD_REAL  1.50000000000000E+0000
49683: MUL
49684: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49685: LD_VAR 0 1
49689: PPUSH
49690: LD_INT 66
49692: PPUSH
49693: CALL_OW 321
49697: PUSH
49698: LD_INT 2
49700: EQUAL
49701: IFFALSE 49718
// bpoints := bpoints * 1.1 ;
49703: LD_ADDR_VAR 0 10
49707: PUSH
49708: LD_VAR 0 10
49712: PUSH
49713: LD_REAL  1.10000000000000E+0000
49716: MUL
49717: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49718: LD_ADDR_VAR 0 10
49722: PUSH
49723: LD_VAR 0 10
49727: PUSH
49728: LD_VAR 0 6
49732: PPUSH
49733: LD_INT 1
49735: PPUSH
49736: CALL_OW 259
49740: PUSH
49741: LD_REAL  1.15000000000000E+0000
49744: MUL
49745: MUL
49746: ST_TO_ADDR
// end ; unit_vehicle :
49747: GO 50577
49749: LD_INT 2
49751: DOUBLE
49752: EQUAL
49753: IFTRUE 49757
49755: GO 50565
49757: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49758: LD_VAR 0 6
49762: PPUSH
49763: CALL_OW 264
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 42
49773: PUSH
49774: LD_INT 24
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: IN
49782: IFFALSE 49803
// points := [ 25 , 5 , 3 ] ;
49784: LD_ADDR_VAR 0 9
49788: PUSH
49789: LD_INT 25
49791: PUSH
49792: LD_INT 5
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49803: LD_VAR 0 6
49807: PPUSH
49808: CALL_OW 264
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: LD_INT 43
49818: PUSH
49819: LD_INT 25
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: IN
49827: IFFALSE 49848
// points := [ 40 , 15 , 5 ] ;
49829: LD_ADDR_VAR 0 9
49833: PUSH
49834: LD_INT 40
49836: PUSH
49837: LD_INT 15
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49848: LD_VAR 0 6
49852: PPUSH
49853: CALL_OW 264
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 23
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: IN
49868: IFFALSE 49889
// points := [ 7 , 25 , 8 ] ;
49870: LD_ADDR_VAR 0 9
49874: PUSH
49875: LD_INT 7
49877: PUSH
49878: LD_INT 25
49880: PUSH
49881: LD_INT 8
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49889: LD_VAR 0 6
49893: PPUSH
49894: CALL_OW 264
49898: PUSH
49899: LD_INT 5
49901: PUSH
49902: LD_INT 27
49904: PUSH
49905: LD_INT 44
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: IN
49913: IFFALSE 49934
// points := [ 14 , 50 , 16 ] ;
49915: LD_ADDR_VAR 0 9
49919: PUSH
49920: LD_INT 14
49922: PUSH
49923: LD_INT 50
49925: PUSH
49926: LD_INT 16
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49934: LD_VAR 0 6
49938: PPUSH
49939: CALL_OW 264
49943: PUSH
49944: LD_INT 6
49946: PUSH
49947: LD_INT 46
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: IN
49954: IFFALSE 49975
// points := [ 32 , 120 , 70 ] ;
49956: LD_ADDR_VAR 0 9
49960: PUSH
49961: LD_INT 32
49963: PUSH
49964: LD_INT 120
49966: PUSH
49967: LD_INT 70
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49975: LD_VAR 0 6
49979: PPUSH
49980: CALL_OW 264
49984: PUSH
49985: LD_INT 7
49987: PUSH
49988: LD_INT 28
49990: PUSH
49991: LD_INT 45
49993: PUSH
49994: LD_INT 92
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: IN
50003: IFFALSE 50024
// points := [ 35 , 20 , 45 ] ;
50005: LD_ADDR_VAR 0 9
50009: PUSH
50010: LD_INT 35
50012: PUSH
50013: LD_INT 20
50015: PUSH
50016: LD_INT 45
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50024: LD_VAR 0 6
50028: PPUSH
50029: CALL_OW 264
50033: PUSH
50034: LD_INT 47
50036: PUSH
50037: EMPTY
50038: LIST
50039: IN
50040: IFFALSE 50061
// points := [ 67 , 45 , 75 ] ;
50042: LD_ADDR_VAR 0 9
50046: PUSH
50047: LD_INT 67
50049: PUSH
50050: LD_INT 45
50052: PUSH
50053: LD_INT 75
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50061: LD_VAR 0 6
50065: PPUSH
50066: CALL_OW 264
50070: PUSH
50071: LD_INT 26
50073: PUSH
50074: EMPTY
50075: LIST
50076: IN
50077: IFFALSE 50098
// points := [ 120 , 30 , 80 ] ;
50079: LD_ADDR_VAR 0 9
50083: PUSH
50084: LD_INT 120
50086: PUSH
50087: LD_INT 30
50089: PUSH
50090: LD_INT 80
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50098: LD_VAR 0 6
50102: PPUSH
50103: CALL_OW 264
50107: PUSH
50108: LD_INT 22
50110: PUSH
50111: EMPTY
50112: LIST
50113: IN
50114: IFFALSE 50135
// points := [ 40 , 1 , 1 ] ;
50116: LD_ADDR_VAR 0 9
50120: PUSH
50121: LD_INT 40
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50135: LD_VAR 0 6
50139: PPUSH
50140: CALL_OW 264
50144: PUSH
50145: LD_INT 29
50147: PUSH
50148: EMPTY
50149: LIST
50150: IN
50151: IFFALSE 50172
// points := [ 70 , 200 , 400 ] ;
50153: LD_ADDR_VAR 0 9
50157: PUSH
50158: LD_INT 70
50160: PUSH
50161: LD_INT 200
50163: PUSH
50164: LD_INT 400
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50172: LD_VAR 0 6
50176: PPUSH
50177: CALL_OW 264
50181: PUSH
50182: LD_INT 14
50184: PUSH
50185: LD_INT 53
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: IN
50192: IFFALSE 50213
// points := [ 40 , 10 , 20 ] ;
50194: LD_ADDR_VAR 0 9
50198: PUSH
50199: LD_INT 40
50201: PUSH
50202: LD_INT 10
50204: PUSH
50205: LD_INT 20
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50213: LD_VAR 0 6
50217: PPUSH
50218: CALL_OW 264
50222: PUSH
50223: LD_INT 9
50225: PUSH
50226: EMPTY
50227: LIST
50228: IN
50229: IFFALSE 50250
// points := [ 5 , 70 , 20 ] ;
50231: LD_ADDR_VAR 0 9
50235: PUSH
50236: LD_INT 5
50238: PUSH
50239: LD_INT 70
50241: PUSH
50242: LD_INT 20
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50250: LD_VAR 0 6
50254: PPUSH
50255: CALL_OW 264
50259: PUSH
50260: LD_INT 10
50262: PUSH
50263: EMPTY
50264: LIST
50265: IN
50266: IFFALSE 50287
// points := [ 35 , 110 , 70 ] ;
50268: LD_ADDR_VAR 0 9
50272: PUSH
50273: LD_INT 35
50275: PUSH
50276: LD_INT 110
50278: PUSH
50279: LD_INT 70
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50287: LD_VAR 0 6
50291: PPUSH
50292: CALL_OW 265
50296: PUSH
50297: LD_INT 25
50299: EQUAL
50300: IFFALSE 50321
// points := [ 80 , 65 , 100 ] ;
50302: LD_ADDR_VAR 0 9
50306: PUSH
50307: LD_INT 80
50309: PUSH
50310: LD_INT 65
50312: PUSH
50313: LD_INT 100
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50321: LD_VAR 0 6
50325: PPUSH
50326: CALL_OW 263
50330: PUSH
50331: LD_INT 1
50333: EQUAL
50334: IFFALSE 50369
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50336: LD_ADDR_VAR 0 10
50340: PUSH
50341: LD_VAR 0 10
50345: PUSH
50346: LD_VAR 0 6
50350: PPUSH
50351: CALL_OW 311
50355: PPUSH
50356: LD_INT 3
50358: PPUSH
50359: CALL_OW 259
50363: PUSH
50364: LD_INT 4
50366: MUL
50367: MUL
50368: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50369: LD_VAR 0 6
50373: PPUSH
50374: CALL_OW 263
50378: PUSH
50379: LD_INT 2
50381: EQUAL
50382: IFFALSE 50433
// begin j := IsControledBy ( i ) ;
50384: LD_ADDR_VAR 0 7
50388: PUSH
50389: LD_VAR 0 6
50393: PPUSH
50394: CALL_OW 312
50398: ST_TO_ADDR
// if j then
50399: LD_VAR 0 7
50403: IFFALSE 50433
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50405: LD_ADDR_VAR 0 10
50409: PUSH
50410: LD_VAR 0 10
50414: PUSH
50415: LD_VAR 0 7
50419: PPUSH
50420: LD_INT 3
50422: PPUSH
50423: CALL_OW 259
50427: PUSH
50428: LD_INT 3
50430: MUL
50431: MUL
50432: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50433: LD_VAR 0 6
50437: PPUSH
50438: CALL_OW 264
50442: PUSH
50443: LD_INT 5
50445: PUSH
50446: LD_INT 6
50448: PUSH
50449: LD_INT 46
50451: PUSH
50452: LD_INT 44
50454: PUSH
50455: LD_INT 47
50457: PUSH
50458: LD_INT 45
50460: PUSH
50461: LD_INT 28
50463: PUSH
50464: LD_INT 7
50466: PUSH
50467: LD_INT 27
50469: PUSH
50470: LD_INT 29
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: IN
50485: IFFALSE 50505
50487: PUSH
50488: LD_VAR 0 1
50492: PPUSH
50493: LD_INT 52
50495: PPUSH
50496: CALL_OW 321
50500: PUSH
50501: LD_INT 2
50503: EQUAL
50504: AND
50505: IFFALSE 50522
// bpoints := bpoints * 1.2 ;
50507: LD_ADDR_VAR 0 10
50511: PUSH
50512: LD_VAR 0 10
50516: PUSH
50517: LD_REAL  1.20000000000000E+0000
50520: MUL
50521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50522: LD_VAR 0 6
50526: PPUSH
50527: CALL_OW 264
50531: PUSH
50532: LD_INT 6
50534: PUSH
50535: LD_INT 46
50537: PUSH
50538: LD_INT 47
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: IN
50546: IFFALSE 50563
// bpoints := bpoints * 1.2 ;
50548: LD_ADDR_VAR 0 10
50552: PUSH
50553: LD_VAR 0 10
50557: PUSH
50558: LD_REAL  1.20000000000000E+0000
50561: MUL
50562: ST_TO_ADDR
// end ; unit_building :
50563: GO 50577
50565: LD_INT 3
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50573
50571: GO 50576
50573: POP
// ; end ;
50574: GO 50577
50576: POP
// for j = 1 to 3 do
50577: LD_ADDR_VAR 0 7
50581: PUSH
50582: DOUBLE
50583: LD_INT 1
50585: DEC
50586: ST_TO_ADDR
50587: LD_INT 3
50589: PUSH
50590: FOR_TO
50591: IFFALSE 50644
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50593: LD_ADDR_VAR 0 5
50597: PUSH
50598: LD_VAR 0 5
50602: PPUSH
50603: LD_VAR 0 7
50607: PPUSH
50608: LD_VAR 0 5
50612: PUSH
50613: LD_VAR 0 7
50617: ARRAY
50618: PUSH
50619: LD_VAR 0 9
50623: PUSH
50624: LD_VAR 0 7
50628: ARRAY
50629: PUSH
50630: LD_VAR 0 10
50634: MUL
50635: PLUS
50636: PPUSH
50637: CALL_OW 1
50641: ST_TO_ADDR
50642: GO 50590
50644: POP
50645: POP
// end ;
50646: GO 49119
50648: POP
50649: POP
// result := Replace ( result , 4 , tmp ) ;
50650: LD_ADDR_VAR 0 5
50654: PUSH
50655: LD_VAR 0 5
50659: PPUSH
50660: LD_INT 4
50662: PPUSH
50663: LD_VAR 0 8
50667: PPUSH
50668: CALL_OW 1
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 5
50677: RET
// export function DangerAtRange ( unit , range ) ; begin
50678: LD_INT 0
50680: PPUSH
// if not unit then
50681: LD_VAR 0 1
50685: NOT
50686: IFFALSE 50690
// exit ;
50688: GO 50735
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50690: LD_ADDR_VAR 0 3
50694: PUSH
50695: LD_VAR 0 1
50699: PPUSH
50700: CALL_OW 255
50704: PPUSH
50705: LD_VAR 0 1
50709: PPUSH
50710: CALL_OW 250
50714: PPUSH
50715: LD_VAR 0 1
50719: PPUSH
50720: CALL_OW 251
50724: PPUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: CALL 48969 0 4
50734: ST_TO_ADDR
// end ;
50735: LD_VAR 0 3
50739: RET
// export function DangerInArea ( side , area ) ; begin
50740: LD_INT 0
50742: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50743: LD_ADDR_VAR 0 3
50747: PUSH
50748: LD_VAR 0 2
50752: PPUSH
50753: LD_INT 81
50755: PUSH
50756: LD_VAR 0 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PPUSH
50765: CALL_OW 70
50769: ST_TO_ADDR
// end ;
50770: LD_VAR 0 3
50774: RET
// export function IsExtension ( b ) ; begin
50775: LD_INT 0
50777: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50778: LD_ADDR_VAR 0 2
50782: PUSH
50783: LD_VAR 0 1
50787: PUSH
50788: LD_INT 23
50790: PUSH
50791: LD_INT 20
50793: PUSH
50794: LD_INT 22
50796: PUSH
50797: LD_INT 17
50799: PUSH
50800: LD_INT 24
50802: PUSH
50803: LD_INT 21
50805: PUSH
50806: LD_INT 19
50808: PUSH
50809: LD_INT 16
50811: PUSH
50812: LD_INT 25
50814: PUSH
50815: LD_INT 18
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: IN
50830: ST_TO_ADDR
// end ;
50831: LD_VAR 0 2
50835: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50836: LD_INT 0
50838: PPUSH
50839: PPUSH
50840: PPUSH
// result := [ ] ;
50841: LD_ADDR_VAR 0 4
50845: PUSH
50846: EMPTY
50847: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50848: LD_ADDR_VAR 0 5
50852: PUSH
50853: LD_VAR 0 2
50857: PPUSH
50858: LD_INT 21
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PPUSH
50868: CALL_OW 70
50872: ST_TO_ADDR
// if not tmp then
50873: LD_VAR 0 5
50877: NOT
50878: IFFALSE 50882
// exit ;
50880: GO 50946
// if checkLink then
50882: LD_VAR 0 3
50886: IFFALSE 50936
// begin for i in tmp do
50888: LD_ADDR_VAR 0 6
50892: PUSH
50893: LD_VAR 0 5
50897: PUSH
50898: FOR_IN
50899: IFFALSE 50934
// if GetBase ( i ) <> base then
50901: LD_VAR 0 6
50905: PPUSH
50906: CALL_OW 274
50910: PUSH
50911: LD_VAR 0 1
50915: NONEQUAL
50916: IFFALSE 50932
// ComLinkToBase ( base , i ) ;
50918: LD_VAR 0 1
50922: PPUSH
50923: LD_VAR 0 6
50927: PPUSH
50928: CALL_OW 169
50932: GO 50898
50934: POP
50935: POP
// end ; result := tmp ;
50936: LD_ADDR_VAR 0 4
50940: PUSH
50941: LD_VAR 0 5
50945: ST_TO_ADDR
// end ;
50946: LD_VAR 0 4
50950: RET
// export function ComComplete ( units , b ) ; var i ; begin
50951: LD_INT 0
50953: PPUSH
50954: PPUSH
// if not units then
50955: LD_VAR 0 1
50959: NOT
50960: IFFALSE 50964
// exit ;
50962: GO 51054
// for i in units do
50964: LD_ADDR_VAR 0 4
50968: PUSH
50969: LD_VAR 0 1
50973: PUSH
50974: FOR_IN
50975: IFFALSE 51052
// if BuildingStatus ( b ) = bs_build then
50977: LD_VAR 0 2
50981: PPUSH
50982: CALL_OW 461
50986: PUSH
50987: LD_INT 1
50989: EQUAL
50990: IFFALSE 51050
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50992: LD_VAR 0 4
50996: PPUSH
50997: LD_STRING h
50999: PUSH
51000: LD_VAR 0 2
51004: PPUSH
51005: CALL_OW 250
51009: PUSH
51010: LD_VAR 0 2
51014: PPUSH
51015: CALL_OW 251
51019: PUSH
51020: LD_VAR 0 2
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: PPUSH
51046: CALL_OW 446
51050: GO 50974
51052: POP
51053: POP
// end ;
51054: LD_VAR 0 3
51058: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51059: LD_INT 0
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51067: LD_VAR 0 1
51071: NOT
51072: IFTRUE 51089
51074: PUSH
51075: LD_VAR 0 1
51079: PPUSH
51080: CALL_OW 263
51084: PUSH
51085: LD_INT 2
51087: NONEQUAL
51088: OR
51089: IFFALSE 51093
// exit ;
51091: GO 51409
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51093: LD_ADDR_VAR 0 6
51097: PUSH
51098: LD_INT 22
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 255
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: LD_INT 30
51120: PUSH
51121: LD_INT 36
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 34
51130: PUSH
51131: LD_INT 31
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PPUSH
51147: CALL_OW 69
51151: ST_TO_ADDR
// if not tmp then
51152: LD_VAR 0 6
51156: NOT
51157: IFFALSE 51161
// exit ;
51159: GO 51409
// result := [ ] ;
51161: LD_ADDR_VAR 0 2
51165: PUSH
51166: EMPTY
51167: ST_TO_ADDR
// for i in tmp do
51168: LD_ADDR_VAR 0 3
51172: PUSH
51173: LD_VAR 0 6
51177: PUSH
51178: FOR_IN
51179: IFFALSE 51250
// begin t := UnitsInside ( i ) ;
51181: LD_ADDR_VAR 0 4
51185: PUSH
51186: LD_VAR 0 3
51190: PPUSH
51191: CALL_OW 313
51195: ST_TO_ADDR
// if t then
51196: LD_VAR 0 4
51200: IFFALSE 51248
// for j in t do
51202: LD_ADDR_VAR 0 7
51206: PUSH
51207: LD_VAR 0 4
51211: PUSH
51212: FOR_IN
51213: IFFALSE 51246
// result := Replace ( result , result + 1 , j ) ;
51215: LD_ADDR_VAR 0 2
51219: PUSH
51220: LD_VAR 0 2
51224: PPUSH
51225: LD_VAR 0 2
51229: PUSH
51230: LD_INT 1
51232: PLUS
51233: PPUSH
51234: LD_VAR 0 7
51238: PPUSH
51239: CALL_OW 1
51243: ST_TO_ADDR
51244: GO 51212
51246: POP
51247: POP
// end ;
51248: GO 51178
51250: POP
51251: POP
// if not result then
51252: LD_VAR 0 2
51256: NOT
51257: IFFALSE 51261
// exit ;
51259: GO 51409
// mech := result [ 1 ] ;
51261: LD_ADDR_VAR 0 5
51265: PUSH
51266: LD_VAR 0 2
51270: PUSH
51271: LD_INT 1
51273: ARRAY
51274: ST_TO_ADDR
// if result > 1 then
51275: LD_VAR 0 2
51279: PUSH
51280: LD_INT 1
51282: GREATER
51283: IFFALSE 51395
// begin for i = 2 to result do
51285: LD_ADDR_VAR 0 3
51289: PUSH
51290: DOUBLE
51291: LD_INT 2
51293: DEC
51294: ST_TO_ADDR
51295: LD_VAR 0 2
51299: PUSH
51300: FOR_TO
51301: IFFALSE 51393
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51303: LD_ADDR_VAR 0 4
51307: PUSH
51308: LD_VAR 0 2
51312: PUSH
51313: LD_VAR 0 3
51317: ARRAY
51318: PPUSH
51319: LD_INT 3
51321: PPUSH
51322: CALL_OW 259
51326: PUSH
51327: LD_VAR 0 2
51331: PUSH
51332: LD_VAR 0 3
51336: ARRAY
51337: PPUSH
51338: CALL_OW 432
51342: MINUS
51343: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51344: LD_VAR 0 4
51348: PUSH
51349: LD_VAR 0 5
51353: PPUSH
51354: LD_INT 3
51356: PPUSH
51357: CALL_OW 259
51361: PUSH
51362: LD_VAR 0 5
51366: PPUSH
51367: CALL_OW 432
51371: MINUS
51372: GREATEREQUAL
51373: IFFALSE 51391
// mech := result [ i ] ;
51375: LD_ADDR_VAR 0 5
51379: PUSH
51380: LD_VAR 0 2
51384: PUSH
51385: LD_VAR 0 3
51389: ARRAY
51390: ST_TO_ADDR
// end ;
51391: GO 51300
51393: POP
51394: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51395: LD_VAR 0 1
51399: PPUSH
51400: LD_VAR 0 5
51404: PPUSH
51405: CALL_OW 135
// end ;
51409: LD_VAR 0 2
51413: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51414: LD_INT 0
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
// result := [ ] ;
51429: LD_ADDR_VAR 0 7
51433: PUSH
51434: EMPTY
51435: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51436: LD_VAR 0 1
51440: PPUSH
51441: CALL_OW 266
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: IN
51456: NOT
51457: IFFALSE 51461
// exit ;
51459: GO 53101
// if name then
51461: LD_VAR 0 3
51465: IFFALSE 51481
// SetBName ( base_dep , name ) ;
51467: LD_VAR 0 1
51471: PPUSH
51472: LD_VAR 0 3
51476: PPUSH
51477: CALL_OW 500
// base := GetBase ( base_dep ) ;
51481: LD_ADDR_VAR 0 15
51485: PUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 274
51495: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51496: LD_ADDR_VAR 0 16
51500: PUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: CALL_OW 255
51510: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51511: LD_ADDR_VAR 0 17
51515: PUSH
51516: LD_VAR 0 1
51520: PPUSH
51521: CALL_OW 248
51525: ST_TO_ADDR
// if sources then
51526: LD_VAR 0 5
51530: IFFALSE 51577
// for i = 1 to 3 do
51532: LD_ADDR_VAR 0 8
51536: PUSH
51537: DOUBLE
51538: LD_INT 1
51540: DEC
51541: ST_TO_ADDR
51542: LD_INT 3
51544: PUSH
51545: FOR_TO
51546: IFFALSE 51575
// AddResourceType ( base , i , sources [ i ] ) ;
51548: LD_VAR 0 15
51552: PPUSH
51553: LD_VAR 0 8
51557: PPUSH
51558: LD_VAR 0 5
51562: PUSH
51563: LD_VAR 0 8
51567: ARRAY
51568: PPUSH
51569: CALL_OW 276
51573: GO 51545
51575: POP
51576: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51577: LD_ADDR_VAR 0 18
51581: PUSH
51582: LD_VAR 0 15
51586: PPUSH
51587: LD_VAR 0 2
51591: PPUSH
51592: LD_INT 1
51594: PPUSH
51595: CALL 50836 0 3
51599: ST_TO_ADDR
// InitHc ;
51600: CALL_OW 19
// InitUc ;
51604: CALL_OW 18
// uc_side := side ;
51608: LD_ADDR_OWVAR 20
51612: PUSH
51613: LD_VAR 0 16
51617: ST_TO_ADDR
// uc_nation := nation ;
51618: LD_ADDR_OWVAR 21
51622: PUSH
51623: LD_VAR 0 17
51627: ST_TO_ADDR
// if buildings then
51628: LD_VAR 0 18
51632: IFFALSE 52960
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51634: LD_ADDR_VAR 0 19
51638: PUSH
51639: LD_VAR 0 18
51643: PPUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 30
51649: PUSH
51650: LD_INT 29
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 30
51659: PUSH
51660: LD_INT 30
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: PPUSH
51672: CALL_OW 72
51676: ST_TO_ADDR
// if tmp then
51677: LD_VAR 0 19
51681: IFFALSE 51729
// for i in tmp do
51683: LD_ADDR_VAR 0 8
51687: PUSH
51688: LD_VAR 0 19
51692: PUSH
51693: FOR_IN
51694: IFFALSE 51727
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51696: LD_VAR 0 8
51700: PPUSH
51701: CALL_OW 250
51705: PPUSH
51706: LD_VAR 0 8
51710: PPUSH
51711: CALL_OW 251
51715: PPUSH
51716: LD_VAR 0 16
51720: PPUSH
51721: CALL_OW 441
51725: GO 51693
51727: POP
51728: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51729: LD_VAR 0 18
51733: PPUSH
51734: LD_INT 2
51736: PUSH
51737: LD_INT 30
51739: PUSH
51740: LD_INT 32
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 30
51749: PUSH
51750: LD_INT 33
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: PPUSH
51762: CALL_OW 72
51766: IFFALSE 51854
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51768: LD_ADDR_VAR 0 8
51772: PUSH
51773: LD_VAR 0 18
51777: PPUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 30
51783: PUSH
51784: LD_INT 32
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 30
51793: PUSH
51794: LD_INT 33
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: PPUSH
51806: CALL_OW 72
51810: PUSH
51811: FOR_IN
51812: IFFALSE 51852
// begin if not GetBWeapon ( i ) then
51814: LD_VAR 0 8
51818: PPUSH
51819: CALL_OW 269
51823: NOT
51824: IFFALSE 51850
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51826: LD_VAR 0 8
51830: PPUSH
51831: LD_VAR 0 8
51835: PPUSH
51836: LD_VAR 0 2
51840: PPUSH
51841: CALL 53106 0 2
51845: PPUSH
51846: CALL_OW 431
// end ;
51850: GO 51811
51852: POP
51853: POP
// end ; for i = 1 to personel do
51854: LD_ADDR_VAR 0 8
51858: PUSH
51859: DOUBLE
51860: LD_INT 1
51862: DEC
51863: ST_TO_ADDR
51864: LD_VAR 0 6
51868: PUSH
51869: FOR_TO
51870: IFFALSE 52940
// begin if i > 4 then
51872: LD_VAR 0 8
51876: PUSH
51877: LD_INT 4
51879: GREATER
51880: IFFALSE 51884
// break ;
51882: GO 52940
// case i of 1 :
51884: LD_VAR 0 8
51888: PUSH
51889: LD_INT 1
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51977
51897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51898: LD_ADDR_VAR 0 12
51902: PUSH
51903: LD_VAR 0 18
51907: PPUSH
51908: LD_INT 22
51910: PUSH
51911: LD_VAR 0 16
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 58
51922: PUSH
51923: EMPTY
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 30
51931: PUSH
51932: LD_INT 32
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 30
51941: PUSH
51942: LD_INT 4
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 30
51951: PUSH
51952: LD_INT 5
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: PPUSH
51970: CALL_OW 72
51974: ST_TO_ADDR
51975: GO 52199
51977: LD_INT 2
51979: DOUBLE
51980: EQUAL
51981: IFTRUE 51985
51983: GO 52047
51985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51986: LD_ADDR_VAR 0 12
51990: PUSH
51991: LD_VAR 0 18
51995: PPUSH
51996: LD_INT 22
51998: PUSH
51999: LD_VAR 0 16
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: LD_INT 30
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 30
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PPUSH
52040: CALL_OW 72
52044: ST_TO_ADDR
52045: GO 52199
52047: LD_INT 3
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52055
52053: GO 52117
52055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52056: LD_ADDR_VAR 0 12
52060: PUSH
52061: LD_VAR 0 18
52065: PPUSH
52066: LD_INT 22
52068: PUSH
52069: LD_VAR 0 16
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 30
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 30
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PPUSH
52110: CALL_OW 72
52114: ST_TO_ADDR
52115: GO 52199
52117: LD_INT 4
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52125
52123: GO 52198
52125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52126: LD_ADDR_VAR 0 12
52130: PUSH
52131: LD_VAR 0 18
52135: PPUSH
52136: LD_INT 22
52138: PUSH
52139: LD_VAR 0 16
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 30
52153: PUSH
52154: LD_INT 6
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 30
52163: PUSH
52164: LD_INT 7
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 30
52173: PUSH
52174: LD_INT 8
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PPUSH
52191: CALL_OW 72
52195: ST_TO_ADDR
52196: GO 52199
52198: POP
// if i = 1 then
52199: LD_VAR 0 8
52203: PUSH
52204: LD_INT 1
52206: EQUAL
52207: IFFALSE 52318
// begin tmp := [ ] ;
52209: LD_ADDR_VAR 0 19
52213: PUSH
52214: EMPTY
52215: ST_TO_ADDR
// for j in f do
52216: LD_ADDR_VAR 0 9
52220: PUSH
52221: LD_VAR 0 12
52225: PUSH
52226: FOR_IN
52227: IFFALSE 52300
// if GetBType ( j ) = b_bunker then
52229: LD_VAR 0 9
52233: PPUSH
52234: CALL_OW 266
52238: PUSH
52239: LD_INT 32
52241: EQUAL
52242: IFFALSE 52269
// tmp := Insert ( tmp , 1 , j ) else
52244: LD_ADDR_VAR 0 19
52248: PUSH
52249: LD_VAR 0 19
52253: PPUSH
52254: LD_INT 1
52256: PPUSH
52257: LD_VAR 0 9
52261: PPUSH
52262: CALL_OW 2
52266: ST_TO_ADDR
52267: GO 52298
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52269: LD_ADDR_VAR 0 19
52273: PUSH
52274: LD_VAR 0 19
52278: PPUSH
52279: LD_VAR 0 19
52283: PUSH
52284: LD_INT 1
52286: PLUS
52287: PPUSH
52288: LD_VAR 0 9
52292: PPUSH
52293: CALL_OW 2
52297: ST_TO_ADDR
52298: GO 52226
52300: POP
52301: POP
// if tmp then
52302: LD_VAR 0 19
52306: IFFALSE 52318
// f := tmp ;
52308: LD_ADDR_VAR 0 12
52312: PUSH
52313: LD_VAR 0 19
52317: ST_TO_ADDR
// end ; x := personel [ i ] ;
52318: LD_ADDR_VAR 0 13
52322: PUSH
52323: LD_VAR 0 6
52327: PUSH
52328: LD_VAR 0 8
52332: ARRAY
52333: ST_TO_ADDR
// if x = - 1 then
52334: LD_VAR 0 13
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: EQUAL
52343: IFFALSE 52554
// begin for j in f do
52345: LD_ADDR_VAR 0 9
52349: PUSH
52350: LD_VAR 0 12
52354: PUSH
52355: FOR_IN
52356: IFFALSE 52550
// repeat InitHc ;
52358: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52362: LD_VAR 0 9
52366: PPUSH
52367: CALL_OW 266
52371: PUSH
52372: LD_INT 5
52374: EQUAL
52375: IFFALSE 52445
// begin if UnitsInside ( j ) < 3 then
52377: LD_VAR 0 9
52381: PPUSH
52382: CALL_OW 313
52386: PUSH
52387: LD_INT 3
52389: LESS
52390: IFFALSE 52426
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52392: LD_INT 0
52394: PPUSH
52395: LD_INT 5
52397: PUSH
52398: LD_INT 8
52400: PUSH
52401: LD_INT 9
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: PUSH
52409: LD_VAR 0 17
52413: ARRAY
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: CALL_OW 380
52424: GO 52443
// PrepareHuman ( false , i , skill ) ;
52426: LD_INT 0
52428: PPUSH
52429: LD_VAR 0 8
52433: PPUSH
52434: LD_VAR 0 4
52438: PPUSH
52439: CALL_OW 380
// end else
52443: GO 52462
// PrepareHuman ( false , i , skill ) ;
52445: LD_INT 0
52447: PPUSH
52448: LD_VAR 0 8
52452: PPUSH
52453: LD_VAR 0 4
52457: PPUSH
52458: CALL_OW 380
// un := CreateHuman ;
52462: LD_ADDR_VAR 0 14
52466: PUSH
52467: CALL_OW 44
52471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52472: LD_ADDR_VAR 0 7
52476: PUSH
52477: LD_VAR 0 7
52481: PPUSH
52482: LD_INT 1
52484: PPUSH
52485: LD_VAR 0 14
52489: PPUSH
52490: CALL_OW 2
52494: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52495: LD_VAR 0 14
52499: PPUSH
52500: LD_VAR 0 9
52504: PPUSH
52505: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52509: LD_VAR 0 9
52513: PPUSH
52514: CALL_OW 313
52518: PUSH
52519: LD_INT 6
52521: EQUAL
52522: IFTRUE 52546
52524: PUSH
52525: LD_VAR 0 9
52529: PPUSH
52530: CALL_OW 266
52534: PUSH
52535: LD_INT 32
52537: PUSH
52538: LD_INT 31
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: IN
52545: OR
52546: IFFALSE 52358
52548: GO 52355
52550: POP
52551: POP
// end else
52552: GO 52938
// for j = 1 to x do
52554: LD_ADDR_VAR 0 9
52558: PUSH
52559: DOUBLE
52560: LD_INT 1
52562: DEC
52563: ST_TO_ADDR
52564: LD_VAR 0 13
52568: PUSH
52569: FOR_TO
52570: IFFALSE 52936
// begin InitHc ;
52572: CALL_OW 19
// if not f then
52576: LD_VAR 0 12
52580: NOT
52581: IFFALSE 52670
// begin PrepareHuman ( false , i , skill ) ;
52583: LD_INT 0
52585: PPUSH
52586: LD_VAR 0 8
52590: PPUSH
52591: LD_VAR 0 4
52595: PPUSH
52596: CALL_OW 380
// un := CreateHuman ;
52600: LD_ADDR_VAR 0 14
52604: PUSH
52605: CALL_OW 44
52609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52610: LD_ADDR_VAR 0 7
52614: PUSH
52615: LD_VAR 0 7
52619: PPUSH
52620: LD_INT 1
52622: PPUSH
52623: LD_VAR 0 14
52627: PPUSH
52628: CALL_OW 2
52632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52633: LD_VAR 0 14
52637: PPUSH
52638: LD_VAR 0 1
52642: PPUSH
52643: CALL_OW 250
52647: PPUSH
52648: LD_VAR 0 1
52652: PPUSH
52653: CALL_OW 251
52657: PPUSH
52658: LD_INT 10
52660: PPUSH
52661: LD_INT 0
52663: PPUSH
52664: CALL_OW 50
// continue ;
52668: GO 52569
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52670: LD_VAR 0 12
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PPUSH
52679: CALL_OW 313
52683: IFFALSE 52711
52685: PUSH
52686: LD_VAR 0 12
52690: PUSH
52691: LD_INT 1
52693: ARRAY
52694: PPUSH
52695: CALL_OW 266
52699: PUSH
52700: LD_INT 32
52702: PUSH
52703: LD_INT 31
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: IN
52710: AND
52711: IFTRUE 52732
52713: PUSH
52714: LD_VAR 0 12
52718: PUSH
52719: LD_INT 1
52721: ARRAY
52722: PPUSH
52723: CALL_OW 313
52727: PUSH
52728: LD_INT 6
52730: EQUAL
52731: OR
52732: IFFALSE 52752
// f := Delete ( f , 1 ) ;
52734: LD_ADDR_VAR 0 12
52738: PUSH
52739: LD_VAR 0 12
52743: PPUSH
52744: LD_INT 1
52746: PPUSH
52747: CALL_OW 3
52751: ST_TO_ADDR
// if not f then
52752: LD_VAR 0 12
52756: NOT
52757: IFFALSE 52775
// begin x := x + 2 ;
52759: LD_ADDR_VAR 0 13
52763: PUSH
52764: LD_VAR 0 13
52768: PUSH
52769: LD_INT 2
52771: PLUS
52772: ST_TO_ADDR
// continue ;
52773: GO 52569
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52775: LD_VAR 0 12
52779: PUSH
52780: LD_INT 1
52782: ARRAY
52783: PPUSH
52784: CALL_OW 266
52788: PUSH
52789: LD_INT 5
52791: EQUAL
52792: IFFALSE 52866
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52794: LD_VAR 0 12
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: PPUSH
52803: CALL_OW 313
52807: PUSH
52808: LD_INT 3
52810: LESS
52811: IFFALSE 52847
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52813: LD_INT 0
52815: PPUSH
52816: LD_INT 5
52818: PUSH
52819: LD_INT 8
52821: PUSH
52822: LD_INT 9
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: PUSH
52830: LD_VAR 0 17
52834: ARRAY
52835: PPUSH
52836: LD_VAR 0 4
52840: PPUSH
52841: CALL_OW 380
52845: GO 52864
// PrepareHuman ( false , i , skill ) ;
52847: LD_INT 0
52849: PPUSH
52850: LD_VAR 0 8
52854: PPUSH
52855: LD_VAR 0 4
52859: PPUSH
52860: CALL_OW 380
// end else
52864: GO 52883
// PrepareHuman ( false , i , skill ) ;
52866: LD_INT 0
52868: PPUSH
52869: LD_VAR 0 8
52873: PPUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: CALL_OW 380
// un := CreateHuman ;
52883: LD_ADDR_VAR 0 14
52887: PUSH
52888: CALL_OW 44
52892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52893: LD_ADDR_VAR 0 7
52897: PUSH
52898: LD_VAR 0 7
52902: PPUSH
52903: LD_INT 1
52905: PPUSH
52906: LD_VAR 0 14
52910: PPUSH
52911: CALL_OW 2
52915: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52916: LD_VAR 0 14
52920: PPUSH
52921: LD_VAR 0 12
52925: PUSH
52926: LD_INT 1
52928: ARRAY
52929: PPUSH
52930: CALL_OW 52
// end ;
52934: GO 52569
52936: POP
52937: POP
// end ;
52938: GO 51869
52940: POP
52941: POP
// result := result ^ buildings ;
52942: LD_ADDR_VAR 0 7
52946: PUSH
52947: LD_VAR 0 7
52951: PUSH
52952: LD_VAR 0 18
52956: ADD
52957: ST_TO_ADDR
// end else
52958: GO 53101
// begin for i = 1 to personel do
52960: LD_ADDR_VAR 0 8
52964: PUSH
52965: DOUBLE
52966: LD_INT 1
52968: DEC
52969: ST_TO_ADDR
52970: LD_VAR 0 6
52974: PUSH
52975: FOR_TO
52976: IFFALSE 53099
// begin if i > 4 then
52978: LD_VAR 0 8
52982: PUSH
52983: LD_INT 4
52985: GREATER
52986: IFFALSE 52990
// break ;
52988: GO 53099
// x := personel [ i ] ;
52990: LD_ADDR_VAR 0 13
52994: PUSH
52995: LD_VAR 0 6
52999: PUSH
53000: LD_VAR 0 8
53004: ARRAY
53005: ST_TO_ADDR
// if x = - 1 then
53006: LD_VAR 0 13
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: EQUAL
53015: IFFALSE 53019
// continue ;
53017: GO 52975
// PrepareHuman ( false , i , skill ) ;
53019: LD_INT 0
53021: PPUSH
53022: LD_VAR 0 8
53026: PPUSH
53027: LD_VAR 0 4
53031: PPUSH
53032: CALL_OW 380
// un := CreateHuman ;
53036: LD_ADDR_VAR 0 14
53040: PUSH
53041: CALL_OW 44
53045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53046: LD_VAR 0 14
53050: PPUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 250
53060: PPUSH
53061: LD_VAR 0 1
53065: PPUSH
53066: CALL_OW 251
53070: PPUSH
53071: LD_INT 10
53073: PPUSH
53074: LD_INT 0
53076: PPUSH
53077: CALL_OW 50
// result := result ^ un ;
53081: LD_ADDR_VAR 0 7
53085: PUSH
53086: LD_VAR 0 7
53090: PUSH
53091: LD_VAR 0 14
53095: ADD
53096: ST_TO_ADDR
// end ;
53097: GO 52975
53099: POP
53100: POP
// end ; end ;
53101: LD_VAR 0 7
53105: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
// result := false ;
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 0
53131: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53132: LD_VAR 0 1
53136: NOT
53137: IFTRUE 53162
53139: PUSH
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 266
53149: PUSH
53150: LD_INT 32
53152: PUSH
53153: LD_INT 33
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: IN
53160: NOT
53161: OR
53162: IFFALSE 53166
// exit ;
53164: GO 54301
// nat := GetNation ( tower ) ;
53166: LD_ADDR_VAR 0 12
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 248
53180: ST_TO_ADDR
// side := GetSide ( tower ) ;
53181: LD_ADDR_VAR 0 16
53185: PUSH
53186: LD_VAR 0 1
53190: PPUSH
53191: CALL_OW 255
53195: ST_TO_ADDR
// x := GetX ( tower ) ;
53196: LD_ADDR_VAR 0 10
53200: PUSH
53201: LD_VAR 0 1
53205: PPUSH
53206: CALL_OW 250
53210: ST_TO_ADDR
// y := GetY ( tower ) ;
53211: LD_ADDR_VAR 0 11
53215: PUSH
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL_OW 251
53225: ST_TO_ADDR
// if not x or not y then
53226: LD_VAR 0 10
53230: NOT
53231: IFTRUE 53240
53233: PUSH
53234: LD_VAR 0 11
53238: NOT
53239: OR
53240: IFFALSE 53244
// exit ;
53242: GO 54301
// weapon := 0 ;
53244: LD_ADDR_VAR 0 18
53248: PUSH
53249: LD_INT 0
53251: ST_TO_ADDR
// fac_list := [ ] ;
53252: LD_ADDR_VAR 0 17
53256: PUSH
53257: EMPTY
53258: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53259: LD_ADDR_VAR 0 6
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 274
53273: PPUSH
53274: LD_VAR 0 2
53278: PPUSH
53279: LD_INT 0
53281: PPUSH
53282: CALL 50836 0 3
53286: PPUSH
53287: LD_INT 30
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PPUSH
53297: CALL_OW 72
53301: ST_TO_ADDR
// if not factories then
53302: LD_VAR 0 6
53306: NOT
53307: IFFALSE 53311
// exit ;
53309: GO 54301
// for i in factories do
53311: LD_ADDR_VAR 0 8
53315: PUSH
53316: LD_VAR 0 6
53320: PUSH
53321: FOR_IN
53322: IFFALSE 53347
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53324: LD_ADDR_VAR 0 17
53328: PUSH
53329: LD_VAR 0 17
53333: PUSH
53334: LD_VAR 0 8
53338: PPUSH
53339: CALL_OW 478
53343: UNION
53344: ST_TO_ADDR
53345: GO 53321
53347: POP
53348: POP
// if not fac_list then
53349: LD_VAR 0 17
53353: NOT
53354: IFFALSE 53358
// exit ;
53356: GO 54301
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53358: LD_ADDR_VAR 0 5
53362: PUSH
53363: LD_INT 4
53365: PUSH
53366: LD_INT 5
53368: PUSH
53369: LD_INT 9
53371: PUSH
53372: LD_INT 10
53374: PUSH
53375: LD_INT 6
53377: PUSH
53378: LD_INT 7
53380: PUSH
53381: LD_INT 11
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 27
53395: PUSH
53396: LD_INT 28
53398: PUSH
53399: LD_INT 26
53401: PUSH
53402: LD_INT 30
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 43
53413: PUSH
53414: LD_INT 44
53416: PUSH
53417: LD_INT 46
53419: PUSH
53420: LD_INT 45
53422: PUSH
53423: LD_INT 47
53425: PUSH
53426: LD_INT 49
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: PUSH
53442: LD_VAR 0 12
53446: ARRAY
53447: ST_TO_ADDR
// list := list isect fac_list ;
53448: LD_ADDR_VAR 0 5
53452: PUSH
53453: LD_VAR 0 5
53457: PUSH
53458: LD_VAR 0 17
53462: ISECT
53463: ST_TO_ADDR
// if not list then
53464: LD_VAR 0 5
53468: NOT
53469: IFFALSE 53473
// exit ;
53471: GO 54301
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53473: LD_VAR 0 12
53477: PUSH
53478: LD_INT 3
53480: EQUAL
53481: IFFALSE 53493
53483: PUSH
53484: LD_INT 49
53486: PUSH
53487: LD_VAR 0 5
53491: IN
53492: AND
53493: IFFALSE 53513
53495: PUSH
53496: LD_INT 31
53498: PPUSH
53499: LD_VAR 0 16
53503: PPUSH
53504: CALL_OW 321
53508: PUSH
53509: LD_INT 2
53511: EQUAL
53512: AND
53513: IFFALSE 53573
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53515: LD_INT 22
53517: PUSH
53518: LD_VAR 0 16
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 35
53529: PUSH
53530: LD_INT 49
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 91
53539: PUSH
53540: LD_VAR 0 1
53544: PUSH
53545: LD_INT 10
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: PPUSH
53558: CALL_OW 69
53562: NOT
53563: IFFALSE 53573
// weapon := ru_time_lapser ;
53565: LD_ADDR_VAR 0 18
53569: PUSH
53570: LD_INT 49
53572: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53573: LD_VAR 0 12
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: IN
53588: IFFALSE 53612
53590: PUSH
53591: LD_INT 11
53593: PUSH
53594: LD_VAR 0 5
53598: IN
53599: IFTRUE 53611
53601: PUSH
53602: LD_INT 30
53604: PUSH
53605: LD_VAR 0 5
53609: IN
53610: OR
53611: AND
53612: IFFALSE 53632
53614: PUSH
53615: LD_INT 6
53617: PPUSH
53618: LD_VAR 0 16
53622: PPUSH
53623: CALL_OW 321
53627: PUSH
53628: LD_INT 2
53630: EQUAL
53631: AND
53632: IFFALSE 53799
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53634: LD_INT 22
53636: PUSH
53637: LD_VAR 0 16
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 35
53651: PUSH
53652: LD_INT 11
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 35
53661: PUSH
53662: LD_INT 30
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 91
53676: PUSH
53677: LD_VAR 0 1
53681: PUSH
53682: LD_INT 18
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: PPUSH
53695: CALL_OW 69
53699: NOT
53700: IFFALSE 53776
53702: PUSH
53703: LD_INT 22
53705: PUSH
53706: LD_VAR 0 16
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 30
53720: PUSH
53721: LD_INT 32
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 30
53730: PUSH
53731: LD_INT 33
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 91
53745: PUSH
53746: LD_VAR 0 1
53750: PUSH
53751: LD_INT 12
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: PPUSH
53767: CALL_OW 69
53771: PUSH
53772: LD_INT 2
53774: GREATER
53775: AND
53776: IFFALSE 53799
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53778: LD_ADDR_VAR 0 18
53782: PUSH
53783: LD_INT 11
53785: PUSH
53786: LD_INT 30
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_VAR 0 12
53797: ARRAY
53798: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53799: LD_VAR 0 18
53803: NOT
53804: IFFALSE 53824
53806: PUSH
53807: LD_INT 40
53809: PPUSH
53810: LD_VAR 0 16
53814: PPUSH
53815: CALL_OW 321
53819: PUSH
53820: LD_INT 2
53822: EQUAL
53823: AND
53824: IFFALSE 53860
53826: PUSH
53827: LD_INT 7
53829: PUSH
53830: LD_VAR 0 5
53834: IN
53835: IFTRUE 53847
53837: PUSH
53838: LD_INT 28
53840: PUSH
53841: LD_VAR 0 5
53845: IN
53846: OR
53847: IFTRUE 53859
53849: PUSH
53850: LD_INT 45
53852: PUSH
53853: LD_VAR 0 5
53857: IN
53858: OR
53859: AND
53860: IFFALSE 54114
// begin hex := GetHexInfo ( x , y ) ;
53862: LD_ADDR_VAR 0 4
53866: PUSH
53867: LD_VAR 0 10
53871: PPUSH
53872: LD_VAR 0 11
53876: PPUSH
53877: CALL_OW 546
53881: ST_TO_ADDR
// if hex [ 1 ] then
53882: LD_VAR 0 4
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: IFFALSE 53894
// exit ;
53892: GO 54301
// height := hex [ 2 ] ;
53894: LD_ADDR_VAR 0 15
53898: PUSH
53899: LD_VAR 0 4
53903: PUSH
53904: LD_INT 2
53906: ARRAY
53907: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53908: LD_ADDR_VAR 0 14
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 5
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// for i in tmp do
53931: LD_ADDR_VAR 0 8
53935: PUSH
53936: LD_VAR 0 14
53940: PUSH
53941: FOR_IN
53942: IFFALSE 54112
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53944: LD_ADDR_VAR 0 9
53948: PUSH
53949: LD_VAR 0 10
53953: PPUSH
53954: LD_VAR 0 8
53958: PPUSH
53959: LD_INT 5
53961: PPUSH
53962: CALL_OW 272
53966: PUSH
53967: LD_VAR 0 11
53971: PPUSH
53972: LD_VAR 0 8
53976: PPUSH
53977: LD_INT 5
53979: PPUSH
53980: CALL_OW 273
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53989: LD_VAR 0 9
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PPUSH
53998: LD_VAR 0 9
54002: PUSH
54003: LD_INT 2
54005: ARRAY
54006: PPUSH
54007: CALL_OW 488
54011: IFFALSE 54110
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54013: LD_ADDR_VAR 0 4
54017: PUSH
54018: LD_VAR 0 9
54022: PUSH
54023: LD_INT 1
54025: ARRAY
54026: PPUSH
54027: LD_VAR 0 9
54031: PUSH
54032: LD_INT 2
54034: ARRAY
54035: PPUSH
54036: CALL_OW 546
54040: ST_TO_ADDR
// if hex [ 1 ] then
54041: LD_VAR 0 4
54045: PUSH
54046: LD_INT 1
54048: ARRAY
54049: IFFALSE 54053
// continue ;
54051: GO 53941
// h := hex [ 2 ] ;
54053: LD_ADDR_VAR 0 13
54057: PUSH
54058: LD_VAR 0 4
54062: PUSH
54063: LD_INT 2
54065: ARRAY
54066: ST_TO_ADDR
// if h + 7 < height then
54067: LD_VAR 0 13
54071: PUSH
54072: LD_INT 7
54074: PLUS
54075: PUSH
54076: LD_VAR 0 15
54080: LESS
54081: IFFALSE 54110
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54083: LD_ADDR_VAR 0 18
54087: PUSH
54088: LD_INT 7
54090: PUSH
54091: LD_INT 28
54093: PUSH
54094: LD_INT 45
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: PUSH
54102: LD_VAR 0 12
54106: ARRAY
54107: ST_TO_ADDR
// break ;
54108: GO 54112
// end ; end ; end ;
54110: GO 53941
54112: POP
54113: POP
// end ; if not weapon then
54114: LD_VAR 0 18
54118: NOT
54119: IFFALSE 54179
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54121: LD_ADDR_VAR 0 5
54125: PUSH
54126: LD_VAR 0 5
54130: PUSH
54131: LD_INT 11
54133: PUSH
54134: LD_INT 30
54136: PUSH
54137: LD_INT 49
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: DIFF
54145: ST_TO_ADDR
// if not list then
54146: LD_VAR 0 5
54150: NOT
54151: IFFALSE 54155
// exit ;
54153: GO 54301
// weapon := list [ rand ( 1 , list ) ] ;
54155: LD_ADDR_VAR 0 18
54159: PUSH
54160: LD_VAR 0 5
54164: PUSH
54165: LD_INT 1
54167: PPUSH
54168: LD_VAR 0 5
54172: PPUSH
54173: CALL_OW 12
54177: ARRAY
54178: ST_TO_ADDR
// end ; if weapon then
54179: LD_VAR 0 18
54183: IFFALSE 54301
// begin tmp := CostOfWeapon ( weapon ) ;
54185: LD_ADDR_VAR 0 14
54189: PUSH
54190: LD_VAR 0 18
54194: PPUSH
54195: CALL_OW 451
54199: ST_TO_ADDR
// j := GetBase ( tower ) ;
54200: LD_ADDR_VAR 0 9
54204: PUSH
54205: LD_VAR 0 1
54209: PPUSH
54210: CALL_OW 274
54214: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54215: LD_VAR 0 9
54219: PPUSH
54220: LD_INT 1
54222: PPUSH
54223: CALL_OW 275
54227: PUSH
54228: LD_VAR 0 14
54232: PUSH
54233: LD_INT 1
54235: ARRAY
54236: GREATEREQUAL
54237: IFFALSE 54263
54239: PUSH
54240: LD_VAR 0 9
54244: PPUSH
54245: LD_INT 2
54247: PPUSH
54248: CALL_OW 275
54252: PUSH
54253: LD_VAR 0 14
54257: PUSH
54258: LD_INT 2
54260: ARRAY
54261: GREATEREQUAL
54262: AND
54263: IFFALSE 54289
54265: PUSH
54266: LD_VAR 0 9
54270: PPUSH
54271: LD_INT 3
54273: PPUSH
54274: CALL_OW 275
54278: PUSH
54279: LD_VAR 0 14
54283: PUSH
54284: LD_INT 3
54286: ARRAY
54287: GREATEREQUAL
54288: AND
54289: IFFALSE 54301
// result := weapon ;
54291: LD_ADDR_VAR 0 3
54295: PUSH
54296: LD_VAR 0 18
54300: ST_TO_ADDR
// end ; end ;
54301: LD_VAR 0 3
54305: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54306: LD_INT 0
54308: PPUSH
54309: PPUSH
// result := true ;
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_INT 1
54317: ST_TO_ADDR
// if array1 = array2 then
54318: LD_VAR 0 1
54322: PUSH
54323: LD_VAR 0 2
54327: EQUAL
54328: IFFALSE 54388
// begin for i = 1 to array1 do
54330: LD_ADDR_VAR 0 4
54334: PUSH
54335: DOUBLE
54336: LD_INT 1
54338: DEC
54339: ST_TO_ADDR
54340: LD_VAR 0 1
54344: PUSH
54345: FOR_TO
54346: IFFALSE 54384
// if array1 [ i ] <> array2 [ i ] then
54348: LD_VAR 0 1
54352: PUSH
54353: LD_VAR 0 4
54357: ARRAY
54358: PUSH
54359: LD_VAR 0 2
54363: PUSH
54364: LD_VAR 0 4
54368: ARRAY
54369: NONEQUAL
54370: IFFALSE 54382
// begin result := false ;
54372: LD_ADDR_VAR 0 3
54376: PUSH
54377: LD_INT 0
54379: ST_TO_ADDR
// break ;
54380: GO 54384
// end ;
54382: GO 54345
54384: POP
54385: POP
// end else
54386: GO 54396
// result := false ;
54388: LD_ADDR_VAR 0 3
54392: PUSH
54393: LD_INT 0
54395: ST_TO_ADDR
// end ;
54396: LD_VAR 0 3
54400: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54401: LD_INT 0
54403: PPUSH
54404: PPUSH
// if not array1 or not array2 then
54405: LD_VAR 0 1
54409: NOT
54410: IFTRUE 54419
54412: PUSH
54413: LD_VAR 0 2
54417: NOT
54418: OR
54419: IFFALSE 54423
// exit ;
54421: GO 54487
// result := true ;
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_INT 1
54430: ST_TO_ADDR
// for i = 1 to array1 do
54431: LD_ADDR_VAR 0 4
54435: PUSH
54436: DOUBLE
54437: LD_INT 1
54439: DEC
54440: ST_TO_ADDR
54441: LD_VAR 0 1
54445: PUSH
54446: FOR_TO
54447: IFFALSE 54485
// if array1 [ i ] <> array2 [ i ] then
54449: LD_VAR 0 1
54453: PUSH
54454: LD_VAR 0 4
54458: ARRAY
54459: PUSH
54460: LD_VAR 0 2
54464: PUSH
54465: LD_VAR 0 4
54469: ARRAY
54470: NONEQUAL
54471: IFFALSE 54483
// begin result := false ;
54473: LD_ADDR_VAR 0 3
54477: PUSH
54478: LD_INT 0
54480: ST_TO_ADDR
// break ;
54481: GO 54485
// end ;
54483: GO 54446
54485: POP
54486: POP
// end ;
54487: LD_VAR 0 3
54491: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54492: LD_INT 0
54494: PPUSH
54495: PPUSH
54496: PPUSH
// pom := GetBase ( fac ) ;
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 274
54511: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54512: LD_ADDR_VAR 0 4
54516: PUSH
54517: LD_VAR 0 2
54521: PUSH
54522: LD_INT 1
54524: ARRAY
54525: PPUSH
54526: LD_VAR 0 2
54530: PUSH
54531: LD_INT 2
54533: ARRAY
54534: PPUSH
54535: LD_VAR 0 2
54539: PUSH
54540: LD_INT 3
54542: ARRAY
54543: PPUSH
54544: LD_VAR 0 2
54548: PUSH
54549: LD_INT 4
54551: ARRAY
54552: PPUSH
54553: CALL_OW 449
54557: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54558: LD_ADDR_VAR 0 3
54562: PUSH
54563: LD_VAR 0 5
54567: PPUSH
54568: LD_INT 1
54570: PPUSH
54571: CALL_OW 275
54575: PUSH
54576: LD_VAR 0 4
54580: PUSH
54581: LD_INT 1
54583: ARRAY
54584: GREATEREQUAL
54585: IFFALSE 54611
54587: PUSH
54588: LD_VAR 0 5
54592: PPUSH
54593: LD_INT 2
54595: PPUSH
54596: CALL_OW 275
54600: PUSH
54601: LD_VAR 0 4
54605: PUSH
54606: LD_INT 2
54608: ARRAY
54609: GREATEREQUAL
54610: AND
54611: IFFALSE 54637
54613: PUSH
54614: LD_VAR 0 5
54618: PPUSH
54619: LD_INT 3
54621: PPUSH
54622: CALL_OW 275
54626: PUSH
54627: LD_VAR 0 4
54631: PUSH
54632: LD_INT 3
54634: ARRAY
54635: GREATEREQUAL
54636: AND
54637: ST_TO_ADDR
// end ;
54638: LD_VAR 0 3
54642: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54643: LD_INT 0
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
// pom := GetBase ( building ) ;
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 274
54663: ST_TO_ADDR
// if not pom then
54664: LD_VAR 0 3
54668: NOT
54669: IFFALSE 54673
// exit ;
54671: GO 54847
// btype := GetBType ( building ) ;
54673: LD_ADDR_VAR 0 5
54677: PUSH
54678: LD_VAR 0 1
54682: PPUSH
54683: CALL_OW 266
54687: ST_TO_ADDR
// if btype = b_armoury then
54688: LD_VAR 0 5
54692: PUSH
54693: LD_INT 4
54695: EQUAL
54696: IFFALSE 54706
// btype := b_barracks ;
54698: LD_ADDR_VAR 0 5
54702: PUSH
54703: LD_INT 5
54705: ST_TO_ADDR
// if btype = b_depot then
54706: LD_VAR 0 5
54710: PUSH
54711: LD_INT 0
54713: EQUAL
54714: IFFALSE 54724
// btype := b_warehouse ;
54716: LD_ADDR_VAR 0 5
54720: PUSH
54721: LD_INT 1
54723: ST_TO_ADDR
// if btype = b_workshop then
54724: LD_VAR 0 5
54728: PUSH
54729: LD_INT 2
54731: EQUAL
54732: IFFALSE 54742
// btype := b_factory ;
54734: LD_ADDR_VAR 0 5
54738: PUSH
54739: LD_INT 3
54741: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54742: LD_ADDR_VAR 0 4
54746: PUSH
54747: LD_VAR 0 5
54751: PPUSH
54752: LD_VAR 0 1
54756: PPUSH
54757: CALL_OW 248
54761: PPUSH
54762: CALL_OW 450
54766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54767: LD_ADDR_VAR 0 2
54771: PUSH
54772: LD_VAR 0 3
54776: PPUSH
54777: LD_INT 1
54779: PPUSH
54780: CALL_OW 275
54784: PUSH
54785: LD_VAR 0 4
54789: PUSH
54790: LD_INT 1
54792: ARRAY
54793: GREATEREQUAL
54794: IFFALSE 54820
54796: PUSH
54797: LD_VAR 0 3
54801: PPUSH
54802: LD_INT 2
54804: PPUSH
54805: CALL_OW 275
54809: PUSH
54810: LD_VAR 0 4
54814: PUSH
54815: LD_INT 2
54817: ARRAY
54818: GREATEREQUAL
54819: AND
54820: IFFALSE 54846
54822: PUSH
54823: LD_VAR 0 3
54827: PPUSH
54828: LD_INT 3
54830: PPUSH
54831: CALL_OW 275
54835: PUSH
54836: LD_VAR 0 4
54840: PUSH
54841: LD_INT 3
54843: ARRAY
54844: GREATEREQUAL
54845: AND
54846: ST_TO_ADDR
// end ;
54847: LD_VAR 0 2
54851: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54852: LD_INT 0
54854: PPUSH
54855: PPUSH
54856: PPUSH
// pom := GetBase ( building ) ;
54857: LD_ADDR_VAR 0 4
54861: PUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: CALL_OW 274
54871: ST_TO_ADDR
// if not pom then
54872: LD_VAR 0 4
54876: NOT
54877: IFFALSE 54881
// exit ;
54879: GO 54986
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54881: LD_ADDR_VAR 0 5
54885: PUSH
54886: LD_VAR 0 2
54890: PPUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL_OW 248
54900: PPUSH
54901: CALL_OW 450
54905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54906: LD_ADDR_VAR 0 3
54910: PUSH
54911: LD_VAR 0 4
54915: PPUSH
54916: LD_INT 1
54918: PPUSH
54919: CALL_OW 275
54923: PUSH
54924: LD_VAR 0 5
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: GREATEREQUAL
54933: IFFALSE 54959
54935: PUSH
54936: LD_VAR 0 4
54940: PPUSH
54941: LD_INT 2
54943: PPUSH
54944: CALL_OW 275
54948: PUSH
54949: LD_VAR 0 5
54953: PUSH
54954: LD_INT 2
54956: ARRAY
54957: GREATEREQUAL
54958: AND
54959: IFFALSE 54985
54961: PUSH
54962: LD_VAR 0 4
54966: PPUSH
54967: LD_INT 3
54969: PPUSH
54970: CALL_OW 275
54974: PUSH
54975: LD_VAR 0 5
54979: PUSH
54980: LD_INT 3
54982: ARRAY
54983: GREATEREQUAL
54984: AND
54985: ST_TO_ADDR
// end ;
54986: LD_VAR 0 3
54990: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54991: LD_INT 0
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
55002: PPUSH
55003: PPUSH
// result := false ;
55004: LD_ADDR_VAR 0 8
55008: PUSH
55009: LD_INT 0
55011: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55012: LD_VAR 0 5
55016: NOT
55017: IFTRUE 55026
55019: PUSH
55020: LD_VAR 0 1
55024: NOT
55025: OR
55026: IFTRUE 55035
55028: PUSH
55029: LD_VAR 0 2
55033: NOT
55034: OR
55035: IFTRUE 55044
55037: PUSH
55038: LD_VAR 0 3
55042: NOT
55043: OR
55044: IFFALSE 55048
// exit ;
55046: GO 55874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55048: LD_ADDR_VAR 0 14
55052: PUSH
55053: LD_VAR 0 1
55057: PPUSH
55058: LD_VAR 0 2
55062: PPUSH
55063: LD_VAR 0 3
55067: PPUSH
55068: LD_VAR 0 4
55072: PPUSH
55073: LD_VAR 0 5
55077: PUSH
55078: LD_INT 1
55080: ARRAY
55081: PPUSH
55082: CALL_OW 248
55086: PPUSH
55087: LD_INT 0
55089: PPUSH
55090: CALL 57155 0 6
55094: ST_TO_ADDR
// if not hexes then
55095: LD_VAR 0 14
55099: NOT
55100: IFFALSE 55104
// exit ;
55102: GO 55874
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55104: LD_ADDR_VAR 0 17
55108: PUSH
55109: LD_VAR 0 5
55113: PPUSH
55114: LD_INT 22
55116: PUSH
55117: LD_VAR 0 13
55121: PPUSH
55122: CALL_OW 255
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 30
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 30
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PPUSH
55163: CALL_OW 72
55167: ST_TO_ADDR
// for i = 1 to hexes do
55168: LD_ADDR_VAR 0 9
55172: PUSH
55173: DOUBLE
55174: LD_INT 1
55176: DEC
55177: ST_TO_ADDR
55178: LD_VAR 0 14
55182: PUSH
55183: FOR_TO
55184: IFFALSE 55872
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55186: LD_ADDR_VAR 0 13
55190: PUSH
55191: LD_VAR 0 14
55195: PUSH
55196: LD_VAR 0 9
55200: ARRAY
55201: PUSH
55202: LD_INT 1
55204: ARRAY
55205: PPUSH
55206: LD_VAR 0 14
55210: PUSH
55211: LD_VAR 0 9
55215: ARRAY
55216: PUSH
55217: LD_INT 2
55219: ARRAY
55220: PPUSH
55221: CALL_OW 428
55225: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55226: LD_VAR 0 14
55230: PUSH
55231: LD_VAR 0 9
55235: ARRAY
55236: PUSH
55237: LD_INT 1
55239: ARRAY
55240: PPUSH
55241: LD_VAR 0 14
55245: PUSH
55246: LD_VAR 0 9
55250: ARRAY
55251: PUSH
55252: LD_INT 2
55254: ARRAY
55255: PPUSH
55256: CALL_OW 351
55260: IFTRUE 55299
55262: PUSH
55263: LD_VAR 0 14
55267: PUSH
55268: LD_VAR 0 9
55272: ARRAY
55273: PUSH
55274: LD_INT 1
55276: ARRAY
55277: PPUSH
55278: LD_VAR 0 14
55282: PUSH
55283: LD_VAR 0 9
55287: ARRAY
55288: PUSH
55289: LD_INT 2
55291: ARRAY
55292: PPUSH
55293: CALL_OW 488
55297: NOT
55298: OR
55299: IFTRUE 55316
55301: PUSH
55302: LD_VAR 0 13
55306: PPUSH
55307: CALL_OW 247
55311: PUSH
55312: LD_INT 3
55314: EQUAL
55315: OR
55316: IFFALSE 55322
// exit ;
55318: POP
55319: POP
55320: GO 55874
// if not tmp then
55322: LD_VAR 0 13
55326: NOT
55327: IFFALSE 55331
// continue ;
55329: GO 55183
// result := true ;
55331: LD_ADDR_VAR 0 8
55335: PUSH
55336: LD_INT 1
55338: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55339: LD_VAR 0 6
55343: IFFALSE 55360
55345: PUSH
55346: LD_VAR 0 13
55350: PPUSH
55351: CALL_OW 247
55355: PUSH
55356: LD_INT 2
55358: EQUAL
55359: AND
55360: IFFALSE 55377
55362: PUSH
55363: LD_VAR 0 13
55367: PPUSH
55368: CALL_OW 263
55372: PUSH
55373: LD_INT 1
55375: EQUAL
55376: AND
55377: IFFALSE 55541
// begin if IsDrivenBy ( tmp ) then
55379: LD_VAR 0 13
55383: PPUSH
55384: CALL_OW 311
55388: IFFALSE 55392
// continue ;
55390: GO 55183
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55392: LD_VAR 0 6
55396: PPUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 60
55402: PUSH
55403: EMPTY
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 55
55415: PUSH
55416: EMPTY
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PPUSH
55427: CALL_OW 72
55431: IFFALSE 55539
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55433: LD_ADDR_VAR 0 18
55437: PUSH
55438: LD_VAR 0 6
55442: PPUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 60
55448: PUSH
55449: EMPTY
55450: LIST
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: LD_INT 55
55461: PUSH
55462: EMPTY
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PPUSH
55473: CALL_OW 72
55477: PUSH
55478: LD_INT 1
55480: ARRAY
55481: ST_TO_ADDR
// if IsInUnit ( driver ) then
55482: LD_VAR 0 18
55486: PPUSH
55487: CALL_OW 310
55491: IFFALSE 55502
// ComExit ( driver ) ;
55493: LD_VAR 0 18
55497: PPUSH
55498: CALL 81145 0 1
// AddComEnterUnit ( driver , tmp ) ;
55502: LD_VAR 0 18
55506: PPUSH
55507: LD_VAR 0 13
55511: PPUSH
55512: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55516: LD_VAR 0 18
55520: PPUSH
55521: LD_VAR 0 7
55525: PPUSH
55526: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55530: LD_VAR 0 18
55534: PPUSH
55535: CALL_OW 181
// end ; continue ;
55539: GO 55183
// end ; if not cleaners or not tmp in cleaners then
55541: LD_VAR 0 6
55545: NOT
55546: IFTRUE 55561
55548: PUSH
55549: LD_VAR 0 13
55553: PUSH
55554: LD_VAR 0 6
55558: IN
55559: NOT
55560: OR
55561: IFFALSE 55870
// begin if dep then
55563: LD_VAR 0 17
55567: IFFALSE 55703
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55569: LD_ADDR_VAR 0 16
55573: PUSH
55574: LD_VAR 0 17
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PPUSH
55583: CALL_OW 250
55587: PPUSH
55588: LD_VAR 0 17
55592: PUSH
55593: LD_INT 1
55595: ARRAY
55596: PPUSH
55597: CALL_OW 254
55601: PPUSH
55602: LD_INT 5
55604: PPUSH
55605: CALL_OW 272
55609: PUSH
55610: LD_VAR 0 17
55614: PUSH
55615: LD_INT 1
55617: ARRAY
55618: PPUSH
55619: CALL_OW 251
55623: PPUSH
55624: LD_VAR 0 17
55628: PUSH
55629: LD_INT 1
55631: ARRAY
55632: PPUSH
55633: CALL_OW 254
55637: PPUSH
55638: LD_INT 5
55640: PPUSH
55641: CALL_OW 273
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55650: LD_VAR 0 16
55654: PUSH
55655: LD_INT 1
55657: ARRAY
55658: PPUSH
55659: LD_VAR 0 16
55663: PUSH
55664: LD_INT 2
55666: ARRAY
55667: PPUSH
55668: CALL_OW 488
55672: IFFALSE 55703
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55674: LD_VAR 0 13
55678: PPUSH
55679: LD_VAR 0 16
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: PPUSH
55688: LD_VAR 0 16
55692: PUSH
55693: LD_INT 2
55695: ARRAY
55696: PPUSH
55697: CALL_OW 111
// continue ;
55701: GO 55183
// end ; end ; r := GetDir ( tmp ) ;
55703: LD_ADDR_VAR 0 15
55707: PUSH
55708: LD_VAR 0 13
55712: PPUSH
55713: CALL_OW 254
55717: ST_TO_ADDR
// if r = 5 then
55718: LD_VAR 0 15
55722: PUSH
55723: LD_INT 5
55725: EQUAL
55726: IFFALSE 55736
// r := 0 ;
55728: LD_ADDR_VAR 0 15
55732: PUSH
55733: LD_INT 0
55735: ST_TO_ADDR
// for j = r to 5 do
55736: LD_ADDR_VAR 0 10
55740: PUSH
55741: DOUBLE
55742: LD_VAR 0 15
55746: DEC
55747: ST_TO_ADDR
55748: LD_INT 5
55750: PUSH
55751: FOR_TO
55752: IFFALSE 55868
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55754: LD_ADDR_VAR 0 11
55758: PUSH
55759: LD_VAR 0 13
55763: PPUSH
55764: CALL_OW 250
55768: PPUSH
55769: LD_VAR 0 10
55773: PPUSH
55774: LD_INT 2
55776: PPUSH
55777: CALL_OW 272
55781: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55782: LD_ADDR_VAR 0 12
55786: PUSH
55787: LD_VAR 0 13
55791: PPUSH
55792: CALL_OW 251
55796: PPUSH
55797: LD_VAR 0 10
55801: PPUSH
55802: LD_INT 2
55804: PPUSH
55805: CALL_OW 273
55809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55810: LD_VAR 0 11
55814: PPUSH
55815: LD_VAR 0 12
55819: PPUSH
55820: CALL_OW 488
55824: IFFALSE 55843
55826: PUSH
55827: LD_VAR 0 11
55831: PPUSH
55832: LD_VAR 0 12
55836: PPUSH
55837: CALL_OW 428
55841: NOT
55842: AND
55843: IFFALSE 55866
// begin ComMoveXY ( tmp , _x , _y ) ;
55845: LD_VAR 0 13
55849: PPUSH
55850: LD_VAR 0 11
55854: PPUSH
55855: LD_VAR 0 12
55859: PPUSH
55860: CALL_OW 111
// break ;
55864: GO 55868
// end ; end ;
55866: GO 55751
55868: POP
55869: POP
// end ; end ;
55870: GO 55183
55872: POP
55873: POP
// end ;
55874: LD_VAR 0 8
55878: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55879: LD_INT 0
55881: PPUSH
// result := true ;
55882: LD_ADDR_VAR 0 3
55886: PUSH
55887: LD_INT 1
55889: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55890: LD_VAR 0 2
55894: PUSH
55895: LD_INT 24
55897: DOUBLE
55898: EQUAL
55899: IFTRUE 55909
55901: LD_INT 33
55903: DOUBLE
55904: EQUAL
55905: IFTRUE 55909
55907: GO 55934
55909: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55910: LD_ADDR_VAR 0 3
55914: PUSH
55915: LD_INT 32
55917: PPUSH
55918: LD_VAR 0 1
55922: PPUSH
55923: CALL_OW 321
55927: PUSH
55928: LD_INT 2
55930: EQUAL
55931: ST_TO_ADDR
55932: GO 56250
55934: LD_INT 20
55936: DOUBLE
55937: EQUAL
55938: IFTRUE 55942
55940: GO 55967
55942: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55943: LD_ADDR_VAR 0 3
55947: PUSH
55948: LD_INT 6
55950: PPUSH
55951: LD_VAR 0 1
55955: PPUSH
55956: CALL_OW 321
55960: PUSH
55961: LD_INT 2
55963: EQUAL
55964: ST_TO_ADDR
55965: GO 56250
55967: LD_INT 22
55969: DOUBLE
55970: EQUAL
55971: IFTRUE 55981
55973: LD_INT 36
55975: DOUBLE
55976: EQUAL
55977: IFTRUE 55981
55979: GO 56006
55981: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55982: LD_ADDR_VAR 0 3
55986: PUSH
55987: LD_INT 15
55989: PPUSH
55990: LD_VAR 0 1
55994: PPUSH
55995: CALL_OW 321
55999: PUSH
56000: LD_INT 2
56002: EQUAL
56003: ST_TO_ADDR
56004: GO 56250
56006: LD_INT 30
56008: DOUBLE
56009: EQUAL
56010: IFTRUE 56014
56012: GO 56039
56014: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56015: LD_ADDR_VAR 0 3
56019: PUSH
56020: LD_INT 20
56022: PPUSH
56023: LD_VAR 0 1
56027: PPUSH
56028: CALL_OW 321
56032: PUSH
56033: LD_INT 2
56035: EQUAL
56036: ST_TO_ADDR
56037: GO 56250
56039: LD_INT 28
56041: DOUBLE
56042: EQUAL
56043: IFTRUE 56053
56045: LD_INT 21
56047: DOUBLE
56048: EQUAL
56049: IFTRUE 56053
56051: GO 56078
56053: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56054: LD_ADDR_VAR 0 3
56058: PUSH
56059: LD_INT 21
56061: PPUSH
56062: LD_VAR 0 1
56066: PPUSH
56067: CALL_OW 321
56071: PUSH
56072: LD_INT 2
56074: EQUAL
56075: ST_TO_ADDR
56076: GO 56250
56078: LD_INT 16
56080: DOUBLE
56081: EQUAL
56082: IFTRUE 56086
56084: GO 56111
56086: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56087: LD_ADDR_VAR 0 3
56091: PUSH
56092: LD_INT 84
56094: PPUSH
56095: LD_VAR 0 1
56099: PPUSH
56100: CALL_OW 321
56104: PUSH
56105: LD_INT 2
56107: EQUAL
56108: ST_TO_ADDR
56109: GO 56250
56111: LD_INT 19
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56125
56117: LD_INT 23
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56125
56123: GO 56150
56125: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56126: LD_ADDR_VAR 0 3
56130: PUSH
56131: LD_INT 83
56133: PPUSH
56134: LD_VAR 0 1
56138: PPUSH
56139: CALL_OW 321
56143: PUSH
56144: LD_INT 2
56146: EQUAL
56147: ST_TO_ADDR
56148: GO 56250
56150: LD_INT 17
56152: DOUBLE
56153: EQUAL
56154: IFTRUE 56158
56156: GO 56183
56158: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56159: LD_ADDR_VAR 0 3
56163: PUSH
56164: LD_INT 39
56166: PPUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 321
56176: PUSH
56177: LD_INT 2
56179: EQUAL
56180: ST_TO_ADDR
56181: GO 56250
56183: LD_INT 18
56185: DOUBLE
56186: EQUAL
56187: IFTRUE 56191
56189: GO 56216
56191: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: LD_INT 40
56199: PPUSH
56200: LD_VAR 0 1
56204: PPUSH
56205: CALL_OW 321
56209: PUSH
56210: LD_INT 2
56212: EQUAL
56213: ST_TO_ADDR
56214: GO 56250
56216: LD_INT 27
56218: DOUBLE
56219: EQUAL
56220: IFTRUE 56224
56222: GO 56249
56224: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: LD_INT 35
56232: PPUSH
56233: LD_VAR 0 1
56237: PPUSH
56238: CALL_OW 321
56242: PUSH
56243: LD_INT 2
56245: EQUAL
56246: ST_TO_ADDR
56247: GO 56250
56249: POP
// end ;
56250: LD_VAR 0 3
56254: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56255: LD_INT 0
56257: PPUSH
56258: PPUSH
56259: PPUSH
56260: PPUSH
56261: PPUSH
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
// result := false ;
56268: LD_ADDR_VAR 0 6
56272: PUSH
56273: LD_INT 0
56275: ST_TO_ADDR
// if btype = b_depot then
56276: LD_VAR 0 2
56280: PUSH
56281: LD_INT 0
56283: EQUAL
56284: IFFALSE 56296
// begin result := true ;
56286: LD_ADDR_VAR 0 6
56290: PUSH
56291: LD_INT 1
56293: ST_TO_ADDR
// exit ;
56294: GO 57150
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56296: LD_VAR 0 1
56300: NOT
56301: IFTRUE 56326
56303: PUSH
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 266
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: IN
56324: NOT
56325: OR
56326: IFTRUE 56335
56328: PUSH
56329: LD_VAR 0 2
56333: NOT
56334: OR
56335: IFTRUE 56371
56337: PUSH
56338: LD_VAR 0 5
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: LD_INT 5
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: IN
56369: NOT
56370: OR
56371: IFTRUE 56390
56373: PUSH
56374: LD_VAR 0 3
56378: PPUSH
56379: LD_VAR 0 4
56383: PPUSH
56384: CALL_OW 488
56388: NOT
56389: OR
56390: IFFALSE 56394
// exit ;
56392: GO 57150
// side := GetSide ( depot ) ;
56394: LD_ADDR_VAR 0 9
56398: PUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 255
56408: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56409: LD_VAR 0 9
56413: PPUSH
56414: LD_VAR 0 2
56418: PPUSH
56419: CALL 55879 0 2
56423: NOT
56424: IFFALSE 56428
// exit ;
56426: GO 57150
// pom := GetBase ( depot ) ;
56428: LD_ADDR_VAR 0 10
56432: PUSH
56433: LD_VAR 0 1
56437: PPUSH
56438: CALL_OW 274
56442: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56443: LD_ADDR_VAR 0 11
56447: PUSH
56448: LD_VAR 0 2
56452: PPUSH
56453: LD_VAR 0 1
56457: PPUSH
56458: CALL_OW 248
56462: PPUSH
56463: CALL_OW 450
56467: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56468: LD_VAR 0 10
56472: PPUSH
56473: LD_INT 1
56475: PPUSH
56476: CALL_OW 275
56480: PUSH
56481: LD_VAR 0 11
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: GREATEREQUAL
56490: IFFALSE 56516
56492: PUSH
56493: LD_VAR 0 10
56497: PPUSH
56498: LD_INT 2
56500: PPUSH
56501: CALL_OW 275
56505: PUSH
56506: LD_VAR 0 11
56510: PUSH
56511: LD_INT 2
56513: ARRAY
56514: GREATEREQUAL
56515: AND
56516: IFFALSE 56542
56518: PUSH
56519: LD_VAR 0 10
56523: PPUSH
56524: LD_INT 3
56526: PPUSH
56527: CALL_OW 275
56531: PUSH
56532: LD_VAR 0 11
56536: PUSH
56537: LD_INT 3
56539: ARRAY
56540: GREATEREQUAL
56541: AND
56542: NOT
56543: IFFALSE 56547
// exit ;
56545: GO 57150
// if GetBType ( depot ) = b_depot then
56547: LD_VAR 0 1
56551: PPUSH
56552: CALL_OW 266
56556: PUSH
56557: LD_INT 0
56559: EQUAL
56560: IFFALSE 56572
// dist := 28 else
56562: LD_ADDR_VAR 0 14
56566: PUSH
56567: LD_INT 28
56569: ST_TO_ADDR
56570: GO 56580
// dist := 36 ;
56572: LD_ADDR_VAR 0 14
56576: PUSH
56577: LD_INT 36
56579: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_VAR 0 3
56589: PPUSH
56590: LD_VAR 0 4
56594: PPUSH
56595: CALL_OW 297
56599: PUSH
56600: LD_VAR 0 14
56604: GREATER
56605: IFFALSE 56609
// exit ;
56607: GO 57150
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56609: LD_ADDR_VAR 0 12
56613: PUSH
56614: LD_VAR 0 2
56618: PPUSH
56619: LD_VAR 0 3
56623: PPUSH
56624: LD_VAR 0 4
56628: PPUSH
56629: LD_VAR 0 5
56633: PPUSH
56634: LD_VAR 0 1
56638: PPUSH
56639: CALL_OW 248
56643: PPUSH
56644: LD_INT 0
56646: PPUSH
56647: CALL 57155 0 6
56651: ST_TO_ADDR
// if not hexes then
56652: LD_VAR 0 12
56656: NOT
56657: IFFALSE 56661
// exit ;
56659: GO 57150
// hex := GetHexInfo ( x , y ) ;
56661: LD_ADDR_VAR 0 15
56665: PUSH
56666: LD_VAR 0 3
56670: PPUSH
56671: LD_VAR 0 4
56675: PPUSH
56676: CALL_OW 546
56680: ST_TO_ADDR
// if hex [ 1 ] then
56681: LD_VAR 0 15
56685: PUSH
56686: LD_INT 1
56688: ARRAY
56689: IFFALSE 56693
// exit ;
56691: GO 57150
// height := hex [ 2 ] ;
56693: LD_ADDR_VAR 0 13
56697: PUSH
56698: LD_VAR 0 15
56702: PUSH
56703: LD_INT 2
56705: ARRAY
56706: ST_TO_ADDR
// for i = 1 to hexes do
56707: LD_ADDR_VAR 0 7
56711: PUSH
56712: DOUBLE
56713: LD_INT 1
56715: DEC
56716: ST_TO_ADDR
56717: LD_VAR 0 12
56721: PUSH
56722: FOR_TO
56723: IFFALSE 57067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56725: LD_VAR 0 12
56729: PUSH
56730: LD_VAR 0 7
56734: ARRAY
56735: PUSH
56736: LD_INT 1
56738: ARRAY
56739: PPUSH
56740: LD_VAR 0 12
56744: PUSH
56745: LD_VAR 0 7
56749: ARRAY
56750: PUSH
56751: LD_INT 2
56753: ARRAY
56754: PPUSH
56755: CALL_OW 488
56759: NOT
56760: IFTRUE 56802
56762: PUSH
56763: LD_VAR 0 12
56767: PUSH
56768: LD_VAR 0 7
56772: ARRAY
56773: PUSH
56774: LD_INT 1
56776: ARRAY
56777: PPUSH
56778: LD_VAR 0 12
56782: PUSH
56783: LD_VAR 0 7
56787: ARRAY
56788: PUSH
56789: LD_INT 2
56791: ARRAY
56792: PPUSH
56793: CALL_OW 428
56797: PUSH
56798: LD_INT 0
56800: GREATER
56801: OR
56802: IFTRUE 56840
56804: PUSH
56805: LD_VAR 0 12
56809: PUSH
56810: LD_VAR 0 7
56814: ARRAY
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 12
56824: PUSH
56825: LD_VAR 0 7
56829: ARRAY
56830: PUSH
56831: LD_INT 2
56833: ARRAY
56834: PPUSH
56835: CALL_OW 351
56839: OR
56840: IFFALSE 56846
// exit ;
56842: POP
56843: POP
56844: GO 57150
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56846: LD_ADDR_VAR 0 8
56850: PUSH
56851: LD_VAR 0 12
56855: PUSH
56856: LD_VAR 0 7
56860: ARRAY
56861: PUSH
56862: LD_INT 1
56864: ARRAY
56865: PPUSH
56866: LD_VAR 0 12
56870: PUSH
56871: LD_VAR 0 7
56875: ARRAY
56876: PUSH
56877: LD_INT 2
56879: ARRAY
56880: PPUSH
56881: CALL_OW 546
56885: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56886: LD_VAR 0 8
56890: PUSH
56891: LD_INT 1
56893: ARRAY
56894: IFTRUE 56916
56896: PUSH
56897: LD_VAR 0 8
56901: PUSH
56902: LD_INT 2
56904: ARRAY
56905: PUSH
56906: LD_VAR 0 13
56910: PUSH
56911: LD_INT 2
56913: PLUS
56914: GREATER
56915: OR
56916: IFTRUE 56938
56918: PUSH
56919: LD_VAR 0 8
56923: PUSH
56924: LD_INT 2
56926: ARRAY
56927: PUSH
56928: LD_VAR 0 13
56932: PUSH
56933: LD_INT 2
56935: MINUS
56936: LESS
56937: OR
56938: IFTRUE 57006
56940: PUSH
56941: LD_VAR 0 8
56945: PUSH
56946: LD_INT 3
56948: ARRAY
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 8
56955: PUSH
56956: LD_INT 9
56958: PUSH
56959: LD_INT 10
56961: PUSH
56962: LD_INT 11
56964: PUSH
56965: LD_INT 12
56967: PUSH
56968: LD_INT 13
56970: PUSH
56971: LD_INT 16
56973: PUSH
56974: LD_INT 17
56976: PUSH
56977: LD_INT 18
56979: PUSH
56980: LD_INT 19
56982: PUSH
56983: LD_INT 20
56985: PUSH
56986: LD_INT 21
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: IN
57004: NOT
57005: OR
57006: IFTRUE 57019
57008: PUSH
57009: LD_VAR 0 8
57013: PUSH
57014: LD_INT 5
57016: ARRAY
57017: NOT
57018: OR
57019: IFTRUE 57059
57021: PUSH
57022: LD_VAR 0 8
57026: PUSH
57027: LD_INT 6
57029: ARRAY
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 7
57039: PUSH
57040: LD_INT 9
57042: PUSH
57043: LD_INT 10
57045: PUSH
57046: LD_INT 11
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: IN
57057: NOT
57058: OR
57059: IFFALSE 57065
// exit ;
57061: POP
57062: POP
57063: GO 57150
// end ;
57065: GO 56722
57067: POP
57068: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57069: LD_VAR 0 9
57073: PPUSH
57074: LD_VAR 0 3
57078: PPUSH
57079: LD_VAR 0 4
57083: PPUSH
57084: LD_INT 20
57086: PPUSH
57087: CALL 48969 0 4
57091: PUSH
57092: LD_INT 4
57094: ARRAY
57095: IFFALSE 57099
// exit ;
57097: GO 57150
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57099: LD_VAR 0 2
57103: PUSH
57104: LD_INT 29
57106: PUSH
57107: LD_INT 30
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: IN
57114: IFFALSE 57138
57116: PUSH
57117: LD_VAR 0 3
57121: PPUSH
57122: LD_VAR 0 4
57126: PPUSH
57127: LD_VAR 0 9
57131: PPUSH
57132: CALL_OW 440
57136: NOT
57137: AND
57138: IFFALSE 57142
// exit ;
57140: GO 57150
// result := true ;
57142: LD_ADDR_VAR 0 6
57146: PUSH
57147: LD_INT 1
57149: ST_TO_ADDR
// end ;
57150: LD_VAR 0 6
57154: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57155: LD_INT 0
57157: PPUSH
57158: PPUSH
57159: PPUSH
57160: PPUSH
57161: PPUSH
57162: PPUSH
57163: PPUSH
57164: PPUSH
57165: PPUSH
57166: PPUSH
57167: PPUSH
57168: PPUSH
57169: PPUSH
57170: PPUSH
57171: PPUSH
57172: PPUSH
57173: PPUSH
57174: PPUSH
57175: PPUSH
57176: PPUSH
57177: PPUSH
57178: PPUSH
57179: PPUSH
57180: PPUSH
57181: PPUSH
57182: PPUSH
57183: PPUSH
57184: PPUSH
57185: PPUSH
57186: PPUSH
57187: PPUSH
57188: PPUSH
57189: PPUSH
57190: PPUSH
57191: PPUSH
57192: PPUSH
57193: PPUSH
57194: PPUSH
57195: PPUSH
57196: PPUSH
57197: PPUSH
57198: PPUSH
57199: PPUSH
57200: PPUSH
57201: PPUSH
57202: PPUSH
57203: PPUSH
57204: PPUSH
57205: PPUSH
57206: PPUSH
57207: PPUSH
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
// result = [ ] ;
57215: LD_ADDR_VAR 0 7
57219: PUSH
57220: EMPTY
57221: ST_TO_ADDR
// temp_list = [ ] ;
57222: LD_ADDR_VAR 0 9
57226: PUSH
57227: EMPTY
57228: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57229: LD_VAR 0 4
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: LD_INT 5
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: IN
57260: NOT
57261: IFTRUE 57304
57263: PUSH
57264: LD_VAR 0 1
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: IN
57279: IFFALSE 57303
57281: PUSH
57282: LD_VAR 0 5
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: IN
57301: NOT
57302: AND
57303: OR
57304: IFFALSE 57308
// exit ;
57306: GO 75707
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57308: LD_VAR 0 1
57312: PUSH
57313: LD_INT 6
57315: PUSH
57316: LD_INT 7
57318: PUSH
57319: LD_INT 8
57321: PUSH
57322: LD_INT 13
57324: PUSH
57325: LD_INT 12
57327: PUSH
57328: LD_INT 15
57330: PUSH
57331: LD_INT 11
57333: PUSH
57334: LD_INT 14
57336: PUSH
57337: LD_INT 10
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: IN
57351: IFFALSE 57361
// btype = b_lab ;
57353: LD_ADDR_VAR 0 1
57357: PUSH
57358: LD_INT 6
57360: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57361: LD_VAR 0 6
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: IN
57380: NOT
57381: IFTRUE 57449
57383: PUSH
57384: LD_VAR 0 1
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 6
57403: PUSH
57404: LD_INT 36
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: LD_INT 5
57412: PUSH
57413: LD_INT 31
57415: PUSH
57416: LD_INT 32
57418: PUSH
57419: LD_INT 33
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: IN
57435: NOT
57436: IFFALSE 57448
57438: PUSH
57439: LD_VAR 0 6
57443: PUSH
57444: LD_INT 1
57446: EQUAL
57447: AND
57448: OR
57449: IFTRUE 57481
57451: PUSH
57452: LD_VAR 0 1
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: IN
57467: NOT
57468: IFFALSE 57480
57470: PUSH
57471: LD_VAR 0 6
57475: PUSH
57476: LD_INT 2
57478: EQUAL
57479: AND
57480: OR
57481: IFFALSE 57491
// mode = 0 ;
57483: LD_ADDR_VAR 0 6
57487: PUSH
57488: LD_INT 0
57490: ST_TO_ADDR
// case mode of 0 :
57491: LD_VAR 0 6
57495: PUSH
57496: LD_INT 0
57498: DOUBLE
57499: EQUAL
57500: IFTRUE 57504
57502: GO 68957
57504: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57505: LD_ADDR_VAR 0 11
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57698: LD_ADDR_VAR 0 12
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: NEG
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57894: LD_ADDR_VAR 0 13
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58093: LD_ADDR_VAR 0 14
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58289: LD_ADDR_VAR 0 15
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58482: LD_ADDR_VAR 0 16
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 3
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58675: LD_ADDR_VAR 0 17
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58905: LD_ADDR_VAR 0 18
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59135: LD_ADDR_VAR 0 19
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59365: LD_ADDR_VAR 0 20
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59595: LD_ADDR_VAR 0 21
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59825: LD_ADDR_VAR 0 22
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60055: LD_ADDR_VAR 0 23
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60335: LD_ADDR_VAR 0 24
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60611: LD_ADDR_VAR 0 25
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60885: LD_ADDR_VAR 0 26
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 3
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61161: LD_ADDR_VAR 0 27
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61441: LD_ADDR_VAR 0 28
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 3
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61723: LD_ADDR_VAR 0 29
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 2
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: LD_INT 3
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62002: LD_ADDR_VAR 0 30
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62280: LD_ADDR_VAR 0 31
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 3
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62558: LD_ADDR_VAR 0 32
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: NEG
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62836: LD_ADDR_VAR 0 33
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63115: LD_ADDR_VAR 0 34
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 3
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63395: LD_ADDR_VAR 0 35
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63507: LD_ADDR_VAR 0 36
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63619: LD_ADDR_VAR 0 37
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63731: LD_ADDR_VAR 0 38
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63843: LD_ADDR_VAR 0 39
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 2
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63955: LD_ADDR_VAR 0 40
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64067: LD_ADDR_VAR 0 41
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: LD_INT 3
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 3
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 3
64352: NEG
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: LD_INT 3
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64417: LD_ADDR_VAR 0 42
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 2
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: NEG
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 3
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: LD_INT 2
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64767: LD_ADDR_VAR 0 43
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 3
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: NEG
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: NEG
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: NEG
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65115: LD_ADDR_VAR 0 44
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: NEG
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65465: LD_ADDR_VAR 0 45
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 2
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 2
65643: NEG
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: NEG
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: LD_INT 3
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65815: LD_ADDR_VAR 0 46
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: LD_INT 3
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 3
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66163: LD_ADDR_VAR 0 47
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66314: LD_ADDR_VAR 0 48
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 2
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66461: LD_ADDR_VAR 0 49
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66605: LD_ADDR_VAR 0 50
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66749: LD_ADDR_VAR 0 51
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 2
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 2
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66896: LD_ADDR_VAR 0 52
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: LD_INT 2
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67047: LD_ADDR_VAR 0 53
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 1
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 2
67246: NEG
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67277: LD_ADDR_VAR 0 54
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 2
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67507: LD_ADDR_VAR 0 55
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: LD_INT 1
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 1
67576: NEG
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: LD_INT 2
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: LD_INT 1
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 2
67642: PUSH
67643: LD_INT 2
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67737: LD_ADDR_VAR 0 56
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: LD_INT 2
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 2
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: LD_INT 1
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: LD_INT 2
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67967: LD_ADDR_VAR 0 57
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: LD_INT 1
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 1
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 2
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: LD_INT 2
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: PUSH
68113: LD_INT 2
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 0
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: NEG
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 2
68143: NEG
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68197: LD_ADDR_VAR 0 58
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: NEG
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 1
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 2
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 2
68373: NEG
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: NEG
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: LD_INT 2
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68427: LD_ADDR_VAR 0 59
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 1
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68515: LD_ADDR_VAR 0 60
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 1
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68603: LD_ADDR_VAR 0 61
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 0
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: PUSH
68642: LD_INT 1
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: LD_INT 1
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68691: LD_ADDR_VAR 0 62
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68779: LD_ADDR_VAR 0 63
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 1
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 1
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68867: LD_ADDR_VAR 0 64
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 1
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: ST_TO_ADDR
// end ; 1 :
68955: GO 74852
68957: LD_INT 1
68959: DOUBLE
68960: EQUAL
68961: IFTRUE 68965
68963: GO 71588
68965: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68966: LD_ADDR_VAR 0 11
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: LIST
69009: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69010: LD_ADDR_VAR 0 12
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: LIST
69050: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69051: LD_ADDR_VAR 0 13
69055: PUSH
69056: LD_INT 3
69058: PUSH
69059: LD_INT 2
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69091: LD_ADDR_VAR 0 14
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: LD_INT 3
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69132: LD_ADDR_VAR 0 15
69136: PUSH
69137: LD_INT 2
69139: NEG
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: NEG
69162: PUSH
69163: LD_INT 1
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: LIST
69175: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69176: LD_ADDR_VAR 0 16
69180: PUSH
69181: LD_INT 2
69183: NEG
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: LD_INT 3
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69222: LD_ADDR_VAR 0 17
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 2
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: LIST
69265: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69266: LD_ADDR_VAR 0 18
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 3
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: LIST
69306: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69307: LD_ADDR_VAR 0 19
69311: PUSH
69312: LD_INT 3
69314: PUSH
69315: LD_INT 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69347: LD_ADDR_VAR 0 20
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: LD_INT 3
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69388: LD_ADDR_VAR 0 21
69392: PUSH
69393: LD_INT 2
69395: NEG
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: NEG
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 3
69417: NEG
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69432: LD_ADDR_VAR 0 22
69436: PUSH
69437: LD_INT 2
69439: NEG
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: LIST
69477: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69478: LD_ADDR_VAR 0 23
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: LD_INT 3
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 1
69496: NEG
69497: PUSH
69498: LD_INT 4
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: PUSH
69509: LD_INT 3
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: LIST
69521: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69522: LD_ADDR_VAR 0 24
69526: PUSH
69527: LD_INT 3
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: LD_INT 1
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 4
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69563: LD_ADDR_VAR 0 25
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: LD_INT 4
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69603: LD_ADDR_VAR 0 26
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: LD_INT 4
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69644: LD_ADDR_VAR 0 27
69648: PUSH
69649: LD_INT 3
69651: NEG
69652: PUSH
69653: LD_INT 0
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 3
69662: NEG
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 4
69673: NEG
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69688: LD_ADDR_VAR 0 28
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 4
69719: NEG
69720: PUSH
69721: LD_INT 3
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: LIST
69733: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69734: LD_ADDR_VAR 0 29
69738: PUSH
69739: LD_INT 1
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: LD_INT 3
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 1
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: LD_INT 4
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: LD_INT 3
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: LD_INT 5
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 5
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: NEG
69844: PUSH
69845: LD_INT 6
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 6
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: LD_INT 5
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69889: LD_ADDR_VAR 0 30
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 1
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 4
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 4
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 5
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 5
69979: PUSH
69980: LD_INT 1
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 5
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 6
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 6
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70032: LD_ADDR_VAR 0 31
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 2
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 4
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: PUSH
70080: LD_INT 4
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: LD_INT 4
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: PUSH
70100: LD_INT 4
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 5
70109: PUSH
70110: LD_INT 5
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 4
70119: PUSH
70120: LD_INT 5
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 6
70129: PUSH
70130: LD_INT 5
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 6
70139: PUSH
70140: LD_INT 6
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 5
70149: PUSH
70150: LD_INT 6
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70171: LD_ADDR_VAR 0 32
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: LD_INT 2
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 1
70209: PUSH
70210: LD_INT 4
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 0
70219: PUSH
70220: LD_INT 4
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 1
70229: NEG
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: LD_INT 5
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: LD_INT 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: LD_INT 6
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: LD_INT 6
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 1
70291: NEG
70292: PUSH
70293: LD_INT 5
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70314: LD_ADDR_VAR 0 33
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: NEG
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 4
70366: NEG
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 4
70377: NEG
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: LD_INT 1
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 5
70400: NEG
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 5
70411: NEG
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 5
70423: NEG
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 6
70434: NEG
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 6
70445: NEG
70446: PUSH
70447: LD_INT 1
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70469: LD_ADDR_VAR 0 34
70473: PUSH
70474: LD_INT 2
70476: NEG
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 3
70488: NEG
70489: PUSH
70490: LD_INT 2
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 3
70500: NEG
70501: PUSH
70502: LD_INT 3
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 4
70536: NEG
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: NEG
70573: PUSH
70574: LD_INT 5
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: LD_INT 6
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 6
70596: NEG
70597: PUSH
70598: LD_INT 5
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 6
70608: NEG
70609: PUSH
70610: LD_INT 6
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70632: LD_ADDR_VAR 0 41
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: LD_INT 2
70642: NEG
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: LD_INT 3
70654: NEG
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 1
70662: PUSH
70663: LD_INT 2
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70676: LD_ADDR_VAR 0 42
70680: PUSH
70681: LD_INT 2
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: LD_INT 1
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70717: LD_ADDR_VAR 0 43
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: LD_INT 2
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 3
70734: PUSH
70735: LD_INT 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70757: LD_ADDR_VAR 0 44
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: LD_INT 2
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: LD_INT 2
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: LIST
70797: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70798: LD_ADDR_VAR 0 45
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 2
70816: NEG
70817: PUSH
70818: LD_INT 1
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 3
70827: NEG
70828: PUSH
70829: LD_INT 1
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: LIST
70841: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70842: LD_ADDR_VAR 0 46
70846: PUSH
70847: LD_INT 2
70849: NEG
70850: PUSH
70851: LD_INT 2
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: LD_INT 3
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 3
70873: NEG
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: LIST
70887: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70888: LD_ADDR_VAR 0 47
70892: PUSH
70893: LD_INT 2
70895: NEG
70896: PUSH
70897: LD_INT 3
70899: NEG
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70921: LD_ADDR_VAR 0 48
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: LD_INT 2
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 2
70939: PUSH
70940: LD_INT 1
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70952: LD_ADDR_VAR 0 49
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 3
70969: PUSH
70970: LD_INT 2
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70981: LD_ADDR_VAR 0 50
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: LD_INT 3
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71010: LD_ADDR_VAR 0 51
71014: PUSH
71015: LD_INT 1
71017: NEG
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 2
71028: NEG
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71041: LD_ADDR_VAR 0 52
71045: PUSH
71046: LD_INT 3
71048: NEG
71049: PUSH
71050: LD_INT 1
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 3
71060: NEG
71061: PUSH
71062: LD_INT 2
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71074: LD_ADDR_VAR 0 53
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71118: LD_ADDR_VAR 0 54
71122: PUSH
71123: LD_INT 2
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71159: LD_ADDR_VAR 0 55
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71199: LD_ADDR_VAR 0 56
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 3
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: LD_INT 2
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71240: LD_ADDR_VAR 0 57
71244: PUSH
71245: LD_INT 2
71247: NEG
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: LD_INT 1
71273: NEG
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71284: LD_ADDR_VAR 0 58
71288: PUSH
71289: LD_INT 2
71291: NEG
71292: PUSH
71293: LD_INT 3
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 2
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71330: LD_ADDR_VAR 0 59
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 2
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 2
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71374: LD_ADDR_VAR 0 60
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: LD_INT 1
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: LD_INT 0
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: LD_INT 1
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71415: LD_ADDR_VAR 0 61
71419: PUSH
71420: LD_INT 2
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 2
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 1
71442: PUSH
71443: LD_INT 2
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: LIST
71454: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71455: LD_ADDR_VAR 0 62
71459: PUSH
71460: LD_INT 1
71462: PUSH
71463: LD_INT 2
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: LD_INT 2
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: PUSH
71484: LD_INT 1
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: LIST
71495: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71496: LD_ADDR_VAR 0 63
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 2
71514: NEG
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: LD_INT 1
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: LIST
71539: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71540: LD_ADDR_VAR 0 64
71544: PUSH
71545: LD_INT 1
71547: NEG
71548: PUSH
71549: LD_INT 2
71551: NEG
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 2
71559: NEG
71560: PUSH
71561: LD_INT 1
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 2
71571: NEG
71572: PUSH
71573: LD_INT 2
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: LIST
71585: ST_TO_ADDR
// end ; 2 :
71586: GO 74852
71588: LD_INT 2
71590: DOUBLE
71591: EQUAL
71592: IFTRUE 71596
71594: GO 74851
71596: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71597: LD_ADDR_VAR 0 29
71601: PUSH
71602: LD_INT 4
71604: PUSH
71605: LD_INT 0
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 4
71614: PUSH
71615: LD_INT 1
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 5
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: PUSH
71646: LD_INT 1
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: LD_INT 0
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 1
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 3
71676: PUSH
71677: LD_INT 2
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 5
71687: PUSH
71688: LD_INT 2
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 3
71697: PUSH
71698: LD_INT 3
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 2
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 4
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: PUSH
71728: LD_INT 4
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 3
71737: PUSH
71738: LD_INT 4
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 2
71747: PUSH
71748: LD_INT 3
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 2
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 4
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 2
71777: PUSH
71778: LD_INT 4
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 4
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 0
71797: PUSH
71798: LD_INT 3
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: LD_INT 4
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: LD_INT 5
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: LD_INT 5
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 1
71837: NEG
71838: PUSH
71839: LD_INT 4
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 1
71848: NEG
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 2
71859: PUSH
71860: LD_INT 5
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 2
71869: NEG
71870: PUSH
71871: LD_INT 3
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: LD_INT 0
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 3
71891: NEG
71892: PUSH
71893: LD_INT 1
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 2
71914: NEG
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 3
71925: NEG
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 4
71936: NEG
71937: PUSH
71938: LD_INT 0
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 4
71947: NEG
71948: PUSH
71949: LD_INT 1
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 4
71959: NEG
71960: PUSH
71961: LD_INT 2
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 2
71971: NEG
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: NEG
71983: PUSH
71984: LD_INT 4
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 4
71994: NEG
71995: PUSH
71996: LD_INT 5
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 3
72006: NEG
72007: PUSH
72008: LD_INT 4
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: NEG
72019: PUSH
72020: LD_INT 3
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 4
72030: NEG
72031: PUSH
72032: LD_INT 3
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 5
72042: NEG
72043: PUSH
72044: LD_INT 4
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 5
72054: NEG
72055: PUSH
72056: LD_INT 5
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 3
72066: NEG
72067: PUSH
72068: LD_INT 5
72070: NEG
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 5
72078: NEG
72079: PUSH
72080: LD_INT 3
72082: NEG
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72135: LD_ADDR_VAR 0 30
72139: PUSH
72140: LD_INT 4
72142: PUSH
72143: LD_INT 4
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 4
72152: PUSH
72153: LD_INT 3
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 5
72162: PUSH
72163: LD_INT 4
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 5
72172: PUSH
72173: LD_INT 5
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 4
72182: PUSH
72183: LD_INT 5
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: LD_INT 4
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 3
72202: PUSH
72203: LD_INT 3
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 5
72212: PUSH
72213: LD_INT 3
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: LD_INT 5
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: LD_INT 3
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 2
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: LD_INT 3
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: LD_INT 4
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 0
72272: PUSH
72273: LD_INT 4
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 1
72282: NEG
72283: PUSH
72284: LD_INT 3
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: NEG
72294: PUSH
72295: LD_INT 2
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 2
72304: PUSH
72305: LD_INT 4
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 2
72314: NEG
72315: PUSH
72316: LD_INT 2
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 4
72325: NEG
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 4
72336: NEG
72337: PUSH
72338: LD_INT 1
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 3
72348: NEG
72349: PUSH
72350: LD_INT 0
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 3
72359: NEG
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 4
72370: NEG
72371: PUSH
72372: LD_INT 1
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 5
72381: NEG
72382: PUSH
72383: LD_INT 0
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 5
72392: NEG
72393: PUSH
72394: LD_INT 1
72396: NEG
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 5
72404: NEG
72405: PUSH
72406: LD_INT 2
72408: NEG
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 3
72416: NEG
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 3
72427: NEG
72428: PUSH
72429: LD_INT 3
72431: NEG
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 3
72439: NEG
72440: PUSH
72441: LD_INT 4
72443: NEG
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 2
72451: NEG
72452: PUSH
72453: LD_INT 3
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 2
72463: NEG
72464: PUSH
72465: LD_INT 2
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 3
72475: NEG
72476: PUSH
72477: LD_INT 2
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 4
72487: NEG
72488: PUSH
72489: LD_INT 3
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 4
72499: NEG
72500: PUSH
72501: LD_INT 4
72503: NEG
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 2
72511: NEG
72512: PUSH
72513: LD_INT 4
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 4
72523: NEG
72524: PUSH
72525: LD_INT 2
72527: NEG
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 0
72535: PUSH
72536: LD_INT 4
72538: NEG
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: LD_INT 5
72549: NEG
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 1
72557: PUSH
72558: LD_INT 4
72560: NEG
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 1
72568: PUSH
72569: LD_INT 3
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 0
72579: PUSH
72580: LD_INT 3
72582: NEG
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 1
72590: NEG
72591: PUSH
72592: LD_INT 4
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: LD_INT 5
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 2
72614: PUSH
72615: LD_INT 3
72617: NEG
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: NEG
72626: PUSH
72627: LD_INT 5
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72682: LD_ADDR_VAR 0 31
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 4
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: LD_INT 3
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 1
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 1
72719: PUSH
72720: LD_INT 5
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 0
72729: PUSH
72730: LD_INT 5
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 1
72739: NEG
72740: PUSH
72741: LD_INT 4
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 2
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 2
72771: NEG
72772: PUSH
72773: LD_INT 3
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 3
72782: NEG
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 3
72793: NEG
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 2
72805: NEG
72806: PUSH
72807: LD_INT 0
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 2
72816: NEG
72817: PUSH
72818: LD_INT 1
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 3
72827: NEG
72828: PUSH
72829: LD_INT 1
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 4
72838: NEG
72839: PUSH
72840: LD_INT 0
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 4
72849: NEG
72850: PUSH
72851: LD_INT 1
72853: NEG
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 4
72861: NEG
72862: PUSH
72863: LD_INT 2
72865: NEG
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 2
72873: NEG
72874: PUSH
72875: LD_INT 2
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 4
72884: NEG
72885: PUSH
72886: LD_INT 4
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 4
72896: NEG
72897: PUSH
72898: LD_INT 5
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 3
72908: NEG
72909: PUSH
72910: LD_INT 4
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: NEG
72921: PUSH
72922: LD_INT 3
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 4
72932: NEG
72933: PUSH
72934: LD_INT 3
72936: NEG
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 5
72944: NEG
72945: PUSH
72946: LD_INT 4
72948: NEG
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 5
72956: NEG
72957: PUSH
72958: LD_INT 5
72960: NEG
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: NEG
72969: PUSH
72970: LD_INT 5
72972: NEG
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 5
72980: NEG
72981: PUSH
72982: LD_INT 3
72984: NEG
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 0
72992: PUSH
72993: LD_INT 3
72995: NEG
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 0
73003: PUSH
73004: LD_INT 4
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 1
73014: PUSH
73015: LD_INT 3
73017: NEG
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 1
73025: PUSH
73026: LD_INT 2
73028: NEG
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 0
73036: PUSH
73037: LD_INT 2
73039: NEG
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 1
73047: NEG
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: LD_INT 4
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 2
73071: PUSH
73072: LD_INT 2
73074: NEG
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: NEG
73083: PUSH
73084: LD_INT 4
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 4
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 4
73104: PUSH
73105: LD_INT 1
73107: NEG
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 5
73115: PUSH
73116: LD_INT 0
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 5
73125: PUSH
73126: LD_INT 1
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 4
73135: PUSH
73136: LD_INT 1
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 3
73145: PUSH
73146: LD_INT 0
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 3
73155: PUSH
73156: LD_INT 1
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: PUSH
73167: LD_INT 2
73169: NEG
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 5
73177: PUSH
73178: LD_INT 2
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73232: LD_ADDR_VAR 0 32
73236: PUSH
73237: LD_INT 4
73239: NEG
73240: PUSH
73241: LD_INT 0
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 4
73250: NEG
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 3
73262: NEG
73263: PUSH
73264: LD_INT 0
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 3
73273: NEG
73274: PUSH
73275: LD_INT 1
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 4
73284: NEG
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 5
73295: NEG
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 5
73306: NEG
73307: PUSH
73308: LD_INT 1
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 5
73318: NEG
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 3
73330: NEG
73331: PUSH
73332: LD_INT 2
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 3
73341: NEG
73342: PUSH
73343: LD_INT 3
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 3
73353: NEG
73354: PUSH
73355: LD_INT 4
73357: NEG
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 2
73365: NEG
73366: PUSH
73367: LD_INT 3
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: NEG
73378: PUSH
73379: LD_INT 2
73381: NEG
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 3
73389: NEG
73390: PUSH
73391: LD_INT 2
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 4
73401: NEG
73402: PUSH
73403: LD_INT 3
73405: NEG
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 4
73413: NEG
73414: PUSH
73415: LD_INT 4
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: NEG
73426: PUSH
73427: LD_INT 4
73429: NEG
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 4
73437: NEG
73438: PUSH
73439: LD_INT 2
73441: NEG
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 0
73449: PUSH
73450: LD_INT 4
73452: NEG
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 0
73460: PUSH
73461: LD_INT 5
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 1
73471: PUSH
73472: LD_INT 4
73474: NEG
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 1
73482: PUSH
73483: LD_INT 3
73485: NEG
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 0
73493: PUSH
73494: LD_INT 3
73496: NEG
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 1
73504: NEG
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 1
73516: NEG
73517: PUSH
73518: LD_INT 5
73520: NEG
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 2
73528: PUSH
73529: LD_INT 3
73531: NEG
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PUSH
73537: LD_INT 2
73539: NEG
73540: PUSH
73541: LD_INT 5
73543: NEG
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 3
73551: PUSH
73552: LD_INT 0
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 3
73561: PUSH
73562: LD_INT 1
73564: NEG
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 4
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 4
73582: PUSH
73583: LD_INT 1
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 3
73592: PUSH
73593: LD_INT 1
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 2
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 2
73612: PUSH
73613: LD_INT 1
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 2
73623: PUSH
73624: LD_INT 2
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 4
73634: PUSH
73635: LD_INT 2
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 4
73644: PUSH
73645: LD_INT 4
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 4
73654: PUSH
73655: LD_INT 3
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 5
73664: PUSH
73665: LD_INT 4
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 5
73674: PUSH
73675: LD_INT 5
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 4
73684: PUSH
73685: LD_INT 5
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 3
73694: PUSH
73695: LD_INT 4
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_INT 3
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 5
73714: PUSH
73715: LD_INT 3
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 3
73724: PUSH
73725: LD_INT 5
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73779: LD_ADDR_VAR 0 33
73783: PUSH
73784: LD_INT 4
73786: NEG
73787: PUSH
73788: LD_INT 4
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 4
73798: NEG
73799: PUSH
73800: LD_INT 5
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 3
73810: NEG
73811: PUSH
73812: LD_INT 4
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 3
73822: NEG
73823: PUSH
73824: LD_INT 3
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 4
73834: NEG
73835: PUSH
73836: LD_INT 3
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 5
73846: NEG
73847: PUSH
73848: LD_INT 4
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 5
73858: NEG
73859: PUSH
73860: LD_INT 5
73862: NEG
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: NEG
73871: PUSH
73872: LD_INT 5
73874: NEG
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 5
73882: NEG
73883: PUSH
73884: LD_INT 3
73886: NEG
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 0
73894: PUSH
73895: LD_INT 3
73897: NEG
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: LD_INT 4
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: LD_INT 3
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 1
73927: PUSH
73928: LD_INT 2
73930: NEG
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: LD_INT 2
73941: NEG
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: LD_INT 1
73949: NEG
73950: PUSH
73951: LD_INT 3
73953: NEG
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 1
73961: NEG
73962: PUSH
73963: LD_INT 4
73965: NEG
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: LD_INT 2
73976: NEG
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 2
73984: NEG
73985: PUSH
73986: LD_INT 4
73988: NEG
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 4
73996: PUSH
73997: LD_INT 0
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 4
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 5
74017: PUSH
74018: LD_INT 0
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 5
74027: PUSH
74028: LD_INT 1
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 4
74037: PUSH
74038: LD_INT 1
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 3
74047: PUSH
74048: LD_INT 0
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 3
74057: PUSH
74058: LD_INT 1
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 3
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 5
74079: PUSH
74080: LD_INT 2
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 3
74089: PUSH
74090: LD_INT 3
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 3
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 4
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 4
74119: PUSH
74120: LD_INT 4
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 3
74129: PUSH
74130: LD_INT 4
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 2
74139: PUSH
74140: LD_INT 3
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 2
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 4
74159: PUSH
74160: LD_INT 2
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 2
74169: PUSH
74170: LD_INT 4
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 0
74179: PUSH
74180: LD_INT 4
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 0
74189: PUSH
74190: LD_INT 3
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 1
74199: PUSH
74200: LD_INT 4
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 1
74209: PUSH
74210: LD_INT 5
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 0
74219: PUSH
74220: LD_INT 5
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 1
74229: NEG
74230: PUSH
74231: LD_INT 4
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 1
74240: NEG
74241: PUSH
74242: LD_INT 3
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 2
74251: PUSH
74252: LD_INT 5
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 2
74261: NEG
74262: PUSH
74263: LD_INT 3
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74317: LD_ADDR_VAR 0 34
74321: PUSH
74322: LD_INT 0
74324: PUSH
74325: LD_INT 4
74327: NEG
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 0
74335: PUSH
74336: LD_INT 5
74338: NEG
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 1
74346: PUSH
74347: LD_INT 4
74349: NEG
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 1
74357: PUSH
74358: LD_INT 3
74360: NEG
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 0
74368: PUSH
74369: LD_INT 3
74371: NEG
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 1
74379: NEG
74380: PUSH
74381: LD_INT 4
74383: NEG
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 1
74391: NEG
74392: PUSH
74393: LD_INT 5
74395: NEG
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: LD_INT 3
74406: NEG
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 2
74414: NEG
74415: PUSH
74416: LD_INT 5
74418: NEG
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 3
74426: PUSH
74427: LD_INT 0
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 3
74436: PUSH
74437: LD_INT 1
74439: NEG
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 4
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 4
74457: PUSH
74458: LD_INT 1
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 3
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 2
74477: PUSH
74478: LD_INT 0
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 2
74487: PUSH
74488: LD_INT 1
74490: NEG
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: LD_INT 2
74501: NEG
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 4
74509: PUSH
74510: LD_INT 2
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 4
74519: PUSH
74520: LD_INT 4
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 4
74529: PUSH
74530: LD_INT 3
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 5
74539: PUSH
74540: LD_INT 4
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 5
74549: PUSH
74550: LD_INT 5
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 4
74559: PUSH
74560: LD_INT 5
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 3
74569: PUSH
74570: LD_INT 4
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 3
74579: PUSH
74580: LD_INT 3
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 5
74589: PUSH
74590: LD_INT 3
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 3
74599: PUSH
74600: LD_INT 5
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 0
74609: PUSH
74610: LD_INT 3
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 0
74619: PUSH
74620: LD_INT 2
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 1
74629: PUSH
74630: LD_INT 3
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 1
74639: PUSH
74640: LD_INT 4
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: LD_INT 4
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: PUSH
74661: LD_INT 3
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 1
74670: NEG
74671: PUSH
74672: LD_INT 2
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 2
74681: PUSH
74682: LD_INT 4
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 2
74691: NEG
74692: PUSH
74693: LD_INT 2
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 4
74702: NEG
74703: PUSH
74704: LD_INT 0
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 4
74713: NEG
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: PUSH
74723: LD_INT 3
74725: NEG
74726: PUSH
74727: LD_INT 0
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 3
74736: NEG
74737: PUSH
74738: LD_INT 1
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 4
74747: NEG
74748: PUSH
74749: LD_INT 1
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 5
74758: NEG
74759: PUSH
74760: LD_INT 0
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 5
74769: NEG
74770: PUSH
74771: LD_INT 1
74773: NEG
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 5
74781: NEG
74782: PUSH
74783: LD_INT 2
74785: NEG
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 3
74793: NEG
74794: PUSH
74795: LD_INT 2
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: ST_TO_ADDR
// end ; end ;
74849: GO 74852
74851: POP
// case btype of b_depot , b_warehouse :
74852: LD_VAR 0 1
74856: PUSH
74857: LD_INT 0
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74871
74863: LD_INT 1
74865: DOUBLE
74866: EQUAL
74867: IFTRUE 74871
74869: GO 75072
74871: POP
// case nation of nation_american :
74872: LD_VAR 0 5
74876: PUSH
74877: LD_INT 1
74879: DOUBLE
74880: EQUAL
74881: IFTRUE 74885
74883: GO 74941
74885: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74886: LD_ADDR_VAR 0 9
74890: PUSH
74891: LD_VAR 0 11
74895: PUSH
74896: LD_VAR 0 12
74900: PUSH
74901: LD_VAR 0 13
74905: PUSH
74906: LD_VAR 0 14
74910: PUSH
74911: LD_VAR 0 15
74915: PUSH
74916: LD_VAR 0 16
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: PUSH
74929: LD_VAR 0 4
74933: PUSH
74934: LD_INT 1
74936: PLUS
74937: ARRAY
74938: ST_TO_ADDR
74939: GO 75070
74941: LD_INT 2
74943: DOUBLE
74944: EQUAL
74945: IFTRUE 74949
74947: GO 75005
74949: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74950: LD_ADDR_VAR 0 9
74954: PUSH
74955: LD_VAR 0 17
74959: PUSH
74960: LD_VAR 0 18
74964: PUSH
74965: LD_VAR 0 19
74969: PUSH
74970: LD_VAR 0 20
74974: PUSH
74975: LD_VAR 0 21
74979: PUSH
74980: LD_VAR 0 22
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: PUSH
74993: LD_VAR 0 4
74997: PUSH
74998: LD_INT 1
75000: PLUS
75001: ARRAY
75002: ST_TO_ADDR
75003: GO 75070
75005: LD_INT 3
75007: DOUBLE
75008: EQUAL
75009: IFTRUE 75013
75011: GO 75069
75013: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75014: LD_ADDR_VAR 0 9
75018: PUSH
75019: LD_VAR 0 23
75023: PUSH
75024: LD_VAR 0 24
75028: PUSH
75029: LD_VAR 0 25
75033: PUSH
75034: LD_VAR 0 26
75038: PUSH
75039: LD_VAR 0 27
75043: PUSH
75044: LD_VAR 0 28
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: PUSH
75057: LD_VAR 0 4
75061: PUSH
75062: LD_INT 1
75064: PLUS
75065: ARRAY
75066: ST_TO_ADDR
75067: GO 75070
75069: POP
75070: GO 75625
75072: LD_INT 2
75074: DOUBLE
75075: EQUAL
75076: IFTRUE 75086
75078: LD_INT 3
75080: DOUBLE
75081: EQUAL
75082: IFTRUE 75086
75084: GO 75142
75086: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75087: LD_ADDR_VAR 0 9
75091: PUSH
75092: LD_VAR 0 29
75096: PUSH
75097: LD_VAR 0 30
75101: PUSH
75102: LD_VAR 0 31
75106: PUSH
75107: LD_VAR 0 32
75111: PUSH
75112: LD_VAR 0 33
75116: PUSH
75117: LD_VAR 0 34
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: PUSH
75130: LD_VAR 0 4
75134: PUSH
75135: LD_INT 1
75137: PLUS
75138: ARRAY
75139: ST_TO_ADDR
75140: GO 75625
75142: LD_INT 16
75144: DOUBLE
75145: EQUAL
75146: IFTRUE 75204
75148: LD_INT 17
75150: DOUBLE
75151: EQUAL
75152: IFTRUE 75204
75154: LD_INT 18
75156: DOUBLE
75157: EQUAL
75158: IFTRUE 75204
75160: LD_INT 19
75162: DOUBLE
75163: EQUAL
75164: IFTRUE 75204
75166: LD_INT 22
75168: DOUBLE
75169: EQUAL
75170: IFTRUE 75204
75172: LD_INT 20
75174: DOUBLE
75175: EQUAL
75176: IFTRUE 75204
75178: LD_INT 21
75180: DOUBLE
75181: EQUAL
75182: IFTRUE 75204
75184: LD_INT 23
75186: DOUBLE
75187: EQUAL
75188: IFTRUE 75204
75190: LD_INT 24
75192: DOUBLE
75193: EQUAL
75194: IFTRUE 75204
75196: LD_INT 25
75198: DOUBLE
75199: EQUAL
75200: IFTRUE 75204
75202: GO 75260
75204: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75205: LD_ADDR_VAR 0 9
75209: PUSH
75210: LD_VAR 0 35
75214: PUSH
75215: LD_VAR 0 36
75219: PUSH
75220: LD_VAR 0 37
75224: PUSH
75225: LD_VAR 0 38
75229: PUSH
75230: LD_VAR 0 39
75234: PUSH
75235: LD_VAR 0 40
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: PUSH
75248: LD_VAR 0 4
75252: PUSH
75253: LD_INT 1
75255: PLUS
75256: ARRAY
75257: ST_TO_ADDR
75258: GO 75625
75260: LD_INT 6
75262: DOUBLE
75263: EQUAL
75264: IFTRUE 75316
75266: LD_INT 7
75268: DOUBLE
75269: EQUAL
75270: IFTRUE 75316
75272: LD_INT 8
75274: DOUBLE
75275: EQUAL
75276: IFTRUE 75316
75278: LD_INT 13
75280: DOUBLE
75281: EQUAL
75282: IFTRUE 75316
75284: LD_INT 12
75286: DOUBLE
75287: EQUAL
75288: IFTRUE 75316
75290: LD_INT 15
75292: DOUBLE
75293: EQUAL
75294: IFTRUE 75316
75296: LD_INT 11
75298: DOUBLE
75299: EQUAL
75300: IFTRUE 75316
75302: LD_INT 14
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75316
75308: LD_INT 10
75310: DOUBLE
75311: EQUAL
75312: IFTRUE 75316
75314: GO 75372
75316: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75317: LD_ADDR_VAR 0 9
75321: PUSH
75322: LD_VAR 0 41
75326: PUSH
75327: LD_VAR 0 42
75331: PUSH
75332: LD_VAR 0 43
75336: PUSH
75337: LD_VAR 0 44
75341: PUSH
75342: LD_VAR 0 45
75346: PUSH
75347: LD_VAR 0 46
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: PUSH
75360: LD_VAR 0 4
75364: PUSH
75365: LD_INT 1
75367: PLUS
75368: ARRAY
75369: ST_TO_ADDR
75370: GO 75625
75372: LD_INT 36
75374: DOUBLE
75375: EQUAL
75376: IFTRUE 75380
75378: GO 75436
75380: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75381: LD_ADDR_VAR 0 9
75385: PUSH
75386: LD_VAR 0 47
75390: PUSH
75391: LD_VAR 0 48
75395: PUSH
75396: LD_VAR 0 49
75400: PUSH
75401: LD_VAR 0 50
75405: PUSH
75406: LD_VAR 0 51
75410: PUSH
75411: LD_VAR 0 52
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: PUSH
75424: LD_VAR 0 4
75428: PUSH
75429: LD_INT 1
75431: PLUS
75432: ARRAY
75433: ST_TO_ADDR
75434: GO 75625
75436: LD_INT 4
75438: DOUBLE
75439: EQUAL
75440: IFTRUE 75462
75442: LD_INT 5
75444: DOUBLE
75445: EQUAL
75446: IFTRUE 75462
75448: LD_INT 34
75450: DOUBLE
75451: EQUAL
75452: IFTRUE 75462
75454: LD_INT 37
75456: DOUBLE
75457: EQUAL
75458: IFTRUE 75462
75460: GO 75518
75462: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75463: LD_ADDR_VAR 0 9
75467: PUSH
75468: LD_VAR 0 53
75472: PUSH
75473: LD_VAR 0 54
75477: PUSH
75478: LD_VAR 0 55
75482: PUSH
75483: LD_VAR 0 56
75487: PUSH
75488: LD_VAR 0 57
75492: PUSH
75493: LD_VAR 0 58
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: PUSH
75506: LD_VAR 0 4
75510: PUSH
75511: LD_INT 1
75513: PLUS
75514: ARRAY
75515: ST_TO_ADDR
75516: GO 75625
75518: LD_INT 31
75520: DOUBLE
75521: EQUAL
75522: IFTRUE 75568
75524: LD_INT 32
75526: DOUBLE
75527: EQUAL
75528: IFTRUE 75568
75530: LD_INT 33
75532: DOUBLE
75533: EQUAL
75534: IFTRUE 75568
75536: LD_INT 27
75538: DOUBLE
75539: EQUAL
75540: IFTRUE 75568
75542: LD_INT 26
75544: DOUBLE
75545: EQUAL
75546: IFTRUE 75568
75548: LD_INT 28
75550: DOUBLE
75551: EQUAL
75552: IFTRUE 75568
75554: LD_INT 29
75556: DOUBLE
75557: EQUAL
75558: IFTRUE 75568
75560: LD_INT 30
75562: DOUBLE
75563: EQUAL
75564: IFTRUE 75568
75566: GO 75624
75568: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75569: LD_ADDR_VAR 0 9
75573: PUSH
75574: LD_VAR 0 59
75578: PUSH
75579: LD_VAR 0 60
75583: PUSH
75584: LD_VAR 0 61
75588: PUSH
75589: LD_VAR 0 62
75593: PUSH
75594: LD_VAR 0 63
75598: PUSH
75599: LD_VAR 0 64
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: PUSH
75612: LD_VAR 0 4
75616: PUSH
75617: LD_INT 1
75619: PLUS
75620: ARRAY
75621: ST_TO_ADDR
75622: GO 75625
75624: POP
// temp_list2 = [ ] ;
75625: LD_ADDR_VAR 0 10
75629: PUSH
75630: EMPTY
75631: ST_TO_ADDR
// for i in temp_list do
75632: LD_ADDR_VAR 0 8
75636: PUSH
75637: LD_VAR 0 9
75641: PUSH
75642: FOR_IN
75643: IFFALSE 75695
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75645: LD_ADDR_VAR 0 10
75649: PUSH
75650: LD_VAR 0 10
75654: PUSH
75655: LD_VAR 0 8
75659: PUSH
75660: LD_INT 1
75662: ARRAY
75663: PUSH
75664: LD_VAR 0 2
75668: PLUS
75669: PUSH
75670: LD_VAR 0 8
75674: PUSH
75675: LD_INT 2
75677: ARRAY
75678: PUSH
75679: LD_VAR 0 3
75683: PLUS
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: EMPTY
75690: LIST
75691: ADD
75692: ST_TO_ADDR
75693: GO 75642
75695: POP
75696: POP
// result = temp_list2 ;
75697: LD_ADDR_VAR 0 7
75701: PUSH
75702: LD_VAR 0 10
75706: ST_TO_ADDR
// end ;
75707: LD_VAR 0 7
75711: RET
// export function EnemyInRange ( unit , dist ) ; begin
75712: LD_INT 0
75714: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75715: LD_ADDR_VAR 0 3
75719: PUSH
75720: LD_VAR 0 1
75724: PPUSH
75725: CALL_OW 255
75729: PPUSH
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 250
75739: PPUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 251
75749: PPUSH
75750: LD_VAR 0 2
75754: PPUSH
75755: CALL 48969 0 4
75759: PUSH
75760: LD_INT 4
75762: ARRAY
75763: ST_TO_ADDR
// end ;
75764: LD_VAR 0 3
75768: RET
// export function PlayerSeeMe ( unit ) ; begin
75769: LD_INT 0
75771: PPUSH
// result := See ( your_side , unit ) ;
75772: LD_ADDR_VAR 0 2
75776: PUSH
75777: LD_OWVAR 2
75781: PPUSH
75782: LD_VAR 0 1
75786: PPUSH
75787: CALL_OW 292
75791: ST_TO_ADDR
// end ;
75792: LD_VAR 0 2
75796: RET
// export function ReverseDir ( unit ) ; begin
75797: LD_INT 0
75799: PPUSH
// if not unit then
75800: LD_VAR 0 1
75804: NOT
75805: IFFALSE 75809
// exit ;
75807: GO 75832
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75809: LD_ADDR_VAR 0 2
75813: PUSH
75814: LD_VAR 0 1
75818: PPUSH
75819: CALL_OW 254
75823: PUSH
75824: LD_INT 3
75826: PLUS
75827: PUSH
75828: LD_INT 6
75830: MOD
75831: ST_TO_ADDR
// end ;
75832: LD_VAR 0 2
75836: RET
// export function ReverseArray ( array ) ; var i ; begin
75837: LD_INT 0
75839: PPUSH
75840: PPUSH
// if not array then
75841: LD_VAR 0 1
75845: NOT
75846: IFFALSE 75850
// exit ;
75848: GO 75905
// result := [ ] ;
75850: LD_ADDR_VAR 0 2
75854: PUSH
75855: EMPTY
75856: ST_TO_ADDR
// for i := array downto 1 do
75857: LD_ADDR_VAR 0 3
75861: PUSH
75862: DOUBLE
75863: LD_VAR 0 1
75867: INC
75868: ST_TO_ADDR
75869: LD_INT 1
75871: PUSH
75872: FOR_DOWNTO
75873: IFFALSE 75903
// result := Join ( result , array [ i ] ) ;
75875: LD_ADDR_VAR 0 2
75879: PUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: LD_VAR 0 1
75889: PUSH
75890: LD_VAR 0 3
75894: ARRAY
75895: PPUSH
75896: CALL 80747 0 2
75900: ST_TO_ADDR
75901: GO 75872
75903: POP
75904: POP
// end ;
75905: LD_VAR 0 2
75909: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75910: LD_INT 0
75912: PPUSH
75913: PPUSH
75914: PPUSH
75915: PPUSH
75916: PPUSH
75917: PPUSH
// if not unit or not hexes then
75918: LD_VAR 0 1
75922: NOT
75923: IFTRUE 75932
75925: PUSH
75926: LD_VAR 0 2
75930: NOT
75931: OR
75932: IFFALSE 75936
// exit ;
75934: GO 76059
// dist := 9999 ;
75936: LD_ADDR_VAR 0 5
75940: PUSH
75941: LD_INT 9999
75943: ST_TO_ADDR
// for i = 1 to hexes do
75944: LD_ADDR_VAR 0 4
75948: PUSH
75949: DOUBLE
75950: LD_INT 1
75952: DEC
75953: ST_TO_ADDR
75954: LD_VAR 0 2
75958: PUSH
75959: FOR_TO
75960: IFFALSE 76047
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75962: LD_ADDR_VAR 0 6
75966: PUSH
75967: LD_VAR 0 1
75971: PPUSH
75972: LD_VAR 0 2
75976: PUSH
75977: LD_VAR 0 4
75981: ARRAY
75982: PUSH
75983: LD_INT 1
75985: ARRAY
75986: PPUSH
75987: LD_VAR 0 2
75991: PUSH
75992: LD_VAR 0 4
75996: ARRAY
75997: PUSH
75998: LD_INT 2
76000: ARRAY
76001: PPUSH
76002: CALL_OW 297
76006: ST_TO_ADDR
// if tdist < dist then
76007: LD_VAR 0 6
76011: PUSH
76012: LD_VAR 0 5
76016: LESS
76017: IFFALSE 76045
// begin hex := hexes [ i ] ;
76019: LD_ADDR_VAR 0 8
76023: PUSH
76024: LD_VAR 0 2
76028: PUSH
76029: LD_VAR 0 4
76033: ARRAY
76034: ST_TO_ADDR
// dist := tdist ;
76035: LD_ADDR_VAR 0 5
76039: PUSH
76040: LD_VAR 0 6
76044: ST_TO_ADDR
// end ; end ;
76045: GO 75959
76047: POP
76048: POP
// result := hex ;
76049: LD_ADDR_VAR 0 3
76053: PUSH
76054: LD_VAR 0 8
76058: ST_TO_ADDR
// end ;
76059: LD_VAR 0 3
76063: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76068: LD_VAR 0 1
76072: NOT
76073: IFTRUE 76112
76075: PUSH
76076: LD_VAR 0 1
76080: PUSH
76081: LD_INT 21
76083: PUSH
76084: LD_INT 2
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 23
76093: PUSH
76094: LD_INT 2
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PPUSH
76105: CALL_OW 69
76109: IN
76110: NOT
76111: OR
76112: IFFALSE 76116
// exit ;
76114: GO 76163
// for i = 1 to 3 do
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: DOUBLE
76122: LD_INT 1
76124: DEC
76125: ST_TO_ADDR
76126: LD_INT 3
76128: PUSH
76129: FOR_TO
76130: IFFALSE 76161
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76132: LD_VAR 0 1
76136: PPUSH
76137: CALL_OW 250
76141: PPUSH
76142: LD_VAR 0 1
76146: PPUSH
76147: CALL_OW 251
76151: PPUSH
76152: LD_INT 1
76154: PPUSH
76155: CALL_OW 453
76159: GO 76129
76161: POP
76162: POP
// end ;
76163: LD_VAR 0 2
76167: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76168: LD_INT 0
76170: PPUSH
76171: PPUSH
76172: PPUSH
76173: PPUSH
76174: PPUSH
76175: PPUSH
// if not unit or not enemy_unit then
76176: LD_VAR 0 1
76180: NOT
76181: IFTRUE 76190
76183: PUSH
76184: LD_VAR 0 2
76188: NOT
76189: OR
76190: IFFALSE 76194
// exit ;
76192: GO 76665
// if GetLives ( i ) < 250 then
76194: LD_VAR 0 4
76198: PPUSH
76199: CALL_OW 256
76203: PUSH
76204: LD_INT 250
76206: LESS
76207: IFFALSE 76220
// begin ComAutodestruct ( i ) ;
76209: LD_VAR 0 4
76213: PPUSH
76214: CALL 76064 0 1
// exit ;
76218: GO 76665
// end ; x := GetX ( enemy_unit ) ;
76220: LD_ADDR_VAR 0 7
76224: PUSH
76225: LD_VAR 0 2
76229: PPUSH
76230: CALL_OW 250
76234: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76235: LD_ADDR_VAR 0 8
76239: PUSH
76240: LD_VAR 0 2
76244: PPUSH
76245: CALL_OW 251
76249: ST_TO_ADDR
// if not x or not y then
76250: LD_VAR 0 7
76254: NOT
76255: IFTRUE 76264
76257: PUSH
76258: LD_VAR 0 8
76262: NOT
76263: OR
76264: IFFALSE 76268
// exit ;
76266: GO 76665
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76268: LD_ADDR_VAR 0 6
76272: PUSH
76273: LD_VAR 0 7
76277: PPUSH
76278: LD_INT 0
76280: PPUSH
76281: LD_INT 4
76283: PPUSH
76284: CALL_OW 272
76288: PUSH
76289: LD_VAR 0 8
76293: PPUSH
76294: LD_INT 0
76296: PPUSH
76297: LD_INT 4
76299: PPUSH
76300: CALL_OW 273
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: LD_VAR 0 7
76313: PPUSH
76314: LD_INT 1
76316: PPUSH
76317: LD_INT 4
76319: PPUSH
76320: CALL_OW 272
76324: PUSH
76325: LD_VAR 0 8
76329: PPUSH
76330: LD_INT 1
76332: PPUSH
76333: LD_INT 4
76335: PPUSH
76336: CALL_OW 273
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: PUSH
76345: LD_VAR 0 7
76349: PPUSH
76350: LD_INT 2
76352: PPUSH
76353: LD_INT 4
76355: PPUSH
76356: CALL_OW 272
76360: PUSH
76361: LD_VAR 0 8
76365: PPUSH
76366: LD_INT 2
76368: PPUSH
76369: LD_INT 4
76371: PPUSH
76372: CALL_OW 273
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_VAR 0 7
76385: PPUSH
76386: LD_INT 3
76388: PPUSH
76389: LD_INT 4
76391: PPUSH
76392: CALL_OW 272
76396: PUSH
76397: LD_VAR 0 8
76401: PPUSH
76402: LD_INT 3
76404: PPUSH
76405: LD_INT 4
76407: PPUSH
76408: CALL_OW 273
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: PUSH
76417: LD_VAR 0 7
76421: PPUSH
76422: LD_INT 4
76424: PPUSH
76425: LD_INT 4
76427: PPUSH
76428: CALL_OW 272
76432: PUSH
76433: LD_VAR 0 8
76437: PPUSH
76438: LD_INT 4
76440: PPUSH
76441: LD_INT 4
76443: PPUSH
76444: CALL_OW 273
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_VAR 0 7
76457: PPUSH
76458: LD_INT 5
76460: PPUSH
76461: LD_INT 4
76463: PPUSH
76464: CALL_OW 272
76468: PUSH
76469: LD_VAR 0 8
76473: PPUSH
76474: LD_INT 5
76476: PPUSH
76477: LD_INT 4
76479: PPUSH
76480: CALL_OW 273
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: ST_TO_ADDR
// for i = tmp downto 1 do
76497: LD_ADDR_VAR 0 4
76501: PUSH
76502: DOUBLE
76503: LD_VAR 0 6
76507: INC
76508: ST_TO_ADDR
76509: LD_INT 1
76511: PUSH
76512: FOR_DOWNTO
76513: IFFALSE 76616
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76515: LD_VAR 0 6
76519: PUSH
76520: LD_VAR 0 4
76524: ARRAY
76525: PUSH
76526: LD_INT 1
76528: ARRAY
76529: PPUSH
76530: LD_VAR 0 6
76534: PUSH
76535: LD_VAR 0 4
76539: ARRAY
76540: PUSH
76541: LD_INT 2
76543: ARRAY
76544: PPUSH
76545: CALL_OW 488
76549: NOT
76550: IFTRUE 76592
76552: PUSH
76553: LD_VAR 0 6
76557: PUSH
76558: LD_VAR 0 4
76562: ARRAY
76563: PUSH
76564: LD_INT 1
76566: ARRAY
76567: PPUSH
76568: LD_VAR 0 6
76572: PUSH
76573: LD_VAR 0 4
76577: ARRAY
76578: PUSH
76579: LD_INT 2
76581: ARRAY
76582: PPUSH
76583: CALL_OW 428
76587: PUSH
76588: LD_INT 0
76590: NONEQUAL
76591: OR
76592: IFFALSE 76614
// tmp := Delete ( tmp , i ) ;
76594: LD_ADDR_VAR 0 6
76598: PUSH
76599: LD_VAR 0 6
76603: PPUSH
76604: LD_VAR 0 4
76608: PPUSH
76609: CALL_OW 3
76613: ST_TO_ADDR
76614: GO 76512
76616: POP
76617: POP
// j := GetClosestHex ( unit , tmp ) ;
76618: LD_ADDR_VAR 0 5
76622: PUSH
76623: LD_VAR 0 1
76627: PPUSH
76628: LD_VAR 0 6
76632: PPUSH
76633: CALL 75910 0 2
76637: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76638: LD_VAR 0 1
76642: PPUSH
76643: LD_VAR 0 5
76647: PUSH
76648: LD_INT 1
76650: ARRAY
76651: PPUSH
76652: LD_VAR 0 5
76656: PUSH
76657: LD_INT 2
76659: ARRAY
76660: PPUSH
76661: CALL_OW 111
// end ;
76665: LD_VAR 0 3
76669: RET
// export function PrepareApemanSoldier ( ) ; begin
76670: LD_INT 0
76672: PPUSH
// uc_nation := 0 ;
76673: LD_ADDR_OWVAR 21
76677: PUSH
76678: LD_INT 0
76680: ST_TO_ADDR
// hc_sex := sex_male ;
76681: LD_ADDR_OWVAR 27
76685: PUSH
76686: LD_INT 1
76688: ST_TO_ADDR
// hc_name :=  ;
76689: LD_ADDR_OWVAR 26
76693: PUSH
76694: LD_STRING 
76696: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76697: LD_ADDR_OWVAR 28
76701: PUSH
76702: LD_INT 15
76704: ST_TO_ADDR
// hc_gallery :=  ;
76705: LD_ADDR_OWVAR 33
76709: PUSH
76710: LD_STRING 
76712: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76713: LD_ADDR_OWVAR 31
76717: PUSH
76718: LD_INT 0
76720: PPUSH
76721: LD_INT 3
76723: PPUSH
76724: CALL_OW 12
76728: PUSH
76729: LD_INT 0
76731: PPUSH
76732: LD_INT 3
76734: PPUSH
76735: CALL_OW 12
76739: PUSH
76740: LD_INT 0
76742: PUSH
76743: LD_INT 0
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76752: LD_ADDR_OWVAR 29
76756: PUSH
76757: LD_INT 12
76759: PUSH
76760: LD_INT 12
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: ST_TO_ADDR
// end ;
76767: LD_VAR 0 1
76771: RET
// export function PrepareApemanEngineer ( ) ; begin
76772: LD_INT 0
76774: PPUSH
// uc_nation := 0 ;
76775: LD_ADDR_OWVAR 21
76779: PUSH
76780: LD_INT 0
76782: ST_TO_ADDR
// hc_sex := sex_male ;
76783: LD_ADDR_OWVAR 27
76787: PUSH
76788: LD_INT 1
76790: ST_TO_ADDR
// hc_name :=  ;
76791: LD_ADDR_OWVAR 26
76795: PUSH
76796: LD_STRING 
76798: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76799: LD_ADDR_OWVAR 28
76803: PUSH
76804: LD_INT 16
76806: ST_TO_ADDR
// hc_gallery :=  ;
76807: LD_ADDR_OWVAR 33
76811: PUSH
76812: LD_STRING 
76814: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76815: LD_ADDR_OWVAR 31
76819: PUSH
76820: LD_INT 0
76822: PPUSH
76823: LD_INT 3
76825: PPUSH
76826: CALL_OW 12
76830: PUSH
76831: LD_INT 0
76833: PPUSH
76834: LD_INT 3
76836: PPUSH
76837: CALL_OW 12
76841: PUSH
76842: LD_INT 0
76844: PUSH
76845: LD_INT 0
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76854: LD_ADDR_OWVAR 29
76858: PUSH
76859: LD_INT 12
76861: PUSH
76862: LD_INT 12
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: ST_TO_ADDR
// end ;
76869: LD_VAR 0 1
76873: RET
// export function PrepareApeman ( agressivity ) ; begin
76874: LD_INT 0
76876: PPUSH
// uc_side := 0 ;
76877: LD_ADDR_OWVAR 20
76881: PUSH
76882: LD_INT 0
76884: ST_TO_ADDR
// uc_nation := 0 ;
76885: LD_ADDR_OWVAR 21
76889: PUSH
76890: LD_INT 0
76892: ST_TO_ADDR
// hc_sex := sex_male ;
76893: LD_ADDR_OWVAR 27
76897: PUSH
76898: LD_INT 1
76900: ST_TO_ADDR
// hc_class := class_apeman ;
76901: LD_ADDR_OWVAR 28
76905: PUSH
76906: LD_INT 12
76908: ST_TO_ADDR
// hc_gallery :=  ;
76909: LD_ADDR_OWVAR 33
76913: PUSH
76914: LD_STRING 
76916: ST_TO_ADDR
// hc_name :=  ;
76917: LD_ADDR_OWVAR 26
76921: PUSH
76922: LD_STRING 
76924: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76925: LD_ADDR_OWVAR 29
76929: PUSH
76930: LD_INT 12
76932: PUSH
76933: LD_INT 12
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: ST_TO_ADDR
// if agressivity = 0 then
76940: LD_VAR 0 1
76944: PUSH
76945: LD_INT 0
76947: EQUAL
76948: IFFALSE 76960
// hc_agressivity := 0 else
76950: LD_ADDR_OWVAR 35
76954: PUSH
76955: LD_INT 0
76957: ST_TO_ADDR
76958: GO 76981
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76960: LD_ADDR_OWVAR 35
76964: PUSH
76965: LD_VAR 0 1
76969: NEG
76970: PPUSH
76971: LD_VAR 0 1
76975: PPUSH
76976: CALL_OW 12
76980: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76981: LD_ADDR_OWVAR 31
76985: PUSH
76986: LD_INT 0
76988: PPUSH
76989: LD_INT 3
76991: PPUSH
76992: CALL_OW 12
76996: PUSH
76997: LD_INT 0
76999: PPUSH
77000: LD_INT 3
77002: PPUSH
77003: CALL_OW 12
77007: PUSH
77008: LD_INT 0
77010: PUSH
77011: LD_INT 0
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: ST_TO_ADDR
// end ;
77020: LD_VAR 0 2
77024: RET
// export function PrepareTiger ( agressivity ) ; begin
77025: LD_INT 0
77027: PPUSH
// uc_side := 0 ;
77028: LD_ADDR_OWVAR 20
77032: PUSH
77033: LD_INT 0
77035: ST_TO_ADDR
// uc_nation := 0 ;
77036: LD_ADDR_OWVAR 21
77040: PUSH
77041: LD_INT 0
77043: ST_TO_ADDR
// InitHc ;
77044: CALL_OW 19
// hc_class := class_tiger ;
77048: LD_ADDR_OWVAR 28
77052: PUSH
77053: LD_INT 14
77055: ST_TO_ADDR
// hc_gallery :=  ;
77056: LD_ADDR_OWVAR 33
77060: PUSH
77061: LD_STRING 
77063: ST_TO_ADDR
// hc_name :=  ;
77064: LD_ADDR_OWVAR 26
77068: PUSH
77069: LD_STRING 
77071: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77072: LD_ADDR_OWVAR 35
77076: PUSH
77077: LD_VAR 0 1
77081: NEG
77082: PPUSH
77083: LD_VAR 0 1
77087: PPUSH
77088: CALL_OW 12
77092: ST_TO_ADDR
// end ;
77093: LD_VAR 0 2
77097: RET
// export function PrepareEnchidna ( ) ; begin
77098: LD_INT 0
77100: PPUSH
// uc_side := 0 ;
77101: LD_ADDR_OWVAR 20
77105: PUSH
77106: LD_INT 0
77108: ST_TO_ADDR
// uc_nation := 0 ;
77109: LD_ADDR_OWVAR 21
77113: PUSH
77114: LD_INT 0
77116: ST_TO_ADDR
// InitHc ;
77117: CALL_OW 19
// hc_class := class_baggie ;
77121: LD_ADDR_OWVAR 28
77125: PUSH
77126: LD_INT 13
77128: ST_TO_ADDR
// hc_gallery :=  ;
77129: LD_ADDR_OWVAR 33
77133: PUSH
77134: LD_STRING 
77136: ST_TO_ADDR
// hc_name :=  ;
77137: LD_ADDR_OWVAR 26
77141: PUSH
77142: LD_STRING 
77144: ST_TO_ADDR
// end ;
77145: LD_VAR 0 1
77149: RET
// export function PrepareFrog ( ) ; begin
77150: LD_INT 0
77152: PPUSH
// uc_side := 0 ;
77153: LD_ADDR_OWVAR 20
77157: PUSH
77158: LD_INT 0
77160: ST_TO_ADDR
// uc_nation := 0 ;
77161: LD_ADDR_OWVAR 21
77165: PUSH
77166: LD_INT 0
77168: ST_TO_ADDR
// InitHc ;
77169: CALL_OW 19
// hc_class := class_frog ;
77173: LD_ADDR_OWVAR 28
77177: PUSH
77178: LD_INT 19
77180: ST_TO_ADDR
// hc_gallery :=  ;
77181: LD_ADDR_OWVAR 33
77185: PUSH
77186: LD_STRING 
77188: ST_TO_ADDR
// hc_name :=  ;
77189: LD_ADDR_OWVAR 26
77193: PUSH
77194: LD_STRING 
77196: ST_TO_ADDR
// end ;
77197: LD_VAR 0 1
77201: RET
// export function PrepareFish ( ) ; begin
77202: LD_INT 0
77204: PPUSH
// uc_side := 0 ;
77205: LD_ADDR_OWVAR 20
77209: PUSH
77210: LD_INT 0
77212: ST_TO_ADDR
// uc_nation := 0 ;
77213: LD_ADDR_OWVAR 21
77217: PUSH
77218: LD_INT 0
77220: ST_TO_ADDR
// InitHc ;
77221: CALL_OW 19
// hc_class := class_fish ;
77225: LD_ADDR_OWVAR 28
77229: PUSH
77230: LD_INT 20
77232: ST_TO_ADDR
// hc_gallery :=  ;
77233: LD_ADDR_OWVAR 33
77237: PUSH
77238: LD_STRING 
77240: ST_TO_ADDR
// hc_name :=  ;
77241: LD_ADDR_OWVAR 26
77245: PUSH
77246: LD_STRING 
77248: ST_TO_ADDR
// end ;
77249: LD_VAR 0 1
77253: RET
// export function PrepareBird ( ) ; begin
77254: LD_INT 0
77256: PPUSH
// uc_side := 0 ;
77257: LD_ADDR_OWVAR 20
77261: PUSH
77262: LD_INT 0
77264: ST_TO_ADDR
// uc_nation := 0 ;
77265: LD_ADDR_OWVAR 21
77269: PUSH
77270: LD_INT 0
77272: ST_TO_ADDR
// InitHc ;
77273: CALL_OW 19
// hc_class := class_phororhacos ;
77277: LD_ADDR_OWVAR 28
77281: PUSH
77282: LD_INT 18
77284: ST_TO_ADDR
// hc_gallery :=  ;
77285: LD_ADDR_OWVAR 33
77289: PUSH
77290: LD_STRING 
77292: ST_TO_ADDR
// hc_name :=  ;
77293: LD_ADDR_OWVAR 26
77297: PUSH
77298: LD_STRING 
77300: ST_TO_ADDR
// end ;
77301: LD_VAR 0 1
77305: RET
// export function PrepareHorse ( ) ; begin
77306: LD_INT 0
77308: PPUSH
// uc_side := 0 ;
77309: LD_ADDR_OWVAR 20
77313: PUSH
77314: LD_INT 0
77316: ST_TO_ADDR
// uc_nation := 0 ;
77317: LD_ADDR_OWVAR 21
77321: PUSH
77322: LD_INT 0
77324: ST_TO_ADDR
// InitHc ;
77325: CALL_OW 19
// hc_class := class_horse ;
77329: LD_ADDR_OWVAR 28
77333: PUSH
77334: LD_INT 21
77336: ST_TO_ADDR
// hc_gallery :=  ;
77337: LD_ADDR_OWVAR 33
77341: PUSH
77342: LD_STRING 
77344: ST_TO_ADDR
// hc_name :=  ;
77345: LD_ADDR_OWVAR 26
77349: PUSH
77350: LD_STRING 
77352: ST_TO_ADDR
// end ;
77353: LD_VAR 0 1
77357: RET
// export function PrepareMastodont ( ) ; begin
77358: LD_INT 0
77360: PPUSH
// uc_side := 0 ;
77361: LD_ADDR_OWVAR 20
77365: PUSH
77366: LD_INT 0
77368: ST_TO_ADDR
// uc_nation := 0 ;
77369: LD_ADDR_OWVAR 21
77373: PUSH
77374: LD_INT 0
77376: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77377: LD_ADDR_OWVAR 37
77381: PUSH
77382: LD_INT 31
77384: ST_TO_ADDR
// vc_control := control_rider ;
77385: LD_ADDR_OWVAR 38
77389: PUSH
77390: LD_INT 4
77392: ST_TO_ADDR
// end ;
77393: LD_VAR 0 1
77397: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77398: LD_INT 0
77400: PPUSH
77401: PPUSH
77402: PPUSH
// uc_side = 0 ;
77403: LD_ADDR_OWVAR 20
77407: PUSH
77408: LD_INT 0
77410: ST_TO_ADDR
// uc_nation = 0 ;
77411: LD_ADDR_OWVAR 21
77415: PUSH
77416: LD_INT 0
77418: ST_TO_ADDR
// InitHc_All ( ) ;
77419: CALL_OW 584
// InitVc ;
77423: CALL_OW 20
// if mastodonts then
77427: LD_VAR 0 6
77431: IFFALSE 77498
// for i = 1 to mastodonts do
77433: LD_ADDR_VAR 0 11
77437: PUSH
77438: DOUBLE
77439: LD_INT 1
77441: DEC
77442: ST_TO_ADDR
77443: LD_VAR 0 6
77447: PUSH
77448: FOR_TO
77449: IFFALSE 77496
// begin vc_chassis := 31 ;
77451: LD_ADDR_OWVAR 37
77455: PUSH
77456: LD_INT 31
77458: ST_TO_ADDR
// vc_control := control_rider ;
77459: LD_ADDR_OWVAR 38
77463: PUSH
77464: LD_INT 4
77466: ST_TO_ADDR
// animal := CreateVehicle ;
77467: LD_ADDR_VAR 0 12
77471: PUSH
77472: CALL_OW 45
77476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77477: LD_VAR 0 12
77481: PPUSH
77482: LD_VAR 0 8
77486: PPUSH
77487: LD_INT 0
77489: PPUSH
77490: CALL 79640 0 3
// end ;
77494: GO 77448
77496: POP
77497: POP
// if horses then
77498: LD_VAR 0 5
77502: IFFALSE 77569
// for i = 1 to horses do
77504: LD_ADDR_VAR 0 11
77508: PUSH
77509: DOUBLE
77510: LD_INT 1
77512: DEC
77513: ST_TO_ADDR
77514: LD_VAR 0 5
77518: PUSH
77519: FOR_TO
77520: IFFALSE 77567
// begin hc_class := 21 ;
77522: LD_ADDR_OWVAR 28
77526: PUSH
77527: LD_INT 21
77529: ST_TO_ADDR
// hc_gallery :=  ;
77530: LD_ADDR_OWVAR 33
77534: PUSH
77535: LD_STRING 
77537: ST_TO_ADDR
// animal := CreateHuman ;
77538: LD_ADDR_VAR 0 12
77542: PUSH
77543: CALL_OW 44
77547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77548: LD_VAR 0 12
77552: PPUSH
77553: LD_VAR 0 8
77557: PPUSH
77558: LD_INT 0
77560: PPUSH
77561: CALL 79640 0 3
// end ;
77565: GO 77519
77567: POP
77568: POP
// if birds then
77569: LD_VAR 0 1
77573: IFFALSE 77640
// for i = 1 to birds do
77575: LD_ADDR_VAR 0 11
77579: PUSH
77580: DOUBLE
77581: LD_INT 1
77583: DEC
77584: ST_TO_ADDR
77585: LD_VAR 0 1
77589: PUSH
77590: FOR_TO
77591: IFFALSE 77638
// begin hc_class := 18 ;
77593: LD_ADDR_OWVAR 28
77597: PUSH
77598: LD_INT 18
77600: ST_TO_ADDR
// hc_gallery =  ;
77601: LD_ADDR_OWVAR 33
77605: PUSH
77606: LD_STRING 
77608: ST_TO_ADDR
// animal := CreateHuman ;
77609: LD_ADDR_VAR 0 12
77613: PUSH
77614: CALL_OW 44
77618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77619: LD_VAR 0 12
77623: PPUSH
77624: LD_VAR 0 8
77628: PPUSH
77629: LD_INT 0
77631: PPUSH
77632: CALL 79640 0 3
// end ;
77636: GO 77590
77638: POP
77639: POP
// if tigers then
77640: LD_VAR 0 2
77644: IFFALSE 77728
// for i = 1 to tigers do
77646: LD_ADDR_VAR 0 11
77650: PUSH
77651: DOUBLE
77652: LD_INT 1
77654: DEC
77655: ST_TO_ADDR
77656: LD_VAR 0 2
77660: PUSH
77661: FOR_TO
77662: IFFALSE 77726
// begin hc_class = class_tiger ;
77664: LD_ADDR_OWVAR 28
77668: PUSH
77669: LD_INT 14
77671: ST_TO_ADDR
// hc_gallery =  ;
77672: LD_ADDR_OWVAR 33
77676: PUSH
77677: LD_STRING 
77679: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77680: LD_ADDR_OWVAR 35
77684: PUSH
77685: LD_INT 7
77687: NEG
77688: PPUSH
77689: LD_INT 7
77691: PPUSH
77692: CALL_OW 12
77696: ST_TO_ADDR
// animal := CreateHuman ;
77697: LD_ADDR_VAR 0 12
77701: PUSH
77702: CALL_OW 44
77706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77707: LD_VAR 0 12
77711: PPUSH
77712: LD_VAR 0 8
77716: PPUSH
77717: LD_INT 0
77719: PPUSH
77720: CALL 79640 0 3
// end ;
77724: GO 77661
77726: POP
77727: POP
// if apemans then
77728: LD_VAR 0 3
77732: IFFALSE 77855
// for i = 1 to apemans do
77734: LD_ADDR_VAR 0 11
77738: PUSH
77739: DOUBLE
77740: LD_INT 1
77742: DEC
77743: ST_TO_ADDR
77744: LD_VAR 0 3
77748: PUSH
77749: FOR_TO
77750: IFFALSE 77853
// begin hc_class = class_apeman ;
77752: LD_ADDR_OWVAR 28
77756: PUSH
77757: LD_INT 12
77759: ST_TO_ADDR
// hc_gallery =  ;
77760: LD_ADDR_OWVAR 33
77764: PUSH
77765: LD_STRING 
77767: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77768: LD_ADDR_OWVAR 35
77772: PUSH
77773: LD_INT 2
77775: NEG
77776: PPUSH
77777: LD_INT 2
77779: PPUSH
77780: CALL_OW 12
77784: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77785: LD_ADDR_OWVAR 31
77789: PUSH
77790: LD_INT 1
77792: PPUSH
77793: LD_INT 3
77795: PPUSH
77796: CALL_OW 12
77800: PUSH
77801: LD_INT 1
77803: PPUSH
77804: LD_INT 3
77806: PPUSH
77807: CALL_OW 12
77811: PUSH
77812: LD_INT 0
77814: PUSH
77815: LD_INT 0
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: ST_TO_ADDR
// animal := CreateHuman ;
77824: LD_ADDR_VAR 0 12
77828: PUSH
77829: CALL_OW 44
77833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77834: LD_VAR 0 12
77838: PPUSH
77839: LD_VAR 0 8
77843: PPUSH
77844: LD_INT 0
77846: PPUSH
77847: CALL 79640 0 3
// end ;
77851: GO 77749
77853: POP
77854: POP
// if enchidnas then
77855: LD_VAR 0 4
77859: IFFALSE 77926
// for i = 1 to enchidnas do
77861: LD_ADDR_VAR 0 11
77865: PUSH
77866: DOUBLE
77867: LD_INT 1
77869: DEC
77870: ST_TO_ADDR
77871: LD_VAR 0 4
77875: PUSH
77876: FOR_TO
77877: IFFALSE 77924
// begin hc_class = 13 ;
77879: LD_ADDR_OWVAR 28
77883: PUSH
77884: LD_INT 13
77886: ST_TO_ADDR
// hc_gallery =  ;
77887: LD_ADDR_OWVAR 33
77891: PUSH
77892: LD_STRING 
77894: ST_TO_ADDR
// animal := CreateHuman ;
77895: LD_ADDR_VAR 0 12
77899: PUSH
77900: CALL_OW 44
77904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77905: LD_VAR 0 12
77909: PPUSH
77910: LD_VAR 0 8
77914: PPUSH
77915: LD_INT 0
77917: PPUSH
77918: CALL 79640 0 3
// end ;
77922: GO 77876
77924: POP
77925: POP
// if fishes then
77926: LD_VAR 0 7
77930: IFFALSE 77997
// for i = 1 to fishes do
77932: LD_ADDR_VAR 0 11
77936: PUSH
77937: DOUBLE
77938: LD_INT 1
77940: DEC
77941: ST_TO_ADDR
77942: LD_VAR 0 7
77946: PUSH
77947: FOR_TO
77948: IFFALSE 77995
// begin hc_class = 20 ;
77950: LD_ADDR_OWVAR 28
77954: PUSH
77955: LD_INT 20
77957: ST_TO_ADDR
// hc_gallery =  ;
77958: LD_ADDR_OWVAR 33
77962: PUSH
77963: LD_STRING 
77965: ST_TO_ADDR
// animal := CreateHuman ;
77966: LD_ADDR_VAR 0 12
77970: PUSH
77971: CALL_OW 44
77975: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77976: LD_VAR 0 12
77980: PPUSH
77981: LD_VAR 0 9
77985: PPUSH
77986: LD_INT 0
77988: PPUSH
77989: CALL 79640 0 3
// end ;
77993: GO 77947
77995: POP
77996: POP
// end ;
77997: LD_VAR 0 10
78001: RET
// export function WantHeal ( sci , unit ) ; begin
78002: LD_INT 0
78004: PPUSH
// if GetTaskList ( sci ) > 0 then
78005: LD_VAR 0 1
78009: PPUSH
78010: CALL_OW 437
78014: PUSH
78015: LD_INT 0
78017: GREATER
78018: IFFALSE 78090
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78020: LD_VAR 0 1
78024: PPUSH
78025: CALL_OW 437
78029: PUSH
78030: LD_INT 1
78032: ARRAY
78033: PUSH
78034: LD_INT 1
78036: ARRAY
78037: PUSH
78038: LD_STRING l
78040: EQUAL
78041: IFFALSE 78068
78043: PUSH
78044: LD_VAR 0 1
78048: PPUSH
78049: CALL_OW 437
78053: PUSH
78054: LD_INT 1
78056: ARRAY
78057: PUSH
78058: LD_INT 4
78060: ARRAY
78061: PUSH
78062: LD_VAR 0 2
78066: EQUAL
78067: AND
78068: IFFALSE 78080
// result := true else
78070: LD_ADDR_VAR 0 3
78074: PUSH
78075: LD_INT 1
78077: ST_TO_ADDR
78078: GO 78088
// result := false ;
78080: LD_ADDR_VAR 0 3
78084: PUSH
78085: LD_INT 0
78087: ST_TO_ADDR
// end else
78088: GO 78098
// result := false ;
78090: LD_ADDR_VAR 0 3
78094: PUSH
78095: LD_INT 0
78097: ST_TO_ADDR
// end ;
78098: LD_VAR 0 3
78102: RET
// export function HealTarget ( sci ) ; begin
78103: LD_INT 0
78105: PPUSH
// if not sci then
78106: LD_VAR 0 1
78110: NOT
78111: IFFALSE 78115
// exit ;
78113: GO 78180
// result := 0 ;
78115: LD_ADDR_VAR 0 2
78119: PUSH
78120: LD_INT 0
78122: ST_TO_ADDR
// if GetTaskList ( sci ) then
78123: LD_VAR 0 1
78127: PPUSH
78128: CALL_OW 437
78132: IFFALSE 78180
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78134: LD_VAR 0 1
78138: PPUSH
78139: CALL_OW 437
78143: PUSH
78144: LD_INT 1
78146: ARRAY
78147: PUSH
78148: LD_INT 1
78150: ARRAY
78151: PUSH
78152: LD_STRING l
78154: EQUAL
78155: IFFALSE 78180
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78157: LD_ADDR_VAR 0 2
78161: PUSH
78162: LD_VAR 0 1
78166: PPUSH
78167: CALL_OW 437
78171: PUSH
78172: LD_INT 1
78174: ARRAY
78175: PUSH
78176: LD_INT 4
78178: ARRAY
78179: ST_TO_ADDR
// end ;
78180: LD_VAR 0 2
78184: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78185: LD_INT 0
78187: PPUSH
78188: PPUSH
78189: PPUSH
78190: PPUSH
// if not base_units then
78191: LD_VAR 0 1
78195: NOT
78196: IFFALSE 78200
// exit ;
78198: GO 78287
// result := false ;
78200: LD_ADDR_VAR 0 2
78204: PUSH
78205: LD_INT 0
78207: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78208: LD_ADDR_VAR 0 5
78212: PUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: LD_INT 21
78220: PUSH
78221: LD_INT 3
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PPUSH
78228: CALL_OW 72
78232: ST_TO_ADDR
// if not tmp then
78233: LD_VAR 0 5
78237: NOT
78238: IFFALSE 78242
// exit ;
78240: GO 78287
// for i in tmp do
78242: LD_ADDR_VAR 0 3
78246: PUSH
78247: LD_VAR 0 5
78251: PUSH
78252: FOR_IN
78253: IFFALSE 78285
// begin result := EnemyInRange ( i , 22 ) ;
78255: LD_ADDR_VAR 0 2
78259: PUSH
78260: LD_VAR 0 3
78264: PPUSH
78265: LD_INT 22
78267: PPUSH
78268: CALL 75712 0 2
78272: ST_TO_ADDR
// if result then
78273: LD_VAR 0 2
78277: IFFALSE 78283
// exit ;
78279: POP
78280: POP
78281: GO 78287
// end ;
78283: GO 78252
78285: POP
78286: POP
// end ;
78287: LD_VAR 0 2
78291: RET
// export function FilterByTag ( units , tag ) ; begin
78292: LD_INT 0
78294: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78295: LD_ADDR_VAR 0 3
78299: PUSH
78300: LD_VAR 0 1
78304: PPUSH
78305: LD_INT 120
78307: PUSH
78308: LD_VAR 0 2
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PPUSH
78317: CALL_OW 72
78321: ST_TO_ADDR
// end ;
78322: LD_VAR 0 3
78326: RET
// export function IsDriver ( un ) ; begin
78327: LD_INT 0
78329: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78330: LD_ADDR_VAR 0 2
78334: PUSH
78335: LD_VAR 0 1
78339: PUSH
78340: LD_INT 55
78342: PUSH
78343: EMPTY
78344: LIST
78345: PPUSH
78346: CALL_OW 69
78350: IN
78351: ST_TO_ADDR
// end ;
78352: LD_VAR 0 2
78356: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78357: LD_INT 0
78359: PPUSH
78360: PPUSH
// list := [ ] ;
78361: LD_ADDR_VAR 0 5
78365: PUSH
78366: EMPTY
78367: ST_TO_ADDR
// case d of 0 :
78368: LD_VAR 0 3
78372: PUSH
78373: LD_INT 0
78375: DOUBLE
78376: EQUAL
78377: IFTRUE 78381
78379: GO 78514
78381: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78382: LD_ADDR_VAR 0 5
78386: PUSH
78387: LD_VAR 0 1
78391: PUSH
78392: LD_INT 4
78394: MINUS
78395: PUSH
78396: LD_VAR 0 2
78400: PUSH
78401: LD_INT 4
78403: MINUS
78404: PUSH
78405: LD_INT 2
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: LIST
78412: PUSH
78413: LD_VAR 0 1
78417: PUSH
78418: LD_INT 3
78420: MINUS
78421: PUSH
78422: LD_VAR 0 2
78426: PUSH
78427: LD_INT 1
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: PUSH
78435: LD_VAR 0 1
78439: PUSH
78440: LD_INT 4
78442: PLUS
78443: PUSH
78444: LD_VAR 0 2
78448: PUSH
78449: LD_INT 4
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: PUSH
78457: LD_VAR 0 1
78461: PUSH
78462: LD_INT 3
78464: PLUS
78465: PUSH
78466: LD_VAR 0 2
78470: PUSH
78471: LD_INT 3
78473: PLUS
78474: PUSH
78475: LD_INT 5
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: LIST
78482: PUSH
78483: LD_VAR 0 1
78487: PUSH
78488: LD_VAR 0 2
78492: PUSH
78493: LD_INT 4
78495: PLUS
78496: PUSH
78497: LD_INT 0
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: LIST
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: ST_TO_ADDR
// end ; 1 :
78512: GO 79212
78514: LD_INT 1
78516: DOUBLE
78517: EQUAL
78518: IFTRUE 78522
78520: GO 78655
78522: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78523: LD_ADDR_VAR 0 5
78527: PUSH
78528: LD_VAR 0 1
78532: PUSH
78533: LD_VAR 0 2
78537: PUSH
78538: LD_INT 4
78540: MINUS
78541: PUSH
78542: LD_INT 3
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: LIST
78549: PUSH
78550: LD_VAR 0 1
78554: PUSH
78555: LD_INT 3
78557: MINUS
78558: PUSH
78559: LD_VAR 0 2
78563: PUSH
78564: LD_INT 3
78566: MINUS
78567: PUSH
78568: LD_INT 2
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: LIST
78575: PUSH
78576: LD_VAR 0 1
78580: PUSH
78581: LD_INT 4
78583: MINUS
78584: PUSH
78585: LD_VAR 0 2
78589: PUSH
78590: LD_INT 1
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: LIST
78597: PUSH
78598: LD_VAR 0 1
78602: PUSH
78603: LD_VAR 0 2
78607: PUSH
78608: LD_INT 3
78610: PLUS
78611: PUSH
78612: LD_INT 0
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: LIST
78619: PUSH
78620: LD_VAR 0 1
78624: PUSH
78625: LD_INT 4
78627: PLUS
78628: PUSH
78629: LD_VAR 0 2
78633: PUSH
78634: LD_INT 4
78636: PLUS
78637: PUSH
78638: LD_INT 5
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: LIST
78645: PUSH
78646: EMPTY
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: LIST
78652: ST_TO_ADDR
// end ; 2 :
78653: GO 79212
78655: LD_INT 2
78657: DOUBLE
78658: EQUAL
78659: IFTRUE 78663
78661: GO 78792
78663: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78664: LD_ADDR_VAR 0 5
78668: PUSH
78669: LD_VAR 0 1
78673: PUSH
78674: LD_VAR 0 2
78678: PUSH
78679: LD_INT 3
78681: MINUS
78682: PUSH
78683: LD_INT 3
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: LIST
78690: PUSH
78691: LD_VAR 0 1
78695: PUSH
78696: LD_INT 4
78698: PLUS
78699: PUSH
78700: LD_VAR 0 2
78704: PUSH
78705: LD_INT 4
78707: PUSH
78708: EMPTY
78709: LIST
78710: LIST
78711: LIST
78712: PUSH
78713: LD_VAR 0 1
78717: PUSH
78718: LD_VAR 0 2
78722: PUSH
78723: LD_INT 4
78725: PLUS
78726: PUSH
78727: LD_INT 0
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: LIST
78734: PUSH
78735: LD_VAR 0 1
78739: PUSH
78740: LD_INT 3
78742: MINUS
78743: PUSH
78744: LD_VAR 0 2
78748: PUSH
78749: LD_INT 1
78751: PUSH
78752: EMPTY
78753: LIST
78754: LIST
78755: LIST
78756: PUSH
78757: LD_VAR 0 1
78761: PUSH
78762: LD_INT 4
78764: MINUS
78765: PUSH
78766: LD_VAR 0 2
78770: PUSH
78771: LD_INT 4
78773: MINUS
78774: PUSH
78775: LD_INT 2
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: LIST
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: ST_TO_ADDR
// end ; 3 :
78790: GO 79212
78792: LD_INT 3
78794: DOUBLE
78795: EQUAL
78796: IFTRUE 78800
78798: GO 78933
78800: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78801: LD_ADDR_VAR 0 5
78805: PUSH
78806: LD_VAR 0 1
78810: PUSH
78811: LD_INT 3
78813: PLUS
78814: PUSH
78815: LD_VAR 0 2
78819: PUSH
78820: LD_INT 4
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: LIST
78827: PUSH
78828: LD_VAR 0 1
78832: PUSH
78833: LD_INT 4
78835: PLUS
78836: PUSH
78837: LD_VAR 0 2
78841: PUSH
78842: LD_INT 4
78844: PLUS
78845: PUSH
78846: LD_INT 5
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: LIST
78853: PUSH
78854: LD_VAR 0 1
78858: PUSH
78859: LD_INT 4
78861: MINUS
78862: PUSH
78863: LD_VAR 0 2
78867: PUSH
78868: LD_INT 1
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: LIST
78875: PUSH
78876: LD_VAR 0 1
78880: PUSH
78881: LD_VAR 0 2
78885: PUSH
78886: LD_INT 4
78888: MINUS
78889: PUSH
78890: LD_INT 3
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: LIST
78897: PUSH
78898: LD_VAR 0 1
78902: PUSH
78903: LD_INT 3
78905: MINUS
78906: PUSH
78907: LD_VAR 0 2
78911: PUSH
78912: LD_INT 3
78914: MINUS
78915: PUSH
78916: LD_INT 2
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: LIST
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: ST_TO_ADDR
// end ; 4 :
78931: GO 79212
78933: LD_INT 4
78935: DOUBLE
78936: EQUAL
78937: IFTRUE 78941
78939: GO 79074
78941: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78942: LD_ADDR_VAR 0 5
78946: PUSH
78947: LD_VAR 0 1
78951: PUSH
78952: LD_VAR 0 2
78956: PUSH
78957: LD_INT 4
78959: PLUS
78960: PUSH
78961: LD_INT 0
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: LIST
78968: PUSH
78969: LD_VAR 0 1
78973: PUSH
78974: LD_INT 3
78976: PLUS
78977: PUSH
78978: LD_VAR 0 2
78982: PUSH
78983: LD_INT 3
78985: PLUS
78986: PUSH
78987: LD_INT 5
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: LIST
78994: PUSH
78995: LD_VAR 0 1
78999: PUSH
79000: LD_INT 4
79002: PLUS
79003: PUSH
79004: LD_VAR 0 2
79008: PUSH
79009: LD_INT 4
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: LIST
79016: PUSH
79017: LD_VAR 0 1
79021: PUSH
79022: LD_VAR 0 2
79026: PUSH
79027: LD_INT 3
79029: MINUS
79030: PUSH
79031: LD_INT 3
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: LIST
79038: PUSH
79039: LD_VAR 0 1
79043: PUSH
79044: LD_INT 4
79046: MINUS
79047: PUSH
79048: LD_VAR 0 2
79052: PUSH
79053: LD_INT 4
79055: MINUS
79056: PUSH
79057: LD_INT 2
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: LIST
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: ST_TO_ADDR
// end ; 5 :
79072: GO 79212
79074: LD_INT 5
79076: DOUBLE
79077: EQUAL
79078: IFTRUE 79082
79080: GO 79211
79082: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79083: LD_ADDR_VAR 0 5
79087: PUSH
79088: LD_VAR 0 1
79092: PUSH
79093: LD_INT 4
79095: MINUS
79096: PUSH
79097: LD_VAR 0 2
79101: PUSH
79102: LD_INT 1
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: LIST
79109: PUSH
79110: LD_VAR 0 1
79114: PUSH
79115: LD_VAR 0 2
79119: PUSH
79120: LD_INT 4
79122: MINUS
79123: PUSH
79124: LD_INT 3
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: PUSH
79132: LD_VAR 0 1
79136: PUSH
79137: LD_INT 4
79139: PLUS
79140: PUSH
79141: LD_VAR 0 2
79145: PUSH
79146: LD_INT 4
79148: PLUS
79149: PUSH
79150: LD_INT 5
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: LIST
79157: PUSH
79158: LD_VAR 0 1
79162: PUSH
79163: LD_INT 3
79165: PLUS
79166: PUSH
79167: LD_VAR 0 2
79171: PUSH
79172: LD_INT 4
79174: PUSH
79175: EMPTY
79176: LIST
79177: LIST
79178: LIST
79179: PUSH
79180: LD_VAR 0 1
79184: PUSH
79185: LD_VAR 0 2
79189: PUSH
79190: LD_INT 3
79192: PLUS
79193: PUSH
79194: LD_INT 0
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: LIST
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: LIST
79206: LIST
79207: LIST
79208: ST_TO_ADDR
// end ; end ;
79209: GO 79212
79211: POP
// result := list ;
79212: LD_ADDR_VAR 0 4
79216: PUSH
79217: LD_VAR 0 5
79221: ST_TO_ADDR
// end ;
79222: LD_VAR 0 4
79226: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79227: LD_INT 0
79229: PPUSH
79230: PPUSH
79231: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79232: LD_VAR 0 1
79236: NOT
79237: IFTRUE 79265
79239: PUSH
79240: LD_VAR 0 2
79244: PUSH
79245: LD_INT 1
79247: PUSH
79248: LD_INT 2
79250: PUSH
79251: LD_INT 3
79253: PUSH
79254: LD_INT 4
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: IN
79263: NOT
79264: OR
79265: IFFALSE 79269
// exit ;
79267: GO 79352
// tmp := [ ] ;
79269: LD_ADDR_VAR 0 5
79273: PUSH
79274: EMPTY
79275: ST_TO_ADDR
// for i in units do
79276: LD_ADDR_VAR 0 4
79280: PUSH
79281: LD_VAR 0 1
79285: PUSH
79286: FOR_IN
79287: IFFALSE 79321
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79289: LD_ADDR_VAR 0 5
79293: PUSH
79294: LD_VAR 0 5
79298: PPUSH
79299: LD_VAR 0 4
79303: PPUSH
79304: LD_VAR 0 2
79308: PPUSH
79309: CALL_OW 259
79313: PPUSH
79314: CALL 80747 0 2
79318: ST_TO_ADDR
79319: GO 79286
79321: POP
79322: POP
// if not tmp then
79323: LD_VAR 0 5
79327: NOT
79328: IFFALSE 79332
// exit ;
79330: GO 79352
// result := SortListByListDesc ( units , tmp ) ;
79332: LD_ADDR_VAR 0 3
79336: PUSH
79337: LD_VAR 0 1
79341: PPUSH
79342: LD_VAR 0 5
79346: PPUSH
79347: CALL_OW 77
79351: ST_TO_ADDR
// end ;
79352: LD_VAR 0 3
79356: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79357: LD_INT 0
79359: PPUSH
79360: PPUSH
79361: PPUSH
// result := false ;
79362: LD_ADDR_VAR 0 3
79366: PUSH
79367: LD_INT 0
79369: ST_TO_ADDR
// if not building then
79370: LD_VAR 0 2
79374: NOT
79375: IFFALSE 79379
// exit ;
79377: GO 79523
// x := GetX ( building ) ;
79379: LD_ADDR_VAR 0 4
79383: PUSH
79384: LD_VAR 0 2
79388: PPUSH
79389: CALL_OW 250
79393: ST_TO_ADDR
// y := GetY ( building ) ;
79394: LD_ADDR_VAR 0 5
79398: PUSH
79399: LD_VAR 0 2
79403: PPUSH
79404: CALL_OW 251
79408: ST_TO_ADDR
// if not x or not y then
79409: LD_VAR 0 4
79413: NOT
79414: IFTRUE 79423
79416: PUSH
79417: LD_VAR 0 5
79421: NOT
79422: OR
79423: IFFALSE 79427
// exit ;
79425: GO 79523
// if GetTaskList ( unit ) then
79427: LD_VAR 0 1
79431: PPUSH
79432: CALL_OW 437
79436: IFFALSE 79523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79438: LD_STRING e
79440: PUSH
79441: LD_VAR 0 1
79445: PPUSH
79446: CALL_OW 437
79450: PUSH
79451: LD_INT 1
79453: ARRAY
79454: PUSH
79455: LD_INT 1
79457: ARRAY
79458: EQUAL
79459: IFFALSE 79486
79461: PUSH
79462: LD_VAR 0 4
79466: PUSH
79467: LD_VAR 0 1
79471: PPUSH
79472: CALL_OW 437
79476: PUSH
79477: LD_INT 1
79479: ARRAY
79480: PUSH
79481: LD_INT 2
79483: ARRAY
79484: EQUAL
79485: AND
79486: IFFALSE 79513
79488: PUSH
79489: LD_VAR 0 5
79493: PUSH
79494: LD_VAR 0 1
79498: PPUSH
79499: CALL_OW 437
79503: PUSH
79504: LD_INT 1
79506: ARRAY
79507: PUSH
79508: LD_INT 3
79510: ARRAY
79511: EQUAL
79512: AND
79513: IFFALSE 79523
// result := true end ;
79515: LD_ADDR_VAR 0 3
79519: PUSH
79520: LD_INT 1
79522: ST_TO_ADDR
// end ;
79523: LD_VAR 0 3
79527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79528: LD_INT 0
79530: PPUSH
// result := false ;
79531: LD_ADDR_VAR 0 4
79535: PUSH
79536: LD_INT 0
79538: ST_TO_ADDR
// if GetTaskList ( unit ) then
79539: LD_VAR 0 1
79543: PPUSH
79544: CALL_OW 437
79548: IFFALSE 79635
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79550: LD_STRING M
79552: PUSH
79553: LD_VAR 0 1
79557: PPUSH
79558: CALL_OW 437
79562: PUSH
79563: LD_INT 1
79565: ARRAY
79566: PUSH
79567: LD_INT 1
79569: ARRAY
79570: EQUAL
79571: IFFALSE 79598
79573: PUSH
79574: LD_VAR 0 2
79578: PUSH
79579: LD_VAR 0 1
79583: PPUSH
79584: CALL_OW 437
79588: PUSH
79589: LD_INT 1
79591: ARRAY
79592: PUSH
79593: LD_INT 2
79595: ARRAY
79596: EQUAL
79597: AND
79598: IFFALSE 79625
79600: PUSH
79601: LD_VAR 0 3
79605: PUSH
79606: LD_VAR 0 1
79610: PPUSH
79611: CALL_OW 437
79615: PUSH
79616: LD_INT 1
79618: ARRAY
79619: PUSH
79620: LD_INT 3
79622: ARRAY
79623: EQUAL
79624: AND
79625: IFFALSE 79635
// result := true ;
79627: LD_ADDR_VAR 0 4
79631: PUSH
79632: LD_INT 1
79634: ST_TO_ADDR
// end ; end ;
79635: LD_VAR 0 4
79639: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79640: LD_INT 0
79642: PPUSH
79643: PPUSH
79644: PPUSH
79645: PPUSH
// if not unit or not area then
79646: LD_VAR 0 1
79650: NOT
79651: IFTRUE 79660
79653: PUSH
79654: LD_VAR 0 2
79658: NOT
79659: OR
79660: IFFALSE 79664
// exit ;
79662: GO 79840
// tmp := AreaToList ( area , i ) ;
79664: LD_ADDR_VAR 0 6
79668: PUSH
79669: LD_VAR 0 2
79673: PPUSH
79674: LD_VAR 0 5
79678: PPUSH
79679: CALL_OW 517
79683: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79684: LD_ADDR_VAR 0 5
79688: PUSH
79689: DOUBLE
79690: LD_INT 1
79692: DEC
79693: ST_TO_ADDR
79694: LD_VAR 0 6
79698: PUSH
79699: LD_INT 1
79701: ARRAY
79702: PUSH
79703: FOR_TO
79704: IFFALSE 79838
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79706: LD_ADDR_VAR 0 7
79710: PUSH
79711: LD_VAR 0 6
79715: PUSH
79716: LD_INT 1
79718: ARRAY
79719: PUSH
79720: LD_VAR 0 5
79724: ARRAY
79725: PUSH
79726: LD_VAR 0 6
79730: PUSH
79731: LD_INT 2
79733: ARRAY
79734: PUSH
79735: LD_VAR 0 5
79739: ARRAY
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79745: LD_INT 92
79747: PUSH
79748: LD_VAR 0 7
79752: PUSH
79753: LD_INT 1
79755: ARRAY
79756: PUSH
79757: LD_VAR 0 7
79761: PUSH
79762: LD_INT 2
79764: ARRAY
79765: PUSH
79766: LD_INT 2
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: LIST
79773: LIST
79774: PPUSH
79775: CALL_OW 69
79779: PUSH
79780: LD_INT 0
79782: EQUAL
79783: IFFALSE 79836
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79785: LD_VAR 0 1
79789: PPUSH
79790: LD_VAR 0 7
79794: PUSH
79795: LD_INT 1
79797: ARRAY
79798: PPUSH
79799: LD_VAR 0 7
79803: PUSH
79804: LD_INT 2
79806: ARRAY
79807: PPUSH
79808: LD_VAR 0 3
79812: PPUSH
79813: CALL_OW 48
// result := IsPlaced ( unit ) ;
79817: LD_ADDR_VAR 0 4
79821: PUSH
79822: LD_VAR 0 1
79826: PPUSH
79827: CALL_OW 305
79831: ST_TO_ADDR
// exit ;
79832: POP
79833: POP
79834: GO 79840
// end ; end ;
79836: GO 79703
79838: POP
79839: POP
// end ;
79840: LD_VAR 0 4
79844: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79845: LD_INT 0
79847: PPUSH
79848: PPUSH
79849: PPUSH
// if not side or side > 8 then
79850: LD_VAR 0 1
79854: NOT
79855: IFTRUE 79867
79857: PUSH
79858: LD_VAR 0 1
79862: PUSH
79863: LD_INT 8
79865: GREATER
79866: OR
79867: IFFALSE 79871
// exit ;
79869: GO 80058
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79871: LD_ADDR_VAR 0 4
79875: PUSH
79876: LD_INT 22
79878: PUSH
79879: LD_VAR 0 1
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: PUSH
79888: LD_INT 21
79890: PUSH
79891: LD_INT 3
79893: PUSH
79894: EMPTY
79895: LIST
79896: LIST
79897: PUSH
79898: EMPTY
79899: LIST
79900: LIST
79901: PPUSH
79902: CALL_OW 69
79906: ST_TO_ADDR
// if not tmp then
79907: LD_VAR 0 4
79911: NOT
79912: IFFALSE 79916
// exit ;
79914: GO 80058
// enable_addtolog := true ;
79916: LD_ADDR_OWVAR 81
79920: PUSH
79921: LD_INT 1
79923: ST_TO_ADDR
// AddToLog ( [ ) ;
79924: LD_STRING [
79926: PPUSH
79927: CALL_OW 561
// for i in tmp do
79931: LD_ADDR_VAR 0 3
79935: PUSH
79936: LD_VAR 0 4
79940: PUSH
79941: FOR_IN
79942: IFFALSE 80049
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79944: LD_STRING [
79946: PUSH
79947: LD_VAR 0 3
79951: PPUSH
79952: CALL_OW 266
79956: STR
79957: PUSH
79958: LD_STRING , 
79960: STR
79961: PUSH
79962: LD_VAR 0 3
79966: PPUSH
79967: CALL_OW 250
79971: STR
79972: PUSH
79973: LD_STRING , 
79975: STR
79976: PUSH
79977: LD_VAR 0 3
79981: PPUSH
79982: CALL_OW 251
79986: STR
79987: PUSH
79988: LD_STRING , 
79990: STR
79991: PUSH
79992: LD_VAR 0 3
79996: PPUSH
79997: CALL_OW 254
80001: STR
80002: PUSH
80003: LD_STRING , 
80005: STR
80006: PUSH
80007: LD_VAR 0 3
80011: PPUSH
80012: LD_INT 1
80014: PPUSH
80015: CALL_OW 268
80019: STR
80020: PUSH
80021: LD_STRING , 
80023: STR
80024: PUSH
80025: LD_VAR 0 3
80029: PPUSH
80030: LD_INT 2
80032: PPUSH
80033: CALL_OW 268
80037: STR
80038: PUSH
80039: LD_STRING ],
80041: STR
80042: PPUSH
80043: CALL_OW 561
// end ;
80047: GO 79941
80049: POP
80050: POP
// AddToLog ( ]; ) ;
80051: LD_STRING ];
80053: PPUSH
80054: CALL_OW 561
// end ;
80058: LD_VAR 0 2
80062: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80063: LD_INT 0
80065: PPUSH
80066: PPUSH
80067: PPUSH
80068: PPUSH
80069: PPUSH
// if not area or not rate or not max then
80070: LD_VAR 0 1
80074: NOT
80075: IFTRUE 80084
80077: PUSH
80078: LD_VAR 0 2
80082: NOT
80083: OR
80084: IFTRUE 80093
80086: PUSH
80087: LD_VAR 0 4
80091: NOT
80092: OR
80093: IFFALSE 80097
// exit ;
80095: GO 80286
// while 1 do
80097: LD_INT 1
80099: IFFALSE 80286
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80101: LD_ADDR_VAR 0 9
80105: PUSH
80106: LD_VAR 0 1
80110: PPUSH
80111: LD_INT 1
80113: PPUSH
80114: CALL_OW 287
80118: PUSH
80119: LD_INT 10
80121: MUL
80122: ST_TO_ADDR
// r := rate / 10 ;
80123: LD_ADDR_VAR 0 7
80127: PUSH
80128: LD_VAR 0 2
80132: PUSH
80133: LD_INT 10
80135: DIVREAL
80136: ST_TO_ADDR
// time := 1 1$00 ;
80137: LD_ADDR_VAR 0 8
80141: PUSH
80142: LD_INT 2100
80144: ST_TO_ADDR
// if amount < min then
80145: LD_VAR 0 9
80149: PUSH
80150: LD_VAR 0 3
80154: LESS
80155: IFFALSE 80173
// r := r * 2 else
80157: LD_ADDR_VAR 0 7
80161: PUSH
80162: LD_VAR 0 7
80166: PUSH
80167: LD_INT 2
80169: MUL
80170: ST_TO_ADDR
80171: GO 80199
// if amount > max then
80173: LD_VAR 0 9
80177: PUSH
80178: LD_VAR 0 4
80182: GREATER
80183: IFFALSE 80199
// r := r / 2 ;
80185: LD_ADDR_VAR 0 7
80189: PUSH
80190: LD_VAR 0 7
80194: PUSH
80195: LD_INT 2
80197: DIVREAL
80198: ST_TO_ADDR
// time := time / r ;
80199: LD_ADDR_VAR 0 8
80203: PUSH
80204: LD_VAR 0 8
80208: PUSH
80209: LD_VAR 0 7
80213: DIVREAL
80214: ST_TO_ADDR
// if time < 0 then
80215: LD_VAR 0 8
80219: PUSH
80220: LD_INT 0
80222: LESS
80223: IFFALSE 80240
// time := time * - 1 ;
80225: LD_ADDR_VAR 0 8
80229: PUSH
80230: LD_VAR 0 8
80234: PUSH
80235: LD_INT 1
80237: NEG
80238: MUL
80239: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80240: LD_VAR 0 8
80244: PUSH
80245: LD_INT 35
80247: PPUSH
80248: LD_INT 875
80250: PPUSH
80251: CALL_OW 12
80255: PLUS
80256: PPUSH
80257: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80261: LD_INT 1
80263: PPUSH
80264: LD_INT 5
80266: PPUSH
80267: CALL_OW 12
80271: PPUSH
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_INT 1
80279: PPUSH
80280: CALL_OW 55
// end ;
80284: GO 80097
// end ;
80286: LD_VAR 0 5
80290: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80291: LD_INT 0
80293: PPUSH
80294: PPUSH
80295: PPUSH
80296: PPUSH
80297: PPUSH
80298: PPUSH
80299: PPUSH
80300: PPUSH
// if not turrets or not factories then
80301: LD_VAR 0 1
80305: NOT
80306: IFTRUE 80315
80308: PUSH
80309: LD_VAR 0 2
80313: NOT
80314: OR
80315: IFFALSE 80319
// exit ;
80317: GO 80626
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80319: LD_ADDR_VAR 0 10
80323: PUSH
80324: LD_INT 5
80326: PUSH
80327: LD_INT 6
80329: PUSH
80330: EMPTY
80331: LIST
80332: LIST
80333: PUSH
80334: LD_INT 2
80336: PUSH
80337: LD_INT 4
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: PUSH
80344: LD_INT 3
80346: PUSH
80347: LD_INT 5
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: LIST
80358: PUSH
80359: LD_INT 24
80361: PUSH
80362: LD_INT 25
80364: PUSH
80365: EMPTY
80366: LIST
80367: LIST
80368: PUSH
80369: LD_INT 23
80371: PUSH
80372: LD_INT 27
80374: PUSH
80375: EMPTY
80376: LIST
80377: LIST
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 42
80385: PUSH
80386: LD_INT 43
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 44
80395: PUSH
80396: LD_INT 46
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 45
80405: PUSH
80406: LD_INT 47
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: LIST
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: LIST
80422: ST_TO_ADDR
// result := [ ] ;
80423: LD_ADDR_VAR 0 3
80427: PUSH
80428: EMPTY
80429: ST_TO_ADDR
// for i in turrets do
80430: LD_ADDR_VAR 0 4
80434: PUSH
80435: LD_VAR 0 1
80439: PUSH
80440: FOR_IN
80441: IFFALSE 80624
// begin nat := GetNation ( i ) ;
80443: LD_ADDR_VAR 0 7
80447: PUSH
80448: LD_VAR 0 4
80452: PPUSH
80453: CALL_OW 248
80457: ST_TO_ADDR
// weapon := 0 ;
80458: LD_ADDR_VAR 0 8
80462: PUSH
80463: LD_INT 0
80465: ST_TO_ADDR
// if not nat then
80466: LD_VAR 0 7
80470: NOT
80471: IFFALSE 80475
// continue ;
80473: GO 80440
// for j in list [ nat ] do
80475: LD_ADDR_VAR 0 5
80479: PUSH
80480: LD_VAR 0 10
80484: PUSH
80485: LD_VAR 0 7
80489: ARRAY
80490: PUSH
80491: FOR_IN
80492: IFFALSE 80533
// if GetBWeapon ( i ) = j [ 1 ] then
80494: LD_VAR 0 4
80498: PPUSH
80499: CALL_OW 269
80503: PUSH
80504: LD_VAR 0 5
80508: PUSH
80509: LD_INT 1
80511: ARRAY
80512: EQUAL
80513: IFFALSE 80531
// begin weapon := j [ 2 ] ;
80515: LD_ADDR_VAR 0 8
80519: PUSH
80520: LD_VAR 0 5
80524: PUSH
80525: LD_INT 2
80527: ARRAY
80528: ST_TO_ADDR
// break ;
80529: GO 80533
// end ;
80531: GO 80491
80533: POP
80534: POP
// if not weapon then
80535: LD_VAR 0 8
80539: NOT
80540: IFFALSE 80544
// continue ;
80542: GO 80440
// for k in factories do
80544: LD_ADDR_VAR 0 6
80548: PUSH
80549: LD_VAR 0 2
80553: PUSH
80554: FOR_IN
80555: IFFALSE 80620
// begin weapons := AvailableWeaponList ( k ) ;
80557: LD_ADDR_VAR 0 9
80561: PUSH
80562: LD_VAR 0 6
80566: PPUSH
80567: CALL_OW 478
80571: ST_TO_ADDR
// if not weapons then
80572: LD_VAR 0 9
80576: NOT
80577: IFFALSE 80581
// continue ;
80579: GO 80554
// if weapon in weapons then
80581: LD_VAR 0 8
80585: PUSH
80586: LD_VAR 0 9
80590: IN
80591: IFFALSE 80618
// begin result := [ i , weapon ] ;
80593: LD_ADDR_VAR 0 3
80597: PUSH
80598: LD_VAR 0 4
80602: PUSH
80603: LD_VAR 0 8
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: ST_TO_ADDR
// exit ;
80612: POP
80613: POP
80614: POP
80615: POP
80616: GO 80626
// end ; end ;
80618: GO 80554
80620: POP
80621: POP
// end ;
80622: GO 80440
80624: POP
80625: POP
// end ;
80626: LD_VAR 0 3
80630: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80631: LD_INT 0
80633: PPUSH
// if not side or side > 8 then
80634: LD_VAR 0 3
80638: NOT
80639: IFTRUE 80651
80641: PUSH
80642: LD_VAR 0 3
80646: PUSH
80647: LD_INT 8
80649: GREATER
80650: OR
80651: IFFALSE 80655
// exit ;
80653: GO 80714
// if not range then
80655: LD_VAR 0 4
80659: NOT
80660: IFFALSE 80671
// range := - 12 ;
80662: LD_ADDR_VAR 0 4
80666: PUSH
80667: LD_INT 12
80669: NEG
80670: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80671: LD_VAR 0 1
80675: PPUSH
80676: LD_VAR 0 2
80680: PPUSH
80681: LD_VAR 0 3
80685: PPUSH
80686: LD_VAR 0 4
80690: PPUSH
80691: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_VAR 0 2
80704: PPUSH
80705: LD_VAR 0 3
80709: PPUSH
80710: CALL_OW 331
// end ;
80714: LD_VAR 0 5
80718: RET
// export function Video ( mode ) ; begin
80719: LD_INT 0
80721: PPUSH
// ingame_video = mode ;
80722: LD_ADDR_OWVAR 52
80726: PUSH
80727: LD_VAR 0 1
80731: ST_TO_ADDR
// interface_hidden = mode ;
80732: LD_ADDR_OWVAR 54
80736: PUSH
80737: LD_VAR 0 1
80741: ST_TO_ADDR
// end ;
80742: LD_VAR 0 2
80746: RET
// export function Join ( array , element ) ; begin
80747: LD_INT 0
80749: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80750: LD_ADDR_VAR 0 3
80754: PUSH
80755: LD_VAR 0 1
80759: PPUSH
80760: LD_VAR 0 1
80764: PUSH
80765: LD_INT 1
80767: PLUS
80768: PPUSH
80769: LD_VAR 0 2
80773: PPUSH
80774: CALL_OW 1
80778: ST_TO_ADDR
// end ;
80779: LD_VAR 0 3
80783: RET
// export function JoinUnion ( array , element ) ; begin
80784: LD_INT 0
80786: PPUSH
// result := array union element ;
80787: LD_ADDR_VAR 0 3
80791: PUSH
80792: LD_VAR 0 1
80796: PUSH
80797: LD_VAR 0 2
80801: UNION
80802: ST_TO_ADDR
// end ;
80803: LD_VAR 0 3
80807: RET
// export function GetBehemoths ( side ) ; begin
80808: LD_INT 0
80810: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80811: LD_ADDR_VAR 0 2
80815: PUSH
80816: LD_INT 22
80818: PUSH
80819: LD_VAR 0 1
80823: PUSH
80824: EMPTY
80825: LIST
80826: LIST
80827: PUSH
80828: LD_INT 31
80830: PUSH
80831: LD_INT 25
80833: PUSH
80834: EMPTY
80835: LIST
80836: LIST
80837: PUSH
80838: EMPTY
80839: LIST
80840: LIST
80841: PPUSH
80842: CALL_OW 69
80846: ST_TO_ADDR
// end ;
80847: LD_VAR 0 2
80851: RET
// export function Shuffle ( array ) ; var i , index ; begin
80852: LD_INT 0
80854: PPUSH
80855: PPUSH
80856: PPUSH
// result := [ ] ;
80857: LD_ADDR_VAR 0 2
80861: PUSH
80862: EMPTY
80863: ST_TO_ADDR
// if not array then
80864: LD_VAR 0 1
80868: NOT
80869: IFFALSE 80873
// exit ;
80871: GO 80972
// Randomize ;
80873: CALL_OW 10
// for i = array downto 1 do
80877: LD_ADDR_VAR 0 3
80881: PUSH
80882: DOUBLE
80883: LD_VAR 0 1
80887: INC
80888: ST_TO_ADDR
80889: LD_INT 1
80891: PUSH
80892: FOR_DOWNTO
80893: IFFALSE 80970
// begin index := rand ( 1 , array ) ;
80895: LD_ADDR_VAR 0 4
80899: PUSH
80900: LD_INT 1
80902: PPUSH
80903: LD_VAR 0 1
80907: PPUSH
80908: CALL_OW 12
80912: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80913: LD_ADDR_VAR 0 2
80917: PUSH
80918: LD_VAR 0 2
80922: PPUSH
80923: LD_VAR 0 2
80927: PUSH
80928: LD_INT 1
80930: PLUS
80931: PPUSH
80932: LD_VAR 0 1
80936: PUSH
80937: LD_VAR 0 4
80941: ARRAY
80942: PPUSH
80943: CALL_OW 2
80947: ST_TO_ADDR
// array := Delete ( array , index ) ;
80948: LD_ADDR_VAR 0 1
80952: PUSH
80953: LD_VAR 0 1
80957: PPUSH
80958: LD_VAR 0 4
80962: PPUSH
80963: CALL_OW 3
80967: ST_TO_ADDR
// end ;
80968: GO 80892
80970: POP
80971: POP
// end ;
80972: LD_VAR 0 2
80976: RET
// export function GetBaseMaterials ( base ) ; begin
80977: LD_INT 0
80979: PPUSH
// result := [ 0 , 0 , 0 ] ;
80980: LD_ADDR_VAR 0 2
80984: PUSH
80985: LD_INT 0
80987: PUSH
80988: LD_INT 0
80990: PUSH
80991: LD_INT 0
80993: PUSH
80994: EMPTY
80995: LIST
80996: LIST
80997: LIST
80998: ST_TO_ADDR
// if not base then
80999: LD_VAR 0 1
81003: NOT
81004: IFFALSE 81008
// exit ;
81006: GO 81057
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81008: LD_ADDR_VAR 0 2
81012: PUSH
81013: LD_VAR 0 1
81017: PPUSH
81018: LD_INT 1
81020: PPUSH
81021: CALL_OW 275
81025: PUSH
81026: LD_VAR 0 1
81030: PPUSH
81031: LD_INT 2
81033: PPUSH
81034: CALL_OW 275
81038: PUSH
81039: LD_VAR 0 1
81043: PPUSH
81044: LD_INT 3
81046: PPUSH
81047: CALL_OW 275
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: LIST
81056: ST_TO_ADDR
// end ;
81057: LD_VAR 0 2
81061: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81062: LD_INT 0
81064: PPUSH
81065: PPUSH
// result := array ;
81066: LD_ADDR_VAR 0 3
81070: PUSH
81071: LD_VAR 0 1
81075: ST_TO_ADDR
// if size >= result then
81076: LD_VAR 0 2
81080: PUSH
81081: LD_VAR 0 3
81085: GREATEREQUAL
81086: IFFALSE 81090
// exit ;
81088: GO 81140
// if size then
81090: LD_VAR 0 2
81094: IFFALSE 81140
// for i := array downto size do
81096: LD_ADDR_VAR 0 4
81100: PUSH
81101: DOUBLE
81102: LD_VAR 0 1
81106: INC
81107: ST_TO_ADDR
81108: LD_VAR 0 2
81112: PUSH
81113: FOR_DOWNTO
81114: IFFALSE 81138
// result := Delete ( result , result ) ;
81116: LD_ADDR_VAR 0 3
81120: PUSH
81121: LD_VAR 0 3
81125: PPUSH
81126: LD_VAR 0 3
81130: PPUSH
81131: CALL_OW 3
81135: ST_TO_ADDR
81136: GO 81113
81138: POP
81139: POP
// end ;
81140: LD_VAR 0 3
81144: RET
// export function ComExit ( unit ) ; var tmp ; begin
81145: LD_INT 0
81147: PPUSH
81148: PPUSH
// if not IsInUnit ( unit ) then
81149: LD_VAR 0 1
81153: PPUSH
81154: CALL_OW 310
81158: NOT
81159: IFFALSE 81163
// exit ;
81161: GO 81223
// tmp := IsInUnit ( unit ) ;
81163: LD_ADDR_VAR 0 3
81167: PUSH
81168: LD_VAR 0 1
81172: PPUSH
81173: CALL_OW 310
81177: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81178: LD_VAR 0 3
81182: PPUSH
81183: CALL_OW 247
81187: PUSH
81188: LD_INT 2
81190: EQUAL
81191: IFFALSE 81204
// ComExitVehicle ( unit ) else
81193: LD_VAR 0 1
81197: PPUSH
81198: CALL_OW 121
81202: GO 81213
// ComExitBuilding ( unit ) ;
81204: LD_VAR 0 1
81208: PPUSH
81209: CALL_OW 122
// result := tmp ;
81213: LD_ADDR_VAR 0 2
81217: PUSH
81218: LD_VAR 0 3
81222: ST_TO_ADDR
// end ;
81223: LD_VAR 0 2
81227: RET
// export function ComExitAll ( units ) ; var i ; begin
81228: LD_INT 0
81230: PPUSH
81231: PPUSH
// if not units then
81232: LD_VAR 0 1
81236: NOT
81237: IFFALSE 81241
// exit ;
81239: GO 81267
// for i in units do
81241: LD_ADDR_VAR 0 3
81245: PUSH
81246: LD_VAR 0 1
81250: PUSH
81251: FOR_IN
81252: IFFALSE 81265
// ComExit ( i ) ;
81254: LD_VAR 0 3
81258: PPUSH
81259: CALL 81145 0 1
81263: GO 81251
81265: POP
81266: POP
// end ;
81267: LD_VAR 0 2
81271: RET
// export function ResetHc ; begin
81272: LD_INT 0
81274: PPUSH
// InitHc ;
81275: CALL_OW 19
// hc_importance := 0 ;
81279: LD_ADDR_OWVAR 32
81283: PUSH
81284: LD_INT 0
81286: ST_TO_ADDR
// end ;
81287: LD_VAR 0 1
81291: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81292: LD_INT 0
81294: PPUSH
81295: PPUSH
81296: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81297: LD_ADDR_VAR 0 6
81301: PUSH
81302: LD_VAR 0 1
81306: PUSH
81307: LD_VAR 0 3
81311: PLUS
81312: PUSH
81313: LD_INT 2
81315: DIV
81316: ST_TO_ADDR
// if _x < 0 then
81317: LD_VAR 0 6
81321: PUSH
81322: LD_INT 0
81324: LESS
81325: IFFALSE 81342
// _x := _x * - 1 ;
81327: LD_ADDR_VAR 0 6
81331: PUSH
81332: LD_VAR 0 6
81336: PUSH
81337: LD_INT 1
81339: NEG
81340: MUL
81341: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81342: LD_ADDR_VAR 0 7
81346: PUSH
81347: LD_VAR 0 2
81351: PUSH
81352: LD_VAR 0 4
81356: PLUS
81357: PUSH
81358: LD_INT 2
81360: DIV
81361: ST_TO_ADDR
// if _y < 0 then
81362: LD_VAR 0 7
81366: PUSH
81367: LD_INT 0
81369: LESS
81370: IFFALSE 81387
// _y := _y * - 1 ;
81372: LD_ADDR_VAR 0 7
81376: PUSH
81377: LD_VAR 0 7
81381: PUSH
81382: LD_INT 1
81384: NEG
81385: MUL
81386: ST_TO_ADDR
// result := [ _x , _y ] ;
81387: LD_ADDR_VAR 0 5
81391: PUSH
81392: LD_VAR 0 6
81396: PUSH
81397: LD_VAR 0 7
81401: PUSH
81402: EMPTY
81403: LIST
81404: LIST
81405: ST_TO_ADDR
// end ;
81406: LD_VAR 0 5
81410: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81411: LD_INT 0
81413: PPUSH
81414: PPUSH
81415: PPUSH
81416: PPUSH
// task := GetTaskList ( unit ) ;
81417: LD_ADDR_VAR 0 7
81421: PUSH
81422: LD_VAR 0 1
81426: PPUSH
81427: CALL_OW 437
81431: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81432: LD_VAR 0 7
81436: NOT
81437: IFFALSE 81456
81439: PUSH
81440: LD_VAR 0 1
81444: PPUSH
81445: LD_VAR 0 2
81449: PPUSH
81450: CALL_OW 308
81454: NOT
81455: AND
81456: IFFALSE 81460
// exit ;
81458: GO 81578
// if IsInArea ( unit , area ) then
81460: LD_VAR 0 1
81464: PPUSH
81465: LD_VAR 0 2
81469: PPUSH
81470: CALL_OW 308
81474: IFFALSE 81492
// begin ComMoveToArea ( unit , goAway ) ;
81476: LD_VAR 0 1
81480: PPUSH
81481: LD_VAR 0 3
81485: PPUSH
81486: CALL_OW 113
// exit ;
81490: GO 81578
// end ; if task [ 1 ] [ 1 ] <> M then
81492: LD_VAR 0 7
81496: PUSH
81497: LD_INT 1
81499: ARRAY
81500: PUSH
81501: LD_INT 1
81503: ARRAY
81504: PUSH
81505: LD_STRING M
81507: NONEQUAL
81508: IFFALSE 81512
// exit ;
81510: GO 81578
// x := task [ 1 ] [ 2 ] ;
81512: LD_ADDR_VAR 0 5
81516: PUSH
81517: LD_VAR 0 7
81521: PUSH
81522: LD_INT 1
81524: ARRAY
81525: PUSH
81526: LD_INT 2
81528: ARRAY
81529: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81530: LD_ADDR_VAR 0 6
81534: PUSH
81535: LD_VAR 0 7
81539: PUSH
81540: LD_INT 1
81542: ARRAY
81543: PUSH
81544: LD_INT 3
81546: ARRAY
81547: ST_TO_ADDR
// if InArea ( x , y , area ) then
81548: LD_VAR 0 5
81552: PPUSH
81553: LD_VAR 0 6
81557: PPUSH
81558: LD_VAR 0 2
81562: PPUSH
81563: CALL_OW 309
81567: IFFALSE 81578
// ComStop ( unit ) ;
81569: LD_VAR 0 1
81573: PPUSH
81574: CALL_OW 141
// end ;
81578: LD_VAR 0 4
81582: RET
// export function Abs ( value ) ; begin
81583: LD_INT 0
81585: PPUSH
// result := value ;
81586: LD_ADDR_VAR 0 2
81590: PUSH
81591: LD_VAR 0 1
81595: ST_TO_ADDR
// if value < 0 then
81596: LD_VAR 0 1
81600: PUSH
81601: LD_INT 0
81603: LESS
81604: IFFALSE 81621
// result := value * - 1 ;
81606: LD_ADDR_VAR 0 2
81610: PUSH
81611: LD_VAR 0 1
81615: PUSH
81616: LD_INT 1
81618: NEG
81619: MUL
81620: ST_TO_ADDR
// end ;
81621: LD_VAR 0 2
81625: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81626: LD_INT 0
81628: PPUSH
81629: PPUSH
81630: PPUSH
81631: PPUSH
81632: PPUSH
81633: PPUSH
81634: PPUSH
81635: PPUSH
// if not unit or not building then
81636: LD_VAR 0 1
81640: NOT
81641: IFTRUE 81650
81643: PUSH
81644: LD_VAR 0 2
81648: NOT
81649: OR
81650: IFFALSE 81654
// exit ;
81652: GO 81882
// x := GetX ( building ) ;
81654: LD_ADDR_VAR 0 4
81658: PUSH
81659: LD_VAR 0 2
81663: PPUSH
81664: CALL_OW 250
81668: ST_TO_ADDR
// y := GetY ( building ) ;
81669: LD_ADDR_VAR 0 6
81673: PUSH
81674: LD_VAR 0 2
81678: PPUSH
81679: CALL_OW 251
81683: ST_TO_ADDR
// d := GetDir ( building ) ;
81684: LD_ADDR_VAR 0 8
81688: PUSH
81689: LD_VAR 0 2
81693: PPUSH
81694: CALL_OW 254
81698: ST_TO_ADDR
// r := 4 ;
81699: LD_ADDR_VAR 0 9
81703: PUSH
81704: LD_INT 4
81706: ST_TO_ADDR
// for i := 1 to 5 do
81707: LD_ADDR_VAR 0 10
81711: PUSH
81712: DOUBLE
81713: LD_INT 1
81715: DEC
81716: ST_TO_ADDR
81717: LD_INT 5
81719: PUSH
81720: FOR_TO
81721: IFFALSE 81880
// begin _x := ShiftX ( x , d , r + i ) ;
81723: LD_ADDR_VAR 0 5
81727: PUSH
81728: LD_VAR 0 4
81732: PPUSH
81733: LD_VAR 0 8
81737: PPUSH
81738: LD_VAR 0 9
81742: PUSH
81743: LD_VAR 0 10
81747: PLUS
81748: PPUSH
81749: CALL_OW 272
81753: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81754: LD_ADDR_VAR 0 7
81758: PUSH
81759: LD_VAR 0 6
81763: PPUSH
81764: LD_VAR 0 8
81768: PPUSH
81769: LD_VAR 0 9
81773: PUSH
81774: LD_VAR 0 10
81778: PLUS
81779: PPUSH
81780: CALL_OW 273
81784: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81785: LD_VAR 0 5
81789: PPUSH
81790: LD_VAR 0 7
81794: PPUSH
81795: CALL_OW 488
81799: IFFALSE 81834
81801: PUSH
81802: LD_VAR 0 5
81806: PPUSH
81807: LD_VAR 0 7
81811: PPUSH
81812: CALL_OW 428
81816: PPUSH
81817: CALL_OW 247
81821: PUSH
81822: LD_INT 3
81824: PUSH
81825: LD_INT 2
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: IN
81832: NOT
81833: AND
81834: IFFALSE 81878
// begin ComMoveXY ( unit , _x , _y ) ;
81836: LD_VAR 0 1
81840: PPUSH
81841: LD_VAR 0 5
81845: PPUSH
81846: LD_VAR 0 7
81850: PPUSH
81851: CALL_OW 111
// result := [ _x , _y ] ;
81855: LD_ADDR_VAR 0 3
81859: PUSH
81860: LD_VAR 0 5
81864: PUSH
81865: LD_VAR 0 7
81869: PUSH
81870: EMPTY
81871: LIST
81872: LIST
81873: ST_TO_ADDR
// exit ;
81874: POP
81875: POP
81876: GO 81882
// end ; end ;
81878: GO 81720
81880: POP
81881: POP
// end ;
81882: LD_VAR 0 3
81886: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81887: LD_INT 0
81889: PPUSH
81890: PPUSH
81891: PPUSH
// result := 0 ;
81892: LD_ADDR_VAR 0 3
81896: PUSH
81897: LD_INT 0
81899: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81900: LD_VAR 0 1
81904: PUSH
81905: LD_INT 0
81907: LESS
81908: IFTRUE 81920
81910: PUSH
81911: LD_VAR 0 1
81915: PUSH
81916: LD_INT 8
81918: GREATER
81919: OR
81920: IFTRUE 81932
81922: PUSH
81923: LD_VAR 0 2
81927: PUSH
81928: LD_INT 0
81930: LESS
81931: OR
81932: IFTRUE 81944
81934: PUSH
81935: LD_VAR 0 2
81939: PUSH
81940: LD_INT 8
81942: GREATER
81943: OR
81944: IFFALSE 81948
// exit ;
81946: GO 82023
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81948: LD_ADDR_VAR 0 4
81952: PUSH
81953: LD_INT 22
81955: PUSH
81956: LD_VAR 0 2
81960: PUSH
81961: EMPTY
81962: LIST
81963: LIST
81964: PPUSH
81965: CALL_OW 69
81969: PUSH
81970: FOR_IN
81971: IFFALSE 82021
// begin un := UnitShoot ( i ) ;
81973: LD_ADDR_VAR 0 5
81977: PUSH
81978: LD_VAR 0 4
81982: PPUSH
81983: CALL_OW 504
81987: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81988: LD_VAR 0 5
81992: PPUSH
81993: CALL_OW 255
81997: PUSH
81998: LD_VAR 0 1
82002: EQUAL
82003: IFFALSE 82019
// begin result := un ;
82005: LD_ADDR_VAR 0 3
82009: PUSH
82010: LD_VAR 0 5
82014: ST_TO_ADDR
// exit ;
82015: POP
82016: POP
82017: GO 82023
// end ; end ;
82019: GO 81970
82021: POP
82022: POP
// end ;
82023: LD_VAR 0 3
82027: RET
// export function GetCargoBay ( units ) ; begin
82028: LD_INT 0
82030: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82031: LD_ADDR_VAR 0 2
82035: PUSH
82036: LD_VAR 0 1
82040: PPUSH
82041: LD_INT 2
82043: PUSH
82044: LD_INT 34
82046: PUSH
82047: LD_INT 12
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PUSH
82054: LD_INT 34
82056: PUSH
82057: LD_INT 51
82059: PUSH
82060: EMPTY
82061: LIST
82062: LIST
82063: PUSH
82064: LD_INT 34
82066: PUSH
82067: LD_INT 32
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: PUSH
82074: LD_INT 34
82076: PUSH
82077: LD_INT 89
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: LIST
82088: LIST
82089: LIST
82090: PPUSH
82091: CALL_OW 72
82095: ST_TO_ADDR
// end ;
82096: LD_VAR 0 2
82100: RET
// export function Negate ( value ) ; begin
82101: LD_INT 0
82103: PPUSH
// result := not value ;
82104: LD_ADDR_VAR 0 2
82108: PUSH
82109: LD_VAR 0 1
82113: NOT
82114: ST_TO_ADDR
// end ;
82115: LD_VAR 0 2
82119: RET
// export function Inc ( value ) ; begin
82120: LD_INT 0
82122: PPUSH
// result := value + 1 ;
82123: LD_ADDR_VAR 0 2
82127: PUSH
82128: LD_VAR 0 1
82132: PUSH
82133: LD_INT 1
82135: PLUS
82136: ST_TO_ADDR
// end ;
82137: LD_VAR 0 2
82141: RET
// export function Dec ( value ) ; begin
82142: LD_INT 0
82144: PPUSH
// result := value - 1 ;
82145: LD_ADDR_VAR 0 2
82149: PUSH
82150: LD_VAR 0 1
82154: PUSH
82155: LD_INT 1
82157: MINUS
82158: ST_TO_ADDR
// end ;
82159: LD_VAR 0 2
82163: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82164: LD_INT 0
82166: PPUSH
82167: PPUSH
82168: PPUSH
82169: PPUSH
82170: PPUSH
82171: PPUSH
82172: PPUSH
82173: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82174: LD_VAR 0 1
82178: PPUSH
82179: LD_VAR 0 2
82183: PPUSH
82184: CALL_OW 488
82188: NOT
82189: IFTRUE 82208
82191: PUSH
82192: LD_VAR 0 3
82196: PPUSH
82197: LD_VAR 0 4
82201: PPUSH
82202: CALL_OW 488
82206: NOT
82207: OR
82208: IFFALSE 82221
// begin result := - 1 ;
82210: LD_ADDR_VAR 0 5
82214: PUSH
82215: LD_INT 1
82217: NEG
82218: ST_TO_ADDR
// exit ;
82219: GO 82456
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82221: LD_ADDR_VAR 0 12
82225: PUSH
82226: LD_VAR 0 1
82230: PPUSH
82231: LD_VAR 0 2
82235: PPUSH
82236: LD_VAR 0 3
82240: PPUSH
82241: LD_VAR 0 4
82245: PPUSH
82246: CALL 81292 0 4
82250: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82251: LD_ADDR_VAR 0 11
82255: PUSH
82256: LD_VAR 0 1
82260: PPUSH
82261: LD_VAR 0 2
82265: PPUSH
82266: LD_VAR 0 12
82270: PUSH
82271: LD_INT 1
82273: ARRAY
82274: PPUSH
82275: LD_VAR 0 12
82279: PUSH
82280: LD_INT 2
82282: ARRAY
82283: PPUSH
82284: CALL_OW 298
82288: ST_TO_ADDR
// distance := 9999 ;
82289: LD_ADDR_VAR 0 10
82293: PUSH
82294: LD_INT 9999
82296: ST_TO_ADDR
// for i := 0 to 5 do
82297: LD_ADDR_VAR 0 6
82301: PUSH
82302: DOUBLE
82303: LD_INT 0
82305: DEC
82306: ST_TO_ADDR
82307: LD_INT 5
82309: PUSH
82310: FOR_TO
82311: IFFALSE 82454
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82313: LD_ADDR_VAR 0 7
82317: PUSH
82318: LD_VAR 0 1
82322: PPUSH
82323: LD_VAR 0 6
82327: PPUSH
82328: LD_VAR 0 11
82332: PPUSH
82333: CALL_OW 272
82337: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82338: LD_ADDR_VAR 0 8
82342: PUSH
82343: LD_VAR 0 2
82347: PPUSH
82348: LD_VAR 0 6
82352: PPUSH
82353: LD_VAR 0 11
82357: PPUSH
82358: CALL_OW 273
82362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82363: LD_VAR 0 7
82367: PPUSH
82368: LD_VAR 0 8
82372: PPUSH
82373: CALL_OW 488
82377: NOT
82378: IFFALSE 82382
// continue ;
82380: GO 82310
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82382: LD_ADDR_VAR 0 9
82386: PUSH
82387: LD_VAR 0 12
82391: PUSH
82392: LD_INT 1
82394: ARRAY
82395: PPUSH
82396: LD_VAR 0 12
82400: PUSH
82401: LD_INT 2
82403: ARRAY
82404: PPUSH
82405: LD_VAR 0 7
82409: PPUSH
82410: LD_VAR 0 8
82414: PPUSH
82415: CALL_OW 298
82419: ST_TO_ADDR
// if tmp < distance then
82420: LD_VAR 0 9
82424: PUSH
82425: LD_VAR 0 10
82429: LESS
82430: IFFALSE 82452
// begin result := i ;
82432: LD_ADDR_VAR 0 5
82436: PUSH
82437: LD_VAR 0 6
82441: ST_TO_ADDR
// distance := tmp ;
82442: LD_ADDR_VAR 0 10
82446: PUSH
82447: LD_VAR 0 9
82451: ST_TO_ADDR
// end ; end ;
82452: GO 82310
82454: POP
82455: POP
// end ;
82456: LD_VAR 0 5
82460: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82461: LD_INT 0
82463: PPUSH
82464: PPUSH
// if not driver or not IsInUnit ( driver ) then
82465: LD_VAR 0 1
82469: NOT
82470: IFTRUE 82484
82472: PUSH
82473: LD_VAR 0 1
82477: PPUSH
82478: CALL_OW 310
82482: NOT
82483: OR
82484: IFFALSE 82488
// exit ;
82486: GO 82578
// vehicle := IsInUnit ( driver ) ;
82488: LD_ADDR_VAR 0 3
82492: PUSH
82493: LD_VAR 0 1
82497: PPUSH
82498: CALL_OW 310
82502: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82503: LD_VAR 0 1
82507: PPUSH
82508: LD_STRING \
82510: PUSH
82511: LD_INT 0
82513: PUSH
82514: LD_INT 0
82516: PUSH
82517: LD_INT 0
82519: PUSH
82520: LD_INT 0
82522: PUSH
82523: LD_INT 0
82525: PUSH
82526: LD_INT 0
82528: PUSH
82529: EMPTY
82530: LIST
82531: LIST
82532: LIST
82533: LIST
82534: LIST
82535: LIST
82536: LIST
82537: PUSH
82538: LD_STRING E
82540: PUSH
82541: LD_INT 0
82543: PUSH
82544: LD_INT 0
82546: PUSH
82547: LD_VAR 0 3
82551: PUSH
82552: LD_INT 0
82554: PUSH
82555: LD_INT 0
82557: PUSH
82558: LD_INT 0
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PPUSH
82574: CALL_OW 446
// end ;
82578: LD_VAR 0 2
82582: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82583: LD_INT 0
82585: PPUSH
82586: PPUSH
// if not driver or not IsInUnit ( driver ) then
82587: LD_VAR 0 1
82591: NOT
82592: IFTRUE 82606
82594: PUSH
82595: LD_VAR 0 1
82599: PPUSH
82600: CALL_OW 310
82604: NOT
82605: OR
82606: IFFALSE 82610
// exit ;
82608: GO 82700
// vehicle := IsInUnit ( driver ) ;
82610: LD_ADDR_VAR 0 3
82614: PUSH
82615: LD_VAR 0 1
82619: PPUSH
82620: CALL_OW 310
82624: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82625: LD_VAR 0 1
82629: PPUSH
82630: LD_STRING \
82632: PUSH
82633: LD_INT 0
82635: PUSH
82636: LD_INT 0
82638: PUSH
82639: LD_INT 0
82641: PUSH
82642: LD_INT 0
82644: PUSH
82645: LD_INT 0
82647: PUSH
82648: LD_INT 0
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: LIST
82655: LIST
82656: LIST
82657: LIST
82658: LIST
82659: PUSH
82660: LD_STRING E
82662: PUSH
82663: LD_INT 0
82665: PUSH
82666: LD_INT 0
82668: PUSH
82669: LD_VAR 0 3
82673: PUSH
82674: LD_INT 0
82676: PUSH
82677: LD_INT 0
82679: PUSH
82680: LD_INT 0
82682: PUSH
82683: EMPTY
82684: LIST
82685: LIST
82686: LIST
82687: LIST
82688: LIST
82689: LIST
82690: LIST
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PPUSH
82696: CALL_OW 447
// end ;
82700: LD_VAR 0 2
82704: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82705: LD_INT 0
82707: PPUSH
82708: PPUSH
82709: PPUSH
// tmp := [ ] ;
82710: LD_ADDR_VAR 0 5
82714: PUSH
82715: EMPTY
82716: ST_TO_ADDR
// for i in units do
82717: LD_ADDR_VAR 0 4
82721: PUSH
82722: LD_VAR 0 1
82726: PUSH
82727: FOR_IN
82728: IFFALSE 82766
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82730: LD_ADDR_VAR 0 5
82734: PUSH
82735: LD_VAR 0 5
82739: PPUSH
82740: LD_VAR 0 5
82744: PUSH
82745: LD_INT 1
82747: PLUS
82748: PPUSH
82749: LD_VAR 0 4
82753: PPUSH
82754: CALL_OW 256
82758: PPUSH
82759: CALL_OW 2
82763: ST_TO_ADDR
82764: GO 82727
82766: POP
82767: POP
// if not tmp then
82768: LD_VAR 0 5
82772: NOT
82773: IFFALSE 82777
// exit ;
82775: GO 82825
// if asc then
82777: LD_VAR 0 2
82781: IFFALSE 82805
// result := SortListByListAsc ( units , tmp ) else
82783: LD_ADDR_VAR 0 3
82787: PUSH
82788: LD_VAR 0 1
82792: PPUSH
82793: LD_VAR 0 5
82797: PPUSH
82798: CALL_OW 76
82802: ST_TO_ADDR
82803: GO 82825
// result := SortListByListDesc ( units , tmp ) ;
82805: LD_ADDR_VAR 0 3
82809: PUSH
82810: LD_VAR 0 1
82814: PPUSH
82815: LD_VAR 0 5
82819: PPUSH
82820: CALL_OW 77
82824: ST_TO_ADDR
// end ;
82825: LD_VAR 0 3
82829: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82830: LD_INT 0
82832: PPUSH
82833: PPUSH
// task := GetTaskList ( mech ) ;
82834: LD_ADDR_VAR 0 4
82838: PUSH
82839: LD_VAR 0 1
82843: PPUSH
82844: CALL_OW 437
82848: ST_TO_ADDR
// if not task then
82849: LD_VAR 0 4
82853: NOT
82854: IFFALSE 82858
// exit ;
82856: GO 82902
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82858: LD_ADDR_VAR 0 3
82862: PUSH
82863: LD_VAR 0 4
82867: PUSH
82868: LD_INT 1
82870: ARRAY
82871: PUSH
82872: LD_INT 1
82874: ARRAY
82875: PUSH
82876: LD_STRING r
82878: EQUAL
82879: IFFALSE 82901
82881: PUSH
82882: LD_VAR 0 4
82886: PUSH
82887: LD_INT 1
82889: ARRAY
82890: PUSH
82891: LD_INT 4
82893: ARRAY
82894: PUSH
82895: LD_VAR 0 2
82899: EQUAL
82900: AND
82901: ST_TO_ADDR
// end ;
82902: LD_VAR 0 3
82906: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82907: LD_INT 0
82909: PPUSH
// SetDir ( unit , d ) ;
82910: LD_VAR 0 1
82914: PPUSH
82915: LD_VAR 0 4
82919: PPUSH
82920: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82924: LD_ADDR_VAR 0 6
82928: PUSH
82929: LD_VAR 0 1
82933: PPUSH
82934: LD_VAR 0 2
82938: PPUSH
82939: LD_VAR 0 3
82943: PPUSH
82944: LD_VAR 0 5
82948: PPUSH
82949: CALL_OW 48
82953: ST_TO_ADDR
// end ;
82954: LD_VAR 0 6
82958: RET
// export function ToNaturalNumber ( number ) ; begin
82959: LD_INT 0
82961: PPUSH
// result := number div 1 ;
82962: LD_ADDR_VAR 0 2
82966: PUSH
82967: LD_VAR 0 1
82971: PUSH
82972: LD_INT 1
82974: DIV
82975: ST_TO_ADDR
// if number < 0 then
82976: LD_VAR 0 1
82980: PUSH
82981: LD_INT 0
82983: LESS
82984: IFFALSE 82994
// result := 0 ;
82986: LD_ADDR_VAR 0 2
82990: PUSH
82991: LD_INT 0
82993: ST_TO_ADDR
// end ;
82994: LD_VAR 0 2
82998: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82999: LD_INT 0
83001: PPUSH
83002: PPUSH
83003: PPUSH
// if not buildings then
83004: LD_VAR 0 1
83008: NOT
83009: IFFALSE 83013
// exit ;
83011: GO 83128
// tmp := [ ] ;
83013: LD_ADDR_VAR 0 5
83017: PUSH
83018: EMPTY
83019: ST_TO_ADDR
// for b in buildings do
83020: LD_ADDR_VAR 0 4
83024: PUSH
83025: LD_VAR 0 1
83029: PUSH
83030: FOR_IN
83031: IFFALSE 83069
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83033: LD_ADDR_VAR 0 5
83037: PUSH
83038: LD_VAR 0 5
83042: PPUSH
83043: LD_VAR 0 5
83047: PUSH
83048: LD_INT 1
83050: PLUS
83051: PPUSH
83052: LD_VAR 0 4
83056: PPUSH
83057: CALL_OW 266
83061: PPUSH
83062: CALL_OW 1
83066: ST_TO_ADDR
83067: GO 83030
83069: POP
83070: POP
// if not tmp then
83071: LD_VAR 0 5
83075: NOT
83076: IFFALSE 83080
// exit ;
83078: GO 83128
// if asc then
83080: LD_VAR 0 2
83084: IFFALSE 83108
// result := SortListByListAsc ( buildings , tmp ) else
83086: LD_ADDR_VAR 0 3
83090: PUSH
83091: LD_VAR 0 1
83095: PPUSH
83096: LD_VAR 0 5
83100: PPUSH
83101: CALL_OW 76
83105: ST_TO_ADDR
83106: GO 83128
// result := SortListByListDesc ( buildings , tmp ) ;
83108: LD_ADDR_VAR 0 3
83112: PUSH
83113: LD_VAR 0 1
83117: PPUSH
83118: LD_VAR 0 5
83122: PPUSH
83123: CALL_OW 77
83127: ST_TO_ADDR
// end ;
83128: LD_VAR 0 3
83132: RET
// export function SortByClass ( units , class ) ; var un ; begin
83133: LD_INT 0
83135: PPUSH
83136: PPUSH
// if not units or not class then
83137: LD_VAR 0 1
83141: NOT
83142: IFTRUE 83151
83144: PUSH
83145: LD_VAR 0 2
83149: NOT
83150: OR
83151: IFFALSE 83155
// exit ;
83153: GO 83250
// result := [ ] ;
83155: LD_ADDR_VAR 0 3
83159: PUSH
83160: EMPTY
83161: ST_TO_ADDR
// for un in units do
83162: LD_ADDR_VAR 0 4
83166: PUSH
83167: LD_VAR 0 1
83171: PUSH
83172: FOR_IN
83173: IFFALSE 83248
// if GetClass ( un ) = class then
83175: LD_VAR 0 4
83179: PPUSH
83180: CALL_OW 257
83184: PUSH
83185: LD_VAR 0 2
83189: EQUAL
83190: IFFALSE 83217
// result := Insert ( result , 1 , un ) else
83192: LD_ADDR_VAR 0 3
83196: PUSH
83197: LD_VAR 0 3
83201: PPUSH
83202: LD_INT 1
83204: PPUSH
83205: LD_VAR 0 4
83209: PPUSH
83210: CALL_OW 2
83214: ST_TO_ADDR
83215: GO 83246
// result := Replace ( result , result + 1 , un ) ;
83217: LD_ADDR_VAR 0 3
83221: PUSH
83222: LD_VAR 0 3
83226: PPUSH
83227: LD_VAR 0 3
83231: PUSH
83232: LD_INT 1
83234: PLUS
83235: PPUSH
83236: LD_VAR 0 4
83240: PPUSH
83241: CALL_OW 1
83245: ST_TO_ADDR
83246: GO 83172
83248: POP
83249: POP
// end ;
83250: LD_VAR 0 3
83254: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83255: LD_INT 0
83257: PPUSH
83258: PPUSH
83259: PPUSH
83260: PPUSH
83261: PPUSH
83262: PPUSH
83263: PPUSH
// result := [ ] ;
83264: LD_ADDR_VAR 0 4
83268: PUSH
83269: EMPTY
83270: ST_TO_ADDR
// if x - r < 0 then
83271: LD_VAR 0 1
83275: PUSH
83276: LD_VAR 0 3
83280: MINUS
83281: PUSH
83282: LD_INT 0
83284: LESS
83285: IFFALSE 83297
// min_x := 0 else
83287: LD_ADDR_VAR 0 8
83291: PUSH
83292: LD_INT 0
83294: ST_TO_ADDR
83295: GO 83313
// min_x := x - r ;
83297: LD_ADDR_VAR 0 8
83301: PUSH
83302: LD_VAR 0 1
83306: PUSH
83307: LD_VAR 0 3
83311: MINUS
83312: ST_TO_ADDR
// if y - r < 0 then
83313: LD_VAR 0 2
83317: PUSH
83318: LD_VAR 0 3
83322: MINUS
83323: PUSH
83324: LD_INT 0
83326: LESS
83327: IFFALSE 83339
// min_y := 0 else
83329: LD_ADDR_VAR 0 7
83333: PUSH
83334: LD_INT 0
83336: ST_TO_ADDR
83337: GO 83355
// min_y := y - r ;
83339: LD_ADDR_VAR 0 7
83343: PUSH
83344: LD_VAR 0 2
83348: PUSH
83349: LD_VAR 0 3
83353: MINUS
83354: ST_TO_ADDR
// max_x := x + r ;
83355: LD_ADDR_VAR 0 9
83359: PUSH
83360: LD_VAR 0 1
83364: PUSH
83365: LD_VAR 0 3
83369: PLUS
83370: ST_TO_ADDR
// max_y := y + r ;
83371: LD_ADDR_VAR 0 10
83375: PUSH
83376: LD_VAR 0 2
83380: PUSH
83381: LD_VAR 0 3
83385: PLUS
83386: ST_TO_ADDR
// for _x = min_x to max_x do
83387: LD_ADDR_VAR 0 5
83391: PUSH
83392: DOUBLE
83393: LD_VAR 0 8
83397: DEC
83398: ST_TO_ADDR
83399: LD_VAR 0 9
83403: PUSH
83404: FOR_TO
83405: IFFALSE 83506
// for _y = min_y to max_y do
83407: LD_ADDR_VAR 0 6
83411: PUSH
83412: DOUBLE
83413: LD_VAR 0 7
83417: DEC
83418: ST_TO_ADDR
83419: LD_VAR 0 10
83423: PUSH
83424: FOR_TO
83425: IFFALSE 83502
// begin if not ValidHex ( _x , _y ) then
83427: LD_VAR 0 5
83431: PPUSH
83432: LD_VAR 0 6
83436: PPUSH
83437: CALL_OW 488
83441: NOT
83442: IFFALSE 83446
// continue ;
83444: GO 83424
// if GetResourceTypeXY ( _x , _y ) then
83446: LD_VAR 0 5
83450: PPUSH
83451: LD_VAR 0 6
83455: PPUSH
83456: CALL_OW 283
83460: IFFALSE 83500
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83462: LD_ADDR_VAR 0 4
83466: PUSH
83467: LD_VAR 0 4
83471: PPUSH
83472: LD_VAR 0 4
83476: PUSH
83477: LD_INT 1
83479: PLUS
83480: PPUSH
83481: LD_VAR 0 5
83485: PUSH
83486: LD_VAR 0 6
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PPUSH
83495: CALL_OW 1
83499: ST_TO_ADDR
// end ;
83500: GO 83424
83502: POP
83503: POP
83504: GO 83404
83506: POP
83507: POP
// end ;
83508: LD_VAR 0 4
83512: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83513: LD_INT 0
83515: PPUSH
83516: PPUSH
83517: PPUSH
83518: PPUSH
83519: PPUSH
83520: PPUSH
83521: PPUSH
83522: PPUSH
// if not units then
83523: LD_VAR 0 1
83527: NOT
83528: IFFALSE 83532
// exit ;
83530: GO 84064
// result := UnitFilter ( units , [ f_ok ] ) ;
83532: LD_ADDR_VAR 0 3
83536: PUSH
83537: LD_VAR 0 1
83541: PPUSH
83542: LD_INT 50
83544: PUSH
83545: EMPTY
83546: LIST
83547: PPUSH
83548: CALL_OW 72
83552: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83553: LD_ADDR_VAR 0 8
83557: PUSH
83558: LD_VAR 0 1
83562: PUSH
83563: LD_INT 1
83565: ARRAY
83566: PPUSH
83567: CALL_OW 255
83571: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83572: LD_ADDR_VAR 0 10
83576: PUSH
83577: LD_INT 29
83579: PUSH
83580: LD_INT 91
83582: PUSH
83583: LD_INT 49
83585: PUSH
83586: EMPTY
83587: LIST
83588: LIST
83589: LIST
83590: ST_TO_ADDR
// if not result then
83591: LD_VAR 0 3
83595: NOT
83596: IFFALSE 83600
// exit ;
83598: GO 84064
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83600: LD_ADDR_VAR 0 5
83604: PUSH
83605: LD_INT 81
83607: PUSH
83608: LD_VAR 0 8
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: PPUSH
83617: CALL_OW 69
83621: ST_TO_ADDR
// for i in result do
83622: LD_ADDR_VAR 0 4
83626: PUSH
83627: LD_VAR 0 3
83631: PUSH
83632: FOR_IN
83633: IFFALSE 84062
// begin tag := GetTag ( i ) + 1 ;
83635: LD_ADDR_VAR 0 9
83639: PUSH
83640: LD_VAR 0 4
83644: PPUSH
83645: CALL_OW 110
83649: PUSH
83650: LD_INT 1
83652: PLUS
83653: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83654: LD_ADDR_VAR 0 7
83658: PUSH
83659: LD_VAR 0 4
83663: PPUSH
83664: CALL_OW 250
83668: PPUSH
83669: LD_VAR 0 4
83673: PPUSH
83674: CALL_OW 251
83678: PPUSH
83679: LD_INT 4
83681: PPUSH
83682: CALL 83255 0 3
83686: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83687: LD_VAR 0 4
83691: PPUSH
83692: CALL_OW 247
83696: PUSH
83697: LD_INT 2
83699: EQUAL
83700: IFFALSE 83712
83702: PUSH
83703: LD_VAR 0 7
83707: PUSH
83708: LD_INT 2
83710: GREATER
83711: AND
83712: IFFALSE 83732
83714: PUSH
83715: LD_VAR 0 4
83719: PPUSH
83720: CALL_OW 264
83724: PUSH
83725: LD_VAR 0 10
83729: IN
83730: NOT
83731: AND
83732: IFFALSE 83771
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83734: LD_VAR 0 4
83738: PPUSH
83739: LD_VAR 0 7
83743: PUSH
83744: LD_INT 1
83746: ARRAY
83747: PUSH
83748: LD_INT 1
83750: ARRAY
83751: PPUSH
83752: LD_VAR 0 7
83756: PUSH
83757: LD_INT 1
83759: ARRAY
83760: PUSH
83761: LD_INT 2
83763: ARRAY
83764: PPUSH
83765: CALL_OW 116
83769: GO 84060
// if path > tag then
83771: LD_VAR 0 2
83775: PUSH
83776: LD_VAR 0 9
83780: GREATER
83781: IFFALSE 83989
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83783: LD_ADDR_VAR 0 6
83787: PUSH
83788: LD_VAR 0 5
83792: PPUSH
83793: LD_INT 91
83795: PUSH
83796: LD_VAR 0 4
83800: PUSH
83801: LD_INT 8
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: LIST
83808: PPUSH
83809: CALL_OW 72
83813: ST_TO_ADDR
// if nearEnemy then
83814: LD_VAR 0 6
83818: IFFALSE 83887
// begin if GetWeapon ( i ) = ru_time_lapser then
83820: LD_VAR 0 4
83824: PPUSH
83825: CALL_OW 264
83829: PUSH
83830: LD_INT 49
83832: EQUAL
83833: IFFALSE 83861
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83835: LD_VAR 0 4
83839: PPUSH
83840: LD_VAR 0 6
83844: PPUSH
83845: LD_VAR 0 4
83849: PPUSH
83850: CALL_OW 74
83854: PPUSH
83855: CALL_OW 112
83859: GO 83885
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83861: LD_VAR 0 4
83865: PPUSH
83866: LD_VAR 0 6
83870: PPUSH
83871: LD_VAR 0 4
83875: PPUSH
83876: CALL_OW 74
83880: PPUSH
83881: CALL 85145 0 2
// end else
83885: GO 83987
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83887: LD_VAR 0 4
83891: PPUSH
83892: LD_VAR 0 2
83896: PUSH
83897: LD_VAR 0 9
83901: ARRAY
83902: PUSH
83903: LD_INT 1
83905: ARRAY
83906: PPUSH
83907: LD_VAR 0 2
83911: PUSH
83912: LD_VAR 0 9
83916: ARRAY
83917: PUSH
83918: LD_INT 2
83920: ARRAY
83921: PPUSH
83922: CALL_OW 297
83926: PUSH
83927: LD_INT 6
83929: GREATER
83930: IFFALSE 83973
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83932: LD_VAR 0 4
83936: PPUSH
83937: LD_VAR 0 2
83941: PUSH
83942: LD_VAR 0 9
83946: ARRAY
83947: PUSH
83948: LD_INT 1
83950: ARRAY
83951: PPUSH
83952: LD_VAR 0 2
83956: PUSH
83957: LD_VAR 0 9
83961: ARRAY
83962: PUSH
83963: LD_INT 2
83965: ARRAY
83966: PPUSH
83967: CALL_OW 114
83971: GO 83987
// SetTag ( i , tag ) ;
83973: LD_VAR 0 4
83977: PPUSH
83978: LD_VAR 0 9
83982: PPUSH
83983: CALL_OW 109
// end else
83987: GO 84060
// if enemy then
83989: LD_VAR 0 5
83993: IFFALSE 84060
// begin if GetWeapon ( i ) = ru_time_lapser then
83995: LD_VAR 0 4
83999: PPUSH
84000: CALL_OW 264
84004: PUSH
84005: LD_INT 49
84007: EQUAL
84008: IFFALSE 84036
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84010: LD_VAR 0 4
84014: PPUSH
84015: LD_VAR 0 5
84019: PPUSH
84020: LD_VAR 0 4
84024: PPUSH
84025: CALL_OW 74
84029: PPUSH
84030: CALL_OW 112
84034: GO 84060
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84036: LD_VAR 0 4
84040: PPUSH
84041: LD_VAR 0 5
84045: PPUSH
84046: LD_VAR 0 4
84050: PPUSH
84051: CALL_OW 74
84055: PPUSH
84056: CALL 85145 0 2
// end ; end ;
84060: GO 83632
84062: POP
84063: POP
// end ;
84064: LD_VAR 0 3
84068: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84069: LD_INT 0
84071: PPUSH
84072: PPUSH
84073: PPUSH
// if not unit or IsInUnit ( unit ) then
84074: LD_VAR 0 1
84078: NOT
84079: IFTRUE 84092
84081: PUSH
84082: LD_VAR 0 1
84086: PPUSH
84087: CALL_OW 310
84091: OR
84092: IFFALSE 84096
// exit ;
84094: GO 84187
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84096: LD_ADDR_VAR 0 4
84100: PUSH
84101: LD_VAR 0 1
84105: PPUSH
84106: CALL_OW 250
84110: PPUSH
84111: LD_VAR 0 2
84115: PPUSH
84116: LD_INT 1
84118: PPUSH
84119: CALL_OW 272
84123: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84124: LD_ADDR_VAR 0 5
84128: PUSH
84129: LD_VAR 0 1
84133: PPUSH
84134: CALL_OW 251
84138: PPUSH
84139: LD_VAR 0 2
84143: PPUSH
84144: LD_INT 1
84146: PPUSH
84147: CALL_OW 273
84151: ST_TO_ADDR
// if ValidHex ( x , y ) then
84152: LD_VAR 0 4
84156: PPUSH
84157: LD_VAR 0 5
84161: PPUSH
84162: CALL_OW 488
84166: IFFALSE 84187
// ComTurnXY ( unit , x , y ) ;
84168: LD_VAR 0 1
84172: PPUSH
84173: LD_VAR 0 4
84177: PPUSH
84178: LD_VAR 0 5
84182: PPUSH
84183: CALL_OW 118
// end ;
84187: LD_VAR 0 3
84191: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84192: LD_INT 0
84194: PPUSH
84195: PPUSH
// result := false ;
84196: LD_ADDR_VAR 0 3
84200: PUSH
84201: LD_INT 0
84203: ST_TO_ADDR
// if not units then
84204: LD_VAR 0 2
84208: NOT
84209: IFFALSE 84213
// exit ;
84211: GO 84258
// for i in units do
84213: LD_ADDR_VAR 0 4
84217: PUSH
84218: LD_VAR 0 2
84222: PUSH
84223: FOR_IN
84224: IFFALSE 84256
// if See ( side , i ) then
84226: LD_VAR 0 1
84230: PPUSH
84231: LD_VAR 0 4
84235: PPUSH
84236: CALL_OW 292
84240: IFFALSE 84254
// begin result := true ;
84242: LD_ADDR_VAR 0 3
84246: PUSH
84247: LD_INT 1
84249: ST_TO_ADDR
// exit ;
84250: POP
84251: POP
84252: GO 84258
// end ;
84254: GO 84223
84256: POP
84257: POP
// end ;
84258: LD_VAR 0 3
84262: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84263: LD_INT 0
84265: PPUSH
84266: PPUSH
84267: PPUSH
84268: PPUSH
// if not unit or not points then
84269: LD_VAR 0 1
84273: NOT
84274: IFTRUE 84283
84276: PUSH
84277: LD_VAR 0 2
84281: NOT
84282: OR
84283: IFFALSE 84287
// exit ;
84285: GO 84377
// dist := 99999 ;
84287: LD_ADDR_VAR 0 5
84291: PUSH
84292: LD_INT 99999
84294: ST_TO_ADDR
// for i in points do
84295: LD_ADDR_VAR 0 4
84299: PUSH
84300: LD_VAR 0 2
84304: PUSH
84305: FOR_IN
84306: IFFALSE 84375
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84308: LD_ADDR_VAR 0 6
84312: PUSH
84313: LD_VAR 0 1
84317: PPUSH
84318: LD_VAR 0 4
84322: PUSH
84323: LD_INT 1
84325: ARRAY
84326: PPUSH
84327: LD_VAR 0 4
84331: PUSH
84332: LD_INT 2
84334: ARRAY
84335: PPUSH
84336: CALL_OW 297
84340: ST_TO_ADDR
// if tmpDist < dist then
84341: LD_VAR 0 6
84345: PUSH
84346: LD_VAR 0 5
84350: LESS
84351: IFFALSE 84373
// begin result := i ;
84353: LD_ADDR_VAR 0 3
84357: PUSH
84358: LD_VAR 0 4
84362: ST_TO_ADDR
// dist := tmpDist ;
84363: LD_ADDR_VAR 0 5
84367: PUSH
84368: LD_VAR 0 6
84372: ST_TO_ADDR
// end ; end ;
84373: GO 84305
84375: POP
84376: POP
// end ;
84377: LD_VAR 0 3
84381: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84382: LD_INT 0
84384: PPUSH
// uc_side := side ;
84385: LD_ADDR_OWVAR 20
84389: PUSH
84390: LD_VAR 0 1
84394: ST_TO_ADDR
// uc_nation := 3 ;
84395: LD_ADDR_OWVAR 21
84399: PUSH
84400: LD_INT 3
84402: ST_TO_ADDR
// vc_chassis := 25 ;
84403: LD_ADDR_OWVAR 37
84407: PUSH
84408: LD_INT 25
84410: ST_TO_ADDR
// vc_engine := engine_siberite ;
84411: LD_ADDR_OWVAR 39
84415: PUSH
84416: LD_INT 3
84418: ST_TO_ADDR
// vc_control := control_computer ;
84419: LD_ADDR_OWVAR 38
84423: PUSH
84424: LD_INT 3
84426: ST_TO_ADDR
// vc_weapon := 59 ;
84427: LD_ADDR_OWVAR 40
84431: PUSH
84432: LD_INT 59
84434: ST_TO_ADDR
// result := CreateVehicle ;
84435: LD_ADDR_VAR 0 5
84439: PUSH
84440: CALL_OW 45
84444: ST_TO_ADDR
// SetDir ( result , d ) ;
84445: LD_VAR 0 5
84449: PPUSH
84450: LD_VAR 0 4
84454: PPUSH
84455: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84459: LD_VAR 0 5
84463: PPUSH
84464: LD_VAR 0 2
84468: PPUSH
84469: LD_VAR 0 3
84473: PPUSH
84474: LD_INT 0
84476: PPUSH
84477: CALL_OW 48
// end ;
84481: LD_VAR 0 5
84485: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84486: LD_INT 0
84488: PPUSH
84489: PPUSH
84490: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84491: LD_ADDR_VAR 0 2
84495: PUSH
84496: LD_INT 0
84498: PUSH
84499: LD_INT 0
84501: PUSH
84502: LD_INT 0
84504: PUSH
84505: LD_INT 0
84507: PUSH
84508: EMPTY
84509: LIST
84510: LIST
84511: LIST
84512: LIST
84513: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84514: LD_VAR 0 1
84518: NOT
84519: IFTRUE 84552
84521: PUSH
84522: LD_VAR 0 1
84526: PPUSH
84527: CALL_OW 264
84531: PUSH
84532: LD_INT 12
84534: PUSH
84535: LD_INT 51
84537: PUSH
84538: LD_INT 32
84540: PUSH
84541: LD_INT 89
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: LIST
84548: LIST
84549: IN
84550: NOT
84551: OR
84552: IFFALSE 84556
// exit ;
84554: GO 84654
// for i := 1 to 3 do
84556: LD_ADDR_VAR 0 3
84560: PUSH
84561: DOUBLE
84562: LD_INT 1
84564: DEC
84565: ST_TO_ADDR
84566: LD_INT 3
84568: PUSH
84569: FOR_TO
84570: IFFALSE 84652
// begin tmp := GetCargo ( cargo , i ) ;
84572: LD_ADDR_VAR 0 4
84576: PUSH
84577: LD_VAR 0 1
84581: PPUSH
84582: LD_VAR 0 3
84586: PPUSH
84587: CALL_OW 289
84591: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84592: LD_ADDR_VAR 0 2
84596: PUSH
84597: LD_VAR 0 2
84601: PPUSH
84602: LD_VAR 0 3
84606: PPUSH
84607: LD_VAR 0 4
84611: PPUSH
84612: CALL_OW 1
84616: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84617: LD_ADDR_VAR 0 2
84621: PUSH
84622: LD_VAR 0 2
84626: PPUSH
84627: LD_INT 4
84629: PPUSH
84630: LD_VAR 0 2
84634: PUSH
84635: LD_INT 4
84637: ARRAY
84638: PUSH
84639: LD_VAR 0 4
84643: PLUS
84644: PPUSH
84645: CALL_OW 1
84649: ST_TO_ADDR
// end ;
84650: GO 84569
84652: POP
84653: POP
// end ;
84654: LD_VAR 0 2
84658: RET
// export function Length ( array ) ; begin
84659: LD_INT 0
84661: PPUSH
// result := array + 0 ;
84662: LD_ADDR_VAR 0 2
84666: PUSH
84667: LD_VAR 0 1
84671: PUSH
84672: LD_INT 0
84674: PLUS
84675: ST_TO_ADDR
// end ;
84676: LD_VAR 0 2
84680: RET
// export function PrepareArray ( array ) ; begin
84681: LD_INT 0
84683: PPUSH
// result := array diff 0 ;
84684: LD_ADDR_VAR 0 2
84688: PUSH
84689: LD_VAR 0 1
84693: PUSH
84694: LD_INT 0
84696: DIFF
84697: ST_TO_ADDR
// if not result [ 1 ] then
84698: LD_VAR 0 2
84702: PUSH
84703: LD_INT 1
84705: ARRAY
84706: NOT
84707: IFFALSE 84727
// result := Delete ( result , 1 ) ;
84709: LD_ADDR_VAR 0 2
84713: PUSH
84714: LD_VAR 0 2
84718: PPUSH
84719: LD_INT 1
84721: PPUSH
84722: CALL_OW 3
84726: ST_TO_ADDR
// end ;
84727: LD_VAR 0 2
84731: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84732: LD_INT 0
84734: PPUSH
84735: PPUSH
84736: PPUSH
84737: PPUSH
// sibRocketRange := 25 ;
84738: LD_ADDR_VAR 0 6
84742: PUSH
84743: LD_INT 25
84745: ST_TO_ADDR
// result := false ;
84746: LD_ADDR_VAR 0 4
84750: PUSH
84751: LD_INT 0
84753: ST_TO_ADDR
// for i := 0 to 5 do
84754: LD_ADDR_VAR 0 5
84758: PUSH
84759: DOUBLE
84760: LD_INT 0
84762: DEC
84763: ST_TO_ADDR
84764: LD_INT 5
84766: PUSH
84767: FOR_TO
84768: IFFALSE 84835
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84770: LD_VAR 0 1
84774: PPUSH
84775: LD_VAR 0 5
84779: PPUSH
84780: LD_VAR 0 6
84784: PPUSH
84785: CALL_OW 272
84789: PPUSH
84790: LD_VAR 0 2
84794: PPUSH
84795: LD_VAR 0 5
84799: PPUSH
84800: LD_VAR 0 6
84804: PPUSH
84805: CALL_OW 273
84809: PPUSH
84810: LD_VAR 0 3
84814: PPUSH
84815: CALL_OW 309
84819: IFFALSE 84833
// begin result := true ;
84821: LD_ADDR_VAR 0 4
84825: PUSH
84826: LD_INT 1
84828: ST_TO_ADDR
// exit ;
84829: POP
84830: POP
84831: GO 84837
// end ;
84833: GO 84767
84835: POP
84836: POP
// end ;
84837: LD_VAR 0 4
84841: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84842: LD_INT 0
84844: PPUSH
84845: PPUSH
84846: PPUSH
// if btype = b_depot then
84847: LD_VAR 0 2
84851: PUSH
84852: LD_INT 0
84854: EQUAL
84855: IFFALSE 84867
// begin result := true ;
84857: LD_ADDR_VAR 0 3
84861: PUSH
84862: LD_INT 1
84864: ST_TO_ADDR
// exit ;
84865: GO 84987
// end ; pom := GetBase ( depot ) ;
84867: LD_ADDR_VAR 0 4
84871: PUSH
84872: LD_VAR 0 1
84876: PPUSH
84877: CALL_OW 274
84881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84882: LD_ADDR_VAR 0 5
84886: PUSH
84887: LD_VAR 0 2
84891: PPUSH
84892: LD_VAR 0 1
84896: PPUSH
84897: CALL_OW 248
84901: PPUSH
84902: CALL_OW 450
84906: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84907: LD_ADDR_VAR 0 3
84911: PUSH
84912: LD_VAR 0 4
84916: PPUSH
84917: LD_INT 1
84919: PPUSH
84920: CALL_OW 275
84924: PUSH
84925: LD_VAR 0 5
84929: PUSH
84930: LD_INT 1
84932: ARRAY
84933: GREATEREQUAL
84934: IFFALSE 84960
84936: PUSH
84937: LD_VAR 0 4
84941: PPUSH
84942: LD_INT 2
84944: PPUSH
84945: CALL_OW 275
84949: PUSH
84950: LD_VAR 0 5
84954: PUSH
84955: LD_INT 2
84957: ARRAY
84958: GREATEREQUAL
84959: AND
84960: IFFALSE 84986
84962: PUSH
84963: LD_VAR 0 4
84967: PPUSH
84968: LD_INT 3
84970: PPUSH
84971: CALL_OW 275
84975: PUSH
84976: LD_VAR 0 5
84980: PUSH
84981: LD_INT 3
84983: ARRAY
84984: GREATEREQUAL
84985: AND
84986: ST_TO_ADDR
// end ;
84987: LD_VAR 0 3
84991: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84992: LD_INT 0
84994: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84995: LD_VAR 0 1
84999: PPUSH
85000: LD_VAR 0 2
85004: PPUSH
85005: LD_INT 0
85007: PPUSH
85008: LD_INT 0
85010: PPUSH
85011: LD_INT 1
85013: PPUSH
85014: LD_INT 0
85016: PPUSH
85017: CALL_OW 587
// end ;
85021: LD_VAR 0 3
85025: RET
// export function CenterOnNow ( unit ) ; begin
85026: LD_INT 0
85028: PPUSH
// result := IsInUnit ( unit ) ;
85029: LD_ADDR_VAR 0 2
85033: PUSH
85034: LD_VAR 0 1
85038: PPUSH
85039: CALL_OW 310
85043: ST_TO_ADDR
// if not result then
85044: LD_VAR 0 2
85048: NOT
85049: IFFALSE 85061
// result := unit ;
85051: LD_ADDR_VAR 0 2
85055: PUSH
85056: LD_VAR 0 1
85060: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85061: LD_VAR 0 1
85065: PPUSH
85066: CALL_OW 87
// end ;
85070: LD_VAR 0 2
85074: RET
// export function ComMoveHex ( unit , hex ) ; begin
85075: LD_INT 0
85077: PPUSH
// if not hex then
85078: LD_VAR 0 2
85082: NOT
85083: IFFALSE 85087
// exit ;
85085: GO 85140
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85087: LD_VAR 0 2
85091: PUSH
85092: LD_INT 1
85094: ARRAY
85095: PPUSH
85096: LD_VAR 0 2
85100: PUSH
85101: LD_INT 2
85103: ARRAY
85104: PPUSH
85105: CALL_OW 428
85109: IFFALSE 85113
// exit ;
85111: GO 85140
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85113: LD_VAR 0 1
85117: PPUSH
85118: LD_VAR 0 2
85122: PUSH
85123: LD_INT 1
85125: ARRAY
85126: PPUSH
85127: LD_VAR 0 2
85131: PUSH
85132: LD_INT 2
85134: ARRAY
85135: PPUSH
85136: CALL_OW 111
// end ;
85140: LD_VAR 0 3
85144: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85145: LD_INT 0
85147: PPUSH
85148: PPUSH
85149: PPUSH
// if not unit or not enemy then
85150: LD_VAR 0 1
85154: NOT
85155: IFTRUE 85164
85157: PUSH
85158: LD_VAR 0 2
85162: NOT
85163: OR
85164: IFFALSE 85168
// exit ;
85166: GO 85294
// x := GetX ( enemy ) ;
85168: LD_ADDR_VAR 0 4
85172: PUSH
85173: LD_VAR 0 2
85177: PPUSH
85178: CALL_OW 250
85182: ST_TO_ADDR
// y := GetY ( enemy ) ;
85183: LD_ADDR_VAR 0 5
85187: PUSH
85188: LD_VAR 0 2
85192: PPUSH
85193: CALL_OW 251
85197: ST_TO_ADDR
// if ValidHex ( x , y ) then
85198: LD_VAR 0 4
85202: PPUSH
85203: LD_VAR 0 5
85207: PPUSH
85208: CALL_OW 488
85212: IFFALSE 85294
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85214: LD_VAR 0 2
85218: PPUSH
85219: CALL_OW 247
85223: PUSH
85224: LD_INT 3
85226: PUSH
85227: LD_INT 2
85229: PUSH
85230: EMPTY
85231: LIST
85232: LIST
85233: IN
85234: IFTRUE 85257
85236: PUSH
85237: LD_VAR 0 1
85241: PPUSH
85242: CALL_OW 255
85246: PPUSH
85247: LD_VAR 0 2
85251: PPUSH
85252: CALL_OW 292
85256: OR
85257: IFFALSE 85275
// ComAttackUnit ( unit , enemy ) else
85259: LD_VAR 0 1
85263: PPUSH
85264: LD_VAR 0 2
85268: PPUSH
85269: CALL_OW 115
85273: GO 85294
// ComAgressiveMove ( unit , x , y ) ;
85275: LD_VAR 0 1
85279: PPUSH
85280: LD_VAR 0 4
85284: PPUSH
85285: LD_VAR 0 5
85289: PPUSH
85290: CALL_OW 114
// end ;
85294: LD_VAR 0 3
85298: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85299: LD_INT 0
85301: PPUSH
85302: PPUSH
85303: PPUSH
// list := AreaToList ( area , 0 ) ;
85304: LD_ADDR_VAR 0 5
85308: PUSH
85309: LD_VAR 0 1
85313: PPUSH
85314: LD_INT 0
85316: PPUSH
85317: CALL_OW 517
85321: ST_TO_ADDR
// if not list then
85322: LD_VAR 0 5
85326: NOT
85327: IFFALSE 85331
// exit ;
85329: GO 85461
// if all then
85331: LD_VAR 0 2
85335: IFFALSE 85423
// begin for i := 1 to list [ 1 ] do
85337: LD_ADDR_VAR 0 4
85341: PUSH
85342: DOUBLE
85343: LD_INT 1
85345: DEC
85346: ST_TO_ADDR
85347: LD_VAR 0 5
85351: PUSH
85352: LD_INT 1
85354: ARRAY
85355: PUSH
85356: FOR_TO
85357: IFFALSE 85419
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85359: LD_ADDR_VAR 0 3
85363: PUSH
85364: LD_VAR 0 3
85368: PPUSH
85369: LD_VAR 0 3
85373: PUSH
85374: LD_INT 1
85376: PLUS
85377: PPUSH
85378: LD_VAR 0 5
85382: PUSH
85383: LD_INT 1
85385: ARRAY
85386: PUSH
85387: LD_VAR 0 4
85391: ARRAY
85392: PUSH
85393: LD_VAR 0 5
85397: PUSH
85398: LD_INT 2
85400: ARRAY
85401: PUSH
85402: LD_VAR 0 4
85406: ARRAY
85407: PUSH
85408: EMPTY
85409: LIST
85410: LIST
85411: PPUSH
85412: CALL_OW 1
85416: ST_TO_ADDR
85417: GO 85356
85419: POP
85420: POP
// exit ;
85421: GO 85461
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85423: LD_ADDR_VAR 0 3
85427: PUSH
85428: LD_VAR 0 5
85432: PUSH
85433: LD_INT 1
85435: ARRAY
85436: PUSH
85437: LD_INT 1
85439: ARRAY
85440: PUSH
85441: LD_VAR 0 5
85445: PUSH
85446: LD_INT 2
85448: ARRAY
85449: PUSH
85450: LD_INT 1
85452: ARRAY
85453: PUSH
85454: EMPTY
85455: LIST
85456: LIST
85457: PUSH
85458: EMPTY
85459: LIST
85460: ST_TO_ADDR
// end ;
85461: LD_VAR 0 3
85465: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85466: LD_INT 0
85468: PPUSH
85469: PPUSH
// list := AreaToList ( area , 0 ) ;
85470: LD_ADDR_VAR 0 4
85474: PUSH
85475: LD_VAR 0 1
85479: PPUSH
85480: LD_INT 0
85482: PPUSH
85483: CALL_OW 517
85487: ST_TO_ADDR
// if not list then
85488: LD_VAR 0 4
85492: NOT
85493: IFFALSE 85497
// exit ;
85495: GO 85538
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85497: LD_ADDR_VAR 0 3
85501: PUSH
85502: LD_VAR 0 4
85506: PUSH
85507: LD_INT 1
85509: ARRAY
85510: PUSH
85511: LD_INT 1
85513: ARRAY
85514: PUSH
85515: LD_VAR 0 4
85519: PUSH
85520: LD_INT 2
85522: ARRAY
85523: PUSH
85524: LD_INT 1
85526: ARRAY
85527: PUSH
85528: LD_VAR 0 2
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: LIST
85537: ST_TO_ADDR
// end ;
85538: LD_VAR 0 3
85542: RET
// export function First ( array ) ; begin
85543: LD_INT 0
85545: PPUSH
// if not array then
85546: LD_VAR 0 1
85550: NOT
85551: IFFALSE 85555
// exit ;
85553: GO 85569
// result := array [ 1 ] ;
85555: LD_ADDR_VAR 0 2
85559: PUSH
85560: LD_VAR 0 1
85564: PUSH
85565: LD_INT 1
85567: ARRAY
85568: ST_TO_ADDR
// end ;
85569: LD_VAR 0 2
85573: RET
// export function Last ( array ) ; begin
85574: LD_INT 0
85576: PPUSH
// if not array then
85577: LD_VAR 0 1
85581: NOT
85582: IFFALSE 85586
// exit ;
85584: GO 85602
// result := array [ array ] ;
85586: LD_ADDR_VAR 0 2
85590: PUSH
85591: LD_VAR 0 1
85595: PUSH
85596: LD_VAR 0 1
85600: ARRAY
85601: ST_TO_ADDR
// end ;
85602: LD_VAR 0 2
85606: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85607: LD_INT 0
85609: PPUSH
85610: PPUSH
// result := [ ] ;
85611: LD_ADDR_VAR 0 5
85615: PUSH
85616: EMPTY
85617: ST_TO_ADDR
// if not array then
85618: LD_VAR 0 1
85622: NOT
85623: IFFALSE 85627
// exit ;
85625: GO 85739
// for i := 1 to array do
85627: LD_ADDR_VAR 0 6
85631: PUSH
85632: DOUBLE
85633: LD_INT 1
85635: DEC
85636: ST_TO_ADDR
85637: LD_VAR 0 1
85641: PUSH
85642: FOR_TO
85643: IFFALSE 85737
// if array [ i ] [ index ] = value then
85645: LD_VAR 0 1
85649: PUSH
85650: LD_VAR 0 6
85654: ARRAY
85655: PUSH
85656: LD_VAR 0 2
85660: ARRAY
85661: PUSH
85662: LD_VAR 0 3
85666: EQUAL
85667: IFFALSE 85735
// begin if indexColumn then
85669: LD_VAR 0 4
85673: IFFALSE 85709
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85675: LD_ADDR_VAR 0 5
85679: PUSH
85680: LD_VAR 0 5
85684: PPUSH
85685: LD_VAR 0 1
85689: PUSH
85690: LD_VAR 0 6
85694: ARRAY
85695: PUSH
85696: LD_VAR 0 4
85700: ARRAY
85701: PPUSH
85702: CALL 80747 0 2
85706: ST_TO_ADDR
85707: GO 85735
// result := Join ( result , array [ i ] ) ;
85709: LD_ADDR_VAR 0 5
85713: PUSH
85714: LD_VAR 0 5
85718: PPUSH
85719: LD_VAR 0 1
85723: PUSH
85724: LD_VAR 0 6
85728: ARRAY
85729: PPUSH
85730: CALL 80747 0 2
85734: ST_TO_ADDR
// end ;
85735: GO 85642
85737: POP
85738: POP
// end ;
85739: LD_VAR 0 5
85743: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85744: LD_INT 0
85746: PPUSH
// if not vehicles or not parkingPoint then
85747: LD_VAR 0 1
85751: NOT
85752: IFTRUE 85761
85754: PUSH
85755: LD_VAR 0 2
85759: NOT
85760: OR
85761: IFFALSE 85765
// exit ;
85763: GO 85863
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85765: LD_ADDR_VAR 0 1
85769: PUSH
85770: LD_VAR 0 1
85774: PPUSH
85775: LD_INT 50
85777: PUSH
85778: EMPTY
85779: LIST
85780: PUSH
85781: LD_INT 3
85783: PUSH
85784: LD_INT 92
85786: PUSH
85787: LD_VAR 0 2
85791: PUSH
85792: LD_INT 1
85794: ARRAY
85795: PUSH
85796: LD_VAR 0 2
85800: PUSH
85801: LD_INT 2
85803: ARRAY
85804: PUSH
85805: LD_INT 8
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: PUSH
85814: EMPTY
85815: LIST
85816: LIST
85817: PUSH
85818: EMPTY
85819: LIST
85820: LIST
85821: PPUSH
85822: CALL_OW 72
85826: ST_TO_ADDR
// if not vehicles then
85827: LD_VAR 0 1
85831: NOT
85832: IFFALSE 85836
// exit ;
85834: GO 85863
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85836: LD_VAR 0 1
85840: PPUSH
85841: LD_VAR 0 2
85845: PUSH
85846: LD_INT 1
85848: ARRAY
85849: PPUSH
85850: LD_VAR 0 2
85854: PUSH
85855: LD_INT 2
85857: ARRAY
85858: PPUSH
85859: CALL_OW 111
// end ;
85863: LD_VAR 0 3
85867: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85868: LD_INT 0
85870: PPUSH
85871: PPUSH
85872: PPUSH
// if not side or not area then
85873: LD_VAR 0 1
85877: NOT
85878: IFTRUE 85887
85880: PUSH
85881: LD_VAR 0 2
85885: NOT
85886: OR
85887: IFFALSE 85891
// exit ;
85889: GO 86010
// tmp := AreaToList ( area , 0 ) ;
85891: LD_ADDR_VAR 0 5
85895: PUSH
85896: LD_VAR 0 2
85900: PPUSH
85901: LD_INT 0
85903: PPUSH
85904: CALL_OW 517
85908: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85909: LD_ADDR_VAR 0 4
85913: PUSH
85914: DOUBLE
85915: LD_INT 1
85917: DEC
85918: ST_TO_ADDR
85919: LD_VAR 0 5
85923: PUSH
85924: LD_INT 1
85926: ARRAY
85927: PUSH
85928: FOR_TO
85929: IFFALSE 86008
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85931: LD_VAR 0 5
85935: PUSH
85936: LD_INT 1
85938: ARRAY
85939: PUSH
85940: LD_VAR 0 4
85944: ARRAY
85945: PPUSH
85946: LD_VAR 0 5
85950: PUSH
85951: LD_INT 2
85953: ARRAY
85954: PUSH
85955: LD_VAR 0 4
85959: ARRAY
85960: PPUSH
85961: CALL_OW 351
85965: IFFALSE 86006
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85967: LD_VAR 0 5
85971: PUSH
85972: LD_INT 1
85974: ARRAY
85975: PUSH
85976: LD_VAR 0 4
85980: ARRAY
85981: PPUSH
85982: LD_VAR 0 5
85986: PUSH
85987: LD_INT 2
85989: ARRAY
85990: PUSH
85991: LD_VAR 0 4
85995: ARRAY
85996: PPUSH
85997: LD_VAR 0 1
86001: PPUSH
86002: CALL_OW 244
// end ;
86006: GO 85928
86008: POP
86009: POP
// end ;
86010: LD_VAR 0 3
86014: RET
// export function UniqueArray ( array ) ; var i ; begin
86015: LD_INT 0
86017: PPUSH
86018: PPUSH
// result := [ ] ;
86019: LD_ADDR_VAR 0 2
86023: PUSH
86024: EMPTY
86025: ST_TO_ADDR
// if not array then
86026: LD_VAR 0 1
86030: NOT
86031: IFFALSE 86035
// exit ;
86033: GO 86096
// for i := 1 to array do
86035: LD_ADDR_VAR 0 3
86039: PUSH
86040: DOUBLE
86041: LD_INT 1
86043: DEC
86044: ST_TO_ADDR
86045: LD_VAR 0 1
86049: PUSH
86050: FOR_TO
86051: IFFALSE 86094
// if not array [ i ] in result then
86053: LD_VAR 0 1
86057: PUSH
86058: LD_VAR 0 3
86062: ARRAY
86063: PUSH
86064: LD_VAR 0 2
86068: IN
86069: NOT
86070: IFFALSE 86092
// result := Join ( result , i ) ;
86072: LD_ADDR_VAR 0 2
86076: PUSH
86077: LD_VAR 0 2
86081: PPUSH
86082: LD_VAR 0 3
86086: PPUSH
86087: CALL 80747 0 2
86091: ST_TO_ADDR
86092: GO 86050
86094: POP
86095: POP
// end ; end_of_file
86096: LD_VAR 0 2
86100: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86101: LD_VAR 0 1
86105: PUSH
86106: LD_INT 200
86108: DOUBLE
86109: GREATEREQUAL
86110: IFFALSE 86118
86112: LD_INT 299
86114: DOUBLE
86115: LESSEQUAL
86116: IFTRUE 86120
86118: GO 86152
86120: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86121: LD_VAR 0 1
86125: PPUSH
86126: LD_VAR 0 2
86130: PPUSH
86131: LD_VAR 0 3
86135: PPUSH
86136: LD_VAR 0 4
86140: PPUSH
86141: LD_VAR 0 5
86145: PPUSH
86146: CALL 37057 0 5
86150: GO 86229
86152: LD_INT 300
86154: DOUBLE
86155: GREATEREQUAL
86156: IFFALSE 86164
86158: LD_INT 399
86160: DOUBLE
86161: LESSEQUAL
86162: IFTRUE 86166
86164: GO 86228
86166: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86167: LD_VAR 0 1
86171: PPUSH
86172: LD_VAR 0 2
86176: PPUSH
86177: LD_VAR 0 3
86181: PPUSH
86182: LD_VAR 0 4
86186: PPUSH
86187: LD_VAR 0 5
86191: PPUSH
86192: LD_VAR 0 6
86196: PPUSH
86197: LD_VAR 0 7
86201: PPUSH
86202: LD_VAR 0 8
86206: PPUSH
86207: LD_VAR 0 9
86211: PPUSH
86212: LD_VAR 0 10
86216: PPUSH
86217: LD_VAR 0 11
86221: PPUSH
86222: CALL 32941 0 11
86226: GO 86229
86228: POP
// end ;
86229: PPOPN 11
86231: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86232: LD_VAR 0 1
86236: PPUSH
86237: LD_VAR 0 2
86241: PPUSH
86242: LD_VAR 0 3
86246: PPUSH
86247: LD_VAR 0 4
86251: PPUSH
86252: LD_VAR 0 5
86256: PPUSH
86257: CALL 36438 0 5
// end ; end_of_file
86261: PPOPN 5
86263: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86264: LD_VAR 0 1
86268: PPUSH
86269: LD_VAR 0 2
86273: PPUSH
86274: LD_VAR 0 3
86278: PPUSH
86279: LD_VAR 0 4
86283: PPUSH
86284: LD_VAR 0 5
86288: PPUSH
86289: LD_VAR 0 6
86293: PPUSH
86294: CALL 20481 0 6
// end ;
86298: PPOPN 6
86300: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86301: LD_INT 0
86303: PPUSH
// begin if not units then
86304: LD_VAR 0 1
86308: NOT
86309: IFFALSE 86313
// exit ;
86311: GO 86347
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86313: LD_VAR 0 1
86317: PPUSH
86318: LD_VAR 0 2
86322: PPUSH
86323: LD_VAR 0 3
86327: PPUSH
86328: LD_VAR 0 4
86332: PPUSH
86333: LD_VAR 0 5
86337: PPUSH
86338: LD_VAR 0 6
86342: PPUSH
86343: CALL 42564 0 6
// end ;
86347: PPOPN 7
86349: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86350: CALL 20368 0 0
// end ;
86354: PPOPN 1
86356: END
