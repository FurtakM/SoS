// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 502 0 0
// PrepareArabian ;
  12: CALL 885 0 0
// PrepareAmerican ;
  16: CALL 2807 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 3709 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , farmerOnMap , workshopBuilded , retreatAllowed ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// deadCounter := 0 ;
  57: LD_ADDR_EXP 8
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// gameStarted := false ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// farmerBaseReady := false ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// americanBaseSpoted := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseCaptured := false ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanHasEscaped := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// farmerOnMap := true ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// end ; end_of_file
 129: LD_VAR 0 1
 133: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 134: LD_INT 0
 136: PPUSH
 137: PPUSH
// if exist_mode then
 138: LD_VAR 0 2
 142: IFFALSE 167
// unit := CreateCharacter ( prefix & ident ) else
 144: LD_ADDR_VAR 0 5
 148: PUSH
 149: LD_VAR 0 3
 153: PUSH
 154: LD_VAR 0 1
 158: STR
 159: PPUSH
 160: CALL_OW 34
 164: ST_TO_ADDR
 165: GO 182
// unit := NewCharacter ( ident ) ;
 167: LD_ADDR_VAR 0 5
 171: PUSH
 172: LD_VAR 0 1
 176: PPUSH
 177: CALL_OW 25
 181: ST_TO_ADDR
// result := unit ;
 182: LD_ADDR_VAR 0 4
 186: PUSH
 187: LD_VAR 0 5
 191: ST_TO_ADDR
// end ;
 192: LD_VAR 0 4
 196: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 197: LD_INT 0
 199: PPUSH
// uc_side := side ;
 200: LD_ADDR_OWVAR 20
 204: PUSH
 205: LD_VAR 0 1
 209: ST_TO_ADDR
// uc_nation := nation ;
 210: LD_ADDR_OWVAR 21
 214: PUSH
 215: LD_VAR 0 2
 219: ST_TO_ADDR
// vc_chassis := chassis ;
 220: LD_ADDR_OWVAR 37
 224: PUSH
 225: LD_VAR 0 3
 229: ST_TO_ADDR
// vc_engine := engine ;
 230: LD_ADDR_OWVAR 39
 234: PUSH
 235: LD_VAR 0 4
 239: ST_TO_ADDR
// vc_control := control ;
 240: LD_ADDR_OWVAR 38
 244: PUSH
 245: LD_VAR 0 5
 249: ST_TO_ADDR
// vc_weapon := weapon ;
 250: LD_ADDR_OWVAR 40
 254: PUSH
 255: LD_VAR 0 6
 259: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 260: LD_ADDR_OWVAR 41
 264: PUSH
 265: LD_VAR 0 7
 269: ST_TO_ADDR
// result := CreateVehicle ;
 270: LD_ADDR_VAR 0 8
 274: PUSH
 275: CALL_OW 45
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 8
 284: RET
// export function SayX ( units , ident ) ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// result := false ;
 289: LD_ADDR_VAR 0 3
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// if not units then
 297: LD_VAR 0 1
 301: NOT
 302: IFFALSE 306
// exit ;
 304: GO 360
// for i in units do
 306: LD_ADDR_VAR 0 4
 310: PUSH
 311: LD_VAR 0 1
 315: PUSH
 316: FOR_IN
 317: IFFALSE 358
// if IsOk ( i ) then
 319: LD_VAR 0 4
 323: PPUSH
 324: CALL_OW 302
 328: IFFALSE 356
// begin Say ( i , ident ) ;
 330: LD_VAR 0 4
 334: PPUSH
 335: LD_VAR 0 2
 339: PPUSH
 340: CALL_OW 88
// result := i ;
 344: LD_ADDR_VAR 0 3
 348: PUSH
 349: LD_VAR 0 4
 353: ST_TO_ADDR
// break ;
 354: GO 358
// end ;
 356: GO 316
 358: POP
 359: POP
// end ;
 360: LD_VAR 0 3
 364: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 365: LD_INT 0
 367: PPUSH
 368: PPUSH
// InitUc ;
 369: CALL_OW 18
// InitHc ;
 373: CALL_OW 19
// uc_side := 0 ;
 377: LD_ADDR_OWVAR 20
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// uc_nation := 0 ;
 385: LD_ADDR_OWVAR 21
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// for i = 1 to amount do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: DOUBLE
 399: LD_INT 1
 401: DEC
 402: ST_TO_ADDR
 403: LD_VAR 0 2
 407: PUSH
 408: FOR_TO
 409: IFFALSE 491
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 411: LD_ADDR_OWVAR 29
 415: PUSH
 416: LD_INT 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 12
 426: PUSH
 427: LD_INT 9
 429: PPUSH
 430: LD_INT 12
 432: PPUSH
 433: CALL_OW 12
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 442: LD_ADDR_OWVAR 35
 446: PUSH
 447: LD_INT 1
 449: NEG
 450: PPUSH
 451: LD_INT 1
 453: PPUSH
 454: CALL_OW 12
 458: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 12
 464: PPUSH
 465: LD_INT 1
 467: PPUSH
 468: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 472: CALL_OW 44
 476: PPUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL_OW 49
// end ;
 489: GO 408
 491: POP
 492: POP
// InitHc ;
 493: CALL_OW 19
// end ;
 497: LD_VAR 0 3
 501: RET
// export function PrepareNature ; var i ; begin
 502: LD_INT 0
 504: PPUSH
 505: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 506: LD_INT 2
 508: PPUSH
 509: LD_INT 4
 511: PUSH
 512: LD_INT 4
 514: PUSH
 515: LD_INT 3
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_OWVAR 67
 527: ARRAY
 528: PPUSH
 529: CALL 365 0 2
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 582
// begin hc_class := 21 ;
 549: LD_ADDR_OWVAR 28
 553: PUSH
 554: LD_INT 21
 556: ST_TO_ADDR
// hc_gallery :=  ;
 557: LD_ADDR_OWVAR 33
 561: PUSH
 562: LD_STRING 
 564: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 565: CALL_OW 44
 569: PPUSH
 570: LD_INT 2
 572: PPUSH
 573: LD_INT 0
 575: PPUSH
 576: CALL_OW 49
// end ;
 580: GO 546
 582: POP
 583: POP
// for i := 1 to 2 do
 584: LD_ADDR_VAR 0 2
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_INT 2
 596: PUSH
 597: FOR_TO
 598: IFFALSE 633
// begin hc_class := 18 ;
 600: LD_ADDR_OWVAR 28
 604: PUSH
 605: LD_INT 18
 607: ST_TO_ADDR
// hc_gallery :=  ;
 608: LD_ADDR_OWVAR 33
 612: PUSH
 613: LD_STRING 
 615: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 616: CALL_OW 44
 620: PPUSH
 621: LD_INT 2
 623: PPUSH
 624: LD_INT 0
 626: PPUSH
 627: CALL_OW 49
// end ;
 631: GO 597
 633: POP
 634: POP
// for i := 1 to 2 do
 635: LD_ADDR_VAR 0 2
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_INT 2
 647: PUSH
 648: FOR_TO
 649: IFFALSE 684
// begin hc_class := 13 ;
 651: LD_ADDR_OWVAR 28
 655: PUSH
 656: LD_INT 13
 658: ST_TO_ADDR
// hc_gallery :=  ;
 659: LD_ADDR_OWVAR 33
 663: PUSH
 664: LD_STRING 
 666: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 648
 684: POP
 685: POP
// end ;
 686: LD_VAR 0 1
 690: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 691: LD_INT 0
 693: PPUSH
 694: PPUSH
 695: PPUSH
// if not observer or not unit then
 696: LD_VAR 0 1
 700: NOT
 701: PUSH
 702: LD_VAR 0 2
 706: NOT
 707: OR
 708: IFFALSE 712
// exit ;
 710: GO 760
// if not See ( GetSide ( observer ) , unit ) then
 712: LD_VAR 0 1
 716: PPUSH
 717: CALL_OW 255
 721: PPUSH
 722: LD_VAR 0 2
 726: PPUSH
 727: CALL_OW 292
 731: NOT
 732: IFFALSE 736
// exit ;
 734: GO 760
// result := GetDistUnits ( observer , unit ) < 12 ;
 736: LD_ADDR_VAR 0 3
 740: PUSH
 741: LD_VAR 0 1
 745: PPUSH
 746: LD_VAR 0 2
 750: PPUSH
 751: CALL_OW 296
 755: PUSH
 756: LD_INT 12
 758: LESS
 759: ST_TO_ADDR
// end ;
 760: LD_VAR 0 3
 764: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 765: LD_INT 0
 767: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 768: LD_VAR 0 2
 772: PUSH
 773: LD_INT 1
 775: ARRAY
 776: PPUSH
 777: LD_VAR 0 2
 781: PUSH
 782: LD_INT 2
 784: ARRAY
 785: PPUSH
 786: CALL_OW 488
 790: PUSH
 791: LD_VAR 0 2
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: LD_VAR 0 2
 804: PUSH
 805: LD_INT 2
 807: ARRAY
 808: PPUSH
 809: CALL_OW 428
 813: PUSH
 814: LD_INT 0
 816: EQUAL
 817: AND
 818: IFFALSE 852
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 820: LD_VAR 0 1
 824: PPUSH
 825: LD_VAR 0 2
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: PPUSH
 834: LD_VAR 0 2
 838: PUSH
 839: LD_INT 2
 841: ARRAY
 842: PPUSH
 843: LD_VAR 0 3
 847: PPUSH
 848: CALL_OW 48
// end ;
 852: LD_VAR 0 4
 856: RET
// export function Video ( mode ) ; begin
 857: LD_INT 0
 859: PPUSH
// ingame_video = mode ;
 860: LD_ADDR_OWVAR 52
 864: PUSH
 865: LD_VAR 0 1
 869: ST_TO_ADDR
// interface_hidden = mode ;
 870: LD_ADDR_OWVAR 54
 874: PUSH
 875: LD_VAR 0 1
 879: ST_TO_ADDR
// end ; end_of_file
 880: LD_VAR 0 2
 884: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
 890: PPUSH
// uc_side := 5 ;
 891: LD_ADDR_OWVAR 20
 895: PUSH
 896: LD_INT 5
 898: ST_TO_ADDR
// uc_nation := 2 ;
 899: LD_ADDR_OWVAR 21
 903: PUSH
 904: LD_INT 2
 906: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
 907: LD_INT 5
 909: PPUSH
 910: CALL_OW 274
 914: PPUSH
 915: LD_INT 1
 917: PPUSH
 918: LD_INT 45
 920: PPUSH
 921: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
 925: LD_ADDR_EXP 20
 929: PUSH
 930: LD_STRING Farmer
 932: PPUSH
 933: LD_INT 0
 935: PPUSH
 936: LD_STRING 
 938: PPUSH
 939: CALL 134 0 3
 943: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 944: LD_ADDR_EXP 21
 948: PUSH
 949: LD_STRING Omar
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_STRING 
 957: PPUSH
 958: CALL 134 0 3
 962: ST_TO_ADDR
// omarSquad := [ ] ;
 963: LD_ADDR_EXP 23
 967: PUSH
 968: EMPTY
 969: ST_TO_ADDR
// heikeSquad := [ ] ;
 970: LD_ADDR_EXP 24
 974: PUSH
 975: EMPTY
 976: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
 977: LD_ADDR_EXP 25
 981: PUSH
 982: EMPTY
 983: ST_TO_ADDR
// for i := 1 to 5 do
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: DOUBLE
 990: LD_INT 1
 992: DEC
 993: ST_TO_ADDR
 994: LD_INT 5
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1156
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 2
1011: PUSH
1012: LD_INT 1
1014: PUSH
1015: LD_INT 1
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: LD_VAR 0 2
1029: ARRAY
1030: PPUSH
1031: LD_INT 3
1033: PPUSH
1034: CALL_OW 380
// un := CreateHuman ;
1038: LD_ADDR_VAR 0 3
1042: PUSH
1043: CALL_OW 44
1047: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1048: LD_ADDR_EXP 23
1052: PUSH
1053: LD_EXP 23
1057: PUSH
1058: LD_VAR 0 3
1062: UNION
1063: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1064: LD_VAR 0 3
1068: PPUSH
1069: LD_INT 87
1071: PUSH
1072: LD_INT 30
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PUSH
1079: LD_INT 91
1081: PUSH
1082: LD_INT 32
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 82
1091: PUSH
1092: LD_INT 15
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 79
1101: PUSH
1102: LD_INT 14
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 82
1111: PUSH
1112: LD_INT 13
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_VAR 0 2
1130: ARRAY
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL 765 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1139: LD_VAR 0 3
1143: PPUSH
1144: LD_INT 93
1146: PPUSH
1147: LD_INT 21
1149: PPUSH
1150: CALL_OW 118
// end ;
1154: GO 997
1156: POP
1157: POP
// uc_side := 2 ;
1158: LD_ADDR_OWVAR 20
1162: PUSH
1163: LD_INT 2
1165: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_STRING Heike
1173: PPUSH
1174: LD_EXP 1
1178: NOT
1179: PPUSH
1180: LD_EXP 2
1184: PPUSH
1185: CALL 134 0 3
1189: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1190: LD_ADDR_EXP 16
1194: PUSH
1195: LD_STRING Aviradze
1197: PPUSH
1198: LD_EXP 1
1202: NOT
1203: PPUSH
1204: LD_EXP 2
1208: PPUSH
1209: CALL 134 0 3
1213: ST_TO_ADDR
// tmp := [ ] ;
1214: LD_ADDR_VAR 0 4
1218: PUSH
1219: EMPTY
1220: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1221: LD_ADDR_EXP 13
1225: PUSH
1226: LD_STRING Givi
1228: PPUSH
1229: LD_EXP 1
1233: NOT
1234: PPUSH
1235: LD_EXP 2
1239: PPUSH
1240: CALL 134 0 3
1244: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1245: LD_ADDR_EXP 14
1249: PUSH
1250: LD_STRING Mike
1252: PPUSH
1253: LD_EXP 1
1257: NOT
1258: PPUSH
1259: LD_EXP 2
1263: PPUSH
1264: CALL 134 0 3
1268: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1269: LD_ADDR_EXP 15
1273: PUSH
1274: LD_STRING Kamil
1276: PPUSH
1277: LD_EXP 1
1281: NOT
1282: PPUSH
1283: LD_EXP 2
1287: PPUSH
1288: CALL 134 0 3
1292: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1293: LD_ADDR_EXP 17
1297: PUSH
1298: LD_STRING Kaia
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_EXP 2
1311: PPUSH
1312: CALL 134 0 3
1316: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1317: LD_ADDR_EXP 18
1321: PUSH
1322: LD_STRING Sophia
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_EXP 2
1335: PPUSH
1336: CALL 134 0 3
1340: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1341: LD_ADDR_EXP 19
1345: PUSH
1346: LD_STRING Markov
1348: PPUSH
1349: LD_EXP 1
1353: NOT
1354: PPUSH
1355: LD_EXP 2
1359: PPUSH
1360: CALL 134 0 3
1364: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1365: LD_ADDR_EXP 25
1369: PUSH
1370: LD_STRING 02_others
1372: PPUSH
1373: CALL_OW 31
1377: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1378: LD_ADDR_VAR 0 4
1382: PUSH
1383: LD_EXP 14
1387: PUSH
1388: LD_EXP 15
1392: PUSH
1393: LD_EXP 17
1397: PUSH
1398: LD_EXP 18
1402: PUSH
1403: LD_EXP 19
1407: PUSH
1408: LD_EXP 13
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 25
1425: ADD
1426: PUSH
1427: LD_INT 0
1429: DIFF
1430: ST_TO_ADDR
// heikeSquad := tmp ;
1431: LD_ADDR_EXP 24
1435: PUSH
1436: LD_VAR 0 4
1440: ST_TO_ADDR
// uc_nation := 0 ;
1441: LD_ADDR_OWVAR 21
1445: PUSH
1446: LD_INT 0
1448: ST_TO_ADDR
// hc_class := class_apeman ;
1449: LD_ADDR_OWVAR 28
1453: PUSH
1454: LD_INT 12
1456: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1457: LD_ADDR_OWVAR 31
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 0
1467: PUSH
1468: LD_INT 0
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: ST_TO_ADDR
// hc_gallery :=  ;
1480: LD_ADDR_OWVAR 33
1484: PUSH
1485: LD_STRING 
1487: ST_TO_ADDR
// hc_name :=  ;
1488: LD_ADDR_OWVAR 26
1492: PUSH
1493: LD_STRING 
1495: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_VAR 0 4
1505: PUSH
1506: CALL_OW 44
1510: UNION
1511: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1512: LD_EXP 12
1516: PPUSH
1517: LD_INT 92
1519: PPUSH
1520: LD_INT 17
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1530: LD_EXP 20
1534: PPUSH
1535: LD_INT 95
1537: PPUSH
1538: LD_INT 19
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1548: LD_EXP 21
1552: PPUSH
1553: LD_INT 89
1555: PPUSH
1556: LD_INT 25
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1566: LD_EXP 16
1570: PPUSH
1571: LD_INT 92
1573: PPUSH
1574: LD_INT 27
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1584: LD_EXP 21
1588: PPUSH
1589: LD_EXP 16
1593: PPUSH
1594: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1598: LD_EXP 16
1602: PPUSH
1603: LD_EXP 21
1607: PPUSH
1608: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1612: LD_EXP 12
1616: PUSH
1617: LD_EXP 20
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: LD_EXP 21
1630: PPUSH
1631: CALL_OW 119
// if tmp then
1635: LD_VAR 0 4
1639: IFFALSE 1693
// for i in tmp do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_VAR 0 4
1650: PUSH
1651: FOR_IN
1652: IFFALSE 1691
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1654: LD_VAR 0 2
1658: PPUSH
1659: LD_INT 94
1661: PPUSH
1662: LD_INT 14
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 0
1670: PPUSH
1671: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1675: LD_VAR 0 2
1679: PPUSH
1680: LD_EXP 12
1684: PPUSH
1685: CALL_OW 119
// end ;
1689: GO 1651
1691: POP
1692: POP
// farmerSquad := [ ] ;
1693: LD_ADDR_EXP 22
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// uc_side := 5 ;
1700: LD_ADDR_OWVAR 20
1704: PUSH
1705: LD_INT 5
1707: ST_TO_ADDR
// uc_nation := 2 ;
1708: LD_ADDR_OWVAR 21
1712: PUSH
1713: LD_INT 2
1715: ST_TO_ADDR
// for i := 1 to 4 do
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: DOUBLE
1722: LD_INT 1
1724: DEC
1725: ST_TO_ADDR
1726: LD_INT 4
1728: PUSH
1729: FOR_TO
1730: IFFALSE 1808
// begin PrepareHuman ( false , 1 , 2 ) ;
1732: LD_INT 0
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: CALL_OW 380
// un := CreateHuman ;
1745: LD_ADDR_VAR 0 3
1749: PUSH
1750: CALL_OW 44
1754: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1755: LD_VAR 0 3
1759: PPUSH
1760: LD_INT 102
1762: PPUSH
1763: LD_INT 27
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1776: LD_ADDR_EXP 22
1780: PUSH
1781: LD_EXP 22
1785: PUSH
1786: LD_VAR 0 3
1790: UNION
1791: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1792: LD_VAR 0 3
1796: PPUSH
1797: LD_EXP 21
1801: PPUSH
1802: CALL_OW 119
// end ;
1806: GO 1729
1808: POP
1809: POP
// PrepareHuman ( false , 2 , 2 ) ;
1810: LD_INT 0
1812: PPUSH
1813: LD_INT 2
1815: PPUSH
1816: LD_INT 2
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 3
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1833: LD_VAR 0 3
1837: PPUSH
1838: LD_INT 108
1840: PPUSH
1841: LD_INT 62
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1854: LD_ADDR_EXP 22
1858: PUSH
1859: LD_EXP 22
1863: PUSH
1864: LD_VAR 0 3
1868: UNION
1869: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1870: LD_VAR 0 3
1874: PPUSH
1875: LD_EXP 21
1879: PPUSH
1880: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
1884: LD_INT 109
1886: PPUSH
1887: LD_INT 63
1889: PPUSH
1890: LD_INT 2
1892: PPUSH
1893: LD_INT 15
1895: NEG
1896: PPUSH
1897: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
1901: LD_INT 109
1903: PPUSH
1904: LD_INT 63
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: CALL_OW 331
// end ;
1914: LD_VAR 0 1
1918: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
1919: LD_EXP 21
1923: PUSH
1924: LD_EXP 23
1928: ADD
1929: PPUSH
1930: LD_INT 95
1932: PUSH
1933: LD_INT 3
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 72
1944: IFFALSE 2000
1946: GO 1948
1948: DISABLE
1949: LD_INT 0
1951: PPUSH
// begin enable ;
1952: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
1953: LD_ADDR_VAR 0 1
1957: PUSH
1958: LD_EXP 21
1962: PUSH
1963: LD_EXP 23
1967: ADD
1968: PPUSH
1969: LD_INT 95
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PPUSH
1979: CALL_OW 72
1983: PUSH
1984: FOR_IN
1985: IFFALSE 1998
// RemoveUnit ( i ) ;
1987: LD_VAR 0 1
1991: PPUSH
1992: CALL_OW 64
1996: GO 1984
1998: POP
1999: POP
// end ;
2000: PPOPN 1
2002: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2003: LD_EXP 3
2007: PUSH
2008: LD_EXP 20
2012: PPUSH
2013: LD_INT 4
2015: PPUSH
2016: CALL_OW 308
2020: AND
2021: IFFALSE 2804
2023: GO 2025
2025: DISABLE
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2032: LD_EXP 20
2036: PPUSH
2037: LD_INT 110
2039: PPUSH
2040: LD_INT 60
2042: PPUSH
2043: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2047: LD_EXP 20
2051: PPUSH
2052: LD_INT 110
2054: PPUSH
2055: LD_INT 61
2057: PPUSH
2058: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_EXP 22
2071: PPUSH
2072: LD_INT 25
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PPUSH
2082: CALL_OW 72
2086: ST_TO_ADDR
// if tmp then
2087: LD_VAR 0 2
2091: IFFALSE 2185
// begin for i := 1 to 2 do
2093: LD_ADDR_VAR 0 1
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 2
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2183
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2109: LD_VAR 0 2
2113: PUSH
2114: LD_VAR 0 1
2118: ARRAY
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2127: LD_VAR 0 2
2131: PUSH
2132: LD_VAR 0 1
2136: ARRAY
2137: PPUSH
2138: LD_INT 2
2140: PPUSH
2141: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2145: LD_VAR 0 2
2149: PUSH
2150: LD_VAR 0 1
2154: ARRAY
2155: PPUSH
2156: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2160: LD_VAR 0 2
2164: PUSH
2165: LD_VAR 0 1
2169: ARRAY
2170: PPUSH
2171: LD_INT 107
2173: PPUSH
2174: LD_INT 66
2176: PPUSH
2177: CALL_OW 171
// end ;
2181: GO 2106
2183: POP
2184: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: LD_EXP 22
2194: PPUSH
2195: LD_INT 25
2197: PUSH
2198: LD_INT 2
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 72
2209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2210: LD_INT 35
2212: PPUSH
2213: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_EXP 22
2226: PPUSH
2227: LD_INT 25
2229: PUSH
2230: LD_INT 2
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PPUSH
2237: CALL_OW 72
2241: ST_TO_ADDR
// until tmp ;
2242: LD_VAR 0 2
2246: IFFALSE 2210
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2248: LD_VAR 0 2
2252: PPUSH
2253: LD_INT 31
2255: PPUSH
2256: LD_INT 102
2258: PPUSH
2259: LD_INT 69
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2269: LD_INT 35
2271: PPUSH
2272: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2276: LD_EXP 22
2280: PPUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 60
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 25
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PPUSH
2308: CALL_OW 72
2312: IFFALSE 2269
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_EXP 22
2323: PPUSH
2324: LD_INT 25
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PPUSH
2334: CALL_OW 72
2338: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_INT 4
2346: PPUSH
2347: LD_INT 116
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: LD_INT 5
2355: PPUSH
2356: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2360: LD_VAR 0 2
2364: PPUSH
2365: LD_INT 31
2367: PPUSH
2368: LD_INT 108
2370: PPUSH
2371: LD_INT 50
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2381: LD_INT 35
2383: PPUSH
2384: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2388: LD_INT 22
2390: PUSH
2391: LD_INT 5
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 30
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: PPUSH
2426: CALL_OW 69
2430: IFFALSE 2381
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 5
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 30
2449: PUSH
2450: LD_INT 4
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 3
2459: PUSH
2460: LD_INT 57
2462: PUSH
2463: EMPTY
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: PPUSH
2475: CALL_OW 69
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: LD_EXP 22
2493: PPUSH
2494: LD_INT 25
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PPUSH
2504: CALL_OW 72
2508: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: LD_VAR 0 3
2518: PPUSH
2519: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2523: LD_INT 35
2525: PPUSH
2526: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2530: LD_INT 22
2532: PUSH
2533: LD_INT 5
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 31
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 3
2552: PUSH
2553: LD_INT 57
2555: PUSH
2556: EMPTY
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: PPUSH
2568: CALL_OW 69
2572: PUSH
2573: LD_INT 2
2575: GREATEREQUAL
2576: IFFALSE 2523
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_EXP 22
2587: PPUSH
2588: LD_INT 25
2590: PUSH
2591: LD_INT 2
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 72
2602: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2603: LD_VAR 0 2
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PPUSH
2612: LD_INT 5
2614: PPUSH
2615: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2619: LD_VAR 0 2
2623: PUSH
2624: LD_INT 2
2626: ARRAY
2627: PUSH
2628: LD_VAR 0 2
2632: PUSH
2633: LD_INT 3
2635: ARRAY
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2650: LD_VAR 0 2
2654: PUSH
2655: LD_INT 2
2657: ARRAY
2658: PUSH
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 3
2666: ARRAY
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2679: LD_VAR 0 2
2683: PUSH
2684: LD_INT 2
2686: ARRAY
2687: PUSH
2688: LD_VAR 0 2
2692: PUSH
2693: LD_INT 3
2695: ARRAY
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PPUSH
2701: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2705: LD_ADDR_VAR 0 4
2709: PUSH
2710: LD_INT 22
2712: PUSH
2713: LD_INT 5
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 30
2722: PUSH
2723: LD_INT 31
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: ST_TO_ADDR
// for i := 1 to 2 do
2739: LD_ADDR_VAR 0 1
2743: PUSH
2744: DOUBLE
2745: LD_INT 1
2747: DEC
2748: ST_TO_ADDR
2749: LD_INT 2
2751: PUSH
2752: FOR_TO
2753: IFFALSE 2787
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
2755: LD_VAR 0 2
2759: PUSH
2760: LD_VAR 0 1
2764: PUSH
2765: LD_INT 1
2767: PLUS
2768: ARRAY
2769: PPUSH
2770: LD_VAR 0 4
2774: PUSH
2775: LD_VAR 0 1
2779: ARRAY
2780: PPUSH
2781: CALL_OW 180
2785: GO 2752
2787: POP
2788: POP
// wait ( 1 1$00 ) ;
2789: LD_INT 2100
2791: PPUSH
2792: CALL_OW 67
// farmerBaseReady := true ;
2796: LD_ADDR_EXP 4
2800: PUSH
2801: LD_INT 1
2803: ST_TO_ADDR
// end ; end_of_file
2804: PPOPN 4
2806: END
// export usForces , usCommander , americanBuildList ; export function PrepareAmerican ; var i , un ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
// usForces := [ ] ;
2812: LD_ADDR_EXP 26
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
2819: LD_ADDR_EXP 28
2823: PUSH
2824: LD_INT 6
2826: PUSH
2827: LD_INT 32
2829: PUSH
2830: LD_INT 27
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 4
2844: PUSH
2845: LD_INT 43
2847: PUSH
2848: LD_INT 24
2850: PUSH
2851: LD_INT 5
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 27
2862: PUSH
2863: LD_INT 29
2865: PUSH
2866: LD_INT 21
2868: PUSH
2869: LD_INT 0
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
2883: LD_INT 11
2885: PPUSH
2886: CALL_OW 274
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 150
2896: PUSH
2897: LD_INT 120
2899: PUSH
2900: LD_INT 100
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: LIST
2907: PUSH
2908: LD_OWVAR 67
2912: ARRAY
2913: PPUSH
2914: CALL_OW 277
// uc_side := 1 ;
2918: LD_ADDR_OWVAR 20
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// uc_nation := 1 ;
2926: LD_ADDR_OWVAR 21
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// hc_gallery :=  ;
2934: LD_ADDR_OWVAR 33
2938: PUSH
2939: LD_STRING 
2941: ST_TO_ADDR
// hc_name :=  ;
2942: LD_ADDR_OWVAR 26
2946: PUSH
2947: LD_STRING 
2949: ST_TO_ADDR
// hc_importance := 0 ;
2950: LD_ADDR_OWVAR 32
2954: PUSH
2955: LD_INT 0
2957: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
2958: LD_INT 1
2960: PPUSH
2961: LD_INT 1
2963: PPUSH
2964: LD_INT 3
2966: PPUSH
2967: CALL_OW 380
// usCommander := CreateHuman ;
2971: LD_ADDR_EXP 27
2975: PUSH
2976: CALL_OW 44
2980: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
2981: LD_EXP 27
2985: PPUSH
2986: LD_INT 11
2988: PPUSH
2989: CALL_OW 52
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2993: LD_ADDR_VAR 0 2
2997: PUSH
2998: DOUBLE
2999: LD_INT 1
3001: DEC
3002: ST_TO_ADDR
3003: LD_INT 2
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 4
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: PUSH
3017: LD_OWVAR 67
3021: ARRAY
3022: PUSH
3023: FOR_TO
3024: IFFALSE 3159
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3026: LD_INT 0
3028: PPUSH
3029: LD_INT 1
3031: PPUSH
3032: LD_INT 1
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_OWVAR 67
3050: ARRAY
3051: PPUSH
3052: CALL_OW 380
// un := CreateHuman ;
3056: LD_ADDR_VAR 0 3
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// usForces := usForces union un ;
3066: LD_ADDR_EXP 26
3070: PUSH
3071: LD_EXP 26
3075: PUSH
3076: LD_VAR 0 3
3080: UNION
3081: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3082: LD_VAR 0 3
3086: PPUSH
3087: LD_INT 39
3089: PPUSH
3090: LD_INT 24
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 50
// if i < 3 then
3103: LD_VAR 0 2
3107: PUSH
3108: LD_INT 3
3110: LESS
3111: IFFALSE 3157
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 22
3120: PUSH
3121: LD_INT 1
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 30
3130: PUSH
3131: LD_INT 31
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: PUSH
3147: LD_VAR 0 2
3151: ARRAY
3152: PPUSH
3153: CALL_OW 120
// end ;
3157: GO 3023
3159: POP
3160: POP
// for i := 1 to 2 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 1
3169: DEC
3170: ST_TO_ADDR
3171: LD_INT 2
3173: PUSH
3174: FOR_TO
3175: IFFALSE 3239
// begin PrepareHuman ( false , 2 , 2 ) ;
3177: LD_INT 0
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 380
// un := CreateHuman ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: CALL_OW 44
3199: ST_TO_ADDR
// usForces := usForces union un ;
3200: LD_ADDR_EXP 26
3204: PUSH
3205: LD_EXP 26
3209: PUSH
3210: LD_VAR 0 3
3214: UNION
3215: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3216: LD_VAR 0 3
3220: PPUSH
3221: LD_INT 39
3223: PPUSH
3224: LD_INT 24
3226: PPUSH
3227: LD_INT 4
3229: PPUSH
3230: LD_INT 0
3232: PPUSH
3233: CALL_OW 50
// end ;
3237: GO 3174
3239: POP
3240: POP
// PrepareHuman ( false , 4 , 1 ) ;
3241: LD_INT 0
3243: PPUSH
3244: LD_INT 4
3246: PPUSH
3247: LD_INT 1
3249: PPUSH
3250: CALL_OW 380
// un := CreateHuman ;
3254: LD_ADDR_VAR 0 3
3258: PUSH
3259: CALL_OW 44
3263: ST_TO_ADDR
// usForces := usForces union un ;
3264: LD_ADDR_EXP 26
3268: PUSH
3269: LD_EXP 26
3273: PUSH
3274: LD_VAR 0 3
3278: UNION
3279: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3280: LD_VAR 0 3
3284: PPUSH
3285: LD_INT 39
3287: PPUSH
3288: LD_INT 24
3290: PPUSH
3291: LD_INT 4
3293: PPUSH
3294: LD_INT 0
3296: PPUSH
3297: CALL_OW 50
// end ;
3301: LD_VAR 0 1
3305: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
3306: LD_EXP 26
3310: PUSH
3311: LD_EXP 6
3315: NOT
3316: AND
3317: IFFALSE 3640
3319: GO 3321
3321: DISABLE
3322: LD_INT 0
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// begin enable ;
3329: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
3330: LD_ADDR_VAR 0 3
3334: PUSH
3335: LD_EXP 26
3339: PPUSH
3340: LD_INT 25
3342: PUSH
3343: LD_INT 2
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PPUSH
3350: CALL_OW 72
3354: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_EXP 26
3364: PPUSH
3365: LD_INT 25
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 72
3379: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_EXP 26
3389: PPUSH
3390: LD_INT 25
3392: PUSH
3393: LD_INT 4
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 72
3404: ST_TO_ADDR
// if eng then
3405: LD_VAR 0 3
3409: IFFALSE 3640
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3411: LD_ADDR_VAR 0 2
3415: PUSH
3416: LD_INT 22
3418: PUSH
3419: LD_INT 1
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 21
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: LD_INT 24
3441: PUSH
3442: LD_INT 1000
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: ST_TO_ADDR
// if b then
3463: LD_VAR 0 2
3467: IFFALSE 3498
// begin ComExitBuilding ( eng ) ;
3469: LD_VAR 0 3
3473: PPUSH
3474: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_VAR 0 2
3487: PUSH
3488: LD_INT 1
3490: ARRAY
3491: PPUSH
3492: CALL_OW 190
// end else
3496: GO 3640
// begin for i in eng do
3498: LD_ADDR_VAR 0 1
3502: PUSH
3503: LD_VAR 0 3
3507: PUSH
3508: FOR_IN
3509: IFFALSE 3638
// if not HasTask ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 314
3520: NOT
3521: IFFALSE 3636
// begin if americanBuildList then
3523: LD_EXP 28
3527: IFFALSE 3612
// begin if IsInUnit ( i ) then
3529: LD_VAR 0 1
3533: PPUSH
3534: CALL_OW 310
3538: IFFALSE 3549
// ComExitBuilding ( i ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
3549: LD_VAR 0 1
3553: PPUSH
3554: LD_EXP 28
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: PPUSH
3567: LD_EXP 28
3571: PUSH
3572: LD_INT 1
3574: ARRAY
3575: PUSH
3576: LD_INT 2
3578: ARRAY
3579: PPUSH
3580: LD_EXP 28
3584: PUSH
3585: LD_INT 1
3587: ARRAY
3588: PUSH
3589: LD_INT 3
3591: ARRAY
3592: PPUSH
3593: LD_EXP 28
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: LD_INT 4
3604: ARRAY
3605: PPUSH
3606: CALL_OW 205
// end else
3610: GO 3636
// if not IsInUnit ( i ) then
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 310
3621: NOT
3622: IFFALSE 3636
// ComEnterUnit ( i , usDepot ) ;
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 11
3631: PPUSH
3632: CALL_OW 120
// end ;
3636: GO 3508
3638: POP
3639: POP
// end ; end ; end ;
3640: PPOPN 5
3642: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
3643: LD_INT 0
3645: PPUSH
3646: PPUSH
3647: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_INT 35
3655: PUSH
3656: LD_INT 45
3658: PUSH
3659: LD_INT 48
3661: PUSH
3662: LD_EXP 36
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// for i in tech do
3673: LD_ADDR_VAR 0 4
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: FOR_IN
3684: IFFALSE 3702
// AddComResearch ( lab , i ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_VAR 0 4
3695: PPUSH
3696: CALL_OW 184
3700: GO 3683
3702: POP
3703: POP
// end ; end_of_file
3704: LD_VAR 0 2
3708: RET
// export function Action ; var hasAll , i , tmp ; begin
3709: LD_INT 0
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: LD_INT 22
3722: PUSH
3723: LD_INT 2
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 21
3732: PUSH
3733: LD_INT 1
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 23
3742: PUSH
3743: LD_INT 2
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: PPUSH
3755: CALL_OW 69
3759: PUSH
3760: LD_INT 7
3762: GREATEREQUAL
3763: ST_TO_ADDR
// InGameOn ;
3764: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3768: LD_EXP 12
3772: PPUSH
3773: CALL_OW 87
// wait ( 0 0$2 ) ;
3777: LD_INT 70
3779: PPUSH
3780: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
3784: LD_EXP 20
3788: PPUSH
3789: LD_STRING DF-1-start
3791: PPUSH
3792: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
3796: LD_EXP 12
3800: PPUSH
3801: LD_EXP 20
3805: PPUSH
3806: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
3810: LD_EXP 12
3814: PPUSH
3815: LD_STRING DH-1-start
3817: PPUSH
3818: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
3822: LD_EXP 21
3826: PPUSH
3827: LD_INT 92
3829: PPUSH
3830: LD_INT 21
3832: PPUSH
3833: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
3837: LD_EXP 16
3841: PPUSH
3842: LD_INT 94
3844: PPUSH
3845: LD_INT 23
3847: PPUSH
3848: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
3852: LD_EXP 23
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_INT 90
3863: PPUSH
3864: LD_INT 23
3866: PPUSH
3867: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
3871: LD_EXP 23
3875: PUSH
3876: LD_INT 2
3878: ARRAY
3879: PPUSH
3880: LD_INT 93
3882: PPUSH
3883: LD_INT 25
3885: PPUSH
3886: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
3890: LD_EXP 23
3894: PPUSH
3895: LD_EXP 21
3899: PPUSH
3900: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
3904: LD_EXP 21
3908: PUSH
3909: LD_EXP 16
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: LD_EXP 12
3922: PPUSH
3923: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
3927: LD_EXP 12
3931: PPUSH
3932: LD_EXP 21
3936: PPUSH
3937: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
3948: LD_EXP 21
3952: PPUSH
3953: LD_INT 92
3955: PPUSH
3956: LD_INT 21
3958: PPUSH
3959: CALL_OW 307
3963: IFFALSE 3941
// Say ( Omar , DO-1-start ) ;
3965: LD_EXP 21
3969: PPUSH
3970: LD_STRING DO-1-start
3972: PPUSH
3973: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
3977: LD_EXP 12
3981: PPUSH
3982: LD_STRING DH-2-start
3984: PPUSH
3985: CALL_OW 88
// if hasAll then
3989: LD_VAR 0 2
3993: IFFALSE 4121
// begin Say ( Omar , DO-2-start ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_STRING DO-2-start
4002: PPUSH
4003: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
4007: LD_EXP 21
4011: PPUSH
4012: LD_STRING DO-3-start
4014: PPUSH
4015: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4019: LD_EXP 12
4023: PPUSH
4024: LD_STRING DH-3-start
4026: PPUSH
4027: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
4031: LD_EXP 20
4035: PPUSH
4036: LD_STRING DF-2-start
4038: PPUSH
4039: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
4043: LD_EXP 21
4047: PPUSH
4048: LD_EXP 20
4052: PPUSH
4053: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
4057: LD_EXP 21
4061: PPUSH
4062: LD_STRING DO-4-start
4064: PPUSH
4065: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
4069: LD_EXP 20
4073: PPUSH
4074: LD_STRING DF-3-start
4076: PPUSH
4077: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
4081: LD_EXP 21
4085: PPUSH
4086: LD_STRING DO-5-start
4088: PPUSH
4089: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
4093: LD_EXP 20
4097: PPUSH
4098: LD_STRING DF-4-start
4100: PPUSH
4101: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
4105: LD_EXP 21
4109: PPUSH
4110: LD_EXP 12
4114: PPUSH
4115: CALL_OW 119
// end else
4119: GO 4221
// begin Say ( Omar , DO-2-start-a ) ;
4121: LD_EXP 21
4125: PPUSH
4126: LD_STRING DO-2-start-a
4128: PPUSH
4129: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
4133: LD_EXP 21
4137: PPUSH
4138: LD_STRING DO-3-start-a
4140: PPUSH
4141: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
4145: LD_EXP 12
4149: PPUSH
4150: LD_STRING DH-3-start-a
4152: PPUSH
4153: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
4157: LD_EXP 20
4161: PPUSH
4162: LD_STRING DF-2-start-a
4164: PPUSH
4165: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
4169: LD_EXP 21
4173: PPUSH
4174: LD_EXP 20
4178: PPUSH
4179: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
4183: LD_EXP 21
4187: PPUSH
4188: LD_STRING DO-4-start-a
4190: PPUSH
4191: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
4195: LD_EXP 20
4199: PPUSH
4200: LD_STRING DF-3-start-a
4202: PPUSH
4203: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
4207: LD_EXP 21
4211: PPUSH
4212: LD_EXP 12
4216: PPUSH
4217: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
4221: LD_INT 10
4223: PPUSH
4224: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_STRING DO-1-mission
4235: PPUSH
4236: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
4240: LD_EXP 21
4244: PPUSH
4245: LD_STRING DO-2-mission
4247: PPUSH
4248: CALL_OW 88
// if not hasAll then
4252: LD_VAR 0 2
4256: NOT
4257: IFFALSE 4271
// Say ( Omar , DO-3-mission ) ;
4259: LD_EXP 21
4263: PPUSH
4264: LD_STRING DO-3-mission
4266: PPUSH
4267: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
4271: LD_EXP 21
4275: PPUSH
4276: LD_STRING DO-4-mission
4278: PPUSH
4279: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
4283: LD_EXP 12
4287: PPUSH
4288: LD_STRING DH-1-mission
4290: PPUSH
4291: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
4295: LD_EXP 20
4299: PPUSH
4300: LD_STRING DF-1-mission
4302: PPUSH
4303: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
4307: LD_EXP 21
4311: PPUSH
4312: LD_STRING DO-5-mission
4314: PPUSH
4315: CALL_OW 88
// if not hasAll then
4319: LD_VAR 0 2
4323: NOT
4324: IFFALSE 4439
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
4326: LD_ADDR_VAR 0 4
4330: PUSH
4331: LD_INT 22
4333: PUSH
4334: LD_INT 2
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 21
4343: PUSH
4344: LD_INT 1
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 23
4353: PUSH
4354: LD_INT 2
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: PPUSH
4366: CALL_OW 69
4370: ST_TO_ADDR
// for i := 7 downto tmp do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 7
4379: INC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_DOWNTO
4387: IFFALSE 4437
// begin if omarSquad < 3 then
4389: LD_EXP 23
4393: PUSH
4394: LD_INT 3
4396: LESS
4397: IFFALSE 4401
// break ;
4399: GO 4437
// SetSide ( omarSquad [ 3 ] , 2 ) ;
4401: LD_EXP 23
4405: PUSH
4406: LD_INT 3
4408: ARRAY
4409: PPUSH
4410: LD_INT 2
4412: PPUSH
4413: CALL_OW 235
// omarSquad := Delete ( omarSquad , 3 ) ;
4417: LD_ADDR_EXP 23
4421: PUSH
4422: LD_EXP 23
4426: PPUSH
4427: LD_INT 3
4429: PPUSH
4430: CALL_OW 3
4434: ST_TO_ADDR
// end ;
4435: GO 4386
4437: POP
4438: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
4439: LD_EXP 21
4443: PUSH
4444: LD_EXP 23
4448: ADD
4449: PPUSH
4450: LD_INT 103
4452: PPUSH
4453: LD_INT 9
4455: PPUSH
4456: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
4460: LD_VAR 0 2
4464: PUSH
4465: LD_EXP 17
4469: PPUSH
4470: CALL_OW 302
4474: AND
4475: IFFALSE 4536
// begin wait ( 0 0$3 ) ;
4477: LD_INT 105
4479: PPUSH
4480: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
4484: LD_EXP 17
4488: PPUSH
4489: LD_EXP 20
4493: PPUSH
4494: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
4498: LD_EXP 17
4502: PPUSH
4503: LD_STRING DK-1-side
4505: PPUSH
4506: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
4510: LD_EXP 20
4514: PPUSH
4515: LD_EXP 17
4519: PPUSH
4520: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
4524: LD_EXP 20
4528: PPUSH
4529: LD_STRING DF-1-side
4531: PPUSH
4532: CALL_OW 88
// end ; InGameOff ;
4536: CALL_OW 9
// ChangeMissionObjectives ( BuildBase ) ;
4540: LD_STRING BuildBase
4542: PPUSH
4543: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
4547: LD_INT 22
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PPUSH
4562: CALL_OW 139
// SaveForQuickRestart ;
4566: CALL_OW 22
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
4570: LD_EXP 20
4574: PUSH
4575: LD_EXP 22
4579: ADD
4580: PPUSH
4581: LD_INT 108
4583: PPUSH
4584: LD_INT 62
4586: PPUSH
4587: CALL_OW 111
// gameStarted := true ;
4591: LD_ADDR_EXP 3
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// end ;
4599: LD_VAR 0 1
4603: RET
// every 0 0$3 trigger gameStarted do
4604: LD_EXP 3
4608: IFFALSE 4922
4610: GO 4612
4612: DISABLE
// begin Video ( true ) ;
4613: LD_INT 1
4615: PPUSH
4616: CALL 857 0 1
// CenterOnUnits ( Heike ) ;
4620: LD_EXP 12
4624: PPUSH
4625: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
4629: LD_EXP 12
4633: PPUSH
4634: LD_EXP 16
4638: PPUSH
4639: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
4643: LD_INT 22
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PPUSH
4653: CALL_OW 69
4657: PUSH
4658: LD_EXP 12
4662: DIFF
4663: PPUSH
4664: LD_EXP 12
4668: PPUSH
4669: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
4673: LD_EXP 12
4677: PPUSH
4678: LD_STRING DH-1-explore
4680: PPUSH
4681: CALL_OW 88
// if Givi then
4685: LD_EXP 13
4689: IFFALSE 4705
// Say ( Givi , DG-1-explore ) else
4691: LD_EXP 13
4695: PPUSH
4696: LD_STRING DG-1-explore
4698: PPUSH
4699: CALL_OW 88
4703: GO 4742
// if heikeSecondSquad then
4705: LD_EXP 25
4709: IFFALSE 4742
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
4711: LD_EXP 25
4715: PPUSH
4716: LD_INT 26
4718: PUSH
4719: LD_INT 1
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 72
4730: PUSH
4731: LD_INT 1
4733: ARRAY
4734: PPUSH
4735: LD_STRING DArm-1-explore
4737: PPUSH
4738: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
4742: LD_EXP 16
4746: PPUSH
4747: LD_STRING DA-1-explore
4749: PPUSH
4750: CALL_OW 88
// if Sophia then
4754: LD_EXP 18
4758: IFFALSE 4836
// begin Say ( Sophia , DS-2-explore ) ;
4760: LD_EXP 18
4764: PPUSH
4765: LD_STRING DS-2-explore
4767: PPUSH
4768: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING DA-2-explore
4779: PPUSH
4780: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
4784: LD_EXP 18
4788: PPUSH
4789: LD_EXP 16
4793: PPUSH
4794: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
4798: LD_EXP 16
4802: PPUSH
4803: LD_EXP 18
4807: PPUSH
4808: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
4812: LD_EXP 18
4816: PPUSH
4817: LD_STRING DS-3-explore
4819: PPUSH
4820: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
4824: LD_EXP 16
4828: PPUSH
4829: LD_STRING DA-3-explore
4831: PPUSH
4832: CALL_OW 88
// end ; if Mike then
4836: LD_EXP 14
4840: IFFALSE 4896
// begin Say ( Mike , DM-1-explore ) ;
4842: LD_EXP 14
4846: PPUSH
4847: LD_STRING DM-1-explore
4849: PPUSH
4850: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
4854: LD_EXP 12
4858: PPUSH
4859: LD_STRING DH-2-explore
4861: PPUSH
4862: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
4866: LD_EXP 14
4870: PPUSH
4871: LD_STRING DM-2-explore
4873: PPUSH
4874: CALL_OW 88
// if Kaia then
4878: LD_EXP 17
4882: IFFALSE 4896
// Say ( Kaia , DK-1-explore ) ;
4884: LD_EXP 17
4888: PPUSH
4889: LD_STRING DK-1-explore
4891: PPUSH
4892: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
4896: LD_INT 22
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PPUSH
4906: CALL_OW 69
4910: PPUSH
4911: CALL_OW 139
// Video ( false ) ;
4915: LD_INT 0
4917: PPUSH
4918: CALL 857 0 1
// end ;
4922: END
// every 0 0$1 trigger not americanBaseSpoted and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
4923: LD_EXP 5
4927: NOT
4928: PUSH
4929: LD_INT 5
4931: PPUSH
4932: LD_INT 22
4934: PUSH
4935: LD_INT 2
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 70
4946: AND
4947: PUSH
4948: LD_EXP 6
4952: NOT
4953: AND
4954: IFFALSE 5039
4956: GO 4958
4958: DISABLE
// begin if Mike then
4959: LD_EXP 14
4963: IFFALSE 4979
// Say ( Mike , DM-1-scout ) else
4965: LD_EXP 14
4969: PPUSH
4970: LD_STRING DM-1-scout
4972: PPUSH
4973: CALL_OW 88
4977: GO 5010
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
4979: LD_EXP 25
4983: PPUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 1
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PPUSH
4994: CALL_OW 72
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: LD_STRING DArm-1-explore
5005: PPUSH
5006: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
5010: LD_INT 54
5012: PPUSH
5013: LD_INT 35
5015: PPUSH
5016: LD_INT 2
5018: PPUSH
5019: LD_INT 1
5021: PPUSH
5022: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
5026: LD_INT 54
5028: PPUSH
5029: LD_INT 35
5031: PPUSH
5032: LD_INT 2
5034: PPUSH
5035: CALL_OW 331
// end ;
5039: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var randomMen , randomWomen , speakerOk ;
5040: LD_INT 6
5042: PPUSH
5043: LD_INT 22
5045: PUSH
5046: LD_INT 2
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 70
5057: IFFALSE 5282
5059: GO 5061
5061: DISABLE
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
5066: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
5067: LD_ADDR_VAR 0 1
5071: PUSH
5072: LD_EXP 25
5076: PPUSH
5077: LD_INT 26
5079: PUSH
5080: LD_INT 1
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 72
5091: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
5092: LD_ADDR_VAR 0 2
5096: PUSH
5097: LD_EXP 25
5101: PPUSH
5102: LD_INT 26
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: ST_TO_ADDR
// DialogueOn ;
5117: CALL_OW 6
// dwait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 68
// speakerOk := false ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: LD_INT 0
5135: ST_TO_ADDR
// if Mike then
5136: LD_EXP 14
5140: IFFALSE 5162
// speakerOk := Say ( Mike , DM-1-spot ) else
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_EXP 14
5151: PPUSH
5152: LD_STRING DM-1-spot
5154: PPUSH
5155: CALL_OW 88
5159: ST_TO_ADDR
5160: GO 5190
// if randomMen then
5162: LD_VAR 0 1
5166: IFFALSE 5190
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_VAR 0 1
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: LD_STRING DArm-1-spot-a
5184: PPUSH
5185: CALL_OW 88
5189: ST_TO_ADDR
// if speakerOk then
5190: LD_VAR 0 3
5194: IFFALSE 5238
// begin if Givi then
5196: LD_EXP 13
5200: IFFALSE 5216
// Say ( Givi , DG-1-spot ) else
5202: LD_EXP 13
5206: PPUSH
5207: LD_STRING DG-1-spot
5209: PPUSH
5210: CALL_OW 88
5214: GO 5238
// if randomWomen then
5216: LD_VAR 0 2
5220: IFFALSE 5238
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
5222: LD_VAR 0 2
5226: PUSH
5227: LD_INT 1
5229: ARRAY
5230: PPUSH
5231: LD_STRING DArf-1-spot-a
5233: PPUSH
5234: CALL_OW 88
// end ; if Mike then
5238: LD_EXP 14
5242: IFFALSE 5258
// Say ( Heike , DH-1-spot ) else
5244: LD_EXP 12
5248: PPUSH
5249: LD_STRING DH-1-spot
5251: PPUSH
5252: CALL_OW 88
5256: GO 5270
// Say ( Heike , DH-1-spot-a ) ;
5258: LD_EXP 12
5262: PPUSH
5263: LD_STRING DH-1-spot-a
5265: PPUSH
5266: CALL_OW 88
// DialogueOff ;
5270: CALL_OW 7
// americanBaseSpoted := true ;
5274: LD_ADDR_EXP 5
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// end ;
5282: PPOPN 3
5284: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
5285: LD_EXP 5
5289: NOT
5290: PUSH
5291: LD_INT 22
5293: PUSH
5294: LD_INT 2
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 101
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: AND
5320: PUSH
5321: LD_EXP 6
5325: NOT
5326: AND
5327: IFFALSE 5413
5329: GO 5331
5331: DISABLE
5332: LD_INT 0
5334: PPUSH
// begin americanBaseSpoted := true ;
5335: LD_ADDR_EXP 5
5339: PUSH
5340: LD_INT 1
5342: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: LD_EXP 25
5352: PPUSH
5353: LD_INT 26
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: ST_TO_ADDR
// if not randomMen then
5368: LD_VAR 0 1
5372: NOT
5373: IFFALSE 5377
// exit ;
5375: GO 5413
// DialogueOn ;
5377: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PPUSH
5390: LD_STRING DArm-1-spot-a
5392: PPUSH
5393: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
5397: LD_EXP 12
5401: PPUSH
5402: LD_STRING DH-1-spot-a
5404: PPUSH
5405: CALL_OW 88
// DialogueOff ;
5409: CALL_OW 7
// end ;
5413: PPOPN 1
5415: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 do var i , p ;
5416: LD_INT 11
5418: PPUSH
5419: CALL_OW 255
5423: PUSH
5424: LD_INT 2
5426: EQUAL
5427: PUSH
5428: LD_INT 22
5430: PUSH
5431: LD_INT 1
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 3
5440: PUSH
5441: LD_INT 50
5443: PUSH
5444: EMPTY
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 30
5453: PUSH
5454: LD_INT 31
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: PPUSH
5466: CALL_OW 69
5470: OR
5471: PUSH
5472: LD_INT 7
5474: PPUSH
5475: LD_INT 22
5477: PUSH
5478: LD_INT 2
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 70
5489: PUSH
5490: LD_INT 1
5492: GREATER
5493: OR
5494: IFFALSE 5940
5496: GO 5498
5498: DISABLE
5499: LD_INT 0
5501: PPUSH
5502: PPUSH
// begin americanBaseCaptured := true ;
5503: LD_ADDR_EXP 6
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5511: LD_INT 70
5513: PPUSH
5514: CALL_OW 67
// if IsOk ( usCommander ) then
5518: LD_EXP 27
5522: PPUSH
5523: CALL_OW 302
5527: IFFALSE 5557
// begin usForces := usForces union usCommander ;
5529: LD_ADDR_EXP 26
5533: PUSH
5534: LD_EXP 26
5538: PUSH
5539: LD_EXP 27
5543: UNION
5544: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
5545: LD_EXP 27
5549: PPUSH
5550: LD_STRING DUsm-1-assault
5552: PPUSH
5553: CALL_OW 88
// end ; for i in usForces do
5557: LD_ADDR_VAR 0 1
5561: PUSH
5562: LD_EXP 26
5566: PUSH
5567: FOR_IN
5568: IFFALSE 5607
// begin if IsInUnit ( i ) then
5570: LD_VAR 0 1
5574: PPUSH
5575: CALL_OW 310
5579: IFFALSE 5590
// ComExitBuilding ( i ) ;
5581: LD_VAR 0 1
5585: PPUSH
5586: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 34
5597: PPUSH
5598: LD_INT 67
5600: PPUSH
5601: CALL_OW 171
// end ;
5605: GO 5567
5607: POP
5608: POP
// Say ( Heike , DH-1-assault ) ;
5609: LD_EXP 12
5613: PPUSH
5614: LD_STRING DH-1-assault
5616: PPUSH
5617: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5621: LD_INT 35
5623: PPUSH
5624: CALL_OW 67
// until not usForces ;
5628: LD_EXP 26
5632: NOT
5633: IFFALSE 5621
// if not americanHasEscaped then
5635: LD_EXP 7
5639: NOT
5640: IFFALSE 5654
// Say ( Heike , DH-2-assault ) ;
5642: LD_EXP 12
5646: PPUSH
5647: LD_STRING DH-2-assault
5649: PPUSH
5650: CALL_OW 88
// wait ( 0 0$2 ) ;
5654: LD_INT 70
5656: PPUSH
5657: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5661: LD_INT 35
5663: PPUSH
5664: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
5668: LD_INT 22
5670: PUSH
5671: LD_INT 2
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PUSH
5678: LD_INT 21
5680: PUSH
5681: LD_INT 1
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 3
5690: PUSH
5691: LD_INT 50
5693: PUSH
5694: EMPTY
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 69
5710: NOT
5711: IFFALSE 5661
// Video ( true ) ;
5713: LD_INT 1
5715: PPUSH
5716: CALL 857 0 1
// if not GetSide ( usDepot ) = 2 then
5720: LD_INT 11
5722: PPUSH
5723: CALL_OW 255
5727: PUSH
5728: LD_INT 2
5730: EQUAL
5731: NOT
5732: IFFALSE 5744
// SetSide ( usDepot , 2 ) ;
5734: LD_INT 11
5736: PPUSH
5737: LD_INT 2
5739: PPUSH
5740: CALL_OW 235
// ComMoveXY ( Heike , 35 , 22 ) ;
5744: LD_EXP 12
5748: PPUSH
5749: LD_INT 35
5751: PPUSH
5752: LD_INT 22
5754: PPUSH
5755: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
5759: LD_EXP 12
5763: PPUSH
5764: LD_INT 38
5766: PPUSH
5767: LD_INT 25
5769: PPUSH
5770: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
5774: LD_EXP 24
5778: PUSH
5779: LD_EXP 25
5783: UNION
5784: PPUSH
5785: LD_INT 39
5787: PPUSH
5788: LD_INT 26
5790: PPUSH
5791: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
5795: LD_EXP 24
5799: PUSH
5800: LD_EXP 25
5804: UNION
5805: PPUSH
5806: LD_EXP 12
5810: PPUSH
5811: CALL_OW 179
// p := 0 ;
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5823: LD_INT 35
5825: PPUSH
5826: CALL_OW 67
// p := p + 1 ;
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: LD_VAR 0 2
5839: PUSH
5840: LD_INT 1
5842: PLUS
5843: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
5844: LD_EXP 12
5848: PPUSH
5849: CALL_OW 314
5853: NOT
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_INT 10
5862: GREATER
5863: OR
5864: IFFALSE 5823
// Say ( Heike , DH-1-capture ) ;
5866: LD_EXP 12
5870: PPUSH
5871: LD_STRING DH-1-capture
5873: PPUSH
5874: CALL_OW 88
// if Markov then
5878: LD_EXP 19
5882: IFFALSE 5896
// Say ( Markov , DMar-1-capture ) ;
5884: LD_EXP 19
5888: PPUSH
5889: LD_STRING DMar-1-capture
5891: PPUSH
5892: CALL_OW 88
// if Sophia then
5896: LD_EXP 18
5900: IFFALSE 5926
// begin Say ( Heike , DH-2-capture ) ;
5902: LD_EXP 12
5906: PPUSH
5907: LD_STRING DH-2-capture
5909: PPUSH
5910: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
5914: LD_EXP 18
5918: PPUSH
5919: LD_STRING DS-1-capture
5921: PPUSH
5922: CALL_OW 88
// end ; Video ( false ) ;
5926: LD_INT 0
5928: PPUSH
5929: CALL 857 0 1
// ChangeMissionObjectives ( ConstructBase ) ;
5933: LD_STRING ConstructBase
5935: PPUSH
5936: CALL_OW 337
// end ;
5940: PPOPN 2
5942: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
5943: LD_INT 22
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 30
5955: PUSH
5956: LD_INT 2
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 3
5965: PUSH
5966: LD_INT 57
5968: PUSH
5969: EMPTY
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PPUSH
5981: CALL_OW 69
5985: IFFALSE 6076
5987: GO 5989
5989: DISABLE
// begin workshopBuilded := true ;
5990: LD_ADDR_EXP 10
5994: PUSH
5995: LD_INT 1
5997: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructVeh ) ;
5998: LD_STRING ConstructVeh
6000: PPUSH
6001: CALL_OW 337
// if not IsOk ( Markov ) then
6005: LD_EXP 19
6009: PPUSH
6010: CALL_OW 302
6014: NOT
6015: IFFALSE 6019
// exit ;
6017: GO 6076
// Say ( Heike , DH-1-shop ) ;
6019: LD_EXP 12
6023: PPUSH
6024: LD_STRING DH-1-shop
6026: PPUSH
6027: CALL_OW 88
// if not ( GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched ) then
6031: LD_INT 2
6033: PPUSH
6034: LD_INT 47
6036: PPUSH
6037: CALL_OW 321
6041: PUSH
6042: LD_INT 2
6044: EQUAL
6045: PUSH
6046: LD_INT 2
6048: PPUSH
6049: LD_INT 45
6051: PPUSH
6052: CALL_OW 321
6056: PUSH
6057: LD_INT 2
6059: EQUAL
6060: AND
6061: NOT
6062: IFFALSE 6076
// Say ( Markov , DMar-1-shop-a ) ;
6064: LD_EXP 19
6068: PPUSH
6069: LD_STRING DMar-1-shop-a
6071: PPUSH
6072: CALL_OW 88
// end ;
6076: END
// every 0 0$1 trigger IsOk ( Markov ) and workshopBuilded and GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched do
6077: LD_EXP 19
6081: PPUSH
6082: CALL_OW 302
6086: PUSH
6087: LD_EXP 10
6091: AND
6092: PUSH
6093: LD_INT 2
6095: PPUSH
6096: LD_INT 47
6098: PPUSH
6099: CALL_OW 321
6103: PUSH
6104: LD_INT 2
6106: EQUAL
6107: AND
6108: PUSH
6109: LD_INT 2
6111: PPUSH
6112: LD_INT 45
6114: PPUSH
6115: CALL_OW 321
6119: PUSH
6120: LD_INT 2
6122: EQUAL
6123: AND
6124: IFFALSE 6245
6126: GO 6128
6128: DISABLE
// begin DialogueOn ;
6129: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
6133: LD_EXP 19
6137: PPUSH
6138: LD_STRING DMar-1-shop
6140: PPUSH
6141: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
6145: LD_EXP 12
6149: PPUSH
6150: LD_STRING DH-1-shop
6152: PPUSH
6153: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
6157: LD_EXP 19
6161: PPUSH
6162: LD_STRING DMar-2-shop
6164: PPUSH
6165: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
6169: LD_EXP 19
6173: PPUSH
6174: LD_STRING DMar-3-shop
6176: PPUSH
6177: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
6181: LD_EXP 12
6185: PPUSH
6186: LD_STRING DH-2-shop
6188: PPUSH
6189: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
6193: LD_EXP 19
6197: PPUSH
6198: LD_STRING DMar-4-shop
6200: PPUSH
6201: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
6205: LD_EXP 12
6209: PPUSH
6210: LD_STRING DH-3-shop
6212: PPUSH
6213: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
6217: LD_EXP 19
6221: PPUSH
6222: LD_STRING DMar-5-shop
6224: PPUSH
6225: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
6229: LD_EXP 12
6233: PPUSH
6234: LD_STRING DH-4-shop
6236: PPUSH
6237: CALL_OW 88
// DialogueOff ;
6241: CALL_OW 7
// end ;
6245: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
6246: LD_EXP 19
6250: PPUSH
6251: CALL_OW 302
6255: PUSH
6256: LD_INT 22
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: LD_INT 34
6271: PUSH
6272: LD_INT 22
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 35
6281: PUSH
6282: LD_INT 22
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 69
6302: AND
6303: IFFALSE 6410
6305: GO 6307
6307: DISABLE
// begin DialogueOn ;
6308: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
6312: LD_INT 22
6314: PUSH
6315: LD_INT 2
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 34
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 35
6337: PUSH
6338: LD_INT 22
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
6363: LD_INT 10
6365: PPUSH
6366: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
6370: LD_EXP 12
6374: PPUSH
6375: LD_STRING DH-1-bal
6377: PPUSH
6378: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
6382: LD_EXP 19
6386: PPUSH
6387: LD_STRING DMar-1-bal
6389: PPUSH
6390: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
6394: LD_EXP 12
6398: PPUSH
6399: LD_STRING DH-2-bal
6401: PPUSH
6402: CALL_OW 88
// DialogueOff ;
6406: CALL_OW 7
// end ;
6410: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
6411: LD_EXP 16
6415: PPUSH
6416: CALL_OW 302
6420: PUSH
6421: LD_INT 22
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 30
6433: PUSH
6434: LD_INT 6
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: AND
6450: IFFALSE 6511
6452: GO 6454
6454: DISABLE
// begin DialogueOn ;
6455: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
6459: LD_EXP 16
6463: PPUSH
6464: LD_STRING DA-1-lab
6466: PPUSH
6467: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
6471: LD_EXP 12
6475: PPUSH
6476: LD_STRING DH-1-lab
6478: PPUSH
6479: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
6483: LD_EXP 16
6487: PPUSH
6488: LD_STRING DA-2-lab
6490: PPUSH
6491: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
6495: LD_EXP 12
6499: PPUSH
6500: LD_STRING DH-2-lab
6502: PPUSH
6503: CALL_OW 88
// DialogueOff ;
6507: CALL_OW 7
// end ;
6511: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do
6512: LD_INT 22
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 25
6524: PUSH
6525: LD_INT 15
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PPUSH
6536: CALL_OW 69
6540: IFFALSE 6545
6542: GO 6544
6544: DISABLE
// begin end ;
6545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do
6546: LD_INT 22
6548: PUSH
6549: LD_INT 2
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 25
6558: PUSH
6559: LD_INT 16
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 69
6574: IFFALSE 6579
6576: GO 6578
6578: DISABLE
// begin end ;
6579: END
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
6580: LD_EXP 26
6584: PPUSH
6585: LD_INT 95
6587: PUSH
6588: LD_INT 8
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PPUSH
6595: CALL_OW 72
6599: IFFALSE 6692
6601: GO 6603
6603: DISABLE
6604: LD_INT 0
6606: PPUSH
// begin enable ;
6607: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
6608: LD_ADDR_VAR 0 1
6612: PUSH
6613: LD_EXP 26
6617: PPUSH
6618: LD_INT 95
6620: PUSH
6621: LD_INT 8
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PPUSH
6628: CALL_OW 72
6632: PUSH
6633: FOR_IN
6634: IFFALSE 6663
// begin usForces := usForces diff i ;
6636: LD_ADDR_EXP 26
6640: PUSH
6641: LD_EXP 26
6645: PUSH
6646: LD_VAR 0 1
6650: DIFF
6651: ST_TO_ADDR
// RemoveUnit ( i ) ;
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 64
// end ;
6661: GO 6633
6663: POP
6664: POP
// if not americanHasEscaped then
6665: LD_EXP 7
6669: NOT
6670: IFFALSE 6692
// begin americanHasEscaped := true ;
6672: LD_ADDR_EXP 7
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
6680: LD_EXP 12
6684: PPUSH
6685: LD_STRING DH-2-assault-a
6687: PPUSH
6688: CALL_OW 88
// end ; end ;
6692: PPOPN 1
6694: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 and FarmerOnMap do
6695: LD_INT 5
6697: PPUSH
6698: CALL_OW 255
6702: PUSH
6703: LD_INT 2
6705: EQUAL
6706: PUSH
6707: LD_EXP 9
6711: AND
6712: IFFALSE 6724
6714: GO 6716
6716: DISABLE
// YouLost ( Attack ) ; end_of_file
6717: LD_STRING Attack
6719: PPUSH
6720: CALL_OW 104
6724: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6725: LD_VAR 0 1
6729: PUSH
6730: LD_EXP 12
6734: EQUAL
6735: IFFALSE 6744
// YouLost ( Heike ) ;
6737: LD_STRING Heike
6739: PPUSH
6740: CALL_OW 104
// if un = Aviradze then
6744: LD_VAR 0 1
6748: PUSH
6749: LD_EXP 16
6753: EQUAL
6754: IFFALSE 6763
// YouLost ( Aviradze ) ;
6756: LD_STRING Aviradze
6758: PPUSH
6759: CALL_OW 104
// if un = usDepot and not retreatAllowed then
6763: LD_VAR 0 1
6767: PUSH
6768: LD_INT 11
6770: EQUAL
6771: PUSH
6772: LD_EXP 11
6776: NOT
6777: AND
6778: IFFALSE 6787
// YouLost ( Depot ) ;
6780: LD_STRING Depot
6782: PPUSH
6783: CALL_OW 104
// if un in usForces then
6787: LD_VAR 0 1
6791: PUSH
6792: LD_EXP 26
6796: IN
6797: IFFALSE 6815
// usForces := usForces diff un ;
6799: LD_ADDR_EXP 26
6803: PUSH
6804: LD_EXP 26
6808: PUSH
6809: LD_VAR 0 1
6813: DIFF
6814: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 2
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 23
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 21
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: IN
6860: IFFALSE 6876
// deadCounter := deadCounter + 1 ;
6862: LD_ADDR_EXP 8
6866: PUSH
6867: LD_EXP 8
6871: PUSH
6872: LD_INT 1
6874: PLUS
6875: ST_TO_ADDR
// end ;
6876: PPOPN 1
6878: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 2
6886: EQUAL
6887: PUSH
6888: LD_VAR 0 2
6892: PUSH
6893: LD_INT 5
6895: EQUAL
6896: AND
6897: IFFALSE 6906
// YouLost ( Attack ) ;
6899: LD_STRING Attack
6901: PPUSH
6902: CALL_OW 104
// end ;
6906: PPOPN 2
6908: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 255
6918: PUSH
6919: LD_INT 1
6921: EQUAL
6922: IFFALSE 7056
// begin if GetBType ( b ) = b_lab then
6924: LD_VAR 0 1
6928: PPUSH
6929: CALL_OW 266
6933: PUSH
6934: LD_INT 6
6936: EQUAL
6937: IFFALSE 6977
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
6939: LD_EXP 26
6943: PPUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 4
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PPUSH
6954: CALL_OW 72
6958: PPUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 120
// AmLabResearch ( b ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL 3643 0 1
// end ; if GetBType ( b ) = b_armoury then
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 266
6986: PUSH
6987: LD_INT 4
6989: EQUAL
6990: IFFALSE 7038
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
6992: LD_EXP 26
6996: PPUSH
6997: LD_INT 25
6999: PUSH
7000: LD_INT 1
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: LD_INT 54
7012: PUSH
7013: EMPTY
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 72
7028: PPUSH
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
7038: LD_ADDR_EXP 28
7042: PUSH
7043: LD_EXP 28
7047: PPUSH
7048: LD_INT 1
7050: PPUSH
7051: CALL_OW 3
7055: ST_TO_ADDR
// end ; end ; end_of_file
7056: PPOPN 1
7058: END
// every 0 0$40 + 0 0$10 trigger tick <= [ 3 3$00 , 2 2$00 , 1 1$30 ] [ Difficulty ] do
7059: LD_OWVAR 1
7063: PUSH
7064: LD_INT 6300
7066: PUSH
7067: LD_INT 4200
7069: PUSH
7070: LD_INT 3150
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PUSH
7078: LD_OWVAR 67
7082: ARRAY
7083: LESSEQUAL
7084: IFFALSE 7111
7086: GO 7088
7088: DISABLE
// begin enable ;
7089: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
7090: LD_INT 1
7092: PPUSH
7093: LD_INT 5
7095: PPUSH
7096: CALL_OW 12
7100: PPUSH
7101: LD_INT 9
7103: PPUSH
7104: LD_INT 1
7106: PPUSH
7107: CALL_OW 55
// end ;
7111: END
// every 1 1$30 + 0 0$20 trigger americanBaseCaptured and tick <= [ 25 25$00 , 20 20$00 , 18 18$00 ] [ Difficulty ] do
7112: LD_EXP 6
7116: PUSH
7117: LD_OWVAR 1
7121: PUSH
7122: LD_INT 52500
7124: PUSH
7125: LD_INT 42000
7127: PUSH
7128: LD_INT 37800
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_OWVAR 67
7140: ARRAY
7141: LESSEQUAL
7142: AND
7143: IFFALSE 7170
7145: GO 7147
7147: DISABLE
// begin enable ;
7148: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
7149: LD_INT 1
7151: PPUSH
7152: LD_INT 5
7154: PPUSH
7155: CALL_OW 12
7159: PPUSH
7160: LD_INT 9
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: CALL_OW 55
// end ; end_of_file
7170: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
7171: GO 7173
7173: DISABLE
// begin ru_radar := 98 ;
7174: LD_ADDR_EXP 29
7178: PUSH
7179: LD_INT 98
7181: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7182: LD_ADDR_EXP 30
7186: PUSH
7187: LD_INT 89
7189: ST_TO_ADDR
// us_hack := 99 ;
7190: LD_ADDR_EXP 31
7194: PUSH
7195: LD_INT 99
7197: ST_TO_ADDR
// us_artillery := 97 ;
7198: LD_ADDR_EXP 32
7202: PUSH
7203: LD_INT 97
7205: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7206: LD_ADDR_EXP 33
7210: PUSH
7211: LD_INT 91
7213: ST_TO_ADDR
// tech_Artillery := 80 ;
7214: LD_ADDR_EXP 34
7218: PUSH
7219: LD_INT 80
7221: ST_TO_ADDR
// tech_RadMat := 81 ;
7222: LD_ADDR_EXP 35
7226: PUSH
7227: LD_INT 81
7229: ST_TO_ADDR
// tech_BasicTools := 82 ;
7230: LD_ADDR_EXP 36
7234: PUSH
7235: LD_INT 82
7237: ST_TO_ADDR
// tech_Cargo := 83 ;
7238: LD_ADDR_EXP 37
7242: PUSH
7243: LD_INT 83
7245: ST_TO_ADDR
// tech_Track := 84 ;
7246: LD_ADDR_EXP 38
7250: PUSH
7251: LD_INT 84
7253: ST_TO_ADDR
// tech_Crane := 85 ;
7254: LD_ADDR_EXP 39
7258: PUSH
7259: LD_INT 85
7261: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7262: LD_ADDR_EXP 40
7266: PUSH
7267: LD_INT 86
7269: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7270: LD_ADDR_EXP 41
7274: PUSH
7275: LD_INT 87
7277: ST_TO_ADDR
// end ;
7278: END
