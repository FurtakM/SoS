// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 41177 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 41177 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 41177 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 41177 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 41177 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 41177 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 41177 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 41177 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 41177 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 41177 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 41177 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 74155 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15586 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 78840 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 78840 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 70
10662: AND
10663: PUSH
10664: LD_EXP 7
10668: NOT
10669: AND
10670: IFFALSE 10755
10672: GO 10674
10674: DISABLE
// begin if Mike then
10675: LD_EXP 33
10679: IFFALSE 10695
// Say ( Mike , DM-1-scout ) else
10681: LD_EXP 33
10685: PPUSH
10686: LD_STRING DM-1-scout
10688: PPUSH
10689: CALL_OW 88
10693: GO 10726
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10695: LD_EXP 45
10699: PPUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: PUSH
10715: LD_INT 1
10717: ARRAY
10718: PPUSH
10719: LD_STRING DArm-1-explore
10721: PPUSH
10722: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10726: LD_INT 54
10728: PPUSH
10729: LD_INT 35
10731: PPUSH
10732: LD_INT 2
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10742: LD_INT 54
10744: PPUSH
10745: LD_INT 35
10747: PPUSH
10748: LD_INT 2
10750: PPUSH
10751: CALL_OW 331
// end ;
10755: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10756: LD_INT 6
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 70
10787: PUSH
10788: LD_EXP 6
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 7
10799: NOT
10800: AND
10801: IFFALSE 11055
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
10809: PPUSH
10810: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_EXP 45
10820: PPUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_EXP 45
10845: PPUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 72
10860: ST_TO_ADDR
// DialogueOn ;
10861: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10865: LD_INT 36
10867: PPUSH
10868: LD_INT 22
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 8
10876: PPUSH
10877: CALL_OW 330
// dwait ( 0 0$1 ) ;
10881: LD_INT 35
10883: PPUSH
10884: CALL_OW 68
// speakerOk := false ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// if Mike then
10896: LD_EXP 33
10900: IFFALSE 10922
// speakerOk := Say ( Mike , DM-1-spot ) else
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_EXP 33
10911: PPUSH
10912: LD_STRING DM-1-spot
10914: PPUSH
10915: CALL_OW 88
10919: ST_TO_ADDR
10920: GO 10950
// if randomMen then
10922: LD_VAR 0 1
10926: IFFALSE 10950
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_STRING DArm-1-spot-a
10944: PPUSH
10945: CALL_OW 88
10949: ST_TO_ADDR
// if speakerOk then
10950: LD_VAR 0 3
10954: IFFALSE 10998
// begin if Givi then
10956: LD_EXP 32
10960: IFFALSE 10976
// Say ( Givi , DG-1-spot ) else
10962: LD_EXP 32
10966: PPUSH
10967: LD_STRING DG-1-spot
10969: PPUSH
10970: CALL_OW 88
10974: GO 10998
// if randomWomen then
10976: LD_VAR 0 2
10980: IFFALSE 10998
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: PPUSH
10991: LD_STRING DArf-1-spot-a
10993: PPUSH
10994: CALL_OW 88
// end ; if Mike then
10998: LD_EXP 33
11002: IFFALSE 11018
// Say ( Heike , DH-1-spot ) else
11004: LD_EXP 31
11008: PPUSH
11009: LD_STRING DH-1-spot
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( Heike , DH-1-spot-a ) ;
11018: LD_EXP 31
11022: PPUSH
11023: LD_STRING DH-1-spot-a
11025: PPUSH
11026: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11030: LD_INT 36
11032: PPUSH
11033: LD_INT 22
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 331
// DialogueOff ;
11043: CALL_OW 7
// americanBaseSpoted := true ;
11047: LD_ADDR_EXP 6
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11058: LD_EXP 6
11062: NOT
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: AND
11093: PUSH
11094: LD_EXP 7
11098: NOT
11099: AND
11100: IFFALSE 11186
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin americanBaseSpoted := true ;
11108: LD_ADDR_EXP 6
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_EXP 45
11125: PPUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 72
11140: ST_TO_ADDR
// if not randomMen then
11141: LD_VAR 0 1
11145: NOT
11146: IFFALSE 11150
// exit ;
11148: GO 11186
// DialogueOn ;
11150: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: PPUSH
11163: LD_STRING DArm-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11170: LD_EXP 31
11174: PPUSH
11175: LD_STRING DH-1-spot-a
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: PPOPN 1
11188: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11189: LD_INT 11
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: PUSH
11201: LD_INT 7
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 50
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: OR
11247: PUSH
11248: LD_INT 7
11250: PPUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: PUSH
11266: LD_INT 2
11268: GREATER
11269: OR
11270: PUSH
11271: LD_EXP 47
11275: PUSH
11276: LD_INT 4
11278: LESSEQUAL
11279: OR
11280: IFFALSE 11874
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// begin wait ( 0 0$3 ) ;
11289: LD_INT 105
11291: PPUSH
11292: CALL_OW 67
// americanStartRun := true ;
11296: LD_ADDR_EXP 15
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if IsOk ( usCommander ) then
11304: LD_EXP 48
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11343
// begin usForces := usForces union usCommander ;
11315: LD_ADDR_EXP 47
11319: PUSH
11320: LD_EXP 47
11324: PUSH
11325: LD_EXP 48
11329: UNION
11330: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11331: LD_EXP 48
11335: PPUSH
11336: LD_STRING DUsm-1-assault
11338: PPUSH
11339: CALL_OW 88
// end ; for i in usForces do
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11400
// begin if IsInUnit ( i ) then
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 310
11365: IFFALSE 11376
// ComExitBuilding ( i ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 122
// wait ( 3 ) ;
11376: LD_INT 3
11378: PPUSH
11379: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 34
11390: PPUSH
11391: LD_INT 67
11393: PPUSH
11394: CALL_OW 111
// end ;
11398: GO 11353
11400: POP
11401: POP
// Say ( Heike , DH-1-assault ) ;
11402: LD_EXP 31
11406: PPUSH
11407: LD_STRING DH-1-assault
11409: PPUSH
11410: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11414: LD_INT 35
11416: PPUSH
11417: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_INT 34
11428: PPUSH
11429: LD_INT 67
11431: PPUSH
11432: CALL_OW 111
// until not usForces ;
11436: LD_EXP 47
11440: NOT
11441: IFFALSE 11414
// music_nat := 2 ;
11443: LD_ADDR_OWVAR 71
11447: PUSH
11448: LD_INT 2
11450: ST_TO_ADDR
// music_class := music_victory ;
11451: LD_ADDR_OWVAR 72
11455: PUSH
11456: LD_INT 4
11458: ST_TO_ADDR
// if not americanHasEscaped then
11459: LD_EXP 9
11463: NOT
11464: IFFALSE 11485
// begin Say ( Heike , DH-2-assault ) ;
11466: LD_EXP 31
11470: PPUSH
11471: LD_STRING DH-2-assault
11473: PPUSH
11474: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11478: LD_STRING ACH_CLEAN
11480: PPUSH
11481: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11485: LD_INT 70
11487: PPUSH
11488: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11499: LD_INT 22
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 50
11524: PUSH
11525: EMPTY
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: IFFALSE 11492
// InGameOn ;
11544: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11548: LD_INT 11
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: LD_INT 2
11558: EQUAL
11559: NOT
11560: IFFALSE 11572
// SetSide ( usDepot , 2 ) ;
11562: LD_INT 11
11564: PPUSH
11565: LD_INT 2
11567: PPUSH
11568: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11572: LD_INT 35
11574: PPUSH
11575: LD_INT 22
11577: PPUSH
11578: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11582: LD_EXP 31
11586: PPUSH
11587: LD_INT 35
11589: PPUSH
11590: LD_INT 22
11592: PPUSH
11593: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11597: LD_EXP 31
11601: PPUSH
11602: LD_INT 38
11604: PPUSH
11605: LD_INT 25
11607: PPUSH
11608: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11612: LD_EXP 35
11616: PUSH
11617: LD_EXP 44
11621: UNION
11622: PUSH
11623: LD_EXP 45
11627: UNION
11628: PPUSH
11629: LD_INT 39
11631: PPUSH
11632: LD_INT 26
11634: PPUSH
11635: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11639: LD_EXP 35
11643: PUSH
11644: LD_EXP 44
11648: UNION
11649: PUSH
11650: LD_EXP 45
11654: UNION
11655: PPUSH
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 179
// p := 0 ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11673: LD_INT 35
11675: PPUSH
11676: CALL_OW 67
// p := p + 1 ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11694: LD_EXP 31
11698: PPUSH
11699: CALL_OW 314
11703: NOT
11704: PUSH
11705: LD_VAR 0 2
11709: PUSH
11710: LD_INT 10
11712: GREATER
11713: OR
11714: IFFALSE 11673
// Say ( Heike , DH-1-capture ) ;
11716: LD_EXP 31
11720: PPUSH
11721: LD_STRING DH-1-capture
11723: PPUSH
11724: CALL_OW 88
// if IsOk ( Markov ) then
11728: LD_EXP 38
11732: PPUSH
11733: CALL_OW 302
11737: IFFALSE 11751
// Say ( Markov , DMar-1-capture ) ;
11739: LD_EXP 38
11743: PPUSH
11744: LD_STRING DMar-1-capture
11746: PPUSH
11747: CALL_OW 88
// if IsOk ( Sophia ) then
11751: LD_EXP 37
11755: PPUSH
11756: CALL_OW 302
11760: IFFALSE 11786
// begin Say ( Heike , DH-2-capture ) ;
11762: LD_EXP 31
11766: PPUSH
11767: LD_STRING DH-2-capture
11769: PPUSH
11770: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11774: LD_EXP 37
11778: PPUSH
11779: LD_STRING DS-1-capture
11781: PPUSH
11782: CALL_OW 88
// end ; americanBaseCaptured := true ;
11786: LD_ADDR_EXP 7
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// InGameOff ;
11794: CALL_OW 9
// music_nat := music_auto ;
11798: LD_ADDR_OWVAR 71
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// music_class := music_auto ;
11806: LD_ADDR_OWVAR 72
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11814: LD_STRING ConstructBase
11816: PPUSH
11817: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_INT 22
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11872
// SetSide ( i , 2 ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 2
11865: PPUSH
11866: CALL_OW 235
11870: GO 11855
11872: POP
11873: POP
// end ;
11874: PPOPN 2
11876: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11877: LD_EXP 14
11881: PUSH
11882: LD_INT 3
11884: GREATEREQUAL
11885: IFFALSE 11897
11887: GO 11889
11889: DISABLE
// SetAchievement ( ACH_ENG ) ;
11890: LD_STRING ACH_ENG
11892: PPUSH
11893: CALL_OW 543
11897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11898: LD_INT 22
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 25
11910: PUSH
11911: LD_INT 15
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: PUSH
11927: LD_INT 4
11929: GREATEREQUAL
11930: IFFALSE 11942
11932: GO 11934
11934: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11935: LD_STRING ACH_APEGEN
11937: PPUSH
11938: CALL_OW 543
11942: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11943: LD_INT 22
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 30
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 3
11965: PUSH
11966: LD_INT 57
11968: PUSH
11969: EMPTY
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: IFFALSE 12250
11987: GO 11989
11989: DISABLE
// begin workshopBuilded := true ;
11990: LD_ADDR_EXP 11
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if IsOk ( Markov ) then
11998: LD_EXP 38
12002: PPUSH
12003: CALL_OW 302
12007: IFFALSE 12066
// begin Say ( Heike , DH-1-shop-a ) ;
12009: LD_EXP 31
12013: PPUSH
12014: LD_STRING DH-1-shop-a
12016: PPUSH
12017: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12021: LD_INT 47
12023: PPUSH
12024: LD_INT 2
12026: PPUSH
12027: CALL_OW 321
12031: PUSH
12032: LD_INT 2
12034: EQUAL
12035: PUSH
12036: LD_INT 45
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: CALL_OW 321
12046: PUSH
12047: LD_INT 2
12049: EQUAL
12050: AND
12051: NOT
12052: IFFALSE 12066
// Say ( Markov , DMar-1-shop-a ) ;
12054: LD_EXP 38
12058: PPUSH
12059: LD_STRING DMar-1-shop-a
12061: PPUSH
12062: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12066: LD_INT 35
12068: PPUSH
12069: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12073: LD_INT 47
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 321
12083: PUSH
12084: LD_INT 2
12086: EQUAL
12087: PUSH
12088: LD_INT 45
12090: PPUSH
12091: LD_INT 2
12093: PPUSH
12094: CALL_OW 321
12098: PUSH
12099: LD_INT 2
12101: EQUAL
12102: OR
12103: IFFALSE 12066
// if IsOk ( Markov ) and IsOk ( Heike ) then
12105: LD_EXP 38
12109: PPUSH
12110: CALL_OW 302
12114: PUSH
12115: LD_EXP 31
12119: PPUSH
12120: CALL_OW 302
12124: AND
12125: IFFALSE 12243
// begin DialogueOn ;
12127: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12131: LD_EXP 38
12135: PPUSH
12136: LD_STRING DMar-1-shop
12138: PPUSH
12139: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12143: LD_EXP 31
12147: PPUSH
12148: LD_STRING DH-1-shop
12150: PPUSH
12151: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12155: LD_EXP 38
12159: PPUSH
12160: LD_STRING DMar-2-shop
12162: PPUSH
12163: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12167: LD_EXP 38
12171: PPUSH
12172: LD_STRING DMar-3-shop
12174: PPUSH
12175: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12179: LD_EXP 31
12183: PPUSH
12184: LD_STRING DH-2-shop
12186: PPUSH
12187: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12191: LD_EXP 38
12195: PPUSH
12196: LD_STRING DMar-4-shop
12198: PPUSH
12199: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12203: LD_EXP 31
12207: PPUSH
12208: LD_STRING DH-3-shop
12210: PPUSH
12211: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12215: LD_EXP 38
12219: PPUSH
12220: LD_STRING DMar-5-shop
12222: PPUSH
12223: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12227: LD_EXP 31
12231: PPUSH
12232: LD_STRING DH-4-shop
12234: PPUSH
12235: CALL_OW 88
// DialogueOff ;
12239: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12243: LD_STRING ConstructVeh
12245: PPUSH
12246: CALL_OW 337
// end ;
12250: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12251: LD_INT 2
12253: PPUSH
12254: LD_INT 2
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL 41240 0 3
12264: PUSH
12265: LD_INT 0
12267: EQUAL
12268: IFFALSE 12280
12270: GO 12272
12272: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12273: LD_STRING Techs
12275: PPUSH
12276: CALL_OW 337
12280: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12281: LD_EXP 38
12285: PPUSH
12286: CALL_OW 302
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 34
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 35
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: AND
12338: IFFALSE 12445
12340: GO 12342
12342: DISABLE
// begin DialogueOn ;
12343: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12347: LD_INT 22
12349: PUSH
12350: LD_INT 2
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: LD_INT 34
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 35
12372: PUSH
12373: LD_INT 22
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PPUSH
12394: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12398: LD_INT 10
12400: PPUSH
12401: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12405: LD_EXP 31
12409: PPUSH
12410: LD_STRING DH-1-bal
12412: PPUSH
12413: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12417: LD_EXP 38
12421: PPUSH
12422: LD_STRING DMar-1-bal
12424: PPUSH
12425: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12429: LD_EXP 31
12433: PPUSH
12434: LD_STRING DH-2-bal
12436: PPUSH
12437: CALL_OW 88
// DialogueOff ;
12441: CALL_OW 7
// end ;
12445: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12446: LD_EXP 35
12450: PPUSH
12451: CALL_OW 302
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 30
12468: PUSH
12469: LD_INT 6
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: AND
12485: IFFALSE 12546
12487: GO 12489
12489: DISABLE
// begin DialogueOn ;
12490: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12494: LD_EXP 35
12498: PPUSH
12499: LD_STRING DA-1-lab
12501: PPUSH
12502: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12506: LD_EXP 31
12510: PPUSH
12511: LD_STRING DH-1-lab
12513: PPUSH
12514: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12518: LD_EXP 35
12522: PPUSH
12523: LD_STRING DA-2-lab
12525: PPUSH
12526: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12530: LD_EXP 31
12534: PPUSH
12535: LD_STRING DH-2-lab
12537: PPUSH
12538: CALL_OW 88
// DialogueOff ;
12542: CALL_OW 7
// end ;
12546: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12547: LD_EXP 36
12551: PPUSH
12552: CALL_OW 302
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 15
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: AND
12586: PUSH
12587: LD_INT 81
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: NOT
12602: AND
12603: IFFALSE 12792
12605: GO 12607
12607: DISABLE
12608: LD_INT 0
12610: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 15
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 69
12644: ST_TO_ADDR
// InGameOn ;
12645: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12662: LD_VAR 0 1
12666: PUSH
12667: LD_INT 1
12669: ARRAY
12670: PPUSH
12671: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12675: LD_EXP 36
12679: PPUSH
12680: LD_STRING DK-1-apesol
12682: PPUSH
12683: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12687: LD_VAR 0 1
12691: PUSH
12692: LD_INT 1
12694: ARRAY
12695: PPUSH
12696: LD_INT 35
12698: PPUSH
12699: LD_INT 28
12701: PPUSH
12702: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: LD_INT 36
12717: PPUSH
12718: LD_INT 17
12720: PPUSH
12721: CALL_OW 171
// wait ( 0 0$2 ) ;
12725: LD_INT 70
12727: PPUSH
12728: CALL_OW 67
// DialogueOn ;
12732: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12736: LD_EXP 35
12740: PPUSH
12741: LD_STRING DA-1-apesol
12743: PPUSH
12744: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12748: LD_EXP 36
12752: PPUSH
12753: LD_STRING DK-2-apesol
12755: PPUSH
12756: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12760: LD_EXP 35
12764: PPUSH
12765: LD_STRING DA-2-apesol
12767: PPUSH
12768: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12772: LD_EXP 36
12776: PPUSH
12777: LD_STRING DK-3-apesol
12779: PPUSH
12780: CALL_OW 88
// DialogueOff ;
12784: CALL_OW 7
// InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12795: LD_EXP 37
12799: PPUSH
12800: CALL_OW 302
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 16
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: AND
12834: PUSH
12835: LD_INT 81
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PPUSH
12845: CALL_OW 69
12849: NOT
12850: AND
12851: IFFALSE 13165
12853: GO 12855
12855: DISABLE
12856: LD_INT 0
12858: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: LD_INT 22
12866: PUSH
12867: LD_INT 2
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 16
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: ST_TO_ADDR
// blockAttack := true ;
12893: LD_ADDR_EXP 29
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// InGameOn ;
12901: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12905: LD_INT 35
12907: PPUSH
12908: LD_INT 22
12910: PPUSH
12911: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12915: LD_INT 5
12917: PPUSH
12918: LD_INT 35
12920: PPUSH
12921: LD_INT 22
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12931: LD_EXP 37
12935: PPUSH
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12962: LD_VAR 0 1
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: CALL_OW 122
// wait ( 0 0$2 ) ;
12975: LD_INT 70
12977: PPUSH
12978: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12982: LD_EXP 37
12986: PPUSH
12987: LD_STRING DS-1-apeeng
12989: PPUSH
12990: CALL_OW 88
// if IsOk ( Kamil ) then
12994: LD_EXP 34
12998: PPUSH
12999: CALL_OW 302
13003: IFFALSE 13153
// begin Say ( Kamil , DKam-1-apeeng ) ;
13005: LD_EXP 34
13009: PPUSH
13010: LD_STRING DKam-1-apeeng
13012: PPUSH
13013: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13017: LD_EXP 37
13021: PPUSH
13022: LD_STRING DS-2-apeeng
13024: PPUSH
13025: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13029: LD_EXP 34
13033: PPUSH
13034: LD_STRING DKam-2-apeeng
13036: PPUSH
13037: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13041: LD_EXP 37
13045: PPUSH
13046: LD_STRING DS-3-apeeng
13048: PPUSH
13049: CALL_OW 88
// if not IsOK ( Kaia ) then
13053: LD_EXP 36
13057: PPUSH
13058: CALL_OW 302
13062: NOT
13063: IFFALSE 13079
// begin InGameOff ;
13065: CALL_OW 9
// blockAttack := false ;
13069: LD_ADDR_EXP 29
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// exit ;
13077: GO 13165
// end ; Say ( Kaia , DK-1-apeeng ) ;
13079: LD_EXP 36
13083: PPUSH
13084: LD_STRING DK-1-apeeng
13086: PPUSH
13087: CALL_OW 88
// if not IsOk ( Givi ) then
13091: LD_EXP 32
13095: PPUSH
13096: CALL_OW 302
13100: NOT
13101: IFFALSE 13117
// begin InGameOff ;
13103: CALL_OW 9
// blockAttack := false ;
13107: LD_ADDR_EXP 29
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// exit ;
13115: GO 13165
// end ; Say ( Givi , DG-1-apeeng ) ;
13117: LD_EXP 32
13121: PPUSH
13122: LD_STRING DG-1-apeeng
13124: PPUSH
13125: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13129: LD_EXP 36
13133: PPUSH
13134: LD_STRING DK-2-apeeng
13136: PPUSH
13137: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13141: LD_EXP 36
13145: PPUSH
13146: LD_STRING DK-3-apeeng
13148: PPUSH
13149: CALL_OW 88
// end ; InGameOff ;
13153: CALL_OW 9
// blockAttack := false ;
13157: LD_ADDR_EXP 29
13161: PUSH
13162: LD_INT 0
13164: ST_TO_ADDR
// end ;
13165: PPOPN 1
13167: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13168: LD_EXP 4
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 30
13185: PUSH
13186: LD_INT 0
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: AND
13202: IFFALSE 13383
13204: GO 13206
13206: DISABLE
// begin blockAttack := true ;
13207: LD_ADDR_EXP 29
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13215: LD_INT 350
13217: PPUSH
13218: CALL_OW 67
// DialogueOn ;
13222: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13226: LD_EXP 39
13230: PPUSH
13231: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13235: LD_EXP 39
13239: PPUSH
13240: LD_STRING DF-1-distribution
13242: PPUSH
13243: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13247: LD_EXP 31
13251: PPUSH
13252: LD_STRING DH-2-distribution
13254: PPUSH
13255: CALL_OW 88
// if IsOk ( Kaia ) then
13259: LD_EXP 36
13263: PPUSH
13264: CALL_OW 302
13268: IFFALSE 13329
// begin Say ( Kaia , DK-1-distribution ) ;
13270: LD_EXP 36
13274: PPUSH
13275: LD_STRING DK-1-distribution
13277: PPUSH
13278: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13282: LD_EXP 31
13286: PPUSH
13287: LD_STRING DH-1-distribution
13289: PPUSH
13290: CALL_OW 88
// if IsOk ( Givi ) then
13294: LD_EXP 32
13298: PPUSH
13299: CALL_OW 302
13303: IFFALSE 13329
// begin Say ( Givi , DG-1-distribution ) ;
13305: LD_EXP 32
13309: PPUSH
13310: LD_STRING DG-1-distribution
13312: PPUSH
13313: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13317: LD_EXP 31
13321: PPUSH
13322: LD_STRING DH-3-distribution
13324: PPUSH
13325: CALL_OW 88
// end ; end ; DialogueOff ;
13329: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13333: LD_STRING Crates1
13335: PPUSH
13336: CALL_OW 337
// farmerRequestedCrates := 300 ;
13340: LD_ADDR_EXP 17
13344: PUSH
13345: LD_INT 300
13347: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13348: LD_STRING FarmerCrates
13350: PPUSH
13351: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13355: LD_INT 10
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: CALL_OW 424
// blockAttack := false ;
13365: LD_ADDR_EXP 29
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13373: LD_INT 108
13375: PPUSH
13376: LD_INT 61
13378: PPUSH
13379: CALL_OW 86
// end ;
13383: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13384: LD_EXP 7
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 57
13404: PUSH
13405: EMPTY
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: LD_INT 6
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 7
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: PPUSH
13445: CALL_OW 69
13449: AND
13450: PUSH
13451: LD_INT 22
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: LD_INT 57
13466: PUSH
13467: EMPTY
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 30
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: AND
13494: IFFALSE 13658
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
// begin wait ( 0 0$10 ) ;
13502: LD_INT 350
13504: PPUSH
13505: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_EXP 45
13518: PPUSH
13519: LD_INT 26
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 72
13547: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13548: LD_EXP 31
13552: PPUSH
13553: LD_STRING DH-1-task
13555: PPUSH
13556: CALL_OW 88
// if IsOk ( Sophia ) then
13560: LD_EXP 37
13564: PPUSH
13565: CALL_OW 302
13569: IFFALSE 13609
// begin Say ( Sophia , DS-1-task ) ;
13571: LD_EXP 37
13575: PPUSH
13576: LD_STRING DS-1-task
13578: PPUSH
13579: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13583: LD_EXP 37
13587: PPUSH
13588: LD_STRING DS-2-task
13590: PPUSH
13591: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13595: LD_EXP 31
13599: PPUSH
13600: LD_STRING DH-2-task
13602: PPUSH
13603: CALL_OW 88
// end else
13607: GO 13643
// if eng then
13609: LD_VAR 0 1
13613: IFFALSE 13643
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13615: LD_VAR 0 1
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: PPUSH
13624: LD_STRING DArm-1-task
13626: PPUSH
13627: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13631: LD_EXP 31
13635: PPUSH
13636: LD_STRING DH-2-task
13638: PPUSH
13639: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13643: LD_STRING BaseConstructed
13645: PPUSH
13646: CALL_OW 337
// allowConvoys := true ;
13650: LD_ADDR_EXP 13
13654: PUSH
13655: LD_INT 1
13657: ST_TO_ADDR
// end ;
13658: PPOPN 1
13660: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13661: LD_INT 22
13663: PUSH
13664: LD_INT 4
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 34
13673: PUSH
13674: LD_INT 12
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: IFFALSE 13857
13691: GO 13693
13693: DISABLE
13694: LD_INT 0
13696: PPUSH
13697: PPUSH
13698: PPUSH
// begin wait ( 0 0$2 ) ;
13699: LD_INT 70
13701: PPUSH
13702: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13706: LD_ADDR_VAR 0 1
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 4
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 34
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_VAR 0 1
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 250
13758: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13759: LD_ADDR_VAR 0 3
13763: PUSH
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 251
13777: ST_TO_ADDR
// DialogueOn ;
13778: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13782: LD_VAR 0 2
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13796: LD_VAR 0 2
13800: PPUSH
13801: LD_VAR 0 3
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 6
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13817: LD_INT 10
13819: PPUSH
13820: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13824: LD_EXP 31
13828: PPUSH
13829: LD_STRING DH-1-seecargo
13831: PPUSH
13832: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13836: LD_VAR 0 2
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 2
13848: PPUSH
13849: CALL_OW 331
// DialogueOff ;
13853: CALL_OW 7
// end ;
13857: PPOPN 3
13859: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13860: LD_EXP 4
13864: PUSH
13865: LD_EXP 16
13869: PUSH
13870: LD_INT 300
13872: GREATEREQUAL
13873: AND
13874: IFFALSE 13946
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13883: LD_EXP 39
13887: PPUSH
13888: LD_STRING DF-1-delivery-2
13890: PPUSH
13891: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13895: LD_EXP 31
13899: PPUSH
13900: LD_STRING DH-1-delivery-2
13902: PPUSH
13903: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13907: LD_EXP 39
13911: PPUSH
13912: LD_STRING DF-2-delivery-2
13914: PPUSH
13915: CALL_OW 94
// DialogueOff ;
13919: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13923: LD_STRING Crates2
13925: PPUSH
13926: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13930: LD_ADDR_EXP 18
13934: PUSH
13935: LD_INT 63000
13937: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13938: LD_ADDR_EXP 17
13942: PUSH
13943: LD_INT 600
13945: ST_TO_ADDR
// end ;
13946: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13947: LD_EXP 4
13951: PUSH
13952: LD_EXP 16
13956: PUSH
13957: LD_INT 600
13959: GREATEREQUAL
13960: AND
13961: PUSH
13962: LD_OWVAR 67
13966: PUSH
13967: LD_INT 1
13969: GREATER
13970: AND
13971: IFFALSE 14171
13973: GO 13975
13975: DISABLE
// begin DialogueOn ;
13976: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13980: LD_EXP 39
13984: PPUSH
13985: LD_STRING DF-1-delivery-3
13987: PPUSH
13988: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13992: LD_EXP 31
13996: PPUSH
13997: LD_STRING DH-1-delivery-3
13999: PPUSH
14000: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14004: LD_EXP 39
14008: PPUSH
14009: LD_STRING DF-2-delivery-3
14011: PPUSH
14012: CALL_OW 94
// if IsOk ( Kaia ) then
14016: LD_EXP 36
14020: PPUSH
14021: CALL_OW 302
14025: IFFALSE 14075
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14027: LD_EXP 36
14031: PPUSH
14032: LD_STRING DK-1-delivery-3
14034: PPUSH
14035: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14039: LD_EXP 31
14043: PPUSH
14044: LD_STRING DH-2-delivery-3
14046: PPUSH
14047: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14051: LD_EXP 32
14055: PPUSH
14056: LD_STRING DG-1-delivery-3
14058: PPUSH
14059: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14063: LD_EXP 33
14067: PPUSH
14068: LD_STRING DM-1-delivery-3
14070: PPUSH
14071: CALL_OW 88
// end ; DialogueOff ;
14075: CALL_OW 7
// case Difficulty of 2 :
14079: LD_OWVAR 67
14083: PUSH
14084: LD_INT 2
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14110
14092: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14093: LD_STRING Crates3
14095: PPUSH
14096: CALL_OW 337
// farmerRequestedCrates := 900 ;
14100: LD_ADDR_EXP 17
14104: PUSH
14105: LD_INT 900
14107: ST_TO_ADDR
// end ; 3 :
14108: GO 14163
14110: LD_INT 3
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14136
14118: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14119: LD_STRING Crates4
14121: PPUSH
14122: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14126: LD_ADDR_EXP 17
14130: PUSH
14131: LD_INT 1200
14133: ST_TO_ADDR
// end ; 4 :
14134: GO 14163
14136: LD_INT 4
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14162
14144: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14145: LD_STRING Crates5
14147: PPUSH
14148: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14152: LD_ADDR_EXP 17
14156: PUSH
14157: LD_INT 1400
14159: ST_TO_ADDR
// end ; end ;
14160: GO 14163
14162: POP
// farmerCratesCounter := 30 30$00 ;
14163: LD_ADDR_EXP 18
14167: PUSH
14168: LD_INT 63000
14170: ST_TO_ADDR
// end ;
14171: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14172: LD_EXP 4
14176: PUSH
14177: LD_EXP 16
14181: PUSH
14182: LD_INT 600
14184: PUSH
14185: LD_INT 900
14187: PUSH
14188: LD_INT 1200
14190: PUSH
14191: LD_INT 1400
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: LD_OWVAR 67
14204: ARRAY
14205: GREATEREQUAL
14206: AND
14207: IFFALSE 14293
14209: GO 14211
14211: DISABLE
// begin retreatAllowed := true ;
14212: LD_ADDR_EXP 12
14216: PUSH
14217: LD_INT 1
14219: ST_TO_ADDR
// display_strings := [ ] ;
14220: LD_ADDR_OWVAR 47
14224: PUSH
14225: EMPTY
14226: ST_TO_ADDR
// DialogueOn ;
14227: CALL_OW 6
// InGameOn ;
14231: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14235: LD_EXP 40
14239: PPUSH
14240: LD_STRING DO-radio-end
14242: PPUSH
14243: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14247: LD_EXP 31
14251: PPUSH
14252: LD_STRING DH-1-radio-end
14254: PPUSH
14255: CALL_OW 88
// InGameOff ;
14259: CALL_OW 9
// DialogueOff ;
14263: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14267: LD_STRING Retreat
14269: PPUSH
14270: CALL_OW 337
// wait ( 0 0$2 ) ;
14274: LD_INT 70
14276: PPUSH
14277: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14281: LD_EXP 31
14285: PPUSH
14286: LD_STRING DH-2-radio-end
14288: PPUSH
14289: CALL_OW 88
// end ;
14293: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14294: LD_EXP 12
14298: IFFALSE 14429
14300: GO 14302
14302: DISABLE
14303: LD_INT 0
14305: PPUSH
14306: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14307: LD_INT 10
14309: PPUSH
14310: LD_INT 0
14312: PPUSH
14313: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14317: LD_ADDR_VAR 0 1
14321: PUSH
14322: LD_EXP 42
14326: PPUSH
14327: LD_INT 25
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 72
14341: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14342: LD_VAR 0 1
14346: PUSH
14347: LD_INT 102
14349: PPUSH
14350: LD_INT 69
14352: PPUSH
14353: CALL_OW 428
14357: PUSH
14358: LD_INT 0
14360: EQUAL
14361: AND
14362: IFFALSE 14429
// begin for i in tmp do
14364: LD_ADDR_VAR 0 2
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: FOR_IN
14375: IFFALSE 14399
// if IsInUnit ( i ) then
14377: LD_VAR 0 2
14381: PPUSH
14382: CALL_OW 310
14386: IFFALSE 14397
// ComExitBuilding ( i ) ;
14388: LD_VAR 0 2
14392: PPUSH
14393: CALL_OW 122
14397: GO 14374
14399: POP
14400: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14401: LD_VAR 0 1
14405: PPUSH
14406: LD_INT 31
14408: PPUSH
14409: LD_INT 102
14411: PPUSH
14412: LD_INT 69
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 205
// wait ( 0 0$3 ) ;
14422: LD_INT 105
14424: PPUSH
14425: CALL_OW 67
// end ; end ;
14429: PPOPN 2
14431: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14432: LD_EXP 12
14436: NOT
14437: PUSH
14438: LD_INT 5
14440: PPUSH
14441: CALL_OW 301
14445: AND
14446: IFFALSE 14478
14448: GO 14450
14450: DISABLE
// begin DialogueOn ;
14451: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14455: LD_EXP 39
14459: PPUSH
14460: LD_STRING DF-1-failure
14462: PPUSH
14463: CALL_OW 94
// DialogueOff ;
14467: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14471: LD_STRING FarmerDepot
14473: PPUSH
14474: CALL_OW 104
// end ;
14478: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14479: LD_EXP 12
14483: PUSH
14484: LD_EXP 31
14488: PPUSH
14489: LD_EXP 39
14493: PPUSH
14494: CALL_OW 296
14498: PUSH
14499: LD_INT 12
14501: LESS
14502: AND
14503: PUSH
14504: LD_INT 81
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 21
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: NOT
14533: AND
14534: IFFALSE 15218
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin allowConvoys := false ;
14544: LD_ADDR_EXP 13
14548: PUSH
14549: LD_INT 0
14551: ST_TO_ADDR
// InGameOn ;
14552: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14556: LD_EXP 31
14560: PPUSH
14561: LD_EXP 39
14565: PPUSH
14566: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14570: LD_EXP 39
14574: PPUSH
14575: LD_EXP 31
14579: PPUSH
14580: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14584: LD_EXP 39
14588: PPUSH
14589: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14593: LD_EXP 31
14597: PPUSH
14598: LD_STRING DH-1-end
14600: PPUSH
14601: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14605: LD_EXP 39
14609: PPUSH
14610: LD_STRING DF-1-end
14612: PPUSH
14613: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14617: LD_EXP 39
14621: PPUSH
14622: LD_STRING DF-2-end
14624: PPUSH
14625: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14629: LD_EXP 31
14633: PPUSH
14634: LD_STRING DH-2-end
14636: PPUSH
14637: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14641: LD_EXP 39
14645: PPUSH
14646: LD_STRING DF-3-end
14648: PPUSH
14649: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14653: LD_EXP 31
14657: PPUSH
14658: LD_STRING DH-3-end
14660: PPUSH
14661: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14665: LD_EXP 32
14669: PPUSH
14670: LD_STRING DG-1-end
14672: PPUSH
14673: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14677: LD_EXP 31
14681: PPUSH
14682: LD_STRING DH-4-end
14684: PPUSH
14685: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14689: LD_EXP 39
14693: PPUSH
14694: LD_STRING DF-4-end
14696: PPUSH
14697: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14701: LD_EXP 31
14705: PPUSH
14706: LD_STRING DH-5-end
14708: PPUSH
14709: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14713: LD_EXP 39
14717: PPUSH
14718: LD_STRING DF-5-end
14720: PPUSH
14721: CALL_OW 88
// InGameOff ;
14725: CALL_OW 9
// allowCargoEvacuation := true ;
14729: LD_ADDR_EXP 8
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14737: LD_ADDR_VAR 0 2
14741: PUSH
14742: LD_INT 4
14744: PUSH
14745: LD_INT 3
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: LD_OWVAR 67
14764: ARRAY
14765: ST_TO_ADDR
// if farmerSquad < max then
14766: LD_EXP 42
14770: PUSH
14771: LD_VAR 0 2
14775: LESS
14776: IFFALSE 14788
// max := farmerSquad ;
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_EXP 42
14787: ST_TO_ADDR
// for i := 1 to max do
14788: LD_ADDR_VAR 0 1
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: LD_VAR 0 2
14802: PUSH
14803: FOR_TO
14804: IFFALSE 14842
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14806: LD_EXP 42
14810: PUSH
14811: LD_INT 1
14813: ARRAY
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14822: LD_ADDR_EXP 42
14826: PUSH
14827: LD_EXP 42
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14803
14842: POP
14843: POP
// for i in Farmer ^ farmerSquad do
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_EXP 39
14853: PUSH
14854: LD_EXP 42
14858: ADD
14859: PUSH
14860: FOR_IN
14861: IFFALSE 14900
// begin if IsInUnit ( i ) then
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 310
14872: IFFALSE 14883
// ComExitBuilding ( i ) ;
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 102
14890: PPUSH
14891: LD_INT 7
14893: PPUSH
14894: CALL_OW 171
// end ;
14898: GO 14860
14900: POP
14901: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14902: LD_ADDR_VAR 0 1
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: PUSH
14936: LD_INT 5
14938: DIFF
14939: PUSH
14940: FOR_IN
14941: IFFALSE 14957
// SetSide ( i , 2 ) ;
14943: LD_VAR 0 1
14947: PPUSH
14948: LD_INT 2
14950: PPUSH
14951: CALL_OW 235
14955: GO 14940
14957: POP
14958: POP
// wait ( 0 0$2 ) ;
14959: LD_INT 70
14961: PPUSH
14962: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14966: LD_EXP 31
14970: PPUSH
14971: LD_STRING DH-6-end
14973: PPUSH
14974: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14978: LD_INT 35
14980: PPUSH
14981: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_EXP 39
14994: PUSH
14995: LD_EXP 42
14999: ADD
15000: PPUSH
15001: LD_INT 95
15003: PUSH
15004: LD_INT 3
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 72
15015: ST_TO_ADDR
// if tmp then
15016: LD_VAR 0 3
15020: IFFALSE 15064
// for i in tmp do
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: LD_VAR 0 3
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15062
// begin farmerSquad := farmerSquad diff i ;
15035: LD_ADDR_EXP 42
15039: PUSH
15040: LD_EXP 42
15044: PUSH
15045: LD_VAR 0 1
15049: DIFF
15050: ST_TO_ADDR
// RemoveUnit ( i ) ;
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 64
// end ;
15060: GO 15032
15062: POP
15063: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15064: LD_EXP 42
15068: PUSH
15069: EMPTY
15070: EQUAL
15071: PUSH
15072: LD_EXP 39
15076: PPUSH
15077: CALL_OW 305
15081: NOT
15082: AND
15083: IFFALSE 14978
// if farmerHumanLoseCounter = 0 then
15085: LD_EXP 21
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: IFFALSE 15102
// SetAchievement ( ACH_BABY ) ;
15095: LD_STRING ACH_BABY
15097: PPUSH
15098: CALL_OW 543
// wait ( 1 1$00 ) ;
15102: LD_INT 2100
15104: PPUSH
15105: CALL_OW 67
// SendAttack ;
15109: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15113: LD_EXP 31
15117: PPUSH
15118: LD_STRING DH-7-end
15120: PPUSH
15121: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15125: LD_ADDR_VAR 0 1
15129: PUSH
15130: DOUBLE
15131: LD_INT 1
15133: DEC
15134: ST_TO_ADDR
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: LD_INT 4
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: LD_OWVAR 67
15157: ARRAY
15158: PUSH
15159: FOR_TO
15160: IFFALSE 15216
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15162: LD_INT 4200
15164: PUSH
15165: LD_INT 3500
15167: PUSH
15168: LD_INT 3150
15170: PUSH
15171: LD_INT 2800
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: PUSH
15180: LD_OWVAR 67
15184: ARRAY
15185: PPUSH
15186: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15190: LD_EXP 12
15194: PUSH
15195: LD_EXP 22
15199: PUSH
15200: LD_INT 1
15202: LESS
15203: AND
15204: IFFALSE 15210
// exit ;
15206: POP
15207: POP
15208: GO 15218
// SendAttack ;
15210: CALL 6126 0 0
// end ;
15214: GO 15159
15216: POP
15217: POP
// end ;
15218: PPOPN 3
15220: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15221: LD_EXP 8
15225: PUSH
15226: LD_EXP 22
15230: PUSH
15231: LD_INT 0
15233: GREATER
15234: AND
15235: IFFALSE 15245
15237: GO 15239
15239: DISABLE
// begin enable ;
15240: ENABLE
// CargoEvacuation ;
15241: CALL 3599 0 0
// end ;
15245: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15246: LD_EXP 18
15250: PUSH
15251: LD_INT 18900
15253: LESSEQUAL
15254: IFFALSE 15303
15256: GO 15258
15258: DISABLE
// begin DialogueOn ;
15259: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15263: LD_EXP 39
15267: PPUSH
15268: LD_STRING DF-1-distribution-a
15270: PPUSH
15271: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15275: LD_EXP 31
15279: PPUSH
15280: LD_STRING DH-1-distribution-a
15282: PPUSH
15283: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15287: LD_EXP 39
15291: PPUSH
15292: LD_STRING DF-2-distribution-a
15294: PPUSH
15295: CALL_OW 94
// DialogueOff ;
15299: CALL_OW 7
// end ;
15303: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15304: LD_EXP 18
15308: PUSH
15309: LD_INT 0
15311: LESSEQUAL
15312: IFFALSE 15344
15314: GO 15316
15316: DISABLE
// begin DialogueOn ;
15317: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15321: LD_EXP 39
15325: PPUSH
15326: LD_STRING DF-3-distribution-a
15328: PPUSH
15329: CALL_OW 94
// YouLost ( Distribution ) ;
15333: LD_STRING Distribution
15335: PPUSH
15336: CALL_OW 104
// DialogueOff ;
15340: CALL_OW 7
// end ;
15344: END
// every 0 0$1 trigger vehCounter >= 2 do
15345: LD_EXP 23
15349: PUSH
15350: LD_INT 2
15352: GREATEREQUAL
15353: IFFALSE 15365
15355: GO 15357
15357: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15358: LD_STRING VehConstructed
15360: PPUSH
15361: CALL_OW 337
15365: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 12
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 69
15394: IFFALSE 15454
15396: GO 15398
15398: DISABLE
// begin DialogueOn ;
15399: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15403: LD_EXP 31
15407: PPUSH
15408: LD_STRING DH-1-truck
15410: PPUSH
15411: CALL_OW 88
// if IsOk ( Markov ) then
15415: LD_EXP 38
15419: PPUSH
15420: CALL_OW 302
15424: IFFALSE 15450
// begin Say ( Markov , DMar-1-truck ) ;
15426: LD_EXP 38
15430: PPUSH
15431: LD_STRING DMar-1-truck
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15438: LD_EXP 31
15442: PPUSH
15443: LD_STRING DH-2-truck
15445: PPUSH
15446: CALL_OW 88
// end ; DialogueOff ;
15450: CALL_OW 7
// end ;
15454: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// if IsOk ( Givi ) then
15460: LD_EXP 32
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15485
// begin Say ( Givi , DG-1-nocargo ) ;
15471: LD_EXP 32
15475: PPUSH
15476: LD_STRING DG-1-nocargo
15478: PPUSH
15479: CALL_OW 88
// exit ;
15483: GO 15581
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15485: LD_ADDR_VAR 0 2
15489: PUSH
15490: LD_EXP 45
15494: PPUSH
15495: LD_INT 26
15497: PUSH
15498: LD_INT 1
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 72
15509: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_EXP 45
15519: PPUSH
15520: LD_INT 26
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 72
15534: ST_TO_ADDR
// if randomMen then
15535: LD_VAR 0 2
15539: IFFALSE 15559
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15541: LD_VAR 0 2
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: LD_STRING DArm-1-nocargo
15552: PPUSH
15553: CALL_OW 88
15557: GO 15581
// if randomWomen then
15559: LD_VAR 0 3
15563: IFFALSE 15581
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15565: LD_VAR 0 3
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: LD_STRING DArf-1-nocargo
15576: PPUSH
15577: CALL_OW 88
// end ;
15581: LD_VAR 0 1
15585: RET
// export function IncomingAttack ; begin
15586: LD_INT 0
15588: PPUSH
// if attackWave = 1 then
15589: LD_EXP 20
15593: PUSH
15594: LD_INT 1
15596: EQUAL
15597: IFFALSE 15668
// begin DialogueOn ;
15599: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15603: LD_EXP 40
15607: PPUSH
15608: LD_STRING DO-1-radio-1
15610: PPUSH
15611: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15615: LD_EXP 31
15619: PPUSH
15620: LD_STRING DH-1-radio-1-
15622: PPUSH
15623: CALL_OW 88
// if IsOk ( Markov ) then
15627: LD_EXP 38
15631: PPUSH
15632: CALL_OW 302
15636: IFFALSE 15662
// begin Say ( Markov , DMar-1-radio-1 ) ;
15638: LD_EXP 38
15642: PPUSH
15643: LD_STRING DMar-1-radio-1
15645: PPUSH
15646: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15650: LD_EXP 31
15654: PPUSH
15655: LD_STRING DH-2-radio-1
15657: PPUSH
15658: CALL_OW 88
// end ; DialogueOff ;
15662: CALL_OW 7
// end else
15666: GO 15692
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15668: LD_EXP 40
15672: PPUSH
15673: LD_STRING DO-1-radio-u
15675: PPUSH
15676: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15680: LD_EXP 31
15684: PPUSH
15685: LD_STRING DH-1-radio-u
15687: PPUSH
15688: CALL_OW 88
// end ; end ;
15692: LD_VAR 0 1
15696: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15697: LD_EXP 47
15701: PPUSH
15702: LD_INT 95
15704: PUSH
15705: LD_INT 8
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 72
15716: IFFALSE 15819
15718: GO 15720
15720: DISABLE
15721: LD_INT 0
15723: PPUSH
// begin enable ;
15724: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15725: LD_ADDR_VAR 0 1
15729: PUSH
15730: LD_EXP 47
15734: PPUSH
15735: LD_INT 95
15737: PUSH
15738: LD_INT 8
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 72
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15780
// begin usForces := usForces diff i ;
15753: LD_ADDR_EXP 47
15757: PUSH
15758: LD_EXP 47
15762: PUSH
15763: LD_VAR 0 1
15767: DIFF
15768: ST_TO_ADDR
// RemoveUnit ( i ) ;
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 64
// end ;
15778: GO 15750
15780: POP
15781: POP
// if not americanHasEscaped and attackWave = 1 then
15782: LD_EXP 9
15786: NOT
15787: PUSH
15788: LD_EXP 20
15792: PUSH
15793: LD_INT 1
15795: EQUAL
15796: AND
15797: IFFALSE 15819
// begin americanHasEscaped := true ;
15799: LD_ADDR_EXP 9
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15807: LD_EXP 31
15811: PPUSH
15812: LD_STRING DH-2-assault-a
15814: PPUSH
15815: CALL_OW 88
// end ; end ;
15819: PPOPN 1
15821: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15822: LD_INT 4
15824: PPUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 70
15839: PUSH
15840: LD_EXP 12
15844: NOT
15845: AND
15846: IFFALSE 15863
15848: GO 15850
15850: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15851: LD_EXP 39
15855: PPUSH
15856: LD_STRING DF-1-attack
15858: PPUSH
15859: CALL_OW 94
15863: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15864: LD_INT 5
15866: PPUSH
15867: CALL_OW 255
15871: PUSH
15872: LD_INT 2
15874: EQUAL
15875: IFFALSE 15891
15877: GO 15879
15879: DISABLE
// begin enable ;
15880: ENABLE
// SetSide ( arDepot , 5 ) ;
15881: LD_INT 5
15883: PPUSH
15884: LD_INT 5
15886: PPUSH
15887: CALL_OW 235
// end ;
15891: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15892: LD_INT 22
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 21
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 69
15920: NOT
15921: PUSH
15922: LD_INT 22
15924: PUSH
15925: LD_INT 4
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 69
15936: NOT
15937: AND
15938: PUSH
15939: LD_EXP 12
15943: NOT
15944: AND
15945: PUSH
15946: LD_EXP 16
15950: PUSH
15951: LD_INT 90
15953: GREATER
15954: AND
15955: PUSH
15956: LD_INT 7
15958: PPUSH
15959: LD_INT 22
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PPUSH
15983: CALL_OW 70
15987: AND
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 50
16001: PUSH
16002: EMPTY
16003: LIST
16004: PUSH
16005: LD_INT 30
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PPUSH
16020: CALL_OW 69
16024: AND
16025: IFFALSE 16834
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
// begin depot := usDepot ;
16037: LD_ADDR_VAR 0 5
16041: PUSH
16042: LD_INT 11
16044: ST_TO_ADDR
// if not depot then
16045: LD_VAR 0 5
16049: NOT
16050: IFFALSE 16090
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16052: LD_ADDR_VAR 0 5
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 30
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16090: LD_ADDR_VAR 0 1
16094: PUSH
16095: LD_EXP 45
16099: PPUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 72
16114: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_EXP 45
16124: PPUSH
16125: LD_INT 26
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 72
16139: ST_TO_ADDR
// if IsOk ( Kaia ) then
16140: LD_EXP 36
16144: PPUSH
16145: CALL_OW 302
16149: IFFALSE 16170
// speaker := [ Kaia , DK ] else
16151: LD_ADDR_VAR 0 3
16155: PUSH
16156: LD_EXP 36
16160: PUSH
16161: LD_STRING DK
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: ST_TO_ADDR
16168: GO 16250
// if randomMen then
16170: LD_VAR 0 1
16174: IFFALSE 16209
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: PUSH
16200: LD_STRING DArm
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: ST_TO_ADDR
16207: GO 16250
// if randomWomen then
16209: LD_VAR 0 2
16213: IFFALSE 16248
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16215: LD_ADDR_VAR 0 3
16219: PUSH
16220: LD_VAR 0 2
16224: PUSH
16225: LD_INT 1
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 12
16237: ARRAY
16238: PUSH
16239: LD_STRING DArf
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: ST_TO_ADDR
16246: GO 16250
// exit ;
16248: GO 16834
// if IsInUnit ( speaker [ 1 ] ) then
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: CALL_OW 310
16263: IFFALSE 16286
// place := IsInUnit ( speaker [ 1 ] ) else
16265: LD_ADDR_VAR 0 4
16269: PUSH
16270: LD_VAR 0 3
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 310
16283: ST_TO_ADDR
16284: GO 16300
// place := speaker [ 1 ] ;
16286: LD_ADDR_VAR 0 4
16290: PUSH
16291: LD_VAR 0 3
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16300: LD_VAR 0 4
16304: PPUSH
16305: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 250
16318: PPUSH
16319: LD_VAR 0 4
16323: PPUSH
16324: CALL_OW 251
16328: PPUSH
16329: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16333: LD_INT 70
16335: PPUSH
16336: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16340: LD_EXP 41
16344: PPUSH
16345: CALL_OW 305
16349: NOT
16350: IFFALSE 16354
// exit ;
16352: GO 16834
// allowConvoys := false ;
16354: LD_ADDR_EXP 13
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// blockAttack := true ;
16362: LD_ADDR_EXP 29
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// InGameOn ;
16370: CALL_OW 8
// wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16381: LD_EXP 41
16385: PPUSH
16386: LD_STRING DI-1-land
16388: PPUSH
16389: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 310
16406: IFFALSE 16421
// ComExit ( speaker [ 1 ] ) ;
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: CALL 79266 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: PPUSH
16430: LD_EXP 41
16434: PPUSH
16435: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16439: LD_VAR 0 3
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: LD_EXP 41
16452: PPUSH
16453: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16457: LD_EXP 41
16461: PPUSH
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PPUSH
16471: CALL_OW 119
// wait ( 0 0$1 ) ;
16475: LD_INT 35
16477: PPUSH
16478: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PUSH
16500: LD_STRING -1-land
16502: STR
16503: PPUSH
16504: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16508: LD_EXP 41
16512: PPUSH
16513: LD_STRING DI-2-land
16515: PPUSH
16516: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16520: LD_VAR 0 3
16524: PUSH
16525: LD_INT 1
16527: ARRAY
16528: PPUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 2
16536: ARRAY
16537: PUSH
16538: LD_STRING -2-land
16540: STR
16541: PPUSH
16542: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16546: LD_VAR 0 3
16550: PUSH
16551: LD_INT 1
16553: ARRAY
16554: PPUSH
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 2
16562: ARRAY
16563: PUSH
16564: LD_STRING -3-land
16566: STR
16567: PPUSH
16568: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16572: LD_EXP 31
16576: PPUSH
16577: LD_STRING DH-1-land
16579: PPUSH
16580: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16584: LD_VAR 0 5
16588: PPUSH
16589: CALL_OW 313
16593: PUSH
16594: LD_INT 6
16596: EQUAL
16597: IFFALSE 16617
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16599: LD_VAR 0 5
16603: PPUSH
16604: CALL_OW 313
16608: PUSH
16609: LD_INT 1
16611: ARRAY
16612: PPUSH
16613: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16617: LD_EXP 41
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: CALL_OW 235
// CenterOnUnits ( depot ) ;
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16638: LD_EXP 41
16642: PPUSH
16643: LD_VAR 0 5
16647: PPUSH
16648: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16652: LD_VAR 0 3
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16670: LD_INT 35
16672: PPUSH
16673: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16677: LD_EXP 41
16681: PPUSH
16682: CALL_OW 310
16686: PUSH
16687: LD_EXP 41
16691: PPUSH
16692: CALL_OW 302
16696: NOT
16697: OR
16698: PUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: CALL_OW 302
16708: NOT
16709: OR
16710: IFFALSE 16670
// InGameOff ;
16712: CALL_OW 9
// blockAttack := false ;
16716: LD_ADDR_EXP 29
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16724: LD_EXP 41
16728: PPUSH
16729: CALL_OW 302
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 16834
// if not IsOk ( depot ) then
16738: LD_VAR 0 5
16742: PPUSH
16743: CALL_OW 302
16747: NOT
16748: IFFALSE 16811
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16750: LD_EXP 41
16754: PPUSH
16755: LD_INT 30
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16765: LD_INT 35
16767: PPUSH
16768: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16772: LD_EXP 41
16776: PPUSH
16777: LD_INT 30
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 307
16787: PUSH
16788: LD_EXP 41
16792: PPUSH
16793: CALL_OW 301
16797: OR
16798: IFFALSE 16765
// RemoveUnit ( Ibrahim ) ;
16800: LD_EXP 41
16804: PPUSH
16805: CALL_OW 64
// exit ;
16809: GO 16834
// end ; ibrahimInDepot := true ;
16811: LD_ADDR_EXP 26
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// allowConvoys := true ;
16819: LD_ADDR_EXP 13
16823: PUSH
16824: LD_INT 1
16826: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16827: LD_STRING IbrahimInDepot
16829: PPUSH
16830: CALL_OW 97
// end ;
16834: PPOPN 5
16836: END
// export function IbrahimQuery ; begin
16837: LD_INT 0
16839: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16840: LD_STRING IbrahimQuery
16842: PPUSH
16843: CALL_OW 97
16847: PUSH
16848: LD_INT 1
16850: DOUBLE
16851: EQUAL
16852: IFTRUE 16856
16854: GO 17226
16856: POP
// begin allowConvoys := false ;
16857: LD_ADDR_EXP 13
16861: PUSH
16862: LD_INT 0
16864: ST_TO_ADDR
// ibrahimInDepot := false ;
16865: LD_ADDR_EXP 26
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// InGameOn ;
16873: CALL_OW 8
// DialogueOn ;
16877: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16881: LD_EXP 31
16885: PPUSH
16886: CALL_OW 87
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16897: LD_EXP 31
16901: PPUSH
16902: LD_STRING DH-1-interrogation
16904: PPUSH
16905: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16909: LD_EXP 41
16913: PPUSH
16914: LD_STRING DI-1-interrogation
16916: PPUSH
16917: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16921: LD_EXP 31
16925: PPUSH
16926: LD_STRING DH-2-interrogation
16928: PPUSH
16929: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16933: LD_EXP 41
16937: PPUSH
16938: LD_STRING DI-2-interrogation
16940: PPUSH
16941: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16945: LD_EXP 31
16949: PPUSH
16950: LD_STRING DH-3-interrogation
16952: PPUSH
16953: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16957: LD_EXP 41
16961: PPUSH
16962: LD_STRING DI-3-interrogation
16964: PPUSH
16965: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16969: LD_EXP 31
16973: PPUSH
16974: LD_STRING DH-4-interrogation
16976: PPUSH
16977: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16981: LD_EXP 41
16985: PPUSH
16986: LD_STRING DI-4-interrogation
16988: PPUSH
16989: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16993: LD_EXP 31
16997: PPUSH
16998: LD_STRING DH-5-interrogation
17000: PPUSH
17001: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
17005: LD_EXP 41
17009: PPUSH
17010: LD_STRING DI-5-interrogation
17012: PPUSH
17013: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17017: LD_INT 10
17019: PPUSH
17020: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17024: LD_EXP 31
17028: PPUSH
17029: LD_STRING DH-6-interrogation
17031: PPUSH
17032: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17036: LD_EXP 41
17040: PPUSH
17041: LD_STRING DI-6-interrogation
17043: PPUSH
17044: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17048: LD_EXP 41
17052: PPUSH
17053: LD_STRING DI-7-interrogation
17055: PPUSH
17056: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17060: LD_EXP 31
17064: PPUSH
17065: LD_STRING DH-7-interrogation
17067: PPUSH
17068: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17072: LD_INT 10
17074: PPUSH
17075: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17079: LD_EXP 31
17083: PPUSH
17084: LD_STRING DH-8-interrogation
17086: PPUSH
17087: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17091: LD_EXP 41
17095: PPUSH
17096: LD_STRING DI-8-interrogation
17098: PPUSH
17099: CALL_OW 88
// wait ( 0 0$1 ) ;
17103: LD_INT 35
17105: PPUSH
17106: CALL_OW 67
// DialogueOff ;
17110: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17114: LD_STRING IbrahimDecisionQuery
17116: PPUSH
17117: CALL_OW 97
17121: PUSH
17122: LD_INT 1
17124: DOUBLE
17125: EQUAL
17126: IFTRUE 17130
17128: GO 17154
17130: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17131: LD_EXP 41
17135: PPUSH
17136: LD_STRING DI-1-kill
17138: PPUSH
17139: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17143: LD_EXP 41
17147: PPUSH
17148: CALL_OW 66
// end ; 2 :
17152: GO 17220
17154: LD_INT 2
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17219
17162: POP
// begin SetSide ( Ibrahim , 6 ) ;
17163: LD_EXP 41
17167: PPUSH
17168: LD_INT 6
17170: PPUSH
17171: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17175: LD_EXP 41
17179: PPUSH
17180: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17184: LD_EXP 41
17188: PPUSH
17189: LD_INT 66
17191: PPUSH
17192: LD_INT 2
17194: PPUSH
17195: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17199: LD_EXP 41
17203: PPUSH
17204: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17208: LD_EXP 31
17212: PPUSH
17213: CALL_OW 122
// end ; end ;
17217: GO 17220
17219: POP
// InGameOff ;
17220: CALL_OW 9
// end ; 2 :
17224: GO 17240
17226: LD_INT 2
17228: DOUBLE
17229: EQUAL
17230: IFTRUE 17234
17232: GO 17239
17234: POP
// exit ; end ;
17235: GO 17324
17237: GO 17240
17239: POP
// allowConvoys := true ;
17240: LD_ADDR_EXP 13
17244: PUSH
17245: LD_INT 1
17247: ST_TO_ADDR
// blockAttack := false ;
17248: LD_ADDR_EXP 29
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17256: LD_INT 5250
17258: PPUSH
17259: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17263: LD_INT 35
17265: PPUSH
17266: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17270: LD_INT 81
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 21
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: NOT
17299: IFFALSE 17263
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17301: LD_EXP 41
17305: PPUSH
17306: LD_INT 34
17308: PPUSH
17309: LD_INT 21
17311: PPUSH
17312: CALL_OW 111
// ibrahimIsFree := true ;
17316: LD_ADDR_EXP 27
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// end ;
17324: LD_VAR 0 1
17328: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17329: LD_EXP 27
17333: PUSH
17334: LD_EXP 41
17338: PPUSH
17339: CALL_OW 302
17343: AND
17344: PUSH
17345: LD_INT 2
17347: PPUSH
17348: LD_EXP 41
17352: PPUSH
17353: CALL_OW 292
17357: AND
17358: IFFALSE 18170
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
// begin wait ( 0 0$10 ) ;
17371: LD_INT 350
17373: PPUSH
17374: CALL_OW 67
// allowConvoys := false ;
17378: LD_ADDR_EXP 13
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// blockAttack := true ;
17386: LD_ADDR_EXP 29
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// depot := usDepot ;
17394: LD_ADDR_VAR 0 4
17398: PUSH
17399: LD_INT 11
17401: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17402: LD_INT 11
17404: NOT
17405: PUSH
17406: LD_INT 22
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 50
17418: PUSH
17419: EMPTY
17420: LIST
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: AND
17442: IFFALSE 17489
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 50
17461: PUSH
17462: EMPTY
17463: LIST
17464: PUSH
17465: LD_INT 30
17467: PUSH
17468: LD_INT 0
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: PUSH
17485: LD_INT 1
17487: ARRAY
17488: ST_TO_ADDR
// InGameOn ;
17489: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17493: LD_EXP 41
17497: PPUSH
17498: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17502: LD_EXP 31
17506: PPUSH
17507: LD_EXP 41
17511: PPUSH
17512: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17516: LD_EXP 41
17520: PPUSH
17521: LD_EXP 31
17525: PPUSH
17526: CALL_OW 119
// DialogueOn ;
17530: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17534: LD_EXP 41
17538: PPUSH
17539: LD_STRING DI-1-free
17541: PPUSH
17542: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17546: LD_EXP 31
17550: PPUSH
17551: LD_STRING DH-1-free
17553: PPUSH
17554: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17558: LD_EXP 41
17562: PPUSH
17563: LD_STRING DI-2-free
17565: PPUSH
17566: CALL_OW 88
// changeClass := 0 ;
17570: LD_ADDR_VAR 0 1
17574: PUSH
17575: LD_INT 0
17577: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17578: LD_STRING IbrahimJoinQuery
17580: PPUSH
17581: CALL_OW 97
17585: PUSH
17586: LD_INT 1
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17605
17594: POP
// begin changeClass := 1 ;
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// end ; 2 :
17603: GO 17857
17605: LD_INT 2
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17777
17613: POP
// begin Say ( Heike , DH-1-decline ) ;
17614: LD_EXP 31
17618: PPUSH
17619: LD_STRING DH-1-decline
17621: PPUSH
17622: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17626: LD_EXP 41
17630: PPUSH
17631: LD_STRING DI-1-decline
17633: PPUSH
17634: CALL_OW 88
// DialogueOff ;
17638: CALL_OW 7
// InGameOff ;
17642: CALL_OW 9
// blockAttack := false ;
17646: LD_ADDR_EXP 29
17650: PUSH
17651: LD_INT 0
17653: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17654: LD_EXP 41
17658: PPUSH
17659: LD_INT 30
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: CALL_OW 111
// p := 0 ;
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_INT 0
17676: ST_TO_ADDR
// repeat p := p + 1 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_VAR 0 3
17686: PUSH
17687: LD_INT 1
17689: PLUS
17690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17691: LD_INT 35
17693: PPUSH
17694: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17698: LD_EXP 41
17702: PPUSH
17703: LD_INT 30
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 307
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 101
17726: PUSH
17727: LD_INT 6
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: NOT
17743: OR
17744: PUSH
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 10
17752: GREATER
17753: OR
17754: IFFALSE 17677
// RemoveUnit ( Ibrahim ) ;
17756: LD_EXP 41
17760: PPUSH
17761: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17765: LD_INT 1
17767: PPUSH
17768: LD_STRING 03_IbrahimHasEscaped
17770: PPUSH
17771: CALL_OW 39
// end ; 3 :
17775: GO 17857
17777: LD_INT 3
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17856
17785: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17786: LD_EXP 31
17790: PPUSH
17791: LD_STRING DH-1-radio-hq
17793: PPUSH
17794: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17798: LD_EXP 40
17802: PPUSH
17803: LD_STRING DO-1-radio-hq
17805: PPUSH
17806: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17810: LD_EXP 31
17814: PPUSH
17815: LD_STRING DH-2-radio-hq
17817: PPUSH
17818: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17822: LD_EXP 40
17826: PPUSH
17827: LD_STRING DO-2-radio-hq
17829: PPUSH
17830: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17834: LD_EXP 31
17838: PPUSH
17839: LD_STRING DH-3-radio-hq
17841: PPUSH
17842: CALL_OW 88
// changeClass := 1 ;
17846: LD_ADDR_VAR 0 1
17850: PUSH
17851: LD_INT 1
17853: ST_TO_ADDR
// end ; end ;
17854: GO 17857
17856: POP
// if changeClass then
17857: LD_VAR 0 1
17861: IFFALSE 18170
// begin Say ( Heike , DH-1-agree ) ;
17863: LD_EXP 31
17867: PPUSH
17868: LD_STRING DH-1-agree
17870: PPUSH
17871: CALL_OW 88
// if IsOk ( Givi ) then
17875: LD_EXP 32
17879: PPUSH
17880: CALL_OW 302
17884: IFFALSE 17922
// begin Say ( Givi , DG-1-agree ) ;
17886: LD_EXP 32
17890: PPUSH
17891: LD_STRING DG-1-agree
17893: PPUSH
17894: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17898: LD_EXP 31
17902: PPUSH
17903: LD_STRING DH-2-agree
17905: PPUSH
17906: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17910: LD_EXP 32
17914: PPUSH
17915: LD_STRING DG-2-agree
17917: PPUSH
17918: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17922: LD_EXP 41
17926: PPUSH
17927: CALL_OW 87
// DialogueOff ;
17931: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17935: LD_VAR 0 4
17939: PPUSH
17940: CALL_OW 313
17944: PUSH
17945: LD_INT 6
17947: EQUAL
17948: IFFALSE 17968
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17950: LD_VAR 0 4
17954: PPUSH
17955: CALL_OW 313
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PPUSH
17964: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17968: LD_EXP 41
17972: PPUSH
17973: LD_INT 2
17975: PPUSH
17976: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17980: LD_ADDR_VAR 0 5
17984: PUSH
17985: LD_EXP 41
17989: PPUSH
17990: CALL_OW 250
17994: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17995: LD_ADDR_VAR 0 6
17999: PUSH
18000: LD_EXP 41
18004: PPUSH
18005: CALL_OW 251
18009: ST_TO_ADDR
// if depot then
18010: LD_VAR 0 4
18014: IFFALSE 18063
// begin ComEnterUnit ( Ibrahim , depot ) ;
18016: LD_EXP 41
18020: PPUSH
18021: LD_VAR 0 4
18025: PPUSH
18026: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18030: LD_INT 35
18032: PPUSH
18033: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18037: LD_EXP 41
18041: PPUSH
18042: CALL_OW 310
18046: IFFALSE 18030
// b := IsInUnit ( Ibrahim ) ;
18048: LD_ADDR_VAR 0 2
18052: PUSH
18053: LD_EXP 41
18057: PPUSH
18058: CALL_OW 310
18062: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18063: LD_EXP 41
18067: PPUSH
18068: CALL_OW 64
// uc_side := 2 ;
18072: LD_ADDR_OWVAR 20
18076: PUSH
18077: LD_INT 2
18079: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18080: LD_ADDR_EXP 41
18084: PUSH
18085: LD_STRING Ibrahim
18087: PPUSH
18088: LD_INT 0
18090: PPUSH
18091: LD_STRING 
18093: PPUSH
18094: CALL 41177 0 3
18098: ST_TO_ADDR
// if depot then
18099: LD_VAR 0 4
18103: IFFALSE 18121
// PlaceHumanInUnit ( Ibrahim , b ) else
18105: LD_EXP 41
18109: PPUSH
18110: LD_VAR 0 2
18114: PPUSH
18115: CALL_OW 52
18119: GO 18143
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18121: LD_EXP 41
18125: PPUSH
18126: LD_VAR 0 5
18130: PPUSH
18131: LD_VAR 0 6
18135: PPUSH
18136: LD_INT 0
18138: PPUSH
18139: CALL_OW 48
// InGameOff ;
18143: CALL_OW 9
// allowConvoys := true ;
18147: LD_ADDR_EXP 13
18151: PUSH
18152: LD_INT 1
18154: ST_TO_ADDR
// blockAttack := false ;
18155: LD_ADDR_EXP 29
18159: PUSH
18160: LD_INT 0
18162: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18163: LD_STRING ACH_IBRAHIM
18165: PPUSH
18166: CALL_OW 543
// end ; end ;
18170: PPOPN 6
18172: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18173: LD_EXP 36
18177: PPUSH
18178: CALL_OW 256
18182: PUSH
18183: LD_INT 3
18185: LESS
18186: IFFALSE 18253
18188: GO 18190
18190: DISABLE
// begin DialogueOn ;
18191: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18195: LD_EXP 36
18199: PPUSH
18200: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18204: LD_EXP 36
18208: PPUSH
18209: LD_STRING DK-keydeath-1
18211: PPUSH
18212: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18216: LD_EXP 31
18220: PPUSH
18221: LD_STRING DH-keydeath-2
18223: PPUSH
18224: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18228: LD_EXP 31
18232: PPUSH
18233: LD_STRING DH-keydeath-3
18235: PPUSH
18236: CALL_OW 88
// DialogueOff ;
18240: CALL_OW 7
// KillUnit ( Kaia ) ;
18244: LD_EXP 36
18248: PPUSH
18249: CALL_OW 66
// end ;
18253: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18254: LD_EXP 12
18258: PUSH
18259: LD_EXP 22
18263: PUSH
18264: LD_INT 1
18266: LESS
18267: AND
18268: IFFALSE 18837
18270: GO 18272
18272: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18273: LD_INT 22
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 25
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: IFFALSE 18397
// begin ChangeSideFog ( 1 , 2 ) ;
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 2
18326: PPUSH
18327: CALL_OW 343
// Query ( DestroyEnemy ) ;
18331: LD_STRING DestroyEnemy
18333: PPUSH
18334: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18338: LD_INT 35
18340: PPUSH
18341: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18345: LD_INT 22
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 25
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 3
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: PUSH
18392: LD_INT 0
18394: EQUAL
18395: IFFALSE 18338
// end ; if tick <= 45 45$00 then
18397: LD_OWVAR 1
18401: PUSH
18402: LD_INT 94500
18404: LESSEQUAL
18405: IFFALSE 18414
// SetAchievement ( ACH_HSPEED_3 ) ;
18407: LD_STRING ACH_HSPEED_3
18409: PPUSH
18410: CALL_OW 543
// DialogueOn ;
18414: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18418: LD_EXP 31
18422: PPUSH
18423: LD_STRING DH-1-final
18425: PPUSH
18426: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18430: LD_OWVAR 1
18434: PUSH
18435: LD_INT 138600
18437: PUSH
18438: LD_INT 134400
18440: PUSH
18441: LD_INT 130200
18443: PUSH
18444: LD_INT 126000
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: PUSH
18453: LD_OWVAR 67
18457: ARRAY
18458: LESSEQUAL
18459: IFFALSE 18473
// AddMedal ( med1 , 1 ) else
18461: LD_STRING med1
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 101
18471: GO 18484
// AddMedal ( med1 , - 1 ) ;
18473: LD_STRING med1
18475: PPUSH
18476: LD_INT 1
18478: NEG
18479: PPUSH
18480: CALL_OW 101
// if vehCounter >= 2 then
18484: LD_EXP 23
18488: PUSH
18489: LD_INT 2
18491: GREATEREQUAL
18492: IFFALSE 18506
// AddMedal ( med2 , 1 ) else
18494: LD_STRING med2
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 101
18504: GO 18517
// AddMedal ( med2 , - 1 ) ;
18506: LD_STRING med2
18508: PPUSH
18509: LD_INT 1
18511: NEG
18512: PPUSH
18513: CALL_OW 101
// if deadCounter = 0 then
18517: LD_EXP 10
18521: PUSH
18522: LD_INT 0
18524: EQUAL
18525: IFFALSE 18539
// AddMedal ( med3 , 1 ) else
18527: LD_STRING med3
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 101
18537: GO 18550
// AddMedal ( med3 , - 1 ) ;
18539: LD_STRING med3
18541: PPUSH
18542: LD_INT 1
18544: NEG
18545: PPUSH
18546: CALL_OW 101
// GiveMedals ( MAIN ) ;
18550: LD_STRING MAIN
18552: PPUSH
18553: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18557: LD_INT 22
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 23
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 21
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 69
18596: PPUSH
18597: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18601: LD_EXP 31
18605: PPUSH
18606: LD_STRING 03_Heike
18608: PPUSH
18609: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18613: LD_EXP 35
18617: PPUSH
18618: LD_STRING 03_Aviradze
18620: PPUSH
18621: CALL_OW 38
// if Givi then
18625: LD_EXP 32
18629: IFFALSE 18643
// SaveCharacters ( Givi , 03_Givi ) ;
18631: LD_EXP 32
18635: PPUSH
18636: LD_STRING 03_Givi
18638: PPUSH
18639: CALL_OW 38
// if Mike then
18643: LD_EXP 33
18647: IFFALSE 18661
// SaveCharacters ( Mike , 03_Mike ) ;
18649: LD_EXP 33
18653: PPUSH
18654: LD_STRING 03_Mike
18656: PPUSH
18657: CALL_OW 38
// if Kamil then
18661: LD_EXP 34
18665: IFFALSE 18679
// SaveCharacters ( Kamil , 03_Kamil ) ;
18667: LD_EXP 34
18671: PPUSH
18672: LD_STRING 03_Kamil
18674: PPUSH
18675: CALL_OW 38
// if Kaia then
18679: LD_EXP 36
18683: IFFALSE 18697
// SaveCharacters ( Kaia , 03_Kaia ) ;
18685: LD_EXP 36
18689: PPUSH
18690: LD_STRING 03_Kaia
18692: PPUSH
18693: CALL_OW 38
// if Sophia then
18697: LD_EXP 37
18701: IFFALSE 18715
// SaveCharacters ( Sophia , 03_Sophia ) ;
18703: LD_EXP 37
18707: PPUSH
18708: LD_STRING 03_Sophia
18710: PPUSH
18711: CALL_OW 38
// if Markov then
18715: LD_EXP 38
18719: IFFALSE 18733
// SaveCharacters ( Markov , 03_Markov ) ;
18721: LD_EXP 38
18725: PPUSH
18726: LD_STRING 03_Markov
18728: PPUSH
18729: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18733: LD_EXP 41
18737: PUSH
18738: LD_EXP 41
18742: PPUSH
18743: CALL_OW 255
18747: PUSH
18748: LD_INT 2
18750: EQUAL
18751: AND
18752: IFFALSE 18773
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18754: LD_STRING enableBioCharacter(BIO_IBRA)
18756: PPUSH
18757: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18761: LD_EXP 41
18765: PPUSH
18766: LD_STRING 03_Ibrahim
18768: PPUSH
18769: CALL_OW 38
// end ; if heikeSecondSquad then
18773: LD_EXP 45
18777: IFFALSE 18791
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18779: LD_EXP 45
18783: PPUSH
18784: LD_STRING 03_others
18786: PPUSH
18787: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18791: LD_EXP 10
18795: PPUSH
18796: LD_STRING 03_DeadCounter
18798: PPUSH
18799: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18803: LD_EXP 30
18807: PPUSH
18808: LD_STRING 03_CargoRecycled
18810: PPUSH
18811: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18815: LD_STRING enableBioCharacter(BIO_OMAR)
18817: PPUSH
18818: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18822: LD_STRING enableBioCharacter(BIO_FARM)
18824: PPUSH
18825: CALL_OW 559
// YouWin ;
18829: CALL_OW 103
// DialogueOff ;
18833: CALL_OW 7
// end ; end_of_file
18837: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL 35936 0 1
// if un = Heike then
18847: LD_VAR 0 1
18851: PUSH
18852: LD_EXP 31
18856: EQUAL
18857: IFFALSE 18866
// YouLost ( Heike ) ;
18859: LD_STRING Heike
18861: PPUSH
18862: CALL_OW 104
// if un = Aviradze then
18866: LD_VAR 0 1
18870: PUSH
18871: LD_EXP 35
18875: EQUAL
18876: IFFALSE 18885
// YouLost ( Aviradze ) ;
18878: LD_STRING Aviradze
18880: PPUSH
18881: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18885: LD_VAR 0 1
18889: PUSH
18890: LD_INT 11
18892: EQUAL
18893: PUSH
18894: LD_EXP 12
18898: NOT
18899: AND
18900: IFFALSE 18909
// YouLost ( Depot ) ;
18902: LD_STRING Depot
18904: PPUSH
18905: CALL_OW 104
// if un = arDepot then
18909: LD_VAR 0 1
18913: PUSH
18914: LD_INT 5
18916: EQUAL
18917: IFFALSE 18926
// YouLost ( FarmerDepot ) ;
18919: LD_STRING FarmerDepot
18921: PPUSH
18922: CALL_OW 104
// if un = Farmer then
18926: LD_VAR 0 1
18930: PUSH
18931: LD_EXP 39
18935: EQUAL
18936: IFFALSE 18945
// YouLost ( Farmer ) ;
18938: LD_STRING Farmer
18940: PPUSH
18941: CALL_OW 104
// if un in usForces then
18945: LD_VAR 0 1
18949: PUSH
18950: LD_EXP 47
18954: IN
18955: IFFALSE 18973
// usForces := usForces diff un ;
18957: LD_ADDR_EXP 47
18961: PUSH
18962: LD_EXP 47
18966: PUSH
18967: LD_VAR 0 1
18971: DIFF
18972: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18973: LD_VAR 0 1
18977: PUSH
18978: LD_INT 22
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 23
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 21
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 69
19017: IN
19018: IFFALSE 19034
// deadCounter := deadCounter + 1 ;
19020: LD_ADDR_EXP 10
19024: PUSH
19025: LD_EXP 10
19029: PUSH
19030: LD_INT 1
19032: PLUS
19033: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 22
19041: PUSH
19042: LD_INT 4
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 34
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: IN
19068: PUSH
19069: LD_EXP 19
19073: NOT
19074: AND
19075: IFFALSE 19085
// firstConvoyDestroyed := true ;
19077: LD_ADDR_EXP 19
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if un in usAttackers then
19085: LD_VAR 0 1
19089: PUSH
19090: LD_EXP 50
19094: IN
19095: IFFALSE 19113
// usAttackers := usAttackers diff un ;
19097: LD_ADDR_EXP 50
19101: PUSH
19102: LD_EXP 50
19106: PUSH
19107: LD_VAR 0 1
19111: DIFF
19112: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19113: LD_VAR 0 1
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: IN
19147: IFFALSE 19163
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19149: LD_ADDR_EXP 21
19153: PUSH
19154: LD_EXP 21
19158: PUSH
19159: LD_INT 1
19161: PLUS
19162: ST_TO_ADDR
// end ;
19163: PPOPN 1
19165: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19166: LD_VAR 0 2
19170: PUSH
19171: LD_EXP 41
19175: EQUAL
19176: PUSH
19177: LD_EXP 26
19181: AND
19182: IFFALSE 19367
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19184: LD_INT 22
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 50
19206: PUSH
19207: EMPTY
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 69
19219: IFFALSE 19273
// begin InGameOn ;
19221: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19225: LD_EXP 41
19229: PPUSH
19230: LD_INT 11
19232: PPUSH
19233: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19237: LD_INT 35
19239: PPUSH
19240: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19244: LD_EXP 41
19248: PPUSH
19249: LD_INT 11
19251: PPUSH
19252: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19256: LD_EXP 41
19260: PPUSH
19261: CALL_OW 310
19265: IFFALSE 19237
// InGameOff ;
19267: CALL_OW 9
// end else
19271: GO 19367
// begin SetSide ( Ibrahim , 6 ) ;
19273: LD_EXP 41
19277: PPUSH
19278: LD_INT 6
19280: PPUSH
19281: CALL_OW 235
// ibrahimInDepot := false ;
19285: LD_ADDR_EXP 26
19289: PUSH
19290: LD_INT 0
19292: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19293: LD_EXP 41
19297: PPUSH
19298: LD_INT 30
19300: PPUSH
19301: LD_INT 1
19303: PPUSH
19304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19308: LD_INT 35
19310: PPUSH
19311: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19315: LD_EXP 41
19319: PPUSH
19320: LD_INT 30
19322: PPUSH
19323: LD_INT 1
19325: PPUSH
19326: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19330: LD_EXP 41
19334: PPUSH
19335: LD_INT 30
19337: PPUSH
19338: LD_INT 1
19340: PPUSH
19341: CALL_OW 307
19345: PUSH
19346: LD_EXP 41
19350: PPUSH
19351: CALL_OW 301
19355: OR
19356: IFFALSE 19308
// RemoveUnit ( Ibrahim ) ;
19358: LD_EXP 41
19362: PPUSH
19363: CALL_OW 64
// end ; end ; end ;
19367: PPOPN 2
19369: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19370: LD_VAR 0 2
19374: PUSH
19375: LD_EXP 31
19379: EQUAL
19380: PUSH
19381: LD_VAR 0 1
19385: PUSH
19386: LD_INT 11
19388: EQUAL
19389: AND
19390: PUSH
19391: LD_EXP 26
19395: AND
19396: IFFALSE 19402
// IbrahimQuery ;
19398: CALL 16837 0 0
// end ;
19402: PPOPN 2
19404: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 141
// if oldId in usAttackers then
19414: LD_VAR 0 2
19418: PUSH
19419: LD_EXP 50
19423: IN
19424: IFFALSE 19442
// usAttackers := usAttackers diff oldId ;
19426: LD_ADDR_EXP 50
19430: PUSH
19431: LD_EXP 50
19435: PUSH
19436: LD_VAR 0 2
19440: DIFF
19441: ST_TO_ADDR
// if newId in usAttackers then
19442: LD_VAR 0 1
19446: PUSH
19447: LD_EXP 50
19451: IN
19452: IFFALSE 19470
// usAttackers := usAttackers diff newId ;
19454: LD_ADDR_EXP 50
19458: PUSH
19459: LD_EXP 50
19463: PUSH
19464: LD_VAR 0 1
19468: DIFF
19469: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 4
19477: EQUAL
19478: PUSH
19479: LD_EXP 19
19483: NOT
19484: AND
19485: IFFALSE 19495
// firstConvoyDestroyed := true ;
19487: LD_ADDR_EXP 19
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 264
19504: PUSH
19505: LD_INT 12
19507: EQUAL
19508: IFFALSE 19546
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19510: LD_ADDR_EXP 14
19514: PUSH
19515: LD_EXP 14
19519: PUSH
19520: LD_INT 1
19522: PLUS
19523: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19524: LD_VAR 0 1
19528: PPUSH
19529: LD_INT 1
19531: PPUSH
19532: CALL_OW 289
19536: PUSH
19537: LD_INT 0
19539: EQUAL
19540: IFFALSE 19546
// EmptyCargoDialog ;
19542: CALL 15455 0 0
// end ; end ;
19546: PPOPN 4
19548: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 2
19556: EQUAL
19557: PUSH
19558: LD_VAR 0 2
19562: PUSH
19563: LD_INT 5
19565: EQUAL
19566: AND
19567: IFFALSE 19576
// YouLost ( Attack ) ;
19569: LD_STRING Attack
19571: PPUSH
19572: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19576: LD_VAR 0 1
19580: PUSH
19581: LD_INT 2
19583: EQUAL
19584: PUSH
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: AND
19594: IFFALSE 19604
// americanContact := true ;
19596: LD_ADDR_EXP 5
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// end ;
19604: PPOPN 2
19606: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 255
19616: PUSH
19617: LD_INT 1
19619: EQUAL
19620: PUSH
19621: LD_EXP 7
19625: NOT
19626: AND
19627: IFFALSE 19761
// begin if GetBType ( b ) = b_lab then
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 266
19638: PUSH
19639: LD_INT 6
19641: EQUAL
19642: IFFALSE 19682
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19644: LD_EXP 47
19648: PPUSH
19649: LD_INT 25
19651: PUSH
19652: LD_INT 4
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 72
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 120
// AmLabResearch ( b ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 266
19691: PUSH
19692: LD_INT 4
19694: EQUAL
19695: IFFALSE 19743
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19697: LD_EXP 47
19701: PPUSH
19702: LD_INT 25
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 3
19714: PUSH
19715: LD_INT 54
19717: PUSH
19718: EMPTY
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL_OW 72
19733: PPUSH
19734: LD_VAR 0 1
19738: PPUSH
19739: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19743: LD_ADDR_EXP 49
19747: PUSH
19748: LD_EXP 49
19752: PPUSH
19753: LD_INT 1
19755: PPUSH
19756: CALL_OW 3
19760: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19761: LD_VAR 0 1
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_INT 5
19773: EQUAL
19774: IFFALSE 19788
// SetBLevel ( b , 5 ) ;
19776: LD_VAR 0 1
19780: PPUSH
19781: LD_INT 5
19783: PPUSH
19784: CALL_OW 241
// end ;
19788: PPOPN 1
19790: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19791: LD_VAR 0 11
19795: PUSH
19796: LD_INT 12
19798: EQUAL
19799: IFFALSE 19809
// cargoRecycled := true ;
19801: LD_ADDR_EXP 30
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// end ;
19809: PPOPN 11
19811: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 255
19821: PUSH
19822: LD_INT 2
19824: EQUAL
19825: IFFALSE 19841
// vehCounter := vehCounter + 1 ;
19827: LD_ADDR_EXP 23
19831: PUSH
19832: LD_EXP 23
19836: PUSH
19837: LD_INT 1
19839: PLUS
19840: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_VAR 0 2
19850: PPUSH
19851: CALL 35994 0 2
// end ;
19855: PPOPN 2
19857: END
// on SailEvent ( event ) do begin if event = eventAttack then
19858: LD_VAR 0 1
19862: PUSH
19863: LD_EXP 25
19867: EQUAL
19868: IFFALSE 19874
// AmericanAttack ;
19870: CALL 6786 0 0
// end ; end_of_file
19874: PPOPN 1
19876: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19877: LD_OWVAR 1
19881: PUSH
19882: LD_INT 10500
19884: PUSH
19885: LD_INT 9800
19887: PUSH
19888: LD_INT 9450
19890: PUSH
19891: LD_INT 9100
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_OWVAR 67
19904: ARRAY
19905: LESSEQUAL
19906: IFFALSE 19933
19908: GO 19910
19910: DISABLE
// begin enable ;
19911: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19912: LD_INT 1
19914: PPUSH
19915: LD_INT 5
19917: PPUSH
19918: CALL_OW 12
19922: PPUSH
19923: LD_INT 9
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 55
// end ;
19933: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19934: LD_EXP 7
19938: PUSH
19939: LD_OWVAR 1
19943: PUSH
19944: LD_INT 94500
19946: LESSEQUAL
19947: AND
19948: IFFALSE 19975
19950: GO 19952
19952: DISABLE
// begin enable ;
19953: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19954: LD_INT 3
19956: PPUSH
19957: LD_INT 5
19959: PPUSH
19960: CALL_OW 12
19964: PPUSH
19965: LD_INT 9
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 55
// end ; end_of_file
19975: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19976: LD_EXP 12
19980: NOT
19981: PUSH
19982: LD_EXP 17
19986: AND
19987: PUSH
19988: LD_EXP 4
19992: AND
19993: PUSH
19994: LD_EXP 16
19998: PUSH
19999: LD_EXP 17
20003: LESSEQUAL
20004: AND
20005: IFFALSE 20116
20007: GO 20009
20009: DISABLE
// begin enable ;
20010: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20011: LD_ADDR_OWVAR 47
20015: PUSH
20016: LD_STRING #X103-1
20018: PUSH
20019: LD_EXP 17
20023: PUSH
20024: LD_EXP 16
20028: MINUS
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20034: LD_ADDR_EXP 16
20038: PUSH
20039: LD_INT 5
20041: PPUSH
20042: CALL_OW 274
20046: PPUSH
20047: LD_INT 1
20049: PPUSH
20050: CALL_OW 275
20054: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20055: LD_INT 10
20057: PPUSH
20058: LD_INT 1
20060: PPUSH
20061: CALL_OW 287
20065: PUSH
20066: LD_INT 0
20068: EQUAL
20069: IFFALSE 20087
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20071: LD_ADDR_EXP 18
20075: PUSH
20076: LD_EXP 18
20080: PUSH
20081: LD_INT 35
20083: MINUS
20084: ST_TO_ADDR
20085: GO 20116
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20087: LD_ADDR_EXP 18
20091: PUSH
20092: LD_INT 42000
20094: PUSH
20095: LD_INT 31500
20097: PUSH
20098: LD_INT 25200
20100: PUSH
20101: LD_INT 21000
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: PUSH
20110: LD_OWVAR 67
20114: ARRAY
20115: ST_TO_ADDR
// end ; end_of_file
20116: END
// export globalGameSaveCounter ; every 0 0$1 do
20117: GO 20119
20119: DISABLE
// begin enable ;
20120: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20121: LD_STRING updateTimer(
20123: PUSH
20124: LD_OWVAR 1
20128: STR
20129: PUSH
20130: LD_STRING );
20132: STR
20133: PPUSH
20134: CALL_OW 559
// end ;
20138: END
// every 0 0$1 do
20139: GO 20141
20141: DISABLE
// begin globalGameSaveCounter := 0 ;
20142: LD_ADDR_EXP 51
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20150: LD_STRING setGameSaveCounter(0)
20152: PPUSH
20153: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20157: LD_STRING initStreamRollete();
20159: PPUSH
20160: CALL_OW 559
// InitStreamMode ;
20164: CALL 21507 0 0
// DefineStreamItems ( false ) ;
20168: LD_INT 0
20170: PPUSH
20171: CALL 21971 0 1
// end ;
20175: END
// export function SOS_MapStart ( ) ; begin
20176: LD_INT 0
20178: PPUSH
// if streamModeActive then
20179: LD_EXP 52
20183: IFFALSE 20192
// DefineStreamItems ( true ) ;
20185: LD_INT 1
20187: PPUSH
20188: CALL 21971 0 1
// UpdateLuaVariables ( ) ;
20192: CALL 20209 0 0
// UpdateFactoryWaypoints ( ) ;
20196: CALL 34840 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20200: CALL 35097 0 0
// end ;
20204: LD_VAR 0 1
20208: RET
// function UpdateLuaVariables ( ) ; begin
20209: LD_INT 0
20211: PPUSH
// if globalGameSaveCounter then
20212: LD_EXP 51
20216: IFFALSE 20250
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20218: LD_ADDR_EXP 51
20222: PUSH
20223: LD_EXP 51
20227: PPUSH
20228: CALL 80229 0 1
20232: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20233: LD_STRING setGameSaveCounter(
20235: PUSH
20236: LD_EXP 51
20240: STR
20241: PUSH
20242: LD_STRING )
20244: STR
20245: PPUSH
20246: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20250: LD_STRING setGameDifficulty(
20252: PUSH
20253: LD_OWVAR 67
20257: STR
20258: PUSH
20259: LD_STRING )
20261: STR
20262: PPUSH
20263: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20267: LD_STRING displayDifficulty(
20269: PUSH
20270: LD_OWVAR 67
20274: STR
20275: PUSH
20276: LD_STRING )
20278: STR
20279: PPUSH
20280: CALL_OW 559
// end ;
20284: LD_VAR 0 1
20288: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20289: LD_INT 0
20291: PPUSH
// if p2 = stream_mode then
20292: LD_VAR 0 2
20296: PUSH
20297: LD_INT 100
20299: EQUAL
20300: IFFALSE 21303
// begin if not StreamModeActive then
20302: LD_EXP 52
20306: NOT
20307: IFFALSE 20317
// StreamModeActive := true ;
20309: LD_ADDR_EXP 52
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 0 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 0
20324: EQUAL
20325: IFFALSE 20331
// InitStreamMode ;
20327: CALL 21507 0 0
// if p3 = 1 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 1
20338: EQUAL
20339: IFFALSE 20349
// sRocket := true ;
20341: LD_ADDR_EXP 57
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 2 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 2
20356: EQUAL
20357: IFFALSE 20367
// sSpeed := true ;
20359: LD_ADDR_EXP 56
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 3 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 3
20374: EQUAL
20375: IFFALSE 20385
// sEngine := true ;
20377: LD_ADDR_EXP 58
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 4 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 4
20392: EQUAL
20393: IFFALSE 20403
// sSpec := true ;
20395: LD_ADDR_EXP 55
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 5 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 5
20410: EQUAL
20411: IFFALSE 20421
// sLevel := true ;
20413: LD_ADDR_EXP 59
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 6 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 6
20428: EQUAL
20429: IFFALSE 20439
// sArmoury := true ;
20431: LD_ADDR_EXP 60
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 7 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 7
20446: EQUAL
20447: IFFALSE 20457
// sRadar := true ;
20449: LD_ADDR_EXP 61
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 8 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 8
20464: EQUAL
20465: IFFALSE 20475
// sBunker := true ;
20467: LD_ADDR_EXP 62
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 9 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 9
20482: EQUAL
20483: IFFALSE 20493
// sHack := true ;
20485: LD_ADDR_EXP 63
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 10 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 10
20500: EQUAL
20501: IFFALSE 20511
// sFire := true ;
20503: LD_ADDR_EXP 64
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 11 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 11
20518: EQUAL
20519: IFFALSE 20529
// sRefresh := true ;
20521: LD_ADDR_EXP 65
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 12 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 12
20536: EQUAL
20537: IFFALSE 20547
// sExp := true ;
20539: LD_ADDR_EXP 66
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 13 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 13
20554: EQUAL
20555: IFFALSE 20565
// sDepot := true ;
20557: LD_ADDR_EXP 67
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 14 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 14
20572: EQUAL
20573: IFFALSE 20583
// sFlag := true ;
20575: LD_ADDR_EXP 68
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 15 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 15
20590: EQUAL
20591: IFFALSE 20601
// sKamikadze := true ;
20593: LD_ADDR_EXP 76
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 16 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 16
20608: EQUAL
20609: IFFALSE 20619
// sTroll := true ;
20611: LD_ADDR_EXP 77
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 17 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 17
20626: EQUAL
20627: IFFALSE 20637
// sSlow := true ;
20629: LD_ADDR_EXP 78
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 18 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 18
20644: EQUAL
20645: IFFALSE 20655
// sLack := true ;
20647: LD_ADDR_EXP 79
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 19 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 19
20662: EQUAL
20663: IFFALSE 20673
// sTank := true ;
20665: LD_ADDR_EXP 81
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 20 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 20
20680: EQUAL
20681: IFFALSE 20691
// sRemote := true ;
20683: LD_ADDR_EXP 82
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 21 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 21
20698: EQUAL
20699: IFFALSE 20709
// sPowell := true ;
20701: LD_ADDR_EXP 83
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 22 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 22
20716: EQUAL
20717: IFFALSE 20727
// sTeleport := true ;
20719: LD_ADDR_EXP 86
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 23 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 23
20734: EQUAL
20735: IFFALSE 20745
// sOilTower := true ;
20737: LD_ADDR_EXP 88
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 24 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 24
20752: EQUAL
20753: IFFALSE 20763
// sShovel := true ;
20755: LD_ADDR_EXP 89
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 25 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 25
20770: EQUAL
20771: IFFALSE 20781
// sSheik := true ;
20773: LD_ADDR_EXP 90
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 26 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 26
20788: EQUAL
20789: IFFALSE 20799
// sEarthquake := true ;
20791: LD_ADDR_EXP 92
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 27 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 27
20806: EQUAL
20807: IFFALSE 20817
// sAI := true ;
20809: LD_ADDR_EXP 93
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 28 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 28
20824: EQUAL
20825: IFFALSE 20835
// sCargo := true ;
20827: LD_ADDR_EXP 96
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 29 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 29
20842: EQUAL
20843: IFFALSE 20853
// sDLaser := true ;
20845: LD_ADDR_EXP 97
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 30 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 30
20860: EQUAL
20861: IFFALSE 20871
// sExchange := true ;
20863: LD_ADDR_EXP 98
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 31 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 31
20878: EQUAL
20879: IFFALSE 20889
// sFac := true ;
20881: LD_ADDR_EXP 99
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 32 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 32
20896: EQUAL
20897: IFFALSE 20907
// sPower := true ;
20899: LD_ADDR_EXP 100
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 33 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 33
20914: EQUAL
20915: IFFALSE 20925
// sRandom := true ;
20917: LD_ADDR_EXP 101
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 34 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 34
20932: EQUAL
20933: IFFALSE 20943
// sShield := true ;
20935: LD_ADDR_EXP 102
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 35 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 35
20950: EQUAL
20951: IFFALSE 20961
// sTime := true ;
20953: LD_ADDR_EXP 103
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 36 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 36
20968: EQUAL
20969: IFFALSE 20979
// sTools := true ;
20971: LD_ADDR_EXP 104
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 101 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 101
20986: EQUAL
20987: IFFALSE 20997
// sSold := true ;
20989: LD_ADDR_EXP 69
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 102 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 102
21004: EQUAL
21005: IFFALSE 21015
// sDiff := true ;
21007: LD_ADDR_EXP 70
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 103 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 103
21022: EQUAL
21023: IFFALSE 21033
// sFog := true ;
21025: LD_ADDR_EXP 73
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 104 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 104
21040: EQUAL
21041: IFFALSE 21051
// sReset := true ;
21043: LD_ADDR_EXP 74
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 105 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 105
21058: EQUAL
21059: IFFALSE 21069
// sSun := true ;
21061: LD_ADDR_EXP 75
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 106 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 106
21076: EQUAL
21077: IFFALSE 21087
// sTiger := true ;
21079: LD_ADDR_EXP 71
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 107 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 107
21094: EQUAL
21095: IFFALSE 21105
// sBomb := true ;
21097: LD_ADDR_EXP 72
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 108 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 108
21112: EQUAL
21113: IFFALSE 21123
// sWound := true ;
21115: LD_ADDR_EXP 80
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 109 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 109
21130: EQUAL
21131: IFFALSE 21141
// sBetray := true ;
21133: LD_ADDR_EXP 84
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 110 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 110
21148: EQUAL
21149: IFFALSE 21159
// sContamin := true ;
21151: LD_ADDR_EXP 85
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 111 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 111
21166: EQUAL
21167: IFFALSE 21177
// sOil := true ;
21169: LD_ADDR_EXP 87
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 112 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 112
21184: EQUAL
21185: IFFALSE 21195
// sStu := true ;
21187: LD_ADDR_EXP 91
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 113 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 113
21202: EQUAL
21203: IFFALSE 21213
// sBazooka := true ;
21205: LD_ADDR_EXP 94
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 114 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 114
21220: EQUAL
21221: IFFALSE 21231
// sMortar := true ;
21223: LD_ADDR_EXP 95
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 115 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 115
21238: EQUAL
21239: IFFALSE 21249
// sRanger := true ;
21241: LD_ADDR_EXP 105
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 116 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 116
21256: EQUAL
21257: IFFALSE 21267
// sComputer := true ;
21259: LD_ADDR_EXP 106
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 117 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 117
21274: EQUAL
21275: IFFALSE 21285
// s30 := true ;
21277: LD_ADDR_EXP 107
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 118 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 118
21292: EQUAL
21293: IFFALSE 21303
// s60 := true ;
21295: LD_ADDR_EXP 108
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// end ; if p2 = hack_mode then
21303: LD_VAR 0 2
21307: PUSH
21308: LD_INT 101
21310: EQUAL
21311: IFFALSE 21439
// begin case p3 of 1 :
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 1
21320: DOUBLE
21321: EQUAL
21322: IFTRUE 21326
21324: GO 21333
21326: POP
// hHackUnlimitedResources ; 2 :
21327: CALL 33586 0 0
21331: GO 21439
21333: LD_INT 2
21335: DOUBLE
21336: EQUAL
21337: IFTRUE 21341
21339: GO 21348
21341: POP
// hHackSetLevel10 ; 3 :
21342: CALL 33719 0 0
21346: GO 21439
21348: LD_INT 3
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21363
21356: POP
// hHackSetLevel10YourUnits ; 4 :
21357: CALL 33804 0 0
21361: GO 21439
21363: LD_INT 4
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21378
21371: POP
// hHackInvincible ; 5 :
21372: CALL 34252 0 0
21376: GO 21439
21378: LD_INT 5
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21393
21386: POP
// hHackInvisible ; 6 :
21387: CALL 34363 0 0
21391: GO 21439
21393: LD_INT 6
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 21408
21401: POP
// hHackChangeYourSide ; 7 :
21402: CALL 34420 0 0
21406: GO 21439
21408: LD_INT 7
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21423
21416: POP
// hHackChangeUnitSide ; 8 :
21417: CALL 34462 0 0
21421: GO 21439
21423: LD_INT 8
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21438
21431: POP
// hHackFog ; end ;
21432: CALL 34563 0 0
21436: GO 21439
21438: POP
// end ; if p2 = game_save_mode then
21439: LD_VAR 0 2
21443: PUSH
21444: LD_INT 102
21446: EQUAL
21447: IFFALSE 21502
// begin if p3 = 1 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 1
21456: EQUAL
21457: IFFALSE 21469
// globalGameSaveCounter := p4 ;
21459: LD_ADDR_EXP 51
21463: PUSH
21464: LD_VAR 0 4
21468: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 2
21476: EQUAL
21477: PUSH
21478: LD_EXP 51
21482: AND
21483: IFFALSE 21502
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21485: LD_STRING setGameSaveCounter(
21487: PUSH
21488: LD_EXP 51
21492: STR
21493: PUSH
21494: LD_STRING )
21496: STR
21497: PPUSH
21498: CALL_OW 559
// end ; end ;
21502: LD_VAR 0 7
21506: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21507: LD_INT 0
21509: PPUSH
// streamModeActive := false ;
21510: LD_ADDR_EXP 52
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// normalCounter := 36 ;
21518: LD_ADDR_EXP 53
21522: PUSH
21523: LD_INT 36
21525: ST_TO_ADDR
// hardcoreCounter := 18 ;
21526: LD_ADDR_EXP 54
21530: PUSH
21531: LD_INT 18
21533: ST_TO_ADDR
// sRocket := false ;
21534: LD_ADDR_EXP 57
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sSpeed := false ;
21542: LD_ADDR_EXP 56
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sEngine := false ;
21550: LD_ADDR_EXP 58
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sSpec := false ;
21558: LD_ADDR_EXP 55
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sLevel := false ;
21566: LD_ADDR_EXP 59
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sArmoury := false ;
21574: LD_ADDR_EXP 60
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sRadar := false ;
21582: LD_ADDR_EXP 61
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sBunker := false ;
21590: LD_ADDR_EXP 62
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sHack := false ;
21598: LD_ADDR_EXP 63
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sFire := false ;
21606: LD_ADDR_EXP 64
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sRefresh := false ;
21614: LD_ADDR_EXP 65
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sExp := false ;
21622: LD_ADDR_EXP 66
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sDepot := false ;
21630: LD_ADDR_EXP 67
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sFlag := false ;
21638: LD_ADDR_EXP 68
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sKamikadze := false ;
21646: LD_ADDR_EXP 76
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sTroll := false ;
21654: LD_ADDR_EXP 77
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sSlow := false ;
21662: LD_ADDR_EXP 78
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sLack := false ;
21670: LD_ADDR_EXP 79
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sTank := false ;
21678: LD_ADDR_EXP 81
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sRemote := false ;
21686: LD_ADDR_EXP 82
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sPowell := false ;
21694: LD_ADDR_EXP 83
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sTeleport := false ;
21702: LD_ADDR_EXP 86
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sOilTower := false ;
21710: LD_ADDR_EXP 88
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sShovel := false ;
21718: LD_ADDR_EXP 89
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sSheik := false ;
21726: LD_ADDR_EXP 90
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sEarthquake := false ;
21734: LD_ADDR_EXP 92
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sAI := false ;
21742: LD_ADDR_EXP 93
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sCargo := false ;
21750: LD_ADDR_EXP 96
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sDLaser := false ;
21758: LD_ADDR_EXP 97
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sExchange := false ;
21766: LD_ADDR_EXP 98
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sFac := false ;
21774: LD_ADDR_EXP 99
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sPower := false ;
21782: LD_ADDR_EXP 100
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sRandom := false ;
21790: LD_ADDR_EXP 101
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sShield := false ;
21798: LD_ADDR_EXP 102
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sTime := false ;
21806: LD_ADDR_EXP 103
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sTools := false ;
21814: LD_ADDR_EXP 104
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sSold := false ;
21822: LD_ADDR_EXP 69
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sDiff := false ;
21830: LD_ADDR_EXP 70
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sFog := false ;
21838: LD_ADDR_EXP 73
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sReset := false ;
21846: LD_ADDR_EXP 74
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// sSun := false ;
21854: LD_ADDR_EXP 75
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// sTiger := false ;
21862: LD_ADDR_EXP 71
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// sBomb := false ;
21870: LD_ADDR_EXP 72
21874: PUSH
21875: LD_INT 0
21877: ST_TO_ADDR
// sWound := false ;
21878: LD_ADDR_EXP 80
21882: PUSH
21883: LD_INT 0
21885: ST_TO_ADDR
// sBetray := false ;
21886: LD_ADDR_EXP 84
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// sContamin := false ;
21894: LD_ADDR_EXP 85
21898: PUSH
21899: LD_INT 0
21901: ST_TO_ADDR
// sOil := false ;
21902: LD_ADDR_EXP 87
21906: PUSH
21907: LD_INT 0
21909: ST_TO_ADDR
// sStu := false ;
21910: LD_ADDR_EXP 91
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// sBazooka := false ;
21918: LD_ADDR_EXP 94
21922: PUSH
21923: LD_INT 0
21925: ST_TO_ADDR
// sMortar := false ;
21926: LD_ADDR_EXP 95
21930: PUSH
21931: LD_INT 0
21933: ST_TO_ADDR
// sRanger := false ;
21934: LD_ADDR_EXP 105
21938: PUSH
21939: LD_INT 0
21941: ST_TO_ADDR
// sComputer := false ;
21942: LD_ADDR_EXP 106
21946: PUSH
21947: LD_INT 0
21949: ST_TO_ADDR
// s30 := false ;
21950: LD_ADDR_EXP 107
21954: PUSH
21955: LD_INT 0
21957: ST_TO_ADDR
// s60 := false ;
21958: LD_ADDR_EXP 108
21962: PUSH
21963: LD_INT 0
21965: ST_TO_ADDR
// end ;
21966: LD_VAR 0 1
21970: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21971: LD_INT 0
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
// result := [ ] ;
21980: LD_ADDR_VAR 0 2
21984: PUSH
21985: EMPTY
21986: ST_TO_ADDR
// if campaign_id = 1 then
21987: LD_OWVAR 69
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: IFFALSE 25161
// begin case mission_number of 1 :
21997: LD_OWVAR 70
22001: PUSH
22002: LD_INT 1
22004: DOUBLE
22005: EQUAL
22006: IFTRUE 22010
22008: GO 22086
22010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 4
22021: PUSH
22022: LD_INT 11
22024: PUSH
22025: LD_INT 12
22027: PUSH
22028: LD_INT 15
22030: PUSH
22031: LD_INT 16
22033: PUSH
22034: LD_INT 22
22036: PUSH
22037: LD_INT 23
22039: PUSH
22040: LD_INT 26
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 101
22056: PUSH
22057: LD_INT 102
22059: PUSH
22060: LD_INT 106
22062: PUSH
22063: LD_INT 116
22065: PUSH
22066: LD_INT 117
22068: PUSH
22069: LD_INT 118
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: ST_TO_ADDR
22084: GO 25159
22086: LD_INT 2
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22178
22094: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 4
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 12
22111: PUSH
22112: LD_INT 15
22114: PUSH
22115: LD_INT 16
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_INT 23
22123: PUSH
22124: LD_INT 26
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 105
22146: PUSH
22147: LD_INT 106
22149: PUSH
22150: LD_INT 108
22152: PUSH
22153: LD_INT 116
22155: PUSH
22156: LD_INT 117
22158: PUSH
22159: LD_INT 118
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 25159
22178: LD_INT 3
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22274
22186: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 11
22203: PUSH
22204: LD_INT 12
22206: PUSH
22207: LD_INT 15
22209: PUSH
22210: LD_INT 16
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_INT 26
22218: PUSH
22219: LD_INT 36
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 101
22236: PUSH
22237: LD_INT 102
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 108
22248: PUSH
22249: LD_INT 116
22251: PUSH
22252: LD_INT 117
22254: PUSH
22255: LD_INT 118
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: ST_TO_ADDR
22272: GO 25159
22274: LD_INT 4
22276: DOUBLE
22277: EQUAL
22278: IFTRUE 22282
22280: GO 22378
22282: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22283: LD_ADDR_VAR 0 2
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 4
22293: PUSH
22294: LD_INT 5
22296: PUSH
22297: LD_INT 8
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 15
22308: PUSH
22309: LD_INT 16
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 26
22320: PUSH
22321: LD_INT 36
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 101
22340: PUSH
22341: LD_INT 102
22343: PUSH
22344: LD_INT 105
22346: PUSH
22347: LD_INT 106
22349: PUSH
22350: LD_INT 108
22352: PUSH
22353: LD_INT 116
22355: PUSH
22356: LD_INT 117
22358: PUSH
22359: LD_INT 118
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: ST_TO_ADDR
22376: GO 25159
22378: LD_INT 5
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22498
22386: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 4
22397: PUSH
22398: LD_INT 5
22400: PUSH
22401: LD_INT 6
22403: PUSH
22404: LD_INT 8
22406: PUSH
22407: LD_INT 11
22409: PUSH
22410: LD_INT 12
22412: PUSH
22413: LD_INT 15
22415: PUSH
22416: LD_INT 16
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_INT 23
22424: PUSH
22425: LD_INT 25
22427: PUSH
22428: LD_INT 26
22430: PUSH
22431: LD_INT 36
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 101
22452: PUSH
22453: LD_INT 102
22455: PUSH
22456: LD_INT 105
22458: PUSH
22459: LD_INT 106
22461: PUSH
22462: LD_INT 108
22464: PUSH
22465: LD_INT 109
22467: PUSH
22468: LD_INT 112
22470: PUSH
22471: LD_INT 116
22473: PUSH
22474: LD_INT 117
22476: PUSH
22477: LD_INT 118
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: ST_TO_ADDR
22496: GO 25159
22498: LD_INT 6
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22638
22506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 4
22517: PUSH
22518: LD_INT 5
22520: PUSH
22521: LD_INT 6
22523: PUSH
22524: LD_INT 8
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 15
22535: PUSH
22536: LD_INT 16
22538: PUSH
22539: LD_INT 20
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_INT 23
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 26
22556: PUSH
22557: LD_INT 30
22559: PUSH
22560: LD_INT 31
22562: PUSH
22563: LD_INT 32
22565: PUSH
22566: LD_INT 36
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 101
22592: PUSH
22593: LD_INT 102
22595: PUSH
22596: LD_INT 105
22598: PUSH
22599: LD_INT 106
22601: PUSH
22602: LD_INT 108
22604: PUSH
22605: LD_INT 109
22607: PUSH
22608: LD_INT 112
22610: PUSH
22611: LD_INT 116
22613: PUSH
22614: LD_INT 117
22616: PUSH
22617: LD_INT 118
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: ST_TO_ADDR
22636: GO 25159
22638: LD_INT 7
22640: DOUBLE
22641: EQUAL
22642: IFTRUE 22646
22644: GO 22758
22646: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22647: LD_ADDR_VAR 0 2
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 4
22657: PUSH
22658: LD_INT 5
22660: PUSH
22661: LD_INT 7
22663: PUSH
22664: LD_INT 11
22666: PUSH
22667: LD_INT 12
22669: PUSH
22670: LD_INT 15
22672: PUSH
22673: LD_INT 16
22675: PUSH
22676: LD_INT 20
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_INT 23
22687: PUSH
22688: LD_INT 25
22690: PUSH
22691: LD_INT 26
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 101
22712: PUSH
22713: LD_INT 102
22715: PUSH
22716: LD_INT 103
22718: PUSH
22719: LD_INT 105
22721: PUSH
22722: LD_INT 106
22724: PUSH
22725: LD_INT 108
22727: PUSH
22728: LD_INT 112
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: ST_TO_ADDR
22756: GO 25159
22758: LD_INT 8
22760: DOUBLE
22761: EQUAL
22762: IFTRUE 22766
22764: GO 22906
22766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22767: LD_ADDR_VAR 0 2
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 4
22777: PUSH
22778: LD_INT 5
22780: PUSH
22781: LD_INT 6
22783: PUSH
22784: LD_INT 7
22786: PUSH
22787: LD_INT 8
22789: PUSH
22790: LD_INT 11
22792: PUSH
22793: LD_INT 12
22795: PUSH
22796: LD_INT 15
22798: PUSH
22799: LD_INT 16
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 26
22819: PUSH
22820: LD_INT 30
22822: PUSH
22823: LD_INT 31
22825: PUSH
22826: LD_INT 32
22828: PUSH
22829: LD_INT 36
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 101
22856: PUSH
22857: LD_INT 102
22859: PUSH
22860: LD_INT 103
22862: PUSH
22863: LD_INT 105
22865: PUSH
22866: LD_INT 106
22868: PUSH
22869: LD_INT 108
22871: PUSH
22872: LD_INT 109
22874: PUSH
22875: LD_INT 112
22877: PUSH
22878: LD_INT 116
22880: PUSH
22881: LD_INT 117
22883: PUSH
22884: LD_INT 118
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: ST_TO_ADDR
22904: GO 25159
22906: LD_INT 9
22908: DOUBLE
22909: EQUAL
22910: IFTRUE 22914
22912: GO 23062
22914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22915: LD_ADDR_VAR 0 2
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 4
22925: PUSH
22926: LD_INT 5
22928: PUSH
22929: LD_INT 6
22931: PUSH
22932: LD_INT 7
22934: PUSH
22935: LD_INT 8
22937: PUSH
22938: LD_INT 11
22940: PUSH
22941: LD_INT 12
22943: PUSH
22944: LD_INT 15
22946: PUSH
22947: LD_INT 16
22949: PUSH
22950: LD_INT 20
22952: PUSH
22953: LD_INT 21
22955: PUSH
22956: LD_INT 22
22958: PUSH
22959: LD_INT 23
22961: PUSH
22962: LD_INT 25
22964: PUSH
22965: LD_INT 26
22967: PUSH
22968: LD_INT 28
22970: PUSH
22971: LD_INT 30
22973: PUSH
22974: LD_INT 31
22976: PUSH
22977: LD_INT 32
22979: PUSH
22980: LD_INT 36
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 101
23008: PUSH
23009: LD_INT 102
23011: PUSH
23012: LD_INT 103
23014: PUSH
23015: LD_INT 105
23017: PUSH
23018: LD_INT 106
23020: PUSH
23021: LD_INT 108
23023: PUSH
23024: LD_INT 109
23026: PUSH
23027: LD_INT 112
23029: PUSH
23030: LD_INT 114
23032: PUSH
23033: LD_INT 116
23035: PUSH
23036: LD_INT 117
23038: PUSH
23039: LD_INT 118
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: ST_TO_ADDR
23060: GO 25159
23062: LD_INT 10
23064: DOUBLE
23065: EQUAL
23066: IFTRUE 23070
23068: GO 23266
23070: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 4
23081: PUSH
23082: LD_INT 5
23084: PUSH
23085: LD_INT 6
23087: PUSH
23088: LD_INT 7
23090: PUSH
23091: LD_INT 8
23093: PUSH
23094: LD_INT 9
23096: PUSH
23097: LD_INT 10
23099: PUSH
23100: LD_INT 11
23102: PUSH
23103: LD_INT 12
23105: PUSH
23106: LD_INT 13
23108: PUSH
23109: LD_INT 14
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 16
23117: PUSH
23118: LD_INT 17
23120: PUSH
23121: LD_INT 18
23123: PUSH
23124: LD_INT 19
23126: PUSH
23127: LD_INT 20
23129: PUSH
23130: LD_INT 21
23132: PUSH
23133: LD_INT 22
23135: PUSH
23136: LD_INT 23
23138: PUSH
23139: LD_INT 24
23141: PUSH
23142: LD_INT 25
23144: PUSH
23145: LD_INT 26
23147: PUSH
23148: LD_INT 28
23150: PUSH
23151: LD_INT 30
23153: PUSH
23154: LD_INT 31
23156: PUSH
23157: LD_INT 32
23159: PUSH
23160: LD_INT 36
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 101
23196: PUSH
23197: LD_INT 102
23199: PUSH
23200: LD_INT 103
23202: PUSH
23203: LD_INT 104
23205: PUSH
23206: LD_INT 105
23208: PUSH
23209: LD_INT 106
23211: PUSH
23212: LD_INT 107
23214: PUSH
23215: LD_INT 108
23217: PUSH
23218: LD_INT 109
23220: PUSH
23221: LD_INT 110
23223: PUSH
23224: LD_INT 111
23226: PUSH
23227: LD_INT 112
23229: PUSH
23230: LD_INT 114
23232: PUSH
23233: LD_INT 116
23235: PUSH
23236: LD_INT 117
23238: PUSH
23239: LD_INT 118
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: ST_TO_ADDR
23264: GO 25159
23266: LD_INT 11
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23478
23274: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23275: LD_ADDR_VAR 0 2
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 3
23285: PUSH
23286: LD_INT 4
23288: PUSH
23289: LD_INT 5
23291: PUSH
23292: LD_INT 6
23294: PUSH
23295: LD_INT 7
23297: PUSH
23298: LD_INT 8
23300: PUSH
23301: LD_INT 9
23303: PUSH
23304: LD_INT 10
23306: PUSH
23307: LD_INT 11
23309: PUSH
23310: LD_INT 12
23312: PUSH
23313: LD_INT 13
23315: PUSH
23316: LD_INT 14
23318: PUSH
23319: LD_INT 15
23321: PUSH
23322: LD_INT 16
23324: PUSH
23325: LD_INT 17
23327: PUSH
23328: LD_INT 18
23330: PUSH
23331: LD_INT 19
23333: PUSH
23334: LD_INT 20
23336: PUSH
23337: LD_INT 21
23339: PUSH
23340: LD_INT 22
23342: PUSH
23343: LD_INT 23
23345: PUSH
23346: LD_INT 24
23348: PUSH
23349: LD_INT 25
23351: PUSH
23352: LD_INT 26
23354: PUSH
23355: LD_INT 28
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: LD_INT 31
23363: PUSH
23364: LD_INT 32
23366: PUSH
23367: LD_INT 34
23369: PUSH
23370: LD_INT 36
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 104
23417: PUSH
23418: LD_INT 105
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 107
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 110
23435: PUSH
23436: LD_INT 111
23438: PUSH
23439: LD_INT 112
23441: PUSH
23442: LD_INT 114
23444: PUSH
23445: LD_INT 116
23447: PUSH
23448: LD_INT 117
23450: PUSH
23451: LD_INT 118
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 25159
23478: LD_INT 12
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23706
23486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 3
23500: PUSH
23501: LD_INT 4
23503: PUSH
23504: LD_INT 5
23506: PUSH
23507: LD_INT 6
23509: PUSH
23510: LD_INT 7
23512: PUSH
23513: LD_INT 8
23515: PUSH
23516: LD_INT 9
23518: PUSH
23519: LD_INT 10
23521: PUSH
23522: LD_INT 11
23524: PUSH
23525: LD_INT 12
23527: PUSH
23528: LD_INT 13
23530: PUSH
23531: LD_INT 14
23533: PUSH
23534: LD_INT 15
23536: PUSH
23537: LD_INT 16
23539: PUSH
23540: LD_INT 17
23542: PUSH
23543: LD_INT 18
23545: PUSH
23546: LD_INT 19
23548: PUSH
23549: LD_INT 20
23551: PUSH
23552: LD_INT 21
23554: PUSH
23555: LD_INT 22
23557: PUSH
23558: LD_INT 23
23560: PUSH
23561: LD_INT 24
23563: PUSH
23564: LD_INT 25
23566: PUSH
23567: LD_INT 26
23569: PUSH
23570: LD_INT 27
23572: PUSH
23573: LD_INT 28
23575: PUSH
23576: LD_INT 30
23578: PUSH
23579: LD_INT 31
23581: PUSH
23582: LD_INT 32
23584: PUSH
23585: LD_INT 33
23587: PUSH
23588: LD_INT 34
23590: PUSH
23591: LD_INT 36
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 101
23632: PUSH
23633: LD_INT 102
23635: PUSH
23636: LD_INT 103
23638: PUSH
23639: LD_INT 104
23641: PUSH
23642: LD_INT 105
23644: PUSH
23645: LD_INT 106
23647: PUSH
23648: LD_INT 107
23650: PUSH
23651: LD_INT 108
23653: PUSH
23654: LD_INT 109
23656: PUSH
23657: LD_INT 110
23659: PUSH
23660: LD_INT 111
23662: PUSH
23663: LD_INT 112
23665: PUSH
23666: LD_INT 113
23668: PUSH
23669: LD_INT 114
23671: PUSH
23672: LD_INT 116
23674: PUSH
23675: LD_INT 117
23677: PUSH
23678: LD_INT 118
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: ST_TO_ADDR
23704: GO 25159
23706: LD_INT 13
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23922
23714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: LD_INT 4
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: LD_INT 8
23737: PUSH
23738: LD_INT 9
23740: PUSH
23741: LD_INT 10
23743: PUSH
23744: LD_INT 11
23746: PUSH
23747: LD_INT 12
23749: PUSH
23750: LD_INT 14
23752: PUSH
23753: LD_INT 15
23755: PUSH
23756: LD_INT 16
23758: PUSH
23759: LD_INT 17
23761: PUSH
23762: LD_INT 18
23764: PUSH
23765: LD_INT 19
23767: PUSH
23768: LD_INT 20
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: LD_INT 23
23779: PUSH
23780: LD_INT 24
23782: PUSH
23783: LD_INT 25
23785: PUSH
23786: LD_INT 26
23788: PUSH
23789: LD_INT 27
23791: PUSH
23792: LD_INT 28
23794: PUSH
23795: LD_INT 30
23797: PUSH
23798: LD_INT 31
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: LD_INT 33
23806: PUSH
23807: LD_INT 34
23809: PUSH
23810: LD_INT 36
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 101
23848: PUSH
23849: LD_INT 102
23851: PUSH
23852: LD_INT 103
23854: PUSH
23855: LD_INT 104
23857: PUSH
23858: LD_INT 105
23860: PUSH
23861: LD_INT 106
23863: PUSH
23864: LD_INT 107
23866: PUSH
23867: LD_INT 108
23869: PUSH
23870: LD_INT 109
23872: PUSH
23873: LD_INT 110
23875: PUSH
23876: LD_INT 111
23878: PUSH
23879: LD_INT 112
23881: PUSH
23882: LD_INT 113
23884: PUSH
23885: LD_INT 114
23887: PUSH
23888: LD_INT 116
23890: PUSH
23891: LD_INT 117
23893: PUSH
23894: LD_INT 118
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: ST_TO_ADDR
23920: GO 25159
23922: LD_INT 14
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 24154
23930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: LD_INT 4
23947: PUSH
23948: LD_INT 5
23950: PUSH
23951: LD_INT 6
23953: PUSH
23954: LD_INT 7
23956: PUSH
23957: LD_INT 8
23959: PUSH
23960: LD_INT 9
23962: PUSH
23963: LD_INT 10
23965: PUSH
23966: LD_INT 11
23968: PUSH
23969: LD_INT 12
23971: PUSH
23972: LD_INT 13
23974: PUSH
23975: LD_INT 14
23977: PUSH
23978: LD_INT 15
23980: PUSH
23981: LD_INT 16
23983: PUSH
23984: LD_INT 17
23986: PUSH
23987: LD_INT 18
23989: PUSH
23990: LD_INT 19
23992: PUSH
23993: LD_INT 20
23995: PUSH
23996: LD_INT 21
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 24
24007: PUSH
24008: LD_INT 25
24010: PUSH
24011: LD_INT 26
24013: PUSH
24014: LD_INT 27
24016: PUSH
24017: LD_INT 28
24019: PUSH
24020: LD_INT 29
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 31
24028: PUSH
24029: LD_INT 32
24031: PUSH
24032: LD_INT 33
24034: PUSH
24035: LD_INT 34
24037: PUSH
24038: LD_INT 36
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 101
24080: PUSH
24081: LD_INT 102
24083: PUSH
24084: LD_INT 103
24086: PUSH
24087: LD_INT 104
24089: PUSH
24090: LD_INT 105
24092: PUSH
24093: LD_INT 106
24095: PUSH
24096: LD_INT 107
24098: PUSH
24099: LD_INT 108
24101: PUSH
24102: LD_INT 109
24104: PUSH
24105: LD_INT 110
24107: PUSH
24108: LD_INT 111
24110: PUSH
24111: LD_INT 112
24113: PUSH
24114: LD_INT 113
24116: PUSH
24117: LD_INT 114
24119: PUSH
24120: LD_INT 116
24122: PUSH
24123: LD_INT 117
24125: PUSH
24126: LD_INT 118
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: ST_TO_ADDR
24152: GO 25159
24154: LD_INT 15
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24386
24162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24163: LD_ADDR_VAR 0 2
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 4
24179: PUSH
24180: LD_INT 5
24182: PUSH
24183: LD_INT 6
24185: PUSH
24186: LD_INT 7
24188: PUSH
24189: LD_INT 8
24191: PUSH
24192: LD_INT 9
24194: PUSH
24195: LD_INT 10
24197: PUSH
24198: LD_INT 11
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: LD_INT 13
24206: PUSH
24207: LD_INT 14
24209: PUSH
24210: LD_INT 15
24212: PUSH
24213: LD_INT 16
24215: PUSH
24216: LD_INT 17
24218: PUSH
24219: LD_INT 18
24221: PUSH
24222: LD_INT 19
24224: PUSH
24225: LD_INT 20
24227: PUSH
24228: LD_INT 21
24230: PUSH
24231: LD_INT 22
24233: PUSH
24234: LD_INT 23
24236: PUSH
24237: LD_INT 24
24239: PUSH
24240: LD_INT 25
24242: PUSH
24243: LD_INT 26
24245: PUSH
24246: LD_INT 27
24248: PUSH
24249: LD_INT 28
24251: PUSH
24252: LD_INT 29
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 31
24260: PUSH
24261: LD_INT 32
24263: PUSH
24264: LD_INT 33
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_INT 36
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 101
24312: PUSH
24313: LD_INT 102
24315: PUSH
24316: LD_INT 103
24318: PUSH
24319: LD_INT 104
24321: PUSH
24322: LD_INT 105
24324: PUSH
24325: LD_INT 106
24327: PUSH
24328: LD_INT 107
24330: PUSH
24331: LD_INT 108
24333: PUSH
24334: LD_INT 109
24336: PUSH
24337: LD_INT 110
24339: PUSH
24340: LD_INT 111
24342: PUSH
24343: LD_INT 112
24345: PUSH
24346: LD_INT 113
24348: PUSH
24349: LD_INT 114
24351: PUSH
24352: LD_INT 116
24354: PUSH
24355: LD_INT 117
24357: PUSH
24358: LD_INT 118
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 25159
24386: LD_INT 16
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24530
24394: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 11
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 15
24420: PUSH
24421: LD_INT 16
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 22
24432: PUSH
24433: LD_INT 23
24435: PUSH
24436: LD_INT 25
24438: PUSH
24439: LD_INT 26
24441: PUSH
24442: LD_INT 30
24444: PUSH
24445: LD_INT 31
24447: PUSH
24448: LD_INT 32
24450: PUSH
24451: LD_INT 33
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 101
24480: PUSH
24481: LD_INT 102
24483: PUSH
24484: LD_INT 103
24486: PUSH
24487: LD_INT 106
24489: PUSH
24490: LD_INT 108
24492: PUSH
24493: LD_INT 112
24495: PUSH
24496: LD_INT 113
24498: PUSH
24499: LD_INT 114
24501: PUSH
24502: LD_INT 116
24504: PUSH
24505: LD_INT 117
24507: PUSH
24508: LD_INT 118
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: ST_TO_ADDR
24528: GO 25159
24530: LD_INT 17
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24762
24538: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24539: LD_ADDR_VAR 0 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 3
24552: PUSH
24553: LD_INT 4
24555: PUSH
24556: LD_INT 5
24558: PUSH
24559: LD_INT 6
24561: PUSH
24562: LD_INT 7
24564: PUSH
24565: LD_INT 8
24567: PUSH
24568: LD_INT 9
24570: PUSH
24571: LD_INT 10
24573: PUSH
24574: LD_INT 11
24576: PUSH
24577: LD_INT 12
24579: PUSH
24580: LD_INT 13
24582: PUSH
24583: LD_INT 14
24585: PUSH
24586: LD_INT 15
24588: PUSH
24589: LD_INT 16
24591: PUSH
24592: LD_INT 17
24594: PUSH
24595: LD_INT 18
24597: PUSH
24598: LD_INT 19
24600: PUSH
24601: LD_INT 20
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_INT 23
24612: PUSH
24613: LD_INT 24
24615: PUSH
24616: LD_INT 25
24618: PUSH
24619: LD_INT 26
24621: PUSH
24622: LD_INT 27
24624: PUSH
24625: LD_INT 28
24627: PUSH
24628: LD_INT 29
24630: PUSH
24631: LD_INT 30
24633: PUSH
24634: LD_INT 31
24636: PUSH
24637: LD_INT 32
24639: PUSH
24640: LD_INT 33
24642: PUSH
24643: LD_INT 34
24645: PUSH
24646: LD_INT 36
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 101
24688: PUSH
24689: LD_INT 102
24691: PUSH
24692: LD_INT 103
24694: PUSH
24695: LD_INT 104
24697: PUSH
24698: LD_INT 105
24700: PUSH
24701: LD_INT 106
24703: PUSH
24704: LD_INT 107
24706: PUSH
24707: LD_INT 108
24709: PUSH
24710: LD_INT 109
24712: PUSH
24713: LD_INT 110
24715: PUSH
24716: LD_INT 111
24718: PUSH
24719: LD_INT 112
24721: PUSH
24722: LD_INT 113
24724: PUSH
24725: LD_INT 114
24727: PUSH
24728: LD_INT 116
24730: PUSH
24731: LD_INT 117
24733: PUSH
24734: LD_INT 118
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: ST_TO_ADDR
24760: GO 25159
24762: LD_INT 18
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24918
24770: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24771: LD_ADDR_VAR 0 2
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 4
24781: PUSH
24782: LD_INT 5
24784: PUSH
24785: LD_INT 7
24787: PUSH
24788: LD_INT 11
24790: PUSH
24791: LD_INT 12
24793: PUSH
24794: LD_INT 15
24796: PUSH
24797: LD_INT 16
24799: PUSH
24800: LD_INT 20
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 23
24811: PUSH
24812: LD_INT 25
24814: PUSH
24815: LD_INT 26
24817: PUSH
24818: LD_INT 30
24820: PUSH
24821: LD_INT 31
24823: PUSH
24824: LD_INT 32
24826: PUSH
24827: LD_INT 33
24829: PUSH
24830: LD_INT 34
24832: PUSH
24833: LD_INT 35
24835: PUSH
24836: LD_INT 36
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 101
24864: PUSH
24865: LD_INT 102
24867: PUSH
24868: LD_INT 103
24870: PUSH
24871: LD_INT 106
24873: PUSH
24874: LD_INT 108
24876: PUSH
24877: LD_INT 112
24879: PUSH
24880: LD_INT 113
24882: PUSH
24883: LD_INT 114
24885: PUSH
24886: LD_INT 115
24888: PUSH
24889: LD_INT 116
24891: PUSH
24892: LD_INT 117
24894: PUSH
24895: LD_INT 118
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25159
24918: LD_INT 19
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 25158
24926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24927: LD_ADDR_VAR 0 2
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 4
24943: PUSH
24944: LD_INT 5
24946: PUSH
24947: LD_INT 6
24949: PUSH
24950: LD_INT 7
24952: PUSH
24953: LD_INT 8
24955: PUSH
24956: LD_INT 9
24958: PUSH
24959: LD_INT 10
24961: PUSH
24962: LD_INT 11
24964: PUSH
24965: LD_INT 12
24967: PUSH
24968: LD_INT 13
24970: PUSH
24971: LD_INT 14
24973: PUSH
24974: LD_INT 15
24976: PUSH
24977: LD_INT 16
24979: PUSH
24980: LD_INT 17
24982: PUSH
24983: LD_INT 18
24985: PUSH
24986: LD_INT 19
24988: PUSH
24989: LD_INT 20
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_INT 23
25000: PUSH
25001: LD_INT 24
25003: PUSH
25004: LD_INT 25
25006: PUSH
25007: LD_INT 26
25009: PUSH
25010: LD_INT 27
25012: PUSH
25013: LD_INT 28
25015: PUSH
25016: LD_INT 29
25018: PUSH
25019: LD_INT 30
25021: PUSH
25022: LD_INT 31
25024: PUSH
25025: LD_INT 32
25027: PUSH
25028: LD_INT 33
25030: PUSH
25031: LD_INT 34
25033: PUSH
25034: LD_INT 35
25036: PUSH
25037: LD_INT 36
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 101
25080: PUSH
25081: LD_INT 102
25083: PUSH
25084: LD_INT 103
25086: PUSH
25087: LD_INT 104
25089: PUSH
25090: LD_INT 105
25092: PUSH
25093: LD_INT 106
25095: PUSH
25096: LD_INT 107
25098: PUSH
25099: LD_INT 108
25101: PUSH
25102: LD_INT 109
25104: PUSH
25105: LD_INT 110
25107: PUSH
25108: LD_INT 111
25110: PUSH
25111: LD_INT 112
25113: PUSH
25114: LD_INT 113
25116: PUSH
25117: LD_INT 114
25119: PUSH
25120: LD_INT 115
25122: PUSH
25123: LD_INT 116
25125: PUSH
25126: LD_INT 117
25128: PUSH
25129: LD_INT 118
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: ST_TO_ADDR
25156: GO 25159
25158: POP
// end else
25159: GO 25390
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25161: LD_ADDR_VAR 0 2
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: LD_INT 4
25177: PUSH
25178: LD_INT 5
25180: PUSH
25181: LD_INT 6
25183: PUSH
25184: LD_INT 7
25186: PUSH
25187: LD_INT 8
25189: PUSH
25190: LD_INT 9
25192: PUSH
25193: LD_INT 10
25195: PUSH
25196: LD_INT 11
25198: PUSH
25199: LD_INT 12
25201: PUSH
25202: LD_INT 13
25204: PUSH
25205: LD_INT 14
25207: PUSH
25208: LD_INT 15
25210: PUSH
25211: LD_INT 16
25213: PUSH
25214: LD_INT 17
25216: PUSH
25217: LD_INT 18
25219: PUSH
25220: LD_INT 19
25222: PUSH
25223: LD_INT 20
25225: PUSH
25226: LD_INT 21
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_INT 23
25234: PUSH
25235: LD_INT 24
25237: PUSH
25238: LD_INT 25
25240: PUSH
25241: LD_INT 26
25243: PUSH
25244: LD_INT 27
25246: PUSH
25247: LD_INT 28
25249: PUSH
25250: LD_INT 29
25252: PUSH
25253: LD_INT 30
25255: PUSH
25256: LD_INT 31
25258: PUSH
25259: LD_INT 32
25261: PUSH
25262: LD_INT 33
25264: PUSH
25265: LD_INT 34
25267: PUSH
25268: LD_INT 35
25270: PUSH
25271: LD_INT 36
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 101
25314: PUSH
25315: LD_INT 102
25317: PUSH
25318: LD_INT 103
25320: PUSH
25321: LD_INT 104
25323: PUSH
25324: LD_INT 105
25326: PUSH
25327: LD_INT 106
25329: PUSH
25330: LD_INT 107
25332: PUSH
25333: LD_INT 108
25335: PUSH
25336: LD_INT 109
25338: PUSH
25339: LD_INT 110
25341: PUSH
25342: LD_INT 111
25344: PUSH
25345: LD_INT 112
25347: PUSH
25348: LD_INT 113
25350: PUSH
25351: LD_INT 114
25353: PUSH
25354: LD_INT 115
25356: PUSH
25357: LD_INT 116
25359: PUSH
25360: LD_INT 117
25362: PUSH
25363: LD_INT 118
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// if result then
25390: LD_VAR 0 2
25394: IFFALSE 26180
// begin normal :=  ;
25396: LD_ADDR_VAR 0 5
25400: PUSH
25401: LD_STRING 
25403: ST_TO_ADDR
// hardcore :=  ;
25404: LD_ADDR_VAR 0 6
25408: PUSH
25409: LD_STRING 
25411: ST_TO_ADDR
// active :=  ;
25412: LD_ADDR_VAR 0 7
25416: PUSH
25417: LD_STRING 
25419: ST_TO_ADDR
// for i = 1 to normalCounter do
25420: LD_ADDR_VAR 0 8
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_EXP 53
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25537
// begin tmp := 0 ;
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_STRING 0
25445: ST_TO_ADDR
// if result [ 1 ] then
25446: LD_VAR 0 2
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: IFFALSE 25519
// if result [ 1 ] [ 1 ] = i then
25456: LD_VAR 0 2
25460: PUSH
25461: LD_INT 1
25463: ARRAY
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PUSH
25469: LD_VAR 0 8
25473: EQUAL
25474: IFFALSE 25519
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25476: LD_ADDR_VAR 0 2
25480: PUSH
25481: LD_VAR 0 2
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: LD_VAR 0 2
25493: PUSH
25494: LD_INT 1
25496: ARRAY
25497: PPUSH
25498: LD_INT 1
25500: PPUSH
25501: CALL_OW 3
25505: PPUSH
25506: CALL_OW 1
25510: ST_TO_ADDR
// tmp := 1 ;
25511: LD_ADDR_VAR 0 3
25515: PUSH
25516: LD_STRING 1
25518: ST_TO_ADDR
// end ; normal := normal & tmp ;
25519: LD_ADDR_VAR 0 5
25523: PUSH
25524: LD_VAR 0 5
25528: PUSH
25529: LD_VAR 0 3
25533: STR
25534: ST_TO_ADDR
// end ;
25535: GO 25435
25537: POP
25538: POP
// for i = 1 to hardcoreCounter do
25539: LD_ADDR_VAR 0 8
25543: PUSH
25544: DOUBLE
25545: LD_INT 1
25547: DEC
25548: ST_TO_ADDR
25549: LD_EXP 54
25553: PUSH
25554: FOR_TO
25555: IFFALSE 25660
// begin tmp := 0 ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_STRING 0
25564: ST_TO_ADDR
// if result [ 2 ] then
25565: LD_VAR 0 2
25569: PUSH
25570: LD_INT 2
25572: ARRAY
25573: IFFALSE 25642
// if result [ 2 ] [ 1 ] = 100 + i then
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: ARRAY
25583: PUSH
25584: LD_INT 1
25586: ARRAY
25587: PUSH
25588: LD_INT 100
25590: PUSH
25591: LD_VAR 0 8
25595: PLUS
25596: EQUAL
25597: IFFALSE 25642
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25599: LD_ADDR_VAR 0 2
25603: PUSH
25604: LD_VAR 0 2
25608: PPUSH
25609: LD_INT 2
25611: PPUSH
25612: LD_VAR 0 2
25616: PUSH
25617: LD_INT 2
25619: ARRAY
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 3
25628: PPUSH
25629: CALL_OW 1
25633: ST_TO_ADDR
// tmp := 1 ;
25634: LD_ADDR_VAR 0 3
25638: PUSH
25639: LD_STRING 1
25641: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25642: LD_ADDR_VAR 0 6
25646: PUSH
25647: LD_VAR 0 6
25651: PUSH
25652: LD_VAR 0 3
25656: STR
25657: ST_TO_ADDR
// end ;
25658: GO 25554
25660: POP
25661: POP
// if isGameLoad then
25662: LD_VAR 0 1
25666: IFFALSE 26141
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25668: LD_ADDR_VAR 0 4
25672: PUSH
25673: LD_EXP 57
25677: PUSH
25678: LD_EXP 56
25682: PUSH
25683: LD_EXP 58
25687: PUSH
25688: LD_EXP 55
25692: PUSH
25693: LD_EXP 59
25697: PUSH
25698: LD_EXP 60
25702: PUSH
25703: LD_EXP 61
25707: PUSH
25708: LD_EXP 62
25712: PUSH
25713: LD_EXP 63
25717: PUSH
25718: LD_EXP 64
25722: PUSH
25723: LD_EXP 65
25727: PUSH
25728: LD_EXP 66
25732: PUSH
25733: LD_EXP 67
25737: PUSH
25738: LD_EXP 68
25742: PUSH
25743: LD_EXP 76
25747: PUSH
25748: LD_EXP 77
25752: PUSH
25753: LD_EXP 78
25757: PUSH
25758: LD_EXP 79
25762: PUSH
25763: LD_EXP 81
25767: PUSH
25768: LD_EXP 82
25772: PUSH
25773: LD_EXP 83
25777: PUSH
25778: LD_EXP 86
25782: PUSH
25783: LD_EXP 88
25787: PUSH
25788: LD_EXP 89
25792: PUSH
25793: LD_EXP 90
25797: PUSH
25798: LD_EXP 92
25802: PUSH
25803: LD_EXP 93
25807: PUSH
25808: LD_EXP 96
25812: PUSH
25813: LD_EXP 97
25817: PUSH
25818: LD_EXP 98
25822: PUSH
25823: LD_EXP 99
25827: PUSH
25828: LD_EXP 100
25832: PUSH
25833: LD_EXP 101
25837: PUSH
25838: LD_EXP 102
25842: PUSH
25843: LD_EXP 103
25847: PUSH
25848: LD_EXP 104
25852: PUSH
25853: LD_EXP 69
25857: PUSH
25858: LD_EXP 70
25862: PUSH
25863: LD_EXP 73
25867: PUSH
25868: LD_EXP 74
25872: PUSH
25873: LD_EXP 75
25877: PUSH
25878: LD_EXP 71
25882: PUSH
25883: LD_EXP 72
25887: PUSH
25888: LD_EXP 80
25892: PUSH
25893: LD_EXP 84
25897: PUSH
25898: LD_EXP 85
25902: PUSH
25903: LD_EXP 87
25907: PUSH
25908: LD_EXP 91
25912: PUSH
25913: LD_EXP 94
25917: PUSH
25918: LD_EXP 95
25922: PUSH
25923: LD_EXP 105
25927: PUSH
25928: LD_EXP 106
25932: PUSH
25933: LD_EXP 107
25937: PUSH
25938: LD_EXP 108
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: ST_TO_ADDR
// tmp :=  ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_STRING 
26006: ST_TO_ADDR
// for i = 1 to normalCounter do
26007: LD_ADDR_VAR 0 8
26011: PUSH
26012: DOUBLE
26013: LD_INT 1
26015: DEC
26016: ST_TO_ADDR
26017: LD_EXP 53
26021: PUSH
26022: FOR_TO
26023: IFFALSE 26059
// begin if flags [ i ] then
26025: LD_VAR 0 4
26029: PUSH
26030: LD_VAR 0 8
26034: ARRAY
26035: IFFALSE 26057
// tmp := tmp & i & ; ;
26037: LD_ADDR_VAR 0 3
26041: PUSH
26042: LD_VAR 0 3
26046: PUSH
26047: LD_VAR 0 8
26051: STR
26052: PUSH
26053: LD_STRING ;
26055: STR
26056: ST_TO_ADDR
// end ;
26057: GO 26022
26059: POP
26060: POP
// for i = 1 to hardcoreCounter do
26061: LD_ADDR_VAR 0 8
26065: PUSH
26066: DOUBLE
26067: LD_INT 1
26069: DEC
26070: ST_TO_ADDR
26071: LD_EXP 54
26075: PUSH
26076: FOR_TO
26077: IFFALSE 26123
// begin if flags [ normalCounter + i ] then
26079: LD_VAR 0 4
26083: PUSH
26084: LD_EXP 53
26088: PUSH
26089: LD_VAR 0 8
26093: PLUS
26094: ARRAY
26095: IFFALSE 26121
// tmp := tmp & ( 100 + i ) & ; ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_VAR 0 3
26106: PUSH
26107: LD_INT 100
26109: PUSH
26110: LD_VAR 0 8
26114: PLUS
26115: STR
26116: PUSH
26117: LD_STRING ;
26119: STR
26120: ST_TO_ADDR
// end ;
26121: GO 26076
26123: POP
26124: POP
// if tmp then
26125: LD_VAR 0 3
26129: IFFALSE 26141
// active := tmp ;
26131: LD_ADDR_VAR 0 7
26135: PUSH
26136: LD_VAR 0 3
26140: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26141: LD_STRING getStreamItemsFromMission("
26143: PUSH
26144: LD_VAR 0 5
26148: STR
26149: PUSH
26150: LD_STRING ","
26152: STR
26153: PUSH
26154: LD_VAR 0 6
26158: STR
26159: PUSH
26160: LD_STRING ","
26162: STR
26163: PUSH
26164: LD_VAR 0 7
26168: STR
26169: PUSH
26170: LD_STRING ")
26172: STR
26173: PPUSH
26174: CALL_OW 559
// end else
26178: GO 26187
// ToLua ( getStreamItemsFromMission("","","") ) ;
26180: LD_STRING getStreamItemsFromMission("","","")
26182: PPUSH
26183: CALL_OW 559
// end ;
26187: LD_VAR 0 2
26191: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26192: LD_EXP 52
26196: PUSH
26197: LD_EXP 57
26201: AND
26202: IFFALSE 26326
26204: GO 26206
26206: DISABLE
26207: LD_INT 0
26209: PPUSH
26210: PPUSH
// begin enable ;
26211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26212: LD_ADDR_VAR 0 2
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_OWVAR 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 34
26234: PUSH
26235: LD_INT 7
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 34
26244: PUSH
26245: LD_INT 45
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 34
26254: PUSH
26255: LD_INT 28
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 34
26264: PUSH
26265: LD_INT 47
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PPUSH
26283: CALL_OW 69
26287: ST_TO_ADDR
// if not tmp then
26288: LD_VAR 0 2
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 26326
// for i in tmp do
26297: LD_ADDR_VAR 0 1
26301: PUSH
26302: LD_VAR 0 2
26306: PUSH
26307: FOR_IN
26308: IFFALSE 26324
// begin SetLives ( i , 0 ) ;
26310: LD_VAR 0 1
26314: PPUSH
26315: LD_INT 0
26317: PPUSH
26318: CALL_OW 234
// end ;
26322: GO 26307
26324: POP
26325: POP
// end ;
26326: PPOPN 2
26328: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26329: LD_EXP 52
26333: PUSH
26334: LD_EXP 58
26338: AND
26339: IFFALSE 26423
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
// begin enable ;
26348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 32
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26423
// for i in tmp do
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: FOR_IN
26405: IFFALSE 26421
// begin SetLives ( i , 0 ) ;
26407: LD_VAR 0 1
26411: PPUSH
26412: LD_INT 0
26414: PPUSH
26415: CALL_OW 234
// end ;
26419: GO 26404
26421: POP
26422: POP
// end ;
26423: PPOPN 2
26425: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26426: LD_EXP 52
26430: PUSH
26431: LD_EXP 55
26435: AND
26436: IFFALSE 26529
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
// begin enable ;
26444: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_INT 22
26452: PUSH
26453: LD_OWVAR 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 25
26467: PUSH
26468: LD_INT 5
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 25
26477: PUSH
26478: LD_INT 9
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 25
26487: PUSH
26488: LD_INT 8
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: PUSH
26510: FOR_IN
26511: IFFALSE 26527
// begin SetClass ( i , 1 ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_INT 1
26520: PPUSH
26521: CALL_OW 336
// end ;
26525: GO 26510
26527: POP
26528: POP
// end ;
26529: PPOPN 1
26531: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26532: LD_EXP 52
26536: PUSH
26537: LD_EXP 56
26541: AND
26542: PUSH
26543: LD_OWVAR 65
26547: PUSH
26548: LD_INT 7
26550: LESS
26551: AND
26552: IFFALSE 26566
26554: GO 26556
26556: DISABLE
// begin enable ;
26557: ENABLE
// game_speed := 7 ;
26558: LD_ADDR_OWVAR 65
26562: PUSH
26563: LD_INT 7
26565: ST_TO_ADDR
// end ;
26566: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26567: LD_EXP 52
26571: PUSH
26572: LD_EXP 59
26576: AND
26577: IFFALSE 26779
26579: GO 26581
26581: DISABLE
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 81
26594: PUSH
26595: LD_OWVAR 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PPUSH
26618: CALL_OW 69
26622: ST_TO_ADDR
// if not tmp then
26623: LD_VAR 0 3
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26779
// if tmp > 5 then
26632: LD_VAR 0 3
26636: PUSH
26637: LD_INT 5
26639: GREATER
26640: IFFALSE 26652
// k := 5 else
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_INT 5
26649: ST_TO_ADDR
26650: GO 26662
// k := tmp ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 3
26661: ST_TO_ADDR
// for i := 1 to k do
26662: LD_ADDR_VAR 0 1
26666: PUSH
26667: DOUBLE
26668: LD_INT 1
26670: DEC
26671: ST_TO_ADDR
26672: LD_VAR 0 2
26676: PUSH
26677: FOR_TO
26678: IFFALSE 26777
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26680: LD_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: ARRAY
26690: PPUSH
26691: LD_VAR 0 1
26695: PUSH
26696: LD_INT 4
26698: MOD
26699: PUSH
26700: LD_INT 1
26702: PLUS
26703: PPUSH
26704: CALL_OW 259
26708: PUSH
26709: LD_INT 10
26711: LESS
26712: IFFALSE 26775
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26714: LD_VAR 0 3
26718: PUSH
26719: LD_VAR 0 1
26723: ARRAY
26724: PPUSH
26725: LD_VAR 0 1
26729: PUSH
26730: LD_INT 4
26732: MOD
26733: PUSH
26734: LD_INT 1
26736: PLUS
26737: PPUSH
26738: LD_VAR 0 3
26742: PUSH
26743: LD_VAR 0 1
26747: ARRAY
26748: PPUSH
26749: LD_VAR 0 1
26753: PUSH
26754: LD_INT 4
26756: MOD
26757: PUSH
26758: LD_INT 1
26760: PLUS
26761: PPUSH
26762: CALL_OW 259
26766: PUSH
26767: LD_INT 1
26769: PLUS
26770: PPUSH
26771: CALL_OW 237
26775: GO 26677
26777: POP
26778: POP
// end ;
26779: PPOPN 3
26781: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26782: LD_EXP 52
26786: PUSH
26787: LD_EXP 60
26791: AND
26792: IFFALSE 26812
26794: GO 26796
26796: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26797: LD_INT 4
26799: PPUSH
26800: LD_OWVAR 2
26804: PPUSH
26805: LD_INT 0
26807: PPUSH
26808: CALL_OW 324
26812: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26813: LD_EXP 52
26817: PUSH
26818: LD_EXP 89
26822: AND
26823: IFFALSE 26843
26825: GO 26827
26827: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26828: LD_INT 19
26830: PPUSH
26831: LD_OWVAR 2
26835: PPUSH
26836: LD_INT 0
26838: PPUSH
26839: CALL_OW 324
26843: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26844: LD_EXP 52
26848: PUSH
26849: LD_EXP 61
26853: AND
26854: IFFALSE 26956
26856: GO 26858
26858: DISABLE
26859: LD_INT 0
26861: PPUSH
26862: PPUSH
// begin enable ;
26863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: LD_INT 22
26871: PUSH
26872: LD_OWVAR 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 34
26886: PUSH
26887: LD_INT 11
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 34
26896: PUSH
26897: LD_INT 30
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PPUSH
26913: CALL_OW 69
26917: ST_TO_ADDR
// if not tmp then
26918: LD_VAR 0 2
26922: NOT
26923: IFFALSE 26927
// exit ;
26925: GO 26956
// for i in tmp do
26927: LD_ADDR_VAR 0 1
26931: PUSH
26932: LD_VAR 0 2
26936: PUSH
26937: FOR_IN
26938: IFFALSE 26954
// begin SetLives ( i , 0 ) ;
26940: LD_VAR 0 1
26944: PPUSH
26945: LD_INT 0
26947: PPUSH
26948: CALL_OW 234
// end ;
26952: GO 26937
26954: POP
26955: POP
// end ;
26956: PPOPN 2
26958: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26959: LD_EXP 52
26963: PUSH
26964: LD_EXP 62
26968: AND
26969: IFFALSE 26989
26971: GO 26973
26973: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26974: LD_INT 32
26976: PPUSH
26977: LD_OWVAR 2
26981: PPUSH
26982: LD_INT 0
26984: PPUSH
26985: CALL_OW 324
26989: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26990: LD_EXP 52
26994: PUSH
26995: LD_EXP 63
26999: AND
27000: IFFALSE 27181
27002: GO 27004
27004: DISABLE
27005: LD_INT 0
27007: PPUSH
27008: PPUSH
27009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27010: LD_ADDR_VAR 0 2
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_OWVAR 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 33
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: ST_TO_ADDR
// if not tmp then
27046: LD_VAR 0 2
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27181
// side := 0 ;
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 0
27062: ST_TO_ADDR
// for i := 1 to 8 do
27063: LD_ADDR_VAR 0 1
27067: PUSH
27068: DOUBLE
27069: LD_INT 1
27071: DEC
27072: ST_TO_ADDR
27073: LD_INT 8
27075: PUSH
27076: FOR_TO
27077: IFFALSE 27125
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27079: LD_OWVAR 2
27083: PUSH
27084: LD_VAR 0 1
27088: NONEQUAL
27089: PUSH
27090: LD_OWVAR 2
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 81
27104: PUSH
27105: LD_INT 2
27107: EQUAL
27108: AND
27109: IFFALSE 27123
// begin side := i ;
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_VAR 0 1
27120: ST_TO_ADDR
// break ;
27121: GO 27125
// end ;
27123: GO 27076
27125: POP
27126: POP
// if not side then
27127: LD_VAR 0 3
27131: NOT
27132: IFFALSE 27136
// exit ;
27134: GO 27181
// for i := 1 to tmp do
27136: LD_ADDR_VAR 0 1
27140: PUSH
27141: DOUBLE
27142: LD_INT 1
27144: DEC
27145: ST_TO_ADDR
27146: LD_VAR 0 2
27150: PUSH
27151: FOR_TO
27152: IFFALSE 27179
// if Prob ( 60 ) then
27154: LD_INT 60
27156: PPUSH
27157: CALL_OW 13
27161: IFFALSE 27177
// SetSide ( i , side ) ;
27163: LD_VAR 0 1
27167: PPUSH
27168: LD_VAR 0 3
27172: PPUSH
27173: CALL_OW 235
27177: GO 27151
27179: POP
27180: POP
// end ;
27181: PPOPN 3
27183: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27184: LD_EXP 52
27188: PUSH
27189: LD_EXP 65
27193: AND
27194: IFFALSE 27313
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27202: LD_ADDR_VAR 0 1
27206: PUSH
27207: LD_INT 22
27209: PUSH
27210: LD_OWVAR 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 21
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: LD_INT 23
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: PUSH
27256: FOR_IN
27257: IFFALSE 27311
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 257
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: IN
27287: IFFALSE 27309
// SetClass ( un , rand ( 1 , 4 ) ) ;
27289: LD_VAR 0 1
27293: PPUSH
27294: LD_INT 1
27296: PPUSH
27297: LD_INT 4
27299: PPUSH
27300: CALL_OW 12
27304: PPUSH
27305: CALL_OW 336
27309: GO 27256
27311: POP
27312: POP
// end ;
27313: PPOPN 1
27315: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27316: LD_EXP 52
27320: PUSH
27321: LD_EXP 64
27325: AND
27326: IFFALSE 27405
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: LD_INT 22
27341: PUSH
27342: LD_OWVAR 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 21
27353: PUSH
27354: LD_INT 3
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: ST_TO_ADDR
// if not tmp then
27370: LD_VAR 0 1
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27379: LD_VAR 0 1
27383: PUSH
27384: LD_INT 1
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 12
27396: ARRAY
27397: PPUSH
27398: LD_INT 100
27400: PPUSH
27401: CALL_OW 234
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 66
27417: AND
27418: IFFALSE 27516
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 21
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27516
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: PPUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 12
27488: ARRAY
27489: PPUSH
27490: LD_INT 1
27492: PPUSH
27493: LD_INT 4
27495: PPUSH
27496: CALL_OW 12
27500: PPUSH
27501: LD_INT 3000
27503: PPUSH
27504: LD_INT 9000
27506: PPUSH
27507: CALL_OW 12
27511: PPUSH
27512: CALL_OW 492
// end ;
27516: PPOPN 1
27518: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27519: LD_EXP 52
27523: PUSH
27524: LD_EXP 67
27528: AND
27529: IFFALSE 27549
27531: GO 27533
27533: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27534: LD_INT 1
27536: PPUSH
27537: LD_OWVAR 2
27541: PPUSH
27542: LD_INT 0
27544: PPUSH
27545: CALL_OW 324
27549: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27550: LD_EXP 52
27554: PUSH
27555: LD_EXP 68
27559: AND
27560: IFFALSE 27643
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_INT 22
27576: PUSH
27577: LD_OWVAR 2
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 21
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PPUSH
27600: CALL_OW 69
27604: ST_TO_ADDR
// if not tmp then
27605: LD_VAR 0 2
27609: NOT
27610: IFFALSE 27614
// exit ;
27612: GO 27643
// for i in tmp do
27614: LD_ADDR_VAR 0 1
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: FOR_IN
27625: IFFALSE 27641
// SetBLevel ( i , 10 ) ;
27627: LD_VAR 0 1
27631: PPUSH
27632: LD_INT 10
27634: PPUSH
27635: CALL_OW 241
27639: GO 27624
27641: POP
27642: POP
// end ;
27643: PPOPN 2
27645: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27646: LD_EXP 52
27650: PUSH
27651: LD_EXP 69
27655: AND
27656: IFFALSE 27767
27658: GO 27660
27660: DISABLE
27661: LD_INT 0
27663: PPUSH
27664: PPUSH
27665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: LD_OWVAR 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 25
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: ST_TO_ADDR
// if not tmp then
27702: LD_VAR 0 3
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 27767
// un := tmp [ rand ( 1 , tmp ) ] ;
27711: LD_ADDR_VAR 0 2
27715: PUSH
27716: LD_VAR 0 3
27720: PUSH
27721: LD_INT 1
27723: PPUSH
27724: LD_VAR 0 3
27728: PPUSH
27729: CALL_OW 12
27733: ARRAY
27734: ST_TO_ADDR
// if Crawls ( un ) then
27735: LD_VAR 0 2
27739: PPUSH
27740: CALL_OW 318
27744: IFFALSE 27755
// ComWalk ( un ) ;
27746: LD_VAR 0 2
27750: PPUSH
27751: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27755: LD_VAR 0 2
27759: PPUSH
27760: LD_INT 5
27762: PPUSH
27763: CALL_OW 336
// end ;
27767: PPOPN 3
27769: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27770: LD_EXP 52
27774: PUSH
27775: LD_EXP 70
27779: AND
27780: PUSH
27781: LD_OWVAR 67
27785: PUSH
27786: LD_INT 4
27788: LESS
27789: AND
27790: IFFALSE 27809
27792: GO 27794
27794: DISABLE
// begin Difficulty := Difficulty + 1 ;
27795: LD_ADDR_OWVAR 67
27799: PUSH
27800: LD_OWVAR 67
27804: PUSH
27805: LD_INT 1
27807: PLUS
27808: ST_TO_ADDR
// end ;
27809: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27810: LD_EXP 52
27814: PUSH
27815: LD_EXP 71
27819: AND
27820: IFFALSE 27923
27822: GO 27824
27824: DISABLE
27825: LD_INT 0
27827: PPUSH
// begin for i := 1 to 5 do
27828: LD_ADDR_VAR 0 1
27832: PUSH
27833: DOUBLE
27834: LD_INT 1
27836: DEC
27837: ST_TO_ADDR
27838: LD_INT 5
27840: PUSH
27841: FOR_TO
27842: IFFALSE 27921
// begin uc_nation := nation_nature ;
27844: LD_ADDR_OWVAR 21
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// uc_side := 0 ;
27852: LD_ADDR_OWVAR 20
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27860: LD_ADDR_OWVAR 29
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: LD_INT 12
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// hc_agressivity := 20 ;
27875: LD_ADDR_OWVAR 35
27879: PUSH
27880: LD_INT 20
27882: ST_TO_ADDR
// hc_class := class_tiger ;
27883: LD_ADDR_OWVAR 28
27887: PUSH
27888: LD_INT 14
27890: ST_TO_ADDR
// hc_gallery :=  ;
27891: LD_ADDR_OWVAR 33
27895: PUSH
27896: LD_STRING 
27898: ST_TO_ADDR
// hc_name :=  ;
27899: LD_ADDR_OWVAR 26
27903: PUSH
27904: LD_STRING 
27906: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27907: CALL_OW 44
27911: PPUSH
27912: LD_INT 0
27914: PPUSH
27915: CALL_OW 51
// end ;
27919: GO 27841
27921: POP
27922: POP
// end ;
27923: PPOPN 1
27925: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27926: LD_EXP 52
27930: PUSH
27931: LD_EXP 72
27935: AND
27936: IFFALSE 27945
27938: GO 27940
27940: DISABLE
// StreamSibBomb ;
27941: CALL 27946 0 0
27945: END
// export function StreamSibBomb ; var i , x , y ; begin
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// result := false ;
27952: LD_ADDR_VAR 0 1
27956: PUSH
27957: LD_INT 0
27959: ST_TO_ADDR
// for i := 1 to 16 do
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: DOUBLE
27966: LD_INT 1
27968: DEC
27969: ST_TO_ADDR
27970: LD_INT 16
27972: PUSH
27973: FOR_TO
27974: IFFALSE 28173
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27976: LD_ADDR_VAR 0 3
27980: PUSH
27981: LD_INT 10
27983: PUSH
27984: LD_INT 20
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: LD_INT 40
27992: PUSH
27993: LD_INT 50
27995: PUSH
27996: LD_INT 60
27998: PUSH
27999: LD_INT 70
28001: PUSH
28002: LD_INT 80
28004: PUSH
28005: LD_INT 90
28007: PUSH
28008: LD_INT 100
28010: PUSH
28011: LD_INT 110
28013: PUSH
28014: LD_INT 120
28016: PUSH
28017: LD_INT 130
28019: PUSH
28020: LD_INT 140
28022: PUSH
28023: LD_INT 150
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PPUSH
28046: LD_INT 15
28048: PPUSH
28049: CALL_OW 12
28053: ARRAY
28054: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28055: LD_ADDR_VAR 0 4
28059: PUSH
28060: LD_INT 10
28062: PUSH
28063: LD_INT 20
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_INT 40
28071: PUSH
28072: LD_INT 50
28074: PUSH
28075: LD_INT 60
28077: PUSH
28078: LD_INT 70
28080: PUSH
28081: LD_INT 80
28083: PUSH
28084: LD_INT 90
28086: PUSH
28087: LD_INT 100
28089: PUSH
28090: LD_INT 110
28092: PUSH
28093: LD_INT 120
28095: PUSH
28096: LD_INT 130
28098: PUSH
28099: LD_INT 140
28101: PUSH
28102: LD_INT 150
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PPUSH
28125: LD_INT 15
28127: PPUSH
28128: CALL_OW 12
28132: ARRAY
28133: ST_TO_ADDR
// if ValidHex ( x , y ) then
28134: LD_VAR 0 3
28138: PPUSH
28139: LD_VAR 0 4
28143: PPUSH
28144: CALL_OW 488
28148: IFFALSE 28171
// begin result := [ x , y ] ;
28150: LD_ADDR_VAR 0 1
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: LD_VAR 0 4
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// break ;
28169: GO 28173
// end ; end ;
28171: GO 27973
28173: POP
28174: POP
// if result then
28175: LD_VAR 0 1
28179: IFFALSE 28239
// begin ToLua ( playSibBomb() ) ;
28181: LD_STRING playSibBomb()
28183: PPUSH
28184: CALL_OW 559
// wait ( 0 0$14 ) ;
28188: LD_INT 490
28190: PPUSH
28191: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28195: LD_VAR 0 1
28199: PUSH
28200: LD_INT 1
28202: ARRAY
28203: PPUSH
28204: LD_VAR 0 1
28208: PUSH
28209: LD_INT 2
28211: ARRAY
28212: PPUSH
28213: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28217: LD_VAR 0 1
28221: PUSH
28222: LD_INT 1
28224: ARRAY
28225: PPUSH
28226: LD_VAR 0 1
28230: PUSH
28231: LD_INT 2
28233: ARRAY
28234: PPUSH
28235: CALL_OW 429
// end ; end ;
28239: LD_VAR 0 1
28243: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28244: LD_EXP 52
28248: PUSH
28249: LD_EXP 74
28253: AND
28254: IFFALSE 28266
28256: GO 28258
28258: DISABLE
// YouLost (  ) ;
28259: LD_STRING 
28261: PPUSH
28262: CALL_OW 104
28266: END
// every 0 0$1 trigger StreamModeActive and sFog do
28267: LD_EXP 52
28271: PUSH
28272: LD_EXP 73
28276: AND
28277: IFFALSE 28291
28279: GO 28281
28281: DISABLE
// FogOff ( your_side ) ;
28282: LD_OWVAR 2
28286: PPUSH
28287: CALL_OW 344
28291: END
// every 0 0$1 trigger StreamModeActive and sSun do
28292: LD_EXP 52
28296: PUSH
28297: LD_EXP 75
28301: AND
28302: IFFALSE 28330
28304: GO 28306
28306: DISABLE
// begin solar_recharge_percent := 0 ;
28307: LD_ADDR_OWVAR 79
28311: PUSH
28312: LD_INT 0
28314: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28315: LD_INT 10500
28317: PPUSH
28318: CALL_OW 67
// solar_recharge_percent := 100 ;
28322: LD_ADDR_OWVAR 79
28326: PUSH
28327: LD_INT 100
28329: ST_TO_ADDR
// end ;
28330: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28331: LD_EXP 52
28335: PUSH
28336: LD_EXP 76
28340: AND
28341: IFFALSE 28580
28343: GO 28345
28345: DISABLE
28346: LD_INT 0
28348: PPUSH
28349: PPUSH
28350: PPUSH
// begin tmp := [ ] ;
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: EMPTY
28357: ST_TO_ADDR
// for i := 1 to 6 do
28358: LD_ADDR_VAR 0 1
28362: PUSH
28363: DOUBLE
28364: LD_INT 1
28366: DEC
28367: ST_TO_ADDR
28368: LD_INT 6
28370: PUSH
28371: FOR_TO
28372: IFFALSE 28477
// begin uc_nation := nation_nature ;
28374: LD_ADDR_OWVAR 21
28378: PUSH
28379: LD_INT 0
28381: ST_TO_ADDR
// uc_side := 0 ;
28382: LD_ADDR_OWVAR 20
28386: PUSH
28387: LD_INT 0
28389: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28390: LD_ADDR_OWVAR 29
28394: PUSH
28395: LD_INT 12
28397: PUSH
28398: LD_INT 12
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// hc_agressivity := 20 ;
28405: LD_ADDR_OWVAR 35
28409: PUSH
28410: LD_INT 20
28412: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28413: LD_ADDR_OWVAR 28
28417: PUSH
28418: LD_INT 17
28420: ST_TO_ADDR
// hc_gallery :=  ;
28421: LD_ADDR_OWVAR 33
28425: PUSH
28426: LD_STRING 
28428: ST_TO_ADDR
// hc_name :=  ;
28429: LD_ADDR_OWVAR 26
28433: PUSH
28434: LD_STRING 
28436: ST_TO_ADDR
// un := CreateHuman ;
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: CALL_OW 44
28446: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_INT 1
28454: PPUSH
28455: CALL_OW 51
// tmp := tmp ^ un ;
28459: LD_ADDR_VAR 0 3
28463: PUSH
28464: LD_VAR 0 3
28468: PUSH
28469: LD_VAR 0 2
28473: ADD
28474: ST_TO_ADDR
// end ;
28475: GO 28371
28477: POP
28478: POP
// repeat wait ( 0 0$1 ) ;
28479: LD_INT 35
28481: PPUSH
28482: CALL_OW 67
// for un in tmp do
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_VAR 0 3
28495: PUSH
28496: FOR_IN
28497: IFFALSE 28571
// begin if IsDead ( un ) then
28499: LD_VAR 0 2
28503: PPUSH
28504: CALL_OW 301
28508: IFFALSE 28528
// begin tmp := tmp diff un ;
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_VAR 0 3
28519: PUSH
28520: LD_VAR 0 2
28524: DIFF
28525: ST_TO_ADDR
// continue ;
28526: GO 28496
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28528: LD_VAR 0 2
28532: PPUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 22
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: PPUSH
28555: LD_VAR 0 2
28559: PPUSH
28560: CALL_OW 74
28564: PPUSH
28565: CALL_OW 115
// end ;
28569: GO 28496
28571: POP
28572: POP
// until not tmp ;
28573: LD_VAR 0 3
28577: NOT
28578: IFFALSE 28479
// end ;
28580: PPOPN 3
28582: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28583: LD_EXP 52
28587: PUSH
28588: LD_EXP 77
28592: AND
28593: IFFALSE 28647
28595: GO 28597
28597: DISABLE
// begin ToLua ( displayTroll(); ) ;
28598: LD_STRING displayTroll();
28600: PPUSH
28601: CALL_OW 559
// wait ( 3 3$00 ) ;
28605: LD_INT 6300
28607: PPUSH
28608: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28612: LD_STRING hideTroll();
28614: PPUSH
28615: CALL_OW 559
// wait ( 1 1$00 ) ;
28619: LD_INT 2100
28621: PPUSH
28622: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28626: LD_STRING displayTroll();
28628: PPUSH
28629: CALL_OW 559
// wait ( 1 1$00 ) ;
28633: LD_INT 2100
28635: PPUSH
28636: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28640: LD_STRING hideTroll();
28642: PPUSH
28643: CALL_OW 559
// end ;
28647: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28648: LD_EXP 52
28652: PUSH
28653: LD_EXP 78
28657: AND
28658: IFFALSE 28721
28660: GO 28662
28662: DISABLE
28663: LD_INT 0
28665: PPUSH
// begin p := 0 ;
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_INT 0
28673: ST_TO_ADDR
// repeat game_speed := 1 ;
28674: LD_ADDR_OWVAR 65
28678: PUSH
28679: LD_INT 1
28681: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28682: LD_INT 35
28684: PPUSH
28685: CALL_OW 67
// p := p + 1 ;
28689: LD_ADDR_VAR 0 1
28693: PUSH
28694: LD_VAR 0 1
28698: PUSH
28699: LD_INT 1
28701: PLUS
28702: ST_TO_ADDR
// until p >= 60 ;
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 60
28710: GREATEREQUAL
28711: IFFALSE 28674
// game_speed := 4 ;
28713: LD_ADDR_OWVAR 65
28717: PUSH
28718: LD_INT 4
28720: ST_TO_ADDR
// end ;
28721: PPOPN 1
28723: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28724: LD_EXP 52
28728: PUSH
28729: LD_EXP 79
28733: AND
28734: IFFALSE 28880
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_OWVAR 2
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 69
28796: ST_TO_ADDR
// if not depot then
28797: LD_VAR 0 1
28801: NOT
28802: IFFALSE 28806
// exit ;
28804: GO 28880
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28806: LD_ADDR_VAR 0 2
28810: PUSH
28811: LD_VAR 0 1
28815: PUSH
28816: LD_INT 1
28818: PPUSH
28819: LD_VAR 0 1
28823: PPUSH
28824: CALL_OW 12
28828: ARRAY
28829: PPUSH
28830: CALL_OW 274
28834: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: LD_INT 1
28842: PPUSH
28843: LD_INT 0
28845: PPUSH
28846: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_INT 2
28857: PPUSH
28858: LD_INT 0
28860: PPUSH
28861: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_INT 3
28872: PPUSH
28873: LD_INT 0
28875: PPUSH
28876: CALL_OW 277
// end ;
28880: PPOPN 2
28882: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28883: LD_EXP 52
28887: PUSH
28888: LD_EXP 80
28892: AND
28893: IFFALSE 28990
28895: GO 28897
28897: DISABLE
28898: LD_INT 0
28900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_OWVAR 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 21
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: PUSH
28931: LD_INT 23
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 69
28954: ST_TO_ADDR
// if not tmp then
28955: LD_VAR 0 1
28959: NOT
28960: IFFALSE 28964
// exit ;
28962: GO 28990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28964: LD_VAR 0 1
28968: PUSH
28969: LD_INT 1
28971: PPUSH
28972: LD_VAR 0 1
28976: PPUSH
28977: CALL_OW 12
28981: ARRAY
28982: PPUSH
28983: LD_INT 200
28985: PPUSH
28986: CALL_OW 234
// end ;
28990: PPOPN 1
28992: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28993: LD_EXP 52
28997: PUSH
28998: LD_EXP 81
29002: AND
29003: IFFALSE 29082
29005: GO 29007
29007: DISABLE
29008: LD_INT 0
29010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29011: LD_ADDR_VAR 0 1
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_OWVAR 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 21
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 69
29046: ST_TO_ADDR
// if not tmp then
29047: LD_VAR 0 1
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29056: LD_VAR 0 1
29060: PUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 12
29073: ARRAY
29074: PPUSH
29075: LD_INT 60
29077: PPUSH
29078: CALL_OW 234
// end ;
29082: PPOPN 1
29084: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29085: LD_EXP 52
29089: PUSH
29090: LD_EXP 82
29094: AND
29095: IFFALSE 29194
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
// begin enable ;
29104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29105: LD_ADDR_VAR 0 1
29109: PUSH
29110: LD_INT 22
29112: PUSH
29113: LD_OWVAR 2
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 61
29124: PUSH
29125: EMPTY
29126: LIST
29127: PUSH
29128: LD_INT 33
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: ST_TO_ADDR
// if not tmp then
29148: LD_VAR 0 1
29152: NOT
29153: IFFALSE 29157
// exit ;
29155: GO 29194
// for i in tmp do
29157: LD_ADDR_VAR 0 2
29161: PUSH
29162: LD_VAR 0 1
29166: PUSH
29167: FOR_IN
29168: IFFALSE 29192
// if IsControledBy ( i ) then
29170: LD_VAR 0 2
29174: PPUSH
29175: CALL_OW 312
29179: IFFALSE 29190
// ComUnlink ( i ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: CALL_OW 136
29190: GO 29167
29192: POP
29193: POP
// end ;
29194: PPOPN 2
29196: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29197: LD_EXP 52
29201: PUSH
29202: LD_EXP 83
29206: AND
29207: IFFALSE 29347
29209: GO 29211
29211: DISABLE
29212: LD_INT 0
29214: PPUSH
29215: PPUSH
// begin ToLua ( displayPowell(); ) ;
29216: LD_STRING displayPowell();
29218: PPUSH
29219: CALL_OW 559
// uc_side := 0 ;
29223: LD_ADDR_OWVAR 20
29227: PUSH
29228: LD_INT 0
29230: ST_TO_ADDR
// uc_nation := 2 ;
29231: LD_ADDR_OWVAR 21
29235: PUSH
29236: LD_INT 2
29238: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29239: LD_ADDR_OWVAR 37
29243: PUSH
29244: LD_INT 14
29246: ST_TO_ADDR
// vc_engine := engine_siberite ;
29247: LD_ADDR_OWVAR 39
29251: PUSH
29252: LD_INT 3
29254: ST_TO_ADDR
// vc_control := control_apeman ;
29255: LD_ADDR_OWVAR 38
29259: PUSH
29260: LD_INT 5
29262: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29263: LD_ADDR_OWVAR 40
29267: PUSH
29268: LD_INT 29
29270: ST_TO_ADDR
// un := CreateVehicle ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: CALL_OW 45
29280: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: LD_INT 1
29288: PPUSH
29289: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29293: LD_INT 35
29295: PPUSH
29296: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29300: LD_VAR 0 2
29304: PPUSH
29305: LD_INT 22
29307: PUSH
29308: LD_OWVAR 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 69
29321: PPUSH
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 74
29331: PPUSH
29332: CALL_OW 115
// until IsDead ( un ) ;
29336: LD_VAR 0 2
29340: PPUSH
29341: CALL_OW 301
29345: IFFALSE 29293
// end ;
29347: PPOPN 2
29349: END
// every 0 0$1 trigger StreamModeActive and sStu do
29350: LD_EXP 52
29354: PUSH
29355: LD_EXP 91
29359: AND
29360: IFFALSE 29376
29362: GO 29364
29364: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29365: LD_STRING displayStucuk();
29367: PPUSH
29368: CALL_OW 559
// ResetFog ;
29372: CALL_OW 335
// end ;
29376: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29377: LD_EXP 52
29381: PUSH
29382: LD_EXP 84
29386: AND
29387: IFFALSE 29528
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29396: LD_ADDR_VAR 0 2
29400: PUSH
29401: LD_INT 22
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 21
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PPUSH
29427: CALL_OW 69
29431: ST_TO_ADDR
// if not tmp then
29432: LD_VAR 0 2
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29528
// un := tmp [ rand ( 1 , tmp ) ] ;
29441: LD_ADDR_VAR 0 1
29445: PUSH
29446: LD_VAR 0 2
29450: PUSH
29451: LD_INT 1
29453: PPUSH
29454: LD_VAR 0 2
29458: PPUSH
29459: CALL_OW 12
29463: ARRAY
29464: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29465: LD_VAR 0 1
29469: PPUSH
29470: LD_INT 0
29472: PPUSH
29473: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_OWVAR 3
29486: PUSH
29487: LD_VAR 0 1
29491: DIFF
29492: PPUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 74
29502: PPUSH
29503: CALL_OW 115
// wait ( 0 0$20 ) ;
29507: LD_INT 700
29509: PPUSH
29510: CALL_OW 67
// SetSide ( un , your_side ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_OWVAR 2
29523: PPUSH
29524: CALL_OW 235
// end ;
29528: PPOPN 2
29530: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29531: LD_EXP 52
29535: PUSH
29536: LD_EXP 85
29540: AND
29541: IFFALSE 29647
29543: GO 29545
29545: DISABLE
29546: LD_INT 0
29548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29549: LD_ADDR_VAR 0 1
29553: PUSH
29554: LD_INT 22
29556: PUSH
29557: LD_OWVAR 2
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 30
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PPUSH
29598: CALL_OW 69
29602: ST_TO_ADDR
// if not depot then
29603: LD_VAR 0 1
29607: NOT
29608: IFFALSE 29612
// exit ;
29610: GO 29647
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29612: LD_VAR 0 1
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: CALL_OW 250
29625: PPUSH
29626: LD_VAR 0 1
29630: PUSH
29631: LD_INT 1
29633: ARRAY
29634: PPUSH
29635: CALL_OW 251
29639: PPUSH
29640: LD_INT 70
29642: PPUSH
29643: CALL_OW 495
// end ;
29647: PPOPN 1
29649: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29650: LD_EXP 52
29654: PUSH
29655: LD_EXP 86
29659: AND
29660: IFFALSE 29871
29662: GO 29664
29664: DISABLE
29665: LD_INT 0
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_INT 22
29679: PUSH
29680: LD_OWVAR 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 21
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 69
29707: ST_TO_ADDR
// if not tmp then
29708: LD_VAR 0 5
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29871
// for i in tmp do
29717: LD_ADDR_VAR 0 1
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: FOR_IN
29728: IFFALSE 29869
// begin d := rand ( 0 , 5 ) ;
29730: LD_ADDR_VAR 0 4
29734: PUSH
29735: LD_INT 0
29737: PPUSH
29738: LD_INT 5
29740: PPUSH
29741: CALL_OW 12
29745: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29746: LD_ADDR_VAR 0 2
29750: PUSH
29751: LD_VAR 0 1
29755: PPUSH
29756: CALL_OW 250
29760: PPUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: LD_INT 3
29768: PPUSH
29769: LD_INT 12
29771: PPUSH
29772: CALL_OW 12
29776: PPUSH
29777: CALL_OW 272
29781: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 251
29796: PPUSH
29797: LD_VAR 0 4
29801: PPUSH
29802: LD_INT 3
29804: PPUSH
29805: LD_INT 12
29807: PPUSH
29808: CALL_OW 12
29812: PPUSH
29813: CALL_OW 273
29817: ST_TO_ADDR
// if ValidHex ( x , y ) then
29818: LD_VAR 0 2
29822: PPUSH
29823: LD_VAR 0 3
29827: PPUSH
29828: CALL_OW 488
29832: IFFALSE 29867
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29834: LD_VAR 0 1
29838: PPUSH
29839: LD_VAR 0 2
29843: PPUSH
29844: LD_VAR 0 3
29848: PPUSH
29849: LD_INT 3
29851: PPUSH
29852: LD_INT 6
29854: PPUSH
29855: CALL_OW 12
29859: PPUSH
29860: LD_INT 1
29862: PPUSH
29863: CALL_OW 483
// end ;
29867: GO 29727
29869: POP
29870: POP
// end ;
29871: PPOPN 5
29873: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29874: LD_EXP 52
29878: PUSH
29879: LD_EXP 87
29883: AND
29884: IFFALSE 29978
29886: GO 29888
29888: DISABLE
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 32
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 21
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PPUSH
29935: CALL_OW 69
29939: ST_TO_ADDR
// if not tmp then
29940: LD_VAR 0 2
29944: NOT
29945: IFFALSE 29949
// exit ;
29947: GO 29978
// for i in tmp do
29949: LD_ADDR_VAR 0 1
29953: PUSH
29954: LD_VAR 0 2
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29976
// SetFuel ( i , 0 ) ;
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_INT 0
29969: PPUSH
29970: CALL_OW 240
29974: GO 29959
29976: POP
29977: POP
// end ;
29978: PPOPN 2
29980: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29981: LD_EXP 52
29985: PUSH
29986: LD_EXP 88
29990: AND
29991: IFFALSE 30057
29993: GO 29995
29995: DISABLE
29996: LD_INT 0
29998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_INT 22
30006: PUSH
30007: LD_OWVAR 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: LD_INT 29
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 69
30034: ST_TO_ADDR
// if not tmp then
30035: LD_VAR 0 1
30039: NOT
30040: IFFALSE 30044
// exit ;
30042: GO 30057
// DestroyUnit ( tmp [ 1 ] ) ;
30044: LD_VAR 0 1
30048: PUSH
30049: LD_INT 1
30051: ARRAY
30052: PPUSH
30053: CALL_OW 65
// end ;
30057: PPOPN 1
30059: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30060: LD_EXP 52
30064: PUSH
30065: LD_EXP 90
30069: AND
30070: IFFALSE 30199
30072: GO 30074
30074: DISABLE
30075: LD_INT 0
30077: PPUSH
// begin uc_side := 0 ;
30078: LD_ADDR_OWVAR 20
30082: PUSH
30083: LD_INT 0
30085: ST_TO_ADDR
// uc_nation := nation_arabian ;
30086: LD_ADDR_OWVAR 21
30090: PUSH
30091: LD_INT 2
30093: ST_TO_ADDR
// hc_gallery :=  ;
30094: LD_ADDR_OWVAR 33
30098: PUSH
30099: LD_STRING 
30101: ST_TO_ADDR
// hc_name :=  ;
30102: LD_ADDR_OWVAR 26
30106: PUSH
30107: LD_STRING 
30109: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30110: LD_INT 1
30112: PPUSH
30113: LD_INT 11
30115: PPUSH
30116: LD_INT 10
30118: PPUSH
30119: CALL_OW 380
// un := CreateHuman ;
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: CALL_OW 44
30132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30133: LD_VAR 0 1
30137: PPUSH
30138: LD_INT 1
30140: PPUSH
30141: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30145: LD_INT 35
30147: PPUSH
30148: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PPUSH
30169: CALL_OW 69
30173: PPUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 74
30183: PPUSH
30184: CALL_OW 115
// until IsDead ( un ) ;
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 301
30197: IFFALSE 30145
// end ;
30199: PPOPN 1
30201: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30202: LD_EXP 52
30206: PUSH
30207: LD_EXP 92
30211: AND
30212: IFFALSE 30224
30214: GO 30216
30216: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30217: LD_STRING earthquake(getX(game), 0, 32)
30219: PPUSH
30220: CALL_OW 559
30224: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30225: LD_EXP 52
30229: PUSH
30230: LD_EXP 93
30234: AND
30235: IFFALSE 30326
30237: GO 30239
30239: DISABLE
30240: LD_INT 0
30242: PPUSH
// begin enable ;
30243: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30244: LD_ADDR_VAR 0 1
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_OWVAR 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 21
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 33
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL_OW 69
30290: ST_TO_ADDR
// if not tmp then
30291: LD_VAR 0 1
30295: NOT
30296: IFFALSE 30300
// exit ;
30298: GO 30326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30300: LD_VAR 0 1
30304: PUSH
30305: LD_INT 1
30307: PPUSH
30308: LD_VAR 0 1
30312: PPUSH
30313: CALL_OW 12
30317: ARRAY
30318: PPUSH
30319: LD_INT 1
30321: PPUSH
30322: CALL_OW 234
// end ;
30326: PPOPN 1
30328: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30329: LD_EXP 52
30333: PUSH
30334: LD_EXP 94
30338: AND
30339: IFFALSE 30480
30341: GO 30343
30343: DISABLE
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_INT 22
30356: PUSH
30357: LD_OWVAR 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 25
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 69
30384: ST_TO_ADDR
// if not tmp then
30385: LD_VAR 0 3
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30480
// un := tmp [ rand ( 1 , tmp ) ] ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: LD_INT 1
30406: PPUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: CALL_OW 12
30416: ARRAY
30417: ST_TO_ADDR
// if Crawls ( un ) then
30418: LD_VAR 0 2
30422: PPUSH
30423: CALL_OW 318
30427: IFFALSE 30438
// ComWalk ( un ) ;
30429: LD_VAR 0 2
30433: PPUSH
30434: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30438: LD_VAR 0 2
30442: PPUSH
30443: LD_INT 9
30445: PPUSH
30446: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30450: LD_INT 28
30452: PPUSH
30453: LD_OWVAR 2
30457: PPUSH
30458: LD_INT 2
30460: PPUSH
30461: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30465: LD_INT 29
30467: PPUSH
30468: LD_OWVAR 2
30472: PPUSH
30473: LD_INT 2
30475: PPUSH
30476: CALL_OW 322
// end ;
30480: PPOPN 3
30482: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30483: LD_EXP 52
30487: PUSH
30488: LD_EXP 95
30492: AND
30493: IFFALSE 30604
30495: GO 30497
30497: DISABLE
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30503: LD_ADDR_VAR 0 3
30507: PUSH
30508: LD_INT 22
30510: PUSH
30511: LD_OWVAR 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 25
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PPUSH
30534: CALL_OW 69
30538: ST_TO_ADDR
// if not tmp then
30539: LD_VAR 0 3
30543: NOT
30544: IFFALSE 30548
// exit ;
30546: GO 30604
// un := tmp [ rand ( 1 , tmp ) ] ;
30548: LD_ADDR_VAR 0 2
30552: PUSH
30553: LD_VAR 0 3
30557: PUSH
30558: LD_INT 1
30560: PPUSH
30561: LD_VAR 0 3
30565: PPUSH
30566: CALL_OW 12
30570: ARRAY
30571: ST_TO_ADDR
// if Crawls ( un ) then
30572: LD_VAR 0 2
30576: PPUSH
30577: CALL_OW 318
30581: IFFALSE 30592
// ComWalk ( un ) ;
30583: LD_VAR 0 2
30587: PPUSH
30588: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_INT 8
30599: PPUSH
30600: CALL_OW 336
// end ;
30604: PPOPN 3
30606: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30607: LD_EXP 52
30611: PUSH
30612: LD_EXP 96
30616: AND
30617: IFFALSE 30761
30619: GO 30621
30621: DISABLE
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30626: LD_ADDR_VAR 0 2
30630: PUSH
30631: LD_INT 22
30633: PUSH
30634: LD_OWVAR 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 21
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 34
30658: PUSH
30659: LD_INT 12
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 34
30668: PUSH
30669: LD_INT 51
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 34
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: PPUSH
30697: CALL_OW 69
30701: ST_TO_ADDR
// if not tmp then
30702: LD_VAR 0 2
30706: NOT
30707: IFFALSE 30711
// exit ;
30709: GO 30761
// for i in tmp do
30711: LD_ADDR_VAR 0 1
30715: PUSH
30716: LD_VAR 0 2
30720: PUSH
30721: FOR_IN
30722: IFFALSE 30759
// if GetCargo ( i , mat_artifact ) = 0 then
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_INT 4
30731: PPUSH
30732: CALL_OW 289
30736: PUSH
30737: LD_INT 0
30739: EQUAL
30740: IFFALSE 30757
// SetCargo ( i , mat_siberit , 100 ) ;
30742: LD_VAR 0 1
30746: PPUSH
30747: LD_INT 3
30749: PPUSH
30750: LD_INT 100
30752: PPUSH
30753: CALL_OW 290
30757: GO 30721
30759: POP
30760: POP
// end ;
30761: PPOPN 2
30763: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30764: LD_EXP 52
30768: PUSH
30769: LD_EXP 97
30773: AND
30774: IFFALSE 30957
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 22
30790: PUSH
30791: LD_OWVAR 2
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PPUSH
30800: CALL_OW 69
30804: ST_TO_ADDR
// if not tmp then
30805: LD_VAR 0 2
30809: NOT
30810: IFFALSE 30814
// exit ;
30812: GO 30957
// for i := 1 to 2 do
30814: LD_ADDR_VAR 0 1
30818: PUSH
30819: DOUBLE
30820: LD_INT 1
30822: DEC
30823: ST_TO_ADDR
30824: LD_INT 2
30826: PUSH
30827: FOR_TO
30828: IFFALSE 30955
// begin uc_side := your_side ;
30830: LD_ADDR_OWVAR 20
30834: PUSH
30835: LD_OWVAR 2
30839: ST_TO_ADDR
// uc_nation := nation_american ;
30840: LD_ADDR_OWVAR 21
30844: PUSH
30845: LD_INT 1
30847: ST_TO_ADDR
// vc_chassis := us_morphling ;
30848: LD_ADDR_OWVAR 37
30852: PUSH
30853: LD_INT 5
30855: ST_TO_ADDR
// vc_engine := engine_siberite ;
30856: LD_ADDR_OWVAR 39
30860: PUSH
30861: LD_INT 3
30863: ST_TO_ADDR
// vc_control := control_computer ;
30864: LD_ADDR_OWVAR 38
30868: PUSH
30869: LD_INT 3
30871: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30872: LD_ADDR_OWVAR 40
30876: PUSH
30877: LD_INT 10
30879: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30880: LD_VAR 0 2
30884: PUSH
30885: LD_INT 1
30887: ARRAY
30888: PPUSH
30889: CALL_OW 310
30893: NOT
30894: IFFALSE 30941
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30896: CALL_OW 45
30900: PPUSH
30901: LD_VAR 0 2
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PPUSH
30910: CALL_OW 250
30914: PPUSH
30915: LD_VAR 0 2
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: CALL_OW 251
30928: PPUSH
30929: LD_INT 12
30931: PPUSH
30932: LD_INT 1
30934: PPUSH
30935: CALL_OW 50
30939: GO 30953
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30941: CALL_OW 45
30945: PPUSH
30946: LD_INT 1
30948: PPUSH
30949: CALL_OW 51
// end ;
30953: GO 30827
30955: POP
30956: POP
// end ;
30957: PPOPN 2
30959: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30960: LD_EXP 52
30964: PUSH
30965: LD_EXP 98
30969: AND
30970: IFFALSE 31192
30972: GO 30974
30974: DISABLE
30975: LD_INT 0
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_INT 22
30990: PUSH
30991: LD_OWVAR 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 21
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 23
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: PPUSH
31032: CALL_OW 69
31036: ST_TO_ADDR
// if not tmp then
31037: LD_VAR 0 6
31041: NOT
31042: IFFALSE 31046
// exit ;
31044: GO 31192
// s1 := rand ( 1 , 4 ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 1
31053: PPUSH
31054: LD_INT 4
31056: PPUSH
31057: CALL_OW 12
31061: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31062: LD_ADDR_VAR 0 4
31066: PUSH
31067: LD_VAR 0 6
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: PPUSH
31076: LD_VAR 0 2
31080: PPUSH
31081: CALL_OW 259
31085: ST_TO_ADDR
// if s1 = 1 then
31086: LD_VAR 0 2
31090: PUSH
31091: LD_INT 1
31093: EQUAL
31094: IFFALSE 31114
// s2 := rand ( 2 , 4 ) else
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 2
31103: PPUSH
31104: LD_INT 4
31106: PPUSH
31107: CALL_OW 12
31111: ST_TO_ADDR
31112: GO 31122
// s2 := 1 ;
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_INT 1
31121: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31122: LD_ADDR_VAR 0 5
31126: PUSH
31127: LD_VAR 0 6
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 259
31145: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31146: LD_VAR 0 6
31150: PUSH
31151: LD_INT 1
31153: ARRAY
31154: PPUSH
31155: LD_VAR 0 2
31159: PPUSH
31160: LD_VAR 0 5
31164: PPUSH
31165: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31169: LD_VAR 0 6
31173: PUSH
31174: LD_INT 1
31176: ARRAY
31177: PPUSH
31178: LD_VAR 0 3
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: CALL_OW 237
// end ;
31192: PPOPN 6
31194: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31195: LD_EXP 52
31199: PUSH
31200: LD_EXP 99
31204: AND
31205: IFFALSE 31284
31207: GO 31209
31209: DISABLE
31210: LD_INT 0
31212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31213: LD_ADDR_VAR 0 1
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_OWVAR 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 1
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31258: LD_VAR 0 1
31262: PUSH
31263: LD_INT 1
31265: PPUSH
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 12
31275: ARRAY
31276: PPUSH
31277: LD_INT 1
31279: PPUSH
31280: CALL_OW 234
// end ;
31284: PPOPN 1
31286: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31287: LD_EXP 52
31291: PUSH
31292: LD_EXP 100
31296: AND
31297: IFFALSE 31409
31299: GO 31301
31301: DISABLE
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_INT 22
31313: PUSH
31314: LD_OWVAR 2
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: LD_INT 27
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 26
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: LD_INT 28
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 69
31370: ST_TO_ADDR
// if not tmp then
31371: LD_VAR 0 2
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31409
// for i in tmp do
31380: LD_ADDR_VAR 0 1
31384: PUSH
31385: LD_VAR 0 2
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31407
// SetLives ( i , 1 ) ;
31393: LD_VAR 0 1
31397: PPUSH
31398: LD_INT 1
31400: PPUSH
31401: CALL_OW 234
31405: GO 31390
31407: POP
31408: POP
// end ;
31409: PPOPN 2
31411: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31412: LD_EXP 52
31416: PUSH
31417: LD_EXP 101
31421: AND
31422: IFFALSE 31709
31424: GO 31426
31426: DISABLE
31427: LD_INT 0
31429: PPUSH
31430: PPUSH
31431: PPUSH
// begin i := rand ( 1 , 7 ) ;
31432: LD_ADDR_VAR 0 1
31436: PUSH
31437: LD_INT 1
31439: PPUSH
31440: LD_INT 7
31442: PPUSH
31443: CALL_OW 12
31447: ST_TO_ADDR
// case i of 1 :
31448: LD_VAR 0 1
31452: PUSH
31453: LD_INT 1
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31471
31461: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31462: LD_STRING earthquake(getX(game), 0, 32)
31464: PPUSH
31465: CALL_OW 559
31469: GO 31709
31471: LD_INT 2
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31493
31479: POP
// begin ToLua ( displayStucuk(); ) ;
31480: LD_STRING displayStucuk();
31482: PPUSH
31483: CALL_OW 559
// ResetFog ;
31487: CALL_OW 335
// end ; 3 :
31491: GO 31709
31493: LD_INT 3
31495: DOUBLE
31496: EQUAL
31497: IFTRUE 31501
31499: GO 31605
31501: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31502: LD_ADDR_VAR 0 2
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_OWVAR 2
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 25
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: CALL_OW 69
31537: ST_TO_ADDR
// if not tmp then
31538: LD_VAR 0 2
31542: NOT
31543: IFFALSE 31547
// exit ;
31545: GO 31709
// un := tmp [ rand ( 1 , tmp ) ] ;
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_VAR 0 2
31556: PUSH
31557: LD_INT 1
31559: PPUSH
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL_OW 12
31569: ARRAY
31570: ST_TO_ADDR
// if Crawls ( un ) then
31571: LD_VAR 0 3
31575: PPUSH
31576: CALL_OW 318
31580: IFFALSE 31591
// ComWalk ( un ) ;
31582: LD_VAR 0 3
31586: PPUSH
31587: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_INT 8
31598: PPUSH
31599: CALL_OW 336
// end ; 4 :
31603: GO 31709
31605: LD_INT 4
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31687
31613: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31614: LD_ADDR_VAR 0 2
31618: PUSH
31619: LD_INT 22
31621: PUSH
31622: LD_OWVAR 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 30
31633: PUSH
31634: LD_INT 29
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PPUSH
31645: CALL_OW 69
31649: ST_TO_ADDR
// if not tmp then
31650: LD_VAR 0 2
31654: NOT
31655: IFFALSE 31659
// exit ;
31657: GO 31709
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31659: LD_VAR 0 2
31663: PUSH
31664: LD_INT 1
31666: ARRAY
31667: PPUSH
31668: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31672: LD_VAR 0 2
31676: PUSH
31677: LD_INT 1
31679: ARRAY
31680: PPUSH
31681: CALL_OW 65
// end ; 5 .. 7 :
31685: GO 31709
31687: LD_INT 5
31689: DOUBLE
31690: GREATEREQUAL
31691: IFFALSE 31699
31693: LD_INT 7
31695: DOUBLE
31696: LESSEQUAL
31697: IFTRUE 31701
31699: GO 31708
31701: POP
// StreamSibBomb ; end ;
31702: CALL 27946 0 0
31706: GO 31709
31708: POP
// end ;
31709: PPOPN 3
31711: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31712: LD_EXP 52
31716: PUSH
31717: LD_EXP 102
31721: AND
31722: IFFALSE 31878
31724: GO 31726
31726: DISABLE
31727: LD_INT 0
31729: PPUSH
31730: PPUSH
31731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31732: LD_ADDR_VAR 0 2
31736: PUSH
31737: LD_INT 81
31739: PUSH
31740: LD_OWVAR 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 21
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 21
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PPUSH
31781: CALL_OW 69
31785: ST_TO_ADDR
// if not tmp then
31786: LD_VAR 0 2
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 31878
// p := 0 ;
31795: LD_ADDR_VAR 0 3
31799: PUSH
31800: LD_INT 0
31802: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31803: LD_INT 35
31805: PPUSH
31806: CALL_OW 67
// p := p + 1 ;
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_VAR 0 3
31819: PUSH
31820: LD_INT 1
31822: PLUS
31823: ST_TO_ADDR
// for i in tmp do
31824: LD_ADDR_VAR 0 1
31828: PUSH
31829: LD_VAR 0 2
31833: PUSH
31834: FOR_IN
31835: IFFALSE 31866
// if GetLives ( i ) < 1000 then
31837: LD_VAR 0 1
31841: PPUSH
31842: CALL_OW 256
31846: PUSH
31847: LD_INT 1000
31849: LESS
31850: IFFALSE 31864
// SetLives ( i , 1000 ) ;
31852: LD_VAR 0 1
31856: PPUSH
31857: LD_INT 1000
31859: PPUSH
31860: CALL_OW 234
31864: GO 31834
31866: POP
31867: POP
// until p > 20 ;
31868: LD_VAR 0 3
31872: PUSH
31873: LD_INT 20
31875: GREATER
31876: IFFALSE 31803
// end ;
31878: PPOPN 3
31880: END
// every 0 0$1 trigger StreamModeActive and sTime do
31881: LD_EXP 52
31885: PUSH
31886: LD_EXP 103
31890: AND
31891: IFFALSE 31926
31893: GO 31895
31895: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31896: LD_INT 28
31898: PPUSH
31899: LD_OWVAR 2
31903: PPUSH
31904: LD_INT 2
31906: PPUSH
31907: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31911: LD_INT 30
31913: PPUSH
31914: LD_OWVAR 2
31918: PPUSH
31919: LD_INT 2
31921: PPUSH
31922: CALL_OW 322
// end ;
31926: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31927: LD_EXP 52
31931: PUSH
31932: LD_EXP 104
31936: AND
31937: IFFALSE 32058
31939: GO 31941
31941: DISABLE
31942: LD_INT 0
31944: PPUSH
31945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31946: LD_ADDR_VAR 0 2
31950: PUSH
31951: LD_INT 22
31953: PUSH
31954: LD_OWVAR 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 21
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 23
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PPUSH
31995: CALL_OW 69
31999: ST_TO_ADDR
// if not tmp then
32000: LD_VAR 0 2
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32058
// for i in tmp do
32009: LD_ADDR_VAR 0 1
32013: PUSH
32014: LD_VAR 0 2
32018: PUSH
32019: FOR_IN
32020: IFFALSE 32056
// begin if Crawls ( i ) then
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 318
32031: IFFALSE 32042
// ComWalk ( i ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 138
// SetClass ( i , 2 ) ;
32042: LD_VAR 0 1
32046: PPUSH
32047: LD_INT 2
32049: PPUSH
32050: CALL_OW 336
// end ;
32054: GO 32019
32056: POP
32057: POP
// end ;
32058: PPOPN 2
32060: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32061: LD_EXP 52
32065: PUSH
32066: LD_EXP 105
32070: AND
32071: IFFALSE 32359
32073: GO 32075
32075: DISABLE
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32081: LD_OWVAR 2
32085: PPUSH
32086: LD_INT 9
32088: PPUSH
32089: LD_INT 1
32091: PPUSH
32092: LD_INT 1
32094: PPUSH
32095: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32099: LD_INT 9
32101: PPUSH
32102: LD_OWVAR 2
32106: PPUSH
32107: CALL_OW 343
// uc_side := 9 ;
32111: LD_ADDR_OWVAR 20
32115: PUSH
32116: LD_INT 9
32118: ST_TO_ADDR
// uc_nation := 2 ;
32119: LD_ADDR_OWVAR 21
32123: PUSH
32124: LD_INT 2
32126: ST_TO_ADDR
// hc_name := Dark Warrior ;
32127: LD_ADDR_OWVAR 26
32131: PUSH
32132: LD_STRING Dark Warrior
32134: ST_TO_ADDR
// hc_gallery :=  ;
32135: LD_ADDR_OWVAR 33
32139: PUSH
32140: LD_STRING 
32142: ST_TO_ADDR
// hc_noskilllimit := true ;
32143: LD_ADDR_OWVAR 76
32147: PUSH
32148: LD_INT 1
32150: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32151: LD_ADDR_OWVAR 31
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: LD_INT 30
32164: PUSH
32165: LD_INT 30
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// un := CreateHuman ;
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: CALL_OW 44
32183: ST_TO_ADDR
// hc_noskilllimit := false ;
32184: LD_ADDR_OWVAR 76
32188: PUSH
32189: LD_INT 0
32191: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32192: LD_VAR 0 3
32196: PPUSH
32197: LD_INT 1
32199: PPUSH
32200: CALL_OW 51
// ToLua ( playRanger() ) ;
32204: LD_STRING playRanger()
32206: PPUSH
32207: CALL_OW 559
// p := 0 ;
32211: LD_ADDR_VAR 0 2
32215: PUSH
32216: LD_INT 0
32218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32219: LD_INT 35
32221: PPUSH
32222: CALL_OW 67
// p := p + 1 ;
32226: LD_ADDR_VAR 0 2
32230: PUSH
32231: LD_VAR 0 2
32235: PUSH
32236: LD_INT 1
32238: PLUS
32239: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32240: LD_VAR 0 3
32244: PPUSH
32245: CALL_OW 256
32249: PUSH
32250: LD_INT 1000
32252: LESS
32253: IFFALSE 32267
// SetLives ( un , 1000 ) ;
32255: LD_VAR 0 3
32259: PPUSH
32260: LD_INT 1000
32262: PPUSH
32263: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32267: LD_VAR 0 3
32271: PPUSH
32272: LD_INT 81
32274: PUSH
32275: LD_OWVAR 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 91
32286: PUSH
32287: LD_VAR 0 3
32291: PUSH
32292: LD_INT 30
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: CALL_OW 74
32318: PPUSH
32319: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32323: LD_VAR 0 2
32327: PUSH
32328: LD_INT 80
32330: GREATER
32331: PUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: CALL_OW 301
32341: OR
32342: IFFALSE 32219
// if un then
32344: LD_VAR 0 3
32348: IFFALSE 32359
// RemoveUnit ( un ) ;
32350: LD_VAR 0 3
32354: PPUSH
32355: CALL_OW 64
// end ;
32359: PPOPN 3
32361: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32362: LD_EXP 106
32366: IFFALSE 32482
32368: GO 32370
32370: DISABLE
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32376: LD_ADDR_VAR 0 2
32380: PUSH
32381: LD_INT 81
32383: PUSH
32384: LD_OWVAR 2
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 21
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PPUSH
32407: CALL_OW 69
32411: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32412: LD_STRING playComputer()
32414: PPUSH
32415: CALL_OW 559
// if not tmp then
32419: LD_VAR 0 2
32423: NOT
32424: IFFALSE 32428
// exit ;
32426: GO 32482
// for i in tmp do
32428: LD_ADDR_VAR 0 1
32432: PUSH
32433: LD_VAR 0 2
32437: PUSH
32438: FOR_IN
32439: IFFALSE 32480
// for j := 1 to 4 do
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: DOUBLE
32447: LD_INT 1
32449: DEC
32450: ST_TO_ADDR
32451: LD_INT 4
32453: PUSH
32454: FOR_TO
32455: IFFALSE 32476
// SetSkill ( i , j , 10 ) ;
32457: LD_VAR 0 1
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_INT 10
32469: PPUSH
32470: CALL_OW 237
32474: GO 32454
32476: POP
32477: POP
32478: GO 32438
32480: POP
32481: POP
// end ;
32482: PPOPN 3
32484: END
// every 0 0$1 trigger s30 do var i , tmp ;
32485: LD_EXP 107
32489: IFFALSE 32558
32491: GO 32493
32493: DISABLE
32494: LD_INT 0
32496: PPUSH
32497: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32498: LD_ADDR_VAR 0 2
32502: PUSH
32503: LD_INT 22
32505: PUSH
32506: LD_OWVAR 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 69
32519: ST_TO_ADDR
// if not tmp then
32520: LD_VAR 0 2
32524: NOT
32525: IFFALSE 32529
// exit ;
32527: GO 32558
// for i in tmp do
32529: LD_ADDR_VAR 0 1
32533: PUSH
32534: LD_VAR 0 2
32538: PUSH
32539: FOR_IN
32540: IFFALSE 32556
// SetLives ( i , 300 ) ;
32542: LD_VAR 0 1
32546: PPUSH
32547: LD_INT 300
32549: PPUSH
32550: CALL_OW 234
32554: GO 32539
32556: POP
32557: POP
// end ;
32558: PPOPN 2
32560: END
// every 0 0$1 trigger s60 do var i , tmp ;
32561: LD_EXP 108
32565: IFFALSE 32634
32567: GO 32569
32569: DISABLE
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32574: LD_ADDR_VAR 0 2
32578: PUSH
32579: LD_INT 22
32581: PUSH
32582: LD_OWVAR 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PPUSH
32591: CALL_OW 69
32595: ST_TO_ADDR
// if not tmp then
32596: LD_VAR 0 2
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 32634
// for i in tmp do
32605: LD_ADDR_VAR 0 1
32609: PUSH
32610: LD_VAR 0 2
32614: PUSH
32615: FOR_IN
32616: IFFALSE 32632
// SetLives ( i , 600 ) ;
32618: LD_VAR 0 1
32622: PPUSH
32623: LD_INT 600
32625: PPUSH
32626: CALL_OW 234
32630: GO 32615
32632: POP
32633: POP
// end ;
32634: PPOPN 2
32636: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32637: LD_INT 0
32639: PPUSH
// case cmd of 301 :
32640: LD_VAR 0 1
32644: PUSH
32645: LD_INT 301
32647: DOUBLE
32648: EQUAL
32649: IFTRUE 32653
32651: GO 32685
32653: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32654: LD_VAR 0 6
32658: PPUSH
32659: LD_VAR 0 7
32663: PPUSH
32664: LD_VAR 0 8
32668: PPUSH
32669: LD_VAR 0 4
32673: PPUSH
32674: LD_VAR 0 5
32678: PPUSH
32679: CALL 33894 0 5
32683: GO 32806
32685: LD_INT 302
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32730
32693: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32694: LD_VAR 0 6
32698: PPUSH
32699: LD_VAR 0 7
32703: PPUSH
32704: LD_VAR 0 8
32708: PPUSH
32709: LD_VAR 0 9
32713: PPUSH
32714: LD_VAR 0 4
32718: PPUSH
32719: LD_VAR 0 5
32723: PPUSH
32724: CALL 33985 0 6
32728: GO 32806
32730: LD_INT 303
32732: DOUBLE
32733: EQUAL
32734: IFTRUE 32738
32736: GO 32775
32738: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32739: LD_VAR 0 6
32743: PPUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: LD_VAR 0 8
32753: PPUSH
32754: LD_VAR 0 9
32758: PPUSH
32759: LD_VAR 0 4
32763: PPUSH
32764: LD_VAR 0 5
32768: PPUSH
32769: CALL 32811 0 6
32773: GO 32806
32775: LD_INT 304
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32805
32783: POP
// hHackTeleport ( unit , x , y ) ; end ;
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_VAR 0 4
32793: PPUSH
32794: LD_VAR 0 5
32798: PPUSH
32799: CALL 34578 0 3
32803: GO 32806
32805: POP
// end ;
32806: LD_VAR 0 12
32810: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32811: LD_INT 0
32813: PPUSH
32814: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32815: LD_VAR 0 1
32819: PUSH
32820: LD_INT 1
32822: LESS
32823: PUSH
32824: LD_VAR 0 1
32828: PUSH
32829: LD_INT 3
32831: GREATER
32832: OR
32833: PUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: LD_VAR 0 6
32843: PPUSH
32844: CALL_OW 428
32848: OR
32849: IFFALSE 32853
// exit ;
32851: GO 33581
// uc_side := your_side ;
32853: LD_ADDR_OWVAR 20
32857: PUSH
32858: LD_OWVAR 2
32862: ST_TO_ADDR
// uc_nation := nation ;
32863: LD_ADDR_OWVAR 21
32867: PUSH
32868: LD_VAR 0 1
32872: ST_TO_ADDR
// bc_level = 1 ;
32873: LD_ADDR_OWVAR 43
32877: PUSH
32878: LD_INT 1
32880: ST_TO_ADDR
// case btype of 1 :
32881: LD_VAR 0 2
32885: PUSH
32886: LD_INT 1
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32905
32894: POP
// bc_type := b_depot ; 2 :
32895: LD_ADDR_OWVAR 42
32899: PUSH
32900: LD_INT 0
32902: ST_TO_ADDR
32903: GO 33525
32905: LD_INT 2
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32924
32913: POP
// bc_type := b_warehouse ; 3 :
32914: LD_ADDR_OWVAR 42
32918: PUSH
32919: LD_INT 1
32921: ST_TO_ADDR
32922: GO 33525
32924: LD_INT 3
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32943
32932: POP
// bc_type := b_lab ; 4 .. 9 :
32933: LD_ADDR_OWVAR 42
32937: PUSH
32938: LD_INT 6
32940: ST_TO_ADDR
32941: GO 33525
32943: LD_INT 4
32945: DOUBLE
32946: GREATEREQUAL
32947: IFFALSE 32955
32949: LD_INT 9
32951: DOUBLE
32952: LESSEQUAL
32953: IFTRUE 32957
32955: GO 33017
32957: POP
// begin bc_type := b_lab_half ;
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 7
32965: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32966: LD_ADDR_OWVAR 44
32970: PUSH
32971: LD_INT 10
32973: PUSH
32974: LD_INT 11
32976: PUSH
32977: LD_INT 12
32979: PUSH
32980: LD_INT 15
32982: PUSH
32983: LD_INT 14
32985: PUSH
32986: LD_INT 13
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: PUSH
32997: LD_VAR 0 2
33001: PUSH
33002: LD_INT 3
33004: MINUS
33005: ARRAY
33006: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33007: LD_ADDR_OWVAR 45
33011: PUSH
33012: LD_INT 9
33014: ST_TO_ADDR
// end ; 10 .. 13 :
33015: GO 33525
33017: LD_INT 10
33019: DOUBLE
33020: GREATEREQUAL
33021: IFFALSE 33029
33023: LD_INT 13
33025: DOUBLE
33026: LESSEQUAL
33027: IFTRUE 33031
33029: GO 33108
33031: POP
// begin bc_type := b_lab_full ;
33032: LD_ADDR_OWVAR 42
33036: PUSH
33037: LD_INT 8
33039: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33040: LD_ADDR_OWVAR 44
33044: PUSH
33045: LD_INT 10
33047: PUSH
33048: LD_INT 12
33050: PUSH
33051: LD_INT 14
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_INT 9
33070: MINUS
33071: ARRAY
33072: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33073: LD_ADDR_OWVAR 45
33077: PUSH
33078: LD_INT 11
33080: PUSH
33081: LD_INT 15
33083: PUSH
33084: LD_INT 12
33086: PUSH
33087: LD_INT 15
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: LD_VAR 0 2
33100: PUSH
33101: LD_INT 9
33103: MINUS
33104: ARRAY
33105: ST_TO_ADDR
// end ; 14 :
33106: GO 33525
33108: LD_INT 14
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_workshop ; 15 :
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 2
33124: ST_TO_ADDR
33125: GO 33525
33127: LD_INT 15
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// bc_type := b_factory ; 16 :
33136: LD_ADDR_OWVAR 42
33140: PUSH
33141: LD_INT 3
33143: ST_TO_ADDR
33144: GO 33525
33146: LD_INT 16
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_gun ; 17 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 17
33162: ST_TO_ADDR
33163: GO 33525
33165: LD_INT 17
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33201
33173: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 19
33181: PUSH
33182: LD_INT 23
33184: PUSH
33185: LD_INT 19
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PUSH
33193: LD_VAR 0 1
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33525
33201: LD_INT 18
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33220
33209: POP
// bc_type := b_ext_radar ; 19 :
33210: LD_ADDR_OWVAR 42
33214: PUSH
33215: LD_INT 20
33217: ST_TO_ADDR
33218: GO 33525
33220: LD_INT 19
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33239
33228: POP
// bc_type := b_ext_radio ; 20 :
33229: LD_ADDR_OWVAR 42
33233: PUSH
33234: LD_INT 22
33236: ST_TO_ADDR
33237: GO 33525
33239: LD_INT 20
33241: DOUBLE
33242: EQUAL
33243: IFTRUE 33247
33245: GO 33258
33247: POP
// bc_type := b_ext_siberium ; 21 :
33248: LD_ADDR_OWVAR 42
33252: PUSH
33253: LD_INT 21
33255: ST_TO_ADDR
33256: GO 33525
33258: LD_INT 21
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33277
33266: POP
// bc_type := b_ext_computer ; 22 :
33267: LD_ADDR_OWVAR 42
33271: PUSH
33272: LD_INT 24
33274: ST_TO_ADDR
33275: GO 33525
33277: LD_INT 22
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// bc_type := b_ext_track ; 23 :
33286: LD_ADDR_OWVAR 42
33290: PUSH
33291: LD_INT 16
33293: ST_TO_ADDR
33294: GO 33525
33296: LD_INT 23
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33315
33304: POP
// bc_type := b_ext_laser ; 24 :
33305: LD_ADDR_OWVAR 42
33309: PUSH
33310: LD_INT 25
33312: ST_TO_ADDR
33313: GO 33525
33315: LD_INT 24
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33334
33323: POP
// bc_type := b_control_tower ; 25 :
33324: LD_ADDR_OWVAR 42
33328: PUSH
33329: LD_INT 36
33331: ST_TO_ADDR
33332: GO 33525
33334: LD_INT 25
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33353
33342: POP
// bc_type := b_breastwork ; 26 :
33343: LD_ADDR_OWVAR 42
33347: PUSH
33348: LD_INT 31
33350: ST_TO_ADDR
33351: GO 33525
33353: LD_INT 26
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33372
33361: POP
// bc_type := b_bunker ; 27 :
33362: LD_ADDR_OWVAR 42
33366: PUSH
33367: LD_INT 32
33369: ST_TO_ADDR
33370: GO 33525
33372: LD_INT 27
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 33391
33380: POP
// bc_type := b_turret ; 28 :
33381: LD_ADDR_OWVAR 42
33385: PUSH
33386: LD_INT 33
33388: ST_TO_ADDR
33389: GO 33525
33391: LD_INT 28
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33410
33399: POP
// bc_type := b_armoury ; 29 :
33400: LD_ADDR_OWVAR 42
33404: PUSH
33405: LD_INT 4
33407: ST_TO_ADDR
33408: GO 33525
33410: LD_INT 29
33412: DOUBLE
33413: EQUAL
33414: IFTRUE 33418
33416: GO 33429
33418: POP
// bc_type := b_barracks ; 30 :
33419: LD_ADDR_OWVAR 42
33423: PUSH
33424: LD_INT 5
33426: ST_TO_ADDR
33427: GO 33525
33429: LD_INT 30
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33448
33437: POP
// bc_type := b_solar_power ; 31 :
33438: LD_ADDR_OWVAR 42
33442: PUSH
33443: LD_INT 27
33445: ST_TO_ADDR
33446: GO 33525
33448: LD_INT 31
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33467
33456: POP
// bc_type := b_oil_power ; 32 :
33457: LD_ADDR_OWVAR 42
33461: PUSH
33462: LD_INT 26
33464: ST_TO_ADDR
33465: GO 33525
33467: LD_INT 32
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33486
33475: POP
// bc_type := b_siberite_power ; 33 :
33476: LD_ADDR_OWVAR 42
33480: PUSH
33481: LD_INT 28
33483: ST_TO_ADDR
33484: GO 33525
33486: LD_INT 33
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33505
33494: POP
// bc_type := b_oil_mine ; 34 :
33495: LD_ADDR_OWVAR 42
33499: PUSH
33500: LD_INT 29
33502: ST_TO_ADDR
33503: GO 33525
33505: LD_INT 34
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33524
33513: POP
// bc_type := b_siberite_mine ; end ;
33514: LD_ADDR_OWVAR 42
33518: PUSH
33519: LD_INT 30
33521: ST_TO_ADDR
33522: GO 33525
33524: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33525: LD_ADDR_VAR 0 8
33529: PUSH
33530: LD_VAR 0 5
33534: PPUSH
33535: LD_VAR 0 6
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: CALL_OW 47
33549: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33550: LD_OWVAR 42
33554: PUSH
33555: LD_INT 32
33557: PUSH
33558: LD_INT 33
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: IN
33565: IFFALSE 33581
// PlaceWeaponTurret ( b , weapon ) ;
33567: LD_VAR 0 8
33571: PPUSH
33572: LD_VAR 0 4
33576: PPUSH
33577: CALL_OW 431
// end ;
33581: LD_VAR 0 7
33585: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33592: LD_ADDR_VAR 0 4
33596: PUSH
33597: LD_INT 22
33599: PUSH
33600: LD_OWVAR 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 30
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 30
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 69
33645: ST_TO_ADDR
// if not tmp then
33646: LD_VAR 0 4
33650: NOT
33651: IFFALSE 33655
// exit ;
33653: GO 33714
// for i in tmp do
33655: LD_ADDR_VAR 0 2
33659: PUSH
33660: LD_VAR 0 4
33664: PUSH
33665: FOR_IN
33666: IFFALSE 33712
// for j = 1 to 3 do
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: DOUBLE
33674: LD_INT 1
33676: DEC
33677: ST_TO_ADDR
33678: LD_INT 3
33680: PUSH
33681: FOR_TO
33682: IFFALSE 33708
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33684: LD_VAR 0 2
33688: PPUSH
33689: CALL_OW 274
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_INT 99999
33701: PPUSH
33702: CALL_OW 277
33706: GO 33681
33708: POP
33709: POP
33710: GO 33665
33712: POP
33713: POP
// end ;
33714: LD_VAR 0 1
33718: RET
// export function hHackSetLevel10 ; var i , j ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33724: LD_ADDR_VAR 0 2
33728: PUSH
33729: LD_INT 21
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PPUSH
33739: CALL_OW 69
33743: PUSH
33744: FOR_IN
33745: IFFALSE 33797
// if IsSelected ( i ) then
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 306
33756: IFFALSE 33795
// begin for j := 1 to 4 do
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_INT 4
33770: PUSH
33771: FOR_TO
33772: IFFALSE 33793
// SetSkill ( i , j , 10 ) ;
33774: LD_VAR 0 2
33778: PPUSH
33779: LD_VAR 0 3
33783: PPUSH
33784: LD_INT 10
33786: PPUSH
33787: CALL_OW 237
33791: GO 33771
33793: POP
33794: POP
// end ;
33795: GO 33744
33797: POP
33798: POP
// end ;
33799: LD_VAR 0 1
33803: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33804: LD_INT 0
33806: PPUSH
33807: PPUSH
33808: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33809: LD_ADDR_VAR 0 2
33813: PUSH
33814: LD_INT 22
33816: PUSH
33817: LD_OWVAR 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 21
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PPUSH
33840: CALL_OW 69
33844: PUSH
33845: FOR_IN
33846: IFFALSE 33887
// begin for j := 1 to 4 do
33848: LD_ADDR_VAR 0 3
33852: PUSH
33853: DOUBLE
33854: LD_INT 1
33856: DEC
33857: ST_TO_ADDR
33858: LD_INT 4
33860: PUSH
33861: FOR_TO
33862: IFFALSE 33883
// SetSkill ( i , j , 10 ) ;
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: LD_INT 10
33876: PPUSH
33877: CALL_OW 237
33881: GO 33861
33883: POP
33884: POP
// end ;
33885: GO 33845
33887: POP
33888: POP
// end ;
33889: LD_VAR 0 1
33893: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33894: LD_INT 0
33896: PPUSH
// uc_side := your_side ;
33897: LD_ADDR_OWVAR 20
33901: PUSH
33902: LD_OWVAR 2
33906: ST_TO_ADDR
// uc_nation := nation ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_VAR 0 1
33916: ST_TO_ADDR
// InitHc ;
33917: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33921: LD_INT 0
33923: PPUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33938: LD_VAR 0 4
33942: PPUSH
33943: LD_VAR 0 5
33947: PPUSH
33948: CALL_OW 428
33952: PUSH
33953: LD_INT 0
33955: EQUAL
33956: IFFALSE 33980
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33958: CALL_OW 44
33962: PPUSH
33963: LD_VAR 0 4
33967: PPUSH
33968: LD_VAR 0 5
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 48
// end ;
33980: LD_VAR 0 6
33984: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33985: LD_INT 0
33987: PPUSH
33988: PPUSH
// uc_side := your_side ;
33989: LD_ADDR_OWVAR 20
33993: PUSH
33994: LD_OWVAR 2
33998: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34038
// uc_nation := nation_american else
34028: LD_ADDR_OWVAR 21
34032: PUSH
34033: LD_INT 1
34035: ST_TO_ADDR
34036: GO 34081
// if chassis in [ 11 , 12 , 13 , 14 ] then
34038: LD_VAR 0 1
34042: PUSH
34043: LD_INT 11
34045: PUSH
34046: LD_INT 12
34048: PUSH
34049: LD_INT 13
34051: PUSH
34052: LD_INT 14
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: IN
34061: IFFALSE 34073
// uc_nation := nation_arabian else
34063: LD_ADDR_OWVAR 21
34067: PUSH
34068: LD_INT 2
34070: ST_TO_ADDR
34071: GO 34081
// uc_nation := nation_russian ;
34073: LD_ADDR_OWVAR 21
34077: PUSH
34078: LD_INT 3
34080: ST_TO_ADDR
// vc_chassis := chassis ;
34081: LD_ADDR_OWVAR 37
34085: PUSH
34086: LD_VAR 0 1
34090: ST_TO_ADDR
// vc_engine := engine ;
34091: LD_ADDR_OWVAR 39
34095: PUSH
34096: LD_VAR 0 2
34100: ST_TO_ADDR
// vc_control := control ;
34101: LD_ADDR_OWVAR 38
34105: PUSH
34106: LD_VAR 0 3
34110: ST_TO_ADDR
// vc_weapon := weapon ;
34111: LD_ADDR_OWVAR 40
34115: PUSH
34116: LD_VAR 0 4
34120: ST_TO_ADDR
// un := CreateVehicle ;
34121: LD_ADDR_VAR 0 8
34125: PUSH
34126: CALL_OW 45
34130: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34131: LD_VAR 0 8
34135: PPUSH
34136: LD_INT 0
34138: PPUSH
34139: LD_INT 5
34141: PPUSH
34142: CALL_OW 12
34146: PPUSH
34147: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34151: LD_VAR 0 8
34155: PPUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: LD_VAR 0 6
34165: PPUSH
34166: LD_INT 1
34168: PPUSH
34169: CALL_OW 48
// end ;
34173: LD_VAR 0 7
34177: RET
// export hInvincible ; every 1 do
34178: GO 34180
34180: DISABLE
// hInvincible := [ ] ;
34181: LD_ADDR_EXP 109
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
34188: END
// every 10 do var i ;
34189: GO 34191
34191: DISABLE
34192: LD_INT 0
34194: PPUSH
// begin enable ;
34195: ENABLE
// if not hInvincible then
34196: LD_EXP 109
34200: NOT
34201: IFFALSE 34205
// exit ;
34203: GO 34249
// for i in hInvincible do
34205: LD_ADDR_VAR 0 1
34209: PUSH
34210: LD_EXP 109
34214: PUSH
34215: FOR_IN
34216: IFFALSE 34247
// if GetLives ( i ) < 1000 then
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 256
34227: PUSH
34228: LD_INT 1000
34230: LESS
34231: IFFALSE 34245
// SetLives ( i , 1000 ) ;
34233: LD_VAR 0 1
34237: PPUSH
34238: LD_INT 1000
34240: PPUSH
34241: CALL_OW 234
34245: GO 34215
34247: POP
34248: POP
// end ;
34249: PPOPN 1
34251: END
// export function hHackInvincible ; var i ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34256: LD_ADDR_VAR 0 2
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 21
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: PUSH
34294: FOR_IN
34295: IFFALSE 34356
// if IsSelected ( i ) then
34297: LD_VAR 0 2
34301: PPUSH
34302: CALL_OW 306
34306: IFFALSE 34354
// begin if i in hInvincible then
34308: LD_VAR 0 2
34312: PUSH
34313: LD_EXP 109
34317: IN
34318: IFFALSE 34338
// hInvincible := hInvincible diff i else
34320: LD_ADDR_EXP 109
34324: PUSH
34325: LD_EXP 109
34329: PUSH
34330: LD_VAR 0 2
34334: DIFF
34335: ST_TO_ADDR
34336: GO 34354
// hInvincible := hInvincible union i ;
34338: LD_ADDR_EXP 109
34342: PUSH
34343: LD_EXP 109
34347: PUSH
34348: LD_VAR 0 2
34352: UNION
34353: ST_TO_ADDR
// end ;
34354: GO 34294
34356: POP
34357: POP
// end ;
34358: LD_VAR 0 1
34362: RET
// export function hHackInvisible ; var i , j ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_INT 21
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 69
34387: PUSH
34388: FOR_IN
34389: IFFALSE 34413
// if IsSelected ( i ) then
34391: LD_VAR 0 2
34395: PPUSH
34396: CALL_OW 306
34400: IFFALSE 34411
// ComForceInvisible ( i ) ;
34402: LD_VAR 0 2
34406: PPUSH
34407: CALL_OW 496
34411: GO 34388
34413: POP
34414: POP
// end ;
34415: LD_VAR 0 1
34419: RET
// export function hHackChangeYourSide ; begin
34420: LD_INT 0
34422: PPUSH
// if your_side = 8 then
34423: LD_OWVAR 2
34427: PUSH
34428: LD_INT 8
34430: EQUAL
34431: IFFALSE 34443
// your_side := 0 else
34433: LD_ADDR_OWVAR 2
34437: PUSH
34438: LD_INT 0
34440: ST_TO_ADDR
34441: GO 34457
// your_side := your_side + 1 ;
34443: LD_ADDR_OWVAR 2
34447: PUSH
34448: LD_OWVAR 2
34452: PUSH
34453: LD_INT 1
34455: PLUS
34456: ST_TO_ADDR
// end ;
34457: LD_VAR 0 1
34461: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34462: LD_INT 0
34464: PPUSH
34465: PPUSH
34466: PPUSH
// for i in all_units do
34467: LD_ADDR_VAR 0 2
34471: PUSH
34472: LD_OWVAR 3
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34556
// if IsSelected ( i ) then
34480: LD_VAR 0 2
34484: PPUSH
34485: CALL_OW 306
34489: IFFALSE 34554
// begin j := GetSide ( i ) ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_VAR 0 2
34500: PPUSH
34501: CALL_OW 255
34505: ST_TO_ADDR
// if j = 8 then
34506: LD_VAR 0 3
34510: PUSH
34511: LD_INT 8
34513: EQUAL
34514: IFFALSE 34526
// j := 0 else
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 0
34523: ST_TO_ADDR
34524: GO 34540
// j := j + 1 ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: ST_TO_ADDR
// SetSide ( i , j ) ;
34540: LD_VAR 0 2
34544: PPUSH
34545: LD_VAR 0 3
34549: PPUSH
34550: CALL_OW 235
// end ;
34554: GO 34477
34556: POP
34557: POP
// end ;
34558: LD_VAR 0 1
34562: RET
// export function hHackFog ; begin
34563: LD_INT 0
34565: PPUSH
// FogOff ( true ) ;
34566: LD_INT 1
34568: PPUSH
34569: CALL_OW 344
// end ;
34573: LD_VAR 0 1
34577: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34578: LD_INT 0
34580: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34581: LD_VAR 0 1
34585: PPUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: LD_INT 1
34601: PPUSH
34602: CALL_OW 483
// CenterOnXY ( x , y ) ;
34606: LD_VAR 0 2
34610: PPUSH
34611: LD_VAR 0 3
34615: PPUSH
34616: CALL_OW 84
// end ;
34620: LD_VAR 0 4
34624: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34629: LD_VAR 0 1
34633: NOT
34634: PUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: CALL_OW 488
34649: NOT
34650: OR
34651: PUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 266
34661: PUSH
34662: LD_INT 3
34664: NONEQUAL
34665: PUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 247
34675: PUSH
34676: LD_INT 1
34678: EQUAL
34679: NOT
34680: AND
34681: OR
34682: IFFALSE 34686
// exit ;
34684: GO 34835
// if GetType ( factory ) = unit_human then
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 247
34695: PUSH
34696: LD_INT 1
34698: EQUAL
34699: IFFALSE 34716
// factory := IsInUnit ( factory ) ;
34701: LD_ADDR_VAR 0 1
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 310
34715: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 266
34725: PUSH
34726: LD_INT 3
34728: NONEQUAL
34729: IFFALSE 34733
// exit ;
34731: GO 34835
// if HexInfo ( x , y ) = factory then
34733: LD_VAR 0 2
34737: PPUSH
34738: LD_VAR 0 3
34742: PPUSH
34743: CALL_OW 428
34747: PUSH
34748: LD_VAR 0 1
34752: EQUAL
34753: IFFALSE 34780
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34755: LD_ADDR_EXP 110
34759: PUSH
34760: LD_EXP 110
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: LD_INT 0
34772: PPUSH
34773: CALL_OW 1
34777: ST_TO_ADDR
34778: GO 34831
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34780: LD_ADDR_EXP 110
34784: PUSH
34785: LD_EXP 110
34789: PPUSH
34790: LD_VAR 0 1
34794: PPUSH
34795: LD_VAR 0 1
34799: PPUSH
34800: CALL_OW 255
34804: PUSH
34805: LD_VAR 0 1
34809: PUSH
34810: LD_VAR 0 2
34814: PUSH
34815: LD_VAR 0 3
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: PPUSH
34826: CALL_OW 1
34830: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34831: CALL 34840 0 0
// end ;
34835: LD_VAR 0 4
34839: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34840: LD_INT 0
34842: PPUSH
34843: PPUSH
34844: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34845: LD_STRING resetFactoryWaypoint();
34847: PPUSH
34848: CALL_OW 559
// if factoryWaypoints then
34852: LD_EXP 110
34856: IFFALSE 34982
// begin list := PrepareArray ( factoryWaypoints ) ;
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_EXP 110
34867: PPUSH
34868: CALL 82630 0 1
34872: ST_TO_ADDR
// for i := 1 to list do
34873: LD_ADDR_VAR 0 2
34877: PUSH
34878: DOUBLE
34879: LD_INT 1
34881: DEC
34882: ST_TO_ADDR
34883: LD_VAR 0 3
34887: PUSH
34888: FOR_TO
34889: IFFALSE 34980
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34891: LD_STRING setFactoryWaypointXY(
34893: PUSH
34894: LD_VAR 0 3
34898: PUSH
34899: LD_VAR 0 2
34903: ARRAY
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: STR
34909: PUSH
34910: LD_STRING ,
34912: STR
34913: PUSH
34914: LD_VAR 0 3
34918: PUSH
34919: LD_VAR 0 2
34923: ARRAY
34924: PUSH
34925: LD_INT 2
34927: ARRAY
34928: STR
34929: PUSH
34930: LD_STRING ,
34932: STR
34933: PUSH
34934: LD_VAR 0 3
34938: PUSH
34939: LD_VAR 0 2
34943: ARRAY
34944: PUSH
34945: LD_INT 3
34947: ARRAY
34948: STR
34949: PUSH
34950: LD_STRING ,
34952: STR
34953: PUSH
34954: LD_VAR 0 3
34958: PUSH
34959: LD_VAR 0 2
34963: ARRAY
34964: PUSH
34965: LD_INT 4
34967: ARRAY
34968: STR
34969: PUSH
34970: LD_STRING )
34972: STR
34973: PPUSH
34974: CALL_OW 559
34978: GO 34888
34980: POP
34981: POP
// end ; end ;
34982: LD_VAR 0 1
34986: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34987: LD_INT 0
34989: PPUSH
// if HexInfo ( x , y ) = warehouse then
34990: LD_VAR 0 2
34994: PPUSH
34995: LD_VAR 0 3
34999: PPUSH
35000: CALL_OW 428
35004: PUSH
35005: LD_VAR 0 1
35009: EQUAL
35010: IFFALSE 35037
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35012: LD_ADDR_EXP 111
35016: PUSH
35017: LD_EXP 111
35021: PPUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_INT 0
35029: PPUSH
35030: CALL_OW 1
35034: ST_TO_ADDR
35035: GO 35088
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35037: LD_ADDR_EXP 111
35041: PUSH
35042: LD_EXP 111
35046: PPUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: LD_VAR 0 1
35056: PPUSH
35057: CALL_OW 255
35061: PUSH
35062: LD_VAR 0 1
35066: PUSH
35067: LD_VAR 0 2
35071: PUSH
35072: LD_VAR 0 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: PPUSH
35083: CALL_OW 1
35087: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35088: CALL 35097 0 0
// end ;
35092: LD_VAR 0 4
35096: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35097: LD_INT 0
35099: PPUSH
35100: PPUSH
35101: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35102: LD_STRING resetWarehouseGatheringPoints();
35104: PPUSH
35105: CALL_OW 559
// if warehouseGatheringPoints then
35109: LD_EXP 111
35113: IFFALSE 35239
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35115: LD_ADDR_VAR 0 3
35119: PUSH
35120: LD_EXP 111
35124: PPUSH
35125: CALL 82630 0 1
35129: ST_TO_ADDR
// for i := 1 to list do
35130: LD_ADDR_VAR 0 2
35134: PUSH
35135: DOUBLE
35136: LD_INT 1
35138: DEC
35139: ST_TO_ADDR
35140: LD_VAR 0 3
35144: PUSH
35145: FOR_TO
35146: IFFALSE 35237
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35148: LD_STRING setWarehouseGatheringPointXY(
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: LD_VAR 0 2
35160: ARRAY
35161: PUSH
35162: LD_INT 1
35164: ARRAY
35165: STR
35166: PUSH
35167: LD_STRING ,
35169: STR
35170: PUSH
35171: LD_VAR 0 3
35175: PUSH
35176: LD_VAR 0 2
35180: ARRAY
35181: PUSH
35182: LD_INT 2
35184: ARRAY
35185: STR
35186: PUSH
35187: LD_STRING ,
35189: STR
35190: PUSH
35191: LD_VAR 0 3
35195: PUSH
35196: LD_VAR 0 2
35200: ARRAY
35201: PUSH
35202: LD_INT 3
35204: ARRAY
35205: STR
35206: PUSH
35207: LD_STRING ,
35209: STR
35210: PUSH
35211: LD_VAR 0 3
35215: PUSH
35216: LD_VAR 0 2
35220: ARRAY
35221: PUSH
35222: LD_INT 4
35224: ARRAY
35225: STR
35226: PUSH
35227: LD_STRING )
35229: STR
35230: PPUSH
35231: CALL_OW 559
35235: GO 35145
35237: POP
35238: POP
// end ; end ;
35239: LD_VAR 0 1
35243: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35244: LD_EXP 111
35248: IFFALSE 35933
35250: GO 35252
35252: DISABLE
35253: LD_INT 0
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
35262: PPUSH
35263: PPUSH
// begin enable ;
35264: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_EXP 111
35274: PPUSH
35275: CALL 82630 0 1
35279: ST_TO_ADDR
// if not list then
35280: LD_VAR 0 3
35284: NOT
35285: IFFALSE 35289
// exit ;
35287: GO 35933
// for i := 1 to list do
35289: LD_ADDR_VAR 0 1
35293: PUSH
35294: DOUBLE
35295: LD_INT 1
35297: DEC
35298: ST_TO_ADDR
35299: LD_VAR 0 3
35303: PUSH
35304: FOR_TO
35305: IFFALSE 35931
// begin depot := list [ i ] [ 2 ] ;
35307: LD_ADDR_VAR 0 8
35311: PUSH
35312: LD_VAR 0 3
35316: PUSH
35317: LD_VAR 0 1
35321: ARRAY
35322: PUSH
35323: LD_INT 2
35325: ARRAY
35326: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_VAR 0 3
35336: PUSH
35337: LD_VAR 0 1
35341: ARRAY
35342: PUSH
35343: LD_INT 1
35345: ARRAY
35346: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35347: LD_VAR 0 8
35351: PPUSH
35352: CALL_OW 301
35356: PUSH
35357: LD_VAR 0 5
35361: PUSH
35362: LD_VAR 0 8
35366: PPUSH
35367: CALL_OW 255
35371: NONEQUAL
35372: OR
35373: IFFALSE 35402
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35375: LD_ADDR_EXP 111
35379: PUSH
35380: LD_EXP 111
35384: PPUSH
35385: LD_VAR 0 8
35389: PPUSH
35390: LD_INT 0
35392: PPUSH
35393: CALL_OW 1
35397: ST_TO_ADDR
// exit ;
35398: POP
35399: POP
35400: GO 35933
// end ; x := list [ i ] [ 3 ] ;
35402: LD_ADDR_VAR 0 6
35406: PUSH
35407: LD_VAR 0 3
35411: PUSH
35412: LD_VAR 0 1
35416: ARRAY
35417: PUSH
35418: LD_INT 3
35420: ARRAY
35421: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35422: LD_ADDR_VAR 0 7
35426: PUSH
35427: LD_VAR 0 3
35431: PUSH
35432: LD_VAR 0 1
35436: ARRAY
35437: PUSH
35438: LD_INT 4
35440: ARRAY
35441: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35442: LD_ADDR_VAR 0 9
35446: PUSH
35447: LD_VAR 0 6
35451: PPUSH
35452: LD_VAR 0 7
35456: PPUSH
35457: LD_INT 16
35459: PPUSH
35460: CALL 81214 0 3
35464: ST_TO_ADDR
// if not cratesNearbyPoint then
35465: LD_VAR 0 9
35469: NOT
35470: IFFALSE 35476
// exit ;
35472: POP
35473: POP
35474: GO 35933
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_INT 22
35483: PUSH
35484: LD_VAR 0 5
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: LD_INT 60
35498: PUSH
35499: EMPTY
35500: LIST
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 91
35508: PUSH
35509: LD_VAR 0 8
35513: PUSH
35514: LD_INT 6
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 25
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 25
35537: PUSH
35538: LD_INT 16
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 69
35560: PUSH
35561: LD_VAR 0 8
35565: PPUSH
35566: CALL_OW 313
35570: PPUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 60
35576: PUSH
35577: EMPTY
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 25
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 25
35599: PUSH
35600: LD_INT 16
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 72
35620: UNION
35621: ST_TO_ADDR
// if tmp then
35622: LD_VAR 0 4
35626: IFFALSE 35706
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35628: LD_ADDR_VAR 0 4
35632: PUSH
35633: LD_VAR 0 4
35637: PPUSH
35638: LD_INT 3
35640: PPUSH
35641: CALL 79183 0 2
35645: ST_TO_ADDR
// for j in tmp do
35646: LD_ADDR_VAR 0 2
35650: PUSH
35651: LD_VAR 0 4
35655: PUSH
35656: FOR_IN
35657: IFFALSE 35700
// begin if IsInUnit ( j ) then
35659: LD_VAR 0 2
35663: PPUSH
35664: CALL_OW 310
35668: IFFALSE 35679
// ComExit ( j ) ;
35670: LD_VAR 0 2
35674: PPUSH
35675: CALL 79266 0 1
// AddComCollect ( j , x , y ) ;
35679: LD_VAR 0 2
35683: PPUSH
35684: LD_VAR 0 6
35688: PPUSH
35689: LD_VAR 0 7
35693: PPUSH
35694: CALL_OW 177
// end ;
35698: GO 35656
35700: POP
35701: POP
// exit ;
35702: POP
35703: POP
35704: GO 35933
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35706: LD_ADDR_VAR 0 4
35710: PUSH
35711: LD_INT 22
35713: PUSH
35714: LD_VAR 0 5
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 91
35725: PUSH
35726: LD_VAR 0 8
35730: PUSH
35731: LD_INT 8
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 34
35744: PUSH
35745: LD_INT 12
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 34
35754: PUSH
35755: LD_INT 51
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 34
35764: PUSH
35765: LD_INT 32
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 34
35774: PUSH
35775: LD_INT 89
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: PPUSH
35794: CALL_OW 69
35798: ST_TO_ADDR
// if tmp then
35799: LD_VAR 0 4
35803: IFFALSE 35929
// begin for j in tmp do
35805: LD_ADDR_VAR 0 2
35809: PUSH
35810: LD_VAR 0 4
35814: PUSH
35815: FOR_IN
35816: IFFALSE 35927
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35818: LD_VAR 0 2
35822: PPUSH
35823: CALL_OW 262
35827: PUSH
35828: LD_INT 3
35830: EQUAL
35831: PUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: CALL_OW 261
35841: PUSH
35842: LD_INT 20
35844: GREATER
35845: OR
35846: PUSH
35847: LD_VAR 0 2
35851: PPUSH
35852: CALL_OW 314
35856: NOT
35857: AND
35858: PUSH
35859: LD_VAR 0 2
35863: PPUSH
35864: CALL_OW 263
35868: PUSH
35869: LD_INT 1
35871: NONEQUAL
35872: PUSH
35873: LD_VAR 0 2
35877: PPUSH
35878: CALL_OW 311
35882: OR
35883: AND
35884: IFFALSE 35925
// begin ComCollect ( j , x , y ) ;
35886: LD_VAR 0 2
35890: PPUSH
35891: LD_VAR 0 6
35895: PPUSH
35896: LD_VAR 0 7
35900: PPUSH
35901: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35905: LD_VAR 0 2
35909: PPUSH
35910: LD_VAR 0 8
35914: PPUSH
35915: CALL_OW 172
// exit ;
35919: POP
35920: POP
35921: POP
35922: POP
35923: GO 35933
// end ;
35925: GO 35815
35927: POP
35928: POP
// end ; end ;
35929: GO 35304
35931: POP
35932: POP
// end ; end_of_file
35933: PPOPN 9
35935: END
// export function SOS_UnitDestroyed ( un ) ; begin
35936: LD_INT 0
35938: PPUSH
// ComRadiation ( un ) ;
35939: LD_VAR 0 1
35943: PPUSH
35944: CALL 36882 0 1
// end ;
35948: LD_VAR 0 2
35952: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35953: LD_INT 0
35955: PPUSH
// ComRadiation ( un ) ;
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL 36882 0 1
// end ;
35965: LD_VAR 0 2
35969: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35970: LD_INT 0
35972: PPUSH
// end ;
35973: LD_VAR 0 4
35977: RET
// export function SOS_Command ( cmd ) ; begin
35978: LD_INT 0
35980: PPUSH
// end ;
35981: LD_VAR 0 2
35985: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35986: LD_INT 0
35988: PPUSH
// end ;
35989: LD_VAR 0 6
35993: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
35994: LD_INT 0
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
// if not vehicle or not factory then
36000: LD_VAR 0 1
36004: NOT
36005: PUSH
36006: LD_VAR 0 2
36010: NOT
36011: OR
36012: IFFALSE 36016
// exit ;
36014: GO 36473
// if factoryWaypoints >= factory then
36016: LD_EXP 110
36020: PUSH
36021: LD_VAR 0 2
36025: GREATEREQUAL
36026: IFFALSE 36473
// if factoryWaypoints [ factory ] then
36028: LD_EXP 110
36032: PUSH
36033: LD_VAR 0 2
36037: ARRAY
36038: IFFALSE 36473
// begin if GetControl ( vehicle ) = control_manual then
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 263
36049: PUSH
36050: LD_INT 1
36052: EQUAL
36053: IFFALSE 36360
// begin driver := IsDrivenBy ( vehicle ) ;
36055: LD_ADDR_VAR 0 5
36059: PUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 311
36069: ST_TO_ADDR
// tag := GetTag ( driver ) ;
36070: LD_ADDR_VAR 0 4
36074: PUSH
36075: LD_VAR 0 5
36079: PPUSH
36080: CALL_OW 110
36084: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
36085: LD_VAR 0 4
36089: PUSH
36090: LD_INT 501
36092: EQUAL
36093: PUSH
36094: LD_VAR 0 1
36098: PPUSH
36099: CALL_OW 110
36103: PUSH
36104: LD_INT 501
36106: EQUAL
36107: OR
36108: IFFALSE 36112
// exit ;
36110: GO 36473
// if not HasTask ( driver ) then
36112: LD_VAR 0 5
36116: PPUSH
36117: CALL_OW 314
36121: NOT
36122: IFFALSE 36358
// begin SetTag ( driver , tDriver ) ;
36124: LD_VAR 0 5
36128: PPUSH
36129: LD_INT 501
36131: PPUSH
36132: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
36136: LD_VAR 0 1
36140: PPUSH
36141: LD_INT 501
36143: PPUSH
36144: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36148: LD_ADDR_VAR 0 6
36152: PUSH
36153: LD_EXP 110
36157: PUSH
36158: LD_VAR 0 2
36162: ARRAY
36163: PUSH
36164: LD_INT 3
36166: ARRAY
36167: PPUSH
36168: LD_EXP 110
36172: PUSH
36173: LD_VAR 0 2
36177: ARRAY
36178: PUSH
36179: LD_INT 4
36181: ARRAY
36182: PPUSH
36183: CALL_OW 428
36187: ST_TO_ADDR
// if hex then
36188: LD_VAR 0 6
36192: IFFALSE 36210
// ComMoveUnit ( driver , hex ) else
36194: LD_VAR 0 5
36198: PPUSH
36199: LD_VAR 0 6
36203: PPUSH
36204: CALL_OW 112
36208: GO 36249
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36210: LD_VAR 0 5
36214: PPUSH
36215: LD_EXP 110
36219: PUSH
36220: LD_VAR 0 2
36224: ARRAY
36225: PUSH
36226: LD_INT 3
36228: ARRAY
36229: PPUSH
36230: LD_EXP 110
36234: PUSH
36235: LD_VAR 0 2
36239: ARRAY
36240: PUSH
36241: LD_INT 4
36243: ARRAY
36244: PPUSH
36245: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36249: LD_VAR 0 5
36253: PPUSH
36254: CALL_OW 181
// if Multiplayer then
36258: LD_OWVAR 4
36262: IFFALSE 36311
// begin repeat wait ( 10 ) ;
36264: LD_INT 10
36266: PPUSH
36267: CALL_OW 67
// until not IsInUnit ( driver ) ;
36271: LD_VAR 0 5
36275: PPUSH
36276: CALL_OW 310
36280: NOT
36281: IFFALSE 36264
// if not HasTask ( driver ) then
36283: LD_VAR 0 5
36287: PPUSH
36288: CALL_OW 314
36292: NOT
36293: IFFALSE 36309
// ComEnterUnit ( driver , factory ) ;
36295: LD_VAR 0 5
36299: PPUSH
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 120
// end else
36309: GO 36325
// AddComEnterUnit ( driver , factory ) ;
36311: LD_VAR 0 5
36315: PPUSH
36316: LD_VAR 0 2
36320: PPUSH
36321: CALL_OW 180
// wait ( 0 0$1 ) ;
36325: LD_INT 35
36327: PPUSH
36328: CALL_OW 67
// SetTag ( driver , tag ) ;
36332: LD_VAR 0 5
36336: PPUSH
36337: LD_VAR 0 4
36341: PPUSH
36342: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
36346: LD_VAR 0 1
36350: PPUSH
36351: LD_INT 0
36353: PPUSH
36354: CALL_OW 109
// end ; end else
36358: GO 36473
// if GetControl ( vehicle ) = control_remote then
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 263
36369: PUSH
36370: LD_INT 2
36372: EQUAL
36373: IFFALSE 36434
// begin wait ( 0 0$2 ) ;
36375: LD_INT 70
36377: PPUSH
36378: CALL_OW 67
// if Connect ( vehicle ) then
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL 49485 0 1
36391: IFFALSE 36432
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36393: LD_VAR 0 1
36397: PPUSH
36398: LD_EXP 110
36402: PUSH
36403: LD_VAR 0 2
36407: ARRAY
36408: PUSH
36409: LD_INT 3
36411: ARRAY
36412: PPUSH
36413: LD_EXP 110
36417: PUSH
36418: LD_VAR 0 2
36422: ARRAY
36423: PUSH
36424: LD_INT 4
36426: ARRAY
36427: PPUSH
36428: CALL_OW 171
// end else
36432: GO 36473
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36434: LD_VAR 0 1
36438: PPUSH
36439: LD_EXP 110
36443: PUSH
36444: LD_VAR 0 2
36448: ARRAY
36449: PUSH
36450: LD_INT 3
36452: ARRAY
36453: PPUSH
36454: LD_EXP 110
36458: PUSH
36459: LD_VAR 0 2
36463: ARRAY
36464: PUSH
36465: LD_INT 4
36467: ARRAY
36468: PPUSH
36469: CALL_OW 171
// end ; end ;
36473: LD_VAR 0 3
36477: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36478: LD_INT 0
36480: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36481: LD_VAR 0 1
36485: PUSH
36486: LD_INT 250
36488: EQUAL
36489: PUSH
36490: LD_VAR 0 2
36494: PPUSH
36495: CALL_OW 264
36499: PUSH
36500: LD_INT 81
36502: EQUAL
36503: AND
36504: IFFALSE 36525
// MinerPlaceMine ( unit , x , y ) ;
36506: LD_VAR 0 2
36510: PPUSH
36511: LD_VAR 0 4
36515: PPUSH
36516: LD_VAR 0 5
36520: PPUSH
36521: CALL 39617 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36525: LD_VAR 0 1
36529: PUSH
36530: LD_INT 251
36532: EQUAL
36533: PUSH
36534: LD_VAR 0 2
36538: PPUSH
36539: CALL_OW 264
36543: PUSH
36544: LD_INT 81
36546: EQUAL
36547: AND
36548: IFFALSE 36569
// MinerDetonateMine ( unit , x , y ) ;
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 4
36559: PPUSH
36560: LD_VAR 0 5
36564: PPUSH
36565: CALL 39892 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36569: LD_VAR 0 1
36573: PUSH
36574: LD_INT 252
36576: EQUAL
36577: PUSH
36578: LD_VAR 0 2
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 81
36590: EQUAL
36591: AND
36592: IFFALSE 36613
// MinerCreateMinefield ( unit , x , y ) ;
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 4
36603: PPUSH
36604: LD_VAR 0 5
36608: PPUSH
36609: CALL 40309 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 253
36620: EQUAL
36621: PUSH
36622: LD_VAR 0 2
36626: PPUSH
36627: CALL_OW 257
36631: PUSH
36632: LD_INT 5
36634: EQUAL
36635: AND
36636: IFFALSE 36657
// ComBinocular ( unit , x , y ) ;
36638: LD_VAR 0 2
36642: PPUSH
36643: LD_VAR 0 4
36647: PPUSH
36648: LD_VAR 0 5
36652: PPUSH
36653: CALL 40678 0 3
// if selectedUnit then
36657: LD_VAR 0 3
36661: IFFALSE 36717
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36663: LD_VAR 0 1
36667: PUSH
36668: LD_INT 254
36670: EQUAL
36671: PUSH
36672: LD_VAR 0 2
36676: PPUSH
36677: CALL_OW 264
36681: PUSH
36682: LD_INT 99
36684: EQUAL
36685: AND
36686: PUSH
36687: LD_VAR 0 3
36691: PPUSH
36692: CALL_OW 263
36696: PUSH
36697: LD_INT 3
36699: EQUAL
36700: AND
36701: IFFALSE 36717
// HackDestroyVehicle ( unit , selectedUnit ) ;
36703: LD_VAR 0 2
36707: PPUSH
36708: LD_VAR 0 3
36712: PPUSH
36713: CALL 38981 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36717: LD_VAR 0 1
36721: PUSH
36722: LD_INT 255
36724: EQUAL
36725: PUSH
36726: LD_VAR 0 2
36730: PPUSH
36731: CALL_OW 264
36735: PUSH
36736: LD_INT 14
36738: PUSH
36739: LD_INT 53
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: IN
36746: AND
36747: PUSH
36748: LD_VAR 0 4
36752: PPUSH
36753: LD_VAR 0 5
36757: PPUSH
36758: CALL_OW 488
36762: AND
36763: IFFALSE 36787
// CutTreeXYR ( unit , x , y , 12 ) ;
36765: LD_VAR 0 2
36769: PPUSH
36770: LD_VAR 0 4
36774: PPUSH
36775: LD_VAR 0 5
36779: PPUSH
36780: LD_INT 12
36782: PPUSH
36783: CALL 36978 0 4
// if cmd = 256 then
36787: LD_VAR 0 1
36791: PUSH
36792: LD_INT 256
36794: EQUAL
36795: IFFALSE 36816
// SetFactoryWaypoint ( unit , x , y ) ;
36797: LD_VAR 0 2
36801: PPUSH
36802: LD_VAR 0 4
36806: PPUSH
36807: LD_VAR 0 5
36811: PPUSH
36812: CALL 34625 0 3
// if cmd = 257 then
36816: LD_VAR 0 1
36820: PUSH
36821: LD_INT 257
36823: EQUAL
36824: IFFALSE 36845
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36826: LD_VAR 0 2
36830: PPUSH
36831: LD_VAR 0 4
36835: PPUSH
36836: LD_VAR 0 5
36840: PPUSH
36841: CALL 34987 0 3
// if cmd = 258 then
36845: LD_VAR 0 1
36849: PUSH
36850: LD_INT 258
36852: EQUAL
36853: IFFALSE 36877
// BurnTreeXYR ( unit , x , y , 8 ) ;
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 4
36864: PPUSH
36865: LD_VAR 0 5
36869: PPUSH
36870: LD_INT 8
36872: PPUSH
36873: CALL 37372 0 4
// end ;
36877: LD_VAR 0 6
36881: RET
// export function ComRadiation ( un ) ; var eff ; begin
36882: LD_INT 0
36884: PPUSH
36885: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 264
36895: PUSH
36896: LD_INT 91
36898: NONEQUAL
36899: IFFALSE 36903
// exit ;
36901: GO 36973
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36903: LD_INT 68
36905: PPUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 255
36915: PPUSH
36916: CALL_OW 321
36920: PUSH
36921: LD_INT 2
36923: EQUAL
36924: IFFALSE 36936
// eff := 70 else
36926: LD_ADDR_VAR 0 3
36930: PUSH
36931: LD_INT 70
36933: ST_TO_ADDR
36934: GO 36944
// eff := 30 ;
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_INT 30
36943: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 250
36953: PPUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 251
36963: PPUSH
36964: LD_VAR 0 3
36968: PPUSH
36969: CALL_OW 495
// end ;
36973: LD_VAR 0 2
36977: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36989: LD_VAR 0 1
36993: PPUSH
36994: CALL_OW 302
36998: NOT
36999: PUSH
37000: LD_VAR 0 2
37004: PPUSH
37005: LD_VAR 0 3
37009: PPUSH
37010: CALL_OW 488
37014: NOT
37015: OR
37016: PUSH
37017: LD_VAR 0 4
37021: NOT
37022: OR
37023: IFFALSE 37027
// exit ;
37025: GO 37367
// list := [ ] ;
37027: LD_ADDR_VAR 0 13
37031: PUSH
37032: EMPTY
37033: ST_TO_ADDR
// if x - r < 0 then
37034: LD_VAR 0 2
37038: PUSH
37039: LD_VAR 0 4
37043: MINUS
37044: PUSH
37045: LD_INT 0
37047: LESS
37048: IFFALSE 37060
// min_x := 0 else
37050: LD_ADDR_VAR 0 7
37054: PUSH
37055: LD_INT 0
37057: ST_TO_ADDR
37058: GO 37076
// min_x := x - r ;
37060: LD_ADDR_VAR 0 7
37064: PUSH
37065: LD_VAR 0 2
37069: PUSH
37070: LD_VAR 0 4
37074: MINUS
37075: ST_TO_ADDR
// if y - r < 0 then
37076: LD_VAR 0 3
37080: PUSH
37081: LD_VAR 0 4
37085: MINUS
37086: PUSH
37087: LD_INT 0
37089: LESS
37090: IFFALSE 37102
// min_y := 0 else
37092: LD_ADDR_VAR 0 8
37096: PUSH
37097: LD_INT 0
37099: ST_TO_ADDR
37100: GO 37118
// min_y := y - r ;
37102: LD_ADDR_VAR 0 8
37106: PUSH
37107: LD_VAR 0 3
37111: PUSH
37112: LD_VAR 0 4
37116: MINUS
37117: ST_TO_ADDR
// max_x := x + r ;
37118: LD_ADDR_VAR 0 9
37122: PUSH
37123: LD_VAR 0 2
37127: PUSH
37128: LD_VAR 0 4
37132: PLUS
37133: ST_TO_ADDR
// max_y := y + r ;
37134: LD_ADDR_VAR 0 10
37138: PUSH
37139: LD_VAR 0 3
37143: PUSH
37144: LD_VAR 0 4
37148: PLUS
37149: ST_TO_ADDR
// for _x = min_x to max_x do
37150: LD_ADDR_VAR 0 11
37154: PUSH
37155: DOUBLE
37156: LD_VAR 0 7
37160: DEC
37161: ST_TO_ADDR
37162: LD_VAR 0 9
37166: PUSH
37167: FOR_TO
37168: IFFALSE 37285
// for _y = min_y to max_y do
37170: LD_ADDR_VAR 0 12
37174: PUSH
37175: DOUBLE
37176: LD_VAR 0 8
37180: DEC
37181: ST_TO_ADDR
37182: LD_VAR 0 10
37186: PUSH
37187: FOR_TO
37188: IFFALSE 37281
// begin if not ValidHex ( _x , _y ) then
37190: LD_VAR 0 11
37194: PPUSH
37195: LD_VAR 0 12
37199: PPUSH
37200: CALL_OW 488
37204: NOT
37205: IFFALSE 37209
// continue ;
37207: GO 37187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37209: LD_VAR 0 11
37213: PPUSH
37214: LD_VAR 0 12
37218: PPUSH
37219: CALL_OW 351
37223: PUSH
37224: LD_VAR 0 11
37228: PPUSH
37229: LD_VAR 0 12
37233: PPUSH
37234: CALL_OW 554
37238: AND
37239: IFFALSE 37279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37241: LD_ADDR_VAR 0 13
37245: PUSH
37246: LD_VAR 0 13
37250: PPUSH
37251: LD_VAR 0 13
37255: PUSH
37256: LD_INT 1
37258: PLUS
37259: PPUSH
37260: LD_VAR 0 11
37264: PUSH
37265: LD_VAR 0 12
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PPUSH
37274: CALL_OW 2
37278: ST_TO_ADDR
// end ;
37279: GO 37187
37281: POP
37282: POP
37283: GO 37167
37285: POP
37286: POP
// if not list then
37287: LD_VAR 0 13
37291: NOT
37292: IFFALSE 37296
// exit ;
37294: GO 37367
// for i in list do
37296: LD_ADDR_VAR 0 6
37300: PUSH
37301: LD_VAR 0 13
37305: PUSH
37306: FOR_IN
37307: IFFALSE 37365
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37309: LD_VAR 0 1
37313: PPUSH
37314: LD_STRING M
37316: PUSH
37317: LD_VAR 0 6
37321: PUSH
37322: LD_INT 1
37324: ARRAY
37325: PUSH
37326: LD_VAR 0 6
37330: PUSH
37331: LD_INT 2
37333: ARRAY
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: PPUSH
37359: CALL_OW 447
37363: GO 37306
37365: POP
37366: POP
// end ;
37367: LD_VAR 0 5
37371: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37372: LD_INT 0
37374: PPUSH
37375: PPUSH
37376: PPUSH
37377: PPUSH
37378: PPUSH
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37384: LD_VAR 0 1
37388: PPUSH
37389: CALL_OW 302
37393: NOT
37394: PUSH
37395: LD_VAR 0 2
37399: PPUSH
37400: LD_VAR 0 3
37404: PPUSH
37405: CALL_OW 488
37409: NOT
37410: OR
37411: PUSH
37412: LD_VAR 0 4
37416: NOT
37417: OR
37418: IFFALSE 37422
// exit ;
37420: GO 37935
// list := [ ] ;
37422: LD_ADDR_VAR 0 13
37426: PUSH
37427: EMPTY
37428: ST_TO_ADDR
// if x - r < 0 then
37429: LD_VAR 0 2
37433: PUSH
37434: LD_VAR 0 4
37438: MINUS
37439: PUSH
37440: LD_INT 0
37442: LESS
37443: IFFALSE 37455
// min_x := 0 else
37445: LD_ADDR_VAR 0 7
37449: PUSH
37450: LD_INT 0
37452: ST_TO_ADDR
37453: GO 37471
// min_x := x - r ;
37455: LD_ADDR_VAR 0 7
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_VAR 0 4
37469: MINUS
37470: ST_TO_ADDR
// if y - r < 0 then
37471: LD_VAR 0 3
37475: PUSH
37476: LD_VAR 0 4
37480: MINUS
37481: PUSH
37482: LD_INT 0
37484: LESS
37485: IFFALSE 37497
// min_y := 0 else
37487: LD_ADDR_VAR 0 8
37491: PUSH
37492: LD_INT 0
37494: ST_TO_ADDR
37495: GO 37513
// min_y := y - r ;
37497: LD_ADDR_VAR 0 8
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 4
37511: MINUS
37512: ST_TO_ADDR
// max_x := x + r ;
37513: LD_ADDR_VAR 0 9
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_VAR 0 4
37527: PLUS
37528: ST_TO_ADDR
// max_y := y + r ;
37529: LD_ADDR_VAR 0 10
37533: PUSH
37534: LD_VAR 0 3
37538: PUSH
37539: LD_VAR 0 4
37543: PLUS
37544: ST_TO_ADDR
// for _x = min_x to max_x do
37545: LD_ADDR_VAR 0 11
37549: PUSH
37550: DOUBLE
37551: LD_VAR 0 7
37555: DEC
37556: ST_TO_ADDR
37557: LD_VAR 0 9
37561: PUSH
37562: FOR_TO
37563: IFFALSE 37680
// for _y = min_y to max_y do
37565: LD_ADDR_VAR 0 12
37569: PUSH
37570: DOUBLE
37571: LD_VAR 0 8
37575: DEC
37576: ST_TO_ADDR
37577: LD_VAR 0 10
37581: PUSH
37582: FOR_TO
37583: IFFALSE 37676
// begin if not ValidHex ( _x , _y ) then
37585: LD_VAR 0 11
37589: PPUSH
37590: LD_VAR 0 12
37594: PPUSH
37595: CALL_OW 488
37599: NOT
37600: IFFALSE 37604
// continue ;
37602: GO 37582
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37604: LD_VAR 0 11
37608: PPUSH
37609: LD_VAR 0 12
37613: PPUSH
37614: CALL_OW 351
37618: PUSH
37619: LD_VAR 0 11
37623: PPUSH
37624: LD_VAR 0 12
37628: PPUSH
37629: CALL_OW 554
37633: AND
37634: IFFALSE 37674
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37636: LD_ADDR_VAR 0 13
37640: PUSH
37641: LD_VAR 0 13
37645: PPUSH
37646: LD_VAR 0 13
37650: PUSH
37651: LD_INT 1
37653: PLUS
37654: PPUSH
37655: LD_VAR 0 11
37659: PUSH
37660: LD_VAR 0 12
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PPUSH
37669: CALL_OW 2
37673: ST_TO_ADDR
// end ;
37674: GO 37582
37676: POP
37677: POP
37678: GO 37562
37680: POP
37681: POP
// if not list then
37682: LD_VAR 0 13
37686: NOT
37687: IFFALSE 37691
// exit ;
37689: GO 37935
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37691: LD_ADDR_VAR 0 13
37695: PUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: LD_VAR 0 13
37705: PPUSH
37706: LD_INT 1
37708: PPUSH
37709: LD_INT 1
37711: PPUSH
37712: CALL 46627 0 4
37716: ST_TO_ADDR
// ComStop ( flame ) ;
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 141
// for i in list do
37726: LD_ADDR_VAR 0 6
37730: PUSH
37731: LD_VAR 0 13
37735: PUSH
37736: FOR_IN
37737: IFFALSE 37768
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 6
37748: PUSH
37749: LD_INT 1
37751: ARRAY
37752: PPUSH
37753: LD_VAR 0 6
37757: PUSH
37758: LD_INT 2
37760: ARRAY
37761: PPUSH
37762: CALL_OW 176
37766: GO 37736
37768: POP
37769: POP
// repeat wait ( 0 0$1 ) ;
37770: LD_INT 35
37772: PPUSH
37773: CALL_OW 67
// task := GetTaskList ( flame ) ;
37777: LD_ADDR_VAR 0 14
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 437
37791: ST_TO_ADDR
// if not task then
37792: LD_VAR 0 14
37796: NOT
37797: IFFALSE 37801
// exit ;
37799: GO 37935
// if task [ 1 ] [ 1 ] <> | then
37801: LD_VAR 0 14
37805: PUSH
37806: LD_INT 1
37808: ARRAY
37809: PUSH
37810: LD_INT 1
37812: ARRAY
37813: PUSH
37814: LD_STRING |
37816: NONEQUAL
37817: IFFALSE 37821
// exit ;
37819: GO 37935
// _x := task [ 1 ] [ 2 ] ;
37821: LD_ADDR_VAR 0 11
37825: PUSH
37826: LD_VAR 0 14
37830: PUSH
37831: LD_INT 1
37833: ARRAY
37834: PUSH
37835: LD_INT 2
37837: ARRAY
37838: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37839: LD_ADDR_VAR 0 12
37843: PUSH
37844: LD_VAR 0 14
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PUSH
37853: LD_INT 3
37855: ARRAY
37856: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37857: LD_VAR 0 11
37861: PPUSH
37862: LD_VAR 0 12
37866: PPUSH
37867: CALL_OW 351
37871: NOT
37872: PUSH
37873: LD_VAR 0 11
37877: PPUSH
37878: LD_VAR 0 12
37882: PPUSH
37883: CALL_OW 554
37887: NOT
37888: OR
37889: IFFALSE 37923
// begin task := Delete ( task , 1 ) ;
37891: LD_ADDR_VAR 0 14
37895: PUSH
37896: LD_VAR 0 14
37900: PPUSH
37901: LD_INT 1
37903: PPUSH
37904: CALL_OW 3
37908: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37909: LD_VAR 0 1
37913: PPUSH
37914: LD_VAR 0 14
37918: PPUSH
37919: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37923: LD_VAR 0 1
37927: PPUSH
37928: CALL_OW 314
37932: NOT
37933: IFFALSE 37770
// end ;
37935: LD_VAR 0 5
37939: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37940: LD_EXP 113
37944: NOT
37945: IFFALSE 37995
37947: GO 37949
37949: DISABLE
// begin initHack := true ;
37950: LD_ADDR_EXP 113
37954: PUSH
37955: LD_INT 1
37957: ST_TO_ADDR
// hackTanks := [ ] ;
37958: LD_ADDR_EXP 114
37962: PUSH
37963: EMPTY
37964: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37965: LD_ADDR_EXP 115
37969: PUSH
37970: EMPTY
37971: ST_TO_ADDR
// hackLimit := 3 ;
37972: LD_ADDR_EXP 116
37976: PUSH
37977: LD_INT 3
37979: ST_TO_ADDR
// hackDist := 12 ;
37980: LD_ADDR_EXP 117
37984: PUSH
37985: LD_INT 12
37987: ST_TO_ADDR
// hackCounter := [ ] ;
37988: LD_ADDR_EXP 118
37992: PUSH
37993: EMPTY
37994: ST_TO_ADDR
// end ;
37995: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37996: LD_EXP 113
38000: PUSH
38001: LD_INT 34
38003: PUSH
38004: LD_INT 99
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PPUSH
38011: CALL_OW 69
38015: AND
38016: IFFALSE 38269
38018: GO 38020
38020: DISABLE
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
// begin enable ;
38025: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38026: LD_ADDR_VAR 0 1
38030: PUSH
38031: LD_INT 34
38033: PUSH
38034: LD_INT 99
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PPUSH
38041: CALL_OW 69
38045: PUSH
38046: FOR_IN
38047: IFFALSE 38267
// begin if not i in hackTanks then
38049: LD_VAR 0 1
38053: PUSH
38054: LD_EXP 114
38058: IN
38059: NOT
38060: IFFALSE 38143
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38062: LD_ADDR_EXP 114
38066: PUSH
38067: LD_EXP 114
38071: PPUSH
38072: LD_EXP 114
38076: PUSH
38077: LD_INT 1
38079: PLUS
38080: PPUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 1
38090: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38091: LD_ADDR_EXP 115
38095: PUSH
38096: LD_EXP 115
38100: PPUSH
38101: LD_EXP 115
38105: PUSH
38106: LD_INT 1
38108: PLUS
38109: PPUSH
38110: EMPTY
38111: PPUSH
38112: CALL_OW 1
38116: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38117: LD_ADDR_EXP 118
38121: PUSH
38122: LD_EXP 118
38126: PPUSH
38127: LD_EXP 118
38131: PUSH
38132: LD_INT 1
38134: PLUS
38135: PPUSH
38136: EMPTY
38137: PPUSH
38138: CALL_OW 1
38142: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 302
38152: NOT
38153: IFFALSE 38166
// begin HackUnlinkAll ( i ) ;
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL 38272 0 1
// continue ;
38164: GO 38046
// end ; HackCheckCapturedStatus ( i ) ;
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL 38715 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38175: LD_ADDR_VAR 0 2
38179: PUSH
38180: LD_INT 81
38182: PUSH
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 255
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 33
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 91
38209: PUSH
38210: LD_VAR 0 1
38214: PUSH
38215: LD_EXP 117
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 50
38227: PUSH
38228: EMPTY
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 69
38241: ST_TO_ADDR
// if not tmp then
38242: LD_VAR 0 2
38246: NOT
38247: IFFALSE 38251
// continue ;
38249: GO 38046
// HackLink ( i , tmp ) ;
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_VAR 0 2
38260: PPUSH
38261: CALL 38408 0 2
// end ;
38265: GO 38046
38267: POP
38268: POP
// end ;
38269: PPOPN 2
38271: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38272: LD_INT 0
38274: PPUSH
38275: PPUSH
38276: PPUSH
// if not hack in hackTanks then
38277: LD_VAR 0 1
38281: PUSH
38282: LD_EXP 114
38286: IN
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38403
// index := GetElementIndex ( hackTanks , hack ) ;
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_EXP 114
38301: PPUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL 45924 0 2
38311: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38312: LD_EXP 115
38316: PUSH
38317: LD_VAR 0 4
38321: ARRAY
38322: IFFALSE 38403
// begin for i in hackTanksCaptured [ index ] do
38324: LD_ADDR_VAR 0 3
38328: PUSH
38329: LD_EXP 115
38333: PUSH
38334: LD_VAR 0 4
38338: ARRAY
38339: PUSH
38340: FOR_IN
38341: IFFALSE 38367
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38343: LD_VAR 0 3
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PPUSH
38352: LD_VAR 0 3
38356: PUSH
38357: LD_INT 2
38359: ARRAY
38360: PPUSH
38361: CALL_OW 235
38365: GO 38340
38367: POP
38368: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38369: LD_ADDR_EXP 115
38373: PUSH
38374: LD_EXP 115
38378: PPUSH
38379: LD_VAR 0 4
38383: PPUSH
38384: EMPTY
38385: PPUSH
38386: CALL_OW 1
38390: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38391: LD_VAR 0 1
38395: PPUSH
38396: LD_INT 0
38398: PPUSH
38399: CALL_OW 505
// end ; end ;
38403: LD_VAR 0 2
38407: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38408: LD_INT 0
38410: PPUSH
38411: PPUSH
38412: PPUSH
// if not hack in hackTanks or not vehicles then
38413: LD_VAR 0 1
38417: PUSH
38418: LD_EXP 114
38422: IN
38423: NOT
38424: PUSH
38425: LD_VAR 0 2
38429: NOT
38430: OR
38431: IFFALSE 38435
// exit ;
38433: GO 38710
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38435: LD_ADDR_VAR 0 2
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: LD_VAR 0 2
38449: PPUSH
38450: LD_INT 1
38452: PPUSH
38453: LD_INT 1
38455: PPUSH
38456: CALL 46574 0 4
38460: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38461: LD_ADDR_VAR 0 5
38465: PUSH
38466: LD_EXP 114
38470: PPUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL 45924 0 2
38480: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38481: LD_EXP 115
38485: PUSH
38486: LD_VAR 0 5
38490: ARRAY
38491: PUSH
38492: LD_EXP 116
38496: LESS
38497: IFFALSE 38686
// begin for i := 1 to vehicles do
38499: LD_ADDR_VAR 0 4
38503: PUSH
38504: DOUBLE
38505: LD_INT 1
38507: DEC
38508: ST_TO_ADDR
38509: LD_VAR 0 2
38513: PUSH
38514: FOR_TO
38515: IFFALSE 38684
// begin if hackTanksCaptured [ index ] = hackLimit then
38517: LD_EXP 115
38521: PUSH
38522: LD_VAR 0 5
38526: ARRAY
38527: PUSH
38528: LD_EXP 116
38532: EQUAL
38533: IFFALSE 38537
// break ;
38535: GO 38684
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38537: LD_ADDR_EXP 118
38541: PUSH
38542: LD_EXP 118
38546: PPUSH
38547: LD_VAR 0 5
38551: PPUSH
38552: LD_EXP 118
38556: PUSH
38557: LD_VAR 0 5
38561: ARRAY
38562: PUSH
38563: LD_INT 1
38565: PLUS
38566: PPUSH
38567: CALL_OW 1
38571: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38572: LD_ADDR_EXP 115
38576: PUSH
38577: LD_EXP 115
38581: PPUSH
38582: LD_VAR 0 5
38586: PUSH
38587: LD_EXP 115
38591: PUSH
38592: LD_VAR 0 5
38596: ARRAY
38597: PUSH
38598: LD_INT 1
38600: PLUS
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PPUSH
38606: LD_VAR 0 2
38610: PUSH
38611: LD_VAR 0 4
38615: ARRAY
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_VAR 0 4
38626: ARRAY
38627: PPUSH
38628: CALL_OW 255
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL 46139 0 3
38641: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38642: LD_VAR 0 2
38646: PUSH
38647: LD_VAR 0 4
38651: ARRAY
38652: PPUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 255
38662: PPUSH
38663: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38667: LD_VAR 0 2
38671: PUSH
38672: LD_VAR 0 4
38676: ARRAY
38677: PPUSH
38678: CALL_OW 141
// end ;
38682: GO 38514
38684: POP
38685: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38686: LD_VAR 0 1
38690: PPUSH
38691: LD_EXP 115
38695: PUSH
38696: LD_VAR 0 5
38700: ARRAY
38701: PUSH
38702: LD_INT 0
38704: PLUS
38705: PPUSH
38706: CALL_OW 505
// end ;
38710: LD_VAR 0 3
38714: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38715: LD_INT 0
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
// if not hack in hackTanks then
38721: LD_VAR 0 1
38725: PUSH
38726: LD_EXP 114
38730: IN
38731: NOT
38732: IFFALSE 38736
// exit ;
38734: GO 38976
// index := GetElementIndex ( hackTanks , hack ) ;
38736: LD_ADDR_VAR 0 4
38740: PUSH
38741: LD_EXP 114
38745: PPUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL 45924 0 2
38755: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38756: LD_ADDR_VAR 0 3
38760: PUSH
38761: DOUBLE
38762: LD_EXP 115
38766: PUSH
38767: LD_VAR 0 4
38771: ARRAY
38772: INC
38773: ST_TO_ADDR
38774: LD_INT 1
38776: PUSH
38777: FOR_DOWNTO
38778: IFFALSE 38950
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38780: LD_ADDR_VAR 0 5
38784: PUSH
38785: LD_EXP 115
38789: PUSH
38790: LD_VAR 0 4
38794: ARRAY
38795: PUSH
38796: LD_VAR 0 3
38800: ARRAY
38801: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38802: LD_VAR 0 5
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: PPUSH
38811: CALL_OW 302
38815: NOT
38816: PUSH
38817: LD_VAR 0 5
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: PPUSH
38826: CALL_OW 255
38830: PUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: CALL_OW 255
38840: NONEQUAL
38841: OR
38842: IFFALSE 38948
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38844: LD_VAR 0 5
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: PPUSH
38853: CALL_OW 305
38857: PUSH
38858: LD_VAR 0 5
38862: PUSH
38863: LD_INT 1
38865: ARRAY
38866: PPUSH
38867: CALL_OW 255
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 255
38881: EQUAL
38882: AND
38883: IFFALSE 38907
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38885: LD_VAR 0 5
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 5
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: PPUSH
38903: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38907: LD_ADDR_EXP 115
38911: PUSH
38912: LD_EXP 115
38916: PPUSH
38917: LD_VAR 0 4
38921: PPUSH
38922: LD_EXP 115
38926: PUSH
38927: LD_VAR 0 4
38931: ARRAY
38932: PPUSH
38933: LD_VAR 0 3
38937: PPUSH
38938: CALL_OW 3
38942: PPUSH
38943: CALL_OW 1
38947: ST_TO_ADDR
// end ; end ;
38948: GO 38777
38950: POP
38951: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38952: LD_VAR 0 1
38956: PPUSH
38957: LD_EXP 115
38961: PUSH
38962: LD_VAR 0 4
38966: ARRAY
38967: PUSH
38968: LD_INT 0
38970: PLUS
38971: PPUSH
38972: CALL_OW 505
// end ;
38976: LD_VAR 0 2
38980: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
// if not hack in hackTanks then
38987: LD_VAR 0 1
38991: PUSH
38992: LD_EXP 114
38996: IN
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 39087
// index := GetElementIndex ( hackTanks , hack ) ;
39002: LD_ADDR_VAR 0 5
39006: PUSH
39007: LD_EXP 114
39011: PPUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL 45924 0 2
39021: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39022: LD_ADDR_VAR 0 4
39026: PUSH
39027: DOUBLE
39028: LD_INT 1
39030: DEC
39031: ST_TO_ADDR
39032: LD_EXP 115
39036: PUSH
39037: LD_VAR 0 5
39041: ARRAY
39042: PUSH
39043: FOR_TO
39044: IFFALSE 39085
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39046: LD_EXP 115
39050: PUSH
39051: LD_VAR 0 5
39055: ARRAY
39056: PUSH
39057: LD_VAR 0 4
39061: ARRAY
39062: PUSH
39063: LD_INT 1
39065: ARRAY
39066: PUSH
39067: LD_VAR 0 2
39071: EQUAL
39072: IFFALSE 39083
// KillUnit ( vehicle ) ;
39074: LD_VAR 0 2
39078: PPUSH
39079: CALL_OW 66
39083: GO 39043
39085: POP
39086: POP
// end ;
39087: LD_VAR 0 3
39091: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39092: LD_EXP 119
39096: NOT
39097: IFFALSE 39132
39099: GO 39101
39101: DISABLE
// begin initMiner := true ;
39102: LD_ADDR_EXP 119
39106: PUSH
39107: LD_INT 1
39109: ST_TO_ADDR
// minersList := [ ] ;
39110: LD_ADDR_EXP 120
39114: PUSH
39115: EMPTY
39116: ST_TO_ADDR
// minerMinesList := [ ] ;
39117: LD_ADDR_EXP 121
39121: PUSH
39122: EMPTY
39123: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39124: LD_ADDR_EXP 122
39128: PUSH
39129: LD_INT 5
39131: ST_TO_ADDR
// end ;
39132: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39133: LD_EXP 119
39137: PUSH
39138: LD_INT 34
39140: PUSH
39141: LD_INT 81
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PPUSH
39148: CALL_OW 69
39152: AND
39153: IFFALSE 39614
39155: GO 39157
39157: DISABLE
39158: LD_INT 0
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
// begin enable ;
39164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39165: LD_ADDR_VAR 0 1
39169: PUSH
39170: LD_INT 34
39172: PUSH
39173: LD_INT 81
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PPUSH
39180: CALL_OW 69
39184: PUSH
39185: FOR_IN
39186: IFFALSE 39258
// begin if not i in minersList then
39188: LD_VAR 0 1
39192: PUSH
39193: LD_EXP 120
39197: IN
39198: NOT
39199: IFFALSE 39256
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39201: LD_ADDR_EXP 120
39205: PUSH
39206: LD_EXP 120
39210: PPUSH
39211: LD_EXP 120
39215: PUSH
39216: LD_INT 1
39218: PLUS
39219: PPUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 1
39229: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39230: LD_ADDR_EXP 121
39234: PUSH
39235: LD_EXP 121
39239: PPUSH
39240: LD_EXP 121
39244: PUSH
39245: LD_INT 1
39247: PLUS
39248: PPUSH
39249: EMPTY
39250: PPUSH
39251: CALL_OW 1
39255: ST_TO_ADDR
// end end ;
39256: GO 39185
39258: POP
39259: POP
// for i := minerMinesList downto 1 do
39260: LD_ADDR_VAR 0 1
39264: PUSH
39265: DOUBLE
39266: LD_EXP 121
39270: INC
39271: ST_TO_ADDR
39272: LD_INT 1
39274: PUSH
39275: FOR_DOWNTO
39276: IFFALSE 39612
// begin if IsLive ( minersList [ i ] ) then
39278: LD_EXP 120
39282: PUSH
39283: LD_VAR 0 1
39287: ARRAY
39288: PPUSH
39289: CALL_OW 300
39293: IFFALSE 39321
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39295: LD_EXP 120
39299: PUSH
39300: LD_VAR 0 1
39304: ARRAY
39305: PPUSH
39306: LD_EXP 121
39310: PUSH
39311: LD_VAR 0 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 505
// if not minerMinesList [ i ] then
39321: LD_EXP 121
39325: PUSH
39326: LD_VAR 0 1
39330: ARRAY
39331: NOT
39332: IFFALSE 39336
// continue ;
39334: GO 39275
// for j := minerMinesList [ i ] downto 1 do
39336: LD_ADDR_VAR 0 2
39340: PUSH
39341: DOUBLE
39342: LD_EXP 121
39346: PUSH
39347: LD_VAR 0 1
39351: ARRAY
39352: INC
39353: ST_TO_ADDR
39354: LD_INT 1
39356: PUSH
39357: FOR_DOWNTO
39358: IFFALSE 39608
// begin side := GetSide ( minersList [ i ] ) ;
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_EXP 120
39369: PUSH
39370: LD_VAR 0 1
39374: ARRAY
39375: PPUSH
39376: CALL_OW 255
39380: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_EXP 121
39390: PUSH
39391: LD_VAR 0 1
39395: ARRAY
39396: PUSH
39397: LD_VAR 0 2
39401: ARRAY
39402: PUSH
39403: LD_INT 1
39405: ARRAY
39406: PPUSH
39407: LD_EXP 121
39411: PUSH
39412: LD_VAR 0 1
39416: ARRAY
39417: PUSH
39418: LD_VAR 0 2
39422: ARRAY
39423: PUSH
39424: LD_INT 2
39426: ARRAY
39427: PPUSH
39428: CALL_OW 428
39432: ST_TO_ADDR
// if not tmp then
39433: LD_VAR 0 4
39437: NOT
39438: IFFALSE 39442
// continue ;
39440: GO 39357
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39442: LD_VAR 0 4
39446: PUSH
39447: LD_INT 81
39449: PUSH
39450: LD_VAR 0 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PPUSH
39459: CALL_OW 69
39463: IN
39464: PUSH
39465: LD_EXP 121
39469: PUSH
39470: LD_VAR 0 1
39474: ARRAY
39475: PUSH
39476: LD_VAR 0 2
39480: ARRAY
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: PPUSH
39486: LD_EXP 121
39490: PUSH
39491: LD_VAR 0 1
39495: ARRAY
39496: PUSH
39497: LD_VAR 0 2
39501: ARRAY
39502: PUSH
39503: LD_INT 2
39505: ARRAY
39506: PPUSH
39507: CALL_OW 458
39511: AND
39512: IFFALSE 39606
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39514: LD_EXP 121
39518: PUSH
39519: LD_VAR 0 1
39523: ARRAY
39524: PUSH
39525: LD_VAR 0 2
39529: ARRAY
39530: PUSH
39531: LD_INT 1
39533: ARRAY
39534: PPUSH
39535: LD_EXP 121
39539: PUSH
39540: LD_VAR 0 1
39544: ARRAY
39545: PUSH
39546: LD_VAR 0 2
39550: ARRAY
39551: PUSH
39552: LD_INT 2
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 3
39560: PPUSH
39561: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39565: LD_ADDR_EXP 121
39569: PUSH
39570: LD_EXP 121
39574: PPUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_EXP 121
39584: PUSH
39585: LD_VAR 0 1
39589: ARRAY
39590: PPUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: CALL_OW 3
39600: PPUSH
39601: CALL_OW 1
39605: ST_TO_ADDR
// end ; end ;
39606: GO 39357
39608: POP
39609: POP
// end ;
39610: GO 39275
39612: POP
39613: POP
// end ;
39614: PPOPN 4
39616: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39617: LD_INT 0
39619: PPUSH
39620: PPUSH
// result := false ;
39621: LD_ADDR_VAR 0 4
39625: PUSH
39626: LD_INT 0
39628: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 264
39638: PUSH
39639: LD_INT 81
39641: EQUAL
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 39887
// index := GetElementIndex ( minersList , unit ) ;
39647: LD_ADDR_VAR 0 5
39651: PUSH
39652: LD_EXP 120
39656: PPUSH
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL 45924 0 2
39666: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39667: LD_EXP 121
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PUSH
39678: LD_EXP 122
39682: GREATEREQUAL
39683: IFFALSE 39687
// exit ;
39685: GO 39887
// ComMoveXY ( unit , x , y ) ;
39687: LD_VAR 0 1
39691: PPUSH
39692: LD_VAR 0 2
39696: PPUSH
39697: LD_VAR 0 3
39701: PPUSH
39702: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39706: LD_INT 35
39708: PPUSH
39709: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39713: LD_VAR 0 1
39717: PPUSH
39718: LD_VAR 0 2
39722: PPUSH
39723: LD_VAR 0 3
39727: PPUSH
39728: CALL 77665 0 3
39732: NOT
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 314
39743: AND
39744: IFFALSE 39748
// exit ;
39746: GO 39887
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39748: LD_VAR 0 2
39752: PPUSH
39753: LD_VAR 0 3
39757: PPUSH
39758: CALL_OW 428
39762: PUSH
39763: LD_VAR 0 1
39767: EQUAL
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 314
39778: NOT
39779: AND
39780: IFFALSE 39706
// PlaySoundXY ( x , y , PlantMine ) ;
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: LD_STRING PlantMine
39794: PPUSH
39795: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39799: LD_VAR 0 2
39803: PPUSH
39804: LD_VAR 0 3
39808: PPUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 255
39818: PPUSH
39819: LD_INT 0
39821: PPUSH
39822: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39826: LD_ADDR_EXP 121
39830: PUSH
39831: LD_EXP 121
39835: PPUSH
39836: LD_VAR 0 5
39840: PUSH
39841: LD_EXP 121
39845: PUSH
39846: LD_VAR 0 5
39850: ARRAY
39851: PUSH
39852: LD_INT 1
39854: PLUS
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PPUSH
39860: LD_VAR 0 2
39864: PUSH
39865: LD_VAR 0 3
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PPUSH
39874: CALL 46139 0 3
39878: ST_TO_ADDR
// result := true ;
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_INT 1
39886: ST_TO_ADDR
// end ;
39887: LD_VAR 0 4
39891: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39892: LD_INT 0
39894: PPUSH
39895: PPUSH
39896: PPUSH
// if not unit in minersList then
39897: LD_VAR 0 1
39901: PUSH
39902: LD_EXP 120
39906: IN
39907: NOT
39908: IFFALSE 39912
// exit ;
39910: GO 40304
// index := GetElementIndex ( minersList , unit ) ;
39912: LD_ADDR_VAR 0 6
39916: PUSH
39917: LD_EXP 120
39921: PPUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL 45924 0 2
39931: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39932: LD_ADDR_VAR 0 5
39936: PUSH
39937: DOUBLE
39938: LD_EXP 121
39942: PUSH
39943: LD_VAR 0 6
39947: ARRAY
39948: INC
39949: ST_TO_ADDR
39950: LD_INT 1
39952: PUSH
39953: FOR_DOWNTO
39954: IFFALSE 40115
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39956: LD_EXP 121
39960: PUSH
39961: LD_VAR 0 6
39965: ARRAY
39966: PUSH
39967: LD_VAR 0 5
39971: ARRAY
39972: PUSH
39973: LD_INT 1
39975: ARRAY
39976: PUSH
39977: LD_VAR 0 2
39981: EQUAL
39982: PUSH
39983: LD_EXP 121
39987: PUSH
39988: LD_VAR 0 6
39992: ARRAY
39993: PUSH
39994: LD_VAR 0 5
39998: ARRAY
39999: PUSH
40000: LD_INT 2
40002: ARRAY
40003: PUSH
40004: LD_VAR 0 3
40008: EQUAL
40009: AND
40010: IFFALSE 40113
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40012: LD_EXP 121
40016: PUSH
40017: LD_VAR 0 6
40021: ARRAY
40022: PUSH
40023: LD_VAR 0 5
40027: ARRAY
40028: PUSH
40029: LD_INT 1
40031: ARRAY
40032: PPUSH
40033: LD_EXP 121
40037: PUSH
40038: LD_VAR 0 6
40042: ARRAY
40043: PUSH
40044: LD_VAR 0 5
40048: ARRAY
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: PPUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 255
40063: PPUSH
40064: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40068: LD_ADDR_EXP 121
40072: PUSH
40073: LD_EXP 121
40077: PPUSH
40078: LD_VAR 0 6
40082: PPUSH
40083: LD_EXP 121
40087: PUSH
40088: LD_VAR 0 6
40092: ARRAY
40093: PPUSH
40094: LD_VAR 0 5
40098: PPUSH
40099: CALL_OW 3
40103: PPUSH
40104: CALL_OW 1
40108: ST_TO_ADDR
// exit ;
40109: POP
40110: POP
40111: GO 40304
// end ; end ;
40113: GO 39953
40115: POP
40116: POP
// for i := minerMinesList [ index ] downto 1 do
40117: LD_ADDR_VAR 0 5
40121: PUSH
40122: DOUBLE
40123: LD_EXP 121
40127: PUSH
40128: LD_VAR 0 6
40132: ARRAY
40133: INC
40134: ST_TO_ADDR
40135: LD_INT 1
40137: PUSH
40138: FOR_DOWNTO
40139: IFFALSE 40302
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40141: LD_EXP 121
40145: PUSH
40146: LD_VAR 0 6
40150: ARRAY
40151: PUSH
40152: LD_VAR 0 5
40156: ARRAY
40157: PUSH
40158: LD_INT 1
40160: ARRAY
40161: PPUSH
40162: LD_EXP 121
40166: PUSH
40167: LD_VAR 0 6
40171: ARRAY
40172: PUSH
40173: LD_VAR 0 5
40177: ARRAY
40178: PUSH
40179: LD_INT 2
40181: ARRAY
40182: PPUSH
40183: LD_VAR 0 2
40187: PPUSH
40188: LD_VAR 0 3
40192: PPUSH
40193: CALL_OW 298
40197: PUSH
40198: LD_INT 6
40200: LESS
40201: IFFALSE 40300
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40203: LD_EXP 121
40207: PUSH
40208: LD_VAR 0 6
40212: ARRAY
40213: PUSH
40214: LD_VAR 0 5
40218: ARRAY
40219: PUSH
40220: LD_INT 1
40222: ARRAY
40223: PPUSH
40224: LD_EXP 121
40228: PUSH
40229: LD_VAR 0 6
40233: ARRAY
40234: PUSH
40235: LD_VAR 0 5
40239: ARRAY
40240: PUSH
40241: LD_INT 2
40243: ARRAY
40244: PPUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 255
40254: PPUSH
40255: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40259: LD_ADDR_EXP 121
40263: PUSH
40264: LD_EXP 121
40268: PPUSH
40269: LD_VAR 0 6
40273: PPUSH
40274: LD_EXP 121
40278: PUSH
40279: LD_VAR 0 6
40283: ARRAY
40284: PPUSH
40285: LD_VAR 0 5
40289: PPUSH
40290: CALL_OW 3
40294: PPUSH
40295: CALL_OW 1
40299: ST_TO_ADDR
// end ; end ;
40300: GO 40138
40302: POP
40303: POP
// end ;
40304: LD_VAR 0 4
40308: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40309: LD_INT 0
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 264
40329: PUSH
40330: LD_INT 81
40332: EQUAL
40333: NOT
40334: PUSH
40335: LD_VAR 0 1
40339: PUSH
40340: LD_EXP 120
40344: IN
40345: NOT
40346: OR
40347: IFFALSE 40351
// exit ;
40349: GO 40673
// index := GetElementIndex ( minersList , unit ) ;
40351: LD_ADDR_VAR 0 6
40355: PUSH
40356: LD_EXP 120
40360: PPUSH
40361: LD_VAR 0 1
40365: PPUSH
40366: CALL 45924 0 2
40370: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40371: LD_ADDR_VAR 0 8
40375: PUSH
40376: LD_EXP 122
40380: PUSH
40381: LD_EXP 121
40385: PUSH
40386: LD_VAR 0 6
40390: ARRAY
40391: MINUS
40392: ST_TO_ADDR
// if not minesFreeAmount then
40393: LD_VAR 0 8
40397: NOT
40398: IFFALSE 40402
// exit ;
40400: GO 40673
// tmp := [ ] ;
40402: LD_ADDR_VAR 0 7
40406: PUSH
40407: EMPTY
40408: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40409: LD_ADDR_VAR 0 5
40413: PUSH
40414: DOUBLE
40415: LD_INT 1
40417: DEC
40418: ST_TO_ADDR
40419: LD_VAR 0 8
40423: PUSH
40424: FOR_TO
40425: IFFALSE 40620
// begin _d := rand ( 0 , 5 ) ;
40427: LD_ADDR_VAR 0 11
40431: PUSH
40432: LD_INT 0
40434: PPUSH
40435: LD_INT 5
40437: PPUSH
40438: CALL_OW 12
40442: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40443: LD_ADDR_VAR 0 12
40447: PUSH
40448: LD_INT 2
40450: PPUSH
40451: LD_INT 6
40453: PPUSH
40454: CALL_OW 12
40458: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40459: LD_ADDR_VAR 0 9
40463: PUSH
40464: LD_VAR 0 2
40468: PPUSH
40469: LD_VAR 0 11
40473: PPUSH
40474: LD_VAR 0 12
40478: PPUSH
40479: CALL_OW 272
40483: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40484: LD_ADDR_VAR 0 10
40488: PUSH
40489: LD_VAR 0 3
40493: PPUSH
40494: LD_VAR 0 11
40498: PPUSH
40499: LD_VAR 0 12
40503: PPUSH
40504: CALL_OW 273
40508: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40509: LD_VAR 0 9
40513: PPUSH
40514: LD_VAR 0 10
40518: PPUSH
40519: CALL_OW 488
40523: PUSH
40524: LD_VAR 0 9
40528: PUSH
40529: LD_VAR 0 10
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_VAR 0 7
40542: IN
40543: NOT
40544: AND
40545: PUSH
40546: LD_VAR 0 9
40550: PPUSH
40551: LD_VAR 0 10
40555: PPUSH
40556: CALL_OW 458
40560: NOT
40561: AND
40562: IFFALSE 40604
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: LD_VAR 0 7
40573: PPUSH
40574: LD_VAR 0 7
40578: PUSH
40579: LD_INT 1
40581: PLUS
40582: PPUSH
40583: LD_VAR 0 9
40587: PUSH
40588: LD_VAR 0 10
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PPUSH
40597: CALL_OW 1
40601: ST_TO_ADDR
40602: GO 40618
// i := i - 1 ;
40604: LD_ADDR_VAR 0 5
40608: PUSH
40609: LD_VAR 0 5
40613: PUSH
40614: LD_INT 1
40616: MINUS
40617: ST_TO_ADDR
// end ;
40618: GO 40424
40620: POP
40621: POP
// for i in tmp do
40622: LD_ADDR_VAR 0 5
40626: PUSH
40627: LD_VAR 0 7
40631: PUSH
40632: FOR_IN
40633: IFFALSE 40671
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40635: LD_VAR 0 1
40639: PPUSH
40640: LD_VAR 0 5
40644: PUSH
40645: LD_INT 1
40647: ARRAY
40648: PPUSH
40649: LD_VAR 0 5
40653: PUSH
40654: LD_INT 2
40656: ARRAY
40657: PPUSH
40658: CALL 39617 0 3
40662: NOT
40663: IFFALSE 40669
// exit ;
40665: POP
40666: POP
40667: GO 40673
40669: GO 40632
40671: POP
40672: POP
// end ;
40673: LD_VAR 0 4
40677: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// if GetClass ( unit ) <> class_sniper then
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 257
40698: PUSH
40699: LD_INT 5
40701: NONEQUAL
40702: IFFALSE 40706
// exit ;
40704: GO 41172
// dist := 8 ;
40706: LD_ADDR_VAR 0 5
40710: PUSH
40711: LD_INT 8
40713: ST_TO_ADDR
// viewRange := 12 ;
40714: LD_ADDR_VAR 0 8
40718: PUSH
40719: LD_INT 12
40721: ST_TO_ADDR
// side := GetSide ( unit ) ;
40722: LD_ADDR_VAR 0 6
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 255
40736: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40737: LD_INT 61
40739: PPUSH
40740: LD_VAR 0 6
40744: PPUSH
40745: CALL_OW 321
40749: PUSH
40750: LD_INT 2
40752: EQUAL
40753: IFFALSE 40763
// viewRange := 16 ;
40755: LD_ADDR_VAR 0 8
40759: PUSH
40760: LD_INT 16
40762: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40763: LD_VAR 0 1
40767: PPUSH
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_VAR 0 3
40777: PPUSH
40778: CALL_OW 297
40782: PUSH
40783: LD_VAR 0 5
40787: GREATER
40788: IFFALSE 40867
// begin ComMoveXY ( unit , x , y ) ;
40790: LD_VAR 0 1
40794: PPUSH
40795: LD_VAR 0 2
40799: PPUSH
40800: LD_VAR 0 3
40804: PPUSH
40805: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40809: LD_INT 35
40811: PPUSH
40812: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40816: LD_VAR 0 1
40820: PPUSH
40821: LD_VAR 0 2
40825: PPUSH
40826: LD_VAR 0 3
40830: PPUSH
40831: CALL 77665 0 3
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 41172
// until GetDistUnitXY ( unit , x , y ) < dist ;
40840: LD_VAR 0 1
40844: PPUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: CALL_OW 297
40859: PUSH
40860: LD_VAR 0 5
40864: LESS
40865: IFFALSE 40809
// end ; ComTurnXY ( unit , x , y ) ;
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 2
40876: PPUSH
40877: LD_VAR 0 3
40881: PPUSH
40882: CALL_OW 118
// repeat if Multiplayer then
40886: LD_OWVAR 4
40890: IFFALSE 40901
// wait ( 35 ) else
40892: LD_INT 35
40894: PPUSH
40895: CALL_OW 67
40899: GO 40908
// wait ( 5 ) ;
40901: LD_INT 5
40903: PPUSH
40904: CALL_OW 67
// _d := GetDir ( unit ) ;
40908: LD_ADDR_VAR 0 11
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 254
40922: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40923: LD_ADDR_VAR 0 7
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 250
40937: PPUSH
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 251
40947: PPUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL 80273 0 4
40962: ST_TO_ADDR
// until dir = _d ;
40963: LD_VAR 0 7
40967: PUSH
40968: LD_VAR 0 11
40972: EQUAL
40973: IFFALSE 40886
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 250
40989: PPUSH
40990: LD_VAR 0 7
40994: PPUSH
40995: LD_VAR 0 5
40999: PPUSH
41000: CALL_OW 272
41004: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41005: LD_ADDR_VAR 0 10
41009: PUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 251
41019: PPUSH
41020: LD_VAR 0 7
41024: PPUSH
41025: LD_VAR 0 5
41029: PPUSH
41030: CALL_OW 273
41034: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41035: LD_VAR 0 9
41039: PPUSH
41040: LD_VAR 0 10
41044: PPUSH
41045: CALL_OW 488
41049: NOT
41050: IFFALSE 41054
// exit ;
41052: GO 41172
// ComAnimCustom ( unit , 1 ) ;
41054: LD_VAR 0 1
41058: PPUSH
41059: LD_INT 1
41061: PPUSH
41062: CALL_OW 592
// p := 0 ;
41066: LD_ADDR_VAR 0 12
41070: PUSH
41071: LD_INT 0
41073: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41074: LD_VAR 0 9
41078: PPUSH
41079: LD_VAR 0 10
41083: PPUSH
41084: LD_VAR 0 6
41088: PPUSH
41089: LD_VAR 0 8
41093: PPUSH
41094: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41098: LD_INT 35
41100: PPUSH
41101: CALL_OW 67
// p := Inc ( p ) ;
41105: LD_ADDR_VAR 0 12
41109: PUSH
41110: LD_VAR 0 12
41114: PPUSH
41115: CALL 80229 0 1
41119: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41120: LD_VAR 0 12
41124: PUSH
41125: LD_INT 3
41127: EQUAL
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 302
41138: NOT
41139: OR
41140: PUSH
41141: LD_VAR 0 1
41145: PPUSH
41146: CALL_OW 301
41150: OR
41151: IFFALSE 41098
// RemoveSeeing ( _x , _y , side ) ;
41153: LD_VAR 0 9
41157: PPUSH
41158: LD_VAR 0 10
41162: PPUSH
41163: LD_VAR 0 6
41167: PPUSH
41168: CALL_OW 331
// end ; end_of_file
41172: LD_VAR 0 4
41176: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41177: LD_INT 0
41179: PPUSH
41180: PPUSH
// if exist_mode then
41181: LD_VAR 0 2
41185: IFFALSE 41210
// unit := CreateCharacter ( prefix & ident ) else
41187: LD_ADDR_VAR 0 5
41191: PUSH
41192: LD_VAR 0 3
41196: PUSH
41197: LD_VAR 0 1
41201: STR
41202: PPUSH
41203: CALL_OW 34
41207: ST_TO_ADDR
41208: GO 41225
// unit := NewCharacter ( ident ) ;
41210: LD_ADDR_VAR 0 5
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 25
41224: ST_TO_ADDR
// result := unit ;
41225: LD_ADDR_VAR 0 4
41229: PUSH
41230: LD_VAR 0 5
41234: ST_TO_ADDR
// end ;
41235: LD_VAR 0 4
41239: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41240: LD_INT 0
41242: PPUSH
41243: PPUSH
// if not side or not nation then
41244: LD_VAR 0 1
41248: NOT
41249: PUSH
41250: LD_VAR 0 2
41254: NOT
41255: OR
41256: IFFALSE 41260
// exit ;
41258: GO 42028
// case nation of nation_american :
41260: LD_VAR 0 2
41264: PUSH
41265: LD_INT 1
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41487
41273: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41274: LD_ADDR_VAR 0 4
41278: PUSH
41279: LD_INT 35
41281: PUSH
41282: LD_INT 45
41284: PUSH
41285: LD_INT 46
41287: PUSH
41288: LD_INT 47
41290: PUSH
41291: LD_INT 82
41293: PUSH
41294: LD_INT 83
41296: PUSH
41297: LD_INT 84
41299: PUSH
41300: LD_INT 85
41302: PUSH
41303: LD_INT 86
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 6
41314: PUSH
41315: LD_INT 15
41317: PUSH
41318: LD_INT 16
41320: PUSH
41321: LD_INT 7
41323: PUSH
41324: LD_INT 12
41326: PUSH
41327: LD_INT 13
41329: PUSH
41330: LD_INT 10
41332: PUSH
41333: LD_INT 14
41335: PUSH
41336: LD_INT 20
41338: PUSH
41339: LD_INT 21
41341: PUSH
41342: LD_INT 22
41344: PUSH
41345: LD_INT 25
41347: PUSH
41348: LD_INT 32
41350: PUSH
41351: LD_INT 27
41353: PUSH
41354: LD_INT 36
41356: PUSH
41357: LD_INT 69
41359: PUSH
41360: LD_INT 39
41362: PUSH
41363: LD_INT 34
41365: PUSH
41366: LD_INT 40
41368: PUSH
41369: LD_INT 48
41371: PUSH
41372: LD_INT 49
41374: PUSH
41375: LD_INT 50
41377: PUSH
41378: LD_INT 51
41380: PUSH
41381: LD_INT 52
41383: PUSH
41384: LD_INT 53
41386: PUSH
41387: LD_INT 54
41389: PUSH
41390: LD_INT 55
41392: PUSH
41393: LD_INT 56
41395: PUSH
41396: LD_INT 57
41398: PUSH
41399: LD_INT 58
41401: PUSH
41402: LD_INT 59
41404: PUSH
41405: LD_INT 60
41407: PUSH
41408: LD_INT 61
41410: PUSH
41411: LD_INT 62
41413: PUSH
41414: LD_INT 80
41416: PUSH
41417: LD_INT 82
41419: PUSH
41420: LD_INT 83
41422: PUSH
41423: LD_INT 84
41425: PUSH
41426: LD_INT 85
41428: PUSH
41429: LD_INT 86
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
41485: GO 41952
41487: LD_INT 2
41489: DOUBLE
41490: EQUAL
41491: IFTRUE 41495
41493: GO 41721
41495: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41496: LD_ADDR_VAR 0 4
41500: PUSH
41501: LD_INT 35
41503: PUSH
41504: LD_INT 45
41506: PUSH
41507: LD_INT 46
41509: PUSH
41510: LD_INT 47
41512: PUSH
41513: LD_INT 82
41515: PUSH
41516: LD_INT 83
41518: PUSH
41519: LD_INT 84
41521: PUSH
41522: LD_INT 85
41524: PUSH
41525: LD_INT 87
41527: PUSH
41528: LD_INT 70
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 11
41536: PUSH
41537: LD_INT 3
41539: PUSH
41540: LD_INT 4
41542: PUSH
41543: LD_INT 5
41545: PUSH
41546: LD_INT 6
41548: PUSH
41549: LD_INT 15
41551: PUSH
41552: LD_INT 18
41554: PUSH
41555: LD_INT 7
41557: PUSH
41558: LD_INT 17
41560: PUSH
41561: LD_INT 8
41563: PUSH
41564: LD_INT 20
41566: PUSH
41567: LD_INT 21
41569: PUSH
41570: LD_INT 22
41572: PUSH
41573: LD_INT 72
41575: PUSH
41576: LD_INT 26
41578: PUSH
41579: LD_INT 69
41581: PUSH
41582: LD_INT 39
41584: PUSH
41585: LD_INT 40
41587: PUSH
41588: LD_INT 41
41590: PUSH
41591: LD_INT 42
41593: PUSH
41594: LD_INT 43
41596: PUSH
41597: LD_INT 48
41599: PUSH
41600: LD_INT 49
41602: PUSH
41603: LD_INT 50
41605: PUSH
41606: LD_INT 51
41608: PUSH
41609: LD_INT 52
41611: PUSH
41612: LD_INT 53
41614: PUSH
41615: LD_INT 54
41617: PUSH
41618: LD_INT 55
41620: PUSH
41621: LD_INT 56
41623: PUSH
41624: LD_INT 60
41626: PUSH
41627: LD_INT 61
41629: PUSH
41630: LD_INT 62
41632: PUSH
41633: LD_INT 66
41635: PUSH
41636: LD_INT 67
41638: PUSH
41639: LD_INT 68
41641: PUSH
41642: LD_INT 81
41644: PUSH
41645: LD_INT 82
41647: PUSH
41648: LD_INT 83
41650: PUSH
41651: LD_INT 84
41653: PUSH
41654: LD_INT 85
41656: PUSH
41657: LD_INT 87
41659: PUSH
41660: LD_INT 88
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
41719: GO 41952
41721: LD_INT 3
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41951
41729: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41730: LD_ADDR_VAR 0 4
41734: PUSH
41735: LD_INT 46
41737: PUSH
41738: LD_INT 47
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 82
41749: PUSH
41750: LD_INT 83
41752: PUSH
41753: LD_INT 84
41755: PUSH
41756: LD_INT 85
41758: PUSH
41759: LD_INT 86
41761: PUSH
41762: LD_INT 11
41764: PUSH
41765: LD_INT 9
41767: PUSH
41768: LD_INT 20
41770: PUSH
41771: LD_INT 19
41773: PUSH
41774: LD_INT 21
41776: PUSH
41777: LD_INT 24
41779: PUSH
41780: LD_INT 22
41782: PUSH
41783: LD_INT 25
41785: PUSH
41786: LD_INT 28
41788: PUSH
41789: LD_INT 29
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_INT 31
41797: PUSH
41798: LD_INT 37
41800: PUSH
41801: LD_INT 38
41803: PUSH
41804: LD_INT 32
41806: PUSH
41807: LD_INT 27
41809: PUSH
41810: LD_INT 33
41812: PUSH
41813: LD_INT 69
41815: PUSH
41816: LD_INT 39
41818: PUSH
41819: LD_INT 34
41821: PUSH
41822: LD_INT 40
41824: PUSH
41825: LD_INT 71
41827: PUSH
41828: LD_INT 23
41830: PUSH
41831: LD_INT 44
41833: PUSH
41834: LD_INT 48
41836: PUSH
41837: LD_INT 49
41839: PUSH
41840: LD_INT 50
41842: PUSH
41843: LD_INT 51
41845: PUSH
41846: LD_INT 52
41848: PUSH
41849: LD_INT 53
41851: PUSH
41852: LD_INT 54
41854: PUSH
41855: LD_INT 55
41857: PUSH
41858: LD_INT 56
41860: PUSH
41861: LD_INT 57
41863: PUSH
41864: LD_INT 58
41866: PUSH
41867: LD_INT 59
41869: PUSH
41870: LD_INT 63
41872: PUSH
41873: LD_INT 64
41875: PUSH
41876: LD_INT 65
41878: PUSH
41879: LD_INT 82
41881: PUSH
41882: LD_INT 83
41884: PUSH
41885: LD_INT 84
41887: PUSH
41888: LD_INT 85
41890: PUSH
41891: LD_INT 86
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
41949: GO 41952
41951: POP
// if state > - 1 and state < 3 then
41952: LD_VAR 0 3
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: GREATER
41961: PUSH
41962: LD_VAR 0 3
41966: PUSH
41967: LD_INT 3
41969: LESS
41970: AND
41971: IFFALSE 42028
// for i in result do
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_VAR 0 4
41982: PUSH
41983: FOR_IN
41984: IFFALSE 42026
// if GetTech ( i , side ) <> state then
41986: LD_VAR 0 5
41990: PPUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: CALL_OW 321
42000: PUSH
42001: LD_VAR 0 3
42005: NONEQUAL
42006: IFFALSE 42024
// result := result diff i ;
42008: LD_ADDR_VAR 0 4
42012: PUSH
42013: LD_VAR 0 4
42017: PUSH
42018: LD_VAR 0 5
42022: DIFF
42023: ST_TO_ADDR
42024: GO 41983
42026: POP
42027: POP
// end ;
42028: LD_VAR 0 4
42032: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42033: LD_INT 0
42035: PPUSH
42036: PPUSH
42037: PPUSH
// result := true ;
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 1
42045: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42046: LD_ADDR_VAR 0 5
42050: PUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: CALL_OW 480
42060: ST_TO_ADDR
// if not tmp then
42061: LD_VAR 0 5
42065: NOT
42066: IFFALSE 42070
// exit ;
42068: GO 42119
// for i in tmp do
42070: LD_ADDR_VAR 0 4
42074: PUSH
42075: LD_VAR 0 5
42079: PUSH
42080: FOR_IN
42081: IFFALSE 42117
// if GetTech ( i , side ) <> state_researched then
42083: LD_VAR 0 4
42087: PPUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 321
42097: PUSH
42098: LD_INT 2
42100: NONEQUAL
42101: IFFALSE 42115
// begin result := false ;
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_INT 0
42110: ST_TO_ADDR
// exit ;
42111: POP
42112: POP
42113: GO 42119
// end ;
42115: GO 42080
42117: POP
42118: POP
// end ;
42119: LD_VAR 0 3
42123: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42124: LD_INT 0
42126: PPUSH
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42139: LD_VAR 0 1
42143: NOT
42144: PUSH
42145: LD_VAR 0 1
42149: PPUSH
42150: CALL_OW 257
42154: PUSH
42155: LD_INT 9
42157: NONEQUAL
42158: OR
42159: IFFALSE 42163
// exit ;
42161: GO 42736
// side := GetSide ( unit ) ;
42163: LD_ADDR_VAR 0 9
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 255
42177: ST_TO_ADDR
// tech_space := tech_spacanom ;
42178: LD_ADDR_VAR 0 12
42182: PUSH
42183: LD_INT 29
42185: ST_TO_ADDR
// tech_time := tech_taurad ;
42186: LD_ADDR_VAR 0 13
42190: PUSH
42191: LD_INT 28
42193: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42194: LD_ADDR_VAR 0 11
42198: PUSH
42199: LD_VAR 0 1
42203: PPUSH
42204: CALL_OW 310
42208: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42209: LD_VAR 0 11
42213: PPUSH
42214: CALL_OW 247
42218: PUSH
42219: LD_INT 2
42221: EQUAL
42222: IFFALSE 42226
// exit ;
42224: GO 42736
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42226: LD_ADDR_VAR 0 8
42230: PUSH
42231: LD_INT 81
42233: PUSH
42234: LD_VAR 0 9
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: LD_INT 21
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 69
42268: ST_TO_ADDR
// if not tmp then
42269: LD_VAR 0 8
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 42736
// if in_unit then
42278: LD_VAR 0 11
42282: IFFALSE 42306
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42284: LD_ADDR_VAR 0 10
42288: PUSH
42289: LD_VAR 0 8
42293: PPUSH
42294: LD_VAR 0 11
42298: PPUSH
42299: CALL_OW 74
42303: ST_TO_ADDR
42304: GO 42326
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42306: LD_ADDR_VAR 0 10
42310: PUSH
42311: LD_VAR 0 8
42315: PPUSH
42316: LD_VAR 0 1
42320: PPUSH
42321: CALL_OW 74
42325: ST_TO_ADDR
// if not enemy then
42326: LD_VAR 0 10
42330: NOT
42331: IFFALSE 42335
// exit ;
42333: GO 42736
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42335: LD_VAR 0 11
42339: PUSH
42340: LD_VAR 0 11
42344: PPUSH
42345: LD_VAR 0 10
42349: PPUSH
42350: CALL_OW 296
42354: PUSH
42355: LD_INT 13
42357: GREATER
42358: AND
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: LD_VAR 0 10
42369: PPUSH
42370: CALL_OW 296
42374: PUSH
42375: LD_INT 12
42377: GREATER
42378: OR
42379: IFFALSE 42383
// exit ;
42381: GO 42736
// missile := [ 1 ] ;
42383: LD_ADDR_VAR 0 14
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42394: LD_VAR 0 9
42398: PPUSH
42399: LD_VAR 0 12
42403: PPUSH
42404: CALL_OW 325
42408: IFFALSE 42437
// missile := Replace ( missile , missile + 1 , 2 ) ;
42410: LD_ADDR_VAR 0 14
42414: PUSH
42415: LD_VAR 0 14
42419: PPUSH
42420: LD_VAR 0 14
42424: PUSH
42425: LD_INT 1
42427: PLUS
42428: PPUSH
42429: LD_INT 2
42431: PPUSH
42432: CALL_OW 1
42436: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42437: LD_VAR 0 9
42441: PPUSH
42442: LD_VAR 0 13
42446: PPUSH
42447: CALL_OW 325
42451: PUSH
42452: LD_VAR 0 10
42456: PPUSH
42457: CALL_OW 255
42461: PPUSH
42462: LD_VAR 0 13
42466: PPUSH
42467: CALL_OW 325
42471: NOT
42472: AND
42473: IFFALSE 42502
// missile := Replace ( missile , missile + 1 , 3 ) ;
42475: LD_ADDR_VAR 0 14
42479: PUSH
42480: LD_VAR 0 14
42484: PPUSH
42485: LD_VAR 0 14
42489: PUSH
42490: LD_INT 1
42492: PLUS
42493: PPUSH
42494: LD_INT 3
42496: PPUSH
42497: CALL_OW 1
42501: ST_TO_ADDR
// if missile < 2 then
42502: LD_VAR 0 14
42506: PUSH
42507: LD_INT 2
42509: LESS
42510: IFFALSE 42514
// exit ;
42512: GO 42736
// x := GetX ( enemy ) ;
42514: LD_ADDR_VAR 0 4
42518: PUSH
42519: LD_VAR 0 10
42523: PPUSH
42524: CALL_OW 250
42528: ST_TO_ADDR
// y := GetY ( enemy ) ;
42529: LD_ADDR_VAR 0 5
42533: PUSH
42534: LD_VAR 0 10
42538: PPUSH
42539: CALL_OW 251
42543: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42544: LD_ADDR_VAR 0 6
42548: PUSH
42549: LD_VAR 0 4
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PPUSH
42558: LD_INT 1
42560: PPUSH
42561: CALL_OW 12
42565: PLUS
42566: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42567: LD_ADDR_VAR 0 7
42571: PUSH
42572: LD_VAR 0 5
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PPUSH
42581: LD_INT 1
42583: PPUSH
42584: CALL_OW 12
42588: PLUS
42589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 7
42599: PPUSH
42600: CALL_OW 488
42604: NOT
42605: IFFALSE 42627
// begin _x := x ;
42607: LD_ADDR_VAR 0 6
42611: PUSH
42612: LD_VAR 0 4
42616: ST_TO_ADDR
// _y := y ;
42617: LD_ADDR_VAR 0 7
42621: PUSH
42622: LD_VAR 0 5
42626: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 1
42634: PPUSH
42635: LD_VAR 0 14
42639: PPUSH
42640: CALL_OW 12
42644: ST_TO_ADDR
// case i of 1 :
42645: LD_VAR 0 3
42649: PUSH
42650: LD_INT 1
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42658
42656: GO 42675
42658: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_VAR 0 10
42668: PPUSH
42669: CALL_OW 115
42673: GO 42736
42675: LD_INT 2
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42705
42683: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42684: LD_VAR 0 1
42688: PPUSH
42689: LD_VAR 0 6
42693: PPUSH
42694: LD_VAR 0 7
42698: PPUSH
42699: CALL_OW 153
42703: GO 42736
42705: LD_INT 3
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42735
42713: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42714: LD_VAR 0 1
42718: PPUSH
42719: LD_VAR 0 6
42723: PPUSH
42724: LD_VAR 0 7
42728: PPUSH
42729: CALL_OW 154
42733: GO 42736
42735: POP
// end ;
42736: LD_VAR 0 2
42740: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42741: LD_INT 0
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
// if not unit or not building then
42749: LD_VAR 0 1
42753: NOT
42754: PUSH
42755: LD_VAR 0 2
42759: NOT
42760: OR
42761: IFFALSE 42765
// exit ;
42763: GO 42923
// x := GetX ( building ) ;
42765: LD_ADDR_VAR 0 5
42769: PUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: CALL_OW 250
42779: ST_TO_ADDR
// y := GetY ( building ) ;
42780: LD_ADDR_VAR 0 6
42784: PUSH
42785: LD_VAR 0 2
42789: PPUSH
42790: CALL_OW 251
42794: ST_TO_ADDR
// for i = 0 to 5 do
42795: LD_ADDR_VAR 0 4
42799: PUSH
42800: DOUBLE
42801: LD_INT 0
42803: DEC
42804: ST_TO_ADDR
42805: LD_INT 5
42807: PUSH
42808: FOR_TO
42809: IFFALSE 42921
// begin _x := ShiftX ( x , i , 3 ) ;
42811: LD_ADDR_VAR 0 7
42815: PUSH
42816: LD_VAR 0 5
42820: PPUSH
42821: LD_VAR 0 4
42825: PPUSH
42826: LD_INT 3
42828: PPUSH
42829: CALL_OW 272
42833: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42834: LD_ADDR_VAR 0 8
42838: PUSH
42839: LD_VAR 0 6
42843: PPUSH
42844: LD_VAR 0 4
42848: PPUSH
42849: LD_INT 3
42851: PPUSH
42852: CALL_OW 273
42856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42857: LD_VAR 0 7
42861: PPUSH
42862: LD_VAR 0 8
42866: PPUSH
42867: CALL_OW 488
42871: NOT
42872: IFFALSE 42876
// continue ;
42874: GO 42808
// if HexInfo ( _x , _y ) = 0 then
42876: LD_VAR 0 7
42880: PPUSH
42881: LD_VAR 0 8
42885: PPUSH
42886: CALL_OW 428
42890: PUSH
42891: LD_INT 0
42893: EQUAL
42894: IFFALSE 42919
// begin ComMoveXY ( unit , _x , _y ) ;
42896: LD_VAR 0 1
42900: PPUSH
42901: LD_VAR 0 7
42905: PPUSH
42906: LD_VAR 0 8
42910: PPUSH
42911: CALL_OW 111
// exit ;
42915: POP
42916: POP
42917: GO 42923
// end ; end ;
42919: GO 42808
42921: POP
42922: POP
// end ;
42923: LD_VAR 0 3
42927: RET
// export function ScanBase ( side , base_area ) ; begin
42928: LD_INT 0
42930: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_VAR 0 2
42940: PPUSH
42941: LD_INT 81
42943: PUSH
42944: LD_VAR 0 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PPUSH
42953: CALL_OW 70
42957: ST_TO_ADDR
// end ;
42958: LD_VAR 0 3
42962: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42963: LD_INT 0
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
// result := false ;
42969: LD_ADDR_VAR 0 2
42973: PUSH
42974: LD_INT 0
42976: ST_TO_ADDR
// side := GetSide ( unit ) ;
42977: LD_ADDR_VAR 0 3
42981: PUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 255
42991: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42992: LD_ADDR_VAR 0 4
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 248
43006: ST_TO_ADDR
// case nat of 1 :
43007: LD_VAR 0 4
43011: PUSH
43012: LD_INT 1
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43031
43020: POP
// tech := tech_lassight ; 2 :
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: LD_INT 12
43028: ST_TO_ADDR
43029: GO 43070
43031: LD_INT 2
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43039
43037: GO 43050
43039: POP
// tech := tech_mortar ; 3 :
43040: LD_ADDR_VAR 0 5
43044: PUSH
43045: LD_INT 41
43047: ST_TO_ADDR
43048: GO 43070
43050: LD_INT 3
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43069
43058: POP
// tech := tech_bazooka ; end ;
43059: LD_ADDR_VAR 0 5
43063: PUSH
43064: LD_INT 44
43066: ST_TO_ADDR
43067: GO 43070
43069: POP
// if Researched ( side , tech ) then
43070: LD_VAR 0 3
43074: PPUSH
43075: LD_VAR 0 5
43079: PPUSH
43080: CALL_OW 325
43084: IFFALSE 43111
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43086: LD_ADDR_VAR 0 2
43090: PUSH
43091: LD_INT 5
43093: PUSH
43094: LD_INT 8
43096: PUSH
43097: LD_INT 9
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: PUSH
43105: LD_VAR 0 4
43109: ARRAY
43110: ST_TO_ADDR
// end ;
43111: LD_VAR 0 2
43115: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43116: LD_INT 0
43118: PPUSH
43119: PPUSH
43120: PPUSH
// if not mines then
43121: LD_VAR 0 2
43125: NOT
43126: IFFALSE 43130
// exit ;
43128: GO 43274
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43130: LD_ADDR_VAR 0 5
43134: PUSH
43135: LD_INT 81
43137: PUSH
43138: LD_VAR 0 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: LD_INT 21
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PPUSH
43168: CALL_OW 69
43172: ST_TO_ADDR
// for i in mines do
43173: LD_ADDR_VAR 0 4
43177: PUSH
43178: LD_VAR 0 2
43182: PUSH
43183: FOR_IN
43184: IFFALSE 43272
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43186: LD_VAR 0 4
43190: PUSH
43191: LD_INT 1
43193: ARRAY
43194: PPUSH
43195: LD_VAR 0 4
43199: PUSH
43200: LD_INT 2
43202: ARRAY
43203: PPUSH
43204: CALL_OW 458
43208: NOT
43209: IFFALSE 43213
// continue ;
43211: GO 43183
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43213: LD_VAR 0 4
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: PPUSH
43222: LD_VAR 0 4
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 428
43235: PUSH
43236: LD_VAR 0 5
43240: IN
43241: IFFALSE 43270
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43243: LD_VAR 0 4
43247: PUSH
43248: LD_INT 1
43250: ARRAY
43251: PPUSH
43252: LD_VAR 0 4
43256: PUSH
43257: LD_INT 2
43259: ARRAY
43260: PPUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: CALL_OW 456
// end ;
43270: GO 43183
43272: POP
43273: POP
// end ;
43274: LD_VAR 0 3
43278: RET
// export function Count ( array ) ; begin
43279: LD_INT 0
43281: PPUSH
// result := array + 0 ;
43282: LD_ADDR_VAR 0 2
43286: PUSH
43287: LD_VAR 0 1
43291: PUSH
43292: LD_INT 0
43294: PLUS
43295: ST_TO_ADDR
// end ;
43296: LD_VAR 0 2
43300: RET
// export function IsEmpty ( building ) ; begin
43301: LD_INT 0
43303: PPUSH
// if not building then
43304: LD_VAR 0 1
43308: NOT
43309: IFFALSE 43313
// exit ;
43311: GO 43356
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43313: LD_ADDR_VAR 0 2
43317: PUSH
43318: LD_VAR 0 1
43322: PUSH
43323: LD_INT 22
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 255
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 58
43342: PUSH
43343: EMPTY
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PPUSH
43350: CALL_OW 69
43354: IN
43355: ST_TO_ADDR
// end ;
43356: LD_VAR 0 2
43360: RET
// export function IsNotFull ( building ) ; var places ; begin
43361: LD_INT 0
43363: PPUSH
43364: PPUSH
// if not building then
43365: LD_VAR 0 1
43369: NOT
43370: IFFALSE 43374
// exit ;
43372: GO 43402
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43374: LD_ADDR_VAR 0 2
43378: PUSH
43379: LD_VAR 0 1
43383: PPUSH
43384: LD_INT 3
43386: PUSH
43387: LD_INT 62
43389: PUSH
43390: EMPTY
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PPUSH
43397: CALL_OW 72
43401: ST_TO_ADDR
// end ;
43402: LD_VAR 0 2
43406: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43407: LD_INT 0
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
// tmp := [ ] ;
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: EMPTY
43419: ST_TO_ADDR
// list := [ ] ;
43420: LD_ADDR_VAR 0 5
43424: PUSH
43425: EMPTY
43426: ST_TO_ADDR
// for i = 16 to 25 do
43427: LD_ADDR_VAR 0 4
43431: PUSH
43432: DOUBLE
43433: LD_INT 16
43435: DEC
43436: ST_TO_ADDR
43437: LD_INT 25
43439: PUSH
43440: FOR_TO
43441: IFFALSE 43514
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 3
43452: PUSH
43453: LD_INT 22
43455: PUSH
43456: LD_VAR 0 1
43460: PPUSH
43461: CALL_OW 255
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 91
43472: PUSH
43473: LD_VAR 0 1
43477: PUSH
43478: LD_INT 6
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 30
43488: PUSH
43489: LD_VAR 0 4
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: PPUSH
43506: CALL_OW 69
43510: ADD
43511: ST_TO_ADDR
43512: GO 43440
43514: POP
43515: POP
// for i = 1 to tmp do
43516: LD_ADDR_VAR 0 4
43520: PUSH
43521: DOUBLE
43522: LD_INT 1
43524: DEC
43525: ST_TO_ADDR
43526: LD_VAR 0 3
43530: PUSH
43531: FOR_TO
43532: IFFALSE 43620
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43534: LD_ADDR_VAR 0 5
43538: PUSH
43539: LD_VAR 0 5
43543: PUSH
43544: LD_VAR 0 3
43548: PUSH
43549: LD_VAR 0 4
43553: ARRAY
43554: PPUSH
43555: CALL_OW 266
43559: PUSH
43560: LD_VAR 0 3
43564: PUSH
43565: LD_VAR 0 4
43569: ARRAY
43570: PPUSH
43571: CALL_OW 250
43575: PUSH
43576: LD_VAR 0 3
43580: PUSH
43581: LD_VAR 0 4
43585: ARRAY
43586: PPUSH
43587: CALL_OW 251
43591: PUSH
43592: LD_VAR 0 3
43596: PUSH
43597: LD_VAR 0 4
43601: ARRAY
43602: PPUSH
43603: CALL_OW 254
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: ADD
43617: ST_TO_ADDR
43618: GO 43531
43620: POP
43621: POP
// result := list ;
43622: LD_ADDR_VAR 0 2
43626: PUSH
43627: LD_VAR 0 5
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 2
43636: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43637: LD_INT 0
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
// if not factory then
43646: LD_VAR 0 1
43650: NOT
43651: IFFALSE 43655
// exit ;
43653: GO 44248
// if control = control_apeman then
43655: LD_VAR 0 4
43659: PUSH
43660: LD_INT 5
43662: EQUAL
43663: IFFALSE 43772
// begin tmp := UnitsInside ( factory ) ;
43665: LD_ADDR_VAR 0 8
43669: PUSH
43670: LD_VAR 0 1
43674: PPUSH
43675: CALL_OW 313
43679: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43680: LD_VAR 0 8
43684: PPUSH
43685: LD_INT 25
43687: PUSH
43688: LD_INT 12
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PPUSH
43695: CALL_OW 72
43699: NOT
43700: IFFALSE 43710
// control := control_manual ;
43702: LD_ADDR_VAR 0 4
43706: PUSH
43707: LD_INT 1
43709: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43710: LD_ADDR_VAR 0 8
43714: PUSH
43715: LD_VAR 0 1
43719: PPUSH
43720: CALL 43407 0 1
43724: ST_TO_ADDR
// if tmp then
43725: LD_VAR 0 8
43729: IFFALSE 43772
// begin for i in tmp do
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: LD_VAR 0 8
43740: PUSH
43741: FOR_IN
43742: IFFALSE 43770
// if i [ 1 ] = b_ext_radio then
43744: LD_VAR 0 7
43748: PUSH
43749: LD_INT 1
43751: ARRAY
43752: PUSH
43753: LD_INT 22
43755: EQUAL
43756: IFFALSE 43768
// begin control := control_remote ;
43758: LD_ADDR_VAR 0 4
43762: PUSH
43763: LD_INT 2
43765: ST_TO_ADDR
// break ;
43766: GO 43770
// end ;
43768: GO 43741
43770: POP
43771: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43772: LD_VAR 0 1
43776: PPUSH
43777: LD_VAR 0 2
43781: PPUSH
43782: LD_VAR 0 3
43786: PPUSH
43787: LD_VAR 0 4
43791: PPUSH
43792: LD_VAR 0 5
43796: PPUSH
43797: CALL_OW 448
43801: IFFALSE 43836
// begin result := [ chassis , engine , control , weapon ] ;
43803: LD_ADDR_VAR 0 6
43807: PUSH
43808: LD_VAR 0 2
43812: PUSH
43813: LD_VAR 0 3
43817: PUSH
43818: LD_VAR 0 4
43822: PUSH
43823: LD_VAR 0 5
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
// exit ;
43834: GO 44248
// end ; _chassis := AvailableChassisList ( factory ) ;
43836: LD_ADDR_VAR 0 9
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 475
43850: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43851: LD_ADDR_VAR 0 11
43855: PUSH
43856: LD_VAR 0 1
43860: PPUSH
43861: CALL_OW 476
43865: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43866: LD_ADDR_VAR 0 12
43870: PUSH
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 477
43880: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43881: LD_ADDR_VAR 0 10
43885: PUSH
43886: LD_VAR 0 1
43890: PPUSH
43891: CALL_OW 478
43895: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43896: LD_VAR 0 9
43900: NOT
43901: PUSH
43902: LD_VAR 0 11
43906: NOT
43907: OR
43908: PUSH
43909: LD_VAR 0 12
43913: NOT
43914: OR
43915: PUSH
43916: LD_VAR 0 10
43920: NOT
43921: OR
43922: IFFALSE 43957
// begin result := [ chassis , engine , control , weapon ] ;
43924: LD_ADDR_VAR 0 6
43928: PUSH
43929: LD_VAR 0 2
43933: PUSH
43934: LD_VAR 0 3
43938: PUSH
43939: LD_VAR 0 4
43943: PUSH
43944: LD_VAR 0 5
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// exit ;
43955: GO 44248
// end ; if not chassis in _chassis then
43957: LD_VAR 0 2
43961: PUSH
43962: LD_VAR 0 9
43966: IN
43967: NOT
43968: IFFALSE 43994
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43970: LD_ADDR_VAR 0 2
43974: PUSH
43975: LD_VAR 0 9
43979: PUSH
43980: LD_INT 1
43982: PPUSH
43983: LD_VAR 0 9
43987: PPUSH
43988: CALL_OW 12
43992: ARRAY
43993: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43994: LD_VAR 0 2
43998: PPUSH
43999: LD_VAR 0 3
44003: PPUSH
44004: CALL 44253 0 2
44008: NOT
44009: IFFALSE 44068
// repeat engine := _engine [ 1 ] ;
44011: LD_ADDR_VAR 0 3
44015: PUSH
44016: LD_VAR 0 11
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44025: LD_ADDR_VAR 0 11
44029: PUSH
44030: LD_VAR 0 11
44034: PPUSH
44035: LD_INT 1
44037: PPUSH
44038: CALL_OW 3
44042: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_VAR 0 3
44052: PPUSH
44053: CALL 44253 0 2
44057: PUSH
44058: LD_VAR 0 11
44062: PUSH
44063: EMPTY
44064: EQUAL
44065: OR
44066: IFFALSE 44011
// if not control in _control then
44068: LD_VAR 0 4
44072: PUSH
44073: LD_VAR 0 12
44077: IN
44078: NOT
44079: IFFALSE 44105
// control := _control [ rand ( 1 , _control ) ] ;
44081: LD_ADDR_VAR 0 4
44085: PUSH
44086: LD_VAR 0 12
44090: PUSH
44091: LD_INT 1
44093: PPUSH
44094: LD_VAR 0 12
44098: PPUSH
44099: CALL_OW 12
44103: ARRAY
44104: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44105: LD_VAR 0 2
44109: PPUSH
44110: LD_VAR 0 5
44114: PPUSH
44115: CALL 44473 0 2
44119: NOT
44120: IFFALSE 44179
// repeat weapon := _weapon [ 1 ] ;
44122: LD_ADDR_VAR 0 5
44126: PUSH
44127: LD_VAR 0 10
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44136: LD_ADDR_VAR 0 10
44140: PUSH
44141: LD_VAR 0 10
44145: PPUSH
44146: LD_INT 1
44148: PPUSH
44149: CALL_OW 3
44153: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44154: LD_VAR 0 2
44158: PPUSH
44159: LD_VAR 0 5
44163: PPUSH
44164: CALL 44473 0 2
44168: PUSH
44169: LD_VAR 0 10
44173: PUSH
44174: EMPTY
44175: EQUAL
44176: OR
44177: IFFALSE 44122
// result := [ ] ;
44179: LD_ADDR_VAR 0 6
44183: PUSH
44184: EMPTY
44185: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44186: LD_VAR 0 1
44190: PPUSH
44191: LD_VAR 0 2
44195: PPUSH
44196: LD_VAR 0 3
44200: PPUSH
44201: LD_VAR 0 4
44205: PPUSH
44206: LD_VAR 0 5
44210: PPUSH
44211: CALL_OW 448
44215: IFFALSE 44248
// result := [ chassis , engine , control , weapon ] ;
44217: LD_ADDR_VAR 0 6
44221: PUSH
44222: LD_VAR 0 2
44226: PUSH
44227: LD_VAR 0 3
44231: PUSH
44232: LD_VAR 0 4
44236: PUSH
44237: LD_VAR 0 5
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// end ;
44248: LD_VAR 0 6
44252: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44253: LD_INT 0
44255: PPUSH
// if not chassis or not engine then
44256: LD_VAR 0 1
44260: NOT
44261: PUSH
44262: LD_VAR 0 2
44266: NOT
44267: OR
44268: IFFALSE 44272
// exit ;
44270: GO 44468
// case engine of engine_solar :
44272: LD_VAR 0 2
44276: PUSH
44277: LD_INT 2
44279: DOUBLE
44280: EQUAL
44281: IFTRUE 44285
44283: GO 44323
44285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44286: LD_ADDR_VAR 0 3
44290: PUSH
44291: LD_INT 11
44293: PUSH
44294: LD_INT 12
44296: PUSH
44297: LD_INT 13
44299: PUSH
44300: LD_INT 14
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
44321: GO 44452
44323: LD_INT 1
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44393
44331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 11
44339: PUSH
44340: LD_INT 12
44342: PUSH
44343: LD_INT 13
44345: PUSH
44346: LD_INT 14
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: LD_INT 4
44360: PUSH
44361: LD_INT 5
44363: PUSH
44364: LD_INT 21
44366: PUSH
44367: LD_INT 23
44369: PUSH
44370: LD_INT 22
44372: PUSH
44373: LD_INT 24
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
44391: GO 44452
44393: LD_INT 3
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44451
44401: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_INT 13
44409: PUSH
44410: LD_INT 14
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 4
44421: PUSH
44422: LD_INT 5
44424: PUSH
44425: LD_INT 21
44427: PUSH
44428: LD_INT 22
44430: PUSH
44431: LD_INT 23
44433: PUSH
44434: LD_INT 24
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
44449: GO 44452
44451: POP
// result := ( chassis in result ) ;
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_VAR 0 1
44461: PUSH
44462: LD_VAR 0 3
44466: IN
44467: ST_TO_ADDR
// end ;
44468: LD_VAR 0 3
44472: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44473: LD_INT 0
44475: PPUSH
// if not chassis or not weapon then
44476: LD_VAR 0 1
44480: NOT
44481: PUSH
44482: LD_VAR 0 2
44486: NOT
44487: OR
44488: IFFALSE 44492
// exit ;
44490: GO 45552
// case weapon of us_machine_gun :
44492: LD_VAR 0 2
44496: PUSH
44497: LD_INT 2
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44535
44505: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44506: LD_ADDR_VAR 0 3
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: LD_INT 4
44522: PUSH
44523: LD_INT 5
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 45536
44535: LD_INT 3
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44573
44543: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 4
44560: PUSH
44561: LD_INT 5
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
44571: GO 45536
44573: LD_INT 11
44575: DOUBLE
44576: EQUAL
44577: IFTRUE 44581
44579: GO 44611
44581: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44582: LD_ADDR_VAR 0 3
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: LD_INT 4
44598: PUSH
44599: LD_INT 5
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
44609: GO 45536
44611: LD_INT 4
44613: DOUBLE
44614: EQUAL
44615: IFTRUE 44619
44617: GO 44645
44619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 4
44633: PUSH
44634: LD_INT 5
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
44643: GO 45536
44645: LD_INT 5
44647: DOUBLE
44648: EQUAL
44649: IFTRUE 44653
44651: GO 44679
44653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 4
44667: PUSH
44668: LD_INT 5
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
44677: GO 45536
44679: LD_INT 9
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44687
44685: GO 44713
44687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44688: LD_ADDR_VAR 0 3
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
44711: GO 45536
44713: LD_INT 7
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44721
44719: GO 44747
44721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44722: LD_ADDR_VAR 0 3
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: LD_INT 4
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: ST_TO_ADDR
44745: GO 45536
44747: LD_INT 12
44749: DOUBLE
44750: EQUAL
44751: IFTRUE 44755
44753: GO 44781
44755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44756: LD_ADDR_VAR 0 3
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: LD_INT 4
44769: PUSH
44770: LD_INT 5
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
44779: GO 45536
44781: LD_INT 13
44783: DOUBLE
44784: EQUAL
44785: IFTRUE 44789
44787: GO 44815
44789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 4
44803: PUSH
44804: LD_INT 5
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
44813: GO 45536
44815: LD_INT 14
44817: DOUBLE
44818: EQUAL
44819: IFTRUE 44823
44821: GO 44841
44823: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44824: LD_ADDR_VAR 0 3
44828: PUSH
44829: LD_INT 4
44831: PUSH
44832: LD_INT 5
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: ST_TO_ADDR
44839: GO 45536
44841: LD_INT 6
44843: DOUBLE
44844: EQUAL
44845: IFTRUE 44849
44847: GO 44867
44849: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44850: LD_ADDR_VAR 0 3
44854: PUSH
44855: LD_INT 4
44857: PUSH
44858: LD_INT 5
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: ST_TO_ADDR
44865: GO 45536
44867: LD_INT 10
44869: DOUBLE
44870: EQUAL
44871: IFTRUE 44875
44873: GO 44893
44875: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44876: LD_ADDR_VAR 0 3
44880: PUSH
44881: LD_INT 4
44883: PUSH
44884: LD_INT 5
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: ST_TO_ADDR
44891: GO 45536
44893: LD_INT 22
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44901
44899: GO 44927
44901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44902: LD_ADDR_VAR 0 3
44906: PUSH
44907: LD_INT 11
44909: PUSH
44910: LD_INT 12
44912: PUSH
44913: LD_INT 13
44915: PUSH
44916: LD_INT 14
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
44925: GO 45536
44927: LD_INT 23
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 44961
44935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 11
44943: PUSH
44944: LD_INT 12
44946: PUSH
44947: LD_INT 13
44949: PUSH
44950: LD_INT 14
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
44959: GO 45536
44961: LD_INT 24
44963: DOUBLE
44964: EQUAL
44965: IFTRUE 44969
44967: GO 44995
44969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_INT 11
44977: PUSH
44978: LD_INT 12
44980: PUSH
44981: LD_INT 13
44983: PUSH
44984: LD_INT 14
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
44993: GO 45536
44995: LD_INT 30
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45029
45003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 11
45011: PUSH
45012: LD_INT 12
45014: PUSH
45015: LD_INT 13
45017: PUSH
45018: LD_INT 14
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
45027: GO 45536
45029: LD_INT 25
45031: DOUBLE
45032: EQUAL
45033: IFTRUE 45037
45035: GO 45055
45037: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45038: LD_ADDR_VAR 0 3
45042: PUSH
45043: LD_INT 13
45045: PUSH
45046: LD_INT 14
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: ST_TO_ADDR
45053: GO 45536
45055: LD_INT 27
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45063
45061: GO 45081
45063: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45064: LD_ADDR_VAR 0 3
45068: PUSH
45069: LD_INT 13
45071: PUSH
45072: LD_INT 14
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 45536
45081: LD_INT 92
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45115
45089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 11
45097: PUSH
45098: LD_INT 12
45100: PUSH
45101: LD_INT 13
45103: PUSH
45104: LD_INT 14
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
45113: GO 45536
45115: LD_INT 28
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45141
45123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_INT 13
45131: PUSH
45132: LD_INT 14
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: ST_TO_ADDR
45139: GO 45536
45141: LD_INT 29
45143: DOUBLE
45144: EQUAL
45145: IFTRUE 45149
45147: GO 45167
45149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45150: LD_ADDR_VAR 0 3
45154: PUSH
45155: LD_INT 13
45157: PUSH
45158: LD_INT 14
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: ST_TO_ADDR
45165: GO 45536
45167: LD_INT 31
45169: DOUBLE
45170: EQUAL
45171: IFTRUE 45175
45173: GO 45193
45175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_INT 13
45183: PUSH
45184: LD_INT 14
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: ST_TO_ADDR
45191: GO 45536
45193: LD_INT 26
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45201
45199: GO 45219
45201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 13
45209: PUSH
45210: LD_INT 14
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: ST_TO_ADDR
45217: GO 45536
45219: LD_INT 42
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45253
45227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 21
45235: PUSH
45236: LD_INT 22
45238: PUSH
45239: LD_INT 23
45241: PUSH
45242: LD_INT 24
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45536
45253: LD_INT 43
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45287
45261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 21
45269: PUSH
45270: LD_INT 22
45272: PUSH
45273: LD_INT 23
45275: PUSH
45276: LD_INT 24
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
45285: GO 45536
45287: LD_INT 44
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45321
45295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 21
45303: PUSH
45304: LD_INT 22
45306: PUSH
45307: LD_INT 23
45309: PUSH
45310: LD_INT 24
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
45319: GO 45536
45321: LD_INT 45
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45329
45327: GO 45355
45329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_INT 21
45337: PUSH
45338: LD_INT 22
45340: PUSH
45341: LD_INT 23
45343: PUSH
45344: LD_INT 24
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
45353: GO 45536
45355: LD_INT 49
45357: DOUBLE
45358: EQUAL
45359: IFTRUE 45363
45361: GO 45389
45363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 21
45371: PUSH
45372: LD_INT 22
45374: PUSH
45375: LD_INT 23
45377: PUSH
45378: LD_INT 24
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
45387: GO 45536
45389: LD_INT 51
45391: DOUBLE
45392: EQUAL
45393: IFTRUE 45397
45395: GO 45423
45397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45398: LD_ADDR_VAR 0 3
45402: PUSH
45403: LD_INT 21
45405: PUSH
45406: LD_INT 22
45408: PUSH
45409: LD_INT 23
45411: PUSH
45412: LD_INT 24
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
45421: GO 45536
45423: LD_INT 52
45425: DOUBLE
45426: EQUAL
45427: IFTRUE 45431
45429: GO 45457
45431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45432: LD_ADDR_VAR 0 3
45436: PUSH
45437: LD_INT 21
45439: PUSH
45440: LD_INT 22
45442: PUSH
45443: LD_INT 23
45445: PUSH
45446: LD_INT 24
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: ST_TO_ADDR
45455: GO 45536
45457: LD_INT 53
45459: DOUBLE
45460: EQUAL
45461: IFTRUE 45465
45463: GO 45483
45465: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_INT 23
45473: PUSH
45474: LD_INT 24
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: ST_TO_ADDR
45481: GO 45536
45483: LD_INT 46
45485: DOUBLE
45486: EQUAL
45487: IFTRUE 45491
45489: GO 45509
45491: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45492: LD_ADDR_VAR 0 3
45496: PUSH
45497: LD_INT 23
45499: PUSH
45500: LD_INT 24
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: ST_TO_ADDR
45507: GO 45536
45509: LD_INT 47
45511: DOUBLE
45512: EQUAL
45513: IFTRUE 45517
45515: GO 45535
45517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45518: LD_ADDR_VAR 0 3
45522: PUSH
45523: LD_INT 23
45525: PUSH
45526: LD_INT 24
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: ST_TO_ADDR
45533: GO 45536
45535: POP
// result := ( chassis in result ) ;
45536: LD_ADDR_VAR 0 3
45540: PUSH
45541: LD_VAR 0 1
45545: PUSH
45546: LD_VAR 0 3
45550: IN
45551: ST_TO_ADDR
// end ;
45552: LD_VAR 0 3
45556: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45557: LD_INT 0
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
// result := array ;
45566: LD_ADDR_VAR 0 5
45570: PUSH
45571: LD_VAR 0 1
45575: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45576: LD_VAR 0 1
45580: NOT
45581: PUSH
45582: LD_VAR 0 2
45586: NOT
45587: OR
45588: PUSH
45589: LD_VAR 0 3
45593: NOT
45594: OR
45595: PUSH
45596: LD_VAR 0 2
45600: PUSH
45601: LD_VAR 0 1
45605: GREATER
45606: OR
45607: PUSH
45608: LD_VAR 0 3
45612: PUSH
45613: LD_VAR 0 1
45617: GREATER
45618: OR
45619: IFFALSE 45623
// exit ;
45621: GO 45919
// if direction then
45623: LD_VAR 0 4
45627: IFFALSE 45691
// begin d := 1 ;
45629: LD_ADDR_VAR 0 9
45633: PUSH
45634: LD_INT 1
45636: ST_TO_ADDR
// if i_from > i_to then
45637: LD_VAR 0 2
45641: PUSH
45642: LD_VAR 0 3
45646: GREATER
45647: IFFALSE 45673
// length := ( array - i_from ) + i_to else
45649: LD_ADDR_VAR 0 11
45653: PUSH
45654: LD_VAR 0 1
45658: PUSH
45659: LD_VAR 0 2
45663: MINUS
45664: PUSH
45665: LD_VAR 0 3
45669: PLUS
45670: ST_TO_ADDR
45671: GO 45689
// length := i_to - i_from ;
45673: LD_ADDR_VAR 0 11
45677: PUSH
45678: LD_VAR 0 3
45682: PUSH
45683: LD_VAR 0 2
45687: MINUS
45688: ST_TO_ADDR
// end else
45689: GO 45752
// begin d := - 1 ;
45691: LD_ADDR_VAR 0 9
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: ST_TO_ADDR
// if i_from > i_to then
45700: LD_VAR 0 2
45704: PUSH
45705: LD_VAR 0 3
45709: GREATER
45710: IFFALSE 45730
// length := i_from - i_to else
45712: LD_ADDR_VAR 0 11
45716: PUSH
45717: LD_VAR 0 2
45721: PUSH
45722: LD_VAR 0 3
45726: MINUS
45727: ST_TO_ADDR
45728: GO 45752
// length := ( array - i_to ) + i_from ;
45730: LD_ADDR_VAR 0 11
45734: PUSH
45735: LD_VAR 0 1
45739: PUSH
45740: LD_VAR 0 3
45744: MINUS
45745: PUSH
45746: LD_VAR 0 2
45750: PLUS
45751: ST_TO_ADDR
// end ; if not length then
45752: LD_VAR 0 11
45756: NOT
45757: IFFALSE 45761
// exit ;
45759: GO 45919
// tmp := array ;
45761: LD_ADDR_VAR 0 10
45765: PUSH
45766: LD_VAR 0 1
45770: ST_TO_ADDR
// for i = 1 to length do
45771: LD_ADDR_VAR 0 6
45775: PUSH
45776: DOUBLE
45777: LD_INT 1
45779: DEC
45780: ST_TO_ADDR
45781: LD_VAR 0 11
45785: PUSH
45786: FOR_TO
45787: IFFALSE 45907
// begin for j = 1 to array do
45789: LD_ADDR_VAR 0 7
45793: PUSH
45794: DOUBLE
45795: LD_INT 1
45797: DEC
45798: ST_TO_ADDR
45799: LD_VAR 0 1
45803: PUSH
45804: FOR_TO
45805: IFFALSE 45893
// begin k := j + d ;
45807: LD_ADDR_VAR 0 8
45811: PUSH
45812: LD_VAR 0 7
45816: PUSH
45817: LD_VAR 0 9
45821: PLUS
45822: ST_TO_ADDR
// if k > array then
45823: LD_VAR 0 8
45827: PUSH
45828: LD_VAR 0 1
45832: GREATER
45833: IFFALSE 45843
// k := 1 ;
45835: LD_ADDR_VAR 0 8
45839: PUSH
45840: LD_INT 1
45842: ST_TO_ADDR
// if not k then
45843: LD_VAR 0 8
45847: NOT
45848: IFFALSE 45860
// k := array ;
45850: LD_ADDR_VAR 0 8
45854: PUSH
45855: LD_VAR 0 1
45859: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45860: LD_ADDR_VAR 0 10
45864: PUSH
45865: LD_VAR 0 10
45869: PPUSH
45870: LD_VAR 0 8
45874: PPUSH
45875: LD_VAR 0 1
45879: PUSH
45880: LD_VAR 0 7
45884: ARRAY
45885: PPUSH
45886: CALL_OW 1
45890: ST_TO_ADDR
// end ;
45891: GO 45804
45893: POP
45894: POP
// array := tmp ;
45895: LD_ADDR_VAR 0 1
45899: PUSH
45900: LD_VAR 0 10
45904: ST_TO_ADDR
// end ;
45905: GO 45786
45907: POP
45908: POP
// result := array ;
45909: LD_ADDR_VAR 0 5
45913: PUSH
45914: LD_VAR 0 1
45918: ST_TO_ADDR
// end ;
45919: LD_VAR 0 5
45923: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
// result := 0 ;
45928: LD_ADDR_VAR 0 3
45932: PUSH
45933: LD_INT 0
45935: ST_TO_ADDR
// if not array or not value in array then
45936: LD_VAR 0 1
45940: NOT
45941: PUSH
45942: LD_VAR 0 2
45946: PUSH
45947: LD_VAR 0 1
45951: IN
45952: NOT
45953: OR
45954: IFFALSE 45958
// exit ;
45956: GO 46012
// for i = 1 to array do
45958: LD_ADDR_VAR 0 4
45962: PUSH
45963: DOUBLE
45964: LD_INT 1
45966: DEC
45967: ST_TO_ADDR
45968: LD_VAR 0 1
45972: PUSH
45973: FOR_TO
45974: IFFALSE 46010
// if value = array [ i ] then
45976: LD_VAR 0 2
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_VAR 0 4
45990: ARRAY
45991: EQUAL
45992: IFFALSE 46008
// begin result := i ;
45994: LD_ADDR_VAR 0 3
45998: PUSH
45999: LD_VAR 0 4
46003: ST_TO_ADDR
// exit ;
46004: POP
46005: POP
46006: GO 46012
// end ;
46008: GO 45973
46010: POP
46011: POP
// end ;
46012: LD_VAR 0 3
46016: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46017: LD_INT 0
46019: PPUSH
// vc_chassis := chassis ;
46020: LD_ADDR_OWVAR 37
46024: PUSH
46025: LD_VAR 0 1
46029: ST_TO_ADDR
// vc_engine := engine ;
46030: LD_ADDR_OWVAR 39
46034: PUSH
46035: LD_VAR 0 2
46039: ST_TO_ADDR
// vc_control := control ;
46040: LD_ADDR_OWVAR 38
46044: PUSH
46045: LD_VAR 0 3
46049: ST_TO_ADDR
// vc_weapon := weapon ;
46050: LD_ADDR_OWVAR 40
46054: PUSH
46055: LD_VAR 0 4
46059: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46060: LD_ADDR_OWVAR 41
46064: PUSH
46065: LD_VAR 0 5
46069: ST_TO_ADDR
// end ;
46070: LD_VAR 0 6
46074: RET
// export function WantPlant ( unit ) ; var task ; begin
46075: LD_INT 0
46077: PPUSH
46078: PPUSH
// result := false ;
46079: LD_ADDR_VAR 0 2
46083: PUSH
46084: LD_INT 0
46086: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46087: LD_ADDR_VAR 0 3
46091: PUSH
46092: LD_VAR 0 1
46096: PPUSH
46097: CALL_OW 437
46101: ST_TO_ADDR
// if task then
46102: LD_VAR 0 3
46106: IFFALSE 46134
// if task [ 1 ] [ 1 ] = p then
46108: LD_VAR 0 3
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PUSH
46117: LD_INT 1
46119: ARRAY
46120: PUSH
46121: LD_STRING p
46123: EQUAL
46124: IFFALSE 46134
// result := true ;
46126: LD_ADDR_VAR 0 2
46130: PUSH
46131: LD_INT 1
46133: ST_TO_ADDR
// end ;
46134: LD_VAR 0 2
46138: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46139: LD_INT 0
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
// if pos < 1 then
46145: LD_VAR 0 2
46149: PUSH
46150: LD_INT 1
46152: LESS
46153: IFFALSE 46157
// exit ;
46155: GO 46460
// if pos = 1 then
46157: LD_VAR 0 2
46161: PUSH
46162: LD_INT 1
46164: EQUAL
46165: IFFALSE 46198
// result := Replace ( arr , pos [ 1 ] , value ) else
46167: LD_ADDR_VAR 0 4
46171: PUSH
46172: LD_VAR 0 1
46176: PPUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_INT 1
46184: ARRAY
46185: PPUSH
46186: LD_VAR 0 3
46190: PPUSH
46191: CALL_OW 1
46195: ST_TO_ADDR
46196: GO 46460
// begin tmp := arr ;
46198: LD_ADDR_VAR 0 6
46202: PUSH
46203: LD_VAR 0 1
46207: ST_TO_ADDR
// s_arr := [ tmp ] ;
46208: LD_ADDR_VAR 0 7
46212: PUSH
46213: LD_VAR 0 6
46217: PUSH
46218: EMPTY
46219: LIST
46220: ST_TO_ADDR
// for i = 1 to pos - 1 do
46221: LD_ADDR_VAR 0 5
46225: PUSH
46226: DOUBLE
46227: LD_INT 1
46229: DEC
46230: ST_TO_ADDR
46231: LD_VAR 0 2
46235: PUSH
46236: LD_INT 1
46238: MINUS
46239: PUSH
46240: FOR_TO
46241: IFFALSE 46286
// begin tmp := tmp [ pos [ i ] ] ;
46243: LD_ADDR_VAR 0 6
46247: PUSH
46248: LD_VAR 0 6
46252: PUSH
46253: LD_VAR 0 2
46257: PUSH
46258: LD_VAR 0 5
46262: ARRAY
46263: ARRAY
46264: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46265: LD_ADDR_VAR 0 7
46269: PUSH
46270: LD_VAR 0 7
46274: PUSH
46275: LD_VAR 0 6
46279: PUSH
46280: EMPTY
46281: LIST
46282: ADD
46283: ST_TO_ADDR
// end ;
46284: GO 46240
46286: POP
46287: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46288: LD_ADDR_VAR 0 6
46292: PUSH
46293: LD_VAR 0 6
46297: PPUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_VAR 0 2
46307: ARRAY
46308: PPUSH
46309: LD_VAR 0 3
46313: PPUSH
46314: CALL_OW 1
46318: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46319: LD_ADDR_VAR 0 7
46323: PUSH
46324: LD_VAR 0 7
46328: PPUSH
46329: LD_VAR 0 7
46333: PPUSH
46334: LD_VAR 0 6
46338: PPUSH
46339: CALL_OW 1
46343: ST_TO_ADDR
// for i = s_arr downto 2 do
46344: LD_ADDR_VAR 0 5
46348: PUSH
46349: DOUBLE
46350: LD_VAR 0 7
46354: INC
46355: ST_TO_ADDR
46356: LD_INT 2
46358: PUSH
46359: FOR_DOWNTO
46360: IFFALSE 46444
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46362: LD_ADDR_VAR 0 6
46366: PUSH
46367: LD_VAR 0 7
46371: PUSH
46372: LD_VAR 0 5
46376: PUSH
46377: LD_INT 1
46379: MINUS
46380: ARRAY
46381: PPUSH
46382: LD_VAR 0 2
46386: PUSH
46387: LD_VAR 0 5
46391: PUSH
46392: LD_INT 1
46394: MINUS
46395: ARRAY
46396: PPUSH
46397: LD_VAR 0 7
46401: PUSH
46402: LD_VAR 0 5
46406: ARRAY
46407: PPUSH
46408: CALL_OW 1
46412: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46413: LD_ADDR_VAR 0 7
46417: PUSH
46418: LD_VAR 0 7
46422: PPUSH
46423: LD_VAR 0 5
46427: PUSH
46428: LD_INT 1
46430: MINUS
46431: PPUSH
46432: LD_VAR 0 6
46436: PPUSH
46437: CALL_OW 1
46441: ST_TO_ADDR
// end ;
46442: GO 46359
46444: POP
46445: POP
// result := s_arr [ 1 ] ;
46446: LD_ADDR_VAR 0 4
46450: PUSH
46451: LD_VAR 0 7
46455: PUSH
46456: LD_INT 1
46458: ARRAY
46459: ST_TO_ADDR
// end ; end ;
46460: LD_VAR 0 4
46464: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46465: LD_INT 0
46467: PPUSH
46468: PPUSH
// if not list then
46469: LD_VAR 0 1
46473: NOT
46474: IFFALSE 46478
// exit ;
46476: GO 46569
// i := list [ pos1 ] ;
46478: LD_ADDR_VAR 0 5
46482: PUSH
46483: LD_VAR 0 1
46487: PUSH
46488: LD_VAR 0 2
46492: ARRAY
46493: ST_TO_ADDR
// if not i then
46494: LD_VAR 0 5
46498: NOT
46499: IFFALSE 46503
// exit ;
46501: GO 46569
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46503: LD_ADDR_VAR 0 1
46507: PUSH
46508: LD_VAR 0 1
46512: PPUSH
46513: LD_VAR 0 2
46517: PPUSH
46518: LD_VAR 0 1
46522: PUSH
46523: LD_VAR 0 3
46527: ARRAY
46528: PPUSH
46529: CALL_OW 1
46533: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46534: LD_ADDR_VAR 0 1
46538: PUSH
46539: LD_VAR 0 1
46543: PPUSH
46544: LD_VAR 0 3
46548: PPUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL_OW 1
46558: ST_TO_ADDR
// result := list ;
46559: LD_ADDR_VAR 0 4
46563: PUSH
46564: LD_VAR 0 1
46568: ST_TO_ADDR
// end ;
46569: LD_VAR 0 4
46573: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46574: LD_INT 0
46576: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46577: LD_ADDR_VAR 0 5
46581: PUSH
46582: LD_VAR 0 1
46586: PPUSH
46587: CALL_OW 250
46591: PPUSH
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 251
46601: PPUSH
46602: LD_VAR 0 2
46606: PPUSH
46607: LD_VAR 0 3
46611: PPUSH
46612: LD_VAR 0 4
46616: PPUSH
46617: CALL 46995 0 5
46621: ST_TO_ADDR
// end ;
46622: LD_VAR 0 5
46626: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46627: LD_INT 0
46629: PPUSH
46630: PPUSH
46631: PPUSH
46632: PPUSH
// if not list or not unit then
46633: LD_VAR 0 2
46637: NOT
46638: PUSH
46639: LD_VAR 0 1
46643: NOT
46644: OR
46645: IFFALSE 46649
// exit ;
46647: GO 46990
// result := [ ] ;
46649: LD_ADDR_VAR 0 5
46653: PUSH
46654: EMPTY
46655: ST_TO_ADDR
// for i in list do
46656: LD_ADDR_VAR 0 6
46660: PUSH
46661: LD_VAR 0 2
46665: PUSH
46666: FOR_IN
46667: IFFALSE 46885
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46669: LD_ADDR_VAR 0 8
46673: PUSH
46674: LD_VAR 0 1
46678: PPUSH
46679: LD_VAR 0 6
46683: PUSH
46684: LD_INT 1
46686: ARRAY
46687: PPUSH
46688: LD_VAR 0 6
46692: PUSH
46693: LD_INT 2
46695: ARRAY
46696: PPUSH
46697: CALL_OW 297
46701: ST_TO_ADDR
// if not Count ( result ) then
46702: LD_VAR 0 5
46706: PPUSH
46707: CALL 43279 0 1
46711: NOT
46712: IFFALSE 46745
// begin result := Join ( result , [ i , tmp ] ) ;
46714: LD_ADDR_VAR 0 5
46718: PUSH
46719: LD_VAR 0 5
46723: PPUSH
46724: LD_VAR 0 6
46728: PUSH
46729: LD_VAR 0 8
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PPUSH
46738: CALL 78868 0 2
46742: ST_TO_ADDR
// continue ;
46743: GO 46666
// end ; if result [ result ] [ 2 ] <= tmp then
46745: LD_VAR 0 5
46749: PUSH
46750: LD_VAR 0 5
46754: ARRAY
46755: PUSH
46756: LD_INT 2
46758: ARRAY
46759: PUSH
46760: LD_VAR 0 8
46764: LESSEQUAL
46765: IFFALSE 46798
// result := Join ( result , [ i , tmp ] ) else
46767: LD_ADDR_VAR 0 5
46771: PUSH
46772: LD_VAR 0 5
46776: PPUSH
46777: LD_VAR 0 6
46781: PUSH
46782: LD_VAR 0 8
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PPUSH
46791: CALL 78868 0 2
46795: ST_TO_ADDR
46796: GO 46883
// begin for j := 1 to Count ( result ) do
46798: LD_ADDR_VAR 0 7
46802: PUSH
46803: DOUBLE
46804: LD_INT 1
46806: DEC
46807: ST_TO_ADDR
46808: LD_VAR 0 5
46812: PPUSH
46813: CALL 43279 0 1
46817: PUSH
46818: FOR_TO
46819: IFFALSE 46881
// begin if tmp < result [ j ] [ 2 ] then
46821: LD_VAR 0 8
46825: PUSH
46826: LD_VAR 0 5
46830: PUSH
46831: LD_VAR 0 7
46835: ARRAY
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: LESS
46841: IFFALSE 46879
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46843: LD_ADDR_VAR 0 5
46847: PUSH
46848: LD_VAR 0 5
46852: PPUSH
46853: LD_VAR 0 7
46857: PPUSH
46858: LD_VAR 0 6
46862: PUSH
46863: LD_VAR 0 8
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PPUSH
46872: CALL_OW 2
46876: ST_TO_ADDR
// break ;
46877: GO 46881
// end ; end ;
46879: GO 46818
46881: POP
46882: POP
// end ; end ;
46883: GO 46666
46885: POP
46886: POP
// if result and not asc then
46887: LD_VAR 0 5
46891: PUSH
46892: LD_VAR 0 3
46896: NOT
46897: AND
46898: IFFALSE 46915
// result := ReverseArray ( result ) ;
46900: LD_ADDR_VAR 0 5
46904: PUSH
46905: LD_VAR 0 5
46909: PPUSH
46910: CALL 74155 0 1
46914: ST_TO_ADDR
// tmp := [ ] ;
46915: LD_ADDR_VAR 0 8
46919: PUSH
46920: EMPTY
46921: ST_TO_ADDR
// if mode then
46922: LD_VAR 0 4
46926: IFFALSE 46990
// begin for i := 1 to result do
46928: LD_ADDR_VAR 0 6
46932: PUSH
46933: DOUBLE
46934: LD_INT 1
46936: DEC
46937: ST_TO_ADDR
46938: LD_VAR 0 5
46942: PUSH
46943: FOR_TO
46944: IFFALSE 46978
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46946: LD_ADDR_VAR 0 8
46950: PUSH
46951: LD_VAR 0 8
46955: PPUSH
46956: LD_VAR 0 5
46960: PUSH
46961: LD_VAR 0 6
46965: ARRAY
46966: PUSH
46967: LD_INT 1
46969: ARRAY
46970: PPUSH
46971: CALL 78868 0 2
46975: ST_TO_ADDR
46976: GO 46943
46978: POP
46979: POP
// result := tmp ;
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_VAR 0 8
46989: ST_TO_ADDR
// end ; end ;
46990: LD_VAR 0 5
46994: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46995: LD_INT 0
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
// if not list then
47001: LD_VAR 0 3
47005: NOT
47006: IFFALSE 47010
// exit ;
47008: GO 47398
// result := [ ] ;
47010: LD_ADDR_VAR 0 6
47014: PUSH
47015: EMPTY
47016: ST_TO_ADDR
// for i in list do
47017: LD_ADDR_VAR 0 7
47021: PUSH
47022: LD_VAR 0 3
47026: PUSH
47027: FOR_IN
47028: IFFALSE 47230
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_VAR 0 7
47039: PPUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: CALL_OW 297
47054: ST_TO_ADDR
// if not result then
47055: LD_VAR 0 6
47059: NOT
47060: IFFALSE 47086
// result := [ [ i , tmp ] ] else
47062: LD_ADDR_VAR 0 6
47066: PUSH
47067: LD_VAR 0 7
47071: PUSH
47072: LD_VAR 0 9
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: ST_TO_ADDR
47084: GO 47228
// begin if result [ result ] [ 2 ] < tmp then
47086: LD_VAR 0 6
47090: PUSH
47091: LD_VAR 0 6
47095: ARRAY
47096: PUSH
47097: LD_INT 2
47099: ARRAY
47100: PUSH
47101: LD_VAR 0 9
47105: LESS
47106: IFFALSE 47148
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47108: LD_ADDR_VAR 0 6
47112: PUSH
47113: LD_VAR 0 6
47117: PPUSH
47118: LD_VAR 0 6
47122: PUSH
47123: LD_INT 1
47125: PLUS
47126: PPUSH
47127: LD_VAR 0 7
47131: PUSH
47132: LD_VAR 0 9
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PPUSH
47141: CALL_OW 2
47145: ST_TO_ADDR
47146: GO 47228
// for j = 1 to result do
47148: LD_ADDR_VAR 0 8
47152: PUSH
47153: DOUBLE
47154: LD_INT 1
47156: DEC
47157: ST_TO_ADDR
47158: LD_VAR 0 6
47162: PUSH
47163: FOR_TO
47164: IFFALSE 47226
// begin if tmp < result [ j ] [ 2 ] then
47166: LD_VAR 0 9
47170: PUSH
47171: LD_VAR 0 6
47175: PUSH
47176: LD_VAR 0 8
47180: ARRAY
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: LESS
47186: IFFALSE 47224
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47188: LD_ADDR_VAR 0 6
47192: PUSH
47193: LD_VAR 0 6
47197: PPUSH
47198: LD_VAR 0 8
47202: PPUSH
47203: LD_VAR 0 7
47207: PUSH
47208: LD_VAR 0 9
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PPUSH
47217: CALL_OW 2
47221: ST_TO_ADDR
// break ;
47222: GO 47226
// end ; end ;
47224: GO 47163
47226: POP
47227: POP
// end ; end ;
47228: GO 47027
47230: POP
47231: POP
// if result and not asc then
47232: LD_VAR 0 6
47236: PUSH
47237: LD_VAR 0 4
47241: NOT
47242: AND
47243: IFFALSE 47318
// begin tmp := result ;
47245: LD_ADDR_VAR 0 9
47249: PUSH
47250: LD_VAR 0 6
47254: ST_TO_ADDR
// for i = tmp downto 1 do
47255: LD_ADDR_VAR 0 7
47259: PUSH
47260: DOUBLE
47261: LD_VAR 0 9
47265: INC
47266: ST_TO_ADDR
47267: LD_INT 1
47269: PUSH
47270: FOR_DOWNTO
47271: IFFALSE 47316
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47273: LD_ADDR_VAR 0 6
47277: PUSH
47278: LD_VAR 0 6
47282: PPUSH
47283: LD_VAR 0 9
47287: PUSH
47288: LD_VAR 0 7
47292: MINUS
47293: PUSH
47294: LD_INT 1
47296: PLUS
47297: PPUSH
47298: LD_VAR 0 9
47302: PUSH
47303: LD_VAR 0 7
47307: ARRAY
47308: PPUSH
47309: CALL_OW 1
47313: ST_TO_ADDR
47314: GO 47270
47316: POP
47317: POP
// end ; tmp := [ ] ;
47318: LD_ADDR_VAR 0 9
47322: PUSH
47323: EMPTY
47324: ST_TO_ADDR
// if mode then
47325: LD_VAR 0 5
47329: IFFALSE 47398
// begin for i = 1 to result do
47331: LD_ADDR_VAR 0 7
47335: PUSH
47336: DOUBLE
47337: LD_INT 1
47339: DEC
47340: ST_TO_ADDR
47341: LD_VAR 0 6
47345: PUSH
47346: FOR_TO
47347: IFFALSE 47386
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47349: LD_ADDR_VAR 0 9
47353: PUSH
47354: LD_VAR 0 9
47358: PPUSH
47359: LD_VAR 0 7
47363: PPUSH
47364: LD_VAR 0 6
47368: PUSH
47369: LD_VAR 0 7
47373: ARRAY
47374: PUSH
47375: LD_INT 1
47377: ARRAY
47378: PPUSH
47379: CALL_OW 1
47383: ST_TO_ADDR
47384: GO 47346
47386: POP
47387: POP
// result := tmp ;
47388: LD_ADDR_VAR 0 6
47392: PUSH
47393: LD_VAR 0 9
47397: ST_TO_ADDR
// end ; end ;
47398: LD_VAR 0 6
47402: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47403: LD_INT 0
47405: PPUSH
47406: PPUSH
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47411: LD_ADDR_VAR 0 5
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// if not x or not y then
47433: LD_VAR 0 2
47437: NOT
47438: PUSH
47439: LD_VAR 0 3
47443: NOT
47444: OR
47445: IFFALSE 47449
// exit ;
47447: GO 49099
// if not range then
47449: LD_VAR 0 4
47453: NOT
47454: IFFALSE 47464
// range := 10 ;
47456: LD_ADDR_VAR 0 4
47460: PUSH
47461: LD_INT 10
47463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47464: LD_ADDR_VAR 0 8
47468: PUSH
47469: LD_INT 81
47471: PUSH
47472: LD_VAR 0 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 92
47483: PUSH
47484: LD_VAR 0 2
47488: PUSH
47489: LD_VAR 0 3
47493: PUSH
47494: LD_VAR 0 4
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 21
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: PPUSH
47527: CALL_OW 69
47531: ST_TO_ADDR
// if not tmp then
47532: LD_VAR 0 8
47536: NOT
47537: IFFALSE 47541
// exit ;
47539: GO 49099
// for i in tmp do
47541: LD_ADDR_VAR 0 6
47545: PUSH
47546: LD_VAR 0 8
47550: PUSH
47551: FOR_IN
47552: IFFALSE 49074
// begin points := [ 0 , 0 , 0 ] ;
47554: LD_ADDR_VAR 0 9
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// bpoints := 1 ;
47573: LD_ADDR_VAR 0 10
47577: PUSH
47578: LD_INT 1
47580: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47581: LD_VAR 0 6
47585: PPUSH
47586: CALL_OW 247
47590: PUSH
47591: LD_INT 1
47593: DOUBLE
47594: EQUAL
47595: IFTRUE 47599
47597: GO 48177
47599: POP
// begin if GetClass ( i ) = 1 then
47600: LD_VAR 0 6
47604: PPUSH
47605: CALL_OW 257
47609: PUSH
47610: LD_INT 1
47612: EQUAL
47613: IFFALSE 47634
// points := [ 10 , 5 , 3 ] ;
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_INT 10
47622: PUSH
47623: LD_INT 5
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47634: LD_VAR 0 6
47638: PPUSH
47639: CALL_OW 257
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 4
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: IN
47658: IFFALSE 47679
// points := [ 3 , 2 , 1 ] ;
47660: LD_ADDR_VAR 0 9
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47679: LD_VAR 0 6
47683: PPUSH
47684: CALL_OW 257
47688: PUSH
47689: LD_INT 5
47691: EQUAL
47692: IFFALSE 47713
// points := [ 130 , 5 , 2 ] ;
47694: LD_ADDR_VAR 0 9
47698: PUSH
47699: LD_INT 130
47701: PUSH
47702: LD_INT 5
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47713: LD_VAR 0 6
47717: PPUSH
47718: CALL_OW 257
47722: PUSH
47723: LD_INT 8
47725: EQUAL
47726: IFFALSE 47747
// points := [ 35 , 35 , 30 ] ;
47728: LD_ADDR_VAR 0 9
47732: PUSH
47733: LD_INT 35
47735: PUSH
47736: LD_INT 35
47738: PUSH
47739: LD_INT 30
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47747: LD_VAR 0 6
47751: PPUSH
47752: CALL_OW 257
47756: PUSH
47757: LD_INT 9
47759: EQUAL
47760: IFFALSE 47781
// points := [ 20 , 55 , 40 ] ;
47762: LD_ADDR_VAR 0 9
47766: PUSH
47767: LD_INT 20
47769: PUSH
47770: LD_INT 55
47772: PUSH
47773: LD_INT 40
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47781: LD_VAR 0 6
47785: PPUSH
47786: CALL_OW 257
47790: PUSH
47791: LD_INT 12
47793: PUSH
47794: LD_INT 16
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: IN
47801: IFFALSE 47822
// points := [ 5 , 3 , 2 ] ;
47803: LD_ADDR_VAR 0 9
47807: PUSH
47808: LD_INT 5
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47822: LD_VAR 0 6
47826: PPUSH
47827: CALL_OW 257
47831: PUSH
47832: LD_INT 17
47834: EQUAL
47835: IFFALSE 47856
// points := [ 100 , 50 , 75 ] ;
47837: LD_ADDR_VAR 0 9
47841: PUSH
47842: LD_INT 100
47844: PUSH
47845: LD_INT 50
47847: PUSH
47848: LD_INT 75
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47856: LD_VAR 0 6
47860: PPUSH
47861: CALL_OW 257
47865: PUSH
47866: LD_INT 15
47868: EQUAL
47869: IFFALSE 47890
// points := [ 10 , 5 , 3 ] ;
47871: LD_ADDR_VAR 0 9
47875: PUSH
47876: LD_INT 10
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47890: LD_VAR 0 6
47894: PPUSH
47895: CALL_OW 257
47899: PUSH
47900: LD_INT 14
47902: EQUAL
47903: IFFALSE 47924
// points := [ 10 , 0 , 0 ] ;
47905: LD_ADDR_VAR 0 9
47909: PUSH
47910: LD_INT 10
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47924: LD_VAR 0 6
47928: PPUSH
47929: CALL_OW 257
47933: PUSH
47934: LD_INT 11
47936: EQUAL
47937: IFFALSE 47958
// points := [ 30 , 10 , 5 ] ;
47939: LD_ADDR_VAR 0 9
47943: PUSH
47944: LD_INT 30
47946: PUSH
47947: LD_INT 10
47949: PUSH
47950: LD_INT 5
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47958: LD_VAR 0 1
47962: PPUSH
47963: LD_INT 5
47965: PPUSH
47966: CALL_OW 321
47970: PUSH
47971: LD_INT 2
47973: EQUAL
47974: IFFALSE 47991
// bpoints := bpoints * 1.8 ;
47976: LD_ADDR_VAR 0 10
47980: PUSH
47981: LD_VAR 0 10
47985: PUSH
47986: LD_REAL  1.80000000000000E+0000
47989: MUL
47990: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47991: LD_VAR 0 6
47995: PPUSH
47996: CALL_OW 257
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: LD_INT 4
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: IN
48019: PUSH
48020: LD_VAR 0 1
48024: PPUSH
48025: LD_INT 51
48027: PPUSH
48028: CALL_OW 321
48032: PUSH
48033: LD_INT 2
48035: EQUAL
48036: AND
48037: IFFALSE 48054
// bpoints := bpoints * 1.2 ;
48039: LD_ADDR_VAR 0 10
48043: PUSH
48044: LD_VAR 0 10
48048: PUSH
48049: LD_REAL  1.20000000000000E+0000
48052: MUL
48053: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48054: LD_VAR 0 6
48058: PPUSH
48059: CALL_OW 257
48063: PUSH
48064: LD_INT 5
48066: PUSH
48067: LD_INT 7
48069: PUSH
48070: LD_INT 9
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: IN
48078: PUSH
48079: LD_VAR 0 1
48083: PPUSH
48084: LD_INT 52
48086: PPUSH
48087: CALL_OW 321
48091: PUSH
48092: LD_INT 2
48094: EQUAL
48095: AND
48096: IFFALSE 48113
// bpoints := bpoints * 1.5 ;
48098: LD_ADDR_VAR 0 10
48102: PUSH
48103: LD_VAR 0 10
48107: PUSH
48108: LD_REAL  1.50000000000000E+0000
48111: MUL
48112: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48113: LD_VAR 0 1
48117: PPUSH
48118: LD_INT 66
48120: PPUSH
48121: CALL_OW 321
48125: PUSH
48126: LD_INT 2
48128: EQUAL
48129: IFFALSE 48146
// bpoints := bpoints * 1.1 ;
48131: LD_ADDR_VAR 0 10
48135: PUSH
48136: LD_VAR 0 10
48140: PUSH
48141: LD_REAL  1.10000000000000E+0000
48144: MUL
48145: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48146: LD_ADDR_VAR 0 10
48150: PUSH
48151: LD_VAR 0 10
48155: PUSH
48156: LD_VAR 0 6
48160: PPUSH
48161: LD_INT 1
48163: PPUSH
48164: CALL_OW 259
48168: PUSH
48169: LD_REAL  1.15000000000000E+0000
48172: MUL
48173: MUL
48174: ST_TO_ADDR
// end ; unit_vehicle :
48175: GO 49003
48177: LD_INT 2
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48185
48183: GO 48991
48185: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48186: LD_VAR 0 6
48190: PPUSH
48191: CALL_OW 264
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 42
48201: PUSH
48202: LD_INT 24
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: IN
48210: IFFALSE 48231
// points := [ 25 , 5 , 3 ] ;
48212: LD_ADDR_VAR 0 9
48216: PUSH
48217: LD_INT 25
48219: PUSH
48220: LD_INT 5
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48231: LD_VAR 0 6
48235: PPUSH
48236: CALL_OW 264
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: LD_INT 43
48246: PUSH
48247: LD_INT 25
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: IN
48255: IFFALSE 48276
// points := [ 40 , 15 , 5 ] ;
48257: LD_ADDR_VAR 0 9
48261: PUSH
48262: LD_INT 40
48264: PUSH
48265: LD_INT 15
48267: PUSH
48268: LD_INT 5
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48276: LD_VAR 0 6
48280: PPUSH
48281: CALL_OW 264
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 23
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: IN
48296: IFFALSE 48317
// points := [ 7 , 25 , 8 ] ;
48298: LD_ADDR_VAR 0 9
48302: PUSH
48303: LD_INT 7
48305: PUSH
48306: LD_INT 25
48308: PUSH
48309: LD_INT 8
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48317: LD_VAR 0 6
48321: PPUSH
48322: CALL_OW 264
48326: PUSH
48327: LD_INT 5
48329: PUSH
48330: LD_INT 27
48332: PUSH
48333: LD_INT 44
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: IN
48341: IFFALSE 48362
// points := [ 14 , 50 , 16 ] ;
48343: LD_ADDR_VAR 0 9
48347: PUSH
48348: LD_INT 14
48350: PUSH
48351: LD_INT 50
48353: PUSH
48354: LD_INT 16
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48362: LD_VAR 0 6
48366: PPUSH
48367: CALL_OW 264
48371: PUSH
48372: LD_INT 6
48374: PUSH
48375: LD_INT 46
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: IN
48382: IFFALSE 48403
// points := [ 32 , 120 , 70 ] ;
48384: LD_ADDR_VAR 0 9
48388: PUSH
48389: LD_INT 32
48391: PUSH
48392: LD_INT 120
48394: PUSH
48395: LD_INT 70
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48403: LD_VAR 0 6
48407: PPUSH
48408: CALL_OW 264
48412: PUSH
48413: LD_INT 7
48415: PUSH
48416: LD_INT 28
48418: PUSH
48419: LD_INT 45
48421: PUSH
48422: LD_INT 92
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: IN
48431: IFFALSE 48452
// points := [ 35 , 20 , 45 ] ;
48433: LD_ADDR_VAR 0 9
48437: PUSH
48438: LD_INT 35
48440: PUSH
48441: LD_INT 20
48443: PUSH
48444: LD_INT 45
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48452: LD_VAR 0 6
48456: PPUSH
48457: CALL_OW 264
48461: PUSH
48462: LD_INT 47
48464: PUSH
48465: EMPTY
48466: LIST
48467: IN
48468: IFFALSE 48489
// points := [ 67 , 45 , 75 ] ;
48470: LD_ADDR_VAR 0 9
48474: PUSH
48475: LD_INT 67
48477: PUSH
48478: LD_INT 45
48480: PUSH
48481: LD_INT 75
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48489: LD_VAR 0 6
48493: PPUSH
48494: CALL_OW 264
48498: PUSH
48499: LD_INT 26
48501: PUSH
48502: EMPTY
48503: LIST
48504: IN
48505: IFFALSE 48526
// points := [ 120 , 30 , 80 ] ;
48507: LD_ADDR_VAR 0 9
48511: PUSH
48512: LD_INT 120
48514: PUSH
48515: LD_INT 30
48517: PUSH
48518: LD_INT 80
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48526: LD_VAR 0 6
48530: PPUSH
48531: CALL_OW 264
48535: PUSH
48536: LD_INT 22
48538: PUSH
48539: EMPTY
48540: LIST
48541: IN
48542: IFFALSE 48563
// points := [ 40 , 1 , 1 ] ;
48544: LD_ADDR_VAR 0 9
48548: PUSH
48549: LD_INT 40
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48563: LD_VAR 0 6
48567: PPUSH
48568: CALL_OW 264
48572: PUSH
48573: LD_INT 29
48575: PUSH
48576: EMPTY
48577: LIST
48578: IN
48579: IFFALSE 48600
// points := [ 70 , 200 , 400 ] ;
48581: LD_ADDR_VAR 0 9
48585: PUSH
48586: LD_INT 70
48588: PUSH
48589: LD_INT 200
48591: PUSH
48592: LD_INT 400
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48600: LD_VAR 0 6
48604: PPUSH
48605: CALL_OW 264
48609: PUSH
48610: LD_INT 14
48612: PUSH
48613: LD_INT 53
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: IN
48620: IFFALSE 48641
// points := [ 40 , 10 , 20 ] ;
48622: LD_ADDR_VAR 0 9
48626: PUSH
48627: LD_INT 40
48629: PUSH
48630: LD_INT 10
48632: PUSH
48633: LD_INT 20
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48641: LD_VAR 0 6
48645: PPUSH
48646: CALL_OW 264
48650: PUSH
48651: LD_INT 9
48653: PUSH
48654: EMPTY
48655: LIST
48656: IN
48657: IFFALSE 48678
// points := [ 5 , 70 , 20 ] ;
48659: LD_ADDR_VAR 0 9
48663: PUSH
48664: LD_INT 5
48666: PUSH
48667: LD_INT 70
48669: PUSH
48670: LD_INT 20
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48678: LD_VAR 0 6
48682: PPUSH
48683: CALL_OW 264
48687: PUSH
48688: LD_INT 10
48690: PUSH
48691: EMPTY
48692: LIST
48693: IN
48694: IFFALSE 48715
// points := [ 35 , 110 , 70 ] ;
48696: LD_ADDR_VAR 0 9
48700: PUSH
48701: LD_INT 35
48703: PUSH
48704: LD_INT 110
48706: PUSH
48707: LD_INT 70
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48715: LD_VAR 0 6
48719: PPUSH
48720: CALL_OW 265
48724: PUSH
48725: LD_INT 25
48727: EQUAL
48728: IFFALSE 48749
// points := [ 80 , 65 , 100 ] ;
48730: LD_ADDR_VAR 0 9
48734: PUSH
48735: LD_INT 80
48737: PUSH
48738: LD_INT 65
48740: PUSH
48741: LD_INT 100
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48749: LD_VAR 0 6
48753: PPUSH
48754: CALL_OW 263
48758: PUSH
48759: LD_INT 1
48761: EQUAL
48762: IFFALSE 48797
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48764: LD_ADDR_VAR 0 10
48768: PUSH
48769: LD_VAR 0 10
48773: PUSH
48774: LD_VAR 0 6
48778: PPUSH
48779: CALL_OW 311
48783: PPUSH
48784: LD_INT 3
48786: PPUSH
48787: CALL_OW 259
48791: PUSH
48792: LD_INT 4
48794: MUL
48795: MUL
48796: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48797: LD_VAR 0 6
48801: PPUSH
48802: CALL_OW 263
48806: PUSH
48807: LD_INT 2
48809: EQUAL
48810: IFFALSE 48861
// begin j := IsControledBy ( i ) ;
48812: LD_ADDR_VAR 0 7
48816: PUSH
48817: LD_VAR 0 6
48821: PPUSH
48822: CALL_OW 312
48826: ST_TO_ADDR
// if j then
48827: LD_VAR 0 7
48831: IFFALSE 48861
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48833: LD_ADDR_VAR 0 10
48837: PUSH
48838: LD_VAR 0 10
48842: PUSH
48843: LD_VAR 0 7
48847: PPUSH
48848: LD_INT 3
48850: PPUSH
48851: CALL_OW 259
48855: PUSH
48856: LD_INT 3
48858: MUL
48859: MUL
48860: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48861: LD_VAR 0 6
48865: PPUSH
48866: CALL_OW 264
48870: PUSH
48871: LD_INT 5
48873: PUSH
48874: LD_INT 6
48876: PUSH
48877: LD_INT 46
48879: PUSH
48880: LD_INT 44
48882: PUSH
48883: LD_INT 47
48885: PUSH
48886: LD_INT 45
48888: PUSH
48889: LD_INT 28
48891: PUSH
48892: LD_INT 7
48894: PUSH
48895: LD_INT 27
48897: PUSH
48898: LD_INT 29
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: IN
48913: PUSH
48914: LD_VAR 0 1
48918: PPUSH
48919: LD_INT 52
48921: PPUSH
48922: CALL_OW 321
48926: PUSH
48927: LD_INT 2
48929: EQUAL
48930: AND
48931: IFFALSE 48948
// bpoints := bpoints * 1.2 ;
48933: LD_ADDR_VAR 0 10
48937: PUSH
48938: LD_VAR 0 10
48942: PUSH
48943: LD_REAL  1.20000000000000E+0000
48946: MUL
48947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48948: LD_VAR 0 6
48952: PPUSH
48953: CALL_OW 264
48957: PUSH
48958: LD_INT 6
48960: PUSH
48961: LD_INT 46
48963: PUSH
48964: LD_INT 47
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: IN
48972: IFFALSE 48989
// bpoints := bpoints * 1.2 ;
48974: LD_ADDR_VAR 0 10
48978: PUSH
48979: LD_VAR 0 10
48983: PUSH
48984: LD_REAL  1.20000000000000E+0000
48987: MUL
48988: ST_TO_ADDR
// end ; unit_building :
48989: GO 49003
48991: LD_INT 3
48993: DOUBLE
48994: EQUAL
48995: IFTRUE 48999
48997: GO 49002
48999: POP
// ; end ;
49000: GO 49003
49002: POP
// for j = 1 to 3 do
49003: LD_ADDR_VAR 0 7
49007: PUSH
49008: DOUBLE
49009: LD_INT 1
49011: DEC
49012: ST_TO_ADDR
49013: LD_INT 3
49015: PUSH
49016: FOR_TO
49017: IFFALSE 49070
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49019: LD_ADDR_VAR 0 5
49023: PUSH
49024: LD_VAR 0 5
49028: PPUSH
49029: LD_VAR 0 7
49033: PPUSH
49034: LD_VAR 0 5
49038: PUSH
49039: LD_VAR 0 7
49043: ARRAY
49044: PUSH
49045: LD_VAR 0 9
49049: PUSH
49050: LD_VAR 0 7
49054: ARRAY
49055: PUSH
49056: LD_VAR 0 10
49060: MUL
49061: PLUS
49062: PPUSH
49063: CALL_OW 1
49067: ST_TO_ADDR
49068: GO 49016
49070: POP
49071: POP
// end ;
49072: GO 47551
49074: POP
49075: POP
// result := Replace ( result , 4 , tmp ) ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 5
49085: PPUSH
49086: LD_INT 4
49088: PPUSH
49089: LD_VAR 0 8
49093: PPUSH
49094: CALL_OW 1
49098: ST_TO_ADDR
// end ;
49099: LD_VAR 0 5
49103: RET
// export function DangerAtRange ( unit , range ) ; begin
49104: LD_INT 0
49106: PPUSH
// if not unit then
49107: LD_VAR 0 1
49111: NOT
49112: IFFALSE 49116
// exit ;
49114: GO 49161
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49116: LD_ADDR_VAR 0 3
49120: PUSH
49121: LD_VAR 0 1
49125: PPUSH
49126: CALL_OW 255
49130: PPUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 250
49140: PPUSH
49141: LD_VAR 0 1
49145: PPUSH
49146: CALL_OW 251
49150: PPUSH
49151: LD_VAR 0 2
49155: PPUSH
49156: CALL 47403 0 4
49160: ST_TO_ADDR
// end ;
49161: LD_VAR 0 3
49165: RET
// export function DangerInArea ( side , area ) ; begin
49166: LD_INT 0
49168: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49169: LD_ADDR_VAR 0 3
49173: PUSH
49174: LD_VAR 0 2
49178: PPUSH
49179: LD_INT 81
49181: PUSH
49182: LD_VAR 0 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PPUSH
49191: CALL_OW 70
49195: ST_TO_ADDR
// end ;
49196: LD_VAR 0 3
49200: RET
// export function IsExtension ( b ) ; begin
49201: LD_INT 0
49203: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49204: LD_ADDR_VAR 0 2
49208: PUSH
49209: LD_VAR 0 1
49213: PUSH
49214: LD_INT 23
49216: PUSH
49217: LD_INT 20
49219: PUSH
49220: LD_INT 22
49222: PUSH
49223: LD_INT 17
49225: PUSH
49226: LD_INT 24
49228: PUSH
49229: LD_INT 21
49231: PUSH
49232: LD_INT 19
49234: PUSH
49235: LD_INT 16
49237: PUSH
49238: LD_INT 25
49240: PUSH
49241: LD_INT 18
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: IN
49256: ST_TO_ADDR
// end ;
49257: LD_VAR 0 2
49261: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49262: LD_INT 0
49264: PPUSH
49265: PPUSH
49266: PPUSH
// result := [ ] ;
49267: LD_ADDR_VAR 0 4
49271: PUSH
49272: EMPTY
49273: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49274: LD_ADDR_VAR 0 5
49278: PUSH
49279: LD_VAR 0 2
49283: PPUSH
49284: LD_INT 21
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PPUSH
49294: CALL_OW 70
49298: ST_TO_ADDR
// if not tmp then
49299: LD_VAR 0 5
49303: NOT
49304: IFFALSE 49308
// exit ;
49306: GO 49372
// if checkLink then
49308: LD_VAR 0 3
49312: IFFALSE 49362
// begin for i in tmp do
49314: LD_ADDR_VAR 0 6
49318: PUSH
49319: LD_VAR 0 5
49323: PUSH
49324: FOR_IN
49325: IFFALSE 49360
// if GetBase ( i ) <> base then
49327: LD_VAR 0 6
49331: PPUSH
49332: CALL_OW 274
49336: PUSH
49337: LD_VAR 0 1
49341: NONEQUAL
49342: IFFALSE 49358
// ComLinkToBase ( base , i ) ;
49344: LD_VAR 0 1
49348: PPUSH
49349: LD_VAR 0 6
49353: PPUSH
49354: CALL_OW 169
49358: GO 49324
49360: POP
49361: POP
// end ; result := tmp ;
49362: LD_ADDR_VAR 0 4
49366: PUSH
49367: LD_VAR 0 5
49371: ST_TO_ADDR
// end ;
49372: LD_VAR 0 4
49376: RET
// export function ComComplete ( units , b ) ; var i ; begin
49377: LD_INT 0
49379: PPUSH
49380: PPUSH
// if not units then
49381: LD_VAR 0 1
49385: NOT
49386: IFFALSE 49390
// exit ;
49388: GO 49480
// for i in units do
49390: LD_ADDR_VAR 0 4
49394: PUSH
49395: LD_VAR 0 1
49399: PUSH
49400: FOR_IN
49401: IFFALSE 49478
// if BuildingStatus ( b ) = bs_build then
49403: LD_VAR 0 2
49407: PPUSH
49408: CALL_OW 461
49412: PUSH
49413: LD_INT 1
49415: EQUAL
49416: IFFALSE 49476
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49418: LD_VAR 0 4
49422: PPUSH
49423: LD_STRING h
49425: PUSH
49426: LD_VAR 0 2
49430: PPUSH
49431: CALL_OW 250
49435: PUSH
49436: LD_VAR 0 2
49440: PPUSH
49441: CALL_OW 251
49445: PUSH
49446: LD_VAR 0 2
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: PPUSH
49472: CALL_OW 446
49476: GO 49400
49478: POP
49479: POP
// end ;
49480: LD_VAR 0 3
49484: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49485: LD_INT 0
49487: PPUSH
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
49492: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49493: LD_VAR 0 1
49497: NOT
49498: PUSH
49499: LD_VAR 0 1
49503: PPUSH
49504: CALL_OW 263
49508: PUSH
49509: LD_INT 2
49511: NONEQUAL
49512: OR
49513: IFFALSE 49517
// exit ;
49515: GO 49833
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49517: LD_ADDR_VAR 0 6
49521: PUSH
49522: LD_INT 22
49524: PUSH
49525: LD_VAR 0 1
49529: PPUSH
49530: CALL_OW 255
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 30
49544: PUSH
49545: LD_INT 36
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 34
49554: PUSH
49555: LD_INT 31
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PPUSH
49571: CALL_OW 69
49575: ST_TO_ADDR
// if not tmp then
49576: LD_VAR 0 6
49580: NOT
49581: IFFALSE 49585
// exit ;
49583: GO 49833
// result := [ ] ;
49585: LD_ADDR_VAR 0 2
49589: PUSH
49590: EMPTY
49591: ST_TO_ADDR
// for i in tmp do
49592: LD_ADDR_VAR 0 3
49596: PUSH
49597: LD_VAR 0 6
49601: PUSH
49602: FOR_IN
49603: IFFALSE 49674
// begin t := UnitsInside ( i ) ;
49605: LD_ADDR_VAR 0 4
49609: PUSH
49610: LD_VAR 0 3
49614: PPUSH
49615: CALL_OW 313
49619: ST_TO_ADDR
// if t then
49620: LD_VAR 0 4
49624: IFFALSE 49672
// for j in t do
49626: LD_ADDR_VAR 0 7
49630: PUSH
49631: LD_VAR 0 4
49635: PUSH
49636: FOR_IN
49637: IFFALSE 49670
// result := Replace ( result , result + 1 , j ) ;
49639: LD_ADDR_VAR 0 2
49643: PUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: LD_VAR 0 2
49653: PUSH
49654: LD_INT 1
49656: PLUS
49657: PPUSH
49658: LD_VAR 0 7
49662: PPUSH
49663: CALL_OW 1
49667: ST_TO_ADDR
49668: GO 49636
49670: POP
49671: POP
// end ;
49672: GO 49602
49674: POP
49675: POP
// if not result then
49676: LD_VAR 0 2
49680: NOT
49681: IFFALSE 49685
// exit ;
49683: GO 49833
// mech := result [ 1 ] ;
49685: LD_ADDR_VAR 0 5
49689: PUSH
49690: LD_VAR 0 2
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: ST_TO_ADDR
// if result > 1 then
49699: LD_VAR 0 2
49703: PUSH
49704: LD_INT 1
49706: GREATER
49707: IFFALSE 49819
// begin for i = 2 to result do
49709: LD_ADDR_VAR 0 3
49713: PUSH
49714: DOUBLE
49715: LD_INT 2
49717: DEC
49718: ST_TO_ADDR
49719: LD_VAR 0 2
49723: PUSH
49724: FOR_TO
49725: IFFALSE 49817
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49727: LD_ADDR_VAR 0 4
49731: PUSH
49732: LD_VAR 0 2
49736: PUSH
49737: LD_VAR 0 3
49741: ARRAY
49742: PPUSH
49743: LD_INT 3
49745: PPUSH
49746: CALL_OW 259
49750: PUSH
49751: LD_VAR 0 2
49755: PUSH
49756: LD_VAR 0 3
49760: ARRAY
49761: PPUSH
49762: CALL_OW 432
49766: MINUS
49767: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49768: LD_VAR 0 4
49772: PUSH
49773: LD_VAR 0 5
49777: PPUSH
49778: LD_INT 3
49780: PPUSH
49781: CALL_OW 259
49785: PUSH
49786: LD_VAR 0 5
49790: PPUSH
49791: CALL_OW 432
49795: MINUS
49796: GREATEREQUAL
49797: IFFALSE 49815
// mech := result [ i ] ;
49799: LD_ADDR_VAR 0 5
49803: PUSH
49804: LD_VAR 0 2
49808: PUSH
49809: LD_VAR 0 3
49813: ARRAY
49814: ST_TO_ADDR
// end ;
49815: GO 49724
49817: POP
49818: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49819: LD_VAR 0 1
49823: PPUSH
49824: LD_VAR 0 5
49828: PPUSH
49829: CALL_OW 135
// end ;
49833: LD_VAR 0 2
49837: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
// result := [ ] ;
49853: LD_ADDR_VAR 0 7
49857: PUSH
49858: EMPTY
49859: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49860: LD_VAR 0 1
49864: PPUSH
49865: CALL_OW 266
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: IN
49880: NOT
49881: IFFALSE 49885
// exit ;
49883: GO 51519
// if name then
49885: LD_VAR 0 3
49889: IFFALSE 49905
// SetBName ( base_dep , name ) ;
49891: LD_VAR 0 1
49895: PPUSH
49896: LD_VAR 0 3
49900: PPUSH
49901: CALL_OW 500
// base := GetBase ( base_dep ) ;
49905: LD_ADDR_VAR 0 15
49909: PUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: CALL_OW 274
49919: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49920: LD_ADDR_VAR 0 16
49924: PUSH
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 255
49934: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49935: LD_ADDR_VAR 0 17
49939: PUSH
49940: LD_VAR 0 1
49944: PPUSH
49945: CALL_OW 248
49949: ST_TO_ADDR
// if sources then
49950: LD_VAR 0 5
49954: IFFALSE 50001
// for i = 1 to 3 do
49956: LD_ADDR_VAR 0 8
49960: PUSH
49961: DOUBLE
49962: LD_INT 1
49964: DEC
49965: ST_TO_ADDR
49966: LD_INT 3
49968: PUSH
49969: FOR_TO
49970: IFFALSE 49999
// AddResourceType ( base , i , sources [ i ] ) ;
49972: LD_VAR 0 15
49976: PPUSH
49977: LD_VAR 0 8
49981: PPUSH
49982: LD_VAR 0 5
49986: PUSH
49987: LD_VAR 0 8
49991: ARRAY
49992: PPUSH
49993: CALL_OW 276
49997: GO 49969
49999: POP
50000: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50001: LD_ADDR_VAR 0 18
50005: PUSH
50006: LD_VAR 0 15
50010: PPUSH
50011: LD_VAR 0 2
50015: PPUSH
50016: LD_INT 1
50018: PPUSH
50019: CALL 49262 0 3
50023: ST_TO_ADDR
// InitHc ;
50024: CALL_OW 19
// InitUc ;
50028: CALL_OW 18
// uc_side := side ;
50032: LD_ADDR_OWVAR 20
50036: PUSH
50037: LD_VAR 0 16
50041: ST_TO_ADDR
// uc_nation := nation ;
50042: LD_ADDR_OWVAR 21
50046: PUSH
50047: LD_VAR 0 17
50051: ST_TO_ADDR
// if buildings then
50052: LD_VAR 0 18
50056: IFFALSE 51378
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50058: LD_ADDR_VAR 0 19
50062: PUSH
50063: LD_VAR 0 18
50067: PPUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 30
50073: PUSH
50074: LD_INT 29
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 30
50083: PUSH
50084: LD_INT 30
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: PPUSH
50096: CALL_OW 72
50100: ST_TO_ADDR
// if tmp then
50101: LD_VAR 0 19
50105: IFFALSE 50153
// for i in tmp do
50107: LD_ADDR_VAR 0 8
50111: PUSH
50112: LD_VAR 0 19
50116: PUSH
50117: FOR_IN
50118: IFFALSE 50151
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50120: LD_VAR 0 8
50124: PPUSH
50125: CALL_OW 250
50129: PPUSH
50130: LD_VAR 0 8
50134: PPUSH
50135: CALL_OW 251
50139: PPUSH
50140: LD_VAR 0 16
50144: PPUSH
50145: CALL_OW 441
50149: GO 50117
50151: POP
50152: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50153: LD_VAR 0 18
50157: PPUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 30
50163: PUSH
50164: LD_INT 32
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 30
50173: PUSH
50174: LD_INT 33
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: PPUSH
50186: CALL_OW 72
50190: IFFALSE 50278
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50192: LD_ADDR_VAR 0 8
50196: PUSH
50197: LD_VAR 0 18
50201: PPUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 30
50207: PUSH
50208: LD_INT 32
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 30
50217: PUSH
50218: LD_INT 33
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: PPUSH
50230: CALL_OW 72
50234: PUSH
50235: FOR_IN
50236: IFFALSE 50276
// begin if not GetBWeapon ( i ) then
50238: LD_VAR 0 8
50242: PPUSH
50243: CALL_OW 269
50247: NOT
50248: IFFALSE 50274
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50250: LD_VAR 0 8
50254: PPUSH
50255: LD_VAR 0 8
50259: PPUSH
50260: LD_VAR 0 2
50264: PPUSH
50265: CALL 51524 0 2
50269: PPUSH
50270: CALL_OW 431
// end ;
50274: GO 50235
50276: POP
50277: POP
// end ; for i = 1 to personel do
50278: LD_ADDR_VAR 0 8
50282: PUSH
50283: DOUBLE
50284: LD_INT 1
50286: DEC
50287: ST_TO_ADDR
50288: LD_VAR 0 6
50292: PUSH
50293: FOR_TO
50294: IFFALSE 51358
// begin if i > 4 then
50296: LD_VAR 0 8
50300: PUSH
50301: LD_INT 4
50303: GREATER
50304: IFFALSE 50308
// break ;
50306: GO 51358
// case i of 1 :
50308: LD_VAR 0 8
50312: PUSH
50313: LD_INT 1
50315: DOUBLE
50316: EQUAL
50317: IFTRUE 50321
50319: GO 50401
50321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50322: LD_ADDR_VAR 0 12
50326: PUSH
50327: LD_VAR 0 18
50331: PPUSH
50332: LD_INT 22
50334: PUSH
50335: LD_VAR 0 16
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 58
50346: PUSH
50347: EMPTY
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 30
50355: PUSH
50356: LD_INT 32
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 30
50365: PUSH
50366: LD_INT 4
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 30
50375: PUSH
50376: LD_INT 5
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: PPUSH
50394: CALL_OW 72
50398: ST_TO_ADDR
50399: GO 50623
50401: LD_INT 2
50403: DOUBLE
50404: EQUAL
50405: IFTRUE 50409
50407: GO 50471
50409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50410: LD_ADDR_VAR 0 12
50414: PUSH
50415: LD_VAR 0 18
50419: PPUSH
50420: LD_INT 22
50422: PUSH
50423: LD_VAR 0 16
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: LD_INT 30
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 30
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PPUSH
50464: CALL_OW 72
50468: ST_TO_ADDR
50469: GO 50623
50471: LD_INT 3
50473: DOUBLE
50474: EQUAL
50475: IFTRUE 50479
50477: GO 50541
50479: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50480: LD_ADDR_VAR 0 12
50484: PUSH
50485: LD_VAR 0 18
50489: PPUSH
50490: LD_INT 22
50492: PUSH
50493: LD_VAR 0 16
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 30
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 30
50517: PUSH
50518: LD_INT 3
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PPUSH
50534: CALL_OW 72
50538: ST_TO_ADDR
50539: GO 50623
50541: LD_INT 4
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50549
50547: GO 50622
50549: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50550: LD_ADDR_VAR 0 12
50554: PUSH
50555: LD_VAR 0 18
50559: PPUSH
50560: LD_INT 22
50562: PUSH
50563: LD_VAR 0 16
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 30
50577: PUSH
50578: LD_INT 6
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 30
50587: PUSH
50588: LD_INT 7
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 30
50597: PUSH
50598: LD_INT 8
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PPUSH
50615: CALL_OW 72
50619: ST_TO_ADDR
50620: GO 50623
50622: POP
// if i = 1 then
50623: LD_VAR 0 8
50627: PUSH
50628: LD_INT 1
50630: EQUAL
50631: IFFALSE 50742
// begin tmp := [ ] ;
50633: LD_ADDR_VAR 0 19
50637: PUSH
50638: EMPTY
50639: ST_TO_ADDR
// for j in f do
50640: LD_ADDR_VAR 0 9
50644: PUSH
50645: LD_VAR 0 12
50649: PUSH
50650: FOR_IN
50651: IFFALSE 50724
// if GetBType ( j ) = b_bunker then
50653: LD_VAR 0 9
50657: PPUSH
50658: CALL_OW 266
50662: PUSH
50663: LD_INT 32
50665: EQUAL
50666: IFFALSE 50693
// tmp := Insert ( tmp , 1 , j ) else
50668: LD_ADDR_VAR 0 19
50672: PUSH
50673: LD_VAR 0 19
50677: PPUSH
50678: LD_INT 1
50680: PPUSH
50681: LD_VAR 0 9
50685: PPUSH
50686: CALL_OW 2
50690: ST_TO_ADDR
50691: GO 50722
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50693: LD_ADDR_VAR 0 19
50697: PUSH
50698: LD_VAR 0 19
50702: PPUSH
50703: LD_VAR 0 19
50707: PUSH
50708: LD_INT 1
50710: PLUS
50711: PPUSH
50712: LD_VAR 0 9
50716: PPUSH
50717: CALL_OW 2
50721: ST_TO_ADDR
50722: GO 50650
50724: POP
50725: POP
// if tmp then
50726: LD_VAR 0 19
50730: IFFALSE 50742
// f := tmp ;
50732: LD_ADDR_VAR 0 12
50736: PUSH
50737: LD_VAR 0 19
50741: ST_TO_ADDR
// end ; x := personel [ i ] ;
50742: LD_ADDR_VAR 0 13
50746: PUSH
50747: LD_VAR 0 6
50751: PUSH
50752: LD_VAR 0 8
50756: ARRAY
50757: ST_TO_ADDR
// if x = - 1 then
50758: LD_VAR 0 13
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: EQUAL
50767: IFFALSE 50976
// begin for j in f do
50769: LD_ADDR_VAR 0 9
50773: PUSH
50774: LD_VAR 0 12
50778: PUSH
50779: FOR_IN
50780: IFFALSE 50972
// repeat InitHc ;
50782: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50786: LD_VAR 0 9
50790: PPUSH
50791: CALL_OW 266
50795: PUSH
50796: LD_INT 5
50798: EQUAL
50799: IFFALSE 50869
// begin if UnitsInside ( j ) < 3 then
50801: LD_VAR 0 9
50805: PPUSH
50806: CALL_OW 313
50810: PUSH
50811: LD_INT 3
50813: LESS
50814: IFFALSE 50850
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50816: LD_INT 0
50818: PPUSH
50819: LD_INT 5
50821: PUSH
50822: LD_INT 8
50824: PUSH
50825: LD_INT 9
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: PUSH
50833: LD_VAR 0 17
50837: ARRAY
50838: PPUSH
50839: LD_VAR 0 4
50843: PPUSH
50844: CALL_OW 380
50848: GO 50867
// PrepareHuman ( false , i , skill ) ;
50850: LD_INT 0
50852: PPUSH
50853: LD_VAR 0 8
50857: PPUSH
50858: LD_VAR 0 4
50862: PPUSH
50863: CALL_OW 380
// end else
50867: GO 50886
// PrepareHuman ( false , i , skill ) ;
50869: LD_INT 0
50871: PPUSH
50872: LD_VAR 0 8
50876: PPUSH
50877: LD_VAR 0 4
50881: PPUSH
50882: CALL_OW 380
// un := CreateHuman ;
50886: LD_ADDR_VAR 0 14
50890: PUSH
50891: CALL_OW 44
50895: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50896: LD_ADDR_VAR 0 7
50900: PUSH
50901: LD_VAR 0 7
50905: PPUSH
50906: LD_INT 1
50908: PPUSH
50909: LD_VAR 0 14
50913: PPUSH
50914: CALL_OW 2
50918: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50919: LD_VAR 0 14
50923: PPUSH
50924: LD_VAR 0 9
50928: PPUSH
50929: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50933: LD_VAR 0 9
50937: PPUSH
50938: CALL_OW 313
50942: PUSH
50943: LD_INT 6
50945: EQUAL
50946: PUSH
50947: LD_VAR 0 9
50951: PPUSH
50952: CALL_OW 266
50956: PUSH
50957: LD_INT 32
50959: PUSH
50960: LD_INT 31
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: IN
50967: OR
50968: IFFALSE 50782
50970: GO 50779
50972: POP
50973: POP
// end else
50974: GO 51356
// for j = 1 to x do
50976: LD_ADDR_VAR 0 9
50980: PUSH
50981: DOUBLE
50982: LD_INT 1
50984: DEC
50985: ST_TO_ADDR
50986: LD_VAR 0 13
50990: PUSH
50991: FOR_TO
50992: IFFALSE 51354
// begin InitHc ;
50994: CALL_OW 19
// if not f then
50998: LD_VAR 0 12
51002: NOT
51003: IFFALSE 51092
// begin PrepareHuman ( false , i , skill ) ;
51005: LD_INT 0
51007: PPUSH
51008: LD_VAR 0 8
51012: PPUSH
51013: LD_VAR 0 4
51017: PPUSH
51018: CALL_OW 380
// un := CreateHuman ;
51022: LD_ADDR_VAR 0 14
51026: PUSH
51027: CALL_OW 44
51031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51032: LD_ADDR_VAR 0 7
51036: PUSH
51037: LD_VAR 0 7
51041: PPUSH
51042: LD_INT 1
51044: PPUSH
51045: LD_VAR 0 14
51049: PPUSH
51050: CALL_OW 2
51054: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51055: LD_VAR 0 14
51059: PPUSH
51060: LD_VAR 0 1
51064: PPUSH
51065: CALL_OW 250
51069: PPUSH
51070: LD_VAR 0 1
51074: PPUSH
51075: CALL_OW 251
51079: PPUSH
51080: LD_INT 10
51082: PPUSH
51083: LD_INT 0
51085: PPUSH
51086: CALL_OW 50
// continue ;
51090: GO 50991
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51092: LD_VAR 0 12
51096: PUSH
51097: LD_INT 1
51099: ARRAY
51100: PPUSH
51101: CALL_OW 313
51105: PUSH
51106: LD_VAR 0 12
51110: PUSH
51111: LD_INT 1
51113: ARRAY
51114: PPUSH
51115: CALL_OW 266
51119: PUSH
51120: LD_INT 32
51122: PUSH
51123: LD_INT 31
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: IN
51130: AND
51131: PUSH
51132: LD_VAR 0 12
51136: PUSH
51137: LD_INT 1
51139: ARRAY
51140: PPUSH
51141: CALL_OW 313
51145: PUSH
51146: LD_INT 6
51148: EQUAL
51149: OR
51150: IFFALSE 51170
// f := Delete ( f , 1 ) ;
51152: LD_ADDR_VAR 0 12
51156: PUSH
51157: LD_VAR 0 12
51161: PPUSH
51162: LD_INT 1
51164: PPUSH
51165: CALL_OW 3
51169: ST_TO_ADDR
// if not f then
51170: LD_VAR 0 12
51174: NOT
51175: IFFALSE 51193
// begin x := x + 2 ;
51177: LD_ADDR_VAR 0 13
51181: PUSH
51182: LD_VAR 0 13
51186: PUSH
51187: LD_INT 2
51189: PLUS
51190: ST_TO_ADDR
// continue ;
51191: GO 50991
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51193: LD_VAR 0 12
51197: PUSH
51198: LD_INT 1
51200: ARRAY
51201: PPUSH
51202: CALL_OW 266
51206: PUSH
51207: LD_INT 5
51209: EQUAL
51210: IFFALSE 51284
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51212: LD_VAR 0 12
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: PPUSH
51221: CALL_OW 313
51225: PUSH
51226: LD_INT 3
51228: LESS
51229: IFFALSE 51265
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51231: LD_INT 0
51233: PPUSH
51234: LD_INT 5
51236: PUSH
51237: LD_INT 8
51239: PUSH
51240: LD_INT 9
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: PUSH
51248: LD_VAR 0 17
51252: ARRAY
51253: PPUSH
51254: LD_VAR 0 4
51258: PPUSH
51259: CALL_OW 380
51263: GO 51282
// PrepareHuman ( false , i , skill ) ;
51265: LD_INT 0
51267: PPUSH
51268: LD_VAR 0 8
51272: PPUSH
51273: LD_VAR 0 4
51277: PPUSH
51278: CALL_OW 380
// end else
51282: GO 51301
// PrepareHuman ( false , i , skill ) ;
51284: LD_INT 0
51286: PPUSH
51287: LD_VAR 0 8
51291: PPUSH
51292: LD_VAR 0 4
51296: PPUSH
51297: CALL_OW 380
// un := CreateHuman ;
51301: LD_ADDR_VAR 0 14
51305: PUSH
51306: CALL_OW 44
51310: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51311: LD_ADDR_VAR 0 7
51315: PUSH
51316: LD_VAR 0 7
51320: PPUSH
51321: LD_INT 1
51323: PPUSH
51324: LD_VAR 0 14
51328: PPUSH
51329: CALL_OW 2
51333: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51334: LD_VAR 0 14
51338: PPUSH
51339: LD_VAR 0 12
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: CALL_OW 52
// end ;
51352: GO 50991
51354: POP
51355: POP
// end ;
51356: GO 50293
51358: POP
51359: POP
// result := result ^ buildings ;
51360: LD_ADDR_VAR 0 7
51364: PUSH
51365: LD_VAR 0 7
51369: PUSH
51370: LD_VAR 0 18
51374: ADD
51375: ST_TO_ADDR
// end else
51376: GO 51519
// begin for i = 1 to personel do
51378: LD_ADDR_VAR 0 8
51382: PUSH
51383: DOUBLE
51384: LD_INT 1
51386: DEC
51387: ST_TO_ADDR
51388: LD_VAR 0 6
51392: PUSH
51393: FOR_TO
51394: IFFALSE 51517
// begin if i > 4 then
51396: LD_VAR 0 8
51400: PUSH
51401: LD_INT 4
51403: GREATER
51404: IFFALSE 51408
// break ;
51406: GO 51517
// x := personel [ i ] ;
51408: LD_ADDR_VAR 0 13
51412: PUSH
51413: LD_VAR 0 6
51417: PUSH
51418: LD_VAR 0 8
51422: ARRAY
51423: ST_TO_ADDR
// if x = - 1 then
51424: LD_VAR 0 13
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: EQUAL
51433: IFFALSE 51437
// continue ;
51435: GO 51393
// PrepareHuman ( false , i , skill ) ;
51437: LD_INT 0
51439: PPUSH
51440: LD_VAR 0 8
51444: PPUSH
51445: LD_VAR 0 4
51449: PPUSH
51450: CALL_OW 380
// un := CreateHuman ;
51454: LD_ADDR_VAR 0 14
51458: PUSH
51459: CALL_OW 44
51463: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51464: LD_VAR 0 14
51468: PPUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 250
51478: PPUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 251
51488: PPUSH
51489: LD_INT 10
51491: PPUSH
51492: LD_INT 0
51494: PPUSH
51495: CALL_OW 50
// result := result ^ un ;
51499: LD_ADDR_VAR 0 7
51503: PUSH
51504: LD_VAR 0 7
51508: PUSH
51509: LD_VAR 0 14
51513: ADD
51514: ST_TO_ADDR
// end ;
51515: GO 51393
51517: POP
51518: POP
// end ; end ;
51519: LD_VAR 0 7
51523: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51524: LD_INT 0
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
51530: PPUSH
51531: PPUSH
51532: PPUSH
51533: PPUSH
51534: PPUSH
51535: PPUSH
51536: PPUSH
51537: PPUSH
51538: PPUSH
51539: PPUSH
51540: PPUSH
51541: PPUSH
// result := false ;
51542: LD_ADDR_VAR 0 3
51546: PUSH
51547: LD_INT 0
51549: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51550: LD_VAR 0 1
51554: NOT
51555: PUSH
51556: LD_VAR 0 1
51560: PPUSH
51561: CALL_OW 266
51565: PUSH
51566: LD_INT 32
51568: PUSH
51569: LD_INT 33
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: IN
51576: NOT
51577: OR
51578: IFFALSE 51582
// exit ;
51580: GO 52691
// nat := GetNation ( tower ) ;
51582: LD_ADDR_VAR 0 12
51586: PUSH
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 248
51596: ST_TO_ADDR
// side := GetSide ( tower ) ;
51597: LD_ADDR_VAR 0 16
51601: PUSH
51602: LD_VAR 0 1
51606: PPUSH
51607: CALL_OW 255
51611: ST_TO_ADDR
// x := GetX ( tower ) ;
51612: LD_ADDR_VAR 0 10
51616: PUSH
51617: LD_VAR 0 1
51621: PPUSH
51622: CALL_OW 250
51626: ST_TO_ADDR
// y := GetY ( tower ) ;
51627: LD_ADDR_VAR 0 11
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 251
51641: ST_TO_ADDR
// if not x or not y then
51642: LD_VAR 0 10
51646: NOT
51647: PUSH
51648: LD_VAR 0 11
51652: NOT
51653: OR
51654: IFFALSE 51658
// exit ;
51656: GO 52691
// weapon := 0 ;
51658: LD_ADDR_VAR 0 18
51662: PUSH
51663: LD_INT 0
51665: ST_TO_ADDR
// fac_list := [ ] ;
51666: LD_ADDR_VAR 0 17
51670: PUSH
51671: EMPTY
51672: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51673: LD_ADDR_VAR 0 6
51677: PUSH
51678: LD_VAR 0 1
51682: PPUSH
51683: CALL_OW 274
51687: PPUSH
51688: LD_VAR 0 2
51692: PPUSH
51693: LD_INT 0
51695: PPUSH
51696: CALL 49262 0 3
51700: PPUSH
51701: LD_INT 30
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PPUSH
51711: CALL_OW 72
51715: ST_TO_ADDR
// if not factories then
51716: LD_VAR 0 6
51720: NOT
51721: IFFALSE 51725
// exit ;
51723: GO 52691
// for i in factories do
51725: LD_ADDR_VAR 0 8
51729: PUSH
51730: LD_VAR 0 6
51734: PUSH
51735: FOR_IN
51736: IFFALSE 51761
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51738: LD_ADDR_VAR 0 17
51742: PUSH
51743: LD_VAR 0 17
51747: PUSH
51748: LD_VAR 0 8
51752: PPUSH
51753: CALL_OW 478
51757: UNION
51758: ST_TO_ADDR
51759: GO 51735
51761: POP
51762: POP
// if not fac_list then
51763: LD_VAR 0 17
51767: NOT
51768: IFFALSE 51772
// exit ;
51770: GO 52691
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51772: LD_ADDR_VAR 0 5
51776: PUSH
51777: LD_INT 4
51779: PUSH
51780: LD_INT 5
51782: PUSH
51783: LD_INT 9
51785: PUSH
51786: LD_INT 10
51788: PUSH
51789: LD_INT 6
51791: PUSH
51792: LD_INT 7
51794: PUSH
51795: LD_INT 11
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 27
51809: PUSH
51810: LD_INT 28
51812: PUSH
51813: LD_INT 26
51815: PUSH
51816: LD_INT 30
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 43
51827: PUSH
51828: LD_INT 44
51830: PUSH
51831: LD_INT 46
51833: PUSH
51834: LD_INT 45
51836: PUSH
51837: LD_INT 47
51839: PUSH
51840: LD_INT 49
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: PUSH
51856: LD_VAR 0 12
51860: ARRAY
51861: ST_TO_ADDR
// list := list isect fac_list ;
51862: LD_ADDR_VAR 0 5
51866: PUSH
51867: LD_VAR 0 5
51871: PUSH
51872: LD_VAR 0 17
51876: ISECT
51877: ST_TO_ADDR
// if not list then
51878: LD_VAR 0 5
51882: NOT
51883: IFFALSE 51887
// exit ;
51885: GO 52691
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51887: LD_VAR 0 12
51891: PUSH
51892: LD_INT 3
51894: EQUAL
51895: PUSH
51896: LD_INT 49
51898: PUSH
51899: LD_VAR 0 5
51903: IN
51904: AND
51905: PUSH
51906: LD_INT 31
51908: PPUSH
51909: LD_VAR 0 16
51913: PPUSH
51914: CALL_OW 321
51918: PUSH
51919: LD_INT 2
51921: EQUAL
51922: AND
51923: IFFALSE 51983
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51925: LD_INT 22
51927: PUSH
51928: LD_VAR 0 16
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 35
51939: PUSH
51940: LD_INT 49
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 91
51949: PUSH
51950: LD_VAR 0 1
51954: PUSH
51955: LD_INT 10
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: PPUSH
51968: CALL_OW 69
51972: NOT
51973: IFFALSE 51983
// weapon := ru_time_lapser ;
51975: LD_ADDR_VAR 0 18
51979: PUSH
51980: LD_INT 49
51982: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51983: LD_VAR 0 12
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: IN
51998: PUSH
51999: LD_INT 11
52001: PUSH
52002: LD_VAR 0 5
52006: IN
52007: PUSH
52008: LD_INT 30
52010: PUSH
52011: LD_VAR 0 5
52015: IN
52016: OR
52017: AND
52018: PUSH
52019: LD_INT 6
52021: PPUSH
52022: LD_VAR 0 16
52026: PPUSH
52027: CALL_OW 321
52031: PUSH
52032: LD_INT 2
52034: EQUAL
52035: AND
52036: IFFALSE 52201
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52038: LD_INT 22
52040: PUSH
52041: LD_VAR 0 16
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 35
52055: PUSH
52056: LD_INT 11
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 35
52065: PUSH
52066: LD_INT 30
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 91
52080: PUSH
52081: LD_VAR 0 1
52085: PUSH
52086: LD_INT 18
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: PPUSH
52099: CALL_OW 69
52103: NOT
52104: PUSH
52105: LD_INT 22
52107: PUSH
52108: LD_VAR 0 16
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 30
52122: PUSH
52123: LD_INT 32
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 30
52132: PUSH
52133: LD_INT 33
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 91
52147: PUSH
52148: LD_VAR 0 1
52152: PUSH
52153: LD_INT 12
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: PPUSH
52169: CALL_OW 69
52173: PUSH
52174: LD_INT 2
52176: GREATER
52177: AND
52178: IFFALSE 52201
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52180: LD_ADDR_VAR 0 18
52184: PUSH
52185: LD_INT 11
52187: PUSH
52188: LD_INT 30
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_VAR 0 12
52199: ARRAY
52200: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52201: LD_VAR 0 18
52205: NOT
52206: PUSH
52207: LD_INT 40
52209: PPUSH
52210: LD_VAR 0 16
52214: PPUSH
52215: CALL_OW 321
52219: PUSH
52220: LD_INT 2
52222: EQUAL
52223: AND
52224: PUSH
52225: LD_INT 7
52227: PUSH
52228: LD_VAR 0 5
52232: IN
52233: PUSH
52234: LD_INT 28
52236: PUSH
52237: LD_VAR 0 5
52241: IN
52242: OR
52243: PUSH
52244: LD_INT 45
52246: PUSH
52247: LD_VAR 0 5
52251: IN
52252: OR
52253: AND
52254: IFFALSE 52508
// begin hex := GetHexInfo ( x , y ) ;
52256: LD_ADDR_VAR 0 4
52260: PUSH
52261: LD_VAR 0 10
52265: PPUSH
52266: LD_VAR 0 11
52270: PPUSH
52271: CALL_OW 546
52275: ST_TO_ADDR
// if hex [ 1 ] then
52276: LD_VAR 0 4
52280: PUSH
52281: LD_INT 1
52283: ARRAY
52284: IFFALSE 52288
// exit ;
52286: GO 52691
// height := hex [ 2 ] ;
52288: LD_ADDR_VAR 0 15
52292: PUSH
52293: LD_VAR 0 4
52297: PUSH
52298: LD_INT 2
52300: ARRAY
52301: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52302: LD_ADDR_VAR 0 14
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// for i in tmp do
52325: LD_ADDR_VAR 0 8
52329: PUSH
52330: LD_VAR 0 14
52334: PUSH
52335: FOR_IN
52336: IFFALSE 52506
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52338: LD_ADDR_VAR 0 9
52342: PUSH
52343: LD_VAR 0 10
52347: PPUSH
52348: LD_VAR 0 8
52352: PPUSH
52353: LD_INT 5
52355: PPUSH
52356: CALL_OW 272
52360: PUSH
52361: LD_VAR 0 11
52365: PPUSH
52366: LD_VAR 0 8
52370: PPUSH
52371: LD_INT 5
52373: PPUSH
52374: CALL_OW 273
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52383: LD_VAR 0 9
52387: PUSH
52388: LD_INT 1
52390: ARRAY
52391: PPUSH
52392: LD_VAR 0 9
52396: PUSH
52397: LD_INT 2
52399: ARRAY
52400: PPUSH
52401: CALL_OW 488
52405: IFFALSE 52504
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52407: LD_ADDR_VAR 0 4
52411: PUSH
52412: LD_VAR 0 9
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: LD_VAR 0 9
52425: PUSH
52426: LD_INT 2
52428: ARRAY
52429: PPUSH
52430: CALL_OW 546
52434: ST_TO_ADDR
// if hex [ 1 ] then
52435: LD_VAR 0 4
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: IFFALSE 52447
// continue ;
52445: GO 52335
// h := hex [ 2 ] ;
52447: LD_ADDR_VAR 0 13
52451: PUSH
52452: LD_VAR 0 4
52456: PUSH
52457: LD_INT 2
52459: ARRAY
52460: ST_TO_ADDR
// if h + 7 < height then
52461: LD_VAR 0 13
52465: PUSH
52466: LD_INT 7
52468: PLUS
52469: PUSH
52470: LD_VAR 0 15
52474: LESS
52475: IFFALSE 52504
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52477: LD_ADDR_VAR 0 18
52481: PUSH
52482: LD_INT 7
52484: PUSH
52485: LD_INT 28
52487: PUSH
52488: LD_INT 45
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: PUSH
52496: LD_VAR 0 12
52500: ARRAY
52501: ST_TO_ADDR
// break ;
52502: GO 52506
// end ; end ; end ;
52504: GO 52335
52506: POP
52507: POP
// end ; if not weapon then
52508: LD_VAR 0 18
52512: NOT
52513: IFFALSE 52573
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52515: LD_ADDR_VAR 0 5
52519: PUSH
52520: LD_VAR 0 5
52524: PUSH
52525: LD_INT 11
52527: PUSH
52528: LD_INT 30
52530: PUSH
52531: LD_INT 49
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: DIFF
52539: ST_TO_ADDR
// if not list then
52540: LD_VAR 0 5
52544: NOT
52545: IFFALSE 52549
// exit ;
52547: GO 52691
// weapon := list [ rand ( 1 , list ) ] ;
52549: LD_ADDR_VAR 0 18
52553: PUSH
52554: LD_VAR 0 5
52558: PUSH
52559: LD_INT 1
52561: PPUSH
52562: LD_VAR 0 5
52566: PPUSH
52567: CALL_OW 12
52571: ARRAY
52572: ST_TO_ADDR
// end ; if weapon then
52573: LD_VAR 0 18
52577: IFFALSE 52691
// begin tmp := CostOfWeapon ( weapon ) ;
52579: LD_ADDR_VAR 0 14
52583: PUSH
52584: LD_VAR 0 18
52588: PPUSH
52589: CALL_OW 451
52593: ST_TO_ADDR
// j := GetBase ( tower ) ;
52594: LD_ADDR_VAR 0 9
52598: PUSH
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 274
52608: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52609: LD_VAR 0 9
52613: PPUSH
52614: LD_INT 1
52616: PPUSH
52617: CALL_OW 275
52621: PUSH
52622: LD_VAR 0 14
52626: PUSH
52627: LD_INT 1
52629: ARRAY
52630: GREATEREQUAL
52631: PUSH
52632: LD_VAR 0 9
52636: PPUSH
52637: LD_INT 2
52639: PPUSH
52640: CALL_OW 275
52644: PUSH
52645: LD_VAR 0 14
52649: PUSH
52650: LD_INT 2
52652: ARRAY
52653: GREATEREQUAL
52654: AND
52655: PUSH
52656: LD_VAR 0 9
52660: PPUSH
52661: LD_INT 3
52663: PPUSH
52664: CALL_OW 275
52668: PUSH
52669: LD_VAR 0 14
52673: PUSH
52674: LD_INT 3
52676: ARRAY
52677: GREATEREQUAL
52678: AND
52679: IFFALSE 52691
// result := weapon ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_VAR 0 18
52690: ST_TO_ADDR
// end ; end ;
52691: LD_VAR 0 3
52695: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52696: LD_INT 0
52698: PPUSH
52699: PPUSH
// result := true ;
52700: LD_ADDR_VAR 0 3
52704: PUSH
52705: LD_INT 1
52707: ST_TO_ADDR
// if array1 = array2 then
52708: LD_VAR 0 1
52712: PUSH
52713: LD_VAR 0 2
52717: EQUAL
52718: IFFALSE 52778
// begin for i = 1 to array1 do
52720: LD_ADDR_VAR 0 4
52724: PUSH
52725: DOUBLE
52726: LD_INT 1
52728: DEC
52729: ST_TO_ADDR
52730: LD_VAR 0 1
52734: PUSH
52735: FOR_TO
52736: IFFALSE 52774
// if array1 [ i ] <> array2 [ i ] then
52738: LD_VAR 0 1
52742: PUSH
52743: LD_VAR 0 4
52747: ARRAY
52748: PUSH
52749: LD_VAR 0 2
52753: PUSH
52754: LD_VAR 0 4
52758: ARRAY
52759: NONEQUAL
52760: IFFALSE 52772
// begin result := false ;
52762: LD_ADDR_VAR 0 3
52766: PUSH
52767: LD_INT 0
52769: ST_TO_ADDR
// break ;
52770: GO 52774
// end ;
52772: GO 52735
52774: POP
52775: POP
// end else
52776: GO 52786
// result := false ;
52778: LD_ADDR_VAR 0 3
52782: PUSH
52783: LD_INT 0
52785: ST_TO_ADDR
// end ;
52786: LD_VAR 0 3
52790: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52791: LD_INT 0
52793: PPUSH
52794: PPUSH
// if not array1 or not array2 then
52795: LD_VAR 0 1
52799: NOT
52800: PUSH
52801: LD_VAR 0 2
52805: NOT
52806: OR
52807: IFFALSE 52811
// exit ;
52809: GO 52875
// result := true ;
52811: LD_ADDR_VAR 0 3
52815: PUSH
52816: LD_INT 1
52818: ST_TO_ADDR
// for i = 1 to array1 do
52819: LD_ADDR_VAR 0 4
52823: PUSH
52824: DOUBLE
52825: LD_INT 1
52827: DEC
52828: ST_TO_ADDR
52829: LD_VAR 0 1
52833: PUSH
52834: FOR_TO
52835: IFFALSE 52873
// if array1 [ i ] <> array2 [ i ] then
52837: LD_VAR 0 1
52841: PUSH
52842: LD_VAR 0 4
52846: ARRAY
52847: PUSH
52848: LD_VAR 0 2
52852: PUSH
52853: LD_VAR 0 4
52857: ARRAY
52858: NONEQUAL
52859: IFFALSE 52871
// begin result := false ;
52861: LD_ADDR_VAR 0 3
52865: PUSH
52866: LD_INT 0
52868: ST_TO_ADDR
// break ;
52869: GO 52873
// end ;
52871: GO 52834
52873: POP
52874: POP
// end ;
52875: LD_VAR 0 3
52879: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52880: LD_INT 0
52882: PPUSH
52883: PPUSH
52884: PPUSH
// pom := GetBase ( fac ) ;
52885: LD_ADDR_VAR 0 5
52889: PUSH
52890: LD_VAR 0 1
52894: PPUSH
52895: CALL_OW 274
52899: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52900: LD_ADDR_VAR 0 4
52904: PUSH
52905: LD_VAR 0 2
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 2
52918: PUSH
52919: LD_INT 2
52921: ARRAY
52922: PPUSH
52923: LD_VAR 0 2
52927: PUSH
52928: LD_INT 3
52930: ARRAY
52931: PPUSH
52932: LD_VAR 0 2
52936: PUSH
52937: LD_INT 4
52939: ARRAY
52940: PPUSH
52941: CALL_OW 449
52945: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52946: LD_ADDR_VAR 0 3
52950: PUSH
52951: LD_VAR 0 5
52955: PPUSH
52956: LD_INT 1
52958: PPUSH
52959: CALL_OW 275
52963: PUSH
52964: LD_VAR 0 4
52968: PUSH
52969: LD_INT 1
52971: ARRAY
52972: GREATEREQUAL
52973: PUSH
52974: LD_VAR 0 5
52978: PPUSH
52979: LD_INT 2
52981: PPUSH
52982: CALL_OW 275
52986: PUSH
52987: LD_VAR 0 4
52991: PUSH
52992: LD_INT 2
52994: ARRAY
52995: GREATEREQUAL
52996: AND
52997: PUSH
52998: LD_VAR 0 5
53002: PPUSH
53003: LD_INT 3
53005: PPUSH
53006: CALL_OW 275
53010: PUSH
53011: LD_VAR 0 4
53015: PUSH
53016: LD_INT 3
53018: ARRAY
53019: GREATEREQUAL
53020: AND
53021: ST_TO_ADDR
// end ;
53022: LD_VAR 0 3
53026: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53027: LD_INT 0
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
// pom := GetBase ( building ) ;
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL_OW 274
53047: ST_TO_ADDR
// if not pom then
53048: LD_VAR 0 3
53052: NOT
53053: IFFALSE 53057
// exit ;
53055: GO 53227
// btype := GetBType ( building ) ;
53057: LD_ADDR_VAR 0 5
53061: PUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 266
53071: ST_TO_ADDR
// if btype = b_armoury then
53072: LD_VAR 0 5
53076: PUSH
53077: LD_INT 4
53079: EQUAL
53080: IFFALSE 53090
// btype := b_barracks ;
53082: LD_ADDR_VAR 0 5
53086: PUSH
53087: LD_INT 5
53089: ST_TO_ADDR
// if btype = b_depot then
53090: LD_VAR 0 5
53094: PUSH
53095: LD_INT 0
53097: EQUAL
53098: IFFALSE 53108
// btype := b_warehouse ;
53100: LD_ADDR_VAR 0 5
53104: PUSH
53105: LD_INT 1
53107: ST_TO_ADDR
// if btype = b_workshop then
53108: LD_VAR 0 5
53112: PUSH
53113: LD_INT 2
53115: EQUAL
53116: IFFALSE 53126
// btype := b_factory ;
53118: LD_ADDR_VAR 0 5
53122: PUSH
53123: LD_INT 3
53125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53126: LD_ADDR_VAR 0 4
53130: PUSH
53131: LD_VAR 0 5
53135: PPUSH
53136: LD_VAR 0 1
53140: PPUSH
53141: CALL_OW 248
53145: PPUSH
53146: CALL_OW 450
53150: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53151: LD_ADDR_VAR 0 2
53155: PUSH
53156: LD_VAR 0 3
53160: PPUSH
53161: LD_INT 1
53163: PPUSH
53164: CALL_OW 275
53168: PUSH
53169: LD_VAR 0 4
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: GREATEREQUAL
53178: PUSH
53179: LD_VAR 0 3
53183: PPUSH
53184: LD_INT 2
53186: PPUSH
53187: CALL_OW 275
53191: PUSH
53192: LD_VAR 0 4
53196: PUSH
53197: LD_INT 2
53199: ARRAY
53200: GREATEREQUAL
53201: AND
53202: PUSH
53203: LD_VAR 0 3
53207: PPUSH
53208: LD_INT 3
53210: PPUSH
53211: CALL_OW 275
53215: PUSH
53216: LD_VAR 0 4
53220: PUSH
53221: LD_INT 3
53223: ARRAY
53224: GREATEREQUAL
53225: AND
53226: ST_TO_ADDR
// end ;
53227: LD_VAR 0 2
53231: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
53236: PPUSH
// pom := GetBase ( building ) ;
53237: LD_ADDR_VAR 0 4
53241: PUSH
53242: LD_VAR 0 1
53246: PPUSH
53247: CALL_OW 274
53251: ST_TO_ADDR
// if not pom then
53252: LD_VAR 0 4
53256: NOT
53257: IFFALSE 53261
// exit ;
53259: GO 53362
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53261: LD_ADDR_VAR 0 5
53265: PUSH
53266: LD_VAR 0 2
53270: PPUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: CALL_OW 248
53280: PPUSH
53281: CALL_OW 450
53285: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: LD_VAR 0 4
53295: PPUSH
53296: LD_INT 1
53298: PPUSH
53299: CALL_OW 275
53303: PUSH
53304: LD_VAR 0 5
53308: PUSH
53309: LD_INT 1
53311: ARRAY
53312: GREATEREQUAL
53313: PUSH
53314: LD_VAR 0 4
53318: PPUSH
53319: LD_INT 2
53321: PPUSH
53322: CALL_OW 275
53326: PUSH
53327: LD_VAR 0 5
53331: PUSH
53332: LD_INT 2
53334: ARRAY
53335: GREATEREQUAL
53336: AND
53337: PUSH
53338: LD_VAR 0 4
53342: PPUSH
53343: LD_INT 3
53345: PPUSH
53346: CALL_OW 275
53350: PUSH
53351: LD_VAR 0 5
53355: PUSH
53356: LD_INT 3
53358: ARRAY
53359: GREATEREQUAL
53360: AND
53361: ST_TO_ADDR
// end ;
53362: LD_VAR 0 3
53366: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53367: LD_INT 0
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
// result := false ;
53380: LD_ADDR_VAR 0 8
53384: PUSH
53385: LD_INT 0
53387: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53388: LD_VAR 0 5
53392: NOT
53393: PUSH
53394: LD_VAR 0 1
53398: NOT
53399: OR
53400: PUSH
53401: LD_VAR 0 2
53405: NOT
53406: OR
53407: PUSH
53408: LD_VAR 0 3
53412: NOT
53413: OR
53414: IFFALSE 53418
// exit ;
53416: GO 54232
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53418: LD_ADDR_VAR 0 14
53422: PUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_VAR 0 2
53432: PPUSH
53433: LD_VAR 0 3
53437: PPUSH
53438: LD_VAR 0 4
53442: PPUSH
53443: LD_VAR 0 5
53447: PUSH
53448: LD_INT 1
53450: ARRAY
53451: PPUSH
53452: CALL_OW 248
53456: PPUSH
53457: LD_INT 0
53459: PPUSH
53460: CALL 55485 0 6
53464: ST_TO_ADDR
// if not hexes then
53465: LD_VAR 0 14
53469: NOT
53470: IFFALSE 53474
// exit ;
53472: GO 54232
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53474: LD_ADDR_VAR 0 17
53478: PUSH
53479: LD_VAR 0 5
53483: PPUSH
53484: LD_INT 22
53486: PUSH
53487: LD_VAR 0 13
53491: PPUSH
53492: CALL_OW 255
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 30
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 30
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PPUSH
53533: CALL_OW 72
53537: ST_TO_ADDR
// for i = 1 to hexes do
53538: LD_ADDR_VAR 0 9
53542: PUSH
53543: DOUBLE
53544: LD_INT 1
53546: DEC
53547: ST_TO_ADDR
53548: LD_VAR 0 14
53552: PUSH
53553: FOR_TO
53554: IFFALSE 54230
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53556: LD_ADDR_VAR 0 13
53560: PUSH
53561: LD_VAR 0 14
53565: PUSH
53566: LD_VAR 0 9
53570: ARRAY
53571: PUSH
53572: LD_INT 1
53574: ARRAY
53575: PPUSH
53576: LD_VAR 0 14
53580: PUSH
53581: LD_VAR 0 9
53585: ARRAY
53586: PUSH
53587: LD_INT 2
53589: ARRAY
53590: PPUSH
53591: CALL_OW 428
53595: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53596: LD_VAR 0 14
53600: PUSH
53601: LD_VAR 0 9
53605: ARRAY
53606: PUSH
53607: LD_INT 1
53609: ARRAY
53610: PPUSH
53611: LD_VAR 0 14
53615: PUSH
53616: LD_VAR 0 9
53620: ARRAY
53621: PUSH
53622: LD_INT 2
53624: ARRAY
53625: PPUSH
53626: CALL_OW 351
53630: PUSH
53631: LD_VAR 0 14
53635: PUSH
53636: LD_VAR 0 9
53640: ARRAY
53641: PUSH
53642: LD_INT 1
53644: ARRAY
53645: PPUSH
53646: LD_VAR 0 14
53650: PUSH
53651: LD_VAR 0 9
53655: ARRAY
53656: PUSH
53657: LD_INT 2
53659: ARRAY
53660: PPUSH
53661: CALL_OW 488
53665: NOT
53666: OR
53667: PUSH
53668: LD_VAR 0 13
53672: PPUSH
53673: CALL_OW 247
53677: PUSH
53678: LD_INT 3
53680: EQUAL
53681: OR
53682: IFFALSE 53688
// exit ;
53684: POP
53685: POP
53686: GO 54232
// if not tmp then
53688: LD_VAR 0 13
53692: NOT
53693: IFFALSE 53697
// continue ;
53695: GO 53553
// result := true ;
53697: LD_ADDR_VAR 0 8
53701: PUSH
53702: LD_INT 1
53704: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53705: LD_VAR 0 6
53709: PUSH
53710: LD_VAR 0 13
53714: PPUSH
53715: CALL_OW 247
53719: PUSH
53720: LD_INT 2
53722: EQUAL
53723: AND
53724: PUSH
53725: LD_VAR 0 13
53729: PPUSH
53730: CALL_OW 263
53734: PUSH
53735: LD_INT 1
53737: EQUAL
53738: AND
53739: IFFALSE 53903
// begin if IsDrivenBy ( tmp ) then
53741: LD_VAR 0 13
53745: PPUSH
53746: CALL_OW 311
53750: IFFALSE 53754
// continue ;
53752: GO 53553
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53754: LD_VAR 0 6
53758: PPUSH
53759: LD_INT 3
53761: PUSH
53762: LD_INT 60
53764: PUSH
53765: EMPTY
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 55
53777: PUSH
53778: EMPTY
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PPUSH
53789: CALL_OW 72
53793: IFFALSE 53901
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53795: LD_ADDR_VAR 0 18
53799: PUSH
53800: LD_VAR 0 6
53804: PPUSH
53805: LD_INT 3
53807: PUSH
53808: LD_INT 60
53810: PUSH
53811: EMPTY
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: LD_INT 55
53823: PUSH
53824: EMPTY
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PPUSH
53835: CALL_OW 72
53839: PUSH
53840: LD_INT 1
53842: ARRAY
53843: ST_TO_ADDR
// if IsInUnit ( driver ) then
53844: LD_VAR 0 18
53848: PPUSH
53849: CALL_OW 310
53853: IFFALSE 53864
// ComExit ( driver ) ;
53855: LD_VAR 0 18
53859: PPUSH
53860: CALL 79266 0 1
// AddComEnterUnit ( driver , tmp ) ;
53864: LD_VAR 0 18
53868: PPUSH
53869: LD_VAR 0 13
53873: PPUSH
53874: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53878: LD_VAR 0 18
53882: PPUSH
53883: LD_VAR 0 7
53887: PPUSH
53888: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53892: LD_VAR 0 18
53896: PPUSH
53897: CALL_OW 181
// end ; continue ;
53901: GO 53553
// end ; if not cleaners or not tmp in cleaners then
53903: LD_VAR 0 6
53907: NOT
53908: PUSH
53909: LD_VAR 0 13
53913: PUSH
53914: LD_VAR 0 6
53918: IN
53919: NOT
53920: OR
53921: IFFALSE 54228
// begin if dep then
53923: LD_VAR 0 17
53927: IFFALSE 54063
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53929: LD_ADDR_VAR 0 16
53933: PUSH
53934: LD_VAR 0 17
53938: PUSH
53939: LD_INT 1
53941: ARRAY
53942: PPUSH
53943: CALL_OW 250
53947: PPUSH
53948: LD_VAR 0 17
53952: PUSH
53953: LD_INT 1
53955: ARRAY
53956: PPUSH
53957: CALL_OW 254
53961: PPUSH
53962: LD_INT 5
53964: PPUSH
53965: CALL_OW 272
53969: PUSH
53970: LD_VAR 0 17
53974: PUSH
53975: LD_INT 1
53977: ARRAY
53978: PPUSH
53979: CALL_OW 251
53983: PPUSH
53984: LD_VAR 0 17
53988: PUSH
53989: LD_INT 1
53991: ARRAY
53992: PPUSH
53993: CALL_OW 254
53997: PPUSH
53998: LD_INT 5
54000: PPUSH
54001: CALL_OW 273
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54010: LD_VAR 0 16
54014: PUSH
54015: LD_INT 1
54017: ARRAY
54018: PPUSH
54019: LD_VAR 0 16
54023: PUSH
54024: LD_INT 2
54026: ARRAY
54027: PPUSH
54028: CALL_OW 488
54032: IFFALSE 54063
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54034: LD_VAR 0 13
54038: PPUSH
54039: LD_VAR 0 16
54043: PUSH
54044: LD_INT 1
54046: ARRAY
54047: PPUSH
54048: LD_VAR 0 16
54052: PUSH
54053: LD_INT 2
54055: ARRAY
54056: PPUSH
54057: CALL_OW 111
// continue ;
54061: GO 53553
// end ; end ; r := GetDir ( tmp ) ;
54063: LD_ADDR_VAR 0 15
54067: PUSH
54068: LD_VAR 0 13
54072: PPUSH
54073: CALL_OW 254
54077: ST_TO_ADDR
// if r = 5 then
54078: LD_VAR 0 15
54082: PUSH
54083: LD_INT 5
54085: EQUAL
54086: IFFALSE 54096
// r := 0 ;
54088: LD_ADDR_VAR 0 15
54092: PUSH
54093: LD_INT 0
54095: ST_TO_ADDR
// for j = r to 5 do
54096: LD_ADDR_VAR 0 10
54100: PUSH
54101: DOUBLE
54102: LD_VAR 0 15
54106: DEC
54107: ST_TO_ADDR
54108: LD_INT 5
54110: PUSH
54111: FOR_TO
54112: IFFALSE 54226
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54114: LD_ADDR_VAR 0 11
54118: PUSH
54119: LD_VAR 0 13
54123: PPUSH
54124: CALL_OW 250
54128: PPUSH
54129: LD_VAR 0 10
54133: PPUSH
54134: LD_INT 2
54136: PPUSH
54137: CALL_OW 272
54141: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54142: LD_ADDR_VAR 0 12
54146: PUSH
54147: LD_VAR 0 13
54151: PPUSH
54152: CALL_OW 251
54156: PPUSH
54157: LD_VAR 0 10
54161: PPUSH
54162: LD_INT 2
54164: PPUSH
54165: CALL_OW 273
54169: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54170: LD_VAR 0 11
54174: PPUSH
54175: LD_VAR 0 12
54179: PPUSH
54180: CALL_OW 488
54184: PUSH
54185: LD_VAR 0 11
54189: PPUSH
54190: LD_VAR 0 12
54194: PPUSH
54195: CALL_OW 428
54199: NOT
54200: AND
54201: IFFALSE 54224
// begin ComMoveXY ( tmp , _x , _y ) ;
54203: LD_VAR 0 13
54207: PPUSH
54208: LD_VAR 0 11
54212: PPUSH
54213: LD_VAR 0 12
54217: PPUSH
54218: CALL_OW 111
// break ;
54222: GO 54226
// end ; end ;
54224: GO 54111
54226: POP
54227: POP
// end ; end ;
54228: GO 53553
54230: POP
54231: POP
// end ;
54232: LD_VAR 0 8
54236: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54237: LD_INT 0
54239: PPUSH
// result := true ;
54240: LD_ADDR_VAR 0 3
54244: PUSH
54245: LD_INT 1
54247: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54248: LD_VAR 0 2
54252: PUSH
54253: LD_INT 24
54255: DOUBLE
54256: EQUAL
54257: IFTRUE 54267
54259: LD_INT 33
54261: DOUBLE
54262: EQUAL
54263: IFTRUE 54267
54265: GO 54292
54267: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54268: LD_ADDR_VAR 0 3
54272: PUSH
54273: LD_INT 32
54275: PPUSH
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 321
54285: PUSH
54286: LD_INT 2
54288: EQUAL
54289: ST_TO_ADDR
54290: GO 54608
54292: LD_INT 20
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54325
54300: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54301: LD_ADDR_VAR 0 3
54305: PUSH
54306: LD_INT 6
54308: PPUSH
54309: LD_VAR 0 1
54313: PPUSH
54314: CALL_OW 321
54318: PUSH
54319: LD_INT 2
54321: EQUAL
54322: ST_TO_ADDR
54323: GO 54608
54325: LD_INT 22
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54339
54331: LD_INT 36
54333: DOUBLE
54334: EQUAL
54335: IFTRUE 54339
54337: GO 54364
54339: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54340: LD_ADDR_VAR 0 3
54344: PUSH
54345: LD_INT 15
54347: PPUSH
54348: LD_VAR 0 1
54352: PPUSH
54353: CALL_OW 321
54357: PUSH
54358: LD_INT 2
54360: EQUAL
54361: ST_TO_ADDR
54362: GO 54608
54364: LD_INT 30
54366: DOUBLE
54367: EQUAL
54368: IFTRUE 54372
54370: GO 54397
54372: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54373: LD_ADDR_VAR 0 3
54377: PUSH
54378: LD_INT 20
54380: PPUSH
54381: LD_VAR 0 1
54385: PPUSH
54386: CALL_OW 321
54390: PUSH
54391: LD_INT 2
54393: EQUAL
54394: ST_TO_ADDR
54395: GO 54608
54397: LD_INT 28
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54411
54403: LD_INT 21
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54411
54409: GO 54436
54411: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54412: LD_ADDR_VAR 0 3
54416: PUSH
54417: LD_INT 21
54419: PPUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: CALL_OW 321
54429: PUSH
54430: LD_INT 2
54432: EQUAL
54433: ST_TO_ADDR
54434: GO 54608
54436: LD_INT 16
54438: DOUBLE
54439: EQUAL
54440: IFTRUE 54444
54442: GO 54469
54444: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54445: LD_ADDR_VAR 0 3
54449: PUSH
54450: LD_INT 84
54452: PPUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: CALL_OW 321
54462: PUSH
54463: LD_INT 2
54465: EQUAL
54466: ST_TO_ADDR
54467: GO 54608
54469: LD_INT 19
54471: DOUBLE
54472: EQUAL
54473: IFTRUE 54483
54475: LD_INT 23
54477: DOUBLE
54478: EQUAL
54479: IFTRUE 54483
54481: GO 54508
54483: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54484: LD_ADDR_VAR 0 3
54488: PUSH
54489: LD_INT 83
54491: PPUSH
54492: LD_VAR 0 1
54496: PPUSH
54497: CALL_OW 321
54501: PUSH
54502: LD_INT 2
54504: EQUAL
54505: ST_TO_ADDR
54506: GO 54608
54508: LD_INT 17
54510: DOUBLE
54511: EQUAL
54512: IFTRUE 54516
54514: GO 54541
54516: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54517: LD_ADDR_VAR 0 3
54521: PUSH
54522: LD_INT 39
54524: PPUSH
54525: LD_VAR 0 1
54529: PPUSH
54530: CALL_OW 321
54534: PUSH
54535: LD_INT 2
54537: EQUAL
54538: ST_TO_ADDR
54539: GO 54608
54541: LD_INT 18
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54549
54547: GO 54574
54549: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54550: LD_ADDR_VAR 0 3
54554: PUSH
54555: LD_INT 40
54557: PPUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 321
54567: PUSH
54568: LD_INT 2
54570: EQUAL
54571: ST_TO_ADDR
54572: GO 54608
54574: LD_INT 27
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54582
54580: GO 54607
54582: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54583: LD_ADDR_VAR 0 3
54587: PUSH
54588: LD_INT 35
54590: PPUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 321
54600: PUSH
54601: LD_INT 2
54603: EQUAL
54604: ST_TO_ADDR
54605: GO 54608
54607: POP
// end ;
54608: LD_VAR 0 3
54612: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54613: LD_INT 0
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
// result := false ;
54626: LD_ADDR_VAR 0 6
54630: PUSH
54631: LD_INT 0
54633: ST_TO_ADDR
// if btype = b_depot then
54634: LD_VAR 0 2
54638: PUSH
54639: LD_INT 0
54641: EQUAL
54642: IFFALSE 54654
// begin result := true ;
54644: LD_ADDR_VAR 0 6
54648: PUSH
54649: LD_INT 1
54651: ST_TO_ADDR
// exit ;
54652: GO 55480
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54654: LD_VAR 0 1
54658: NOT
54659: PUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 266
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: IN
54680: NOT
54681: OR
54682: PUSH
54683: LD_VAR 0 2
54687: NOT
54688: OR
54689: PUSH
54690: LD_VAR 0 5
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: LD_INT 4
54709: PUSH
54710: LD_INT 5
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: IN
54721: NOT
54722: OR
54723: PUSH
54724: LD_VAR 0 3
54728: PPUSH
54729: LD_VAR 0 4
54733: PPUSH
54734: CALL_OW 488
54738: NOT
54739: OR
54740: IFFALSE 54744
// exit ;
54742: GO 55480
// side := GetSide ( depot ) ;
54744: LD_ADDR_VAR 0 9
54748: PUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 255
54758: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54759: LD_VAR 0 9
54763: PPUSH
54764: LD_VAR 0 2
54768: PPUSH
54769: CALL 54237 0 2
54773: NOT
54774: IFFALSE 54778
// exit ;
54776: GO 55480
// pom := GetBase ( depot ) ;
54778: LD_ADDR_VAR 0 10
54782: PUSH
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL_OW 274
54792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54793: LD_ADDR_VAR 0 11
54797: PUSH
54798: LD_VAR 0 2
54802: PPUSH
54803: LD_VAR 0 1
54807: PPUSH
54808: CALL_OW 248
54812: PPUSH
54813: CALL_OW 450
54817: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54818: LD_VAR 0 10
54822: PPUSH
54823: LD_INT 1
54825: PPUSH
54826: CALL_OW 275
54830: PUSH
54831: LD_VAR 0 11
54835: PUSH
54836: LD_INT 1
54838: ARRAY
54839: GREATEREQUAL
54840: PUSH
54841: LD_VAR 0 10
54845: PPUSH
54846: LD_INT 2
54848: PPUSH
54849: CALL_OW 275
54853: PUSH
54854: LD_VAR 0 11
54858: PUSH
54859: LD_INT 2
54861: ARRAY
54862: GREATEREQUAL
54863: AND
54864: PUSH
54865: LD_VAR 0 10
54869: PPUSH
54870: LD_INT 3
54872: PPUSH
54873: CALL_OW 275
54877: PUSH
54878: LD_VAR 0 11
54882: PUSH
54883: LD_INT 3
54885: ARRAY
54886: GREATEREQUAL
54887: AND
54888: NOT
54889: IFFALSE 54893
// exit ;
54891: GO 55480
// if GetBType ( depot ) = b_depot then
54893: LD_VAR 0 1
54897: PPUSH
54898: CALL_OW 266
54902: PUSH
54903: LD_INT 0
54905: EQUAL
54906: IFFALSE 54918
// dist := 28 else
54908: LD_ADDR_VAR 0 14
54912: PUSH
54913: LD_INT 28
54915: ST_TO_ADDR
54916: GO 54926
// dist := 36 ;
54918: LD_ADDR_VAR 0 14
54922: PUSH
54923: LD_INT 36
54925: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54926: LD_VAR 0 1
54930: PPUSH
54931: LD_VAR 0 3
54935: PPUSH
54936: LD_VAR 0 4
54940: PPUSH
54941: CALL_OW 297
54945: PUSH
54946: LD_VAR 0 14
54950: GREATER
54951: IFFALSE 54955
// exit ;
54953: GO 55480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54955: LD_ADDR_VAR 0 12
54959: PUSH
54960: LD_VAR 0 2
54964: PPUSH
54965: LD_VAR 0 3
54969: PPUSH
54970: LD_VAR 0 4
54974: PPUSH
54975: LD_VAR 0 5
54979: PPUSH
54980: LD_VAR 0 1
54984: PPUSH
54985: CALL_OW 248
54989: PPUSH
54990: LD_INT 0
54992: PPUSH
54993: CALL 55485 0 6
54997: ST_TO_ADDR
// if not hexes then
54998: LD_VAR 0 12
55002: NOT
55003: IFFALSE 55007
// exit ;
55005: GO 55480
// hex := GetHexInfo ( x , y ) ;
55007: LD_ADDR_VAR 0 15
55011: PUSH
55012: LD_VAR 0 3
55016: PPUSH
55017: LD_VAR 0 4
55021: PPUSH
55022: CALL_OW 546
55026: ST_TO_ADDR
// if hex [ 1 ] then
55027: LD_VAR 0 15
55031: PUSH
55032: LD_INT 1
55034: ARRAY
55035: IFFALSE 55039
// exit ;
55037: GO 55480
// height := hex [ 2 ] ;
55039: LD_ADDR_VAR 0 13
55043: PUSH
55044: LD_VAR 0 15
55048: PUSH
55049: LD_INT 2
55051: ARRAY
55052: ST_TO_ADDR
// for i = 1 to hexes do
55053: LD_ADDR_VAR 0 7
55057: PUSH
55058: DOUBLE
55059: LD_INT 1
55061: DEC
55062: ST_TO_ADDR
55063: LD_VAR 0 12
55067: PUSH
55068: FOR_TO
55069: IFFALSE 55399
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55071: LD_VAR 0 12
55075: PUSH
55076: LD_VAR 0 7
55080: ARRAY
55081: PUSH
55082: LD_INT 1
55084: ARRAY
55085: PPUSH
55086: LD_VAR 0 12
55090: PUSH
55091: LD_VAR 0 7
55095: ARRAY
55096: PUSH
55097: LD_INT 2
55099: ARRAY
55100: PPUSH
55101: CALL_OW 488
55105: NOT
55106: PUSH
55107: LD_VAR 0 12
55111: PUSH
55112: LD_VAR 0 7
55116: ARRAY
55117: PUSH
55118: LD_INT 1
55120: ARRAY
55121: PPUSH
55122: LD_VAR 0 12
55126: PUSH
55127: LD_VAR 0 7
55131: ARRAY
55132: PUSH
55133: LD_INT 2
55135: ARRAY
55136: PPUSH
55137: CALL_OW 428
55141: PUSH
55142: LD_INT 0
55144: GREATER
55145: OR
55146: PUSH
55147: LD_VAR 0 12
55151: PUSH
55152: LD_VAR 0 7
55156: ARRAY
55157: PUSH
55158: LD_INT 1
55160: ARRAY
55161: PPUSH
55162: LD_VAR 0 12
55166: PUSH
55167: LD_VAR 0 7
55171: ARRAY
55172: PUSH
55173: LD_INT 2
55175: ARRAY
55176: PPUSH
55177: CALL_OW 351
55181: OR
55182: IFFALSE 55188
// exit ;
55184: POP
55185: POP
55186: GO 55480
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55188: LD_ADDR_VAR 0 8
55192: PUSH
55193: LD_VAR 0 12
55197: PUSH
55198: LD_VAR 0 7
55202: ARRAY
55203: PUSH
55204: LD_INT 1
55206: ARRAY
55207: PPUSH
55208: LD_VAR 0 12
55212: PUSH
55213: LD_VAR 0 7
55217: ARRAY
55218: PUSH
55219: LD_INT 2
55221: ARRAY
55222: PPUSH
55223: CALL_OW 546
55227: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55228: LD_VAR 0 8
55232: PUSH
55233: LD_INT 1
55235: ARRAY
55236: PUSH
55237: LD_VAR 0 8
55241: PUSH
55242: LD_INT 2
55244: ARRAY
55245: PUSH
55246: LD_VAR 0 13
55250: PUSH
55251: LD_INT 2
55253: PLUS
55254: GREATER
55255: OR
55256: PUSH
55257: LD_VAR 0 8
55261: PUSH
55262: LD_INT 2
55264: ARRAY
55265: PUSH
55266: LD_VAR 0 13
55270: PUSH
55271: LD_INT 2
55273: MINUS
55274: LESS
55275: OR
55276: PUSH
55277: LD_VAR 0 8
55281: PUSH
55282: LD_INT 3
55284: ARRAY
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 8
55291: PUSH
55292: LD_INT 9
55294: PUSH
55295: LD_INT 10
55297: PUSH
55298: LD_INT 11
55300: PUSH
55301: LD_INT 12
55303: PUSH
55304: LD_INT 13
55306: PUSH
55307: LD_INT 16
55309: PUSH
55310: LD_INT 17
55312: PUSH
55313: LD_INT 18
55315: PUSH
55316: LD_INT 19
55318: PUSH
55319: LD_INT 20
55321: PUSH
55322: LD_INT 21
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: IN
55340: NOT
55341: OR
55342: PUSH
55343: LD_VAR 0 8
55347: PUSH
55348: LD_INT 5
55350: ARRAY
55351: NOT
55352: OR
55353: PUSH
55354: LD_VAR 0 8
55358: PUSH
55359: LD_INT 6
55361: ARRAY
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 7
55371: PUSH
55372: LD_INT 9
55374: PUSH
55375: LD_INT 10
55377: PUSH
55378: LD_INT 11
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: IN
55389: NOT
55390: OR
55391: IFFALSE 55397
// exit ;
55393: POP
55394: POP
55395: GO 55480
// end ;
55397: GO 55068
55399: POP
55400: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55401: LD_VAR 0 9
55405: PPUSH
55406: LD_VAR 0 3
55410: PPUSH
55411: LD_VAR 0 4
55415: PPUSH
55416: LD_INT 20
55418: PPUSH
55419: CALL 47403 0 4
55423: PUSH
55424: LD_INT 4
55426: ARRAY
55427: IFFALSE 55431
// exit ;
55429: GO 55480
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55431: LD_VAR 0 2
55435: PUSH
55436: LD_INT 29
55438: PUSH
55439: LD_INT 30
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: IN
55446: PUSH
55447: LD_VAR 0 3
55451: PPUSH
55452: LD_VAR 0 4
55456: PPUSH
55457: LD_VAR 0 9
55461: PPUSH
55462: CALL_OW 440
55466: NOT
55467: AND
55468: IFFALSE 55472
// exit ;
55470: GO 55480
// result := true ;
55472: LD_ADDR_VAR 0 6
55476: PUSH
55477: LD_INT 1
55479: ST_TO_ADDR
// end ;
55480: LD_VAR 0 6
55484: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55485: LD_INT 0
55487: PPUSH
55488: PPUSH
55489: PPUSH
55490: PPUSH
55491: PPUSH
55492: PPUSH
55493: PPUSH
55494: PPUSH
55495: PPUSH
55496: PPUSH
55497: PPUSH
55498: PPUSH
55499: PPUSH
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
55504: PPUSH
55505: PPUSH
55506: PPUSH
55507: PPUSH
55508: PPUSH
55509: PPUSH
55510: PPUSH
55511: PPUSH
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
55516: PPUSH
55517: PPUSH
55518: PPUSH
55519: PPUSH
55520: PPUSH
55521: PPUSH
55522: PPUSH
55523: PPUSH
55524: PPUSH
55525: PPUSH
55526: PPUSH
55527: PPUSH
55528: PPUSH
55529: PPUSH
55530: PPUSH
55531: PPUSH
55532: PPUSH
55533: PPUSH
55534: PPUSH
55535: PPUSH
55536: PPUSH
55537: PPUSH
55538: PPUSH
55539: PPUSH
55540: PPUSH
55541: PPUSH
55542: PPUSH
55543: PPUSH
55544: PPUSH
// result = [ ] ;
55545: LD_ADDR_VAR 0 7
55549: PUSH
55550: EMPTY
55551: ST_TO_ADDR
// temp_list = [ ] ;
55552: LD_ADDR_VAR 0 9
55556: PUSH
55557: EMPTY
55558: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55559: LD_VAR 0 4
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: LD_INT 5
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: IN
55590: NOT
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: IN
55607: PUSH
55608: LD_VAR 0 5
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: IN
55627: NOT
55628: AND
55629: OR
55630: IFFALSE 55634
// exit ;
55632: GO 74025
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55634: LD_VAR 0 1
55638: PUSH
55639: LD_INT 6
55641: PUSH
55642: LD_INT 7
55644: PUSH
55645: LD_INT 8
55647: PUSH
55648: LD_INT 13
55650: PUSH
55651: LD_INT 12
55653: PUSH
55654: LD_INT 15
55656: PUSH
55657: LD_INT 11
55659: PUSH
55660: LD_INT 14
55662: PUSH
55663: LD_INT 10
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: IN
55677: IFFALSE 55687
// btype = b_lab ;
55679: LD_ADDR_VAR 0 1
55683: PUSH
55684: LD_INT 6
55686: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55687: LD_VAR 0 6
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: IN
55706: NOT
55707: PUSH
55708: LD_VAR 0 1
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: LD_INT 6
55727: PUSH
55728: LD_INT 36
55730: PUSH
55731: LD_INT 4
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: LD_INT 31
55739: PUSH
55740: LD_INT 32
55742: PUSH
55743: LD_INT 33
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: IN
55759: NOT
55760: PUSH
55761: LD_VAR 0 6
55765: PUSH
55766: LD_INT 1
55768: EQUAL
55769: AND
55770: OR
55771: PUSH
55772: LD_VAR 0 1
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: IN
55787: NOT
55788: PUSH
55789: LD_VAR 0 6
55793: PUSH
55794: LD_INT 2
55796: EQUAL
55797: AND
55798: OR
55799: IFFALSE 55809
// mode = 0 ;
55801: LD_ADDR_VAR 0 6
55805: PUSH
55806: LD_INT 0
55808: ST_TO_ADDR
// case mode of 0 :
55809: LD_VAR 0 6
55813: PUSH
55814: LD_INT 0
55816: DOUBLE
55817: EQUAL
55818: IFTRUE 55822
55820: GO 67275
55822: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55823: LD_ADDR_VAR 0 11
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56016: LD_ADDR_VAR 0 12
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56212: LD_ADDR_VAR 0 13
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56411: LD_ADDR_VAR 0 14
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56607: LD_ADDR_VAR 0 15
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56800: LD_ADDR_VAR 0 16
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56993: LD_ADDR_VAR 0 17
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57223: LD_ADDR_VAR 0 18
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 19
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57683: LD_ADDR_VAR 0 20
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57913: LD_ADDR_VAR 0 21
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58143: LD_ADDR_VAR 0 22
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58373: LD_ADDR_VAR 0 23
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58653: LD_ADDR_VAR 0 24
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58929: LD_ADDR_VAR 0 25
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59203: LD_ADDR_VAR 0 26
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59479: LD_ADDR_VAR 0 27
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59759: LD_ADDR_VAR 0 28
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60041: LD_ADDR_VAR 0 29
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60320: LD_ADDR_VAR 0 30
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60598: LD_ADDR_VAR 0 31
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60876: LD_ADDR_VAR 0 32
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61154: LD_ADDR_VAR 0 33
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61433: LD_ADDR_VAR 0 34
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61713: LD_ADDR_VAR 0 35
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61825: LD_ADDR_VAR 0 36
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61937: LD_ADDR_VAR 0 37
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62049: LD_ADDR_VAR 0 38
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62161: LD_ADDR_VAR 0 39
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62273: LD_ADDR_VAR 0 40
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62385: LD_ADDR_VAR 0 41
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 2
62540: NEG
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62735: LD_ADDR_VAR 0 42
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: LD_INT 2
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 3
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 3
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 3
63044: NEG
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63085: LD_ADDR_VAR 0 43
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 3
63381: NEG
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63433: LD_ADDR_VAR 0 44
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: LD_INT 3
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: LD_INT 3
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: NEG
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63783: LD_ADDR_VAR 0 45
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64133: LD_ADDR_VAR 0 46
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 3
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64481: LD_ADDR_VAR 0 47
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: NEG
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64632: LD_ADDR_VAR 0 48
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: LD_INT 2
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 2
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64779: LD_ADDR_VAR 0 49
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 1
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64923: LD_ADDR_VAR 0 50
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65067: LD_ADDR_VAR 0 51
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65214: LD_ADDR_VAR 0 52
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65365: LD_ADDR_VAR 0 53
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65595: LD_ADDR_VAR 0 54
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 2
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65825: LD_ADDR_VAR 0 55
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66055: LD_ADDR_VAR 0 56
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 2
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66285: LD_ADDR_VAR 0 57
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 2
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 2
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 2
66461: NEG
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: NEG
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66515: LD_ADDR_VAR 0 58
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 2
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66745: LD_ADDR_VAR 0 59
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66833: LD_ADDR_VAR 0 60
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66921: LD_ADDR_VAR 0 61
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: LD_INT 1
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67009: LD_ADDR_VAR 0 62
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 1
67067: NEG
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67097: LD_ADDR_VAR 0 63
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67185: LD_ADDR_VAR 0 64
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 1
67243: NEG
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: ST_TO_ADDR
// end ; 1 :
67273: GO 73170
67275: LD_INT 1
67277: DOUBLE
67278: EQUAL
67279: IFTRUE 67283
67281: GO 69906
67283: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67284: LD_ADDR_VAR 0 11
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 3
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: LD_INT 3
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67328: LD_ADDR_VAR 0 12
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67369: LD_ADDR_VAR 0 13
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 3
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67409: LD_ADDR_VAR 0 14
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: LD_INT 3
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67450: LD_ADDR_VAR 0 15
67454: PUSH
67455: LD_INT 2
67457: NEG
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 3
67479: NEG
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: LIST
67493: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67494: LD_ADDR_VAR 0 16
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: NEG
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67540: LD_ADDR_VAR 0 17
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 1
67570: PUSH
67571: LD_INT 2
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67584: LD_ADDR_VAR 0 18
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 3
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: LIST
67624: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67625: LD_ADDR_VAR 0 19
67629: PUSH
67630: LD_INT 3
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 3
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 3
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67665: LD_ADDR_VAR 0 20
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67706: LD_ADDR_VAR 0 21
67710: PUSH
67711: LD_INT 2
67713: NEG
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67750: LD_ADDR_VAR 0 22
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: NEG
67782: PUSH
67783: LD_INT 3
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67796: LD_ADDR_VAR 0 23
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 3
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: LD_INT 4
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67840: LD_ADDR_VAR 0 24
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 3
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 4
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67881: LD_ADDR_VAR 0 25
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: LD_INT 3
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 4
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67921: LD_ADDR_VAR 0 26
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: LD_INT 4
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67962: LD_ADDR_VAR 0 27
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68006: LD_ADDR_VAR 0 28
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 4
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68052: LD_ADDR_VAR 0 29
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 4
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 3
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: LD_INT 5
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: LD_INT 5
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: LD_INT 6
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 6
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: LD_INT 5
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68207: LD_ADDR_VAR 0 30
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 3
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 4
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 4
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 5
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 5
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 6
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 6
68328: PUSH
68329: LD_INT 1
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68350: LD_ADDR_VAR 0 31
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: LD_INT 2
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: LD_INT 4
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: LD_INT 4
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: PUSH
68428: LD_INT 5
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 4
68437: PUSH
68438: LD_INT 5
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 6
68447: PUSH
68448: LD_INT 5
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 6
68457: PUSH
68458: LD_INT 6
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 5
68467: PUSH
68468: LD_INT 6
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68489: LD_ADDR_VAR 0 32
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: LD_INT 2
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 4
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: NEG
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: LD_INT 5
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 5
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 6
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 6
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 5
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68632: LD_ADDR_VAR 0 33
68636: PUSH
68637: LD_INT 2
68639: NEG
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: NEG
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 4
68695: NEG
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 4
68707: NEG
68708: PUSH
68709: LD_INT 1
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 5
68718: NEG
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 5
68729: NEG
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 5
68741: NEG
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 6
68752: NEG
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 6
68763: NEG
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68787: LD_ADDR_VAR 0 34
68791: PUSH
68792: LD_INT 2
68794: NEG
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 3
68830: NEG
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: NEG
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 4
68854: NEG
68855: PUSH
68856: LD_INT 4
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 4
68866: NEG
68867: PUSH
68868: LD_INT 5
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 5
68878: NEG
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: LD_INT 5
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: NEG
68903: PUSH
68904: LD_INT 6
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 6
68914: NEG
68915: PUSH
68916: LD_INT 5
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 6
68926: NEG
68927: PUSH
68928: LD_INT 6
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68950: LD_ADDR_VAR 0 41
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 1
68980: PUSH
68981: LD_INT 2
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68994: LD_ADDR_VAR 0 42
68998: PUSH
68999: LD_INT 2
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 2
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69035: LD_ADDR_VAR 0 43
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 2
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: LIST
69074: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69075: LD_ADDR_VAR 0 44
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 1
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: LD_INT 2
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69116: LD_ADDR_VAR 0 45
69120: PUSH
69121: LD_INT 2
69123: NEG
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69160: LD_ADDR_VAR 0 46
69164: PUSH
69165: LD_INT 2
69167: NEG
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 2
69179: NEG
69180: PUSH
69181: LD_INT 3
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: NEG
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: LIST
69205: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69206: LD_ADDR_VAR 0 47
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: LD_INT 3
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: PUSH
69227: LD_INT 3
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69239: LD_ADDR_VAR 0 48
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69270: LD_ADDR_VAR 0 49
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: LD_INT 2
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69299: LD_ADDR_VAR 0 50
69303: PUSH
69304: LD_INT 2
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69328: LD_ADDR_VAR 0 51
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 2
69346: NEG
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69359: LD_ADDR_VAR 0 52
69363: PUSH
69364: LD_INT 3
69366: NEG
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69392: LD_ADDR_VAR 0 53
69396: PUSH
69397: LD_INT 1
69399: NEG
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: LD_INT 3
69414: NEG
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: LD_INT 2
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: LIST
69435: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69436: LD_ADDR_VAR 0 54
69440: PUSH
69441: LD_INT 2
69443: PUSH
69444: LD_INT 1
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 3
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 3
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69477: LD_ADDR_VAR 0 55
69481: PUSH
69482: LD_INT 3
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 2
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69517: LD_ADDR_VAR 0 56
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: LD_INT 3
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 3
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: LIST
69557: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69558: LD_ADDR_VAR 0 57
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 3
69587: NEG
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69602: LD_ADDR_VAR 0 58
69606: PUSH
69607: LD_INT 2
69609: NEG
69610: PUSH
69611: LD_INT 3
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 3
69621: NEG
69622: PUSH
69623: LD_INT 2
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: LD_INT 3
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69648: LD_ADDR_VAR 0 59
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: LD_INT 2
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 2
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 1
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69692: LD_ADDR_VAR 0 60
69696: PUSH
69697: LD_INT 1
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: LIST
69732: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69733: LD_ADDR_VAR 0 61
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: LD_INT 1
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 2
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69773: LD_ADDR_VAR 0 62
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: LD_INT 2
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69814: LD_ADDR_VAR 0 63
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 2
69843: NEG
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69858: LD_ADDR_VAR 0 64
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 2
69877: NEG
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: NEG
69890: PUSH
69891: LD_INT 2
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: ST_TO_ADDR
// end ; 2 :
69904: GO 73170
69906: LD_INT 2
69908: DOUBLE
69909: EQUAL
69910: IFTRUE 69914
69912: GO 73169
69914: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69915: LD_ADDR_VAR 0 29
69919: PUSH
69920: LD_INT 4
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 4
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 5
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 5
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 4
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 3
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 5
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 3
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 4
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 2
70075: PUSH
70076: LD_INT 2
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 4
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 2
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: LD_INT 4
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: LD_INT 5
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: LD_INT 4
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: LD_INT 3
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: LD_INT 5
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 2
70187: NEG
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: NEG
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 3
70209: NEG
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 2
70221: NEG
70222: PUSH
70223: LD_INT 0
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: NEG
70244: PUSH
70245: LD_INT 1
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 4
70254: NEG
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 4
70265: NEG
70266: PUSH
70267: LD_INT 1
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 4
70277: NEG
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 2
70289: NEG
70290: PUSH
70291: LD_INT 2
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: LD_INT 4
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: LD_INT 5
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: LD_INT 4
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: LD_INT 3
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 5
70360: NEG
70361: PUSH
70362: LD_INT 4
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 5
70372: NEG
70373: PUSH
70374: LD_INT 5
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: NEG
70385: PUSH
70386: LD_INT 5
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 5
70396: NEG
70397: PUSH
70398: LD_INT 3
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70453: LD_ADDR_VAR 0 30
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 5
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 5
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 3
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 3
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 5
70530: PUSH
70531: LD_INT 3
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: PUSH
70541: LD_INT 5
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 2
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 1
70600: NEG
70601: PUSH
70602: LD_INT 3
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 4
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: NEG
70633: PUSH
70634: LD_INT 2
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 4
70643: NEG
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 4
70654: NEG
70655: PUSH
70656: LD_INT 1
70658: NEG
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 3
70666: NEG
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 3
70677: NEG
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: LD_INT 1
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 5
70699: NEG
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 5
70710: NEG
70711: PUSH
70712: LD_INT 1
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 5
70722: NEG
70723: PUSH
70724: LD_INT 2
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 3
70734: NEG
70735: PUSH
70736: LD_INT 2
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: LD_INT 3
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: NEG
70758: PUSH
70759: LD_INT 4
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 2
70769: NEG
70770: PUSH
70771: LD_INT 3
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: NEG
70782: PUSH
70783: LD_INT 2
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: LD_INT 2
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: LD_INT 3
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 4
70817: NEG
70818: PUSH
70819: LD_INT 4
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 4
70841: NEG
70842: PUSH
70843: LD_INT 2
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 4
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 0
70864: PUSH
70865: LD_INT 5
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: LD_INT 4
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: PUSH
70887: LD_INT 3
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: LD_INT 3
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: LD_INT 4
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: LD_INT 5
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 2
70932: PUSH
70933: LD_INT 3
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 2
70943: NEG
70944: PUSH
70945: LD_INT 5
70947: NEG
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71000: LD_ADDR_VAR 0 31
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: LD_INT 4
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: LD_INT 3
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: LD_INT 4
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: LD_INT 5
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: LD_INT 5
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: LD_INT 4
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: LD_INT 5
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 2
71089: NEG
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 3
71100: NEG
71101: PUSH
71102: LD_INT 0
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 3
71111: NEG
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: LD_INT 0
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 2
71134: NEG
71135: PUSH
71136: LD_INT 1
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: NEG
71157: PUSH
71158: LD_INT 0
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 4
71167: NEG
71168: PUSH
71169: LD_INT 1
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 4
71179: NEG
71180: PUSH
71181: LD_INT 2
71183: NEG
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 2
71191: NEG
71192: PUSH
71193: LD_INT 2
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: LD_INT 4
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 4
71214: NEG
71215: PUSH
71216: LD_INT 5
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: LD_INT 4
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 3
71238: NEG
71239: PUSH
71240: LD_INT 3
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 4
71250: NEG
71251: PUSH
71252: LD_INT 3
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 5
71262: NEG
71263: PUSH
71264: LD_INT 4
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 5
71274: NEG
71275: PUSH
71276: LD_INT 5
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: LD_INT 5
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 5
71298: NEG
71299: PUSH
71300: LD_INT 3
71302: NEG
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: LD_INT 3
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 0
71321: PUSH
71322: LD_INT 4
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 1
71332: PUSH
71333: LD_INT 3
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: LD_INT 2
71346: NEG
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: LD_INT 3
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 1
71377: NEG
71378: PUSH
71379: LD_INT 4
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 2
71389: PUSH
71390: LD_INT 2
71392: NEG
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 2
71400: NEG
71401: PUSH
71402: LD_INT 4
71404: NEG
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 4
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 4
71422: PUSH
71423: LD_INT 1
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 5
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 5
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 3
71484: PUSH
71485: LD_INT 2
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 5
71495: PUSH
71496: LD_INT 2
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71550: LD_ADDR_VAR 0 32
71554: PUSH
71555: LD_INT 4
71557: NEG
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 4
71568: NEG
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 3
71580: NEG
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 3
71591: NEG
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 4
71602: NEG
71603: PUSH
71604: LD_INT 1
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 5
71613: NEG
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 5
71624: NEG
71625: PUSH
71626: LD_INT 1
71628: NEG
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 5
71636: NEG
71637: PUSH
71638: LD_INT 2
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 3
71648: NEG
71649: PUSH
71650: LD_INT 2
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: LD_INT 3
71663: NEG
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 3
71671: NEG
71672: PUSH
71673: LD_INT 4
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 2
71683: NEG
71684: PUSH
71685: LD_INT 3
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 2
71695: NEG
71696: PUSH
71697: LD_INT 2
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: NEG
71708: PUSH
71709: LD_INT 2
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 4
71719: NEG
71720: PUSH
71721: LD_INT 3
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 4
71731: NEG
71732: PUSH
71733: LD_INT 4
71735: NEG
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 2
71743: NEG
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 4
71755: NEG
71756: PUSH
71757: LD_INT 2
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: LD_INT 4
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: LD_INT 5
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: PUSH
71790: LD_INT 4
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: LD_INT 3
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 0
71811: PUSH
71812: LD_INT 3
71814: NEG
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 1
71822: NEG
71823: PUSH
71824: LD_INT 4
71826: NEG
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 1
71834: NEG
71835: PUSH
71836: LD_INT 5
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: LD_INT 3
71849: NEG
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 2
71857: NEG
71858: PUSH
71859: LD_INT 5
71861: NEG
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 3
71869: PUSH
71870: LD_INT 0
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: LD_INT 1
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 4
71890: PUSH
71891: LD_INT 0
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 4
71900: PUSH
71901: LD_INT 1
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: LD_INT 1
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 2
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 2
71930: PUSH
71931: LD_INT 1
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 2
71941: PUSH
71942: LD_INT 2
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 4
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 4
71962: PUSH
71963: LD_INT 4
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 3
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 5
71982: PUSH
71983: LD_INT 4
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 5
71992: PUSH
71993: LD_INT 5
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 4
72002: PUSH
72003: LD_INT 5
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: LD_INT 4
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 3
72022: PUSH
72023: LD_INT 3
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 5
72032: PUSH
72033: LD_INT 3
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 3
72042: PUSH
72043: LD_INT 5
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72097: LD_ADDR_VAR 0 33
72101: PUSH
72102: LD_INT 4
72104: NEG
72105: PUSH
72106: LD_INT 4
72108: NEG
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 4
72116: NEG
72117: PUSH
72118: LD_INT 5
72120: NEG
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 3
72128: NEG
72129: PUSH
72130: LD_INT 4
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 3
72140: NEG
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 4
72152: NEG
72153: PUSH
72154: LD_INT 3
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 5
72164: NEG
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 5
72176: NEG
72177: PUSH
72178: LD_INT 5
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 3
72188: NEG
72189: PUSH
72190: LD_INT 5
72192: NEG
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 5
72200: NEG
72201: PUSH
72202: LD_INT 3
72204: NEG
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 0
72212: PUSH
72213: LD_INT 3
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 0
72223: PUSH
72224: LD_INT 4
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: LD_INT 3
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 1
72245: PUSH
72246: LD_INT 2
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: LD_INT 2
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: NEG
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 1
72279: NEG
72280: PUSH
72281: LD_INT 4
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: PUSH
72292: LD_INT 2
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 2
72302: NEG
72303: PUSH
72304: LD_INT 4
72306: NEG
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 4
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 4
72324: PUSH
72325: LD_INT 1
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 5
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 5
72345: PUSH
72346: LD_INT 1
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 4
72355: PUSH
72356: LD_INT 1
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 3
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 3
72375: PUSH
72376: LD_INT 1
72378: NEG
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 3
72386: PUSH
72387: LD_INT 2
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 5
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 3
72407: PUSH
72408: LD_INT 3
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 3
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 4
72427: PUSH
72428: LD_INT 3
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 4
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 3
72447: PUSH
72448: LD_INT 4
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 2
72457: PUSH
72458: LD_INT 3
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 2
72467: PUSH
72468: LD_INT 2
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 4
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 4
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 0
72497: PUSH
72498: LD_INT 4
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: LD_INT 3
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: PUSH
72518: LD_INT 4
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 1
72527: PUSH
72528: LD_INT 5
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 0
72537: PUSH
72538: LD_INT 5
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 1
72547: NEG
72548: PUSH
72549: LD_INT 4
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: PUSH
72560: LD_INT 3
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 2
72569: PUSH
72570: LD_INT 5
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 2
72579: NEG
72580: PUSH
72581: LD_INT 3
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72635: LD_ADDR_VAR 0 34
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: LD_INT 4
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: LD_INT 5
72656: NEG
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 1
72664: PUSH
72665: LD_INT 4
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 1
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 0
72686: PUSH
72687: LD_INT 3
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: PUSH
72699: LD_INT 4
72701: NEG
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 1
72709: NEG
72710: PUSH
72711: LD_INT 5
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 2
72721: PUSH
72722: LD_INT 3
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 2
72732: NEG
72733: PUSH
72734: LD_INT 5
72736: NEG
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 3
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: LD_INT 1
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 4
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 4
72775: PUSH
72776: LD_INT 1
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 3
72785: PUSH
72786: LD_INT 1
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 2
72795: PUSH
72796: LD_INT 0
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: LD_INT 1
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 2
72816: PUSH
72817: LD_INT 2
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 4
72827: PUSH
72828: LD_INT 2
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 4
72837: PUSH
72838: LD_INT 4
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 4
72847: PUSH
72848: LD_INT 3
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 5
72857: PUSH
72858: LD_INT 4
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 5
72867: PUSH
72868: LD_INT 5
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 4
72877: PUSH
72878: LD_INT 5
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 3
72887: PUSH
72888: LD_INT 4
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 3
72897: PUSH
72898: LD_INT 3
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 5
72907: PUSH
72908: LD_INT 3
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 3
72917: PUSH
72918: LD_INT 5
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: LD_INT 3
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: LD_INT 2
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 1
72947: PUSH
72948: LD_INT 3
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 1
72957: PUSH
72958: LD_INT 4
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: LD_INT 4
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 1
72977: NEG
72978: PUSH
72979: LD_INT 3
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: LD_INT 2
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 2
72999: PUSH
73000: LD_INT 4
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 2
73009: NEG
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 4
73020: NEG
73021: PUSH
73022: LD_INT 0
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 4
73031: NEG
73032: PUSH
73033: LD_INT 1
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 3
73043: NEG
73044: PUSH
73045: LD_INT 0
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 3
73054: NEG
73055: PUSH
73056: LD_INT 1
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 4
73065: NEG
73066: PUSH
73067: LD_INT 1
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 5
73076: NEG
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 5
73087: NEG
73088: PUSH
73089: LD_INT 1
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 5
73099: NEG
73100: PUSH
73101: LD_INT 2
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: NEG
73112: PUSH
73113: LD_INT 2
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: ST_TO_ADDR
// end ; end ;
73167: GO 73170
73169: POP
// case btype of b_depot , b_warehouse :
73170: LD_VAR 0 1
73174: PUSH
73175: LD_INT 0
73177: DOUBLE
73178: EQUAL
73179: IFTRUE 73189
73181: LD_INT 1
73183: DOUBLE
73184: EQUAL
73185: IFTRUE 73189
73187: GO 73390
73189: POP
// case nation of nation_american :
73190: LD_VAR 0 5
73194: PUSH
73195: LD_INT 1
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73203
73201: GO 73259
73203: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73204: LD_ADDR_VAR 0 9
73208: PUSH
73209: LD_VAR 0 11
73213: PUSH
73214: LD_VAR 0 12
73218: PUSH
73219: LD_VAR 0 13
73223: PUSH
73224: LD_VAR 0 14
73228: PUSH
73229: LD_VAR 0 15
73233: PUSH
73234: LD_VAR 0 16
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 4
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: ARRAY
73256: ST_TO_ADDR
73257: GO 73388
73259: LD_INT 2
73261: DOUBLE
73262: EQUAL
73263: IFTRUE 73267
73265: GO 73323
73267: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73268: LD_ADDR_VAR 0 9
73272: PUSH
73273: LD_VAR 0 17
73277: PUSH
73278: LD_VAR 0 18
73282: PUSH
73283: LD_VAR 0 19
73287: PUSH
73288: LD_VAR 0 20
73292: PUSH
73293: LD_VAR 0 21
73297: PUSH
73298: LD_VAR 0 22
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: PUSH
73311: LD_VAR 0 4
73315: PUSH
73316: LD_INT 1
73318: PLUS
73319: ARRAY
73320: ST_TO_ADDR
73321: GO 73388
73323: LD_INT 3
73325: DOUBLE
73326: EQUAL
73327: IFTRUE 73331
73329: GO 73387
73331: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73332: LD_ADDR_VAR 0 9
73336: PUSH
73337: LD_VAR 0 23
73341: PUSH
73342: LD_VAR 0 24
73346: PUSH
73347: LD_VAR 0 25
73351: PUSH
73352: LD_VAR 0 26
73356: PUSH
73357: LD_VAR 0 27
73361: PUSH
73362: LD_VAR 0 28
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: PUSH
73375: LD_VAR 0 4
73379: PUSH
73380: LD_INT 1
73382: PLUS
73383: ARRAY
73384: ST_TO_ADDR
73385: GO 73388
73387: POP
73388: GO 73943
73390: LD_INT 2
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73404
73396: LD_INT 3
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73404
73402: GO 73460
73404: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73405: LD_ADDR_VAR 0 9
73409: PUSH
73410: LD_VAR 0 29
73414: PUSH
73415: LD_VAR 0 30
73419: PUSH
73420: LD_VAR 0 31
73424: PUSH
73425: LD_VAR 0 32
73429: PUSH
73430: LD_VAR 0 33
73434: PUSH
73435: LD_VAR 0 34
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: PUSH
73448: LD_VAR 0 4
73452: PUSH
73453: LD_INT 1
73455: PLUS
73456: ARRAY
73457: ST_TO_ADDR
73458: GO 73943
73460: LD_INT 16
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73522
73466: LD_INT 17
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73522
73472: LD_INT 18
73474: DOUBLE
73475: EQUAL
73476: IFTRUE 73522
73478: LD_INT 19
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73522
73484: LD_INT 22
73486: DOUBLE
73487: EQUAL
73488: IFTRUE 73522
73490: LD_INT 20
73492: DOUBLE
73493: EQUAL
73494: IFTRUE 73522
73496: LD_INT 21
73498: DOUBLE
73499: EQUAL
73500: IFTRUE 73522
73502: LD_INT 23
73504: DOUBLE
73505: EQUAL
73506: IFTRUE 73522
73508: LD_INT 24
73510: DOUBLE
73511: EQUAL
73512: IFTRUE 73522
73514: LD_INT 25
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73578
73522: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73523: LD_ADDR_VAR 0 9
73527: PUSH
73528: LD_VAR 0 35
73532: PUSH
73533: LD_VAR 0 36
73537: PUSH
73538: LD_VAR 0 37
73542: PUSH
73543: LD_VAR 0 38
73547: PUSH
73548: LD_VAR 0 39
73552: PUSH
73553: LD_VAR 0 40
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: LD_VAR 0 4
73570: PUSH
73571: LD_INT 1
73573: PLUS
73574: ARRAY
73575: ST_TO_ADDR
73576: GO 73943
73578: LD_INT 6
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73634
73584: LD_INT 7
73586: DOUBLE
73587: EQUAL
73588: IFTRUE 73634
73590: LD_INT 8
73592: DOUBLE
73593: EQUAL
73594: IFTRUE 73634
73596: LD_INT 13
73598: DOUBLE
73599: EQUAL
73600: IFTRUE 73634
73602: LD_INT 12
73604: DOUBLE
73605: EQUAL
73606: IFTRUE 73634
73608: LD_INT 15
73610: DOUBLE
73611: EQUAL
73612: IFTRUE 73634
73614: LD_INT 11
73616: DOUBLE
73617: EQUAL
73618: IFTRUE 73634
73620: LD_INT 14
73622: DOUBLE
73623: EQUAL
73624: IFTRUE 73634
73626: LD_INT 10
73628: DOUBLE
73629: EQUAL
73630: IFTRUE 73634
73632: GO 73690
73634: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73635: LD_ADDR_VAR 0 9
73639: PUSH
73640: LD_VAR 0 41
73644: PUSH
73645: LD_VAR 0 42
73649: PUSH
73650: LD_VAR 0 43
73654: PUSH
73655: LD_VAR 0 44
73659: PUSH
73660: LD_VAR 0 45
73664: PUSH
73665: LD_VAR 0 46
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: PUSH
73678: LD_VAR 0 4
73682: PUSH
73683: LD_INT 1
73685: PLUS
73686: ARRAY
73687: ST_TO_ADDR
73688: GO 73943
73690: LD_INT 36
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73698
73696: GO 73754
73698: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73699: LD_ADDR_VAR 0 9
73703: PUSH
73704: LD_VAR 0 47
73708: PUSH
73709: LD_VAR 0 48
73713: PUSH
73714: LD_VAR 0 49
73718: PUSH
73719: LD_VAR 0 50
73723: PUSH
73724: LD_VAR 0 51
73728: PUSH
73729: LD_VAR 0 52
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: PUSH
73742: LD_VAR 0 4
73746: PUSH
73747: LD_INT 1
73749: PLUS
73750: ARRAY
73751: ST_TO_ADDR
73752: GO 73943
73754: LD_INT 4
73756: DOUBLE
73757: EQUAL
73758: IFTRUE 73780
73760: LD_INT 5
73762: DOUBLE
73763: EQUAL
73764: IFTRUE 73780
73766: LD_INT 34
73768: DOUBLE
73769: EQUAL
73770: IFTRUE 73780
73772: LD_INT 37
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73780
73778: GO 73836
73780: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73781: LD_ADDR_VAR 0 9
73785: PUSH
73786: LD_VAR 0 53
73790: PUSH
73791: LD_VAR 0 54
73795: PUSH
73796: LD_VAR 0 55
73800: PUSH
73801: LD_VAR 0 56
73805: PUSH
73806: LD_VAR 0 57
73810: PUSH
73811: LD_VAR 0 58
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 4
73828: PUSH
73829: LD_INT 1
73831: PLUS
73832: ARRAY
73833: ST_TO_ADDR
73834: GO 73943
73836: LD_INT 31
73838: DOUBLE
73839: EQUAL
73840: IFTRUE 73886
73842: LD_INT 32
73844: DOUBLE
73845: EQUAL
73846: IFTRUE 73886
73848: LD_INT 33
73850: DOUBLE
73851: EQUAL
73852: IFTRUE 73886
73854: LD_INT 27
73856: DOUBLE
73857: EQUAL
73858: IFTRUE 73886
73860: LD_INT 26
73862: DOUBLE
73863: EQUAL
73864: IFTRUE 73886
73866: LD_INT 28
73868: DOUBLE
73869: EQUAL
73870: IFTRUE 73886
73872: LD_INT 29
73874: DOUBLE
73875: EQUAL
73876: IFTRUE 73886
73878: LD_INT 30
73880: DOUBLE
73881: EQUAL
73882: IFTRUE 73886
73884: GO 73942
73886: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73887: LD_ADDR_VAR 0 9
73891: PUSH
73892: LD_VAR 0 59
73896: PUSH
73897: LD_VAR 0 60
73901: PUSH
73902: LD_VAR 0 61
73906: PUSH
73907: LD_VAR 0 62
73911: PUSH
73912: LD_VAR 0 63
73916: PUSH
73917: LD_VAR 0 64
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: PUSH
73930: LD_VAR 0 4
73934: PUSH
73935: LD_INT 1
73937: PLUS
73938: ARRAY
73939: ST_TO_ADDR
73940: GO 73943
73942: POP
// temp_list2 = [ ] ;
73943: LD_ADDR_VAR 0 10
73947: PUSH
73948: EMPTY
73949: ST_TO_ADDR
// for i in temp_list do
73950: LD_ADDR_VAR 0 8
73954: PUSH
73955: LD_VAR 0 9
73959: PUSH
73960: FOR_IN
73961: IFFALSE 74013
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73963: LD_ADDR_VAR 0 10
73967: PUSH
73968: LD_VAR 0 10
73972: PUSH
73973: LD_VAR 0 8
73977: PUSH
73978: LD_INT 1
73980: ARRAY
73981: PUSH
73982: LD_VAR 0 2
73986: PLUS
73987: PUSH
73988: LD_VAR 0 8
73992: PUSH
73993: LD_INT 2
73995: ARRAY
73996: PUSH
73997: LD_VAR 0 3
74001: PLUS
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: EMPTY
74008: LIST
74009: ADD
74010: ST_TO_ADDR
74011: GO 73960
74013: POP
74014: POP
// result = temp_list2 ;
74015: LD_ADDR_VAR 0 7
74019: PUSH
74020: LD_VAR 0 10
74024: ST_TO_ADDR
// end ;
74025: LD_VAR 0 7
74029: RET
// export function EnemyInRange ( unit , dist ) ; begin
74030: LD_INT 0
74032: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74033: LD_ADDR_VAR 0 3
74037: PUSH
74038: LD_VAR 0 1
74042: PPUSH
74043: CALL_OW 255
74047: PPUSH
74048: LD_VAR 0 1
74052: PPUSH
74053: CALL_OW 250
74057: PPUSH
74058: LD_VAR 0 1
74062: PPUSH
74063: CALL_OW 251
74067: PPUSH
74068: LD_VAR 0 2
74072: PPUSH
74073: CALL 47403 0 4
74077: PUSH
74078: LD_INT 4
74080: ARRAY
74081: ST_TO_ADDR
// end ;
74082: LD_VAR 0 3
74086: RET
// export function PlayerSeeMe ( unit ) ; begin
74087: LD_INT 0
74089: PPUSH
// result := See ( your_side , unit ) ;
74090: LD_ADDR_VAR 0 2
74094: PUSH
74095: LD_OWVAR 2
74099: PPUSH
74100: LD_VAR 0 1
74104: PPUSH
74105: CALL_OW 292
74109: ST_TO_ADDR
// end ;
74110: LD_VAR 0 2
74114: RET
// export function ReverseDir ( unit ) ; begin
74115: LD_INT 0
74117: PPUSH
// if not unit then
74118: LD_VAR 0 1
74122: NOT
74123: IFFALSE 74127
// exit ;
74125: GO 74150
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74127: LD_ADDR_VAR 0 2
74131: PUSH
74132: LD_VAR 0 1
74136: PPUSH
74137: CALL_OW 254
74141: PUSH
74142: LD_INT 3
74144: PLUS
74145: PUSH
74146: LD_INT 6
74148: MOD
74149: ST_TO_ADDR
// end ;
74150: LD_VAR 0 2
74154: RET
// export function ReverseArray ( array ) ; var i ; begin
74155: LD_INT 0
74157: PPUSH
74158: PPUSH
// if not array then
74159: LD_VAR 0 1
74163: NOT
74164: IFFALSE 74168
// exit ;
74166: GO 74223
// result := [ ] ;
74168: LD_ADDR_VAR 0 2
74172: PUSH
74173: EMPTY
74174: ST_TO_ADDR
// for i := array downto 1 do
74175: LD_ADDR_VAR 0 3
74179: PUSH
74180: DOUBLE
74181: LD_VAR 0 1
74185: INC
74186: ST_TO_ADDR
74187: LD_INT 1
74189: PUSH
74190: FOR_DOWNTO
74191: IFFALSE 74221
// result := Join ( result , array [ i ] ) ;
74193: LD_ADDR_VAR 0 2
74197: PUSH
74198: LD_VAR 0 2
74202: PPUSH
74203: LD_VAR 0 1
74207: PUSH
74208: LD_VAR 0 3
74212: ARRAY
74213: PPUSH
74214: CALL 78868 0 2
74218: ST_TO_ADDR
74219: GO 74190
74221: POP
74222: POP
// end ;
74223: LD_VAR 0 2
74227: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74228: LD_INT 0
74230: PPUSH
74231: PPUSH
74232: PPUSH
74233: PPUSH
74234: PPUSH
74235: PPUSH
// if not unit or not hexes then
74236: LD_VAR 0 1
74240: NOT
74241: PUSH
74242: LD_VAR 0 2
74246: NOT
74247: OR
74248: IFFALSE 74252
// exit ;
74250: GO 74375
// dist := 9999 ;
74252: LD_ADDR_VAR 0 5
74256: PUSH
74257: LD_INT 9999
74259: ST_TO_ADDR
// for i = 1 to hexes do
74260: LD_ADDR_VAR 0 4
74264: PUSH
74265: DOUBLE
74266: LD_INT 1
74268: DEC
74269: ST_TO_ADDR
74270: LD_VAR 0 2
74274: PUSH
74275: FOR_TO
74276: IFFALSE 74363
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74278: LD_ADDR_VAR 0 6
74282: PUSH
74283: LD_VAR 0 1
74287: PPUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_VAR 0 4
74297: ARRAY
74298: PUSH
74299: LD_INT 1
74301: ARRAY
74302: PPUSH
74303: LD_VAR 0 2
74307: PUSH
74308: LD_VAR 0 4
74312: ARRAY
74313: PUSH
74314: LD_INT 2
74316: ARRAY
74317: PPUSH
74318: CALL_OW 297
74322: ST_TO_ADDR
// if tdist < dist then
74323: LD_VAR 0 6
74327: PUSH
74328: LD_VAR 0 5
74332: LESS
74333: IFFALSE 74361
// begin hex := hexes [ i ] ;
74335: LD_ADDR_VAR 0 8
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_VAR 0 4
74349: ARRAY
74350: ST_TO_ADDR
// dist := tdist ;
74351: LD_ADDR_VAR 0 5
74355: PUSH
74356: LD_VAR 0 6
74360: ST_TO_ADDR
// end ; end ;
74361: GO 74275
74363: POP
74364: POP
// result := hex ;
74365: LD_ADDR_VAR 0 3
74369: PUSH
74370: LD_VAR 0 8
74374: ST_TO_ADDR
// end ;
74375: LD_VAR 0 3
74379: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74380: LD_INT 0
74382: PPUSH
74383: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74384: LD_VAR 0 1
74388: NOT
74389: PUSH
74390: LD_VAR 0 1
74394: PUSH
74395: LD_INT 21
74397: PUSH
74398: LD_INT 2
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 23
74407: PUSH
74408: LD_INT 2
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PPUSH
74419: CALL_OW 69
74423: IN
74424: NOT
74425: OR
74426: IFFALSE 74430
// exit ;
74428: GO 74477
// for i = 1 to 3 do
74430: LD_ADDR_VAR 0 3
74434: PUSH
74435: DOUBLE
74436: LD_INT 1
74438: DEC
74439: ST_TO_ADDR
74440: LD_INT 3
74442: PUSH
74443: FOR_TO
74444: IFFALSE 74475
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74446: LD_VAR 0 1
74450: PPUSH
74451: CALL_OW 250
74455: PPUSH
74456: LD_VAR 0 1
74460: PPUSH
74461: CALL_OW 251
74465: PPUSH
74466: LD_INT 1
74468: PPUSH
74469: CALL_OW 453
74473: GO 74443
74475: POP
74476: POP
// end ;
74477: LD_VAR 0 2
74481: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74482: LD_INT 0
74484: PPUSH
74485: PPUSH
74486: PPUSH
74487: PPUSH
74488: PPUSH
74489: PPUSH
// if not unit or not enemy_unit then
74490: LD_VAR 0 1
74494: NOT
74495: PUSH
74496: LD_VAR 0 2
74500: NOT
74501: OR
74502: IFFALSE 74506
// exit ;
74504: GO 74973
// if GetLives ( i ) < 250 then
74506: LD_VAR 0 4
74510: PPUSH
74511: CALL_OW 256
74515: PUSH
74516: LD_INT 250
74518: LESS
74519: IFFALSE 74532
// begin ComAutodestruct ( i ) ;
74521: LD_VAR 0 4
74525: PPUSH
74526: CALL 74380 0 1
// exit ;
74530: GO 74973
// end ; x := GetX ( enemy_unit ) ;
74532: LD_ADDR_VAR 0 7
74536: PUSH
74537: LD_VAR 0 2
74541: PPUSH
74542: CALL_OW 250
74546: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74547: LD_ADDR_VAR 0 8
74551: PUSH
74552: LD_VAR 0 2
74556: PPUSH
74557: CALL_OW 251
74561: ST_TO_ADDR
// if not x or not y then
74562: LD_VAR 0 7
74566: NOT
74567: PUSH
74568: LD_VAR 0 8
74572: NOT
74573: OR
74574: IFFALSE 74578
// exit ;
74576: GO 74973
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74578: LD_ADDR_VAR 0 6
74582: PUSH
74583: LD_VAR 0 7
74587: PPUSH
74588: LD_INT 0
74590: PPUSH
74591: LD_INT 4
74593: PPUSH
74594: CALL_OW 272
74598: PUSH
74599: LD_VAR 0 8
74603: PPUSH
74604: LD_INT 0
74606: PPUSH
74607: LD_INT 4
74609: PPUSH
74610: CALL_OW 273
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_VAR 0 7
74623: PPUSH
74624: LD_INT 1
74626: PPUSH
74627: LD_INT 4
74629: PPUSH
74630: CALL_OW 272
74634: PUSH
74635: LD_VAR 0 8
74639: PPUSH
74640: LD_INT 1
74642: PPUSH
74643: LD_INT 4
74645: PPUSH
74646: CALL_OW 273
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_VAR 0 7
74659: PPUSH
74660: LD_INT 2
74662: PPUSH
74663: LD_INT 4
74665: PPUSH
74666: CALL_OW 272
74670: PUSH
74671: LD_VAR 0 8
74675: PPUSH
74676: LD_INT 2
74678: PPUSH
74679: LD_INT 4
74681: PPUSH
74682: CALL_OW 273
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_VAR 0 7
74695: PPUSH
74696: LD_INT 3
74698: PPUSH
74699: LD_INT 4
74701: PPUSH
74702: CALL_OW 272
74706: PUSH
74707: LD_VAR 0 8
74711: PPUSH
74712: LD_INT 3
74714: PPUSH
74715: LD_INT 4
74717: PPUSH
74718: CALL_OW 273
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_VAR 0 7
74731: PPUSH
74732: LD_INT 4
74734: PPUSH
74735: LD_INT 4
74737: PPUSH
74738: CALL_OW 272
74742: PUSH
74743: LD_VAR 0 8
74747: PPUSH
74748: LD_INT 4
74750: PPUSH
74751: LD_INT 4
74753: PPUSH
74754: CALL_OW 273
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PUSH
74763: LD_VAR 0 7
74767: PPUSH
74768: LD_INT 5
74770: PPUSH
74771: LD_INT 4
74773: PPUSH
74774: CALL_OW 272
74778: PUSH
74779: LD_VAR 0 8
74783: PPUSH
74784: LD_INT 5
74786: PPUSH
74787: LD_INT 4
74789: PPUSH
74790: CALL_OW 273
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: ST_TO_ADDR
// for i = tmp downto 1 do
74807: LD_ADDR_VAR 0 4
74811: PUSH
74812: DOUBLE
74813: LD_VAR 0 6
74817: INC
74818: ST_TO_ADDR
74819: LD_INT 1
74821: PUSH
74822: FOR_DOWNTO
74823: IFFALSE 74924
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74825: LD_VAR 0 6
74829: PUSH
74830: LD_VAR 0 4
74834: ARRAY
74835: PUSH
74836: LD_INT 1
74838: ARRAY
74839: PPUSH
74840: LD_VAR 0 6
74844: PUSH
74845: LD_VAR 0 4
74849: ARRAY
74850: PUSH
74851: LD_INT 2
74853: ARRAY
74854: PPUSH
74855: CALL_OW 488
74859: NOT
74860: PUSH
74861: LD_VAR 0 6
74865: PUSH
74866: LD_VAR 0 4
74870: ARRAY
74871: PUSH
74872: LD_INT 1
74874: ARRAY
74875: PPUSH
74876: LD_VAR 0 6
74880: PUSH
74881: LD_VAR 0 4
74885: ARRAY
74886: PUSH
74887: LD_INT 2
74889: ARRAY
74890: PPUSH
74891: CALL_OW 428
74895: PUSH
74896: LD_INT 0
74898: NONEQUAL
74899: OR
74900: IFFALSE 74922
// tmp := Delete ( tmp , i ) ;
74902: LD_ADDR_VAR 0 6
74906: PUSH
74907: LD_VAR 0 6
74911: PPUSH
74912: LD_VAR 0 4
74916: PPUSH
74917: CALL_OW 3
74921: ST_TO_ADDR
74922: GO 74822
74924: POP
74925: POP
// j := GetClosestHex ( unit , tmp ) ;
74926: LD_ADDR_VAR 0 5
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: LD_VAR 0 6
74940: PPUSH
74941: CALL 74228 0 2
74945: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74946: LD_VAR 0 1
74950: PPUSH
74951: LD_VAR 0 5
74955: PUSH
74956: LD_INT 1
74958: ARRAY
74959: PPUSH
74960: LD_VAR 0 5
74964: PUSH
74965: LD_INT 2
74967: ARRAY
74968: PPUSH
74969: CALL_OW 111
// end ;
74973: LD_VAR 0 3
74977: RET
// export function PrepareApemanSoldier ( ) ; begin
74978: LD_INT 0
74980: PPUSH
// uc_nation := 0 ;
74981: LD_ADDR_OWVAR 21
74985: PUSH
74986: LD_INT 0
74988: ST_TO_ADDR
// hc_sex := sex_male ;
74989: LD_ADDR_OWVAR 27
74993: PUSH
74994: LD_INT 1
74996: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74997: LD_ADDR_OWVAR 28
75001: PUSH
75002: LD_INT 15
75004: ST_TO_ADDR
// hc_gallery :=  ;
75005: LD_ADDR_OWVAR 33
75009: PUSH
75010: LD_STRING 
75012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75013: LD_ADDR_OWVAR 31
75017: PUSH
75018: LD_INT 0
75020: PPUSH
75021: LD_INT 3
75023: PPUSH
75024: CALL_OW 12
75028: PUSH
75029: LD_INT 0
75031: PPUSH
75032: LD_INT 3
75034: PPUSH
75035: CALL_OW 12
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 0
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: ST_TO_ADDR
// end ;
75052: LD_VAR 0 1
75056: RET
// export function PrepareApemanEngineer ( ) ; begin
75057: LD_INT 0
75059: PPUSH
// uc_nation := 0 ;
75060: LD_ADDR_OWVAR 21
75064: PUSH
75065: LD_INT 0
75067: ST_TO_ADDR
// hc_sex := sex_male ;
75068: LD_ADDR_OWVAR 27
75072: PUSH
75073: LD_INT 1
75075: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75076: LD_ADDR_OWVAR 28
75080: PUSH
75081: LD_INT 16
75083: ST_TO_ADDR
// hc_gallery :=  ;
75084: LD_ADDR_OWVAR 33
75088: PUSH
75089: LD_STRING 
75091: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75092: LD_ADDR_OWVAR 31
75096: PUSH
75097: LD_INT 0
75099: PPUSH
75100: LD_INT 3
75102: PPUSH
75103: CALL_OW 12
75107: PUSH
75108: LD_INT 0
75110: PPUSH
75111: LD_INT 3
75113: PPUSH
75114: CALL_OW 12
75118: PUSH
75119: LD_INT 0
75121: PUSH
75122: LD_INT 0
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: ST_TO_ADDR
// end ;
75131: LD_VAR 0 1
75135: RET
// export function PrepareApeman ( agressivity ) ; begin
75136: LD_INT 0
75138: PPUSH
// uc_side := 0 ;
75139: LD_ADDR_OWVAR 20
75143: PUSH
75144: LD_INT 0
75146: ST_TO_ADDR
// uc_nation := 0 ;
75147: LD_ADDR_OWVAR 21
75151: PUSH
75152: LD_INT 0
75154: ST_TO_ADDR
// hc_sex := sex_male ;
75155: LD_ADDR_OWVAR 27
75159: PUSH
75160: LD_INT 1
75162: ST_TO_ADDR
// hc_class := class_apeman ;
75163: LD_ADDR_OWVAR 28
75167: PUSH
75168: LD_INT 12
75170: ST_TO_ADDR
// hc_gallery :=  ;
75171: LD_ADDR_OWVAR 33
75175: PUSH
75176: LD_STRING 
75178: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75179: LD_ADDR_OWVAR 35
75183: PUSH
75184: LD_VAR 0 1
75188: NEG
75189: PPUSH
75190: LD_VAR 0 1
75194: PPUSH
75195: CALL_OW 12
75199: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75200: LD_ADDR_OWVAR 31
75204: PUSH
75205: LD_INT 0
75207: PPUSH
75208: LD_INT 3
75210: PPUSH
75211: CALL_OW 12
75215: PUSH
75216: LD_INT 0
75218: PPUSH
75219: LD_INT 3
75221: PPUSH
75222: CALL_OW 12
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: ST_TO_ADDR
// end ;
75239: LD_VAR 0 2
75243: RET
// export function PrepareTiger ( agressivity ) ; begin
75244: LD_INT 0
75246: PPUSH
// uc_side := 0 ;
75247: LD_ADDR_OWVAR 20
75251: PUSH
75252: LD_INT 0
75254: ST_TO_ADDR
// uc_nation := 0 ;
75255: LD_ADDR_OWVAR 21
75259: PUSH
75260: LD_INT 0
75262: ST_TO_ADDR
// hc_class := class_tiger ;
75263: LD_ADDR_OWVAR 28
75267: PUSH
75268: LD_INT 14
75270: ST_TO_ADDR
// hc_gallery :=  ;
75271: LD_ADDR_OWVAR 33
75275: PUSH
75276: LD_STRING 
75278: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75279: LD_ADDR_OWVAR 35
75283: PUSH
75284: LD_VAR 0 1
75288: NEG
75289: PPUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL_OW 12
75299: ST_TO_ADDR
// end ;
75300: LD_VAR 0 2
75304: RET
// export function PrepareEnchidna ( ) ; begin
75305: LD_INT 0
75307: PPUSH
// uc_side := 0 ;
75308: LD_ADDR_OWVAR 20
75312: PUSH
75313: LD_INT 0
75315: ST_TO_ADDR
// uc_nation := 0 ;
75316: LD_ADDR_OWVAR 21
75320: PUSH
75321: LD_INT 0
75323: ST_TO_ADDR
// hc_class := class_baggie ;
75324: LD_ADDR_OWVAR 28
75328: PUSH
75329: LD_INT 13
75331: ST_TO_ADDR
// hc_gallery :=  ;
75332: LD_ADDR_OWVAR 33
75336: PUSH
75337: LD_STRING 
75339: ST_TO_ADDR
// end ;
75340: LD_VAR 0 1
75344: RET
// export function PrepareFrog ( ) ; begin
75345: LD_INT 0
75347: PPUSH
// uc_side := 0 ;
75348: LD_ADDR_OWVAR 20
75352: PUSH
75353: LD_INT 0
75355: ST_TO_ADDR
// uc_nation := 0 ;
75356: LD_ADDR_OWVAR 21
75360: PUSH
75361: LD_INT 0
75363: ST_TO_ADDR
// hc_class := class_frog ;
75364: LD_ADDR_OWVAR 28
75368: PUSH
75369: LD_INT 19
75371: ST_TO_ADDR
// hc_gallery :=  ;
75372: LD_ADDR_OWVAR 33
75376: PUSH
75377: LD_STRING 
75379: ST_TO_ADDR
// end ;
75380: LD_VAR 0 1
75384: RET
// export function PrepareFish ( ) ; begin
75385: LD_INT 0
75387: PPUSH
// uc_side := 0 ;
75388: LD_ADDR_OWVAR 20
75392: PUSH
75393: LD_INT 0
75395: ST_TO_ADDR
// uc_nation := 0 ;
75396: LD_ADDR_OWVAR 21
75400: PUSH
75401: LD_INT 0
75403: ST_TO_ADDR
// hc_class := class_fish ;
75404: LD_ADDR_OWVAR 28
75408: PUSH
75409: LD_INT 20
75411: ST_TO_ADDR
// hc_gallery :=  ;
75412: LD_ADDR_OWVAR 33
75416: PUSH
75417: LD_STRING 
75419: ST_TO_ADDR
// end ;
75420: LD_VAR 0 1
75424: RET
// export function PrepareBird ( ) ; begin
75425: LD_INT 0
75427: PPUSH
// uc_side := 0 ;
75428: LD_ADDR_OWVAR 20
75432: PUSH
75433: LD_INT 0
75435: ST_TO_ADDR
// uc_nation := 0 ;
75436: LD_ADDR_OWVAR 21
75440: PUSH
75441: LD_INT 0
75443: ST_TO_ADDR
// hc_class := class_phororhacos ;
75444: LD_ADDR_OWVAR 28
75448: PUSH
75449: LD_INT 18
75451: ST_TO_ADDR
// hc_gallery :=  ;
75452: LD_ADDR_OWVAR 33
75456: PUSH
75457: LD_STRING 
75459: ST_TO_ADDR
// end ;
75460: LD_VAR 0 1
75464: RET
// export function PrepareHorse ( ) ; begin
75465: LD_INT 0
75467: PPUSH
// uc_side := 0 ;
75468: LD_ADDR_OWVAR 20
75472: PUSH
75473: LD_INT 0
75475: ST_TO_ADDR
// uc_nation := 0 ;
75476: LD_ADDR_OWVAR 21
75480: PUSH
75481: LD_INT 0
75483: ST_TO_ADDR
// hc_class := class_horse ;
75484: LD_ADDR_OWVAR 28
75488: PUSH
75489: LD_INT 21
75491: ST_TO_ADDR
// hc_gallery :=  ;
75492: LD_ADDR_OWVAR 33
75496: PUSH
75497: LD_STRING 
75499: ST_TO_ADDR
// end ;
75500: LD_VAR 0 1
75504: RET
// export function PrepareMastodont ( ) ; begin
75505: LD_INT 0
75507: PPUSH
// uc_side := 0 ;
75508: LD_ADDR_OWVAR 20
75512: PUSH
75513: LD_INT 0
75515: ST_TO_ADDR
// uc_nation := 0 ;
75516: LD_ADDR_OWVAR 21
75520: PUSH
75521: LD_INT 0
75523: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75524: LD_ADDR_OWVAR 37
75528: PUSH
75529: LD_INT 31
75531: ST_TO_ADDR
// vc_control := control_rider ;
75532: LD_ADDR_OWVAR 38
75536: PUSH
75537: LD_INT 4
75539: ST_TO_ADDR
// end ;
75540: LD_VAR 0 1
75544: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75545: LD_INT 0
75547: PPUSH
75548: PPUSH
75549: PPUSH
// uc_side = 0 ;
75550: LD_ADDR_OWVAR 20
75554: PUSH
75555: LD_INT 0
75557: ST_TO_ADDR
// uc_nation = 0 ;
75558: LD_ADDR_OWVAR 21
75562: PUSH
75563: LD_INT 0
75565: ST_TO_ADDR
// InitHc_All ( ) ;
75566: CALL_OW 584
// InitVc ;
75570: CALL_OW 20
// if mastodonts then
75574: LD_VAR 0 6
75578: IFFALSE 75645
// for i = 1 to mastodonts do
75580: LD_ADDR_VAR 0 11
75584: PUSH
75585: DOUBLE
75586: LD_INT 1
75588: DEC
75589: ST_TO_ADDR
75590: LD_VAR 0 6
75594: PUSH
75595: FOR_TO
75596: IFFALSE 75643
// begin vc_chassis := 31 ;
75598: LD_ADDR_OWVAR 37
75602: PUSH
75603: LD_INT 31
75605: ST_TO_ADDR
// vc_control := control_rider ;
75606: LD_ADDR_OWVAR 38
75610: PUSH
75611: LD_INT 4
75613: ST_TO_ADDR
// animal := CreateVehicle ;
75614: LD_ADDR_VAR 0 12
75618: PUSH
75619: CALL_OW 45
75623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75624: LD_VAR 0 12
75628: PPUSH
75629: LD_VAR 0 8
75633: PPUSH
75634: LD_INT 0
75636: PPUSH
75637: CALL 77773 0 3
// end ;
75641: GO 75595
75643: POP
75644: POP
// if horses then
75645: LD_VAR 0 5
75649: IFFALSE 75716
// for i = 1 to horses do
75651: LD_ADDR_VAR 0 11
75655: PUSH
75656: DOUBLE
75657: LD_INT 1
75659: DEC
75660: ST_TO_ADDR
75661: LD_VAR 0 5
75665: PUSH
75666: FOR_TO
75667: IFFALSE 75714
// begin hc_class := 21 ;
75669: LD_ADDR_OWVAR 28
75673: PUSH
75674: LD_INT 21
75676: ST_TO_ADDR
// hc_gallery :=  ;
75677: LD_ADDR_OWVAR 33
75681: PUSH
75682: LD_STRING 
75684: ST_TO_ADDR
// animal := CreateHuman ;
75685: LD_ADDR_VAR 0 12
75689: PUSH
75690: CALL_OW 44
75694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75695: LD_VAR 0 12
75699: PPUSH
75700: LD_VAR 0 8
75704: PPUSH
75705: LD_INT 0
75707: PPUSH
75708: CALL 77773 0 3
// end ;
75712: GO 75666
75714: POP
75715: POP
// if birds then
75716: LD_VAR 0 1
75720: IFFALSE 75787
// for i = 1 to birds do
75722: LD_ADDR_VAR 0 11
75726: PUSH
75727: DOUBLE
75728: LD_INT 1
75730: DEC
75731: ST_TO_ADDR
75732: LD_VAR 0 1
75736: PUSH
75737: FOR_TO
75738: IFFALSE 75785
// begin hc_class := 18 ;
75740: LD_ADDR_OWVAR 28
75744: PUSH
75745: LD_INT 18
75747: ST_TO_ADDR
// hc_gallery =  ;
75748: LD_ADDR_OWVAR 33
75752: PUSH
75753: LD_STRING 
75755: ST_TO_ADDR
// animal := CreateHuman ;
75756: LD_ADDR_VAR 0 12
75760: PUSH
75761: CALL_OW 44
75765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75766: LD_VAR 0 12
75770: PPUSH
75771: LD_VAR 0 8
75775: PPUSH
75776: LD_INT 0
75778: PPUSH
75779: CALL 77773 0 3
// end ;
75783: GO 75737
75785: POP
75786: POP
// if tigers then
75787: LD_VAR 0 2
75791: IFFALSE 75875
// for i = 1 to tigers do
75793: LD_ADDR_VAR 0 11
75797: PUSH
75798: DOUBLE
75799: LD_INT 1
75801: DEC
75802: ST_TO_ADDR
75803: LD_VAR 0 2
75807: PUSH
75808: FOR_TO
75809: IFFALSE 75873
// begin hc_class = class_tiger ;
75811: LD_ADDR_OWVAR 28
75815: PUSH
75816: LD_INT 14
75818: ST_TO_ADDR
// hc_gallery =  ;
75819: LD_ADDR_OWVAR 33
75823: PUSH
75824: LD_STRING 
75826: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75827: LD_ADDR_OWVAR 35
75831: PUSH
75832: LD_INT 7
75834: NEG
75835: PPUSH
75836: LD_INT 7
75838: PPUSH
75839: CALL_OW 12
75843: ST_TO_ADDR
// animal := CreateHuman ;
75844: LD_ADDR_VAR 0 12
75848: PUSH
75849: CALL_OW 44
75853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75854: LD_VAR 0 12
75858: PPUSH
75859: LD_VAR 0 8
75863: PPUSH
75864: LD_INT 0
75866: PPUSH
75867: CALL 77773 0 3
// end ;
75871: GO 75808
75873: POP
75874: POP
// if apemans then
75875: LD_VAR 0 3
75879: IFFALSE 76002
// for i = 1 to apemans do
75881: LD_ADDR_VAR 0 11
75885: PUSH
75886: DOUBLE
75887: LD_INT 1
75889: DEC
75890: ST_TO_ADDR
75891: LD_VAR 0 3
75895: PUSH
75896: FOR_TO
75897: IFFALSE 76000
// begin hc_class = class_apeman ;
75899: LD_ADDR_OWVAR 28
75903: PUSH
75904: LD_INT 12
75906: ST_TO_ADDR
// hc_gallery =  ;
75907: LD_ADDR_OWVAR 33
75911: PUSH
75912: LD_STRING 
75914: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75915: LD_ADDR_OWVAR 35
75919: PUSH
75920: LD_INT 2
75922: NEG
75923: PPUSH
75924: LD_INT 2
75926: PPUSH
75927: CALL_OW 12
75931: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75932: LD_ADDR_OWVAR 31
75936: PUSH
75937: LD_INT 1
75939: PPUSH
75940: LD_INT 3
75942: PPUSH
75943: CALL_OW 12
75947: PUSH
75948: LD_INT 1
75950: PPUSH
75951: LD_INT 3
75953: PPUSH
75954: CALL_OW 12
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: ST_TO_ADDR
// animal := CreateHuman ;
75971: LD_ADDR_VAR 0 12
75975: PUSH
75976: CALL_OW 44
75980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75981: LD_VAR 0 12
75985: PPUSH
75986: LD_VAR 0 8
75990: PPUSH
75991: LD_INT 0
75993: PPUSH
75994: CALL 77773 0 3
// end ;
75998: GO 75896
76000: POP
76001: POP
// if enchidnas then
76002: LD_VAR 0 4
76006: IFFALSE 76073
// for i = 1 to enchidnas do
76008: LD_ADDR_VAR 0 11
76012: PUSH
76013: DOUBLE
76014: LD_INT 1
76016: DEC
76017: ST_TO_ADDR
76018: LD_VAR 0 4
76022: PUSH
76023: FOR_TO
76024: IFFALSE 76071
// begin hc_class = 13 ;
76026: LD_ADDR_OWVAR 28
76030: PUSH
76031: LD_INT 13
76033: ST_TO_ADDR
// hc_gallery =  ;
76034: LD_ADDR_OWVAR 33
76038: PUSH
76039: LD_STRING 
76041: ST_TO_ADDR
// animal := CreateHuman ;
76042: LD_ADDR_VAR 0 12
76046: PUSH
76047: CALL_OW 44
76051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76052: LD_VAR 0 12
76056: PPUSH
76057: LD_VAR 0 8
76061: PPUSH
76062: LD_INT 0
76064: PPUSH
76065: CALL 77773 0 3
// end ;
76069: GO 76023
76071: POP
76072: POP
// if fishes then
76073: LD_VAR 0 7
76077: IFFALSE 76144
// for i = 1 to fishes do
76079: LD_ADDR_VAR 0 11
76083: PUSH
76084: DOUBLE
76085: LD_INT 1
76087: DEC
76088: ST_TO_ADDR
76089: LD_VAR 0 7
76093: PUSH
76094: FOR_TO
76095: IFFALSE 76142
// begin hc_class = 20 ;
76097: LD_ADDR_OWVAR 28
76101: PUSH
76102: LD_INT 20
76104: ST_TO_ADDR
// hc_gallery =  ;
76105: LD_ADDR_OWVAR 33
76109: PUSH
76110: LD_STRING 
76112: ST_TO_ADDR
// animal := CreateHuman ;
76113: LD_ADDR_VAR 0 12
76117: PUSH
76118: CALL_OW 44
76122: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76123: LD_VAR 0 12
76127: PPUSH
76128: LD_VAR 0 9
76132: PPUSH
76133: LD_INT 0
76135: PPUSH
76136: CALL 77773 0 3
// end ;
76140: GO 76094
76142: POP
76143: POP
// end ;
76144: LD_VAR 0 10
76148: RET
// export function WantHeal ( sci , unit ) ; begin
76149: LD_INT 0
76151: PPUSH
// if GetTaskList ( sci ) > 0 then
76152: LD_VAR 0 1
76156: PPUSH
76157: CALL_OW 437
76161: PUSH
76162: LD_INT 0
76164: GREATER
76165: IFFALSE 76235
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76167: LD_VAR 0 1
76171: PPUSH
76172: CALL_OW 437
76176: PUSH
76177: LD_INT 1
76179: ARRAY
76180: PUSH
76181: LD_INT 1
76183: ARRAY
76184: PUSH
76185: LD_STRING l
76187: EQUAL
76188: PUSH
76189: LD_VAR 0 1
76193: PPUSH
76194: CALL_OW 437
76198: PUSH
76199: LD_INT 1
76201: ARRAY
76202: PUSH
76203: LD_INT 4
76205: ARRAY
76206: PUSH
76207: LD_VAR 0 2
76211: EQUAL
76212: AND
76213: IFFALSE 76225
// result := true else
76215: LD_ADDR_VAR 0 3
76219: PUSH
76220: LD_INT 1
76222: ST_TO_ADDR
76223: GO 76233
// result := false ;
76225: LD_ADDR_VAR 0 3
76229: PUSH
76230: LD_INT 0
76232: ST_TO_ADDR
// end else
76233: GO 76243
// result := false ;
76235: LD_ADDR_VAR 0 3
76239: PUSH
76240: LD_INT 0
76242: ST_TO_ADDR
// end ;
76243: LD_VAR 0 3
76247: RET
// export function HealTarget ( sci ) ; begin
76248: LD_INT 0
76250: PPUSH
// if not sci then
76251: LD_VAR 0 1
76255: NOT
76256: IFFALSE 76260
// exit ;
76258: GO 76325
// result := 0 ;
76260: LD_ADDR_VAR 0 2
76264: PUSH
76265: LD_INT 0
76267: ST_TO_ADDR
// if GetTaskList ( sci ) then
76268: LD_VAR 0 1
76272: PPUSH
76273: CALL_OW 437
76277: IFFALSE 76325
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76279: LD_VAR 0 1
76283: PPUSH
76284: CALL_OW 437
76288: PUSH
76289: LD_INT 1
76291: ARRAY
76292: PUSH
76293: LD_INT 1
76295: ARRAY
76296: PUSH
76297: LD_STRING l
76299: EQUAL
76300: IFFALSE 76325
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76302: LD_ADDR_VAR 0 2
76306: PUSH
76307: LD_VAR 0 1
76311: PPUSH
76312: CALL_OW 437
76316: PUSH
76317: LD_INT 1
76319: ARRAY
76320: PUSH
76321: LD_INT 4
76323: ARRAY
76324: ST_TO_ADDR
// end ;
76325: LD_VAR 0 2
76329: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76330: LD_INT 0
76332: PPUSH
76333: PPUSH
76334: PPUSH
76335: PPUSH
// if not base_units then
76336: LD_VAR 0 1
76340: NOT
76341: IFFALSE 76345
// exit ;
76343: GO 76432
// result := false ;
76345: LD_ADDR_VAR 0 2
76349: PUSH
76350: LD_INT 0
76352: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76353: LD_ADDR_VAR 0 5
76357: PUSH
76358: LD_VAR 0 1
76362: PPUSH
76363: LD_INT 21
76365: PUSH
76366: LD_INT 3
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PPUSH
76373: CALL_OW 72
76377: ST_TO_ADDR
// if not tmp then
76378: LD_VAR 0 5
76382: NOT
76383: IFFALSE 76387
// exit ;
76385: GO 76432
// for i in tmp do
76387: LD_ADDR_VAR 0 3
76391: PUSH
76392: LD_VAR 0 5
76396: PUSH
76397: FOR_IN
76398: IFFALSE 76430
// begin result := EnemyInRange ( i , 22 ) ;
76400: LD_ADDR_VAR 0 2
76404: PUSH
76405: LD_VAR 0 3
76409: PPUSH
76410: LD_INT 22
76412: PPUSH
76413: CALL 74030 0 2
76417: ST_TO_ADDR
// if result then
76418: LD_VAR 0 2
76422: IFFALSE 76428
// exit ;
76424: POP
76425: POP
76426: GO 76432
// end ;
76428: GO 76397
76430: POP
76431: POP
// end ;
76432: LD_VAR 0 2
76436: RET
// export function FilterByTag ( units , tag ) ; begin
76437: LD_INT 0
76439: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76440: LD_ADDR_VAR 0 3
76444: PUSH
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_INT 120
76452: PUSH
76453: LD_VAR 0 2
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PPUSH
76462: CALL_OW 72
76466: ST_TO_ADDR
// end ;
76467: LD_VAR 0 3
76471: RET
// export function IsDriver ( un ) ; begin
76472: LD_INT 0
76474: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76475: LD_ADDR_VAR 0 2
76479: PUSH
76480: LD_VAR 0 1
76484: PUSH
76485: LD_INT 55
76487: PUSH
76488: EMPTY
76489: LIST
76490: PPUSH
76491: CALL_OW 69
76495: IN
76496: ST_TO_ADDR
// end ;
76497: LD_VAR 0 2
76501: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76502: LD_INT 0
76504: PPUSH
76505: PPUSH
// list := [ ] ;
76506: LD_ADDR_VAR 0 5
76510: PUSH
76511: EMPTY
76512: ST_TO_ADDR
// case d of 0 :
76513: LD_VAR 0 3
76517: PUSH
76518: LD_INT 0
76520: DOUBLE
76521: EQUAL
76522: IFTRUE 76526
76524: GO 76659
76526: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76527: LD_ADDR_VAR 0 5
76531: PUSH
76532: LD_VAR 0 1
76536: PUSH
76537: LD_INT 4
76539: MINUS
76540: PUSH
76541: LD_VAR 0 2
76545: PUSH
76546: LD_INT 4
76548: MINUS
76549: PUSH
76550: LD_INT 2
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: PUSH
76558: LD_VAR 0 1
76562: PUSH
76563: LD_INT 3
76565: MINUS
76566: PUSH
76567: LD_VAR 0 2
76571: PUSH
76572: LD_INT 1
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: LIST
76579: PUSH
76580: LD_VAR 0 1
76584: PUSH
76585: LD_INT 4
76587: PLUS
76588: PUSH
76589: LD_VAR 0 2
76593: PUSH
76594: LD_INT 4
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: PUSH
76602: LD_VAR 0 1
76606: PUSH
76607: LD_INT 3
76609: PLUS
76610: PUSH
76611: LD_VAR 0 2
76615: PUSH
76616: LD_INT 3
76618: PLUS
76619: PUSH
76620: LD_INT 5
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: PUSH
76628: LD_VAR 0 1
76632: PUSH
76633: LD_VAR 0 2
76637: PUSH
76638: LD_INT 4
76640: PLUS
76641: PUSH
76642: LD_INT 0
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: ST_TO_ADDR
// end ; 1 :
76657: GO 77357
76659: LD_INT 1
76661: DOUBLE
76662: EQUAL
76663: IFTRUE 76667
76665: GO 76800
76667: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76668: LD_ADDR_VAR 0 5
76672: PUSH
76673: LD_VAR 0 1
76677: PUSH
76678: LD_VAR 0 2
76682: PUSH
76683: LD_INT 4
76685: MINUS
76686: PUSH
76687: LD_INT 3
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: PUSH
76695: LD_VAR 0 1
76699: PUSH
76700: LD_INT 3
76702: MINUS
76703: PUSH
76704: LD_VAR 0 2
76708: PUSH
76709: LD_INT 3
76711: MINUS
76712: PUSH
76713: LD_INT 2
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: LIST
76720: PUSH
76721: LD_VAR 0 1
76725: PUSH
76726: LD_INT 4
76728: MINUS
76729: PUSH
76730: LD_VAR 0 2
76734: PUSH
76735: LD_INT 1
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: PUSH
76743: LD_VAR 0 1
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: LD_INT 3
76755: PLUS
76756: PUSH
76757: LD_INT 0
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: LIST
76764: PUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_INT 4
76772: PLUS
76773: PUSH
76774: LD_VAR 0 2
76778: PUSH
76779: LD_INT 4
76781: PLUS
76782: PUSH
76783: LD_INT 5
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: LIST
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: ST_TO_ADDR
// end ; 2 :
76798: GO 77357
76800: LD_INT 2
76802: DOUBLE
76803: EQUAL
76804: IFTRUE 76808
76806: GO 76937
76808: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76809: LD_ADDR_VAR 0 5
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: LD_VAR 0 2
76823: PUSH
76824: LD_INT 3
76826: MINUS
76827: PUSH
76828: LD_INT 3
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: LIST
76835: PUSH
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 4
76843: PLUS
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 4
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: LD_VAR 0 1
76862: PUSH
76863: LD_VAR 0 2
76867: PUSH
76868: LD_INT 4
76870: PLUS
76871: PUSH
76872: LD_INT 0
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: PUSH
76880: LD_VAR 0 1
76884: PUSH
76885: LD_INT 3
76887: MINUS
76888: PUSH
76889: LD_VAR 0 2
76893: PUSH
76894: LD_INT 1
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: LIST
76901: PUSH
76902: LD_VAR 0 1
76906: PUSH
76907: LD_INT 4
76909: MINUS
76910: PUSH
76911: LD_VAR 0 2
76915: PUSH
76916: LD_INT 4
76918: MINUS
76919: PUSH
76920: LD_INT 2
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: ST_TO_ADDR
// end ; 3 :
76935: GO 77357
76937: LD_INT 3
76939: DOUBLE
76940: EQUAL
76941: IFTRUE 76945
76943: GO 77078
76945: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76946: LD_ADDR_VAR 0 5
76950: PUSH
76951: LD_VAR 0 1
76955: PUSH
76956: LD_INT 3
76958: PLUS
76959: PUSH
76960: LD_VAR 0 2
76964: PUSH
76965: LD_INT 4
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: LIST
76972: PUSH
76973: LD_VAR 0 1
76977: PUSH
76978: LD_INT 4
76980: PLUS
76981: PUSH
76982: LD_VAR 0 2
76986: PUSH
76987: LD_INT 4
76989: PLUS
76990: PUSH
76991: LD_INT 5
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: PUSH
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 4
77006: MINUS
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_INT 1
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: LIST
77020: PUSH
77021: LD_VAR 0 1
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_INT 4
77033: MINUS
77034: PUSH
77035: LD_INT 3
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: LIST
77042: PUSH
77043: LD_VAR 0 1
77047: PUSH
77048: LD_INT 3
77050: MINUS
77051: PUSH
77052: LD_VAR 0 2
77056: PUSH
77057: LD_INT 3
77059: MINUS
77060: PUSH
77061: LD_INT 2
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: ST_TO_ADDR
// end ; 4 :
77076: GO 77357
77078: LD_INT 4
77080: DOUBLE
77081: EQUAL
77082: IFTRUE 77086
77084: GO 77219
77086: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77087: LD_ADDR_VAR 0 5
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_VAR 0 2
77101: PUSH
77102: LD_INT 4
77104: PLUS
77105: PUSH
77106: LD_INT 0
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_INT 3
77121: PLUS
77122: PUSH
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 3
77130: PLUS
77131: PUSH
77132: LD_INT 5
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: LD_INT 4
77147: PLUS
77148: PUSH
77149: LD_VAR 0 2
77153: PUSH
77154: LD_INT 4
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: PUSH
77162: LD_VAR 0 1
77166: PUSH
77167: LD_VAR 0 2
77171: PUSH
77172: LD_INT 3
77174: MINUS
77175: PUSH
77176: LD_INT 3
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: LIST
77183: PUSH
77184: LD_VAR 0 1
77188: PUSH
77189: LD_INT 4
77191: MINUS
77192: PUSH
77193: LD_VAR 0 2
77197: PUSH
77198: LD_INT 4
77200: MINUS
77201: PUSH
77202: LD_INT 2
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: LIST
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: ST_TO_ADDR
// end ; 5 :
77217: GO 77357
77219: LD_INT 5
77221: DOUBLE
77222: EQUAL
77223: IFTRUE 77227
77225: GO 77356
77227: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77228: LD_ADDR_VAR 0 5
77232: PUSH
77233: LD_VAR 0 1
77237: PUSH
77238: LD_INT 4
77240: MINUS
77241: PUSH
77242: LD_VAR 0 2
77246: PUSH
77247: LD_INT 1
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: LIST
77254: PUSH
77255: LD_VAR 0 1
77259: PUSH
77260: LD_VAR 0 2
77264: PUSH
77265: LD_INT 4
77267: MINUS
77268: PUSH
77269: LD_INT 3
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: LIST
77276: PUSH
77277: LD_VAR 0 1
77281: PUSH
77282: LD_INT 4
77284: PLUS
77285: PUSH
77286: LD_VAR 0 2
77290: PUSH
77291: LD_INT 4
77293: PLUS
77294: PUSH
77295: LD_INT 5
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: LIST
77302: PUSH
77303: LD_VAR 0 1
77307: PUSH
77308: LD_INT 3
77310: PLUS
77311: PUSH
77312: LD_VAR 0 2
77316: PUSH
77317: LD_INT 4
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: LIST
77324: PUSH
77325: LD_VAR 0 1
77329: PUSH
77330: LD_VAR 0 2
77334: PUSH
77335: LD_INT 3
77337: PLUS
77338: PUSH
77339: LD_INT 0
77341: PUSH
77342: EMPTY
77343: LIST
77344: LIST
77345: LIST
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: ST_TO_ADDR
// end ; end ;
77354: GO 77357
77356: POP
// result := list ;
77357: LD_ADDR_VAR 0 4
77361: PUSH
77362: LD_VAR 0 5
77366: ST_TO_ADDR
// end ;
77367: LD_VAR 0 4
77371: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77372: LD_INT 0
77374: PPUSH
77375: PPUSH
77376: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77377: LD_VAR 0 1
77381: NOT
77382: PUSH
77383: LD_VAR 0 2
77387: PUSH
77388: LD_INT 1
77390: PUSH
77391: LD_INT 2
77393: PUSH
77394: LD_INT 3
77396: PUSH
77397: LD_INT 4
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: IN
77406: NOT
77407: OR
77408: IFFALSE 77412
// exit ;
77410: GO 77495
// tmp := [ ] ;
77412: LD_ADDR_VAR 0 5
77416: PUSH
77417: EMPTY
77418: ST_TO_ADDR
// for i in units do
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_VAR 0 1
77428: PUSH
77429: FOR_IN
77430: IFFALSE 77464
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77432: LD_ADDR_VAR 0 5
77436: PUSH
77437: LD_VAR 0 5
77441: PPUSH
77442: LD_VAR 0 4
77446: PPUSH
77447: LD_VAR 0 2
77451: PPUSH
77452: CALL_OW 259
77456: PPUSH
77457: CALL 78868 0 2
77461: ST_TO_ADDR
77462: GO 77429
77464: POP
77465: POP
// if not tmp then
77466: LD_VAR 0 5
77470: NOT
77471: IFFALSE 77475
// exit ;
77473: GO 77495
// result := SortListByListDesc ( units , tmp ) ;
77475: LD_ADDR_VAR 0 3
77479: PUSH
77480: LD_VAR 0 1
77484: PPUSH
77485: LD_VAR 0 5
77489: PPUSH
77490: CALL_OW 77
77494: ST_TO_ADDR
// end ;
77495: LD_VAR 0 3
77499: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77500: LD_INT 0
77502: PPUSH
77503: PPUSH
77504: PPUSH
// result := false ;
77505: LD_ADDR_VAR 0 3
77509: PUSH
77510: LD_INT 0
77512: ST_TO_ADDR
// if not building then
77513: LD_VAR 0 2
77517: NOT
77518: IFFALSE 77522
// exit ;
77520: GO 77660
// x := GetX ( building ) ;
77522: LD_ADDR_VAR 0 4
77526: PUSH
77527: LD_VAR 0 2
77531: PPUSH
77532: CALL_OW 250
77536: ST_TO_ADDR
// y := GetY ( building ) ;
77537: LD_ADDR_VAR 0 5
77541: PUSH
77542: LD_VAR 0 2
77546: PPUSH
77547: CALL_OW 251
77551: ST_TO_ADDR
// if not x or not y then
77552: LD_VAR 0 4
77556: NOT
77557: PUSH
77558: LD_VAR 0 5
77562: NOT
77563: OR
77564: IFFALSE 77568
// exit ;
77566: GO 77660
// if GetTaskList ( unit ) then
77568: LD_VAR 0 1
77572: PPUSH
77573: CALL_OW 437
77577: IFFALSE 77660
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77579: LD_STRING e
77581: PUSH
77582: LD_VAR 0 1
77586: PPUSH
77587: CALL_OW 437
77591: PUSH
77592: LD_INT 1
77594: ARRAY
77595: PUSH
77596: LD_INT 1
77598: ARRAY
77599: EQUAL
77600: PUSH
77601: LD_VAR 0 4
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: CALL_OW 437
77615: PUSH
77616: LD_INT 1
77618: ARRAY
77619: PUSH
77620: LD_INT 2
77622: ARRAY
77623: EQUAL
77624: AND
77625: PUSH
77626: LD_VAR 0 5
77630: PUSH
77631: LD_VAR 0 1
77635: PPUSH
77636: CALL_OW 437
77640: PUSH
77641: LD_INT 1
77643: ARRAY
77644: PUSH
77645: LD_INT 3
77647: ARRAY
77648: EQUAL
77649: AND
77650: IFFALSE 77660
// result := true end ;
77652: LD_ADDR_VAR 0 3
77656: PUSH
77657: LD_INT 1
77659: ST_TO_ADDR
// end ;
77660: LD_VAR 0 3
77664: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77665: LD_INT 0
77667: PPUSH
// result := false ;
77668: LD_ADDR_VAR 0 4
77672: PUSH
77673: LD_INT 0
77675: ST_TO_ADDR
// if GetTaskList ( unit ) then
77676: LD_VAR 0 1
77680: PPUSH
77681: CALL_OW 437
77685: IFFALSE 77768
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77687: LD_STRING M
77689: PUSH
77690: LD_VAR 0 1
77694: PPUSH
77695: CALL_OW 437
77699: PUSH
77700: LD_INT 1
77702: ARRAY
77703: PUSH
77704: LD_INT 1
77706: ARRAY
77707: EQUAL
77708: PUSH
77709: LD_VAR 0 2
77713: PUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: CALL_OW 437
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PUSH
77728: LD_INT 2
77730: ARRAY
77731: EQUAL
77732: AND
77733: PUSH
77734: LD_VAR 0 3
77738: PUSH
77739: LD_VAR 0 1
77743: PPUSH
77744: CALL_OW 437
77748: PUSH
77749: LD_INT 1
77751: ARRAY
77752: PUSH
77753: LD_INT 3
77755: ARRAY
77756: EQUAL
77757: AND
77758: IFFALSE 77768
// result := true ;
77760: LD_ADDR_VAR 0 4
77764: PUSH
77765: LD_INT 1
77767: ST_TO_ADDR
// end ; end ;
77768: LD_VAR 0 4
77772: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77773: LD_INT 0
77775: PPUSH
77776: PPUSH
77777: PPUSH
77778: PPUSH
// if not unit or not area then
77779: LD_VAR 0 1
77783: NOT
77784: PUSH
77785: LD_VAR 0 2
77789: NOT
77790: OR
77791: IFFALSE 77795
// exit ;
77793: GO 77971
// tmp := AreaToList ( area , i ) ;
77795: LD_ADDR_VAR 0 6
77799: PUSH
77800: LD_VAR 0 2
77804: PPUSH
77805: LD_VAR 0 5
77809: PPUSH
77810: CALL_OW 517
77814: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77815: LD_ADDR_VAR 0 5
77819: PUSH
77820: DOUBLE
77821: LD_INT 1
77823: DEC
77824: ST_TO_ADDR
77825: LD_VAR 0 6
77829: PUSH
77830: LD_INT 1
77832: ARRAY
77833: PUSH
77834: FOR_TO
77835: IFFALSE 77969
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77837: LD_ADDR_VAR 0 7
77841: PUSH
77842: LD_VAR 0 6
77846: PUSH
77847: LD_INT 1
77849: ARRAY
77850: PUSH
77851: LD_VAR 0 5
77855: ARRAY
77856: PUSH
77857: LD_VAR 0 6
77861: PUSH
77862: LD_INT 2
77864: ARRAY
77865: PUSH
77866: LD_VAR 0 5
77870: ARRAY
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77876: LD_INT 92
77878: PUSH
77879: LD_VAR 0 7
77883: PUSH
77884: LD_INT 1
77886: ARRAY
77887: PUSH
77888: LD_VAR 0 7
77892: PUSH
77893: LD_INT 2
77895: ARRAY
77896: PUSH
77897: LD_INT 2
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: PPUSH
77906: CALL_OW 69
77910: PUSH
77911: LD_INT 0
77913: EQUAL
77914: IFFALSE 77967
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77916: LD_VAR 0 1
77920: PPUSH
77921: LD_VAR 0 7
77925: PUSH
77926: LD_INT 1
77928: ARRAY
77929: PPUSH
77930: LD_VAR 0 7
77934: PUSH
77935: LD_INT 2
77937: ARRAY
77938: PPUSH
77939: LD_VAR 0 3
77943: PPUSH
77944: CALL_OW 48
// result := IsPlaced ( unit ) ;
77948: LD_ADDR_VAR 0 4
77952: PUSH
77953: LD_VAR 0 1
77957: PPUSH
77958: CALL_OW 305
77962: ST_TO_ADDR
// exit ;
77963: POP
77964: POP
77965: GO 77971
// end ; end ;
77967: GO 77834
77969: POP
77970: POP
// end ;
77971: LD_VAR 0 4
77975: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77976: LD_INT 0
77978: PPUSH
77979: PPUSH
77980: PPUSH
// if not side or side > 8 then
77981: LD_VAR 0 1
77985: NOT
77986: PUSH
77987: LD_VAR 0 1
77991: PUSH
77992: LD_INT 8
77994: GREATER
77995: OR
77996: IFFALSE 78000
// exit ;
77998: GO 78187
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78000: LD_ADDR_VAR 0 4
78004: PUSH
78005: LD_INT 22
78007: PUSH
78008: LD_VAR 0 1
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: LD_INT 21
78019: PUSH
78020: LD_INT 3
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PPUSH
78031: CALL_OW 69
78035: ST_TO_ADDR
// if not tmp then
78036: LD_VAR 0 4
78040: NOT
78041: IFFALSE 78045
// exit ;
78043: GO 78187
// enable_addtolog := true ;
78045: LD_ADDR_OWVAR 81
78049: PUSH
78050: LD_INT 1
78052: ST_TO_ADDR
// AddToLog ( [ ) ;
78053: LD_STRING [
78055: PPUSH
78056: CALL_OW 561
// for i in tmp do
78060: LD_ADDR_VAR 0 3
78064: PUSH
78065: LD_VAR 0 4
78069: PUSH
78070: FOR_IN
78071: IFFALSE 78178
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78073: LD_STRING [
78075: PUSH
78076: LD_VAR 0 3
78080: PPUSH
78081: CALL_OW 266
78085: STR
78086: PUSH
78087: LD_STRING , 
78089: STR
78090: PUSH
78091: LD_VAR 0 3
78095: PPUSH
78096: CALL_OW 250
78100: STR
78101: PUSH
78102: LD_STRING , 
78104: STR
78105: PUSH
78106: LD_VAR 0 3
78110: PPUSH
78111: CALL_OW 251
78115: STR
78116: PUSH
78117: LD_STRING , 
78119: STR
78120: PUSH
78121: LD_VAR 0 3
78125: PPUSH
78126: CALL_OW 254
78130: STR
78131: PUSH
78132: LD_STRING , 
78134: STR
78135: PUSH
78136: LD_VAR 0 3
78140: PPUSH
78141: LD_INT 1
78143: PPUSH
78144: CALL_OW 268
78148: STR
78149: PUSH
78150: LD_STRING , 
78152: STR
78153: PUSH
78154: LD_VAR 0 3
78158: PPUSH
78159: LD_INT 2
78161: PPUSH
78162: CALL_OW 268
78166: STR
78167: PUSH
78168: LD_STRING ],
78170: STR
78171: PPUSH
78172: CALL_OW 561
// end ;
78176: GO 78070
78178: POP
78179: POP
// AddToLog ( ]; ) ;
78180: LD_STRING ];
78182: PPUSH
78183: CALL_OW 561
// end ;
78187: LD_VAR 0 2
78191: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78192: LD_INT 0
78194: PPUSH
78195: PPUSH
78196: PPUSH
78197: PPUSH
78198: PPUSH
// if not area or not rate or not max then
78199: LD_VAR 0 1
78203: NOT
78204: PUSH
78205: LD_VAR 0 2
78209: NOT
78210: OR
78211: PUSH
78212: LD_VAR 0 4
78216: NOT
78217: OR
78218: IFFALSE 78222
// exit ;
78220: GO 78411
// while 1 do
78222: LD_INT 1
78224: IFFALSE 78411
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78226: LD_ADDR_VAR 0 9
78230: PUSH
78231: LD_VAR 0 1
78235: PPUSH
78236: LD_INT 1
78238: PPUSH
78239: CALL_OW 287
78243: PUSH
78244: LD_INT 10
78246: MUL
78247: ST_TO_ADDR
// r := rate / 10 ;
78248: LD_ADDR_VAR 0 7
78252: PUSH
78253: LD_VAR 0 2
78257: PUSH
78258: LD_INT 10
78260: DIVREAL
78261: ST_TO_ADDR
// time := 1 1$00 ;
78262: LD_ADDR_VAR 0 8
78266: PUSH
78267: LD_INT 2100
78269: ST_TO_ADDR
// if amount < min then
78270: LD_VAR 0 9
78274: PUSH
78275: LD_VAR 0 3
78279: LESS
78280: IFFALSE 78298
// r := r * 2 else
78282: LD_ADDR_VAR 0 7
78286: PUSH
78287: LD_VAR 0 7
78291: PUSH
78292: LD_INT 2
78294: MUL
78295: ST_TO_ADDR
78296: GO 78324
// if amount > max then
78298: LD_VAR 0 9
78302: PUSH
78303: LD_VAR 0 4
78307: GREATER
78308: IFFALSE 78324
// r := r / 2 ;
78310: LD_ADDR_VAR 0 7
78314: PUSH
78315: LD_VAR 0 7
78319: PUSH
78320: LD_INT 2
78322: DIVREAL
78323: ST_TO_ADDR
// time := time / r ;
78324: LD_ADDR_VAR 0 8
78328: PUSH
78329: LD_VAR 0 8
78333: PUSH
78334: LD_VAR 0 7
78338: DIVREAL
78339: ST_TO_ADDR
// if time < 0 then
78340: LD_VAR 0 8
78344: PUSH
78345: LD_INT 0
78347: LESS
78348: IFFALSE 78365
// time := time * - 1 ;
78350: LD_ADDR_VAR 0 8
78354: PUSH
78355: LD_VAR 0 8
78359: PUSH
78360: LD_INT 1
78362: NEG
78363: MUL
78364: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78365: LD_VAR 0 8
78369: PUSH
78370: LD_INT 35
78372: PPUSH
78373: LD_INT 875
78375: PPUSH
78376: CALL_OW 12
78380: PLUS
78381: PPUSH
78382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78386: LD_INT 1
78388: PPUSH
78389: LD_INT 5
78391: PPUSH
78392: CALL_OW 12
78396: PPUSH
78397: LD_VAR 0 1
78401: PPUSH
78402: LD_INT 1
78404: PPUSH
78405: CALL_OW 55
// end ;
78409: GO 78222
// end ;
78411: LD_VAR 0 5
78415: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78416: LD_INT 0
78418: PPUSH
78419: PPUSH
78420: PPUSH
78421: PPUSH
78422: PPUSH
78423: PPUSH
78424: PPUSH
78425: PPUSH
// if not turrets or not factories then
78426: LD_VAR 0 1
78430: NOT
78431: PUSH
78432: LD_VAR 0 2
78436: NOT
78437: OR
78438: IFFALSE 78442
// exit ;
78440: GO 78749
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78442: LD_ADDR_VAR 0 10
78446: PUSH
78447: LD_INT 5
78449: PUSH
78450: LD_INT 6
78452: PUSH
78453: EMPTY
78454: LIST
78455: LIST
78456: PUSH
78457: LD_INT 2
78459: PUSH
78460: LD_INT 4
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: PUSH
78467: LD_INT 3
78469: PUSH
78470: LD_INT 5
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: LIST
78481: PUSH
78482: LD_INT 24
78484: PUSH
78485: LD_INT 25
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 23
78494: PUSH
78495: LD_INT 27
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: LD_INT 42
78508: PUSH
78509: LD_INT 43
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PUSH
78516: LD_INT 44
78518: PUSH
78519: LD_INT 46
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 45
78528: PUSH
78529: LD_INT 47
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: LIST
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: LIST
78545: ST_TO_ADDR
// result := [ ] ;
78546: LD_ADDR_VAR 0 3
78550: PUSH
78551: EMPTY
78552: ST_TO_ADDR
// for i in turrets do
78553: LD_ADDR_VAR 0 4
78557: PUSH
78558: LD_VAR 0 1
78562: PUSH
78563: FOR_IN
78564: IFFALSE 78747
// begin nat := GetNation ( i ) ;
78566: LD_ADDR_VAR 0 7
78570: PUSH
78571: LD_VAR 0 4
78575: PPUSH
78576: CALL_OW 248
78580: ST_TO_ADDR
// weapon := 0 ;
78581: LD_ADDR_VAR 0 8
78585: PUSH
78586: LD_INT 0
78588: ST_TO_ADDR
// if not nat then
78589: LD_VAR 0 7
78593: NOT
78594: IFFALSE 78598
// continue ;
78596: GO 78563
// for j in list [ nat ] do
78598: LD_ADDR_VAR 0 5
78602: PUSH
78603: LD_VAR 0 10
78607: PUSH
78608: LD_VAR 0 7
78612: ARRAY
78613: PUSH
78614: FOR_IN
78615: IFFALSE 78656
// if GetBWeapon ( i ) = j [ 1 ] then
78617: LD_VAR 0 4
78621: PPUSH
78622: CALL_OW 269
78626: PUSH
78627: LD_VAR 0 5
78631: PUSH
78632: LD_INT 1
78634: ARRAY
78635: EQUAL
78636: IFFALSE 78654
// begin weapon := j [ 2 ] ;
78638: LD_ADDR_VAR 0 8
78642: PUSH
78643: LD_VAR 0 5
78647: PUSH
78648: LD_INT 2
78650: ARRAY
78651: ST_TO_ADDR
// break ;
78652: GO 78656
// end ;
78654: GO 78614
78656: POP
78657: POP
// if not weapon then
78658: LD_VAR 0 8
78662: NOT
78663: IFFALSE 78667
// continue ;
78665: GO 78563
// for k in factories do
78667: LD_ADDR_VAR 0 6
78671: PUSH
78672: LD_VAR 0 2
78676: PUSH
78677: FOR_IN
78678: IFFALSE 78743
// begin weapons := AvailableWeaponList ( k ) ;
78680: LD_ADDR_VAR 0 9
78684: PUSH
78685: LD_VAR 0 6
78689: PPUSH
78690: CALL_OW 478
78694: ST_TO_ADDR
// if not weapons then
78695: LD_VAR 0 9
78699: NOT
78700: IFFALSE 78704
// continue ;
78702: GO 78677
// if weapon in weapons then
78704: LD_VAR 0 8
78708: PUSH
78709: LD_VAR 0 9
78713: IN
78714: IFFALSE 78741
// begin result := [ i , weapon ] ;
78716: LD_ADDR_VAR 0 3
78720: PUSH
78721: LD_VAR 0 4
78725: PUSH
78726: LD_VAR 0 8
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: ST_TO_ADDR
// exit ;
78735: POP
78736: POP
78737: POP
78738: POP
78739: GO 78749
// end ; end ;
78741: GO 78677
78743: POP
78744: POP
// end ;
78745: GO 78563
78747: POP
78748: POP
// end ;
78749: LD_VAR 0 3
78753: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78754: LD_INT 0
78756: PPUSH
// if not side or side > 8 then
78757: LD_VAR 0 3
78761: NOT
78762: PUSH
78763: LD_VAR 0 3
78767: PUSH
78768: LD_INT 8
78770: GREATER
78771: OR
78772: IFFALSE 78776
// exit ;
78774: GO 78835
// if not range then
78776: LD_VAR 0 4
78780: NOT
78781: IFFALSE 78792
// range := - 12 ;
78783: LD_ADDR_VAR 0 4
78787: PUSH
78788: LD_INT 12
78790: NEG
78791: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78792: LD_VAR 0 1
78796: PPUSH
78797: LD_VAR 0 2
78801: PPUSH
78802: LD_VAR 0 3
78806: PPUSH
78807: LD_VAR 0 4
78811: PPUSH
78812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78816: LD_VAR 0 1
78820: PPUSH
78821: LD_VAR 0 2
78825: PPUSH
78826: LD_VAR 0 3
78830: PPUSH
78831: CALL_OW 331
// end ;
78835: LD_VAR 0 5
78839: RET
// export function Video ( mode ) ; begin
78840: LD_INT 0
78842: PPUSH
// ingame_video = mode ;
78843: LD_ADDR_OWVAR 52
78847: PUSH
78848: LD_VAR 0 1
78852: ST_TO_ADDR
// interface_hidden = mode ;
78853: LD_ADDR_OWVAR 54
78857: PUSH
78858: LD_VAR 0 1
78862: ST_TO_ADDR
// end ;
78863: LD_VAR 0 2
78867: RET
// export function Join ( array , element ) ; begin
78868: LD_INT 0
78870: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78871: LD_ADDR_VAR 0 3
78875: PUSH
78876: LD_VAR 0 1
78880: PPUSH
78881: LD_VAR 0 1
78885: PUSH
78886: LD_INT 1
78888: PLUS
78889: PPUSH
78890: LD_VAR 0 2
78894: PPUSH
78895: CALL_OW 1
78899: ST_TO_ADDR
// end ;
78900: LD_VAR 0 3
78904: RET
// export function JoinUnion ( array , element ) ; begin
78905: LD_INT 0
78907: PPUSH
// result := array union element ;
78908: LD_ADDR_VAR 0 3
78912: PUSH
78913: LD_VAR 0 1
78917: PUSH
78918: LD_VAR 0 2
78922: UNION
78923: ST_TO_ADDR
// end ;
78924: LD_VAR 0 3
78928: RET
// export function GetBehemoths ( side ) ; begin
78929: LD_INT 0
78931: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78932: LD_ADDR_VAR 0 2
78936: PUSH
78937: LD_INT 22
78939: PUSH
78940: LD_VAR 0 1
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 31
78951: PUSH
78952: LD_INT 25
78954: PUSH
78955: EMPTY
78956: LIST
78957: LIST
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: PPUSH
78963: CALL_OW 69
78967: ST_TO_ADDR
// end ;
78968: LD_VAR 0 2
78972: RET
// export function Shuffle ( array ) ; var i , index ; begin
78973: LD_INT 0
78975: PPUSH
78976: PPUSH
78977: PPUSH
// result := [ ] ;
78978: LD_ADDR_VAR 0 2
78982: PUSH
78983: EMPTY
78984: ST_TO_ADDR
// if not array then
78985: LD_VAR 0 1
78989: NOT
78990: IFFALSE 78994
// exit ;
78992: GO 79093
// Randomize ;
78994: CALL_OW 10
// for i = array downto 1 do
78998: LD_ADDR_VAR 0 3
79002: PUSH
79003: DOUBLE
79004: LD_VAR 0 1
79008: INC
79009: ST_TO_ADDR
79010: LD_INT 1
79012: PUSH
79013: FOR_DOWNTO
79014: IFFALSE 79091
// begin index := rand ( 1 , array ) ;
79016: LD_ADDR_VAR 0 4
79020: PUSH
79021: LD_INT 1
79023: PPUSH
79024: LD_VAR 0 1
79028: PPUSH
79029: CALL_OW 12
79033: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79034: LD_ADDR_VAR 0 2
79038: PUSH
79039: LD_VAR 0 2
79043: PPUSH
79044: LD_VAR 0 2
79048: PUSH
79049: LD_INT 1
79051: PLUS
79052: PPUSH
79053: LD_VAR 0 1
79057: PUSH
79058: LD_VAR 0 4
79062: ARRAY
79063: PPUSH
79064: CALL_OW 2
79068: ST_TO_ADDR
// array := Delete ( array , index ) ;
79069: LD_ADDR_VAR 0 1
79073: PUSH
79074: LD_VAR 0 1
79078: PPUSH
79079: LD_VAR 0 4
79083: PPUSH
79084: CALL_OW 3
79088: ST_TO_ADDR
// end ;
79089: GO 79013
79091: POP
79092: POP
// end ;
79093: LD_VAR 0 2
79097: RET
// export function GetBaseMaterials ( base ) ; begin
79098: LD_INT 0
79100: PPUSH
// result := [ 0 , 0 , 0 ] ;
79101: LD_ADDR_VAR 0 2
79105: PUSH
79106: LD_INT 0
79108: PUSH
79109: LD_INT 0
79111: PUSH
79112: LD_INT 0
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: LIST
79119: ST_TO_ADDR
// if not base then
79120: LD_VAR 0 1
79124: NOT
79125: IFFALSE 79129
// exit ;
79127: GO 79178
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79129: LD_ADDR_VAR 0 2
79133: PUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: LD_INT 1
79141: PPUSH
79142: CALL_OW 275
79146: PUSH
79147: LD_VAR 0 1
79151: PPUSH
79152: LD_INT 2
79154: PPUSH
79155: CALL_OW 275
79159: PUSH
79160: LD_VAR 0 1
79164: PPUSH
79165: LD_INT 3
79167: PPUSH
79168: CALL_OW 275
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: ST_TO_ADDR
// end ;
79178: LD_VAR 0 2
79182: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79183: LD_INT 0
79185: PPUSH
79186: PPUSH
// result := array ;
79187: LD_ADDR_VAR 0 3
79191: PUSH
79192: LD_VAR 0 1
79196: ST_TO_ADDR
// if size >= result then
79197: LD_VAR 0 2
79201: PUSH
79202: LD_VAR 0 3
79206: GREATEREQUAL
79207: IFFALSE 79211
// exit ;
79209: GO 79261
// if size then
79211: LD_VAR 0 2
79215: IFFALSE 79261
// for i := array downto size do
79217: LD_ADDR_VAR 0 4
79221: PUSH
79222: DOUBLE
79223: LD_VAR 0 1
79227: INC
79228: ST_TO_ADDR
79229: LD_VAR 0 2
79233: PUSH
79234: FOR_DOWNTO
79235: IFFALSE 79259
// result := Delete ( result , result ) ;
79237: LD_ADDR_VAR 0 3
79241: PUSH
79242: LD_VAR 0 3
79246: PPUSH
79247: LD_VAR 0 3
79251: PPUSH
79252: CALL_OW 3
79256: ST_TO_ADDR
79257: GO 79234
79259: POP
79260: POP
// end ;
79261: LD_VAR 0 3
79265: RET
// export function ComExit ( unit ) ; var tmp ; begin
79266: LD_INT 0
79268: PPUSH
79269: PPUSH
// if not IsInUnit ( unit ) then
79270: LD_VAR 0 1
79274: PPUSH
79275: CALL_OW 310
79279: NOT
79280: IFFALSE 79284
// exit ;
79282: GO 79344
// tmp := IsInUnit ( unit ) ;
79284: LD_ADDR_VAR 0 3
79288: PUSH
79289: LD_VAR 0 1
79293: PPUSH
79294: CALL_OW 310
79298: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79299: LD_VAR 0 3
79303: PPUSH
79304: CALL_OW 247
79308: PUSH
79309: LD_INT 2
79311: EQUAL
79312: IFFALSE 79325
// ComExitVehicle ( unit ) else
79314: LD_VAR 0 1
79318: PPUSH
79319: CALL_OW 121
79323: GO 79334
// ComExitBuilding ( unit ) ;
79325: LD_VAR 0 1
79329: PPUSH
79330: CALL_OW 122
// result := tmp ;
79334: LD_ADDR_VAR 0 2
79338: PUSH
79339: LD_VAR 0 3
79343: ST_TO_ADDR
// end ;
79344: LD_VAR 0 2
79348: RET
// export function ComExitAll ( units ) ; var i ; begin
79349: LD_INT 0
79351: PPUSH
79352: PPUSH
// if not units then
79353: LD_VAR 0 1
79357: NOT
79358: IFFALSE 79362
// exit ;
79360: GO 79388
// for i in units do
79362: LD_ADDR_VAR 0 3
79366: PUSH
79367: LD_VAR 0 1
79371: PUSH
79372: FOR_IN
79373: IFFALSE 79386
// ComExit ( i ) ;
79375: LD_VAR 0 3
79379: PPUSH
79380: CALL 79266 0 1
79384: GO 79372
79386: POP
79387: POP
// end ;
79388: LD_VAR 0 2
79392: RET
// export function ResetHc ; begin
79393: LD_INT 0
79395: PPUSH
// InitHc ;
79396: CALL_OW 19
// hc_importance := 0 ;
79400: LD_ADDR_OWVAR 32
79404: PUSH
79405: LD_INT 0
79407: ST_TO_ADDR
// end ;
79408: LD_VAR 0 1
79412: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79413: LD_INT 0
79415: PPUSH
79416: PPUSH
79417: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79418: LD_ADDR_VAR 0 6
79422: PUSH
79423: LD_VAR 0 1
79427: PUSH
79428: LD_VAR 0 3
79432: PLUS
79433: PUSH
79434: LD_INT 2
79436: DIV
79437: ST_TO_ADDR
// if _x < 0 then
79438: LD_VAR 0 6
79442: PUSH
79443: LD_INT 0
79445: LESS
79446: IFFALSE 79463
// _x := _x * - 1 ;
79448: LD_ADDR_VAR 0 6
79452: PUSH
79453: LD_VAR 0 6
79457: PUSH
79458: LD_INT 1
79460: NEG
79461: MUL
79462: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79463: LD_ADDR_VAR 0 7
79467: PUSH
79468: LD_VAR 0 2
79472: PUSH
79473: LD_VAR 0 4
79477: PLUS
79478: PUSH
79479: LD_INT 2
79481: DIV
79482: ST_TO_ADDR
// if _y < 0 then
79483: LD_VAR 0 7
79487: PUSH
79488: LD_INT 0
79490: LESS
79491: IFFALSE 79508
// _y := _y * - 1 ;
79493: LD_ADDR_VAR 0 7
79497: PUSH
79498: LD_VAR 0 7
79502: PUSH
79503: LD_INT 1
79505: NEG
79506: MUL
79507: ST_TO_ADDR
// result := [ _x , _y ] ;
79508: LD_ADDR_VAR 0 5
79512: PUSH
79513: LD_VAR 0 6
79517: PUSH
79518: LD_VAR 0 7
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: ST_TO_ADDR
// end ;
79527: LD_VAR 0 5
79531: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79532: LD_INT 0
79534: PPUSH
79535: PPUSH
79536: PPUSH
79537: PPUSH
// task := GetTaskList ( unit ) ;
79538: LD_ADDR_VAR 0 7
79542: PUSH
79543: LD_VAR 0 1
79547: PPUSH
79548: CALL_OW 437
79552: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79553: LD_VAR 0 7
79557: NOT
79558: PUSH
79559: LD_VAR 0 1
79563: PPUSH
79564: LD_VAR 0 2
79568: PPUSH
79569: CALL_OW 308
79573: NOT
79574: AND
79575: IFFALSE 79579
// exit ;
79577: GO 79697
// if IsInArea ( unit , area ) then
79579: LD_VAR 0 1
79583: PPUSH
79584: LD_VAR 0 2
79588: PPUSH
79589: CALL_OW 308
79593: IFFALSE 79611
// begin ComMoveToArea ( unit , goAway ) ;
79595: LD_VAR 0 1
79599: PPUSH
79600: LD_VAR 0 3
79604: PPUSH
79605: CALL_OW 113
// exit ;
79609: GO 79697
// end ; if task [ 1 ] [ 1 ] <> M then
79611: LD_VAR 0 7
79615: PUSH
79616: LD_INT 1
79618: ARRAY
79619: PUSH
79620: LD_INT 1
79622: ARRAY
79623: PUSH
79624: LD_STRING M
79626: NONEQUAL
79627: IFFALSE 79631
// exit ;
79629: GO 79697
// x := task [ 1 ] [ 2 ] ;
79631: LD_ADDR_VAR 0 5
79635: PUSH
79636: LD_VAR 0 7
79640: PUSH
79641: LD_INT 1
79643: ARRAY
79644: PUSH
79645: LD_INT 2
79647: ARRAY
79648: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79649: LD_ADDR_VAR 0 6
79653: PUSH
79654: LD_VAR 0 7
79658: PUSH
79659: LD_INT 1
79661: ARRAY
79662: PUSH
79663: LD_INT 3
79665: ARRAY
79666: ST_TO_ADDR
// if InArea ( x , y , area ) then
79667: LD_VAR 0 5
79671: PPUSH
79672: LD_VAR 0 6
79676: PPUSH
79677: LD_VAR 0 2
79681: PPUSH
79682: CALL_OW 309
79686: IFFALSE 79697
// ComStop ( unit ) ;
79688: LD_VAR 0 1
79692: PPUSH
79693: CALL_OW 141
// end ;
79697: LD_VAR 0 4
79701: RET
// export function Abs ( value ) ; begin
79702: LD_INT 0
79704: PPUSH
// result := value ;
79705: LD_ADDR_VAR 0 2
79709: PUSH
79710: LD_VAR 0 1
79714: ST_TO_ADDR
// if value < 0 then
79715: LD_VAR 0 1
79719: PUSH
79720: LD_INT 0
79722: LESS
79723: IFFALSE 79740
// result := value * - 1 ;
79725: LD_ADDR_VAR 0 2
79729: PUSH
79730: LD_VAR 0 1
79734: PUSH
79735: LD_INT 1
79737: NEG
79738: MUL
79739: ST_TO_ADDR
// end ;
79740: LD_VAR 0 2
79744: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79745: LD_INT 0
79747: PPUSH
79748: PPUSH
79749: PPUSH
79750: PPUSH
79751: PPUSH
79752: PPUSH
79753: PPUSH
79754: PPUSH
// if not unit or not building then
79755: LD_VAR 0 1
79759: NOT
79760: PUSH
79761: LD_VAR 0 2
79765: NOT
79766: OR
79767: IFFALSE 79771
// exit ;
79769: GO 79997
// x := GetX ( building ) ;
79771: LD_ADDR_VAR 0 4
79775: PUSH
79776: LD_VAR 0 2
79780: PPUSH
79781: CALL_OW 250
79785: ST_TO_ADDR
// y := GetY ( building ) ;
79786: LD_ADDR_VAR 0 6
79790: PUSH
79791: LD_VAR 0 2
79795: PPUSH
79796: CALL_OW 251
79800: ST_TO_ADDR
// d := GetDir ( building ) ;
79801: LD_ADDR_VAR 0 8
79805: PUSH
79806: LD_VAR 0 2
79810: PPUSH
79811: CALL_OW 254
79815: ST_TO_ADDR
// r := 4 ;
79816: LD_ADDR_VAR 0 9
79820: PUSH
79821: LD_INT 4
79823: ST_TO_ADDR
// for i := 1 to 5 do
79824: LD_ADDR_VAR 0 10
79828: PUSH
79829: DOUBLE
79830: LD_INT 1
79832: DEC
79833: ST_TO_ADDR
79834: LD_INT 5
79836: PUSH
79837: FOR_TO
79838: IFFALSE 79995
// begin _x := ShiftX ( x , d , r + i ) ;
79840: LD_ADDR_VAR 0 5
79844: PUSH
79845: LD_VAR 0 4
79849: PPUSH
79850: LD_VAR 0 8
79854: PPUSH
79855: LD_VAR 0 9
79859: PUSH
79860: LD_VAR 0 10
79864: PLUS
79865: PPUSH
79866: CALL_OW 272
79870: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79871: LD_ADDR_VAR 0 7
79875: PUSH
79876: LD_VAR 0 6
79880: PPUSH
79881: LD_VAR 0 8
79885: PPUSH
79886: LD_VAR 0 9
79890: PUSH
79891: LD_VAR 0 10
79895: PLUS
79896: PPUSH
79897: CALL_OW 273
79901: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79902: LD_VAR 0 5
79906: PPUSH
79907: LD_VAR 0 7
79911: PPUSH
79912: CALL_OW 488
79916: PUSH
79917: LD_VAR 0 5
79921: PPUSH
79922: LD_VAR 0 7
79926: PPUSH
79927: CALL_OW 428
79931: PPUSH
79932: CALL_OW 247
79936: PUSH
79937: LD_INT 3
79939: PUSH
79940: LD_INT 2
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: IN
79947: NOT
79948: AND
79949: IFFALSE 79993
// begin ComMoveXY ( unit , _x , _y ) ;
79951: LD_VAR 0 1
79955: PPUSH
79956: LD_VAR 0 5
79960: PPUSH
79961: LD_VAR 0 7
79965: PPUSH
79966: CALL_OW 111
// result := [ _x , _y ] ;
79970: LD_ADDR_VAR 0 3
79974: PUSH
79975: LD_VAR 0 5
79979: PUSH
79980: LD_VAR 0 7
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: ST_TO_ADDR
// exit ;
79989: POP
79990: POP
79991: GO 79997
// end ; end ;
79993: GO 79837
79995: POP
79996: POP
// end ;
79997: LD_VAR 0 3
80001: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80002: LD_INT 0
80004: PPUSH
80005: PPUSH
80006: PPUSH
// result := 0 ;
80007: LD_ADDR_VAR 0 3
80011: PUSH
80012: LD_INT 0
80014: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80015: LD_VAR 0 1
80019: PUSH
80020: LD_INT 0
80022: LESS
80023: PUSH
80024: LD_VAR 0 1
80028: PUSH
80029: LD_INT 8
80031: GREATER
80032: OR
80033: PUSH
80034: LD_VAR 0 2
80038: PUSH
80039: LD_INT 0
80041: LESS
80042: OR
80043: PUSH
80044: LD_VAR 0 2
80048: PUSH
80049: LD_INT 8
80051: GREATER
80052: OR
80053: IFFALSE 80057
// exit ;
80055: GO 80132
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80057: LD_ADDR_VAR 0 4
80061: PUSH
80062: LD_INT 22
80064: PUSH
80065: LD_VAR 0 2
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PPUSH
80074: CALL_OW 69
80078: PUSH
80079: FOR_IN
80080: IFFALSE 80130
// begin un := UnitShoot ( i ) ;
80082: LD_ADDR_VAR 0 5
80086: PUSH
80087: LD_VAR 0 4
80091: PPUSH
80092: CALL_OW 504
80096: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80097: LD_VAR 0 5
80101: PPUSH
80102: CALL_OW 255
80106: PUSH
80107: LD_VAR 0 1
80111: EQUAL
80112: IFFALSE 80128
// begin result := un ;
80114: LD_ADDR_VAR 0 3
80118: PUSH
80119: LD_VAR 0 5
80123: ST_TO_ADDR
// exit ;
80124: POP
80125: POP
80126: GO 80132
// end ; end ;
80128: GO 80079
80130: POP
80131: POP
// end ;
80132: LD_VAR 0 3
80136: RET
// export function GetCargoBay ( units ) ; begin
80137: LD_INT 0
80139: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80140: LD_ADDR_VAR 0 2
80144: PUSH
80145: LD_VAR 0 1
80149: PPUSH
80150: LD_INT 2
80152: PUSH
80153: LD_INT 34
80155: PUSH
80156: LD_INT 12
80158: PUSH
80159: EMPTY
80160: LIST
80161: LIST
80162: PUSH
80163: LD_INT 34
80165: PUSH
80166: LD_INT 51
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: PUSH
80173: LD_INT 34
80175: PUSH
80176: LD_INT 32
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 34
80185: PUSH
80186: LD_INT 89
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: PPUSH
80200: CALL_OW 72
80204: ST_TO_ADDR
// end ;
80205: LD_VAR 0 2
80209: RET
// export function Negate ( value ) ; begin
80210: LD_INT 0
80212: PPUSH
// result := not value ;
80213: LD_ADDR_VAR 0 2
80217: PUSH
80218: LD_VAR 0 1
80222: NOT
80223: ST_TO_ADDR
// end ;
80224: LD_VAR 0 2
80228: RET
// export function Inc ( value ) ; begin
80229: LD_INT 0
80231: PPUSH
// result := value + 1 ;
80232: LD_ADDR_VAR 0 2
80236: PUSH
80237: LD_VAR 0 1
80241: PUSH
80242: LD_INT 1
80244: PLUS
80245: ST_TO_ADDR
// end ;
80246: LD_VAR 0 2
80250: RET
// export function Dec ( value ) ; begin
80251: LD_INT 0
80253: PPUSH
// result := value - 1 ;
80254: LD_ADDR_VAR 0 2
80258: PUSH
80259: LD_VAR 0 1
80263: PUSH
80264: LD_INT 1
80266: MINUS
80267: ST_TO_ADDR
// end ;
80268: LD_VAR 0 2
80272: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80273: LD_INT 0
80275: PPUSH
80276: PPUSH
80277: PPUSH
80278: PPUSH
80279: PPUSH
80280: PPUSH
80281: PPUSH
80282: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80283: LD_VAR 0 1
80287: PPUSH
80288: LD_VAR 0 2
80292: PPUSH
80293: CALL_OW 488
80297: NOT
80298: PUSH
80299: LD_VAR 0 3
80303: PPUSH
80304: LD_VAR 0 4
80308: PPUSH
80309: CALL_OW 488
80313: NOT
80314: OR
80315: IFFALSE 80328
// begin result := - 1 ;
80317: LD_ADDR_VAR 0 5
80321: PUSH
80322: LD_INT 1
80324: NEG
80325: ST_TO_ADDR
// exit ;
80326: GO 80563
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80328: LD_ADDR_VAR 0 12
80332: PUSH
80333: LD_VAR 0 1
80337: PPUSH
80338: LD_VAR 0 2
80342: PPUSH
80343: LD_VAR 0 3
80347: PPUSH
80348: LD_VAR 0 4
80352: PPUSH
80353: CALL 79413 0 4
80357: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80358: LD_ADDR_VAR 0 11
80362: PUSH
80363: LD_VAR 0 1
80367: PPUSH
80368: LD_VAR 0 2
80372: PPUSH
80373: LD_VAR 0 12
80377: PUSH
80378: LD_INT 1
80380: ARRAY
80381: PPUSH
80382: LD_VAR 0 12
80386: PUSH
80387: LD_INT 2
80389: ARRAY
80390: PPUSH
80391: CALL_OW 298
80395: ST_TO_ADDR
// distance := 9999 ;
80396: LD_ADDR_VAR 0 10
80400: PUSH
80401: LD_INT 9999
80403: ST_TO_ADDR
// for i := 0 to 5 do
80404: LD_ADDR_VAR 0 6
80408: PUSH
80409: DOUBLE
80410: LD_INT 0
80412: DEC
80413: ST_TO_ADDR
80414: LD_INT 5
80416: PUSH
80417: FOR_TO
80418: IFFALSE 80561
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80420: LD_ADDR_VAR 0 7
80424: PUSH
80425: LD_VAR 0 1
80429: PPUSH
80430: LD_VAR 0 6
80434: PPUSH
80435: LD_VAR 0 11
80439: PPUSH
80440: CALL_OW 272
80444: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80445: LD_ADDR_VAR 0 8
80449: PUSH
80450: LD_VAR 0 2
80454: PPUSH
80455: LD_VAR 0 6
80459: PPUSH
80460: LD_VAR 0 11
80464: PPUSH
80465: CALL_OW 273
80469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80470: LD_VAR 0 7
80474: PPUSH
80475: LD_VAR 0 8
80479: PPUSH
80480: CALL_OW 488
80484: NOT
80485: IFFALSE 80489
// continue ;
80487: GO 80417
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80489: LD_ADDR_VAR 0 9
80493: PUSH
80494: LD_VAR 0 12
80498: PUSH
80499: LD_INT 1
80501: ARRAY
80502: PPUSH
80503: LD_VAR 0 12
80507: PUSH
80508: LD_INT 2
80510: ARRAY
80511: PPUSH
80512: LD_VAR 0 7
80516: PPUSH
80517: LD_VAR 0 8
80521: PPUSH
80522: CALL_OW 298
80526: ST_TO_ADDR
// if tmp < distance then
80527: LD_VAR 0 9
80531: PUSH
80532: LD_VAR 0 10
80536: LESS
80537: IFFALSE 80559
// begin result := i ;
80539: LD_ADDR_VAR 0 5
80543: PUSH
80544: LD_VAR 0 6
80548: ST_TO_ADDR
// distance := tmp ;
80549: LD_ADDR_VAR 0 10
80553: PUSH
80554: LD_VAR 0 9
80558: ST_TO_ADDR
// end ; end ;
80559: GO 80417
80561: POP
80562: POP
// end ;
80563: LD_VAR 0 5
80567: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80568: LD_INT 0
80570: PPUSH
80571: PPUSH
// if not driver or not IsInUnit ( driver ) then
80572: LD_VAR 0 1
80576: NOT
80577: PUSH
80578: LD_VAR 0 1
80582: PPUSH
80583: CALL_OW 310
80587: NOT
80588: OR
80589: IFFALSE 80593
// exit ;
80591: GO 80683
// vehicle := IsInUnit ( driver ) ;
80593: LD_ADDR_VAR 0 3
80597: PUSH
80598: LD_VAR 0 1
80602: PPUSH
80603: CALL_OW 310
80607: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80608: LD_VAR 0 1
80612: PPUSH
80613: LD_STRING \
80615: PUSH
80616: LD_INT 0
80618: PUSH
80619: LD_INT 0
80621: PUSH
80622: LD_INT 0
80624: PUSH
80625: LD_INT 0
80627: PUSH
80628: LD_INT 0
80630: PUSH
80631: LD_INT 0
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: LIST
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: PUSH
80643: LD_STRING E
80645: PUSH
80646: LD_INT 0
80648: PUSH
80649: LD_INT 0
80651: PUSH
80652: LD_VAR 0 3
80656: PUSH
80657: LD_INT 0
80659: PUSH
80660: LD_INT 0
80662: PUSH
80663: LD_INT 0
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: LIST
80670: LIST
80671: LIST
80672: LIST
80673: LIST
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PPUSH
80679: CALL_OW 446
// end ;
80683: LD_VAR 0 2
80687: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80688: LD_INT 0
80690: PPUSH
80691: PPUSH
// if not driver or not IsInUnit ( driver ) then
80692: LD_VAR 0 1
80696: NOT
80697: PUSH
80698: LD_VAR 0 1
80702: PPUSH
80703: CALL_OW 310
80707: NOT
80708: OR
80709: IFFALSE 80713
// exit ;
80711: GO 80803
// vehicle := IsInUnit ( driver ) ;
80713: LD_ADDR_VAR 0 3
80717: PUSH
80718: LD_VAR 0 1
80722: PPUSH
80723: CALL_OW 310
80727: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80728: LD_VAR 0 1
80732: PPUSH
80733: LD_STRING \
80735: PUSH
80736: LD_INT 0
80738: PUSH
80739: LD_INT 0
80741: PUSH
80742: LD_INT 0
80744: PUSH
80745: LD_INT 0
80747: PUSH
80748: LD_INT 0
80750: PUSH
80751: LD_INT 0
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: LIST
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: PUSH
80763: LD_STRING E
80765: PUSH
80766: LD_INT 0
80768: PUSH
80769: LD_INT 0
80771: PUSH
80772: LD_VAR 0 3
80776: PUSH
80777: LD_INT 0
80779: PUSH
80780: LD_INT 0
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: PPUSH
80799: CALL_OW 447
// end ;
80803: LD_VAR 0 2
80807: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80808: LD_INT 0
80810: PPUSH
80811: PPUSH
80812: PPUSH
// tmp := [ ] ;
80813: LD_ADDR_VAR 0 5
80817: PUSH
80818: EMPTY
80819: ST_TO_ADDR
// for i in units do
80820: LD_ADDR_VAR 0 4
80824: PUSH
80825: LD_VAR 0 1
80829: PUSH
80830: FOR_IN
80831: IFFALSE 80869
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80833: LD_ADDR_VAR 0 5
80837: PUSH
80838: LD_VAR 0 5
80842: PPUSH
80843: LD_VAR 0 5
80847: PUSH
80848: LD_INT 1
80850: PLUS
80851: PPUSH
80852: LD_VAR 0 4
80856: PPUSH
80857: CALL_OW 256
80861: PPUSH
80862: CALL_OW 2
80866: ST_TO_ADDR
80867: GO 80830
80869: POP
80870: POP
// if not tmp then
80871: LD_VAR 0 5
80875: NOT
80876: IFFALSE 80880
// exit ;
80878: GO 80928
// if asc then
80880: LD_VAR 0 2
80884: IFFALSE 80908
// result := SortListByListAsc ( units , tmp ) else
80886: LD_ADDR_VAR 0 3
80890: PUSH
80891: LD_VAR 0 1
80895: PPUSH
80896: LD_VAR 0 5
80900: PPUSH
80901: CALL_OW 76
80905: ST_TO_ADDR
80906: GO 80928
// result := SortListByListDesc ( units , tmp ) ;
80908: LD_ADDR_VAR 0 3
80912: PUSH
80913: LD_VAR 0 1
80917: PPUSH
80918: LD_VAR 0 5
80922: PPUSH
80923: CALL_OW 77
80927: ST_TO_ADDR
// end ;
80928: LD_VAR 0 3
80932: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80933: LD_INT 0
80935: PPUSH
80936: PPUSH
// task := GetTaskList ( mech ) ;
80937: LD_ADDR_VAR 0 4
80941: PUSH
80942: LD_VAR 0 1
80946: PPUSH
80947: CALL_OW 437
80951: ST_TO_ADDR
// if not task then
80952: LD_VAR 0 4
80956: NOT
80957: IFFALSE 80961
// exit ;
80959: GO 81003
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80961: LD_ADDR_VAR 0 3
80965: PUSH
80966: LD_VAR 0 4
80970: PUSH
80971: LD_INT 1
80973: ARRAY
80974: PUSH
80975: LD_INT 1
80977: ARRAY
80978: PUSH
80979: LD_STRING r
80981: EQUAL
80982: PUSH
80983: LD_VAR 0 4
80987: PUSH
80988: LD_INT 1
80990: ARRAY
80991: PUSH
80992: LD_INT 4
80994: ARRAY
80995: PUSH
80996: LD_VAR 0 2
81000: EQUAL
81001: AND
81002: ST_TO_ADDR
// end ;
81003: LD_VAR 0 3
81007: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81008: LD_INT 0
81010: PPUSH
// SetDir ( unit , d ) ;
81011: LD_VAR 0 1
81015: PPUSH
81016: LD_VAR 0 4
81020: PPUSH
81021: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81025: LD_VAR 0 1
81029: PPUSH
81030: LD_VAR 0 2
81034: PPUSH
81035: LD_VAR 0 3
81039: PPUSH
81040: LD_VAR 0 5
81044: PPUSH
81045: CALL_OW 48
// end ;
81049: LD_VAR 0 6
81053: RET
// export function ToNaturalNumber ( number ) ; begin
81054: LD_INT 0
81056: PPUSH
// result := number div 1 ;
81057: LD_ADDR_VAR 0 2
81061: PUSH
81062: LD_VAR 0 1
81066: PUSH
81067: LD_INT 1
81069: DIV
81070: ST_TO_ADDR
// if number < 0 then
81071: LD_VAR 0 1
81075: PUSH
81076: LD_INT 0
81078: LESS
81079: IFFALSE 81089
// result := 0 ;
81081: LD_ADDR_VAR 0 2
81085: PUSH
81086: LD_INT 0
81088: ST_TO_ADDR
// end ;
81089: LD_VAR 0 2
81093: RET
// export function SortByClass ( units , class ) ; var un ; begin
81094: LD_INT 0
81096: PPUSH
81097: PPUSH
// if not units or not class then
81098: LD_VAR 0 1
81102: NOT
81103: PUSH
81104: LD_VAR 0 2
81108: NOT
81109: OR
81110: IFFALSE 81114
// exit ;
81112: GO 81209
// result := [ ] ;
81114: LD_ADDR_VAR 0 3
81118: PUSH
81119: EMPTY
81120: ST_TO_ADDR
// for un in units do
81121: LD_ADDR_VAR 0 4
81125: PUSH
81126: LD_VAR 0 1
81130: PUSH
81131: FOR_IN
81132: IFFALSE 81207
// if GetClass ( un ) = class then
81134: LD_VAR 0 4
81138: PPUSH
81139: CALL_OW 257
81143: PUSH
81144: LD_VAR 0 2
81148: EQUAL
81149: IFFALSE 81176
// result := Insert ( result , 1 , un ) else
81151: LD_ADDR_VAR 0 3
81155: PUSH
81156: LD_VAR 0 3
81160: PPUSH
81161: LD_INT 1
81163: PPUSH
81164: LD_VAR 0 4
81168: PPUSH
81169: CALL_OW 2
81173: ST_TO_ADDR
81174: GO 81205
// result := Replace ( result , result + 1 , un ) ;
81176: LD_ADDR_VAR 0 3
81180: PUSH
81181: LD_VAR 0 3
81185: PPUSH
81186: LD_VAR 0 3
81190: PUSH
81191: LD_INT 1
81193: PLUS
81194: PPUSH
81195: LD_VAR 0 4
81199: PPUSH
81200: CALL_OW 1
81204: ST_TO_ADDR
81205: GO 81131
81207: POP
81208: POP
// end ;
81209: LD_VAR 0 3
81213: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81214: LD_INT 0
81216: PPUSH
81217: PPUSH
81218: PPUSH
81219: PPUSH
81220: PPUSH
81221: PPUSH
81222: PPUSH
// result := [ ] ;
81223: LD_ADDR_VAR 0 4
81227: PUSH
81228: EMPTY
81229: ST_TO_ADDR
// if x - r < 0 then
81230: LD_VAR 0 1
81234: PUSH
81235: LD_VAR 0 3
81239: MINUS
81240: PUSH
81241: LD_INT 0
81243: LESS
81244: IFFALSE 81256
// min_x := 0 else
81246: LD_ADDR_VAR 0 8
81250: PUSH
81251: LD_INT 0
81253: ST_TO_ADDR
81254: GO 81272
// min_x := x - r ;
81256: LD_ADDR_VAR 0 8
81260: PUSH
81261: LD_VAR 0 1
81265: PUSH
81266: LD_VAR 0 3
81270: MINUS
81271: ST_TO_ADDR
// if y - r < 0 then
81272: LD_VAR 0 2
81276: PUSH
81277: LD_VAR 0 3
81281: MINUS
81282: PUSH
81283: LD_INT 0
81285: LESS
81286: IFFALSE 81298
// min_y := 0 else
81288: LD_ADDR_VAR 0 7
81292: PUSH
81293: LD_INT 0
81295: ST_TO_ADDR
81296: GO 81314
// min_y := y - r ;
81298: LD_ADDR_VAR 0 7
81302: PUSH
81303: LD_VAR 0 2
81307: PUSH
81308: LD_VAR 0 3
81312: MINUS
81313: ST_TO_ADDR
// max_x := x + r ;
81314: LD_ADDR_VAR 0 9
81318: PUSH
81319: LD_VAR 0 1
81323: PUSH
81324: LD_VAR 0 3
81328: PLUS
81329: ST_TO_ADDR
// max_y := y + r ;
81330: LD_ADDR_VAR 0 10
81334: PUSH
81335: LD_VAR 0 2
81339: PUSH
81340: LD_VAR 0 3
81344: PLUS
81345: ST_TO_ADDR
// for _x = min_x to max_x do
81346: LD_ADDR_VAR 0 5
81350: PUSH
81351: DOUBLE
81352: LD_VAR 0 8
81356: DEC
81357: ST_TO_ADDR
81358: LD_VAR 0 9
81362: PUSH
81363: FOR_TO
81364: IFFALSE 81465
// for _y = min_y to max_y do
81366: LD_ADDR_VAR 0 6
81370: PUSH
81371: DOUBLE
81372: LD_VAR 0 7
81376: DEC
81377: ST_TO_ADDR
81378: LD_VAR 0 10
81382: PUSH
81383: FOR_TO
81384: IFFALSE 81461
// begin if not ValidHex ( _x , _y ) then
81386: LD_VAR 0 5
81390: PPUSH
81391: LD_VAR 0 6
81395: PPUSH
81396: CALL_OW 488
81400: NOT
81401: IFFALSE 81405
// continue ;
81403: GO 81383
// if GetResourceTypeXY ( _x , _y ) then
81405: LD_VAR 0 5
81409: PPUSH
81410: LD_VAR 0 6
81414: PPUSH
81415: CALL_OW 283
81419: IFFALSE 81459
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81421: LD_ADDR_VAR 0 4
81425: PUSH
81426: LD_VAR 0 4
81430: PPUSH
81431: LD_VAR 0 4
81435: PUSH
81436: LD_INT 1
81438: PLUS
81439: PPUSH
81440: LD_VAR 0 5
81444: PUSH
81445: LD_VAR 0 6
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PPUSH
81454: CALL_OW 1
81458: ST_TO_ADDR
// end ;
81459: GO 81383
81461: POP
81462: POP
81463: GO 81363
81465: POP
81466: POP
// end ;
81467: LD_VAR 0 4
81471: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81472: LD_INT 0
81474: PPUSH
81475: PPUSH
81476: PPUSH
81477: PPUSH
81478: PPUSH
81479: PPUSH
81480: PPUSH
81481: PPUSH
// if not units then
81482: LD_VAR 0 1
81486: NOT
81487: IFFALSE 81491
// exit ;
81489: GO 82019
// result := UnitFilter ( units , [ f_ok ] ) ;
81491: LD_ADDR_VAR 0 3
81495: PUSH
81496: LD_VAR 0 1
81500: PPUSH
81501: LD_INT 50
81503: PUSH
81504: EMPTY
81505: LIST
81506: PPUSH
81507: CALL_OW 72
81511: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81512: LD_ADDR_VAR 0 8
81516: PUSH
81517: LD_VAR 0 1
81521: PUSH
81522: LD_INT 1
81524: ARRAY
81525: PPUSH
81526: CALL_OW 255
81530: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81531: LD_ADDR_VAR 0 10
81535: PUSH
81536: LD_INT 29
81538: PUSH
81539: LD_INT 91
81541: PUSH
81542: LD_INT 49
81544: PUSH
81545: EMPTY
81546: LIST
81547: LIST
81548: LIST
81549: ST_TO_ADDR
// if not result then
81550: LD_VAR 0 3
81554: NOT
81555: IFFALSE 81559
// exit ;
81557: GO 82019
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81559: LD_ADDR_VAR 0 5
81563: PUSH
81564: LD_INT 81
81566: PUSH
81567: LD_VAR 0 8
81571: PUSH
81572: EMPTY
81573: LIST
81574: LIST
81575: PPUSH
81576: CALL_OW 69
81580: ST_TO_ADDR
// for i in result do
81581: LD_ADDR_VAR 0 4
81585: PUSH
81586: LD_VAR 0 3
81590: PUSH
81591: FOR_IN
81592: IFFALSE 82017
// begin tag := GetTag ( i ) + 1 ;
81594: LD_ADDR_VAR 0 9
81598: PUSH
81599: LD_VAR 0 4
81603: PPUSH
81604: CALL_OW 110
81608: PUSH
81609: LD_INT 1
81611: PLUS
81612: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81613: LD_ADDR_VAR 0 7
81617: PUSH
81618: LD_VAR 0 4
81622: PPUSH
81623: CALL_OW 250
81627: PPUSH
81628: LD_VAR 0 4
81632: PPUSH
81633: CALL_OW 251
81637: PPUSH
81638: LD_INT 4
81640: PPUSH
81641: CALL 81214 0 3
81645: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81646: LD_VAR 0 4
81650: PPUSH
81651: CALL_OW 247
81655: PUSH
81656: LD_INT 2
81658: EQUAL
81659: PUSH
81660: LD_VAR 0 7
81664: PUSH
81665: LD_INT 2
81667: GREATER
81668: AND
81669: PUSH
81670: LD_VAR 0 4
81674: PPUSH
81675: CALL_OW 264
81679: PUSH
81680: LD_VAR 0 10
81684: IN
81685: NOT
81686: AND
81687: IFFALSE 81726
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81689: LD_VAR 0 4
81693: PPUSH
81694: LD_VAR 0 7
81698: PUSH
81699: LD_INT 1
81701: ARRAY
81702: PUSH
81703: LD_INT 1
81705: ARRAY
81706: PPUSH
81707: LD_VAR 0 7
81711: PUSH
81712: LD_INT 1
81714: ARRAY
81715: PUSH
81716: LD_INT 2
81718: ARRAY
81719: PPUSH
81720: CALL_OW 116
81724: GO 82015
// if path > tag then
81726: LD_VAR 0 2
81730: PUSH
81731: LD_VAR 0 9
81735: GREATER
81736: IFFALSE 81944
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81738: LD_ADDR_VAR 0 6
81742: PUSH
81743: LD_VAR 0 5
81747: PPUSH
81748: LD_INT 91
81750: PUSH
81751: LD_VAR 0 4
81755: PUSH
81756: LD_INT 8
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: LIST
81763: PPUSH
81764: CALL_OW 72
81768: ST_TO_ADDR
// if nearEnemy then
81769: LD_VAR 0 6
81773: IFFALSE 81842
// begin if GetWeapon ( i ) = ru_time_lapser then
81775: LD_VAR 0 4
81779: PPUSH
81780: CALL_OW 264
81784: PUSH
81785: LD_INT 49
81787: EQUAL
81788: IFFALSE 81816
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81790: LD_VAR 0 4
81794: PPUSH
81795: LD_VAR 0 6
81799: PPUSH
81800: LD_VAR 0 4
81804: PPUSH
81805: CALL_OW 74
81809: PPUSH
81810: CALL_OW 112
81814: GO 81840
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81816: LD_VAR 0 4
81820: PPUSH
81821: LD_VAR 0 6
81825: PPUSH
81826: LD_VAR 0 4
81830: PPUSH
81831: CALL_OW 74
81835: PPUSH
81836: CALL 83090 0 2
// end else
81840: GO 81942
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81842: LD_VAR 0 4
81846: PPUSH
81847: LD_VAR 0 2
81851: PUSH
81852: LD_VAR 0 9
81856: ARRAY
81857: PUSH
81858: LD_INT 1
81860: ARRAY
81861: PPUSH
81862: LD_VAR 0 2
81866: PUSH
81867: LD_VAR 0 9
81871: ARRAY
81872: PUSH
81873: LD_INT 2
81875: ARRAY
81876: PPUSH
81877: CALL_OW 297
81881: PUSH
81882: LD_INT 6
81884: GREATER
81885: IFFALSE 81928
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81887: LD_VAR 0 4
81891: PPUSH
81892: LD_VAR 0 2
81896: PUSH
81897: LD_VAR 0 9
81901: ARRAY
81902: PUSH
81903: LD_INT 1
81905: ARRAY
81906: PPUSH
81907: LD_VAR 0 2
81911: PUSH
81912: LD_VAR 0 9
81916: ARRAY
81917: PUSH
81918: LD_INT 2
81920: ARRAY
81921: PPUSH
81922: CALL_OW 114
81926: GO 81942
// SetTag ( i , tag ) ;
81928: LD_VAR 0 4
81932: PPUSH
81933: LD_VAR 0 9
81937: PPUSH
81938: CALL_OW 109
// end else
81942: GO 82015
// if enemy then
81944: LD_VAR 0 5
81948: IFFALSE 82015
// begin if GetWeapon ( i ) = ru_time_lapser then
81950: LD_VAR 0 4
81954: PPUSH
81955: CALL_OW 264
81959: PUSH
81960: LD_INT 49
81962: EQUAL
81963: IFFALSE 81991
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81965: LD_VAR 0 4
81969: PPUSH
81970: LD_VAR 0 5
81974: PPUSH
81975: LD_VAR 0 4
81979: PPUSH
81980: CALL_OW 74
81984: PPUSH
81985: CALL_OW 112
81989: GO 82015
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81991: LD_VAR 0 4
81995: PPUSH
81996: LD_VAR 0 5
82000: PPUSH
82001: LD_VAR 0 4
82005: PPUSH
82006: CALL_OW 74
82010: PPUSH
82011: CALL 83090 0 2
// end ; end ;
82015: GO 81591
82017: POP
82018: POP
// end ;
82019: LD_VAR 0 3
82023: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82024: LD_INT 0
82026: PPUSH
82027: PPUSH
82028: PPUSH
// if not unit or IsInUnit ( unit ) then
82029: LD_VAR 0 1
82033: NOT
82034: PUSH
82035: LD_VAR 0 1
82039: PPUSH
82040: CALL_OW 310
82044: OR
82045: IFFALSE 82049
// exit ;
82047: GO 82140
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82049: LD_ADDR_VAR 0 4
82053: PUSH
82054: LD_VAR 0 1
82058: PPUSH
82059: CALL_OW 250
82063: PPUSH
82064: LD_VAR 0 2
82068: PPUSH
82069: LD_INT 1
82071: PPUSH
82072: CALL_OW 272
82076: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82077: LD_ADDR_VAR 0 5
82081: PUSH
82082: LD_VAR 0 1
82086: PPUSH
82087: CALL_OW 251
82091: PPUSH
82092: LD_VAR 0 2
82096: PPUSH
82097: LD_INT 1
82099: PPUSH
82100: CALL_OW 273
82104: ST_TO_ADDR
// if ValidHex ( x , y ) then
82105: LD_VAR 0 4
82109: PPUSH
82110: LD_VAR 0 5
82114: PPUSH
82115: CALL_OW 488
82119: IFFALSE 82140
// ComTurnXY ( unit , x , y ) ;
82121: LD_VAR 0 1
82125: PPUSH
82126: LD_VAR 0 4
82130: PPUSH
82131: LD_VAR 0 5
82135: PPUSH
82136: CALL_OW 118
// end ;
82140: LD_VAR 0 3
82144: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82145: LD_INT 0
82147: PPUSH
82148: PPUSH
// result := false ;
82149: LD_ADDR_VAR 0 3
82153: PUSH
82154: LD_INT 0
82156: ST_TO_ADDR
// if not units then
82157: LD_VAR 0 2
82161: NOT
82162: IFFALSE 82166
// exit ;
82164: GO 82211
// for i in units do
82166: LD_ADDR_VAR 0 4
82170: PUSH
82171: LD_VAR 0 2
82175: PUSH
82176: FOR_IN
82177: IFFALSE 82209
// if See ( side , i ) then
82179: LD_VAR 0 1
82183: PPUSH
82184: LD_VAR 0 4
82188: PPUSH
82189: CALL_OW 292
82193: IFFALSE 82207
// begin result := true ;
82195: LD_ADDR_VAR 0 3
82199: PUSH
82200: LD_INT 1
82202: ST_TO_ADDR
// exit ;
82203: POP
82204: POP
82205: GO 82211
// end ;
82207: GO 82176
82209: POP
82210: POP
// end ;
82211: LD_VAR 0 3
82215: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82216: LD_INT 0
82218: PPUSH
82219: PPUSH
82220: PPUSH
82221: PPUSH
// if not unit or not points then
82222: LD_VAR 0 1
82226: NOT
82227: PUSH
82228: LD_VAR 0 2
82232: NOT
82233: OR
82234: IFFALSE 82238
// exit ;
82236: GO 82328
// dist := 99999 ;
82238: LD_ADDR_VAR 0 5
82242: PUSH
82243: LD_INT 99999
82245: ST_TO_ADDR
// for i in points do
82246: LD_ADDR_VAR 0 4
82250: PUSH
82251: LD_VAR 0 2
82255: PUSH
82256: FOR_IN
82257: IFFALSE 82326
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82259: LD_ADDR_VAR 0 6
82263: PUSH
82264: LD_VAR 0 1
82268: PPUSH
82269: LD_VAR 0 4
82273: PUSH
82274: LD_INT 1
82276: ARRAY
82277: PPUSH
82278: LD_VAR 0 4
82282: PUSH
82283: LD_INT 2
82285: ARRAY
82286: PPUSH
82287: CALL_OW 297
82291: ST_TO_ADDR
// if tmpDist < dist then
82292: LD_VAR 0 6
82296: PUSH
82297: LD_VAR 0 5
82301: LESS
82302: IFFALSE 82324
// begin result := i ;
82304: LD_ADDR_VAR 0 3
82308: PUSH
82309: LD_VAR 0 4
82313: ST_TO_ADDR
// dist := tmpDist ;
82314: LD_ADDR_VAR 0 5
82318: PUSH
82319: LD_VAR 0 6
82323: ST_TO_ADDR
// end ; end ;
82324: GO 82256
82326: POP
82327: POP
// end ;
82328: LD_VAR 0 3
82332: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82333: LD_INT 0
82335: PPUSH
// uc_side := side ;
82336: LD_ADDR_OWVAR 20
82340: PUSH
82341: LD_VAR 0 1
82345: ST_TO_ADDR
// uc_nation := 3 ;
82346: LD_ADDR_OWVAR 21
82350: PUSH
82351: LD_INT 3
82353: ST_TO_ADDR
// vc_chassis := 25 ;
82354: LD_ADDR_OWVAR 37
82358: PUSH
82359: LD_INT 25
82361: ST_TO_ADDR
// vc_engine := engine_siberite ;
82362: LD_ADDR_OWVAR 39
82366: PUSH
82367: LD_INT 3
82369: ST_TO_ADDR
// vc_control := control_computer ;
82370: LD_ADDR_OWVAR 38
82374: PUSH
82375: LD_INT 3
82377: ST_TO_ADDR
// vc_weapon := 59 ;
82378: LD_ADDR_OWVAR 40
82382: PUSH
82383: LD_INT 59
82385: ST_TO_ADDR
// result := CreateVehicle ;
82386: LD_ADDR_VAR 0 5
82390: PUSH
82391: CALL_OW 45
82395: ST_TO_ADDR
// SetDir ( result , d ) ;
82396: LD_VAR 0 5
82400: PPUSH
82401: LD_VAR 0 4
82405: PPUSH
82406: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82410: LD_VAR 0 5
82414: PPUSH
82415: LD_VAR 0 2
82419: PPUSH
82420: LD_VAR 0 3
82424: PPUSH
82425: LD_INT 0
82427: PPUSH
82428: CALL_OW 48
// end ;
82432: LD_VAR 0 5
82436: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82437: LD_INT 0
82439: PPUSH
82440: PPUSH
82441: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82442: LD_ADDR_VAR 0 2
82446: PUSH
82447: LD_INT 0
82449: PUSH
82450: LD_INT 0
82452: PUSH
82453: LD_INT 0
82455: PUSH
82456: LD_INT 0
82458: PUSH
82459: EMPTY
82460: LIST
82461: LIST
82462: LIST
82463: LIST
82464: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82465: LD_VAR 0 1
82469: NOT
82470: PUSH
82471: LD_VAR 0 1
82475: PPUSH
82476: CALL_OW 264
82480: PUSH
82481: LD_INT 12
82483: PUSH
82484: LD_INT 51
82486: PUSH
82487: LD_INT 32
82489: PUSH
82490: LD_INT 89
82492: PUSH
82493: EMPTY
82494: LIST
82495: LIST
82496: LIST
82497: LIST
82498: IN
82499: NOT
82500: OR
82501: IFFALSE 82505
// exit ;
82503: GO 82603
// for i := 1 to 3 do
82505: LD_ADDR_VAR 0 3
82509: PUSH
82510: DOUBLE
82511: LD_INT 1
82513: DEC
82514: ST_TO_ADDR
82515: LD_INT 3
82517: PUSH
82518: FOR_TO
82519: IFFALSE 82601
// begin tmp := GetCargo ( cargo , i ) ;
82521: LD_ADDR_VAR 0 4
82525: PUSH
82526: LD_VAR 0 1
82530: PPUSH
82531: LD_VAR 0 3
82535: PPUSH
82536: CALL_OW 289
82540: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82541: LD_ADDR_VAR 0 2
82545: PUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_VAR 0 3
82555: PPUSH
82556: LD_VAR 0 4
82560: PPUSH
82561: CALL_OW 1
82565: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82566: LD_ADDR_VAR 0 2
82570: PUSH
82571: LD_VAR 0 2
82575: PPUSH
82576: LD_INT 4
82578: PPUSH
82579: LD_VAR 0 2
82583: PUSH
82584: LD_INT 4
82586: ARRAY
82587: PUSH
82588: LD_VAR 0 4
82592: PLUS
82593: PPUSH
82594: CALL_OW 1
82598: ST_TO_ADDR
// end ;
82599: GO 82518
82601: POP
82602: POP
// end ;
82603: LD_VAR 0 2
82607: RET
// export function Length ( array ) ; begin
82608: LD_INT 0
82610: PPUSH
// result := array + 0 ;
82611: LD_ADDR_VAR 0 2
82615: PUSH
82616: LD_VAR 0 1
82620: PUSH
82621: LD_INT 0
82623: PLUS
82624: ST_TO_ADDR
// end ;
82625: LD_VAR 0 2
82629: RET
// export function PrepareArray ( array ) ; begin
82630: LD_INT 0
82632: PPUSH
// result := array diff 0 ;
82633: LD_ADDR_VAR 0 2
82637: PUSH
82638: LD_VAR 0 1
82642: PUSH
82643: LD_INT 0
82645: DIFF
82646: ST_TO_ADDR
// if not result [ 1 ] then
82647: LD_VAR 0 2
82651: PUSH
82652: LD_INT 1
82654: ARRAY
82655: NOT
82656: IFFALSE 82676
// result := Delete ( result , 1 ) ;
82658: LD_ADDR_VAR 0 2
82662: PUSH
82663: LD_VAR 0 2
82667: PPUSH
82668: LD_INT 1
82670: PPUSH
82671: CALL_OW 3
82675: ST_TO_ADDR
// end ;
82676: LD_VAR 0 2
82680: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82681: LD_INT 0
82683: PPUSH
82684: PPUSH
82685: PPUSH
82686: PPUSH
// sibRocketRange := 25 ;
82687: LD_ADDR_VAR 0 6
82691: PUSH
82692: LD_INT 25
82694: ST_TO_ADDR
// result := false ;
82695: LD_ADDR_VAR 0 4
82699: PUSH
82700: LD_INT 0
82702: ST_TO_ADDR
// for i := 0 to 5 do
82703: LD_ADDR_VAR 0 5
82707: PUSH
82708: DOUBLE
82709: LD_INT 0
82711: DEC
82712: ST_TO_ADDR
82713: LD_INT 5
82715: PUSH
82716: FOR_TO
82717: IFFALSE 82784
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82719: LD_VAR 0 1
82723: PPUSH
82724: LD_VAR 0 5
82728: PPUSH
82729: LD_VAR 0 6
82733: PPUSH
82734: CALL_OW 272
82738: PPUSH
82739: LD_VAR 0 2
82743: PPUSH
82744: LD_VAR 0 5
82748: PPUSH
82749: LD_VAR 0 6
82753: PPUSH
82754: CALL_OW 273
82758: PPUSH
82759: LD_VAR 0 3
82763: PPUSH
82764: CALL_OW 309
82768: IFFALSE 82782
// begin result := true ;
82770: LD_ADDR_VAR 0 4
82774: PUSH
82775: LD_INT 1
82777: ST_TO_ADDR
// exit ;
82778: POP
82779: POP
82780: GO 82786
// end ;
82782: GO 82716
82784: POP
82785: POP
// end ;
82786: LD_VAR 0 4
82790: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82791: LD_INT 0
82793: PPUSH
82794: PPUSH
82795: PPUSH
// if btype = b_depot then
82796: LD_VAR 0 2
82800: PUSH
82801: LD_INT 0
82803: EQUAL
82804: IFFALSE 82816
// begin result := true ;
82806: LD_ADDR_VAR 0 3
82810: PUSH
82811: LD_INT 1
82813: ST_TO_ADDR
// exit ;
82814: GO 82932
// end ; pom := GetBase ( depot ) ;
82816: LD_ADDR_VAR 0 4
82820: PUSH
82821: LD_VAR 0 1
82825: PPUSH
82826: CALL_OW 274
82830: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82831: LD_ADDR_VAR 0 5
82835: PUSH
82836: LD_VAR 0 2
82840: PPUSH
82841: LD_VAR 0 1
82845: PPUSH
82846: CALL_OW 248
82850: PPUSH
82851: CALL_OW 450
82855: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82856: LD_ADDR_VAR 0 3
82860: PUSH
82861: LD_VAR 0 4
82865: PPUSH
82866: LD_INT 1
82868: PPUSH
82869: CALL_OW 275
82873: PUSH
82874: LD_VAR 0 5
82878: PUSH
82879: LD_INT 1
82881: ARRAY
82882: GREATEREQUAL
82883: PUSH
82884: LD_VAR 0 4
82888: PPUSH
82889: LD_INT 2
82891: PPUSH
82892: CALL_OW 275
82896: PUSH
82897: LD_VAR 0 5
82901: PUSH
82902: LD_INT 2
82904: ARRAY
82905: GREATEREQUAL
82906: AND
82907: PUSH
82908: LD_VAR 0 4
82912: PPUSH
82913: LD_INT 3
82915: PPUSH
82916: CALL_OW 275
82920: PUSH
82921: LD_VAR 0 5
82925: PUSH
82926: LD_INT 3
82928: ARRAY
82929: GREATEREQUAL
82930: AND
82931: ST_TO_ADDR
// end ;
82932: LD_VAR 0 3
82936: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82937: LD_INT 0
82939: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82940: LD_VAR 0 1
82944: PPUSH
82945: LD_VAR 0 2
82949: PPUSH
82950: LD_INT 0
82952: PPUSH
82953: LD_INT 0
82955: PPUSH
82956: LD_INT 1
82958: PPUSH
82959: LD_INT 0
82961: PPUSH
82962: CALL_OW 587
// end ;
82966: LD_VAR 0 3
82970: RET
// export function CenterOnNow ( unit ) ; begin
82971: LD_INT 0
82973: PPUSH
// result := IsInUnit ( unit ) ;
82974: LD_ADDR_VAR 0 2
82978: PUSH
82979: LD_VAR 0 1
82983: PPUSH
82984: CALL_OW 310
82988: ST_TO_ADDR
// if not result then
82989: LD_VAR 0 2
82993: NOT
82994: IFFALSE 83006
// result := unit ;
82996: LD_ADDR_VAR 0 2
83000: PUSH
83001: LD_VAR 0 1
83005: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83006: LD_VAR 0 1
83010: PPUSH
83011: CALL_OW 87
// end ;
83015: LD_VAR 0 2
83019: RET
// export function ComMoveHex ( unit , hex ) ; begin
83020: LD_INT 0
83022: PPUSH
// if not hex then
83023: LD_VAR 0 2
83027: NOT
83028: IFFALSE 83032
// exit ;
83030: GO 83085
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83032: LD_VAR 0 2
83036: PUSH
83037: LD_INT 1
83039: ARRAY
83040: PPUSH
83041: LD_VAR 0 2
83045: PUSH
83046: LD_INT 2
83048: ARRAY
83049: PPUSH
83050: CALL_OW 428
83054: IFFALSE 83058
// exit ;
83056: GO 83085
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83058: LD_VAR 0 1
83062: PPUSH
83063: LD_VAR 0 2
83067: PUSH
83068: LD_INT 1
83070: ARRAY
83071: PPUSH
83072: LD_VAR 0 2
83076: PUSH
83077: LD_INT 2
83079: ARRAY
83080: PPUSH
83081: CALL_OW 111
// end ;
83085: LD_VAR 0 3
83089: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83090: LD_INT 0
83092: PPUSH
83093: PPUSH
83094: PPUSH
// if not unit or not enemy then
83095: LD_VAR 0 1
83099: NOT
83100: PUSH
83101: LD_VAR 0 2
83105: NOT
83106: OR
83107: IFFALSE 83111
// exit ;
83109: GO 83235
// x := GetX ( enemy ) ;
83111: LD_ADDR_VAR 0 4
83115: PUSH
83116: LD_VAR 0 2
83120: PPUSH
83121: CALL_OW 250
83125: ST_TO_ADDR
// y := GetY ( enemy ) ;
83126: LD_ADDR_VAR 0 5
83130: PUSH
83131: LD_VAR 0 2
83135: PPUSH
83136: CALL_OW 251
83140: ST_TO_ADDR
// if ValidHex ( x , y ) then
83141: LD_VAR 0 4
83145: PPUSH
83146: LD_VAR 0 5
83150: PPUSH
83151: CALL_OW 488
83155: IFFALSE 83235
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83157: LD_VAR 0 2
83161: PPUSH
83162: CALL_OW 247
83166: PUSH
83167: LD_INT 3
83169: PUSH
83170: LD_INT 2
83172: PUSH
83173: EMPTY
83174: LIST
83175: LIST
83176: IN
83177: PUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: CALL_OW 255
83187: PPUSH
83188: LD_VAR 0 2
83192: PPUSH
83193: CALL_OW 292
83197: OR
83198: IFFALSE 83216
// ComAttackUnit ( unit , enemy ) else
83200: LD_VAR 0 1
83204: PPUSH
83205: LD_VAR 0 2
83209: PPUSH
83210: CALL_OW 115
83214: GO 83235
// ComAgressiveMove ( unit , x , y ) ;
83216: LD_VAR 0 1
83220: PPUSH
83221: LD_VAR 0 4
83225: PPUSH
83226: LD_VAR 0 5
83230: PPUSH
83231: CALL_OW 114
// end ;
83235: LD_VAR 0 3
83239: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83240: LD_INT 0
83242: PPUSH
83243: PPUSH
83244: PPUSH
// list := AreaToList ( area , 0 ) ;
83245: LD_ADDR_VAR 0 5
83249: PUSH
83250: LD_VAR 0 1
83254: PPUSH
83255: LD_INT 0
83257: PPUSH
83258: CALL_OW 517
83262: ST_TO_ADDR
// if not list then
83263: LD_VAR 0 5
83267: NOT
83268: IFFALSE 83272
// exit ;
83270: GO 83402
// if all then
83272: LD_VAR 0 2
83276: IFFALSE 83364
// begin for i := 1 to list [ 1 ] do
83278: LD_ADDR_VAR 0 4
83282: PUSH
83283: DOUBLE
83284: LD_INT 1
83286: DEC
83287: ST_TO_ADDR
83288: LD_VAR 0 5
83292: PUSH
83293: LD_INT 1
83295: ARRAY
83296: PUSH
83297: FOR_TO
83298: IFFALSE 83360
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83300: LD_ADDR_VAR 0 3
83304: PUSH
83305: LD_VAR 0 3
83309: PPUSH
83310: LD_VAR 0 3
83314: PUSH
83315: LD_INT 1
83317: PLUS
83318: PPUSH
83319: LD_VAR 0 5
83323: PUSH
83324: LD_INT 1
83326: ARRAY
83327: PUSH
83328: LD_VAR 0 4
83332: ARRAY
83333: PUSH
83334: LD_VAR 0 5
83338: PUSH
83339: LD_INT 2
83341: ARRAY
83342: PUSH
83343: LD_VAR 0 4
83347: ARRAY
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: PPUSH
83353: CALL_OW 1
83357: ST_TO_ADDR
83358: GO 83297
83360: POP
83361: POP
// exit ;
83362: GO 83402
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83364: LD_ADDR_VAR 0 3
83368: PUSH
83369: LD_VAR 0 5
83373: PUSH
83374: LD_INT 1
83376: ARRAY
83377: PUSH
83378: LD_INT 1
83380: ARRAY
83381: PUSH
83382: LD_VAR 0 5
83386: PUSH
83387: LD_INT 2
83389: ARRAY
83390: PUSH
83391: LD_INT 1
83393: ARRAY
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: PUSH
83399: EMPTY
83400: LIST
83401: ST_TO_ADDR
// end ;
83402: LD_VAR 0 3
83406: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83407: LD_INT 0
83409: PPUSH
83410: PPUSH
// list := AreaToList ( area , 0 ) ;
83411: LD_ADDR_VAR 0 4
83415: PUSH
83416: LD_VAR 0 1
83420: PPUSH
83421: LD_INT 0
83423: PPUSH
83424: CALL_OW 517
83428: ST_TO_ADDR
// if not list then
83429: LD_VAR 0 4
83433: NOT
83434: IFFALSE 83438
// exit ;
83436: GO 83479
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83438: LD_ADDR_VAR 0 3
83442: PUSH
83443: LD_VAR 0 4
83447: PUSH
83448: LD_INT 1
83450: ARRAY
83451: PUSH
83452: LD_INT 1
83454: ARRAY
83455: PUSH
83456: LD_VAR 0 4
83460: PUSH
83461: LD_INT 2
83463: ARRAY
83464: PUSH
83465: LD_INT 1
83467: ARRAY
83468: PUSH
83469: LD_VAR 0 2
83473: PUSH
83474: EMPTY
83475: LIST
83476: LIST
83477: LIST
83478: ST_TO_ADDR
// end ;
83479: LD_VAR 0 3
83483: RET
// export function First ( array ) ; begin
83484: LD_INT 0
83486: PPUSH
// if not array then
83487: LD_VAR 0 1
83491: NOT
83492: IFFALSE 83496
// exit ;
83494: GO 83510
// result := array [ 1 ] ;
83496: LD_ADDR_VAR 0 2
83500: PUSH
83501: LD_VAR 0 1
83505: PUSH
83506: LD_INT 1
83508: ARRAY
83509: ST_TO_ADDR
// end ;
83510: LD_VAR 0 2
83514: RET
// export function Last ( array ) ; begin
83515: LD_INT 0
83517: PPUSH
// if not array then
83518: LD_VAR 0 1
83522: NOT
83523: IFFALSE 83527
// exit ;
83525: GO 83543
// result := array [ array ] ;
83527: LD_ADDR_VAR 0 2
83531: PUSH
83532: LD_VAR 0 1
83536: PUSH
83537: LD_VAR 0 1
83541: ARRAY
83542: ST_TO_ADDR
// end ;
83543: LD_VAR 0 2
83547: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83548: LD_INT 0
83550: PPUSH
83551: PPUSH
// result := [ ] ;
83552: LD_ADDR_VAR 0 5
83556: PUSH
83557: EMPTY
83558: ST_TO_ADDR
// if not array then
83559: LD_VAR 0 1
83563: NOT
83564: IFFALSE 83568
// exit ;
83566: GO 83680
// for i := 1 to array do
83568: LD_ADDR_VAR 0 6
83572: PUSH
83573: DOUBLE
83574: LD_INT 1
83576: DEC
83577: ST_TO_ADDR
83578: LD_VAR 0 1
83582: PUSH
83583: FOR_TO
83584: IFFALSE 83678
// if array [ i ] [ index ] = value then
83586: LD_VAR 0 1
83590: PUSH
83591: LD_VAR 0 6
83595: ARRAY
83596: PUSH
83597: LD_VAR 0 2
83601: ARRAY
83602: PUSH
83603: LD_VAR 0 3
83607: EQUAL
83608: IFFALSE 83676
// begin if indexColumn then
83610: LD_VAR 0 4
83614: IFFALSE 83650
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83616: LD_ADDR_VAR 0 5
83620: PUSH
83621: LD_VAR 0 5
83625: PPUSH
83626: LD_VAR 0 1
83630: PUSH
83631: LD_VAR 0 6
83635: ARRAY
83636: PUSH
83637: LD_VAR 0 4
83641: ARRAY
83642: PPUSH
83643: CALL 78868 0 2
83647: ST_TO_ADDR
83648: GO 83676
// result := Join ( result , array [ i ] ) ;
83650: LD_ADDR_VAR 0 5
83654: PUSH
83655: LD_VAR 0 5
83659: PPUSH
83660: LD_VAR 0 1
83664: PUSH
83665: LD_VAR 0 6
83669: ARRAY
83670: PPUSH
83671: CALL 78868 0 2
83675: ST_TO_ADDR
// end ;
83676: GO 83583
83678: POP
83679: POP
// end ;
83680: LD_VAR 0 5
83684: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83685: LD_INT 0
83687: PPUSH
// if not vehicles or not parkingPoint then
83688: LD_VAR 0 1
83692: NOT
83693: PUSH
83694: LD_VAR 0 2
83698: NOT
83699: OR
83700: IFFALSE 83704
// exit ;
83702: GO 83802
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83704: LD_ADDR_VAR 0 1
83708: PUSH
83709: LD_VAR 0 1
83713: PPUSH
83714: LD_INT 50
83716: PUSH
83717: EMPTY
83718: LIST
83719: PUSH
83720: LD_INT 3
83722: PUSH
83723: LD_INT 92
83725: PUSH
83726: LD_VAR 0 2
83730: PUSH
83731: LD_INT 1
83733: ARRAY
83734: PUSH
83735: LD_VAR 0 2
83739: PUSH
83740: LD_INT 2
83742: ARRAY
83743: PUSH
83744: LD_INT 8
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: LIST
83751: LIST
83752: PUSH
83753: EMPTY
83754: LIST
83755: LIST
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PPUSH
83761: CALL_OW 72
83765: ST_TO_ADDR
// if not vehicles then
83766: LD_VAR 0 1
83770: NOT
83771: IFFALSE 83775
// exit ;
83773: GO 83802
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83775: LD_VAR 0 1
83779: PPUSH
83780: LD_VAR 0 2
83784: PUSH
83785: LD_INT 1
83787: ARRAY
83788: PPUSH
83789: LD_VAR 0 2
83793: PUSH
83794: LD_INT 2
83796: ARRAY
83797: PPUSH
83798: CALL_OW 111
// end ;
83802: LD_VAR 0 3
83806: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83807: LD_INT 0
83809: PPUSH
83810: PPUSH
83811: PPUSH
// if not side or not area then
83812: LD_VAR 0 1
83816: NOT
83817: PUSH
83818: LD_VAR 0 2
83822: NOT
83823: OR
83824: IFFALSE 83828
// exit ;
83826: GO 83947
// tmp := AreaToList ( area , 0 ) ;
83828: LD_ADDR_VAR 0 5
83832: PUSH
83833: LD_VAR 0 2
83837: PPUSH
83838: LD_INT 0
83840: PPUSH
83841: CALL_OW 517
83845: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83846: LD_ADDR_VAR 0 4
83850: PUSH
83851: DOUBLE
83852: LD_INT 1
83854: DEC
83855: ST_TO_ADDR
83856: LD_VAR 0 5
83860: PUSH
83861: LD_INT 1
83863: ARRAY
83864: PUSH
83865: FOR_TO
83866: IFFALSE 83945
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83868: LD_VAR 0 5
83872: PUSH
83873: LD_INT 1
83875: ARRAY
83876: PUSH
83877: LD_VAR 0 4
83881: ARRAY
83882: PPUSH
83883: LD_VAR 0 5
83887: PUSH
83888: LD_INT 2
83890: ARRAY
83891: PUSH
83892: LD_VAR 0 4
83896: ARRAY
83897: PPUSH
83898: CALL_OW 351
83902: IFFALSE 83943
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83904: LD_VAR 0 5
83908: PUSH
83909: LD_INT 1
83911: ARRAY
83912: PUSH
83913: LD_VAR 0 4
83917: ARRAY
83918: PPUSH
83919: LD_VAR 0 5
83923: PUSH
83924: LD_INT 2
83926: ARRAY
83927: PUSH
83928: LD_VAR 0 4
83932: ARRAY
83933: PPUSH
83934: LD_VAR 0 1
83938: PPUSH
83939: CALL_OW 244
// end ;
83943: GO 83865
83945: POP
83946: POP
// end ; end_of_file
83947: LD_VAR 0 3
83951: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83952: LD_VAR 0 1
83956: PUSH
83957: LD_INT 200
83959: DOUBLE
83960: GREATEREQUAL
83961: IFFALSE 83969
83963: LD_INT 299
83965: DOUBLE
83966: LESSEQUAL
83967: IFTRUE 83971
83969: GO 84003
83971: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83972: LD_VAR 0 1
83976: PPUSH
83977: LD_VAR 0 2
83981: PPUSH
83982: LD_VAR 0 3
83986: PPUSH
83987: LD_VAR 0 4
83991: PPUSH
83992: LD_VAR 0 5
83996: PPUSH
83997: CALL 36478 0 5
84001: GO 84080
84003: LD_INT 300
84005: DOUBLE
84006: GREATEREQUAL
84007: IFFALSE 84015
84009: LD_INT 399
84011: DOUBLE
84012: LESSEQUAL
84013: IFTRUE 84017
84015: GO 84079
84017: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84018: LD_VAR 0 1
84022: PPUSH
84023: LD_VAR 0 2
84027: PPUSH
84028: LD_VAR 0 3
84032: PPUSH
84033: LD_VAR 0 4
84037: PPUSH
84038: LD_VAR 0 5
84042: PPUSH
84043: LD_VAR 0 6
84047: PPUSH
84048: LD_VAR 0 7
84052: PPUSH
84053: LD_VAR 0 8
84057: PPUSH
84058: LD_VAR 0 9
84062: PPUSH
84063: LD_VAR 0 10
84067: PPUSH
84068: LD_VAR 0 11
84072: PPUSH
84073: CALL 32637 0 11
84077: GO 84080
84079: POP
// end ;
84080: PPOPN 11
84082: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84083: LD_VAR 0 1
84087: PPUSH
84088: LD_VAR 0 2
84092: PPUSH
84093: LD_VAR 0 3
84097: PPUSH
84098: LD_VAR 0 4
84102: PPUSH
84103: LD_VAR 0 5
84107: PPUSH
84108: CALL 35986 0 5
// end ; end_of_file
84112: PPOPN 5
84114: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84115: LD_VAR 0 1
84119: PPUSH
84120: LD_VAR 0 2
84124: PPUSH
84125: LD_VAR 0 3
84129: PPUSH
84130: LD_VAR 0 4
84134: PPUSH
84135: LD_VAR 0 5
84139: PPUSH
84140: LD_VAR 0 6
84144: PPUSH
84145: CALL 20289 0 6
// end ;
84149: PPOPN 6
84151: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84152: LD_INT 0
84154: PPUSH
// begin if not units then
84155: LD_VAR 0 1
84159: NOT
84160: IFFALSE 84164
// exit ;
84162: GO 84164
// end ;
84164: PPOPN 7
84166: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84167: CALL 20176 0 0
// end ;
84171: PPOPN 1
84173: END
