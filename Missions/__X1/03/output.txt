// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9021 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36496 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36496 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36496 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36496 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36496 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36496 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36496 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36496 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36496 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36496 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36496 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// IncomingAttack ;
6129: CALL 15030 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6133: LD_INT 2100
6135: PPUSH
6136: LD_INT 3500
6138: PPUSH
6139: CALL_OW 12
6143: PPUSH
6144: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6148: LD_ADDR_VAR 0 4
6152: PUSH
6153: DOUBLE
6154: LD_INT 1
6156: DEC
6157: ST_TO_ADDR
6158: LD_INT 3
6160: PUSH
6161: LD_INT 4
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: LD_OWVAR 67
6176: ARRAY
6177: PUSH
6178: LD_EXP 19
6182: PUSH
6183: LD_INT 3
6185: DIV
6186: PLUS
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6301
// begin uc_side := 1 ;
6191: LD_ADDR_OWVAR 20
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// uc_nation := 1 ;
6199: LD_ADDR_OWVAR 21
6203: PUSH
6204: LD_INT 1
6206: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6207: LD_INT 0
6209: PPUSH
6210: LD_INT 1
6212: PPUSH
6213: LD_INT 2
6215: PUSH
6216: LD_INT 3
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: PUSH
6227: LD_OWVAR 67
6231: ARRAY
6232: PPUSH
6233: CALL_OW 380
// un := CreateHuman ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6247: LD_VAR 0 2
6251: PPUSH
6252: LD_INT 37
6254: PPUSH
6255: LD_INT 70
6257: PPUSH
6258: LD_INT 3
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 50
// usAttackers := usAttackers union un ;
6268: LD_ADDR_EXP 47
6272: PUSH
6273: LD_EXP 47
6277: PUSH
6278: LD_VAR 0 2
6282: UNION
6283: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6284: LD_VAR 0 2
6288: PPUSH
6289: LD_INT 40
6291: PPUSH
6292: LD_INT 65
6294: PPUSH
6295: CALL_OW 111
// end ;
6299: GO 6188
6301: POP
6302: POP
// uc_side := 1 ;
6303: LD_ADDR_OWVAR 20
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// uc_nation := 1 ;
6311: LD_ADDR_OWVAR 21
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6319: LD_INT 0
6321: PPUSH
6322: LD_INT 4
6324: PPUSH
6325: LD_INT 2
6327: PPUSH
6328: CALL_OW 380
// un := CreateHuman ;
6332: LD_ADDR_VAR 0 2
6336: PUSH
6337: CALL_OW 44
6341: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6342: LD_VAR 0 2
6346: PPUSH
6347: LD_INT 37
6349: PPUSH
6350: LD_INT 70
6352: PPUSH
6353: LD_INT 3
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: CALL_OW 50
// usAttackers := usAttackers union un ;
6363: LD_ADDR_EXP 47
6367: PUSH
6368: LD_EXP 47
6372: PUSH
6373: LD_VAR 0 2
6377: UNION
6378: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 40
6386: PPUSH
6387: LD_INT 65
6389: PPUSH
6390: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6394: LD_ADDR_VAR 0 4
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_OWVAR 67
6408: PUSH
6409: LD_EXP 19
6413: PUSH
6414: LD_INT 4
6416: DIV
6417: PLUS
6418: PUSH
6419: FOR_TO
6420: IFFALSE 6593
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_INT 1
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 1
6438: PPUSH
6439: LD_INT 1
6441: PPUSH
6442: LD_INT 4
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 1
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: CALL_OW 12
6466: ARRAY
6467: PPUSH
6468: LD_INT 90
6470: PPUSH
6471: CALL 313 0 7
6475: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_INT 35
6483: PPUSH
6484: LD_INT 65
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6494: LD_INT 0
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_OWVAR 67
6504: PUSH
6505: LD_INT 1
6507: PLUS
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 2
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_VAR 0 3
6532: PPUSH
6533: CALL_OW 52
// usAttackers := usAttackers union un ;
6537: LD_ADDR_EXP 47
6541: PUSH
6542: LD_EXP 47
6546: PUSH
6547: LD_VAR 0 2
6551: UNION
6552: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 39
6560: PPUSH
6561: LD_INT 60
6563: PPUSH
6564: CALL_OW 111
// wait ( 0 0$3 ) ;
6568: LD_INT 105
6570: PPUSH
6571: CALL_OW 67
// usAttackers := usAttackers union veh ;
6575: LD_ADDR_EXP 47
6579: PUSH
6580: LD_EXP 47
6584: PUSH
6585: LD_VAR 0 3
6589: UNION
6590: ST_TO_ADDR
// end ;
6591: GO 6419
6593: POP
6594: POP
// attackWave := attackWave + 1 ;
6595: LD_ADDR_EXP 19
6599: PUSH
6600: LD_EXP 19
6604: PUSH
6605: LD_INT 1
6607: PLUS
6608: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6609: LD_EXP 24
6613: PPUSH
6614: CALL_OW 427
// end ;
6618: LD_VAR 0 1
6622: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6623: LD_INT 0
6625: PPUSH
6626: PPUSH
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
// if retreatAllowed then
6636: LD_EXP 11
6640: IFFALSE 6652
// strategy := 2 else
6642: LD_ADDR_VAR 0 5
6646: PUSH
6647: LD_INT 2
6649: ST_TO_ADDR
6650: GO 6668
// strategy := rand ( 0 , 2 ) ;
6652: LD_ADDR_VAR 0 5
6656: PUSH
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 2
6662: PPUSH
6663: CALL_OW 12
6667: ST_TO_ADDR
// attackFormula := [ ] ;
6668: LD_ADDR_VAR 0 6
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// case strategy of 0 :
6675: LD_VAR 0 5
6679: PUSH
6680: LD_INT 0
6682: DOUBLE
6683: EQUAL
6684: IFTRUE 6688
6686: GO 7018
6688: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6689: LD_INT 11
6691: PPUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 30
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 70
6720: NOT
6721: IFFALSE 6793
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_INT 41
6730: PUSH
6731: LD_INT 34
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: PUSH
6741: LD_INT 53
6743: PUSH
6744: LD_INT 62
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 37
6753: PUSH
6754: LD_INT 63
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: LD_INT 45
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 37
6773: PUSH
6774: LD_INT 28
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7016
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6793: LD_INT 12
6795: PPUSH
6796: LD_INT 22
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: LD_INT 30
6811: PUSH
6812: LD_INT 4
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 30
6821: PUSH
6822: LD_INT 31
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 70
6853: NOT
6854: IFFALSE 6937
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: LD_INT 27
6863: PUSH
6864: LD_INT 42
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 27
6873: PUSH
6874: LD_INT 32
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 53
6887: PUSH
6888: LD_INT 62
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 37
6897: PUSH
6898: LD_INT 63
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 44
6907: PUSH
6908: LD_INT 45
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 37
6917: PUSH
6918: LD_INT 28
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: ST_TO_ADDR
6935: GO 7016
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6937: LD_ADDR_VAR 0 6
6941: PUSH
6942: LD_INT 71
6944: PUSH
6945: LD_INT 67
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 54
6954: PUSH
6955: LD_INT 35
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 63
6968: PUSH
6969: LD_INT 40
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 37
6978: PUSH
6979: LD_INT 63
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 44
6988: PUSH
6989: LD_INT 45
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 37
6998: PUSH
6999: LD_INT 28
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// end ; 1 :
7016: GO 7221
7018: LD_INT 1
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7130
7026: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7027: LD_ADDR_VAR 0 6
7031: PUSH
7032: LD_INT 71
7034: PUSH
7035: LD_INT 67
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 82
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 53
7054: PUSH
7055: LD_INT 7
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 43
7064: PUSH
7065: LD_INT 10
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 53
7080: PUSH
7081: LD_INT 62
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 37
7090: PUSH
7091: LD_INT 63
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 44
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 37
7110: PUSH
7111: LD_INT 28
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 7221
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7220
7138: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7139: LD_ADDR_VAR 0 6
7143: PUSH
7144: LD_INT 90
7146: PUSH
7147: LD_INT 59
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 108
7156: PUSH
7157: LD_INT 64
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 82
7170: PUSH
7171: LD_INT 75
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 73
7180: PUSH
7181: LD_INT 67
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 101
7190: PUSH
7191: LD_INT 65
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 62
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 7221
7220: POP
// if not attackFormula then
7221: LD_VAR 0 6
7225: NOT
7226: IFFALSE 7230
// exit ;
7228: GO 8908
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7230: LD_ADDR_VAR 0 7
7234: PUSH
7235: LD_EXP 47
7239: PPUSH
7240: LD_INT 25
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 72
7254: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7255: LD_ADDR_VAR 0 8
7259: PUSH
7260: LD_EXP 47
7264: PPUSH
7265: LD_INT 25
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 72
7279: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7280: LD_ADDR_VAR 0 9
7284: PUSH
7285: LD_EXP 47
7289: PPUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 3
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7305: LD_ADDR_VAR 0 10
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 21
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// if sci then
7330: LD_VAR 0 8
7334: IFFALSE 7371
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7336: LD_VAR 0 8
7340: PPUSH
7341: LD_VAR 0 6
7345: PUSH
7346: LD_INT 2
7348: ARRAY
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 6
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PUSH
7363: LD_INT 2
7365: ARRAY
7366: PPUSH
7367: CALL_OW 111
// repeat wait ( 10 ) ;
7371: LD_INT 10
7373: PPUSH
7374: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7378: LD_ADDR_VAR 0 7
7382: PUSH
7383: LD_EXP 47
7387: PPUSH
7388: LD_INT 25
7390: PUSH
7391: LD_INT 1
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 72
7402: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7403: LD_ADDR_VAR 0 8
7407: PUSH
7408: LD_EXP 47
7412: PPUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 72
7427: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7428: LD_ADDR_VAR 0 9
7432: PUSH
7433: LD_EXP 47
7437: PPUSH
7438: LD_INT 25
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PPUSH
7448: CALL_OW 72
7452: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7453: LD_ADDR_VAR 0 10
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 21
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// if sol then
7478: LD_VAR 0 7
7482: IFFALSE 7903
// begin for i in sol do
7484: LD_ADDR_VAR 0 2
7488: PUSH
7489: LD_VAR 0 7
7493: PUSH
7494: FOR_IN
7495: IFFALSE 7901
// begin tag := GetTag ( i ) ;
7497: LD_ADDR_VAR 0 4
7501: PUSH
7502: LD_VAR 0 2
7506: PPUSH
7507: CALL_OW 110
7511: ST_TO_ADDR
// if not tag then
7512: LD_VAR 0 4
7516: NOT
7517: IFFALSE 7626
// begin if GetLives ( i ) = 1000 then
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 256
7528: PUSH
7529: LD_INT 1000
7531: EQUAL
7532: IFFALSE 7548
// SetTag ( i , 1 ) else
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: CALL_OW 109
7546: GO 7624
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_VAR 0 6
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: PUSH
7562: LD_INT 1
7564: ARRAY
7565: PPUSH
7566: LD_VAR 0 6
7570: PUSH
7571: LD_INT 2
7573: ARRAY
7574: PUSH
7575: LD_INT 2
7577: ARRAY
7578: PPUSH
7579: CALL_OW 297
7583: PUSH
7584: LD_INT 10
7586: GREATER
7587: IFFALSE 7624
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_VAR 0 6
7598: PUSH
7599: LD_INT 2
7601: ARRAY
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 2
7614: ARRAY
7615: PUSH
7616: LD_INT 2
7618: ARRAY
7619: PPUSH
7620: CALL_OW 111
// end else
7624: GO 7899
// begin if GetLives ( i ) < 760 then
7626: LD_VAR 0 2
7630: PPUSH
7631: CALL_OW 256
7635: PUSH
7636: LD_INT 760
7638: LESS
7639: IFFALSE 7690
// begin SetTag ( i , 0 ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7653: LD_VAR 0 2
7657: PPUSH
7658: LD_VAR 0 6
7662: PUSH
7663: LD_INT 2
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 6
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: PPUSH
7684: CALL_OW 111
// end else
7688: GO 7899
// if tag <= attackFormula [ 1 ] then
7690: LD_VAR 0 4
7694: PUSH
7695: LD_VAR 0 6
7699: PUSH
7700: LD_INT 1
7702: ARRAY
7703: LESSEQUAL
7704: IFFALSE 7865
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7706: LD_VAR 0 2
7710: PPUSH
7711: LD_VAR 0 6
7715: PUSH
7716: LD_INT 1
7718: ARRAY
7719: PUSH
7720: LD_VAR 0 4
7724: ARRAY
7725: PUSH
7726: LD_INT 1
7728: ARRAY
7729: PPUSH
7730: LD_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PUSH
7739: LD_VAR 0 4
7743: ARRAY
7744: PUSH
7745: LD_INT 2
7747: ARRAY
7748: PPUSH
7749: CALL_OW 297
7753: PUSH
7754: LD_INT 6
7756: GREATER
7757: IFFALSE 7808
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_VAR 0 6
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PUSH
7773: LD_VAR 0 4
7777: ARRAY
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: LD_VAR 0 6
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PUSH
7792: LD_VAR 0 4
7796: ARRAY
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 114
7806: GO 7863
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7808: LD_INT 81
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 91
7820: PUSH
7821: LD_VAR 0 2
7825: PUSH
7826: LD_INT 10
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: NOT
7843: IFFALSE 7863
// SetTag ( i , tag + 1 ) ;
7845: LD_VAR 0 2
7849: PPUSH
7850: LD_VAR 0 4
7854: PUSH
7855: LD_INT 1
7857: PLUS
7858: PPUSH
7859: CALL_OW 109
// end else
7863: GO 7899
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7865: LD_VAR 0 2
7869: PPUSH
7870: LD_INT 81
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: PPUSH
7885: LD_VAR 0 2
7889: PPUSH
7890: CALL_OW 74
7894: PPUSH
7895: CALL_OW 115
// end ; end ;
7899: GO 7494
7901: POP
7902: POP
// end ; if sci then
7903: LD_VAR 0 8
7907: IFFALSE 8176
// begin if not sol and not mech then
7909: LD_VAR 0 7
7913: NOT
7914: PUSH
7915: LD_VAR 0 9
7919: NOT
7920: AND
7921: IFFALSE 7973
// begin for i in sci do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 8
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7969
// begin usForces := usForces union i ;
7936: LD_ADDR_EXP 44
7940: PUSH
7941: LD_EXP 44
7945: PUSH
7946: LD_VAR 0 2
7950: UNION
7951: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_INT 34
7959: PPUSH
7960: LD_INT 68
7962: PPUSH
7963: CALL_OW 111
// end ;
7967: GO 7933
7969: POP
7970: POP
// end else
7971: GO 8176
// for i in sci do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_VAR 0 8
7982: PUSH
7983: FOR_IN
7984: IFFALSE 8174
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7986: LD_VAR 0 2
7990: PPUSH
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PPUSH
8004: LD_VAR 0 6
8008: PUSH
8009: LD_INT 2
8011: ARRAY
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: PPUSH
8017: CALL_OW 297
8021: PUSH
8022: LD_INT 10
8024: GREATER
8025: IFFALSE 8064
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_VAR 0 6
8036: PUSH
8037: LD_INT 2
8039: ARRAY
8040: PUSH
8041: LD_INT 1
8043: ARRAY
8044: PPUSH
8045: LD_VAR 0 6
8049: PUSH
8050: LD_INT 2
8052: ARRAY
8053: PUSH
8054: LD_INT 2
8056: ARRAY
8057: PPUSH
8058: CALL_OW 111
8062: GO 8172
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8064: LD_VAR 0 7
8068: PPUSH
8069: LD_INT 3
8071: PUSH
8072: LD_INT 24
8074: PUSH
8075: LD_INT 1000
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 91
8088: PUSH
8089: LD_VAR 0 2
8093: PUSH
8094: LD_INT 10
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: IFFALSE 8172
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8112: LD_VAR 0 2
8116: PPUSH
8117: LD_VAR 0 7
8121: PPUSH
8122: LD_INT 3
8124: PUSH
8125: LD_INT 24
8127: PUSH
8128: LD_INT 1000
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 91
8141: PUSH
8142: LD_VAR 0 2
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 72
8163: PUSH
8164: LD_INT 1
8166: ARRAY
8167: PPUSH
8168: CALL_OW 128
8172: GO 7983
8174: POP
8175: POP
// end ; if mech then
8176: LD_VAR 0 9
8180: IFFALSE 8890
// begin for i in mech do
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_VAR 0 9
8191: PUSH
8192: FOR_IN
8193: IFFALSE 8888
// begin tag := GetTag ( i ) ;
8195: LD_ADDR_VAR 0 4
8199: PUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 110
8209: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8210: LD_ADDR_VAR 0 11
8214: PUSH
8215: LD_VAR 0 2
8219: PPUSH
8220: CALL_OW 310
8224: ST_TO_ADDR
// if not tag then
8225: LD_VAR 0 4
8229: NOT
8230: IFFALSE 8601
// begin if veh then
8232: LD_VAR 0 11
8236: IFFALSE 8407
// begin if GetLives ( veh ) = 1000 then
8238: LD_VAR 0 11
8242: PPUSH
8243: CALL_OW 256
8247: PUSH
8248: LD_INT 1000
8250: EQUAL
8251: IFFALSE 8267
// SetTag ( i , 1 ) else
8253: LD_VAR 0 2
8257: PPUSH
8258: LD_INT 1
8260: PPUSH
8261: CALL_OW 109
8265: GO 8405
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_VAR 0 6
8276: PUSH
8277: LD_INT 3
8279: ARRAY
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 6
8289: PUSH
8290: LD_INT 3
8292: ARRAY
8293: PUSH
8294: LD_INT 2
8296: ARRAY
8297: PPUSH
8298: CALL_OW 297
8302: PUSH
8303: LD_INT 7
8305: GREATER
8306: IFFALSE 8345
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8308: LD_VAR 0 11
8312: PPUSH
8313: LD_VAR 0 6
8317: PUSH
8318: LD_INT 3
8320: ARRAY
8321: PUSH
8322: LD_INT 1
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 3
8333: ARRAY
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PPUSH
8339: CALL_OW 111
8343: GO 8405
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8345: LD_INT 81
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 91
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: LD_INT 10
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 69
8379: NOT
8380: IFFALSE 8405
// begin ComExitVehicle ( i ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 11
8400: PPUSH
8401: CALL_OW 189
// end ; end else
8405: GO 8599
// if GetLives ( i ) < 400 then
8407: LD_VAR 0 2
8411: PPUSH
8412: CALL_OW 256
8416: PUSH
8417: LD_INT 400
8419: LESS
8420: IFFALSE 8471
// begin usAttackers := usAttackers diff i ;
8422: LD_ADDR_EXP 47
8426: PUSH
8427: LD_EXP 47
8431: PUSH
8432: LD_VAR 0 2
8436: DIFF
8437: ST_TO_ADDR
// usForces := usForces union i ;
8438: LD_ADDR_EXP 44
8442: PUSH
8443: LD_EXP 44
8447: PUSH
8448: LD_VAR 0 2
8452: UNION
8453: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8454: LD_VAR 0 2
8458: PPUSH
8459: LD_INT 34
8461: PPUSH
8462: LD_INT 68
8464: PPUSH
8465: CALL_OW 111
// end else
8469: GO 8599
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8471: LD_VAR 0 10
8475: PPUSH
8476: LD_INT 58
8478: PUSH
8479: EMPTY
8480: LIST
8481: PUSH
8482: LD_INT 24
8484: PUSH
8485: LD_INT 1000
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: PUSH
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 314
8510: NOT
8511: AND
8512: PUSH
8513: LD_INT 81
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 91
8525: PUSH
8526: LD_VAR 0 2
8530: PUSH
8531: LD_INT 9
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 69
8547: OR
8548: IFFALSE 8599
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_VAR 0 10
8559: PPUSH
8560: LD_INT 58
8562: PUSH
8563: EMPTY
8564: LIST
8565: PUSH
8566: LD_INT 24
8568: PUSH
8569: LD_INT 250
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL_OW 72
8584: PPUSH
8585: LD_VAR 0 2
8589: PPUSH
8590: CALL_OW 74
8594: PPUSH
8595: CALL_OW 120
// end else
8599: GO 8886
// begin if veh and GetLives ( veh ) < 760 then
8601: LD_VAR 0 11
8605: PUSH
8606: LD_VAR 0 11
8610: PPUSH
8611: CALL_OW 256
8615: PUSH
8616: LD_INT 760
8618: LESS
8619: AND
8620: IFFALSE 8671
// begin SetTag ( i , 0 ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 0
8629: PPUSH
8630: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8634: LD_VAR 0 11
8638: PPUSH
8639: LD_VAR 0 6
8643: PUSH
8644: LD_INT 3
8646: ARRAY
8647: PUSH
8648: LD_INT 1
8650: ARRAY
8651: PPUSH
8652: LD_VAR 0 6
8656: PUSH
8657: LD_INT 3
8659: ARRAY
8660: PUSH
8661: LD_INT 2
8663: ARRAY
8664: PPUSH
8665: CALL_OW 111
// end else
8669: GO 8886
// if veh then
8671: LD_VAR 0 11
8675: IFFALSE 8886
// if tag <= attackFormula [ 4 ] then
8677: LD_VAR 0 4
8681: PUSH
8682: LD_VAR 0 6
8686: PUSH
8687: LD_INT 4
8689: ARRAY
8690: LESSEQUAL
8691: IFFALSE 8852
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8693: LD_VAR 0 11
8697: PPUSH
8698: LD_VAR 0 6
8702: PUSH
8703: LD_INT 4
8705: ARRAY
8706: PUSH
8707: LD_VAR 0 4
8711: ARRAY
8712: PUSH
8713: LD_INT 1
8715: ARRAY
8716: PPUSH
8717: LD_VAR 0 6
8721: PUSH
8722: LD_INT 4
8724: ARRAY
8725: PUSH
8726: LD_VAR 0 4
8730: ARRAY
8731: PUSH
8732: LD_INT 2
8734: ARRAY
8735: PPUSH
8736: CALL_OW 297
8740: PUSH
8741: LD_INT 6
8743: GREATER
8744: IFFALSE 8795
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8746: LD_VAR 0 11
8750: PPUSH
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 4
8758: ARRAY
8759: PUSH
8760: LD_VAR 0 4
8764: ARRAY
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_VAR 0 6
8774: PUSH
8775: LD_INT 4
8777: ARRAY
8778: PUSH
8779: LD_VAR 0 4
8783: ARRAY
8784: PUSH
8785: LD_INT 2
8787: ARRAY
8788: PPUSH
8789: CALL_OW 114
8793: GO 8850
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8795: LD_INT 81
8797: PUSH
8798: LD_INT 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 91
8807: PUSH
8808: LD_VAR 0 11
8812: PUSH
8813: LD_INT 10
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: NOT
8830: IFFALSE 8850
// SetTag ( i , tag + 1 ) ;
8832: LD_VAR 0 2
8836: PPUSH
8837: LD_VAR 0 4
8841: PUSH
8842: LD_INT 1
8844: PLUS
8845: PPUSH
8846: CALL_OW 109
// end else
8850: GO 8886
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8852: LD_VAR 0 11
8856: PPUSH
8857: LD_INT 81
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: PPUSH
8872: LD_VAR 0 2
8876: PPUSH
8877: CALL_OW 74
8881: PPUSH
8882: CALL_OW 115
// end ; end ;
8886: GO 8192
8888: POP
8889: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8890: LD_EXP 47
8894: PPUSH
8895: LD_INT 52
8897: PUSH
8898: EMPTY
8899: LIST
8900: PPUSH
8901: CALL_OW 72
8905: NOT
8906: IFFALSE 7371
// end ;
8908: LD_VAR 0 1
8912: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8913: LD_INT 22
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 32
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 69
8941: IFFALSE 9018
8943: GO 8945
8945: DISABLE
8946: LD_INT 0
8948: PPUSH
// begin enable ;
8949: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8950: LD_ADDR_VAR 0 1
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 32
8967: PUSH
8968: LD_INT 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 69
8983: PUSH
8984: FOR_IN
8985: IFFALSE 9016
// if GetFuel ( i ) < 10 then
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 261
8996: PUSH
8997: LD_INT 10
8999: LESS
9000: IFFALSE 9014
// SetFuel ( i , 10 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 10
9009: PPUSH
9010: CALL_OW 240
9014: GO 8984
9016: POP
9017: POP
// end ; end_of_file
9018: PPOPN 1
9020: END
// export function Action ; var hasAll , i , tmp ; begin
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: LD_INT 22
9034: PUSH
9035: LD_INT 2
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: LIST
9066: PPUSH
9067: CALL_OW 69
9071: PUSH
9072: LD_INT 7
9074: GREATEREQUAL
9075: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9076: LD_VAR 0 2
9080: PPUSH
9081: LD_STRING 03_HasAll
9083: PPUSH
9084: CALL_OW 39
// Video ( true ) ;
9088: LD_INT 1
9090: PPUSH
9091: CALL 72790 0 1
// CenterNowOnUnits ( Heike ) ;
9095: LD_EXP 28
9099: PPUSH
9100: CALL_OW 87
// wait ( 0 0$2 ) ;
9104: LD_INT 70
9106: PPUSH
9107: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9111: LD_EXP 36
9115: PPUSH
9116: LD_STRING DF-1-start
9118: PPUSH
9119: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9123: LD_EXP 28
9127: PPUSH
9128: LD_EXP 36
9132: PPUSH
9133: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9137: LD_EXP 28
9141: PPUSH
9142: LD_STRING DH-1-start
9144: PPUSH
9145: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9149: LD_EXP 37
9153: PPUSH
9154: LD_INT 92
9156: PPUSH
9157: LD_INT 21
9159: PPUSH
9160: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9164: LD_EXP 32
9168: PPUSH
9169: LD_INT 94
9171: PPUSH
9172: LD_INT 23
9174: PPUSH
9175: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9179: LD_EXP 40
9183: PUSH
9184: LD_INT 1
9186: ARRAY
9187: PPUSH
9188: LD_INT 90
9190: PPUSH
9191: LD_INT 23
9193: PPUSH
9194: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9198: LD_EXP 40
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: PPUSH
9207: LD_INT 93
9209: PPUSH
9210: LD_INT 25
9212: PPUSH
9213: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9217: LD_EXP 40
9221: PPUSH
9222: LD_EXP 37
9226: PPUSH
9227: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9231: LD_EXP 37
9235: PUSH
9236: LD_EXP 32
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: LD_EXP 28
9249: PPUSH
9250: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9254: LD_EXP 28
9258: PPUSH
9259: LD_EXP 37
9263: PPUSH
9264: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9268: LD_INT 35
9270: PPUSH
9271: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9275: LD_EXP 37
9279: PPUSH
9280: LD_INT 92
9282: PPUSH
9283: LD_INT 21
9285: PPUSH
9286: CALL_OW 307
9290: IFFALSE 9268
// Say ( Omar , DO-1-start ) ;
9292: LD_EXP 37
9296: PPUSH
9297: LD_STRING DO-1-start
9299: PPUSH
9300: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9304: LD_EXP 28
9308: PPUSH
9309: LD_STRING DH-2-start
9311: PPUSH
9312: CALL_OW 88
// if hasAll then
9316: LD_VAR 0 2
9320: IFFALSE 9448
// begin Say ( Omar , DO-2-start ) ;
9322: LD_EXP 37
9326: PPUSH
9327: LD_STRING DO-2-start
9329: PPUSH
9330: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9334: LD_EXP 37
9338: PPUSH
9339: LD_STRING DO-3-start
9341: PPUSH
9342: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9346: LD_EXP 28
9350: PPUSH
9351: LD_STRING DH-3-start
9353: PPUSH
9354: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9358: LD_EXP 36
9362: PPUSH
9363: LD_STRING DF-2-start
9365: PPUSH
9366: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9370: LD_EXP 37
9374: PPUSH
9375: LD_EXP 36
9379: PPUSH
9380: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9384: LD_EXP 37
9388: PPUSH
9389: LD_STRING DO-4-start
9391: PPUSH
9392: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9396: LD_EXP 36
9400: PPUSH
9401: LD_STRING DF-3-start
9403: PPUSH
9404: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9408: LD_EXP 37
9412: PPUSH
9413: LD_STRING DO-5-start
9415: PPUSH
9416: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9420: LD_EXP 36
9424: PPUSH
9425: LD_STRING DF-4-start
9427: PPUSH
9428: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9432: LD_EXP 37
9436: PPUSH
9437: LD_EXP 28
9441: PPUSH
9442: CALL_OW 119
// end else
9446: GO 9548
// begin Say ( Omar , DO-2-start-a ) ;
9448: LD_EXP 37
9452: PPUSH
9453: LD_STRING DO-2-start-a
9455: PPUSH
9456: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9460: LD_EXP 37
9464: PPUSH
9465: LD_STRING DO-3-start-a
9467: PPUSH
9468: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9472: LD_EXP 28
9476: PPUSH
9477: LD_STRING DH-3-start-a
9479: PPUSH
9480: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9484: LD_EXP 36
9488: PPUSH
9489: LD_STRING DF-2-start-a
9491: PPUSH
9492: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9496: LD_EXP 37
9500: PPUSH
9501: LD_EXP 36
9505: PPUSH
9506: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9510: LD_EXP 37
9514: PPUSH
9515: LD_STRING DO-4-start-a
9517: PPUSH
9518: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9522: LD_EXP 36
9526: PPUSH
9527: LD_STRING DF-3-start-a
9529: PPUSH
9530: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9534: LD_EXP 37
9538: PPUSH
9539: LD_EXP 28
9543: PPUSH
9544: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9548: LD_INT 10
9550: PPUSH
9551: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9555: LD_EXP 37
9559: PPUSH
9560: LD_STRING DO-1-mission
9562: PPUSH
9563: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9567: LD_EXP 37
9571: PPUSH
9572: LD_STRING DO-2-mission
9574: PPUSH
9575: CALL_OW 88
// if not hasAll then
9579: LD_VAR 0 2
9583: NOT
9584: IFFALSE 9598
// Say ( Omar , DO-3-mission ) ;
9586: LD_EXP 37
9590: PPUSH
9591: LD_STRING DO-3-mission
9593: PPUSH
9594: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9598: LD_EXP 37
9602: PPUSH
9603: LD_STRING DO-4-mission
9605: PPUSH
9606: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9610: LD_EXP 28
9614: PPUSH
9615: LD_STRING DH-1-mission
9617: PPUSH
9618: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9622: LD_EXP 36
9626: PPUSH
9627: LD_STRING DF-1-mission
9629: PPUSH
9630: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9634: LD_EXP 37
9638: PPUSH
9639: LD_STRING DO-5-mission
9641: PPUSH
9642: CALL_OW 88
// if not hasAll then
9646: LD_VAR 0 2
9650: NOT
9651: IFFALSE 9786
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9653: LD_ADDR_VAR 0 4
9657: PUSH
9658: LD_INT 22
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 21
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 23
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 69
9697: ST_TO_ADDR
// for i := 7 downto tmp do
9698: LD_ADDR_VAR 0 3
9702: PUSH
9703: DOUBLE
9704: LD_INT 7
9706: INC
9707: ST_TO_ADDR
9708: LD_VAR 0 4
9712: PUSH
9713: FOR_DOWNTO
9714: IFFALSE 9784
// begin if omarSquad < 3 then
9716: LD_EXP 40
9720: PUSH
9721: LD_INT 3
9723: LESS
9724: IFFALSE 9728
// break ;
9726: GO 9784
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9728: LD_EXP 40
9732: PUSH
9733: LD_INT 3
9735: ARRAY
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9744: LD_ADDR_EXP 42
9748: PUSH
9749: LD_EXP 42
9753: PUSH
9754: LD_EXP 40
9758: PUSH
9759: LD_INT 3
9761: ARRAY
9762: UNION
9763: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9764: LD_ADDR_EXP 40
9768: PUSH
9769: LD_EXP 40
9773: PPUSH
9774: LD_INT 3
9776: PPUSH
9777: CALL_OW 3
9781: ST_TO_ADDR
// end ;
9782: GO 9713
9784: POP
9785: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9786: LD_EXP 37
9790: PUSH
9791: LD_EXP 40
9795: ADD
9796: PPUSH
9797: LD_INT 103
9799: PPUSH
9800: LD_INT 9
9802: PPUSH
9803: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9807: LD_VAR 0 2
9811: PUSH
9812: LD_EXP 33
9816: PPUSH
9817: CALL_OW 302
9821: AND
9822: IFFALSE 9883
// begin wait ( 0 0$3 ) ;
9824: LD_INT 105
9826: PPUSH
9827: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9831: LD_EXP 33
9835: PPUSH
9836: LD_EXP 36
9840: PPUSH
9841: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9845: LD_EXP 33
9849: PPUSH
9850: LD_STRING DK-1-side
9852: PPUSH
9853: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9857: LD_EXP 36
9861: PPUSH
9862: LD_EXP 33
9866: PPUSH
9867: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9871: LD_EXP 36
9875: PPUSH
9876: LD_STRING DF-1-side
9878: PPUSH
9879: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9883: LD_INT 22
9885: PUSH
9886: LD_INT 2
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: PPUSH
9898: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9902: LD_EXP 36
9906: PUSH
9907: LD_EXP 39
9911: ADD
9912: PPUSH
9913: LD_INT 108
9915: PPUSH
9916: LD_INT 62
9918: PPUSH
9919: CALL_OW 111
// gameStarted := true ;
9923: LD_ADDR_EXP 3
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9931: LD_INT 105
9933: PPUSH
9934: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9938: LD_EXP 28
9942: PPUSH
9943: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9947: LD_EXP 28
9951: PPUSH
9952: LD_EXP 32
9956: PPUSH
9957: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9961: LD_INT 22
9963: PUSH
9964: LD_INT 2
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_EXP 28
9980: DIFF
9981: PPUSH
9982: LD_EXP 28
9986: PPUSH
9987: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9991: LD_EXP 28
9995: PPUSH
9996: LD_STRING DH-1-explore
9998: PPUSH
9999: CALL_OW 88
// if Givi then
10003: LD_EXP 29
10007: IFFALSE 10023
// Say ( Givi , DG-1-explore ) else
10009: LD_EXP 29
10013: PPUSH
10014: LD_STRING DG-1-explore
10016: PPUSH
10017: CALL_OW 88
10021: GO 10060
// if heikeSecondSquad then
10023: LD_EXP 42
10027: IFFALSE 10060
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10029: LD_EXP 42
10033: PPUSH
10034: LD_INT 26
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: LD_STRING DArm-1-explore
10055: PPUSH
10056: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10060: LD_EXP 32
10064: PPUSH
10065: LD_STRING DA-1-explore
10067: PPUSH
10068: CALL_OW 88
// if Sophia then
10072: LD_EXP 34
10076: IFFALSE 10154
// begin Say ( Sophia , DS-2-explore ) ;
10078: LD_EXP 34
10082: PPUSH
10083: LD_STRING DS-2-explore
10085: PPUSH
10086: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10090: LD_EXP 32
10094: PPUSH
10095: LD_STRING DA-2-explore
10097: PPUSH
10098: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10102: LD_EXP 34
10106: PPUSH
10107: LD_EXP 32
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10116: LD_EXP 32
10120: PPUSH
10121: LD_EXP 34
10125: PPUSH
10126: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10130: LD_EXP 34
10134: PPUSH
10135: LD_STRING DS-3-explore
10137: PPUSH
10138: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10142: LD_EXP 32
10146: PPUSH
10147: LD_STRING DA-3-explore
10149: PPUSH
10150: CALL_OW 88
// end ; if Mike then
10154: LD_EXP 30
10158: IFFALSE 10214
// begin Say ( Mike , DM-1-explore ) ;
10160: LD_EXP 30
10164: PPUSH
10165: LD_STRING DM-1-explore
10167: PPUSH
10168: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10172: LD_EXP 28
10176: PPUSH
10177: LD_STRING DH-2-explore
10179: PPUSH
10180: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10184: LD_EXP 30
10188: PPUSH
10189: LD_STRING DM-2-explore
10191: PPUSH
10192: CALL_OW 88
// if Kaia then
10196: LD_EXP 33
10200: IFFALSE 10214
// Say ( Kaia , DK-1-explore ) ;
10202: LD_EXP 33
10206: PPUSH
10207: LD_STRING DK-1-explore
10209: PPUSH
10210: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10214: LD_INT 22
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PPUSH
10229: CALL_OW 139
// Video ( false ) ;
10233: LD_INT 0
10235: PPUSH
10236: CALL 72790 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10240: LD_STRING BuildBase
10242: PPUSH
10243: CALL_OW 337
// SaveForQuickRestart ;
10247: CALL_OW 22
// end ;
10251: LD_VAR 0 1
10255: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10256: LD_EXP 5
10260: NOT
10261: PUSH
10262: LD_EXP 6
10266: NOT
10267: AND
10268: PUSH
10269: LD_INT 5
10271: PPUSH
10272: LD_INT 22
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 70
10286: AND
10287: PUSH
10288: LD_EXP 6
10292: NOT
10293: AND
10294: IFFALSE 10379
10296: GO 10298
10298: DISABLE
// begin if Mike then
10299: LD_EXP 30
10303: IFFALSE 10319
// Say ( Mike , DM-1-scout ) else
10305: LD_EXP 30
10309: PPUSH
10310: LD_STRING DM-1-scout
10312: PPUSH
10313: CALL_OW 88
10317: GO 10350
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10319: LD_EXP 42
10323: PPUSH
10324: LD_INT 26
10326: PUSH
10327: LD_INT 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 72
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: LD_STRING DArm-1-explore
10345: PPUSH
10346: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10350: LD_INT 54
10352: PPUSH
10353: LD_INT 35
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10366: LD_INT 54
10368: PPUSH
10369: LD_INT 35
10371: PPUSH
10372: LD_INT 2
10374: PPUSH
10375: CALL_OW 331
// end ;
10379: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10380: LD_INT 6
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 70
10397: PUSH
10398: LD_EXP 6
10402: NOT
10403: AND
10404: IFFALSE 10658
10406: GO 10408
10408: DISABLE
10409: LD_INT 0
10411: PPUSH
10412: PPUSH
10413: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_EXP 42
10423: PPUSH
10424: LD_INT 26
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 72
10438: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10439: LD_ADDR_VAR 0 2
10443: PUSH
10444: LD_EXP 42
10448: PPUSH
10449: LD_INT 26
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: ST_TO_ADDR
// DialogueOn ;
10464: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10468: LD_INT 36
10470: PPUSH
10471: LD_INT 22
10473: PPUSH
10474: LD_INT 2
10476: PPUSH
10477: LD_INT 8
10479: PPUSH
10480: CALL_OW 330
// dwait ( 0 0$1 ) ;
10484: LD_INT 35
10486: PPUSH
10487: CALL_OW 68
// speakerOk := false ;
10491: LD_ADDR_VAR 0 3
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
// if Mike then
10499: LD_EXP 30
10503: IFFALSE 10525
// speakerOk := Say ( Mike , DM-1-spot ) else
10505: LD_ADDR_VAR 0 3
10509: PUSH
10510: LD_EXP 30
10514: PPUSH
10515: LD_STRING DM-1-spot
10517: PPUSH
10518: CALL_OW 88
10522: ST_TO_ADDR
10523: GO 10553
// if randomMen then
10525: LD_VAR 0 1
10529: IFFALSE 10553
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10531: LD_ADDR_VAR 0 3
10535: PUSH
10536: LD_VAR 0 1
10540: PUSH
10541: LD_INT 1
10543: ARRAY
10544: PPUSH
10545: LD_STRING DArm-1-spot-a
10547: PPUSH
10548: CALL_OW 88
10552: ST_TO_ADDR
// if speakerOk then
10553: LD_VAR 0 3
10557: IFFALSE 10601
// begin if Givi then
10559: LD_EXP 29
10563: IFFALSE 10579
// Say ( Givi , DG-1-spot ) else
10565: LD_EXP 29
10569: PPUSH
10570: LD_STRING DG-1-spot
10572: PPUSH
10573: CALL_OW 88
10577: GO 10601
// if randomWomen then
10579: LD_VAR 0 2
10583: IFFALSE 10601
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10585: LD_VAR 0 2
10589: PUSH
10590: LD_INT 1
10592: ARRAY
10593: PPUSH
10594: LD_STRING DArf-1-spot-a
10596: PPUSH
10597: CALL_OW 88
// end ; if Mike then
10601: LD_EXP 30
10605: IFFALSE 10621
// Say ( Heike , DH-1-spot ) else
10607: LD_EXP 28
10611: PPUSH
10612: LD_STRING DH-1-spot
10614: PPUSH
10615: CALL_OW 88
10619: GO 10633
// Say ( Heike , DH-1-spot-a ) ;
10621: LD_EXP 28
10625: PPUSH
10626: LD_STRING DH-1-spot-a
10628: PPUSH
10629: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10633: LD_INT 36
10635: PPUSH
10636: LD_INT 22
10638: PPUSH
10639: LD_INT 2
10641: PPUSH
10642: CALL_OW 331
// DialogueOff ;
10646: CALL_OW 7
// americanBaseSpoted := true ;
10650: LD_ADDR_EXP 5
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// end ;
10658: PPOPN 3
10660: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10661: LD_EXP 5
10665: NOT
10666: PUSH
10667: LD_INT 22
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 101
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: AND
10696: PUSH
10697: LD_EXP 6
10701: NOT
10702: AND
10703: IFFALSE 10789
10705: GO 10707
10707: DISABLE
10708: LD_INT 0
10710: PPUSH
// begin americanBaseSpoted := true ;
10711: LD_ADDR_EXP 5
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10719: LD_ADDR_VAR 0 1
10723: PUSH
10724: LD_EXP 42
10728: PPUSH
10729: LD_INT 26
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PPUSH
10739: CALL_OW 72
10743: ST_TO_ADDR
// if not randomMen then
10744: LD_VAR 0 1
10748: NOT
10749: IFFALSE 10753
// exit ;
10751: GO 10789
// DialogueOn ;
10753: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10757: LD_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: LD_STRING DArm-1-spot-a
10768: PPUSH
10769: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10773: LD_EXP 28
10777: PPUSH
10778: LD_STRING DH-1-spot-a
10780: PPUSH
10781: CALL_OW 88
// DialogueOff ;
10785: CALL_OW 7
// end ;
10789: PPOPN 1
10791: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10792: LD_INT 11
10794: PPUSH
10795: CALL_OW 255
10799: PUSH
10800: LD_INT 2
10802: EQUAL
10803: PUSH
10804: LD_INT 7
10806: PPUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 3
10819: PUSH
10820: LD_INT 50
10822: PUSH
10823: EMPTY
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 30
10832: PUSH
10833: LD_INT 31
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 70
10849: OR
10850: PUSH
10851: LD_INT 7
10853: PPUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 70
10868: PUSH
10869: LD_INT 1
10871: GREATER
10872: OR
10873: PUSH
10874: LD_EXP 44
10878: PUSH
10879: LD_INT 4
10881: LESSEQUAL
10882: OR
10883: IFFALSE 11462
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
// begin wait ( 0 0$3 ) ;
10892: LD_INT 105
10894: PPUSH
10895: CALL_OW 67
// americanStartRun := true ;
10899: LD_ADDR_EXP 14
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// if IsOk ( usCommander ) then
10907: LD_EXP 45
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10946
// begin usForces := usForces union usCommander ;
10918: LD_ADDR_EXP 44
10922: PUSH
10923: LD_EXP 44
10927: PUSH
10928: LD_EXP 45
10932: UNION
10933: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10934: LD_EXP 45
10938: PPUSH
10939: LD_STRING DUsm-1-assault
10941: PPUSH
10942: CALL_OW 88
// end ; for i in usForces do
10946: LD_ADDR_VAR 0 1
10950: PUSH
10951: LD_EXP 44
10955: PUSH
10956: FOR_IN
10957: IFFALSE 11003
// begin if IsInUnit ( i ) then
10959: LD_VAR 0 1
10963: PPUSH
10964: CALL_OW 310
10968: IFFALSE 10979
// ComExitBuilding ( i ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 122
// wait ( 3 ) ;
10979: LD_INT 3
10981: PPUSH
10982: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_INT 34
10993: PPUSH
10994: LD_INT 67
10996: PPUSH
10997: CALL_OW 111
// end ;
11001: GO 10956
11003: POP
11004: POP
// Say ( Heike , DH-1-assault ) ;
11005: LD_EXP 28
11009: PPUSH
11010: LD_STRING DH-1-assault
11012: PPUSH
11013: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11017: LD_INT 35
11019: PPUSH
11020: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11024: LD_VAR 0 1
11028: PPUSH
11029: LD_INT 34
11031: PPUSH
11032: LD_INT 67
11034: PPUSH
11035: CALL_OW 111
// until not usForces ;
11039: LD_EXP 44
11043: NOT
11044: IFFALSE 11017
// music_nat := 2 ;
11046: LD_ADDR_OWVAR 71
11050: PUSH
11051: LD_INT 2
11053: ST_TO_ADDR
// music_class := music_victory ;
11054: LD_ADDR_OWVAR 72
11058: PUSH
11059: LD_INT 4
11061: ST_TO_ADDR
// if not americanHasEscaped then
11062: LD_EXP 8
11066: NOT
11067: IFFALSE 11088
// begin Say ( Heike , DH-2-assault ) ;
11069: LD_EXP 28
11073: PPUSH
11074: LD_STRING DH-2-assault
11076: PPUSH
11077: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11081: LD_STRING ACH_CLEAN
11083: PPUSH
11084: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11088: LD_INT 70
11090: PPUSH
11091: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11095: LD_INT 35
11097: PPUSH
11098: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11102: LD_INT 22
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 21
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: LD_INT 50
11127: PUSH
11128: EMPTY
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 69
11144: NOT
11145: IFFALSE 11095
// InGameOn ;
11147: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11151: LD_INT 11
11153: PPUSH
11154: CALL_OW 255
11158: PUSH
11159: LD_INT 2
11161: EQUAL
11162: NOT
11163: IFFALSE 11175
// SetSide ( usDepot , 2 ) ;
11165: LD_INT 11
11167: PPUSH
11168: LD_INT 2
11170: PPUSH
11171: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11175: LD_INT 35
11177: PPUSH
11178: LD_INT 22
11180: PPUSH
11181: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11185: LD_EXP 28
11189: PPUSH
11190: LD_INT 35
11192: PPUSH
11193: LD_INT 22
11195: PPUSH
11196: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11200: LD_EXP 28
11204: PPUSH
11205: LD_INT 38
11207: PPUSH
11208: LD_INT 25
11210: PPUSH
11211: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11215: LD_EXP 41
11219: PUSH
11220: LD_EXP 42
11224: UNION
11225: PPUSH
11226: LD_INT 39
11228: PPUSH
11229: LD_INT 26
11231: PPUSH
11232: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11236: LD_EXP 41
11240: PUSH
11241: LD_EXP 42
11245: UNION
11246: PPUSH
11247: LD_EXP 28
11251: PPUSH
11252: CALL_OW 179
// p := 0 ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11264: LD_INT 35
11266: PPUSH
11267: CALL_OW 67
// p := p + 1 ;
11271: LD_ADDR_VAR 0 2
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: LD_INT 1
11283: PLUS
11284: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11285: LD_EXP 28
11289: PPUSH
11290: CALL_OW 314
11294: NOT
11295: PUSH
11296: LD_VAR 0 2
11300: PUSH
11301: LD_INT 10
11303: GREATER
11304: OR
11305: IFFALSE 11264
// Say ( Heike , DH-1-capture ) ;
11307: LD_EXP 28
11311: PPUSH
11312: LD_STRING DH-1-capture
11314: PPUSH
11315: CALL_OW 88
// if Markov then
11319: LD_EXP 35
11323: IFFALSE 11337
// Say ( Markov , DMar-1-capture ) ;
11325: LD_EXP 35
11329: PPUSH
11330: LD_STRING DMar-1-capture
11332: PPUSH
11333: CALL_OW 88
// if Sophia then
11337: LD_EXP 34
11341: IFFALSE 11367
// begin Say ( Heike , DH-2-capture ) ;
11343: LD_EXP 28
11347: PPUSH
11348: LD_STRING DH-2-capture
11350: PPUSH
11351: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11355: LD_EXP 34
11359: PPUSH
11360: LD_STRING DS-1-capture
11362: PPUSH
11363: CALL_OW 88
// end ; InGameOff ;
11367: CALL_OW 9
// music_nat := music_auto ;
11371: LD_ADDR_OWVAR 71
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// music_class := music_auto ;
11379: LD_ADDR_OWVAR 72
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11387: LD_STRING ConstructBase
11389: PPUSH
11390: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: LD_INT 22
11401: PUSH
11402: LD_INT 1
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 21
11411: PUSH
11412: LD_INT 3
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 69
11427: PUSH
11428: FOR_IN
11429: IFFALSE 11445
// SetSide ( i , 2 ) ;
11431: LD_VAR 0 1
11435: PPUSH
11436: LD_INT 2
11438: PPUSH
11439: CALL_OW 235
11443: GO 11428
11445: POP
11446: POP
// wait ( 0 0$3 ) ;
11447: LD_INT 105
11449: PPUSH
11450: CALL_OW 67
// americanBaseCaptured := true ;
11454: LD_ADDR_EXP 6
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// end ;
11462: PPOPN 2
11464: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11465: LD_EXP 13
11469: PUSH
11470: LD_INT 3
11472: GREATEREQUAL
11473: IFFALSE 11485
11475: GO 11477
11477: DISABLE
// SetAchievement ( ACH_ENG ) ;
11478: LD_STRING ACH_ENG
11480: PPUSH
11481: CALL_OW 543
11485: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11486: LD_INT 22
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 15
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: PUSH
11515: LD_INT 4
11517: GREATEREQUAL
11518: IFFALSE 11530
11520: GO 11522
11522: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11523: LD_STRING ACH_APEGEN
11525: PPUSH
11526: CALL_OW 543
11530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11531: LD_INT 22
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 57
11556: PUSH
11557: EMPTY
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: PPUSH
11569: CALL_OW 69
11573: IFFALSE 11816
11575: GO 11577
11577: DISABLE
// begin workshopBuilded := true ;
11578: LD_ADDR_EXP 10
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if IsOk ( Markov ) then
11586: LD_EXP 35
11590: PPUSH
11591: CALL_OW 302
11595: IFFALSE 11654
// begin Say ( Heike , DH-1-shop-a ) ;
11597: LD_EXP 28
11601: PPUSH
11602: LD_STRING DH-1-shop-a
11604: PPUSH
11605: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11609: LD_INT 47
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: CALL_OW 321
11619: PUSH
11620: LD_INT 2
11622: EQUAL
11623: PUSH
11624: LD_INT 45
11626: PPUSH
11627: LD_INT 2
11629: PPUSH
11630: CALL_OW 321
11634: PUSH
11635: LD_INT 2
11637: EQUAL
11638: AND
11639: NOT
11640: IFFALSE 11654
// Say ( Markov , DMar-1-shop-a ) ;
11642: LD_EXP 35
11646: PPUSH
11647: LD_STRING DMar-1-shop-a
11649: PPUSH
11650: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11654: LD_INT 35
11656: PPUSH
11657: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11661: LD_INT 47
11663: PPUSH
11664: LD_INT 2
11666: PPUSH
11667: CALL_OW 321
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: PUSH
11676: LD_INT 45
11678: PPUSH
11679: LD_INT 2
11681: PPUSH
11682: CALL_OW 321
11686: PUSH
11687: LD_INT 2
11689: EQUAL
11690: OR
11691: IFFALSE 11654
// DialogueOn ;
11693: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11697: LD_EXP 35
11701: PPUSH
11702: LD_STRING DMar-1-shop
11704: PPUSH
11705: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11709: LD_EXP 28
11713: PPUSH
11714: LD_STRING DH-1-shop
11716: PPUSH
11717: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11721: LD_EXP 35
11725: PPUSH
11726: LD_STRING DMar-2-shop
11728: PPUSH
11729: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11733: LD_EXP 35
11737: PPUSH
11738: LD_STRING DMar-3-shop
11740: PPUSH
11741: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11745: LD_EXP 28
11749: PPUSH
11750: LD_STRING DH-2-shop
11752: PPUSH
11753: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11757: LD_EXP 35
11761: PPUSH
11762: LD_STRING DMar-4-shop
11764: PPUSH
11765: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11769: LD_EXP 28
11773: PPUSH
11774: LD_STRING DH-3-shop
11776: PPUSH
11777: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11781: LD_EXP 35
11785: PPUSH
11786: LD_STRING DMar-5-shop
11788: PPUSH
11789: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11793: LD_EXP 28
11797: PPUSH
11798: LD_STRING DH-4-shop
11800: PPUSH
11801: CALL_OW 88
// DialogueOff ;
11805: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11809: LD_STRING ConstructVeh
11811: PPUSH
11812: CALL_OW 337
// end ;
11816: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11817: LD_INT 2
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL 36559 0 3
11830: PUSH
11831: LD_INT 0
11833: EQUAL
11834: IFFALSE 11846
11836: GO 11838
11838: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11839: LD_STRING Techs
11841: PPUSH
11842: CALL_OW 337
11846: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11847: LD_EXP 35
11851: PPUSH
11852: CALL_OW 302
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 34
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 35
11882: PUSH
11883: LD_INT 22
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: AND
11904: IFFALSE 12011
11906: GO 11908
11908: DISABLE
// begin DialogueOn ;
11909: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11913: LD_INT 22
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 35
11938: PUSH
11939: LD_INT 22
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: PPUSH
11960: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11964: LD_INT 10
11966: PPUSH
11967: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11971: LD_EXP 28
11975: PPUSH
11976: LD_STRING DH-1-bal
11978: PPUSH
11979: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11983: LD_EXP 35
11987: PPUSH
11988: LD_STRING DMar-1-bal
11990: PPUSH
11991: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11995: LD_EXP 28
11999: PPUSH
12000: LD_STRING DH-2-bal
12002: PPUSH
12003: CALL_OW 88
// DialogueOff ;
12007: CALL_OW 7
// end ;
12011: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12012: LD_EXP 32
12016: PPUSH
12017: CALL_OW 302
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 30
12034: PUSH
12035: LD_INT 6
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: AND
12051: IFFALSE 12112
12053: GO 12055
12055: DISABLE
// begin DialogueOn ;
12056: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12060: LD_EXP 32
12064: PPUSH
12065: LD_STRING DA-1-lab
12067: PPUSH
12068: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12072: LD_EXP 28
12076: PPUSH
12077: LD_STRING DH-1-lab
12079: PPUSH
12080: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12084: LD_EXP 32
12088: PPUSH
12089: LD_STRING DA-2-lab
12091: PPUSH
12092: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12096: LD_EXP 28
12100: PPUSH
12101: LD_STRING DH-2-lab
12103: PPUSH
12104: CALL_OW 88
// DialogueOff ;
12108: CALL_OW 7
// end ;
12112: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12113: LD_EXP 33
12117: PPUSH
12118: CALL_OW 302
12122: PUSH
12123: LD_INT 22
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 25
12135: PUSH
12136: LD_INT 15
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: AND
12152: PUSH
12153: LD_INT 81
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: NOT
12168: AND
12169: IFFALSE 12351
12171: GO 12173
12173: DISABLE
12174: LD_INT 0
12176: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12177: LD_ADDR_VAR 0 1
12181: PUSH
12182: LD_INT 22
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 15
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: ST_TO_ADDR
// InGameOn ;
12211: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12215: LD_VAR 0 1
12219: PUSH
12220: LD_INT 1
12222: ARRAY
12223: PPUSH
12224: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12241: LD_EXP 33
12245: PPUSH
12246: LD_STRING DK-1-apesol
12248: PPUSH
12249: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 1
12260: ARRAY
12261: PPUSH
12262: LD_INT 35
12264: PPUSH
12265: LD_INT 28
12267: PPUSH
12268: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12272: LD_VAR 0 1
12276: PUSH
12277: LD_INT 1
12279: ARRAY
12280: PPUSH
12281: LD_INT 36
12283: PPUSH
12284: LD_INT 17
12286: PPUSH
12287: CALL_OW 171
// DialogueOn ;
12291: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12295: LD_EXP 32
12299: PPUSH
12300: LD_STRING DA-1-apesol
12302: PPUSH
12303: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12307: LD_EXP 33
12311: PPUSH
12312: LD_STRING DK-2-apesol
12314: PPUSH
12315: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12319: LD_EXP 32
12323: PPUSH
12324: LD_STRING DA-2-apesol
12326: PPUSH
12327: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12331: LD_EXP 33
12335: PPUSH
12336: LD_STRING DK-3-apesol
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// InGameOff ;
12347: CALL_OW 9
// end ;
12351: PPOPN 1
12353: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12354: LD_EXP 34
12358: PPUSH
12359: CALL_OW 302
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 25
12376: PUSH
12377: LD_INT 16
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: AND
12393: PUSH
12394: LD_INT 81
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 69
12408: NOT
12409: AND
12410: IFFALSE 12683
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12418: LD_ADDR_VAR 0 1
12422: PUSH
12423: LD_INT 22
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ST_TO_ADDR
// InGameOn ;
12452: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12456: LD_INT 35
12458: PPUSH
12459: LD_INT 22
12461: PPUSH
12462: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12466: LD_INT 5
12468: PPUSH
12469: LD_INT 35
12471: PPUSH
12472: LD_INT 22
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12482: LD_EXP 34
12486: PPUSH
12487: LD_VAR 0 1
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12500: LD_VAR 0 1
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12513: LD_VAR 0 1
12517: PUSH
12518: LD_INT 1
12520: ARRAY
12521: PPUSH
12522: CALL_OW 122
// wait ( 0 0$2 ) ;
12526: LD_INT 70
12528: PPUSH
12529: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12533: LD_EXP 34
12537: PPUSH
12538: LD_STRING DS-1-apeeng
12540: PPUSH
12541: CALL_OW 88
// if IsOk ( Kamil ) then
12545: LD_EXP 31
12549: PPUSH
12550: CALL_OW 302
12554: IFFALSE 12679
// begin Say ( Kamil , DKam-1-apeeng ) ;
12556: LD_EXP 31
12560: PPUSH
12561: LD_STRING DKam-1-apeeng
12563: PPUSH
12564: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12568: LD_EXP 34
12572: PPUSH
12573: LD_STRING DS-2-apeeng
12575: PPUSH
12576: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12580: LD_EXP 31
12584: PPUSH
12585: LD_STRING DKam-2-apeeng
12587: PPUSH
12588: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12592: LD_EXP 34
12596: PPUSH
12597: LD_STRING DS-3-apeeng
12599: PPUSH
12600: CALL_OW 88
// if not IsOK ( Kaia ) then
12604: LD_EXP 33
12608: PPUSH
12609: CALL_OW 302
12613: NOT
12614: IFFALSE 12622
// begin InGameOff ;
12616: CALL_OW 9
// exit ;
12620: GO 12683
// end ; Say ( Kaia , DK-1-apeeng ) ;
12622: LD_EXP 33
12626: PPUSH
12627: LD_STRING DK-1-apeeng
12629: PPUSH
12630: CALL_OW 88
// if not IsOk ( Givi ) then
12634: LD_EXP 29
12638: PPUSH
12639: CALL_OW 302
12643: NOT
12644: IFFALSE 12655
// begin Video ( false ) ;
12646: LD_INT 0
12648: PPUSH
12649: CALL 72790 0 1
// exit ;
12653: GO 12683
// end ; Say ( Givi , DG-1-apeeng ) ;
12655: LD_EXP 29
12659: PPUSH
12660: LD_STRING DG-1-apeeng
12662: PPUSH
12663: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12667: LD_EXP 33
12671: PPUSH
12672: LD_STRING DK-2-apeeng
12674: PPUSH
12675: CALL_OW 88
// end ; InGameOff ;
12679: CALL_OW 9
// end ;
12683: PPOPN 1
12685: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12686: LD_EXP 4
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 30
12703: PUSH
12704: LD_INT 0
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: AND
12720: IFFALSE 12885
12722: GO 12724
12724: DISABLE
// begin wait ( 0 0$10 ) ;
12725: LD_INT 350
12727: PPUSH
12728: CALL_OW 67
// DialogueOn ;
12732: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12736: LD_EXP 36
12740: PPUSH
12741: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12745: LD_EXP 36
12749: PPUSH
12750: LD_STRING DF-1-distribution
12752: PPUSH
12753: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12757: LD_EXP 28
12761: PPUSH
12762: LD_STRING DH-2-distribution
12764: PPUSH
12765: CALL_OW 88
// if IsOk ( Kaia ) then
12769: LD_EXP 33
12773: PPUSH
12774: CALL_OW 302
12778: IFFALSE 12839
// begin Say ( Kaia , DK-1-distribution ) ;
12780: LD_EXP 33
12784: PPUSH
12785: LD_STRING DK-1-distribution
12787: PPUSH
12788: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12792: LD_EXP 28
12796: PPUSH
12797: LD_STRING DH-1-distribution
12799: PPUSH
12800: CALL_OW 88
// if IsOk ( Givi ) then
12804: LD_EXP 29
12808: PPUSH
12809: CALL_OW 302
12813: IFFALSE 12839
// begin Say ( Givi , DG-1-distribution ) ;
12815: LD_EXP 29
12819: PPUSH
12820: LD_STRING DG-1-distribution
12822: PPUSH
12823: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12827: LD_EXP 28
12831: PPUSH
12832: LD_STRING DH-3-distribution
12834: PPUSH
12835: CALL_OW 88
// end ; end ; DialogueOff ;
12839: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12843: LD_STRING Crates1
12845: PPUSH
12846: CALL_OW 337
// farmerRequestedCrates := 300 ;
12850: LD_ADDR_EXP 16
12854: PUSH
12855: LD_INT 300
12857: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12858: LD_STRING FarmerCrates
12860: PPUSH
12861: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12865: LD_INT 10
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12875: LD_INT 108
12877: PPUSH
12878: LD_INT 61
12880: PPUSH
12881: CALL_OW 86
// end ;
12885: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12886: LD_EXP 6
12890: PUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: LD_INT 57
12906: PUSH
12907: EMPTY
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 30
12919: PUSH
12920: LD_INT 6
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: AND
12952: PUSH
12953: LD_INT 22
12955: PUSH
12956: LD_INT 2
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 3
12965: PUSH
12966: LD_INT 57
12968: PUSH
12969: EMPTY
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 30
12978: PUSH
12979: LD_INT 4
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: AND
12996: IFFALSE 13160
12998: GO 13000
13000: DISABLE
13001: LD_INT 0
13003: PPUSH
// begin wait ( 0 0$10 ) ;
13004: LD_INT 350
13006: PPUSH
13007: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: LD_EXP 42
13020: PPUSH
13021: LD_INT 26
13023: PUSH
13024: LD_INT 1
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 72
13049: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13050: LD_EXP 28
13054: PPUSH
13055: LD_STRING DH-1-task
13057: PPUSH
13058: CALL_OW 88
// if IsOk ( Sophia ) then
13062: LD_EXP 34
13066: PPUSH
13067: CALL_OW 302
13071: IFFALSE 13111
// begin Say ( Sophia , DS-1-task ) ;
13073: LD_EXP 34
13077: PPUSH
13078: LD_STRING DS-1-task
13080: PPUSH
13081: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13085: LD_EXP 34
13089: PPUSH
13090: LD_STRING DS-2-task
13092: PPUSH
13093: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13097: LD_EXP 28
13101: PPUSH
13102: LD_STRING DH-2-task
13104: PPUSH
13105: CALL_OW 88
// end else
13109: GO 13145
// if eng then
13111: LD_VAR 0 1
13115: IFFALSE 13145
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13117: LD_VAR 0 1
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PPUSH
13126: LD_STRING DArm-1-task
13128: PPUSH
13129: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13133: LD_EXP 28
13137: PPUSH
13138: LD_STRING DH-2-task
13140: PPUSH
13141: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13145: LD_STRING BaseConstructed
13147: PPUSH
13148: CALL_OW 337
// allowConvoys := true ;
13152: LD_ADDR_EXP 12
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// end ;
13160: PPOPN 1
13162: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13163: LD_INT 22
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 12
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: IFFALSE 13359
13193: GO 13195
13195: DISABLE
13196: LD_INT 0
13198: PPUSH
13199: PPUSH
13200: PPUSH
// begin wait ( 0 0$2 ) ;
13201: LD_INT 70
13203: PPUSH
13204: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 4
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 34
13225: PUSH
13226: LD_INT 12
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 69
13241: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 250
13260: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13261: LD_ADDR_VAR 0 3
13265: PUSH
13266: LD_VAR 0 1
13270: PUSH
13271: LD_INT 1
13273: ARRAY
13274: PPUSH
13275: CALL_OW 251
13279: ST_TO_ADDR
// DialogueOn ;
13280: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13284: LD_VAR 0 2
13288: PPUSH
13289: LD_VAR 0 3
13293: PPUSH
13294: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13298: LD_VAR 0 2
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 2
13310: PPUSH
13311: LD_INT 6
13313: NEG
13314: PPUSH
13315: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13319: LD_INT 10
13321: PPUSH
13322: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13326: LD_EXP 28
13330: PPUSH
13331: LD_STRING DH-1-seecargo
13333: PPUSH
13334: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13338: LD_VAR 0 2
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 2
13350: PPUSH
13351: CALL_OW 331
// DialogueOff ;
13355: CALL_OW 7
// end ;
13359: PPOPN 3
13361: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13362: LD_EXP 4
13366: PUSH
13367: LD_EXP 15
13371: PUSH
13372: LD_INT 300
13374: GREATEREQUAL
13375: AND
13376: IFFALSE 13448
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_STRING DF-1-delivery-2
13392: PPUSH
13393: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13397: LD_EXP 28
13401: PPUSH
13402: LD_STRING DH-1-delivery-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13409: LD_EXP 36
13413: PPUSH
13414: LD_STRING DF-2-delivery-2
13416: PPUSH
13417: CALL_OW 94
// DialogueOff ;
13421: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13425: LD_STRING Crates2
13427: PPUSH
13428: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13432: LD_ADDR_EXP 17
13436: PUSH
13437: LD_INT 63000
13439: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13440: LD_ADDR_EXP 16
13444: PUSH
13445: LD_INT 600
13447: ST_TO_ADDR
// end ;
13448: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13449: LD_EXP 4
13453: PUSH
13454: LD_EXP 15
13458: PUSH
13459: LD_INT 600
13461: GREATEREQUAL
13462: AND
13463: PUSH
13464: LD_OWVAR 67
13468: PUSH
13469: LD_INT 1
13471: GREATER
13472: AND
13473: IFFALSE 13639
13475: GO 13477
13477: DISABLE
// begin DialogueOn ;
13478: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13482: LD_EXP 36
13486: PPUSH
13487: LD_STRING DF-1-delivery-3
13489: PPUSH
13490: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13494: LD_EXP 28
13498: PPUSH
13499: LD_STRING DH-1-delivery-3
13501: PPUSH
13502: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13506: LD_EXP 36
13510: PPUSH
13511: LD_STRING DF-2-delivery-3
13513: PPUSH
13514: CALL_OW 94
// if IsOk ( Kaia ) then
13518: LD_EXP 33
13522: PPUSH
13523: CALL_OW 302
13527: IFFALSE 13577
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13529: LD_EXP 33
13533: PPUSH
13534: LD_STRING DK-1-delivery-3
13536: PPUSH
13537: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13541: LD_EXP 28
13545: PPUSH
13546: LD_STRING DH-2-delivery-3
13548: PPUSH
13549: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DG-1-delivery-3
13560: PPUSH
13561: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13565: LD_EXP 30
13569: PPUSH
13570: LD_STRING DM-1-delivery-3
13572: PPUSH
13573: CALL_OW 88
// end ; DialogueOff ;
13577: CALL_OW 7
// if Difficulty = 2 then
13581: LD_OWVAR 67
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: IFFALSE 13616
// begin ChangeMissionObjectives ( Crates3 ) ;
13591: LD_STRING Crates3
13593: PPUSH
13594: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13598: LD_ADDR_EXP 17
13602: PUSH
13603: LD_INT 63000
13605: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13606: LD_ADDR_EXP 16
13610: PUSH
13611: LD_INT 900
13613: ST_TO_ADDR
// end else
13614: GO 13639
// begin ChangeMissionObjectives ( Crates4 ) ;
13616: LD_STRING Crates4
13618: PPUSH
13619: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13623: LD_ADDR_EXP 17
13627: PUSH
13628: LD_INT 63000
13630: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13631: LD_ADDR_EXP 16
13635: PUSH
13636: LD_INT 1200
13638: ST_TO_ADDR
// end ; end ;
13639: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13640: LD_EXP 4
13644: PUSH
13645: LD_EXP 15
13649: PUSH
13650: LD_INT 600
13652: PUSH
13653: LD_INT 900
13655: PUSH
13656: LD_INT 1200
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_OWVAR 67
13668: ARRAY
13669: GREATEREQUAL
13670: AND
13671: PUSH
13672: LD_EXP 16
13676: PUSH
13677: LD_EXP 17
13681: LESSEQUAL
13682: AND
13683: IFFALSE 13769
13685: GO 13687
13687: DISABLE
// begin retreatAllowed := true ;
13688: LD_ADDR_EXP 11
13692: PUSH
13693: LD_INT 1
13695: ST_TO_ADDR
// display_strings := [ ] ;
13696: LD_ADDR_OWVAR 47
13700: PUSH
13701: EMPTY
13702: ST_TO_ADDR
// DialogueOn ;
13703: CALL_OW 6
// InGameOn ;
13707: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13711: LD_EXP 37
13715: PPUSH
13716: LD_STRING DO-radio-end
13718: PPUSH
13719: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13723: LD_EXP 28
13727: PPUSH
13728: LD_STRING DH-1-radio-end
13730: PPUSH
13731: CALL_OW 88
// InGameOff ;
13735: CALL_OW 9
// DialogueOff ;
13739: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13743: LD_STRING Retreat
13745: PPUSH
13746: CALL_OW 337
// wait ( 0 0$2 ) ;
13750: LD_INT 70
13752: PPUSH
13753: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13757: LD_EXP 28
13761: PPUSH
13762: LD_STRING DH-2-radio-end
13764: PPUSH
13765: CALL_OW 88
// end ;
13769: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13770: LD_EXP 11
13774: IFFALSE 13905
13776: GO 13778
13778: DISABLE
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13783: LD_INT 10
13785: PPUSH
13786: LD_INT 0
13788: PPUSH
13789: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_EXP 39
13802: PPUSH
13803: LD_INT 25
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 72
13817: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 102
13825: PPUSH
13826: LD_INT 69
13828: PPUSH
13829: CALL_OW 428
13833: PUSH
13834: LD_INT 0
13836: EQUAL
13837: AND
13838: IFFALSE 13905
// begin for i in tmp do
13840: LD_ADDR_VAR 0 2
13844: PUSH
13845: LD_VAR 0 1
13849: PUSH
13850: FOR_IN
13851: IFFALSE 13875
// if IsInUnit ( i ) then
13853: LD_VAR 0 2
13857: PPUSH
13858: CALL_OW 310
13862: IFFALSE 13873
// ComExitBuilding ( i ) ;
13864: LD_VAR 0 2
13868: PPUSH
13869: CALL_OW 122
13873: GO 13850
13875: POP
13876: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13877: LD_VAR 0 1
13881: PPUSH
13882: LD_INT 31
13884: PPUSH
13885: LD_INT 102
13887: PPUSH
13888: LD_INT 69
13890: PPUSH
13891: LD_INT 2
13893: PPUSH
13894: CALL_OW 205
// wait ( 0 0$3 ) ;
13898: LD_INT 105
13900: PPUSH
13901: CALL_OW 67
// end ; end ;
13905: PPOPN 2
13907: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13908: LD_EXP 11
13912: NOT
13913: PUSH
13914: LD_INT 5
13916: PPUSH
13917: CALL_OW 301
13921: AND
13922: IFFALSE 13954
13924: GO 13926
13926: DISABLE
// begin DialogueOn ;
13927: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13931: LD_EXP 36
13935: PPUSH
13936: LD_STRING DF-1-failure
13938: PPUSH
13939: CALL_OW 94
// DialogueOff ;
13943: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13947: LD_STRING FarmerDepot
13949: PPUSH
13950: CALL_OW 104
// end ;
13954: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13955: LD_EXP 11
13959: PUSH
13960: LD_EXP 28
13964: PPUSH
13965: LD_EXP 36
13969: PPUSH
13970: CALL_OW 296
13974: PUSH
13975: LD_INT 12
13977: LESS
13978: AND
13979: PUSH
13980: LD_INT 81
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PPUSH
14004: CALL_OW 69
14008: NOT
14009: AND
14010: IFFALSE 14662
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
14019: PPUSH
// begin allowConvoys := false ;
14020: LD_ADDR_EXP 12
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// InGameOn ;
14028: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14032: LD_EXP 28
14036: PPUSH
14037: LD_EXP 36
14041: PPUSH
14042: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14046: LD_EXP 36
14050: PPUSH
14051: LD_EXP 28
14055: PPUSH
14056: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14060: LD_EXP 36
14064: PPUSH
14065: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14069: LD_EXP 28
14073: PPUSH
14074: LD_STRING DH-1-end
14076: PPUSH
14077: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14081: LD_EXP 36
14085: PPUSH
14086: LD_STRING DF-1-end
14088: PPUSH
14089: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14093: LD_EXP 36
14097: PPUSH
14098: LD_STRING DF-2-end
14100: PPUSH
14101: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14105: LD_EXP 28
14109: PPUSH
14110: LD_STRING DH-2-end
14112: PPUSH
14113: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14117: LD_EXP 36
14121: PPUSH
14122: LD_STRING DF-3-end
14124: PPUSH
14125: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14129: LD_EXP 28
14133: PPUSH
14134: LD_STRING DH-3-end
14136: PPUSH
14137: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14141: LD_EXP 29
14145: PPUSH
14146: LD_STRING DG-1-end
14148: PPUSH
14149: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14153: LD_EXP 28
14157: PPUSH
14158: LD_STRING DH-4-end
14160: PPUSH
14161: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14165: LD_EXP 36
14169: PPUSH
14170: LD_STRING DF-4-end
14172: PPUSH
14173: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14177: LD_EXP 28
14181: PPUSH
14182: LD_STRING DH-5-end
14184: PPUSH
14185: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14189: LD_EXP 36
14193: PPUSH
14194: LD_STRING DF-5-end
14196: PPUSH
14197: CALL_OW 88
// InGameOff ;
14201: CALL_OW 9
// allowCargoEvacuation := true ;
14205: LD_ADDR_EXP 7
14209: PUSH
14210: LD_INT 1
14212: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_INT 4
14220: PUSH
14221: LD_INT 3
14223: PUSH
14224: LD_INT 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: PUSH
14232: LD_OWVAR 67
14236: ARRAY
14237: ST_TO_ADDR
// if farmerSquad < max then
14238: LD_EXP 39
14242: PUSH
14243: LD_VAR 0 2
14247: LESS
14248: IFFALSE 14260
// max := farmerSquad ;
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: LD_EXP 39
14259: ST_TO_ADDR
// for i := 1 to max do
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_VAR 0 2
14274: PUSH
14275: FOR_TO
14276: IFFALSE 14314
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14278: LD_EXP 39
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: LD_INT 2
14289: PPUSH
14290: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14294: LD_ADDR_EXP 39
14298: PUSH
14299: LD_EXP 39
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 3
14311: ST_TO_ADDR
// end ;
14312: GO 14275
14314: POP
14315: POP
// for i in Farmer ^ farmerSquad do
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: LD_EXP 36
14325: PUSH
14326: LD_EXP 39
14330: ADD
14331: PUSH
14332: FOR_IN
14333: IFFALSE 14372
// begin if IsInUnit ( i ) then
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 310
14344: IFFALSE 14355
// ComExitBuilding ( i ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 102
14362: PPUSH
14363: LD_INT 7
14365: PPUSH
14366: CALL_OW 171
// end ;
14370: GO 14332
14372: POP
14373: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14374: LD_ADDR_VAR 0 1
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PPUSH
14403: CALL_OW 69
14407: PUSH
14408: LD_INT 5
14410: DIFF
14411: PUSH
14412: FOR_IN
14413: IFFALSE 14429
// SetSide ( i , 2 ) ;
14415: LD_VAR 0 1
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 235
14427: GO 14412
14429: POP
14430: POP
// wait ( 0 0$2 ) ;
14431: LD_INT 70
14433: PPUSH
14434: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14438: LD_EXP 28
14442: PPUSH
14443: LD_STRING DH-6-end
14445: PPUSH
14446: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14450: LD_INT 35
14452: PPUSH
14453: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_EXP 36
14466: PUSH
14467: LD_EXP 39
14471: ADD
14472: PPUSH
14473: LD_INT 95
14475: PUSH
14476: LD_INT 3
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PPUSH
14483: CALL_OW 72
14487: ST_TO_ADDR
// if tmp then
14488: LD_VAR 0 3
14492: IFFALSE 14536
// for i in tmp do
14494: LD_ADDR_VAR 0 1
14498: PUSH
14499: LD_VAR 0 3
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14534
// begin farmerSquad := farmerSquad diff i ;
14507: LD_ADDR_EXP 39
14511: PUSH
14512: LD_EXP 39
14516: PUSH
14517: LD_VAR 0 1
14521: DIFF
14522: ST_TO_ADDR
// RemoveUnit ( i ) ;
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 64
// end ;
14532: GO 14504
14534: POP
14535: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14536: LD_EXP 39
14540: PUSH
14541: EMPTY
14542: EQUAL
14543: PUSH
14544: LD_EXP 36
14548: PPUSH
14549: CALL_OW 305
14553: NOT
14554: AND
14555: IFFALSE 14450
// if farmerHumanLoseCounter = 0 then
14557: LD_EXP 20
14561: PUSH
14562: LD_INT 0
14564: EQUAL
14565: IFFALSE 14574
// SetAchievement ( ACH_BABY ) ;
14567: LD_STRING ACH_BABY
14569: PPUSH
14570: CALL_OW 543
// wait ( 1 1$00 ) ;
14574: LD_INT 2100
14576: PPUSH
14577: CALL_OW 67
// SendAttack ;
14581: CALL 6123 0 0
// Say ( Heike , DH-7-end ) ;
14585: LD_EXP 28
14589: PPUSH
14590: LD_STRING DH-7-end
14592: PPUSH
14593: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14597: LD_ADDR_VAR 0 1
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_INT 2
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 4
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: PUSH
14621: LD_OWVAR 67
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14660
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14630: LD_INT 4200
14632: PUSH
14633: LD_INT 3500
14635: PUSH
14636: LD_INT 3150
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: PUSH
14644: LD_OWVAR 67
14648: ARRAY
14649: PPUSH
14650: CALL_OW 67
// SendAttack ;
14654: CALL 6123 0 0
// end ;
14658: GO 14627
14660: POP
14661: POP
// end ;
14662: PPOPN 3
14664: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14665: LD_EXP 7
14669: PUSH
14670: LD_EXP 21
14674: PUSH
14675: LD_INT 0
14677: GREATER
14678: AND
14679: IFFALSE 14689
14681: GO 14683
14683: DISABLE
// begin enable ;
14684: ENABLE
// CargoEvacuation ;
14685: CALL 3644 0 0
// end ;
14689: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14690: LD_EXP 17
14694: PUSH
14695: LD_INT 18900
14697: LESSEQUAL
14698: IFFALSE 14747
14700: GO 14702
14702: DISABLE
// begin DialogueOn ;
14703: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14707: LD_EXP 36
14711: PPUSH
14712: LD_STRING DF-1-distribution-a
14714: PPUSH
14715: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14719: LD_EXP 28
14723: PPUSH
14724: LD_STRING DH-1-distribution-a
14726: PPUSH
14727: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14731: LD_EXP 36
14735: PPUSH
14736: LD_STRING DF-2-distribution-a
14738: PPUSH
14739: CALL_OW 94
// DialogueOff ;
14743: CALL_OW 7
// end ;
14747: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14748: LD_EXP 17
14752: PUSH
14753: LD_INT 0
14755: LESSEQUAL
14756: IFFALSE 14788
14758: GO 14760
14760: DISABLE
// begin DialogueOn ;
14761: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14765: LD_EXP 36
14769: PPUSH
14770: LD_STRING DF-3-distribution-a
14772: PPUSH
14773: CALL_OW 94
// YouLost ( Distribution ) ;
14777: LD_STRING Distribution
14779: PPUSH
14780: CALL_OW 104
// DialogueOff ;
14784: CALL_OW 7
// end ;
14788: END
// every 0 0$1 trigger vehCounter >= 2 do
14789: LD_EXP 22
14793: PUSH
14794: LD_INT 2
14796: GREATEREQUAL
14797: IFFALSE 14809
14799: GO 14801
14801: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14802: LD_STRING VehConstructed
14804: PPUSH
14805: CALL_OW 337
14809: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14810: LD_INT 22
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 34
14822: PUSH
14823: LD_INT 12
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 69
14838: IFFALSE 14898
14840: GO 14842
14842: DISABLE
// begin DialogueOn ;
14843: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14847: LD_EXP 28
14851: PPUSH
14852: LD_STRING DH-1-truck
14854: PPUSH
14855: CALL_OW 88
// if IsOk ( Markov ) then
14859: LD_EXP 35
14863: PPUSH
14864: CALL_OW 302
14868: IFFALSE 14894
// begin Say ( Markov , DMar-1-truck ) ;
14870: LD_EXP 35
14874: PPUSH
14875: LD_STRING DMar-1-truck
14877: PPUSH
14878: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14882: LD_EXP 28
14886: PPUSH
14887: LD_STRING DH-2-truck
14889: PPUSH
14890: CALL_OW 88
// end ; DialogueOff ;
14894: CALL_OW 7
// end ;
14898: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
14903: PPUSH
// if IsOk ( Givi ) then
14904: LD_EXP 29
14908: PPUSH
14909: CALL_OW 302
14913: IFFALSE 14929
// begin Say ( Givi , DG-1-nocargo ) ;
14915: LD_EXP 29
14919: PPUSH
14920: LD_STRING DG-1-nocargo
14922: PPUSH
14923: CALL_OW 88
// exit ;
14927: GO 15025
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_EXP 42
14938: PPUSH
14939: LD_INT 26
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 72
14953: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: LD_EXP 42
14963: PPUSH
14964: LD_INT 26
14966: PUSH
14967: LD_INT 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 72
14978: ST_TO_ADDR
// if randomMen then
14979: LD_VAR 0 2
14983: IFFALSE 15003
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14985: LD_VAR 0 2
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: PPUSH
14994: LD_STRING DArm-1-nocargo
14996: PPUSH
14997: CALL_OW 88
15001: GO 15025
// if randomWomen then
15003: LD_VAR 0 3
15007: IFFALSE 15025
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: LD_STRING DArf-1-nocargo
15020: PPUSH
15021: CALL_OW 88
// end ;
15025: LD_VAR 0 1
15029: RET
// export function IncomingAttack ; begin
15030: LD_INT 0
15032: PPUSH
// if attackWave = 1 then
15033: LD_EXP 19
15037: PUSH
15038: LD_INT 1
15040: EQUAL
15041: IFFALSE 15112
// begin DialogueOn ;
15043: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15047: LD_EXP 37
15051: PPUSH
15052: LD_STRING DO-1-radio-1
15054: PPUSH
15055: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15059: LD_EXP 28
15063: PPUSH
15064: LD_STRING DH-1-radio-1-
15066: PPUSH
15067: CALL_OW 88
// if IsOk ( Markov ) then
15071: LD_EXP 35
15075: PPUSH
15076: CALL_OW 302
15080: IFFALSE 15106
// begin Say ( Markov , DMar-1-radio-1 ) ;
15082: LD_EXP 35
15086: PPUSH
15087: LD_STRING DMar-1-radio-1
15089: PPUSH
15090: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15094: LD_EXP 28
15098: PPUSH
15099: LD_STRING DH-2-radio-1
15101: PPUSH
15102: CALL_OW 88
// end ; DialogueOff ;
15106: CALL_OW 7
// end else
15110: GO 15136
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15112: LD_EXP 37
15116: PPUSH
15117: LD_STRING DO-1-radio-u
15119: PPUSH
15120: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15124: LD_EXP 28
15128: PPUSH
15129: LD_STRING DH-1-radio-u
15131: PPUSH
15132: CALL_OW 88
// end ; end ;
15136: LD_VAR 0 1
15140: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15141: LD_EXP 44
15145: PPUSH
15146: LD_INT 95
15148: PUSH
15149: LD_INT 8
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PPUSH
15156: CALL_OW 72
15160: IFFALSE 15263
15162: GO 15164
15164: DISABLE
15165: LD_INT 0
15167: PPUSH
// begin enable ;
15168: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15169: LD_ADDR_VAR 0 1
15173: PUSH
15174: LD_EXP 44
15178: PPUSH
15179: LD_INT 95
15181: PUSH
15182: LD_INT 8
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 72
15193: PUSH
15194: FOR_IN
15195: IFFALSE 15224
// begin usForces := usForces diff i ;
15197: LD_ADDR_EXP 44
15201: PUSH
15202: LD_EXP 44
15206: PUSH
15207: LD_VAR 0 1
15211: DIFF
15212: ST_TO_ADDR
// RemoveUnit ( i ) ;
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 64
// end ;
15222: GO 15194
15224: POP
15225: POP
// if not americanHasEscaped and attackWave = 1 then
15226: LD_EXP 8
15230: NOT
15231: PUSH
15232: LD_EXP 19
15236: PUSH
15237: LD_INT 1
15239: EQUAL
15240: AND
15241: IFFALSE 15263
// begin americanHasEscaped := true ;
15243: LD_ADDR_EXP 8
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15251: LD_EXP 28
15255: PPUSH
15256: LD_STRING DH-2-assault-a
15258: PPUSH
15259: CALL_OW 88
// end ; end ;
15263: PPOPN 1
15265: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15266: LD_INT 4
15268: PPUSH
15269: LD_INT 22
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 70
15283: PUSH
15284: LD_EXP 11
15288: NOT
15289: AND
15290: IFFALSE 15307
15292: GO 15294
15294: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15295: LD_EXP 36
15299: PPUSH
15300: LD_STRING DF-1-attack
15302: PPUSH
15303: CALL_OW 94
15307: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15308: LD_INT 5
15310: PPUSH
15311: CALL_OW 255
15315: PUSH
15316: LD_INT 2
15318: EQUAL
15319: IFFALSE 15331
15321: GO 15323
15323: DISABLE
// YouLost ( Attack ) ;
15324: LD_STRING Attack
15326: PPUSH
15327: CALL_OW 104
15331: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15332: LD_INT 22
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 21
15344: PUSH
15345: LD_INT 1
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PPUSH
15356: CALL_OW 69
15360: NOT
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_INT 4
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: NOT
15377: AND
15378: PUSH
15379: LD_EXP 11
15383: NOT
15384: AND
15385: PUSH
15386: LD_EXP 15
15390: PUSH
15391: LD_INT 90
15393: GREATER
15394: AND
15395: PUSH
15396: LD_INT 7
15398: PPUSH
15399: LD_INT 22
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 21
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 70
15427: AND
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_INT 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 50
15441: PUSH
15442: EMPTY
15443: LIST
15444: PUSH
15445: LD_INT 30
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: AND
15465: IFFALSE 16258
15467: GO 15469
15469: DISABLE
15470: LD_INT 0
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
15476: PPUSH
// begin depot := usDepot ;
15477: LD_ADDR_VAR 0 5
15481: PUSH
15482: LD_INT 11
15484: ST_TO_ADDR
// if not depot then
15485: LD_VAR 0 5
15489: NOT
15490: IFFALSE 15530
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15492: LD_ADDR_VAR 0 5
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 0
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_EXP 42
15539: PPUSH
15540: LD_INT 26
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 72
15554: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15555: LD_ADDR_VAR 0 2
15559: PUSH
15560: LD_EXP 42
15564: PPUSH
15565: LD_INT 26
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 72
15579: ST_TO_ADDR
// if IsOk ( Kaia ) then
15580: LD_EXP 33
15584: PPUSH
15585: CALL_OW 302
15589: IFFALSE 15610
// speaker := [ Kaia , DK ] else
15591: LD_ADDR_VAR 0 3
15595: PUSH
15596: LD_EXP 33
15600: PUSH
15601: LD_STRING DK
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: ST_TO_ADDR
15608: GO 15690
// if randomMen then
15610: LD_VAR 0 1
15614: IFFALSE 15649
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 1
15628: PPUSH
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 12
15638: ARRAY
15639: PUSH
15640: LD_STRING DArm
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: ST_TO_ADDR
15647: GO 15690
// if randomWomen then
15649: LD_VAR 0 2
15653: IFFALSE 15688
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_VAR 0 2
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PUSH
15679: LD_STRING DArf
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 15690
// exit ;
15688: GO 16258
// if IsInUnit ( speaker [ 1 ] ) then
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 310
15703: IFFALSE 15726
// place := IsInUnit ( speaker [ 1 ] ) else
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 1
15717: ARRAY
15718: PPUSH
15719: CALL_OW 310
15723: ST_TO_ADDR
15724: GO 15740
// place := speaker [ 1 ] ;
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 1
15738: ARRAY
15739: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15740: LD_VAR 0 4
15744: PPUSH
15745: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15749: LD_VAR 0 4
15753: PPUSH
15754: CALL_OW 250
15758: PPUSH
15759: LD_VAR 0 4
15763: PPUSH
15764: CALL_OW 251
15768: PPUSH
15769: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15773: LD_INT 70
15775: PPUSH
15776: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15780: LD_EXP 38
15784: PPUSH
15785: CALL_OW 305
15789: NOT
15790: IFFALSE 15794
// exit ;
15792: GO 16258
// allowConvoys := false ;
15794: LD_ADDR_EXP 12
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// InGameOn ;
15802: CALL_OW 8
// wait ( 0 0$1 ) ;
15806: LD_INT 35
15808: PPUSH
15809: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15813: LD_EXP 38
15817: PPUSH
15818: LD_STRING DI-1-land
15820: PPUSH
15821: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15825: LD_VAR 0 3
15829: PUSH
15830: LD_INT 1
15832: ARRAY
15833: PPUSH
15834: CALL_OW 310
15838: IFFALSE 15853
// ComExit ( speaker [ 1 ] ) ;
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 1
15847: ARRAY
15848: PPUSH
15849: CALL 73206 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: LD_EXP 38
15866: PPUSH
15867: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_EXP 38
15884: PPUSH
15885: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15889: LD_EXP 38
15893: PPUSH
15894: LD_VAR 0 3
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: PPUSH
15903: CALL_OW 119
// wait ( 0 0$1 ) ;
15907: LD_INT 35
15909: PPUSH
15910: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 1
15921: ARRAY
15922: PPUSH
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 2
15930: ARRAY
15931: PUSH
15932: LD_STRING -1-land
15934: STR
15935: PPUSH
15936: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15940: LD_EXP 38
15944: PPUSH
15945: LD_STRING DI-2-land
15947: PPUSH
15948: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 1
15959: ARRAY
15960: PPUSH
15961: LD_VAR 0 3
15965: PUSH
15966: LD_INT 2
15968: ARRAY
15969: PUSH
15970: LD_STRING -2-land
15972: STR
15973: PPUSH
15974: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15978: LD_VAR 0 3
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PPUSH
15987: LD_VAR 0 3
15991: PUSH
15992: LD_INT 2
15994: ARRAY
15995: PUSH
15996: LD_STRING -3-land
15998: STR
15999: PPUSH
16000: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16004: LD_EXP 28
16008: PPUSH
16009: LD_STRING DH-1-land
16011: PPUSH
16012: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16016: LD_VAR 0 5
16020: PPUSH
16021: CALL_OW 313
16025: PUSH
16026: LD_INT 6
16028: EQUAL
16029: IFFALSE 16049
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16031: LD_VAR 0 5
16035: PPUSH
16036: CALL_OW 313
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PPUSH
16045: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16049: LD_EXP 38
16053: PPUSH
16054: LD_INT 2
16056: PPUSH
16057: CALL_OW 235
// CenterOnUnits ( depot ) ;
16061: LD_VAR 0 5
16065: PPUSH
16066: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16070: LD_EXP 38
16074: PPUSH
16075: LD_VAR 0 5
16079: PPUSH
16080: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: PPUSH
16093: LD_VAR 0 5
16097: PPUSH
16098: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16102: LD_INT 35
16104: PPUSH
16105: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16109: LD_EXP 38
16113: PPUSH
16114: CALL_OW 310
16118: PUSH
16119: LD_EXP 38
16123: PPUSH
16124: CALL_OW 302
16128: NOT
16129: OR
16130: PUSH
16131: LD_VAR 0 5
16135: PPUSH
16136: CALL_OW 302
16140: NOT
16141: OR
16142: IFFALSE 16102
// InGameOff ;
16144: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16148: LD_EXP 38
16152: PPUSH
16153: CALL_OW 302
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16258
// if not IsOk ( depot ) then
16162: LD_VAR 0 5
16166: PPUSH
16167: CALL_OW 302
16171: NOT
16172: IFFALSE 16235
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16174: LD_EXP 38
16178: PPUSH
16179: LD_INT 30
16181: PPUSH
16182: LD_INT 1
16184: PPUSH
16185: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16189: LD_INT 35
16191: PPUSH
16192: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16196: LD_EXP 38
16200: PPUSH
16201: LD_INT 30
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 307
16211: PUSH
16212: LD_EXP 38
16216: PPUSH
16217: CALL_OW 301
16221: OR
16222: IFFALSE 16189
// RemoveUnit ( Ibrahim ) ;
16224: LD_EXP 38
16228: PPUSH
16229: CALL_OW 64
// exit ;
16233: GO 16258
// end ; ibrahimInDepot := true ;
16235: LD_ADDR_EXP 25
16239: PUSH
16240: LD_INT 1
16242: ST_TO_ADDR
// allowConvoys := true ;
16243: LD_ADDR_EXP 12
16247: PUSH
16248: LD_INT 1
16250: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16251: LD_STRING IbrahimInDepot
16253: PPUSH
16254: CALL_OW 97
// end ;
16258: PPOPN 5
16260: END
// export function IbrahimQuery ; begin
16261: LD_INT 0
16263: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16264: LD_STRING IbrahimQuery
16266: PPUSH
16267: CALL_OW 97
16271: PUSH
16272: LD_INT 1
16274: DOUBLE
16275: EQUAL
16276: IFTRUE 16280
16278: GO 16556
16280: POP
// begin allowConvoys := false ;
16281: LD_ADDR_EXP 12
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// ibrahimInDepot := false ;
16289: LD_ADDR_EXP 25
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// InGameOn ;
16297: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16301: LD_EXP 28
16305: PPUSH
16306: CALL_OW 87
// wait ( 0 0$1 ) ;
16310: LD_INT 35
16312: PPUSH
16313: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16317: LD_EXP 28
16321: PPUSH
16322: LD_STRING DH-1-interrogation
16324: PPUSH
16325: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16329: LD_EXP 38
16333: PPUSH
16334: LD_STRING DI-1-interrogation
16336: PPUSH
16337: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16341: LD_EXP 28
16345: PPUSH
16346: LD_STRING DH-2-interrogation
16348: PPUSH
16349: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16353: LD_EXP 38
16357: PPUSH
16358: LD_STRING DI-2-interrogation
16360: PPUSH
16361: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16365: LD_EXP 28
16369: PPUSH
16370: LD_STRING DH-3-interrogation
16372: PPUSH
16373: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16377: LD_EXP 38
16381: PPUSH
16382: LD_STRING DI-3-interrogation
16384: PPUSH
16385: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16389: LD_EXP 28
16393: PPUSH
16394: LD_STRING DH-4-interrogation
16396: PPUSH
16397: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16401: LD_EXP 38
16405: PPUSH
16406: LD_STRING DI-4-interrogation
16408: PPUSH
16409: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16413: LD_EXP 28
16417: PPUSH
16418: LD_STRING DH-5-interrogation
16420: PPUSH
16421: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16425: LD_EXP 38
16429: PPUSH
16430: LD_STRING DI-5-interrogation
16432: PPUSH
16433: CALL_OW 88
// wait ( 0 0$1 ) ;
16437: LD_INT 35
16439: PPUSH
16440: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16444: LD_STRING IbrahimDecisionQuery
16446: PPUSH
16447: CALL_OW 97
16451: PUSH
16452: LD_INT 1
16454: DOUBLE
16455: EQUAL
16456: IFTRUE 16460
16458: GO 16484
16460: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16461: LD_EXP 38
16465: PPUSH
16466: LD_STRING DI-1-kill
16468: PPUSH
16469: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16473: LD_EXP 38
16477: PPUSH
16478: CALL_OW 66
// end ; 2 :
16482: GO 16550
16484: LD_INT 2
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16549
16492: POP
// begin SetSide ( Ibrahim , 6 ) ;
16493: LD_EXP 38
16497: PPUSH
16498: LD_INT 6
16500: PPUSH
16501: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16505: LD_EXP 38
16509: PPUSH
16510: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16514: LD_EXP 38
16518: PPUSH
16519: LD_INT 66
16521: PPUSH
16522: LD_INT 2
16524: PPUSH
16525: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16529: LD_EXP 38
16533: PPUSH
16534: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16538: LD_EXP 28
16542: PPUSH
16543: CALL_OW 122
// end ; end ;
16547: GO 16550
16549: POP
// InGameOff ;
16550: CALL_OW 9
// end ; 2 :
16554: GO 16570
16556: LD_INT 2
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16564
16562: GO 16569
16564: POP
// exit ; end ;
16565: GO 16646
16567: GO 16570
16569: POP
// allowConvoys := true ;
16570: LD_ADDR_EXP 12
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16578: LD_INT 5250
16580: PPUSH
16581: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16585: LD_INT 35
16587: PPUSH
16588: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16592: LD_INT 81
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 21
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: NOT
16621: IFFALSE 16585
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16623: LD_EXP 38
16627: PPUSH
16628: LD_INT 38
16630: PPUSH
16631: LD_INT 28
16633: PPUSH
16634: CALL_OW 111
// ibrahimIsFree := true ;
16638: LD_ADDR_EXP 26
16642: PUSH
16643: LD_INT 1
16645: ST_TO_ADDR
// end ;
16646: LD_VAR 0 1
16650: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16651: LD_EXP 26
16655: PUSH
16656: LD_EXP 38
16660: PPUSH
16661: CALL_OW 302
16665: AND
16666: PUSH
16667: LD_INT 2
16669: PPUSH
16670: LD_EXP 38
16674: PPUSH
16675: CALL_OW 292
16679: AND
16680: IFFALSE 17440
16682: GO 16684
16684: DISABLE
16685: LD_INT 0
16687: PPUSH
16688: PPUSH
16689: PPUSH
16690: PPUSH
16691: PPUSH
16692: PPUSH
// begin allowConvoys := false ;
16693: LD_ADDR_EXP 12
16697: PUSH
16698: LD_INT 0
16700: ST_TO_ADDR
// depot := usDepot ;
16701: LD_ADDR_VAR 0 4
16705: PUSH
16706: LD_INT 11
16708: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16709: LD_INT 11
16711: NOT
16712: PUSH
16713: LD_INT 22
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 50
16725: PUSH
16726: EMPTY
16727: LIST
16728: PUSH
16729: LD_INT 30
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL_OW 69
16748: AND
16749: IFFALSE 16796
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16751: LD_ADDR_VAR 0 4
16755: PUSH
16756: LD_INT 22
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: EMPTY
16770: LIST
16771: PUSH
16772: LD_INT 30
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: PPUSH
16787: CALL_OW 69
16791: PUSH
16792: LD_INT 1
16794: ARRAY
16795: ST_TO_ADDR
// InGameOn ;
16796: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16800: LD_EXP 38
16804: PPUSH
16805: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16809: LD_EXP 28
16813: PPUSH
16814: LD_EXP 38
16818: PPUSH
16819: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16823: LD_EXP 38
16827: PPUSH
16828: LD_EXP 28
16832: PPUSH
16833: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16837: LD_EXP 38
16841: PPUSH
16842: LD_STRING DI-1-free
16844: PPUSH
16845: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16849: LD_EXP 28
16853: PPUSH
16854: LD_STRING DH-1-free
16856: PPUSH
16857: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16861: LD_EXP 38
16865: PPUSH
16866: LD_STRING DI-2-free
16868: PPUSH
16869: CALL_OW 88
// changeClass := 0 ;
16873: LD_ADDR_VAR 0 1
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16881: LD_STRING IbrahimJoinQuery
16883: PPUSH
16884: CALL_OW 97
16888: PUSH
16889: LD_INT 1
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16908
16897: POP
// begin changeClass := 1 ;
16898: LD_ADDR_VAR 0 1
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// end ; 2 :
16906: GO 17148
16908: LD_INT 2
16910: DOUBLE
16911: EQUAL
16912: IFTRUE 16916
16914: GO 17068
16916: POP
// begin Say ( Heike , DH-1-decline ) ;
16917: LD_EXP 28
16921: PPUSH
16922: LD_STRING DH-1-decline
16924: PPUSH
16925: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16929: LD_EXP 38
16933: PPUSH
16934: LD_STRING DI-1-decline
16936: PPUSH
16937: CALL_OW 88
// InGameOff ;
16941: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16945: LD_EXP 38
16949: PPUSH
16950: LD_INT 30
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 111
// p := 0 ;
16960: LD_ADDR_VAR 0 3
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// repeat p := p + 1 ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: LD_INT 1
16980: PLUS
16981: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16982: LD_INT 35
16984: PPUSH
16985: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16989: LD_EXP 38
16993: PPUSH
16994: LD_INT 30
16996: PPUSH
16997: LD_INT 1
16999: PPUSH
17000: CALL_OW 307
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 101
17017: PUSH
17018: LD_INT 6
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 69
17033: NOT
17034: OR
17035: PUSH
17036: LD_VAR 0 3
17040: PUSH
17041: LD_INT 10
17043: GREATER
17044: OR
17045: IFFALSE 16968
// RemoveUnit ( Ibrahim ) ;
17047: LD_EXP 38
17051: PPUSH
17052: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17056: LD_INT 1
17058: PPUSH
17059: LD_STRING 03_IbrahimHasEscaped
17061: PPUSH
17062: CALL_OW 39
// end ; 3 :
17066: GO 17148
17068: LD_INT 3
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17147
17076: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17077: LD_EXP 28
17081: PPUSH
17082: LD_STRING DH-1-radio-hq
17084: PPUSH
17085: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17089: LD_EXP 37
17093: PPUSH
17094: LD_STRING DO-1-radio-hq
17096: PPUSH
17097: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17101: LD_EXP 28
17105: PPUSH
17106: LD_STRING DH-2-radio-hq
17108: PPUSH
17109: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17113: LD_EXP 37
17117: PPUSH
17118: LD_STRING DO-2-radio-hq
17120: PPUSH
17121: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17125: LD_EXP 28
17129: PPUSH
17130: LD_STRING DH-3-radio-hq
17132: PPUSH
17133: CALL_OW 88
// changeClass := 1 ;
17137: LD_ADDR_VAR 0 1
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// end ; end ;
17145: GO 17148
17147: POP
// if changeClass then
17148: LD_VAR 0 1
17152: IFFALSE 17440
// begin Say ( Heike , DH-1-agree ) ;
17154: LD_EXP 28
17158: PPUSH
17159: LD_STRING DH-1-agree
17161: PPUSH
17162: CALL_OW 88
// if IsOk ( Givi ) then
17166: LD_EXP 29
17170: PPUSH
17171: CALL_OW 302
17175: IFFALSE 17213
// begin Say ( Givi , DG-1-agree ) ;
17177: LD_EXP 29
17181: PPUSH
17182: LD_STRING DG-1-agree
17184: PPUSH
17185: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17189: LD_EXP 28
17193: PPUSH
17194: LD_STRING DH-2-agree
17196: PPUSH
17197: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17201: LD_EXP 29
17205: PPUSH
17206: LD_STRING DG-2-agree
17208: PPUSH
17209: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17213: LD_VAR 0 4
17217: PPUSH
17218: CALL_OW 313
17222: PUSH
17223: LD_INT 6
17225: EQUAL
17226: IFFALSE 17246
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17228: LD_VAR 0 4
17232: PPUSH
17233: CALL_OW 313
17237: PUSH
17238: LD_INT 1
17240: ARRAY
17241: PPUSH
17242: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17246: LD_EXP 38
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17258: LD_ADDR_VAR 0 5
17262: PUSH
17263: LD_EXP 38
17267: PPUSH
17268: CALL_OW 250
17272: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17273: LD_ADDR_VAR 0 6
17277: PUSH
17278: LD_EXP 38
17282: PPUSH
17283: CALL_OW 251
17287: ST_TO_ADDR
// if depot then
17288: LD_VAR 0 4
17292: IFFALSE 17341
// begin ComEnterUnit ( Ibrahim , depot ) ;
17294: LD_EXP 38
17298: PPUSH
17299: LD_VAR 0 4
17303: PPUSH
17304: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17308: LD_INT 35
17310: PPUSH
17311: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17315: LD_EXP 38
17319: PPUSH
17320: CALL_OW 310
17324: IFFALSE 17308
// b := IsInUnit ( Ibrahim ) ;
17326: LD_ADDR_VAR 0 2
17330: PUSH
17331: LD_EXP 38
17335: PPUSH
17336: CALL_OW 310
17340: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17341: LD_EXP 38
17345: PPUSH
17346: CALL_OW 64
// uc_side := 2 ;
17350: LD_ADDR_OWVAR 20
17354: PUSH
17355: LD_INT 2
17357: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17358: LD_ADDR_EXP 38
17362: PUSH
17363: LD_STRING Ibrahim
17365: PPUSH
17366: LD_INT 0
17368: PPUSH
17369: LD_STRING 
17371: PPUSH
17372: CALL 36496 0 3
17376: ST_TO_ADDR
// if depot then
17377: LD_VAR 0 4
17381: IFFALSE 17399
// PlaceHumanInUnit ( Ibrahim , b ) else
17383: LD_EXP 38
17387: PPUSH
17388: LD_VAR 0 2
17392: PPUSH
17393: CALL_OW 52
17397: GO 17421
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17399: LD_EXP 38
17403: PPUSH
17404: LD_VAR 0 5
17408: PPUSH
17409: LD_VAR 0 6
17413: PPUSH
17414: LD_INT 0
17416: PPUSH
17417: CALL_OW 48
// InGameOff ;
17421: CALL_OW 9
// allowConvoys := true ;
17425: LD_ADDR_EXP 12
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17433: LD_STRING ACH_IBRAHIM
17435: PPUSH
17436: CALL_OW 543
// end ; end ;
17440: PPOPN 6
17442: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17443: LD_EXP 33
17447: PPUSH
17448: CALL_OW 256
17452: PUSH
17453: LD_INT 3
17455: LESS
17456: IFFALSE 17523
17458: GO 17460
17460: DISABLE
// begin DialogueOn ;
17461: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17465: LD_EXP 33
17469: PPUSH
17470: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17474: LD_EXP 33
17478: PPUSH
17479: LD_STRING DK-keydeath-1
17481: PPUSH
17482: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17486: LD_EXP 28
17490: PPUSH
17491: LD_STRING DH-keydeath-2
17493: PPUSH
17494: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17498: LD_EXP 28
17502: PPUSH
17503: LD_STRING DH-keydeath-3
17505: PPUSH
17506: CALL_OW 88
// DialogueOff ;
17510: CALL_OW 7
// KillUnit ( Kaia ) ;
17514: LD_EXP 33
17518: PPUSH
17519: CALL_OW 66
// end ;
17523: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17524: LD_EXP 11
17528: PUSH
17529: LD_EXP 21
17533: PUSH
17534: LD_INT 1
17536: LESS
17537: AND
17538: IFFALSE 17980
17540: GO 17542
17542: DISABLE
// begin ChangeSideFog ( 1 , 2 ) ;
17543: LD_INT 1
17545: PPUSH
17546: LD_INT 2
17548: PPUSH
17549: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
17553: LD_INT 35
17555: PPUSH
17556: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ;
17560: LD_INT 22
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 25
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PPUSH
17584: CALL_OW 69
17588: PUSH
17589: LD_INT 0
17591: EQUAL
17592: IFFALSE 17553
// DialogueOn ;
17594: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17598: LD_EXP 28
17602: PPUSH
17603: LD_STRING DH-1-final
17605: PPUSH
17606: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17610: LD_OWVAR 1
17614: PUSH
17615: LD_INT 126000
17617: PUSH
17618: LD_INT 115500
17620: PUSH
17621: LD_INT 105000
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: LESSEQUAL
17635: IFFALSE 17649
// AddMedal ( med1 , 1 ) else
17637: LD_STRING med1
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 101
17647: GO 17660
// AddMedal ( med1 , - 1 ) ;
17649: LD_STRING med1
17651: PPUSH
17652: LD_INT 1
17654: NEG
17655: PPUSH
17656: CALL_OW 101
// if vehCounter >= 2 then
17660: LD_EXP 22
17664: PUSH
17665: LD_INT 2
17667: GREATEREQUAL
17668: IFFALSE 17682
// AddMedal ( med2 , 1 ) else
17670: LD_STRING med2
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: CALL_OW 101
17680: GO 17693
// AddMedal ( med2 , - 1 ) ;
17682: LD_STRING med2
17684: PPUSH
17685: LD_INT 1
17687: NEG
17688: PPUSH
17689: CALL_OW 101
// if deadCounter = 0 then
17693: LD_EXP 9
17697: PUSH
17698: LD_INT 0
17700: EQUAL
17701: IFFALSE 17715
// AddMedal ( med3 , 1 ) else
17703: LD_STRING med3
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 101
17713: GO 17726
// AddMedal ( med3 , - 1 ) ;
17715: LD_STRING med3
17717: PPUSH
17718: LD_INT 1
17720: NEG
17721: PPUSH
17722: CALL_OW 101
// GiveMedals ( MAIN ) ;
17726: LD_STRING MAIN
17728: PPUSH
17729: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17733: LD_INT 22
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 23
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 21
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: CALL_OW 69
17772: PPUSH
17773: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17777: LD_EXP 28
17781: PPUSH
17782: LD_STRING 03_Heike
17784: PPUSH
17785: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17789: LD_EXP 32
17793: PPUSH
17794: LD_STRING 03_Aviradze
17796: PPUSH
17797: CALL_OW 38
// if Givi then
17801: LD_EXP 29
17805: IFFALSE 17819
// SaveCharacters ( Givi , 03_Givi ) ;
17807: LD_EXP 29
17811: PPUSH
17812: LD_STRING 03_Givi
17814: PPUSH
17815: CALL_OW 38
// if Mike then
17819: LD_EXP 30
17823: IFFALSE 17837
// SaveCharacters ( Mike , 03_Mike ) ;
17825: LD_EXP 30
17829: PPUSH
17830: LD_STRING 03_Mike
17832: PPUSH
17833: CALL_OW 38
// if Kamil then
17837: LD_EXP 31
17841: IFFALSE 17855
// SaveCharacters ( Kamil , 03_Kamil ) ;
17843: LD_EXP 31
17847: PPUSH
17848: LD_STRING 03_Kamil
17850: PPUSH
17851: CALL_OW 38
// if Kaia then
17855: LD_EXP 33
17859: IFFALSE 17873
// SaveCharacters ( Kaia , 03_Kaia ) ;
17861: LD_EXP 33
17865: PPUSH
17866: LD_STRING 03_Kaia
17868: PPUSH
17869: CALL_OW 38
// if Sophia then
17873: LD_EXP 34
17877: IFFALSE 17891
// SaveCharacters ( Sophia , 03_Sophia ) ;
17879: LD_EXP 34
17883: PPUSH
17884: LD_STRING 03_Sophia
17886: PPUSH
17887: CALL_OW 38
// if Markov then
17891: LD_EXP 35
17895: IFFALSE 17909
// SaveCharacters ( Markov , 03_Markov ) ;
17897: LD_EXP 35
17901: PPUSH
17902: LD_STRING 03_Markov
17904: PPUSH
17905: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17909: LD_EXP 38
17913: PUSH
17914: LD_EXP 38
17918: PPUSH
17919: CALL_OW 255
17923: PUSH
17924: LD_INT 2
17926: EQUAL
17927: AND
17928: IFFALSE 17942
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17930: LD_EXP 38
17934: PPUSH
17935: LD_STRING 03_Ibrahim
17937: PPUSH
17938: CALL_OW 38
// if heikeSecondSquad then
17942: LD_EXP 42
17946: IFFALSE 17960
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17948: LD_EXP 42
17952: PPUSH
17953: LD_STRING 03_others
17955: PPUSH
17956: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17960: LD_EXP 9
17964: PPUSH
17965: LD_STRING 03_DeadCounter
17967: PPUSH
17968: CALL_OW 39
// YouWin ;
17972: CALL_OW 103
// DialogueOff ;
17976: CALL_OW 7
// end ; end_of_file
17980: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17981: LD_VAR 0 1
17985: PUSH
17986: LD_EXP 28
17990: EQUAL
17991: IFFALSE 18000
// YouLost ( Heike ) ;
17993: LD_STRING Heike
17995: PPUSH
17996: CALL_OW 104
// if un = Aviradze then
18000: LD_VAR 0 1
18004: PUSH
18005: LD_EXP 32
18009: EQUAL
18010: IFFALSE 18019
// YouLost ( Aviradze ) ;
18012: LD_STRING Aviradze
18014: PPUSH
18015: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18019: LD_VAR 0 1
18023: PUSH
18024: LD_INT 11
18026: EQUAL
18027: PUSH
18028: LD_EXP 11
18032: NOT
18033: AND
18034: IFFALSE 18043
// YouLost ( Depot ) ;
18036: LD_STRING Depot
18038: PPUSH
18039: CALL_OW 104
// if un = arDepot then
18043: LD_VAR 0 1
18047: PUSH
18048: LD_INT 5
18050: EQUAL
18051: IFFALSE 18060
// YouLost ( FarmerDepot ) ;
18053: LD_STRING FarmerDepot
18055: PPUSH
18056: CALL_OW 104
// if un = Farmer then
18060: LD_VAR 0 1
18064: PUSH
18065: LD_EXP 36
18069: EQUAL
18070: IFFALSE 18079
// YouLost ( Farmer ) ;
18072: LD_STRING Farmer
18074: PPUSH
18075: CALL_OW 104
// if un in usForces then
18079: LD_VAR 0 1
18083: PUSH
18084: LD_EXP 44
18088: IN
18089: IFFALSE 18107
// usForces := usForces diff un ;
18091: LD_ADDR_EXP 44
18095: PUSH
18096: LD_EXP 44
18100: PUSH
18101: LD_VAR 0 1
18105: DIFF
18106: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 22
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 23
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 21
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 69
18151: IN
18152: IFFALSE 18168
// deadCounter := deadCounter + 1 ;
18154: LD_ADDR_EXP 9
18158: PUSH
18159: LD_EXP 9
18163: PUSH
18164: LD_INT 1
18166: PLUS
18167: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18168: LD_VAR 0 1
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 4
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 34
18185: PUSH
18186: LD_INT 12
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: IN
18202: PUSH
18203: LD_EXP 18
18207: NOT
18208: AND
18209: IFFALSE 18219
// firstConvoyDestroyed := true ;
18211: LD_ADDR_EXP 18
18215: PUSH
18216: LD_INT 1
18218: ST_TO_ADDR
// if un in usAttackers then
18219: LD_VAR 0 1
18223: PUSH
18224: LD_EXP 47
18228: IN
18229: IFFALSE 18247
// usAttackers := usAttackers diff un ;
18231: LD_ADDR_EXP 47
18235: PUSH
18236: LD_EXP 47
18240: PUSH
18241: LD_VAR 0 1
18245: DIFF
18246: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_INT 5
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 21
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 69
18280: IN
18281: IFFALSE 18297
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18283: LD_ADDR_EXP 20
18287: PUSH
18288: LD_EXP 20
18292: PUSH
18293: LD_INT 1
18295: PLUS
18296: ST_TO_ADDR
// end ;
18297: PPOPN 1
18299: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18300: LD_VAR 0 2
18304: PUSH
18305: LD_EXP 38
18309: EQUAL
18310: PUSH
18311: LD_EXP 25
18315: AND
18316: IFFALSE 18462
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18318: LD_INT 22
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 50
18340: PUSH
18341: EMPTY
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: IFFALSE 18395
// begin InGameOn ;
18355: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18359: LD_EXP 38
18363: PPUSH
18364: LD_INT 11
18366: PPUSH
18367: CALL_OW 120
// repeat wait ( 3 ) ;
18371: LD_INT 3
18373: PPUSH
18374: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18378: LD_EXP 38
18382: PPUSH
18383: CALL_OW 310
18387: IFFALSE 18371
// InGameOff ;
18389: CALL_OW 9
// end else
18393: GO 18462
// begin ibrahimInDepot := false ;
18395: LD_ADDR_EXP 25
18399: PUSH
18400: LD_INT 0
18402: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18403: LD_EXP 38
18407: PPUSH
18408: LD_INT 30
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18418: LD_INT 35
18420: PPUSH
18421: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18425: LD_EXP 38
18429: PPUSH
18430: LD_INT 30
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 307
18440: PUSH
18441: LD_EXP 38
18445: PPUSH
18446: CALL_OW 301
18450: OR
18451: IFFALSE 18418
// RemoveUnit ( Ibrahim ) ;
18453: LD_EXP 38
18457: PPUSH
18458: CALL_OW 64
// end ; end ; end ;
18462: PPOPN 2
18464: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18465: LD_VAR 0 2
18469: PUSH
18470: LD_EXP 28
18474: EQUAL
18475: PUSH
18476: LD_VAR 0 1
18480: PUSH
18481: LD_INT 11
18483: EQUAL
18484: AND
18485: PUSH
18486: LD_EXP 25
18490: AND
18491: IFFALSE 18497
// IbrahimQuery ;
18493: CALL 16261 0 0
// end ;
18497: PPOPN 2
18499: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 141
// if oldId in usAttackers then
18509: LD_VAR 0 2
18513: PUSH
18514: LD_EXP 47
18518: IN
18519: IFFALSE 18537
// usAttackers := usAttackers diff oldId ;
18521: LD_ADDR_EXP 47
18525: PUSH
18526: LD_EXP 47
18530: PUSH
18531: LD_VAR 0 2
18535: DIFF
18536: ST_TO_ADDR
// if newId in usAttackers then
18537: LD_VAR 0 1
18541: PUSH
18542: LD_EXP 47
18546: IN
18547: IFFALSE 18565
// usAttackers := usAttackers diff newId ;
18549: LD_ADDR_EXP 47
18553: PUSH
18554: LD_EXP 47
18558: PUSH
18559: LD_VAR 0 1
18563: DIFF
18564: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18565: LD_VAR 0 3
18569: PUSH
18570: LD_INT 4
18572: EQUAL
18573: PUSH
18574: LD_EXP 18
18578: NOT
18579: AND
18580: IFFALSE 18590
// firstConvoyDestroyed := true ;
18582: LD_ADDR_EXP 18
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 264
18599: PUSH
18600: LD_INT 12
18602: EQUAL
18603: IFFALSE 18641
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18605: LD_ADDR_EXP 13
18609: PUSH
18610: LD_EXP 13
18614: PUSH
18615: LD_INT 1
18617: PLUS
18618: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18619: LD_VAR 0 1
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 289
18631: PUSH
18632: LD_INT 0
18634: EQUAL
18635: IFFALSE 18641
// EmptyCargoDialog ;
18637: CALL 14899 0 0
// end ; end ;
18641: PPOPN 4
18643: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18644: LD_VAR 0 1
18648: PUSH
18649: LD_INT 2
18651: EQUAL
18652: PUSH
18653: LD_VAR 0 2
18657: PUSH
18658: LD_INT 5
18660: EQUAL
18661: AND
18662: IFFALSE 18671
// YouLost ( Attack ) ;
18664: LD_STRING Attack
18666: PPUSH
18667: CALL_OW 104
// end ;
18671: PPOPN 2
18673: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18674: LD_VAR 0 1
18678: PPUSH
18679: CALL_OW 255
18683: PUSH
18684: LD_INT 1
18686: EQUAL
18687: PUSH
18688: LD_EXP 6
18692: NOT
18693: AND
18694: IFFALSE 18828
// begin if GetBType ( b ) = b_lab then
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 266
18705: PUSH
18706: LD_INT 6
18708: EQUAL
18709: IFFALSE 18749
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18711: LD_EXP 44
18715: PPUSH
18716: LD_INT 25
18718: PUSH
18719: LD_INT 4
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PPUSH
18726: CALL_OW 72
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 120
// AmLabResearch ( b ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 266
18758: PUSH
18759: LD_INT 4
18761: EQUAL
18762: IFFALSE 18810
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18764: LD_EXP 44
18768: PPUSH
18769: LD_INT 25
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 3
18781: PUSH
18782: LD_INT 54
18784: PUSH
18785: EMPTY
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 72
18800: PPUSH
18801: LD_VAR 0 1
18805: PPUSH
18806: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18810: LD_ADDR_EXP 46
18814: PUSH
18815: LD_EXP 46
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 3
18827: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 255
18837: PUSH
18838: LD_INT 5
18840: EQUAL
18841: IFFALSE 18855
// SetBLevel ( b , 5 ) ;
18843: LD_VAR 0 1
18847: PPUSH
18848: LD_INT 5
18850: PPUSH
18851: CALL_OW 241
// end ;
18855: PPOPN 1
18857: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18858: LD_VAR 0 1
18862: PPUSH
18863: CALL_OW 255
18867: PUSH
18868: LD_INT 2
18870: EQUAL
18871: IFFALSE 18887
// vehCounter := vehCounter + 1 ;
18873: LD_ADDR_EXP 22
18877: PUSH
18878: LD_EXP 22
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: ST_TO_ADDR
// end ;
18887: PPOPN 2
18889: END
// on SailEvent ( event ) do begin if event = eventAttack then
18890: LD_VAR 0 1
18894: PUSH
18895: LD_EXP 24
18899: EQUAL
18900: IFFALSE 18906
// AmericanAttack ;
18902: CALL 6623 0 0
// end ; end_of_file
18906: PPOPN 1
18908: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18909: LD_OWVAR 1
18913: PUSH
18914: LD_INT 10500
18916: PUSH
18917: LD_INT 9800
18919: PUSH
18920: LD_INT 9450
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_OWVAR 67
18932: ARRAY
18933: LESSEQUAL
18934: IFFALSE 18961
18936: GO 18938
18938: DISABLE
// begin enable ;
18939: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18940: LD_INT 1
18942: PPUSH
18943: LD_INT 5
18945: PPUSH
18946: CALL_OW 12
18950: PPUSH
18951: LD_INT 9
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 55
// end ;
18961: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18962: LD_EXP 6
18966: PUSH
18967: LD_OWVAR 1
18971: PUSH
18972: LD_INT 56700
18974: PUSH
18975: LD_INT 55650
18977: PUSH
18978: LD_INT 54600
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: LD_OWVAR 67
18990: ARRAY
18991: LESSEQUAL
18992: AND
18993: IFFALSE 19020
18995: GO 18997
18997: DISABLE
// begin enable ;
18998: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18999: LD_INT 3
19001: PPUSH
19002: LD_INT 5
19004: PPUSH
19005: CALL_OW 12
19009: PPUSH
19010: LD_INT 9
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 55
// end ; end_of_file
19020: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19021: LD_EXP 11
19025: NOT
19026: PUSH
19027: LD_EXP 16
19031: AND
19032: PUSH
19033: LD_EXP 4
19037: AND
19038: PUSH
19039: LD_EXP 15
19043: PUSH
19044: LD_EXP 16
19048: LESSEQUAL
19049: AND
19050: IFFALSE 19140
19052: GO 19054
19054: DISABLE
// begin enable ;
19055: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19056: LD_ADDR_OWVAR 47
19060: PUSH
19061: LD_STRING #X103-1
19063: PUSH
19064: LD_EXP 16
19068: PUSH
19069: LD_EXP 15
19073: MINUS
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19079: LD_ADDR_EXP 15
19083: PUSH
19084: LD_INT 5
19086: PPUSH
19087: CALL_OW 274
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 275
19099: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19100: LD_INT 10
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 287
19110: PUSH
19111: LD_INT 0
19113: EQUAL
19114: IFFALSE 19132
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19116: LD_ADDR_EXP 17
19120: PUSH
19121: LD_EXP 17
19125: PUSH
19126: LD_INT 35
19128: MINUS
19129: ST_TO_ADDR
19130: GO 19140
// farmerCratesCounter := 30 30$00 ;
19132: LD_ADDR_EXP 17
19136: PUSH
19137: LD_INT 63000
19139: ST_TO_ADDR
// end ; end_of_file
19140: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19141: LD_INT 0
19143: PPUSH
// ar_miner := 81 ;
19144: LD_ADDR_EXP 55
19148: PUSH
19149: LD_INT 81
19151: ST_TO_ADDR
// ar_crane := 88 ;
19152: LD_ADDR_EXP 54
19156: PUSH
19157: LD_INT 88
19159: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19160: LD_ADDR_EXP 49
19164: PUSH
19165: LD_INT 89
19167: ST_TO_ADDR
// us_hack := 99 ;
19168: LD_ADDR_EXP 50
19172: PUSH
19173: LD_INT 99
19175: ST_TO_ADDR
// us_artillery := 97 ;
19176: LD_ADDR_EXP 51
19180: PUSH
19181: LD_INT 97
19183: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19184: LD_ADDR_EXP 52
19188: PUSH
19189: LD_INT 91
19191: ST_TO_ADDR
// ar_mortar := 92 ;
19192: LD_ADDR_EXP 53
19196: PUSH
19197: LD_INT 92
19199: ST_TO_ADDR
// ru_radar := 98 ;
19200: LD_ADDR_EXP 48
19204: PUSH
19205: LD_INT 98
19207: ST_TO_ADDR
// tech_Artillery := 80 ;
19208: LD_ADDR_EXP 56
19212: PUSH
19213: LD_INT 80
19215: ST_TO_ADDR
// tech_RadMat := 81 ;
19216: LD_ADDR_EXP 57
19220: PUSH
19221: LD_INT 81
19223: ST_TO_ADDR
// tech_BasicTools := 82 ;
19224: LD_ADDR_EXP 58
19228: PUSH
19229: LD_INT 82
19231: ST_TO_ADDR
// tech_Cargo := 83 ;
19232: LD_ADDR_EXP 59
19236: PUSH
19237: LD_INT 83
19239: ST_TO_ADDR
// tech_Track := 84 ;
19240: LD_ADDR_EXP 60
19244: PUSH
19245: LD_INT 84
19247: ST_TO_ADDR
// tech_Crane := 85 ;
19248: LD_ADDR_EXP 61
19252: PUSH
19253: LD_INT 85
19255: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19256: LD_ADDR_EXP 62
19260: PUSH
19261: LD_INT 86
19263: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19264: LD_ADDR_EXP 63
19268: PUSH
19269: LD_INT 87
19271: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19272: LD_ADDR_EXP 64
19276: PUSH
19277: LD_INT 88
19279: ST_TO_ADDR
// class_mastodont := 31 ;
19280: LD_ADDR_EXP 65
19284: PUSH
19285: LD_INT 31
19287: ST_TO_ADDR
// class_horse := 21 ;
19288: LD_ADDR_EXP 66
19292: PUSH
19293: LD_INT 21
19295: ST_TO_ADDR
// end ;
19296: LD_VAR 0 1
19300: RET
// every 1 do
19301: GO 19303
19303: DISABLE
// InitGlobalVariables ; end_of_file
19304: CALL 19141 0 0
19308: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19309: LD_INT 0
19311: PPUSH
// if p2 = 100 then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_INT 100
19319: EQUAL
19320: IFFALSE 20269
// begin if not StreamModeActive then
19322: LD_EXP 67
19326: NOT
19327: IFFALSE 19337
// StreamModeActive := true ;
19329: LD_ADDR_EXP 67
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 0 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 0
19344: EQUAL
19345: IFFALSE 19351
// InitStreamMode ;
19347: CALL 20429 0 0
// if p3 = 1 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 1
19358: EQUAL
19359: IFFALSE 19369
// sRocket := true ;
19361: LD_ADDR_EXP 72
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 2 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: IFFALSE 19387
// sSpeed := true ;
19379: LD_ADDR_EXP 71
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 3 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 3
19394: EQUAL
19395: IFFALSE 19405
// sEngine := true ;
19397: LD_ADDR_EXP 73
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 4 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 4
19412: EQUAL
19413: IFFALSE 19423
// sSpec := true ;
19415: LD_ADDR_EXP 70
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 5 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 5
19430: EQUAL
19431: IFFALSE 19441
// sLevel := true ;
19433: LD_ADDR_EXP 74
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 6 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 6
19448: EQUAL
19449: IFFALSE 19459
// sArmoury := true ;
19451: LD_ADDR_EXP 75
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 7 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 7
19466: EQUAL
19467: IFFALSE 19477
// sRadar := true ;
19469: LD_ADDR_EXP 76
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 8 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 8
19484: EQUAL
19485: IFFALSE 19495
// sBunker := true ;
19487: LD_ADDR_EXP 77
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 9 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 9
19502: EQUAL
19503: IFFALSE 19513
// sHack := true ;
19505: LD_ADDR_EXP 78
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 10 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 10
19520: EQUAL
19521: IFFALSE 19531
// sFire := true ;
19523: LD_ADDR_EXP 79
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 11 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 11
19538: EQUAL
19539: IFFALSE 19549
// sRefresh := true ;
19541: LD_ADDR_EXP 80
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 12 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 12
19556: EQUAL
19557: IFFALSE 19567
// sExp := true ;
19559: LD_ADDR_EXP 81
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// if p3 = 13 then
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 13
19574: EQUAL
19575: IFFALSE 19585
// sDepot := true ;
19577: LD_ADDR_EXP 82
19581: PUSH
19582: LD_INT 1
19584: ST_TO_ADDR
// if p3 = 14 then
19585: LD_VAR 0 3
19589: PUSH
19590: LD_INT 14
19592: EQUAL
19593: IFFALSE 19603
// sFlag := true ;
19595: LD_ADDR_EXP 83
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if p3 = 15 then
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 15
19610: EQUAL
19611: IFFALSE 19621
// sKamikadze := true ;
19613: LD_ADDR_EXP 91
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// if p3 = 16 then
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 16
19628: EQUAL
19629: IFFALSE 19639
// sTroll := true ;
19631: LD_ADDR_EXP 92
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// if p3 = 17 then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 17
19646: EQUAL
19647: IFFALSE 19657
// sSlow := true ;
19649: LD_ADDR_EXP 93
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// if p3 = 18 then
19657: LD_VAR 0 3
19661: PUSH
19662: LD_INT 18
19664: EQUAL
19665: IFFALSE 19675
// sLack := true ;
19667: LD_ADDR_EXP 94
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// if p3 = 19 then
19675: LD_VAR 0 3
19679: PUSH
19680: LD_INT 19
19682: EQUAL
19683: IFFALSE 19693
// sTank := true ;
19685: LD_ADDR_EXP 96
19689: PUSH
19690: LD_INT 1
19692: ST_TO_ADDR
// if p3 = 20 then
19693: LD_VAR 0 3
19697: PUSH
19698: LD_INT 20
19700: EQUAL
19701: IFFALSE 19711
// sRemote := true ;
19703: LD_ADDR_EXP 97
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// if p3 = 21 then
19711: LD_VAR 0 3
19715: PUSH
19716: LD_INT 21
19718: EQUAL
19719: IFFALSE 19729
// sPowell := true ;
19721: LD_ADDR_EXP 98
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// if p3 = 22 then
19729: LD_VAR 0 3
19733: PUSH
19734: LD_INT 22
19736: EQUAL
19737: IFFALSE 19747
// sTeleport := true ;
19739: LD_ADDR_EXP 101
19743: PUSH
19744: LD_INT 1
19746: ST_TO_ADDR
// if p3 = 23 then
19747: LD_VAR 0 3
19751: PUSH
19752: LD_INT 23
19754: EQUAL
19755: IFFALSE 19765
// sOilTower := true ;
19757: LD_ADDR_EXP 103
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// if p3 = 24 then
19765: LD_VAR 0 3
19769: PUSH
19770: LD_INT 24
19772: EQUAL
19773: IFFALSE 19783
// sShovel := true ;
19775: LD_ADDR_EXP 104
19779: PUSH
19780: LD_INT 1
19782: ST_TO_ADDR
// if p3 = 25 then
19783: LD_VAR 0 3
19787: PUSH
19788: LD_INT 25
19790: EQUAL
19791: IFFALSE 19801
// sSheik := true ;
19793: LD_ADDR_EXP 105
19797: PUSH
19798: LD_INT 1
19800: ST_TO_ADDR
// if p3 = 26 then
19801: LD_VAR 0 3
19805: PUSH
19806: LD_INT 26
19808: EQUAL
19809: IFFALSE 19819
// sEarthquake := true ;
19811: LD_ADDR_EXP 107
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// if p3 = 27 then
19819: LD_VAR 0 3
19823: PUSH
19824: LD_INT 27
19826: EQUAL
19827: IFFALSE 19837
// sAI := true ;
19829: LD_ADDR_EXP 108
19833: PUSH
19834: LD_INT 1
19836: ST_TO_ADDR
// if p3 = 28 then
19837: LD_VAR 0 3
19841: PUSH
19842: LD_INT 28
19844: EQUAL
19845: IFFALSE 19855
// sCargo := true ;
19847: LD_ADDR_EXP 111
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// if p3 = 29 then
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 29
19862: EQUAL
19863: IFFALSE 19873
// sDLaser := true ;
19865: LD_ADDR_EXP 112
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 30 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 30
19880: EQUAL
19881: IFFALSE 19891
// sExchange := true ;
19883: LD_ADDR_EXP 113
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// if p3 = 31 then
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 31
19898: EQUAL
19899: IFFALSE 19909
// sFac := true ;
19901: LD_ADDR_EXP 114
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// if p3 = 32 then
19909: LD_VAR 0 3
19913: PUSH
19914: LD_INT 32
19916: EQUAL
19917: IFFALSE 19927
// sPower := true ;
19919: LD_ADDR_EXP 115
19923: PUSH
19924: LD_INT 1
19926: ST_TO_ADDR
// if p3 = 33 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 33
19934: EQUAL
19935: IFFALSE 19945
// sRandom := true ;
19937: LD_ADDR_EXP 116
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 34 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 34
19952: EQUAL
19953: IFFALSE 19963
// sShield := true ;
19955: LD_ADDR_EXP 117
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 35 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 35
19970: EQUAL
19971: IFFALSE 19981
// sTime := true ;
19973: LD_ADDR_EXP 118
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 36 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 36
19988: EQUAL
19989: IFFALSE 19999
// sTools := true ;
19991: LD_ADDR_EXP 119
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 101 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 101
20006: EQUAL
20007: IFFALSE 20017
// sSold := true ;
20009: LD_ADDR_EXP 84
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 102 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 102
20024: EQUAL
20025: IFFALSE 20035
// sDiff := true ;
20027: LD_ADDR_EXP 85
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 103 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 103
20042: EQUAL
20043: IFFALSE 20053
// sFog := true ;
20045: LD_ADDR_EXP 88
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 104 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 104
20060: EQUAL
20061: IFFALSE 20071
// sReset := true ;
20063: LD_ADDR_EXP 89
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 105 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 105
20078: EQUAL
20079: IFFALSE 20089
// sSun := true ;
20081: LD_ADDR_EXP 90
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 106 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 106
20096: EQUAL
20097: IFFALSE 20107
// sTiger := true ;
20099: LD_ADDR_EXP 86
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 107 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 107
20114: EQUAL
20115: IFFALSE 20125
// sBomb := true ;
20117: LD_ADDR_EXP 87
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 108 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 108
20132: EQUAL
20133: IFFALSE 20143
// sWound := true ;
20135: LD_ADDR_EXP 95
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 109 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 109
20150: EQUAL
20151: IFFALSE 20161
// sBetray := true ;
20153: LD_ADDR_EXP 99
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 110 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 110
20168: EQUAL
20169: IFFALSE 20179
// sContamin := true ;
20171: LD_ADDR_EXP 100
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 111 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 111
20186: EQUAL
20187: IFFALSE 20197
// sOil := true ;
20189: LD_ADDR_EXP 102
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 112 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 112
20204: EQUAL
20205: IFFALSE 20215
// sStu := true ;
20207: LD_ADDR_EXP 106
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 113 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 113
20222: EQUAL
20223: IFFALSE 20233
// sBazooka := true ;
20225: LD_ADDR_EXP 109
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 114 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 114
20240: EQUAL
20241: IFFALSE 20251
// sMortar := true ;
20243: LD_ADDR_EXP 110
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 115 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 115
20258: EQUAL
20259: IFFALSE 20269
// sRanger := true ;
20261: LD_ADDR_EXP 120
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// end ; if p2 = 101 then
20269: LD_VAR 0 2
20273: PUSH
20274: LD_INT 101
20276: EQUAL
20277: IFFALSE 20405
// begin case p3 of 1 :
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 1
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20299
20292: POP
// hHackUnlimitedResources ; 2 :
20293: CALL 31442 0 0
20297: GO 20405
20299: LD_INT 2
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20314
20307: POP
// hHackSetLevel10 ; 3 :
20308: CALL 31575 0 0
20312: GO 20405
20314: LD_INT 3
20316: DOUBLE
20317: EQUAL
20318: IFTRUE 20322
20320: GO 20329
20322: POP
// hHackSetLevel10YourUnits ; 4 :
20323: CALL 31660 0 0
20327: GO 20405
20329: LD_INT 4
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20344
20337: POP
// hHackInvincible ; 5 :
20338: CALL 32108 0 0
20342: GO 20405
20344: LD_INT 5
20346: DOUBLE
20347: EQUAL
20348: IFTRUE 20352
20350: GO 20359
20352: POP
// hHackInvisible ; 6 :
20353: CALL 32219 0 0
20357: GO 20405
20359: LD_INT 6
20361: DOUBLE
20362: EQUAL
20363: IFTRUE 20367
20365: GO 20374
20367: POP
// hHackChangeYourSide ; 7 :
20368: CALL 32276 0 0
20372: GO 20405
20374: LD_INT 7
20376: DOUBLE
20377: EQUAL
20378: IFTRUE 20382
20380: GO 20389
20382: POP
// hHackChangeUnitSide ; 8 :
20383: CALL 32318 0 0
20387: GO 20405
20389: LD_INT 8
20391: DOUBLE
20392: EQUAL
20393: IFTRUE 20397
20395: GO 20404
20397: POP
// hHackFog ; end ;
20398: CALL 32419 0 0
20402: GO 20405
20404: POP
// end ; end ;
20405: LD_VAR 0 7
20409: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20410: GO 20412
20412: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20413: LD_STRING initStreamRollete();
20415: PPUSH
20416: CALL_OW 559
// InitStreamMode ;
20420: CALL 20429 0 0
// DefineStreamItems ( ) ;
20424: CALL 20869 0 0
// end ;
20428: END
// function InitStreamMode ; begin
20429: LD_INT 0
20431: PPUSH
// streamModeActive := false ;
20432: LD_ADDR_EXP 67
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// normalCounter := 36 ;
20440: LD_ADDR_EXP 68
20444: PUSH
20445: LD_INT 36
20447: ST_TO_ADDR
// hardcoreCounter := 16 ;
20448: LD_ADDR_EXP 69
20452: PUSH
20453: LD_INT 16
20455: ST_TO_ADDR
// sRocket := false ;
20456: LD_ADDR_EXP 72
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sSpeed := false ;
20464: LD_ADDR_EXP 71
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sEngine := false ;
20472: LD_ADDR_EXP 73
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sSpec := false ;
20480: LD_ADDR_EXP 70
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// sLevel := false ;
20488: LD_ADDR_EXP 74
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// sArmoury := false ;
20496: LD_ADDR_EXP 75
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// sRadar := false ;
20504: LD_ADDR_EXP 76
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// sBunker := false ;
20512: LD_ADDR_EXP 77
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// sHack := false ;
20520: LD_ADDR_EXP 78
20524: PUSH
20525: LD_INT 0
20527: ST_TO_ADDR
// sFire := false ;
20528: LD_ADDR_EXP 79
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// sRefresh := false ;
20536: LD_ADDR_EXP 80
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// sExp := false ;
20544: LD_ADDR_EXP 81
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// sDepot := false ;
20552: LD_ADDR_EXP 82
20556: PUSH
20557: LD_INT 0
20559: ST_TO_ADDR
// sFlag := false ;
20560: LD_ADDR_EXP 83
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
// sKamikadze := false ;
20568: LD_ADDR_EXP 91
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sTroll := false ;
20576: LD_ADDR_EXP 92
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sSlow := false ;
20584: LD_ADDR_EXP 93
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sLack := false ;
20592: LD_ADDR_EXP 94
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sTank := false ;
20600: LD_ADDR_EXP 96
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sRemote := false ;
20608: LD_ADDR_EXP 97
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sPowell := false ;
20616: LD_ADDR_EXP 98
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sTeleport := false ;
20624: LD_ADDR_EXP 101
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sOilTower := false ;
20632: LD_ADDR_EXP 103
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sShovel := false ;
20640: LD_ADDR_EXP 104
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sSheik := false ;
20648: LD_ADDR_EXP 105
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sEarthquake := false ;
20656: LD_ADDR_EXP 107
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sAI := false ;
20664: LD_ADDR_EXP 108
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sCargo := false ;
20672: LD_ADDR_EXP 111
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sDLaser := false ;
20680: LD_ADDR_EXP 112
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sExchange := false ;
20688: LD_ADDR_EXP 113
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sFac := false ;
20696: LD_ADDR_EXP 114
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sPower := false ;
20704: LD_ADDR_EXP 115
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sRandom := false ;
20712: LD_ADDR_EXP 116
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sShield := false ;
20720: LD_ADDR_EXP 117
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sTime := false ;
20728: LD_ADDR_EXP 118
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sTools := false ;
20736: LD_ADDR_EXP 119
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sSold := false ;
20744: LD_ADDR_EXP 84
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sDiff := false ;
20752: LD_ADDR_EXP 85
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sFog := false ;
20760: LD_ADDR_EXP 88
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sReset := false ;
20768: LD_ADDR_EXP 89
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sSun := false ;
20776: LD_ADDR_EXP 90
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sTiger := false ;
20784: LD_ADDR_EXP 86
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sBomb := false ;
20792: LD_ADDR_EXP 87
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sWound := false ;
20800: LD_ADDR_EXP 95
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sBetray := false ;
20808: LD_ADDR_EXP 99
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sContamin := false ;
20816: LD_ADDR_EXP 100
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sOil := false ;
20824: LD_ADDR_EXP 102
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sStu := false ;
20832: LD_ADDR_EXP 106
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sBazooka := false ;
20840: LD_ADDR_EXP 109
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sMortar := false ;
20848: LD_ADDR_EXP 110
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sRanger := false ;
20856: LD_ADDR_EXP 120
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// end ;
20864: LD_VAR 0 1
20868: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20869: LD_INT 0
20871: PPUSH
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
// result := [ ] ;
20876: LD_ADDR_VAR 0 1
20880: PUSH
20881: EMPTY
20882: ST_TO_ADDR
// if campaign_id = 1 then
20883: LD_OWVAR 69
20887: PUSH
20888: LD_INT 1
20890: EQUAL
20891: IFFALSE 23829
// begin case mission_number of 1 :
20893: LD_OWVAR 70
20897: PUSH
20898: LD_INT 1
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20970
20906: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20907: LD_ADDR_VAR 0 1
20911: PUSH
20912: LD_INT 2
20914: PUSH
20915: LD_INT 4
20917: PUSH
20918: LD_INT 11
20920: PUSH
20921: LD_INT 12
20923: PUSH
20924: LD_INT 15
20926: PUSH
20927: LD_INT 16
20929: PUSH
20930: LD_INT 22
20932: PUSH
20933: LD_INT 23
20935: PUSH
20936: LD_INT 26
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 101
20952: PUSH
20953: LD_INT 102
20955: PUSH
20956: LD_INT 106
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: ST_TO_ADDR
20968: GO 23827
20970: LD_INT 2
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 21050
20978: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20979: LD_ADDR_VAR 0 1
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: LD_INT 4
20989: PUSH
20990: LD_INT 11
20992: PUSH
20993: LD_INT 12
20995: PUSH
20996: LD_INT 15
20998: PUSH
20999: LD_INT 16
21001: PUSH
21002: LD_INT 22
21004: PUSH
21005: LD_INT 23
21007: PUSH
21008: LD_INT 26
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 101
21024: PUSH
21025: LD_INT 102
21027: PUSH
21028: LD_INT 105
21030: PUSH
21031: LD_INT 106
21033: PUSH
21034: LD_INT 108
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: ST_TO_ADDR
21048: GO 23827
21050: LD_INT 3
21052: DOUBLE
21053: EQUAL
21054: IFTRUE 21058
21056: GO 21134
21058: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21059: LD_ADDR_VAR 0 1
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 4
21069: PUSH
21070: LD_INT 5
21072: PUSH
21073: LD_INT 11
21075: PUSH
21076: LD_INT 12
21078: PUSH
21079: LD_INT 15
21081: PUSH
21082: LD_INT 16
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_INT 26
21090: PUSH
21091: LD_INT 36
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 101
21108: PUSH
21109: LD_INT 102
21111: PUSH
21112: LD_INT 105
21114: PUSH
21115: LD_INT 106
21117: PUSH
21118: LD_INT 108
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: ST_TO_ADDR
21132: GO 23827
21134: LD_INT 4
21136: DOUBLE
21137: EQUAL
21138: IFTRUE 21142
21140: GO 21226
21142: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: LD_INT 4
21153: PUSH
21154: LD_INT 5
21156: PUSH
21157: LD_INT 8
21159: PUSH
21160: LD_INT 11
21162: PUSH
21163: LD_INT 12
21165: PUSH
21166: LD_INT 15
21168: PUSH
21169: LD_INT 16
21171: PUSH
21172: LD_INT 22
21174: PUSH
21175: LD_INT 23
21177: PUSH
21178: LD_INT 26
21180: PUSH
21181: LD_INT 36
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 101
21200: PUSH
21201: LD_INT 102
21203: PUSH
21204: LD_INT 105
21206: PUSH
21207: LD_INT 106
21209: PUSH
21210: LD_INT 108
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: ST_TO_ADDR
21224: GO 23827
21226: LD_INT 5
21228: DOUBLE
21229: EQUAL
21230: IFTRUE 21234
21232: GO 21334
21234: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: LD_INT 4
21245: PUSH
21246: LD_INT 5
21248: PUSH
21249: LD_INT 6
21251: PUSH
21252: LD_INT 8
21254: PUSH
21255: LD_INT 11
21257: PUSH
21258: LD_INT 12
21260: PUSH
21261: LD_INT 15
21263: PUSH
21264: LD_INT 16
21266: PUSH
21267: LD_INT 22
21269: PUSH
21270: LD_INT 23
21272: PUSH
21273: LD_INT 25
21275: PUSH
21276: LD_INT 26
21278: PUSH
21279: LD_INT 36
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 101
21300: PUSH
21301: LD_INT 102
21303: PUSH
21304: LD_INT 105
21306: PUSH
21307: LD_INT 106
21309: PUSH
21310: LD_INT 108
21312: PUSH
21313: LD_INT 109
21315: PUSH
21316: LD_INT 112
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: ST_TO_ADDR
21332: GO 23827
21334: LD_INT 6
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21462
21342: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21343: LD_ADDR_VAR 0 1
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 4
21353: PUSH
21354: LD_INT 5
21356: PUSH
21357: LD_INT 6
21359: PUSH
21360: LD_INT 8
21362: PUSH
21363: LD_INT 11
21365: PUSH
21366: LD_INT 12
21368: PUSH
21369: LD_INT 15
21371: PUSH
21372: LD_INT 16
21374: PUSH
21375: LD_INT 20
21377: PUSH
21378: LD_INT 21
21380: PUSH
21381: LD_INT 22
21383: PUSH
21384: LD_INT 23
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 26
21392: PUSH
21393: LD_INT 30
21395: PUSH
21396: LD_INT 31
21398: PUSH
21399: LD_INT 32
21401: PUSH
21402: LD_INT 36
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 101
21428: PUSH
21429: LD_INT 102
21431: PUSH
21432: LD_INT 105
21434: PUSH
21435: LD_INT 106
21437: PUSH
21438: LD_INT 108
21440: PUSH
21441: LD_INT 109
21443: PUSH
21444: LD_INT 112
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: ST_TO_ADDR
21460: GO 23827
21462: LD_INT 7
21464: DOUBLE
21465: EQUAL
21466: IFTRUE 21470
21468: GO 21570
21470: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21471: LD_ADDR_VAR 0 1
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 4
21481: PUSH
21482: LD_INT 5
21484: PUSH
21485: LD_INT 7
21487: PUSH
21488: LD_INT 11
21490: PUSH
21491: LD_INT 12
21493: PUSH
21494: LD_INT 15
21496: PUSH
21497: LD_INT 16
21499: PUSH
21500: LD_INT 20
21502: PUSH
21503: LD_INT 21
21505: PUSH
21506: LD_INT 22
21508: PUSH
21509: LD_INT 23
21511: PUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 26
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 101
21536: PUSH
21537: LD_INT 102
21539: PUSH
21540: LD_INT 103
21542: PUSH
21543: LD_INT 105
21545: PUSH
21546: LD_INT 106
21548: PUSH
21549: LD_INT 108
21551: PUSH
21552: LD_INT 112
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: ST_TO_ADDR
21568: GO 23827
21570: LD_INT 8
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21706
21578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21579: LD_ADDR_VAR 0 1
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 4
21589: PUSH
21590: LD_INT 5
21592: PUSH
21593: LD_INT 6
21595: PUSH
21596: LD_INT 7
21598: PUSH
21599: LD_INT 8
21601: PUSH
21602: LD_INT 11
21604: PUSH
21605: LD_INT 12
21607: PUSH
21608: LD_INT 15
21610: PUSH
21611: LD_INT 16
21613: PUSH
21614: LD_INT 20
21616: PUSH
21617: LD_INT 21
21619: PUSH
21620: LD_INT 22
21622: PUSH
21623: LD_INT 23
21625: PUSH
21626: LD_INT 25
21628: PUSH
21629: LD_INT 26
21631: PUSH
21632: LD_INT 30
21634: PUSH
21635: LD_INT 31
21637: PUSH
21638: LD_INT 32
21640: PUSH
21641: LD_INT 36
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 101
21668: PUSH
21669: LD_INT 102
21671: PUSH
21672: LD_INT 103
21674: PUSH
21675: LD_INT 105
21677: PUSH
21678: LD_INT 106
21680: PUSH
21681: LD_INT 108
21683: PUSH
21684: LD_INT 109
21686: PUSH
21687: LD_INT 112
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 23827
21706: LD_INT 9
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21850
21714: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21715: LD_ADDR_VAR 0 1
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 4
21725: PUSH
21726: LD_INT 5
21728: PUSH
21729: LD_INT 6
21731: PUSH
21732: LD_INT 7
21734: PUSH
21735: LD_INT 8
21737: PUSH
21738: LD_INT 11
21740: PUSH
21741: LD_INT 12
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 20
21752: PUSH
21753: LD_INT 21
21755: PUSH
21756: LD_INT 22
21758: PUSH
21759: LD_INT 23
21761: PUSH
21762: LD_INT 25
21764: PUSH
21765: LD_INT 26
21767: PUSH
21768: LD_INT 28
21770: PUSH
21771: LD_INT 30
21773: PUSH
21774: LD_INT 31
21776: PUSH
21777: LD_INT 32
21779: PUSH
21780: LD_INT 36
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 101
21808: PUSH
21809: LD_INT 102
21811: PUSH
21812: LD_INT 103
21814: PUSH
21815: LD_INT 105
21817: PUSH
21818: LD_INT 106
21820: PUSH
21821: LD_INT 108
21823: PUSH
21824: LD_INT 109
21826: PUSH
21827: LD_INT 112
21829: PUSH
21830: LD_INT 114
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: ST_TO_ADDR
21848: GO 23827
21850: LD_INT 10
21852: DOUBLE
21853: EQUAL
21854: IFTRUE 21858
21856: GO 22042
21858: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21859: LD_ADDR_VAR 0 1
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: LD_INT 4
21869: PUSH
21870: LD_INT 5
21872: PUSH
21873: LD_INT 6
21875: PUSH
21876: LD_INT 7
21878: PUSH
21879: LD_INT 8
21881: PUSH
21882: LD_INT 9
21884: PUSH
21885: LD_INT 10
21887: PUSH
21888: LD_INT 11
21890: PUSH
21891: LD_INT 12
21893: PUSH
21894: LD_INT 13
21896: PUSH
21897: LD_INT 14
21899: PUSH
21900: LD_INT 15
21902: PUSH
21903: LD_INT 16
21905: PUSH
21906: LD_INT 17
21908: PUSH
21909: LD_INT 18
21911: PUSH
21912: LD_INT 19
21914: PUSH
21915: LD_INT 20
21917: PUSH
21918: LD_INT 21
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_INT 23
21926: PUSH
21927: LD_INT 24
21929: PUSH
21930: LD_INT 25
21932: PUSH
21933: LD_INT 26
21935: PUSH
21936: LD_INT 28
21938: PUSH
21939: LD_INT 30
21941: PUSH
21942: LD_INT 31
21944: PUSH
21945: LD_INT 32
21947: PUSH
21948: LD_INT 36
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 101
21984: PUSH
21985: LD_INT 102
21987: PUSH
21988: LD_INT 103
21990: PUSH
21991: LD_INT 104
21993: PUSH
21994: LD_INT 105
21996: PUSH
21997: LD_INT 106
21999: PUSH
22000: LD_INT 107
22002: PUSH
22003: LD_INT 108
22005: PUSH
22006: LD_INT 109
22008: PUSH
22009: LD_INT 110
22011: PUSH
22012: LD_INT 111
22014: PUSH
22015: LD_INT 112
22017: PUSH
22018: LD_INT 114
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 23827
22042: LD_INT 11
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22242
22050: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22051: LD_ADDR_VAR 0 1
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 3
22061: PUSH
22062: LD_INT 4
22064: PUSH
22065: LD_INT 5
22067: PUSH
22068: LD_INT 6
22070: PUSH
22071: LD_INT 7
22073: PUSH
22074: LD_INT 8
22076: PUSH
22077: LD_INT 9
22079: PUSH
22080: LD_INT 10
22082: PUSH
22083: LD_INT 11
22085: PUSH
22086: LD_INT 12
22088: PUSH
22089: LD_INT 13
22091: PUSH
22092: LD_INT 14
22094: PUSH
22095: LD_INT 15
22097: PUSH
22098: LD_INT 16
22100: PUSH
22101: LD_INT 17
22103: PUSH
22104: LD_INT 18
22106: PUSH
22107: LD_INT 19
22109: PUSH
22110: LD_INT 20
22112: PUSH
22113: LD_INT 21
22115: PUSH
22116: LD_INT 22
22118: PUSH
22119: LD_INT 23
22121: PUSH
22122: LD_INT 24
22124: PUSH
22125: LD_INT 25
22127: PUSH
22128: LD_INT 26
22130: PUSH
22131: LD_INT 28
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 31
22139: PUSH
22140: LD_INT 32
22142: PUSH
22143: LD_INT 34
22145: PUSH
22146: LD_INT 36
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 101
22184: PUSH
22185: LD_INT 102
22187: PUSH
22188: LD_INT 103
22190: PUSH
22191: LD_INT 104
22193: PUSH
22194: LD_INT 105
22196: PUSH
22197: LD_INT 106
22199: PUSH
22200: LD_INT 107
22202: PUSH
22203: LD_INT 108
22205: PUSH
22206: LD_INT 109
22208: PUSH
22209: LD_INT 110
22211: PUSH
22212: LD_INT 111
22214: PUSH
22215: LD_INT 112
22217: PUSH
22218: LD_INT 114
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: ST_TO_ADDR
22240: GO 23827
22242: LD_INT 12
22244: DOUBLE
22245: EQUAL
22246: IFTRUE 22250
22248: GO 22458
22250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22251: LD_ADDR_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 3
22264: PUSH
22265: LD_INT 4
22267: PUSH
22268: LD_INT 5
22270: PUSH
22271: LD_INT 6
22273: PUSH
22274: LD_INT 7
22276: PUSH
22277: LD_INT 8
22279: PUSH
22280: LD_INT 9
22282: PUSH
22283: LD_INT 10
22285: PUSH
22286: LD_INT 11
22288: PUSH
22289: LD_INT 12
22291: PUSH
22292: LD_INT 13
22294: PUSH
22295: LD_INT 14
22297: PUSH
22298: LD_INT 15
22300: PUSH
22301: LD_INT 16
22303: PUSH
22304: LD_INT 17
22306: PUSH
22307: LD_INT 18
22309: PUSH
22310: LD_INT 19
22312: PUSH
22313: LD_INT 20
22315: PUSH
22316: LD_INT 21
22318: PUSH
22319: LD_INT 22
22321: PUSH
22322: LD_INT 23
22324: PUSH
22325: LD_INT 24
22327: PUSH
22328: LD_INT 25
22330: PUSH
22331: LD_INT 26
22333: PUSH
22334: LD_INT 27
22336: PUSH
22337: LD_INT 28
22339: PUSH
22340: LD_INT 30
22342: PUSH
22343: LD_INT 31
22345: PUSH
22346: LD_INT 32
22348: PUSH
22349: LD_INT 33
22351: PUSH
22352: LD_INT 34
22354: PUSH
22355: LD_INT 36
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 101
22396: PUSH
22397: LD_INT 102
22399: PUSH
22400: LD_INT 103
22402: PUSH
22403: LD_INT 104
22405: PUSH
22406: LD_INT 105
22408: PUSH
22409: LD_INT 106
22411: PUSH
22412: LD_INT 107
22414: PUSH
22415: LD_INT 108
22417: PUSH
22418: LD_INT 109
22420: PUSH
22421: LD_INT 110
22423: PUSH
22424: LD_INT 111
22426: PUSH
22427: LD_INT 112
22429: PUSH
22430: LD_INT 113
22432: PUSH
22433: LD_INT 114
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: ST_TO_ADDR
22456: GO 23827
22458: LD_INT 13
22460: DOUBLE
22461: EQUAL
22462: IFTRUE 22466
22464: GO 22662
22466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22467: LD_ADDR_VAR 0 1
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 3
22480: PUSH
22481: LD_INT 4
22483: PUSH
22484: LD_INT 5
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 14
22504: PUSH
22505: LD_INT 15
22507: PUSH
22508: LD_INT 16
22510: PUSH
22511: LD_INT 17
22513: PUSH
22514: LD_INT 18
22516: PUSH
22517: LD_INT 19
22519: PUSH
22520: LD_INT 20
22522: PUSH
22523: LD_INT 21
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_INT 23
22531: PUSH
22532: LD_INT 24
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 26
22540: PUSH
22541: LD_INT 27
22543: PUSH
22544: LD_INT 28
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 31
22552: PUSH
22553: LD_INT 32
22555: PUSH
22556: LD_INT 33
22558: PUSH
22559: LD_INT 34
22561: PUSH
22562: LD_INT 36
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 101
22600: PUSH
22601: LD_INT 102
22603: PUSH
22604: LD_INT 103
22606: PUSH
22607: LD_INT 104
22609: PUSH
22610: LD_INT 105
22612: PUSH
22613: LD_INT 106
22615: PUSH
22616: LD_INT 107
22618: PUSH
22619: LD_INT 108
22621: PUSH
22622: LD_INT 109
22624: PUSH
22625: LD_INT 110
22627: PUSH
22628: LD_INT 111
22630: PUSH
22631: LD_INT 112
22633: PUSH
22634: LD_INT 113
22636: PUSH
22637: LD_INT 114
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 23827
22662: LD_INT 14
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22882
22670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22671: LD_ADDR_VAR 0 1
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: LD_INT 5
22690: PUSH
22691: LD_INT 6
22693: PUSH
22694: LD_INT 7
22696: PUSH
22697: LD_INT 8
22699: PUSH
22700: LD_INT 9
22702: PUSH
22703: LD_INT 10
22705: PUSH
22706: LD_INT 11
22708: PUSH
22709: LD_INT 12
22711: PUSH
22712: LD_INT 13
22714: PUSH
22715: LD_INT 14
22717: PUSH
22718: LD_INT 15
22720: PUSH
22721: LD_INT 16
22723: PUSH
22724: LD_INT 17
22726: PUSH
22727: LD_INT 18
22729: PUSH
22730: LD_INT 19
22732: PUSH
22733: LD_INT 20
22735: PUSH
22736: LD_INT 21
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_INT 23
22744: PUSH
22745: LD_INT 24
22747: PUSH
22748: LD_INT 25
22750: PUSH
22751: LD_INT 26
22753: PUSH
22754: LD_INT 27
22756: PUSH
22757: LD_INT 28
22759: PUSH
22760: LD_INT 29
22762: PUSH
22763: LD_INT 30
22765: PUSH
22766: LD_INT 31
22768: PUSH
22769: LD_INT 32
22771: PUSH
22772: LD_INT 33
22774: PUSH
22775: LD_INT 34
22777: PUSH
22778: LD_INT 36
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 101
22820: PUSH
22821: LD_INT 102
22823: PUSH
22824: LD_INT 103
22826: PUSH
22827: LD_INT 104
22829: PUSH
22830: LD_INT 105
22832: PUSH
22833: LD_INT 106
22835: PUSH
22836: LD_INT 107
22838: PUSH
22839: LD_INT 108
22841: PUSH
22842: LD_INT 109
22844: PUSH
22845: LD_INT 110
22847: PUSH
22848: LD_INT 111
22850: PUSH
22851: LD_INT 112
22853: PUSH
22854: LD_INT 113
22856: PUSH
22857: LD_INT 114
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: ST_TO_ADDR
22880: GO 23827
22882: LD_INT 15
22884: DOUBLE
22885: EQUAL
22886: IFTRUE 22890
22888: GO 23102
22890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22891: LD_ADDR_VAR 0 1
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: LD_INT 3
22904: PUSH
22905: LD_INT 4
22907: PUSH
22908: LD_INT 5
22910: PUSH
22911: LD_INT 6
22913: PUSH
22914: LD_INT 7
22916: PUSH
22917: LD_INT 8
22919: PUSH
22920: LD_INT 9
22922: PUSH
22923: LD_INT 10
22925: PUSH
22926: LD_INT 11
22928: PUSH
22929: LD_INT 12
22931: PUSH
22932: LD_INT 13
22934: PUSH
22935: LD_INT 14
22937: PUSH
22938: LD_INT 15
22940: PUSH
22941: LD_INT 16
22943: PUSH
22944: LD_INT 17
22946: PUSH
22947: LD_INT 18
22949: PUSH
22950: LD_INT 19
22952: PUSH
22953: LD_INT 20
22955: PUSH
22956: LD_INT 21
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_INT 23
22964: PUSH
22965: LD_INT 24
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 26
22973: PUSH
22974: LD_INT 27
22976: PUSH
22977: LD_INT 28
22979: PUSH
22980: LD_INT 29
22982: PUSH
22983: LD_INT 30
22985: PUSH
22986: LD_INT 31
22988: PUSH
22989: LD_INT 32
22991: PUSH
22992: LD_INT 33
22994: PUSH
22995: LD_INT 34
22997: PUSH
22998: LD_INT 36
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 101
23040: PUSH
23041: LD_INT 102
23043: PUSH
23044: LD_INT 103
23046: PUSH
23047: LD_INT 104
23049: PUSH
23050: LD_INT 105
23052: PUSH
23053: LD_INT 106
23055: PUSH
23056: LD_INT 107
23058: PUSH
23059: LD_INT 108
23061: PUSH
23062: LD_INT 109
23064: PUSH
23065: LD_INT 110
23067: PUSH
23068: LD_INT 111
23070: PUSH
23071: LD_INT 112
23073: PUSH
23074: LD_INT 113
23076: PUSH
23077: LD_INT 114
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: ST_TO_ADDR
23100: GO 23827
23102: LD_INT 16
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23234
23110: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23111: LD_ADDR_VAR 0 1
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 4
23121: PUSH
23122: LD_INT 5
23124: PUSH
23125: LD_INT 7
23127: PUSH
23128: LD_INT 11
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 15
23136: PUSH
23137: LD_INT 16
23139: PUSH
23140: LD_INT 20
23142: PUSH
23143: LD_INT 21
23145: PUSH
23146: LD_INT 22
23148: PUSH
23149: LD_INT 23
23151: PUSH
23152: LD_INT 25
23154: PUSH
23155: LD_INT 26
23157: PUSH
23158: LD_INT 30
23160: PUSH
23161: LD_INT 31
23163: PUSH
23164: LD_INT 32
23166: PUSH
23167: LD_INT 33
23169: PUSH
23170: LD_INT 34
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 101
23196: PUSH
23197: LD_INT 102
23199: PUSH
23200: LD_INT 103
23202: PUSH
23203: LD_INT 106
23205: PUSH
23206: LD_INT 108
23208: PUSH
23209: LD_INT 112
23211: PUSH
23212: LD_INT 113
23214: PUSH
23215: LD_INT 114
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: ST_TO_ADDR
23232: GO 23827
23234: LD_INT 17
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23454
23242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23243: LD_ADDR_VAR 0 1
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 3
23256: PUSH
23257: LD_INT 4
23259: PUSH
23260: LD_INT 5
23262: PUSH
23263: LD_INT 6
23265: PUSH
23266: LD_INT 7
23268: PUSH
23269: LD_INT 8
23271: PUSH
23272: LD_INT 9
23274: PUSH
23275: LD_INT 10
23277: PUSH
23278: LD_INT 11
23280: PUSH
23281: LD_INT 12
23283: PUSH
23284: LD_INT 13
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: LD_INT 15
23292: PUSH
23293: LD_INT 16
23295: PUSH
23296: LD_INT 17
23298: PUSH
23299: LD_INT 18
23301: PUSH
23302: LD_INT 19
23304: PUSH
23305: LD_INT 20
23307: PUSH
23308: LD_INT 21
23310: PUSH
23311: LD_INT 22
23313: PUSH
23314: LD_INT 23
23316: PUSH
23317: LD_INT 24
23319: PUSH
23320: LD_INT 25
23322: PUSH
23323: LD_INT 26
23325: PUSH
23326: LD_INT 27
23328: PUSH
23329: LD_INT 28
23331: PUSH
23332: LD_INT 29
23334: PUSH
23335: LD_INT 30
23337: PUSH
23338: LD_INT 31
23340: PUSH
23341: LD_INT 32
23343: PUSH
23344: LD_INT 33
23346: PUSH
23347: LD_INT 34
23349: PUSH
23350: LD_INT 36
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 101
23392: PUSH
23393: LD_INT 102
23395: PUSH
23396: LD_INT 103
23398: PUSH
23399: LD_INT 104
23401: PUSH
23402: LD_INT 105
23404: PUSH
23405: LD_INT 106
23407: PUSH
23408: LD_INT 107
23410: PUSH
23411: LD_INT 108
23413: PUSH
23414: LD_INT 109
23416: PUSH
23417: LD_INT 110
23419: PUSH
23420: LD_INT 111
23422: PUSH
23423: LD_INT 112
23425: PUSH
23426: LD_INT 113
23428: PUSH
23429: LD_INT 114
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: ST_TO_ADDR
23452: GO 23827
23454: LD_INT 18
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23598
23462: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: LD_INT 4
23473: PUSH
23474: LD_INT 5
23476: PUSH
23477: LD_INT 7
23479: PUSH
23480: LD_INT 11
23482: PUSH
23483: LD_INT 12
23485: PUSH
23486: LD_INT 15
23488: PUSH
23489: LD_INT 16
23491: PUSH
23492: LD_INT 20
23494: PUSH
23495: LD_INT 21
23497: PUSH
23498: LD_INT 22
23500: PUSH
23501: LD_INT 23
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 26
23509: PUSH
23510: LD_INT 30
23512: PUSH
23513: LD_INT 31
23515: PUSH
23516: LD_INT 32
23518: PUSH
23519: LD_INT 33
23521: PUSH
23522: LD_INT 34
23524: PUSH
23525: LD_INT 35
23527: PUSH
23528: LD_INT 36
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 101
23556: PUSH
23557: LD_INT 102
23559: PUSH
23560: LD_INT 103
23562: PUSH
23563: LD_INT 106
23565: PUSH
23566: LD_INT 108
23568: PUSH
23569: LD_INT 112
23571: PUSH
23572: LD_INT 113
23574: PUSH
23575: LD_INT 114
23577: PUSH
23578: LD_INT 115
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 23827
23598: LD_INT 19
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23826
23606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23607: LD_ADDR_VAR 0 1
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: LD_INT 2
23617: PUSH
23618: LD_INT 3
23620: PUSH
23621: LD_INT 4
23623: PUSH
23624: LD_INT 5
23626: PUSH
23627: LD_INT 6
23629: PUSH
23630: LD_INT 7
23632: PUSH
23633: LD_INT 8
23635: PUSH
23636: LD_INT 9
23638: PUSH
23639: LD_INT 10
23641: PUSH
23642: LD_INT 11
23644: PUSH
23645: LD_INT 12
23647: PUSH
23648: LD_INT 13
23650: PUSH
23651: LD_INT 14
23653: PUSH
23654: LD_INT 15
23656: PUSH
23657: LD_INT 16
23659: PUSH
23660: LD_INT 17
23662: PUSH
23663: LD_INT 18
23665: PUSH
23666: LD_INT 19
23668: PUSH
23669: LD_INT 20
23671: PUSH
23672: LD_INT 21
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 24
23683: PUSH
23684: LD_INT 25
23686: PUSH
23687: LD_INT 26
23689: PUSH
23690: LD_INT 27
23692: PUSH
23693: LD_INT 28
23695: PUSH
23696: LD_INT 29
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 32
23707: PUSH
23708: LD_INT 33
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 35
23716: PUSH
23717: LD_INT 36
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 101
23760: PUSH
23761: LD_INT 102
23763: PUSH
23764: LD_INT 103
23766: PUSH
23767: LD_INT 104
23769: PUSH
23770: LD_INT 105
23772: PUSH
23773: LD_INT 106
23775: PUSH
23776: LD_INT 107
23778: PUSH
23779: LD_INT 108
23781: PUSH
23782: LD_INT 109
23784: PUSH
23785: LD_INT 110
23787: PUSH
23788: LD_INT 111
23790: PUSH
23791: LD_INT 112
23793: PUSH
23794: LD_INT 113
23796: PUSH
23797: LD_INT 114
23799: PUSH
23800: LD_INT 115
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: ST_TO_ADDR
23824: GO 23827
23826: POP
// end else
23827: GO 24046
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23829: LD_ADDR_VAR 0 1
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: LD_INT 4
23845: PUSH
23846: LD_INT 5
23848: PUSH
23849: LD_INT 6
23851: PUSH
23852: LD_INT 7
23854: PUSH
23855: LD_INT 8
23857: PUSH
23858: LD_INT 9
23860: PUSH
23861: LD_INT 10
23863: PUSH
23864: LD_INT 11
23866: PUSH
23867: LD_INT 12
23869: PUSH
23870: LD_INT 13
23872: PUSH
23873: LD_INT 14
23875: PUSH
23876: LD_INT 15
23878: PUSH
23879: LD_INT 16
23881: PUSH
23882: LD_INT 17
23884: PUSH
23885: LD_INT 18
23887: PUSH
23888: LD_INT 19
23890: PUSH
23891: LD_INT 20
23893: PUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: LD_INT 23
23902: PUSH
23903: LD_INT 24
23905: PUSH
23906: LD_INT 25
23908: PUSH
23909: LD_INT 26
23911: PUSH
23912: LD_INT 27
23914: PUSH
23915: LD_INT 28
23917: PUSH
23918: LD_INT 29
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 31
23926: PUSH
23927: LD_INT 32
23929: PUSH
23930: LD_INT 33
23932: PUSH
23933: LD_INT 34
23935: PUSH
23936: LD_INT 35
23938: PUSH
23939: LD_INT 36
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 101
23982: PUSH
23983: LD_INT 102
23985: PUSH
23986: LD_INT 103
23988: PUSH
23989: LD_INT 104
23991: PUSH
23992: LD_INT 105
23994: PUSH
23995: LD_INT 106
23997: PUSH
23998: LD_INT 107
24000: PUSH
24001: LD_INT 108
24003: PUSH
24004: LD_INT 109
24006: PUSH
24007: LD_INT 110
24009: PUSH
24010: LD_INT 111
24012: PUSH
24013: LD_INT 112
24015: PUSH
24016: LD_INT 113
24018: PUSH
24019: LD_INT 114
24021: PUSH
24022: LD_INT 115
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: ST_TO_ADDR
// if result then
24046: LD_VAR 0 1
24050: IFFALSE 24339
// begin normal :=  ;
24052: LD_ADDR_VAR 0 3
24056: PUSH
24057: LD_STRING 
24059: ST_TO_ADDR
// hardcore :=  ;
24060: LD_ADDR_VAR 0 4
24064: PUSH
24065: LD_STRING 
24067: ST_TO_ADDR
// for i = 1 to normalCounter do
24068: LD_ADDR_VAR 0 5
24072: PUSH
24073: DOUBLE
24074: LD_INT 1
24076: DEC
24077: ST_TO_ADDR
24078: LD_EXP 68
24082: PUSH
24083: FOR_TO
24084: IFFALSE 24185
// begin tmp := 0 ;
24086: LD_ADDR_VAR 0 2
24090: PUSH
24091: LD_STRING 0
24093: ST_TO_ADDR
// if result [ 1 ] then
24094: LD_VAR 0 1
24098: PUSH
24099: LD_INT 1
24101: ARRAY
24102: IFFALSE 24167
// if result [ 1 ] [ 1 ] = i then
24104: LD_VAR 0 1
24108: PUSH
24109: LD_INT 1
24111: ARRAY
24112: PUSH
24113: LD_INT 1
24115: ARRAY
24116: PUSH
24117: LD_VAR 0 5
24121: EQUAL
24122: IFFALSE 24167
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24124: LD_ADDR_VAR 0 1
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PPUSH
24146: LD_INT 1
24148: PPUSH
24149: CALL_OW 3
24153: PPUSH
24154: CALL_OW 1
24158: ST_TO_ADDR
// tmp := 1 ;
24159: LD_ADDR_VAR 0 2
24163: PUSH
24164: LD_STRING 1
24166: ST_TO_ADDR
// end ; normal := normal & tmp ;
24167: LD_ADDR_VAR 0 3
24171: PUSH
24172: LD_VAR 0 3
24176: PUSH
24177: LD_VAR 0 2
24181: STR
24182: ST_TO_ADDR
// end ;
24183: GO 24083
24185: POP
24186: POP
// for i = 1 to hardcoreCounter do
24187: LD_ADDR_VAR 0 5
24191: PUSH
24192: DOUBLE
24193: LD_INT 1
24195: DEC
24196: ST_TO_ADDR
24197: LD_EXP 69
24201: PUSH
24202: FOR_TO
24203: IFFALSE 24308
// begin tmp := 0 ;
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: LD_STRING 0
24212: ST_TO_ADDR
// if result [ 2 ] then
24213: LD_VAR 0 1
24217: PUSH
24218: LD_INT 2
24220: ARRAY
24221: IFFALSE 24290
// if result [ 2 ] [ 1 ] = 100 + i then
24223: LD_VAR 0 1
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PUSH
24232: LD_INT 1
24234: ARRAY
24235: PUSH
24236: LD_INT 100
24238: PUSH
24239: LD_VAR 0 5
24243: PLUS
24244: EQUAL
24245: IFFALSE 24290
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24247: LD_ADDR_VAR 0 1
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: LD_INT 2
24259: PPUSH
24260: LD_VAR 0 1
24264: PUSH
24265: LD_INT 2
24267: ARRAY
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 3
24276: PPUSH
24277: CALL_OW 1
24281: ST_TO_ADDR
// tmp := 1 ;
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_STRING 1
24289: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24290: LD_ADDR_VAR 0 4
24294: PUSH
24295: LD_VAR 0 4
24299: PUSH
24300: LD_VAR 0 2
24304: STR
24305: ST_TO_ADDR
// end ;
24306: GO 24202
24308: POP
24309: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24310: LD_STRING getStreamItemsFromMission("
24312: PUSH
24313: LD_VAR 0 3
24317: STR
24318: PUSH
24319: LD_STRING ","
24321: STR
24322: PUSH
24323: LD_VAR 0 4
24327: STR
24328: PUSH
24329: LD_STRING ")
24331: STR
24332: PPUSH
24333: CALL_OW 559
// end else
24337: GO 24346
// ToLua ( getStreamItemsFromMission("","") ) ;
24339: LD_STRING getStreamItemsFromMission("","")
24341: PPUSH
24342: CALL_OW 559
// end ;
24346: LD_VAR 0 1
24350: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24351: LD_EXP 67
24355: PUSH
24356: LD_EXP 72
24360: AND
24361: IFFALSE 24485
24363: GO 24365
24365: DISABLE
24366: LD_INT 0
24368: PPUSH
24369: PPUSH
// begin enable ;
24370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24371: LD_ADDR_VAR 0 2
24375: PUSH
24376: LD_INT 22
24378: PUSH
24379: LD_OWVAR 2
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: LD_INT 34
24393: PUSH
24394: LD_INT 7
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 34
24403: PUSH
24404: LD_INT 45
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 34
24413: PUSH
24414: LD_INT 28
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 34
24423: PUSH
24424: LD_INT 47
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PPUSH
24442: CALL_OW 69
24446: ST_TO_ADDR
// if not tmp then
24447: LD_VAR 0 2
24451: NOT
24452: IFFALSE 24456
// exit ;
24454: GO 24485
// for i in tmp do
24456: LD_ADDR_VAR 0 1
24460: PUSH
24461: LD_VAR 0 2
24465: PUSH
24466: FOR_IN
24467: IFFALSE 24483
// begin SetLives ( i , 0 ) ;
24469: LD_VAR 0 1
24473: PPUSH
24474: LD_INT 0
24476: PPUSH
24477: CALL_OW 234
// end ;
24481: GO 24466
24483: POP
24484: POP
// end ;
24485: PPOPN 2
24487: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24488: LD_EXP 67
24492: PUSH
24493: LD_EXP 73
24497: AND
24498: IFFALSE 24582
24500: GO 24502
24502: DISABLE
24503: LD_INT 0
24505: PPUSH
24506: PPUSH
// begin enable ;
24507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24508: LD_ADDR_VAR 0 2
24512: PUSH
24513: LD_INT 22
24515: PUSH
24516: LD_OWVAR 2
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 32
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PPUSH
24539: CALL_OW 69
24543: ST_TO_ADDR
// if not tmp then
24544: LD_VAR 0 2
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 24582
// for i in tmp do
24553: LD_ADDR_VAR 0 1
24557: PUSH
24558: LD_VAR 0 2
24562: PUSH
24563: FOR_IN
24564: IFFALSE 24580
// begin SetLives ( i , 0 ) ;
24566: LD_VAR 0 1
24570: PPUSH
24571: LD_INT 0
24573: PPUSH
24574: CALL_OW 234
// end ;
24578: GO 24563
24580: POP
24581: POP
// end ;
24582: PPOPN 2
24584: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24585: LD_EXP 67
24589: PUSH
24590: LD_EXP 70
24594: AND
24595: IFFALSE 24688
24597: GO 24599
24599: DISABLE
24600: LD_INT 0
24602: PPUSH
// begin enable ;
24603: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24604: LD_ADDR_VAR 0 1
24608: PUSH
24609: LD_INT 22
24611: PUSH
24612: LD_OWVAR 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 25
24626: PUSH
24627: LD_INT 5
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 25
24636: PUSH
24637: LD_INT 9
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 25
24646: PUSH
24647: LD_INT 8
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 69
24668: PUSH
24669: FOR_IN
24670: IFFALSE 24686
// begin SetClass ( i , 1 ) ;
24672: LD_VAR 0 1
24676: PPUSH
24677: LD_INT 1
24679: PPUSH
24680: CALL_OW 336
// end ;
24684: GO 24669
24686: POP
24687: POP
// end ;
24688: PPOPN 1
24690: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24691: LD_EXP 67
24695: PUSH
24696: LD_EXP 71
24700: AND
24701: PUSH
24702: LD_OWVAR 65
24706: PUSH
24707: LD_INT 7
24709: LESS
24710: AND
24711: IFFALSE 24725
24713: GO 24715
24715: DISABLE
// begin enable ;
24716: ENABLE
// game_speed := 7 ;
24717: LD_ADDR_OWVAR 65
24721: PUSH
24722: LD_INT 7
24724: ST_TO_ADDR
// end ;
24725: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24726: LD_EXP 67
24730: PUSH
24731: LD_EXP 74
24735: AND
24736: IFFALSE 24938
24738: GO 24740
24740: DISABLE
24741: LD_INT 0
24743: PPUSH
24744: PPUSH
24745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24746: LD_ADDR_VAR 0 3
24750: PUSH
24751: LD_INT 81
24753: PUSH
24754: LD_OWVAR 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: ST_TO_ADDR
// if not tmp then
24782: LD_VAR 0 3
24786: NOT
24787: IFFALSE 24791
// exit ;
24789: GO 24938
// if tmp > 5 then
24791: LD_VAR 0 3
24795: PUSH
24796: LD_INT 5
24798: GREATER
24799: IFFALSE 24811
// k := 5 else
24801: LD_ADDR_VAR 0 2
24805: PUSH
24806: LD_INT 5
24808: ST_TO_ADDR
24809: GO 24821
// k := tmp ;
24811: LD_ADDR_VAR 0 2
24815: PUSH
24816: LD_VAR 0 3
24820: ST_TO_ADDR
// for i := 1 to k do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_VAR 0 2
24835: PUSH
24836: FOR_TO
24837: IFFALSE 24936
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24839: LD_VAR 0 3
24843: PUSH
24844: LD_VAR 0 1
24848: ARRAY
24849: PPUSH
24850: LD_VAR 0 1
24854: PUSH
24855: LD_INT 4
24857: MOD
24858: PUSH
24859: LD_INT 1
24861: PLUS
24862: PPUSH
24863: CALL_OW 259
24867: PUSH
24868: LD_INT 10
24870: LESS
24871: IFFALSE 24934
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24873: LD_VAR 0 3
24877: PUSH
24878: LD_VAR 0 1
24882: ARRAY
24883: PPUSH
24884: LD_VAR 0 1
24888: PUSH
24889: LD_INT 4
24891: MOD
24892: PUSH
24893: LD_INT 1
24895: PLUS
24896: PPUSH
24897: LD_VAR 0 3
24901: PUSH
24902: LD_VAR 0 1
24906: ARRAY
24907: PPUSH
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 4
24915: MOD
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: CALL_OW 259
24925: PUSH
24926: LD_INT 1
24928: PLUS
24929: PPUSH
24930: CALL_OW 237
24934: GO 24836
24936: POP
24937: POP
// end ;
24938: PPOPN 3
24940: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24941: LD_EXP 67
24945: PUSH
24946: LD_EXP 75
24950: AND
24951: IFFALSE 24971
24953: GO 24955
24955: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24956: LD_INT 4
24958: PPUSH
24959: LD_OWVAR 2
24963: PPUSH
24964: LD_INT 0
24966: PPUSH
24967: CALL_OW 324
24971: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24972: LD_EXP 67
24976: PUSH
24977: LD_EXP 104
24981: AND
24982: IFFALSE 25002
24984: GO 24986
24986: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24987: LD_INT 19
24989: PPUSH
24990: LD_OWVAR 2
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: CALL_OW 324
25002: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25003: LD_EXP 67
25007: PUSH
25008: LD_EXP 76
25012: AND
25013: IFFALSE 25115
25015: GO 25017
25017: DISABLE
25018: LD_INT 0
25020: PPUSH
25021: PPUSH
// begin enable ;
25022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25023: LD_ADDR_VAR 0 2
25027: PUSH
25028: LD_INT 22
25030: PUSH
25031: LD_OWVAR 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: LD_INT 34
25045: PUSH
25046: LD_INT 11
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 34
25055: PUSH
25056: LD_INT 30
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PPUSH
25072: CALL_OW 69
25076: ST_TO_ADDR
// if not tmp then
25077: LD_VAR 0 2
25081: NOT
25082: IFFALSE 25086
// exit ;
25084: GO 25115
// for i in tmp do
25086: LD_ADDR_VAR 0 1
25090: PUSH
25091: LD_VAR 0 2
25095: PUSH
25096: FOR_IN
25097: IFFALSE 25113
// begin SetLives ( i , 0 ) ;
25099: LD_VAR 0 1
25103: PPUSH
25104: LD_INT 0
25106: PPUSH
25107: CALL_OW 234
// end ;
25111: GO 25096
25113: POP
25114: POP
// end ;
25115: PPOPN 2
25117: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25118: LD_EXP 67
25122: PUSH
25123: LD_EXP 77
25127: AND
25128: IFFALSE 25148
25130: GO 25132
25132: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25133: LD_INT 32
25135: PPUSH
25136: LD_OWVAR 2
25140: PPUSH
25141: LD_INT 0
25143: PPUSH
25144: CALL_OW 324
25148: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25149: LD_EXP 67
25153: PUSH
25154: LD_EXP 78
25158: AND
25159: IFFALSE 25340
25161: GO 25163
25163: DISABLE
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25169: LD_ADDR_VAR 0 2
25173: PUSH
25174: LD_INT 22
25176: PUSH
25177: LD_OWVAR 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 33
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 69
25204: ST_TO_ADDR
// if not tmp then
25205: LD_VAR 0 2
25209: NOT
25210: IFFALSE 25214
// exit ;
25212: GO 25340
// side := 0 ;
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_INT 0
25221: ST_TO_ADDR
// for i := 1 to 8 do
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: DOUBLE
25228: LD_INT 1
25230: DEC
25231: ST_TO_ADDR
25232: LD_INT 8
25234: PUSH
25235: FOR_TO
25236: IFFALSE 25284
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25238: LD_OWVAR 2
25242: PUSH
25243: LD_VAR 0 1
25247: NONEQUAL
25248: PUSH
25249: LD_OWVAR 2
25253: PPUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 81
25263: PUSH
25264: LD_INT 2
25266: EQUAL
25267: AND
25268: IFFALSE 25282
// begin side := i ;
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_VAR 0 1
25279: ST_TO_ADDR
// break ;
25280: GO 25284
// end ;
25282: GO 25235
25284: POP
25285: POP
// if not side then
25286: LD_VAR 0 3
25290: NOT
25291: IFFALSE 25295
// exit ;
25293: GO 25340
// for i := 1 to tmp do
25295: LD_ADDR_VAR 0 1
25299: PUSH
25300: DOUBLE
25301: LD_INT 1
25303: DEC
25304: ST_TO_ADDR
25305: LD_VAR 0 2
25309: PUSH
25310: FOR_TO
25311: IFFALSE 25338
// if Prob ( 60 ) then
25313: LD_INT 60
25315: PPUSH
25316: CALL_OW 13
25320: IFFALSE 25336
// SetSide ( i , side ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_VAR 0 3
25331: PPUSH
25332: CALL_OW 235
25336: GO 25310
25338: POP
25339: POP
// end ;
25340: PPOPN 3
25342: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25343: LD_EXP 67
25347: PUSH
25348: LD_EXP 80
25352: AND
25353: IFFALSE 25472
25355: GO 25357
25357: DISABLE
25358: LD_INT 0
25360: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25361: LD_ADDR_VAR 0 1
25365: PUSH
25366: LD_INT 22
25368: PUSH
25369: LD_OWVAR 2
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 21
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: LD_INT 23
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: PPUSH
25410: CALL_OW 69
25414: PUSH
25415: FOR_IN
25416: IFFALSE 25470
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL_OW 257
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: IN
25446: IFFALSE 25468
// SetClass ( un , rand ( 1 , 4 ) ) ;
25448: LD_VAR 0 1
25452: PPUSH
25453: LD_INT 1
25455: PPUSH
25456: LD_INT 4
25458: PPUSH
25459: CALL_OW 12
25463: PPUSH
25464: CALL_OW 336
25468: GO 25415
25470: POP
25471: POP
// end ;
25472: PPOPN 1
25474: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25475: LD_EXP 67
25479: PUSH
25480: LD_EXP 79
25484: AND
25485: IFFALSE 25564
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: LD_INT 22
25500: PUSH
25501: LD_OWVAR 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 1
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25538: LD_VAR 0 1
25542: PUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 12
25555: ARRAY
25556: PPUSH
25557: LD_INT 100
25559: PPUSH
25560: CALL_OW 234
// end ;
25564: PPOPN 1
25566: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25567: LD_EXP 67
25571: PUSH
25572: LD_EXP 81
25576: AND
25577: IFFALSE 25675
25579: GO 25581
25581: DISABLE
25582: LD_INT 0
25584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25585: LD_ADDR_VAR 0 1
25589: PUSH
25590: LD_INT 22
25592: PUSH
25593: LD_OWVAR 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 21
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: ST_TO_ADDR
// if not tmp then
25621: LD_VAR 0 1
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25675
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25630: LD_VAR 0 1
25634: PUSH
25635: LD_INT 1
25637: PPUSH
25638: LD_VAR 0 1
25642: PPUSH
25643: CALL_OW 12
25647: ARRAY
25648: PPUSH
25649: LD_INT 1
25651: PPUSH
25652: LD_INT 4
25654: PPUSH
25655: CALL_OW 12
25659: PPUSH
25660: LD_INT 3000
25662: PPUSH
25663: LD_INT 9000
25665: PPUSH
25666: CALL_OW 12
25670: PPUSH
25671: CALL_OW 492
// end ;
25675: PPOPN 1
25677: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25678: LD_EXP 67
25682: PUSH
25683: LD_EXP 82
25687: AND
25688: IFFALSE 25708
25690: GO 25692
25692: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25693: LD_INT 1
25695: PPUSH
25696: LD_OWVAR 2
25700: PPUSH
25701: LD_INT 0
25703: PPUSH
25704: CALL_OW 324
25708: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25709: LD_EXP 67
25713: PUSH
25714: LD_EXP 83
25718: AND
25719: IFFALSE 25802
25721: GO 25723
25723: DISABLE
25724: LD_INT 0
25726: PPUSH
25727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25728: LD_ADDR_VAR 0 2
25732: PUSH
25733: LD_INT 22
25735: PUSH
25736: LD_OWVAR 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 21
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PPUSH
25759: CALL_OW 69
25763: ST_TO_ADDR
// if not tmp then
25764: LD_VAR 0 2
25768: NOT
25769: IFFALSE 25773
// exit ;
25771: GO 25802
// for i in tmp do
25773: LD_ADDR_VAR 0 1
25777: PUSH
25778: LD_VAR 0 2
25782: PUSH
25783: FOR_IN
25784: IFFALSE 25800
// SetBLevel ( i , 10 ) ;
25786: LD_VAR 0 1
25790: PPUSH
25791: LD_INT 10
25793: PPUSH
25794: CALL_OW 241
25798: GO 25783
25800: POP
25801: POP
// end ;
25802: PPOPN 2
25804: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25805: LD_EXP 67
25809: PUSH
25810: LD_EXP 84
25814: AND
25815: IFFALSE 25926
25817: GO 25819
25819: DISABLE
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
25824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25825: LD_ADDR_VAR 0 3
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_OWVAR 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 25
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PPUSH
25856: CALL_OW 69
25860: ST_TO_ADDR
// if not tmp then
25861: LD_VAR 0 3
25865: NOT
25866: IFFALSE 25870
// exit ;
25868: GO 25926
// un := tmp [ rand ( 1 , tmp ) ] ;
25870: LD_ADDR_VAR 0 2
25874: PUSH
25875: LD_VAR 0 3
25879: PUSH
25880: LD_INT 1
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: CALL_OW 12
25892: ARRAY
25893: ST_TO_ADDR
// if Crawls ( un ) then
25894: LD_VAR 0 2
25898: PPUSH
25899: CALL_OW 318
25903: IFFALSE 25914
// ComWalk ( un ) ;
25905: LD_VAR 0 2
25909: PPUSH
25910: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25914: LD_VAR 0 2
25918: PPUSH
25919: LD_INT 5
25921: PPUSH
25922: CALL_OW 336
// end ;
25926: PPOPN 3
25928: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25929: LD_EXP 67
25933: PUSH
25934: LD_EXP 85
25938: AND
25939: PUSH
25940: LD_OWVAR 67
25944: PUSH
25945: LD_INT 3
25947: LESS
25948: AND
25949: IFFALSE 25968
25951: GO 25953
25953: DISABLE
// Difficulty := Difficulty + 1 ;
25954: LD_ADDR_OWVAR 67
25958: PUSH
25959: LD_OWVAR 67
25963: PUSH
25964: LD_INT 1
25966: PLUS
25967: ST_TO_ADDR
25968: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25969: LD_EXP 67
25973: PUSH
25974: LD_EXP 86
25978: AND
25979: IFFALSE 26082
25981: GO 25983
25983: DISABLE
25984: LD_INT 0
25986: PPUSH
// begin for i := 1 to 5 do
25987: LD_ADDR_VAR 0 1
25991: PUSH
25992: DOUBLE
25993: LD_INT 1
25995: DEC
25996: ST_TO_ADDR
25997: LD_INT 5
25999: PUSH
26000: FOR_TO
26001: IFFALSE 26080
// begin uc_nation := nation_nature ;
26003: LD_ADDR_OWVAR 21
26007: PUSH
26008: LD_INT 0
26010: ST_TO_ADDR
// uc_side := 0 ;
26011: LD_ADDR_OWVAR 20
26015: PUSH
26016: LD_INT 0
26018: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26019: LD_ADDR_OWVAR 29
26023: PUSH
26024: LD_INT 12
26026: PUSH
26027: LD_INT 12
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: ST_TO_ADDR
// hc_agressivity := 20 ;
26034: LD_ADDR_OWVAR 35
26038: PUSH
26039: LD_INT 20
26041: ST_TO_ADDR
// hc_class := class_tiger ;
26042: LD_ADDR_OWVAR 28
26046: PUSH
26047: LD_INT 14
26049: ST_TO_ADDR
// hc_gallery :=  ;
26050: LD_ADDR_OWVAR 33
26054: PUSH
26055: LD_STRING 
26057: ST_TO_ADDR
// hc_name :=  ;
26058: LD_ADDR_OWVAR 26
26062: PUSH
26063: LD_STRING 
26065: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26066: CALL_OW 44
26070: PPUSH
26071: LD_INT 0
26073: PPUSH
26074: CALL_OW 51
// end ;
26078: GO 26000
26080: POP
26081: POP
// end ;
26082: PPOPN 1
26084: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26085: LD_EXP 67
26089: PUSH
26090: LD_EXP 87
26094: AND
26095: IFFALSE 26104
26097: GO 26099
26099: DISABLE
// StreamSibBomb ;
26100: CALL 26105 0 0
26104: END
// export function StreamSibBomb ; var i , x , y ; begin
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
// result := false ;
26111: LD_ADDR_VAR 0 1
26115: PUSH
26116: LD_INT 0
26118: ST_TO_ADDR
// for i := 1 to 16 do
26119: LD_ADDR_VAR 0 2
26123: PUSH
26124: DOUBLE
26125: LD_INT 1
26127: DEC
26128: ST_TO_ADDR
26129: LD_INT 16
26131: PUSH
26132: FOR_TO
26133: IFFALSE 26332
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 10
26142: PUSH
26143: LD_INT 20
26145: PUSH
26146: LD_INT 30
26148: PUSH
26149: LD_INT 40
26151: PUSH
26152: LD_INT 50
26154: PUSH
26155: LD_INT 60
26157: PUSH
26158: LD_INT 70
26160: PUSH
26161: LD_INT 80
26163: PUSH
26164: LD_INT 90
26166: PUSH
26167: LD_INT 100
26169: PUSH
26170: LD_INT 110
26172: PUSH
26173: LD_INT 120
26175: PUSH
26176: LD_INT 130
26178: PUSH
26179: LD_INT 140
26181: PUSH
26182: LD_INT 150
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PPUSH
26205: LD_INT 15
26207: PPUSH
26208: CALL_OW 12
26212: ARRAY
26213: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26214: LD_ADDR_VAR 0 4
26218: PUSH
26219: LD_INT 10
26221: PUSH
26222: LD_INT 20
26224: PUSH
26225: LD_INT 30
26227: PUSH
26228: LD_INT 40
26230: PUSH
26231: LD_INT 50
26233: PUSH
26234: LD_INT 60
26236: PUSH
26237: LD_INT 70
26239: PUSH
26240: LD_INT 80
26242: PUSH
26243: LD_INT 90
26245: PUSH
26246: LD_INT 100
26248: PUSH
26249: LD_INT 110
26251: PUSH
26252: LD_INT 120
26254: PUSH
26255: LD_INT 130
26257: PUSH
26258: LD_INT 140
26260: PUSH
26261: LD_INT 150
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: PPUSH
26284: LD_INT 15
26286: PPUSH
26287: CALL_OW 12
26291: ARRAY
26292: ST_TO_ADDR
// if ValidHex ( x , y ) then
26293: LD_VAR 0 3
26297: PPUSH
26298: LD_VAR 0 4
26302: PPUSH
26303: CALL_OW 488
26307: IFFALSE 26330
// begin result := [ x , y ] ;
26309: LD_ADDR_VAR 0 1
26313: PUSH
26314: LD_VAR 0 3
26318: PUSH
26319: LD_VAR 0 4
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: ST_TO_ADDR
// break ;
26328: GO 26332
// end ; end ;
26330: GO 26132
26332: POP
26333: POP
// if result then
26334: LD_VAR 0 1
26338: IFFALSE 26398
// begin ToLua ( playSibBomb() ) ;
26340: LD_STRING playSibBomb()
26342: PPUSH
26343: CALL_OW 559
// wait ( 0 0$14 ) ;
26347: LD_INT 490
26349: PPUSH
26350: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26354: LD_VAR 0 1
26358: PUSH
26359: LD_INT 1
26361: ARRAY
26362: PPUSH
26363: LD_VAR 0 1
26367: PUSH
26368: LD_INT 2
26370: ARRAY
26371: PPUSH
26372: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26376: LD_VAR 0 1
26380: PUSH
26381: LD_INT 1
26383: ARRAY
26384: PPUSH
26385: LD_VAR 0 1
26389: PUSH
26390: LD_INT 2
26392: ARRAY
26393: PPUSH
26394: CALL_OW 429
// end ; end ;
26398: LD_VAR 0 1
26402: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26403: LD_EXP 67
26407: PUSH
26408: LD_EXP 89
26412: AND
26413: IFFALSE 26425
26415: GO 26417
26417: DISABLE
// YouLost (  ) ;
26418: LD_STRING 
26420: PPUSH
26421: CALL_OW 104
26425: END
// every 0 0$1 trigger StreamModeActive and sFog do
26426: LD_EXP 67
26430: PUSH
26431: LD_EXP 88
26435: AND
26436: IFFALSE 26450
26438: GO 26440
26440: DISABLE
// FogOff ( your_side ) ;
26441: LD_OWVAR 2
26445: PPUSH
26446: CALL_OW 344
26450: END
// every 0 0$1 trigger StreamModeActive and sSun do
26451: LD_EXP 67
26455: PUSH
26456: LD_EXP 90
26460: AND
26461: IFFALSE 26489
26463: GO 26465
26465: DISABLE
// begin solar_recharge_percent := 0 ;
26466: LD_ADDR_OWVAR 79
26470: PUSH
26471: LD_INT 0
26473: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26474: LD_INT 10500
26476: PPUSH
26477: CALL_OW 67
// solar_recharge_percent := 100 ;
26481: LD_ADDR_OWVAR 79
26485: PUSH
26486: LD_INT 100
26488: ST_TO_ADDR
// end ;
26489: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26490: LD_EXP 67
26494: PUSH
26495: LD_EXP 91
26499: AND
26500: IFFALSE 26739
26502: GO 26504
26504: DISABLE
26505: LD_INT 0
26507: PPUSH
26508: PPUSH
26509: PPUSH
// begin tmp := [ ] ;
26510: LD_ADDR_VAR 0 3
26514: PUSH
26515: EMPTY
26516: ST_TO_ADDR
// for i := 1 to 6 do
26517: LD_ADDR_VAR 0 1
26521: PUSH
26522: DOUBLE
26523: LD_INT 1
26525: DEC
26526: ST_TO_ADDR
26527: LD_INT 6
26529: PUSH
26530: FOR_TO
26531: IFFALSE 26636
// begin uc_nation := nation_nature ;
26533: LD_ADDR_OWVAR 21
26537: PUSH
26538: LD_INT 0
26540: ST_TO_ADDR
// uc_side := 0 ;
26541: LD_ADDR_OWVAR 20
26545: PUSH
26546: LD_INT 0
26548: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26549: LD_ADDR_OWVAR 29
26553: PUSH
26554: LD_INT 12
26556: PUSH
26557: LD_INT 12
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// hc_agressivity := 20 ;
26564: LD_ADDR_OWVAR 35
26568: PUSH
26569: LD_INT 20
26571: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26572: LD_ADDR_OWVAR 28
26576: PUSH
26577: LD_INT 17
26579: ST_TO_ADDR
// hc_gallery :=  ;
26580: LD_ADDR_OWVAR 33
26584: PUSH
26585: LD_STRING 
26587: ST_TO_ADDR
// hc_name :=  ;
26588: LD_ADDR_OWVAR 26
26592: PUSH
26593: LD_STRING 
26595: ST_TO_ADDR
// un := CreateHuman ;
26596: LD_ADDR_VAR 0 2
26600: PUSH
26601: CALL_OW 44
26605: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26606: LD_VAR 0 2
26610: PPUSH
26611: LD_INT 1
26613: PPUSH
26614: CALL_OW 51
// tmp := tmp ^ un ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_VAR 0 3
26627: PUSH
26628: LD_VAR 0 2
26632: ADD
26633: ST_TO_ADDR
// end ;
26634: GO 26530
26636: POP
26637: POP
// repeat wait ( 0 0$1 ) ;
26638: LD_INT 35
26640: PPUSH
26641: CALL_OW 67
// for un in tmp do
26645: LD_ADDR_VAR 0 2
26649: PUSH
26650: LD_VAR 0 3
26654: PUSH
26655: FOR_IN
26656: IFFALSE 26730
// begin if IsDead ( un ) then
26658: LD_VAR 0 2
26662: PPUSH
26663: CALL_OW 301
26667: IFFALSE 26687
// begin tmp := tmp diff un ;
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_VAR 0 3
26678: PUSH
26679: LD_VAR 0 2
26683: DIFF
26684: ST_TO_ADDR
// continue ;
26685: GO 26655
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_INT 3
26694: PUSH
26695: LD_INT 22
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PPUSH
26709: CALL_OW 69
26713: PPUSH
26714: LD_VAR 0 2
26718: PPUSH
26719: CALL_OW 74
26723: PPUSH
26724: CALL_OW 115
// end ;
26728: GO 26655
26730: POP
26731: POP
// until not tmp ;
26732: LD_VAR 0 3
26736: NOT
26737: IFFALSE 26638
// end ;
26739: PPOPN 3
26741: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26742: LD_EXP 67
26746: PUSH
26747: LD_EXP 92
26751: AND
26752: IFFALSE 26806
26754: GO 26756
26756: DISABLE
// begin ToLua ( displayTroll(); ) ;
26757: LD_STRING displayTroll();
26759: PPUSH
26760: CALL_OW 559
// wait ( 3 3$00 ) ;
26764: LD_INT 6300
26766: PPUSH
26767: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26771: LD_STRING hideTroll();
26773: PPUSH
26774: CALL_OW 559
// wait ( 1 1$00 ) ;
26778: LD_INT 2100
26780: PPUSH
26781: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26785: LD_STRING displayTroll();
26787: PPUSH
26788: CALL_OW 559
// wait ( 1 1$00 ) ;
26792: LD_INT 2100
26794: PPUSH
26795: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26799: LD_STRING hideTroll();
26801: PPUSH
26802: CALL_OW 559
// end ;
26806: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26807: LD_EXP 67
26811: PUSH
26812: LD_EXP 93
26816: AND
26817: IFFALSE 26880
26819: GO 26821
26821: DISABLE
26822: LD_INT 0
26824: PPUSH
// begin p := 0 ;
26825: LD_ADDR_VAR 0 1
26829: PUSH
26830: LD_INT 0
26832: ST_TO_ADDR
// repeat game_speed := 1 ;
26833: LD_ADDR_OWVAR 65
26837: PUSH
26838: LD_INT 1
26840: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26841: LD_INT 35
26843: PPUSH
26844: CALL_OW 67
// p := p + 1 ;
26848: LD_ADDR_VAR 0 1
26852: PUSH
26853: LD_VAR 0 1
26857: PUSH
26858: LD_INT 1
26860: PLUS
26861: ST_TO_ADDR
// until p >= 60 ;
26862: LD_VAR 0 1
26866: PUSH
26867: LD_INT 60
26869: GREATEREQUAL
26870: IFFALSE 26833
// game_speed := 4 ;
26872: LD_ADDR_OWVAR 65
26876: PUSH
26877: LD_INT 4
26879: ST_TO_ADDR
// end ;
26880: PPOPN 1
26882: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26883: LD_EXP 67
26887: PUSH
26888: LD_EXP 94
26892: AND
26893: IFFALSE 27039
26895: GO 26897
26897: DISABLE
26898: LD_INT 0
26900: PPUSH
26901: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: LD_INT 22
26909: PUSH
26910: LD_OWVAR 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 30
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 30
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PPUSH
26951: CALL_OW 69
26955: ST_TO_ADDR
// if not depot then
26956: LD_VAR 0 1
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27039
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_VAR 0 1
26974: PUSH
26975: LD_INT 1
26977: PPUSH
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL_OW 12
26987: ARRAY
26988: PPUSH
26989: CALL_OW 274
26993: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26994: LD_VAR 0 2
26998: PPUSH
26999: LD_INT 1
27001: PPUSH
27002: LD_INT 0
27004: PPUSH
27005: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27009: LD_VAR 0 2
27013: PPUSH
27014: LD_INT 2
27016: PPUSH
27017: LD_INT 0
27019: PPUSH
27020: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: LD_INT 3
27031: PPUSH
27032: LD_INT 0
27034: PPUSH
27035: CALL_OW 277
// end ;
27039: PPOPN 2
27041: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27042: LD_EXP 67
27046: PUSH
27047: LD_EXP 95
27051: AND
27052: IFFALSE 27149
27054: GO 27056
27056: DISABLE
27057: LD_INT 0
27059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_OWVAR 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 21
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 3
27089: PUSH
27090: LD_INT 23
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: ST_TO_ADDR
// if not tmp then
27114: LD_VAR 0 1
27118: NOT
27119: IFFALSE 27123
// exit ;
27121: GO 27149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27123: LD_VAR 0 1
27127: PUSH
27128: LD_INT 1
27130: PPUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 12
27140: ARRAY
27141: PPUSH
27142: LD_INT 200
27144: PPUSH
27145: CALL_OW 234
// end ;
27149: PPOPN 1
27151: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27152: LD_EXP 67
27156: PUSH
27157: LD_EXP 96
27161: AND
27162: IFFALSE 27241
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PPUSH
27201: CALL_OW 69
27205: ST_TO_ADDR
// if not tmp then
27206: LD_VAR 0 1
27210: NOT
27211: IFFALSE 27215
// exit ;
27213: GO 27241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27215: LD_VAR 0 1
27219: PUSH
27220: LD_INT 1
27222: PPUSH
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 12
27232: ARRAY
27233: PPUSH
27234: LD_INT 60
27236: PPUSH
27237: CALL_OW 234
// end ;
27241: PPOPN 1
27243: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27244: LD_EXP 67
27248: PUSH
27249: LD_EXP 97
27253: AND
27254: IFFALSE 27353
27256: GO 27258
27258: DISABLE
27259: LD_INT 0
27261: PPUSH
27262: PPUSH
// begin enable ;
27263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: LD_INT 22
27271: PUSH
27272: LD_OWVAR 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 61
27283: PUSH
27284: EMPTY
27285: LIST
27286: PUSH
27287: LD_INT 33
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: PPUSH
27302: CALL_OW 69
27306: ST_TO_ADDR
// if not tmp then
27307: LD_VAR 0 1
27311: NOT
27312: IFFALSE 27316
// exit ;
27314: GO 27353
// for i in tmp do
27316: LD_ADDR_VAR 0 2
27320: PUSH
27321: LD_VAR 0 1
27325: PUSH
27326: FOR_IN
27327: IFFALSE 27351
// if IsControledBy ( i ) then
27329: LD_VAR 0 2
27333: PPUSH
27334: CALL_OW 312
27338: IFFALSE 27349
// ComUnlink ( i ) ;
27340: LD_VAR 0 2
27344: PPUSH
27345: CALL_OW 136
27349: GO 27326
27351: POP
27352: POP
// end ;
27353: PPOPN 2
27355: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27356: LD_EXP 67
27360: PUSH
27361: LD_EXP 98
27365: AND
27366: IFFALSE 27506
27368: GO 27370
27370: DISABLE
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
// begin ToLua ( displayPowell(); ) ;
27375: LD_STRING displayPowell();
27377: PPUSH
27378: CALL_OW 559
// uc_side := 0 ;
27382: LD_ADDR_OWVAR 20
27386: PUSH
27387: LD_INT 0
27389: ST_TO_ADDR
// uc_nation := 2 ;
27390: LD_ADDR_OWVAR 21
27394: PUSH
27395: LD_INT 2
27397: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27398: LD_ADDR_OWVAR 37
27402: PUSH
27403: LD_INT 14
27405: ST_TO_ADDR
// vc_engine := engine_siberite ;
27406: LD_ADDR_OWVAR 39
27410: PUSH
27411: LD_INT 3
27413: ST_TO_ADDR
// vc_control := control_apeman ;
27414: LD_ADDR_OWVAR 38
27418: PUSH
27419: LD_INT 5
27421: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27422: LD_ADDR_OWVAR 40
27426: PUSH
27427: LD_INT 29
27429: ST_TO_ADDR
// un := CreateVehicle ;
27430: LD_ADDR_VAR 0 2
27434: PUSH
27435: CALL_OW 45
27439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_INT 1
27447: PPUSH
27448: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27452: LD_INT 35
27454: PPUSH
27455: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27459: LD_VAR 0 2
27463: PPUSH
27464: LD_INT 22
27466: PUSH
27467: LD_OWVAR 2
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PPUSH
27476: CALL_OW 69
27480: PPUSH
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 74
27490: PPUSH
27491: CALL_OW 115
// until IsDead ( un ) ;
27495: LD_VAR 0 2
27499: PPUSH
27500: CALL_OW 301
27504: IFFALSE 27452
// end ;
27506: PPOPN 2
27508: END
// every 0 0$1 trigger StreamModeActive and sStu do
27509: LD_EXP 67
27513: PUSH
27514: LD_EXP 106
27518: AND
27519: IFFALSE 27535
27521: GO 27523
27523: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27524: LD_STRING displayStucuk();
27526: PPUSH
27527: CALL_OW 559
// ResetFog ;
27531: CALL_OW 335
// end ;
27535: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27536: LD_EXP 67
27540: PUSH
27541: LD_EXP 99
27545: AND
27546: IFFALSE 27687
27548: GO 27550
27550: DISABLE
27551: LD_INT 0
27553: PPUSH
27554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27555: LD_ADDR_VAR 0 2
27559: PUSH
27560: LD_INT 22
27562: PUSH
27563: LD_OWVAR 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 21
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: ST_TO_ADDR
// if not tmp then
27591: LD_VAR 0 2
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27687
// un := tmp [ rand ( 1 , tmp ) ] ;
27600: LD_ADDR_VAR 0 1
27604: PUSH
27605: LD_VAR 0 2
27609: PUSH
27610: LD_INT 1
27612: PPUSH
27613: LD_VAR 0 2
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27624: LD_VAR 0 1
27628: PPUSH
27629: LD_INT 0
27631: PPUSH
27632: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27636: LD_VAR 0 1
27640: PPUSH
27641: LD_OWVAR 3
27645: PUSH
27646: LD_VAR 0 1
27650: DIFF
27651: PPUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 74
27661: PPUSH
27662: CALL_OW 115
// wait ( 0 0$20 ) ;
27666: LD_INT 700
27668: PPUSH
27669: CALL_OW 67
// SetSide ( un , your_side ) ;
27673: LD_VAR 0 1
27677: PPUSH
27678: LD_OWVAR 2
27682: PPUSH
27683: CALL_OW 235
// end ;
27687: PPOPN 2
27689: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27690: LD_EXP 67
27694: PUSH
27695: LD_EXP 100
27699: AND
27700: IFFALSE 27806
27702: GO 27704
27704: DISABLE
27705: LD_INT 0
27707: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27708: LD_ADDR_VAR 0 1
27712: PUSH
27713: LD_INT 22
27715: PUSH
27716: LD_OWVAR 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 30
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 69
27761: ST_TO_ADDR
// if not depot then
27762: LD_VAR 0 1
27766: NOT
27767: IFFALSE 27771
// exit ;
27769: GO 27806
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PPUSH
27780: CALL_OW 250
27784: PPUSH
27785: LD_VAR 0 1
27789: PUSH
27790: LD_INT 1
27792: ARRAY
27793: PPUSH
27794: CALL_OW 251
27798: PPUSH
27799: LD_INT 70
27801: PPUSH
27802: CALL_OW 495
// end ;
27806: PPOPN 1
27808: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27809: LD_EXP 67
27813: PUSH
27814: LD_EXP 101
27818: AND
27819: IFFALSE 28030
27821: GO 27823
27823: DISABLE
27824: LD_INT 0
27826: PPUSH
27827: PPUSH
27828: PPUSH
27829: PPUSH
27830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27831: LD_ADDR_VAR 0 5
27835: PUSH
27836: LD_INT 22
27838: PUSH
27839: LD_OWVAR 2
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 21
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PPUSH
27862: CALL_OW 69
27866: ST_TO_ADDR
// if not tmp then
27867: LD_VAR 0 5
27871: NOT
27872: IFFALSE 27876
// exit ;
27874: GO 28030
// for i in tmp do
27876: LD_ADDR_VAR 0 1
27880: PUSH
27881: LD_VAR 0 5
27885: PUSH
27886: FOR_IN
27887: IFFALSE 28028
// begin d := rand ( 0 , 5 ) ;
27889: LD_ADDR_VAR 0 4
27893: PUSH
27894: LD_INT 0
27896: PPUSH
27897: LD_INT 5
27899: PPUSH
27900: CALL_OW 12
27904: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27905: LD_ADDR_VAR 0 2
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 250
27919: PPUSH
27920: LD_VAR 0 4
27924: PPUSH
27925: LD_INT 3
27927: PPUSH
27928: LD_INT 12
27930: PPUSH
27931: CALL_OW 12
27935: PPUSH
27936: CALL_OW 272
27940: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_VAR 0 1
27950: PPUSH
27951: CALL_OW 251
27955: PPUSH
27956: LD_VAR 0 4
27960: PPUSH
27961: LD_INT 3
27963: PPUSH
27964: LD_INT 12
27966: PPUSH
27967: CALL_OW 12
27971: PPUSH
27972: CALL_OW 273
27976: ST_TO_ADDR
// if ValidHex ( x , y ) then
27977: LD_VAR 0 2
27981: PPUSH
27982: LD_VAR 0 3
27986: PPUSH
27987: CALL_OW 488
27991: IFFALSE 28026
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27993: LD_VAR 0 1
27997: PPUSH
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 3
28007: PPUSH
28008: LD_INT 3
28010: PPUSH
28011: LD_INT 6
28013: PPUSH
28014: CALL_OW 12
28018: PPUSH
28019: LD_INT 1
28021: PPUSH
28022: CALL_OW 483
// end ;
28026: GO 27886
28028: POP
28029: POP
// end ;
28030: PPOPN 5
28032: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28033: LD_EXP 67
28037: PUSH
28038: LD_EXP 102
28042: AND
28043: IFFALSE 28137
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 32
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 21
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: ST_TO_ADDR
// if not tmp then
28099: LD_VAR 0 2
28103: NOT
28104: IFFALSE 28108
// exit ;
28106: GO 28137
// for i in tmp do
28108: LD_ADDR_VAR 0 1
28112: PUSH
28113: LD_VAR 0 2
28117: PUSH
28118: FOR_IN
28119: IFFALSE 28135
// SetFuel ( i , 0 ) ;
28121: LD_VAR 0 1
28125: PPUSH
28126: LD_INT 0
28128: PPUSH
28129: CALL_OW 240
28133: GO 28118
28135: POP
28136: POP
// end ;
28137: PPOPN 2
28139: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28140: LD_EXP 67
28144: PUSH
28145: LD_EXP 103
28149: AND
28150: IFFALSE 28216
28152: GO 28154
28154: DISABLE
28155: LD_INT 0
28157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28158: LD_ADDR_VAR 0 1
28162: PUSH
28163: LD_INT 22
28165: PUSH
28166: LD_OWVAR 2
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 30
28177: PUSH
28178: LD_INT 29
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: ST_TO_ADDR
// if not tmp then
28194: LD_VAR 0 1
28198: NOT
28199: IFFALSE 28203
// exit ;
28201: GO 28216
// DestroyUnit ( tmp [ 1 ] ) ;
28203: LD_VAR 0 1
28207: PUSH
28208: LD_INT 1
28210: ARRAY
28211: PPUSH
28212: CALL_OW 65
// end ;
28216: PPOPN 1
28218: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28219: LD_EXP 67
28223: PUSH
28224: LD_EXP 105
28228: AND
28229: IFFALSE 28358
28231: GO 28233
28233: DISABLE
28234: LD_INT 0
28236: PPUSH
// begin uc_side := 0 ;
28237: LD_ADDR_OWVAR 20
28241: PUSH
28242: LD_INT 0
28244: ST_TO_ADDR
// uc_nation := nation_arabian ;
28245: LD_ADDR_OWVAR 21
28249: PUSH
28250: LD_INT 2
28252: ST_TO_ADDR
// hc_gallery :=  ;
28253: LD_ADDR_OWVAR 33
28257: PUSH
28258: LD_STRING 
28260: ST_TO_ADDR
// hc_name :=  ;
28261: LD_ADDR_OWVAR 26
28265: PUSH
28266: LD_STRING 
28268: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28269: LD_INT 1
28271: PPUSH
28272: LD_INT 11
28274: PPUSH
28275: LD_INT 10
28277: PPUSH
28278: CALL_OW 380
// un := CreateHuman ;
28282: LD_ADDR_VAR 0 1
28286: PUSH
28287: CALL_OW 44
28291: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28292: LD_VAR 0 1
28296: PPUSH
28297: LD_INT 1
28299: PPUSH
28300: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28304: LD_INT 35
28306: PPUSH
28307: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28311: LD_VAR 0 1
28315: PPUSH
28316: LD_INT 22
28318: PUSH
28319: LD_OWVAR 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PPUSH
28328: CALL_OW 69
28332: PPUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 74
28342: PPUSH
28343: CALL_OW 115
// until IsDead ( un ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: CALL_OW 301
28356: IFFALSE 28304
// end ;
28358: PPOPN 1
28360: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28361: LD_EXP 67
28365: PUSH
28366: LD_EXP 107
28370: AND
28371: IFFALSE 28383
28373: GO 28375
28375: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28376: LD_STRING earthquake(getX(game), 0, 32)
28378: PPUSH
28379: CALL_OW 559
28383: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28384: LD_EXP 67
28388: PUSH
28389: LD_EXP 108
28393: AND
28394: IFFALSE 28485
28396: GO 28398
28398: DISABLE
28399: LD_INT 0
28401: PPUSH
// begin enable ;
28402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28403: LD_ADDR_VAR 0 1
28407: PUSH
28408: LD_INT 22
28410: PUSH
28411: LD_OWVAR 2
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 21
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 33
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: ST_TO_ADDR
// if not tmp then
28450: LD_VAR 0 1
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 28485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28459: LD_VAR 0 1
28463: PUSH
28464: LD_INT 1
28466: PPUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 12
28476: ARRAY
28477: PPUSH
28478: LD_INT 1
28480: PPUSH
28481: CALL_OW 234
// end ;
28485: PPOPN 1
28487: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28488: LD_EXP 67
28492: PUSH
28493: LD_EXP 109
28497: AND
28498: IFFALSE 28639
28500: GO 28502
28502: DISABLE
28503: LD_INT 0
28505: PPUSH
28506: PPUSH
28507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 22
28515: PUSH
28516: LD_OWVAR 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 25
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PPUSH
28539: CALL_OW 69
28543: ST_TO_ADDR
// if not tmp then
28544: LD_VAR 0 3
28548: NOT
28549: IFFALSE 28553
// exit ;
28551: GO 28639
// un := tmp [ rand ( 1 , tmp ) ] ;
28553: LD_ADDR_VAR 0 2
28557: PUSH
28558: LD_VAR 0 3
28562: PUSH
28563: LD_INT 1
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: CALL_OW 12
28575: ARRAY
28576: ST_TO_ADDR
// if Crawls ( un ) then
28577: LD_VAR 0 2
28581: PPUSH
28582: CALL_OW 318
28586: IFFALSE 28597
// ComWalk ( un ) ;
28588: LD_VAR 0 2
28592: PPUSH
28593: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_INT 9
28604: PPUSH
28605: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28609: LD_INT 28
28611: PPUSH
28612: LD_OWVAR 2
28616: PPUSH
28617: LD_INT 2
28619: PPUSH
28620: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28624: LD_INT 29
28626: PPUSH
28627: LD_OWVAR 2
28631: PPUSH
28632: LD_INT 2
28634: PPUSH
28635: CALL_OW 322
// end ;
28639: PPOPN 3
28641: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28642: LD_EXP 67
28646: PUSH
28647: LD_EXP 110
28651: AND
28652: IFFALSE 28763
28654: GO 28656
28656: DISABLE
28657: LD_INT 0
28659: PPUSH
28660: PPUSH
28661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28662: LD_ADDR_VAR 0 3
28666: PUSH
28667: LD_INT 22
28669: PUSH
28670: LD_OWVAR 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 25
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PPUSH
28693: CALL_OW 69
28697: ST_TO_ADDR
// if not tmp then
28698: LD_VAR 0 3
28702: NOT
28703: IFFALSE 28707
// exit ;
28705: GO 28763
// un := tmp [ rand ( 1 , tmp ) ] ;
28707: LD_ADDR_VAR 0 2
28711: PUSH
28712: LD_VAR 0 3
28716: PUSH
28717: LD_INT 1
28719: PPUSH
28720: LD_VAR 0 3
28724: PPUSH
28725: CALL_OW 12
28729: ARRAY
28730: ST_TO_ADDR
// if Crawls ( un ) then
28731: LD_VAR 0 2
28735: PPUSH
28736: CALL_OW 318
28740: IFFALSE 28751
// ComWalk ( un ) ;
28742: LD_VAR 0 2
28746: PPUSH
28747: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_INT 8
28758: PPUSH
28759: CALL_OW 336
// end ;
28763: PPOPN 3
28765: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28766: LD_EXP 67
28770: PUSH
28771: LD_EXP 111
28775: AND
28776: IFFALSE 28920
28778: GO 28780
28780: DISABLE
28781: LD_INT 0
28783: PPUSH
28784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28785: LD_ADDR_VAR 0 2
28789: PUSH
28790: LD_INT 22
28792: PUSH
28793: LD_OWVAR 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 21
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 34
28817: PUSH
28818: LD_INT 12
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 34
28827: PUSH
28828: LD_INT 51
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 34
28837: PUSH
28838: LD_INT 32
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: PPUSH
28856: CALL_OW 69
28860: ST_TO_ADDR
// if not tmp then
28861: LD_VAR 0 2
28865: NOT
28866: IFFALSE 28870
// exit ;
28868: GO 28920
// for i in tmp do
28870: LD_ADDR_VAR 0 1
28874: PUSH
28875: LD_VAR 0 2
28879: PUSH
28880: FOR_IN
28881: IFFALSE 28918
// if GetCargo ( i , mat_artifact ) = 0 then
28883: LD_VAR 0 1
28887: PPUSH
28888: LD_INT 4
28890: PPUSH
28891: CALL_OW 289
28895: PUSH
28896: LD_INT 0
28898: EQUAL
28899: IFFALSE 28916
// SetCargo ( i , mat_siberit , 100 ) ;
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_INT 3
28908: PPUSH
28909: LD_INT 100
28911: PPUSH
28912: CALL_OW 290
28916: GO 28880
28918: POP
28919: POP
// end ;
28920: PPOPN 2
28922: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28923: LD_EXP 67
28927: PUSH
28928: LD_EXP 112
28932: AND
28933: IFFALSE 29116
28935: GO 28937
28937: DISABLE
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_INT 22
28949: PUSH
28950: LD_OWVAR 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 69
28963: ST_TO_ADDR
// if not tmp then
28964: LD_VAR 0 2
28968: NOT
28969: IFFALSE 28973
// exit ;
28971: GO 29116
// for i := 1 to 2 do
28973: LD_ADDR_VAR 0 1
28977: PUSH
28978: DOUBLE
28979: LD_INT 1
28981: DEC
28982: ST_TO_ADDR
28983: LD_INT 2
28985: PUSH
28986: FOR_TO
28987: IFFALSE 29114
// begin uc_side := your_side ;
28989: LD_ADDR_OWVAR 20
28993: PUSH
28994: LD_OWVAR 2
28998: ST_TO_ADDR
// uc_nation := nation_american ;
28999: LD_ADDR_OWVAR 21
29003: PUSH
29004: LD_INT 1
29006: ST_TO_ADDR
// vc_chassis := us_morphling ;
29007: LD_ADDR_OWVAR 37
29011: PUSH
29012: LD_INT 5
29014: ST_TO_ADDR
// vc_engine := engine_siberite ;
29015: LD_ADDR_OWVAR 39
29019: PUSH
29020: LD_INT 3
29022: ST_TO_ADDR
// vc_control := control_computer ;
29023: LD_ADDR_OWVAR 38
29027: PUSH
29028: LD_INT 3
29030: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29031: LD_ADDR_OWVAR 40
29035: PUSH
29036: LD_INT 10
29038: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29039: LD_VAR 0 2
29043: PUSH
29044: LD_INT 1
29046: ARRAY
29047: PPUSH
29048: CALL_OW 310
29052: NOT
29053: IFFALSE 29100
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29055: CALL_OW 45
29059: PPUSH
29060: LD_VAR 0 2
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: PPUSH
29069: CALL_OW 250
29073: PPUSH
29074: LD_VAR 0 2
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: PPUSH
29083: CALL_OW 251
29087: PPUSH
29088: LD_INT 12
29090: PPUSH
29091: LD_INT 1
29093: PPUSH
29094: CALL_OW 50
29098: GO 29112
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29100: CALL_OW 45
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 51
// end ;
29112: GO 28986
29114: POP
29115: POP
// end ;
29116: PPOPN 2
29118: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29119: LD_EXP 67
29123: PUSH
29124: LD_EXP 113
29128: AND
29129: IFFALSE 29351
29131: GO 29133
29133: DISABLE
29134: LD_INT 0
29136: PPUSH
29137: PPUSH
29138: PPUSH
29139: PPUSH
29140: PPUSH
29141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29142: LD_ADDR_VAR 0 6
29146: PUSH
29147: LD_INT 22
29149: PUSH
29150: LD_OWVAR 2
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 21
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 23
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PPUSH
29191: CALL_OW 69
29195: ST_TO_ADDR
// if not tmp then
29196: LD_VAR 0 6
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 29351
// s1 := rand ( 1 , 4 ) ;
29205: LD_ADDR_VAR 0 2
29209: PUSH
29210: LD_INT 1
29212: PPUSH
29213: LD_INT 4
29215: PPUSH
29216: CALL_OW 12
29220: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29221: LD_ADDR_VAR 0 4
29225: PUSH
29226: LD_VAR 0 6
29230: PUSH
29231: LD_INT 1
29233: ARRAY
29234: PPUSH
29235: LD_VAR 0 2
29239: PPUSH
29240: CALL_OW 259
29244: ST_TO_ADDR
// if s1 = 1 then
29245: LD_VAR 0 2
29249: PUSH
29250: LD_INT 1
29252: EQUAL
29253: IFFALSE 29273
// s2 := rand ( 2 , 4 ) else
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 2
29262: PPUSH
29263: LD_INT 4
29265: PPUSH
29266: CALL_OW 12
29270: ST_TO_ADDR
29271: GO 29281
// s2 := 1 ;
29273: LD_ADDR_VAR 0 3
29277: PUSH
29278: LD_INT 1
29280: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: LD_VAR 0 6
29290: PUSH
29291: LD_INT 1
29293: ARRAY
29294: PPUSH
29295: LD_VAR 0 3
29299: PPUSH
29300: CALL_OW 259
29304: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29305: LD_VAR 0 6
29309: PUSH
29310: LD_INT 1
29312: ARRAY
29313: PPUSH
29314: LD_VAR 0 2
29318: PPUSH
29319: LD_VAR 0 5
29323: PPUSH
29324: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29328: LD_VAR 0 6
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 3
29341: PPUSH
29342: LD_VAR 0 4
29346: PPUSH
29347: CALL_OW 237
// end ;
29351: PPOPN 6
29353: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29354: LD_EXP 67
29358: PUSH
29359: LD_EXP 114
29363: AND
29364: IFFALSE 29443
29366: GO 29368
29368: DISABLE
29369: LD_INT 0
29371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29372: LD_ADDR_VAR 0 1
29376: PUSH
29377: LD_INT 22
29379: PUSH
29380: LD_OWVAR 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 30
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PPUSH
29403: CALL_OW 69
29407: ST_TO_ADDR
// if not tmp then
29408: LD_VAR 0 1
29412: NOT
29413: IFFALSE 29417
// exit ;
29415: GO 29443
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29417: LD_VAR 0 1
29421: PUSH
29422: LD_INT 1
29424: PPUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 12
29434: ARRAY
29435: PPUSH
29436: LD_INT 1
29438: PPUSH
29439: CALL_OW 234
// end ;
29443: PPOPN 1
29445: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29446: LD_EXP 67
29450: PUSH
29451: LD_EXP 115
29455: AND
29456: IFFALSE 29568
29458: GO 29460
29460: DISABLE
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29465: LD_ADDR_VAR 0 2
29469: PUSH
29470: LD_INT 22
29472: PUSH
29473: LD_OWVAR 2
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: LD_INT 30
29487: PUSH
29488: LD_INT 27
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 30
29497: PUSH
29498: LD_INT 26
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 30
29507: PUSH
29508: LD_INT 28
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 2
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29568
// for i in tmp do
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: FOR_IN
29550: IFFALSE 29566
// SetLives ( i , 1 ) ;
29552: LD_VAR 0 1
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 234
29564: GO 29549
29566: POP
29567: POP
// end ;
29568: PPOPN 2
29570: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29571: LD_EXP 67
29575: PUSH
29576: LD_EXP 116
29580: AND
29581: IFFALSE 29855
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
// begin i := rand ( 1 , 7 ) ;
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_INT 1
29598: PPUSH
29599: LD_INT 7
29601: PPUSH
29602: CALL_OW 12
29606: ST_TO_ADDR
// case i of 1 :
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 1
29614: DOUBLE
29615: EQUAL
29616: IFTRUE 29620
29618: GO 29630
29620: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29621: LD_STRING earthquake(getX(game), 0, 32)
29623: PPUSH
29624: CALL_OW 559
29628: GO 29855
29630: LD_INT 2
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29652
29638: POP
// begin ToLua ( displayStucuk(); ) ;
29639: LD_STRING displayStucuk();
29641: PPUSH
29642: CALL_OW 559
// ResetFog ;
29646: CALL_OW 335
// end ; 3 :
29650: GO 29855
29652: LD_INT 3
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29764
29660: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29661: LD_ADDR_VAR 0 2
29665: PUSH
29666: LD_INT 22
29668: PUSH
29669: LD_OWVAR 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 25
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 69
29696: ST_TO_ADDR
// if not tmp then
29697: LD_VAR 0 2
29701: NOT
29702: IFFALSE 29706
// exit ;
29704: GO 29855
// un := tmp [ rand ( 1 , tmp ) ] ;
29706: LD_ADDR_VAR 0 3
29710: PUSH
29711: LD_VAR 0 2
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: CALL_OW 12
29728: ARRAY
29729: ST_TO_ADDR
// if Crawls ( un ) then
29730: LD_VAR 0 3
29734: PPUSH
29735: CALL_OW 318
29739: IFFALSE 29750
// ComWalk ( un ) ;
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29750: LD_VAR 0 3
29754: PPUSH
29755: LD_INT 8
29757: PPUSH
29758: CALL_OW 336
// end ; 4 :
29762: GO 29855
29764: LD_INT 4
29766: DOUBLE
29767: EQUAL
29768: IFTRUE 29772
29770: GO 29833
29772: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29773: LD_ADDR_VAR 0 2
29777: PUSH
29778: LD_INT 22
29780: PUSH
29781: LD_OWVAR 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 30
29792: PUSH
29793: LD_INT 29
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PPUSH
29804: CALL_OW 69
29808: ST_TO_ADDR
// if not tmp then
29809: LD_VAR 0 2
29813: NOT
29814: IFFALSE 29818
// exit ;
29816: GO 29855
// DestroyUnit ( tmp [ 1 ] ) ;
29818: LD_VAR 0 2
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: CALL_OW 65
// end ; 5 .. 7 :
29831: GO 29855
29833: LD_INT 5
29835: DOUBLE
29836: GREATEREQUAL
29837: IFFALSE 29845
29839: LD_INT 7
29841: DOUBLE
29842: LESSEQUAL
29843: IFTRUE 29847
29845: GO 29854
29847: POP
// StreamSibBomb ; end ;
29848: CALL 26105 0 0
29852: GO 29855
29854: POP
// end ;
29855: PPOPN 3
29857: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29858: LD_EXP 67
29862: PUSH
29863: LD_EXP 117
29867: AND
29868: IFFALSE 30024
29870: GO 29872
29872: DISABLE
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
29877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29878: LD_ADDR_VAR 0 2
29882: PUSH
29883: LD_INT 81
29885: PUSH
29886: LD_OWVAR 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 21
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 21
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: ST_TO_ADDR
// if not tmp then
29932: LD_VAR 0 2
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 30024
// p := 0 ;
29941: LD_ADDR_VAR 0 3
29945: PUSH
29946: LD_INT 0
29948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29949: LD_INT 35
29951: PPUSH
29952: CALL_OW 67
// p := p + 1 ;
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_VAR 0 3
29965: PUSH
29966: LD_INT 1
29968: PLUS
29969: ST_TO_ADDR
// for i in tmp do
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_VAR 0 2
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30012
// if GetLives ( i ) < 1000 then
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL_OW 256
29992: PUSH
29993: LD_INT 1000
29995: LESS
29996: IFFALSE 30010
// SetLives ( i , 1000 ) ;
29998: LD_VAR 0 1
30002: PPUSH
30003: LD_INT 1000
30005: PPUSH
30006: CALL_OW 234
30010: GO 29980
30012: POP
30013: POP
// until p > 20 ;
30014: LD_VAR 0 3
30018: PUSH
30019: LD_INT 20
30021: GREATER
30022: IFFALSE 29949
// end ;
30024: PPOPN 3
30026: END
// every 0 0$1 trigger StreamModeActive and sTime do
30027: LD_EXP 67
30031: PUSH
30032: LD_EXP 118
30036: AND
30037: IFFALSE 30072
30039: GO 30041
30041: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30042: LD_INT 28
30044: PPUSH
30045: LD_OWVAR 2
30049: PPUSH
30050: LD_INT 2
30052: PPUSH
30053: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30057: LD_INT 30
30059: PPUSH
30060: LD_OWVAR 2
30064: PPUSH
30065: LD_INT 2
30067: PPUSH
30068: CALL_OW 322
// end ;
30072: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30073: LD_EXP 67
30077: PUSH
30078: LD_EXP 119
30082: AND
30083: IFFALSE 30204
30085: GO 30087
30087: DISABLE
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_OWVAR 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 21
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: LD_INT 23
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: ST_TO_ADDR
// if not tmp then
30146: LD_VAR 0 2
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30204
// for i in tmp do
30155: LD_ADDR_VAR 0 1
30159: PUSH
30160: LD_VAR 0 2
30164: PUSH
30165: FOR_IN
30166: IFFALSE 30202
// begin if Crawls ( i ) then
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 318
30177: IFFALSE 30188
// ComWalk ( i ) ;
30179: LD_VAR 0 1
30183: PPUSH
30184: CALL_OW 138
// SetClass ( i , 2 ) ;
30188: LD_VAR 0 1
30192: PPUSH
30193: LD_INT 2
30195: PPUSH
30196: CALL_OW 336
// end ;
30200: GO 30165
30202: POP
30203: POP
// end ;
30204: PPOPN 2
30206: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30207: LD_EXP 67
30211: PUSH
30212: LD_EXP 120
30216: AND
30217: IFFALSE 30498
30219: GO 30221
30221: DISABLE
30222: LD_INT 0
30224: PPUSH
30225: PPUSH
30226: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30227: LD_OWVAR 2
30231: PPUSH
30232: LD_INT 9
30234: PPUSH
30235: LD_INT 1
30237: PPUSH
30238: LD_INT 1
30240: PPUSH
30241: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30245: LD_INT 9
30247: PPUSH
30248: LD_OWVAR 2
30252: PPUSH
30253: CALL_OW 343
// uc_side := 9 ;
30257: LD_ADDR_OWVAR 20
30261: PUSH
30262: LD_INT 9
30264: ST_TO_ADDR
// uc_nation := 2 ;
30265: LD_ADDR_OWVAR 21
30269: PUSH
30270: LD_INT 2
30272: ST_TO_ADDR
// hc_name := Dark Warrior ;
30273: LD_ADDR_OWVAR 26
30277: PUSH
30278: LD_STRING Dark Warrior
30280: ST_TO_ADDR
// hc_gallery :=  ;
30281: LD_ADDR_OWVAR 33
30285: PUSH
30286: LD_STRING 
30288: ST_TO_ADDR
// hc_noskilllimit := true ;
30289: LD_ADDR_OWVAR 76
30293: PUSH
30294: LD_INT 1
30296: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30297: LD_ADDR_OWVAR 31
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 30
30307: PUSH
30308: LD_INT 30
30310: PUSH
30311: LD_INT 30
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: ST_TO_ADDR
// un := CreateHuman ;
30320: LD_ADDR_VAR 0 3
30324: PUSH
30325: CALL_OW 44
30329: ST_TO_ADDR
// hc_noskilllimit := false ;
30330: LD_ADDR_OWVAR 76
30334: PUSH
30335: LD_INT 0
30337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30338: LD_VAR 0 3
30342: PPUSH
30343: LD_INT 1
30345: PPUSH
30346: CALL_OW 51
// p := 0 ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_INT 0
30357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30358: LD_INT 35
30360: PPUSH
30361: CALL_OW 67
// p := p + 1 ;
30365: LD_ADDR_VAR 0 2
30369: PUSH
30370: LD_VAR 0 2
30374: PUSH
30375: LD_INT 1
30377: PLUS
30378: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30379: LD_VAR 0 3
30383: PPUSH
30384: CALL_OW 256
30388: PUSH
30389: LD_INT 1000
30391: LESS
30392: IFFALSE 30406
// SetLives ( un , 1000 ) ;
30394: LD_VAR 0 3
30398: PPUSH
30399: LD_INT 1000
30401: PPUSH
30402: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30406: LD_VAR 0 3
30410: PPUSH
30411: LD_INT 81
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 91
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 30
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: PPUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: CALL_OW 74
30457: PPUSH
30458: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30462: LD_VAR 0 2
30466: PUSH
30467: LD_INT 60
30469: GREATER
30470: PUSH
30471: LD_VAR 0 3
30475: PPUSH
30476: CALL_OW 301
30480: OR
30481: IFFALSE 30358
// if un then
30483: LD_VAR 0 3
30487: IFFALSE 30498
// RemoveUnit ( un ) ;
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 64
// end ;
30498: PPOPN 3
30500: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30501: LD_INT 0
30503: PPUSH
// case cmd of 301 :
30504: LD_VAR 0 1
30508: PUSH
30509: LD_INT 301
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30549
30517: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30518: LD_VAR 0 6
30522: PPUSH
30523: LD_VAR 0 7
30527: PPUSH
30528: LD_VAR 0 8
30532: PPUSH
30533: LD_VAR 0 4
30537: PPUSH
30538: LD_VAR 0 5
30542: PPUSH
30543: CALL 31750 0 5
30547: GO 30670
30549: LD_INT 302
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30594
30557: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30558: LD_VAR 0 6
30562: PPUSH
30563: LD_VAR 0 7
30567: PPUSH
30568: LD_VAR 0 8
30572: PPUSH
30573: LD_VAR 0 9
30577: PPUSH
30578: LD_VAR 0 4
30582: PPUSH
30583: LD_VAR 0 5
30587: PPUSH
30588: CALL 31841 0 6
30592: GO 30670
30594: LD_INT 303
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30639
30602: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30603: LD_VAR 0 6
30607: PPUSH
30608: LD_VAR 0 7
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: LD_VAR 0 9
30622: PPUSH
30623: LD_VAR 0 4
30627: PPUSH
30628: LD_VAR 0 5
30632: PPUSH
30633: CALL 30675 0 6
30637: GO 30670
30639: LD_INT 304
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30669
30647: POP
// hHackTeleport ( unit , x , y ) ; end ;
30648: LD_VAR 0 2
30652: PPUSH
30653: LD_VAR 0 4
30657: PPUSH
30658: LD_VAR 0 5
30662: PPUSH
30663: CALL 32434 0 3
30667: GO 30670
30669: POP
// end ;
30670: LD_VAR 0 12
30674: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30675: LD_INT 0
30677: PPUSH
30678: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30679: LD_VAR 0 1
30683: PUSH
30684: LD_INT 1
30686: LESS
30687: PUSH
30688: LD_VAR 0 1
30692: PUSH
30693: LD_INT 3
30695: GREATER
30696: OR
30697: PUSH
30698: LD_VAR 0 5
30702: PPUSH
30703: LD_VAR 0 6
30707: PPUSH
30708: CALL_OW 428
30712: OR
30713: IFFALSE 30717
// exit ;
30715: GO 31437
// uc_side := your_side ;
30717: LD_ADDR_OWVAR 20
30721: PUSH
30722: LD_OWVAR 2
30726: ST_TO_ADDR
// uc_nation := nation ;
30727: LD_ADDR_OWVAR 21
30731: PUSH
30732: LD_VAR 0 1
30736: ST_TO_ADDR
// bc_level = 1 ;
30737: LD_ADDR_OWVAR 43
30741: PUSH
30742: LD_INT 1
30744: ST_TO_ADDR
// case btype of 1 :
30745: LD_VAR 0 2
30749: PUSH
30750: LD_INT 1
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30769
30758: POP
// bc_type := b_depot ; 2 :
30759: LD_ADDR_OWVAR 42
30763: PUSH
30764: LD_INT 0
30766: ST_TO_ADDR
30767: GO 31381
30769: LD_INT 2
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30788
30777: POP
// bc_type := b_warehouse ; 3 :
30778: LD_ADDR_OWVAR 42
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
30786: GO 31381
30788: LD_INT 3
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30807
30796: POP
// bc_type := b_lab ; 4 .. 9 :
30797: LD_ADDR_OWVAR 42
30801: PUSH
30802: LD_INT 6
30804: ST_TO_ADDR
30805: GO 31381
30807: LD_INT 4
30809: DOUBLE
30810: GREATEREQUAL
30811: IFFALSE 30819
30813: LD_INT 9
30815: DOUBLE
30816: LESSEQUAL
30817: IFTRUE 30821
30819: GO 30873
30821: POP
// begin bc_type := b_lab_half ;
30822: LD_ADDR_OWVAR 42
30826: PUSH
30827: LD_INT 7
30829: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30830: LD_ADDR_OWVAR 44
30834: PUSH
30835: LD_INT 10
30837: PUSH
30838: LD_INT 11
30840: PUSH
30841: LD_INT 12
30843: PUSH
30844: LD_INT 15
30846: PUSH
30847: LD_INT 14
30849: PUSH
30850: LD_INT 13
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 3
30868: MINUS
30869: ARRAY
30870: ST_TO_ADDR
// end ; 10 .. 13 :
30871: GO 31381
30873: LD_INT 10
30875: DOUBLE
30876: GREATEREQUAL
30877: IFFALSE 30885
30879: LD_INT 13
30881: DOUBLE
30882: LESSEQUAL
30883: IFTRUE 30887
30885: GO 30964
30887: POP
// begin bc_type := b_lab_full ;
30888: LD_ADDR_OWVAR 42
30892: PUSH
30893: LD_INT 8
30895: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30896: LD_ADDR_OWVAR 44
30900: PUSH
30901: LD_INT 10
30903: PUSH
30904: LD_INT 12
30906: PUSH
30907: LD_INT 14
30909: PUSH
30910: LD_INT 13
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_INT 9
30926: MINUS
30927: ARRAY
30928: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30929: LD_ADDR_OWVAR 45
30933: PUSH
30934: LD_INT 11
30936: PUSH
30937: LD_INT 15
30939: PUSH
30940: LD_INT 12
30942: PUSH
30943: LD_INT 15
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: LD_INT 9
30959: MINUS
30960: ARRAY
30961: ST_TO_ADDR
// end ; 14 :
30962: GO 31381
30964: LD_INT 14
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 30983
30972: POP
// bc_type := b_workshop ; 15 :
30973: LD_ADDR_OWVAR 42
30977: PUSH
30978: LD_INT 2
30980: ST_TO_ADDR
30981: GO 31381
30983: LD_INT 15
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31002
30991: POP
// bc_type := b_factory ; 16 :
30992: LD_ADDR_OWVAR 42
30996: PUSH
30997: LD_INT 3
30999: ST_TO_ADDR
31000: GO 31381
31002: LD_INT 16
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31021
31010: POP
// bc_type := b_ext_gun ; 17 :
31011: LD_ADDR_OWVAR 42
31015: PUSH
31016: LD_INT 17
31018: ST_TO_ADDR
31019: GO 31381
31021: LD_INT 17
31023: DOUBLE
31024: EQUAL
31025: IFTRUE 31029
31027: GO 31057
31029: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31030: LD_ADDR_OWVAR 42
31034: PUSH
31035: LD_INT 19
31037: PUSH
31038: LD_INT 23
31040: PUSH
31041: LD_INT 19
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: PUSH
31049: LD_VAR 0 1
31053: ARRAY
31054: ST_TO_ADDR
31055: GO 31381
31057: LD_INT 18
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31076
31065: POP
// bc_type := b_ext_radar ; 19 :
31066: LD_ADDR_OWVAR 42
31070: PUSH
31071: LD_INT 20
31073: ST_TO_ADDR
31074: GO 31381
31076: LD_INT 19
31078: DOUBLE
31079: EQUAL
31080: IFTRUE 31084
31082: GO 31095
31084: POP
// bc_type := b_ext_radio ; 20 :
31085: LD_ADDR_OWVAR 42
31089: PUSH
31090: LD_INT 22
31092: ST_TO_ADDR
31093: GO 31381
31095: LD_INT 20
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31114
31103: POP
// bc_type := b_ext_siberium ; 21 :
31104: LD_ADDR_OWVAR 42
31108: PUSH
31109: LD_INT 21
31111: ST_TO_ADDR
31112: GO 31381
31114: LD_INT 21
31116: DOUBLE
31117: EQUAL
31118: IFTRUE 31122
31120: GO 31133
31122: POP
// bc_type := b_ext_computer ; 22 :
31123: LD_ADDR_OWVAR 42
31127: PUSH
31128: LD_INT 24
31130: ST_TO_ADDR
31131: GO 31381
31133: LD_INT 22
31135: DOUBLE
31136: EQUAL
31137: IFTRUE 31141
31139: GO 31152
31141: POP
// bc_type := b_ext_track ; 23 :
31142: LD_ADDR_OWVAR 42
31146: PUSH
31147: LD_INT 16
31149: ST_TO_ADDR
31150: GO 31381
31152: LD_INT 23
31154: DOUBLE
31155: EQUAL
31156: IFTRUE 31160
31158: GO 31171
31160: POP
// bc_type := b_ext_laser ; 24 :
31161: LD_ADDR_OWVAR 42
31165: PUSH
31166: LD_INT 25
31168: ST_TO_ADDR
31169: GO 31381
31171: LD_INT 24
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31190
31179: POP
// bc_type := b_control_tower ; 25 :
31180: LD_ADDR_OWVAR 42
31184: PUSH
31185: LD_INT 36
31187: ST_TO_ADDR
31188: GO 31381
31190: LD_INT 25
31192: DOUBLE
31193: EQUAL
31194: IFTRUE 31198
31196: GO 31209
31198: POP
// bc_type := b_breastwork ; 26 :
31199: LD_ADDR_OWVAR 42
31203: PUSH
31204: LD_INT 31
31206: ST_TO_ADDR
31207: GO 31381
31209: LD_INT 26
31211: DOUBLE
31212: EQUAL
31213: IFTRUE 31217
31215: GO 31228
31217: POP
// bc_type := b_bunker ; 27 :
31218: LD_ADDR_OWVAR 42
31222: PUSH
31223: LD_INT 32
31225: ST_TO_ADDR
31226: GO 31381
31228: LD_INT 27
31230: DOUBLE
31231: EQUAL
31232: IFTRUE 31236
31234: GO 31247
31236: POP
// bc_type := b_turret ; 28 :
31237: LD_ADDR_OWVAR 42
31241: PUSH
31242: LD_INT 33
31244: ST_TO_ADDR
31245: GO 31381
31247: LD_INT 28
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31266
31255: POP
// bc_type := b_armoury ; 29 :
31256: LD_ADDR_OWVAR 42
31260: PUSH
31261: LD_INT 4
31263: ST_TO_ADDR
31264: GO 31381
31266: LD_INT 29
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31285
31274: POP
// bc_type := b_barracks ; 30 :
31275: LD_ADDR_OWVAR 42
31279: PUSH
31280: LD_INT 5
31282: ST_TO_ADDR
31283: GO 31381
31285: LD_INT 30
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31304
31293: POP
// bc_type := b_solar_power ; 31 :
31294: LD_ADDR_OWVAR 42
31298: PUSH
31299: LD_INT 27
31301: ST_TO_ADDR
31302: GO 31381
31304: LD_INT 31
31306: DOUBLE
31307: EQUAL
31308: IFTRUE 31312
31310: GO 31323
31312: POP
// bc_type := b_oil_power ; 32 :
31313: LD_ADDR_OWVAR 42
31317: PUSH
31318: LD_INT 26
31320: ST_TO_ADDR
31321: GO 31381
31323: LD_INT 32
31325: DOUBLE
31326: EQUAL
31327: IFTRUE 31331
31329: GO 31342
31331: POP
// bc_type := b_siberite_power ; 33 :
31332: LD_ADDR_OWVAR 42
31336: PUSH
31337: LD_INT 28
31339: ST_TO_ADDR
31340: GO 31381
31342: LD_INT 33
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31350
31348: GO 31361
31350: POP
// bc_type := b_oil_mine ; 34 :
31351: LD_ADDR_OWVAR 42
31355: PUSH
31356: LD_INT 29
31358: ST_TO_ADDR
31359: GO 31381
31361: LD_INT 34
31363: DOUBLE
31364: EQUAL
31365: IFTRUE 31369
31367: GO 31380
31369: POP
// bc_type := b_siberite_mine ; end ;
31370: LD_ADDR_OWVAR 42
31374: PUSH
31375: LD_INT 30
31377: ST_TO_ADDR
31378: GO 31381
31380: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31381: LD_ADDR_VAR 0 8
31385: PUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: LD_VAR 0 6
31395: PPUSH
31396: LD_VAR 0 3
31400: PPUSH
31401: CALL_OW 47
31405: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31406: LD_OWVAR 42
31410: PUSH
31411: LD_INT 32
31413: PUSH
31414: LD_INT 33
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: IN
31421: IFFALSE 31437
// PlaceWeaponTurret ( b , weapon ) ;
31423: LD_VAR 0 8
31427: PPUSH
31428: LD_VAR 0 4
31432: PPUSH
31433: CALL_OW 431
// end ;
31437: LD_VAR 0 7
31441: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31442: LD_INT 0
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31448: LD_ADDR_VAR 0 4
31452: PUSH
31453: LD_INT 22
31455: PUSH
31456: LD_OWVAR 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 30
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PPUSH
31497: CALL_OW 69
31501: ST_TO_ADDR
// if not tmp then
31502: LD_VAR 0 4
31506: NOT
31507: IFFALSE 31511
// exit ;
31509: GO 31570
// for i in tmp do
31511: LD_ADDR_VAR 0 2
31515: PUSH
31516: LD_VAR 0 4
31520: PUSH
31521: FOR_IN
31522: IFFALSE 31568
// for j = 1 to 3 do
31524: LD_ADDR_VAR 0 3
31528: PUSH
31529: DOUBLE
31530: LD_INT 1
31532: DEC
31533: ST_TO_ADDR
31534: LD_INT 3
31536: PUSH
31537: FOR_TO
31538: IFFALSE 31564
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31540: LD_VAR 0 2
31544: PPUSH
31545: CALL_OW 274
31549: PPUSH
31550: LD_VAR 0 3
31554: PPUSH
31555: LD_INT 99999
31557: PPUSH
31558: CALL_OW 277
31562: GO 31537
31564: POP
31565: POP
31566: GO 31521
31568: POP
31569: POP
// end ;
31570: LD_VAR 0 1
31574: RET
// export function hHackSetLevel10 ; var i , j ; begin
31575: LD_INT 0
31577: PPUSH
31578: PPUSH
31579: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31580: LD_ADDR_VAR 0 2
31584: PUSH
31585: LD_INT 21
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PPUSH
31595: CALL_OW 69
31599: PUSH
31600: FOR_IN
31601: IFFALSE 31653
// if IsSelected ( i ) then
31603: LD_VAR 0 2
31607: PPUSH
31608: CALL_OW 306
31612: IFFALSE 31651
// begin for j := 1 to 4 do
31614: LD_ADDR_VAR 0 3
31618: PUSH
31619: DOUBLE
31620: LD_INT 1
31622: DEC
31623: ST_TO_ADDR
31624: LD_INT 4
31626: PUSH
31627: FOR_TO
31628: IFFALSE 31649
// SetSkill ( i , j , 10 ) ;
31630: LD_VAR 0 2
31634: PPUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: LD_INT 10
31642: PPUSH
31643: CALL_OW 237
31647: GO 31627
31649: POP
31650: POP
// end ;
31651: GO 31600
31653: POP
31654: POP
// end ;
31655: LD_VAR 0 1
31659: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31660: LD_INT 0
31662: PPUSH
31663: PPUSH
31664: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: LD_INT 22
31672: PUSH
31673: LD_OWVAR 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 21
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PPUSH
31696: CALL_OW 69
31700: PUSH
31701: FOR_IN
31702: IFFALSE 31743
// begin for j := 1 to 4 do
31704: LD_ADDR_VAR 0 3
31708: PUSH
31709: DOUBLE
31710: LD_INT 1
31712: DEC
31713: ST_TO_ADDR
31714: LD_INT 4
31716: PUSH
31717: FOR_TO
31718: IFFALSE 31739
// SetSkill ( i , j , 10 ) ;
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_VAR 0 3
31729: PPUSH
31730: LD_INT 10
31732: PPUSH
31733: CALL_OW 237
31737: GO 31717
31739: POP
31740: POP
// end ;
31741: GO 31701
31743: POP
31744: POP
// end ;
31745: LD_VAR 0 1
31749: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31750: LD_INT 0
31752: PPUSH
// uc_side := your_side ;
31753: LD_ADDR_OWVAR 20
31757: PUSH
31758: LD_OWVAR 2
31762: ST_TO_ADDR
// uc_nation := nation ;
31763: LD_ADDR_OWVAR 21
31767: PUSH
31768: LD_VAR 0 1
31772: ST_TO_ADDR
// InitHc ;
31773: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31777: LD_INT 0
31779: PPUSH
31780: LD_VAR 0 2
31784: PPUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31794: LD_VAR 0 4
31798: PPUSH
31799: LD_VAR 0 5
31803: PPUSH
31804: CALL_OW 428
31808: PUSH
31809: LD_INT 0
31811: EQUAL
31812: IFFALSE 31836
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31814: CALL_OW 44
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: LD_VAR 0 5
31828: PPUSH
31829: LD_INT 1
31831: PPUSH
31832: CALL_OW 48
// end ;
31836: LD_VAR 0 6
31840: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
// uc_side := your_side ;
31845: LD_ADDR_OWVAR 20
31849: PUSH
31850: LD_OWVAR 2
31854: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31855: LD_VAR 0 1
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: IN
31882: IFFALSE 31894
// uc_nation := nation_american else
31884: LD_ADDR_OWVAR 21
31888: PUSH
31889: LD_INT 1
31891: ST_TO_ADDR
31892: GO 31937
// if chassis in [ 11 , 12 , 13 , 14 ] then
31894: LD_VAR 0 1
31898: PUSH
31899: LD_INT 11
31901: PUSH
31902: LD_INT 12
31904: PUSH
31905: LD_INT 13
31907: PUSH
31908: LD_INT 14
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: IN
31917: IFFALSE 31929
// uc_nation := nation_arabian else
31919: LD_ADDR_OWVAR 21
31923: PUSH
31924: LD_INT 2
31926: ST_TO_ADDR
31927: GO 31937
// uc_nation := nation_russian ;
31929: LD_ADDR_OWVAR 21
31933: PUSH
31934: LD_INT 3
31936: ST_TO_ADDR
// vc_chassis := chassis ;
31937: LD_ADDR_OWVAR 37
31941: PUSH
31942: LD_VAR 0 1
31946: ST_TO_ADDR
// vc_engine := engine ;
31947: LD_ADDR_OWVAR 39
31951: PUSH
31952: LD_VAR 0 2
31956: ST_TO_ADDR
// vc_control := control ;
31957: LD_ADDR_OWVAR 38
31961: PUSH
31962: LD_VAR 0 3
31966: ST_TO_ADDR
// vc_weapon := weapon ;
31967: LD_ADDR_OWVAR 40
31971: PUSH
31972: LD_VAR 0 4
31976: ST_TO_ADDR
// un := CreateVehicle ;
31977: LD_ADDR_VAR 0 8
31981: PUSH
31982: CALL_OW 45
31986: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31987: LD_VAR 0 8
31991: PPUSH
31992: LD_INT 0
31994: PPUSH
31995: LD_INT 5
31997: PPUSH
31998: CALL_OW 12
32002: PPUSH
32003: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32007: LD_VAR 0 8
32011: PPUSH
32012: LD_VAR 0 5
32016: PPUSH
32017: LD_VAR 0 6
32021: PPUSH
32022: LD_INT 1
32024: PPUSH
32025: CALL_OW 48
// end ;
32029: LD_VAR 0 7
32033: RET
// export hInvincible ; every 1 do
32034: GO 32036
32036: DISABLE
// hInvincible := [ ] ;
32037: LD_ADDR_EXP 121
32041: PUSH
32042: EMPTY
32043: ST_TO_ADDR
32044: END
// every 10 do var i ;
32045: GO 32047
32047: DISABLE
32048: LD_INT 0
32050: PPUSH
// begin enable ;
32051: ENABLE
// if not hInvincible then
32052: LD_EXP 121
32056: NOT
32057: IFFALSE 32061
// exit ;
32059: GO 32105
// for i in hInvincible do
32061: LD_ADDR_VAR 0 1
32065: PUSH
32066: LD_EXP 121
32070: PUSH
32071: FOR_IN
32072: IFFALSE 32103
// if GetLives ( i ) < 1000 then
32074: LD_VAR 0 1
32078: PPUSH
32079: CALL_OW 256
32083: PUSH
32084: LD_INT 1000
32086: LESS
32087: IFFALSE 32101
// SetLives ( i , 1000 ) ;
32089: LD_VAR 0 1
32093: PPUSH
32094: LD_INT 1000
32096: PPUSH
32097: CALL_OW 234
32101: GO 32071
32103: POP
32104: POP
// end ;
32105: PPOPN 1
32107: END
// export function hHackInvincible ; var i ; begin
32108: LD_INT 0
32110: PPUSH
32111: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32112: LD_ADDR_VAR 0 2
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 21
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 21
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: PPUSH
32145: CALL_OW 69
32149: PUSH
32150: FOR_IN
32151: IFFALSE 32212
// if IsSelected ( i ) then
32153: LD_VAR 0 2
32157: PPUSH
32158: CALL_OW 306
32162: IFFALSE 32210
// begin if i in hInvincible then
32164: LD_VAR 0 2
32168: PUSH
32169: LD_EXP 121
32173: IN
32174: IFFALSE 32194
// hInvincible := hInvincible diff i else
32176: LD_ADDR_EXP 121
32180: PUSH
32181: LD_EXP 121
32185: PUSH
32186: LD_VAR 0 2
32190: DIFF
32191: ST_TO_ADDR
32192: GO 32210
// hInvincible := hInvincible union i ;
32194: LD_ADDR_EXP 121
32198: PUSH
32199: LD_EXP 121
32203: PUSH
32204: LD_VAR 0 2
32208: UNION
32209: ST_TO_ADDR
// end ;
32210: GO 32150
32212: POP
32213: POP
// end ;
32214: LD_VAR 0 1
32218: RET
// export function hHackInvisible ; var i , j ; begin
32219: LD_INT 0
32221: PPUSH
32222: PPUSH
32223: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32224: LD_ADDR_VAR 0 2
32228: PUSH
32229: LD_INT 21
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PPUSH
32239: CALL_OW 69
32243: PUSH
32244: FOR_IN
32245: IFFALSE 32269
// if IsSelected ( i ) then
32247: LD_VAR 0 2
32251: PPUSH
32252: CALL_OW 306
32256: IFFALSE 32267
// ComForceInvisible ( i ) ;
32258: LD_VAR 0 2
32262: PPUSH
32263: CALL_OW 496
32267: GO 32244
32269: POP
32270: POP
// end ;
32271: LD_VAR 0 1
32275: RET
// export function hHackChangeYourSide ; begin
32276: LD_INT 0
32278: PPUSH
// if your_side = 8 then
32279: LD_OWVAR 2
32283: PUSH
32284: LD_INT 8
32286: EQUAL
32287: IFFALSE 32299
// your_side := 0 else
32289: LD_ADDR_OWVAR 2
32293: PUSH
32294: LD_INT 0
32296: ST_TO_ADDR
32297: GO 32313
// your_side := your_side + 1 ;
32299: LD_ADDR_OWVAR 2
32303: PUSH
32304: LD_OWVAR 2
32308: PUSH
32309: LD_INT 1
32311: PLUS
32312: ST_TO_ADDR
// end ;
32313: LD_VAR 0 1
32317: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
32322: PPUSH
// for i in all_units do
32323: LD_ADDR_VAR 0 2
32327: PUSH
32328: LD_OWVAR 3
32332: PUSH
32333: FOR_IN
32334: IFFALSE 32412
// if IsSelected ( i ) then
32336: LD_VAR 0 2
32340: PPUSH
32341: CALL_OW 306
32345: IFFALSE 32410
// begin j := GetSide ( i ) ;
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_VAR 0 2
32356: PPUSH
32357: CALL_OW 255
32361: ST_TO_ADDR
// if j = 8 then
32362: LD_VAR 0 3
32366: PUSH
32367: LD_INT 8
32369: EQUAL
32370: IFFALSE 32382
// j := 0 else
32372: LD_ADDR_VAR 0 3
32376: PUSH
32377: LD_INT 0
32379: ST_TO_ADDR
32380: GO 32396
// j := j + 1 ;
32382: LD_ADDR_VAR 0 3
32386: PUSH
32387: LD_VAR 0 3
32391: PUSH
32392: LD_INT 1
32394: PLUS
32395: ST_TO_ADDR
// SetSide ( i , j ) ;
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 3
32405: PPUSH
32406: CALL_OW 235
// end ;
32410: GO 32333
32412: POP
32413: POP
// end ;
32414: LD_VAR 0 1
32418: RET
// export function hHackFog ; begin
32419: LD_INT 0
32421: PPUSH
// FogOff ( true ) ;
32422: LD_INT 1
32424: PPUSH
32425: CALL_OW 344
// end ;
32429: LD_VAR 0 1
32433: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32434: LD_INT 0
32436: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 2
32446: PPUSH
32447: LD_VAR 0 3
32451: PPUSH
32452: LD_INT 1
32454: PPUSH
32455: LD_INT 1
32457: PPUSH
32458: CALL_OW 483
// CenterOnXY ( x , y ) ;
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: CALL_OW 84
// end ; end_of_file
32476: LD_VAR 0 4
32480: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32481: LD_INT 0
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 264
32496: PUSH
32497: LD_EXP 52
32501: EQUAL
32502: IFFALSE 32574
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32504: LD_INT 68
32506: PPUSH
32507: LD_VAR 0 1
32511: PPUSH
32512: CALL_OW 255
32516: PPUSH
32517: CALL_OW 321
32521: PUSH
32522: LD_INT 2
32524: EQUAL
32525: IFFALSE 32537
// eff := 70 else
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_INT 70
32534: ST_TO_ADDR
32535: GO 32545
// eff := 30 ;
32537: LD_ADDR_VAR 0 4
32541: PUSH
32542: LD_INT 30
32544: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 250
32554: PPUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 251
32564: PPUSH
32565: LD_VAR 0 4
32569: PPUSH
32570: CALL_OW 495
// end ; end ;
32574: LD_VAR 0 2
32578: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32579: LD_INT 0
32581: PPUSH
// end ;
32582: LD_VAR 0 4
32586: RET
// export function SOS_Command ( cmd ) ; begin
32587: LD_INT 0
32589: PPUSH
// end ;
32590: LD_VAR 0 2
32594: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32595: LD_INT 0
32597: PPUSH
// if cmd = 121 then
32598: LD_VAR 0 1
32602: PUSH
32603: LD_INT 121
32605: EQUAL
32606: IFFALSE 32608
// end ;
32608: LD_VAR 0 6
32612: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32613: LD_INT 0
32615: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32616: LD_VAR 0 1
32620: PUSH
32621: LD_INT 250
32623: EQUAL
32624: PUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: CALL_OW 264
32634: PUSH
32635: LD_EXP 55
32639: EQUAL
32640: AND
32641: IFFALSE 32662
// MinerPlaceMine ( unit , x , y ) ;
32643: LD_VAR 0 2
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL 35011 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32662: LD_VAR 0 1
32666: PUSH
32667: LD_INT 251
32669: EQUAL
32670: PUSH
32671: LD_VAR 0 2
32675: PPUSH
32676: CALL_OW 264
32680: PUSH
32681: LD_EXP 55
32685: EQUAL
32686: AND
32687: IFFALSE 32708
// MinerDetonateMine ( unit , x , y ) ;
32689: LD_VAR 0 2
32693: PPUSH
32694: LD_VAR 0 4
32698: PPUSH
32699: LD_VAR 0 5
32703: PPUSH
32704: CALL 35288 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32708: LD_VAR 0 1
32712: PUSH
32713: LD_INT 252
32715: EQUAL
32716: PUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: CALL_OW 264
32726: PUSH
32727: LD_EXP 55
32731: EQUAL
32732: AND
32733: IFFALSE 32754
// MinerCreateMinefield ( unit , x , y ) ;
32735: LD_VAR 0 2
32739: PPUSH
32740: LD_VAR 0 4
32744: PPUSH
32745: LD_VAR 0 5
32749: PPUSH
32750: CALL 35705 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32754: LD_VAR 0 1
32758: PUSH
32759: LD_INT 253
32761: EQUAL
32762: PUSH
32763: LD_VAR 0 2
32767: PPUSH
32768: CALL_OW 257
32772: PUSH
32773: LD_INT 5
32775: EQUAL
32776: AND
32777: IFFALSE 32798
// ComBinocular ( unit , x , y ) ;
32779: LD_VAR 0 2
32783: PPUSH
32784: LD_VAR 0 4
32788: PPUSH
32789: LD_VAR 0 5
32793: PPUSH
32794: CALL 36076 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 254
32805: EQUAL
32806: PUSH
32807: LD_VAR 0 2
32811: PPUSH
32812: CALL_OW 264
32816: PUSH
32817: LD_EXP 50
32821: EQUAL
32822: AND
32823: PUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: CALL_OW 263
32833: PUSH
32834: LD_INT 3
32836: EQUAL
32837: AND
32838: IFFALSE 32854
// HackDestroyVehicle ( unit , selectedUnit ) ;
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL 34371 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32854: LD_VAR 0 1
32858: PUSH
32859: LD_INT 255
32861: EQUAL
32862: PUSH
32863: LD_VAR 0 2
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_INT 14
32875: PUSH
32876: LD_INT 53
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: IN
32883: AND
32884: PUSH
32885: LD_VAR 0 4
32889: PPUSH
32890: LD_VAR 0 5
32894: PPUSH
32895: CALL_OW 488
32899: AND
32900: IFFALSE 32924
// CutTreeXYR ( unit , x , y , 12 ) ;
32902: LD_VAR 0 2
32906: PPUSH
32907: LD_VAR 0 4
32911: PPUSH
32912: LD_VAR 0 5
32916: PPUSH
32917: LD_INT 12
32919: PPUSH
32920: CALL 32937 0 4
// end ;
32924: LD_VAR 0 6
32928: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32929: LD_INT 0
32931: PPUSH
// end ;
32932: LD_VAR 0 4
32936: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32948: LD_VAR 0 1
32952: NOT
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: LD_VAR 0 3
32963: PPUSH
32964: CALL_OW 488
32968: NOT
32969: OR
32970: PUSH
32971: LD_VAR 0 4
32975: NOT
32976: OR
32977: IFFALSE 32981
// exit ;
32979: GO 33321
// list := [ ] ;
32981: LD_ADDR_VAR 0 13
32985: PUSH
32986: EMPTY
32987: ST_TO_ADDR
// if x - r < 0 then
32988: LD_VAR 0 2
32992: PUSH
32993: LD_VAR 0 4
32997: MINUS
32998: PUSH
32999: LD_INT 0
33001: LESS
33002: IFFALSE 33014
// min_x := 0 else
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_INT 0
33011: ST_TO_ADDR
33012: GO 33030
// min_x := x - r ;
33014: LD_ADDR_VAR 0 7
33018: PUSH
33019: LD_VAR 0 2
33023: PUSH
33024: LD_VAR 0 4
33028: MINUS
33029: ST_TO_ADDR
// if y - r < 0 then
33030: LD_VAR 0 3
33034: PUSH
33035: LD_VAR 0 4
33039: MINUS
33040: PUSH
33041: LD_INT 0
33043: LESS
33044: IFFALSE 33056
// min_y := 0 else
33046: LD_ADDR_VAR 0 8
33050: PUSH
33051: LD_INT 0
33053: ST_TO_ADDR
33054: GO 33072
// min_y := y - r ;
33056: LD_ADDR_VAR 0 8
33060: PUSH
33061: LD_VAR 0 3
33065: PUSH
33066: LD_VAR 0 4
33070: MINUS
33071: ST_TO_ADDR
// max_x := x + r ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_VAR 0 2
33081: PUSH
33082: LD_VAR 0 4
33086: PLUS
33087: ST_TO_ADDR
// max_y := y + r ;
33088: LD_ADDR_VAR 0 10
33092: PUSH
33093: LD_VAR 0 3
33097: PUSH
33098: LD_VAR 0 4
33102: PLUS
33103: ST_TO_ADDR
// for _x = min_x to max_x do
33104: LD_ADDR_VAR 0 11
33108: PUSH
33109: DOUBLE
33110: LD_VAR 0 7
33114: DEC
33115: ST_TO_ADDR
33116: LD_VAR 0 9
33120: PUSH
33121: FOR_TO
33122: IFFALSE 33239
// for _y = min_y to max_y do
33124: LD_ADDR_VAR 0 12
33128: PUSH
33129: DOUBLE
33130: LD_VAR 0 8
33134: DEC
33135: ST_TO_ADDR
33136: LD_VAR 0 10
33140: PUSH
33141: FOR_TO
33142: IFFALSE 33235
// begin if not ValidHex ( _x , _y ) then
33144: LD_VAR 0 11
33148: PPUSH
33149: LD_VAR 0 12
33153: PPUSH
33154: CALL_OW 488
33158: NOT
33159: IFFALSE 33163
// continue ;
33161: GO 33141
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33163: LD_VAR 0 11
33167: PPUSH
33168: LD_VAR 0 12
33172: PPUSH
33173: CALL_OW 351
33177: PUSH
33178: LD_VAR 0 11
33182: PPUSH
33183: LD_VAR 0 12
33187: PPUSH
33188: CALL_OW 554
33192: AND
33193: IFFALSE 33233
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33195: LD_ADDR_VAR 0 13
33199: PUSH
33200: LD_VAR 0 13
33204: PPUSH
33205: LD_VAR 0 13
33209: PUSH
33210: LD_INT 1
33212: PLUS
33213: PPUSH
33214: LD_VAR 0 11
33218: PUSH
33219: LD_VAR 0 12
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PPUSH
33228: CALL_OW 2
33232: ST_TO_ADDR
// end ;
33233: GO 33141
33235: POP
33236: POP
33237: GO 33121
33239: POP
33240: POP
// if not list then
33241: LD_VAR 0 13
33245: NOT
33246: IFFALSE 33250
// exit ;
33248: GO 33321
// for i in list do
33250: LD_ADDR_VAR 0 6
33254: PUSH
33255: LD_VAR 0 13
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33319
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33263: LD_VAR 0 1
33267: PPUSH
33268: LD_STRING M
33270: PUSH
33271: LD_VAR 0 6
33275: PUSH
33276: LD_INT 1
33278: ARRAY
33279: PUSH
33280: LD_VAR 0 6
33284: PUSH
33285: LD_INT 2
33287: ARRAY
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: PPUSH
33313: CALL_OW 447
33317: GO 33260
33319: POP
33320: POP
// end ;
33321: LD_VAR 0 5
33325: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33326: LD_EXP 124
33330: NOT
33331: IFFALSE 33381
33333: GO 33335
33335: DISABLE
// begin initHack := true ;
33336: LD_ADDR_EXP 124
33340: PUSH
33341: LD_INT 1
33343: ST_TO_ADDR
// hackTanks := [ ] ;
33344: LD_ADDR_EXP 125
33348: PUSH
33349: EMPTY
33350: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33351: LD_ADDR_EXP 126
33355: PUSH
33356: EMPTY
33357: ST_TO_ADDR
// hackLimit := 3 ;
33358: LD_ADDR_EXP 127
33362: PUSH
33363: LD_INT 3
33365: ST_TO_ADDR
// hackDist := 12 ;
33366: LD_ADDR_EXP 128
33370: PUSH
33371: LD_INT 12
33373: ST_TO_ADDR
// hackCounter := [ ] ;
33374: LD_ADDR_EXP 129
33378: PUSH
33379: EMPTY
33380: ST_TO_ADDR
// end ;
33381: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33382: LD_EXP 124
33386: PUSH
33387: LD_INT 34
33389: PUSH
33390: LD_EXP 50
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 69
33403: AND
33404: IFFALSE 33659
33406: GO 33408
33408: DISABLE
33409: LD_INT 0
33411: PPUSH
33412: PPUSH
// begin enable ;
33413: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33414: LD_ADDR_VAR 0 1
33418: PUSH
33419: LD_INT 34
33421: PUSH
33422: LD_EXP 50
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 69
33435: PUSH
33436: FOR_IN
33437: IFFALSE 33657
// begin if not i in hackTanks then
33439: LD_VAR 0 1
33443: PUSH
33444: LD_EXP 125
33448: IN
33449: NOT
33450: IFFALSE 33533
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33452: LD_ADDR_EXP 125
33456: PUSH
33457: LD_EXP 125
33461: PPUSH
33462: LD_EXP 125
33466: PUSH
33467: LD_INT 1
33469: PLUS
33470: PPUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 1
33480: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33481: LD_ADDR_EXP 126
33485: PUSH
33486: LD_EXP 126
33490: PPUSH
33491: LD_EXP 126
33495: PUSH
33496: LD_INT 1
33498: PLUS
33499: PPUSH
33500: EMPTY
33501: PPUSH
33502: CALL_OW 1
33506: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33507: LD_ADDR_EXP 129
33511: PUSH
33512: LD_EXP 129
33516: PPUSH
33517: LD_EXP 129
33521: PUSH
33522: LD_INT 1
33524: PLUS
33525: PPUSH
33526: EMPTY
33527: PPUSH
33528: CALL_OW 1
33532: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 302
33542: NOT
33543: IFFALSE 33556
// begin HackUnlinkAll ( i ) ;
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL 33662 0 1
// continue ;
33554: GO 33436
// end ; HackCheckCapturedStatus ( i ) ;
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL 34105 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 81
33572: PUSH
33573: LD_VAR 0 1
33577: PPUSH
33578: CALL_OW 255
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 33
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 91
33599: PUSH
33600: LD_VAR 0 1
33604: PUSH
33605: LD_EXP 128
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 50
33617: PUSH
33618: EMPTY
33619: LIST
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: PPUSH
33627: CALL_OW 69
33631: ST_TO_ADDR
// if not tmp then
33632: LD_VAR 0 2
33636: NOT
33637: IFFALSE 33641
// continue ;
33639: GO 33436
// HackLink ( i , tmp ) ;
33641: LD_VAR 0 1
33645: PPUSH
33646: LD_VAR 0 2
33650: PPUSH
33651: CALL 33798 0 2
// end ;
33655: GO 33436
33657: POP
33658: POP
// end ;
33659: PPOPN 2
33661: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
// if not hack in hackTanks then
33667: LD_VAR 0 1
33671: PUSH
33672: LD_EXP 125
33676: IN
33677: NOT
33678: IFFALSE 33682
// exit ;
33680: GO 33793
// index := GetElementIndex ( hackTanks , hack ) ;
33682: LD_ADDR_VAR 0 4
33686: PUSH
33687: LD_EXP 125
33691: PPUSH
33692: LD_VAR 0 1
33696: PPUSH
33697: CALL 41227 0 2
33701: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33702: LD_EXP 126
33706: PUSH
33707: LD_VAR 0 4
33711: ARRAY
33712: IFFALSE 33793
// begin for i in hackTanksCaptured [ index ] do
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_EXP 126
33723: PUSH
33724: LD_VAR 0 4
33728: ARRAY
33729: PUSH
33730: FOR_IN
33731: IFFALSE 33757
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33733: LD_VAR 0 3
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: PPUSH
33742: LD_VAR 0 3
33746: PUSH
33747: LD_INT 2
33749: ARRAY
33750: PPUSH
33751: CALL_OW 235
33755: GO 33730
33757: POP
33758: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33759: LD_ADDR_EXP 126
33763: PUSH
33764: LD_EXP 126
33768: PPUSH
33769: LD_VAR 0 4
33773: PPUSH
33774: EMPTY
33775: PPUSH
33776: CALL_OW 1
33780: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33781: LD_VAR 0 1
33785: PPUSH
33786: LD_INT 0
33788: PPUSH
33789: CALL_OW 505
// end ; end ;
33793: LD_VAR 0 2
33797: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
// if not hack in hackTanks or not vehicles then
33803: LD_VAR 0 1
33807: PUSH
33808: LD_EXP 125
33812: IN
33813: NOT
33814: PUSH
33815: LD_VAR 0 2
33819: NOT
33820: OR
33821: IFFALSE 33825
// exit ;
33823: GO 34100
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33825: LD_ADDR_VAR 0 2
33829: PUSH
33830: LD_VAR 0 1
33834: PPUSH
33835: LD_VAR 0 2
33839: PPUSH
33840: LD_INT 1
33842: PPUSH
33843: LD_INT 1
33845: PPUSH
33846: CALL 41877 0 4
33850: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: LD_EXP 125
33860: PPUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL 41227 0 2
33870: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33871: LD_EXP 126
33875: PUSH
33876: LD_VAR 0 5
33880: ARRAY
33881: PUSH
33882: LD_EXP 127
33886: LESS
33887: IFFALSE 34076
// begin for i := 1 to vehicles do
33889: LD_ADDR_VAR 0 4
33893: PUSH
33894: DOUBLE
33895: LD_INT 1
33897: DEC
33898: ST_TO_ADDR
33899: LD_VAR 0 2
33903: PUSH
33904: FOR_TO
33905: IFFALSE 34074
// begin if hackTanksCaptured [ index ] = hackLimit then
33907: LD_EXP 126
33911: PUSH
33912: LD_VAR 0 5
33916: ARRAY
33917: PUSH
33918: LD_EXP 127
33922: EQUAL
33923: IFFALSE 33927
// break ;
33925: GO 34074
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33927: LD_ADDR_EXP 129
33931: PUSH
33932: LD_EXP 129
33936: PPUSH
33937: LD_VAR 0 5
33941: PPUSH
33942: LD_EXP 129
33946: PUSH
33947: LD_VAR 0 5
33951: ARRAY
33952: PUSH
33953: LD_INT 1
33955: PLUS
33956: PPUSH
33957: CALL_OW 1
33961: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33962: LD_ADDR_EXP 126
33966: PUSH
33967: LD_EXP 126
33971: PPUSH
33972: LD_VAR 0 5
33976: PUSH
33977: LD_EXP 126
33981: PUSH
33982: LD_VAR 0 5
33986: ARRAY
33987: PUSH
33988: LD_INT 1
33990: PLUS
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PPUSH
33996: LD_VAR 0 2
34000: PUSH
34001: LD_VAR 0 4
34005: ARRAY
34006: PUSH
34007: LD_VAR 0 2
34011: PUSH
34012: LD_VAR 0 4
34016: ARRAY
34017: PPUSH
34018: CALL_OW 255
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PPUSH
34027: CALL 41442 0 3
34031: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34032: LD_VAR 0 2
34036: PUSH
34037: LD_VAR 0 4
34041: ARRAY
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 255
34052: PPUSH
34053: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34057: LD_VAR 0 2
34061: PUSH
34062: LD_VAR 0 4
34066: ARRAY
34067: PPUSH
34068: CALL_OW 141
// end ;
34072: GO 33904
34074: POP
34075: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34076: LD_VAR 0 1
34080: PPUSH
34081: LD_EXP 126
34085: PUSH
34086: LD_VAR 0 5
34090: ARRAY
34091: PUSH
34092: LD_INT 0
34094: PLUS
34095: PPUSH
34096: CALL_OW 505
// end ;
34100: LD_VAR 0 3
34104: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34105: LD_INT 0
34107: PPUSH
34108: PPUSH
34109: PPUSH
34110: PPUSH
// if not hack in hackTanks then
34111: LD_VAR 0 1
34115: PUSH
34116: LD_EXP 125
34120: IN
34121: NOT
34122: IFFALSE 34126
// exit ;
34124: GO 34366
// index := GetElementIndex ( hackTanks , hack ) ;
34126: LD_ADDR_VAR 0 4
34130: PUSH
34131: LD_EXP 125
34135: PPUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL 41227 0 2
34145: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34146: LD_ADDR_VAR 0 3
34150: PUSH
34151: DOUBLE
34152: LD_EXP 126
34156: PUSH
34157: LD_VAR 0 4
34161: ARRAY
34162: INC
34163: ST_TO_ADDR
34164: LD_INT 1
34166: PUSH
34167: FOR_DOWNTO
34168: IFFALSE 34340
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34170: LD_ADDR_VAR 0 5
34174: PUSH
34175: LD_EXP 126
34179: PUSH
34180: LD_VAR 0 4
34184: ARRAY
34185: PUSH
34186: LD_VAR 0 3
34190: ARRAY
34191: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34192: LD_VAR 0 5
34196: PUSH
34197: LD_INT 1
34199: ARRAY
34200: PPUSH
34201: CALL_OW 302
34205: NOT
34206: PUSH
34207: LD_VAR 0 5
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: CALL_OW 255
34220: PUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 255
34230: NONEQUAL
34231: OR
34232: IFFALSE 34338
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34234: LD_VAR 0 5
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: PPUSH
34243: CALL_OW 305
34247: PUSH
34248: LD_VAR 0 5
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: PPUSH
34257: CALL_OW 255
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 255
34271: EQUAL
34272: AND
34273: IFFALSE 34297
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34275: LD_VAR 0 5
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: PPUSH
34284: LD_VAR 0 5
34288: PUSH
34289: LD_INT 2
34291: ARRAY
34292: PPUSH
34293: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34297: LD_ADDR_EXP 126
34301: PUSH
34302: LD_EXP 126
34306: PPUSH
34307: LD_VAR 0 4
34311: PPUSH
34312: LD_EXP 126
34316: PUSH
34317: LD_VAR 0 4
34321: ARRAY
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL_OW 3
34332: PPUSH
34333: CALL_OW 1
34337: ST_TO_ADDR
// end ; end ;
34338: GO 34167
34340: POP
34341: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34342: LD_VAR 0 1
34346: PPUSH
34347: LD_EXP 126
34351: PUSH
34352: LD_VAR 0 4
34356: ARRAY
34357: PUSH
34358: LD_INT 0
34360: PLUS
34361: PPUSH
34362: CALL_OW 505
// end ;
34366: LD_VAR 0 2
34370: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34371: LD_INT 0
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
// if not hack in hackTanks then
34377: LD_VAR 0 1
34381: PUSH
34382: LD_EXP 125
34386: IN
34387: NOT
34388: IFFALSE 34392
// exit ;
34390: GO 34477
// index := GetElementIndex ( hackTanks , hack ) ;
34392: LD_ADDR_VAR 0 5
34396: PUSH
34397: LD_EXP 125
34401: PPUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL 41227 0 2
34411: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34412: LD_ADDR_VAR 0 4
34416: PUSH
34417: DOUBLE
34418: LD_INT 1
34420: DEC
34421: ST_TO_ADDR
34422: LD_EXP 126
34426: PUSH
34427: LD_VAR 0 5
34431: ARRAY
34432: PUSH
34433: FOR_TO
34434: IFFALSE 34475
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34436: LD_EXP 126
34440: PUSH
34441: LD_VAR 0 5
34445: ARRAY
34446: PUSH
34447: LD_VAR 0 4
34451: ARRAY
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PUSH
34457: LD_VAR 0 2
34461: EQUAL
34462: IFFALSE 34473
// KillUnit ( vehicle ) ;
34464: LD_VAR 0 2
34468: PPUSH
34469: CALL_OW 66
34473: GO 34433
34475: POP
34476: POP
// end ;
34477: LD_VAR 0 3
34481: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34482: LD_EXP 130
34486: NOT
34487: IFFALSE 34522
34489: GO 34491
34491: DISABLE
// begin initMiner := true ;
34492: LD_ADDR_EXP 130
34496: PUSH
34497: LD_INT 1
34499: ST_TO_ADDR
// minersList := [ ] ;
34500: LD_ADDR_EXP 131
34504: PUSH
34505: EMPTY
34506: ST_TO_ADDR
// minerMinesList := [ ] ;
34507: LD_ADDR_EXP 132
34511: PUSH
34512: EMPTY
34513: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34514: LD_ADDR_EXP 133
34518: PUSH
34519: LD_INT 5
34521: ST_TO_ADDR
// end ;
34522: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34523: LD_EXP 130
34527: PUSH
34528: LD_INT 34
34530: PUSH
34531: LD_EXP 55
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PPUSH
34540: CALL_OW 69
34544: AND
34545: IFFALSE 35008
34547: GO 34549
34549: DISABLE
34550: LD_INT 0
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
// begin enable ;
34556: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34557: LD_ADDR_VAR 0 1
34561: PUSH
34562: LD_INT 34
34564: PUSH
34565: LD_EXP 55
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: CALL_OW 69
34578: PUSH
34579: FOR_IN
34580: IFFALSE 34652
// begin if not i in minersList then
34582: LD_VAR 0 1
34586: PUSH
34587: LD_EXP 131
34591: IN
34592: NOT
34593: IFFALSE 34650
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34595: LD_ADDR_EXP 131
34599: PUSH
34600: LD_EXP 131
34604: PPUSH
34605: LD_EXP 131
34609: PUSH
34610: LD_INT 1
34612: PLUS
34613: PPUSH
34614: LD_VAR 0 1
34618: PPUSH
34619: CALL_OW 1
34623: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34624: LD_ADDR_EXP 132
34628: PUSH
34629: LD_EXP 132
34633: PPUSH
34634: LD_EXP 132
34638: PUSH
34639: LD_INT 1
34641: PLUS
34642: PPUSH
34643: EMPTY
34644: PPUSH
34645: CALL_OW 1
34649: ST_TO_ADDR
// end end ;
34650: GO 34579
34652: POP
34653: POP
// for i := minerMinesList downto 1 do
34654: LD_ADDR_VAR 0 1
34658: PUSH
34659: DOUBLE
34660: LD_EXP 132
34664: INC
34665: ST_TO_ADDR
34666: LD_INT 1
34668: PUSH
34669: FOR_DOWNTO
34670: IFFALSE 35006
// begin if IsLive ( minersList [ i ] ) then
34672: LD_EXP 131
34676: PUSH
34677: LD_VAR 0 1
34681: ARRAY
34682: PPUSH
34683: CALL_OW 300
34687: IFFALSE 34715
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34689: LD_EXP 131
34693: PUSH
34694: LD_VAR 0 1
34698: ARRAY
34699: PPUSH
34700: LD_EXP 132
34704: PUSH
34705: LD_VAR 0 1
34709: ARRAY
34710: PPUSH
34711: CALL_OW 505
// if not minerMinesList [ i ] then
34715: LD_EXP 132
34719: PUSH
34720: LD_VAR 0 1
34724: ARRAY
34725: NOT
34726: IFFALSE 34730
// continue ;
34728: GO 34669
// for j := minerMinesList [ i ] downto 1 do
34730: LD_ADDR_VAR 0 2
34734: PUSH
34735: DOUBLE
34736: LD_EXP 132
34740: PUSH
34741: LD_VAR 0 1
34745: ARRAY
34746: INC
34747: ST_TO_ADDR
34748: LD_INT 1
34750: PUSH
34751: FOR_DOWNTO
34752: IFFALSE 35002
// begin side := GetSide ( minersList [ i ] ) ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_EXP 131
34763: PUSH
34764: LD_VAR 0 1
34768: ARRAY
34769: PPUSH
34770: CALL_OW 255
34774: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34775: LD_ADDR_VAR 0 4
34779: PUSH
34780: LD_EXP 132
34784: PUSH
34785: LD_VAR 0 1
34789: ARRAY
34790: PUSH
34791: LD_VAR 0 2
34795: ARRAY
34796: PUSH
34797: LD_INT 1
34799: ARRAY
34800: PPUSH
34801: LD_EXP 132
34805: PUSH
34806: LD_VAR 0 1
34810: ARRAY
34811: PUSH
34812: LD_VAR 0 2
34816: ARRAY
34817: PUSH
34818: LD_INT 2
34820: ARRAY
34821: PPUSH
34822: CALL_OW 428
34826: ST_TO_ADDR
// if not tmp then
34827: LD_VAR 0 4
34831: NOT
34832: IFFALSE 34836
// continue ;
34834: GO 34751
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34836: LD_VAR 0 4
34840: PUSH
34841: LD_INT 81
34843: PUSH
34844: LD_VAR 0 3
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PPUSH
34853: CALL_OW 69
34857: IN
34858: PUSH
34859: LD_EXP 132
34863: PUSH
34864: LD_VAR 0 1
34868: ARRAY
34869: PUSH
34870: LD_VAR 0 2
34874: ARRAY
34875: PUSH
34876: LD_INT 1
34878: ARRAY
34879: PPUSH
34880: LD_EXP 132
34884: PUSH
34885: LD_VAR 0 1
34889: ARRAY
34890: PUSH
34891: LD_VAR 0 2
34895: ARRAY
34896: PUSH
34897: LD_INT 2
34899: ARRAY
34900: PPUSH
34901: CALL_OW 458
34905: AND
34906: IFFALSE 35000
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34908: LD_EXP 132
34912: PUSH
34913: LD_VAR 0 1
34917: ARRAY
34918: PUSH
34919: LD_VAR 0 2
34923: ARRAY
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: LD_EXP 132
34933: PUSH
34934: LD_VAR 0 1
34938: ARRAY
34939: PUSH
34940: LD_VAR 0 2
34944: ARRAY
34945: PUSH
34946: LD_INT 2
34948: ARRAY
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34959: LD_ADDR_EXP 132
34963: PUSH
34964: LD_EXP 132
34968: PPUSH
34969: LD_VAR 0 1
34973: PPUSH
34974: LD_EXP 132
34978: PUSH
34979: LD_VAR 0 1
34983: ARRAY
34984: PPUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: CALL_OW 3
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
// end ; end ;
35000: GO 34751
35002: POP
35003: POP
// end ;
35004: GO 34669
35006: POP
35007: POP
// end ;
35008: PPOPN 4
35010: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35011: LD_INT 0
35013: PPUSH
35014: PPUSH
// result := false ;
35015: LD_ADDR_VAR 0 4
35019: PUSH
35020: LD_INT 0
35022: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35023: LD_VAR 0 1
35027: PPUSH
35028: CALL_OW 264
35032: PUSH
35033: LD_EXP 55
35037: EQUAL
35038: NOT
35039: IFFALSE 35043
// exit ;
35041: GO 35283
// index := GetElementIndex ( minersList , unit ) ;
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: LD_EXP 131
35052: PPUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL 41227 0 2
35062: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35063: LD_EXP 132
35067: PUSH
35068: LD_VAR 0 5
35072: ARRAY
35073: PUSH
35074: LD_EXP 133
35078: GREATEREQUAL
35079: IFFALSE 35083
// exit ;
35081: GO 35283
// ComMoveXY ( unit , x , y ) ;
35083: LD_VAR 0 1
35087: PPUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_VAR 0 3
35097: PPUSH
35098: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35102: LD_INT 35
35104: PPUSH
35105: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35109: LD_VAR 0 1
35113: PPUSH
35114: LD_VAR 0 2
35118: PPUSH
35119: LD_VAR 0 3
35123: PPUSH
35124: CALL 71624 0 3
35128: NOT
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 314
35139: AND
35140: IFFALSE 35144
// exit ;
35142: GO 35283
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35144: LD_VAR 0 2
35148: PPUSH
35149: LD_VAR 0 3
35153: PPUSH
35154: CALL_OW 428
35158: PUSH
35159: LD_VAR 0 1
35163: EQUAL
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 314
35174: NOT
35175: AND
35176: IFFALSE 35102
// PlaySoundXY ( x , y , PlantMine ) ;
35178: LD_VAR 0 2
35182: PPUSH
35183: LD_VAR 0 3
35187: PPUSH
35188: LD_STRING PlantMine
35190: PPUSH
35191: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 3
35204: PPUSH
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 255
35214: PPUSH
35215: LD_INT 0
35217: PPUSH
35218: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35222: LD_ADDR_EXP 132
35226: PUSH
35227: LD_EXP 132
35231: PPUSH
35232: LD_VAR 0 5
35236: PUSH
35237: LD_EXP 132
35241: PUSH
35242: LD_VAR 0 5
35246: ARRAY
35247: PUSH
35248: LD_INT 1
35250: PLUS
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PPUSH
35256: LD_VAR 0 2
35260: PUSH
35261: LD_VAR 0 3
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PPUSH
35270: CALL 41442 0 3
35274: ST_TO_ADDR
// result := true ;
35275: LD_ADDR_VAR 0 4
35279: PUSH
35280: LD_INT 1
35282: ST_TO_ADDR
// end ;
35283: LD_VAR 0 4
35287: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35288: LD_INT 0
35290: PPUSH
35291: PPUSH
35292: PPUSH
// if not unit in minersList then
35293: LD_VAR 0 1
35297: PUSH
35298: LD_EXP 131
35302: IN
35303: NOT
35304: IFFALSE 35308
// exit ;
35306: GO 35700
// index := GetElementIndex ( minersList , unit ) ;
35308: LD_ADDR_VAR 0 6
35312: PUSH
35313: LD_EXP 131
35317: PPUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL 41227 0 2
35327: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35328: LD_ADDR_VAR 0 5
35332: PUSH
35333: DOUBLE
35334: LD_EXP 132
35338: PUSH
35339: LD_VAR 0 6
35343: ARRAY
35344: INC
35345: ST_TO_ADDR
35346: LD_INT 1
35348: PUSH
35349: FOR_DOWNTO
35350: IFFALSE 35511
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35352: LD_EXP 132
35356: PUSH
35357: LD_VAR 0 6
35361: ARRAY
35362: PUSH
35363: LD_VAR 0 5
35367: ARRAY
35368: PUSH
35369: LD_INT 1
35371: ARRAY
35372: PUSH
35373: LD_VAR 0 2
35377: EQUAL
35378: PUSH
35379: LD_EXP 132
35383: PUSH
35384: LD_VAR 0 6
35388: ARRAY
35389: PUSH
35390: LD_VAR 0 5
35394: ARRAY
35395: PUSH
35396: LD_INT 2
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 3
35404: EQUAL
35405: AND
35406: IFFALSE 35509
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35408: LD_EXP 132
35412: PUSH
35413: LD_VAR 0 6
35417: ARRAY
35418: PUSH
35419: LD_VAR 0 5
35423: ARRAY
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: LD_EXP 132
35433: PUSH
35434: LD_VAR 0 6
35438: ARRAY
35439: PUSH
35440: LD_VAR 0 5
35444: ARRAY
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: PPUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 255
35459: PPUSH
35460: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35464: LD_ADDR_EXP 132
35468: PUSH
35469: LD_EXP 132
35473: PPUSH
35474: LD_VAR 0 6
35478: PPUSH
35479: LD_EXP 132
35483: PUSH
35484: LD_VAR 0 6
35488: ARRAY
35489: PPUSH
35490: LD_VAR 0 5
35494: PPUSH
35495: CALL_OW 3
35499: PPUSH
35500: CALL_OW 1
35504: ST_TO_ADDR
// exit ;
35505: POP
35506: POP
35507: GO 35700
// end ; end ;
35509: GO 35349
35511: POP
35512: POP
// for i := minerMinesList [ index ] downto 1 do
35513: LD_ADDR_VAR 0 5
35517: PUSH
35518: DOUBLE
35519: LD_EXP 132
35523: PUSH
35524: LD_VAR 0 6
35528: ARRAY
35529: INC
35530: ST_TO_ADDR
35531: LD_INT 1
35533: PUSH
35534: FOR_DOWNTO
35535: IFFALSE 35698
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35537: LD_EXP 132
35541: PUSH
35542: LD_VAR 0 6
35546: ARRAY
35547: PUSH
35548: LD_VAR 0 5
35552: ARRAY
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PPUSH
35558: LD_EXP 132
35562: PUSH
35563: LD_VAR 0 6
35567: ARRAY
35568: PUSH
35569: LD_VAR 0 5
35573: ARRAY
35574: PUSH
35575: LD_INT 2
35577: ARRAY
35578: PPUSH
35579: LD_VAR 0 2
35583: PPUSH
35584: LD_VAR 0 3
35588: PPUSH
35589: CALL_OW 298
35593: PUSH
35594: LD_INT 6
35596: LESS
35597: IFFALSE 35696
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35599: LD_EXP 132
35603: PUSH
35604: LD_VAR 0 6
35608: ARRAY
35609: PUSH
35610: LD_VAR 0 5
35614: ARRAY
35615: PUSH
35616: LD_INT 1
35618: ARRAY
35619: PPUSH
35620: LD_EXP 132
35624: PUSH
35625: LD_VAR 0 6
35629: ARRAY
35630: PUSH
35631: LD_VAR 0 5
35635: ARRAY
35636: PUSH
35637: LD_INT 2
35639: ARRAY
35640: PPUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: CALL_OW 255
35650: PPUSH
35651: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35655: LD_ADDR_EXP 132
35659: PUSH
35660: LD_EXP 132
35664: PPUSH
35665: LD_VAR 0 6
35669: PPUSH
35670: LD_EXP 132
35674: PUSH
35675: LD_VAR 0 6
35679: ARRAY
35680: PPUSH
35681: LD_VAR 0 5
35685: PPUSH
35686: CALL_OW 3
35690: PPUSH
35691: CALL_OW 1
35695: ST_TO_ADDR
// end ; end ;
35696: GO 35534
35698: POP
35699: POP
// end ;
35700: LD_VAR 0 4
35704: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35705: LD_INT 0
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 264
35725: PUSH
35726: LD_EXP 55
35730: EQUAL
35731: NOT
35732: PUSH
35733: LD_VAR 0 1
35737: PUSH
35738: LD_EXP 131
35742: IN
35743: NOT
35744: OR
35745: IFFALSE 35749
// exit ;
35747: GO 36071
// index := GetElementIndex ( minersList , unit ) ;
35749: LD_ADDR_VAR 0 6
35753: PUSH
35754: LD_EXP 131
35758: PPUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: CALL 41227 0 2
35768: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35769: LD_ADDR_VAR 0 8
35773: PUSH
35774: LD_EXP 133
35778: PUSH
35779: LD_EXP 132
35783: PUSH
35784: LD_VAR 0 6
35788: ARRAY
35789: MINUS
35790: ST_TO_ADDR
// if not minesFreeAmount then
35791: LD_VAR 0 8
35795: NOT
35796: IFFALSE 35800
// exit ;
35798: GO 36071
// tmp := [ ] ;
35800: LD_ADDR_VAR 0 7
35804: PUSH
35805: EMPTY
35806: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35807: LD_ADDR_VAR 0 5
35811: PUSH
35812: DOUBLE
35813: LD_INT 1
35815: DEC
35816: ST_TO_ADDR
35817: LD_VAR 0 8
35821: PUSH
35822: FOR_TO
35823: IFFALSE 36018
// begin _d := rand ( 0 , 5 ) ;
35825: LD_ADDR_VAR 0 11
35829: PUSH
35830: LD_INT 0
35832: PPUSH
35833: LD_INT 5
35835: PPUSH
35836: CALL_OW 12
35840: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35841: LD_ADDR_VAR 0 12
35845: PUSH
35846: LD_INT 2
35848: PPUSH
35849: LD_INT 6
35851: PPUSH
35852: CALL_OW 12
35856: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: LD_VAR 0 11
35871: PPUSH
35872: LD_VAR 0 12
35876: PPUSH
35877: CALL_OW 272
35881: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35882: LD_ADDR_VAR 0 10
35886: PUSH
35887: LD_VAR 0 3
35891: PPUSH
35892: LD_VAR 0 11
35896: PPUSH
35897: LD_VAR 0 12
35901: PPUSH
35902: CALL_OW 273
35906: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35907: LD_VAR 0 9
35911: PPUSH
35912: LD_VAR 0 10
35916: PPUSH
35917: CALL_OW 488
35921: PUSH
35922: LD_VAR 0 9
35926: PUSH
35927: LD_VAR 0 10
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_VAR 0 7
35940: IN
35941: NOT
35942: AND
35943: PUSH
35944: LD_VAR 0 9
35948: PPUSH
35949: LD_VAR 0 10
35953: PPUSH
35954: CALL_OW 458
35958: NOT
35959: AND
35960: IFFALSE 36002
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35962: LD_ADDR_VAR 0 7
35966: PUSH
35967: LD_VAR 0 7
35971: PPUSH
35972: LD_VAR 0 7
35976: PUSH
35977: LD_INT 1
35979: PLUS
35980: PPUSH
35981: LD_VAR 0 9
35985: PUSH
35986: LD_VAR 0 10
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 1
35999: ST_TO_ADDR
36000: GO 36016
// i := i - 1 ;
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_VAR 0 5
36011: PUSH
36012: LD_INT 1
36014: MINUS
36015: ST_TO_ADDR
// end ;
36016: GO 35822
36018: POP
36019: POP
// for i in tmp do
36020: LD_ADDR_VAR 0 5
36024: PUSH
36025: LD_VAR 0 7
36029: PUSH
36030: FOR_IN
36031: IFFALSE 36069
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36033: LD_VAR 0 1
36037: PPUSH
36038: LD_VAR 0 5
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 5
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PPUSH
36056: CALL 35011 0 3
36060: NOT
36061: IFFALSE 36067
// exit ;
36063: POP
36064: POP
36065: GO 36071
36067: GO 36030
36069: POP
36070: POP
// end ;
36071: LD_VAR 0 4
36075: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36076: LD_INT 0
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
// if not GetClass ( unit ) = class_sniper then
36085: LD_VAR 0 1
36089: PPUSH
36090: CALL_OW 257
36094: PUSH
36095: LD_INT 5
36097: EQUAL
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 36491
// dist := 8 ;
36103: LD_ADDR_VAR 0 5
36107: PUSH
36108: LD_INT 8
36110: ST_TO_ADDR
// viewRange := 12 ;
36111: LD_ADDR_VAR 0 7
36115: PUSH
36116: LD_INT 12
36118: ST_TO_ADDR
// side := GetSide ( unit ) ;
36119: LD_ADDR_VAR 0 6
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 255
36133: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36134: LD_INT 61
36136: PPUSH
36137: LD_VAR 0 6
36141: PPUSH
36142: CALL_OW 321
36146: PUSH
36147: LD_INT 2
36149: EQUAL
36150: IFFALSE 36160
// viewRange := 16 ;
36152: LD_ADDR_VAR 0 7
36156: PUSH
36157: LD_INT 16
36159: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36160: LD_VAR 0 1
36164: PPUSH
36165: LD_VAR 0 2
36169: PPUSH
36170: LD_VAR 0 3
36174: PPUSH
36175: CALL_OW 297
36179: PUSH
36180: LD_VAR 0 5
36184: GREATER
36185: IFFALSE 36264
// begin ComMoveXY ( unit , x , y ) ;
36187: LD_VAR 0 1
36191: PPUSH
36192: LD_VAR 0 2
36196: PPUSH
36197: LD_VAR 0 3
36201: PPUSH
36202: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36206: LD_INT 35
36208: PPUSH
36209: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36213: LD_VAR 0 1
36217: PPUSH
36218: LD_VAR 0 2
36222: PPUSH
36223: LD_VAR 0 3
36227: PPUSH
36228: CALL 71624 0 3
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36491
// until GetDistUnitXY ( unit , x , y ) < dist ;
36237: LD_VAR 0 1
36241: PPUSH
36242: LD_VAR 0 2
36246: PPUSH
36247: LD_VAR 0 3
36251: PPUSH
36252: CALL_OW 297
36256: PUSH
36257: LD_VAR 0 5
36261: LESS
36262: IFFALSE 36206
// end ; ComTurnXY ( unit , x , y ) ;
36264: LD_VAR 0 1
36268: PPUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 3
36278: PPUSH
36279: CALL_OW 118
// wait ( 5 ) ;
36283: LD_INT 5
36285: PPUSH
36286: CALL_OW 67
// _d := GetDir ( unit ) ;
36290: LD_ADDR_VAR 0 10
36294: PUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 254
36304: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36305: LD_ADDR_VAR 0 8
36309: PUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 250
36319: PPUSH
36320: LD_VAR 0 10
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL_OW 272
36334: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 251
36349: PPUSH
36350: LD_VAR 0 10
36354: PPUSH
36355: LD_VAR 0 5
36359: PPUSH
36360: CALL_OW 273
36364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36365: LD_VAR 0 8
36369: PPUSH
36370: LD_VAR 0 9
36374: PPUSH
36375: CALL_OW 488
36379: NOT
36380: IFFALSE 36384
// exit ;
36382: GO 36491
// ComAnimCustom ( unit , 1 ) ;
36384: LD_VAR 0 1
36388: PPUSH
36389: LD_INT 1
36391: PPUSH
36392: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36396: LD_VAR 0 8
36400: PPUSH
36401: LD_VAR 0 9
36405: PPUSH
36406: LD_VAR 0 6
36410: PPUSH
36411: LD_VAR 0 7
36415: PPUSH
36416: CALL_OW 330
// repeat wait ( 1 ) ;
36420: LD_INT 1
36422: PPUSH
36423: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 316
36436: PUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 314
36446: OR
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 302
36457: NOT
36458: OR
36459: PUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 301
36469: OR
36470: IFFALSE 36420
// RemoveSeeing ( _x , _y , side ) ;
36472: LD_VAR 0 8
36476: PPUSH
36477: LD_VAR 0 9
36481: PPUSH
36482: LD_VAR 0 6
36486: PPUSH
36487: CALL_OW 331
// end ; end_of_file
36491: LD_VAR 0 4
36495: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36496: LD_INT 0
36498: PPUSH
36499: PPUSH
// if exist_mode then
36500: LD_VAR 0 2
36504: IFFALSE 36529
// unit := CreateCharacter ( prefix & ident ) else
36506: LD_ADDR_VAR 0 5
36510: PUSH
36511: LD_VAR 0 3
36515: PUSH
36516: LD_VAR 0 1
36520: STR
36521: PPUSH
36522: CALL_OW 34
36526: ST_TO_ADDR
36527: GO 36544
// unit := NewCharacter ( ident ) ;
36529: LD_ADDR_VAR 0 5
36533: PUSH
36534: LD_VAR 0 1
36538: PPUSH
36539: CALL_OW 25
36543: ST_TO_ADDR
// result := unit ;
36544: LD_ADDR_VAR 0 4
36548: PUSH
36549: LD_VAR 0 5
36553: ST_TO_ADDR
// end ;
36554: LD_VAR 0 4
36558: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
// if not side or not nation then
36563: LD_VAR 0 1
36567: NOT
36568: PUSH
36569: LD_VAR 0 2
36573: NOT
36574: OR
36575: IFFALSE 36579
// exit ;
36577: GO 37343
// case nation of nation_american :
36579: LD_VAR 0 2
36583: PUSH
36584: LD_INT 1
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36592
36590: GO 36806
36592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: LD_INT 35
36600: PUSH
36601: LD_INT 45
36603: PUSH
36604: LD_INT 46
36606: PUSH
36607: LD_INT 47
36609: PUSH
36610: LD_INT 82
36612: PUSH
36613: LD_INT 83
36615: PUSH
36616: LD_INT 84
36618: PUSH
36619: LD_INT 85
36621: PUSH
36622: LD_INT 86
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 6
36633: PUSH
36634: LD_INT 15
36636: PUSH
36637: LD_INT 16
36639: PUSH
36640: LD_INT 7
36642: PUSH
36643: LD_INT 12
36645: PUSH
36646: LD_INT 13
36648: PUSH
36649: LD_INT 10
36651: PUSH
36652: LD_INT 14
36654: PUSH
36655: LD_INT 20
36657: PUSH
36658: LD_INT 21
36660: PUSH
36661: LD_INT 22
36663: PUSH
36664: LD_INT 25
36666: PUSH
36667: LD_INT 32
36669: PUSH
36670: LD_INT 27
36672: PUSH
36673: LD_INT 36
36675: PUSH
36676: LD_INT 69
36678: PUSH
36679: LD_INT 39
36681: PUSH
36682: LD_INT 34
36684: PUSH
36685: LD_INT 40
36687: PUSH
36688: LD_INT 48
36690: PUSH
36691: LD_INT 49
36693: PUSH
36694: LD_INT 50
36696: PUSH
36697: LD_INT 51
36699: PUSH
36700: LD_INT 52
36702: PUSH
36703: LD_INT 53
36705: PUSH
36706: LD_INT 54
36708: PUSH
36709: LD_INT 55
36711: PUSH
36712: LD_INT 56
36714: PUSH
36715: LD_INT 57
36717: PUSH
36718: LD_INT 58
36720: PUSH
36721: LD_INT 59
36723: PUSH
36724: LD_INT 60
36726: PUSH
36727: LD_INT 61
36729: PUSH
36730: LD_INT 62
36732: PUSH
36733: LD_INT 80
36735: PUSH
36736: LD_INT 82
36738: PUSH
36739: LD_INT 83
36741: PUSH
36742: LD_INT 84
36744: PUSH
36745: LD_INT 85
36747: PUSH
36748: LD_INT 86
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
36804: GO 37267
36806: LD_INT 2
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36814
36812: GO 37036
36814: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36815: LD_ADDR_VAR 0 4
36819: PUSH
36820: LD_INT 35
36822: PUSH
36823: LD_INT 45
36825: PUSH
36826: LD_INT 46
36828: PUSH
36829: LD_INT 47
36831: PUSH
36832: LD_INT 82
36834: PUSH
36835: LD_INT 83
36837: PUSH
36838: LD_INT 84
36840: PUSH
36841: LD_INT 85
36843: PUSH
36844: LD_INT 87
36846: PUSH
36847: LD_INT 70
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 11
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: LD_INT 4
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: LD_INT 6
36867: PUSH
36868: LD_INT 15
36870: PUSH
36871: LD_INT 18
36873: PUSH
36874: LD_INT 7
36876: PUSH
36877: LD_INT 17
36879: PUSH
36880: LD_INT 8
36882: PUSH
36883: LD_INT 20
36885: PUSH
36886: LD_INT 21
36888: PUSH
36889: LD_INT 22
36891: PUSH
36892: LD_INT 72
36894: PUSH
36895: LD_INT 26
36897: PUSH
36898: LD_INT 69
36900: PUSH
36901: LD_INT 39
36903: PUSH
36904: LD_INT 40
36906: PUSH
36907: LD_INT 41
36909: PUSH
36910: LD_INT 42
36912: PUSH
36913: LD_INT 43
36915: PUSH
36916: LD_INT 48
36918: PUSH
36919: LD_INT 49
36921: PUSH
36922: LD_INT 50
36924: PUSH
36925: LD_INT 51
36927: PUSH
36928: LD_INT 52
36930: PUSH
36931: LD_INT 53
36933: PUSH
36934: LD_INT 54
36936: PUSH
36937: LD_INT 55
36939: PUSH
36940: LD_INT 56
36942: PUSH
36943: LD_INT 60
36945: PUSH
36946: LD_INT 61
36948: PUSH
36949: LD_INT 62
36951: PUSH
36952: LD_INT 66
36954: PUSH
36955: LD_INT 67
36957: PUSH
36958: LD_INT 68
36960: PUSH
36961: LD_INT 81
36963: PUSH
36964: LD_INT 82
36966: PUSH
36967: LD_INT 83
36969: PUSH
36970: LD_INT 84
36972: PUSH
36973: LD_INT 85
36975: PUSH
36976: LD_INT 87
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
37034: GO 37267
37036: LD_INT 3
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37044
37042: GO 37266
37044: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: LD_INT 46
37052: PUSH
37053: LD_INT 47
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 82
37064: PUSH
37065: LD_INT 83
37067: PUSH
37068: LD_INT 84
37070: PUSH
37071: LD_INT 85
37073: PUSH
37074: LD_INT 86
37076: PUSH
37077: LD_INT 11
37079: PUSH
37080: LD_INT 9
37082: PUSH
37083: LD_INT 20
37085: PUSH
37086: LD_INT 19
37088: PUSH
37089: LD_INT 21
37091: PUSH
37092: LD_INT 24
37094: PUSH
37095: LD_INT 22
37097: PUSH
37098: LD_INT 25
37100: PUSH
37101: LD_INT 28
37103: PUSH
37104: LD_INT 29
37106: PUSH
37107: LD_INT 30
37109: PUSH
37110: LD_INT 31
37112: PUSH
37113: LD_INT 37
37115: PUSH
37116: LD_INT 38
37118: PUSH
37119: LD_INT 32
37121: PUSH
37122: LD_INT 27
37124: PUSH
37125: LD_INT 33
37127: PUSH
37128: LD_INT 69
37130: PUSH
37131: LD_INT 39
37133: PUSH
37134: LD_INT 34
37136: PUSH
37137: LD_INT 40
37139: PUSH
37140: LD_INT 71
37142: PUSH
37143: LD_INT 23
37145: PUSH
37146: LD_INT 44
37148: PUSH
37149: LD_INT 48
37151: PUSH
37152: LD_INT 49
37154: PUSH
37155: LD_INT 50
37157: PUSH
37158: LD_INT 51
37160: PUSH
37161: LD_INT 52
37163: PUSH
37164: LD_INT 53
37166: PUSH
37167: LD_INT 54
37169: PUSH
37170: LD_INT 55
37172: PUSH
37173: LD_INT 56
37175: PUSH
37176: LD_INT 57
37178: PUSH
37179: LD_INT 58
37181: PUSH
37182: LD_INT 59
37184: PUSH
37185: LD_INT 63
37187: PUSH
37188: LD_INT 64
37190: PUSH
37191: LD_INT 65
37193: PUSH
37194: LD_INT 82
37196: PUSH
37197: LD_INT 83
37199: PUSH
37200: LD_INT 84
37202: PUSH
37203: LD_INT 85
37205: PUSH
37206: LD_INT 86
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
37264: GO 37267
37266: POP
// if state > - 1 and state < 3 then
37267: LD_VAR 0 3
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: GREATER
37276: PUSH
37277: LD_VAR 0 3
37281: PUSH
37282: LD_INT 3
37284: LESS
37285: AND
37286: IFFALSE 37343
// for i in result do
37288: LD_ADDR_VAR 0 5
37292: PUSH
37293: LD_VAR 0 4
37297: PUSH
37298: FOR_IN
37299: IFFALSE 37341
// if GetTech ( i , side ) <> state then
37301: LD_VAR 0 5
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 321
37315: PUSH
37316: LD_VAR 0 3
37320: NONEQUAL
37321: IFFALSE 37339
// result := result diff i ;
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_VAR 0 4
37332: PUSH
37333: LD_VAR 0 5
37337: DIFF
37338: ST_TO_ADDR
37339: GO 37298
37341: POP
37342: POP
// end ;
37343: LD_VAR 0 4
37347: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37348: LD_INT 0
37350: PPUSH
37351: PPUSH
37352: PPUSH
// result := true ;
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 1
37360: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: LD_VAR 0 2
37370: PPUSH
37371: CALL_OW 480
37375: ST_TO_ADDR
// if not tmp then
37376: LD_VAR 0 5
37380: NOT
37381: IFFALSE 37385
// exit ;
37383: GO 37434
// for i in tmp do
37385: LD_ADDR_VAR 0 4
37389: PUSH
37390: LD_VAR 0 5
37394: PUSH
37395: FOR_IN
37396: IFFALSE 37432
// if GetTech ( i , side ) <> state_researched then
37398: LD_VAR 0 4
37402: PPUSH
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 321
37412: PUSH
37413: LD_INT 2
37415: NONEQUAL
37416: IFFALSE 37430
// begin result := false ;
37418: LD_ADDR_VAR 0 3
37422: PUSH
37423: LD_INT 0
37425: ST_TO_ADDR
// exit ;
37426: POP
37427: POP
37428: GO 37434
// end ;
37430: GO 37395
37432: POP
37433: POP
// end ;
37434: LD_VAR 0 3
37438: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37439: LD_INT 0
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
37451: PPUSH
37452: PPUSH
37453: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37454: LD_VAR 0 1
37458: NOT
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 257
37469: PUSH
37470: LD_INT 9
37472: NONEQUAL
37473: OR
37474: IFFALSE 37478
// exit ;
37476: GO 38051
// side := GetSide ( unit ) ;
37478: LD_ADDR_VAR 0 9
37482: PUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 255
37492: ST_TO_ADDR
// tech_space := tech_spacanom ;
37493: LD_ADDR_VAR 0 12
37497: PUSH
37498: LD_INT 29
37500: ST_TO_ADDR
// tech_time := tech_taurad ;
37501: LD_ADDR_VAR 0 13
37505: PUSH
37506: LD_INT 28
37508: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37509: LD_ADDR_VAR 0 11
37513: PUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 310
37523: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37524: LD_VAR 0 11
37528: PPUSH
37529: CALL_OW 247
37533: PUSH
37534: LD_INT 2
37536: EQUAL
37537: IFFALSE 37541
// exit ;
37539: GO 38051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37541: LD_ADDR_VAR 0 8
37545: PUSH
37546: LD_INT 81
37548: PUSH
37549: LD_VAR 0 9
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: LD_INT 21
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PPUSH
37579: CALL_OW 69
37583: ST_TO_ADDR
// if not tmp then
37584: LD_VAR 0 8
37588: NOT
37589: IFFALSE 37593
// exit ;
37591: GO 38051
// if in_unit then
37593: LD_VAR 0 11
37597: IFFALSE 37621
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37599: LD_ADDR_VAR 0 10
37603: PUSH
37604: LD_VAR 0 8
37608: PPUSH
37609: LD_VAR 0 11
37613: PPUSH
37614: CALL_OW 74
37618: ST_TO_ADDR
37619: GO 37641
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37621: LD_ADDR_VAR 0 10
37625: PUSH
37626: LD_VAR 0 8
37630: PPUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 74
37640: ST_TO_ADDR
// if not enemy then
37641: LD_VAR 0 10
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 38051
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37650: LD_VAR 0 11
37654: PUSH
37655: LD_VAR 0 11
37659: PPUSH
37660: LD_VAR 0 10
37664: PPUSH
37665: CALL_OW 296
37669: PUSH
37670: LD_INT 13
37672: GREATER
37673: AND
37674: PUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_VAR 0 10
37684: PPUSH
37685: CALL_OW 296
37689: PUSH
37690: LD_INT 12
37692: GREATER
37693: OR
37694: IFFALSE 37698
// exit ;
37696: GO 38051
// missile := [ 1 ] ;
37698: LD_ADDR_VAR 0 14
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37709: LD_VAR 0 9
37713: PPUSH
37714: LD_VAR 0 12
37718: PPUSH
37719: CALL_OW 325
37723: IFFALSE 37752
// missile := Insert ( missile , missile + 1 , 2 ) ;
37725: LD_ADDR_VAR 0 14
37729: PUSH
37730: LD_VAR 0 14
37734: PPUSH
37735: LD_VAR 0 14
37739: PUSH
37740: LD_INT 1
37742: PLUS
37743: PPUSH
37744: LD_INT 2
37746: PPUSH
37747: CALL_OW 2
37751: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37752: LD_VAR 0 9
37756: PPUSH
37757: LD_VAR 0 13
37761: PPUSH
37762: CALL_OW 325
37766: PUSH
37767: LD_VAR 0 10
37771: PPUSH
37772: CALL_OW 255
37776: PPUSH
37777: LD_VAR 0 13
37781: PPUSH
37782: CALL_OW 325
37786: NOT
37787: AND
37788: IFFALSE 37817
// missile := Insert ( missile , missile + 1 , 3 ) ;
37790: LD_ADDR_VAR 0 14
37794: PUSH
37795: LD_VAR 0 14
37799: PPUSH
37800: LD_VAR 0 14
37804: PUSH
37805: LD_INT 1
37807: PLUS
37808: PPUSH
37809: LD_INT 3
37811: PPUSH
37812: CALL_OW 2
37816: ST_TO_ADDR
// if missile < 2 then
37817: LD_VAR 0 14
37821: PUSH
37822: LD_INT 2
37824: LESS
37825: IFFALSE 37829
// exit ;
37827: GO 38051
// x := GetX ( enemy ) ;
37829: LD_ADDR_VAR 0 4
37833: PUSH
37834: LD_VAR 0 10
37838: PPUSH
37839: CALL_OW 250
37843: ST_TO_ADDR
// y := GetY ( enemy ) ;
37844: LD_ADDR_VAR 0 5
37848: PUSH
37849: LD_VAR 0 10
37853: PPUSH
37854: CALL_OW 251
37858: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37859: LD_ADDR_VAR 0 6
37863: PUSH
37864: LD_VAR 0 4
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PPUSH
37873: LD_INT 1
37875: PPUSH
37876: CALL_OW 12
37880: PLUS
37881: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37882: LD_ADDR_VAR 0 7
37886: PUSH
37887: LD_VAR 0 5
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PPUSH
37896: LD_INT 1
37898: PPUSH
37899: CALL_OW 12
37903: PLUS
37904: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37905: LD_VAR 0 6
37909: PPUSH
37910: LD_VAR 0 7
37914: PPUSH
37915: CALL_OW 488
37919: NOT
37920: IFFALSE 37942
// begin _x := x ;
37922: LD_ADDR_VAR 0 6
37926: PUSH
37927: LD_VAR 0 4
37931: ST_TO_ADDR
// _y := y ;
37932: LD_ADDR_VAR 0 7
37936: PUSH
37937: LD_VAR 0 5
37941: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37942: LD_ADDR_VAR 0 3
37946: PUSH
37947: LD_INT 1
37949: PPUSH
37950: LD_VAR 0 14
37954: PPUSH
37955: CALL_OW 12
37959: ST_TO_ADDR
// case i of 1 :
37960: LD_VAR 0 3
37964: PUSH
37965: LD_INT 1
37967: DOUBLE
37968: EQUAL
37969: IFTRUE 37973
37971: GO 37990
37973: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37974: LD_VAR 0 1
37978: PPUSH
37979: LD_VAR 0 10
37983: PPUSH
37984: CALL_OW 115
37988: GO 38051
37990: LD_INT 2
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 37998
37996: GO 38020
37998: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37999: LD_VAR 0 1
38003: PPUSH
38004: LD_VAR 0 6
38008: PPUSH
38009: LD_VAR 0 7
38013: PPUSH
38014: CALL_OW 153
38018: GO 38051
38020: LD_INT 3
38022: DOUBLE
38023: EQUAL
38024: IFTRUE 38028
38026: GO 38050
38028: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38029: LD_VAR 0 1
38033: PPUSH
38034: LD_VAR 0 6
38038: PPUSH
38039: LD_VAR 0 7
38043: PPUSH
38044: CALL_OW 154
38048: GO 38051
38050: POP
// end ;
38051: LD_VAR 0 2
38055: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
// if not unit or not building then
38064: LD_VAR 0 1
38068: NOT
38069: PUSH
38070: LD_VAR 0 2
38074: NOT
38075: OR
38076: IFFALSE 38080
// exit ;
38078: GO 38238
// x := GetX ( building ) ;
38080: LD_ADDR_VAR 0 5
38084: PUSH
38085: LD_VAR 0 2
38089: PPUSH
38090: CALL_OW 250
38094: ST_TO_ADDR
// y := GetY ( building ) ;
38095: LD_ADDR_VAR 0 6
38099: PUSH
38100: LD_VAR 0 2
38104: PPUSH
38105: CALL_OW 251
38109: ST_TO_ADDR
// for i = 0 to 5 do
38110: LD_ADDR_VAR 0 4
38114: PUSH
38115: DOUBLE
38116: LD_INT 0
38118: DEC
38119: ST_TO_ADDR
38120: LD_INT 5
38122: PUSH
38123: FOR_TO
38124: IFFALSE 38236
// begin _x := ShiftX ( x , i , 3 ) ;
38126: LD_ADDR_VAR 0 7
38130: PUSH
38131: LD_VAR 0 5
38135: PPUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: LD_INT 3
38143: PPUSH
38144: CALL_OW 272
38148: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38149: LD_ADDR_VAR 0 8
38153: PUSH
38154: LD_VAR 0 6
38158: PPUSH
38159: LD_VAR 0 4
38163: PPUSH
38164: LD_INT 3
38166: PPUSH
38167: CALL_OW 273
38171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38172: LD_VAR 0 7
38176: PPUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: CALL_OW 488
38186: NOT
38187: IFFALSE 38191
// continue ;
38189: GO 38123
// if HexInfo ( _x , _y ) = 0 then
38191: LD_VAR 0 7
38195: PPUSH
38196: LD_VAR 0 8
38200: PPUSH
38201: CALL_OW 428
38205: PUSH
38206: LD_INT 0
38208: EQUAL
38209: IFFALSE 38234
// begin ComMoveXY ( unit , _x , _y ) ;
38211: LD_VAR 0 1
38215: PPUSH
38216: LD_VAR 0 7
38220: PPUSH
38221: LD_VAR 0 8
38225: PPUSH
38226: CALL_OW 111
// exit ;
38230: POP
38231: POP
38232: GO 38238
// end ; end ;
38234: GO 38123
38236: POP
38237: POP
// end ;
38238: LD_VAR 0 3
38242: RET
// export function ScanBase ( side , base_area ) ; begin
38243: LD_INT 0
38245: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_VAR 0 2
38255: PPUSH
38256: LD_INT 81
38258: PUSH
38259: LD_VAR 0 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PPUSH
38268: CALL_OW 70
38272: ST_TO_ADDR
// end ;
38273: LD_VAR 0 3
38277: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38278: LD_INT 0
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
// result := false ;
38284: LD_ADDR_VAR 0 2
38288: PUSH
38289: LD_INT 0
38291: ST_TO_ADDR
// side := GetSide ( unit ) ;
38292: LD_ADDR_VAR 0 3
38296: PUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 255
38306: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38307: LD_ADDR_VAR 0 4
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 248
38321: ST_TO_ADDR
// case nat of 1 :
38322: LD_VAR 0 4
38326: PUSH
38327: LD_INT 1
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38335
38333: GO 38346
38335: POP
// tech := tech_lassight ; 2 :
38336: LD_ADDR_VAR 0 5
38340: PUSH
38341: LD_INT 12
38343: ST_TO_ADDR
38344: GO 38385
38346: LD_INT 2
38348: DOUBLE
38349: EQUAL
38350: IFTRUE 38354
38352: GO 38365
38354: POP
// tech := tech_mortar ; 3 :
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_INT 41
38362: ST_TO_ADDR
38363: GO 38385
38365: LD_INT 3
38367: DOUBLE
38368: EQUAL
38369: IFTRUE 38373
38371: GO 38384
38373: POP
// tech := tech_bazooka ; end ;
38374: LD_ADDR_VAR 0 5
38378: PUSH
38379: LD_INT 44
38381: ST_TO_ADDR
38382: GO 38385
38384: POP
// if Researched ( side , tech ) then
38385: LD_VAR 0 3
38389: PPUSH
38390: LD_VAR 0 5
38394: PPUSH
38395: CALL_OW 325
38399: IFFALSE 38426
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38401: LD_ADDR_VAR 0 2
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: LD_INT 8
38411: PUSH
38412: LD_INT 9
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: LD_VAR 0 4
38424: ARRAY
38425: ST_TO_ADDR
// end ;
38426: LD_VAR 0 2
38430: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38431: LD_INT 0
38433: PPUSH
38434: PPUSH
38435: PPUSH
// if not mines then
38436: LD_VAR 0 2
38440: NOT
38441: IFFALSE 38445
// exit ;
38443: GO 38589
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38445: LD_ADDR_VAR 0 5
38449: PUSH
38450: LD_INT 81
38452: PUSH
38453: LD_VAR 0 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 21
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PPUSH
38483: CALL_OW 69
38487: ST_TO_ADDR
// for i in mines do
38488: LD_ADDR_VAR 0 4
38492: PUSH
38493: LD_VAR 0 2
38497: PUSH
38498: FOR_IN
38499: IFFALSE 38587
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38501: LD_VAR 0 4
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PPUSH
38510: LD_VAR 0 4
38514: PUSH
38515: LD_INT 2
38517: ARRAY
38518: PPUSH
38519: CALL_OW 458
38523: NOT
38524: IFFALSE 38528
// continue ;
38526: GO 38498
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38528: LD_VAR 0 4
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PPUSH
38537: LD_VAR 0 4
38541: PUSH
38542: LD_INT 2
38544: ARRAY
38545: PPUSH
38546: CALL_OW 428
38550: PUSH
38551: LD_VAR 0 5
38555: IN
38556: IFFALSE 38585
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38558: LD_VAR 0 4
38562: PUSH
38563: LD_INT 1
38565: ARRAY
38566: PPUSH
38567: LD_VAR 0 4
38571: PUSH
38572: LD_INT 2
38574: ARRAY
38575: PPUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 456
// end ;
38585: GO 38498
38587: POP
38588: POP
// end ;
38589: LD_VAR 0 3
38593: RET
// export function Count ( array ) ; var i ; begin
38594: LD_INT 0
38596: PPUSH
38597: PPUSH
// result := 0 ;
38598: LD_ADDR_VAR 0 2
38602: PUSH
38603: LD_INT 0
38605: ST_TO_ADDR
// for i in array do
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: LD_VAR 0 1
38615: PUSH
38616: FOR_IN
38617: IFFALSE 38641
// if i then
38619: LD_VAR 0 3
38623: IFFALSE 38639
// result := result + 1 ;
38625: LD_ADDR_VAR 0 2
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_INT 1
38637: PLUS
38638: ST_TO_ADDR
38639: GO 38616
38641: POP
38642: POP
// end ;
38643: LD_VAR 0 2
38647: RET
// export function IsEmpty ( building ) ; begin
38648: LD_INT 0
38650: PPUSH
// if not building then
38651: LD_VAR 0 1
38655: NOT
38656: IFFALSE 38660
// exit ;
38658: GO 38703
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38660: LD_ADDR_VAR 0 2
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_INT 22
38672: PUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 255
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 58
38689: PUSH
38690: EMPTY
38691: LIST
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PPUSH
38697: CALL_OW 69
38701: IN
38702: ST_TO_ADDR
// end ;
38703: LD_VAR 0 2
38707: RET
// export function IsNotFull ( building ) ; begin
38708: LD_INT 0
38710: PPUSH
// if not building then
38711: LD_VAR 0 1
38715: NOT
38716: IFFALSE 38720
// exit ;
38718: GO 38739
// result := UnitsInside ( building ) < 6 ;
38720: LD_ADDR_VAR 0 2
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 313
38734: PUSH
38735: LD_INT 6
38737: LESS
38738: ST_TO_ADDR
// end ;
38739: LD_VAR 0 2
38743: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38744: LD_INT 0
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
// tmp := [ ] ;
38750: LD_ADDR_VAR 0 3
38754: PUSH
38755: EMPTY
38756: ST_TO_ADDR
// list := [ ] ;
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: EMPTY
38763: ST_TO_ADDR
// for i = 16 to 25 do
38764: LD_ADDR_VAR 0 4
38768: PUSH
38769: DOUBLE
38770: LD_INT 16
38772: DEC
38773: ST_TO_ADDR
38774: LD_INT 25
38776: PUSH
38777: FOR_TO
38778: IFFALSE 38851
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 3
38789: PUSH
38790: LD_INT 22
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 255
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 91
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_INT 6
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 30
38825: PUSH
38826: LD_VAR 0 4
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: PPUSH
38843: CALL_OW 69
38847: ADD
38848: ST_TO_ADDR
38849: GO 38777
38851: POP
38852: POP
// for i = 1 to tmp do
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: DOUBLE
38859: LD_INT 1
38861: DEC
38862: ST_TO_ADDR
38863: LD_VAR 0 3
38867: PUSH
38868: FOR_TO
38869: IFFALSE 38957
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38871: LD_ADDR_VAR 0 5
38875: PUSH
38876: LD_VAR 0 5
38880: PUSH
38881: LD_VAR 0 3
38885: PUSH
38886: LD_VAR 0 4
38890: ARRAY
38891: PPUSH
38892: CALL_OW 266
38896: PUSH
38897: LD_VAR 0 3
38901: PUSH
38902: LD_VAR 0 4
38906: ARRAY
38907: PPUSH
38908: CALL_OW 250
38912: PUSH
38913: LD_VAR 0 3
38917: PUSH
38918: LD_VAR 0 4
38922: ARRAY
38923: PPUSH
38924: CALL_OW 251
38928: PUSH
38929: LD_VAR 0 3
38933: PUSH
38934: LD_VAR 0 4
38938: ARRAY
38939: PPUSH
38940: CALL_OW 254
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: ADD
38954: ST_TO_ADDR
38955: GO 38868
38957: POP
38958: POP
// result := list ;
38959: LD_ADDR_VAR 0 2
38963: PUSH
38964: LD_VAR 0 5
38968: ST_TO_ADDR
// end ;
38969: LD_VAR 0 2
38973: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38974: LD_INT 0
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
// if not factory then
38983: LD_VAR 0 1
38987: NOT
38988: IFFALSE 38992
// exit ;
38990: GO 39585
// if control = control_apeman then
38992: LD_VAR 0 4
38996: PUSH
38997: LD_INT 5
38999: EQUAL
39000: IFFALSE 39109
// begin tmp := UnitsInside ( factory ) ;
39002: LD_ADDR_VAR 0 8
39006: PUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 313
39016: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39017: LD_VAR 0 8
39021: PPUSH
39022: LD_INT 25
39024: PUSH
39025: LD_INT 12
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PPUSH
39032: CALL_OW 72
39036: NOT
39037: IFFALSE 39047
// control := control_manual ;
39039: LD_ADDR_VAR 0 4
39043: PUSH
39044: LD_INT 1
39046: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39047: LD_ADDR_VAR 0 8
39051: PUSH
39052: LD_VAR 0 1
39056: PPUSH
39057: CALL 38744 0 1
39061: ST_TO_ADDR
// if tmp then
39062: LD_VAR 0 8
39066: IFFALSE 39109
// begin for i in tmp do
39068: LD_ADDR_VAR 0 7
39072: PUSH
39073: LD_VAR 0 8
39077: PUSH
39078: FOR_IN
39079: IFFALSE 39107
// if i [ 1 ] = b_ext_radio then
39081: LD_VAR 0 7
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PUSH
39090: LD_INT 22
39092: EQUAL
39093: IFFALSE 39105
// begin control := control_remote ;
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_INT 2
39102: ST_TO_ADDR
// break ;
39103: GO 39107
// end ;
39105: GO 39078
39107: POP
39108: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39109: LD_VAR 0 1
39113: PPUSH
39114: LD_VAR 0 2
39118: PPUSH
39119: LD_VAR 0 3
39123: PPUSH
39124: LD_VAR 0 4
39128: PPUSH
39129: LD_VAR 0 5
39133: PPUSH
39134: CALL_OW 448
39138: IFFALSE 39173
// begin result := [ chassis , engine , control , weapon ] ;
39140: LD_ADDR_VAR 0 6
39144: PUSH
39145: LD_VAR 0 2
39149: PUSH
39150: LD_VAR 0 3
39154: PUSH
39155: LD_VAR 0 4
39159: PUSH
39160: LD_VAR 0 5
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// exit ;
39171: GO 39585
// end ; _chassis := AvailableChassisList ( factory ) ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 475
39187: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39188: LD_ADDR_VAR 0 11
39192: PUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 476
39202: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39203: LD_ADDR_VAR 0 12
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 477
39217: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39218: LD_ADDR_VAR 0 10
39222: PUSH
39223: LD_VAR 0 1
39227: PPUSH
39228: CALL_OW 478
39232: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39233: LD_VAR 0 9
39237: NOT
39238: PUSH
39239: LD_VAR 0 11
39243: NOT
39244: OR
39245: PUSH
39246: LD_VAR 0 12
39250: NOT
39251: OR
39252: PUSH
39253: LD_VAR 0 10
39257: NOT
39258: OR
39259: IFFALSE 39294
// begin result := [ chassis , engine , control , weapon ] ;
39261: LD_ADDR_VAR 0 6
39265: PUSH
39266: LD_VAR 0 2
39270: PUSH
39271: LD_VAR 0 3
39275: PUSH
39276: LD_VAR 0 4
39280: PUSH
39281: LD_VAR 0 5
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// exit ;
39292: GO 39585
// end ; if not chassis in _chassis then
39294: LD_VAR 0 2
39298: PUSH
39299: LD_VAR 0 9
39303: IN
39304: NOT
39305: IFFALSE 39331
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39307: LD_ADDR_VAR 0 2
39311: PUSH
39312: LD_VAR 0 9
39316: PUSH
39317: LD_INT 1
39319: PPUSH
39320: LD_VAR 0 9
39324: PPUSH
39325: CALL_OW 12
39329: ARRAY
39330: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39331: LD_VAR 0 2
39335: PPUSH
39336: LD_VAR 0 3
39340: PPUSH
39341: CALL 39590 0 2
39345: NOT
39346: IFFALSE 39405
// repeat engine := _engine [ 1 ] ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_VAR 0 11
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39362: LD_ADDR_VAR 0 11
39366: PUSH
39367: LD_VAR 0 11
39371: PPUSH
39372: LD_INT 1
39374: PPUSH
39375: CALL_OW 3
39379: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39380: LD_VAR 0 2
39384: PPUSH
39385: LD_VAR 0 3
39389: PPUSH
39390: CALL 39590 0 2
39394: PUSH
39395: LD_VAR 0 11
39399: PUSH
39400: EMPTY
39401: EQUAL
39402: OR
39403: IFFALSE 39348
// if not control in _control then
39405: LD_VAR 0 4
39409: PUSH
39410: LD_VAR 0 12
39414: IN
39415: NOT
39416: IFFALSE 39442
// control := _control [ rand ( 1 , _control ) ] ;
39418: LD_ADDR_VAR 0 4
39422: PUSH
39423: LD_VAR 0 12
39427: PUSH
39428: LD_INT 1
39430: PPUSH
39431: LD_VAR 0 12
39435: PPUSH
39436: CALL_OW 12
39440: ARRAY
39441: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39442: LD_VAR 0 2
39446: PPUSH
39447: LD_VAR 0 5
39451: PPUSH
39452: CALL 39810 0 2
39456: NOT
39457: IFFALSE 39516
// repeat weapon := _weapon [ 1 ] ;
39459: LD_ADDR_VAR 0 5
39463: PUSH
39464: LD_VAR 0 10
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39473: LD_ADDR_VAR 0 10
39477: PUSH
39478: LD_VAR 0 10
39482: PPUSH
39483: LD_INT 1
39485: PPUSH
39486: CALL_OW 3
39490: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39491: LD_VAR 0 2
39495: PPUSH
39496: LD_VAR 0 5
39500: PPUSH
39501: CALL 39810 0 2
39505: PUSH
39506: LD_VAR 0 10
39510: PUSH
39511: EMPTY
39512: EQUAL
39513: OR
39514: IFFALSE 39459
// result := [ ] ;
39516: LD_ADDR_VAR 0 6
39520: PUSH
39521: EMPTY
39522: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: LD_VAR 0 4
39542: PPUSH
39543: LD_VAR 0 5
39547: PPUSH
39548: CALL_OW 448
39552: IFFALSE 39585
// result := [ chassis , engine , control , weapon ] ;
39554: LD_ADDR_VAR 0 6
39558: PUSH
39559: LD_VAR 0 2
39563: PUSH
39564: LD_VAR 0 3
39568: PUSH
39569: LD_VAR 0 4
39573: PUSH
39574: LD_VAR 0 5
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: ST_TO_ADDR
// end ;
39585: LD_VAR 0 6
39589: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39590: LD_INT 0
39592: PPUSH
// if not chassis or not engine then
39593: LD_VAR 0 1
39597: NOT
39598: PUSH
39599: LD_VAR 0 2
39603: NOT
39604: OR
39605: IFFALSE 39609
// exit ;
39607: GO 39805
// case engine of engine_solar :
39609: LD_VAR 0 2
39613: PUSH
39614: LD_INT 2
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39660
39622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 11
39630: PUSH
39631: LD_INT 12
39633: PUSH
39634: LD_INT 13
39636: PUSH
39637: LD_INT 14
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
39658: GO 39789
39660: LD_INT 1
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39730
39668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: LD_INT 11
39676: PUSH
39677: LD_INT 12
39679: PUSH
39680: LD_INT 13
39682: PUSH
39683: LD_INT 14
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: LD_INT 4
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: LD_INT 21
39703: PUSH
39704: LD_INT 23
39706: PUSH
39707: LD_INT 22
39709: PUSH
39710: LD_INT 24
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: ST_TO_ADDR
39728: GO 39789
39730: LD_INT 3
39732: DOUBLE
39733: EQUAL
39734: IFTRUE 39738
39736: GO 39788
39738: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: LD_INT 13
39746: PUSH
39747: LD_INT 14
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: LD_INT 3
39755: PUSH
39756: LD_INT 4
39758: PUSH
39759: LD_INT 5
39761: PUSH
39762: LD_INT 21
39764: PUSH
39765: LD_INT 22
39767: PUSH
39768: LD_INT 23
39770: PUSH
39771: LD_INT 24
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: ST_TO_ADDR
39786: GO 39789
39788: POP
// result := ( chassis in result ) ;
39789: LD_ADDR_VAR 0 3
39793: PUSH
39794: LD_VAR 0 1
39798: PUSH
39799: LD_VAR 0 3
39803: IN
39804: ST_TO_ADDR
// end ;
39805: LD_VAR 0 3
39809: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39810: LD_INT 0
39812: PPUSH
// if not chassis or not weapon then
39813: LD_VAR 0 1
39817: NOT
39818: PUSH
39819: LD_VAR 0 2
39823: NOT
39824: OR
39825: IFFALSE 39829
// exit ;
39827: GO 40855
// case weapon of us_machine_gun :
39829: LD_VAR 0 2
39833: PUSH
39834: LD_INT 2
39836: DOUBLE
39837: EQUAL
39838: IFTRUE 39842
39840: GO 39872
39842: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: LD_INT 4
39859: PUSH
39860: LD_INT 5
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
39870: GO 40839
39872: LD_INT 3
39874: DOUBLE
39875: EQUAL
39876: IFTRUE 39880
39878: GO 39910
39880: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39881: LD_ADDR_VAR 0 3
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: LD_INT 4
39897: PUSH
39898: LD_INT 5
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
39908: GO 40839
39910: LD_INT 11
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 39948
39918: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39919: LD_ADDR_VAR 0 3
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: LD_INT 5
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: ST_TO_ADDR
39946: GO 40839
39948: LD_INT 4
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 39982
39956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 4
39970: PUSH
39971: LD_INT 5
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
39980: GO 40839
39982: LD_INT 5
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40016
39990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 4
40004: PUSH
40005: LD_INT 5
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
40014: GO 40839
40016: LD_INT 9
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40024
40022: GO 40050
40024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: LD_INT 4
40038: PUSH
40039: LD_INT 5
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
40048: GO 40839
40050: LD_INT 7
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40084
40058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: LD_INT 4
40072: PUSH
40073: LD_INT 5
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
40082: GO 40839
40084: LD_INT 12
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40118
40092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 4
40106: PUSH
40107: LD_INT 5
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
40116: GO 40839
40118: LD_INT 13
40120: DOUBLE
40121: EQUAL
40122: IFTRUE 40126
40124: GO 40152
40126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
40150: GO 40839
40152: LD_INT 14
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40178
40160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_INT 4
40168: PUSH
40169: LD_INT 5
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: ST_TO_ADDR
40176: GO 40839
40178: LD_INT 6
40180: DOUBLE
40181: EQUAL
40182: IFTRUE 40186
40184: GO 40204
40186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_INT 4
40194: PUSH
40195: LD_INT 5
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: ST_TO_ADDR
40202: GO 40839
40204: LD_INT 10
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40230
40212: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_INT 4
40220: PUSH
40221: LD_INT 5
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: ST_TO_ADDR
40228: GO 40839
40230: LD_INT 22
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40238
40236: GO 40264
40238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40239: LD_ADDR_VAR 0 3
40243: PUSH
40244: LD_INT 11
40246: PUSH
40247: LD_INT 12
40249: PUSH
40250: LD_INT 13
40252: PUSH
40253: LD_INT 14
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: ST_TO_ADDR
40262: GO 40839
40264: LD_INT 23
40266: DOUBLE
40267: EQUAL
40268: IFTRUE 40272
40270: GO 40298
40272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40273: LD_ADDR_VAR 0 3
40277: PUSH
40278: LD_INT 11
40280: PUSH
40281: LD_INT 12
40283: PUSH
40284: LD_INT 13
40286: PUSH
40287: LD_INT 14
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: ST_TO_ADDR
40296: GO 40839
40298: LD_INT 24
40300: DOUBLE
40301: EQUAL
40302: IFTRUE 40306
40304: GO 40332
40306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_INT 11
40314: PUSH
40315: LD_INT 12
40317: PUSH
40318: LD_INT 13
40320: PUSH
40321: LD_INT 14
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: ST_TO_ADDR
40330: GO 40839
40332: LD_INT 30
40334: DOUBLE
40335: EQUAL
40336: IFTRUE 40340
40338: GO 40366
40340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_INT 11
40348: PUSH
40349: LD_INT 12
40351: PUSH
40352: LD_INT 13
40354: PUSH
40355: LD_INT 14
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
40364: GO 40839
40366: LD_INT 25
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40392
40374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40375: LD_ADDR_VAR 0 3
40379: PUSH
40380: LD_INT 13
40382: PUSH
40383: LD_INT 14
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: ST_TO_ADDR
40390: GO 40839
40392: LD_INT 27
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40418
40400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_INT 13
40408: PUSH
40409: LD_INT 14
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: ST_TO_ADDR
40416: GO 40839
40418: LD_INT 28
40420: DOUBLE
40421: EQUAL
40422: IFTRUE 40426
40424: GO 40444
40426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40427: LD_ADDR_VAR 0 3
40431: PUSH
40432: LD_INT 13
40434: PUSH
40435: LD_INT 14
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: ST_TO_ADDR
40442: GO 40839
40444: LD_INT 29
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40470
40452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_INT 13
40460: PUSH
40461: LD_INT 14
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: ST_TO_ADDR
40468: GO 40839
40470: LD_INT 31
40472: DOUBLE
40473: EQUAL
40474: IFTRUE 40478
40476: GO 40496
40478: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_INT 13
40486: PUSH
40487: LD_INT 14
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: ST_TO_ADDR
40494: GO 40839
40496: LD_INT 26
40498: DOUBLE
40499: EQUAL
40500: IFTRUE 40504
40502: GO 40522
40504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40505: LD_ADDR_VAR 0 3
40509: PUSH
40510: LD_INT 13
40512: PUSH
40513: LD_INT 14
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: ST_TO_ADDR
40520: GO 40839
40522: LD_INT 42
40524: DOUBLE
40525: EQUAL
40526: IFTRUE 40530
40528: GO 40556
40530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40531: LD_ADDR_VAR 0 3
40535: PUSH
40536: LD_INT 21
40538: PUSH
40539: LD_INT 22
40541: PUSH
40542: LD_INT 23
40544: PUSH
40545: LD_INT 24
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
40554: GO 40839
40556: LD_INT 43
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40590
40564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40565: LD_ADDR_VAR 0 3
40569: PUSH
40570: LD_INT 21
40572: PUSH
40573: LD_INT 22
40575: PUSH
40576: LD_INT 23
40578: PUSH
40579: LD_INT 24
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: ST_TO_ADDR
40588: GO 40839
40590: LD_INT 44
40592: DOUBLE
40593: EQUAL
40594: IFTRUE 40598
40596: GO 40624
40598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_INT 21
40606: PUSH
40607: LD_INT 22
40609: PUSH
40610: LD_INT 23
40612: PUSH
40613: LD_INT 24
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
40622: GO 40839
40624: LD_INT 45
40626: DOUBLE
40627: EQUAL
40628: IFTRUE 40632
40630: GO 40658
40632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_INT 21
40640: PUSH
40641: LD_INT 22
40643: PUSH
40644: LD_INT 23
40646: PUSH
40647: LD_INT 24
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: ST_TO_ADDR
40656: GO 40839
40658: LD_INT 49
40660: DOUBLE
40661: EQUAL
40662: IFTRUE 40666
40664: GO 40692
40666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_INT 21
40674: PUSH
40675: LD_INT 22
40677: PUSH
40678: LD_INT 23
40680: PUSH
40681: LD_INT 24
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
40690: GO 40839
40692: LD_INT 51
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40726
40700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40701: LD_ADDR_VAR 0 3
40705: PUSH
40706: LD_INT 21
40708: PUSH
40709: LD_INT 22
40711: PUSH
40712: LD_INT 23
40714: PUSH
40715: LD_INT 24
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
40724: GO 40839
40726: LD_INT 52
40728: DOUBLE
40729: EQUAL
40730: IFTRUE 40734
40732: GO 40760
40734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40735: LD_ADDR_VAR 0 3
40739: PUSH
40740: LD_INT 21
40742: PUSH
40743: LD_INT 22
40745: PUSH
40746: LD_INT 23
40748: PUSH
40749: LD_INT 24
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
40758: GO 40839
40760: LD_INT 53
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40786
40768: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_INT 23
40776: PUSH
40777: LD_INT 24
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: ST_TO_ADDR
40784: GO 40839
40786: LD_INT 46
40788: DOUBLE
40789: EQUAL
40790: IFTRUE 40794
40792: GO 40812
40794: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40795: LD_ADDR_VAR 0 3
40799: PUSH
40800: LD_INT 23
40802: PUSH
40803: LD_INT 24
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: ST_TO_ADDR
40810: GO 40839
40812: LD_INT 47
40814: DOUBLE
40815: EQUAL
40816: IFTRUE 40820
40818: GO 40838
40820: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40821: LD_ADDR_VAR 0 3
40825: PUSH
40826: LD_INT 23
40828: PUSH
40829: LD_INT 24
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: ST_TO_ADDR
40836: GO 40839
40838: POP
// result := ( chassis in result ) ;
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_VAR 0 1
40848: PUSH
40849: LD_VAR 0 3
40853: IN
40854: ST_TO_ADDR
// end ;
40855: LD_VAR 0 3
40859: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40860: LD_INT 0
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
// result := array ;
40869: LD_ADDR_VAR 0 5
40873: PUSH
40874: LD_VAR 0 1
40878: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40879: LD_VAR 0 1
40883: NOT
40884: PUSH
40885: LD_VAR 0 2
40889: NOT
40890: OR
40891: PUSH
40892: LD_VAR 0 3
40896: NOT
40897: OR
40898: PUSH
40899: LD_VAR 0 2
40903: PUSH
40904: LD_VAR 0 1
40908: GREATER
40909: OR
40910: PUSH
40911: LD_VAR 0 3
40915: PUSH
40916: LD_VAR 0 1
40920: GREATER
40921: OR
40922: IFFALSE 40926
// exit ;
40924: GO 41222
// if direction then
40926: LD_VAR 0 4
40930: IFFALSE 40994
// begin d := 1 ;
40932: LD_ADDR_VAR 0 9
40936: PUSH
40937: LD_INT 1
40939: ST_TO_ADDR
// if i_from > i_to then
40940: LD_VAR 0 2
40944: PUSH
40945: LD_VAR 0 3
40949: GREATER
40950: IFFALSE 40976
// length := ( array - i_from ) + i_to else
40952: LD_ADDR_VAR 0 11
40956: PUSH
40957: LD_VAR 0 1
40961: PUSH
40962: LD_VAR 0 2
40966: MINUS
40967: PUSH
40968: LD_VAR 0 3
40972: PLUS
40973: ST_TO_ADDR
40974: GO 40992
// length := i_to - i_from ;
40976: LD_ADDR_VAR 0 11
40980: PUSH
40981: LD_VAR 0 3
40985: PUSH
40986: LD_VAR 0 2
40990: MINUS
40991: ST_TO_ADDR
// end else
40992: GO 41055
// begin d := - 1 ;
40994: LD_ADDR_VAR 0 9
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: ST_TO_ADDR
// if i_from > i_to then
41003: LD_VAR 0 2
41007: PUSH
41008: LD_VAR 0 3
41012: GREATER
41013: IFFALSE 41033
// length := i_from - i_to else
41015: LD_ADDR_VAR 0 11
41019: PUSH
41020: LD_VAR 0 2
41024: PUSH
41025: LD_VAR 0 3
41029: MINUS
41030: ST_TO_ADDR
41031: GO 41055
// length := ( array - i_to ) + i_from ;
41033: LD_ADDR_VAR 0 11
41037: PUSH
41038: LD_VAR 0 1
41042: PUSH
41043: LD_VAR 0 3
41047: MINUS
41048: PUSH
41049: LD_VAR 0 2
41053: PLUS
41054: ST_TO_ADDR
// end ; if not length then
41055: LD_VAR 0 11
41059: NOT
41060: IFFALSE 41064
// exit ;
41062: GO 41222
// tmp := array ;
41064: LD_ADDR_VAR 0 10
41068: PUSH
41069: LD_VAR 0 1
41073: ST_TO_ADDR
// for i = 1 to length do
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: DOUBLE
41080: LD_INT 1
41082: DEC
41083: ST_TO_ADDR
41084: LD_VAR 0 11
41088: PUSH
41089: FOR_TO
41090: IFFALSE 41210
// begin for j = 1 to array do
41092: LD_ADDR_VAR 0 7
41096: PUSH
41097: DOUBLE
41098: LD_INT 1
41100: DEC
41101: ST_TO_ADDR
41102: LD_VAR 0 1
41106: PUSH
41107: FOR_TO
41108: IFFALSE 41196
// begin k := j + d ;
41110: LD_ADDR_VAR 0 8
41114: PUSH
41115: LD_VAR 0 7
41119: PUSH
41120: LD_VAR 0 9
41124: PLUS
41125: ST_TO_ADDR
// if k > array then
41126: LD_VAR 0 8
41130: PUSH
41131: LD_VAR 0 1
41135: GREATER
41136: IFFALSE 41146
// k := 1 ;
41138: LD_ADDR_VAR 0 8
41142: PUSH
41143: LD_INT 1
41145: ST_TO_ADDR
// if not k then
41146: LD_VAR 0 8
41150: NOT
41151: IFFALSE 41163
// k := array ;
41153: LD_ADDR_VAR 0 8
41157: PUSH
41158: LD_VAR 0 1
41162: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41163: LD_ADDR_VAR 0 10
41167: PUSH
41168: LD_VAR 0 10
41172: PPUSH
41173: LD_VAR 0 8
41177: PPUSH
41178: LD_VAR 0 1
41182: PUSH
41183: LD_VAR 0 7
41187: ARRAY
41188: PPUSH
41189: CALL_OW 1
41193: ST_TO_ADDR
// end ;
41194: GO 41107
41196: POP
41197: POP
// array := tmp ;
41198: LD_ADDR_VAR 0 1
41202: PUSH
41203: LD_VAR 0 10
41207: ST_TO_ADDR
// end ;
41208: GO 41089
41210: POP
41211: POP
// result := array ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_VAR 0 1
41221: ST_TO_ADDR
// end ;
41222: LD_VAR 0 5
41226: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41227: LD_INT 0
41229: PPUSH
41230: PPUSH
// result := 0 ;
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_INT 0
41238: ST_TO_ADDR
// if not array or not value in array then
41239: LD_VAR 0 1
41243: NOT
41244: PUSH
41245: LD_VAR 0 2
41249: PUSH
41250: LD_VAR 0 1
41254: IN
41255: NOT
41256: OR
41257: IFFALSE 41261
// exit ;
41259: GO 41315
// for i = 1 to array do
41261: LD_ADDR_VAR 0 4
41265: PUSH
41266: DOUBLE
41267: LD_INT 1
41269: DEC
41270: ST_TO_ADDR
41271: LD_VAR 0 1
41275: PUSH
41276: FOR_TO
41277: IFFALSE 41313
// if value = array [ i ] then
41279: LD_VAR 0 2
41283: PUSH
41284: LD_VAR 0 1
41288: PUSH
41289: LD_VAR 0 4
41293: ARRAY
41294: EQUAL
41295: IFFALSE 41311
// begin result := i ;
41297: LD_ADDR_VAR 0 3
41301: PUSH
41302: LD_VAR 0 4
41306: ST_TO_ADDR
// exit ;
41307: POP
41308: POP
41309: GO 41315
// end ;
41311: GO 41276
41313: POP
41314: POP
// end ;
41315: LD_VAR 0 3
41319: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41320: LD_INT 0
41322: PPUSH
// vc_chassis := chassis ;
41323: LD_ADDR_OWVAR 37
41327: PUSH
41328: LD_VAR 0 1
41332: ST_TO_ADDR
// vc_engine := engine ;
41333: LD_ADDR_OWVAR 39
41337: PUSH
41338: LD_VAR 0 2
41342: ST_TO_ADDR
// vc_control := control ;
41343: LD_ADDR_OWVAR 38
41347: PUSH
41348: LD_VAR 0 3
41352: ST_TO_ADDR
// vc_weapon := weapon ;
41353: LD_ADDR_OWVAR 40
41357: PUSH
41358: LD_VAR 0 4
41362: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41363: LD_ADDR_OWVAR 41
41367: PUSH
41368: LD_VAR 0 5
41372: ST_TO_ADDR
// end ;
41373: LD_VAR 0 6
41377: RET
// export function WantPlant ( unit ) ; var task ; begin
41378: LD_INT 0
41380: PPUSH
41381: PPUSH
// result := false ;
41382: LD_ADDR_VAR 0 2
41386: PUSH
41387: LD_INT 0
41389: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 437
41404: ST_TO_ADDR
// if task then
41405: LD_VAR 0 3
41409: IFFALSE 41437
// if task [ 1 ] [ 1 ] = p then
41411: LD_VAR 0 3
41415: PUSH
41416: LD_INT 1
41418: ARRAY
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PUSH
41424: LD_STRING p
41426: EQUAL
41427: IFFALSE 41437
// result := true ;
41429: LD_ADDR_VAR 0 2
41433: PUSH
41434: LD_INT 1
41436: ST_TO_ADDR
// end ;
41437: LD_VAR 0 2
41441: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
// if pos < 1 then
41448: LD_VAR 0 2
41452: PUSH
41453: LD_INT 1
41455: LESS
41456: IFFALSE 41460
// exit ;
41458: GO 41763
// if pos = 1 then
41460: LD_VAR 0 2
41464: PUSH
41465: LD_INT 1
41467: EQUAL
41468: IFFALSE 41501
// result := Replace ( arr , pos [ 1 ] , value ) else
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_VAR 0 2
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PPUSH
41489: LD_VAR 0 3
41493: PPUSH
41494: CALL_OW 1
41498: ST_TO_ADDR
41499: GO 41763
// begin tmp := arr ;
41501: LD_ADDR_VAR 0 6
41505: PUSH
41506: LD_VAR 0 1
41510: ST_TO_ADDR
// s_arr := [ tmp ] ;
41511: LD_ADDR_VAR 0 7
41515: PUSH
41516: LD_VAR 0 6
41520: PUSH
41521: EMPTY
41522: LIST
41523: ST_TO_ADDR
// for i = 1 to pos - 1 do
41524: LD_ADDR_VAR 0 5
41528: PUSH
41529: DOUBLE
41530: LD_INT 1
41532: DEC
41533: ST_TO_ADDR
41534: LD_VAR 0 2
41538: PUSH
41539: LD_INT 1
41541: MINUS
41542: PUSH
41543: FOR_TO
41544: IFFALSE 41589
// begin tmp := tmp [ pos [ i ] ] ;
41546: LD_ADDR_VAR 0 6
41550: PUSH
41551: LD_VAR 0 6
41555: PUSH
41556: LD_VAR 0 2
41560: PUSH
41561: LD_VAR 0 5
41565: ARRAY
41566: ARRAY
41567: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41568: LD_ADDR_VAR 0 7
41572: PUSH
41573: LD_VAR 0 7
41577: PUSH
41578: LD_VAR 0 6
41582: PUSH
41583: EMPTY
41584: LIST
41585: ADD
41586: ST_TO_ADDR
// end ;
41587: GO 41543
41589: POP
41590: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41591: LD_ADDR_VAR 0 6
41595: PUSH
41596: LD_VAR 0 6
41600: PPUSH
41601: LD_VAR 0 2
41605: PUSH
41606: LD_VAR 0 2
41610: ARRAY
41611: PPUSH
41612: LD_VAR 0 3
41616: PPUSH
41617: CALL_OW 1
41621: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41622: LD_ADDR_VAR 0 7
41626: PUSH
41627: LD_VAR 0 7
41631: PPUSH
41632: LD_VAR 0 7
41636: PPUSH
41637: LD_VAR 0 6
41641: PPUSH
41642: CALL_OW 1
41646: ST_TO_ADDR
// for i = s_arr downto 2 do
41647: LD_ADDR_VAR 0 5
41651: PUSH
41652: DOUBLE
41653: LD_VAR 0 7
41657: INC
41658: ST_TO_ADDR
41659: LD_INT 2
41661: PUSH
41662: FOR_DOWNTO
41663: IFFALSE 41747
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41665: LD_ADDR_VAR 0 6
41669: PUSH
41670: LD_VAR 0 7
41674: PUSH
41675: LD_VAR 0 5
41679: PUSH
41680: LD_INT 1
41682: MINUS
41683: ARRAY
41684: PPUSH
41685: LD_VAR 0 2
41689: PUSH
41690: LD_VAR 0 5
41694: PUSH
41695: LD_INT 1
41697: MINUS
41698: ARRAY
41699: PPUSH
41700: LD_VAR 0 7
41704: PUSH
41705: LD_VAR 0 5
41709: ARRAY
41710: PPUSH
41711: CALL_OW 1
41715: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41716: LD_ADDR_VAR 0 7
41720: PUSH
41721: LD_VAR 0 7
41725: PPUSH
41726: LD_VAR 0 5
41730: PUSH
41731: LD_INT 1
41733: MINUS
41734: PPUSH
41735: LD_VAR 0 6
41739: PPUSH
41740: CALL_OW 1
41744: ST_TO_ADDR
// end ;
41745: GO 41662
41747: POP
41748: POP
// result := s_arr [ 1 ] ;
41749: LD_ADDR_VAR 0 4
41753: PUSH
41754: LD_VAR 0 7
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: ST_TO_ADDR
// end ; end ;
41763: LD_VAR 0 4
41767: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41768: LD_INT 0
41770: PPUSH
41771: PPUSH
// if not list then
41772: LD_VAR 0 1
41776: NOT
41777: IFFALSE 41781
// exit ;
41779: GO 41872
// i := list [ pos1 ] ;
41781: LD_ADDR_VAR 0 5
41785: PUSH
41786: LD_VAR 0 1
41790: PUSH
41791: LD_VAR 0 2
41795: ARRAY
41796: ST_TO_ADDR
// if not i then
41797: LD_VAR 0 5
41801: NOT
41802: IFFALSE 41806
// exit ;
41804: GO 41872
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41806: LD_ADDR_VAR 0 1
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_VAR 0 2
41820: PPUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_VAR 0 3
41830: ARRAY
41831: PPUSH
41832: CALL_OW 1
41836: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41837: LD_ADDR_VAR 0 1
41841: PUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: LD_VAR 0 3
41851: PPUSH
41852: LD_VAR 0 5
41856: PPUSH
41857: CALL_OW 1
41861: ST_TO_ADDR
// result := list ;
41862: LD_ADDR_VAR 0 4
41866: PUSH
41867: LD_VAR 0 1
41871: ST_TO_ADDR
// end ;
41872: LD_VAR 0 4
41876: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41877: LD_INT 0
41879: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41880: LD_ADDR_VAR 0 5
41884: PUSH
41885: LD_VAR 0 1
41889: PPUSH
41890: CALL_OW 250
41894: PPUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 251
41904: PPUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: LD_VAR 0 3
41914: PPUSH
41915: LD_VAR 0 4
41919: PPUSH
41920: CALL 41930 0 5
41924: ST_TO_ADDR
// end ;
41925: LD_VAR 0 5
41929: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41930: LD_INT 0
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
// if not list then
41936: LD_VAR 0 3
41940: NOT
41941: IFFALSE 41945
// exit ;
41943: GO 42333
// result := [ ] ;
41945: LD_ADDR_VAR 0 6
41949: PUSH
41950: EMPTY
41951: ST_TO_ADDR
// for i in list do
41952: LD_ADDR_VAR 0 7
41956: PUSH
41957: LD_VAR 0 3
41961: PUSH
41962: FOR_IN
41963: IFFALSE 42165
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41965: LD_ADDR_VAR 0 9
41969: PUSH
41970: LD_VAR 0 7
41974: PPUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: LD_VAR 0 2
41984: PPUSH
41985: CALL_OW 297
41989: ST_TO_ADDR
// if not result then
41990: LD_VAR 0 6
41994: NOT
41995: IFFALSE 42021
// result := [ [ i , tmp ] ] else
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: LD_VAR 0 7
42006: PUSH
42007: LD_VAR 0 9
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: ST_TO_ADDR
42019: GO 42163
// begin if result [ result ] [ 2 ] < tmp then
42021: LD_VAR 0 6
42025: PUSH
42026: LD_VAR 0 6
42030: ARRAY
42031: PUSH
42032: LD_INT 2
42034: ARRAY
42035: PUSH
42036: LD_VAR 0 9
42040: LESS
42041: IFFALSE 42083
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42043: LD_ADDR_VAR 0 6
42047: PUSH
42048: LD_VAR 0 6
42052: PPUSH
42053: LD_VAR 0 6
42057: PUSH
42058: LD_INT 1
42060: PLUS
42061: PPUSH
42062: LD_VAR 0 7
42066: PUSH
42067: LD_VAR 0 9
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PPUSH
42076: CALL_OW 2
42080: ST_TO_ADDR
42081: GO 42163
// for j = 1 to result do
42083: LD_ADDR_VAR 0 8
42087: PUSH
42088: DOUBLE
42089: LD_INT 1
42091: DEC
42092: ST_TO_ADDR
42093: LD_VAR 0 6
42097: PUSH
42098: FOR_TO
42099: IFFALSE 42161
// begin if tmp < result [ j ] [ 2 ] then
42101: LD_VAR 0 9
42105: PUSH
42106: LD_VAR 0 6
42110: PUSH
42111: LD_VAR 0 8
42115: ARRAY
42116: PUSH
42117: LD_INT 2
42119: ARRAY
42120: LESS
42121: IFFALSE 42159
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42123: LD_ADDR_VAR 0 6
42127: PUSH
42128: LD_VAR 0 6
42132: PPUSH
42133: LD_VAR 0 8
42137: PPUSH
42138: LD_VAR 0 7
42142: PUSH
42143: LD_VAR 0 9
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PPUSH
42152: CALL_OW 2
42156: ST_TO_ADDR
// break ;
42157: GO 42161
// end ; end ;
42159: GO 42098
42161: POP
42162: POP
// end ; end ;
42163: GO 41962
42165: POP
42166: POP
// if result and not asc then
42167: LD_VAR 0 6
42171: PUSH
42172: LD_VAR 0 4
42176: NOT
42177: AND
42178: IFFALSE 42253
// begin tmp := result ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_VAR 0 6
42189: ST_TO_ADDR
// for i = tmp downto 1 do
42190: LD_ADDR_VAR 0 7
42194: PUSH
42195: DOUBLE
42196: LD_VAR 0 9
42200: INC
42201: ST_TO_ADDR
42202: LD_INT 1
42204: PUSH
42205: FOR_DOWNTO
42206: IFFALSE 42251
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42208: LD_ADDR_VAR 0 6
42212: PUSH
42213: LD_VAR 0 6
42217: PPUSH
42218: LD_VAR 0 9
42222: PUSH
42223: LD_VAR 0 7
42227: MINUS
42228: PUSH
42229: LD_INT 1
42231: PLUS
42232: PPUSH
42233: LD_VAR 0 9
42237: PUSH
42238: LD_VAR 0 7
42242: ARRAY
42243: PPUSH
42244: CALL_OW 1
42248: ST_TO_ADDR
42249: GO 42205
42251: POP
42252: POP
// end ; tmp := [ ] ;
42253: LD_ADDR_VAR 0 9
42257: PUSH
42258: EMPTY
42259: ST_TO_ADDR
// if mode then
42260: LD_VAR 0 5
42264: IFFALSE 42333
// begin for i = 1 to result do
42266: LD_ADDR_VAR 0 7
42270: PUSH
42271: DOUBLE
42272: LD_INT 1
42274: DEC
42275: ST_TO_ADDR
42276: LD_VAR 0 6
42280: PUSH
42281: FOR_TO
42282: IFFALSE 42321
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42284: LD_ADDR_VAR 0 9
42288: PUSH
42289: LD_VAR 0 9
42293: PPUSH
42294: LD_VAR 0 7
42298: PPUSH
42299: LD_VAR 0 6
42303: PUSH
42304: LD_VAR 0 7
42308: ARRAY
42309: PUSH
42310: LD_INT 1
42312: ARRAY
42313: PPUSH
42314: CALL_OW 1
42318: ST_TO_ADDR
42319: GO 42281
42321: POP
42322: POP
// result := tmp ;
42323: LD_ADDR_VAR 0 6
42327: PUSH
42328: LD_VAR 0 9
42332: ST_TO_ADDR
// end ; end ;
42333: LD_VAR 0 6
42337: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42338: LD_INT 0
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42346: LD_ADDR_VAR 0 5
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: ST_TO_ADDR
// if not x or not y then
42368: LD_VAR 0 2
42372: NOT
42373: PUSH
42374: LD_VAR 0 3
42378: NOT
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 44030
// if not range then
42384: LD_VAR 0 4
42388: NOT
42389: IFFALSE 42399
// range := 10 ;
42391: LD_ADDR_VAR 0 4
42395: PUSH
42396: LD_INT 10
42398: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42399: LD_ADDR_VAR 0 8
42403: PUSH
42404: LD_INT 81
42406: PUSH
42407: LD_VAR 0 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 92
42418: PUSH
42419: LD_VAR 0 2
42423: PUSH
42424: LD_VAR 0 3
42428: PUSH
42429: LD_VAR 0 4
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: LD_INT 21
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: PPUSH
42462: CALL_OW 69
42466: ST_TO_ADDR
// if not tmp then
42467: LD_VAR 0 8
42471: NOT
42472: IFFALSE 42476
// exit ;
42474: GO 44030
// for i in tmp do
42476: LD_ADDR_VAR 0 6
42480: PUSH
42481: LD_VAR 0 8
42485: PUSH
42486: FOR_IN
42487: IFFALSE 44005
// begin points := [ 0 , 0 , 0 ] ;
42489: LD_ADDR_VAR 0 9
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
// bpoints := 1 ;
42508: LD_ADDR_VAR 0 10
42512: PUSH
42513: LD_INT 1
42515: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42516: LD_VAR 0 6
42520: PPUSH
42521: CALL_OW 247
42525: PUSH
42526: LD_INT 1
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 43112
42534: POP
// begin if GetClass ( i ) = 1 then
42535: LD_VAR 0 6
42539: PPUSH
42540: CALL_OW 257
42544: PUSH
42545: LD_INT 1
42547: EQUAL
42548: IFFALSE 42569
// points := [ 10 , 5 , 3 ] ;
42550: LD_ADDR_VAR 0 9
42554: PUSH
42555: LD_INT 10
42557: PUSH
42558: LD_INT 5
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42569: LD_VAR 0 6
42573: PPUSH
42574: CALL_OW 257
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 3
42584: PUSH
42585: LD_INT 4
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: IN
42593: IFFALSE 42614
// points := [ 3 , 2 , 1 ] ;
42595: LD_ADDR_VAR 0 9
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42614: LD_VAR 0 6
42618: PPUSH
42619: CALL_OW 257
42623: PUSH
42624: LD_INT 5
42626: EQUAL
42627: IFFALSE 42648
// points := [ 130 , 5 , 2 ] ;
42629: LD_ADDR_VAR 0 9
42633: PUSH
42634: LD_INT 130
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42648: LD_VAR 0 6
42652: PPUSH
42653: CALL_OW 257
42657: PUSH
42658: LD_INT 8
42660: EQUAL
42661: IFFALSE 42682
// points := [ 35 , 35 , 30 ] ;
42663: LD_ADDR_VAR 0 9
42667: PUSH
42668: LD_INT 35
42670: PUSH
42671: LD_INT 35
42673: PUSH
42674: LD_INT 30
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42682: LD_VAR 0 6
42686: PPUSH
42687: CALL_OW 257
42691: PUSH
42692: LD_INT 9
42694: EQUAL
42695: IFFALSE 42716
// points := [ 20 , 55 , 40 ] ;
42697: LD_ADDR_VAR 0 9
42701: PUSH
42702: LD_INT 20
42704: PUSH
42705: LD_INT 55
42707: PUSH
42708: LD_INT 40
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42716: LD_VAR 0 6
42720: PPUSH
42721: CALL_OW 257
42725: PUSH
42726: LD_INT 12
42728: PUSH
42729: LD_INT 16
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: IN
42736: IFFALSE 42757
// points := [ 5 , 3 , 2 ] ;
42738: LD_ADDR_VAR 0 9
42742: PUSH
42743: LD_INT 5
42745: PUSH
42746: LD_INT 3
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42757: LD_VAR 0 6
42761: PPUSH
42762: CALL_OW 257
42766: PUSH
42767: LD_INT 17
42769: EQUAL
42770: IFFALSE 42791
// points := [ 100 , 50 , 75 ] ;
42772: LD_ADDR_VAR 0 9
42776: PUSH
42777: LD_INT 100
42779: PUSH
42780: LD_INT 50
42782: PUSH
42783: LD_INT 75
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42791: LD_VAR 0 6
42795: PPUSH
42796: CALL_OW 257
42800: PUSH
42801: LD_INT 15
42803: EQUAL
42804: IFFALSE 42825
// points := [ 10 , 5 , 3 ] ;
42806: LD_ADDR_VAR 0 9
42810: PUSH
42811: LD_INT 10
42813: PUSH
42814: LD_INT 5
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42825: LD_VAR 0 6
42829: PPUSH
42830: CALL_OW 257
42834: PUSH
42835: LD_INT 14
42837: EQUAL
42838: IFFALSE 42859
// points := [ 10 , 0 , 0 ] ;
42840: LD_ADDR_VAR 0 9
42844: PUSH
42845: LD_INT 10
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42859: LD_VAR 0 6
42863: PPUSH
42864: CALL_OW 257
42868: PUSH
42869: LD_INT 11
42871: EQUAL
42872: IFFALSE 42893
// points := [ 30 , 10 , 5 ] ;
42874: LD_ADDR_VAR 0 9
42878: PUSH
42879: LD_INT 30
42881: PUSH
42882: LD_INT 10
42884: PUSH
42885: LD_INT 5
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42893: LD_VAR 0 1
42897: PPUSH
42898: LD_INT 5
42900: PPUSH
42901: CALL_OW 321
42905: PUSH
42906: LD_INT 2
42908: EQUAL
42909: IFFALSE 42926
// bpoints := bpoints * 1.8 ;
42911: LD_ADDR_VAR 0 10
42915: PUSH
42916: LD_VAR 0 10
42920: PUSH
42921: LD_REAL  1.80000000000000E+0000
42924: MUL
42925: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42926: LD_VAR 0 6
42930: PPUSH
42931: CALL_OW 257
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 4
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: IN
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_INT 51
42962: PPUSH
42963: CALL_OW 321
42967: PUSH
42968: LD_INT 2
42970: EQUAL
42971: AND
42972: IFFALSE 42989
// bpoints := bpoints * 1.2 ;
42974: LD_ADDR_VAR 0 10
42978: PUSH
42979: LD_VAR 0 10
42983: PUSH
42984: LD_REAL  1.20000000000000E+0000
42987: MUL
42988: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42989: LD_VAR 0 6
42993: PPUSH
42994: CALL_OW 257
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: LD_INT 7
43004: PUSH
43005: LD_INT 9
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: IN
43013: PUSH
43014: LD_VAR 0 1
43018: PPUSH
43019: LD_INT 52
43021: PPUSH
43022: CALL_OW 321
43026: PUSH
43027: LD_INT 2
43029: EQUAL
43030: AND
43031: IFFALSE 43048
// bpoints := bpoints * 1.5 ;
43033: LD_ADDR_VAR 0 10
43037: PUSH
43038: LD_VAR 0 10
43042: PUSH
43043: LD_REAL  1.50000000000000E+0000
43046: MUL
43047: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43048: LD_VAR 0 1
43052: PPUSH
43053: LD_INT 66
43055: PPUSH
43056: CALL_OW 321
43060: PUSH
43061: LD_INT 2
43063: EQUAL
43064: IFFALSE 43081
// bpoints := bpoints * 1.1 ;
43066: LD_ADDR_VAR 0 10
43070: PUSH
43071: LD_VAR 0 10
43075: PUSH
43076: LD_REAL  1.10000000000000E+0000
43079: MUL
43080: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43081: LD_ADDR_VAR 0 10
43085: PUSH
43086: LD_VAR 0 10
43090: PUSH
43091: LD_VAR 0 6
43095: PPUSH
43096: LD_INT 1
43098: PPUSH
43099: CALL_OW 259
43103: PUSH
43104: LD_REAL  1.15000000000000E+0000
43107: MUL
43108: MUL
43109: ST_TO_ADDR
// end ; unit_vehicle :
43110: GO 43934
43112: LD_INT 2
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43120
43118: GO 43922
43120: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43121: LD_VAR 0 6
43125: PPUSH
43126: CALL_OW 264
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 42
43136: PUSH
43137: LD_INT 24
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: IN
43145: IFFALSE 43166
// points := [ 25 , 5 , 3 ] ;
43147: LD_ADDR_VAR 0 9
43151: PUSH
43152: LD_INT 25
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43166: LD_VAR 0 6
43170: PPUSH
43171: CALL_OW 264
43175: PUSH
43176: LD_INT 4
43178: PUSH
43179: LD_INT 43
43181: PUSH
43182: LD_INT 25
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: IN
43190: IFFALSE 43211
// points := [ 40 , 15 , 5 ] ;
43192: LD_ADDR_VAR 0 9
43196: PUSH
43197: LD_INT 40
43199: PUSH
43200: LD_INT 15
43202: PUSH
43203: LD_INT 5
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43211: LD_VAR 0 6
43215: PPUSH
43216: CALL_OW 264
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 23
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: IN
43231: IFFALSE 43252
// points := [ 7 , 25 , 8 ] ;
43233: LD_ADDR_VAR 0 9
43237: PUSH
43238: LD_INT 7
43240: PUSH
43241: LD_INT 25
43243: PUSH
43244: LD_INT 8
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43252: LD_VAR 0 6
43256: PPUSH
43257: CALL_OW 264
43261: PUSH
43262: LD_INT 5
43264: PUSH
43265: LD_INT 27
43267: PUSH
43268: LD_INT 44
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: IN
43276: IFFALSE 43297
// points := [ 14 , 50 , 16 ] ;
43278: LD_ADDR_VAR 0 9
43282: PUSH
43283: LD_INT 14
43285: PUSH
43286: LD_INT 50
43288: PUSH
43289: LD_INT 16
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43297: LD_VAR 0 6
43301: PPUSH
43302: CALL_OW 264
43306: PUSH
43307: LD_INT 6
43309: PUSH
43310: LD_INT 46
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: IN
43317: IFFALSE 43338
// points := [ 32 , 120 , 70 ] ;
43319: LD_ADDR_VAR 0 9
43323: PUSH
43324: LD_INT 32
43326: PUSH
43327: LD_INT 120
43329: PUSH
43330: LD_INT 70
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43338: LD_VAR 0 6
43342: PPUSH
43343: CALL_OW 264
43347: PUSH
43348: LD_INT 7
43350: PUSH
43351: LD_INT 28
43353: PUSH
43354: LD_INT 45
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: IN
43362: IFFALSE 43383
// points := [ 35 , 20 , 45 ] ;
43364: LD_ADDR_VAR 0 9
43368: PUSH
43369: LD_INT 35
43371: PUSH
43372: LD_INT 20
43374: PUSH
43375: LD_INT 45
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43383: LD_VAR 0 6
43387: PPUSH
43388: CALL_OW 264
43392: PUSH
43393: LD_INT 47
43395: PUSH
43396: EMPTY
43397: LIST
43398: IN
43399: IFFALSE 43420
// points := [ 67 , 45 , 75 ] ;
43401: LD_ADDR_VAR 0 9
43405: PUSH
43406: LD_INT 67
43408: PUSH
43409: LD_INT 45
43411: PUSH
43412: LD_INT 75
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43420: LD_VAR 0 6
43424: PPUSH
43425: CALL_OW 264
43429: PUSH
43430: LD_INT 26
43432: PUSH
43433: EMPTY
43434: LIST
43435: IN
43436: IFFALSE 43457
// points := [ 120 , 30 , 80 ] ;
43438: LD_ADDR_VAR 0 9
43442: PUSH
43443: LD_INT 120
43445: PUSH
43446: LD_INT 30
43448: PUSH
43449: LD_INT 80
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43457: LD_VAR 0 6
43461: PPUSH
43462: CALL_OW 264
43466: PUSH
43467: LD_INT 22
43469: PUSH
43470: EMPTY
43471: LIST
43472: IN
43473: IFFALSE 43494
// points := [ 40 , 1 , 1 ] ;
43475: LD_ADDR_VAR 0 9
43479: PUSH
43480: LD_INT 40
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43494: LD_VAR 0 6
43498: PPUSH
43499: CALL_OW 264
43503: PUSH
43504: LD_INT 29
43506: PUSH
43507: EMPTY
43508: LIST
43509: IN
43510: IFFALSE 43531
// points := [ 70 , 200 , 400 ] ;
43512: LD_ADDR_VAR 0 9
43516: PUSH
43517: LD_INT 70
43519: PUSH
43520: LD_INT 200
43522: PUSH
43523: LD_INT 400
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43531: LD_VAR 0 6
43535: PPUSH
43536: CALL_OW 264
43540: PUSH
43541: LD_INT 14
43543: PUSH
43544: LD_INT 53
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: IN
43551: IFFALSE 43572
// points := [ 40 , 10 , 20 ] ;
43553: LD_ADDR_VAR 0 9
43557: PUSH
43558: LD_INT 40
43560: PUSH
43561: LD_INT 10
43563: PUSH
43564: LD_INT 20
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43572: LD_VAR 0 6
43576: PPUSH
43577: CALL_OW 264
43581: PUSH
43582: LD_INT 9
43584: PUSH
43585: EMPTY
43586: LIST
43587: IN
43588: IFFALSE 43609
// points := [ 5 , 70 , 20 ] ;
43590: LD_ADDR_VAR 0 9
43594: PUSH
43595: LD_INT 5
43597: PUSH
43598: LD_INT 70
43600: PUSH
43601: LD_INT 20
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43609: LD_VAR 0 6
43613: PPUSH
43614: CALL_OW 264
43618: PUSH
43619: LD_INT 10
43621: PUSH
43622: EMPTY
43623: LIST
43624: IN
43625: IFFALSE 43646
// points := [ 35 , 110 , 70 ] ;
43627: LD_ADDR_VAR 0 9
43631: PUSH
43632: LD_INT 35
43634: PUSH
43635: LD_INT 110
43637: PUSH
43638: LD_INT 70
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43646: LD_VAR 0 6
43650: PPUSH
43651: CALL_OW 265
43655: PUSH
43656: LD_INT 25
43658: EQUAL
43659: IFFALSE 43680
// points := [ 80 , 65 , 100 ] ;
43661: LD_ADDR_VAR 0 9
43665: PUSH
43666: LD_INT 80
43668: PUSH
43669: LD_INT 65
43671: PUSH
43672: LD_INT 100
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43680: LD_VAR 0 6
43684: PPUSH
43685: CALL_OW 263
43689: PUSH
43690: LD_INT 1
43692: EQUAL
43693: IFFALSE 43728
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43695: LD_ADDR_VAR 0 10
43699: PUSH
43700: LD_VAR 0 10
43704: PUSH
43705: LD_VAR 0 6
43709: PPUSH
43710: CALL_OW 311
43714: PPUSH
43715: LD_INT 3
43717: PPUSH
43718: CALL_OW 259
43722: PUSH
43723: LD_INT 4
43725: MUL
43726: MUL
43727: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43728: LD_VAR 0 6
43732: PPUSH
43733: CALL_OW 263
43737: PUSH
43738: LD_INT 2
43740: EQUAL
43741: IFFALSE 43792
// begin j := IsControledBy ( i ) ;
43743: LD_ADDR_VAR 0 7
43747: PUSH
43748: LD_VAR 0 6
43752: PPUSH
43753: CALL_OW 312
43757: ST_TO_ADDR
// if j then
43758: LD_VAR 0 7
43762: IFFALSE 43792
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43764: LD_ADDR_VAR 0 10
43768: PUSH
43769: LD_VAR 0 10
43773: PUSH
43774: LD_VAR 0 7
43778: PPUSH
43779: LD_INT 3
43781: PPUSH
43782: CALL_OW 259
43786: PUSH
43787: LD_INT 3
43789: MUL
43790: MUL
43791: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43792: LD_VAR 0 6
43796: PPUSH
43797: CALL_OW 264
43801: PUSH
43802: LD_INT 5
43804: PUSH
43805: LD_INT 6
43807: PUSH
43808: LD_INT 46
43810: PUSH
43811: LD_INT 44
43813: PUSH
43814: LD_INT 47
43816: PUSH
43817: LD_INT 45
43819: PUSH
43820: LD_INT 28
43822: PUSH
43823: LD_INT 7
43825: PUSH
43826: LD_INT 27
43828: PUSH
43829: LD_INT 29
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: IN
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: LD_INT 52
43852: PPUSH
43853: CALL_OW 321
43857: PUSH
43858: LD_INT 2
43860: EQUAL
43861: AND
43862: IFFALSE 43879
// bpoints := bpoints * 1.2 ;
43864: LD_ADDR_VAR 0 10
43868: PUSH
43869: LD_VAR 0 10
43873: PUSH
43874: LD_REAL  1.20000000000000E+0000
43877: MUL
43878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43879: LD_VAR 0 6
43883: PPUSH
43884: CALL_OW 264
43888: PUSH
43889: LD_INT 6
43891: PUSH
43892: LD_INT 46
43894: PUSH
43895: LD_INT 47
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: IN
43903: IFFALSE 43920
// bpoints := bpoints * 1.2 ;
43905: LD_ADDR_VAR 0 10
43909: PUSH
43910: LD_VAR 0 10
43914: PUSH
43915: LD_REAL  1.20000000000000E+0000
43918: MUL
43919: ST_TO_ADDR
// end ; unit_building :
43920: GO 43934
43922: LD_INT 3
43924: DOUBLE
43925: EQUAL
43926: IFTRUE 43930
43928: GO 43933
43930: POP
// ; end ;
43931: GO 43934
43933: POP
// for j = 1 to 3 do
43934: LD_ADDR_VAR 0 7
43938: PUSH
43939: DOUBLE
43940: LD_INT 1
43942: DEC
43943: ST_TO_ADDR
43944: LD_INT 3
43946: PUSH
43947: FOR_TO
43948: IFFALSE 44001
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_VAR 0 5
43959: PPUSH
43960: LD_VAR 0 7
43964: PPUSH
43965: LD_VAR 0 5
43969: PUSH
43970: LD_VAR 0 7
43974: ARRAY
43975: PUSH
43976: LD_VAR 0 9
43980: PUSH
43981: LD_VAR 0 7
43985: ARRAY
43986: PUSH
43987: LD_VAR 0 10
43991: MUL
43992: PLUS
43993: PPUSH
43994: CALL_OW 1
43998: ST_TO_ADDR
43999: GO 43947
44001: POP
44002: POP
// end ;
44003: GO 42486
44005: POP
44006: POP
// result := Replace ( result , 4 , tmp ) ;
44007: LD_ADDR_VAR 0 5
44011: PUSH
44012: LD_VAR 0 5
44016: PPUSH
44017: LD_INT 4
44019: PPUSH
44020: LD_VAR 0 8
44024: PPUSH
44025: CALL_OW 1
44029: ST_TO_ADDR
// end ;
44030: LD_VAR 0 5
44034: RET
// export function DangerAtRange ( unit , range ) ; begin
44035: LD_INT 0
44037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44038: LD_ADDR_VAR 0 3
44042: PUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 255
44052: PPUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 250
44062: PPUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 251
44072: PPUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: CALL 42338 0 4
44082: ST_TO_ADDR
// end ;
44083: LD_VAR 0 3
44087: RET
// export function DangerInArea ( side , area ) ; begin
44088: LD_INT 0
44090: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44091: LD_ADDR_VAR 0 3
44095: PUSH
44096: LD_VAR 0 2
44100: PPUSH
44101: LD_INT 81
44103: PUSH
44104: LD_VAR 0 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PPUSH
44113: CALL_OW 70
44117: ST_TO_ADDR
// end ;
44118: LD_VAR 0 3
44122: RET
// export function IsExtension ( b ) ; begin
44123: LD_INT 0
44125: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44126: LD_ADDR_VAR 0 2
44130: PUSH
44131: LD_VAR 0 1
44135: PUSH
44136: LD_INT 23
44138: PUSH
44139: LD_INT 20
44141: PUSH
44142: LD_INT 22
44144: PUSH
44145: LD_INT 17
44147: PUSH
44148: LD_INT 24
44150: PUSH
44151: LD_INT 21
44153: PUSH
44154: LD_INT 19
44156: PUSH
44157: LD_INT 16
44159: PUSH
44160: LD_INT 25
44162: PUSH
44163: LD_INT 18
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: IN
44178: ST_TO_ADDR
// end ;
44179: LD_VAR 0 2
44183: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44184: LD_INT 0
44186: PPUSH
44187: PPUSH
44188: PPUSH
// result := [ ] ;
44189: LD_ADDR_VAR 0 4
44193: PUSH
44194: EMPTY
44195: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44196: LD_ADDR_VAR 0 5
44200: PUSH
44201: LD_VAR 0 2
44205: PPUSH
44206: LD_INT 21
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PPUSH
44216: CALL_OW 70
44220: ST_TO_ADDR
// if not tmp then
44221: LD_VAR 0 5
44225: NOT
44226: IFFALSE 44230
// exit ;
44228: GO 44294
// if checkLink then
44230: LD_VAR 0 3
44234: IFFALSE 44284
// begin for i in tmp do
44236: LD_ADDR_VAR 0 6
44240: PUSH
44241: LD_VAR 0 5
44245: PUSH
44246: FOR_IN
44247: IFFALSE 44282
// if GetBase ( i ) <> base then
44249: LD_VAR 0 6
44253: PPUSH
44254: CALL_OW 274
44258: PUSH
44259: LD_VAR 0 1
44263: NONEQUAL
44264: IFFALSE 44280
// ComLinkToBase ( base , i ) ;
44266: LD_VAR 0 1
44270: PPUSH
44271: LD_VAR 0 6
44275: PPUSH
44276: CALL_OW 169
44280: GO 44246
44282: POP
44283: POP
// end ; result := tmp ;
44284: LD_ADDR_VAR 0 4
44288: PUSH
44289: LD_VAR 0 5
44293: ST_TO_ADDR
// end ;
44294: LD_VAR 0 4
44298: RET
// export function ComComplete ( units , b ) ; var i ; begin
44299: LD_INT 0
44301: PPUSH
44302: PPUSH
// if not units then
44303: LD_VAR 0 1
44307: NOT
44308: IFFALSE 44312
// exit ;
44310: GO 44402
// for i in units do
44312: LD_ADDR_VAR 0 4
44316: PUSH
44317: LD_VAR 0 1
44321: PUSH
44322: FOR_IN
44323: IFFALSE 44400
// if BuildingStatus ( b ) = bs_build then
44325: LD_VAR 0 2
44329: PPUSH
44330: CALL_OW 461
44334: PUSH
44335: LD_INT 1
44337: EQUAL
44338: IFFALSE 44398
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44340: LD_VAR 0 4
44344: PPUSH
44345: LD_STRING h
44347: PUSH
44348: LD_VAR 0 2
44352: PPUSH
44353: CALL_OW 250
44357: PUSH
44358: LD_VAR 0 2
44362: PPUSH
44363: CALL_OW 251
44367: PUSH
44368: LD_VAR 0 2
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: PPUSH
44394: CALL_OW 446
44398: GO 44322
44400: POP
44401: POP
// end ;
44402: LD_VAR 0 3
44406: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44415: LD_VAR 0 1
44419: NOT
44420: PUSH
44421: LD_VAR 0 1
44425: PPUSH
44426: CALL_OW 263
44430: PUSH
44431: LD_INT 2
44433: EQUAL
44434: NOT
44435: OR
44436: IFFALSE 44440
// exit ;
44438: GO 44756
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44440: LD_ADDR_VAR 0 6
44444: PUSH
44445: LD_INT 22
44447: PUSH
44448: LD_VAR 0 1
44452: PPUSH
44453: CALL_OW 255
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 30
44467: PUSH
44468: LD_INT 36
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 34
44477: PUSH
44478: LD_INT 31
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 69
44498: ST_TO_ADDR
// if not tmp then
44499: LD_VAR 0 6
44503: NOT
44504: IFFALSE 44508
// exit ;
44506: GO 44756
// result := [ ] ;
44508: LD_ADDR_VAR 0 2
44512: PUSH
44513: EMPTY
44514: ST_TO_ADDR
// for i in tmp do
44515: LD_ADDR_VAR 0 3
44519: PUSH
44520: LD_VAR 0 6
44524: PUSH
44525: FOR_IN
44526: IFFALSE 44597
// begin t := UnitsInside ( i ) ;
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: LD_VAR 0 3
44537: PPUSH
44538: CALL_OW 313
44542: ST_TO_ADDR
// if t then
44543: LD_VAR 0 4
44547: IFFALSE 44595
// for j in t do
44549: LD_ADDR_VAR 0 7
44553: PUSH
44554: LD_VAR 0 4
44558: PUSH
44559: FOR_IN
44560: IFFALSE 44593
// result := Insert ( result , result + 1 , j ) ;
44562: LD_ADDR_VAR 0 2
44566: PUSH
44567: LD_VAR 0 2
44571: PPUSH
44572: LD_VAR 0 2
44576: PUSH
44577: LD_INT 1
44579: PLUS
44580: PPUSH
44581: LD_VAR 0 7
44585: PPUSH
44586: CALL_OW 2
44590: ST_TO_ADDR
44591: GO 44559
44593: POP
44594: POP
// end ;
44595: GO 44525
44597: POP
44598: POP
// if not result then
44599: LD_VAR 0 2
44603: NOT
44604: IFFALSE 44608
// exit ;
44606: GO 44756
// mech := result [ 1 ] ;
44608: LD_ADDR_VAR 0 5
44612: PUSH
44613: LD_VAR 0 2
44617: PUSH
44618: LD_INT 1
44620: ARRAY
44621: ST_TO_ADDR
// if result > 1 then
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 1
44629: GREATER
44630: IFFALSE 44742
// for i = 2 to result do
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: DOUBLE
44638: LD_INT 2
44640: DEC
44641: ST_TO_ADDR
44642: LD_VAR 0 2
44646: PUSH
44647: FOR_TO
44648: IFFALSE 44740
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44650: LD_ADDR_VAR 0 4
44654: PUSH
44655: LD_VAR 0 2
44659: PUSH
44660: LD_VAR 0 3
44664: ARRAY
44665: PPUSH
44666: LD_INT 3
44668: PPUSH
44669: CALL_OW 259
44673: PUSH
44674: LD_VAR 0 2
44678: PUSH
44679: LD_VAR 0 3
44683: ARRAY
44684: PPUSH
44685: CALL_OW 432
44689: MINUS
44690: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44691: LD_VAR 0 4
44695: PUSH
44696: LD_VAR 0 5
44700: PPUSH
44701: LD_INT 3
44703: PPUSH
44704: CALL_OW 259
44708: PUSH
44709: LD_VAR 0 5
44713: PPUSH
44714: CALL_OW 432
44718: MINUS
44719: GREATEREQUAL
44720: IFFALSE 44738
// mech := result [ i ] ;
44722: LD_ADDR_VAR 0 5
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_VAR 0 3
44736: ARRAY
44737: ST_TO_ADDR
// end ;
44738: GO 44647
44740: POP
44741: POP
// ComLinkTo ( vehicle , mech ) ;
44742: LD_VAR 0 1
44746: PPUSH
44747: LD_VAR 0 5
44751: PPUSH
44752: CALL_OW 135
// end ;
44756: LD_VAR 0 2
44760: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44761: LD_INT 0
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
// result := [ ] ;
44776: LD_ADDR_VAR 0 7
44780: PUSH
44781: EMPTY
44782: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44783: LD_VAR 0 1
44787: PPUSH
44788: CALL_OW 266
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: IN
44803: NOT
44804: IFFALSE 44808
// exit ;
44806: GO 46442
// if name then
44808: LD_VAR 0 3
44812: IFFALSE 44828
// SetBName ( base_dep , name ) ;
44814: LD_VAR 0 1
44818: PPUSH
44819: LD_VAR 0 3
44823: PPUSH
44824: CALL_OW 500
// base := GetBase ( base_dep ) ;
44828: LD_ADDR_VAR 0 15
44832: PUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL_OW 274
44842: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44843: LD_ADDR_VAR 0 16
44847: PUSH
44848: LD_VAR 0 1
44852: PPUSH
44853: CALL_OW 255
44857: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44858: LD_ADDR_VAR 0 17
44862: PUSH
44863: LD_VAR 0 1
44867: PPUSH
44868: CALL_OW 248
44872: ST_TO_ADDR
// if sources then
44873: LD_VAR 0 5
44877: IFFALSE 44924
// for i = 1 to 3 do
44879: LD_ADDR_VAR 0 8
44883: PUSH
44884: DOUBLE
44885: LD_INT 1
44887: DEC
44888: ST_TO_ADDR
44889: LD_INT 3
44891: PUSH
44892: FOR_TO
44893: IFFALSE 44922
// AddResourceType ( base , i , sources [ i ] ) ;
44895: LD_VAR 0 15
44899: PPUSH
44900: LD_VAR 0 8
44904: PPUSH
44905: LD_VAR 0 5
44909: PUSH
44910: LD_VAR 0 8
44914: ARRAY
44915: PPUSH
44916: CALL_OW 276
44920: GO 44892
44922: POP
44923: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44924: LD_ADDR_VAR 0 18
44928: PUSH
44929: LD_VAR 0 15
44933: PPUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: LD_INT 1
44941: PPUSH
44942: CALL 44184 0 3
44946: ST_TO_ADDR
// InitHc ;
44947: CALL_OW 19
// InitUc ;
44951: CALL_OW 18
// uc_side := side ;
44955: LD_ADDR_OWVAR 20
44959: PUSH
44960: LD_VAR 0 16
44964: ST_TO_ADDR
// uc_nation := nation ;
44965: LD_ADDR_OWVAR 21
44969: PUSH
44970: LD_VAR 0 17
44974: ST_TO_ADDR
// if buildings then
44975: LD_VAR 0 18
44979: IFFALSE 46301
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44981: LD_ADDR_VAR 0 19
44985: PUSH
44986: LD_VAR 0 18
44990: PPUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 30
44996: PUSH
44997: LD_INT 29
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 30
45006: PUSH
45007: LD_INT 30
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: PPUSH
45019: CALL_OW 72
45023: ST_TO_ADDR
// if tmp then
45024: LD_VAR 0 19
45028: IFFALSE 45076
// for i in tmp do
45030: LD_ADDR_VAR 0 8
45034: PUSH
45035: LD_VAR 0 19
45039: PUSH
45040: FOR_IN
45041: IFFALSE 45074
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45043: LD_VAR 0 8
45047: PPUSH
45048: CALL_OW 250
45052: PPUSH
45053: LD_VAR 0 8
45057: PPUSH
45058: CALL_OW 251
45062: PPUSH
45063: LD_VAR 0 16
45067: PPUSH
45068: CALL_OW 441
45072: GO 45040
45074: POP
45075: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45076: LD_VAR 0 18
45080: PPUSH
45081: LD_INT 2
45083: PUSH
45084: LD_INT 30
45086: PUSH
45087: LD_INT 32
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 30
45096: PUSH
45097: LD_INT 33
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: PPUSH
45109: CALL_OW 72
45113: IFFALSE 45201
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45115: LD_ADDR_VAR 0 8
45119: PUSH
45120: LD_VAR 0 18
45124: PPUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 30
45130: PUSH
45131: LD_INT 32
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 30
45140: PUSH
45141: LD_INT 33
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: PPUSH
45153: CALL_OW 72
45157: PUSH
45158: FOR_IN
45159: IFFALSE 45199
// begin if not GetBWeapon ( i ) then
45161: LD_VAR 0 8
45165: PPUSH
45166: CALL_OW 269
45170: NOT
45171: IFFALSE 45197
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45173: LD_VAR 0 8
45177: PPUSH
45178: LD_VAR 0 8
45182: PPUSH
45183: LD_VAR 0 2
45187: PPUSH
45188: CALL 46447 0 2
45192: PPUSH
45193: CALL_OW 431
// end ;
45197: GO 45158
45199: POP
45200: POP
// end ; for i = 1 to personel do
45201: LD_ADDR_VAR 0 8
45205: PUSH
45206: DOUBLE
45207: LD_INT 1
45209: DEC
45210: ST_TO_ADDR
45211: LD_VAR 0 6
45215: PUSH
45216: FOR_TO
45217: IFFALSE 46281
// begin if i > 4 then
45219: LD_VAR 0 8
45223: PUSH
45224: LD_INT 4
45226: GREATER
45227: IFFALSE 45231
// break ;
45229: GO 46281
// case i of 1 :
45231: LD_VAR 0 8
45235: PUSH
45236: LD_INT 1
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45324
45244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45245: LD_ADDR_VAR 0 12
45249: PUSH
45250: LD_VAR 0 18
45254: PPUSH
45255: LD_INT 22
45257: PUSH
45258: LD_VAR 0 16
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 58
45269: PUSH
45270: EMPTY
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: LD_INT 30
45278: PUSH
45279: LD_INT 32
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 30
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 30
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 72
45321: ST_TO_ADDR
45322: GO 45546
45324: LD_INT 2
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45394
45332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45333: LD_ADDR_VAR 0 12
45337: PUSH
45338: LD_VAR 0 18
45342: PPUSH
45343: LD_INT 22
45345: PUSH
45346: LD_VAR 0 16
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 30
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 30
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PPUSH
45387: CALL_OW 72
45391: ST_TO_ADDR
45392: GO 45546
45394: LD_INT 3
45396: DOUBLE
45397: EQUAL
45398: IFTRUE 45402
45400: GO 45464
45402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45403: LD_ADDR_VAR 0 12
45407: PUSH
45408: LD_VAR 0 18
45412: PPUSH
45413: LD_INT 22
45415: PUSH
45416: LD_VAR 0 16
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 30
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 30
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PPUSH
45457: CALL_OW 72
45461: ST_TO_ADDR
45462: GO 45546
45464: LD_INT 4
45466: DOUBLE
45467: EQUAL
45468: IFTRUE 45472
45470: GO 45545
45472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45473: LD_ADDR_VAR 0 12
45477: PUSH
45478: LD_VAR 0 18
45482: PPUSH
45483: LD_INT 22
45485: PUSH
45486: LD_VAR 0 16
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 30
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 30
45510: PUSH
45511: LD_INT 7
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 30
45520: PUSH
45521: LD_INT 8
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PPUSH
45538: CALL_OW 72
45542: ST_TO_ADDR
45543: GO 45546
45545: POP
// if i = 1 then
45546: LD_VAR 0 8
45550: PUSH
45551: LD_INT 1
45553: EQUAL
45554: IFFALSE 45665
// begin tmp := [ ] ;
45556: LD_ADDR_VAR 0 19
45560: PUSH
45561: EMPTY
45562: ST_TO_ADDR
// for j in f do
45563: LD_ADDR_VAR 0 9
45567: PUSH
45568: LD_VAR 0 12
45572: PUSH
45573: FOR_IN
45574: IFFALSE 45647
// if GetBType ( j ) = b_bunker then
45576: LD_VAR 0 9
45580: PPUSH
45581: CALL_OW 266
45585: PUSH
45586: LD_INT 32
45588: EQUAL
45589: IFFALSE 45616
// tmp := Insert ( tmp , 1 , j ) else
45591: LD_ADDR_VAR 0 19
45595: PUSH
45596: LD_VAR 0 19
45600: PPUSH
45601: LD_INT 1
45603: PPUSH
45604: LD_VAR 0 9
45608: PPUSH
45609: CALL_OW 2
45613: ST_TO_ADDR
45614: GO 45645
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45616: LD_ADDR_VAR 0 19
45620: PUSH
45621: LD_VAR 0 19
45625: PPUSH
45626: LD_VAR 0 19
45630: PUSH
45631: LD_INT 1
45633: PLUS
45634: PPUSH
45635: LD_VAR 0 9
45639: PPUSH
45640: CALL_OW 2
45644: ST_TO_ADDR
45645: GO 45573
45647: POP
45648: POP
// if tmp then
45649: LD_VAR 0 19
45653: IFFALSE 45665
// f := tmp ;
45655: LD_ADDR_VAR 0 12
45659: PUSH
45660: LD_VAR 0 19
45664: ST_TO_ADDR
// end ; x := personel [ i ] ;
45665: LD_ADDR_VAR 0 13
45669: PUSH
45670: LD_VAR 0 6
45674: PUSH
45675: LD_VAR 0 8
45679: ARRAY
45680: ST_TO_ADDR
// if x = - 1 then
45681: LD_VAR 0 13
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: EQUAL
45690: IFFALSE 45899
// begin for j in f do
45692: LD_ADDR_VAR 0 9
45696: PUSH
45697: LD_VAR 0 12
45701: PUSH
45702: FOR_IN
45703: IFFALSE 45895
// repeat InitHc ;
45705: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45709: LD_VAR 0 9
45713: PPUSH
45714: CALL_OW 266
45718: PUSH
45719: LD_INT 5
45721: EQUAL
45722: IFFALSE 45792
// begin if UnitsInside ( j ) < 3 then
45724: LD_VAR 0 9
45728: PPUSH
45729: CALL_OW 313
45733: PUSH
45734: LD_INT 3
45736: LESS
45737: IFFALSE 45773
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45739: LD_INT 0
45741: PPUSH
45742: LD_INT 5
45744: PUSH
45745: LD_INT 8
45747: PUSH
45748: LD_INT 9
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: PUSH
45756: LD_VAR 0 17
45760: ARRAY
45761: PPUSH
45762: LD_VAR 0 4
45766: PPUSH
45767: CALL_OW 380
45771: GO 45790
// PrepareHuman ( false , i , skill ) ;
45773: LD_INT 0
45775: PPUSH
45776: LD_VAR 0 8
45780: PPUSH
45781: LD_VAR 0 4
45785: PPUSH
45786: CALL_OW 380
// end else
45790: GO 45809
// PrepareHuman ( false , i , skill ) ;
45792: LD_INT 0
45794: PPUSH
45795: LD_VAR 0 8
45799: PPUSH
45800: LD_VAR 0 4
45804: PPUSH
45805: CALL_OW 380
// un := CreateHuman ;
45809: LD_ADDR_VAR 0 14
45813: PUSH
45814: CALL_OW 44
45818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45819: LD_ADDR_VAR 0 7
45823: PUSH
45824: LD_VAR 0 7
45828: PPUSH
45829: LD_INT 1
45831: PPUSH
45832: LD_VAR 0 14
45836: PPUSH
45837: CALL_OW 2
45841: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45842: LD_VAR 0 14
45846: PPUSH
45847: LD_VAR 0 9
45851: PPUSH
45852: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45856: LD_VAR 0 9
45860: PPUSH
45861: CALL_OW 313
45865: PUSH
45866: LD_INT 6
45868: EQUAL
45869: PUSH
45870: LD_VAR 0 9
45874: PPUSH
45875: CALL_OW 266
45879: PUSH
45880: LD_INT 32
45882: PUSH
45883: LD_INT 31
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: IN
45890: OR
45891: IFFALSE 45705
45893: GO 45702
45895: POP
45896: POP
// end else
45897: GO 46279
// for j = 1 to x do
45899: LD_ADDR_VAR 0 9
45903: PUSH
45904: DOUBLE
45905: LD_INT 1
45907: DEC
45908: ST_TO_ADDR
45909: LD_VAR 0 13
45913: PUSH
45914: FOR_TO
45915: IFFALSE 46277
// begin InitHc ;
45917: CALL_OW 19
// if not f then
45921: LD_VAR 0 12
45925: NOT
45926: IFFALSE 46015
// begin PrepareHuman ( false , i , skill ) ;
45928: LD_INT 0
45930: PPUSH
45931: LD_VAR 0 8
45935: PPUSH
45936: LD_VAR 0 4
45940: PPUSH
45941: CALL_OW 380
// un := CreateHuman ;
45945: LD_ADDR_VAR 0 14
45949: PUSH
45950: CALL_OW 44
45954: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45955: LD_ADDR_VAR 0 7
45959: PUSH
45960: LD_VAR 0 7
45964: PPUSH
45965: LD_INT 1
45967: PPUSH
45968: LD_VAR 0 14
45972: PPUSH
45973: CALL_OW 2
45977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45978: LD_VAR 0 14
45982: PPUSH
45983: LD_VAR 0 1
45987: PPUSH
45988: CALL_OW 250
45992: PPUSH
45993: LD_VAR 0 1
45997: PPUSH
45998: CALL_OW 251
46002: PPUSH
46003: LD_INT 10
46005: PPUSH
46006: LD_INT 0
46008: PPUSH
46009: CALL_OW 50
// continue ;
46013: GO 45914
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46015: LD_VAR 0 12
46019: PUSH
46020: LD_INT 1
46022: ARRAY
46023: PPUSH
46024: CALL_OW 313
46028: PUSH
46029: LD_VAR 0 12
46033: PUSH
46034: LD_INT 1
46036: ARRAY
46037: PPUSH
46038: CALL_OW 266
46042: PUSH
46043: LD_INT 32
46045: PUSH
46046: LD_INT 31
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: IN
46053: AND
46054: PUSH
46055: LD_VAR 0 12
46059: PUSH
46060: LD_INT 1
46062: ARRAY
46063: PPUSH
46064: CALL_OW 313
46068: PUSH
46069: LD_INT 6
46071: EQUAL
46072: OR
46073: IFFALSE 46093
// f := Delete ( f , 1 ) ;
46075: LD_ADDR_VAR 0 12
46079: PUSH
46080: LD_VAR 0 12
46084: PPUSH
46085: LD_INT 1
46087: PPUSH
46088: CALL_OW 3
46092: ST_TO_ADDR
// if not f then
46093: LD_VAR 0 12
46097: NOT
46098: IFFALSE 46116
// begin x := x + 2 ;
46100: LD_ADDR_VAR 0 13
46104: PUSH
46105: LD_VAR 0 13
46109: PUSH
46110: LD_INT 2
46112: PLUS
46113: ST_TO_ADDR
// continue ;
46114: GO 45914
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46116: LD_VAR 0 12
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: PPUSH
46125: CALL_OW 266
46129: PUSH
46130: LD_INT 5
46132: EQUAL
46133: IFFALSE 46207
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46135: LD_VAR 0 12
46139: PUSH
46140: LD_INT 1
46142: ARRAY
46143: PPUSH
46144: CALL_OW 313
46148: PUSH
46149: LD_INT 3
46151: LESS
46152: IFFALSE 46188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46154: LD_INT 0
46156: PPUSH
46157: LD_INT 5
46159: PUSH
46160: LD_INT 8
46162: PUSH
46163: LD_INT 9
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: PUSH
46171: LD_VAR 0 17
46175: ARRAY
46176: PPUSH
46177: LD_VAR 0 4
46181: PPUSH
46182: CALL_OW 380
46186: GO 46205
// PrepareHuman ( false , i , skill ) ;
46188: LD_INT 0
46190: PPUSH
46191: LD_VAR 0 8
46195: PPUSH
46196: LD_VAR 0 4
46200: PPUSH
46201: CALL_OW 380
// end else
46205: GO 46224
// PrepareHuman ( false , i , skill ) ;
46207: LD_INT 0
46209: PPUSH
46210: LD_VAR 0 8
46214: PPUSH
46215: LD_VAR 0 4
46219: PPUSH
46220: CALL_OW 380
// un := CreateHuman ;
46224: LD_ADDR_VAR 0 14
46228: PUSH
46229: CALL_OW 44
46233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46234: LD_ADDR_VAR 0 7
46238: PUSH
46239: LD_VAR 0 7
46243: PPUSH
46244: LD_INT 1
46246: PPUSH
46247: LD_VAR 0 14
46251: PPUSH
46252: CALL_OW 2
46256: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46257: LD_VAR 0 14
46261: PPUSH
46262: LD_VAR 0 12
46266: PUSH
46267: LD_INT 1
46269: ARRAY
46270: PPUSH
46271: CALL_OW 52
// end ;
46275: GO 45914
46277: POP
46278: POP
// end ;
46279: GO 45216
46281: POP
46282: POP
// result := result ^ buildings ;
46283: LD_ADDR_VAR 0 7
46287: PUSH
46288: LD_VAR 0 7
46292: PUSH
46293: LD_VAR 0 18
46297: ADD
46298: ST_TO_ADDR
// end else
46299: GO 46442
// begin for i = 1 to personel do
46301: LD_ADDR_VAR 0 8
46305: PUSH
46306: DOUBLE
46307: LD_INT 1
46309: DEC
46310: ST_TO_ADDR
46311: LD_VAR 0 6
46315: PUSH
46316: FOR_TO
46317: IFFALSE 46440
// begin if i > 4 then
46319: LD_VAR 0 8
46323: PUSH
46324: LD_INT 4
46326: GREATER
46327: IFFALSE 46331
// break ;
46329: GO 46440
// x := personel [ i ] ;
46331: LD_ADDR_VAR 0 13
46335: PUSH
46336: LD_VAR 0 6
46340: PUSH
46341: LD_VAR 0 8
46345: ARRAY
46346: ST_TO_ADDR
// if x = - 1 then
46347: LD_VAR 0 13
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: EQUAL
46356: IFFALSE 46360
// continue ;
46358: GO 46316
// PrepareHuman ( false , i , skill ) ;
46360: LD_INT 0
46362: PPUSH
46363: LD_VAR 0 8
46367: PPUSH
46368: LD_VAR 0 4
46372: PPUSH
46373: CALL_OW 380
// un := CreateHuman ;
46377: LD_ADDR_VAR 0 14
46381: PUSH
46382: CALL_OW 44
46386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46387: LD_VAR 0 14
46391: PPUSH
46392: LD_VAR 0 1
46396: PPUSH
46397: CALL_OW 250
46401: PPUSH
46402: LD_VAR 0 1
46406: PPUSH
46407: CALL_OW 251
46411: PPUSH
46412: LD_INT 10
46414: PPUSH
46415: LD_INT 0
46417: PPUSH
46418: CALL_OW 50
// result := result ^ un ;
46422: LD_ADDR_VAR 0 7
46426: PUSH
46427: LD_VAR 0 7
46431: PUSH
46432: LD_VAR 0 14
46436: ADD
46437: ST_TO_ADDR
// end ;
46438: GO 46316
46440: POP
46441: POP
// end ; end ;
46442: LD_VAR 0 7
46446: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46447: LD_INT 0
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
// result := false ;
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_INT 0
46472: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46473: LD_VAR 0 1
46477: NOT
46478: PUSH
46479: LD_VAR 0 1
46483: PPUSH
46484: CALL_OW 266
46488: PUSH
46489: LD_INT 32
46491: PUSH
46492: LD_INT 33
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: IN
46499: NOT
46500: OR
46501: IFFALSE 46505
// exit ;
46503: GO 47644
// nat := GetNation ( tower ) ;
46505: LD_ADDR_VAR 0 12
46509: PUSH
46510: LD_VAR 0 1
46514: PPUSH
46515: CALL_OW 248
46519: ST_TO_ADDR
// side := GetSide ( tower ) ;
46520: LD_ADDR_VAR 0 16
46524: PUSH
46525: LD_VAR 0 1
46529: PPUSH
46530: CALL_OW 255
46534: ST_TO_ADDR
// x := GetX ( tower ) ;
46535: LD_ADDR_VAR 0 10
46539: PUSH
46540: LD_VAR 0 1
46544: PPUSH
46545: CALL_OW 250
46549: ST_TO_ADDR
// y := GetY ( tower ) ;
46550: LD_ADDR_VAR 0 11
46554: PUSH
46555: LD_VAR 0 1
46559: PPUSH
46560: CALL_OW 251
46564: ST_TO_ADDR
// if not x or not y then
46565: LD_VAR 0 10
46569: NOT
46570: PUSH
46571: LD_VAR 0 11
46575: NOT
46576: OR
46577: IFFALSE 46581
// exit ;
46579: GO 47644
// weapon := 0 ;
46581: LD_ADDR_VAR 0 18
46585: PUSH
46586: LD_INT 0
46588: ST_TO_ADDR
// fac_list := [ ] ;
46589: LD_ADDR_VAR 0 17
46593: PUSH
46594: EMPTY
46595: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46596: LD_ADDR_VAR 0 6
46600: PUSH
46601: LD_VAR 0 1
46605: PPUSH
46606: CALL_OW 274
46610: PPUSH
46611: LD_VAR 0 2
46615: PPUSH
46616: LD_INT 0
46618: PPUSH
46619: CALL 44184 0 3
46623: PPUSH
46624: LD_INT 30
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PPUSH
46634: CALL_OW 72
46638: ST_TO_ADDR
// if not factories then
46639: LD_VAR 0 6
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 47644
// for i in factories do
46648: LD_ADDR_VAR 0 8
46652: PUSH
46653: LD_VAR 0 6
46657: PUSH
46658: FOR_IN
46659: IFFALSE 46684
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46661: LD_ADDR_VAR 0 17
46665: PUSH
46666: LD_VAR 0 17
46670: PUSH
46671: LD_VAR 0 8
46675: PPUSH
46676: CALL_OW 478
46680: UNION
46681: ST_TO_ADDR
46682: GO 46658
46684: POP
46685: POP
// if not fac_list then
46686: LD_VAR 0 17
46690: NOT
46691: IFFALSE 46695
// exit ;
46693: GO 47644
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46695: LD_ADDR_VAR 0 5
46699: PUSH
46700: LD_INT 4
46702: PUSH
46703: LD_INT 5
46705: PUSH
46706: LD_INT 9
46708: PUSH
46709: LD_INT 10
46711: PUSH
46712: LD_INT 6
46714: PUSH
46715: LD_INT 7
46717: PUSH
46718: LD_INT 11
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 27
46732: PUSH
46733: LD_INT 28
46735: PUSH
46736: LD_INT 26
46738: PUSH
46739: LD_INT 30
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 43
46750: PUSH
46751: LD_INT 44
46753: PUSH
46754: LD_INT 46
46756: PUSH
46757: LD_INT 45
46759: PUSH
46760: LD_INT 47
46762: PUSH
46763: LD_INT 49
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: PUSH
46779: LD_VAR 0 12
46783: ARRAY
46784: ST_TO_ADDR
// for i in list do
46785: LD_ADDR_VAR 0 8
46789: PUSH
46790: LD_VAR 0 5
46794: PUSH
46795: FOR_IN
46796: IFFALSE 46829
// if not i in fac_list then
46798: LD_VAR 0 8
46802: PUSH
46803: LD_VAR 0 17
46807: IN
46808: NOT
46809: IFFALSE 46827
// list := list diff i ;
46811: LD_ADDR_VAR 0 5
46815: PUSH
46816: LD_VAR 0 5
46820: PUSH
46821: LD_VAR 0 8
46825: DIFF
46826: ST_TO_ADDR
46827: GO 46795
46829: POP
46830: POP
// if not list then
46831: LD_VAR 0 5
46835: NOT
46836: IFFALSE 46840
// exit ;
46838: GO 47644
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46840: LD_VAR 0 12
46844: PUSH
46845: LD_INT 3
46847: EQUAL
46848: PUSH
46849: LD_INT 49
46851: PUSH
46852: LD_VAR 0 5
46856: IN
46857: AND
46858: PUSH
46859: LD_INT 31
46861: PPUSH
46862: LD_VAR 0 16
46866: PPUSH
46867: CALL_OW 321
46871: PUSH
46872: LD_INT 2
46874: EQUAL
46875: AND
46876: IFFALSE 46936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46878: LD_INT 22
46880: PUSH
46881: LD_VAR 0 16
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 35
46892: PUSH
46893: LD_INT 49
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 91
46902: PUSH
46903: LD_VAR 0 1
46907: PUSH
46908: LD_INT 10
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: PPUSH
46921: CALL_OW 69
46925: NOT
46926: IFFALSE 46936
// weapon := ru_time_lapser ;
46928: LD_ADDR_VAR 0 18
46932: PUSH
46933: LD_INT 49
46935: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46936: LD_VAR 0 12
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: IN
46951: PUSH
46952: LD_INT 11
46954: PUSH
46955: LD_VAR 0 5
46959: IN
46960: PUSH
46961: LD_INT 30
46963: PUSH
46964: LD_VAR 0 5
46968: IN
46969: OR
46970: AND
46971: PUSH
46972: LD_INT 6
46974: PPUSH
46975: LD_VAR 0 16
46979: PPUSH
46980: CALL_OW 321
46984: PUSH
46985: LD_INT 2
46987: EQUAL
46988: AND
46989: IFFALSE 47154
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46991: LD_INT 22
46993: PUSH
46994: LD_VAR 0 16
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 35
47008: PUSH
47009: LD_INT 11
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 35
47018: PUSH
47019: LD_INT 30
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 91
47033: PUSH
47034: LD_VAR 0 1
47038: PUSH
47039: LD_INT 18
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: PPUSH
47052: CALL_OW 69
47056: NOT
47057: PUSH
47058: LD_INT 22
47060: PUSH
47061: LD_VAR 0 16
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 30
47075: PUSH
47076: LD_INT 32
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 30
47085: PUSH
47086: LD_INT 33
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 91
47100: PUSH
47101: LD_VAR 0 1
47105: PUSH
47106: LD_INT 12
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: PPUSH
47122: CALL_OW 69
47126: PUSH
47127: LD_INT 2
47129: GREATER
47130: AND
47131: IFFALSE 47154
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47133: LD_ADDR_VAR 0 18
47137: PUSH
47138: LD_INT 11
47140: PUSH
47141: LD_INT 30
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_VAR 0 12
47152: ARRAY
47153: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47154: LD_VAR 0 18
47158: NOT
47159: PUSH
47160: LD_INT 40
47162: PPUSH
47163: LD_VAR 0 16
47167: PPUSH
47168: CALL_OW 321
47172: PUSH
47173: LD_INT 2
47175: EQUAL
47176: AND
47177: PUSH
47178: LD_INT 7
47180: PUSH
47181: LD_VAR 0 5
47185: IN
47186: PUSH
47187: LD_INT 28
47189: PUSH
47190: LD_VAR 0 5
47194: IN
47195: OR
47196: PUSH
47197: LD_INT 45
47199: PUSH
47200: LD_VAR 0 5
47204: IN
47205: OR
47206: AND
47207: IFFALSE 47461
// begin hex := GetHexInfo ( x , y ) ;
47209: LD_ADDR_VAR 0 4
47213: PUSH
47214: LD_VAR 0 10
47218: PPUSH
47219: LD_VAR 0 11
47223: PPUSH
47224: CALL_OW 546
47228: ST_TO_ADDR
// if hex [ 1 ] then
47229: LD_VAR 0 4
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: IFFALSE 47241
// exit ;
47239: GO 47644
// height := hex [ 2 ] ;
47241: LD_ADDR_VAR 0 15
47245: PUSH
47246: LD_VAR 0 4
47250: PUSH
47251: LD_INT 2
47253: ARRAY
47254: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47255: LD_ADDR_VAR 0 14
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: LD_INT 5
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// for i in tmp do
47278: LD_ADDR_VAR 0 8
47282: PUSH
47283: LD_VAR 0 14
47287: PUSH
47288: FOR_IN
47289: IFFALSE 47459
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47291: LD_ADDR_VAR 0 9
47295: PUSH
47296: LD_VAR 0 10
47300: PPUSH
47301: LD_VAR 0 8
47305: PPUSH
47306: LD_INT 5
47308: PPUSH
47309: CALL_OW 272
47313: PUSH
47314: LD_VAR 0 11
47318: PPUSH
47319: LD_VAR 0 8
47323: PPUSH
47324: LD_INT 5
47326: PPUSH
47327: CALL_OW 273
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47336: LD_VAR 0 9
47340: PUSH
47341: LD_INT 1
47343: ARRAY
47344: PPUSH
47345: LD_VAR 0 9
47349: PUSH
47350: LD_INT 2
47352: ARRAY
47353: PPUSH
47354: CALL_OW 488
47358: IFFALSE 47457
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47360: LD_ADDR_VAR 0 4
47364: PUSH
47365: LD_VAR 0 9
47369: PUSH
47370: LD_INT 1
47372: ARRAY
47373: PPUSH
47374: LD_VAR 0 9
47378: PUSH
47379: LD_INT 2
47381: ARRAY
47382: PPUSH
47383: CALL_OW 546
47387: ST_TO_ADDR
// if hex [ 1 ] then
47388: LD_VAR 0 4
47392: PUSH
47393: LD_INT 1
47395: ARRAY
47396: IFFALSE 47400
// continue ;
47398: GO 47288
// h := hex [ 2 ] ;
47400: LD_ADDR_VAR 0 13
47404: PUSH
47405: LD_VAR 0 4
47409: PUSH
47410: LD_INT 2
47412: ARRAY
47413: ST_TO_ADDR
// if h + 7 < height then
47414: LD_VAR 0 13
47418: PUSH
47419: LD_INT 7
47421: PLUS
47422: PUSH
47423: LD_VAR 0 15
47427: LESS
47428: IFFALSE 47457
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47430: LD_ADDR_VAR 0 18
47434: PUSH
47435: LD_INT 7
47437: PUSH
47438: LD_INT 28
47440: PUSH
47441: LD_INT 45
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: PUSH
47449: LD_VAR 0 12
47453: ARRAY
47454: ST_TO_ADDR
// break ;
47455: GO 47459
// end ; end ; end ;
47457: GO 47288
47459: POP
47460: POP
// end ; if not weapon then
47461: LD_VAR 0 18
47465: NOT
47466: IFFALSE 47526
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47468: LD_ADDR_VAR 0 5
47472: PUSH
47473: LD_VAR 0 5
47477: PUSH
47478: LD_INT 11
47480: PUSH
47481: LD_INT 30
47483: PUSH
47484: LD_INT 49
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: DIFF
47492: ST_TO_ADDR
// if not list then
47493: LD_VAR 0 5
47497: NOT
47498: IFFALSE 47502
// exit ;
47500: GO 47644
// weapon := list [ rand ( 1 , list ) ] ;
47502: LD_ADDR_VAR 0 18
47506: PUSH
47507: LD_VAR 0 5
47511: PUSH
47512: LD_INT 1
47514: PPUSH
47515: LD_VAR 0 5
47519: PPUSH
47520: CALL_OW 12
47524: ARRAY
47525: ST_TO_ADDR
// end ; if weapon then
47526: LD_VAR 0 18
47530: IFFALSE 47644
// begin tmp := CostOfWeapon ( weapon ) ;
47532: LD_ADDR_VAR 0 14
47536: PUSH
47537: LD_VAR 0 18
47541: PPUSH
47542: CALL_OW 451
47546: ST_TO_ADDR
// j := GetBase ( tower ) ;
47547: LD_ADDR_VAR 0 9
47551: PUSH
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 274
47561: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47562: LD_VAR 0 9
47566: PPUSH
47567: LD_INT 1
47569: PPUSH
47570: CALL_OW 275
47574: PUSH
47575: LD_VAR 0 14
47579: PUSH
47580: LD_INT 1
47582: ARRAY
47583: GREATEREQUAL
47584: PUSH
47585: LD_VAR 0 9
47589: PPUSH
47590: LD_INT 2
47592: PPUSH
47593: CALL_OW 275
47597: PUSH
47598: LD_VAR 0 14
47602: PUSH
47603: LD_INT 2
47605: ARRAY
47606: GREATEREQUAL
47607: AND
47608: PUSH
47609: LD_VAR 0 9
47613: PPUSH
47614: LD_INT 3
47616: PPUSH
47617: CALL_OW 275
47621: PUSH
47622: LD_VAR 0 14
47626: PUSH
47627: LD_INT 3
47629: ARRAY
47630: GREATEREQUAL
47631: AND
47632: IFFALSE 47644
// result := weapon ;
47634: LD_ADDR_VAR 0 3
47638: PUSH
47639: LD_VAR 0 18
47643: ST_TO_ADDR
// end ; end ;
47644: LD_VAR 0 3
47648: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47649: LD_INT 0
47651: PPUSH
47652: PPUSH
// result := true ;
47653: LD_ADDR_VAR 0 3
47657: PUSH
47658: LD_INT 1
47660: ST_TO_ADDR
// if array1 = array2 then
47661: LD_VAR 0 1
47665: PUSH
47666: LD_VAR 0 2
47670: EQUAL
47671: IFFALSE 47731
// begin for i = 1 to array1 do
47673: LD_ADDR_VAR 0 4
47677: PUSH
47678: DOUBLE
47679: LD_INT 1
47681: DEC
47682: ST_TO_ADDR
47683: LD_VAR 0 1
47687: PUSH
47688: FOR_TO
47689: IFFALSE 47727
// if array1 [ i ] <> array2 [ i ] then
47691: LD_VAR 0 1
47695: PUSH
47696: LD_VAR 0 4
47700: ARRAY
47701: PUSH
47702: LD_VAR 0 2
47706: PUSH
47707: LD_VAR 0 4
47711: ARRAY
47712: NONEQUAL
47713: IFFALSE 47725
// begin result := false ;
47715: LD_ADDR_VAR 0 3
47719: PUSH
47720: LD_INT 0
47722: ST_TO_ADDR
// break ;
47723: GO 47727
// end ;
47725: GO 47688
47727: POP
47728: POP
// end else
47729: GO 47739
// result := false ;
47731: LD_ADDR_VAR 0 3
47735: PUSH
47736: LD_INT 0
47738: ST_TO_ADDR
// end ;
47739: LD_VAR 0 3
47743: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47744: LD_INT 0
47746: PPUSH
47747: PPUSH
// if not array1 or not array2 then
47748: LD_VAR 0 1
47752: NOT
47753: PUSH
47754: LD_VAR 0 2
47758: NOT
47759: OR
47760: IFFALSE 47764
// exit ;
47762: GO 47828
// result := true ;
47764: LD_ADDR_VAR 0 3
47768: PUSH
47769: LD_INT 1
47771: ST_TO_ADDR
// for i = 1 to array1 do
47772: LD_ADDR_VAR 0 4
47776: PUSH
47777: DOUBLE
47778: LD_INT 1
47780: DEC
47781: ST_TO_ADDR
47782: LD_VAR 0 1
47786: PUSH
47787: FOR_TO
47788: IFFALSE 47826
// if array1 [ i ] <> array2 [ i ] then
47790: LD_VAR 0 1
47794: PUSH
47795: LD_VAR 0 4
47799: ARRAY
47800: PUSH
47801: LD_VAR 0 2
47805: PUSH
47806: LD_VAR 0 4
47810: ARRAY
47811: NONEQUAL
47812: IFFALSE 47824
// begin result := false ;
47814: LD_ADDR_VAR 0 3
47818: PUSH
47819: LD_INT 0
47821: ST_TO_ADDR
// break ;
47822: GO 47826
// end ;
47824: GO 47787
47826: POP
47827: POP
// end ;
47828: LD_VAR 0 3
47832: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47833: LD_INT 0
47835: PPUSH
47836: PPUSH
47837: PPUSH
// pom := GetBase ( fac ) ;
47838: LD_ADDR_VAR 0 5
47842: PUSH
47843: LD_VAR 0 1
47847: PPUSH
47848: CALL_OW 274
47852: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47853: LD_ADDR_VAR 0 4
47857: PUSH
47858: LD_VAR 0 2
47862: PUSH
47863: LD_INT 1
47865: ARRAY
47866: PPUSH
47867: LD_VAR 0 2
47871: PUSH
47872: LD_INT 2
47874: ARRAY
47875: PPUSH
47876: LD_VAR 0 2
47880: PUSH
47881: LD_INT 3
47883: ARRAY
47884: PPUSH
47885: LD_VAR 0 2
47889: PUSH
47890: LD_INT 4
47892: ARRAY
47893: PPUSH
47894: CALL_OW 449
47898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47899: LD_ADDR_VAR 0 3
47903: PUSH
47904: LD_VAR 0 5
47908: PPUSH
47909: LD_INT 1
47911: PPUSH
47912: CALL_OW 275
47916: PUSH
47917: LD_VAR 0 4
47921: PUSH
47922: LD_INT 1
47924: ARRAY
47925: GREATEREQUAL
47926: PUSH
47927: LD_VAR 0 5
47931: PPUSH
47932: LD_INT 2
47934: PPUSH
47935: CALL_OW 275
47939: PUSH
47940: LD_VAR 0 4
47944: PUSH
47945: LD_INT 2
47947: ARRAY
47948: GREATEREQUAL
47949: AND
47950: PUSH
47951: LD_VAR 0 5
47955: PPUSH
47956: LD_INT 3
47958: PPUSH
47959: CALL_OW 275
47963: PUSH
47964: LD_VAR 0 4
47968: PUSH
47969: LD_INT 3
47971: ARRAY
47972: GREATEREQUAL
47973: AND
47974: ST_TO_ADDR
// end ;
47975: LD_VAR 0 3
47979: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47980: LD_INT 0
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
// pom := GetBase ( building ) ;
47986: LD_ADDR_VAR 0 3
47990: PUSH
47991: LD_VAR 0 1
47995: PPUSH
47996: CALL_OW 274
48000: ST_TO_ADDR
// if not pom then
48001: LD_VAR 0 3
48005: NOT
48006: IFFALSE 48010
// exit ;
48008: GO 48180
// btype := GetBType ( building ) ;
48010: LD_ADDR_VAR 0 5
48014: PUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: CALL_OW 266
48024: ST_TO_ADDR
// if btype = b_armoury then
48025: LD_VAR 0 5
48029: PUSH
48030: LD_INT 4
48032: EQUAL
48033: IFFALSE 48043
// btype := b_barracks ;
48035: LD_ADDR_VAR 0 5
48039: PUSH
48040: LD_INT 5
48042: ST_TO_ADDR
// if btype = b_depot then
48043: LD_VAR 0 5
48047: PUSH
48048: LD_INT 0
48050: EQUAL
48051: IFFALSE 48061
// btype := b_warehouse ;
48053: LD_ADDR_VAR 0 5
48057: PUSH
48058: LD_INT 1
48060: ST_TO_ADDR
// if btype = b_workshop then
48061: LD_VAR 0 5
48065: PUSH
48066: LD_INT 2
48068: EQUAL
48069: IFFALSE 48079
// btype := b_factory ;
48071: LD_ADDR_VAR 0 5
48075: PUSH
48076: LD_INT 3
48078: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48079: LD_ADDR_VAR 0 4
48083: PUSH
48084: LD_VAR 0 5
48088: PPUSH
48089: LD_VAR 0 1
48093: PPUSH
48094: CALL_OW 248
48098: PPUSH
48099: CALL_OW 450
48103: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48104: LD_ADDR_VAR 0 2
48108: PUSH
48109: LD_VAR 0 3
48113: PPUSH
48114: LD_INT 1
48116: PPUSH
48117: CALL_OW 275
48121: PUSH
48122: LD_VAR 0 4
48126: PUSH
48127: LD_INT 1
48129: ARRAY
48130: GREATEREQUAL
48131: PUSH
48132: LD_VAR 0 3
48136: PPUSH
48137: LD_INT 2
48139: PPUSH
48140: CALL_OW 275
48144: PUSH
48145: LD_VAR 0 4
48149: PUSH
48150: LD_INT 2
48152: ARRAY
48153: GREATEREQUAL
48154: AND
48155: PUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: LD_INT 3
48163: PPUSH
48164: CALL_OW 275
48168: PUSH
48169: LD_VAR 0 4
48173: PUSH
48174: LD_INT 3
48176: ARRAY
48177: GREATEREQUAL
48178: AND
48179: ST_TO_ADDR
// end ;
48180: LD_VAR 0 2
48184: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48185: LD_INT 0
48187: PPUSH
48188: PPUSH
48189: PPUSH
// pom := GetBase ( building ) ;
48190: LD_ADDR_VAR 0 4
48194: PUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: CALL_OW 274
48204: ST_TO_ADDR
// if not pom then
48205: LD_VAR 0 4
48209: NOT
48210: IFFALSE 48214
// exit ;
48212: GO 48315
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48214: LD_ADDR_VAR 0 5
48218: PUSH
48219: LD_VAR 0 2
48223: PPUSH
48224: LD_VAR 0 1
48228: PPUSH
48229: CALL_OW 248
48233: PPUSH
48234: CALL_OW 450
48238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48239: LD_ADDR_VAR 0 3
48243: PUSH
48244: LD_VAR 0 4
48248: PPUSH
48249: LD_INT 1
48251: PPUSH
48252: CALL_OW 275
48256: PUSH
48257: LD_VAR 0 5
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: GREATEREQUAL
48266: PUSH
48267: LD_VAR 0 4
48271: PPUSH
48272: LD_INT 2
48274: PPUSH
48275: CALL_OW 275
48279: PUSH
48280: LD_VAR 0 5
48284: PUSH
48285: LD_INT 2
48287: ARRAY
48288: GREATEREQUAL
48289: AND
48290: PUSH
48291: LD_VAR 0 4
48295: PPUSH
48296: LD_INT 3
48298: PPUSH
48299: CALL_OW 275
48303: PUSH
48304: LD_VAR 0 5
48308: PUSH
48309: LD_INT 3
48311: ARRAY
48312: GREATEREQUAL
48313: AND
48314: ST_TO_ADDR
// end ;
48315: LD_VAR 0 3
48319: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48320: LD_INT 0
48322: PPUSH
48323: PPUSH
48324: PPUSH
48325: PPUSH
48326: PPUSH
48327: PPUSH
48328: PPUSH
48329: PPUSH
48330: PPUSH
48331: PPUSH
48332: PPUSH
// result := false ;
48333: LD_ADDR_VAR 0 8
48337: PUSH
48338: LD_INT 0
48340: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48341: LD_VAR 0 5
48345: NOT
48346: PUSH
48347: LD_VAR 0 1
48351: NOT
48352: OR
48353: PUSH
48354: LD_VAR 0 2
48358: NOT
48359: OR
48360: PUSH
48361: LD_VAR 0 3
48365: NOT
48366: OR
48367: IFFALSE 48371
// exit ;
48369: GO 49185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48371: LD_ADDR_VAR 0 14
48375: PUSH
48376: LD_VAR 0 1
48380: PPUSH
48381: LD_VAR 0 2
48385: PPUSH
48386: LD_VAR 0 3
48390: PPUSH
48391: LD_VAR 0 4
48395: PPUSH
48396: LD_VAR 0 5
48400: PUSH
48401: LD_INT 1
48403: ARRAY
48404: PPUSH
48405: CALL_OW 248
48409: PPUSH
48410: LD_INT 0
48412: PPUSH
48413: CALL 50022 0 6
48417: ST_TO_ADDR
// if not hexes then
48418: LD_VAR 0 14
48422: NOT
48423: IFFALSE 48427
// exit ;
48425: GO 49185
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48427: LD_ADDR_VAR 0 17
48431: PUSH
48432: LD_VAR 0 5
48436: PPUSH
48437: LD_INT 22
48439: PUSH
48440: LD_VAR 0 13
48444: PPUSH
48445: CALL_OW 255
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 30
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 30
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PPUSH
48486: CALL_OW 72
48490: ST_TO_ADDR
// for i = 1 to hexes do
48491: LD_ADDR_VAR 0 9
48495: PUSH
48496: DOUBLE
48497: LD_INT 1
48499: DEC
48500: ST_TO_ADDR
48501: LD_VAR 0 14
48505: PUSH
48506: FOR_TO
48507: IFFALSE 49183
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48509: LD_ADDR_VAR 0 13
48513: PUSH
48514: LD_VAR 0 14
48518: PUSH
48519: LD_VAR 0 9
48523: ARRAY
48524: PUSH
48525: LD_INT 1
48527: ARRAY
48528: PPUSH
48529: LD_VAR 0 14
48533: PUSH
48534: LD_VAR 0 9
48538: ARRAY
48539: PUSH
48540: LD_INT 2
48542: ARRAY
48543: PPUSH
48544: CALL_OW 428
48548: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48549: LD_VAR 0 14
48553: PUSH
48554: LD_VAR 0 9
48558: ARRAY
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: LD_VAR 0 14
48568: PUSH
48569: LD_VAR 0 9
48573: ARRAY
48574: PUSH
48575: LD_INT 2
48577: ARRAY
48578: PPUSH
48579: CALL_OW 351
48583: PUSH
48584: LD_VAR 0 14
48588: PUSH
48589: LD_VAR 0 9
48593: ARRAY
48594: PUSH
48595: LD_INT 1
48597: ARRAY
48598: PPUSH
48599: LD_VAR 0 14
48603: PUSH
48604: LD_VAR 0 9
48608: ARRAY
48609: PUSH
48610: LD_INT 2
48612: ARRAY
48613: PPUSH
48614: CALL_OW 488
48618: NOT
48619: OR
48620: PUSH
48621: LD_VAR 0 13
48625: PPUSH
48626: CALL_OW 247
48630: PUSH
48631: LD_INT 3
48633: EQUAL
48634: OR
48635: IFFALSE 48641
// exit ;
48637: POP
48638: POP
48639: GO 49185
// if not tmp then
48641: LD_VAR 0 13
48645: NOT
48646: IFFALSE 48650
// continue ;
48648: GO 48506
// result := true ;
48650: LD_ADDR_VAR 0 8
48654: PUSH
48655: LD_INT 1
48657: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48658: LD_VAR 0 6
48662: PUSH
48663: LD_VAR 0 13
48667: PPUSH
48668: CALL_OW 247
48672: PUSH
48673: LD_INT 2
48675: EQUAL
48676: AND
48677: PUSH
48678: LD_VAR 0 13
48682: PPUSH
48683: CALL_OW 263
48687: PUSH
48688: LD_INT 1
48690: EQUAL
48691: AND
48692: IFFALSE 48856
// begin if IsDrivenBy ( tmp ) then
48694: LD_VAR 0 13
48698: PPUSH
48699: CALL_OW 311
48703: IFFALSE 48707
// continue ;
48705: GO 48506
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48707: LD_VAR 0 6
48711: PPUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 60
48717: PUSH
48718: EMPTY
48719: LIST
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 55
48730: PUSH
48731: EMPTY
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PPUSH
48742: CALL_OW 72
48746: IFFALSE 48854
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48748: LD_ADDR_VAR 0 18
48752: PUSH
48753: LD_VAR 0 6
48757: PPUSH
48758: LD_INT 3
48760: PUSH
48761: LD_INT 60
48763: PUSH
48764: EMPTY
48765: LIST
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: LD_INT 55
48776: PUSH
48777: EMPTY
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PPUSH
48788: CALL_OW 72
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: ST_TO_ADDR
// if IsInUnit ( driver ) then
48797: LD_VAR 0 18
48801: PPUSH
48802: CALL_OW 310
48806: IFFALSE 48817
// ComExit ( driver ) ;
48808: LD_VAR 0 18
48812: PPUSH
48813: CALL 73206 0 1
// AddComEnterUnit ( driver , tmp ) ;
48817: LD_VAR 0 18
48821: PPUSH
48822: LD_VAR 0 13
48826: PPUSH
48827: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48831: LD_VAR 0 18
48835: PPUSH
48836: LD_VAR 0 7
48840: PPUSH
48841: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48845: LD_VAR 0 18
48849: PPUSH
48850: CALL_OW 181
// end ; continue ;
48854: GO 48506
// end ; if not cleaners or not tmp in cleaners then
48856: LD_VAR 0 6
48860: NOT
48861: PUSH
48862: LD_VAR 0 13
48866: PUSH
48867: LD_VAR 0 6
48871: IN
48872: NOT
48873: OR
48874: IFFALSE 49181
// begin if dep then
48876: LD_VAR 0 17
48880: IFFALSE 49016
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48882: LD_ADDR_VAR 0 16
48886: PUSH
48887: LD_VAR 0 17
48891: PUSH
48892: LD_INT 1
48894: ARRAY
48895: PPUSH
48896: CALL_OW 250
48900: PPUSH
48901: LD_VAR 0 17
48905: PUSH
48906: LD_INT 1
48908: ARRAY
48909: PPUSH
48910: CALL_OW 254
48914: PPUSH
48915: LD_INT 5
48917: PPUSH
48918: CALL_OW 272
48922: PUSH
48923: LD_VAR 0 17
48927: PUSH
48928: LD_INT 1
48930: ARRAY
48931: PPUSH
48932: CALL_OW 251
48936: PPUSH
48937: LD_VAR 0 17
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: CALL_OW 254
48950: PPUSH
48951: LD_INT 5
48953: PPUSH
48954: CALL_OW 273
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48963: LD_VAR 0 16
48967: PUSH
48968: LD_INT 1
48970: ARRAY
48971: PPUSH
48972: LD_VAR 0 16
48976: PUSH
48977: LD_INT 2
48979: ARRAY
48980: PPUSH
48981: CALL_OW 488
48985: IFFALSE 49016
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48987: LD_VAR 0 13
48991: PPUSH
48992: LD_VAR 0 16
48996: PUSH
48997: LD_INT 1
48999: ARRAY
49000: PPUSH
49001: LD_VAR 0 16
49005: PUSH
49006: LD_INT 2
49008: ARRAY
49009: PPUSH
49010: CALL_OW 111
// continue ;
49014: GO 48506
// end ; end ; r := GetDir ( tmp ) ;
49016: LD_ADDR_VAR 0 15
49020: PUSH
49021: LD_VAR 0 13
49025: PPUSH
49026: CALL_OW 254
49030: ST_TO_ADDR
// if r = 5 then
49031: LD_VAR 0 15
49035: PUSH
49036: LD_INT 5
49038: EQUAL
49039: IFFALSE 49049
// r := 0 ;
49041: LD_ADDR_VAR 0 15
49045: PUSH
49046: LD_INT 0
49048: ST_TO_ADDR
// for j = r to 5 do
49049: LD_ADDR_VAR 0 10
49053: PUSH
49054: DOUBLE
49055: LD_VAR 0 15
49059: DEC
49060: ST_TO_ADDR
49061: LD_INT 5
49063: PUSH
49064: FOR_TO
49065: IFFALSE 49179
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49067: LD_ADDR_VAR 0 11
49071: PUSH
49072: LD_VAR 0 13
49076: PPUSH
49077: CALL_OW 250
49081: PPUSH
49082: LD_VAR 0 10
49086: PPUSH
49087: LD_INT 2
49089: PPUSH
49090: CALL_OW 272
49094: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49095: LD_ADDR_VAR 0 12
49099: PUSH
49100: LD_VAR 0 13
49104: PPUSH
49105: CALL_OW 251
49109: PPUSH
49110: LD_VAR 0 10
49114: PPUSH
49115: LD_INT 2
49117: PPUSH
49118: CALL_OW 273
49122: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49123: LD_VAR 0 11
49127: PPUSH
49128: LD_VAR 0 12
49132: PPUSH
49133: CALL_OW 488
49137: PUSH
49138: LD_VAR 0 11
49142: PPUSH
49143: LD_VAR 0 12
49147: PPUSH
49148: CALL_OW 428
49152: NOT
49153: AND
49154: IFFALSE 49177
// begin ComMoveXY ( tmp , _x , _y ) ;
49156: LD_VAR 0 13
49160: PPUSH
49161: LD_VAR 0 11
49165: PPUSH
49166: LD_VAR 0 12
49170: PPUSH
49171: CALL_OW 111
// break ;
49175: GO 49179
// end ; end ;
49177: GO 49064
49179: POP
49180: POP
// end ; end ;
49181: GO 48506
49183: POP
49184: POP
// end ;
49185: LD_VAR 0 8
49189: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49190: LD_INT 0
49192: PPUSH
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
// result := false ;
49202: LD_ADDR_VAR 0 6
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49210: LD_VAR 0 1
49214: NOT
49215: PUSH
49216: LD_VAR 0 1
49220: PPUSH
49221: CALL_OW 266
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: IN
49236: NOT
49237: OR
49238: PUSH
49239: LD_VAR 0 2
49243: NOT
49244: OR
49245: PUSH
49246: LD_VAR 0 5
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: LD_INT 4
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: IN
49277: NOT
49278: OR
49279: PUSH
49280: LD_VAR 0 3
49284: PPUSH
49285: LD_VAR 0 4
49289: PPUSH
49290: CALL_OW 488
49294: NOT
49295: OR
49296: IFFALSE 49300
// exit ;
49298: GO 50017
// pom := GetBase ( depot ) ;
49300: LD_ADDR_VAR 0 10
49304: PUSH
49305: LD_VAR 0 1
49309: PPUSH
49310: CALL_OW 274
49314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49315: LD_ADDR_VAR 0 11
49319: PUSH
49320: LD_VAR 0 2
49324: PPUSH
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 248
49334: PPUSH
49335: CALL_OW 450
49339: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49340: LD_VAR 0 10
49344: PPUSH
49345: LD_INT 1
49347: PPUSH
49348: CALL_OW 275
49352: PUSH
49353: LD_VAR 0 11
49357: PUSH
49358: LD_INT 1
49360: ARRAY
49361: GREATEREQUAL
49362: PUSH
49363: LD_VAR 0 10
49367: PPUSH
49368: LD_INT 2
49370: PPUSH
49371: CALL_OW 275
49375: PUSH
49376: LD_VAR 0 11
49380: PUSH
49381: LD_INT 2
49383: ARRAY
49384: GREATEREQUAL
49385: AND
49386: PUSH
49387: LD_VAR 0 10
49391: PPUSH
49392: LD_INT 3
49394: PPUSH
49395: CALL_OW 275
49399: PUSH
49400: LD_VAR 0 11
49404: PUSH
49405: LD_INT 3
49407: ARRAY
49408: GREATEREQUAL
49409: AND
49410: NOT
49411: IFFALSE 49415
// exit ;
49413: GO 50017
// if GetBType ( depot ) = b_depot then
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 266
49424: PUSH
49425: LD_INT 0
49427: EQUAL
49428: IFFALSE 49440
// dist := 28 else
49430: LD_ADDR_VAR 0 14
49434: PUSH
49435: LD_INT 28
49437: ST_TO_ADDR
49438: GO 49448
// dist := 36 ;
49440: LD_ADDR_VAR 0 14
49444: PUSH
49445: LD_INT 36
49447: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49448: LD_VAR 0 1
49452: PPUSH
49453: LD_VAR 0 3
49457: PPUSH
49458: LD_VAR 0 4
49462: PPUSH
49463: CALL_OW 297
49467: PUSH
49468: LD_VAR 0 14
49472: GREATER
49473: IFFALSE 49477
// exit ;
49475: GO 50017
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49477: LD_ADDR_VAR 0 12
49481: PUSH
49482: LD_VAR 0 2
49486: PPUSH
49487: LD_VAR 0 3
49491: PPUSH
49492: LD_VAR 0 4
49496: PPUSH
49497: LD_VAR 0 5
49501: PPUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 248
49511: PPUSH
49512: LD_INT 0
49514: PPUSH
49515: CALL 50022 0 6
49519: ST_TO_ADDR
// if not hexes then
49520: LD_VAR 0 12
49524: NOT
49525: IFFALSE 49529
// exit ;
49527: GO 50017
// hex := GetHexInfo ( x , y ) ;
49529: LD_ADDR_VAR 0 15
49533: PUSH
49534: LD_VAR 0 3
49538: PPUSH
49539: LD_VAR 0 4
49543: PPUSH
49544: CALL_OW 546
49548: ST_TO_ADDR
// if hex [ 1 ] then
49549: LD_VAR 0 15
49553: PUSH
49554: LD_INT 1
49556: ARRAY
49557: IFFALSE 49561
// exit ;
49559: GO 50017
// height := hex [ 2 ] ;
49561: LD_ADDR_VAR 0 13
49565: PUSH
49566: LD_VAR 0 15
49570: PUSH
49571: LD_INT 2
49573: ARRAY
49574: ST_TO_ADDR
// for i = 1 to hexes do
49575: LD_ADDR_VAR 0 7
49579: PUSH
49580: DOUBLE
49581: LD_INT 1
49583: DEC
49584: ST_TO_ADDR
49585: LD_VAR 0 12
49589: PUSH
49590: FOR_TO
49591: IFFALSE 49921
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49593: LD_VAR 0 12
49597: PUSH
49598: LD_VAR 0 7
49602: ARRAY
49603: PUSH
49604: LD_INT 1
49606: ARRAY
49607: PPUSH
49608: LD_VAR 0 12
49612: PUSH
49613: LD_VAR 0 7
49617: ARRAY
49618: PUSH
49619: LD_INT 2
49621: ARRAY
49622: PPUSH
49623: CALL_OW 488
49627: NOT
49628: PUSH
49629: LD_VAR 0 12
49633: PUSH
49634: LD_VAR 0 7
49638: ARRAY
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: LD_VAR 0 12
49648: PUSH
49649: LD_VAR 0 7
49653: ARRAY
49654: PUSH
49655: LD_INT 2
49657: ARRAY
49658: PPUSH
49659: CALL_OW 428
49663: PUSH
49664: LD_INT 0
49666: GREATER
49667: OR
49668: PUSH
49669: LD_VAR 0 12
49673: PUSH
49674: LD_VAR 0 7
49678: ARRAY
49679: PUSH
49680: LD_INT 1
49682: ARRAY
49683: PPUSH
49684: LD_VAR 0 12
49688: PUSH
49689: LD_VAR 0 7
49693: ARRAY
49694: PUSH
49695: LD_INT 2
49697: ARRAY
49698: PPUSH
49699: CALL_OW 351
49703: OR
49704: IFFALSE 49710
// exit ;
49706: POP
49707: POP
49708: GO 50017
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49710: LD_ADDR_VAR 0 8
49714: PUSH
49715: LD_VAR 0 12
49719: PUSH
49720: LD_VAR 0 7
49724: ARRAY
49725: PUSH
49726: LD_INT 1
49728: ARRAY
49729: PPUSH
49730: LD_VAR 0 12
49734: PUSH
49735: LD_VAR 0 7
49739: ARRAY
49740: PUSH
49741: LD_INT 2
49743: ARRAY
49744: PPUSH
49745: CALL_OW 546
49749: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49750: LD_VAR 0 8
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: PUSH
49759: LD_VAR 0 8
49763: PUSH
49764: LD_INT 2
49766: ARRAY
49767: PUSH
49768: LD_VAR 0 13
49772: PUSH
49773: LD_INT 2
49775: PLUS
49776: GREATER
49777: OR
49778: PUSH
49779: LD_VAR 0 8
49783: PUSH
49784: LD_INT 2
49786: ARRAY
49787: PUSH
49788: LD_VAR 0 13
49792: PUSH
49793: LD_INT 2
49795: MINUS
49796: LESS
49797: OR
49798: PUSH
49799: LD_VAR 0 8
49803: PUSH
49804: LD_INT 3
49806: ARRAY
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 8
49813: PUSH
49814: LD_INT 9
49816: PUSH
49817: LD_INT 10
49819: PUSH
49820: LD_INT 11
49822: PUSH
49823: LD_INT 12
49825: PUSH
49826: LD_INT 13
49828: PUSH
49829: LD_INT 16
49831: PUSH
49832: LD_INT 17
49834: PUSH
49835: LD_INT 18
49837: PUSH
49838: LD_INT 19
49840: PUSH
49841: LD_INT 20
49843: PUSH
49844: LD_INT 21
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: IN
49862: NOT
49863: OR
49864: PUSH
49865: LD_VAR 0 8
49869: PUSH
49870: LD_INT 5
49872: ARRAY
49873: NOT
49874: OR
49875: PUSH
49876: LD_VAR 0 8
49880: PUSH
49881: LD_INT 6
49883: ARRAY
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 7
49893: PUSH
49894: LD_INT 9
49896: PUSH
49897: LD_INT 10
49899: PUSH
49900: LD_INT 11
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: IN
49911: NOT
49912: OR
49913: IFFALSE 49919
// exit ;
49915: POP
49916: POP
49917: GO 50017
// end ;
49919: GO 49590
49921: POP
49922: POP
// side := GetSide ( depot ) ;
49923: LD_ADDR_VAR 0 9
49927: PUSH
49928: LD_VAR 0 1
49932: PPUSH
49933: CALL_OW 255
49937: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49938: LD_VAR 0 9
49942: PPUSH
49943: LD_VAR 0 3
49947: PPUSH
49948: LD_VAR 0 4
49952: PPUSH
49953: LD_INT 20
49955: PPUSH
49956: CALL 42338 0 4
49960: PUSH
49961: LD_INT 4
49963: ARRAY
49964: IFFALSE 49968
// exit ;
49966: GO 50017
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49968: LD_VAR 0 2
49972: PUSH
49973: LD_INT 29
49975: PUSH
49976: LD_INT 30
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: IN
49983: PUSH
49984: LD_VAR 0 3
49988: PPUSH
49989: LD_VAR 0 4
49993: PPUSH
49994: LD_VAR 0 9
49998: PPUSH
49999: CALL_OW 440
50003: NOT
50004: AND
50005: IFFALSE 50009
// exit ;
50007: GO 50017
// result := true ;
50009: LD_ADDR_VAR 0 6
50013: PUSH
50014: LD_INT 1
50016: ST_TO_ADDR
// end ;
50017: LD_VAR 0 6
50021: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50022: LD_INT 0
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
// result = [ ] ;
50082: LD_ADDR_VAR 0 7
50086: PUSH
50087: EMPTY
50088: ST_TO_ADDR
// temp_list = [ ] ;
50089: LD_ADDR_VAR 0 9
50093: PUSH
50094: EMPTY
50095: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50096: LD_VAR 0 4
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: LD_INT 4
50115: PUSH
50116: LD_INT 5
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: IN
50127: NOT
50128: PUSH
50129: LD_VAR 0 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: IN
50144: PUSH
50145: LD_VAR 0 5
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: IN
50164: NOT
50165: AND
50166: OR
50167: IFFALSE 50171
// exit ;
50169: GO 68562
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50171: LD_VAR 0 1
50175: PUSH
50176: LD_INT 6
50178: PUSH
50179: LD_INT 7
50181: PUSH
50182: LD_INT 8
50184: PUSH
50185: LD_INT 13
50187: PUSH
50188: LD_INT 12
50190: PUSH
50191: LD_INT 15
50193: PUSH
50194: LD_INT 11
50196: PUSH
50197: LD_INT 14
50199: PUSH
50200: LD_INT 10
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: IN
50214: IFFALSE 50224
// btype = b_lab ;
50216: LD_ADDR_VAR 0 1
50220: PUSH
50221: LD_INT 6
50223: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50224: LD_VAR 0 6
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: IN
50243: NOT
50244: PUSH
50245: LD_VAR 0 1
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 6
50264: PUSH
50265: LD_INT 36
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: LD_INT 5
50273: PUSH
50274: LD_INT 31
50276: PUSH
50277: LD_INT 32
50279: PUSH
50280: LD_INT 33
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: IN
50296: NOT
50297: PUSH
50298: LD_VAR 0 6
50302: PUSH
50303: LD_INT 1
50305: EQUAL
50306: AND
50307: OR
50308: PUSH
50309: LD_VAR 0 1
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: IN
50324: NOT
50325: PUSH
50326: LD_VAR 0 6
50330: PUSH
50331: LD_INT 2
50333: EQUAL
50334: AND
50335: OR
50336: IFFALSE 50346
// mode = 0 ;
50338: LD_ADDR_VAR 0 6
50342: PUSH
50343: LD_INT 0
50345: ST_TO_ADDR
// case mode of 0 :
50346: LD_VAR 0 6
50350: PUSH
50351: LD_INT 0
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 61812
50359: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50360: LD_ADDR_VAR 0 11
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50553: LD_ADDR_VAR 0 12
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50749: LD_ADDR_VAR 0 13
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50948: LD_ADDR_VAR 0 14
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51144: LD_ADDR_VAR 0 15
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51337: LD_ADDR_VAR 0 16
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: LD_INT 3
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51530: LD_ADDR_VAR 0 17
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51760: LD_ADDR_VAR 0 18
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51990: LD_ADDR_VAR 0 19
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52220: LD_ADDR_VAR 0 20
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52450: LD_ADDR_VAR 0 21
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52680: LD_ADDR_VAR 0 22
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52910: LD_ADDR_VAR 0 23
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53190: LD_ADDR_VAR 0 24
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53466: LD_ADDR_VAR 0 25
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53740: LD_ADDR_VAR 0 26
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54016: LD_ADDR_VAR 0 27
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54296: LD_ADDR_VAR 0 28
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54578: LD_ADDR_VAR 0 29
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54857: LD_ADDR_VAR 0 30
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55135: LD_ADDR_VAR 0 31
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 3
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55413: LD_ADDR_VAR 0 32
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55691: LD_ADDR_VAR 0 33
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: LD_INT 3
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 34
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56250: LD_ADDR_VAR 0 35
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56362: LD_ADDR_VAR 0 36
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56474: LD_ADDR_VAR 0 37
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56586: LD_ADDR_VAR 0 38
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56698: LD_ADDR_VAR 0 39
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56810: LD_ADDR_VAR 0 40
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56922: LD_ADDR_VAR 0 41
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 3
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57272: LD_ADDR_VAR 0 42
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 43
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57970: LD_ADDR_VAR 0 44
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58320: LD_ADDR_VAR 0 45
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58670: LD_ADDR_VAR 0 46
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59018: LD_ADDR_VAR 0 47
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59169: LD_ADDR_VAR 0 48
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59316: LD_ADDR_VAR 0 49
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59460: LD_ADDR_VAR 0 50
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59604: LD_ADDR_VAR 0 51
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59751: LD_ADDR_VAR 0 52
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59902: LD_ADDR_VAR 0 53
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60132: LD_ADDR_VAR 0 54
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60362: LD_ADDR_VAR 0 55
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60592: LD_ADDR_VAR 0 56
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60822: LD_ADDR_VAR 0 57
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61052: LD_ADDR_VAR 0 58
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61282: LD_ADDR_VAR 0 59
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61370: LD_ADDR_VAR 0 60
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61458: LD_ADDR_VAR 0 61
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61546: LD_ADDR_VAR 0 62
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61634: LD_ADDR_VAR 0 63
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61722: LD_ADDR_VAR 0 64
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// end ; 1 :
61810: GO 67707
61812: LD_INT 1
61814: DOUBLE
61815: EQUAL
61816: IFTRUE 61820
61818: GO 64443
61820: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61821: LD_ADDR_VAR 0 11
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61865: LD_ADDR_VAR 0 12
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61906: LD_ADDR_VAR 0 13
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 3
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61946: LD_ADDR_VAR 0 14
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61987: LD_ADDR_VAR 0 15
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62031: LD_ADDR_VAR 0 16
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62077: LD_ADDR_VAR 0 17
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62121: LD_ADDR_VAR 0 18
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62162: LD_ADDR_VAR 0 19
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62202: LD_ADDR_VAR 0 20
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62243: LD_ADDR_VAR 0 21
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62287: LD_ADDR_VAR 0 22
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 3
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: NEG
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: NEG
62319: PUSH
62320: LD_INT 3
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62333: LD_ADDR_VAR 0 23
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 4
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 3
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62377: LD_ADDR_VAR 0 24
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62418: LD_ADDR_VAR 0 25
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62458: LD_ADDR_VAR 0 26
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 4
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62499: LD_ADDR_VAR 0 27
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 4
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62543: LD_ADDR_VAR 0 28
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 4
62574: NEG
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62589: LD_ADDR_VAR 0 29
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 3
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 3
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 4
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 4
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 5
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 5
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 6
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 6
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 5
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62744: LD_ADDR_VAR 0 30
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 4
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 5
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 5
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 6
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 6
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62887: LD_ADDR_VAR 0 31
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 4
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 4
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 4
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 5
62954: PUSH
62955: LD_INT 4
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: PUSH
62965: LD_INT 5
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 4
62974: PUSH
62975: LD_INT 5
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 6
62984: PUSH
62985: LD_INT 5
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 6
62994: PUSH
62995: LD_INT 6
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 5
63004: PUSH
63005: LD_INT 6
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63026: LD_ADDR_VAR 0 32
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 4
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 4
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 5
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 4
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 6
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 6
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 5
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63169: LD_ADDR_VAR 0 33
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 3
63187: NEG
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 4
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 5
63255: NEG
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 5
63278: NEG
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 6
63289: NEG
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 6
63300: NEG
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63324: LD_ADDR_VAR 0 34
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 3
63343: NEG
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: LD_INT 4
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: NEG
63392: PUSH
63393: LD_INT 4
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 4
63403: NEG
63404: PUSH
63405: LD_INT 5
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: NEG
63416: PUSH
63417: LD_INT 4
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 5
63427: NEG
63428: PUSH
63429: LD_INT 5
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 5
63439: NEG
63440: PUSH
63441: LD_INT 6
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 6
63451: NEG
63452: PUSH
63453: LD_INT 5
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 6
63463: NEG
63464: PUSH
63465: LD_INT 6
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63487: LD_ADDR_VAR 0 41
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 3
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63531: LD_ADDR_VAR 0 42
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63572: LD_ADDR_VAR 0 43
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63612: LD_ADDR_VAR 0 44
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63653: LD_ADDR_VAR 0 45
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63697: LD_ADDR_VAR 0 46
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63743: LD_ADDR_VAR 0 47
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: LD_INT 3
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63776: LD_ADDR_VAR 0 48
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63807: LD_ADDR_VAR 0 49
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63836: LD_ADDR_VAR 0 50
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63865: LD_ADDR_VAR 0 51
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63896: LD_ADDR_VAR 0 52
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63929: LD_ADDR_VAR 0 53
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63973: LD_ADDR_VAR 0 54
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 3
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64014: LD_ADDR_VAR 0 55
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64054: LD_ADDR_VAR 0 56
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64095: LD_ADDR_VAR 0 57
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: NEG
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64139: LD_ADDR_VAR 0 58
64143: PUSH
64144: LD_INT 2
64146: NEG
64147: PUSH
64148: LD_INT 3
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 3
64158: NEG
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64185: LD_ADDR_VAR 0 59
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64229: LD_ADDR_VAR 0 60
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64270: LD_ADDR_VAR 0 61
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64310: LD_ADDR_VAR 0 62
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64351: LD_ADDR_VAR 0 63
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 2
64380: NEG
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64395: LD_ADDR_VAR 0 64
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 2
64414: NEG
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: LD_INT 2
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: ST_TO_ADDR
// end ; 2 :
64441: GO 67707
64443: LD_INT 2
64445: DOUBLE
64446: EQUAL
64447: IFTRUE 64451
64449: GO 67706
64451: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64452: LD_ADDR_VAR 0 29
64456: PUSH
64457: LD_INT 4
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 5
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 5
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 5
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 4
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: LD_INT 4
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: LD_INT 4
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 4
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 4
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 5
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 5
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 4
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 5
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: NEG
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 4
64791: NEG
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 4
64814: NEG
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 4
64837: NEG
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 4
64849: NEG
64850: PUSH
64851: LD_INT 5
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: LD_INT 4
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 3
64873: NEG
64874: PUSH
64875: LD_INT 3
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 4
64885: NEG
64886: PUSH
64887: LD_INT 3
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 5
64897: NEG
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 5
64909: NEG
64910: PUSH
64911: LD_INT 5
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: LD_INT 5
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 5
64933: NEG
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64990: LD_ADDR_VAR 0 30
64994: PUSH
64995: LD_INT 4
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 5
65017: PUSH
65018: LD_INT 4
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 5
65027: PUSH
65028: LD_INT 5
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 4
65037: PUSH
65038: LD_INT 5
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: LD_INT 4
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: LD_INT 5
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 3
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 4
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 4
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 4
65180: NEG
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: NEG
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 3
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 4
65225: NEG
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 5
65236: NEG
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 5
65247: NEG
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 5
65259: NEG
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: LD_INT 3
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 3
65294: NEG
65295: PUSH
65296: LD_INT 4
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 4
65354: NEG
65355: PUSH
65356: LD_INT 4
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 4
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 4
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 5
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: LD_INT 4
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 3
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: LD_INT 5
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: NEG
65481: PUSH
65482: LD_INT 5
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65537: LD_ADDR_VAR 0 31
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 4
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 5
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 5
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 4
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: NEG
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 4
65704: NEG
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 4
65716: NEG
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: LD_INT 4
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 4
65751: NEG
65752: PUSH
65753: LD_INT 5
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: NEG
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 3
65775: NEG
65776: PUSH
65777: LD_INT 3
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 5
65799: NEG
65800: PUSH
65801: LD_INT 4
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 5
65811: NEG
65812: PUSH
65813: LD_INT 5
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: LD_INT 5
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 3
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 4
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: LD_INT 3
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 2
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: LD_INT 4
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 4
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 5
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 5
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 5
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66087: LD_ADDR_VAR 0 32
66091: PUSH
66092: LD_INT 4
66094: NEG
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 4
66105: NEG
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 3
66128: NEG
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 4
66139: NEG
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 5
66161: NEG
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 5
66173: NEG
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 3
66185: NEG
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: LD_INT 3
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: LD_INT 4
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: NEG
66233: PUSH
66234: LD_INT 2
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 4
66256: NEG
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: LD_INT 4
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: NEG
66281: PUSH
66282: LD_INT 4
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 4
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 5
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: LD_INT 4
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: LD_INT 3
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: NEG
66360: PUSH
66361: LD_INT 4
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: LD_INT 5
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 4
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 4
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 4
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: LD_INT 4
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 4
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 5
66519: PUSH
66520: LD_INT 4
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 5
66529: PUSH
66530: LD_INT 5
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 5
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 5
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: LD_INT 5
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66634: LD_ADDR_VAR 0 33
66638: PUSH
66639: LD_INT 4
66641: NEG
66642: PUSH
66643: LD_INT 4
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 4
66653: NEG
66654: PUSH
66655: LD_INT 5
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: NEG
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: NEG
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 5
66701: NEG
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 5
66713: NEG
66714: PUSH
66715: LD_INT 5
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: LD_INT 5
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 3
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 4
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: LD_INT 3
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: LD_INT 4
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 5
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 4
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 5
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: LD_INT 4
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 4
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: LD_INT 4
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 4
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 3
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: LD_INT 5
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 5
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 4
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: PUSH
67107: LD_INT 5
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67172: LD_ADDR_VAR 0 34
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_INT 5
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: LD_INT 3
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: LD_INT 5
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 2
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 2
67269: NEG
67270: PUSH
67271: LD_INT 5
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 4
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 2
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 4
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 4
67374: PUSH
67375: LD_INT 4
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: LD_INT 3
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 5
67394: PUSH
67395: LD_INT 4
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 5
67404: PUSH
67405: LD_INT 5
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 4
67414: PUSH
67415: LD_INT 5
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: LD_INT 4
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 5
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: LD_INT 3
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 4
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: LD_INT 2
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: LD_INT 4
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 4
67568: NEG
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 3
67580: NEG
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 3
67591: NEG
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 5
67613: NEG
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 5
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 5
67636: NEG
67637: PUSH
67638: LD_INT 2
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: ST_TO_ADDR
// end ; end ;
67704: GO 67707
67706: POP
// case btype of b_depot , b_warehouse :
67707: LD_VAR 0 1
67711: PUSH
67712: LD_INT 0
67714: DOUBLE
67715: EQUAL
67716: IFTRUE 67726
67718: LD_INT 1
67720: DOUBLE
67721: EQUAL
67722: IFTRUE 67726
67724: GO 67927
67726: POP
// case nation of nation_american :
67727: LD_VAR 0 5
67731: PUSH
67732: LD_INT 1
67734: DOUBLE
67735: EQUAL
67736: IFTRUE 67740
67738: GO 67796
67740: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67741: LD_ADDR_VAR 0 9
67745: PUSH
67746: LD_VAR 0 11
67750: PUSH
67751: LD_VAR 0 12
67755: PUSH
67756: LD_VAR 0 13
67760: PUSH
67761: LD_VAR 0 14
67765: PUSH
67766: LD_VAR 0 15
67770: PUSH
67771: LD_VAR 0 16
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: PUSH
67784: LD_VAR 0 4
67788: PUSH
67789: LD_INT 1
67791: PLUS
67792: ARRAY
67793: ST_TO_ADDR
67794: GO 67925
67796: LD_INT 2
67798: DOUBLE
67799: EQUAL
67800: IFTRUE 67804
67802: GO 67860
67804: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67805: LD_ADDR_VAR 0 9
67809: PUSH
67810: LD_VAR 0 17
67814: PUSH
67815: LD_VAR 0 18
67819: PUSH
67820: LD_VAR 0 19
67824: PUSH
67825: LD_VAR 0 20
67829: PUSH
67830: LD_VAR 0 21
67834: PUSH
67835: LD_VAR 0 22
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: PUSH
67848: LD_VAR 0 4
67852: PUSH
67853: LD_INT 1
67855: PLUS
67856: ARRAY
67857: ST_TO_ADDR
67858: GO 67925
67860: LD_INT 3
67862: DOUBLE
67863: EQUAL
67864: IFTRUE 67868
67866: GO 67924
67868: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67869: LD_ADDR_VAR 0 9
67873: PUSH
67874: LD_VAR 0 23
67878: PUSH
67879: LD_VAR 0 24
67883: PUSH
67884: LD_VAR 0 25
67888: PUSH
67889: LD_VAR 0 26
67893: PUSH
67894: LD_VAR 0 27
67898: PUSH
67899: LD_VAR 0 28
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: PUSH
67912: LD_VAR 0 4
67916: PUSH
67917: LD_INT 1
67919: PLUS
67920: ARRAY
67921: ST_TO_ADDR
67922: GO 67925
67924: POP
67925: GO 68480
67927: LD_INT 2
67929: DOUBLE
67930: EQUAL
67931: IFTRUE 67941
67933: LD_INT 3
67935: DOUBLE
67936: EQUAL
67937: IFTRUE 67941
67939: GO 67997
67941: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67942: LD_ADDR_VAR 0 9
67946: PUSH
67947: LD_VAR 0 29
67951: PUSH
67952: LD_VAR 0 30
67956: PUSH
67957: LD_VAR 0 31
67961: PUSH
67962: LD_VAR 0 32
67966: PUSH
67967: LD_VAR 0 33
67971: PUSH
67972: LD_VAR 0 34
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: PUSH
67985: LD_VAR 0 4
67989: PUSH
67990: LD_INT 1
67992: PLUS
67993: ARRAY
67994: ST_TO_ADDR
67995: GO 68480
67997: LD_INT 16
67999: DOUBLE
68000: EQUAL
68001: IFTRUE 68059
68003: LD_INT 17
68005: DOUBLE
68006: EQUAL
68007: IFTRUE 68059
68009: LD_INT 18
68011: DOUBLE
68012: EQUAL
68013: IFTRUE 68059
68015: LD_INT 19
68017: DOUBLE
68018: EQUAL
68019: IFTRUE 68059
68021: LD_INT 22
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68059
68027: LD_INT 20
68029: DOUBLE
68030: EQUAL
68031: IFTRUE 68059
68033: LD_INT 21
68035: DOUBLE
68036: EQUAL
68037: IFTRUE 68059
68039: LD_INT 23
68041: DOUBLE
68042: EQUAL
68043: IFTRUE 68059
68045: LD_INT 24
68047: DOUBLE
68048: EQUAL
68049: IFTRUE 68059
68051: LD_INT 25
68053: DOUBLE
68054: EQUAL
68055: IFTRUE 68059
68057: GO 68115
68059: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68060: LD_ADDR_VAR 0 9
68064: PUSH
68065: LD_VAR 0 35
68069: PUSH
68070: LD_VAR 0 36
68074: PUSH
68075: LD_VAR 0 37
68079: PUSH
68080: LD_VAR 0 38
68084: PUSH
68085: LD_VAR 0 39
68089: PUSH
68090: LD_VAR 0 40
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: PUSH
68103: LD_VAR 0 4
68107: PUSH
68108: LD_INT 1
68110: PLUS
68111: ARRAY
68112: ST_TO_ADDR
68113: GO 68480
68115: LD_INT 6
68117: DOUBLE
68118: EQUAL
68119: IFTRUE 68171
68121: LD_INT 7
68123: DOUBLE
68124: EQUAL
68125: IFTRUE 68171
68127: LD_INT 8
68129: DOUBLE
68130: EQUAL
68131: IFTRUE 68171
68133: LD_INT 13
68135: DOUBLE
68136: EQUAL
68137: IFTRUE 68171
68139: LD_INT 12
68141: DOUBLE
68142: EQUAL
68143: IFTRUE 68171
68145: LD_INT 15
68147: DOUBLE
68148: EQUAL
68149: IFTRUE 68171
68151: LD_INT 11
68153: DOUBLE
68154: EQUAL
68155: IFTRUE 68171
68157: LD_INT 14
68159: DOUBLE
68160: EQUAL
68161: IFTRUE 68171
68163: LD_INT 10
68165: DOUBLE
68166: EQUAL
68167: IFTRUE 68171
68169: GO 68227
68171: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68172: LD_ADDR_VAR 0 9
68176: PUSH
68177: LD_VAR 0 41
68181: PUSH
68182: LD_VAR 0 42
68186: PUSH
68187: LD_VAR 0 43
68191: PUSH
68192: LD_VAR 0 44
68196: PUSH
68197: LD_VAR 0 45
68201: PUSH
68202: LD_VAR 0 46
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: PUSH
68215: LD_VAR 0 4
68219: PUSH
68220: LD_INT 1
68222: PLUS
68223: ARRAY
68224: ST_TO_ADDR
68225: GO 68480
68227: LD_INT 36
68229: DOUBLE
68230: EQUAL
68231: IFTRUE 68235
68233: GO 68291
68235: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68236: LD_ADDR_VAR 0 9
68240: PUSH
68241: LD_VAR 0 47
68245: PUSH
68246: LD_VAR 0 48
68250: PUSH
68251: LD_VAR 0 49
68255: PUSH
68256: LD_VAR 0 50
68260: PUSH
68261: LD_VAR 0 51
68265: PUSH
68266: LD_VAR 0 52
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: PUSH
68279: LD_VAR 0 4
68283: PUSH
68284: LD_INT 1
68286: PLUS
68287: ARRAY
68288: ST_TO_ADDR
68289: GO 68480
68291: LD_INT 4
68293: DOUBLE
68294: EQUAL
68295: IFTRUE 68317
68297: LD_INT 5
68299: DOUBLE
68300: EQUAL
68301: IFTRUE 68317
68303: LD_INT 34
68305: DOUBLE
68306: EQUAL
68307: IFTRUE 68317
68309: LD_INT 37
68311: DOUBLE
68312: EQUAL
68313: IFTRUE 68317
68315: GO 68373
68317: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68318: LD_ADDR_VAR 0 9
68322: PUSH
68323: LD_VAR 0 53
68327: PUSH
68328: LD_VAR 0 54
68332: PUSH
68333: LD_VAR 0 55
68337: PUSH
68338: LD_VAR 0 56
68342: PUSH
68343: LD_VAR 0 57
68347: PUSH
68348: LD_VAR 0 58
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 4
68365: PUSH
68366: LD_INT 1
68368: PLUS
68369: ARRAY
68370: ST_TO_ADDR
68371: GO 68480
68373: LD_INT 31
68375: DOUBLE
68376: EQUAL
68377: IFTRUE 68423
68379: LD_INT 32
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68423
68385: LD_INT 33
68387: DOUBLE
68388: EQUAL
68389: IFTRUE 68423
68391: LD_INT 27
68393: DOUBLE
68394: EQUAL
68395: IFTRUE 68423
68397: LD_INT 26
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68423
68403: LD_INT 28
68405: DOUBLE
68406: EQUAL
68407: IFTRUE 68423
68409: LD_INT 29
68411: DOUBLE
68412: EQUAL
68413: IFTRUE 68423
68415: LD_INT 30
68417: DOUBLE
68418: EQUAL
68419: IFTRUE 68423
68421: GO 68479
68423: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68424: LD_ADDR_VAR 0 9
68428: PUSH
68429: LD_VAR 0 59
68433: PUSH
68434: LD_VAR 0 60
68438: PUSH
68439: LD_VAR 0 61
68443: PUSH
68444: LD_VAR 0 62
68448: PUSH
68449: LD_VAR 0 63
68453: PUSH
68454: LD_VAR 0 64
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: PUSH
68467: LD_VAR 0 4
68471: PUSH
68472: LD_INT 1
68474: PLUS
68475: ARRAY
68476: ST_TO_ADDR
68477: GO 68480
68479: POP
// temp_list2 = [ ] ;
68480: LD_ADDR_VAR 0 10
68484: PUSH
68485: EMPTY
68486: ST_TO_ADDR
// for i in temp_list do
68487: LD_ADDR_VAR 0 8
68491: PUSH
68492: LD_VAR 0 9
68496: PUSH
68497: FOR_IN
68498: IFFALSE 68550
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68500: LD_ADDR_VAR 0 10
68504: PUSH
68505: LD_VAR 0 10
68509: PUSH
68510: LD_VAR 0 8
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: PUSH
68519: LD_VAR 0 2
68523: PLUS
68524: PUSH
68525: LD_VAR 0 8
68529: PUSH
68530: LD_INT 2
68532: ARRAY
68533: PUSH
68534: LD_VAR 0 3
68538: PLUS
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: EMPTY
68545: LIST
68546: ADD
68547: ST_TO_ADDR
68548: GO 68497
68550: POP
68551: POP
// result = temp_list2 ;
68552: LD_ADDR_VAR 0 7
68556: PUSH
68557: LD_VAR 0 10
68561: ST_TO_ADDR
// end ;
68562: LD_VAR 0 7
68566: RET
// export function EnemyInRange ( unit , dist ) ; begin
68567: LD_INT 0
68569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68570: LD_ADDR_VAR 0 3
68574: PUSH
68575: LD_VAR 0 1
68579: PPUSH
68580: CALL_OW 255
68584: PPUSH
68585: LD_VAR 0 1
68589: PPUSH
68590: CALL_OW 250
68594: PPUSH
68595: LD_VAR 0 1
68599: PPUSH
68600: CALL_OW 251
68604: PPUSH
68605: LD_VAR 0 2
68609: PPUSH
68610: CALL 42338 0 4
68614: PUSH
68615: LD_INT 4
68617: ARRAY
68618: ST_TO_ADDR
// end ;
68619: LD_VAR 0 3
68623: RET
// export function PlayerSeeMe ( unit ) ; begin
68624: LD_INT 0
68626: PPUSH
// result := See ( your_side , unit ) ;
68627: LD_ADDR_VAR 0 2
68631: PUSH
68632: LD_OWVAR 2
68636: PPUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 292
68646: ST_TO_ADDR
// end ;
68647: LD_VAR 0 2
68651: RET
// export function ReverseDir ( unit ) ; begin
68652: LD_INT 0
68654: PPUSH
// if not unit then
68655: LD_VAR 0 1
68659: NOT
68660: IFFALSE 68664
// exit ;
68662: GO 68687
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68664: LD_ADDR_VAR 0 2
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 254
68678: PUSH
68679: LD_INT 3
68681: PLUS
68682: PUSH
68683: LD_INT 6
68685: MOD
68686: ST_TO_ADDR
// end ;
68687: LD_VAR 0 2
68691: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
68696: PPUSH
68697: PPUSH
68698: PPUSH
// if not hexes then
68699: LD_VAR 0 2
68703: NOT
68704: IFFALSE 68708
// exit ;
68706: GO 68856
// dist := 9999 ;
68708: LD_ADDR_VAR 0 5
68712: PUSH
68713: LD_INT 9999
68715: ST_TO_ADDR
// for i = 1 to hexes do
68716: LD_ADDR_VAR 0 4
68720: PUSH
68721: DOUBLE
68722: LD_INT 1
68724: DEC
68725: ST_TO_ADDR
68726: LD_VAR 0 2
68730: PUSH
68731: FOR_TO
68732: IFFALSE 68844
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68734: LD_VAR 0 1
68738: PPUSH
68739: LD_VAR 0 2
68743: PUSH
68744: LD_VAR 0 4
68748: ARRAY
68749: PUSH
68750: LD_INT 1
68752: ARRAY
68753: PPUSH
68754: LD_VAR 0 2
68758: PUSH
68759: LD_VAR 0 4
68763: ARRAY
68764: PUSH
68765: LD_INT 2
68767: ARRAY
68768: PPUSH
68769: CALL_OW 297
68773: PUSH
68774: LD_VAR 0 5
68778: LESS
68779: IFFALSE 68842
// begin hex := hexes [ i ] ;
68781: LD_ADDR_VAR 0 7
68785: PUSH
68786: LD_VAR 0 2
68790: PUSH
68791: LD_VAR 0 4
68795: ARRAY
68796: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68797: LD_ADDR_VAR 0 5
68801: PUSH
68802: LD_VAR 0 1
68806: PPUSH
68807: LD_VAR 0 2
68811: PUSH
68812: LD_VAR 0 4
68816: ARRAY
68817: PUSH
68818: LD_INT 1
68820: ARRAY
68821: PPUSH
68822: LD_VAR 0 2
68826: PUSH
68827: LD_VAR 0 4
68831: ARRAY
68832: PUSH
68833: LD_INT 2
68835: ARRAY
68836: PPUSH
68837: CALL_OW 297
68841: ST_TO_ADDR
// end ; end ;
68842: GO 68731
68844: POP
68845: POP
// result := hex ;
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 7
68855: ST_TO_ADDR
// end ;
68856: LD_VAR 0 3
68860: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68861: LD_INT 0
68863: PPUSH
68864: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68865: LD_VAR 0 1
68869: NOT
68870: PUSH
68871: LD_VAR 0 1
68875: PUSH
68876: LD_INT 21
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 23
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PPUSH
68900: CALL_OW 69
68904: IN
68905: NOT
68906: OR
68907: IFFALSE 68911
// exit ;
68909: GO 68958
// for i = 1 to 3 do
68911: LD_ADDR_VAR 0 3
68915: PUSH
68916: DOUBLE
68917: LD_INT 1
68919: DEC
68920: ST_TO_ADDR
68921: LD_INT 3
68923: PUSH
68924: FOR_TO
68925: IFFALSE 68956
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68927: LD_VAR 0 1
68931: PPUSH
68932: CALL_OW 250
68936: PPUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 251
68946: PPUSH
68947: LD_INT 1
68949: PPUSH
68950: CALL_OW 453
68954: GO 68924
68956: POP
68957: POP
// end ;
68958: LD_VAR 0 2
68962: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68963: LD_INT 0
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
68969: PPUSH
68970: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68971: LD_VAR 0 1
68975: NOT
68976: PUSH
68977: LD_VAR 0 2
68981: NOT
68982: OR
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: CALL_OW 314
68993: OR
68994: IFFALSE 68998
// exit ;
68996: GO 69439
// x := GetX ( enemy_unit ) ;
68998: LD_ADDR_VAR 0 7
69002: PUSH
69003: LD_VAR 0 2
69007: PPUSH
69008: CALL_OW 250
69012: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69013: LD_ADDR_VAR 0 8
69017: PUSH
69018: LD_VAR 0 2
69022: PPUSH
69023: CALL_OW 251
69027: ST_TO_ADDR
// if not x or not y then
69028: LD_VAR 0 7
69032: NOT
69033: PUSH
69034: LD_VAR 0 8
69038: NOT
69039: OR
69040: IFFALSE 69044
// exit ;
69042: GO 69439
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69044: LD_ADDR_VAR 0 6
69048: PUSH
69049: LD_VAR 0 7
69053: PPUSH
69054: LD_INT 0
69056: PPUSH
69057: LD_INT 4
69059: PPUSH
69060: CALL_OW 272
69064: PUSH
69065: LD_VAR 0 8
69069: PPUSH
69070: LD_INT 0
69072: PPUSH
69073: LD_INT 4
69075: PPUSH
69076: CALL_OW 273
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_INT 1
69092: PPUSH
69093: LD_INT 4
69095: PPUSH
69096: CALL_OW 272
69100: PUSH
69101: LD_VAR 0 8
69105: PPUSH
69106: LD_INT 1
69108: PPUSH
69109: LD_INT 4
69111: PPUSH
69112: CALL_OW 273
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_VAR 0 7
69125: PPUSH
69126: LD_INT 2
69128: PPUSH
69129: LD_INT 4
69131: PPUSH
69132: CALL_OW 272
69136: PUSH
69137: LD_VAR 0 8
69141: PPUSH
69142: LD_INT 2
69144: PPUSH
69145: LD_INT 4
69147: PPUSH
69148: CALL_OW 273
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 7
69161: PPUSH
69162: LD_INT 3
69164: PPUSH
69165: LD_INT 4
69167: PPUSH
69168: CALL_OW 272
69172: PUSH
69173: LD_VAR 0 8
69177: PPUSH
69178: LD_INT 3
69180: PPUSH
69181: LD_INT 4
69183: PPUSH
69184: CALL_OW 273
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_VAR 0 7
69197: PPUSH
69198: LD_INT 4
69200: PPUSH
69201: LD_INT 4
69203: PPUSH
69204: CALL_OW 272
69208: PUSH
69209: LD_VAR 0 8
69213: PPUSH
69214: LD_INT 4
69216: PPUSH
69217: LD_INT 4
69219: PPUSH
69220: CALL_OW 273
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_VAR 0 7
69233: PPUSH
69234: LD_INT 5
69236: PPUSH
69237: LD_INT 4
69239: PPUSH
69240: CALL_OW 272
69244: PUSH
69245: LD_VAR 0 8
69249: PPUSH
69250: LD_INT 5
69252: PPUSH
69253: LD_INT 4
69255: PPUSH
69256: CALL_OW 273
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: ST_TO_ADDR
// for i = tmp downto 1 do
69273: LD_ADDR_VAR 0 4
69277: PUSH
69278: DOUBLE
69279: LD_VAR 0 6
69283: INC
69284: ST_TO_ADDR
69285: LD_INT 1
69287: PUSH
69288: FOR_DOWNTO
69289: IFFALSE 69390
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69291: LD_VAR 0 6
69295: PUSH
69296: LD_VAR 0 4
69300: ARRAY
69301: PUSH
69302: LD_INT 1
69304: ARRAY
69305: PPUSH
69306: LD_VAR 0 6
69310: PUSH
69311: LD_VAR 0 4
69315: ARRAY
69316: PUSH
69317: LD_INT 2
69319: ARRAY
69320: PPUSH
69321: CALL_OW 488
69325: NOT
69326: PUSH
69327: LD_VAR 0 6
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PUSH
69338: LD_INT 1
69340: ARRAY
69341: PPUSH
69342: LD_VAR 0 6
69346: PUSH
69347: LD_VAR 0 4
69351: ARRAY
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 428
69361: PUSH
69362: LD_INT 0
69364: NONEQUAL
69365: OR
69366: IFFALSE 69388
// tmp := Delete ( tmp , i ) ;
69368: LD_ADDR_VAR 0 6
69372: PUSH
69373: LD_VAR 0 6
69377: PPUSH
69378: LD_VAR 0 4
69382: PPUSH
69383: CALL_OW 3
69387: ST_TO_ADDR
69388: GO 69288
69390: POP
69391: POP
// j := GetClosestHex ( unit , tmp ) ;
69392: LD_ADDR_VAR 0 5
69396: PUSH
69397: LD_VAR 0 1
69401: PPUSH
69402: LD_VAR 0 6
69406: PPUSH
69407: CALL 68692 0 2
69411: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69412: LD_VAR 0 1
69416: PPUSH
69417: LD_VAR 0 5
69421: PUSH
69422: LD_INT 1
69424: ARRAY
69425: PPUSH
69426: LD_VAR 0 5
69430: PUSH
69431: LD_INT 2
69433: ARRAY
69434: PPUSH
69435: CALL_OW 111
// end ;
69439: LD_VAR 0 3
69443: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69444: LD_INT 0
69446: PPUSH
69447: PPUSH
69448: PPUSH
// uc_side = 0 ;
69449: LD_ADDR_OWVAR 20
69453: PUSH
69454: LD_INT 0
69456: ST_TO_ADDR
// uc_nation = 0 ;
69457: LD_ADDR_OWVAR 21
69461: PUSH
69462: LD_INT 0
69464: ST_TO_ADDR
// InitHc_All ( ) ;
69465: CALL_OW 584
// InitVc ;
69469: CALL_OW 20
// if mastodonts then
69473: LD_VAR 0 6
69477: IFFALSE 69544
// for i = 1 to mastodonts do
69479: LD_ADDR_VAR 0 11
69483: PUSH
69484: DOUBLE
69485: LD_INT 1
69487: DEC
69488: ST_TO_ADDR
69489: LD_VAR 0 6
69493: PUSH
69494: FOR_TO
69495: IFFALSE 69542
// begin vc_chassis := 31 ;
69497: LD_ADDR_OWVAR 37
69501: PUSH
69502: LD_INT 31
69504: ST_TO_ADDR
// vc_control := control_rider ;
69505: LD_ADDR_OWVAR 38
69509: PUSH
69510: LD_INT 4
69512: ST_TO_ADDR
// animal := CreateVehicle ;
69513: LD_ADDR_VAR 0 12
69517: PUSH
69518: CALL_OW 45
69522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69523: LD_VAR 0 12
69527: PPUSH
69528: LD_VAR 0 8
69532: PPUSH
69533: LD_INT 0
69535: PPUSH
69536: CALL 71732 0 3
// end ;
69540: GO 69494
69542: POP
69543: POP
// if horses then
69544: LD_VAR 0 5
69548: IFFALSE 69615
// for i = 1 to horses do
69550: LD_ADDR_VAR 0 11
69554: PUSH
69555: DOUBLE
69556: LD_INT 1
69558: DEC
69559: ST_TO_ADDR
69560: LD_VAR 0 5
69564: PUSH
69565: FOR_TO
69566: IFFALSE 69613
// begin hc_class := 21 ;
69568: LD_ADDR_OWVAR 28
69572: PUSH
69573: LD_INT 21
69575: ST_TO_ADDR
// hc_gallery :=  ;
69576: LD_ADDR_OWVAR 33
69580: PUSH
69581: LD_STRING 
69583: ST_TO_ADDR
// animal := CreateHuman ;
69584: LD_ADDR_VAR 0 12
69588: PUSH
69589: CALL_OW 44
69593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69594: LD_VAR 0 12
69598: PPUSH
69599: LD_VAR 0 8
69603: PPUSH
69604: LD_INT 0
69606: PPUSH
69607: CALL 71732 0 3
// end ;
69611: GO 69565
69613: POP
69614: POP
// if birds then
69615: LD_VAR 0 1
69619: IFFALSE 69686
// for i = 1 to birds do
69621: LD_ADDR_VAR 0 11
69625: PUSH
69626: DOUBLE
69627: LD_INT 1
69629: DEC
69630: ST_TO_ADDR
69631: LD_VAR 0 1
69635: PUSH
69636: FOR_TO
69637: IFFALSE 69684
// begin hc_class = 18 ;
69639: LD_ADDR_OWVAR 28
69643: PUSH
69644: LD_INT 18
69646: ST_TO_ADDR
// hc_gallery =  ;
69647: LD_ADDR_OWVAR 33
69651: PUSH
69652: LD_STRING 
69654: ST_TO_ADDR
// animal := CreateHuman ;
69655: LD_ADDR_VAR 0 12
69659: PUSH
69660: CALL_OW 44
69664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69665: LD_VAR 0 12
69669: PPUSH
69670: LD_VAR 0 8
69674: PPUSH
69675: LD_INT 0
69677: PPUSH
69678: CALL 71732 0 3
// end ;
69682: GO 69636
69684: POP
69685: POP
// if tigers then
69686: LD_VAR 0 2
69690: IFFALSE 69774
// for i = 1 to tigers do
69692: LD_ADDR_VAR 0 11
69696: PUSH
69697: DOUBLE
69698: LD_INT 1
69700: DEC
69701: ST_TO_ADDR
69702: LD_VAR 0 2
69706: PUSH
69707: FOR_TO
69708: IFFALSE 69772
// begin hc_class = class_tiger ;
69710: LD_ADDR_OWVAR 28
69714: PUSH
69715: LD_INT 14
69717: ST_TO_ADDR
// hc_gallery =  ;
69718: LD_ADDR_OWVAR 33
69722: PUSH
69723: LD_STRING 
69725: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69726: LD_ADDR_OWVAR 35
69730: PUSH
69731: LD_INT 7
69733: NEG
69734: PPUSH
69735: LD_INT 7
69737: PPUSH
69738: CALL_OW 12
69742: ST_TO_ADDR
// animal := CreateHuman ;
69743: LD_ADDR_VAR 0 12
69747: PUSH
69748: CALL_OW 44
69752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69753: LD_VAR 0 12
69757: PPUSH
69758: LD_VAR 0 8
69762: PPUSH
69763: LD_INT 0
69765: PPUSH
69766: CALL 71732 0 3
// end ;
69770: GO 69707
69772: POP
69773: POP
// if apemans then
69774: LD_VAR 0 3
69778: IFFALSE 69901
// for i = 1 to apemans do
69780: LD_ADDR_VAR 0 11
69784: PUSH
69785: DOUBLE
69786: LD_INT 1
69788: DEC
69789: ST_TO_ADDR
69790: LD_VAR 0 3
69794: PUSH
69795: FOR_TO
69796: IFFALSE 69899
// begin hc_class = class_apeman ;
69798: LD_ADDR_OWVAR 28
69802: PUSH
69803: LD_INT 12
69805: ST_TO_ADDR
// hc_gallery =  ;
69806: LD_ADDR_OWVAR 33
69810: PUSH
69811: LD_STRING 
69813: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69814: LD_ADDR_OWVAR 35
69818: PUSH
69819: LD_INT 5
69821: NEG
69822: PPUSH
69823: LD_INT 5
69825: PPUSH
69826: CALL_OW 12
69830: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69831: LD_ADDR_OWVAR 31
69835: PUSH
69836: LD_INT 1
69838: PPUSH
69839: LD_INT 3
69841: PPUSH
69842: CALL_OW 12
69846: PUSH
69847: LD_INT 1
69849: PPUSH
69850: LD_INT 3
69852: PPUSH
69853: CALL_OW 12
69857: PUSH
69858: LD_INT 0
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: ST_TO_ADDR
// animal := CreateHuman ;
69870: LD_ADDR_VAR 0 12
69874: PUSH
69875: CALL_OW 44
69879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69880: LD_VAR 0 12
69884: PPUSH
69885: LD_VAR 0 8
69889: PPUSH
69890: LD_INT 0
69892: PPUSH
69893: CALL 71732 0 3
// end ;
69897: GO 69795
69899: POP
69900: POP
// if enchidnas then
69901: LD_VAR 0 4
69905: IFFALSE 69972
// for i = 1 to enchidnas do
69907: LD_ADDR_VAR 0 11
69911: PUSH
69912: DOUBLE
69913: LD_INT 1
69915: DEC
69916: ST_TO_ADDR
69917: LD_VAR 0 4
69921: PUSH
69922: FOR_TO
69923: IFFALSE 69970
// begin hc_class = 13 ;
69925: LD_ADDR_OWVAR 28
69929: PUSH
69930: LD_INT 13
69932: ST_TO_ADDR
// hc_gallery =  ;
69933: LD_ADDR_OWVAR 33
69937: PUSH
69938: LD_STRING 
69940: ST_TO_ADDR
// animal := CreateHuman ;
69941: LD_ADDR_VAR 0 12
69945: PUSH
69946: CALL_OW 44
69950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69951: LD_VAR 0 12
69955: PPUSH
69956: LD_VAR 0 8
69960: PPUSH
69961: LD_INT 0
69963: PPUSH
69964: CALL 71732 0 3
// end ;
69968: GO 69922
69970: POP
69971: POP
// if fishes then
69972: LD_VAR 0 7
69976: IFFALSE 70043
// for i = 1 to fishes do
69978: LD_ADDR_VAR 0 11
69982: PUSH
69983: DOUBLE
69984: LD_INT 1
69986: DEC
69987: ST_TO_ADDR
69988: LD_VAR 0 7
69992: PUSH
69993: FOR_TO
69994: IFFALSE 70041
// begin hc_class = 20 ;
69996: LD_ADDR_OWVAR 28
70000: PUSH
70001: LD_INT 20
70003: ST_TO_ADDR
// hc_gallery =  ;
70004: LD_ADDR_OWVAR 33
70008: PUSH
70009: LD_STRING 
70011: ST_TO_ADDR
// animal := CreateHuman ;
70012: LD_ADDR_VAR 0 12
70016: PUSH
70017: CALL_OW 44
70021: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70022: LD_VAR 0 12
70026: PPUSH
70027: LD_VAR 0 9
70031: PPUSH
70032: LD_INT 0
70034: PPUSH
70035: CALL 71732 0 3
// end ;
70039: GO 69993
70041: POP
70042: POP
// end ;
70043: LD_VAR 0 10
70047: RET
// export function WantHeal ( sci , unit ) ; begin
70048: LD_INT 0
70050: PPUSH
// if GetTaskList ( sci ) > 0 then
70051: LD_VAR 0 1
70055: PPUSH
70056: CALL_OW 437
70060: PUSH
70061: LD_INT 0
70063: GREATER
70064: IFFALSE 70134
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70066: LD_VAR 0 1
70070: PPUSH
70071: CALL_OW 437
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PUSH
70080: LD_INT 1
70082: ARRAY
70083: PUSH
70084: LD_STRING l
70086: EQUAL
70087: PUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL_OW 437
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PUSH
70102: LD_INT 4
70104: ARRAY
70105: PUSH
70106: LD_VAR 0 2
70110: EQUAL
70111: AND
70112: IFFALSE 70124
// result := true else
70114: LD_ADDR_VAR 0 3
70118: PUSH
70119: LD_INT 1
70121: ST_TO_ADDR
70122: GO 70132
// result := false ;
70124: LD_ADDR_VAR 0 3
70128: PUSH
70129: LD_INT 0
70131: ST_TO_ADDR
// end else
70132: GO 70142
// result := false ;
70134: LD_ADDR_VAR 0 3
70138: PUSH
70139: LD_INT 0
70141: ST_TO_ADDR
// end ;
70142: LD_VAR 0 3
70146: RET
// export function HealTarget ( sci ) ; begin
70147: LD_INT 0
70149: PPUSH
// if not sci then
70150: LD_VAR 0 1
70154: NOT
70155: IFFALSE 70159
// exit ;
70157: GO 70224
// result := 0 ;
70159: LD_ADDR_VAR 0 2
70163: PUSH
70164: LD_INT 0
70166: ST_TO_ADDR
// if GetTaskList ( sci ) then
70167: LD_VAR 0 1
70171: PPUSH
70172: CALL_OW 437
70176: IFFALSE 70224
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70178: LD_VAR 0 1
70182: PPUSH
70183: CALL_OW 437
70187: PUSH
70188: LD_INT 1
70190: ARRAY
70191: PUSH
70192: LD_INT 1
70194: ARRAY
70195: PUSH
70196: LD_STRING l
70198: EQUAL
70199: IFFALSE 70224
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70201: LD_ADDR_VAR 0 2
70205: PUSH
70206: LD_VAR 0 1
70210: PPUSH
70211: CALL_OW 437
70215: PUSH
70216: LD_INT 1
70218: ARRAY
70219: PUSH
70220: LD_INT 4
70222: ARRAY
70223: ST_TO_ADDR
// end ;
70224: LD_VAR 0 2
70228: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70229: LD_INT 0
70231: PPUSH
70232: PPUSH
70233: PPUSH
70234: PPUSH
// if not base_units then
70235: LD_VAR 0 1
70239: NOT
70240: IFFALSE 70244
// exit ;
70242: GO 70331
// result := false ;
70244: LD_ADDR_VAR 0 2
70248: PUSH
70249: LD_INT 0
70251: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70252: LD_ADDR_VAR 0 5
70256: PUSH
70257: LD_VAR 0 1
70261: PPUSH
70262: LD_INT 21
70264: PUSH
70265: LD_INT 3
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PPUSH
70272: CALL_OW 72
70276: ST_TO_ADDR
// if not tmp then
70277: LD_VAR 0 5
70281: NOT
70282: IFFALSE 70286
// exit ;
70284: GO 70331
// for i in tmp do
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_VAR 0 5
70295: PUSH
70296: FOR_IN
70297: IFFALSE 70329
// begin result := EnemyInRange ( i , 22 ) ;
70299: LD_ADDR_VAR 0 2
70303: PUSH
70304: LD_VAR 0 3
70308: PPUSH
70309: LD_INT 22
70311: PPUSH
70312: CALL 68567 0 2
70316: ST_TO_ADDR
// if result then
70317: LD_VAR 0 2
70321: IFFALSE 70327
// exit ;
70323: POP
70324: POP
70325: GO 70331
// end ;
70327: GO 70296
70329: POP
70330: POP
// end ;
70331: LD_VAR 0 2
70335: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70336: LD_INT 0
70338: PPUSH
70339: PPUSH
// if not units then
70340: LD_VAR 0 1
70344: NOT
70345: IFFALSE 70349
// exit ;
70347: GO 70419
// result := [ ] ;
70349: LD_ADDR_VAR 0 3
70353: PUSH
70354: EMPTY
70355: ST_TO_ADDR
// for i in units do
70356: LD_ADDR_VAR 0 4
70360: PUSH
70361: LD_VAR 0 1
70365: PUSH
70366: FOR_IN
70367: IFFALSE 70417
// if GetTag ( i ) = tag then
70369: LD_VAR 0 4
70373: PPUSH
70374: CALL_OW 110
70378: PUSH
70379: LD_VAR 0 2
70383: EQUAL
70384: IFFALSE 70415
// result := Insert ( result , result + 1 , i ) ;
70386: LD_ADDR_VAR 0 3
70390: PUSH
70391: LD_VAR 0 3
70395: PPUSH
70396: LD_VAR 0 3
70400: PUSH
70401: LD_INT 1
70403: PLUS
70404: PPUSH
70405: LD_VAR 0 4
70409: PPUSH
70410: CALL_OW 2
70414: ST_TO_ADDR
70415: GO 70366
70417: POP
70418: POP
// end ;
70419: LD_VAR 0 3
70423: RET
// export function IsDriver ( un ) ; begin
70424: LD_INT 0
70426: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: LD_VAR 0 1
70436: PUSH
70437: LD_INT 55
70439: PUSH
70440: EMPTY
70441: LIST
70442: PPUSH
70443: CALL_OW 69
70447: IN
70448: ST_TO_ADDR
// end ;
70449: LD_VAR 0 2
70453: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70454: LD_INT 0
70456: PPUSH
70457: PPUSH
// list := [ ] ;
70458: LD_ADDR_VAR 0 5
70462: PUSH
70463: EMPTY
70464: ST_TO_ADDR
// case d of 0 :
70465: LD_VAR 0 3
70469: PUSH
70470: LD_INT 0
70472: DOUBLE
70473: EQUAL
70474: IFTRUE 70478
70476: GO 70611
70478: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70479: LD_ADDR_VAR 0 5
70483: PUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_INT 4
70491: MINUS
70492: PUSH
70493: LD_VAR 0 2
70497: PUSH
70498: LD_INT 4
70500: MINUS
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: LIST
70509: PUSH
70510: LD_VAR 0 1
70514: PUSH
70515: LD_INT 3
70517: MINUS
70518: PUSH
70519: LD_VAR 0 2
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: LIST
70531: PUSH
70532: LD_VAR 0 1
70536: PUSH
70537: LD_INT 4
70539: PLUS
70540: PUSH
70541: LD_VAR 0 2
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: PUSH
70554: LD_VAR 0 1
70558: PUSH
70559: LD_INT 3
70561: PLUS
70562: PUSH
70563: LD_VAR 0 2
70567: PUSH
70568: LD_INT 3
70570: PLUS
70571: PUSH
70572: LD_INT 5
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: PUSH
70580: LD_VAR 0 1
70584: PUSH
70585: LD_VAR 0 2
70589: PUSH
70590: LD_INT 4
70592: PLUS
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: ST_TO_ADDR
// end ; 1 :
70609: GO 71309
70611: LD_INT 1
70613: DOUBLE
70614: EQUAL
70615: IFTRUE 70619
70617: GO 70752
70619: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70620: LD_ADDR_VAR 0 5
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_VAR 0 2
70634: PUSH
70635: LD_INT 4
70637: MINUS
70638: PUSH
70639: LD_INT 3
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: LIST
70646: PUSH
70647: LD_VAR 0 1
70651: PUSH
70652: LD_INT 3
70654: MINUS
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 3
70663: MINUS
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: LIST
70672: PUSH
70673: LD_VAR 0 1
70677: PUSH
70678: LD_INT 4
70680: MINUS
70681: PUSH
70682: LD_VAR 0 2
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: LD_VAR 0 1
70699: PUSH
70700: LD_VAR 0 2
70704: PUSH
70705: LD_INT 3
70707: PLUS
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: PUSH
70717: LD_VAR 0 1
70721: PUSH
70722: LD_INT 4
70724: PLUS
70725: PUSH
70726: LD_VAR 0 2
70730: PUSH
70731: LD_INT 4
70733: PLUS
70734: PUSH
70735: LD_INT 5
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: ST_TO_ADDR
// end ; 2 :
70750: GO 71309
70752: LD_INT 2
70754: DOUBLE
70755: EQUAL
70756: IFTRUE 70760
70758: GO 70889
70760: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70761: LD_ADDR_VAR 0 5
70765: PUSH
70766: LD_VAR 0 1
70770: PUSH
70771: LD_VAR 0 2
70775: PUSH
70776: LD_INT 3
70778: MINUS
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: PUSH
70788: LD_VAR 0 1
70792: PUSH
70793: LD_INT 4
70795: PLUS
70796: PUSH
70797: LD_VAR 0 2
70801: PUSH
70802: LD_INT 4
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: PUSH
70810: LD_VAR 0 1
70814: PUSH
70815: LD_VAR 0 2
70819: PUSH
70820: LD_INT 4
70822: PLUS
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: PUSH
70832: LD_VAR 0 1
70836: PUSH
70837: LD_INT 3
70839: MINUS
70840: PUSH
70841: LD_VAR 0 2
70845: PUSH
70846: LD_INT 1
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: PUSH
70854: LD_VAR 0 1
70858: PUSH
70859: LD_INT 4
70861: MINUS
70862: PUSH
70863: LD_VAR 0 2
70867: PUSH
70868: LD_INT 4
70870: MINUS
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// end ; 3 :
70887: GO 71309
70889: LD_INT 3
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70897
70895: GO 71030
70897: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_VAR 0 1
70907: PUSH
70908: LD_INT 3
70910: PLUS
70911: PUSH
70912: LD_VAR 0 2
70916: PUSH
70917: LD_INT 4
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: LIST
70924: PUSH
70925: LD_VAR 0 1
70929: PUSH
70930: LD_INT 4
70932: PLUS
70933: PUSH
70934: LD_VAR 0 2
70938: PUSH
70939: LD_INT 4
70941: PLUS
70942: PUSH
70943: LD_INT 5
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: LIST
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_INT 4
70958: MINUS
70959: PUSH
70960: LD_VAR 0 2
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: LIST
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_VAR 0 2
70982: PUSH
70983: LD_INT 4
70985: MINUS
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 3
71002: MINUS
71003: PUSH
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 3
71011: MINUS
71012: PUSH
71013: LD_INT 2
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: ST_TO_ADDR
// end ; 4 :
71028: GO 71309
71030: LD_INT 4
71032: DOUBLE
71033: EQUAL
71034: IFTRUE 71038
71036: GO 71171
71038: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71039: LD_ADDR_VAR 0 5
71043: PUSH
71044: LD_VAR 0 1
71048: PUSH
71049: LD_VAR 0 2
71053: PUSH
71054: LD_INT 4
71056: PLUS
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: LIST
71065: PUSH
71066: LD_VAR 0 1
71070: PUSH
71071: LD_INT 3
71073: PLUS
71074: PUSH
71075: LD_VAR 0 2
71079: PUSH
71080: LD_INT 3
71082: PLUS
71083: PUSH
71084: LD_INT 5
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 4
71099: PLUS
71100: PUSH
71101: LD_VAR 0 2
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_VAR 0 2
71123: PUSH
71124: LD_INT 3
71126: MINUS
71127: PUSH
71128: LD_INT 3
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 1
71140: PUSH
71141: LD_INT 4
71143: MINUS
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 4
71152: MINUS
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: ST_TO_ADDR
// end ; 5 :
71169: GO 71309
71171: LD_INT 5
71173: DOUBLE
71174: EQUAL
71175: IFTRUE 71179
71177: GO 71308
71179: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71180: LD_ADDR_VAR 0 5
71184: PUSH
71185: LD_VAR 0 1
71189: PUSH
71190: LD_INT 4
71192: MINUS
71193: PUSH
71194: LD_VAR 0 2
71198: PUSH
71199: LD_INT 1
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: LIST
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: LD_VAR 0 2
71216: PUSH
71217: LD_INT 4
71219: MINUS
71220: PUSH
71221: LD_INT 3
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: LIST
71228: PUSH
71229: LD_VAR 0 1
71233: PUSH
71234: LD_INT 4
71236: PLUS
71237: PUSH
71238: LD_VAR 0 2
71242: PUSH
71243: LD_INT 4
71245: PLUS
71246: PUSH
71247: LD_INT 5
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_INT 3
71262: PLUS
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: LD_INT 4
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: LD_VAR 0 2
71286: PUSH
71287: LD_INT 3
71289: PLUS
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: ST_TO_ADDR
// end ; end ;
71306: GO 71309
71308: POP
// result := list ;
71309: LD_ADDR_VAR 0 4
71313: PUSH
71314: LD_VAR 0 5
71318: ST_TO_ADDR
// end ;
71319: LD_VAR 0 4
71323: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71324: LD_INT 0
71326: PPUSH
71327: PPUSH
71328: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71329: LD_VAR 0 1
71333: NOT
71334: PUSH
71335: LD_VAR 0 2
71339: PUSH
71340: LD_INT 1
71342: PUSH
71343: LD_INT 2
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: IN
71358: NOT
71359: OR
71360: IFFALSE 71364
// exit ;
71362: GO 71456
// tmp := [ ] ;
71364: LD_ADDR_VAR 0 5
71368: PUSH
71369: EMPTY
71370: ST_TO_ADDR
// for i in units do
71371: LD_ADDR_VAR 0 4
71375: PUSH
71376: LD_VAR 0 1
71380: PUSH
71381: FOR_IN
71382: IFFALSE 71425
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71384: LD_ADDR_VAR 0 5
71388: PUSH
71389: LD_VAR 0 5
71393: PPUSH
71394: LD_VAR 0 5
71398: PUSH
71399: LD_INT 1
71401: PLUS
71402: PPUSH
71403: LD_VAR 0 4
71407: PPUSH
71408: LD_VAR 0 2
71412: PPUSH
71413: CALL_OW 259
71417: PPUSH
71418: CALL_OW 2
71422: ST_TO_ADDR
71423: GO 71381
71425: POP
71426: POP
// if not tmp then
71427: LD_VAR 0 5
71431: NOT
71432: IFFALSE 71436
// exit ;
71434: GO 71456
// result := SortListByListDesc ( units , tmp ) ;
71436: LD_ADDR_VAR 0 3
71440: PUSH
71441: LD_VAR 0 1
71445: PPUSH
71446: LD_VAR 0 5
71450: PPUSH
71451: CALL_OW 77
71455: ST_TO_ADDR
// end ;
71456: LD_VAR 0 3
71460: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71461: LD_INT 0
71463: PPUSH
71464: PPUSH
71465: PPUSH
// result := false ;
71466: LD_ADDR_VAR 0 3
71470: PUSH
71471: LD_INT 0
71473: ST_TO_ADDR
// x := GetX ( building ) ;
71474: LD_ADDR_VAR 0 4
71478: PUSH
71479: LD_VAR 0 2
71483: PPUSH
71484: CALL_OW 250
71488: ST_TO_ADDR
// y := GetY ( building ) ;
71489: LD_ADDR_VAR 0 5
71493: PUSH
71494: LD_VAR 0 2
71498: PPUSH
71499: CALL_OW 251
71503: ST_TO_ADDR
// if not building or not x or not y then
71504: LD_VAR 0 2
71508: NOT
71509: PUSH
71510: LD_VAR 0 4
71514: NOT
71515: OR
71516: PUSH
71517: LD_VAR 0 5
71521: NOT
71522: OR
71523: IFFALSE 71527
// exit ;
71525: GO 71619
// if GetTaskList ( unit ) then
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 437
71536: IFFALSE 71619
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71538: LD_STRING e
71540: PUSH
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL_OW 437
71550: PUSH
71551: LD_INT 1
71553: ARRAY
71554: PUSH
71555: LD_INT 1
71557: ARRAY
71558: EQUAL
71559: PUSH
71560: LD_VAR 0 4
71564: PUSH
71565: LD_VAR 0 1
71569: PPUSH
71570: CALL_OW 437
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: PUSH
71579: LD_INT 2
71581: ARRAY
71582: EQUAL
71583: AND
71584: PUSH
71585: LD_VAR 0 5
71589: PUSH
71590: LD_VAR 0 1
71594: PPUSH
71595: CALL_OW 437
71599: PUSH
71600: LD_INT 1
71602: ARRAY
71603: PUSH
71604: LD_INT 3
71606: ARRAY
71607: EQUAL
71608: AND
71609: IFFALSE 71619
// result := true end ;
71611: LD_ADDR_VAR 0 3
71615: PUSH
71616: LD_INT 1
71618: ST_TO_ADDR
// end ;
71619: LD_VAR 0 3
71623: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71624: LD_INT 0
71626: PPUSH
// result := false ;
71627: LD_ADDR_VAR 0 4
71631: PUSH
71632: LD_INT 0
71634: ST_TO_ADDR
// if GetTaskList ( unit ) then
71635: LD_VAR 0 1
71639: PPUSH
71640: CALL_OW 437
71644: IFFALSE 71727
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71646: LD_STRING M
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 437
71658: PUSH
71659: LD_INT 1
71661: ARRAY
71662: PUSH
71663: LD_INT 1
71665: ARRAY
71666: EQUAL
71667: PUSH
71668: LD_VAR 0 2
71672: PUSH
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 437
71682: PUSH
71683: LD_INT 1
71685: ARRAY
71686: PUSH
71687: LD_INT 2
71689: ARRAY
71690: EQUAL
71691: AND
71692: PUSH
71693: LD_VAR 0 3
71697: PUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: CALL_OW 437
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PUSH
71712: LD_INT 3
71714: ARRAY
71715: EQUAL
71716: AND
71717: IFFALSE 71727
// result := true ;
71719: LD_ADDR_VAR 0 4
71723: PUSH
71724: LD_INT 1
71726: ST_TO_ADDR
// end ; end ;
71727: LD_VAR 0 4
71731: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71732: LD_INT 0
71734: PPUSH
71735: PPUSH
71736: PPUSH
71737: PPUSH
// if not unit or not area then
71738: LD_VAR 0 1
71742: NOT
71743: PUSH
71744: LD_VAR 0 2
71748: NOT
71749: OR
71750: IFFALSE 71754
// exit ;
71752: GO 71918
// tmp := AreaToList ( area , i ) ;
71754: LD_ADDR_VAR 0 6
71758: PUSH
71759: LD_VAR 0 2
71763: PPUSH
71764: LD_VAR 0 5
71768: PPUSH
71769: CALL_OW 517
71773: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71774: LD_ADDR_VAR 0 5
71778: PUSH
71779: DOUBLE
71780: LD_INT 1
71782: DEC
71783: ST_TO_ADDR
71784: LD_VAR 0 6
71788: PUSH
71789: LD_INT 1
71791: ARRAY
71792: PUSH
71793: FOR_TO
71794: IFFALSE 71916
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71796: LD_ADDR_VAR 0 7
71800: PUSH
71801: LD_VAR 0 6
71805: PUSH
71806: LD_INT 1
71808: ARRAY
71809: PUSH
71810: LD_VAR 0 5
71814: ARRAY
71815: PUSH
71816: LD_VAR 0 6
71820: PUSH
71821: LD_INT 2
71823: ARRAY
71824: PUSH
71825: LD_VAR 0 5
71829: ARRAY
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71835: LD_VAR 0 7
71839: PUSH
71840: LD_INT 1
71842: ARRAY
71843: PPUSH
71844: LD_VAR 0 7
71848: PUSH
71849: LD_INT 2
71851: ARRAY
71852: PPUSH
71853: CALL_OW 428
71857: PUSH
71858: LD_INT 0
71860: EQUAL
71861: IFFALSE 71914
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71863: LD_VAR 0 1
71867: PPUSH
71868: LD_VAR 0 7
71872: PUSH
71873: LD_INT 1
71875: ARRAY
71876: PPUSH
71877: LD_VAR 0 7
71881: PUSH
71882: LD_INT 2
71884: ARRAY
71885: PPUSH
71886: LD_VAR 0 3
71890: PPUSH
71891: CALL_OW 48
// result := IsPlaced ( unit ) ;
71895: LD_ADDR_VAR 0 4
71899: PUSH
71900: LD_VAR 0 1
71904: PPUSH
71905: CALL_OW 305
71909: ST_TO_ADDR
// exit ;
71910: POP
71911: POP
71912: GO 71918
// end ; end ;
71914: GO 71793
71916: POP
71917: POP
// end ;
71918: LD_VAR 0 4
71922: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71923: LD_INT 0
71925: PPUSH
71926: PPUSH
71927: PPUSH
// if not side or side > 8 then
71928: LD_VAR 0 1
71932: NOT
71933: PUSH
71934: LD_VAR 0 1
71938: PUSH
71939: LD_INT 8
71941: GREATER
71942: OR
71943: IFFALSE 71947
// exit ;
71945: GO 72134
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71947: LD_ADDR_VAR 0 4
71951: PUSH
71952: LD_INT 22
71954: PUSH
71955: LD_VAR 0 1
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 21
71966: PUSH
71967: LD_INT 3
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PPUSH
71978: CALL_OW 69
71982: ST_TO_ADDR
// if not tmp then
71983: LD_VAR 0 4
71987: NOT
71988: IFFALSE 71992
// exit ;
71990: GO 72134
// enable_addtolog := true ;
71992: LD_ADDR_OWVAR 81
71996: PUSH
71997: LD_INT 1
71999: ST_TO_ADDR
// AddToLog ( [ ) ;
72000: LD_STRING [
72002: PPUSH
72003: CALL_OW 561
// for i in tmp do
72007: LD_ADDR_VAR 0 3
72011: PUSH
72012: LD_VAR 0 4
72016: PUSH
72017: FOR_IN
72018: IFFALSE 72125
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72020: LD_STRING [
72022: PUSH
72023: LD_VAR 0 3
72027: PPUSH
72028: CALL_OW 266
72032: STR
72033: PUSH
72034: LD_STRING , 
72036: STR
72037: PUSH
72038: LD_VAR 0 3
72042: PPUSH
72043: CALL_OW 250
72047: STR
72048: PUSH
72049: LD_STRING , 
72051: STR
72052: PUSH
72053: LD_VAR 0 3
72057: PPUSH
72058: CALL_OW 251
72062: STR
72063: PUSH
72064: LD_STRING , 
72066: STR
72067: PUSH
72068: LD_VAR 0 3
72072: PPUSH
72073: CALL_OW 254
72077: STR
72078: PUSH
72079: LD_STRING , 
72081: STR
72082: PUSH
72083: LD_VAR 0 3
72087: PPUSH
72088: LD_INT 1
72090: PPUSH
72091: CALL_OW 268
72095: STR
72096: PUSH
72097: LD_STRING , 
72099: STR
72100: PUSH
72101: LD_VAR 0 3
72105: PPUSH
72106: LD_INT 2
72108: PPUSH
72109: CALL_OW 268
72113: STR
72114: PUSH
72115: LD_STRING ],
72117: STR
72118: PPUSH
72119: CALL_OW 561
// end ;
72123: GO 72017
72125: POP
72126: POP
// AddToLog ( ]; ) ;
72127: LD_STRING ];
72129: PPUSH
72130: CALL_OW 561
// end ;
72134: LD_VAR 0 2
72138: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72139: LD_INT 0
72141: PPUSH
72142: PPUSH
72143: PPUSH
72144: PPUSH
72145: PPUSH
// if not area or not rate or not max then
72146: LD_VAR 0 1
72150: NOT
72151: PUSH
72152: LD_VAR 0 2
72156: NOT
72157: OR
72158: PUSH
72159: LD_VAR 0 4
72163: NOT
72164: OR
72165: IFFALSE 72169
// exit ;
72167: GO 72361
// while 1 do
72169: LD_INT 1
72171: IFFALSE 72361
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72173: LD_ADDR_VAR 0 9
72177: PUSH
72178: LD_VAR 0 1
72182: PPUSH
72183: LD_INT 1
72185: PPUSH
72186: CALL_OW 287
72190: PUSH
72191: LD_INT 10
72193: MUL
72194: ST_TO_ADDR
// r := rate / 10 ;
72195: LD_ADDR_VAR 0 7
72199: PUSH
72200: LD_VAR 0 2
72204: PUSH
72205: LD_INT 10
72207: DIVREAL
72208: ST_TO_ADDR
// time := 1 1$00 ;
72209: LD_ADDR_VAR 0 8
72213: PUSH
72214: LD_INT 2100
72216: ST_TO_ADDR
// if amount < min then
72217: LD_VAR 0 9
72221: PUSH
72222: LD_VAR 0 3
72226: LESS
72227: IFFALSE 72245
// r := r * 2 else
72229: LD_ADDR_VAR 0 7
72233: PUSH
72234: LD_VAR 0 7
72238: PUSH
72239: LD_INT 2
72241: MUL
72242: ST_TO_ADDR
72243: GO 72271
// if amount > max then
72245: LD_VAR 0 9
72249: PUSH
72250: LD_VAR 0 4
72254: GREATER
72255: IFFALSE 72271
// r := r / 2 ;
72257: LD_ADDR_VAR 0 7
72261: PUSH
72262: LD_VAR 0 7
72266: PUSH
72267: LD_INT 2
72269: DIVREAL
72270: ST_TO_ADDR
// time := time / r ;
72271: LD_ADDR_VAR 0 8
72275: PUSH
72276: LD_VAR 0 8
72280: PUSH
72281: LD_VAR 0 7
72285: DIVREAL
72286: ST_TO_ADDR
// if time < 0 then
72287: LD_VAR 0 8
72291: PUSH
72292: LD_INT 0
72294: LESS
72295: IFFALSE 72312
// time := time * - 1 ;
72297: LD_ADDR_VAR 0 8
72301: PUSH
72302: LD_VAR 0 8
72306: PUSH
72307: LD_INT 1
72309: NEG
72310: MUL
72311: ST_TO_ADDR
// wait ( time ) ;
72312: LD_VAR 0 8
72316: PPUSH
72317: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72321: LD_INT 35
72323: PPUSH
72324: LD_INT 875
72326: PPUSH
72327: CALL_OW 12
72331: PPUSH
72332: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72336: LD_INT 1
72338: PPUSH
72339: LD_INT 5
72341: PPUSH
72342: CALL_OW 12
72346: PPUSH
72347: LD_VAR 0 1
72351: PPUSH
72352: LD_INT 1
72354: PPUSH
72355: CALL_OW 55
// end ;
72359: GO 72169
// end ;
72361: LD_VAR 0 5
72365: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72366: LD_INT 0
72368: PPUSH
72369: PPUSH
72370: PPUSH
72371: PPUSH
72372: PPUSH
72373: PPUSH
72374: PPUSH
72375: PPUSH
// if not turrets or not factories then
72376: LD_VAR 0 1
72380: NOT
72381: PUSH
72382: LD_VAR 0 2
72386: NOT
72387: OR
72388: IFFALSE 72392
// exit ;
72390: GO 72699
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72392: LD_ADDR_VAR 0 10
72396: PUSH
72397: LD_INT 5
72399: PUSH
72400: LD_INT 6
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 2
72409: PUSH
72410: LD_INT 4
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 3
72419: PUSH
72420: LD_INT 5
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 24
72434: PUSH
72435: LD_INT 25
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 23
72444: PUSH
72445: LD_INT 27
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 42
72458: PUSH
72459: LD_INT 43
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 44
72468: PUSH
72469: LD_INT 46
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 45
72478: PUSH
72479: LD_INT 47
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: ST_TO_ADDR
// result := [ ] ;
72496: LD_ADDR_VAR 0 3
72500: PUSH
72501: EMPTY
72502: ST_TO_ADDR
// for i in turrets do
72503: LD_ADDR_VAR 0 4
72507: PUSH
72508: LD_VAR 0 1
72512: PUSH
72513: FOR_IN
72514: IFFALSE 72697
// begin nat := GetNation ( i ) ;
72516: LD_ADDR_VAR 0 7
72520: PUSH
72521: LD_VAR 0 4
72525: PPUSH
72526: CALL_OW 248
72530: ST_TO_ADDR
// weapon := 0 ;
72531: LD_ADDR_VAR 0 8
72535: PUSH
72536: LD_INT 0
72538: ST_TO_ADDR
// if not nat then
72539: LD_VAR 0 7
72543: NOT
72544: IFFALSE 72548
// continue ;
72546: GO 72513
// for j in list [ nat ] do
72548: LD_ADDR_VAR 0 5
72552: PUSH
72553: LD_VAR 0 10
72557: PUSH
72558: LD_VAR 0 7
72562: ARRAY
72563: PUSH
72564: FOR_IN
72565: IFFALSE 72606
// if GetBWeapon ( i ) = j [ 1 ] then
72567: LD_VAR 0 4
72571: PPUSH
72572: CALL_OW 269
72576: PUSH
72577: LD_VAR 0 5
72581: PUSH
72582: LD_INT 1
72584: ARRAY
72585: EQUAL
72586: IFFALSE 72604
// begin weapon := j [ 2 ] ;
72588: LD_ADDR_VAR 0 8
72592: PUSH
72593: LD_VAR 0 5
72597: PUSH
72598: LD_INT 2
72600: ARRAY
72601: ST_TO_ADDR
// break ;
72602: GO 72606
// end ;
72604: GO 72564
72606: POP
72607: POP
// if not weapon then
72608: LD_VAR 0 8
72612: NOT
72613: IFFALSE 72617
// continue ;
72615: GO 72513
// for k in factories do
72617: LD_ADDR_VAR 0 6
72621: PUSH
72622: LD_VAR 0 2
72626: PUSH
72627: FOR_IN
72628: IFFALSE 72693
// begin weapons := AvailableWeaponList ( k ) ;
72630: LD_ADDR_VAR 0 9
72634: PUSH
72635: LD_VAR 0 6
72639: PPUSH
72640: CALL_OW 478
72644: ST_TO_ADDR
// if not weapons then
72645: LD_VAR 0 9
72649: NOT
72650: IFFALSE 72654
// continue ;
72652: GO 72627
// if weapon in weapons then
72654: LD_VAR 0 8
72658: PUSH
72659: LD_VAR 0 9
72663: IN
72664: IFFALSE 72691
// begin result := [ i , weapon ] ;
72666: LD_ADDR_VAR 0 3
72670: PUSH
72671: LD_VAR 0 4
72675: PUSH
72676: LD_VAR 0 8
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: ST_TO_ADDR
// exit ;
72685: POP
72686: POP
72687: POP
72688: POP
72689: GO 72699
// end ; end ;
72691: GO 72627
72693: POP
72694: POP
// end ;
72695: GO 72513
72697: POP
72698: POP
// end ;
72699: LD_VAR 0 3
72703: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72704: LD_INT 0
72706: PPUSH
// if not side or side > 8 then
72707: LD_VAR 0 3
72711: NOT
72712: PUSH
72713: LD_VAR 0 3
72717: PUSH
72718: LD_INT 8
72720: GREATER
72721: OR
72722: IFFALSE 72726
// exit ;
72724: GO 72785
// if not range then
72726: LD_VAR 0 4
72730: NOT
72731: IFFALSE 72742
// range := - 12 ;
72733: LD_ADDR_VAR 0 4
72737: PUSH
72738: LD_INT 12
72740: NEG
72741: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72742: LD_VAR 0 1
72746: PPUSH
72747: LD_VAR 0 2
72751: PPUSH
72752: LD_VAR 0 3
72756: PPUSH
72757: LD_VAR 0 4
72761: PPUSH
72762: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72766: LD_VAR 0 1
72770: PPUSH
72771: LD_VAR 0 2
72775: PPUSH
72776: LD_VAR 0 3
72780: PPUSH
72781: CALL_OW 331
// end ;
72785: LD_VAR 0 5
72789: RET
// export function Video ( mode ) ; begin
72790: LD_INT 0
72792: PPUSH
// ingame_video = mode ;
72793: LD_ADDR_OWVAR 52
72797: PUSH
72798: LD_VAR 0 1
72802: ST_TO_ADDR
// interface_hidden = mode ;
72803: LD_ADDR_OWVAR 54
72807: PUSH
72808: LD_VAR 0 1
72812: ST_TO_ADDR
// end ;
72813: LD_VAR 0 2
72817: RET
// export function Join ( array , element ) ; begin
72818: LD_INT 0
72820: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72821: LD_ADDR_VAR 0 3
72825: PUSH
72826: LD_VAR 0 1
72830: PPUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_INT 1
72838: PLUS
72839: PPUSH
72840: LD_VAR 0 2
72844: PPUSH
72845: CALL_OW 1
72849: ST_TO_ADDR
// end ;
72850: LD_VAR 0 3
72854: RET
// export function JoinUnion ( array , element ) ; begin
72855: LD_INT 0
72857: PPUSH
// result := array union element ;
72858: LD_ADDR_VAR 0 3
72862: PUSH
72863: LD_VAR 0 1
72867: PUSH
72868: LD_VAR 0 2
72872: UNION
72873: ST_TO_ADDR
// end ;
72874: LD_VAR 0 3
72878: RET
// export function GetBehemoths ( side ) ; begin
72879: LD_INT 0
72881: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72882: LD_ADDR_VAR 0 2
72886: PUSH
72887: LD_INT 22
72889: PUSH
72890: LD_VAR 0 1
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 31
72901: PUSH
72902: LD_INT 25
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PPUSH
72913: CALL_OW 69
72917: ST_TO_ADDR
// end ;
72918: LD_VAR 0 2
72922: RET
// export function Shuffle ( array ) ; var i , index ; begin
72923: LD_INT 0
72925: PPUSH
72926: PPUSH
72927: PPUSH
// result := [ ] ;
72928: LD_ADDR_VAR 0 2
72932: PUSH
72933: EMPTY
72934: ST_TO_ADDR
// if not array then
72935: LD_VAR 0 1
72939: NOT
72940: IFFALSE 72944
// exit ;
72942: GO 73043
// Randomize ;
72944: CALL_OW 10
// for i = array downto 1 do
72948: LD_ADDR_VAR 0 3
72952: PUSH
72953: DOUBLE
72954: LD_VAR 0 1
72958: INC
72959: ST_TO_ADDR
72960: LD_INT 1
72962: PUSH
72963: FOR_DOWNTO
72964: IFFALSE 73041
// begin index := rand ( 1 , array ) ;
72966: LD_ADDR_VAR 0 4
72970: PUSH
72971: LD_INT 1
72973: PPUSH
72974: LD_VAR 0 1
72978: PPUSH
72979: CALL_OW 12
72983: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72984: LD_ADDR_VAR 0 2
72988: PUSH
72989: LD_VAR 0 2
72993: PPUSH
72994: LD_VAR 0 2
72998: PUSH
72999: LD_INT 1
73001: PLUS
73002: PPUSH
73003: LD_VAR 0 1
73007: PUSH
73008: LD_VAR 0 4
73012: ARRAY
73013: PPUSH
73014: CALL_OW 2
73018: ST_TO_ADDR
// array := Delete ( array , index ) ;
73019: LD_ADDR_VAR 0 1
73023: PUSH
73024: LD_VAR 0 1
73028: PPUSH
73029: LD_VAR 0 4
73033: PPUSH
73034: CALL_OW 3
73038: ST_TO_ADDR
// end ;
73039: GO 72963
73041: POP
73042: POP
// end ;
73043: LD_VAR 0 2
73047: RET
// export function GetBaseMaterials ( base ) ; begin
73048: LD_INT 0
73050: PPUSH
// result := [ 0 , 0 , 0 ] ;
73051: LD_ADDR_VAR 0 2
73055: PUSH
73056: LD_INT 0
73058: PUSH
73059: LD_INT 0
73061: PUSH
73062: LD_INT 0
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: ST_TO_ADDR
// if not base then
73070: LD_VAR 0 1
73074: NOT
73075: IFFALSE 73079
// exit ;
73077: GO 73128
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73079: LD_ADDR_VAR 0 2
73083: PUSH
73084: LD_VAR 0 1
73088: PPUSH
73089: LD_INT 1
73091: PPUSH
73092: CALL_OW 275
73096: PUSH
73097: LD_VAR 0 1
73101: PPUSH
73102: LD_INT 2
73104: PPUSH
73105: CALL_OW 275
73109: PUSH
73110: LD_VAR 0 1
73114: PPUSH
73115: LD_INT 3
73117: PPUSH
73118: CALL_OW 275
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: LIST
73127: ST_TO_ADDR
// end ;
73128: LD_VAR 0 2
73132: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73133: LD_INT 0
73135: PPUSH
73136: PPUSH
// result := array ;
73137: LD_ADDR_VAR 0 3
73141: PUSH
73142: LD_VAR 0 1
73146: ST_TO_ADDR
// if size > 0 then
73147: LD_VAR 0 2
73151: PUSH
73152: LD_INT 0
73154: GREATER
73155: IFFALSE 73201
// for i := array downto size do
73157: LD_ADDR_VAR 0 4
73161: PUSH
73162: DOUBLE
73163: LD_VAR 0 1
73167: INC
73168: ST_TO_ADDR
73169: LD_VAR 0 2
73173: PUSH
73174: FOR_DOWNTO
73175: IFFALSE 73199
// result := Delete ( result , result ) ;
73177: LD_ADDR_VAR 0 3
73181: PUSH
73182: LD_VAR 0 3
73186: PPUSH
73187: LD_VAR 0 3
73191: PPUSH
73192: CALL_OW 3
73196: ST_TO_ADDR
73197: GO 73174
73199: POP
73200: POP
// end ;
73201: LD_VAR 0 3
73205: RET
// export function ComExit ( unit ) ; var tmp ; begin
73206: LD_INT 0
73208: PPUSH
73209: PPUSH
// if not IsInUnit ( unit ) then
73210: LD_VAR 0 1
73214: PPUSH
73215: CALL_OW 310
73219: NOT
73220: IFFALSE 73224
// exit ;
73222: GO 73284
// tmp := IsInUnit ( unit ) ;
73224: LD_ADDR_VAR 0 3
73228: PUSH
73229: LD_VAR 0 1
73233: PPUSH
73234: CALL_OW 310
73238: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73239: LD_VAR 0 3
73243: PPUSH
73244: CALL_OW 247
73248: PUSH
73249: LD_INT 2
73251: EQUAL
73252: IFFALSE 73265
// ComExitVehicle ( unit ) else
73254: LD_VAR 0 1
73258: PPUSH
73259: CALL_OW 121
73263: GO 73274
// ComExitBuilding ( unit ) ;
73265: LD_VAR 0 1
73269: PPUSH
73270: CALL_OW 122
// result := tmp ;
73274: LD_ADDR_VAR 0 2
73278: PUSH
73279: LD_VAR 0 3
73283: ST_TO_ADDR
// end ;
73284: LD_VAR 0 2
73288: RET
// export function ComExitAll ( units ) ; var i ; begin
73289: LD_INT 0
73291: PPUSH
73292: PPUSH
// if not units then
73293: LD_VAR 0 1
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73328
// for i in units do
73302: LD_ADDR_VAR 0 3
73306: PUSH
73307: LD_VAR 0 1
73311: PUSH
73312: FOR_IN
73313: IFFALSE 73326
// ComExit ( i ) ;
73315: LD_VAR 0 3
73319: PPUSH
73320: CALL 73206 0 1
73324: GO 73312
73326: POP
73327: POP
// end ;
73328: LD_VAR 0 2
73332: RET
// export function ResetHc ; begin
73333: LD_INT 0
73335: PPUSH
// InitHc ;
73336: CALL_OW 19
// hc_importance := 0 ;
73340: LD_ADDR_OWVAR 32
73344: PUSH
73345: LD_INT 0
73347: ST_TO_ADDR
// end ;
73348: LD_VAR 0 1
73352: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73353: LD_INT 0
73355: PPUSH
73356: PPUSH
73357: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73358: LD_ADDR_VAR 0 6
73362: PUSH
73363: LD_VAR 0 1
73367: PUSH
73368: LD_VAR 0 3
73372: PLUS
73373: PUSH
73374: LD_INT 2
73376: DIV
73377: ST_TO_ADDR
// if _x < 0 then
73378: LD_VAR 0 6
73382: PUSH
73383: LD_INT 0
73385: LESS
73386: IFFALSE 73403
// _x := _x * - 1 ;
73388: LD_ADDR_VAR 0 6
73392: PUSH
73393: LD_VAR 0 6
73397: PUSH
73398: LD_INT 1
73400: NEG
73401: MUL
73402: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73403: LD_ADDR_VAR 0 7
73407: PUSH
73408: LD_VAR 0 2
73412: PUSH
73413: LD_VAR 0 4
73417: PLUS
73418: PUSH
73419: LD_INT 2
73421: DIV
73422: ST_TO_ADDR
// if _y < 0 then
73423: LD_VAR 0 7
73427: PUSH
73428: LD_INT 0
73430: LESS
73431: IFFALSE 73448
// _y := _y * - 1 ;
73433: LD_ADDR_VAR 0 7
73437: PUSH
73438: LD_VAR 0 7
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: MUL
73447: ST_TO_ADDR
// result := [ _x , _y ] ;
73448: LD_ADDR_VAR 0 5
73452: PUSH
73453: LD_VAR 0 6
73457: PUSH
73458: LD_VAR 0 7
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: ST_TO_ADDR
// end ;
73467: LD_VAR 0 5
73471: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
73477: PPUSH
// task := GetTaskList ( unit ) ;
73478: LD_ADDR_VAR 0 7
73482: PUSH
73483: LD_VAR 0 1
73487: PPUSH
73488: CALL_OW 437
73492: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73493: LD_VAR 0 7
73497: NOT
73498: PUSH
73499: LD_VAR 0 1
73503: PPUSH
73504: LD_VAR 0 2
73508: PPUSH
73509: CALL_OW 308
73513: NOT
73514: AND
73515: IFFALSE 73519
// exit ;
73517: GO 73637
// if IsInArea ( unit , area ) then
73519: LD_VAR 0 1
73523: PPUSH
73524: LD_VAR 0 2
73528: PPUSH
73529: CALL_OW 308
73533: IFFALSE 73551
// begin ComMoveToArea ( unit , goAway ) ;
73535: LD_VAR 0 1
73539: PPUSH
73540: LD_VAR 0 3
73544: PPUSH
73545: CALL_OW 113
// exit ;
73549: GO 73637
// end ; if task [ 1 ] [ 1 ] <> M then
73551: LD_VAR 0 7
73555: PUSH
73556: LD_INT 1
73558: ARRAY
73559: PUSH
73560: LD_INT 1
73562: ARRAY
73563: PUSH
73564: LD_STRING M
73566: NONEQUAL
73567: IFFALSE 73571
// exit ;
73569: GO 73637
// x := task [ 1 ] [ 2 ] ;
73571: LD_ADDR_VAR 0 5
73575: PUSH
73576: LD_VAR 0 7
73580: PUSH
73581: LD_INT 1
73583: ARRAY
73584: PUSH
73585: LD_INT 2
73587: ARRAY
73588: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73589: LD_ADDR_VAR 0 6
73593: PUSH
73594: LD_VAR 0 7
73598: PUSH
73599: LD_INT 1
73601: ARRAY
73602: PUSH
73603: LD_INT 3
73605: ARRAY
73606: ST_TO_ADDR
// if InArea ( x , y , area ) then
73607: LD_VAR 0 5
73611: PPUSH
73612: LD_VAR 0 6
73616: PPUSH
73617: LD_VAR 0 2
73621: PPUSH
73622: CALL_OW 309
73626: IFFALSE 73637
// ComStop ( unit ) ;
73628: LD_VAR 0 1
73632: PPUSH
73633: CALL_OW 141
// end ;
73637: LD_VAR 0 4
73641: RET
// export function Abs ( value ) ; begin
73642: LD_INT 0
73644: PPUSH
// result := value ;
73645: LD_ADDR_VAR 0 2
73649: PUSH
73650: LD_VAR 0 1
73654: ST_TO_ADDR
// if value < 0 then
73655: LD_VAR 0 1
73659: PUSH
73660: LD_INT 0
73662: LESS
73663: IFFALSE 73680
// result := value * - 1 ;
73665: LD_ADDR_VAR 0 2
73669: PUSH
73670: LD_VAR 0 1
73674: PUSH
73675: LD_INT 1
73677: NEG
73678: MUL
73679: ST_TO_ADDR
// end ;
73680: LD_VAR 0 2
73684: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73685: LD_INT 0
73687: PPUSH
73688: PPUSH
73689: PPUSH
73690: PPUSH
73691: PPUSH
73692: PPUSH
73693: PPUSH
73694: PPUSH
// if not unit or not building then
73695: LD_VAR 0 1
73699: NOT
73700: PUSH
73701: LD_VAR 0 2
73705: NOT
73706: OR
73707: IFFALSE 73711
// exit ;
73709: GO 73937
// x := GetX ( building ) ;
73711: LD_ADDR_VAR 0 4
73715: PUSH
73716: LD_VAR 0 2
73720: PPUSH
73721: CALL_OW 250
73725: ST_TO_ADDR
// y := GetY ( building ) ;
73726: LD_ADDR_VAR 0 6
73730: PUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: CALL_OW 251
73740: ST_TO_ADDR
// d := GetDir ( building ) ;
73741: LD_ADDR_VAR 0 8
73745: PUSH
73746: LD_VAR 0 2
73750: PPUSH
73751: CALL_OW 254
73755: ST_TO_ADDR
// r := 4 ;
73756: LD_ADDR_VAR 0 9
73760: PUSH
73761: LD_INT 4
73763: ST_TO_ADDR
// for i := 1 to 5 do
73764: LD_ADDR_VAR 0 10
73768: PUSH
73769: DOUBLE
73770: LD_INT 1
73772: DEC
73773: ST_TO_ADDR
73774: LD_INT 5
73776: PUSH
73777: FOR_TO
73778: IFFALSE 73935
// begin _x := ShiftX ( x , d , r + i ) ;
73780: LD_ADDR_VAR 0 5
73784: PUSH
73785: LD_VAR 0 4
73789: PPUSH
73790: LD_VAR 0 8
73794: PPUSH
73795: LD_VAR 0 9
73799: PUSH
73800: LD_VAR 0 10
73804: PLUS
73805: PPUSH
73806: CALL_OW 272
73810: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73811: LD_ADDR_VAR 0 7
73815: PUSH
73816: LD_VAR 0 6
73820: PPUSH
73821: LD_VAR 0 8
73825: PPUSH
73826: LD_VAR 0 9
73830: PUSH
73831: LD_VAR 0 10
73835: PLUS
73836: PPUSH
73837: CALL_OW 273
73841: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73842: LD_VAR 0 5
73846: PPUSH
73847: LD_VAR 0 7
73851: PPUSH
73852: CALL_OW 488
73856: PUSH
73857: LD_VAR 0 5
73861: PPUSH
73862: LD_VAR 0 7
73866: PPUSH
73867: CALL_OW 428
73871: PPUSH
73872: CALL_OW 247
73876: PUSH
73877: LD_INT 3
73879: PUSH
73880: LD_INT 2
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: IN
73887: NOT
73888: AND
73889: IFFALSE 73933
// begin ComMoveXY ( unit , _x , _y ) ;
73891: LD_VAR 0 1
73895: PPUSH
73896: LD_VAR 0 5
73900: PPUSH
73901: LD_VAR 0 7
73905: PPUSH
73906: CALL_OW 111
// result := [ _x , _y ] ;
73910: LD_ADDR_VAR 0 3
73914: PUSH
73915: LD_VAR 0 5
73919: PUSH
73920: LD_VAR 0 7
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: ST_TO_ADDR
// exit ;
73929: POP
73930: POP
73931: GO 73937
// end ; end ;
73933: GO 73777
73935: POP
73936: POP
// end ;
73937: LD_VAR 0 3
73941: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73942: LD_INT 0
73944: PPUSH
73945: PPUSH
73946: PPUSH
// result := 0 ;
73947: LD_ADDR_VAR 0 3
73951: PUSH
73952: LD_INT 0
73954: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73955: LD_VAR 0 1
73959: PUSH
73960: LD_INT 0
73962: LESS
73963: PUSH
73964: LD_VAR 0 1
73968: PUSH
73969: LD_INT 8
73971: GREATER
73972: OR
73973: PUSH
73974: LD_VAR 0 2
73978: PUSH
73979: LD_INT 0
73981: LESS
73982: OR
73983: PUSH
73984: LD_VAR 0 2
73988: PUSH
73989: LD_INT 8
73991: GREATER
73992: OR
73993: IFFALSE 73997
// exit ;
73995: GO 74072
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73997: LD_ADDR_VAR 0 4
74001: PUSH
74002: LD_INT 22
74004: PUSH
74005: LD_VAR 0 2
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PPUSH
74014: CALL_OW 69
74018: PUSH
74019: FOR_IN
74020: IFFALSE 74070
// begin un := UnitShoot ( i ) ;
74022: LD_ADDR_VAR 0 5
74026: PUSH
74027: LD_VAR 0 4
74031: PPUSH
74032: CALL_OW 504
74036: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74037: LD_VAR 0 5
74041: PPUSH
74042: CALL_OW 255
74046: PUSH
74047: LD_VAR 0 1
74051: EQUAL
74052: IFFALSE 74068
// begin result := un ;
74054: LD_ADDR_VAR 0 3
74058: PUSH
74059: LD_VAR 0 5
74063: ST_TO_ADDR
// exit ;
74064: POP
74065: POP
74066: GO 74072
// end ; end ;
74068: GO 74019
74070: POP
74071: POP
// end ;
74072: LD_VAR 0 3
74076: RET
// export function GetCargoBay ( units ) ; begin
74077: LD_INT 0
74079: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74080: LD_ADDR_VAR 0 2
74084: PUSH
74085: LD_VAR 0 1
74089: PPUSH
74090: LD_INT 2
74092: PUSH
74093: LD_INT 34
74095: PUSH
74096: LD_INT 12
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 34
74105: PUSH
74106: LD_INT 51
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 34
74115: PUSH
74116: LD_INT 32
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 34
74125: PUSH
74126: LD_EXP 49
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: PPUSH
74142: CALL_OW 72
74146: ST_TO_ADDR
// end ; end_of_file
74147: LD_VAR 0 2
74151: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74152: LD_VAR 0 1
74156: PUSH
74157: LD_INT 200
74159: DOUBLE
74160: GREATEREQUAL
74161: IFFALSE 74169
74163: LD_INT 299
74165: DOUBLE
74166: LESSEQUAL
74167: IFTRUE 74171
74169: GO 74203
74171: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74172: LD_VAR 0 1
74176: PPUSH
74177: LD_VAR 0 2
74181: PPUSH
74182: LD_VAR 0 3
74186: PPUSH
74187: LD_VAR 0 4
74191: PPUSH
74192: LD_VAR 0 5
74196: PPUSH
74197: CALL 32613 0 5
74201: GO 74280
74203: LD_INT 300
74205: DOUBLE
74206: GREATEREQUAL
74207: IFFALSE 74215
74209: LD_INT 399
74211: DOUBLE
74212: LESSEQUAL
74213: IFTRUE 74217
74215: GO 74279
74217: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74218: LD_VAR 0 1
74222: PPUSH
74223: LD_VAR 0 2
74227: PPUSH
74228: LD_VAR 0 3
74232: PPUSH
74233: LD_VAR 0 4
74237: PPUSH
74238: LD_VAR 0 5
74242: PPUSH
74243: LD_VAR 0 6
74247: PPUSH
74248: LD_VAR 0 7
74252: PPUSH
74253: LD_VAR 0 8
74257: PPUSH
74258: LD_VAR 0 9
74262: PPUSH
74263: LD_VAR 0 10
74267: PPUSH
74268: LD_VAR 0 11
74272: PPUSH
74273: CALL 30501 0 11
74277: GO 74280
74279: POP
// end ;
74280: PPOPN 11
74282: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74283: LD_VAR 0 1
74287: PPUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 3
74297: PPUSH
74298: LD_VAR 0 4
74302: PPUSH
74303: LD_VAR 0 5
74307: PPUSH
74308: CALL 32595 0 5
// end ; end_of_file
74312: PPOPN 5
74314: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74315: LD_VAR 0 1
74319: PPUSH
74320: LD_VAR 0 2
74324: PPUSH
74325: LD_VAR 0 3
74329: PPUSH
74330: LD_VAR 0 4
74334: PPUSH
74335: LD_VAR 0 5
74339: PPUSH
74340: LD_VAR 0 6
74344: PPUSH
74345: CALL 19309 0 6
// end ;
74349: PPOPN 6
74351: END
