// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 649 0 0
// PrepareArabian ;
  12: CALL 1964 0 0
// PrepareAmerican ;
  16: CALL 4899 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9435 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 20
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 8
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 14
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// attackWave := 1 ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 6
 201: PUSH
 202: LD_INT 9
 204: PUSH
 205: LD_INT 12
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: LD_OWVAR 67
 217: ARRAY
 218: ST_TO_ADDR
// vehCounter := 0 ;
 219: LD_ADDR_EXP 18
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// convoyCounter := 0 ;
 227: LD_ADDR_EXP 19
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// ibrahimInDepot := false ;
 235: LD_ADDR_EXP 21
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimIsFree := false ;
 243: LD_ADDR_EXP 22
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 251: LD_ADDR_EXP 23
 255: PUSH
 256: LD_INT 16
 258: PUSH
 259: LD_INT 15
 261: PUSH
 262: LD_INT 14
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_OWVAR 67
 274: ARRAY
 275: ST_TO_ADDR
// end ; end_of_file
 276: LD_VAR 0 1
 280: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 281: LD_INT 0
 283: PPUSH
 284: PPUSH
// if exist_mode then
 285: LD_VAR 0 2
 289: IFFALSE 314
// unit := CreateCharacter ( prefix & ident ) else
 291: LD_ADDR_VAR 0 5
 295: PUSH
 296: LD_VAR 0 3
 300: PUSH
 301: LD_VAR 0 1
 305: STR
 306: PPUSH
 307: CALL_OW 34
 311: ST_TO_ADDR
 312: GO 329
// unit := NewCharacter ( ident ) ;
 314: LD_ADDR_VAR 0 5
 318: PUSH
 319: LD_VAR 0 1
 323: PPUSH
 324: CALL_OW 25
 328: ST_TO_ADDR
// result := unit ;
 329: LD_ADDR_VAR 0 4
 333: PUSH
 334: LD_VAR 0 5
 338: ST_TO_ADDR
// end ;
 339: LD_VAR 0 4
 343: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function PrepareNature ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 653: LD_INT 2
 655: PPUSH
 656: LD_INT 4
 658: PUSH
 659: LD_INT 4
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 512 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function Video ( mode ) ; begin
1004: LD_INT 0
1006: PPUSH
// ingame_video = mode ;
1007: LD_ADDR_OWVAR 52
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// interface_hidden = mode ;
1017: LD_ADDR_OWVAR 54
1021: PUSH
1022: LD_VAR 0 1
1026: ST_TO_ADDR
// end ;
1027: LD_VAR 0 2
1031: RET
// export function ReverseArray ( array ) ; var i ; begin
1032: LD_INT 0
1034: PPUSH
1035: PPUSH
// if not array then
1036: LD_VAR 0 1
1040: NOT
1041: IFFALSE 1045
// exit ;
1043: GO 1103
// result := [ ] ;
1045: LD_ADDR_VAR 0 2
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// for i := 1 to array do
1052: LD_ADDR_VAR 0 3
1056: PUSH
1057: DOUBLE
1058: LD_INT 1
1060: DEC
1061: ST_TO_ADDR
1062: LD_VAR 0 1
1066: PUSH
1067: FOR_TO
1068: IFFALSE 1101
// result := Insert ( result , 1 , array [ i ] ) ;
1070: LD_ADDR_VAR 0 2
1074: PUSH
1075: LD_VAR 0 2
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: LD_VAR 0 1
1087: PUSH
1088: LD_VAR 0 3
1092: ARRAY
1093: PPUSH
1094: CALL_OW 2
1098: ST_TO_ADDR
1099: GO 1067
1101: POP
1102: POP
// end ;
1103: LD_VAR 0 2
1107: RET
// export function ComExit ( unit ) ; begin
1108: LD_INT 0
1110: PPUSH
// result := IsInUnit ( unit ) ;
1111: LD_ADDR_VAR 0 2
1115: PUSH
1116: LD_VAR 0 1
1120: PPUSH
1121: CALL_OW 310
1125: ST_TO_ADDR
// if not result then
1126: LD_VAR 0 2
1130: NOT
1131: IFFALSE 1135
// exit ;
1133: GO 1170
// if GetType ( result ) = unit_vehicle then
1135: LD_VAR 0 2
1139: PPUSH
1140: CALL_OW 247
1144: PUSH
1145: LD_INT 2
1147: EQUAL
1148: IFFALSE 1161
// ComExitVehicle ( unit ) else
1150: LD_VAR 0 1
1154: PPUSH
1155: CALL_OW 121
1159: GO 1170
// ComExitBuilding ( unit ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: CALL_OW 122
// end ;
1170: LD_VAR 0 2
1174: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1175: LD_INT 0
1177: PPUSH
1178: PPUSH
// if not side or not nation then
1179: LD_VAR 0 1
1183: NOT
1184: PUSH
1185: LD_VAR 0 2
1189: NOT
1190: OR
1191: IFFALSE 1195
// exit ;
1193: GO 1959
// case nation of nation_american :
1195: LD_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: DOUBLE
1203: EQUAL
1204: IFTRUE 1208
1206: GO 1422
1208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1209: LD_ADDR_VAR 0 4
1213: PUSH
1214: LD_INT 35
1216: PUSH
1217: LD_INT 45
1219: PUSH
1220: LD_INT 46
1222: PUSH
1223: LD_INT 47
1225: PUSH
1226: LD_INT 82
1228: PUSH
1229: LD_INT 83
1231: PUSH
1232: LD_INT 84
1234: PUSH
1235: LD_INT 85
1237: PUSH
1238: LD_INT 86
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 2
1246: PUSH
1247: LD_INT 6
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: LD_INT 12
1261: PUSH
1262: LD_INT 13
1264: PUSH
1265: LD_INT 10
1267: PUSH
1268: LD_INT 14
1270: PUSH
1271: LD_INT 20
1273: PUSH
1274: LD_INT 21
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_INT 25
1282: PUSH
1283: LD_INT 32
1285: PUSH
1286: LD_INT 27
1288: PUSH
1289: LD_INT 36
1291: PUSH
1292: LD_INT 69
1294: PUSH
1295: LD_INT 39
1297: PUSH
1298: LD_INT 34
1300: PUSH
1301: LD_INT 40
1303: PUSH
1304: LD_INT 48
1306: PUSH
1307: LD_INT 49
1309: PUSH
1310: LD_INT 50
1312: PUSH
1313: LD_INT 51
1315: PUSH
1316: LD_INT 52
1318: PUSH
1319: LD_INT 53
1321: PUSH
1322: LD_INT 54
1324: PUSH
1325: LD_INT 55
1327: PUSH
1328: LD_INT 56
1330: PUSH
1331: LD_INT 57
1333: PUSH
1334: LD_INT 58
1336: PUSH
1337: LD_INT 59
1339: PUSH
1340: LD_INT 60
1342: PUSH
1343: LD_INT 61
1345: PUSH
1346: LD_INT 62
1348: PUSH
1349: LD_INT 80
1351: PUSH
1352: LD_INT 82
1354: PUSH
1355: LD_INT 83
1357: PUSH
1358: LD_INT 84
1360: PUSH
1361: LD_INT 85
1363: PUSH
1364: LD_INT 86
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
1420: GO 1883
1422: LD_INT 2
1424: DOUBLE
1425: EQUAL
1426: IFTRUE 1430
1428: GO 1652
1430: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1431: LD_ADDR_VAR 0 4
1435: PUSH
1436: LD_INT 35
1438: PUSH
1439: LD_INT 45
1441: PUSH
1442: LD_INT 46
1444: PUSH
1445: LD_INT 47
1447: PUSH
1448: LD_INT 82
1450: PUSH
1451: LD_INT 83
1453: PUSH
1454: LD_INT 84
1456: PUSH
1457: LD_INT 85
1459: PUSH
1460: LD_INT 87
1462: PUSH
1463: LD_INT 70
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 11
1471: PUSH
1472: LD_INT 3
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: LD_INT 5
1480: PUSH
1481: LD_INT 6
1483: PUSH
1484: LD_INT 15
1486: PUSH
1487: LD_INT 18
1489: PUSH
1490: LD_INT 7
1492: PUSH
1493: LD_INT 17
1495: PUSH
1496: LD_INT 8
1498: PUSH
1499: LD_INT 20
1501: PUSH
1502: LD_INT 21
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 72
1510: PUSH
1511: LD_INT 26
1513: PUSH
1514: LD_INT 69
1516: PUSH
1517: LD_INT 39
1519: PUSH
1520: LD_INT 40
1522: PUSH
1523: LD_INT 41
1525: PUSH
1526: LD_INT 42
1528: PUSH
1529: LD_INT 43
1531: PUSH
1532: LD_INT 48
1534: PUSH
1535: LD_INT 49
1537: PUSH
1538: LD_INT 50
1540: PUSH
1541: LD_INT 51
1543: PUSH
1544: LD_INT 52
1546: PUSH
1547: LD_INT 53
1549: PUSH
1550: LD_INT 54
1552: PUSH
1553: LD_INT 55
1555: PUSH
1556: LD_INT 56
1558: PUSH
1559: LD_INT 60
1561: PUSH
1562: LD_INT 61
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: LD_INT 66
1570: PUSH
1571: LD_INT 67
1573: PUSH
1574: LD_INT 68
1576: PUSH
1577: LD_INT 81
1579: PUSH
1580: LD_INT 82
1582: PUSH
1583: LD_INT 83
1585: PUSH
1586: LD_INT 84
1588: PUSH
1589: LD_INT 85
1591: PUSH
1592: LD_INT 87
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
1650: GO 1883
1652: LD_INT 3
1654: DOUBLE
1655: EQUAL
1656: IFTRUE 1660
1658: GO 1882
1660: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1661: LD_ADDR_VAR 0 4
1665: PUSH
1666: LD_INT 46
1668: PUSH
1669: LD_INT 47
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 82
1680: PUSH
1681: LD_INT 83
1683: PUSH
1684: LD_INT 84
1686: PUSH
1687: LD_INT 85
1689: PUSH
1690: LD_INT 86
1692: PUSH
1693: LD_INT 11
1695: PUSH
1696: LD_INT 9
1698: PUSH
1699: LD_INT 20
1701: PUSH
1702: LD_INT 19
1704: PUSH
1705: LD_INT 21
1707: PUSH
1708: LD_INT 24
1710: PUSH
1711: LD_INT 22
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: LD_INT 28
1719: PUSH
1720: LD_INT 29
1722: PUSH
1723: LD_INT 30
1725: PUSH
1726: LD_INT 31
1728: PUSH
1729: LD_INT 37
1731: PUSH
1732: LD_INT 38
1734: PUSH
1735: LD_INT 32
1737: PUSH
1738: LD_INT 27
1740: PUSH
1741: LD_INT 33
1743: PUSH
1744: LD_INT 69
1746: PUSH
1747: LD_INT 39
1749: PUSH
1750: LD_INT 34
1752: PUSH
1753: LD_INT 40
1755: PUSH
1756: LD_INT 71
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 44
1764: PUSH
1765: LD_INT 48
1767: PUSH
1768: LD_INT 49
1770: PUSH
1771: LD_INT 50
1773: PUSH
1774: LD_INT 51
1776: PUSH
1777: LD_INT 52
1779: PUSH
1780: LD_INT 53
1782: PUSH
1783: LD_INT 54
1785: PUSH
1786: LD_INT 55
1788: PUSH
1789: LD_INT 56
1791: PUSH
1792: LD_INT 57
1794: PUSH
1795: LD_INT 58
1797: PUSH
1798: LD_INT 59
1800: PUSH
1801: LD_INT 63
1803: PUSH
1804: LD_INT 64
1806: PUSH
1807: LD_INT 65
1809: PUSH
1810: LD_INT 82
1812: PUSH
1813: LD_INT 83
1815: PUSH
1816: LD_INT 84
1818: PUSH
1819: LD_INT 85
1821: PUSH
1822: LD_INT 86
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
1880: GO 1883
1882: POP
// if state > - 1 and state < 3 then
1883: LD_VAR 0 3
1887: PUSH
1888: LD_INT 1
1890: NEG
1891: GREATER
1892: PUSH
1893: LD_VAR 0 3
1897: PUSH
1898: LD_INT 3
1900: LESS
1901: AND
1902: IFFALSE 1959
// for i in result do
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_VAR 0 4
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1957
// if GetTech ( i , side ) <> state then
1917: LD_VAR 0 5
1921: PPUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: CALL_OW 321
1931: PUSH
1932: LD_VAR 0 3
1936: NONEQUAL
1937: IFFALSE 1955
// result := result diff i ;
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_VAR 0 5
1953: DIFF
1954: ST_TO_ADDR
1955: GO 1914
1957: POP
1958: POP
// end ; end_of_file
1959: LD_VAR 0 4
1963: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1964: LD_INT 0
1966: PPUSH
1967: PPUSH
1968: PPUSH
1969: PPUSH
// uc_side := 5 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 5
1977: ST_TO_ADDR
// uc_nation := 2 ;
1978: LD_ADDR_OWVAR 21
1982: PUSH
1983: LD_INT 2
1985: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1986: LD_INT 5
1988: PPUSH
1989: CALL_OW 274
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: LD_INT 45
1999: PPUSH
2000: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
2004: LD_ADDR_EXP 32
2008: PUSH
2009: LD_STRING Farmer
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: LD_STRING 
2017: PPUSH
2018: CALL 281 0 3
2022: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2023: LD_ADDR_EXP 33
2027: PUSH
2028: LD_STRING Omar
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: LD_STRING 
2036: PPUSH
2037: CALL 281 0 3
2041: ST_TO_ADDR
// omarSquad := [ ] ;
2042: LD_ADDR_EXP 36
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// heikeSquad := [ ] ;
2049: LD_ADDR_EXP 37
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2056: LD_ADDR_EXP 38
2060: PUSH
2061: EMPTY
2062: ST_TO_ADDR
// omarCargo := [ ] ;
2063: LD_ADDR_EXP 39
2067: PUSH
2068: EMPTY
2069: ST_TO_ADDR
// for i := 1 to 5 do
2070: LD_ADDR_VAR 0 2
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_INT 5
2082: PUSH
2083: FOR_TO
2084: IFFALSE 2242
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2086: LD_INT 0
2088: PPUSH
2089: LD_INT 1
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: LD_INT 1
2100: PUSH
2101: LD_INT 1
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 3
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2134: LD_ADDR_EXP 36
2138: PUSH
2139: LD_EXP 36
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2150: LD_VAR 0 3
2154: PPUSH
2155: LD_INT 87
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 91
2167: PUSH
2168: LD_INT 32
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 82
2177: PUSH
2178: LD_INT 15
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 79
2187: PUSH
2188: LD_INT 14
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 82
2197: PUSH
2198: LD_INT 13
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: PUSH
2212: LD_VAR 0 2
2216: ARRAY
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 93
2232: PPUSH
2233: LD_INT 21
2235: PPUSH
2236: CALL_OW 118
// end ;
2240: GO 2083
2242: POP
2243: POP
// uc_side := 2 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 2
2251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2252: LD_ADDR_EXP 24
2256: PUSH
2257: LD_STRING Heike
2259: PPUSH
2260: LD_EXP 1
2264: NOT
2265: PPUSH
2266: LD_EXP 2
2270: PPUSH
2271: CALL 281 0 3
2275: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2276: LD_ADDR_EXP 28
2280: PUSH
2281: LD_STRING Aviradze
2283: PPUSH
2284: LD_EXP 1
2288: NOT
2289: PPUSH
2290: LD_EXP 2
2294: PPUSH
2295: CALL 281 0 3
2299: ST_TO_ADDR
// tmp := [ ] ;
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2307: LD_ADDR_EXP 25
2311: PUSH
2312: LD_STRING Givi
2314: PPUSH
2315: LD_EXP 1
2319: NOT
2320: PPUSH
2321: LD_EXP 2
2325: PPUSH
2326: CALL 281 0 3
2330: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2331: LD_ADDR_EXP 26
2335: PUSH
2336: LD_STRING Mike
2338: PPUSH
2339: LD_EXP 1
2343: NOT
2344: PPUSH
2345: LD_EXP 2
2349: PPUSH
2350: CALL 281 0 3
2354: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2355: LD_ADDR_EXP 27
2359: PUSH
2360: LD_STRING Kamil
2362: PPUSH
2363: LD_EXP 1
2367: NOT
2368: PPUSH
2369: LD_EXP 2
2373: PPUSH
2374: CALL 281 0 3
2378: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2379: LD_ADDR_EXP 29
2383: PUSH
2384: LD_STRING Kaia
2386: PPUSH
2387: LD_EXP 1
2391: NOT
2392: PPUSH
2393: LD_EXP 2
2397: PPUSH
2398: CALL 281 0 3
2402: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2403: LD_ADDR_EXP 30
2407: PUSH
2408: LD_STRING Sophia
2410: PPUSH
2411: LD_EXP 1
2415: NOT
2416: PPUSH
2417: LD_EXP 2
2421: PPUSH
2422: CALL 281 0 3
2426: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2427: LD_ADDR_EXP 31
2431: PUSH
2432: LD_STRING Markov
2434: PPUSH
2435: LD_EXP 1
2439: NOT
2440: PPUSH
2441: LD_EXP 2
2445: PPUSH
2446: CALL 281 0 3
2450: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2451: LD_ADDR_EXP 38
2455: PUSH
2456: LD_STRING 02_others
2458: PPUSH
2459: CALL_OW 31
2463: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2464: LD_ADDR_VAR 0 4
2468: PUSH
2469: LD_EXP 26
2473: PUSH
2474: LD_EXP 27
2478: PUSH
2479: LD_EXP 29
2483: PUSH
2484: LD_EXP 30
2488: PUSH
2489: LD_EXP 31
2493: PUSH
2494: LD_EXP 25
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_EXP 38
2511: ADD
2512: PUSH
2513: LD_INT 0
2515: DIFF
2516: ST_TO_ADDR
// heikeSquad := tmp ;
2517: LD_ADDR_EXP 37
2521: PUSH
2522: LD_VAR 0 4
2526: ST_TO_ADDR
// uc_nation := 0 ;
2527: LD_ADDR_OWVAR 21
2531: PUSH
2532: LD_INT 0
2534: ST_TO_ADDR
// hc_class := class_apeman ;
2535: LD_ADDR_OWVAR 28
2539: PUSH
2540: LD_INT 12
2542: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2543: LD_ADDR_OWVAR 31
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: LD_INT 0
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// hc_gallery :=  ;
2566: LD_ADDR_OWVAR 33
2570: PUSH
2571: LD_STRING 
2573: ST_TO_ADDR
// hc_name :=  ;
2574: LD_ADDR_OWVAR 26
2578: PUSH
2579: LD_STRING 
2581: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 4
2591: PUSH
2592: CALL_OW 44
2596: UNION
2597: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2598: LD_EXP 24
2602: PPUSH
2603: LD_INT 92
2605: PPUSH
2606: LD_INT 17
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2616: LD_EXP 32
2620: PPUSH
2621: LD_INT 95
2623: PPUSH
2624: LD_INT 19
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 89
2641: PPUSH
2642: LD_INT 25
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2652: LD_EXP 28
2656: PPUSH
2657: LD_INT 92
2659: PPUSH
2660: LD_INT 27
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2670: LD_EXP 33
2674: PPUSH
2675: LD_EXP 28
2679: PPUSH
2680: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2684: LD_EXP 28
2688: PPUSH
2689: LD_EXP 33
2693: PPUSH
2694: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2698: LD_EXP 24
2702: PUSH
2703: LD_EXP 32
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PPUSH
2712: LD_EXP 33
2716: PPUSH
2717: CALL_OW 119
// if tmp then
2721: LD_VAR 0 4
2725: IFFALSE 2779
// for i in tmp do
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2740: LD_VAR 0 2
2744: PPUSH
2745: LD_INT 94
2747: PPUSH
2748: LD_INT 14
2750: PPUSH
2751: LD_INT 4
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_EXP 24
2770: PPUSH
2771: CALL_OW 119
// end ;
2775: GO 2737
2777: POP
2778: POP
// farmerSquad := [ ] ;
2779: LD_ADDR_EXP 35
2783: PUSH
2784: EMPTY
2785: ST_TO_ADDR
// uc_side := 5 ;
2786: LD_ADDR_OWVAR 20
2790: PUSH
2791: LD_INT 5
2793: ST_TO_ADDR
// uc_nation := 2 ;
2794: LD_ADDR_OWVAR 21
2798: PUSH
2799: LD_INT 2
2801: ST_TO_ADDR
// for i := 1 to 4 do
2802: LD_ADDR_VAR 0 2
2806: PUSH
2807: DOUBLE
2808: LD_INT 1
2810: DEC
2811: ST_TO_ADDR
2812: LD_INT 4
2814: PUSH
2815: FOR_TO
2816: IFFALSE 2894
// begin PrepareHuman ( false , 1 , 2 ) ;
2818: LD_INT 0
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 380
// un := CreateHuman ;
2831: LD_ADDR_VAR 0 3
2835: PUSH
2836: CALL_OW 44
2840: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2841: LD_VAR 0 3
2845: PPUSH
2846: LD_INT 102
2848: PPUSH
2849: LD_INT 27
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2862: LD_ADDR_EXP 35
2866: PUSH
2867: LD_EXP 35
2871: PUSH
2872: LD_VAR 0 3
2876: UNION
2877: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_EXP 33
2887: PPUSH
2888: CALL_OW 119
// end ;
2892: GO 2815
2894: POP
2895: POP
// PrepareHuman ( false , 2 , 2 ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 380
// un := CreateHuman ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: CALL_OW 44
2918: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 108
2926: PPUSH
2927: LD_INT 62
2929: PPUSH
2930: LD_INT 2
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2940: LD_ADDR_EXP 35
2944: PUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 3
2954: UNION
2955: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_EXP 33
2965: PPUSH
2966: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2970: LD_INT 109
2972: PPUSH
2973: LD_INT 63
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 15
2981: NEG
2982: PPUSH
2983: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2987: LD_INT 109
2989: PPUSH
2990: LD_INT 63
2992: PPUSH
2993: LD_INT 2
2995: PPUSH
2996: CALL_OW 331
// end ;
3000: LD_VAR 0 1
3004: RET
// export function PrepareIbrahim ( x , y ) ; begin
3005: LD_INT 0
3007: PPUSH
// uc_side := 6 ;
3008: LD_ADDR_OWVAR 20
3012: PUSH
3013: LD_INT 6
3015: ST_TO_ADDR
// uc_nation := 3 ;
3016: LD_ADDR_OWVAR 21
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3024: LD_ADDR_EXP 34
3028: PUSH
3029: LD_STRING IbrahimRu
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: LD_STRING 
3037: PPUSH
3038: CALL 281 0 3
3042: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3043: LD_EXP 34
3047: PPUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_INT 8
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 50
// end ;
3068: LD_VAR 0 3
3072: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3073: LD_EXP 33
3077: PUSH
3078: LD_EXP 36
3082: ADD
3083: PPUSH
3084: LD_INT 95
3086: PUSH
3087: LD_INT 3
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 72
3098: IFFALSE 3154
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
// begin enable ;
3106: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_EXP 33
3116: PUSH
3117: LD_EXP 36
3121: ADD
3122: PPUSH
3123: LD_INT 95
3125: PUSH
3126: LD_INT 3
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 72
3137: PUSH
3138: FOR_IN
3139: IFFALSE 3152
// RemoveUnit ( i ) ;
3141: LD_VAR 0 1
3145: PPUSH
3146: CALL_OW 64
3150: GO 3138
3152: POP
3153: POP
// end ;
3154: PPOPN 1
3156: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3157: LD_EXP 3
3161: PUSH
3162: LD_EXP 32
3166: PPUSH
3167: LD_INT 4
3169: PPUSH
3170: CALL_OW 308
3174: AND
3175: IFFALSE 3958
3177: GO 3179
3179: DISABLE
3180: LD_INT 0
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3186: LD_EXP 32
3190: PPUSH
3191: LD_INT 110
3193: PPUSH
3194: LD_INT 60
3196: PPUSH
3197: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3201: LD_EXP 32
3205: PPUSH
3206: LD_INT 110
3208: PPUSH
3209: LD_INT 61
3211: PPUSH
3212: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_EXP 35
3225: PPUSH
3226: LD_INT 25
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 72
3240: ST_TO_ADDR
// if tmp then
3241: LD_VAR 0 2
3245: IFFALSE 3339
// begin for i := 1 to 2 do
3247: LD_ADDR_VAR 0 1
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_INT 2
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3337
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3263: LD_VAR 0 2
3267: PUSH
3268: LD_VAR 0 1
3272: ARRAY
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3281: LD_VAR 0 2
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3299: LD_VAR 0 2
3303: PUSH
3304: LD_VAR 0 1
3308: ARRAY
3309: PPUSH
3310: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3314: LD_VAR 0 2
3318: PUSH
3319: LD_VAR 0 1
3323: ARRAY
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: LD_INT 66
3330: PPUSH
3331: CALL_OW 171
// end ;
3335: GO 3260
3337: POP
3338: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_EXP 35
3348: PPUSH
3349: LD_INT 25
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3364: LD_INT 35
3366: PPUSH
3367: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_EXP 35
3380: PPUSH
3381: LD_INT 25
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 72
3395: ST_TO_ADDR
// until tmp ;
3396: LD_VAR 0 2
3400: IFFALSE 3364
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_INT 31
3409: PPUSH
3410: LD_INT 102
3412: PPUSH
3413: LD_INT 69
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3423: LD_INT 35
3425: PPUSH
3426: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3430: LD_EXP 35
3434: PPUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 60
3440: PUSH
3441: EMPTY
3442: LIST
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 25
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PPUSH
3462: CALL_OW 72
3466: IFFALSE 3423
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: LD_EXP 35
3477: PPUSH
3478: LD_INT 25
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 72
3492: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 116
3503: PPUSH
3504: LD_INT 70
3506: PPUSH
3507: LD_INT 5
3509: PPUSH
3510: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_INT 31
3521: PPUSH
3522: LD_INT 108
3524: PPUSH
3525: LD_INT 50
3527: PPUSH
3528: LD_INT 2
3530: PPUSH
3531: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3535: LD_INT 35
3537: PPUSH
3538: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3542: LD_INT 22
3544: PUSH
3545: LD_INT 5
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 30
3554: PUSH
3555: LD_INT 4
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 57
3567: PUSH
3568: EMPTY
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PPUSH
3580: CALL_OW 69
3584: IFFALSE 3535
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: LD_INT 22
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 30
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 57
3616: PUSH
3617: EMPTY
3618: LIST
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: PUSH
3634: LD_INT 1
3636: ARRAY
3637: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_EXP 35
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 1
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3677: LD_INT 35
3679: PPUSH
3680: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3684: LD_INT 22
3686: PUSH
3687: LD_INT 5
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 30
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 57
3709: PUSH
3710: EMPTY
3711: LIST
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: PUSH
3727: LD_INT 2
3729: GREATEREQUAL
3730: IFFALSE 3677
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_EXP 35
3741: PPUSH
3742: LD_INT 25
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 72
3756: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3757: LD_VAR 0 2
3761: PUSH
3762: LD_INT 1
3764: ARRAY
3765: PPUSH
3766: LD_INT 5
3768: PPUSH
3769: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3773: LD_VAR 0 2
3777: PUSH
3778: LD_INT 2
3780: ARRAY
3781: PUSH
3782: LD_VAR 0 2
3786: PUSH
3787: LD_INT 3
3789: ARRAY
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3804: LD_VAR 0 2
3808: PUSH
3809: LD_INT 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 2
3817: PUSH
3818: LD_INT 3
3820: ARRAY
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3833: LD_VAR 0 2
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PUSH
3842: LD_VAR 0 2
3846: PUSH
3847: LD_INT 3
3849: ARRAY
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 5
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 30
3876: PUSH
3877: LD_INT 31
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// for i := 1 to 2 do
3893: LD_ADDR_VAR 0 1
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 2
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3941
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3909: LD_VAR 0 2
3913: PUSH
3914: LD_VAR 0 1
3918: PUSH
3919: LD_INT 1
3921: PLUS
3922: ARRAY
3923: PPUSH
3924: LD_VAR 0 4
3928: PUSH
3929: LD_VAR 0 1
3933: ARRAY
3934: PPUSH
3935: CALL_OW 180
3939: GO 3906
3941: POP
3942: POP
// wait ( 1 1$00 ) ;
3943: LD_INT 2100
3945: PPUSH
3946: CALL_OW 67
// farmerBaseReady := true ;
3950: LD_ADDR_EXP 4
3954: PUSH
3955: LD_INT 1
3957: ST_TO_ADDR
// end ;
3958: PPOPN 4
3960: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3961: LD_EXP 4
3965: PUSH
3966: LD_EXP 10
3970: NOT
3971: AND
3972: IFFALSE 4467
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
// begin enable ;
3984: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_EXP 35
3994: PPUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 72
4009: PUSH
4010: LD_EXP 32
4014: ADD
4015: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_EXP 35
4025: PPUSH
4026: LD_INT 25
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 72
4040: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4041: LD_ADDR_VAR 0 5
4045: PUSH
4046: LD_INT 22
4048: PUSH
4049: LD_INT 5
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 21
4058: PUSH
4059: LD_INT 3
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 3
4068: PUSH
4069: LD_INT 24
4071: PUSH
4072: LD_INT 1000
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 30
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4127: LD_VAR 0 4
4131: PUSH
4132: LD_INT 1
4134: ARRAY
4135: PPUSH
4136: CALL_OW 302
4140: IFFALSE 4204
// for i in sol do
4142: LD_ADDR_VAR 0 1
4146: PUSH
4147: LD_VAR 0 3
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4202
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4155: LD_VAR 0 1
4159: PPUSH
4160: CALL_OW 256
4164: PUSH
4165: LD_INT 999
4167: LESS
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 310
4178: NOT
4179: AND
4180: IFFALSE 4200
// ComEnterUnit ( i , arm [ 1 ] ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 4
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 120
4200: GO 4152
4202: POP
4203: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4204: LD_VAR 0 2
4208: NOT
4209: PUSH
4210: LD_INT 22
4212: PUSH
4213: LD_INT 1
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 21
4222: PUSH
4223: LD_INT 1
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 69
4238: NOT
4239: AND
4240: IFFALSE 4332
// begin uc_side := 5 ;
4242: LD_ADDR_OWVAR 20
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// uc_nation := 2 ;
4250: LD_ADDR_OWVAR 21
4254: PUSH
4255: LD_INT 2
4257: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4258: LD_INT 0
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL_OW 380
// eng := CreateHuman ;
4271: LD_ADDR_VAR 0 2
4275: PUSH
4276: CALL_OW 44
4280: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4281: LD_VAR 0 2
4285: PPUSH
4286: LD_INT 102
4288: PPUSH
4289: LD_INT 8
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4299: LD_VAR 0 2
4303: PPUSH
4304: LD_INT 110
4306: PPUSH
4307: LD_INT 60
4309: PPUSH
4310: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4314: LD_ADDR_EXP 35
4318: PUSH
4319: LD_EXP 35
4323: PUSH
4324: LD_VAR 0 2
4328: UNION
4329: ST_TO_ADDR
// end else
4330: GO 4467
// begin for i in eng do
4332: LD_ADDR_VAR 0 1
4336: PUSH
4337: LD_VAR 0 2
4341: PUSH
4342: FOR_IN
4343: IFFALSE 4465
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4345: LD_INT 10
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 287
4355: IFFALSE 4379
// begin if IsInUnit ( i ) then
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 310
4366: IFFALSE 4377
// ComExitBuilding ( i ) ;
4368: LD_VAR 0 1
4372: PPUSH
4373: CALL_OW 122
// end else
4377: GO 4463
// begin if damagedBuilding then
4379: LD_VAR 0 5
4383: IFFALSE 4427
// begin if IsInUnit ( i ) then
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 310
4394: IFFALSE 4407
// ComExitBuilding ( i ) else
4396: LD_VAR 0 1
4400: PPUSH
4401: CALL_OW 122
4405: GO 4425
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4407: LD_VAR 0 1
4411: PPUSH
4412: LD_VAR 0 5
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 130
// end else
4425: GO 4463
// if not IsInUnit ( i ) and not HasTask ( i ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 310
4436: NOT
4437: PUSH
4438: LD_VAR 0 1
4442: PPUSH
4443: CALL_OW 314
4447: NOT
4448: AND
4449: IFFALSE 4463
// ComEnterUnit ( i , arDepot ) ;
4451: LD_VAR 0 1
4455: PPUSH
4456: LD_INT 5
4458: PPUSH
4459: CALL_OW 120
// end ; end ;
4463: GO 4342
4465: POP
4466: POP
// end ; end ;
4467: PPOPN 5
4469: END
// export function StartCargoEvacuation ; begin
4470: LD_INT 0
4472: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
4473: LD_INT 5
4475: PPUSH
4476: CALL_OW 274
4480: PPUSH
4481: LD_INT 1
4483: PPUSH
4484: CALL_OW 275
4488: PUSH
4489: LD_INT 0
4491: GREATER
4492: PUSH
4493: LD_EXP 17
4497: PUSH
4498: LD_INT 0
4500: GREATER
4501: AND
4502: IFFALSE 4776
// begin wait ( 1 1$20 ) ;
4504: LD_INT 2800
4506: PPUSH
4507: CALL_OW 67
// omarCargo := PrepareCargo ;
4511: LD_ADDR_EXP 39
4515: PUSH
4516: CALL 4781 0 0
4520: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4521: LD_EXP 39
4525: PPUSH
4526: LD_INT 107
4528: PPUSH
4529: LD_INT 59
4531: PPUSH
4532: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4536: LD_INT 35
4538: PPUSH
4539: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4543: LD_EXP 39
4547: PPUSH
4548: LD_INT 107
4550: PPUSH
4551: LD_INT 59
4553: PPUSH
4554: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 302
4567: NOT
4568: PUSH
4569: LD_EXP 39
4573: PPUSH
4574: CALL_OW 301
4578: OR
4579: IFFALSE 4583
// continue ;
4581: GO 4536
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4583: LD_EXP 39
4587: PPUSH
4588: LD_INT 107
4590: PPUSH
4591: LD_INT 59
4593: PPUSH
4594: CALL_OW 307
4598: PUSH
4599: LD_EXP 39
4603: PPUSH
4604: LD_INT 5
4606: PPUSH
4607: CALL_OW 296
4611: PUSH
4612: LD_INT 6
4614: LESS
4615: OR
4616: IFFALSE 4536
// wait ( 0 0$05 ) ;
4618: LD_INT 175
4620: PPUSH
4621: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
4625: LD_EXP 39
4629: PPUSH
4630: LD_INT 5
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 103
4647: PPUSH
4648: LD_INT 9
4650: PPUSH
4651: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4655: LD_INT 35
4657: PPUSH
4658: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4662: LD_EXP 39
4666: PPUSH
4667: LD_INT 103
4669: PPUSH
4670: LD_INT 9
4672: PPUSH
4673: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4677: LD_EXP 39
4681: PPUSH
4682: CALL_OW 302
4686: NOT
4687: PUSH
4688: LD_EXP 39
4692: PPUSH
4693: CALL_OW 301
4697: OR
4698: IFFALSE 4702
// continue ;
4700: GO 4655
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
4702: LD_EXP 39
4706: PPUSH
4707: LD_INT 103
4709: PPUSH
4710: LD_INT 9
4712: PPUSH
4713: CALL_OW 307
4717: PUSH
4718: LD_EXP 39
4722: PPUSH
4723: LD_INT 3
4725: PPUSH
4726: CALL_OW 308
4730: OR
4731: PUSH
4732: LD_EXP 39
4736: PPUSH
4737: LD_INT 1
4739: PPUSH
4740: CALL_OW 289
4744: PUSH
4745: LD_INT 0
4747: GREATER
4748: AND
4749: IFFALSE 4655
// RemoveUnit ( omarCargo ) ;
4751: LD_EXP 39
4755: PPUSH
4756: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4760: LD_ADDR_EXP 17
4764: PUSH
4765: LD_EXP 17
4769: PUSH
4770: LD_INT 1
4772: MINUS
4773: ST_TO_ADDR
// end ;
4774: GO 4473
// end ;
4776: LD_VAR 0 1
4780: RET
// export function PrepareCargo ; var un , veh ; begin
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4786: LD_ADDR_VAR 0 3
4790: PUSH
4791: LD_INT 5
4793: PPUSH
4794: LD_INT 2
4796: PPUSH
4797: LD_INT 13
4799: PPUSH
4800: LD_INT 1
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_INT 32
4808: PPUSH
4809: LD_INT 80
4811: PPUSH
4812: CALL 344 0 7
4816: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: LD_INT 4
4824: PPUSH
4825: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4829: LD_VAR 0 3
4833: PPUSH
4834: LD_INT 101
4836: PPUSH
4837: LD_INT 8
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4847: LD_INT 0
4849: PPUSH
4850: LD_INT 3
4852: PPUSH
4853: LD_INT 2
4855: PPUSH
4856: CALL_OW 380
// un := CreateHuman ;
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: CALL_OW 44
4869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4870: LD_VAR 0 2
4874: PPUSH
4875: LD_VAR 0 3
4879: PPUSH
4880: CALL_OW 52
// result := veh ;
4884: LD_ADDR_VAR 0 1
4888: PUSH
4889: LD_VAR 0 3
4893: ST_TO_ADDR
// end ; end_of_file
4894: LD_VAR 0 1
4898: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
4903: PPUSH
// usForces := [ ] ;
4904: LD_ADDR_EXP 40
4908: PUSH
4909: EMPTY
4910: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4911: LD_ADDR_EXP 42
4915: PUSH
4916: LD_INT 6
4918: PUSH
4919: LD_INT 32
4921: PUSH
4922: LD_INT 27
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 4
4936: PUSH
4937: LD_INT 43
4939: PUSH
4940: LD_INT 24
4942: PUSH
4943: LD_INT 5
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 27
4954: PUSH
4955: LD_INT 29
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: LD_INT 0
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4975: LD_INT 11
4977: PPUSH
4978: CALL_OW 274
4982: PPUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_INT 150
4988: PUSH
4989: LD_INT 120
4991: PUSH
4992: LD_INT 100
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_OWVAR 67
5004: ARRAY
5005: PPUSH
5006: CALL_OW 277
// if Difficulty = 1 then
5010: LD_OWVAR 67
5014: PUSH
5015: LD_INT 1
5017: EQUAL
5018: IFFALSE 5027
// RemoveUnit ( hillBun ) ;
5020: LD_INT 14
5022: PPUSH
5023: CALL_OW 64
// uc_side := 1 ;
5027: LD_ADDR_OWVAR 20
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// uc_nation := 1 ;
5035: LD_ADDR_OWVAR 21
5039: PUSH
5040: LD_INT 1
5042: ST_TO_ADDR
// hc_gallery :=  ;
5043: LD_ADDR_OWVAR 33
5047: PUSH
5048: LD_STRING 
5050: ST_TO_ADDR
// hc_name :=  ;
5051: LD_ADDR_OWVAR 26
5055: PUSH
5056: LD_STRING 
5058: ST_TO_ADDR
// hc_importance := 0 ;
5059: LD_ADDR_OWVAR 32
5063: PUSH
5064: LD_INT 0
5066: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5067: LD_INT 1
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 3
5075: PPUSH
5076: CALL_OW 380
// usCommander := CreateHuman ;
5080: LD_ADDR_EXP 41
5084: PUSH
5085: CALL_OW 44
5089: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5090: LD_EXP 41
5094: PPUSH
5095: LD_INT 11
5097: PPUSH
5098: CALL_OW 52
// if hillBun then
5102: LD_INT 14
5104: IFFALSE 5186
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5106: LD_INT 0
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_INT 1
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PPUSH
5132: CALL_OW 380
// un := CreateHuman ;
5136: LD_ADDR_VAR 0 3
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// usForces := usForces union un ;
5146: LD_ADDR_EXP 40
5150: PUSH
5151: LD_EXP 40
5155: PUSH
5156: LD_VAR 0 3
5160: UNION
5161: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5162: LD_VAR 0 3
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5174: LD_VAR 0 3
5178: PPUSH
5179: LD_INT 14
5181: PPUSH
5182: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5186: LD_ADDR_VAR 0 2
5190: PUSH
5191: DOUBLE
5192: LD_INT 1
5194: DEC
5195: ST_TO_ADDR
5196: LD_INT 2
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: LD_INT 4
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: LD_OWVAR 67
5214: ARRAY
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5359
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5219: LD_INT 0
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: LD_INT 1
5227: PUSH
5228: LD_INT 2
5230: PUSH
5231: LD_INT 3
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: PUSH
5239: LD_OWVAR 67
5243: ARRAY
5244: PPUSH
5245: CALL_OW 380
// un := CreateHuman ;
5249: LD_ADDR_VAR 0 3
5253: PUSH
5254: CALL_OW 44
5258: ST_TO_ADDR
// usForces := usForces union un ;
5259: LD_ADDR_EXP 40
5263: PUSH
5264: LD_EXP 40
5268: PUSH
5269: LD_VAR 0 3
5273: UNION
5274: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5275: LD_VAR 0 3
5279: PPUSH
5280: LD_INT 39
5282: PPUSH
5283: LD_INT 24
5285: PPUSH
5286: LD_INT 4
5288: PPUSH
5289: LD_INT 0
5291: PPUSH
5292: CALL_OW 50
// if i < 3 then
5296: LD_VAR 0 2
5300: PUSH
5301: LD_INT 3
5303: LESS
5304: IFFALSE 5357
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5306: LD_VAR 0 3
5310: PPUSH
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 58
5323: PUSH
5324: EMPTY
5325: LIST
5326: PUSH
5327: LD_INT 30
5329: PUSH
5330: LD_INT 31
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: PPUSH
5342: CALL_OW 69
5346: PUSH
5347: LD_VAR 0 2
5351: ARRAY
5352: PPUSH
5353: CALL_OW 120
// end ;
5357: GO 5216
5359: POP
5360: POP
// for i := 1 to 2 do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 2
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5439
// begin PrepareHuman ( false , 2 , 2 ) ;
5377: LD_INT 0
5379: PPUSH
5380: LD_INT 2
5382: PPUSH
5383: LD_INT 2
5385: PPUSH
5386: CALL_OW 380
// un := CreateHuman ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: CALL_OW 44
5399: ST_TO_ADDR
// usForces := usForces union un ;
5400: LD_ADDR_EXP 40
5404: PUSH
5405: LD_EXP 40
5409: PUSH
5410: LD_VAR 0 3
5414: UNION
5415: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: LD_INT 39
5423: PPUSH
5424: LD_INT 24
5426: PPUSH
5427: LD_INT 4
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: CALL_OW 50
// end ;
5437: GO 5374
5439: POP
5440: POP
// PrepareHuman ( false , 4 , 1 ) ;
5441: LD_INT 0
5443: PPUSH
5444: LD_INT 4
5446: PPUSH
5447: LD_INT 1
5449: PPUSH
5450: CALL_OW 380
// un := CreateHuman ;
5454: LD_ADDR_VAR 0 3
5458: PUSH
5459: CALL_OW 44
5463: ST_TO_ADDR
// usForces := usForces union un ;
5464: LD_ADDR_EXP 40
5468: PUSH
5469: LD_EXP 40
5473: PUSH
5474: LD_VAR 0 3
5478: UNION
5479: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5480: LD_VAR 0 3
5484: PPUSH
5485: LD_INT 39
5487: PPUSH
5488: LD_INT 24
5490: PPUSH
5491: LD_INT 4
5493: PPUSH
5494: LD_INT 0
5496: PPUSH
5497: CALL_OW 50
// end ;
5501: LD_VAR 0 1
5505: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5506: LD_EXP 40
5510: PUSH
5511: LD_EXP 6
5515: NOT
5516: AND
5517: IFFALSE 5948
5519: GO 5521
5521: DISABLE
5522: LD_INT 0
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
// begin enable ;
5529: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_EXP 40
5539: PPUSH
5540: LD_INT 25
5542: PUSH
5543: LD_INT 2
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PPUSH
5550: CALL_OW 72
5554: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5555: LD_ADDR_VAR 0 4
5559: PUSH
5560: LD_EXP 40
5564: PPUSH
5565: LD_INT 25
5567: PUSH
5568: LD_INT 1
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PPUSH
5575: CALL_OW 72
5579: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5580: LD_ADDR_VAR 0 5
5584: PUSH
5585: LD_EXP 40
5589: PPUSH
5590: LD_INT 25
5592: PUSH
5593: LD_INT 4
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 72
5604: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5605: LD_INT 7
5607: PPUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 2
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 70
5622: PUSH
5623: LD_INT 1
5625: EQUAL
5626: IFFALSE 5702
// for i in sol do
5628: LD_ADDR_VAR 0 1
5632: PUSH
5633: LD_VAR 0 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5700
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5641: LD_VAR 0 1
5645: PPUSH
5646: CALL_OW 310
5650: NOT
5651: PUSH
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 310
5661: PPUSH
5662: CALL_OW 266
5666: PUSH
5667: LD_INT 4
5669: EQUAL
5670: NOT
5671: OR
5672: IFFALSE 5698
// begin ComExitBuilding ( i ) ;
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5683: LD_VAR 0 1
5687: PPUSH
5688: LD_INT 37
5690: PPUSH
5691: LD_INT 23
5693: PPUSH
5694: CALL_OW 174
// end ;
5698: GO 5638
5700: POP
5701: POP
// if eng then
5702: LD_VAR 0 3
5706: IFFALSE 5948
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_INT 22
5715: PUSH
5716: LD_INT 1
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 95
5725: PUSH
5726: LD_INT 7
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 21
5735: PUSH
5736: LD_INT 3
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: LD_INT 24
5748: PUSH
5749: LD_INT 1000
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// if b then
5771: LD_VAR 0 2
5775: IFFALSE 5806
// begin ComExitBuilding ( eng ) ;
5777: LD_VAR 0 3
5781: PPUSH
5782: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5786: LD_VAR 0 3
5790: PPUSH
5791: LD_VAR 0 2
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: CALL_OW 190
// end else
5804: GO 5948
// begin for i in eng do
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_VAR 0 3
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5946
// if not HasTask ( i ) then
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 314
5828: NOT
5829: IFFALSE 5944
// begin if americanBuildList then
5831: LD_EXP 42
5835: IFFALSE 5920
// begin if IsInUnit ( i ) then
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 310
5846: IFFALSE 5857
// ComExitBuilding ( i ) ;
5848: LD_VAR 0 1
5852: PPUSH
5853: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5857: LD_VAR 0 1
5861: PPUSH
5862: LD_EXP 42
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: PUSH
5871: LD_INT 1
5873: ARRAY
5874: PPUSH
5875: LD_EXP 42
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: PPUSH
5888: LD_EXP 42
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 3
5899: ARRAY
5900: PPUSH
5901: LD_EXP 42
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 4
5912: ARRAY
5913: PPUSH
5914: CALL_OW 205
// end else
5918: GO 5944
// if not IsInUnit ( i ) then
5920: LD_VAR 0 1
5924: PPUSH
5925: CALL_OW 310
5929: NOT
5930: IFFALSE 5944
// ComEnterUnit ( i , usDepot ) ;
5932: LD_VAR 0 1
5936: PPUSH
5937: LD_INT 11
5939: PPUSH
5940: CALL_OW 120
// end ;
5944: GO 5816
5946: POP
5947: POP
// end ; end ; end ;
5948: PPOPN 5
5950: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
5955: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: LD_INT 35
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: LD_INT 48
5969: PUSH
5970: LD_EXP 51
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: ST_TO_ADDR
// for i in tech do
5981: LD_ADDR_VAR 0 4
5985: PUSH
5986: LD_VAR 0 3
5990: PUSH
5991: FOR_IN
5992: IFFALSE 6010
// AddComResearch ( lab , i ) ;
5994: LD_VAR 0 1
5998: PPUSH
5999: LD_VAR 0 4
6003: PPUSH
6004: CALL_OW 184
6008: GO 5991
6010: POP
6011: POP
// end ;
6012: LD_VAR 0 2
6016: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6017: LD_EXP 11
6021: PUSH
6022: LD_EXP 19
6026: PUSH
6027: LD_EXP 23
6031: LESSEQUAL
6032: AND
6033: IFFALSE 6058
6035: GO 6037
6037: DISABLE
// begin enable ;
6038: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6039: LD_INT 35
6041: PPUSH
6042: LD_INT 2065
6044: PPUSH
6045: CALL_OW 12
6049: PPUSH
6050: CALL_OW 67
// SendConvoy ;
6054: CALL 6156 0 0
// end ;
6058: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6059: LD_EXP 6
6063: PUSH
6064: LD_EXP 15
6068: AND
6069: IFFALSE 6155
6071: GO 6073
6073: DISABLE
// begin if americanHasEscaped then
6074: LD_EXP 7
6078: IFFALSE 6089
// wait ( 3 3$20 ) else
6080: LD_INT 7000
6082: PPUSH
6083: CALL_OW 67
6087: GO 6096
// wait ( 6 6$40 ) ;
6089: LD_INT 14000
6091: PPUSH
6092: CALL_OW 67
// SendAttack ;
6096: CALL 6871 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6100: LD_INT 14000
6102: PUSH
6103: LD_INT 11900
6105: PUSH
6106: LD_INT 9800
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: PUSH
6114: LD_OWVAR 67
6118: ARRAY
6119: PPUSH
6120: CALL_OW 67
// SendAttack ;
6124: CALL 6871 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6128: LD_EXP 16
6132: PUSH
6133: LD_INT 6
6135: PUSH
6136: LD_INT 7
6138: PUSH
6139: LD_INT 8
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: PUSH
6147: LD_OWVAR 67
6151: ARRAY
6152: LESS
6153: IFFALSE 6100
// end ;
6155: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6156: LD_INT 0
6158: PPUSH
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// road := rand ( 1 , 2 ) ;
6166: LD_ADDR_VAR 0 4
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6182: LD_ADDR_VAR 0 8
6186: PUSH
6187: LD_INT 3
6189: PUSH
6190: LD_INT 8
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_VAR 0 4
6201: ARRAY
6202: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6203: LD_ADDR_VAR 0 5
6207: PUSH
6208: LD_INT 35
6210: PUSH
6211: LD_INT 66
6213: PUSH
6214: LD_INT 1
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 101
6224: PUSH
6225: LD_INT 8
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6240: LD_ADDR_VAR 0 6
6244: PUSH
6245: LD_INT 34
6247: PUSH
6248: LD_INT 67
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 38
6257: PUSH
6258: LD_INT 62
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 43
6267: PUSH
6268: LD_INT 54
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 57
6277: PUSH
6278: LD_INT 57
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 77
6287: PUSH
6288: LD_INT 71
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: LD_INT 86
6297: PUSH
6298: LD_INT 60
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 89
6307: PUSH
6308: LD_INT 35
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 93
6317: PUSH
6318: LD_INT 17
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 97
6327: PUSH
6328: LD_INT 10
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 103
6337: PUSH
6338: LD_INT 9
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// if road = 2 then
6357: LD_VAR 0 4
6361: PUSH
6362: LD_INT 2
6364: EQUAL
6365: IFFALSE 6382
// points := ReverseArray ( points ) ;
6367: LD_ADDR_VAR 0 6
6371: PUSH
6372: LD_VAR 0 6
6376: PPUSH
6377: CALL 1032 0 1
6381: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6382: LD_INT 4
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 2
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 12
6399: PPUSH
6400: LD_INT 80
6402: PPUSH
6403: CALL 344 0 7
// veh := CreateVehicle ;
6407: LD_ADDR_VAR 0 3
6411: PUSH
6412: CALL_OW 45
6416: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6417: LD_VAR 0 3
6421: PPUSH
6422: LD_VAR 0 5
6426: PUSH
6427: LD_VAR 0 4
6431: ARRAY
6432: PUSH
6433: LD_INT 3
6435: ARRAY
6436: PPUSH
6437: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_VAR 0 5
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: PUSH
6457: LD_INT 1
6459: ARRAY
6460: PPUSH
6461: LD_VAR 0 5
6465: PUSH
6466: LD_VAR 0 4
6470: ARRAY
6471: PUSH
6472: LD_INT 2
6474: ARRAY
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6483: LD_INT 0
6485: PPUSH
6486: LD_INT 1
6488: PPUSH
6489: LD_OWVAR 67
6493: PPUSH
6494: CALL_OW 380
// un := CreateHuman ;
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: CALL_OW 44
6507: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6508: LD_VAR 0 2
6512: PPUSH
6513: LD_VAR 0 3
6517: PPUSH
6518: CALL_OW 52
// if Prob ( 50 + tick mod 30 ) or convoyCounter < 3 then
6522: LD_INT 50
6524: PUSH
6525: LD_OWVAR 1
6529: PUSH
6530: LD_INT 30
6532: MOD
6533: PLUS
6534: PPUSH
6535: CALL_OW 13
6539: PUSH
6540: LD_EXP 19
6544: PUSH
6545: LD_INT 3
6547: LESS
6548: OR
6549: IFFALSE 6566
// SetCargo ( veh , mat_cans , 100 ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: LD_INT 100
6561: PPUSH
6562: CALL_OW 290
// for i := 2 to points do
6566: LD_ADDR_VAR 0 7
6570: PUSH
6571: DOUBLE
6572: LD_INT 2
6574: DEC
6575: ST_TO_ADDR
6576: LD_VAR 0 6
6580: PUSH
6581: FOR_TO
6582: IFFALSE 6625
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6584: LD_VAR 0 3
6588: PPUSH
6589: LD_VAR 0 6
6593: PUSH
6594: LD_VAR 0 7
6598: ARRAY
6599: PUSH
6600: LD_INT 1
6602: ARRAY
6603: PPUSH
6604: LD_VAR 0 6
6608: PUSH
6609: LD_VAR 0 7
6613: ARRAY
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: PPUSH
6619: CALL_OW 171
6623: GO 6581
6625: POP
6626: POP
// convoyCounter := convoyCounter + 1 ;
6627: LD_ADDR_EXP 19
6631: PUSH
6632: LD_EXP 19
6636: PUSH
6637: LD_INT 1
6639: PLUS
6640: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6641: LD_INT 35
6643: PPUSH
6644: CALL_OW 67
// if not HasTask ( veh ) then
6648: LD_VAR 0 3
6652: PPUSH
6653: CALL_OW 314
6657: NOT
6658: IFFALSE 6699
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_VAR 0 6
6669: PUSH
6670: LD_VAR 0 6
6674: ARRAY
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PPUSH
6680: LD_VAR 0 6
6684: PUSH
6685: LD_VAR 0 6
6689: ARRAY
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 111
// if not IsOk ( veh ) then
6699: LD_VAR 0 3
6703: PPUSH
6704: CALL_OW 302
6708: NOT
6709: IFFALSE 6750
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 6
6720: PUSH
6721: LD_VAR 0 6
6725: ARRAY
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: PPUSH
6731: LD_VAR 0 6
6735: PUSH
6736: LD_VAR 0 6
6740: ARRAY
6741: PUSH
6742: LD_INT 2
6744: ARRAY
6745: PPUSH
6746: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6750: LD_VAR 0 3
6754: PPUSH
6755: LD_VAR 0 8
6759: PPUSH
6760: CALL_OW 308
6764: PUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: LD_VAR 0 8
6774: PPUSH
6775: CALL_OW 308
6779: OR
6780: IFFALSE 6641
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 302
6791: PUSH
6792: LD_VAR 0 3
6796: PPUSH
6797: CALL_OW 302
6801: NOT
6802: AND
6803: PUSH
6804: LD_VAR 0 2
6808: PPUSH
6809: LD_VAR 0 8
6813: PPUSH
6814: CALL_OW 308
6818: AND
6819: IFFALSE 6830
// RemoveUnit ( un ) ;
6821: LD_VAR 0 2
6825: PPUSH
6826: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6830: LD_VAR 0 3
6834: PPUSH
6835: LD_VAR 0 8
6839: PPUSH
6840: CALL_OW 308
6844: PUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 302
6854: AND
6855: IFFALSE 6866
// RemoveUnit ( veh ) ;
6857: LD_VAR 0 3
6861: PPUSH
6862: CALL_OW 64
// end ;
6866: LD_VAR 0 1
6870: RET
// export function SendAttack ; var un , veh , i ; begin
6871: LD_INT 0
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
// IncomingAttack ;
6877: CALL 15193 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6881: LD_INT 2100
6883: PPUSH
6884: LD_INT 3500
6886: PPUSH
6887: CALL_OW 12
6891: PPUSH
6892: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6896: LD_ADDR_VAR 0 4
6900: PUSH
6901: DOUBLE
6902: LD_INT 1
6904: DEC
6905: ST_TO_ADDR
6906: LD_INT 3
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: LD_INT 4
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: LD_OWVAR 67
6924: ARRAY
6925: PUSH
6926: LD_EXP 16
6930: PUSH
6931: LD_INT 3
6933: DIV
6934: PLUS
6935: PUSH
6936: FOR_TO
6937: IFFALSE 7049
// begin uc_side := 1 ;
6939: LD_ADDR_OWVAR 20
6943: PUSH
6944: LD_INT 1
6946: ST_TO_ADDR
// uc_nation := 1 ;
6947: LD_ADDR_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6955: LD_INT 0
6957: PPUSH
6958: LD_INT 1
6960: PPUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 3
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_OWVAR 67
6979: ARRAY
6980: PPUSH
6981: CALL_OW 380
// un := CreateHuman ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: CALL_OW 44
6994: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6995: LD_VAR 0 2
6999: PPUSH
7000: LD_INT 37
7002: PPUSH
7003: LD_INT 70
7005: PPUSH
7006: LD_INT 3
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: CALL_OW 50
// usAttackers := usAttackers union un ;
7016: LD_ADDR_EXP 43
7020: PUSH
7021: LD_EXP 43
7025: PUSH
7026: LD_VAR 0 2
7030: UNION
7031: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7032: LD_VAR 0 2
7036: PPUSH
7037: LD_INT 40
7039: PPUSH
7040: LD_INT 65
7042: PPUSH
7043: CALL_OW 111
// end ;
7047: GO 6936
7049: POP
7050: POP
// uc_side := 1 ;
7051: LD_ADDR_OWVAR 20
7055: PUSH
7056: LD_INT 1
7058: ST_TO_ADDR
// uc_nation := 1 ;
7059: LD_ADDR_OWVAR 21
7063: PUSH
7064: LD_INT 1
7066: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7067: LD_INT 0
7069: PPUSH
7070: LD_INT 4
7072: PPUSH
7073: LD_INT 2
7075: PPUSH
7076: CALL_OW 380
// un := CreateHuman ;
7080: LD_ADDR_VAR 0 2
7084: PUSH
7085: CALL_OW 44
7089: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7090: LD_VAR 0 2
7094: PPUSH
7095: LD_INT 37
7097: PPUSH
7098: LD_INT 70
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: CALL_OW 50
// usAttackers := usAttackers union un ;
7111: LD_ADDR_EXP 43
7115: PUSH
7116: LD_EXP 43
7120: PUSH
7121: LD_VAR 0 2
7125: UNION
7126: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: LD_INT 40
7134: PPUSH
7135: LD_INT 65
7137: PPUSH
7138: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7142: LD_EXP 16
7146: PUSH
7147: LD_INT 1
7149: GREATER
7150: PUSH
7151: LD_OWVAR 67
7155: PUSH
7156: LD_INT 1
7158: GREATER
7159: OR
7160: IFFALSE 7363
// begin for i := 1 to Difficulty + attackWave div 4 do
7162: LD_ADDR_VAR 0 4
7166: PUSH
7167: DOUBLE
7168: LD_INT 1
7170: DEC
7171: ST_TO_ADDR
7172: LD_OWVAR 67
7176: PUSH
7177: LD_EXP 16
7181: PUSH
7182: LD_INT 4
7184: DIV
7185: PLUS
7186: PUSH
7187: FOR_TO
7188: IFFALSE 7361
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: LD_INT 1
7197: PPUSH
7198: LD_INT 1
7200: PPUSH
7201: LD_INT 2
7203: PPUSH
7204: LD_INT 2
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_INT 4
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 3
7229: PPUSH
7230: CALL_OW 12
7234: ARRAY
7235: PPUSH
7236: LD_INT 90
7238: PPUSH
7239: CALL 344 0 7
7243: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_INT 35
7251: PPUSH
7252: LD_INT 65
7254: PPUSH
7255: LD_INT 0
7257: PPUSH
7258: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7262: LD_INT 0
7264: PPUSH
7265: LD_INT 3
7267: PPUSH
7268: LD_OWVAR 67
7272: PUSH
7273: LD_INT 1
7275: PLUS
7276: PPUSH
7277: CALL_OW 380
// un := CreateHuman ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: CALL_OW 44
7290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: CALL_OW 52
// usAttackers := usAttackers union un ;
7305: LD_ADDR_EXP 43
7309: PUSH
7310: LD_EXP 43
7314: PUSH
7315: LD_VAR 0 2
7319: UNION
7320: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7321: LD_VAR 0 3
7325: PPUSH
7326: LD_INT 39
7328: PPUSH
7329: LD_INT 60
7331: PPUSH
7332: CALL_OW 111
// wait ( 0 0$2 ) ;
7336: LD_INT 70
7338: PPUSH
7339: CALL_OW 67
// usAttackers := usAttackers union veh ;
7343: LD_ADDR_EXP 43
7347: PUSH
7348: LD_EXP 43
7352: PUSH
7353: LD_VAR 0 3
7357: UNION
7358: ST_TO_ADDR
// end ;
7359: GO 7187
7361: POP
7362: POP
// end ; attackWave := attackWave + 1 ;
7363: LD_ADDR_EXP 16
7367: PUSH
7368: LD_EXP 16
7372: PUSH
7373: LD_INT 1
7375: PLUS
7376: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7377: LD_EXP 20
7381: PPUSH
7382: CALL_OW 427
// end ;
7386: LD_VAR 0 1
7390: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
// if retreatAllowed then
7404: LD_EXP 10
7408: IFFALSE 7420
// strategy := 2 else
7410: LD_ADDR_VAR 0 5
7414: PUSH
7415: LD_INT 2
7417: ST_TO_ADDR
7418: GO 7436
// strategy := rand ( 0 , 2 ) ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_INT 0
7427: PPUSH
7428: LD_INT 2
7430: PPUSH
7431: CALL_OW 12
7435: ST_TO_ADDR
// attackFormula := [ ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: EMPTY
7442: ST_TO_ADDR
// case strategy of 0 :
7443: LD_VAR 0 5
7447: PUSH
7448: LD_INT 0
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7786
7456: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7457: LD_INT 11
7459: PPUSH
7460: LD_INT 22
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 30
7472: PUSH
7473: LD_INT 4
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 70
7488: NOT
7489: IFFALSE 7561
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7491: LD_ADDR_VAR 0 6
7495: PUSH
7496: LD_INT 41
7498: PUSH
7499: LD_INT 34
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: PUSH
7509: LD_INT 53
7511: PUSH
7512: LD_INT 62
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 37
7521: PUSH
7522: LD_INT 63
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 44
7531: PUSH
7532: LD_INT 45
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 37
7541: PUSH
7542: LD_INT 28
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 7784
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7561: LD_INT 12
7563: PPUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: LD_INT 30
7579: PUSH
7580: LD_INT 4
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 30
7589: PUSH
7590: LD_INT 31
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 30
7599: PUSH
7600: LD_INT 32
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PPUSH
7617: CALL_OW 70
7621: NOT
7622: IFFALSE 7705
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7624: LD_ADDR_VAR 0 6
7628: PUSH
7629: LD_INT 27
7631: PUSH
7632: LD_INT 42
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 27
7641: PUSH
7642: LD_INT 32
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: LD_INT 53
7655: PUSH
7656: LD_INT 62
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 37
7665: PUSH
7666: LD_INT 63
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 44
7675: PUSH
7676: LD_INT 45
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 37
7685: PUSH
7686: LD_INT 28
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: ST_TO_ADDR
7703: GO 7784
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7705: LD_ADDR_VAR 0 6
7709: PUSH
7710: LD_INT 71
7712: PUSH
7713: LD_INT 67
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 54
7722: PUSH
7723: LD_INT 35
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 63
7736: PUSH
7737: LD_INT 40
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 37
7746: PUSH
7747: LD_INT 63
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 44
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 37
7766: PUSH
7767: LD_INT 28
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// end ; 1 :
7784: GO 7989
7786: LD_INT 1
7788: DOUBLE
7789: EQUAL
7790: IFTRUE 7794
7792: GO 7898
7794: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7795: LD_ADDR_VAR 0 6
7799: PUSH
7800: LD_INT 71
7802: PUSH
7803: LD_INT 67
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 82
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 53
7822: PUSH
7823: LD_INT 7
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 43
7832: PUSH
7833: LD_INT 10
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 53
7848: PUSH
7849: LD_INT 62
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 37
7858: PUSH
7859: LD_INT 63
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 44
7868: PUSH
7869: LD_INT 45
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 37
7878: PUSH
7879: LD_INT 28
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: ST_TO_ADDR
7896: GO 7989
7898: LD_INT 2
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7988
7906: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_INT 90
7914: PUSH
7915: LD_INT 59
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 108
7924: PUSH
7925: LD_INT 64
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 82
7938: PUSH
7939: LD_INT 75
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 73
7948: PUSH
7949: LD_INT 67
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 101
7958: PUSH
7959: LD_INT 65
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 108
7968: PUSH
7969: LD_INT 62
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: ST_TO_ADDR
7986: GO 7989
7988: POP
// if not attackFormula then
7989: LD_VAR 0 6
7993: NOT
7994: IFFALSE 7998
// exit ;
7996: GO 9430
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7998: LD_ADDR_VAR 0 7
8002: PUSH
8003: LD_EXP 43
8007: PPUSH
8008: LD_INT 25
8010: PUSH
8011: LD_INT 1
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 72
8022: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8023: LD_ADDR_VAR 0 8
8027: PUSH
8028: LD_EXP 43
8032: PPUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 4
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 72
8047: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8048: LD_ADDR_VAR 0 9
8052: PUSH
8053: LD_EXP 43
8057: PPUSH
8058: LD_INT 25
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PPUSH
8068: CALL_OW 72
8072: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8073: LD_ADDR_VAR 0 10
8077: PUSH
8078: LD_EXP 43
8082: PPUSH
8083: LD_INT 21
8085: PUSH
8086: LD_INT 2
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PPUSH
8093: CALL_OW 72
8097: ST_TO_ADDR
// if sci then
8098: LD_VAR 0 8
8102: IFFALSE 8139
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8104: LD_VAR 0 8
8108: PPUSH
8109: LD_VAR 0 6
8113: PUSH
8114: LD_INT 2
8116: ARRAY
8117: PUSH
8118: LD_INT 1
8120: ARRAY
8121: PPUSH
8122: LD_VAR 0 6
8126: PUSH
8127: LD_INT 2
8129: ARRAY
8130: PUSH
8131: LD_INT 2
8133: ARRAY
8134: PPUSH
8135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8139: LD_INT 35
8141: PPUSH
8142: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8146: LD_ADDR_VAR 0 7
8150: PUSH
8151: LD_EXP 43
8155: PPUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PPUSH
8166: CALL_OW 72
8170: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_EXP 43
8180: PPUSH
8181: LD_INT 25
8183: PUSH
8184: LD_INT 4
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 72
8195: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8196: LD_ADDR_VAR 0 9
8200: PUSH
8201: LD_EXP 43
8205: PPUSH
8206: LD_INT 25
8208: PUSH
8209: LD_INT 3
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 72
8220: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8221: LD_ADDR_VAR 0 10
8225: PUSH
8226: LD_EXP 43
8230: PPUSH
8231: LD_INT 21
8233: PUSH
8234: LD_INT 2
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: ST_TO_ADDR
// if sol then
8246: LD_VAR 0 7
8250: IFFALSE 8645
// begin for i in sol do
8252: LD_ADDR_VAR 0 2
8256: PUSH
8257: LD_VAR 0 7
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8643
// begin tag := GetTag ( i ) ;
8265: LD_ADDR_VAR 0 4
8269: PUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 110
8279: ST_TO_ADDR
// if not tag then
8280: LD_VAR 0 4
8284: NOT
8285: IFFALSE 8403
// begin if GetLives ( i ) = 1000 then
8287: LD_VAR 0 2
8291: PPUSH
8292: CALL_OW 256
8296: PUSH
8297: LD_INT 1000
8299: EQUAL
8300: IFFALSE 8316
// SetTag ( i , 1 ) else
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: CALL_OW 109
8314: GO 8401
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8316: LD_VAR 0 2
8320: PPUSH
8321: LD_VAR 0 6
8325: PUSH
8326: LD_INT 2
8328: ARRAY
8329: PUSH
8330: LD_INT 1
8332: ARRAY
8333: PPUSH
8334: LD_VAR 0 6
8338: PUSH
8339: LD_INT 2
8341: ARRAY
8342: PUSH
8343: LD_INT 2
8345: ARRAY
8346: PPUSH
8347: CALL_OW 297
8351: PUSH
8352: LD_INT 6
8354: GREATER
8355: IFFALSE 8401
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8357: LD_VAR 0 2
8361: PPUSH
8362: LD_VAR 0 6
8366: PUSH
8367: LD_INT 2
8369: ARRAY
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: PPUSH
8375: LD_VAR 0 6
8379: PUSH
8380: LD_INT 2
8382: ARRAY
8383: PUSH
8384: LD_INT 2
8386: ARRAY
8387: PPUSH
8388: CALL_OW 111
// AddComHold ( i ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: CALL_OW 200
// end ; end else
8401: GO 8641
// begin if GetLives ( i ) < 720 then
8403: LD_VAR 0 2
8407: PPUSH
8408: CALL_OW 256
8412: PUSH
8413: LD_INT 720
8415: LESS
8416: IFFALSE 8432
// SetTag ( i , 0 ) else
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 0
8425: PPUSH
8426: CALL_OW 109
8430: GO 8641
// if tag <= attackFormula [ 1 ] then
8432: LD_VAR 0 4
8436: PUSH
8437: LD_VAR 0 6
8441: PUSH
8442: LD_INT 1
8444: ARRAY
8445: LESSEQUAL
8446: IFFALSE 8607
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_VAR 0 6
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PUSH
8462: LD_VAR 0 4
8466: ARRAY
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: LD_VAR 0 6
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PUSH
8481: LD_VAR 0 4
8485: ARRAY
8486: PUSH
8487: LD_INT 2
8489: ARRAY
8490: PPUSH
8491: CALL_OW 297
8495: PUSH
8496: LD_INT 6
8498: GREATER
8499: IFFALSE 8550
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8501: LD_VAR 0 2
8505: PPUSH
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 1
8513: ARRAY
8514: PUSH
8515: LD_VAR 0 4
8519: ARRAY
8520: PUSH
8521: LD_INT 1
8523: ARRAY
8524: PPUSH
8525: LD_VAR 0 6
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: PUSH
8534: LD_VAR 0 4
8538: ARRAY
8539: PUSH
8540: LD_INT 2
8542: ARRAY
8543: PPUSH
8544: CALL_OW 114
8548: GO 8605
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8550: LD_INT 81
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 91
8562: PUSH
8563: LD_VAR 0 2
8567: PUSH
8568: LD_INT 10
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL_OW 69
8584: NOT
8585: IFFALSE 8605
// SetTag ( i , tag + 1 ) ;
8587: LD_VAR 0 2
8591: PPUSH
8592: LD_VAR 0 4
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: PPUSH
8601: CALL_OW 109
// end else
8605: GO 8641
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8607: LD_VAR 0 2
8611: PPUSH
8612: LD_INT 81
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 69
8626: PPUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: CALL_OW 74
8636: PPUSH
8637: CALL_OW 115
// end ; end ;
8641: GO 8262
8643: POP
8644: POP
// end ; if sci then
8645: LD_VAR 0 8
8649: IFFALSE 8808
// begin if not sol and not mech then
8651: LD_VAR 0 7
8655: NOT
8656: PUSH
8657: LD_VAR 0 9
8661: NOT
8662: AND
8663: IFFALSE 8715
// begin for i in sci do
8665: LD_ADDR_VAR 0 2
8669: PUSH
8670: LD_VAR 0 8
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8711
// begin usForces := usForces union i ;
8678: LD_ADDR_EXP 40
8682: PUSH
8683: LD_EXP 40
8687: PUSH
8688: LD_VAR 0 2
8692: UNION
8693: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8694: LD_VAR 0 2
8698: PPUSH
8699: LD_INT 34
8701: PPUSH
8702: LD_INT 68
8704: PPUSH
8705: CALL_OW 111
// end ;
8709: GO 8675
8711: POP
8712: POP
// end else
8713: GO 8808
// for i in sci do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: LD_VAR 0 8
8724: PUSH
8725: FOR_IN
8726: IFFALSE 8806
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8728: LD_VAR 0 2
8732: PPUSH
8733: LD_VAR 0 6
8737: PUSH
8738: LD_INT 2
8740: ARRAY
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 6
8750: PUSH
8751: LD_INT 2
8753: ARRAY
8754: PUSH
8755: LD_INT 2
8757: ARRAY
8758: PPUSH
8759: CALL_OW 297
8763: PUSH
8764: LD_INT 8
8766: GREATER
8767: IFFALSE 8804
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8769: LD_VAR 0 2
8773: PPUSH
8774: LD_VAR 0 6
8778: PUSH
8779: LD_INT 2
8781: ARRAY
8782: PUSH
8783: LD_INT 1
8785: ARRAY
8786: PPUSH
8787: LD_VAR 0 6
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PUSH
8796: LD_INT 2
8798: ARRAY
8799: PPUSH
8800: CALL_OW 111
8804: GO 8725
8806: POP
8807: POP
// end ; if tanks and mech then
8808: LD_VAR 0 10
8812: PUSH
8813: LD_VAR 0 9
8817: AND
8818: IFFALSE 9423
// begin for i in mech do
8820: LD_ADDR_VAR 0 2
8824: PUSH
8825: LD_VAR 0 9
8829: PUSH
8830: FOR_IN
8831: IFFALSE 9421
// begin tag := GetTag ( i ) ;
8833: LD_ADDR_VAR 0 4
8837: PUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: CALL_OW 110
8847: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8848: LD_ADDR_VAR 0 11
8852: PUSH
8853: LD_VAR 0 2
8857: PPUSH
8858: CALL_OW 310
8862: ST_TO_ADDR
// if not tag then
8863: LD_VAR 0 4
8867: NOT
8868: IFFALSE 9181
// begin if veh then
8870: LD_VAR 0 11
8874: IFFALSE 9023
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8876: LD_VAR 0 11
8880: PPUSH
8881: CALL_OW 256
8885: PUSH
8886: LD_INT 1000
8888: EQUAL
8889: PUSH
8890: LD_VAR 0 11
8894: PPUSH
8895: CALL_OW 261
8899: PUSH
8900: LD_INT 60
8902: GREATER
8903: AND
8904: IFFALSE 8920
// SetTag ( i , 1 ) else
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 1
8913: PPUSH
8914: CALL_OW 109
8918: GO 9021
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8920: LD_VAR 0 2
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 3
8932: ARRAY
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: LD_VAR 0 6
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PUSH
8947: LD_INT 2
8949: ARRAY
8950: PPUSH
8951: CALL_OW 297
8955: PUSH
8956: LD_INT 7
8958: GREATER
8959: IFFALSE 8998
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8961: LD_VAR 0 2
8965: PPUSH
8966: LD_VAR 0 6
8970: PUSH
8971: LD_INT 3
8973: ARRAY
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PPUSH
8979: LD_VAR 0 6
8983: PUSH
8984: LD_INT 3
8986: ARRAY
8987: PUSH
8988: LD_INT 2
8990: ARRAY
8991: PPUSH
8992: CALL_OW 111
8996: GO 9021
// begin ComExitVehicle ( i ) ;
8998: LD_VAR 0 2
9002: PPUSH
9003: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
9007: LD_VAR 0 2
9011: PPUSH
9012: LD_VAR 0 11
9016: PPUSH
9017: CALL_OW 189
// end ; end else
9021: GO 9179
// if GetLives ( i ) < 700 then
9023: LD_VAR 0 2
9027: PPUSH
9028: CALL_OW 256
9032: PUSH
9033: LD_INT 700
9035: LESS
9036: IFFALSE 9087
// begin usAttackers := usAttackers diff i ;
9038: LD_ADDR_EXP 43
9042: PUSH
9043: LD_EXP 43
9047: PUSH
9048: LD_VAR 0 2
9052: DIFF
9053: ST_TO_ADDR
// usForces := usForces union i ;
9054: LD_ADDR_EXP 40
9058: PUSH
9059: LD_EXP 40
9063: PUSH
9064: LD_VAR 0 2
9068: UNION
9069: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_INT 34
9077: PPUSH
9078: LD_INT 68
9080: PPUSH
9081: CALL_OW 111
// end else
9085: GO 9179
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9087: LD_VAR 0 10
9091: PPUSH
9092: LD_INT 58
9094: PUSH
9095: EMPTY
9096: LIST
9097: PUSH
9098: LD_INT 24
9100: PUSH
9101: LD_INT 1000
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: PUSH
9117: LD_VAR 0 2
9121: PPUSH
9122: CALL_OW 314
9126: NOT
9127: AND
9128: IFFALSE 9179
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9130: LD_VAR 0 2
9134: PPUSH
9135: LD_VAR 0 10
9139: PPUSH
9140: LD_INT 58
9142: PUSH
9143: EMPTY
9144: LIST
9145: PUSH
9146: LD_INT 24
9148: PUSH
9149: LD_INT 1000
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 72
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 74
9174: PPUSH
9175: CALL_OW 120
// end else
9179: GO 9419
// begin if GetLives ( veh ) < 620 then
9181: LD_VAR 0 11
9185: PPUSH
9186: CALL_OW 256
9190: PUSH
9191: LD_INT 620
9193: LESS
9194: IFFALSE 9210
// SetTag ( i , 0 ) else
9196: LD_VAR 0 2
9200: PPUSH
9201: LD_INT 0
9203: PPUSH
9204: CALL_OW 109
9208: GO 9419
// if tag <= attackFormula [ 4 ] then
9210: LD_VAR 0 4
9214: PUSH
9215: LD_VAR 0 6
9219: PUSH
9220: LD_INT 4
9222: ARRAY
9223: LESSEQUAL
9224: IFFALSE 9385
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9226: LD_VAR 0 2
9230: PPUSH
9231: LD_VAR 0 6
9235: PUSH
9236: LD_INT 4
9238: ARRAY
9239: PUSH
9240: LD_VAR 0 4
9244: ARRAY
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: LD_VAR 0 6
9254: PUSH
9255: LD_INT 4
9257: ARRAY
9258: PUSH
9259: LD_VAR 0 4
9263: ARRAY
9264: PUSH
9265: LD_INT 2
9267: ARRAY
9268: PPUSH
9269: CALL_OW 297
9273: PUSH
9274: LD_INT 6
9276: GREATER
9277: IFFALSE 9328
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9279: LD_VAR 0 2
9283: PPUSH
9284: LD_VAR 0 6
9288: PUSH
9289: LD_INT 4
9291: ARRAY
9292: PUSH
9293: LD_VAR 0 4
9297: ARRAY
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: LD_VAR 0 6
9307: PUSH
9308: LD_INT 4
9310: ARRAY
9311: PUSH
9312: LD_VAR 0 4
9316: ARRAY
9317: PUSH
9318: LD_INT 2
9320: ARRAY
9321: PPUSH
9322: CALL_OW 114
9326: GO 9383
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9328: LD_INT 81
9330: PUSH
9331: LD_INT 1
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 91
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: LD_INT 10
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 69
9362: NOT
9363: IFFALSE 9383
// SetTag ( i , tag + 1 ) ;
9365: LD_VAR 0 2
9369: PPUSH
9370: LD_VAR 0 4
9374: PUSH
9375: LD_INT 1
9377: PLUS
9378: PPUSH
9379: CALL_OW 109
// end else
9383: GO 9419
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9385: LD_VAR 0 2
9389: PPUSH
9390: LD_INT 81
9392: PUSH
9393: LD_INT 1
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 69
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 74
9414: PPUSH
9415: CALL_OW 115
// end ; end ;
9419: GO 8830
9421: POP
9422: POP
// end ; until not usAttackers ;
9423: LD_EXP 43
9427: NOT
9428: IFFALSE 8139
// end ; end_of_file
9430: LD_VAR 0 1
9434: RET
// export function Action ; var hasAll , i , tmp ; begin
9435: LD_INT 0
9437: PPUSH
9438: PPUSH
9439: PPUSH
9440: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: LD_INT 22
9448: PUSH
9449: LD_INT 2
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 21
9458: PUSH
9459: LD_INT 1
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 23
9468: PUSH
9469: LD_INT 2
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: PPUSH
9481: CALL_OW 69
9485: PUSH
9486: LD_INT 7
9488: GREATEREQUAL
9489: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_STRING 03_HasAll
9497: PPUSH
9498: CALL_OW 39
// Video ( true ) ;
9502: LD_INT 1
9504: PPUSH
9505: CALL 1004 0 1
// CenterNowOnUnits ( Heike ) ;
9509: LD_EXP 24
9513: PPUSH
9514: CALL_OW 87
// wait ( 0 0$2 ) ;
9518: LD_INT 70
9520: PPUSH
9521: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9525: LD_EXP 32
9529: PPUSH
9530: LD_STRING DF-1-start
9532: PPUSH
9533: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9537: LD_EXP 24
9541: PPUSH
9542: LD_EXP 32
9546: PPUSH
9547: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9551: LD_EXP 24
9555: PPUSH
9556: LD_STRING DH-1-start
9558: PPUSH
9559: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9563: LD_EXP 33
9567: PPUSH
9568: LD_INT 92
9570: PPUSH
9571: LD_INT 21
9573: PPUSH
9574: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9578: LD_EXP 28
9582: PPUSH
9583: LD_INT 94
9585: PPUSH
9586: LD_INT 23
9588: PPUSH
9589: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9593: LD_EXP 36
9597: PUSH
9598: LD_INT 1
9600: ARRAY
9601: PPUSH
9602: LD_INT 90
9604: PPUSH
9605: LD_INT 23
9607: PPUSH
9608: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9612: LD_EXP 36
9616: PUSH
9617: LD_INT 2
9619: ARRAY
9620: PPUSH
9621: LD_INT 93
9623: PPUSH
9624: LD_INT 25
9626: PPUSH
9627: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9631: LD_EXP 36
9635: PPUSH
9636: LD_EXP 33
9640: PPUSH
9641: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9645: LD_EXP 33
9649: PUSH
9650: LD_EXP 28
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: LD_EXP 24
9663: PPUSH
9664: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9668: LD_EXP 24
9672: PPUSH
9673: LD_EXP 33
9677: PPUSH
9678: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9682: LD_INT 35
9684: PPUSH
9685: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9689: LD_EXP 33
9693: PPUSH
9694: LD_INT 92
9696: PPUSH
9697: LD_INT 21
9699: PPUSH
9700: CALL_OW 307
9704: IFFALSE 9682
// Say ( Omar , DO-1-start ) ;
9706: LD_EXP 33
9710: PPUSH
9711: LD_STRING DO-1-start
9713: PPUSH
9714: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9718: LD_EXP 24
9722: PPUSH
9723: LD_STRING DH-2-start
9725: PPUSH
9726: CALL_OW 88
// if hasAll then
9730: LD_VAR 0 2
9734: IFFALSE 9862
// begin Say ( Omar , DO-2-start ) ;
9736: LD_EXP 33
9740: PPUSH
9741: LD_STRING DO-2-start
9743: PPUSH
9744: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9748: LD_EXP 33
9752: PPUSH
9753: LD_STRING DO-3-start
9755: PPUSH
9756: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9760: LD_EXP 24
9764: PPUSH
9765: LD_STRING DH-3-start
9767: PPUSH
9768: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9772: LD_EXP 32
9776: PPUSH
9777: LD_STRING DF-2-start
9779: PPUSH
9780: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9784: LD_EXP 33
9788: PPUSH
9789: LD_EXP 32
9793: PPUSH
9794: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9798: LD_EXP 33
9802: PPUSH
9803: LD_STRING DO-4-start
9805: PPUSH
9806: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9810: LD_EXP 32
9814: PPUSH
9815: LD_STRING DF-3-start
9817: PPUSH
9818: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9822: LD_EXP 33
9826: PPUSH
9827: LD_STRING DO-5-start
9829: PPUSH
9830: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9834: LD_EXP 32
9838: PPUSH
9839: LD_STRING DF-4-start
9841: PPUSH
9842: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9846: LD_EXP 33
9850: PPUSH
9851: LD_EXP 24
9855: PPUSH
9856: CALL_OW 119
// end else
9860: GO 9962
// begin Say ( Omar , DO-2-start-a ) ;
9862: LD_EXP 33
9866: PPUSH
9867: LD_STRING DO-2-start-a
9869: PPUSH
9870: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9874: LD_EXP 33
9878: PPUSH
9879: LD_STRING DO-3-start-a
9881: PPUSH
9882: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9886: LD_EXP 24
9890: PPUSH
9891: LD_STRING DH-3-start-a
9893: PPUSH
9894: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9898: LD_EXP 32
9902: PPUSH
9903: LD_STRING DF-2-start-a
9905: PPUSH
9906: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9910: LD_EXP 33
9914: PPUSH
9915: LD_EXP 32
9919: PPUSH
9920: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9924: LD_EXP 33
9928: PPUSH
9929: LD_STRING DO-4-start-a
9931: PPUSH
9932: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9936: LD_EXP 32
9940: PPUSH
9941: LD_STRING DF-3-start-a
9943: PPUSH
9944: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9948: LD_EXP 33
9952: PPUSH
9953: LD_EXP 24
9957: PPUSH
9958: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9962: LD_INT 10
9964: PPUSH
9965: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9969: LD_EXP 33
9973: PPUSH
9974: LD_STRING DO-1-mission
9976: PPUSH
9977: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9981: LD_EXP 33
9985: PPUSH
9986: LD_STRING DO-2-mission
9988: PPUSH
9989: CALL_OW 88
// if not hasAll then
9993: LD_VAR 0 2
9997: NOT
9998: IFFALSE 10012
// Say ( Omar , DO-3-mission ) ;
10000: LD_EXP 33
10004: PPUSH
10005: LD_STRING DO-3-mission
10007: PPUSH
10008: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
10012: LD_EXP 33
10016: PPUSH
10017: LD_STRING DO-4-mission
10019: PPUSH
10020: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10024: LD_EXP 24
10028: PPUSH
10029: LD_STRING DH-1-mission
10031: PPUSH
10032: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10036: LD_EXP 32
10040: PPUSH
10041: LD_STRING DF-1-mission
10043: PPUSH
10044: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10048: LD_EXP 33
10052: PPUSH
10053: LD_STRING DO-5-mission
10055: PPUSH
10056: CALL_OW 88
// if not hasAll then
10060: LD_VAR 0 2
10064: NOT
10065: IFFALSE 10200
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10067: LD_ADDR_VAR 0 4
10071: PUSH
10072: LD_INT 22
10074: PUSH
10075: LD_INT 2
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 21
10084: PUSH
10085: LD_INT 1
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 23
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: PPUSH
10107: CALL_OW 69
10111: ST_TO_ADDR
// for i := 7 downto tmp do
10112: LD_ADDR_VAR 0 3
10116: PUSH
10117: DOUBLE
10118: LD_INT 7
10120: INC
10121: ST_TO_ADDR
10122: LD_VAR 0 4
10126: PUSH
10127: FOR_DOWNTO
10128: IFFALSE 10198
// begin if omarSquad < 3 then
10130: LD_EXP 36
10134: PUSH
10135: LD_INT 3
10137: LESS
10138: IFFALSE 10142
// break ;
10140: GO 10198
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10142: LD_EXP 36
10146: PUSH
10147: LD_INT 3
10149: ARRAY
10150: PPUSH
10151: LD_INT 2
10153: PPUSH
10154: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10158: LD_ADDR_EXP 38
10162: PUSH
10163: LD_EXP 38
10167: PUSH
10168: LD_EXP 36
10172: PUSH
10173: LD_INT 3
10175: ARRAY
10176: UNION
10177: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10178: LD_ADDR_EXP 36
10182: PUSH
10183: LD_EXP 36
10187: PPUSH
10188: LD_INT 3
10190: PPUSH
10191: CALL_OW 3
10195: ST_TO_ADDR
// end ;
10196: GO 10127
10198: POP
10199: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10200: LD_EXP 33
10204: PUSH
10205: LD_EXP 36
10209: ADD
10210: PPUSH
10211: LD_INT 103
10213: PPUSH
10214: LD_INT 9
10216: PPUSH
10217: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10221: LD_VAR 0 2
10225: PUSH
10226: LD_EXP 29
10230: PPUSH
10231: CALL_OW 302
10235: AND
10236: IFFALSE 10297
// begin wait ( 0 0$3 ) ;
10238: LD_INT 105
10240: PPUSH
10241: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10245: LD_EXP 29
10249: PPUSH
10250: LD_EXP 32
10254: PPUSH
10255: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10259: LD_EXP 29
10263: PPUSH
10264: LD_STRING DK-1-side
10266: PPUSH
10267: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10271: LD_EXP 32
10275: PPUSH
10276: LD_EXP 29
10280: PPUSH
10281: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10285: LD_EXP 32
10289: PPUSH
10290: LD_STRING DF-1-side
10292: PPUSH
10293: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10297: LD_INT 22
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PPUSH
10312: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10316: LD_EXP 32
10320: PUSH
10321: LD_EXP 35
10325: ADD
10326: PPUSH
10327: LD_INT 108
10329: PPUSH
10330: LD_INT 62
10332: PPUSH
10333: CALL_OW 111
// gameStarted := true ;
10337: LD_ADDR_EXP 3
10341: PUSH
10342: LD_INT 1
10344: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10345: LD_INT 105
10347: PPUSH
10348: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10352: LD_EXP 24
10356: PPUSH
10357: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10361: LD_EXP 24
10365: PPUSH
10366: LD_EXP 28
10370: PPUSH
10371: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10375: LD_INT 22
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: LD_EXP 24
10394: DIFF
10395: PPUSH
10396: LD_EXP 24
10400: PPUSH
10401: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10405: LD_EXP 24
10409: PPUSH
10410: LD_STRING DH-1-explore
10412: PPUSH
10413: CALL_OW 88
// if Givi then
10417: LD_EXP 25
10421: IFFALSE 10437
// Say ( Givi , DG-1-explore ) else
10423: LD_EXP 25
10427: PPUSH
10428: LD_STRING DG-1-explore
10430: PPUSH
10431: CALL_OW 88
10435: GO 10474
// if heikeSecondSquad then
10437: LD_EXP 38
10441: IFFALSE 10474
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10443: LD_EXP 38
10447: PPUSH
10448: LD_INT 26
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PPUSH
10458: CALL_OW 72
10462: PUSH
10463: LD_INT 1
10465: ARRAY
10466: PPUSH
10467: LD_STRING DArm-1-explore
10469: PPUSH
10470: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10474: LD_EXP 28
10478: PPUSH
10479: LD_STRING DA-1-explore
10481: PPUSH
10482: CALL_OW 88
// if Sophia then
10486: LD_EXP 30
10490: IFFALSE 10568
// begin Say ( Sophia , DS-2-explore ) ;
10492: LD_EXP 30
10496: PPUSH
10497: LD_STRING DS-2-explore
10499: PPUSH
10500: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10504: LD_EXP 28
10508: PPUSH
10509: LD_STRING DA-2-explore
10511: PPUSH
10512: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10516: LD_EXP 30
10520: PPUSH
10521: LD_EXP 28
10525: PPUSH
10526: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10530: LD_EXP 28
10534: PPUSH
10535: LD_EXP 30
10539: PPUSH
10540: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10544: LD_EXP 30
10548: PPUSH
10549: LD_STRING DS-3-explore
10551: PPUSH
10552: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10556: LD_EXP 28
10560: PPUSH
10561: LD_STRING DA-3-explore
10563: PPUSH
10564: CALL_OW 88
// end ; if Mike then
10568: LD_EXP 26
10572: IFFALSE 10628
// begin Say ( Mike , DM-1-explore ) ;
10574: LD_EXP 26
10578: PPUSH
10579: LD_STRING DM-1-explore
10581: PPUSH
10582: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10586: LD_EXP 24
10590: PPUSH
10591: LD_STRING DH-2-explore
10593: PPUSH
10594: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10598: LD_EXP 26
10602: PPUSH
10603: LD_STRING DM-2-explore
10605: PPUSH
10606: CALL_OW 88
// if Kaia then
10610: LD_EXP 29
10614: IFFALSE 10628
// Say ( Kaia , DK-1-explore ) ;
10616: LD_EXP 29
10620: PPUSH
10621: LD_STRING DK-1-explore
10623: PPUSH
10624: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10628: LD_INT 22
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: PPUSH
10643: CALL_OW 139
// Video ( false ) ;
10647: LD_INT 0
10649: PPUSH
10650: CALL 1004 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10654: LD_STRING BuildBase
10656: PPUSH
10657: CALL_OW 337
// SaveForQuickRestart ;
10661: CALL_OW 22
// end ;
10665: LD_VAR 0 1
10669: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10670: LD_EXP 5
10674: NOT
10675: PUSH
10676: LD_EXP 6
10680: NOT
10681: AND
10682: PUSH
10683: LD_INT 5
10685: PPUSH
10686: LD_INT 22
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 70
10700: AND
10701: PUSH
10702: LD_EXP 6
10706: NOT
10707: AND
10708: IFFALSE 10793
10710: GO 10712
10712: DISABLE
// begin if Mike then
10713: LD_EXP 26
10717: IFFALSE 10733
// Say ( Mike , DM-1-scout ) else
10719: LD_EXP 26
10723: PPUSH
10724: LD_STRING DM-1-scout
10726: PPUSH
10727: CALL_OW 88
10731: GO 10764
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10733: LD_EXP 38
10737: PPUSH
10738: LD_INT 26
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PPUSH
10748: CALL_OW 72
10752: PUSH
10753: LD_INT 1
10755: ARRAY
10756: PPUSH
10757: LD_STRING DArm-1-explore
10759: PPUSH
10760: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10764: LD_INT 54
10766: PPUSH
10767: LD_INT 35
10769: PPUSH
10770: LD_INT 2
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10780: LD_INT 54
10782: PPUSH
10783: LD_INT 35
10785: PPUSH
10786: LD_INT 2
10788: PPUSH
10789: CALL_OW 331
// end ;
10793: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10794: LD_INT 6
10796: PPUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 70
10811: PUSH
10812: LD_EXP 6
10816: NOT
10817: AND
10818: IFFALSE 11072
10820: GO 10822
10822: DISABLE
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
10827: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_EXP 38
10837: PPUSH
10838: LD_INT 26
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 72
10852: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: LD_EXP 38
10862: PPUSH
10863: LD_INT 26
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 72
10877: ST_TO_ADDR
// DialogueOn ;
10878: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10882: LD_INT 36
10884: PPUSH
10885: LD_INT 22
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 8
10893: PPUSH
10894: CALL_OW 330
// dwait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 68
// speakerOk := false ;
10905: LD_ADDR_VAR 0 3
10909: PUSH
10910: LD_INT 0
10912: ST_TO_ADDR
// if Mike then
10913: LD_EXP 26
10917: IFFALSE 10939
// speakerOk := Say ( Mike , DM-1-spot ) else
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_EXP 26
10928: PPUSH
10929: LD_STRING DM-1-spot
10931: PPUSH
10932: CALL_OW 88
10936: ST_TO_ADDR
10937: GO 10967
// if randomMen then
10939: LD_VAR 0 1
10943: IFFALSE 10967
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10945: LD_ADDR_VAR 0 3
10949: PUSH
10950: LD_VAR 0 1
10954: PUSH
10955: LD_INT 1
10957: ARRAY
10958: PPUSH
10959: LD_STRING DArm-1-spot-a
10961: PPUSH
10962: CALL_OW 88
10966: ST_TO_ADDR
// if speakerOk then
10967: LD_VAR 0 3
10971: IFFALSE 11015
// begin if Givi then
10973: LD_EXP 25
10977: IFFALSE 10993
// Say ( Givi , DG-1-spot ) else
10979: LD_EXP 25
10983: PPUSH
10984: LD_STRING DG-1-spot
10986: PPUSH
10987: CALL_OW 88
10991: GO 11015
// if randomWomen then
10993: LD_VAR 0 2
10997: IFFALSE 11015
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10999: LD_VAR 0 2
11003: PUSH
11004: LD_INT 1
11006: ARRAY
11007: PPUSH
11008: LD_STRING DArf-1-spot-a
11010: PPUSH
11011: CALL_OW 88
// end ; if Mike then
11015: LD_EXP 26
11019: IFFALSE 11035
// Say ( Heike , DH-1-spot ) else
11021: LD_EXP 24
11025: PPUSH
11026: LD_STRING DH-1-spot
11028: PPUSH
11029: CALL_OW 88
11033: GO 11047
// Say ( Heike , DH-1-spot-a ) ;
11035: LD_EXP 24
11039: PPUSH
11040: LD_STRING DH-1-spot-a
11042: PPUSH
11043: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11047: LD_INT 36
11049: PPUSH
11050: LD_INT 22
11052: PPUSH
11053: LD_INT 2
11055: PPUSH
11056: CALL_OW 331
// DialogueOff ;
11060: CALL_OW 7
// americanBaseSpoted := true ;
11064: LD_ADDR_EXP 5
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// end ;
11072: PPOPN 3
11074: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11075: LD_EXP 5
11079: NOT
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 101
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: AND
11110: PUSH
11111: LD_EXP 6
11115: NOT
11116: AND
11117: IFFALSE 11203
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
// begin americanBaseSpoted := true ;
11125: LD_ADDR_EXP 5
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_EXP 38
11142: PPUSH
11143: LD_INT 26
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PPUSH
11153: CALL_OW 72
11157: ST_TO_ADDR
// if not randomMen then
11158: LD_VAR 0 1
11162: NOT
11163: IFFALSE 11167
// exit ;
11165: GO 11203
// DialogueOn ;
11167: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11171: LD_VAR 0 1
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_STRING DArm-1-spot-a
11182: PPUSH
11183: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11187: LD_EXP 24
11191: PPUSH
11192: LD_STRING DH-1-spot-a
11194: PPUSH
11195: CALL_OW 88
// DialogueOff ;
11199: CALL_OW 7
// end ;
11203: PPOPN 1
11205: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
11206: LD_INT 11
11208: PPUSH
11209: CALL_OW 255
11213: PUSH
11214: LD_INT 2
11216: EQUAL
11217: PUSH
11218: LD_INT 7
11220: PPUSH
11221: LD_INT 22
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: LD_INT 50
11236: PUSH
11237: EMPTY
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 30
11246: PUSH
11247: LD_INT 31
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: PUSH
11265: LD_INT 7
11267: PPUSH
11268: LD_INT 22
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: PUSH
11283: LD_INT 1
11285: GREATER
11286: OR
11287: PUSH
11288: LD_INT 6
11290: PPUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PPUSH
11301: CALL_OW 70
11305: OR
11306: IFFALSE 11849
11308: GO 11310
11310: DISABLE
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
// begin americanBaseCaptured := true ;
11315: LD_ADDR_EXP 6
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11323: LD_INT 105
11325: PPUSH
11326: CALL_OW 67
// if IsOk ( usCommander ) then
11330: LD_EXP 41
11334: PPUSH
11335: CALL_OW 302
11339: IFFALSE 11402
// begin usForces := usForces union usCommander ;
11341: LD_ADDR_EXP 40
11345: PUSH
11346: LD_EXP 40
11350: PUSH
11351: LD_EXP 41
11355: UNION
11356: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11357: LD_INT 6
11359: PPUSH
11360: LD_INT 22
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PPUSH
11370: CALL_OW 70
11374: IFFALSE 11390
// Say ( usCommander , DUsm-2-assault ) else
11376: LD_EXP 41
11380: PPUSH
11381: LD_STRING DUsm-2-assault
11383: PPUSH
11384: CALL_OW 88
11388: GO 11402
// Say ( usCommander , DUsm-1-assault ) ;
11390: LD_EXP 41
11394: PPUSH
11395: LD_STRING DUsm-1-assault
11397: PPUSH
11398: CALL_OW 88
// end ; for i in usForces do
11402: LD_ADDR_VAR 0 1
11406: PUSH
11407: LD_EXP 40
11411: PUSH
11412: FOR_IN
11413: IFFALSE 11459
// begin if IsInUnit ( i ) then
11415: LD_VAR 0 1
11419: PPUSH
11420: CALL_OW 310
11424: IFFALSE 11435
// ComExitBuilding ( i ) ;
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 122
// wait ( 3 ) ;
11435: LD_INT 3
11437: PPUSH
11438: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11442: LD_VAR 0 1
11446: PPUSH
11447: LD_INT 34
11449: PPUSH
11450: LD_INT 67
11452: PPUSH
11453: CALL_OW 111
// end ;
11457: GO 11412
11459: POP
11460: POP
// Say ( Heike , DH-1-assault ) ;
11461: LD_EXP 24
11465: PPUSH
11466: LD_STRING DH-1-assault
11468: PPUSH
11469: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11473: LD_INT 35
11475: PPUSH
11476: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11480: LD_VAR 0 1
11484: PPUSH
11485: LD_INT 34
11487: PPUSH
11488: LD_INT 67
11490: PPUSH
11491: CALL_OW 111
// until not usForces ;
11495: LD_EXP 40
11499: NOT
11500: IFFALSE 11473
// music_nat := 2 ;
11502: LD_ADDR_OWVAR 71
11506: PUSH
11507: LD_INT 2
11509: ST_TO_ADDR
// music_class := music_victory ;
11510: LD_ADDR_OWVAR 72
11514: PUSH
11515: LD_INT 4
11517: ST_TO_ADDR
// if not americanHasEscaped then
11518: LD_EXP 7
11522: NOT
11523: IFFALSE 11537
// Say ( Heike , DH-2-assault ) ;
11525: LD_EXP 24
11529: PPUSH
11530: LD_STRING DH-2-assault
11532: PPUSH
11533: CALL_OW 88
// wait ( 0 0$2 ) ;
11537: LD_INT 70
11539: PPUSH
11540: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 50
11576: PUSH
11577: EMPTY
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: NOT
11594: IFFALSE 11544
// Video ( true ) ;
11596: LD_INT 1
11598: PPUSH
11599: CALL 1004 0 1
// if not GetSide ( usDepot ) = 2 then
11603: LD_INT 11
11605: PPUSH
11606: CALL_OW 255
11610: PUSH
11611: LD_INT 2
11613: EQUAL
11614: NOT
11615: IFFALSE 11627
// SetSide ( usDepot , 2 ) ;
11617: LD_INT 11
11619: PPUSH
11620: LD_INT 2
11622: PPUSH
11623: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11627: LD_INT 35
11629: PPUSH
11630: LD_INT 22
11632: PPUSH
11633: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11637: LD_EXP 24
11641: PPUSH
11642: LD_INT 35
11644: PPUSH
11645: LD_INT 22
11647: PPUSH
11648: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11652: LD_EXP 24
11656: PPUSH
11657: LD_INT 38
11659: PPUSH
11660: LD_INT 25
11662: PPUSH
11663: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11667: LD_EXP 37
11671: PUSH
11672: LD_EXP 38
11676: UNION
11677: PPUSH
11678: LD_INT 39
11680: PPUSH
11681: LD_INT 26
11683: PPUSH
11684: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11688: LD_EXP 37
11692: PUSH
11693: LD_EXP 38
11697: UNION
11698: PPUSH
11699: LD_EXP 24
11703: PPUSH
11704: CALL_OW 179
// p := 0 ;
11708: LD_ADDR_VAR 0 2
11712: PUSH
11713: LD_INT 0
11715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11716: LD_INT 35
11718: PPUSH
11719: CALL_OW 67
// p := p + 1 ;
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_VAR 0 2
11732: PUSH
11733: LD_INT 1
11735: PLUS
11736: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11737: LD_EXP 24
11741: PPUSH
11742: CALL_OW 314
11746: NOT
11747: PUSH
11748: LD_VAR 0 2
11752: PUSH
11753: LD_INT 10
11755: GREATER
11756: OR
11757: IFFALSE 11716
// Say ( Heike , DH-1-capture ) ;
11759: LD_EXP 24
11763: PPUSH
11764: LD_STRING DH-1-capture
11766: PPUSH
11767: CALL_OW 88
// if Markov then
11771: LD_EXP 31
11775: IFFALSE 11789
// Say ( Markov , DMar-1-capture ) ;
11777: LD_EXP 31
11781: PPUSH
11782: LD_STRING DMar-1-capture
11784: PPUSH
11785: CALL_OW 88
// if Sophia then
11789: LD_EXP 30
11793: IFFALSE 11819
// begin Say ( Heike , DH-2-capture ) ;
11795: LD_EXP 24
11799: PPUSH
11800: LD_STRING DH-2-capture
11802: PPUSH
11803: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11807: LD_EXP 30
11811: PPUSH
11812: LD_STRING DS-1-capture
11814: PPUSH
11815: CALL_OW 88
// end ; Video ( false ) ;
11819: LD_INT 0
11821: PPUSH
11822: CALL 1004 0 1
// music_nat := music_auto ;
11826: LD_ADDR_OWVAR 71
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// music_class := music_auto ;
11834: LD_ADDR_OWVAR 72
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11842: LD_STRING ConstructBase
11844: PPUSH
11845: CALL_OW 337
// end ;
11849: PPOPN 2
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 30
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 3
11874: PUSH
11875: LD_INT 57
11877: PUSH
11878: EMPTY
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: IFFALSE 12137
11896: GO 11898
11898: DISABLE
// begin workshopBuilded := true ;
11899: LD_ADDR_EXP 9
11903: PUSH
11904: LD_INT 1
11906: ST_TO_ADDR
// if IsOk ( Markov ) then
11907: LD_EXP 31
11911: PPUSH
11912: CALL_OW 302
11916: IFFALSE 11975
// begin Say ( Heike , DH-1-shop-a ) ;
11918: LD_EXP 24
11922: PPUSH
11923: LD_STRING DH-1-shop-a
11925: PPUSH
11926: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11930: LD_INT 47
11932: PPUSH
11933: LD_INT 2
11935: PPUSH
11936: CALL_OW 321
11940: PUSH
11941: LD_INT 2
11943: EQUAL
11944: PUSH
11945: LD_INT 45
11947: PPUSH
11948: LD_INT 2
11950: PPUSH
11951: CALL_OW 321
11955: PUSH
11956: LD_INT 2
11958: EQUAL
11959: AND
11960: NOT
11961: IFFALSE 11975
// Say ( Markov , DMar-1-shop-a ) ;
11963: LD_EXP 31
11967: PPUSH
11968: LD_STRING DMar-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11975: LD_INT 35
11977: PPUSH
11978: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ;
11982: LD_INT 47
11984: PPUSH
11985: LD_INT 2
11987: PPUSH
11988: CALL_OW 321
11992: PUSH
11993: LD_INT 2
11995: EQUAL
11996: PUSH
11997: LD_INT 45
11999: PPUSH
12000: LD_INT 2
12002: PPUSH
12003: CALL_OW 321
12007: PUSH
12008: LD_INT 2
12010: EQUAL
12011: AND
12012: IFFALSE 11975
// DialogueOn ;
12014: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12018: LD_EXP 31
12022: PPUSH
12023: LD_STRING DMar-1-shop
12025: PPUSH
12026: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12030: LD_EXP 24
12034: PPUSH
12035: LD_STRING DH-1-shop
12037: PPUSH
12038: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12042: LD_EXP 31
12046: PPUSH
12047: LD_STRING DMar-2-shop
12049: PPUSH
12050: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12054: LD_EXP 31
12058: PPUSH
12059: LD_STRING DMar-3-shop
12061: PPUSH
12062: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12066: LD_EXP 24
12070: PPUSH
12071: LD_STRING DH-2-shop
12073: PPUSH
12074: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12078: LD_EXP 31
12082: PPUSH
12083: LD_STRING DMar-4-shop
12085: PPUSH
12086: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12090: LD_EXP 24
12094: PPUSH
12095: LD_STRING DH-3-shop
12097: PPUSH
12098: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12102: LD_EXP 31
12106: PPUSH
12107: LD_STRING DMar-5-shop
12109: PPUSH
12110: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12114: LD_EXP 24
12118: PPUSH
12119: LD_STRING DH-4-shop
12121: PPUSH
12122: CALL_OW 88
// DialogueOff ;
12126: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12130: LD_STRING ConstructVeh
12132: PPUSH
12133: CALL_OW 337
// end ;
12137: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12138: LD_INT 2
12140: PPUSH
12141: LD_INT 2
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL 1175 0 3
12151: PUSH
12152: LD_INT 0
12154: EQUAL
12155: IFFALSE 12167
12157: GO 12159
12159: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12160: LD_STRING Techs
12162: PPUSH
12163: CALL_OW 337
12167: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12168: LD_EXP 31
12172: PPUSH
12173: CALL_OW 302
12177: PUSH
12178: LD_INT 22
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 2
12190: PUSH
12191: LD_INT 34
12193: PUSH
12194: LD_INT 22
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 35
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: AND
12225: IFFALSE 12332
12227: GO 12229
12229: DISABLE
// begin DialogueOn ;
12230: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12234: LD_INT 22
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 34
12249: PUSH
12250: LD_INT 22
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 35
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: PPUSH
12281: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12285: LD_INT 10
12287: PPUSH
12288: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12292: LD_EXP 24
12296: PPUSH
12297: LD_STRING DH-1-bal
12299: PPUSH
12300: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12304: LD_EXP 31
12308: PPUSH
12309: LD_STRING DMar-1-bal
12311: PPUSH
12312: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12316: LD_EXP 24
12320: PPUSH
12321: LD_STRING DH-2-bal
12323: PPUSH
12324: CALL_OW 88
// DialogueOff ;
12328: CALL_OW 7
// end ;
12332: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12333: LD_EXP 28
12337: PPUSH
12338: CALL_OW 302
12342: PUSH
12343: LD_INT 22
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: LD_INT 6
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 69
12371: AND
12372: IFFALSE 12433
12374: GO 12376
12376: DISABLE
// begin DialogueOn ;
12377: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12381: LD_EXP 28
12385: PPUSH
12386: LD_STRING DA-1-lab
12388: PPUSH
12389: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12393: LD_EXP 24
12397: PPUSH
12398: LD_STRING DH-1-lab
12400: PPUSH
12401: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12405: LD_EXP 28
12409: PPUSH
12410: LD_STRING DA-2-lab
12412: PPUSH
12413: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12417: LD_EXP 24
12421: PPUSH
12422: LD_STRING DH-2-lab
12424: PPUSH
12425: CALL_OW 88
// DialogueOff ;
12429: CALL_OW 7
// end ;
12433: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12434: LD_EXP 29
12438: PPUSH
12439: CALL_OW 302
12443: PUSH
12444: LD_INT 22
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 15
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 69
12472: AND
12473: IFFALSE 12653
12475: GO 12477
12477: DISABLE
12478: LD_INT 0
12480: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12481: LD_ADDR_VAR 0 1
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 15
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PPUSH
12510: CALL_OW 69
12514: ST_TO_ADDR
// Video ( true ) ;
12515: LD_INT 1
12517: PPUSH
12518: CALL 1004 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12522: LD_VAR 0 1
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: PPUSH
12544: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12548: LD_VAR 0 1
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PPUSH
12557: LD_INT 35
12559: PPUSH
12560: LD_INT 28
12562: PPUSH
12563: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12567: LD_VAR 0 1
12571: PUSH
12572: LD_INT 1
12574: ARRAY
12575: PPUSH
12576: LD_INT 36
12578: PPUSH
12579: LD_INT 17
12581: PPUSH
12582: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12586: LD_EXP 29
12590: PPUSH
12591: LD_STRING DK-1-apesol
12593: PPUSH
12594: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12598: LD_EXP 28
12602: PPUSH
12603: LD_STRING DA-1-apesol
12605: PPUSH
12606: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12610: LD_EXP 29
12614: PPUSH
12615: LD_STRING DK-2-apesol
12617: PPUSH
12618: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12622: LD_EXP 28
12626: PPUSH
12627: LD_STRING DA-2-apesol
12629: PPUSH
12630: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12634: LD_EXP 29
12638: PPUSH
12639: LD_STRING DK-3-apesol
12641: PPUSH
12642: CALL_OW 88
// Video ( false ) ;
12646: LD_INT 0
12648: PPUSH
12649: CALL 1004 0 1
// end ;
12653: PPOPN 1
12655: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12656: LD_EXP 30
12660: PPUSH
12661: CALL_OW 302
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 16
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: AND
12695: IFFALSE 12967
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_INT 2
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 25
12720: PUSH
12721: LD_INT 16
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// Video ( true ) ;
12737: LD_INT 1
12739: PPUSH
12740: CALL 1004 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12744: LD_INT 5
12746: PPUSH
12747: LD_INT 35
12749: PPUSH
12750: LD_INT 22
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12760: LD_EXP 30
12764: PPUSH
12765: LD_VAR 0 1
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12778: LD_VAR 0 1
12782: PUSH
12783: LD_INT 1
12785: ARRAY
12786: PPUSH
12787: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12791: LD_VAR 0 1
12795: PUSH
12796: LD_INT 1
12798: ARRAY
12799: PPUSH
12800: CALL_OW 122
// wait ( 0 0$2 ) ;
12804: LD_INT 70
12806: PPUSH
12807: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12811: LD_EXP 30
12815: PPUSH
12816: LD_STRING DS-1-apeeng
12818: PPUSH
12819: CALL_OW 88
// if IsOk ( Kamil ) then
12823: LD_EXP 27
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12960
// begin Say ( Kamil , DKam-1-apeeng ) ;
12834: LD_EXP 27
12838: PPUSH
12839: LD_STRING DKam-1-apeeng
12841: PPUSH
12842: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12846: LD_EXP 30
12850: PPUSH
12851: LD_STRING DS-2-apeeng
12853: PPUSH
12854: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12858: LD_EXP 27
12862: PPUSH
12863: LD_STRING DKam-2-apeeng
12865: PPUSH
12866: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12870: LD_EXP 30
12874: PPUSH
12875: LD_STRING DS-3-apeeng
12877: PPUSH
12878: CALL_OW 88
// if not IsOK ( Kaia ) then
12882: LD_EXP 29
12886: PPUSH
12887: CALL_OW 302
12891: NOT
12892: IFFALSE 12903
// begin Video ( false ) ;
12894: LD_INT 0
12896: PPUSH
12897: CALL 1004 0 1
// exit ;
12901: GO 12967
// end ; Say ( Kaia , DK-1-apeeng ) ;
12903: LD_EXP 29
12907: PPUSH
12908: LD_STRING DK-1-apeeng
12910: PPUSH
12911: CALL_OW 88
// if not IsOk ( Givi ) then
12915: LD_EXP 25
12919: PPUSH
12920: CALL_OW 302
12924: NOT
12925: IFFALSE 12936
// begin Video ( false ) ;
12927: LD_INT 0
12929: PPUSH
12930: CALL 1004 0 1
// exit ;
12934: GO 12967
// end ; Say ( Givi , DG-1-apeeng ) ;
12936: LD_EXP 25
12940: PPUSH
12941: LD_STRING DG-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12948: LD_EXP 29
12952: PPUSH
12953: LD_STRING DK-2-apeeng
12955: PPUSH
12956: CALL_OW 88
// end ; Video ( false ) ;
12960: LD_INT 0
12962: PPUSH
12963: CALL 1004 0 1
// end ;
12967: PPOPN 1
12969: END
// every 0 0$1 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12970: LD_EXP 4
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 30
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 69
13003: AND
13004: IFFALSE 13162
13006: GO 13008
13008: DISABLE
// begin DialogueOn ;
13009: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13013: LD_EXP 32
13017: PPUSH
13018: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13022: LD_EXP 32
13026: PPUSH
13027: LD_STRING DF-1-distribution
13029: PPUSH
13030: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13034: LD_EXP 24
13038: PPUSH
13039: LD_STRING DH-2-distribution
13041: PPUSH
13042: CALL_OW 88
// if IsOk ( Kaia ) then
13046: LD_EXP 29
13050: PPUSH
13051: CALL_OW 302
13055: IFFALSE 13116
// begin Say ( Kaia , DK-1-distribution ) ;
13057: LD_EXP 29
13061: PPUSH
13062: LD_STRING DK-1-distribution
13064: PPUSH
13065: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13069: LD_EXP 24
13073: PPUSH
13074: LD_STRING DH-1-distribution
13076: PPUSH
13077: CALL_OW 88
// if IsOk ( Givi ) then
13081: LD_EXP 25
13085: PPUSH
13086: CALL_OW 302
13090: IFFALSE 13116
// begin Say ( Givi , DG-1-distribution ) ;
13092: LD_EXP 25
13096: PPUSH
13097: LD_STRING DG-1-distribution
13099: PPUSH
13100: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13104: LD_EXP 24
13108: PPUSH
13109: LD_STRING DH-3-distribution
13111: PPUSH
13112: CALL_OW 88
// end ; end ; DialogueOff ;
13116: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13120: LD_STRING Crates1
13122: PPUSH
13123: CALL_OW 337
// farmerRequestedCrates := 300 ;
13127: LD_ADDR_EXP 13
13131: PUSH
13132: LD_INT 300
13134: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13135: LD_STRING FarmerCrates
13137: PPUSH
13138: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13142: LD_INT 10
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13152: LD_INT 108
13154: PPUSH
13155: LD_INT 61
13157: PPUSH
13158: CALL_OW 86
// end ;
13162: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13163: LD_EXP 6
13167: PUSH
13168: LD_INT 22
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: LD_INT 57
13183: PUSH
13184: EMPTY
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 2
13193: PUSH
13194: LD_INT 30
13196: PUSH
13197: LD_INT 6
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 30
13206: PUSH
13207: LD_INT 7
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: AND
13229: PUSH
13230: LD_INT 22
13232: PUSH
13233: LD_INT 2
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 3
13242: PUSH
13243: LD_INT 57
13245: PUSH
13246: EMPTY
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 30
13255: PUSH
13256: LD_INT 4
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: AND
13273: IFFALSE 13437
13275: GO 13277
13277: DISABLE
13278: LD_INT 0
13280: PPUSH
// begin wait ( 0 0$10 ) ;
13281: LD_INT 350
13283: PPUSH
13284: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13288: LD_ADDR_VAR 0 1
13292: PUSH
13293: LD_EXP 38
13297: PPUSH
13298: LD_INT 26
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13327: LD_EXP 24
13331: PPUSH
13332: LD_STRING DH-1-task
13334: PPUSH
13335: CALL_OW 88
// if IsOk ( Sophia ) then
13339: LD_EXP 30
13343: PPUSH
13344: CALL_OW 302
13348: IFFALSE 13388
// begin Say ( Sophia , DS-1-task ) ;
13350: LD_EXP 30
13354: PPUSH
13355: LD_STRING DS-1-task
13357: PPUSH
13358: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13362: LD_EXP 30
13366: PPUSH
13367: LD_STRING DS-2-task
13369: PPUSH
13370: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13374: LD_EXP 24
13378: PPUSH
13379: LD_STRING DH-2-task
13381: PPUSH
13382: CALL_OW 88
// end else
13386: GO 13422
// if eng then
13388: LD_VAR 0 1
13392: IFFALSE 13422
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 1
13401: ARRAY
13402: PPUSH
13403: LD_STRING DArm-1-task
13405: PPUSH
13406: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13410: LD_EXP 24
13414: PPUSH
13415: LD_STRING DH-2-task
13417: PPUSH
13418: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13422: LD_STRING BaseConstructed
13424: PPUSH
13425: CALL_OW 337
// allowConvoys := true ;
13429: LD_ADDR_EXP 11
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// end ;
13437: PPOPN 1
13439: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13440: LD_INT 22
13442: PUSH
13443: LD_INT 4
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 34
13452: PUSH
13453: LD_INT 12
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: IFFALSE 13636
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
// begin wait ( 0 0$2 ) ;
13478: LD_INT 70
13480: PPUSH
13481: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13485: LD_ADDR_VAR 0 1
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 34
13502: PUSH
13503: LD_INT 12
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_VAR 0 1
13528: PUSH
13529: LD_INT 1
13531: ARRAY
13532: PPUSH
13533: CALL_OW 250
13537: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: CALL_OW 251
13556: ST_TO_ADDR
// DialogueOn ;
13557: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13575: LD_VAR 0 2
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 2
13587: PPUSH
13588: LD_INT 6
13590: NEG
13591: PPUSH
13592: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13596: LD_INT 10
13598: PPUSH
13599: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13603: LD_EXP 24
13607: PPUSH
13608: LD_STRING DH-1-seecargo
13610: PPUSH
13611: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13615: LD_VAR 0 2
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_INT 2
13627: PPUSH
13628: CALL_OW 331
// DialogueOff ;
13632: CALL_OW 7
// end ;
13636: PPOPN 3
13638: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13639: LD_EXP 4
13643: PUSH
13644: LD_EXP 12
13648: PUSH
13649: LD_INT 300
13651: GREATEREQUAL
13652: AND
13653: IFFALSE 13725
13655: GO 13657
13657: DISABLE
// begin DialogueOn ;
13658: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13662: LD_EXP 32
13666: PPUSH
13667: LD_STRING DF-1-delivery-2
13669: PPUSH
13670: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13674: LD_EXP 24
13678: PPUSH
13679: LD_STRING DH-1-delivery-2
13681: PPUSH
13682: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13686: LD_EXP 32
13690: PPUSH
13691: LD_STRING DF-2-delivery-2
13693: PPUSH
13694: CALL_OW 94
// DialogueOff ;
13698: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13702: LD_STRING Crates2
13704: PPUSH
13705: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13709: LD_ADDR_EXP 14
13713: PUSH
13714: LD_INT 63000
13716: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13717: LD_ADDR_EXP 13
13721: PUSH
13722: LD_INT 600
13724: ST_TO_ADDR
// end ;
13725: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
13726: LD_EXP 4
13730: PUSH
13731: LD_EXP 12
13735: PUSH
13736: LD_INT 600
13738: GREATEREQUAL
13739: AND
13740: IFFALSE 13906
13742: GO 13744
13744: DISABLE
// begin DialogueOn ;
13745: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13749: LD_EXP 32
13753: PPUSH
13754: LD_STRING DF-1-delivery-3
13756: PPUSH
13757: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13761: LD_EXP 24
13765: PPUSH
13766: LD_STRING DH-1-delivery-3
13768: PPUSH
13769: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13773: LD_EXP 32
13777: PPUSH
13778: LD_STRING DF-2-delivery-3
13780: PPUSH
13781: CALL_OW 94
// if IsOk ( Kaia ) then
13785: LD_EXP 29
13789: PPUSH
13790: CALL_OW 302
13794: IFFALSE 13844
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13796: LD_EXP 29
13800: PPUSH
13801: LD_STRING DK-1-delivery-3
13803: PPUSH
13804: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13808: LD_EXP 24
13812: PPUSH
13813: LD_STRING DH-2-delivery-3
13815: PPUSH
13816: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13820: LD_EXP 25
13824: PPUSH
13825: LD_STRING DG-1-delivery-3
13827: PPUSH
13828: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13832: LD_EXP 26
13836: PPUSH
13837: LD_STRING DM-1-delivery-3
13839: PPUSH
13840: CALL_OW 88
// end ; DialogueOff ;
13844: CALL_OW 7
// if Difficulty = 2 then
13848: LD_OWVAR 67
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13883
// begin ChangeMissionObjectives ( Crates3 ) ;
13858: LD_STRING Crates3
13860: PPUSH
13861: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13865: LD_ADDR_EXP 14
13869: PUSH
13870: LD_INT 63000
13872: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13873: LD_ADDR_EXP 13
13877: PUSH
13878: LD_INT 900
13880: ST_TO_ADDR
// end else
13881: GO 13906
// begin ChangeMissionObjectives ( Crates4 ) ;
13883: LD_STRING Crates4
13885: PPUSH
13886: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13890: LD_ADDR_EXP 14
13894: PUSH
13895: LD_INT 63000
13897: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13898: LD_ADDR_EXP 13
13902: PUSH
13903: LD_INT 1200
13905: ST_TO_ADDR
// end ; end ;
13906: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13907: LD_EXP 4
13911: PUSH
13912: LD_EXP 12
13916: PUSH
13917: LD_INT 600
13919: PUSH
13920: LD_INT 900
13922: PUSH
13923: LD_INT 1200
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: LD_OWVAR 67
13935: ARRAY
13936: GREATEREQUAL
13937: AND
13938: PUSH
13939: LD_EXP 13
13943: PUSH
13944: LD_EXP 14
13948: LESSEQUAL
13949: AND
13950: IFFALSE 14023
13952: GO 13954
13954: DISABLE
// begin retreatAllowed := true ;
13955: LD_ADDR_EXP 10
13959: PUSH
13960: LD_INT 1
13962: ST_TO_ADDR
// display_strings := [ ] ;
13963: LD_ADDR_OWVAR 47
13967: PUSH
13968: EMPTY
13969: ST_TO_ADDR
// DialogueOn ;
13970: CALL_OW 6
// Video ( true ) ;
13974: LD_INT 1
13976: PPUSH
13977: CALL 1004 0 1
// SayRadio ( Omar , DO-radio-end ) ;
13981: LD_EXP 33
13985: PPUSH
13986: LD_STRING DO-radio-end
13988: PPUSH
13989: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13993: LD_EXP 24
13997: PPUSH
13998: LD_STRING DH-1-radio-end
14000: PPUSH
14001: CALL_OW 88
// Video ( false ) ;
14005: LD_INT 0
14007: PPUSH
14008: CALL 1004 0 1
// DialogueOff ;
14012: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14016: LD_STRING Retreat
14018: PPUSH
14019: CALL_OW 337
// end ;
14023: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14024: LD_EXP 10
14028: IFFALSE 14198
14030: GO 14032
14032: DISABLE
14033: LD_INT 0
14035: PPUSH
14036: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14037: LD_INT 10
14039: PPUSH
14040: LD_INT 0
14042: PPUSH
14043: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: LD_EXP 35
14056: PPUSH
14057: LD_INT 25
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PPUSH
14067: CALL_OW 72
14071: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14072: LD_VAR 0 1
14076: PUSH
14077: LD_INT 102
14079: PPUSH
14080: LD_INT 69
14082: PPUSH
14083: CALL_OW 428
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: AND
14092: IFFALSE 14194
// begin SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) + 10 ) ;
14094: LD_INT 5
14096: PPUSH
14097: CALL_OW 274
14101: PPUSH
14102: LD_INT 1
14104: PPUSH
14105: LD_INT 5
14107: PPUSH
14108: CALL_OW 274
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 275
14120: PUSH
14121: LD_INT 10
14123: PLUS
14124: PPUSH
14125: CALL_OW 277
// for i in tmp do
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: LD_VAR 0 1
14138: PUSH
14139: FOR_IN
14140: IFFALSE 14164
// if IsInUnit ( i ) then
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 310
14151: IFFALSE 14162
// ComExitBuilding ( i ) ;
14153: LD_VAR 0 2
14157: PPUSH
14158: CALL_OW 122
14162: GO 14139
14164: POP
14165: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14166: LD_VAR 0 1
14170: PPUSH
14171: LD_INT 31
14173: PPUSH
14174: LD_INT 102
14176: PPUSH
14177: LD_INT 69
14179: PPUSH
14180: LD_INT 2
14182: PPUSH
14183: CALL_OW 205
// wait ( 0 0$3 ) ;
14187: LD_INT 105
14189: PPUSH
14190: CALL_OW 67
// end ; StartCargoEvacuation ;
14194: CALL 4470 0 0
// end ;
14198: PPOPN 2
14200: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14201: LD_EXP 10
14205: NOT
14206: PUSH
14207: LD_INT 5
14209: PPUSH
14210: CALL_OW 301
14214: AND
14215: IFFALSE 14239
14217: GO 14219
14219: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14220: LD_EXP 32
14224: PPUSH
14225: LD_STRING DF-1-failure
14227: PPUSH
14228: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14232: LD_STRING FarmerDepot
14234: PPUSH
14235: CALL_OW 104
// end ;
14239: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
14240: LD_EXP 10
14244: PUSH
14245: LD_EXP 24
14249: PPUSH
14250: LD_EXP 32
14254: PPUSH
14255: CALL_OW 296
14259: PUSH
14260: LD_INT 6
14262: LESS
14263: AND
14264: IFFALSE 14850
14266: GO 14268
14268: DISABLE
14269: LD_INT 0
14271: PPUSH
14272: PPUSH
14273: PPUSH
// begin allowConvoys := false ;
14274: LD_ADDR_EXP 11
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// Video ( true ) ;
14282: LD_INT 1
14284: PPUSH
14285: CALL 1004 0 1
// ComTurnUnit ( Heike , Farmer ) ;
14289: LD_EXP 24
14293: PPUSH
14294: LD_EXP 32
14298: PPUSH
14299: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14303: LD_EXP 32
14307: PPUSH
14308: LD_EXP 24
14312: PPUSH
14313: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14317: LD_EXP 32
14321: PPUSH
14322: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14326: LD_EXP 24
14330: PPUSH
14331: LD_STRING DH-1-end
14333: PPUSH
14334: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14338: LD_EXP 32
14342: PPUSH
14343: LD_STRING DF-1-end
14345: PPUSH
14346: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14350: LD_EXP 32
14354: PPUSH
14355: LD_STRING DF-2-end
14357: PPUSH
14358: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14362: LD_EXP 24
14366: PPUSH
14367: LD_STRING DH-2-end
14369: PPUSH
14370: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14374: LD_EXP 32
14378: PPUSH
14379: LD_STRING DF-3-end
14381: PPUSH
14382: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14386: LD_EXP 24
14390: PPUSH
14391: LD_STRING DH-3-end
14393: PPUSH
14394: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14398: LD_EXP 25
14402: PPUSH
14403: LD_STRING DG-1-end
14405: PPUSH
14406: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14410: LD_EXP 24
14414: PPUSH
14415: LD_STRING DH-4-end
14417: PPUSH
14418: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14422: LD_EXP 32
14426: PPUSH
14427: LD_STRING DF-4-end
14429: PPUSH
14430: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14434: LD_EXP 24
14438: PPUSH
14439: LD_STRING DH-5-end
14441: PPUSH
14442: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14446: LD_EXP 32
14450: PPUSH
14451: LD_STRING DF-5-end
14453: PPUSH
14454: CALL_OW 88
// Video ( false ) ;
14458: LD_INT 0
14460: PPUSH
14461: CALL 1004 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14465: LD_ADDR_VAR 0 2
14469: PUSH
14470: LD_INT 4
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_OWVAR 67
14488: ARRAY
14489: ST_TO_ADDR
// if farmerSquad < max then
14490: LD_EXP 35
14494: PUSH
14495: LD_VAR 0 2
14499: LESS
14500: IFFALSE 14512
// max := farmerSquad ;
14502: LD_ADDR_VAR 0 2
14506: PUSH
14507: LD_EXP 35
14511: ST_TO_ADDR
// for i := 1 to max do
14512: LD_ADDR_VAR 0 1
14516: PUSH
14517: DOUBLE
14518: LD_INT 1
14520: DEC
14521: ST_TO_ADDR
14522: LD_VAR 0 2
14526: PUSH
14527: FOR_TO
14528: IFFALSE 14566
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14530: LD_EXP 35
14534: PUSH
14535: LD_INT 1
14537: ARRAY
14538: PPUSH
14539: LD_INT 2
14541: PPUSH
14542: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14546: LD_ADDR_EXP 35
14550: PUSH
14551: LD_EXP 35
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 3
14563: ST_TO_ADDR
// end ;
14564: GO 14527
14566: POP
14567: POP
// for i in Farmer ^ farmerSquad do
14568: LD_ADDR_VAR 0 1
14572: PUSH
14573: LD_EXP 32
14577: PUSH
14578: LD_EXP 35
14582: ADD
14583: PUSH
14584: FOR_IN
14585: IFFALSE 14624
// begin if IsInUnit ( i ) then
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 310
14596: IFFALSE 14607
// ComExitBuilding ( i ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_INT 102
14614: PPUSH
14615: LD_INT 7
14617: PPUSH
14618: CALL_OW 171
// end ;
14622: GO 14584
14624: POP
14625: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14626: LD_ADDR_VAR 0 1
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 5
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 21
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 69
14659: PUSH
14660: LD_INT 5
14662: DIFF
14663: PUSH
14664: FOR_IN
14665: IFFALSE 14681
// SetSide ( i , 2 ) ;
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_INT 2
14674: PPUSH
14675: CALL_OW 235
14679: GO 14664
14681: POP
14682: POP
// repeat wait ( 0 0$1 ) ;
14683: LD_INT 35
14685: PPUSH
14686: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_EXP 32
14699: PUSH
14700: LD_EXP 35
14704: ADD
14705: PPUSH
14706: LD_INT 95
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 72
14720: ST_TO_ADDR
// if tmp then
14721: LD_VAR 0 3
14725: IFFALSE 14769
// for i in tmp do
14727: LD_ADDR_VAR 0 1
14731: PUSH
14732: LD_VAR 0 3
14736: PUSH
14737: FOR_IN
14738: IFFALSE 14767
// begin farmerSquad := farmerSquad diff i ;
14740: LD_ADDR_EXP 35
14744: PUSH
14745: LD_EXP 35
14749: PUSH
14750: LD_VAR 0 1
14754: DIFF
14755: ST_TO_ADDR
// RemoveUnit ( i ) ;
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 64
// end ;
14765: GO 14737
14767: POP
14768: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14769: LD_EXP 35
14773: PUSH
14774: EMPTY
14775: EQUAL
14776: PUSH
14777: LD_EXP 32
14781: PPUSH
14782: CALL_OW 305
14786: NOT
14787: AND
14788: IFFALSE 14683
// wait ( 1 1$00 ) ;
14790: LD_INT 2100
14792: PPUSH
14793: CALL_OW 67
// SendAttack ;
14797: CALL 6871 0 0
// wait ( [ 5 5$00 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
14801: LD_INT 10500
14803: PUSH
14804: LD_INT 9450
14806: PUSH
14807: LD_INT 8400
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: PUSH
14815: LD_OWVAR 67
14819: ARRAY
14820: PPUSH
14821: CALL_OW 67
// SendAttack ;
14825: CALL 6871 0 0
// if Difficulty > 2 then
14829: LD_OWVAR 67
14833: PUSH
14834: LD_INT 2
14836: GREATER
14837: IFFALSE 14850
// begin wait ( 4 4$00 ) ;
14839: LD_INT 8400
14841: PPUSH
14842: CALL_OW 67
// SendAttack ;
14846: CALL 6871 0 0
// end ; end ;
14850: PPOPN 3
14852: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14853: LD_EXP 14
14857: PUSH
14858: LD_INT 18900
14860: LESSEQUAL
14861: IFFALSE 14910
14863: GO 14865
14865: DISABLE
// begin DialogueOn ;
14866: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14870: LD_EXP 32
14874: PPUSH
14875: LD_STRING DF-1-distribution-a
14877: PPUSH
14878: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14882: LD_EXP 24
14886: PPUSH
14887: LD_STRING DH-1-distribution-a
14889: PPUSH
14890: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14894: LD_EXP 32
14898: PPUSH
14899: LD_STRING DF-2-distribution-a
14901: PPUSH
14902: CALL_OW 94
// DialogueOff ;
14906: CALL_OW 7
// end ;
14910: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14911: LD_EXP 14
14915: PUSH
14916: LD_INT 0
14918: LESSEQUAL
14919: IFFALSE 14951
14921: GO 14923
14923: DISABLE
// begin DialogueOn ;
14924: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14928: LD_EXP 32
14932: PPUSH
14933: LD_STRING DF-3-distribution-a
14935: PPUSH
14936: CALL_OW 94
// YouLost ( Distribution ) ;
14940: LD_STRING Distribution
14942: PPUSH
14943: CALL_OW 104
// DialogueOff ;
14947: CALL_OW 7
// end ;
14951: END
// every 0 0$1 trigger vehCounter >= 2 do
14952: LD_EXP 18
14956: PUSH
14957: LD_INT 2
14959: GREATEREQUAL
14960: IFFALSE 14972
14962: GO 14964
14964: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14965: LD_STRING VehConstructed
14967: PPUSH
14968: CALL_OW 337
14972: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14973: LD_INT 22
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 34
14985: PUSH
14986: LD_INT 12
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: IFFALSE 15061
15003: GO 15005
15005: DISABLE
// begin DialogueOn ;
15006: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15010: LD_EXP 24
15014: PPUSH
15015: LD_STRING DH-1-truck
15017: PPUSH
15018: CALL_OW 88
// if IsOk ( Markov ) then
15022: LD_EXP 31
15026: PPUSH
15027: CALL_OW 302
15031: IFFALSE 15057
// begin Say ( Markov , DMar-1-truck ) ;
15033: LD_EXP 31
15037: PPUSH
15038: LD_STRING DMar-1-truck
15040: PPUSH
15041: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15045: LD_EXP 24
15049: PPUSH
15050: LD_STRING DH-2-truck
15052: PPUSH
15053: CALL_OW 88
// end ; DialogueOff ;
15057: CALL_OW 7
// end ;
15061: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15062: LD_INT 0
15064: PPUSH
15065: PPUSH
15066: PPUSH
// if IsOk ( Givi ) then
15067: LD_EXP 25
15071: PPUSH
15072: CALL_OW 302
15076: IFFALSE 15092
// begin Say ( Givi , DG-1-nocargo ) ;
15078: LD_EXP 25
15082: PPUSH
15083: LD_STRING DG-1-nocargo
15085: PPUSH
15086: CALL_OW 88
// exit ;
15090: GO 15188
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15092: LD_ADDR_VAR 0 2
15096: PUSH
15097: LD_EXP 38
15101: PPUSH
15102: LD_INT 26
15104: PUSH
15105: LD_INT 1
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 72
15116: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15117: LD_ADDR_VAR 0 3
15121: PUSH
15122: LD_EXP 38
15126: PPUSH
15127: LD_INT 26
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 72
15141: ST_TO_ADDR
// if randomMen then
15142: LD_VAR 0 2
15146: IFFALSE 15166
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15148: LD_VAR 0 2
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_STRING DArm-1-nocargo
15159: PPUSH
15160: CALL_OW 88
15164: GO 15188
// if randomWomen then
15166: LD_VAR 0 3
15170: IFFALSE 15188
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15172: LD_VAR 0 3
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: LD_STRING DArf-1-nocargo
15183: PPUSH
15184: CALL_OW 88
// end ;
15188: LD_VAR 0 1
15192: RET
// export function IncomingAttack ; begin
15193: LD_INT 0
15195: PPUSH
// if attackWave = 1 then
15196: LD_EXP 16
15200: PUSH
15201: LD_INT 1
15203: EQUAL
15204: IFFALSE 15275
// begin DialogueOn ;
15206: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15210: LD_EXP 33
15214: PPUSH
15215: LD_STRING DO-1-radio-1
15217: PPUSH
15218: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15222: LD_EXP 24
15226: PPUSH
15227: LD_STRING DH-1-radio-1-
15229: PPUSH
15230: CALL_OW 88
// if IsOk ( Markov ) then
15234: LD_EXP 31
15238: PPUSH
15239: CALL_OW 302
15243: IFFALSE 15269
// begin Say ( Markov , DMar-1-radio-1 ) ;
15245: LD_EXP 31
15249: PPUSH
15250: LD_STRING DMar-1-radio-1
15252: PPUSH
15253: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15257: LD_EXP 24
15261: PPUSH
15262: LD_STRING DH-2-radio-1
15264: PPUSH
15265: CALL_OW 88
// end ; DialogueOff ;
15269: CALL_OW 7
// end else
15273: GO 15299
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15275: LD_EXP 33
15279: PPUSH
15280: LD_STRING DO-1-radio-u
15282: PPUSH
15283: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15287: LD_EXP 24
15291: PPUSH
15292: LD_STRING DH-1-radio-u
15294: PPUSH
15295: CALL_OW 88
// end ; end ;
15299: LD_VAR 0 1
15303: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15304: LD_EXP 40
15308: PPUSH
15309: LD_INT 95
15311: PUSH
15312: LD_INT 8
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 72
15323: IFFALSE 15426
15325: GO 15327
15327: DISABLE
15328: LD_INT 0
15330: PPUSH
// begin enable ;
15331: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15332: LD_ADDR_VAR 0 1
15336: PUSH
15337: LD_EXP 40
15341: PPUSH
15342: LD_INT 95
15344: PUSH
15345: LD_INT 8
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 72
15356: PUSH
15357: FOR_IN
15358: IFFALSE 15387
// begin usForces := usForces diff i ;
15360: LD_ADDR_EXP 40
15364: PUSH
15365: LD_EXP 40
15369: PUSH
15370: LD_VAR 0 1
15374: DIFF
15375: ST_TO_ADDR
// RemoveUnit ( i ) ;
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 64
// end ;
15385: GO 15357
15387: POP
15388: POP
// if not americanHasEscaped and attackWave = 1 then
15389: LD_EXP 7
15393: NOT
15394: PUSH
15395: LD_EXP 16
15399: PUSH
15400: LD_INT 1
15402: EQUAL
15403: AND
15404: IFFALSE 15426
// begin americanHasEscaped := true ;
15406: LD_ADDR_EXP 7
15410: PUSH
15411: LD_INT 1
15413: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15414: LD_EXP 24
15418: PPUSH
15419: LD_STRING DH-2-assault-a
15421: PPUSH
15422: CALL_OW 88
// end ; end ;
15426: PPOPN 1
15428: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15429: LD_INT 4
15431: PPUSH
15432: LD_INT 22
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 70
15446: IFFALSE 15463
15448: GO 15450
15450: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15451: LD_EXP 32
15455: PPUSH
15456: LD_STRING DF-1-attack
15458: PPUSH
15459: CALL_OW 94
15463: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15464: LD_INT 5
15466: PPUSH
15467: CALL_OW 255
15471: PUSH
15472: LD_INT 2
15474: EQUAL
15475: IFFALSE 15487
15477: GO 15479
15479: DISABLE
// YouLost ( Attack ) ;
15480: LD_STRING Attack
15482: PPUSH
15483: CALL_OW 104
15487: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15488: LD_INT 22
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PPUSH
15512: CALL_OW 69
15516: NOT
15517: PUSH
15518: LD_INT 22
15520: PUSH
15521: LD_INT 4
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: NOT
15533: AND
15534: PUSH
15535: LD_EXP 10
15539: NOT
15540: AND
15541: PUSH
15542: LD_EXP 12
15546: PUSH
15547: LD_INT 90
15549: GREATER
15550: AND
15551: PUSH
15552: LD_INT 7
15554: PPUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 2
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 21
15567: PUSH
15568: LD_INT 1
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 70
15583: AND
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 50
15597: PUSH
15598: EMPTY
15599: LIST
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 0
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: AND
15621: IFFALSE 16278
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
// begin depot := usDepot ;
15633: LD_ADDR_VAR 0 5
15637: PUSH
15638: LD_INT 11
15640: ST_TO_ADDR
// if not depot then
15641: LD_VAR 0 5
15645: NOT
15646: IFFALSE 15686
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15648: LD_ADDR_VAR 0 5
15652: PUSH
15653: LD_INT 22
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 30
15665: PUSH
15666: LD_INT 0
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL_OW 69
15681: PUSH
15682: LD_INT 1
15684: ARRAY
15685: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_EXP 38
15695: PPUSH
15696: LD_INT 26
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 72
15710: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: LD_EXP 38
15720: PPUSH
15721: LD_INT 26
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PPUSH
15731: CALL_OW 72
15735: ST_TO_ADDR
// if IsOk ( Kaia ) then
15736: LD_EXP 29
15740: PPUSH
15741: CALL_OW 302
15745: IFFALSE 15766
// speaker := [ Kaia , DK ] else
15747: LD_ADDR_VAR 0 3
15751: PUSH
15752: LD_EXP 29
15756: PUSH
15757: LD_STRING DK
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: ST_TO_ADDR
15764: GO 15846
// if randomMen then
15766: LD_VAR 0 1
15770: IFFALSE 15805
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15772: LD_ADDR_VAR 0 3
15776: PUSH
15777: LD_VAR 0 1
15781: PUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 12
15794: ARRAY
15795: PUSH
15796: LD_STRING DArm
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: ST_TO_ADDR
15803: GO 15846
// if randomWomen then
15805: LD_VAR 0 2
15809: IFFALSE 15844
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_VAR 0 2
15820: PUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_VAR 0 2
15828: PPUSH
15829: CALL_OW 12
15833: ARRAY
15834: PUSH
15835: LD_STRING DArf
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: ST_TO_ADDR
15842: GO 15846
// exit ;
15844: GO 16278
// if IsInUnit ( speaker [ 1 ] ) then
15846: LD_VAR 0 3
15850: PUSH
15851: LD_INT 1
15853: ARRAY
15854: PPUSH
15855: CALL_OW 310
15859: IFFALSE 15882
// place := IsInUnit ( speaker [ 1 ] ) else
15861: LD_ADDR_VAR 0 4
15865: PUSH
15866: LD_VAR 0 3
15870: PUSH
15871: LD_INT 1
15873: ARRAY
15874: PPUSH
15875: CALL_OW 310
15879: ST_TO_ADDR
15880: GO 15896
// place := speaker [ 1 ] ;
15882: LD_ADDR_VAR 0 4
15886: PUSH
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 1
15894: ARRAY
15895: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15896: LD_VAR 0 4
15900: PPUSH
15901: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15905: LD_VAR 0 4
15909: PPUSH
15910: CALL_OW 250
15914: PPUSH
15915: LD_VAR 0 4
15919: PPUSH
15920: CALL_OW 251
15924: PPUSH
15925: CALL 3005 0 2
// wait ( 0 0$2 ) ;
15929: LD_INT 70
15931: PPUSH
15932: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15936: LD_EXP 34
15940: PPUSH
15941: CALL_OW 305
15945: NOT
15946: IFFALSE 15950
// exit ;
15948: GO 16278
// allowConvoys := false ;
15950: LD_ADDR_EXP 11
15954: PUSH
15955: LD_INT 0
15957: ST_TO_ADDR
// InGameOn ;
15958: CALL_OW 8
// wait ( 0 0$1 ) ;
15962: LD_INT 35
15964: PPUSH
15965: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15969: LD_EXP 34
15973: PPUSH
15974: LD_STRING DI-1-land
15976: PPUSH
15977: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 1
15988: ARRAY
15989: PPUSH
15990: CALL_OW 310
15994: IFFALSE 16009
// ComExit ( speaker [ 1 ] ) ;
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 1
16003: ARRAY
16004: PPUSH
16005: CALL 1108 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 1
16016: ARRAY
16017: PPUSH
16018: LD_EXP 34
16022: PPUSH
16023: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: LD_EXP 34
16040: PPUSH
16041: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16045: LD_EXP 34
16049: PPUSH
16050: LD_VAR 0 3
16054: PUSH
16055: LD_INT 1
16057: ARRAY
16058: PPUSH
16059: CALL_OW 119
// wait ( 0 0$1 ) ;
16063: LD_INT 35
16065: PPUSH
16066: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16070: LD_VAR 0 3
16074: PUSH
16075: LD_INT 1
16077: ARRAY
16078: PPUSH
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 2
16086: ARRAY
16087: PUSH
16088: LD_STRING -1-land
16090: STR
16091: PPUSH
16092: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16096: LD_EXP 34
16100: PPUSH
16101: LD_STRING DI-2-land
16103: PPUSH
16104: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16108: LD_VAR 0 3
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PPUSH
16117: LD_VAR 0 3
16121: PUSH
16122: LD_INT 2
16124: ARRAY
16125: PUSH
16126: LD_STRING -2-land
16128: STR
16129: PPUSH
16130: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16134: LD_VAR 0 3
16138: PUSH
16139: LD_INT 1
16141: ARRAY
16142: PPUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 2
16150: ARRAY
16151: PUSH
16152: LD_STRING -3-land
16154: STR
16155: PPUSH
16156: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16160: LD_EXP 24
16164: PPUSH
16165: LD_STRING DH-1-land
16167: PPUSH
16168: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16172: LD_VAR 0 5
16176: PPUSH
16177: CALL_OW 313
16181: PUSH
16182: LD_INT 6
16184: EQUAL
16185: IFFALSE 16205
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL_OW 313
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: PPUSH
16201: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16205: LD_EXP 34
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 235
// CenterOnUnits ( depot ) ;
16217: LD_VAR 0 5
16221: PPUSH
16222: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16226: LD_EXP 34
16230: PPUSH
16231: LD_VAR 0 5
16235: PPUSH
16236: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16240: LD_INT 35
16242: PPUSH
16243: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
16247: LD_EXP 34
16251: PPUSH
16252: CALL_OW 310
16256: IFFALSE 16240
// InGameOff ;
16258: CALL_OW 9
// ibrahimInDepot := true ;
16262: LD_ADDR_EXP 21
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// allowConvoys := true ;
16270: LD_ADDR_EXP 11
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// end ;
16278: PPOPN 5
16280: END
// export function IbrahimQuery ; begin
16281: LD_INT 0
16283: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16284: LD_STRING IbrahimQuery
16286: PPUSH
16287: CALL_OW 97
16291: PUSH
16292: LD_INT 1
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16609
16300: POP
// begin allowConvoys := false ;
16301: LD_ADDR_EXP 11
16305: PUSH
16306: LD_INT 0
16308: ST_TO_ADDR
// ibrahimInDepot := false ;
16309: LD_ADDR_EXP 21
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// InGameOn ;
16317: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16321: LD_EXP 24
16325: PPUSH
16326: CALL_OW 87
// wait ( 0 0$1 ) ;
16330: LD_INT 35
16332: PPUSH
16333: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16337: LD_EXP 24
16341: PPUSH
16342: LD_STRING DH-1-interrogation
16344: PPUSH
16345: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16349: LD_EXP 34
16353: PPUSH
16354: LD_STRING DI-1-interrogation
16356: PPUSH
16357: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16361: LD_EXP 24
16365: PPUSH
16366: LD_STRING DH-2-interrogation
16368: PPUSH
16369: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16373: LD_EXP 34
16377: PPUSH
16378: LD_STRING DI-2-interrogation
16380: PPUSH
16381: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16385: LD_EXP 24
16389: PPUSH
16390: LD_STRING DH-3-interrogation
16392: PPUSH
16393: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16397: LD_EXP 34
16401: PPUSH
16402: LD_STRING DI-3-interrogation
16404: PPUSH
16405: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16409: LD_EXP 24
16413: PPUSH
16414: LD_STRING DH-4-interrogation
16416: PPUSH
16417: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16421: LD_EXP 34
16425: PPUSH
16426: LD_STRING DI-4-interrogation
16428: PPUSH
16429: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16433: LD_EXP 24
16437: PPUSH
16438: LD_STRING DH-5-interrogation
16440: PPUSH
16441: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16445: LD_EXP 34
16449: PPUSH
16450: LD_STRING DI-5-interrogation
16452: PPUSH
16453: CALL_OW 88
// wait ( 0 0$1 ) ;
16457: LD_INT 35
16459: PPUSH
16460: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16464: LD_STRING IbrahimDecisionQuery
16466: PPUSH
16467: CALL_OW 97
16471: PUSH
16472: LD_INT 1
16474: DOUBLE
16475: EQUAL
16476: IFTRUE 16480
16478: GO 16504
16480: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16481: LD_EXP 34
16485: PPUSH
16486: LD_STRING DI-1-kill
16488: PPUSH
16489: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16493: LD_EXP 34
16497: PPUSH
16498: CALL_OW 66
// end ; 2 :
16502: GO 16603
16504: LD_INT 2
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 16602
16512: POP
// begin SetSide ( Ibrahim , 6 ) ;
16513: LD_EXP 34
16517: PPUSH
16518: LD_INT 6
16520: PPUSH
16521: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16525: LD_EXP 34
16529: PPUSH
16530: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16534: LD_EXP 34
16538: PPUSH
16539: LD_INT 32
16541: PPUSH
16542: LD_INT 5
16544: PPUSH
16545: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16549: LD_EXP 24
16553: PPUSH
16554: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16558: LD_EXP 24
16562: PPUSH
16563: LD_INT 36
16565: PPUSH
16566: LD_INT 21
16568: PPUSH
16569: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16573: LD_EXP 34
16577: PPUSH
16578: LD_INT 2800
16580: PPUSH
16581: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16585: LD_EXP 34
16589: PPUSH
16590: LD_INT 38
16592: PPUSH
16593: LD_INT 28
16595: PPUSH
16596: CALL_OW 171
// end ; end ;
16600: GO 16603
16602: POP
// InGameOff ;
16603: CALL_OW 9
// end ; 2 :
16607: GO 16623
16609: LD_INT 2
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16622
16617: POP
// exit ; end ;
16618: GO 16646
16620: GO 16623
16622: POP
// allowConvoys := true ;
16623: LD_ADDR_EXP 11
16627: PUSH
16628: LD_INT 1
16630: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16631: LD_INT 1400
16633: PPUSH
16634: CALL_OW 67
// ibrahimIsFree := true ;
16638: LD_ADDR_EXP 22
16642: PUSH
16643: LD_INT 1
16645: ST_TO_ADDR
// end ;
16646: LD_VAR 0 1
16650: RET
// every 0 0$10 trigger ibrahimIsFree and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot ;
16651: LD_EXP 22
16655: PUSH
16656: LD_INT 22
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 50
16668: PUSH
16669: EMPTY
16670: LIST
16671: PUSH
16672: LD_INT 30
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 69
16691: AND
16692: PUSH
16693: LD_EXP 34
16697: PPUSH
16698: LD_INT 7
16700: PPUSH
16701: CALL_OW 308
16705: AND
16706: PUSH
16707: LD_INT 6
16709: PPUSH
16710: LD_EXP 24
16714: PPUSH
16715: CALL_OW 292
16719: AND
16720: PUSH
16721: LD_INT 22
16723: PUSH
16724: LD_INT 4
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 69
16735: NOT
16736: AND
16737: PUSH
16738: LD_INT 22
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 21
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 69
16766: NOT
16767: AND
16768: IFFALSE 17416
16770: GO 16772
16772: DISABLE
16773: LD_INT 0
16775: PPUSH
16776: PPUSH
16777: PPUSH
16778: PPUSH
// begin allowConvoys := false ;
16779: LD_ADDR_EXP 11
16783: PUSH
16784: LD_INT 0
16786: ST_TO_ADDR
// depot := usDepot ;
16787: LD_ADDR_VAR 0 4
16791: PUSH
16792: LD_INT 11
16794: ST_TO_ADDR
// if not usDepot then
16795: LD_INT 11
16797: NOT
16798: IFFALSE 16845
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16800: LD_ADDR_VAR 0 4
16804: PUSH
16805: LD_INT 22
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 50
16817: PUSH
16818: EMPTY
16819: LIST
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: ST_TO_ADDR
// InGameOn ;
16845: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16849: LD_EXP 34
16853: PPUSH
16854: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16858: LD_EXP 24
16862: PPUSH
16863: LD_EXP 34
16867: PPUSH
16868: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16872: LD_EXP 34
16876: PPUSH
16877: LD_EXP 24
16881: PPUSH
16882: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16886: LD_EXP 34
16890: PPUSH
16891: LD_STRING DI-1-free
16893: PPUSH
16894: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16898: LD_EXP 24
16902: PPUSH
16903: LD_STRING DH-1-free
16905: PPUSH
16906: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16910: LD_EXP 34
16914: PPUSH
16915: LD_STRING DI-2-free
16917: PPUSH
16918: CALL_OW 88
// changeClass := 0 ;
16922: LD_ADDR_VAR 0 1
16926: PUSH
16927: LD_INT 0
16929: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16930: LD_STRING IbrahimJoinQuery
16932: PPUSH
16933: CALL_OW 97
16937: PUSH
16938: LD_INT 1
16940: DOUBLE
16941: EQUAL
16942: IFTRUE 16946
16944: GO 16957
16946: POP
// begin changeClass := 1 ;
16947: LD_ADDR_VAR 0 1
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// end ; 2 :
16955: GO 17197
16957: LD_INT 2
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 17117
16965: POP
// begin Say ( Heike , DH-1-decline ) ;
16966: LD_EXP 24
16970: PPUSH
16971: LD_STRING DH-1-decline
16973: PPUSH
16974: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16978: LD_EXP 34
16982: PPUSH
16983: LD_STRING DI-1-decline
16985: PPUSH
16986: CALL_OW 88
// InGameOff ;
16990: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16994: LD_EXP 34
16998: PPUSH
16999: LD_INT 30
17001: PPUSH
17002: LD_INT 1
17004: PPUSH
17005: CALL_OW 111
// p := 0 ;
17009: LD_ADDR_VAR 0 3
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// repeat p := p + 1 ;
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 1
17029: PLUS
17030: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17031: LD_INT 35
17033: PPUSH
17034: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17038: LD_EXP 34
17042: PPUSH
17043: LD_INT 30
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 307
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 101
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PPUSH
17078: CALL_OW 69
17082: NOT
17083: OR
17084: PUSH
17085: LD_VAR 0 3
17089: PUSH
17090: LD_INT 10
17092: GREATER
17093: OR
17094: IFFALSE 17017
// RemoveUnit ( Ibrahim ) ;
17096: LD_EXP 34
17100: PPUSH
17101: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17105: LD_INT 1
17107: PPUSH
17108: LD_STRING 03_IbrahimHasEscaped
17110: PPUSH
17111: CALL_OW 39
// end ; 3 :
17115: GO 17197
17117: LD_INT 3
17119: DOUBLE
17120: EQUAL
17121: IFTRUE 17125
17123: GO 17196
17125: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17126: LD_EXP 24
17130: PPUSH
17131: LD_STRING DH-1-radio-hq
17133: PPUSH
17134: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17138: LD_EXP 33
17142: PPUSH
17143: LD_STRING DO-1-radio-hq
17145: PPUSH
17146: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17150: LD_EXP 24
17154: PPUSH
17155: LD_STRING DH-2-radio-hq
17157: PPUSH
17158: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17162: LD_EXP 33
17166: PPUSH
17167: LD_STRING DO-2-radio-hq
17169: PPUSH
17170: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17174: LD_EXP 24
17178: PPUSH
17179: LD_STRING DH-3-radio-hq
17181: PPUSH
17182: CALL_OW 88
// changeClass := 1 ;
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// end ; end ;
17194: GO 17197
17196: POP
// if changeClass then
17197: LD_VAR 0 1
17201: IFFALSE 17416
// begin Say ( Heike , DH-1-agree ) ;
17203: LD_EXP 24
17207: PPUSH
17208: LD_STRING DH-1-agree
17210: PPUSH
17211: CALL_OW 88
// if IsOk ( Givi ) then
17215: LD_EXP 25
17219: PPUSH
17220: CALL_OW 302
17224: IFFALSE 17262
// begin Say ( Givi , DG-1-agree ) ;
17226: LD_EXP 25
17230: PPUSH
17231: LD_STRING DG-1-agree
17233: PPUSH
17234: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17238: LD_EXP 24
17242: PPUSH
17243: LD_STRING DH-2-agree
17245: PPUSH
17246: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17250: LD_EXP 25
17254: PPUSH
17255: LD_STRING DG-2-agree
17257: PPUSH
17258: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17262: LD_VAR 0 4
17266: PPUSH
17267: CALL_OW 313
17271: PUSH
17272: LD_INT 6
17274: EQUAL
17275: IFFALSE 17295
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17277: LD_VAR 0 4
17281: PPUSH
17282: CALL_OW 313
17286: PUSH
17287: LD_INT 1
17289: ARRAY
17290: PPUSH
17291: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17295: LD_EXP 34
17299: PPUSH
17300: LD_INT 2
17302: PPUSH
17303: CALL_OW 235
// ComEnterUnit ( Ibrahim , depot ) ;
17307: LD_EXP 34
17311: PPUSH
17312: LD_VAR 0 4
17316: PPUSH
17317: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17321: LD_INT 35
17323: PPUSH
17324: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17328: LD_EXP 34
17332: PPUSH
17333: CALL_OW 310
17337: IFFALSE 17321
// b := IsInUnit ( Ibrahim ) ;
17339: LD_ADDR_VAR 0 2
17343: PUSH
17344: LD_EXP 34
17348: PPUSH
17349: CALL_OW 310
17353: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
17354: LD_EXP 34
17358: PPUSH
17359: CALL_OW 64
// uc_side := 2 ;
17363: LD_ADDR_OWVAR 20
17367: PUSH
17368: LD_INT 2
17370: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17371: LD_ADDR_EXP 34
17375: PUSH
17376: LD_STRING Ibrahim
17378: PPUSH
17379: LD_INT 0
17381: PPUSH
17382: LD_STRING 
17384: PPUSH
17385: CALL 281 0 3
17389: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17390: LD_EXP 34
17394: PPUSH
17395: LD_VAR 0 2
17399: PPUSH
17400: CALL_OW 52
// InGameOff ;
17404: CALL_OW 9
// allowConvoys := true ;
17408: LD_ADDR_EXP 11
17412: PUSH
17413: LD_INT 1
17415: ST_TO_ADDR
// end ; end ;
17416: PPOPN 4
17418: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17419: LD_EXP 10
17423: PUSH
17424: LD_EXP 17
17428: PUSH
17429: LD_INT 1
17431: LESS
17432: AND
17433: IFFALSE 17824
17435: GO 17437
17437: DISABLE
// begin DialogueOn ;
17438: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17442: LD_EXP 24
17446: PPUSH
17447: LD_STRING DH-1-final
17449: PPUSH
17450: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17454: LD_OWVAR 1
17458: PUSH
17459: LD_INT 126000
17461: PUSH
17462: LD_INT 115500
17464: PUSH
17465: LD_INT 105000
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: LD_OWVAR 67
17477: ARRAY
17478: LESSEQUAL
17479: IFFALSE 17493
// AddMedal ( med1 , 1 ) else
17481: LD_STRING med1
17483: PPUSH
17484: LD_INT 1
17486: PPUSH
17487: CALL_OW 101
17491: GO 17504
// AddMedal ( med1 , - 1 ) ;
17493: LD_STRING med1
17495: PPUSH
17496: LD_INT 1
17498: NEG
17499: PPUSH
17500: CALL_OW 101
// if vehCounter >= 2 then
17504: LD_EXP 18
17508: PUSH
17509: LD_INT 2
17511: GREATEREQUAL
17512: IFFALSE 17526
// AddMedal ( med2 , 1 ) else
17514: LD_STRING med2
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 101
17524: GO 17537
// AddMedal ( med2 , - 1 ) ;
17526: LD_STRING med2
17528: PPUSH
17529: LD_INT 1
17531: NEG
17532: PPUSH
17533: CALL_OW 101
// if deadCounter = 0 then
17537: LD_EXP 8
17541: PUSH
17542: LD_INT 0
17544: EQUAL
17545: IFFALSE 17559
// AddMedal ( med3 , 1 ) else
17547: LD_STRING med3
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 101
17557: GO 17570
// AddMedal ( med3 , - 1 ) ;
17559: LD_STRING med3
17561: PPUSH
17562: LD_INT 1
17564: NEG
17565: PPUSH
17566: CALL_OW 101
// GiveMedals ( MAIN ) ;
17570: LD_STRING MAIN
17572: PPUSH
17573: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17577: LD_INT 22
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 23
17589: PUSH
17590: LD_INT 2
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 21
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL_OW 69
17616: PPUSH
17617: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17621: LD_EXP 24
17625: PPUSH
17626: LD_STRING 03_Heike
17628: PPUSH
17629: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17633: LD_EXP 28
17637: PPUSH
17638: LD_STRING 03_Aviradze
17640: PPUSH
17641: CALL_OW 38
// if Givi then
17645: LD_EXP 25
17649: IFFALSE 17663
// SaveCharacters ( Givi , 03_Givi ) ;
17651: LD_EXP 25
17655: PPUSH
17656: LD_STRING 03_Givi
17658: PPUSH
17659: CALL_OW 38
// if Mike then
17663: LD_EXP 26
17667: IFFALSE 17681
// SaveCharacters ( Mike , 03_Mike ) ;
17669: LD_EXP 26
17673: PPUSH
17674: LD_STRING 03_Mike
17676: PPUSH
17677: CALL_OW 38
// if Kamil then
17681: LD_EXP 27
17685: IFFALSE 17699
// SaveCharacters ( Kamil , 03_Kamil ) ;
17687: LD_EXP 27
17691: PPUSH
17692: LD_STRING 03_Kamil
17694: PPUSH
17695: CALL_OW 38
// if Kaia then
17699: LD_EXP 29
17703: IFFALSE 17717
// SaveCharacters ( Kaia , 03_Kaia ) ;
17705: LD_EXP 29
17709: PPUSH
17710: LD_STRING 03_Kaia
17712: PPUSH
17713: CALL_OW 38
// if Sophia then
17717: LD_EXP 30
17721: IFFALSE 17735
// SaveCharacters ( Sophia , 03_Sophia ) ;
17723: LD_EXP 30
17727: PPUSH
17728: LD_STRING 03_Sophia
17730: PPUSH
17731: CALL_OW 38
// if Markov then
17735: LD_EXP 31
17739: IFFALSE 17753
// SaveCharacters ( Markov , 03_Markov ) ;
17741: LD_EXP 31
17745: PPUSH
17746: LD_STRING 03_Markov
17748: PPUSH
17749: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17753: LD_EXP 34
17757: PUSH
17758: LD_EXP 34
17762: PPUSH
17763: CALL_OW 255
17767: PUSH
17768: LD_INT 2
17770: EQUAL
17771: AND
17772: IFFALSE 17786
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17774: LD_EXP 34
17778: PPUSH
17779: LD_STRING 03_Ibrahim
17781: PPUSH
17782: CALL_OW 38
// if heikeSecondSquad then
17786: LD_EXP 38
17790: IFFALSE 17804
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17792: LD_EXP 38
17796: PPUSH
17797: LD_STRING 03_others
17799: PPUSH
17800: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17804: LD_EXP 8
17808: PPUSH
17809: LD_STRING 03_DeadCounter
17811: PPUSH
17812: CALL_OW 39
// YouWin ;
17816: CALL_OW 103
// DialogueOff ;
17820: CALL_OW 7
// end ; end_of_file
17824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17825: LD_VAR 0 1
17829: PUSH
17830: LD_EXP 24
17834: EQUAL
17835: IFFALSE 17844
// YouLost ( Heike ) ;
17837: LD_STRING Heike
17839: PPUSH
17840: CALL_OW 104
// if un = Aviradze then
17844: LD_VAR 0 1
17848: PUSH
17849: LD_EXP 28
17853: EQUAL
17854: IFFALSE 17863
// YouLost ( Aviradze ) ;
17856: LD_STRING Aviradze
17858: PPUSH
17859: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17863: LD_VAR 0 1
17867: PUSH
17868: LD_INT 11
17870: EQUAL
17871: PUSH
17872: LD_EXP 10
17876: NOT
17877: AND
17878: IFFALSE 17887
// YouLost ( Depot ) ;
17880: LD_STRING Depot
17882: PPUSH
17883: CALL_OW 104
// if un = arDepot then
17887: LD_VAR 0 1
17891: PUSH
17892: LD_INT 5
17894: EQUAL
17895: IFFALSE 17904
// YouLost ( FarmerDepot ) ;
17897: LD_STRING FarmerDepot
17899: PPUSH
17900: CALL_OW 104
// if un = Farmer then
17904: LD_VAR 0 1
17908: PUSH
17909: LD_EXP 32
17913: EQUAL
17914: IFFALSE 17923
// YouLost ( Farmer ) ;
17916: LD_STRING Farmer
17918: PPUSH
17919: CALL_OW 104
// if un in usForces then
17923: LD_VAR 0 1
17927: PUSH
17928: LD_EXP 40
17932: IN
17933: IFFALSE 17951
// usForces := usForces diff un ;
17935: LD_ADDR_EXP 40
17939: PUSH
17940: LD_EXP 40
17944: PUSH
17945: LD_VAR 0 1
17949: DIFF
17950: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17951: LD_VAR 0 1
17955: PUSH
17956: LD_INT 22
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 23
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 21
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: IN
17996: IFFALSE 18012
// deadCounter := deadCounter + 1 ;
17998: LD_ADDR_EXP 8
18002: PUSH
18003: LD_EXP 8
18007: PUSH
18008: LD_INT 1
18010: PLUS
18011: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 22
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 34
18029: PUSH
18030: LD_INT 12
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: IN
18046: PUSH
18047: LD_EXP 15
18051: NOT
18052: AND
18053: IFFALSE 18063
// firstConvoyDestroyed := true ;
18055: LD_ADDR_EXP 15
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if un in usAttackers then
18063: LD_VAR 0 1
18067: PUSH
18068: LD_EXP 43
18072: IN
18073: IFFALSE 18091
// usAttackers := usAttackers diff un ;
18075: LD_ADDR_EXP 43
18079: PUSH
18080: LD_EXP 43
18084: PUSH
18085: LD_VAR 0 1
18089: DIFF
18090: ST_TO_ADDR
// end ;
18091: PPOPN 1
18093: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18094: LD_VAR 0 2
18098: PUSH
18099: LD_EXP 34
18103: EQUAL
18104: PUSH
18105: LD_EXP 21
18109: AND
18110: IFFALSE 18156
// begin Video ( true ) ;
18112: LD_INT 1
18114: PPUSH
18115: CALL 1004 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
18119: LD_EXP 34
18123: PPUSH
18124: LD_INT 11
18126: PPUSH
18127: CALL_OW 120
// repeat wait ( 3 ) ;
18131: LD_INT 3
18133: PPUSH
18134: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18138: LD_EXP 34
18142: PPUSH
18143: CALL_OW 310
18147: IFFALSE 18131
// Video ( false ) ;
18149: LD_INT 0
18151: PPUSH
18152: CALL 1004 0 1
// end ; end ;
18156: PPOPN 2
18158: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18159: LD_VAR 0 2
18163: PUSH
18164: LD_EXP 24
18168: EQUAL
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 11
18177: EQUAL
18178: AND
18179: PUSH
18180: LD_EXP 21
18184: AND
18185: IFFALSE 18191
// IbrahimQuery ;
18187: CALL 16281 0 0
// end ;
18191: PPOPN 2
18193: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if oldId in usAttackers then
18194: LD_VAR 0 2
18198: PUSH
18199: LD_EXP 43
18203: IN
18204: IFFALSE 18222
// usAttackers := usAttackers diff oldId ;
18206: LD_ADDR_EXP 43
18210: PUSH
18211: LD_EXP 43
18215: PUSH
18216: LD_VAR 0 2
18220: DIFF
18221: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 4
18229: EQUAL
18230: PUSH
18231: LD_EXP 15
18235: NOT
18236: AND
18237: IFFALSE 18247
// firstConvoyDestroyed := true ;
18239: LD_ADDR_EXP 15
18243: PUSH
18244: LD_INT 1
18246: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
18247: LD_VAR 0 2
18251: PPUSH
18252: CALL_OW 264
18256: PUSH
18257: LD_INT 12
18259: EQUAL
18260: PUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 289
18273: PUSH
18274: LD_INT 0
18276: EQUAL
18277: AND
18278: IFFALSE 18284
// EmptyCargoDialog ;
18280: CALL 15062 0 0
// end ;
18284: PPOPN 4
18286: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18287: LD_VAR 0 1
18291: PUSH
18292: LD_INT 2
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 2
18300: PUSH
18301: LD_INT 5
18303: EQUAL
18304: AND
18305: IFFALSE 18314
// YouLost ( Attack ) ;
18307: LD_STRING Attack
18309: PPUSH
18310: CALL_OW 104
// end ;
18314: PPOPN 2
18316: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 255
18326: PUSH
18327: LD_INT 1
18329: EQUAL
18330: PUSH
18331: LD_EXP 6
18335: NOT
18336: AND
18337: IFFALSE 18471
// begin if GetBType ( b ) = b_lab then
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 266
18348: PUSH
18349: LD_INT 6
18351: EQUAL
18352: IFFALSE 18392
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18354: LD_EXP 40
18358: PPUSH
18359: LD_INT 25
18361: PUSH
18362: LD_INT 4
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PPUSH
18369: CALL_OW 72
18373: PPUSH
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 120
// AmLabResearch ( b ) ;
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL 5951 0 1
// end ; if GetBType ( b ) = b_armoury then
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 266
18401: PUSH
18402: LD_INT 4
18404: EQUAL
18405: IFFALSE 18453
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18407: LD_EXP 40
18411: PPUSH
18412: LD_INT 25
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: LD_INT 54
18427: PUSH
18428: EMPTY
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 72
18443: PPUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18453: LD_ADDR_EXP 42
18457: PUSH
18458: LD_EXP 42
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: CALL_OW 3
18470: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 255
18480: PUSH
18481: LD_INT 5
18483: EQUAL
18484: IFFALSE 18498
// SetBLevel ( b , 5 ) ;
18486: LD_VAR 0 1
18490: PPUSH
18491: LD_INT 5
18493: PPUSH
18494: CALL_OW 241
// end ;
18498: PPOPN 1
18500: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 255
18510: PUSH
18511: LD_INT 2
18513: EQUAL
18514: IFFALSE 18530
// vehCounter := vehCounter + 1 ;
18516: LD_ADDR_EXP 18
18520: PUSH
18521: LD_EXP 18
18525: PUSH
18526: LD_INT 1
18528: PLUS
18529: ST_TO_ADDR
// end ;
18530: PPOPN 2
18532: END
// on SailEvent ( event ) do begin if event = eventAttack then
18533: LD_VAR 0 1
18537: PUSH
18538: LD_EXP 20
18542: EQUAL
18543: IFFALSE 18549
// AmericanAttack ;
18545: CALL 7391 0 0
// end ; end_of_file
18549: PPOPN 1
18551: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
18552: LD_OWVAR 1
18556: PUSH
18557: LD_INT 8400
18559: PUSH
18560: LD_INT 6300
18562: PUSH
18563: LD_INT 5250
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: PUSH
18571: LD_OWVAR 67
18575: ARRAY
18576: LESSEQUAL
18577: IFFALSE 18604
18579: GO 18581
18581: DISABLE
// begin enable ;
18582: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18583: LD_INT 1
18585: PPUSH
18586: LD_INT 5
18588: PPUSH
18589: CALL_OW 12
18593: PPUSH
18594: LD_INT 9
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 55
// end ;
18604: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
18605: LD_EXP 6
18609: PUSH
18610: LD_OWVAR 1
18614: PUSH
18615: LD_INT 54600
18617: PUSH
18618: LD_INT 48300
18620: PUSH
18621: LD_INT 42000
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: PUSH
18629: LD_OWVAR 67
18633: ARRAY
18634: LESSEQUAL
18635: AND
18636: IFFALSE 18663
18638: GO 18640
18640: DISABLE
// begin enable ;
18641: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18642: LD_INT 1
18644: PPUSH
18645: LD_INT 5
18647: PPUSH
18648: CALL_OW 12
18652: PPUSH
18653: LD_INT 9
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 55
// end ; end_of_file
18663: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18664: LD_EXP 10
18668: NOT
18669: PUSH
18670: LD_EXP 4
18674: AND
18675: PUSH
18676: LD_EXP 12
18680: PUSH
18681: LD_EXP 13
18685: LESSEQUAL
18686: AND
18687: IFFALSE 18777
18689: GO 18691
18691: DISABLE
// begin enable ;
18692: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
18693: LD_ADDR_OWVAR 47
18697: PUSH
18698: LD_STRING #X103-1
18700: PUSH
18701: LD_EXP 12
18705: PUSH
18706: LD_EXP 13
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18716: LD_ADDR_EXP 12
18720: PUSH
18721: LD_INT 5
18723: PPUSH
18724: CALL_OW 274
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 275
18736: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18737: LD_INT 10
18739: PPUSH
18740: LD_INT 1
18742: PPUSH
18743: CALL_OW 287
18747: PUSH
18748: LD_INT 0
18750: EQUAL
18751: IFFALSE 18769
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18753: LD_ADDR_EXP 14
18757: PUSH
18758: LD_EXP 14
18762: PUSH
18763: LD_INT 35
18765: MINUS
18766: ST_TO_ADDR
18767: GO 18777
// farmerCratesCounter := 30 30$00 ;
18769: LD_ADDR_EXP 14
18773: PUSH
18774: LD_INT 63000
18776: ST_TO_ADDR
// end ; end_of_file
18777: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18778: GO 18780
18780: DISABLE
// begin ru_radar := 98 ;
18781: LD_ADDR_EXP 44
18785: PUSH
18786: LD_INT 98
18788: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18789: LD_ADDR_EXP 45
18793: PUSH
18794: LD_INT 89
18796: ST_TO_ADDR
// us_hack := 99 ;
18797: LD_ADDR_EXP 46
18801: PUSH
18802: LD_INT 99
18804: ST_TO_ADDR
// us_artillery := 97 ;
18805: LD_ADDR_EXP 47
18809: PUSH
18810: LD_INT 97
18812: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18813: LD_ADDR_EXP 48
18817: PUSH
18818: LD_INT 91
18820: ST_TO_ADDR
// tech_Artillery := 80 ;
18821: LD_ADDR_EXP 49
18825: PUSH
18826: LD_INT 80
18828: ST_TO_ADDR
// tech_RadMat := 81 ;
18829: LD_ADDR_EXP 50
18833: PUSH
18834: LD_INT 81
18836: ST_TO_ADDR
// tech_BasicTools := 82 ;
18837: LD_ADDR_EXP 51
18841: PUSH
18842: LD_INT 82
18844: ST_TO_ADDR
// tech_Cargo := 83 ;
18845: LD_ADDR_EXP 52
18849: PUSH
18850: LD_INT 83
18852: ST_TO_ADDR
// tech_Track := 84 ;
18853: LD_ADDR_EXP 53
18857: PUSH
18858: LD_INT 84
18860: ST_TO_ADDR
// tech_Crane := 85 ;
18861: LD_ADDR_EXP 54
18865: PUSH
18866: LD_INT 85
18868: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18869: LD_ADDR_EXP 55
18873: PUSH
18874: LD_INT 86
18876: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18877: LD_ADDR_EXP 56
18881: PUSH
18882: LD_INT 87
18884: ST_TO_ADDR
// end ;
18885: END
