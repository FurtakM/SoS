// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1008 0 0
// PrepareAmerican ;
  16: CALL 4089 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9298 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: IFTRUE 857
 850: PUSH
 851: LD_VAR 0 2
 855: NOT
 856: OR
 857: IFFALSE 861
// exit ;
 859: GO 909
// if not See ( GetSide ( observer ) , unit ) then
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 255
 870: PPUSH
 871: LD_VAR 0 2
 875: PPUSH
 876: CALL_OW 292
 880: NOT
 881: IFFALSE 885
// exit ;
 883: GO 909
// result := GetDistUnits ( observer , unit ) < 12 ;
 885: LD_ADDR_VAR 0 3
 889: PUSH
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 296
 904: PUSH
 905: LD_INT 12
 907: LESS
 908: ST_TO_ADDR
// end ;
 909: LD_VAR 0 3
 913: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 914: LD_INT 0
 916: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 1
 924: ARRAY
 925: PPUSH
 926: LD_VAR 0 2
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: PPUSH
 935: CALL_OW 488
 939: IFFALSE 969
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ; end_of_file
1003: LD_VAR 0 4
1007: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
// uc_side := 5 ;
1014: LD_ADDR_OWVAR 20
1018: PUSH
1019: LD_INT 5
1021: ST_TO_ADDR
// uc_nation := 2 ;
1022: LD_ADDR_OWVAR 21
1026: PUSH
1027: LD_INT 2
1029: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1030: LD_INT 5
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 65
1043: PPUSH
1044: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1048: LD_ADDR_EXP 39
1052: PUSH
1053: LD_STRING Farmer
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: LD_STRING 
1061: PPUSH
1062: CALL 43090 0 3
1066: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1067: LD_ADDR_EXP 40
1071: PUSH
1072: LD_STRING Omar
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: LD_STRING 
1080: PPUSH
1081: CALL 43090 0 3
1085: ST_TO_ADDR
// omarSquad := [ ] ;
1086: LD_ADDR_EXP 43
1090: PUSH
1091: EMPTY
1092: ST_TO_ADDR
// heikeSquad := [ ] ;
1093: LD_ADDR_EXP 44
1097: PUSH
1098: EMPTY
1099: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1100: LD_ADDR_EXP 45
1104: PUSH
1105: EMPTY
1106: ST_TO_ADDR
// omarCargo := [ ] ;
1107: LD_ADDR_EXP 46
1111: PUSH
1112: EMPTY
1113: ST_TO_ADDR
// for i := 1 to 5 do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1286
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1130: LD_INT 0
1132: PPUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_VAR 0 2
1159: ARRAY
1160: PPUSH
1161: LD_INT 3
1163: PPUSH
1164: CALL_OW 380
// un := CreateHuman ;
1168: LD_ADDR_VAR 0 3
1172: PUSH
1173: CALL_OW 44
1177: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1178: LD_ADDR_EXP 43
1182: PUSH
1183: LD_EXP 43
1187: PUSH
1188: LD_VAR 0 3
1192: UNION
1193: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1194: LD_VAR 0 3
1198: PPUSH
1199: LD_INT 87
1201: PUSH
1202: LD_INT 30
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 91
1211: PUSH
1212: LD_INT 32
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 82
1221: PUSH
1222: LD_INT 15
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 79
1231: PUSH
1232: LD_INT 14
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 13
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: PUSH
1256: LD_VAR 0 2
1260: ARRAY
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL 914 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 93
1276: PPUSH
1277: LD_INT 21
1279: PPUSH
1280: CALL_OW 118
// end ;
1284: GO 1127
1286: POP
1287: POP
// uc_side := 2 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 2
1295: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 31
1300: PUSH
1301: LD_STRING Heike
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 43090 0 3
1319: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 35
1324: PUSH
1325: LD_STRING Aviradze
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 43090 0 3
1343: ST_TO_ADDR
// tmp := [ ] ;
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: EMPTY
1350: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1351: LD_ADDR_EXP 32
1355: PUSH
1356: LD_STRING Givi
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_EXP 2
1369: PPUSH
1370: CALL 43090 0 3
1374: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1375: LD_ADDR_EXP 33
1379: PUSH
1380: LD_STRING Mike
1382: PPUSH
1383: LD_EXP 1
1387: NOT
1388: PPUSH
1389: LD_EXP 2
1393: PPUSH
1394: CALL 43090 0 3
1398: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 34
1403: PUSH
1404: LD_STRING Kamil
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 43090 0 3
1422: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 36
1427: PUSH
1428: LD_STRING Kaia
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 43090 0 3
1446: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 37
1451: PUSH
1452: LD_STRING Sophia
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 43090 0 3
1470: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 38
1475: PUSH
1476: LD_STRING Markov
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 43090 0 3
1494: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1495: LD_ADDR_EXP 45
1499: PUSH
1500: LD_STRING 02_others
1502: PPUSH
1503: CALL_OW 31
1507: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_EXP 33
1517: PUSH
1518: LD_EXP 34
1522: PUSH
1523: LD_EXP 36
1527: PUSH
1528: LD_EXP 37
1532: PUSH
1533: LD_EXP 38
1537: PUSH
1538: LD_EXP 32
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_EXP 45
1555: ADD
1556: PUSH
1557: LD_INT 0
1559: DIFF
1560: ST_TO_ADDR
// heikeSquad := tmp ;
1561: LD_ADDR_EXP 44
1565: PUSH
1566: LD_VAR 0 4
1570: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1571: LD_EXP 44
1575: PPUSH
1576: LD_INT 25
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PPUSH
1586: CALL_OW 72
1590: PUSH
1591: LD_INT 3
1593: LESS
1594: IFFALSE 1644
// begin SetClass ( Kaia , 1 ) ;
1596: LD_EXP 36
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1608: LD_EXP 33
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1620: LD_EXP 32
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1632: LD_EXP 31
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_VAR 0 4
1653: PUSH
1654: LD_STRING 02_ape
1656: PPUSH
1657: CALL_OW 31
1661: UNION
1662: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1663: LD_EXP 31
1667: PPUSH
1668: LD_INT 92
1670: PPUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1681: LD_EXP 39
1685: PPUSH
1686: LD_INT 95
1688: PPUSH
1689: LD_INT 19
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1699: LD_EXP 40
1703: PPUSH
1704: LD_INT 89
1706: PPUSH
1707: LD_INT 25
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1717: LD_EXP 35
1721: PPUSH
1722: LD_INT 92
1724: PPUSH
1725: LD_INT 27
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1735: LD_EXP 40
1739: PPUSH
1740: LD_EXP 35
1744: PPUSH
1745: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1749: LD_EXP 35
1753: PPUSH
1754: LD_EXP 40
1758: PPUSH
1759: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1763: LD_EXP 31
1767: PUSH
1768: LD_EXP 39
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: LD_EXP 40
1781: PPUSH
1782: CALL_OW 119
// if tmp then
1786: LD_VAR 0 4
1790: IFFALSE 1844
// for i in tmp do
1792: LD_ADDR_VAR 0 2
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1842
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_INT 94
1812: PPUSH
1813: LD_INT 14
1815: PPUSH
1816: LD_INT 4
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1826: LD_VAR 0 2
1830: PPUSH
1831: LD_EXP 31
1835: PPUSH
1836: CALL_OW 119
// end ;
1840: GO 1802
1842: POP
1843: POP
// farmerSquad := [ ] ;
1844: LD_ADDR_EXP 42
1848: PUSH
1849: EMPTY
1850: ST_TO_ADDR
// uc_side := 5 ;
1851: LD_ADDR_OWVAR 20
1855: PUSH
1856: LD_INT 5
1858: ST_TO_ADDR
// uc_nation := 2 ;
1859: LD_ADDR_OWVAR 21
1863: PUSH
1864: LD_INT 2
1866: ST_TO_ADDR
// for i := 1 to 4 do
1867: LD_ADDR_VAR 0 2
1871: PUSH
1872: DOUBLE
1873: LD_INT 1
1875: DEC
1876: ST_TO_ADDR
1877: LD_INT 4
1879: PUSH
1880: FOR_TO
1881: IFFALSE 1959
// begin PrepareHuman ( false , 1 , 2 ) ;
1883: LD_INT 0
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: CALL_OW 380
// un := CreateHuman ;
1896: LD_ADDR_VAR 0 3
1900: PUSH
1901: CALL_OW 44
1905: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1906: LD_VAR 0 3
1910: PPUSH
1911: LD_INT 102
1913: PPUSH
1914: LD_INT 27
1916: PPUSH
1917: LD_INT 4
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1927: LD_ADDR_EXP 42
1931: PUSH
1932: LD_EXP 42
1936: PUSH
1937: LD_VAR 0 3
1941: UNION
1942: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1943: LD_VAR 0 3
1947: PPUSH
1948: LD_EXP 40
1952: PPUSH
1953: CALL_OW 119
// end ;
1957: GO 1880
1959: POP
1960: POP
// for i := 1 to 2 do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: DOUBLE
1967: LD_INT 1
1969: DEC
1970: ST_TO_ADDR
1971: LD_INT 2
1973: PUSH
1974: FOR_TO
1975: IFFALSE 2053
// begin PrepareHuman ( false , 2 , 2 ) ;
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 2
1982: PPUSH
1983: LD_INT 2
1985: PPUSH
1986: CALL_OW 380
// un := CreateHuman ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: CALL_OW 44
1999: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_INT 108
2007: PPUSH
2008: LD_INT 62
2010: PPUSH
2011: LD_INT 2
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2021: LD_ADDR_EXP 42
2025: PUSH
2026: LD_EXP 42
2030: PUSH
2031: LD_VAR 0 3
2035: UNION
2036: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_EXP 40
2046: PPUSH
2047: CALL_OW 119
// end ;
2051: GO 1974
2053: POP
2054: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2055: LD_INT 109
2057: PPUSH
2058: LD_INT 63
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: LD_INT 15
2066: NEG
2067: PPUSH
2068: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2072: LD_INT 109
2074: PPUSH
2075: LD_INT 63
2077: PPUSH
2078: LD_INT 2
2080: PPUSH
2081: CALL_OW 331
// end ;
2085: LD_VAR 0 1
2089: RET
// export function PrepareIbrahim ( x , y ) ; begin
2090: LD_INT 0
2092: PPUSH
// uc_side := 6 ;
2093: LD_ADDR_OWVAR 20
2097: PUSH
2098: LD_INT 6
2100: ST_TO_ADDR
// uc_nation := 3 ;
2101: LD_ADDR_OWVAR 21
2105: PUSH
2106: LD_INT 3
2108: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2109: LD_ADDR_EXP 41
2113: PUSH
2114: LD_STRING IbrahimRu
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: LD_STRING 
2122: PPUSH
2123: CALL 43090 0 3
2127: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2128: LD_EXP 41
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: LD_VAR 0 2
2142: PPUSH
2143: LD_INT 8
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 50
// end ;
2153: LD_VAR 0 3
2157: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2158: LD_EXP 40
2162: PUSH
2163: LD_EXP 43
2167: ADD
2168: PPUSH
2169: LD_INT 95
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 72
2183: IFFALSE 2239
2185: GO 2187
2187: DISABLE
2188: LD_INT 0
2190: PPUSH
// begin enable ;
2191: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2192: LD_ADDR_VAR 0 1
2196: PUSH
2197: LD_EXP 40
2201: PUSH
2202: LD_EXP 43
2206: ADD
2207: PPUSH
2208: LD_INT 95
2210: PUSH
2211: LD_INT 3
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 72
2222: PUSH
2223: FOR_IN
2224: IFFALSE 2237
// RemoveUnit ( i ) ;
2226: LD_VAR 0 1
2230: PPUSH
2231: CALL_OW 64
2235: GO 2223
2237: POP
2238: POP
// end ;
2239: PPOPN 1
2241: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2242: LD_EXP 3
2246: IFFALSE 2262
2248: PUSH
2249: LD_EXP 39
2253: PPUSH
2254: LD_INT 4
2256: PPUSH
2257: CALL_OW 308
2261: AND
2262: IFFALSE 3066
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2273: LD_EXP 39
2277: PPUSH
2278: LD_INT 110
2280: PPUSH
2281: LD_INT 60
2283: PPUSH
2284: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2288: LD_EXP 39
2292: PPUSH
2293: LD_INT 110
2295: PPUSH
2296: LD_INT 61
2298: PPUSH
2299: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_EXP 42
2312: PPUSH
2313: LD_INT 25
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 72
2327: ST_TO_ADDR
// if tmp then
2328: LD_VAR 0 2
2332: IFFALSE 2426
// begin for i := 1 to 2 do
2334: LD_ADDR_VAR 0 1
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2424
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 1
2359: ARRAY
2360: PPUSH
2361: LD_INT 5
2363: PPUSH
2364: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2368: LD_VAR 0 2
2372: PUSH
2373: LD_VAR 0 1
2377: ARRAY
2378: PPUSH
2379: LD_INT 2
2381: PPUSH
2382: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 1
2395: ARRAY
2396: PPUSH
2397: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2401: LD_VAR 0 2
2405: PUSH
2406: LD_VAR 0 1
2410: ARRAY
2411: PPUSH
2412: LD_INT 107
2414: PPUSH
2415: LD_INT 66
2417: PPUSH
2418: CALL_OW 171
// end ;
2422: GO 2347
2424: POP
2425: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_EXP 42
2435: PPUSH
2436: LD_INT 25
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PPUSH
2446: CALL_OW 72
2450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2451: LD_INT 35
2453: PPUSH
2454: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: LD_EXP 42
2467: PPUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 72
2482: ST_TO_ADDR
// until tmp ;
2483: LD_VAR 0 2
2487: IFFALSE 2451
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_INT 31
2496: PPUSH
2497: LD_INT 102
2499: PPUSH
2500: LD_INT 69
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2510: LD_INT 35
2512: PPUSH
2513: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2517: LD_EXP 42
2521: PPUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 60
2527: PUSH
2528: EMPTY
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 25
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 72
2553: IFFALSE 2510
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2555: LD_ADDR_VAR 0 2
2559: PUSH
2560: LD_EXP 42
2564: PPUSH
2565: LD_INT 25
2567: PUSH
2568: LD_INT 2
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL_OW 72
2579: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_INT 6
2587: PPUSH
2588: LD_INT 116
2590: PPUSH
2591: LD_INT 55
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2601: LD_VAR 0 2
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 116
2611: PPUSH
2612: LD_INT 70
2614: PPUSH
2615: LD_INT 5
2617: PPUSH
2618: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2622: LD_VAR 0 2
2626: PPUSH
2627: LD_INT 31
2629: PPUSH
2630: LD_INT 109
2632: PPUSH
2633: LD_INT 50
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2643: LD_INT 35
2645: PPUSH
2646: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2650: LD_INT 22
2652: PUSH
2653: LD_INT 5
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 4
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 57
2675: PUSH
2676: EMPTY
2677: LIST
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: IFFALSE 2643
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 4
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 57
2724: PUSH
2725: EMPTY
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_EXP 42
2755: PPUSH
2756: LD_INT 25
2758: PUSH
2759: LD_INT 1
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 72
2770: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_VAR 0 3
2780: PPUSH
2781: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2785: LD_INT 35
2787: PPUSH
2788: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2792: LD_INT 22
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 30
2804: PUSH
2805: LD_INT 31
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 57
2817: PUSH
2818: EMPTY
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 2
2837: GREATEREQUAL
2838: IFFALSE 2785
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2840: LD_ADDR_VAR 0 2
2844: PUSH
2845: LD_EXP 42
2849: PPUSH
2850: LD_INT 25
2852: PUSH
2853: LD_INT 2
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 72
2864: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2865: LD_VAR 0 2
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: LD_INT 5
2876: PPUSH
2877: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2881: LD_VAR 0 2
2885: PUSH
2886: LD_INT 2
2888: ARRAY
2889: PUSH
2890: LD_VAR 0 2
2894: PUSH
2895: LD_INT 3
2897: ARRAY
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2912: LD_VAR 0 2
2916: PUSH
2917: LD_INT 2
2919: ARRAY
2920: PUSH
2921: LD_VAR 0 2
2925: PUSH
2926: LD_INT 3
2928: ARRAY
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2941: LD_VAR 0 2
2945: PUSH
2946: LD_INT 2
2948: ARRAY
2949: PUSH
2950: LD_VAR 0 2
2954: PUSH
2955: LD_INT 3
2957: ARRAY
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2967: LD_ADDR_VAR 0 4
2971: PUSH
2972: LD_INT 22
2974: PUSH
2975: LD_INT 5
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 30
2984: PUSH
2985: LD_INT 31
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 69
3000: ST_TO_ADDR
// for i := 1 to 2 do
3001: LD_ADDR_VAR 0 1
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 2
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3049
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3017: LD_VAR 0 2
3021: PUSH
3022: LD_VAR 0 1
3026: PUSH
3027: LD_INT 1
3029: PLUS
3030: ARRAY
3031: PPUSH
3032: LD_VAR 0 4
3036: PUSH
3037: LD_VAR 0 1
3041: ARRAY
3042: PPUSH
3043: CALL_OW 180
3047: GO 3014
3049: POP
3050: POP
// wait ( 1 1$00 ) ;
3051: LD_INT 2100
3053: PPUSH
3054: CALL_OW 67
// farmerBaseReady := true ;
3058: LD_ADDR_EXP 4
3062: PUSH
3063: LD_INT 1
3065: ST_TO_ADDR
// end ;
3066: PPOPN 4
3068: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3069: LD_EXP 4
3073: IFFALSE 3082
3075: PUSH
3076: LD_EXP 12
3080: NOT
3081: AND
3082: IFFALSE 3610
3084: GO 3086
3086: DISABLE
3087: LD_INT 0
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_EXP 42
3104: PPUSH
3105: LD_INT 25
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_EXP 39
3124: ADD
3125: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_EXP 42
3135: PPUSH
3136: LD_INT 25
3138: PUSH
3139: LD_INT 2
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 72
3150: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_INT 22
3158: PUSH
3159: LD_INT 5
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 21
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 24
3181: PUSH
3182: LD_INT 1000
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 69
3202: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 5
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 4
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PPUSH
3232: CALL_OW 69
3236: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3237: LD_VAR 0 4
3241: PUSH
3242: LD_INT 1
3244: ARRAY
3245: PPUSH
3246: CALL_OW 302
3250: IFFALSE 3316
// for i in sol do
3252: LD_ADDR_VAR 0 1
3256: PUSH
3257: LD_VAR 0 3
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3314
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3265: LD_VAR 0 1
3269: PPUSH
3270: CALL_OW 256
3274: PUSH
3275: LD_INT 999
3277: LESS
3278: IFFALSE 3292
3280: PUSH
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 310
3290: NOT
3291: AND
3292: IFFALSE 3312
// ComEnterUnit ( i , arm [ 1 ] ) ;
3294: LD_VAR 0 1
3298: PPUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 120
3312: GO 3262
3314: POP
3315: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3316: LD_VAR 0 2
3320: NOT
3321: IFFALSE 3354
3323: PUSH
3324: LD_INT 22
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 21
3336: PUSH
3337: LD_INT 1
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PPUSH
3348: CALL_OW 69
3352: NOT
3353: AND
3354: IFFALSE 3446
// begin uc_side := 5 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 5
3363: ST_TO_ADDR
// uc_nation := 2 ;
3364: LD_ADDR_OWVAR 21
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3372: LD_INT 0
3374: PPUSH
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 380
// eng := CreateHuman ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3395: LD_VAR 0 2
3399: PPUSH
3400: LD_INT 102
3402: PPUSH
3403: LD_INT 8
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3413: LD_VAR 0 2
3417: PPUSH
3418: LD_INT 110
3420: PPUSH
3421: LD_INT 60
3423: PPUSH
3424: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3428: LD_ADDR_EXP 42
3432: PUSH
3433: LD_EXP 42
3437: PUSH
3438: LD_VAR 0 2
3442: UNION
3443: ST_TO_ADDR
// end else
3444: GO 3610
// begin for i in eng do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: FOR_IN
3457: IFFALSE 3608
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3459: LD_INT 10
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL_OW 287
3469: IFFALSE 3520
// begin if IsInUnit ( i ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 310
3480: IFFALSE 3491
// ComExitBuilding ( i ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 308
3503: NOT
3504: IFFALSE 3518
// AddComMoveToArea ( i , collectFarmerArea ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 10
3513: PPUSH
3514: CALL_OW 173
// end else
3518: GO 3606
// begin if damagedBuilding then
3520: LD_VAR 0 5
3524: IFFALSE 3568
// begin if IsInUnit ( i ) then
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 310
3535: IFFALSE 3548
// ComExitBuilding ( i ) else
3537: LD_VAR 0 1
3541: PPUSH
3542: CALL_OW 122
3546: GO 3566
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_VAR 0 5
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 130
// end else
3566: GO 3606
// if not IsInUnit ( i ) and not HasTask ( i ) then
3568: LD_VAR 0 1
3572: PPUSH
3573: CALL_OW 310
3577: NOT
3578: IFFALSE 3592
3580: PUSH
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 314
3590: NOT
3591: AND
3592: IFFALSE 3606
// ComEnterUnit ( i , arDepot ) ;
3594: LD_VAR 0 1
3598: PPUSH
3599: LD_INT 5
3601: PPUSH
3602: CALL_OW 120
// end ; end ;
3606: GO 3456
3608: POP
3609: POP
// end ; end ;
3610: PPOPN 5
3612: END
// export function CargoEvacuation ; begin
3613: LD_INT 0
3615: PPUSH
// wait ( 0 0$3 ) ;
3616: LD_INT 105
3618: PPUSH
3619: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3623: LD_ADDR_EXP 22
3627: PUSH
3628: LD_EXP 22
3632: PUSH
3633: LD_INT 1
3635: MINUS
3636: ST_TO_ADDR
// if omarCargoCounter = 0 then
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3649
// exit ;
3647: GO 3966
// if omarCargo then
3649: LD_EXP 46
3653: IFFALSE 3664
// RemoveUnit ( omarCargo ) ;
3655: LD_EXP 46
3659: PPUSH
3660: CALL_OW 64
// omarCargo := PrepareCargo ;
3664: LD_ADDR_EXP 46
3668: PUSH
3669: CALL 3971 0 0
3673: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3674: LD_EXP 46
3678: PPUSH
3679: LD_INT 0
3681: PPUSH
3682: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 46
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3701: LD_INT 35
3703: PPUSH
3704: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3708: LD_EXP 46
3712: PPUSH
3713: LD_INT 107
3715: PPUSH
3716: LD_INT 59
3718: PPUSH
3719: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3723: LD_EXP 46
3727: PPUSH
3728: CALL_OW 302
3732: NOT
3733: IFTRUE 3746
3735: PUSH
3736: LD_EXP 46
3740: PPUSH
3741: CALL_OW 301
3745: OR
3746: IFFALSE 3750
// exit ;
3748: GO 3966
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 107
3757: PPUSH
3758: LD_INT 59
3760: PPUSH
3761: CALL_OW 307
3765: IFTRUE 3785
3767: PUSH
3768: LD_EXP 46
3772: PPUSH
3773: LD_INT 5
3775: PPUSH
3776: CALL_OW 296
3780: PUSH
3781: LD_INT 6
3783: LESS
3784: OR
3785: IFFALSE 3701
// SetTag ( omarCargo , 1 ) ;
3787: LD_EXP 46
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: CALL_OW 109
// wait ( 0 0$03 ) ;
3799: LD_INT 105
3801: PPUSH
3802: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3806: LD_EXP 46
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3821: LD_EXP 46
3825: PPUSH
3826: LD_INT 103
3828: PPUSH
3829: LD_INT 9
3831: PPUSH
3832: CALL_OW 171
// wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3843: LD_EXP 46
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 100
3853: PPUSH
3854: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3858: LD_INT 35
3860: PPUSH
3861: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3865: LD_EXP 46
3869: PPUSH
3870: LD_INT 103
3872: PPUSH
3873: LD_INT 9
3875: PPUSH
3876: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3880: LD_EXP 46
3884: PPUSH
3885: CALL_OW 302
3889: NOT
3890: IFTRUE 3903
3892: PUSH
3893: LD_EXP 46
3897: PPUSH
3898: CALL_OW 301
3902: OR
3903: IFFALSE 3907
// exit ;
3905: GO 3966
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_INT 103
3914: PPUSH
3915: LD_INT 9
3917: PPUSH
3918: CALL_OW 307
3922: IFTRUE 3938
3924: PUSH
3925: LD_EXP 46
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: CALL_OW 308
3937: OR
3938: IFFALSE 3955
3940: PUSH
3941: LD_EXP 46
3945: PPUSH
3946: CALL_OW 110
3950: PUSH
3951: LD_INT 0
3953: GREATER
3954: AND
3955: IFFALSE 3858
// RemoveUnit ( omarCargo ) ;
3957: LD_EXP 46
3961: PPUSH
3962: CALL_OW 64
// end ;
3966: LD_VAR 0 1
3970: RET
// export function PrepareCargo ; var un , veh ; begin
3971: LD_INT 0
3973: PPUSH
3974: PPUSH
3975: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_INT 5
3983: PPUSH
3984: LD_INT 2
3986: PPUSH
3987: LD_INT 14
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 32
3998: PPUSH
3999: LD_INT 80
4001: PPUSH
4002: CALL 349 0 7
4006: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_INT 4
4014: PPUSH
4015: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 101
4026: PPUSH
4027: LD_INT 8
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4037: LD_INT 0
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 4
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_VAR 0 3
4069: PPUSH
4070: CALL_OW 52
// result := veh ;
4074: LD_ADDR_VAR 0 1
4078: PUSH
4079: LD_VAR 0 3
4083: ST_TO_ADDR
// end ; end_of_file
4084: LD_VAR 0 1
4088: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
4093: PPUSH
// usForces := [ ] ;
4094: LD_ADDR_EXP 47
4098: PUSH
4099: EMPTY
4100: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4101: LD_ADDR_EXP 49
4105: PUSH
4106: LD_INT 6
4108: PUSH
4109: LD_INT 32
4111: PUSH
4112: LD_INT 27
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 4
4126: PUSH
4127: LD_INT 43
4129: PUSH
4130: LD_INT 24
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 27
4144: PUSH
4145: LD_INT 29
4147: PUSH
4148: LD_INT 21
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4165: LD_INT 11
4167: PPUSH
4168: CALL_OW 274
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 150
4178: PUSH
4179: LD_INT 120
4181: PUSH
4182: LD_INT 100
4184: PUSH
4185: LD_INT 80
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_OWVAR 67
4198: ARRAY
4199: PPUSH
4200: CALL_OW 277
// if Difficulty = 1 then
4204: LD_OWVAR 67
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: IFFALSE 4221
// RemoveUnit ( hillBun ) ;
4214: LD_INT 14
4216: PPUSH
4217: CALL_OW 64
// uc_side := 1 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// uc_nation := 1 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hc_gallery :=  ;
4237: LD_ADDR_OWVAR 33
4241: PUSH
4242: LD_STRING 
4244: ST_TO_ADDR
// hc_name :=  ;
4245: LD_ADDR_OWVAR 26
4249: PUSH
4250: LD_STRING 
4252: ST_TO_ADDR
// hc_importance := 0 ;
4253: LD_ADDR_OWVAR 32
4257: PUSH
4258: LD_INT 0
4260: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 3 , 3 , 3 , 4 ] [ Difficulty ] ) ;
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: LD_INT 3
4275: PUSH
4276: LD_INT 4
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_OWVAR 67
4289: ARRAY
4290: PPUSH
4291: CALL_OW 380
// usCommander := CreateHuman ;
4295: LD_ADDR_EXP 48
4299: PUSH
4300: CALL_OW 44
4304: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4305: LD_EXP 48
4309: PPUSH
4310: LD_INT 11
4312: PPUSH
4313: CALL_OW 52
// if Difficulty > 1 then
4317: LD_OWVAR 67
4321: PUSH
4322: LD_INT 1
4324: GREATER
4325: IFFALSE 4411
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] ) ;
4327: LD_INT 0
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 2
4338: PUSH
4339: LD_INT 3
4341: PUSH
4342: LD_INT 4
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_OWVAR 67
4355: ARRAY
4356: PPUSH
4357: CALL_OW 380
// un := CreateHuman ;
4361: LD_ADDR_VAR 0 3
4365: PUSH
4366: CALL_OW 44
4370: ST_TO_ADDR
// usForces := usForces union un ;
4371: LD_ADDR_EXP 47
4375: PUSH
4376: LD_EXP 47
4380: PUSH
4381: LD_VAR 0 3
4385: UNION
4386: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 14
4406: PPUSH
4407: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: DOUBLE
4417: LD_INT 1
4419: DEC
4420: ST_TO_ADDR
4421: LD_INT 2
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: LD_INT 4
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: PUSH
4439: LD_OWVAR 67
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4592
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4448: LD_INT 0
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: LD_INT 1
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: LD_INT 3
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_OWVAR 67
4476: ARRAY
4477: PPUSH
4478: CALL_OW 380
// un := CreateHuman ;
4482: LD_ADDR_VAR 0 3
4486: PUSH
4487: CALL_OW 44
4491: ST_TO_ADDR
// usForces := usForces union un ;
4492: LD_ADDR_EXP 47
4496: PUSH
4497: LD_EXP 47
4501: PUSH
4502: LD_VAR 0 3
4506: UNION
4507: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4508: LD_VAR 0 3
4512: PPUSH
4513: LD_INT 39
4515: PPUSH
4516: LD_INT 24
4518: PPUSH
4519: LD_INT 4
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 50
// if i < 3 then
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 3
4536: LESS
4537: IFFALSE 4590
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 22
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 58
4556: PUSH
4557: EMPTY
4558: LIST
4559: PUSH
4560: LD_INT 30
4562: PUSH
4563: LD_INT 31
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: PUSH
4580: LD_VAR 0 2
4584: ARRAY
4585: PPUSH
4586: CALL_OW 120
// end ;
4590: GO 4445
4592: POP
4593: POP
// for i := 1 to 2 do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_INT 2
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4693
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4610: LD_INT 0
4612: PPUSH
4613: LD_INT 2
4615: PPUSH
4616: LD_INT 1
4618: PUSH
4619: LD_INT 2
4621: PUSH
4622: LD_INT 3
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_OWVAR 67
4638: ARRAY
4639: PPUSH
4640: CALL_OW 380
// un := CreateHuman ;
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: CALL_OW 44
4653: ST_TO_ADDR
// usForces := usForces union un ;
4654: LD_ADDR_EXP 47
4658: PUSH
4659: LD_EXP 47
4663: PUSH
4664: LD_VAR 0 3
4668: UNION
4669: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4670: LD_VAR 0 3
4674: PPUSH
4675: LD_INT 39
4677: PPUSH
4678: LD_INT 24
4680: PPUSH
4681: LD_INT 4
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 50
// end ;
4691: GO 4607
4693: POP
4694: POP
// PrepareHuman ( false , 4 , 1 ) ;
4695: LD_INT 0
4697: PPUSH
4698: LD_INT 4
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: CALL_OW 380
// un := CreateHuman ;
4708: LD_ADDR_VAR 0 3
4712: PUSH
4713: CALL_OW 44
4717: ST_TO_ADDR
// usForces := usForces union un ;
4718: LD_ADDR_EXP 47
4722: PUSH
4723: LD_EXP 47
4727: PUSH
4728: LD_VAR 0 3
4732: UNION
4733: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4734: LD_VAR 0 3
4738: PPUSH
4739: LD_INT 39
4741: PPUSH
4742: LD_INT 24
4744: PPUSH
4745: LD_INT 4
4747: PPUSH
4748: LD_INT 0
4750: PPUSH
4751: CALL_OW 50
// end ;
4755: LD_VAR 0 1
4759: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4760: LD_EXP 47
4764: IFFALSE 4773
4766: PUSH
4767: LD_EXP 7
4771: NOT
4772: AND
4773: IFFALSE 4782
4775: PUSH
4776: LD_EXP 15
4780: NOT
4781: AND
4782: IFFALSE 5215
4784: GO 4786
4786: DISABLE
4787: LD_INT 0
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_EXP 47
4804: PPUSH
4805: LD_INT 25
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PPUSH
4815: CALL_OW 72
4819: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4820: LD_ADDR_VAR 0 4
4824: PUSH
4825: LD_EXP 47
4829: PPUSH
4830: LD_INT 25
4832: PUSH
4833: LD_INT 1
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 72
4844: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4845: LD_ADDR_VAR 0 5
4849: PUSH
4850: LD_EXP 47
4854: PPUSH
4855: LD_INT 25
4857: PUSH
4858: LD_INT 4
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PPUSH
4865: CALL_OW 72
4869: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4870: LD_INT 7
4872: PPUSH
4873: LD_INT 22
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 70
4887: PUSH
4888: LD_INT 1
4890: EQUAL
4891: IFFALSE 4969
// for i in sol do
4893: LD_ADDR_VAR 0 1
4897: PUSH
4898: LD_VAR 0 4
4902: PUSH
4903: FOR_IN
4904: IFFALSE 4967
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4906: LD_VAR 0 1
4910: PPUSH
4911: CALL_OW 310
4915: NOT
4916: IFTRUE 4939
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 310
4928: PPUSH
4929: CALL_OW 266
4933: PUSH
4934: LD_INT 4
4936: EQUAL
4937: NOT
4938: OR
4939: IFFALSE 4965
// begin ComExitBuilding ( i ) ;
4941: LD_VAR 0 1
4945: PPUSH
4946: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4950: LD_VAR 0 1
4954: PPUSH
4955: LD_INT 37
4957: PPUSH
4958: LD_INT 23
4960: PPUSH
4961: CALL_OW 174
// end ;
4965: GO 4903
4967: POP
4968: POP
// if eng then
4969: LD_VAR 0 3
4973: IFFALSE 5215
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: LD_INT 22
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 95
4992: PUSH
4993: LD_INT 7
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 21
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 3
5012: PUSH
5013: LD_INT 24
5015: PUSH
5016: LD_INT 1000
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: ST_TO_ADDR
// if b then
5038: LD_VAR 0 2
5042: IFFALSE 5073
// begin ComExitBuilding ( eng ) ;
5044: LD_VAR 0 3
5048: PPUSH
5049: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_VAR 0 2
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PPUSH
5067: CALL_OW 190
// end else
5071: GO 5215
// begin for i in eng do
5073: LD_ADDR_VAR 0 1
5077: PUSH
5078: LD_VAR 0 3
5082: PUSH
5083: FOR_IN
5084: IFFALSE 5213
// if not HasTask ( i ) then
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 314
5095: NOT
5096: IFFALSE 5211
// begin if americanBuildList then
5098: LD_EXP 49
5102: IFFALSE 5187
// begin if IsInUnit ( i ) then
5104: LD_VAR 0 1
5108: PPUSH
5109: CALL_OW 310
5113: IFFALSE 5124
// ComExitBuilding ( i ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5124: LD_VAR 0 1
5128: PPUSH
5129: LD_EXP 49
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: PPUSH
5142: LD_EXP 49
5146: PUSH
5147: LD_INT 1
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PPUSH
5155: LD_EXP 49
5159: PUSH
5160: LD_INT 1
5162: ARRAY
5163: PUSH
5164: LD_INT 3
5166: ARRAY
5167: PPUSH
5168: LD_EXP 49
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PUSH
5177: LD_INT 4
5179: ARRAY
5180: PPUSH
5181: CALL_OW 205
// end else
5185: GO 5211
// if not IsInUnit ( i ) then
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 310
5196: NOT
5197: IFFALSE 5211
// ComEnterUnit ( i , usDepot ) ;
5199: LD_VAR 0 1
5203: PPUSH
5204: LD_INT 11
5206: PPUSH
5207: CALL_OW 120
// end ;
5211: GO 5083
5213: POP
5214: POP
// end ; end ; end ;
5215: PPOPN 5
5217: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
5222: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: LD_INT 35
5230: PUSH
5231: LD_INT 45
5233: PUSH
5234: LD_INT 48
5236: PUSH
5237: LD_INT 82
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: ST_TO_ADDR
// for i in tech do
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_VAR 0 3
5255: PUSH
5256: FOR_IN
5257: IFFALSE 5275
// AddComResearch ( lab , i ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_VAR 0 4
5268: PPUSH
5269: CALL_OW 184
5273: GO 5256
5275: POP
5276: POP
// end ;
5277: LD_VAR 0 2
5281: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5282: LD_EXP 13
5286: IFFALSE 5300
5288: PUSH
5289: LD_EXP 24
5293: PUSH
5294: LD_EXP 28
5298: LESSEQUAL
5299: AND
5300: IFFALSE 5325
5302: GO 5304
5304: DISABLE
// begin enable ;
5305: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5306: LD_INT 35
5308: PPUSH
5309: LD_INT 2065
5311: PPUSH
5312: CALL_OW 12
5316: PPUSH
5317: CALL_OW 67
// SendConvoy ;
5321: CALL 5433 0 0
// end ;
5325: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5326: LD_EXP 7
5330: IFFALSE 5338
5332: PUSH
5333: LD_EXP 19
5337: AND
5338: IFFALSE 5432
5340: GO 5342
5342: DISABLE
// begin if americanHasEscaped then
5343: LD_EXP 9
5347: IFFALSE 5358
// wait ( 3 3$20 ) else
5349: LD_INT 7000
5351: PPUSH
5352: CALL_OW 67
5356: GO 5365
// wait ( 6 6$40 ) ;
5358: LD_INT 14000
5360: PPUSH
5361: CALL_OW 67
// SendAttack ;
5365: CALL 6218 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5369: LD_INT 16100
5371: PUSH
5372: LD_INT 14000
5374: PUSH
5375: LD_INT 13300
5377: PUSH
5378: LD_INT 12250
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: PUSH
5387: LD_OWVAR 67
5391: ARRAY
5392: PPUSH
5393: CALL_OW 67
// SendAttack ;
5397: CALL 6218 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5401: LD_EXP 20
5405: PUSH
5406: LD_INT 5
5408: PUSH
5409: LD_INT 6
5411: PUSH
5412: LD_INT 7
5414: PUSH
5415: LD_INT 8
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: LESS
5430: IFFALSE 5369
// end ;
5432: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5433: LD_INT 0
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
5442: PPUSH
// road := rand ( 1 , 2 ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 1
5450: PPUSH
5451: LD_INT 2
5453: PPUSH
5454: CALL_OW 12
5458: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5459: LD_ADDR_VAR 0 8
5463: PUSH
5464: LD_INT 3
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5480: LD_ADDR_VAR 0 5
5484: PUSH
5485: LD_INT 35
5487: PUSH
5488: LD_INT 66
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 101
5501: PUSH
5502: LD_INT 8
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5517: LD_ADDR_VAR 0 6
5521: PUSH
5522: LD_INT 34
5524: PUSH
5525: LD_INT 67
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 38
5534: PUSH
5535: LD_INT 62
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 43
5544: PUSH
5545: LD_INT 54
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 57
5554: PUSH
5555: LD_INT 57
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 77
5564: PUSH
5565: LD_INT 71
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 86
5574: PUSH
5575: LD_INT 60
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 89
5584: PUSH
5585: LD_INT 35
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 93
5594: PUSH
5595: LD_INT 17
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: LD_INT 97
5604: PUSH
5605: LD_INT 10
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: LD_INT 103
5614: PUSH
5615: LD_INT 9
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: ST_TO_ADDR
// if road = 2 then
5634: LD_VAR 0 4
5638: PUSH
5639: LD_INT 2
5641: EQUAL
5642: IFFALSE 5659
// points := ReverseArray ( points ) ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: LD_VAR 0 6
5653: PPUSH
5654: CALL 76370 0 1
5658: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5659: LD_INT 4
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: LD_INT 2
5667: PPUSH
5668: LD_INT 1
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: LD_INT 12
5676: PPUSH
5677: LD_INT 80
5679: PPUSH
5680: CALL 349 0 7
// veh := CreateVehicle ;
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: CALL_OW 45
5693: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5694: LD_VAR 0 3
5698: PPUSH
5699: LD_VAR 0 5
5703: PUSH
5704: LD_VAR 0 4
5708: ARRAY
5709: PUSH
5710: LD_INT 3
5712: ARRAY
5713: PPUSH
5714: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5718: LD_VAR 0 3
5722: PPUSH
5723: LD_VAR 0 5
5727: PUSH
5728: LD_VAR 0 4
5732: ARRAY
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: LD_VAR 0 5
5742: PUSH
5743: LD_VAR 0 4
5747: ARRAY
5748: PUSH
5749: LD_INT 2
5751: ARRAY
5752: PPUSH
5753: LD_INT 0
5755: PPUSH
5756: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5760: LD_INT 0
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_OWVAR 67
5770: PPUSH
5771: CALL_OW 380
// un := CreateHuman ;
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: CALL_OW 44
5784: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5799: LD_INT 70
5801: PUSH
5802: LD_INT 66
5804: PUSH
5805: LD_INT 62
5807: PUSH
5808: LD_INT 58
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: PUSH
5817: LD_OWVAR 67
5821: ARRAY
5822: PPUSH
5823: CALL_OW 13
5827: PUSH
5828: LD_OWVAR 1
5832: PUSH
5833: LD_INT 30
5835: MOD
5836: PLUS
5837: IFTRUE 5849
5839: PUSH
5840: LD_EXP 24
5844: PUSH
5845: LD_INT 4
5847: LESS
5848: OR
5849: IFFALSE 5866
// SetCargo ( veh , mat_cans , 100 ) ;
5851: LD_VAR 0 3
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: LD_INT 100
5861: PPUSH
5862: CALL_OW 290
// for i := 2 to points do
5866: LD_ADDR_VAR 0 7
5870: PUSH
5871: DOUBLE
5872: LD_INT 2
5874: DEC
5875: ST_TO_ADDR
5876: LD_VAR 0 6
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5925
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5884: LD_VAR 0 3
5888: PPUSH
5889: LD_VAR 0 6
5893: PUSH
5894: LD_VAR 0 7
5898: ARRAY
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: LD_VAR 0 6
5908: PUSH
5909: LD_VAR 0 7
5913: ARRAY
5914: PUSH
5915: LD_INT 2
5917: ARRAY
5918: PPUSH
5919: CALL_OW 171
5923: GO 5881
5925: POP
5926: POP
// convoyCounter := convoyCounter + 1 ;
5927: LD_ADDR_EXP 24
5931: PUSH
5932: LD_EXP 24
5936: PUSH
5937: LD_INT 1
5939: PLUS
5940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5941: LD_INT 35
5943: PPUSH
5944: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5948: LD_VAR 0 3
5952: PPUSH
5953: CALL_OW 255
5957: PUSH
5958: LD_INT 4
5960: NONEQUAL
5961: IFFALSE 5974
// begin ComStop ( veh ) ;
5963: LD_VAR 0 3
5967: PPUSH
5968: CALL_OW 141
// exit ;
5972: GO 6213
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5974: LD_VAR 0 3
5978: PPUSH
5979: CALL_OW 314
5983: NOT
5984: IFFALSE 5997
5986: PUSH
5987: LD_VAR 0 3
5991: PPUSH
5992: CALL_OW 302
5996: AND
5997: IFFALSE 6038
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5999: LD_VAR 0 3
6003: PPUSH
6004: LD_VAR 0 6
6008: PUSH
6009: LD_VAR 0 6
6013: ARRAY
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: LD_VAR 0 6
6023: PUSH
6024: LD_VAR 0 6
6028: ARRAY
6029: PUSH
6030: LD_INT 2
6032: ARRAY
6033: PPUSH
6034: CALL_OW 111
// if not IsInUnit ( un ) then
6038: LD_VAR 0 2
6042: PPUSH
6043: CALL_OW 310
6047: NOT
6048: IFFALSE 6089
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6050: LD_VAR 0 2
6054: PPUSH
6055: LD_VAR 0 6
6059: PUSH
6060: LD_VAR 0 6
6064: ARRAY
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PPUSH
6070: LD_VAR 0 6
6074: PUSH
6075: LD_VAR 0 6
6079: ARRAY
6080: PUSH
6081: LD_INT 2
6083: ARRAY
6084: PPUSH
6085: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 308
6103: IFTRUE 6121
6105: PUSH
6106: LD_VAR 0 2
6110: PPUSH
6111: LD_VAR 0 8
6115: PPUSH
6116: CALL_OW 308
6120: OR
6121: IFFALSE 5941
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6123: LD_VAR 0 2
6127: PPUSH
6128: CALL_OW 302
6132: IFFALSE 6146
6134: PUSH
6135: LD_VAR 0 3
6139: PPUSH
6140: CALL_OW 302
6144: NOT
6145: AND
6146: IFFALSE 6164
6148: PUSH
6149: LD_VAR 0 2
6153: PPUSH
6154: LD_VAR 0 8
6158: PPUSH
6159: CALL_OW 308
6163: AND
6164: IFFALSE 6175
// RemoveUnit ( un ) ;
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6175: LD_VAR 0 3
6179: PPUSH
6180: LD_VAR 0 8
6184: PPUSH
6185: CALL_OW 308
6189: IFFALSE 6202
6191: PUSH
6192: LD_VAR 0 3
6196: PPUSH
6197: CALL_OW 302
6201: AND
6202: IFFALSE 6213
// RemoveUnit ( veh ) ;
6204: LD_VAR 0 3
6208: PPUSH
6209: CALL_OW 64
// end ;
6213: LD_VAR 0 1
6217: RET
// export function SendAttack ; var un , veh , i ; begin
6218: LD_INT 0
6220: PPUSH
6221: PPUSH
6222: PPUSH
6223: PPUSH
// if blockAttack then
6224: LD_EXP 29
6228: IFFALSE 6251
// begin repeat wait ( 0 0$1 ) ;
6230: LD_INT 35
6232: PPUSH
6233: CALL_OW 67
// until not blockAttack ;
6237: LD_EXP 29
6241: NOT
6242: IFFALSE 6230
// wait ( 0 0$5 ) ;
6244: LD_INT 175
6246: PPUSH
6247: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6251: LD_INT 22
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 21
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: PUSH
6280: LD_INT 10
6282: GREATER
6283: IFFALSE 6326
// begin repeat wait ( 0 0$1 ) ;
6285: LD_INT 35
6287: PPUSH
6288: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6292: LD_INT 22
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 21
6304: PUSH
6305: LD_INT 1
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PPUSH
6316: CALL_OW 69
6320: PUSH
6321: LD_INT 10
6323: LESSEQUAL
6324: IFFALSE 6285
// end ; IncomingAttack ;
6326: CALL 15838 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6330: LD_INT 2100
6332: PPUSH
6333: LD_INT 3500
6335: PPUSH
6336: CALL_OW 12
6340: PPUSH
6341: CALL_OW 67
// if blockAttack then
6345: LD_EXP 29
6349: IFFALSE 6372
// begin repeat wait ( 0 0$1 ) ;
6351: LD_INT 35
6353: PPUSH
6354: CALL_OW 67
// until not blockAttack ;
6358: LD_EXP 29
6362: NOT
6363: IFFALSE 6351
// wait ( 0 0$5 ) ;
6365: LD_INT 175
6367: PPUSH
6368: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6372: LD_ADDR_VAR 0 4
6376: PUSH
6377: DOUBLE
6378: LD_INT 1
6380: DEC
6381: ST_TO_ADDR
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 4
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_OWVAR 67
6404: ARRAY
6405: PUSH
6406: LD_EXP 20
6410: PUSH
6411: LD_INT 3
6413: DIV
6414: PLUS
6415: PUSH
6416: FOR_TO
6417: IFFALSE 6533
// begin uc_side := 1 ;
6419: LD_ADDR_OWVAR 20
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// uc_nation := 1 ;
6427: LD_ADDR_OWVAR 21
6431: PUSH
6432: LD_INT 1
6434: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6435: LD_INT 0
6437: PPUSH
6438: LD_INT 1
6440: PPUSH
6441: LD_INT 2
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: LD_INT 4
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: PUSH
6459: LD_OWVAR 67
6463: ARRAY
6464: PPUSH
6465: CALL_OW 380
// un := CreateHuman ;
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: CALL_OW 44
6478: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_INT 37
6486: PPUSH
6487: LD_INT 70
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 50
// usAttackers := usAttackers union un ;
6500: LD_ADDR_EXP 50
6504: PUSH
6505: LD_EXP 50
6509: PUSH
6510: LD_VAR 0 2
6514: UNION
6515: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_INT 40
6523: PPUSH
6524: LD_INT 65
6526: PPUSH
6527: CALL_OW 111
// end ;
6531: GO 6416
6533: POP
6534: POP
// uc_side := 1 ;
6535: LD_ADDR_OWVAR 20
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// uc_nation := 1 ;
6543: LD_ADDR_OWVAR 21
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6551: LD_INT 0
6553: PPUSH
6554: LD_INT 4
6556: PPUSH
6557: LD_INT 2
6559: PPUSH
6560: CALL_OW 380
// un := CreateHuman ;
6564: LD_ADDR_VAR 0 2
6568: PUSH
6569: CALL_OW 44
6573: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6574: LD_VAR 0 2
6578: PPUSH
6579: LD_INT 37
6581: PPUSH
6582: LD_INT 70
6584: PPUSH
6585: LD_INT 3
6587: PPUSH
6588: LD_INT 0
6590: PPUSH
6591: CALL_OW 50
// usAttackers := usAttackers union un ;
6595: LD_ADDR_EXP 50
6599: PUSH
6600: LD_EXP 50
6604: PUSH
6605: LD_VAR 0 2
6609: UNION
6610: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6611: LD_VAR 0 2
6615: PPUSH
6616: LD_INT 40
6618: PPUSH
6619: LD_INT 65
6621: PPUSH
6622: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6626: LD_ADDR_VAR 0 4
6630: PUSH
6631: DOUBLE
6632: LD_INT 1
6634: DEC
6635: ST_TO_ADDR
6636: LD_OWVAR 67
6640: PUSH
6641: LD_EXP 20
6645: PUSH
6646: LD_INT 4
6648: DIV
6649: PLUS
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6848
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6654: LD_ADDR_VAR 0 3
6658: PUSH
6659: LD_INT 1
6661: PPUSH
6662: LD_INT 1
6664: PPUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 1
6681: PPUSH
6682: LD_INT 3
6684: PPUSH
6685: CALL_OW 12
6689: ARRAY
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: LD_INT 4
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 1
6713: PPUSH
6714: LD_INT 3
6716: PPUSH
6717: CALL_OW 12
6721: ARRAY
6722: PPUSH
6723: LD_INT 90
6725: PPUSH
6726: CALL 349 0 7
6730: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6731: LD_VAR 0 3
6735: PPUSH
6736: LD_INT 35
6738: PPUSH
6739: LD_INT 65
6741: PPUSH
6742: LD_INT 0
6744: PPUSH
6745: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6749: LD_INT 0
6751: PPUSH
6752: LD_INT 3
6754: PPUSH
6755: LD_OWVAR 67
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: PPUSH
6764: CALL_OW 380
// un := CreateHuman ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL_OW 44
6777: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6778: LD_VAR 0 2
6782: PPUSH
6783: LD_VAR 0 3
6787: PPUSH
6788: CALL_OW 52
// usAttackers := usAttackers union un ;
6792: LD_ADDR_EXP 50
6796: PUSH
6797: LD_EXP 50
6801: PUSH
6802: LD_VAR 0 2
6806: UNION
6807: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 39
6815: PPUSH
6816: LD_INT 60
6818: PPUSH
6819: CALL_OW 111
// wait ( 0 0$3 ) ;
6823: LD_INT 105
6825: PPUSH
6826: CALL_OW 67
// usAttackers := usAttackers union veh ;
6830: LD_ADDR_EXP 50
6834: PUSH
6835: LD_EXP 50
6839: PUSH
6840: LD_VAR 0 3
6844: UNION
6845: ST_TO_ADDR
// end ;
6846: GO 6651
6848: POP
6849: POP
// attackWave := attackWave + 1 ;
6850: LD_ADDR_EXP 20
6854: PUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6864: LD_EXP 25
6868: PPUSH
6869: CALL_OW 427
// end ;
6873: LD_VAR 0 1
6877: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6878: LD_INT 0
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
6889: PPUSH
6890: PPUSH
// if retreatAllowed then
6891: LD_EXP 12
6895: IFFALSE 6907
// strategy := 2 else
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 2
6904: ST_TO_ADDR
6905: GO 6923
// strategy := rand ( 0 , 2 ) ;
6907: LD_ADDR_VAR 0 5
6911: PUSH
6912: LD_INT 0
6914: PPUSH
6915: LD_INT 2
6917: PPUSH
6918: CALL_OW 12
6922: ST_TO_ADDR
// attackFormula := [ ] ;
6923: LD_ADDR_VAR 0 6
6927: PUSH
6928: EMPTY
6929: ST_TO_ADDR
// case strategy of 0 :
6930: LD_VAR 0 5
6934: PUSH
6935: LD_INT 0
6937: DOUBLE
6938: EQUAL
6939: IFTRUE 6943
6941: GO 7273
6943: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6944: LD_INT 11
6946: PPUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 30
6959: PUSH
6960: LD_INT 4
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 70
6975: NOT
6976: IFFALSE 7048
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6978: LD_ADDR_VAR 0 6
6982: PUSH
6983: LD_INT 41
6985: PUSH
6986: LD_INT 34
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: PUSH
6996: LD_INT 53
6998: PUSH
6999: LD_INT 62
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 37
7008: PUSH
7009: LD_INT 63
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 44
7018: PUSH
7019: LD_INT 45
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 37
7028: PUSH
7029: LD_INT 28
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: ST_TO_ADDR
7046: GO 7271
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7048: LD_INT 12
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 2
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 2
7063: PUSH
7064: LD_INT 30
7066: PUSH
7067: LD_INT 4
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 31
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 32
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 70
7108: NOT
7109: IFFALSE 7192
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7111: LD_ADDR_VAR 0 6
7115: PUSH
7116: LD_INT 27
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 27
7128: PUSH
7129: LD_INT 32
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 53
7142: PUSH
7143: LD_INT 62
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 37
7152: PUSH
7153: LD_INT 63
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 44
7162: PUSH
7163: LD_INT 45
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 37
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 7271
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7192: LD_ADDR_VAR 0 6
7196: PUSH
7197: LD_INT 71
7199: PUSH
7200: LD_INT 67
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 54
7209: PUSH
7210: LD_INT 35
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 63
7223: PUSH
7224: LD_INT 40
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 37
7233: PUSH
7234: LD_INT 63
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 44
7243: PUSH
7244: LD_INT 45
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 28
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: ST_TO_ADDR
// end ; 1 :
7271: GO 7476
7273: LD_INT 1
7275: DOUBLE
7276: EQUAL
7277: IFTRUE 7281
7279: GO 7385
7281: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7282: LD_ADDR_VAR 0 6
7286: PUSH
7287: LD_INT 71
7289: PUSH
7290: LD_INT 67
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 82
7299: PUSH
7300: LD_INT 23
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 53
7309: PUSH
7310: LD_INT 7
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 43
7319: PUSH
7320: LD_INT 10
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 53
7335: PUSH
7336: LD_INT 62
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 37
7345: PUSH
7346: LD_INT 63
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 44
7355: PUSH
7356: LD_INT 45
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 37
7365: PUSH
7366: LD_INT 28
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 7476
7385: LD_INT 2
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7475
7393: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7394: LD_ADDR_VAR 0 6
7398: PUSH
7399: LD_INT 90
7401: PUSH
7402: LD_INT 59
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 64
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 82
7425: PUSH
7426: LD_INT 75
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 73
7435: PUSH
7436: LD_INT 67
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 101
7445: PUSH
7446: LD_INT 65
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 108
7455: PUSH
7456: LD_INT 62
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: ST_TO_ADDR
7473: GO 7476
7475: POP
// if not attackFormula then
7476: LD_VAR 0 6
7480: NOT
7481: IFFALSE 7485
// exit ;
7483: GO 9185
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7485: LD_ADDR_VAR 0 7
7489: PUSH
7490: LD_EXP 50
7494: PPUSH
7495: LD_INT 25
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 72
7509: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7510: LD_ADDR_VAR 0 8
7514: PUSH
7515: LD_EXP 50
7519: PPUSH
7520: LD_INT 25
7522: PUSH
7523: LD_INT 4
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 72
7534: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7535: LD_ADDR_VAR 0 9
7539: PUSH
7540: LD_EXP 50
7544: PPUSH
7545: LD_INT 25
7547: PUSH
7548: LD_INT 3
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL_OW 72
7559: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7560: LD_ADDR_VAR 0 10
7564: PUSH
7565: LD_EXP 50
7569: PPUSH
7570: LD_INT 21
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 72
7584: ST_TO_ADDR
// if sci then
7585: LD_VAR 0 8
7589: IFFALSE 7626
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7591: LD_VAR 0 8
7595: PPUSH
7596: LD_VAR 0 6
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: ARRAY
7608: PPUSH
7609: LD_VAR 0 6
7613: PUSH
7614: LD_INT 2
7616: ARRAY
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PPUSH
7622: CALL_OW 111
// repeat wait ( 10 ) ;
7626: LD_INT 10
7628: PPUSH
7629: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7633: LD_ADDR_VAR 0 7
7637: PUSH
7638: LD_EXP 50
7642: PPUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 72
7657: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_EXP 50
7667: PPUSH
7668: LD_INT 25
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 72
7682: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7683: LD_ADDR_VAR 0 9
7687: PUSH
7688: LD_EXP 50
7692: PPUSH
7693: LD_INT 25
7695: PUSH
7696: LD_INT 3
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PPUSH
7703: CALL_OW 72
7707: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7708: LD_ADDR_VAR 0 10
7712: PUSH
7713: LD_EXP 50
7717: PPUSH
7718: LD_INT 21
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PPUSH
7728: CALL_OW 72
7732: ST_TO_ADDR
// if sol then
7733: LD_VAR 0 7
7737: IFFALSE 8158
// begin for i in sol do
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: LD_VAR 0 7
7748: PUSH
7749: FOR_IN
7750: IFFALSE 8156
// begin tag := GetTag ( i ) ;
7752: LD_ADDR_VAR 0 4
7756: PUSH
7757: LD_VAR 0 2
7761: PPUSH
7762: CALL_OW 110
7766: ST_TO_ADDR
// if not tag then
7767: LD_VAR 0 4
7771: NOT
7772: IFFALSE 7881
// begin if GetLives ( i ) = 1000 then
7774: LD_VAR 0 2
7778: PPUSH
7779: CALL_OW 256
7783: PUSH
7784: LD_INT 1000
7786: EQUAL
7787: IFFALSE 7803
// SetTag ( i , 1 ) else
7789: LD_VAR 0 2
7793: PPUSH
7794: LD_INT 1
7796: PPUSH
7797: CALL_OW 109
7801: GO 7879
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7803: LD_VAR 0 2
7807: PPUSH
7808: LD_VAR 0 6
7812: PUSH
7813: LD_INT 2
7815: ARRAY
7816: PUSH
7817: LD_INT 1
7819: ARRAY
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 2
7832: ARRAY
7833: PPUSH
7834: CALL_OW 297
7838: PUSH
7839: LD_INT 10
7841: GREATER
7842: IFFALSE 7879
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7844: LD_VAR 0 2
7848: PPUSH
7849: LD_VAR 0 6
7853: PUSH
7854: LD_INT 2
7856: ARRAY
7857: PUSH
7858: LD_INT 1
7860: ARRAY
7861: PPUSH
7862: LD_VAR 0 6
7866: PUSH
7867: LD_INT 2
7869: ARRAY
7870: PUSH
7871: LD_INT 2
7873: ARRAY
7874: PPUSH
7875: CALL_OW 111
// end else
7879: GO 8154
// begin if GetLives ( i ) < 760 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 256
7890: PUSH
7891: LD_INT 760
7893: LESS
7894: IFFALSE 7945
// begin SetTag ( i , 0 ) ;
7896: LD_VAR 0 2
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_VAR 0 6
7917: PUSH
7918: LD_INT 2
7920: ARRAY
7921: PUSH
7922: LD_INT 1
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 6
7930: PUSH
7931: LD_INT 2
7933: ARRAY
7934: PUSH
7935: LD_INT 2
7937: ARRAY
7938: PPUSH
7939: CALL_OW 111
// end else
7943: GO 8154
// if tag <= attackFormula [ 1 ] then
7945: LD_VAR 0 4
7949: PUSH
7950: LD_VAR 0 6
7954: PUSH
7955: LD_INT 1
7957: ARRAY
7958: LESSEQUAL
7959: IFFALSE 8120
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_VAR 0 6
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: PUSH
7975: LD_VAR 0 4
7979: ARRAY
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 6
7989: PUSH
7990: LD_INT 1
7992: ARRAY
7993: PUSH
7994: LD_VAR 0 4
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PPUSH
8004: CALL_OW 297
8008: PUSH
8009: LD_INT 6
8011: GREATER
8012: IFFALSE 8063
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8014: LD_VAR 0 2
8018: PPUSH
8019: LD_VAR 0 6
8023: PUSH
8024: LD_INT 1
8026: ARRAY
8027: PUSH
8028: LD_VAR 0 4
8032: ARRAY
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: LD_VAR 0 6
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PUSH
8047: LD_VAR 0 4
8051: ARRAY
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: PPUSH
8057: CALL_OW 114
8061: GO 8118
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8063: LD_INT 81
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 91
8075: PUSH
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PPUSH
8093: CALL_OW 69
8097: NOT
8098: IFFALSE 8118
// SetTag ( i , tag + 1 ) ;
8100: LD_VAR 0 2
8104: PPUSH
8105: LD_VAR 0 4
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 109
// end else
8118: GO 8154
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_INT 81
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PPUSH
8135: CALL_OW 69
8139: PPUSH
8140: LD_VAR 0 2
8144: PPUSH
8145: CALL_OW 74
8149: PPUSH
8150: CALL_OW 115
// end ; end ;
8154: GO 7749
8156: POP
8157: POP
// end ; if sci then
8158: LD_VAR 0 8
8162: IFFALSE 8447
// begin if not sol and not mech then
8164: LD_VAR 0 7
8168: NOT
8169: IFFALSE 8178
8171: PUSH
8172: LD_VAR 0 9
8176: NOT
8177: AND
8178: IFFALSE 8230
// begin for i in sci do
8180: LD_ADDR_VAR 0 2
8184: PUSH
8185: LD_VAR 0 8
8189: PUSH
8190: FOR_IN
8191: IFFALSE 8226
// begin usForces := usForces union i ;
8193: LD_ADDR_EXP 47
8197: PUSH
8198: LD_EXP 47
8202: PUSH
8203: LD_VAR 0 2
8207: UNION
8208: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8209: LD_VAR 0 2
8213: PPUSH
8214: LD_INT 34
8216: PPUSH
8217: LD_INT 68
8219: PPUSH
8220: CALL_OW 111
// end ;
8224: GO 8190
8226: POP
8227: POP
// end else
8228: GO 8447
// for i in sci do
8230: LD_ADDR_VAR 0 2
8234: PUSH
8235: LD_VAR 0 8
8239: PUSH
8240: FOR_IN
8241: IFFALSE 8445
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8243: LD_VAR 0 2
8247: PPUSH
8248: LD_VAR 0 6
8252: PUSH
8253: LD_INT 2
8255: ARRAY
8256: PUSH
8257: LD_INT 1
8259: ARRAY
8260: PPUSH
8261: LD_VAR 0 6
8265: PUSH
8266: LD_INT 2
8268: ARRAY
8269: PUSH
8270: LD_INT 2
8272: ARRAY
8273: PPUSH
8274: CALL_OW 297
8278: PUSH
8279: LD_INT 10
8281: GREATER
8282: IFFALSE 8321
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8284: LD_VAR 0 2
8288: PPUSH
8289: LD_VAR 0 6
8293: PUSH
8294: LD_INT 2
8296: ARRAY
8297: PUSH
8298: LD_INT 1
8300: ARRAY
8301: PPUSH
8302: LD_VAR 0 6
8306: PUSH
8307: LD_INT 2
8309: ARRAY
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 111
8319: GO 8443
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) and not HasTask ( i ) then
8321: LD_VAR 0 7
8325: PPUSH
8326: LD_INT 3
8328: PUSH
8329: LD_INT 24
8331: PUSH
8332: LD_INT 1000
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 91
8345: PUSH
8346: LD_VAR 0 2
8350: PUSH
8351: LD_INT 10
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PPUSH
8363: CALL_OW 72
8367: IFFALSE 8381
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 314
8379: NOT
8380: AND
8381: IFFALSE 8443
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8383: LD_VAR 0 2
8387: PPUSH
8388: LD_VAR 0 7
8392: PPUSH
8393: LD_INT 3
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 1000
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 91
8412: PUSH
8413: LD_VAR 0 2
8417: PUSH
8418: LD_INT 10
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 72
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 128
8443: GO 8240
8445: POP
8446: POP
// end ; if mech then
8447: LD_VAR 0 9
8451: IFFALSE 9167
// begin for i in mech do
8453: LD_ADDR_VAR 0 2
8457: PUSH
8458: LD_VAR 0 9
8462: PUSH
8463: FOR_IN
8464: IFFALSE 9165
// begin tag := GetTag ( i ) ;
8466: LD_ADDR_VAR 0 4
8470: PUSH
8471: LD_VAR 0 2
8475: PPUSH
8476: CALL_OW 110
8480: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8481: LD_ADDR_VAR 0 11
8485: PUSH
8486: LD_VAR 0 2
8490: PPUSH
8491: CALL_OW 310
8495: ST_TO_ADDR
// if not tag then
8496: LD_VAR 0 4
8500: NOT
8501: IFFALSE 8876
// begin if veh then
8503: LD_VAR 0 11
8507: IFFALSE 8678
// begin if GetLives ( veh ) = 1000 then
8509: LD_VAR 0 11
8513: PPUSH
8514: CALL_OW 256
8518: PUSH
8519: LD_INT 1000
8521: EQUAL
8522: IFFALSE 8538
// SetTag ( i , 1 ) else
8524: LD_VAR 0 2
8528: PPUSH
8529: LD_INT 1
8531: PPUSH
8532: CALL_OW 109
8536: GO 8676
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8538: LD_VAR 0 11
8542: PPUSH
8543: LD_VAR 0 6
8547: PUSH
8548: LD_INT 3
8550: ARRAY
8551: PUSH
8552: LD_INT 1
8554: ARRAY
8555: PPUSH
8556: LD_VAR 0 6
8560: PUSH
8561: LD_INT 3
8563: ARRAY
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PPUSH
8569: CALL_OW 297
8573: PUSH
8574: LD_INT 8
8576: GREATER
8577: IFFALSE 8616
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8579: LD_VAR 0 11
8583: PPUSH
8584: LD_VAR 0 6
8588: PUSH
8589: LD_INT 3
8591: ARRAY
8592: PUSH
8593: LD_INT 1
8595: ARRAY
8596: PPUSH
8597: LD_VAR 0 6
8601: PUSH
8602: LD_INT 3
8604: ARRAY
8605: PUSH
8606: LD_INT 2
8608: ARRAY
8609: PPUSH
8610: CALL_OW 111
8614: GO 8676
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8616: LD_INT 81
8618: PUSH
8619: LD_INT 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 91
8628: PUSH
8629: LD_VAR 0 2
8633: PUSH
8634: LD_INT 12
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 69
8650: NOT
8651: IFFALSE 8676
// begin ComExitVehicle ( i ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8662: LD_VAR 0 2
8666: PPUSH
8667: LD_VAR 0 11
8671: PPUSH
8672: CALL_OW 189
// end ; end else
8676: GO 8874
// if GetLives ( i ) < 400 then
8678: LD_VAR 0 2
8682: PPUSH
8683: CALL_OW 256
8687: PUSH
8688: LD_INT 400
8690: LESS
8691: IFFALSE 8742
// begin usAttackers := usAttackers diff i ;
8693: LD_ADDR_EXP 50
8697: PUSH
8698: LD_EXP 50
8702: PUSH
8703: LD_VAR 0 2
8707: DIFF
8708: ST_TO_ADDR
// usForces := usForces union i ;
8709: LD_ADDR_EXP 47
8713: PUSH
8714: LD_EXP 47
8718: PUSH
8719: LD_VAR 0 2
8723: UNION
8724: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8725: LD_VAR 0 2
8729: PPUSH
8730: LD_INT 34
8732: PPUSH
8733: LD_INT 68
8735: PPUSH
8736: CALL_OW 111
// end else
8740: GO 8874
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8742: LD_VAR 0 10
8746: PPUSH
8747: LD_INT 58
8749: PUSH
8750: EMPTY
8751: LIST
8752: PUSH
8753: LD_INT 24
8755: PUSH
8756: LD_INT 1000
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PPUSH
8767: CALL_OW 72
8771: IFFALSE 8785
8773: PUSH
8774: LD_VAR 0 2
8778: PPUSH
8779: CALL_OW 314
8783: NOT
8784: AND
8785: IFTRUE 8823
8787: PUSH
8788: LD_INT 81
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 91
8800: PUSH
8801: LD_VAR 0 2
8805: PUSH
8806: LD_INT 9
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: OR
8823: IFFALSE 8874
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8825: LD_VAR 0 2
8829: PPUSH
8830: LD_VAR 0 10
8834: PPUSH
8835: LD_INT 58
8837: PUSH
8838: EMPTY
8839: LIST
8840: PUSH
8841: LD_INT 24
8843: PUSH
8844: LD_INT 250
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 72
8859: PPUSH
8860: LD_VAR 0 2
8864: PPUSH
8865: CALL_OW 74
8869: PPUSH
8870: CALL_OW 120
// end else
8874: GO 9163
// begin if veh and GetLives ( veh ) < 760 then
8876: LD_VAR 0 11
8880: IFFALSE 8897
8882: PUSH
8883: LD_VAR 0 11
8887: PPUSH
8888: CALL_OW 256
8892: PUSH
8893: LD_INT 760
8895: LESS
8896: AND
8897: IFFALSE 8948
// begin SetTag ( i , 0 ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: LD_INT 0
8906: PPUSH
8907: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8911: LD_VAR 0 11
8915: PPUSH
8916: LD_VAR 0 6
8920: PUSH
8921: LD_INT 3
8923: ARRAY
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_VAR 0 6
8933: PUSH
8934: LD_INT 3
8936: ARRAY
8937: PUSH
8938: LD_INT 2
8940: ARRAY
8941: PPUSH
8942: CALL_OW 111
// end else
8946: GO 9163
// if veh then
8948: LD_VAR 0 11
8952: IFFALSE 9163
// if tag <= attackFormula [ 4 ] then
8954: LD_VAR 0 4
8958: PUSH
8959: LD_VAR 0 6
8963: PUSH
8964: LD_INT 4
8966: ARRAY
8967: LESSEQUAL
8968: IFFALSE 9129
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8970: LD_VAR 0 11
8974: PPUSH
8975: LD_VAR 0 6
8979: PUSH
8980: LD_INT 4
8982: ARRAY
8983: PUSH
8984: LD_VAR 0 4
8988: ARRAY
8989: PUSH
8990: LD_INT 1
8992: ARRAY
8993: PPUSH
8994: LD_VAR 0 6
8998: PUSH
8999: LD_INT 4
9001: ARRAY
9002: PUSH
9003: LD_VAR 0 4
9007: ARRAY
9008: PUSH
9009: LD_INT 2
9011: ARRAY
9012: PPUSH
9013: CALL_OW 297
9017: PUSH
9018: LD_INT 6
9020: GREATER
9021: IFFALSE 9072
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9023: LD_VAR 0 11
9027: PPUSH
9028: LD_VAR 0 6
9032: PUSH
9033: LD_INT 4
9035: ARRAY
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 1
9045: ARRAY
9046: PPUSH
9047: LD_VAR 0 6
9051: PUSH
9052: LD_INT 4
9054: ARRAY
9055: PUSH
9056: LD_VAR 0 4
9060: ARRAY
9061: PUSH
9062: LD_INT 2
9064: ARRAY
9065: PPUSH
9066: CALL_OW 114
9070: GO 9127
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
9072: LD_INT 81
9074: PUSH
9075: LD_INT 1
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 91
9084: PUSH
9085: LD_VAR 0 11
9089: PUSH
9090: LD_INT 10
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PPUSH
9102: CALL_OW 69
9106: NOT
9107: IFFALSE 9127
// SetTag ( i , tag + 1 ) ;
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_VAR 0 4
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: PPUSH
9123: CALL_OW 109
// end else
9127: GO 9163
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9129: LD_VAR 0 11
9133: PPUSH
9134: LD_INT 81
9136: PUSH
9137: LD_INT 1
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PPUSH
9144: CALL_OW 69
9148: PPUSH
9149: LD_VAR 0 2
9153: PPUSH
9154: CALL_OW 74
9158: PPUSH
9159: CALL_OW 115
// end ; end ;
9163: GO 8463
9165: POP
9166: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9167: LD_EXP 50
9171: PPUSH
9172: LD_INT 52
9174: PUSH
9175: EMPTY
9176: LIST
9177: PPUSH
9178: CALL_OW 72
9182: NOT
9183: IFFALSE 7626
// end ;
9185: LD_VAR 0 1
9189: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9190: LD_INT 22
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 32
9202: PUSH
9203: LD_INT 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 69
9218: IFFALSE 9295
9220: GO 9222
9222: DISABLE
9223: LD_INT 0
9225: PPUSH
// begin enable ;
9226: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9227: LD_ADDR_VAR 0 1
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 32
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PPUSH
9256: CALL_OW 69
9260: PUSH
9261: FOR_IN
9262: IFFALSE 9293
// if GetFuel ( i ) < 10 then
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 261
9273: PUSH
9274: LD_INT 10
9276: LESS
9277: IFFALSE 9291
// SetFuel ( i , 10 ) ;
9279: LD_VAR 0 1
9283: PPUSH
9284: LD_INT 10
9286: PPUSH
9287: CALL_OW 240
9291: GO 9261
9293: POP
9294: POP
// end ; end_of_file
9295: PPOPN 1
9297: END
// export function Action ; var hasAll , i , tmp ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9304: LD_ADDR_VAR 0 2
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 21
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 23
9331: PUSH
9332: LD_INT 2
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: PPUSH
9344: CALL_OW 69
9348: PUSH
9349: LD_INT 7
9351: GREATEREQUAL
9352: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_STRING 03_HasAll
9360: PPUSH
9361: CALL_OW 39
// Video ( true ) ;
9365: LD_INT 1
9367: PPUSH
9368: CALL 81262 0 1
// CenterNowOnUnits ( Heike ) ;
9372: LD_EXP 31
9376: PPUSH
9377: CALL_OW 87
// wait ( 0 0$2 ) ;
9381: LD_INT 70
9383: PPUSH
9384: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9388: LD_EXP 39
9392: PPUSH
9393: LD_STRING DF-1-start
9395: PPUSH
9396: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9400: LD_EXP 31
9404: PPUSH
9405: LD_EXP 39
9409: PPUSH
9410: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9414: LD_EXP 31
9418: PPUSH
9419: LD_STRING DH-1-start
9421: PPUSH
9422: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9426: LD_EXP 40
9430: PPUSH
9431: LD_INT 92
9433: PPUSH
9434: LD_INT 21
9436: PPUSH
9437: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9441: LD_EXP 35
9445: PPUSH
9446: LD_INT 94
9448: PPUSH
9449: LD_INT 23
9451: PPUSH
9452: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9456: LD_EXP 43
9460: PUSH
9461: LD_INT 1
9463: ARRAY
9464: PPUSH
9465: LD_INT 90
9467: PPUSH
9468: LD_INT 23
9470: PPUSH
9471: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9475: LD_EXP 43
9479: PUSH
9480: LD_INT 2
9482: ARRAY
9483: PPUSH
9484: LD_INT 93
9486: PPUSH
9487: LD_INT 25
9489: PPUSH
9490: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9494: LD_EXP 43
9498: PPUSH
9499: LD_EXP 40
9503: PPUSH
9504: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9508: LD_EXP 40
9512: PUSH
9513: LD_EXP 35
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: LD_EXP 31
9526: PPUSH
9527: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9531: LD_EXP 31
9535: PPUSH
9536: LD_EXP 40
9540: PPUSH
9541: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9545: LD_INT 35
9547: PPUSH
9548: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9552: LD_EXP 40
9556: PPUSH
9557: LD_INT 92
9559: PPUSH
9560: LD_INT 21
9562: PPUSH
9563: CALL_OW 307
9567: IFFALSE 9545
// Say ( Omar , DO-1-start ) ;
9569: LD_EXP 40
9573: PPUSH
9574: LD_STRING DO-1-start
9576: PPUSH
9577: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9581: LD_EXP 31
9585: PPUSH
9586: LD_STRING DH-2-start
9588: PPUSH
9589: CALL_OW 88
// if hasAll then
9593: LD_VAR 0 2
9597: IFFALSE 9725
// begin Say ( Omar , DO-2-start ) ;
9599: LD_EXP 40
9603: PPUSH
9604: LD_STRING DO-2-start
9606: PPUSH
9607: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-3-start
9618: PPUSH
9619: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9623: LD_EXP 31
9627: PPUSH
9628: LD_STRING DH-3-start
9630: PPUSH
9631: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9635: LD_EXP 39
9639: PPUSH
9640: LD_STRING DF-2-start
9642: PPUSH
9643: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9647: LD_EXP 40
9651: PPUSH
9652: LD_EXP 39
9656: PPUSH
9657: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9661: LD_EXP 40
9665: PPUSH
9666: LD_STRING DO-4-start
9668: PPUSH
9669: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9673: LD_EXP 39
9677: PPUSH
9678: LD_STRING DF-3-start
9680: PPUSH
9681: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9685: LD_EXP 40
9689: PPUSH
9690: LD_STRING DO-5-start
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9697: LD_EXP 39
9701: PPUSH
9702: LD_STRING DF-4-start
9704: PPUSH
9705: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9709: LD_EXP 40
9713: PPUSH
9714: LD_EXP 31
9718: PPUSH
9719: CALL_OW 119
// end else
9723: GO 9825
// begin Say ( Omar , DO-2-start-a ) ;
9725: LD_EXP 40
9729: PPUSH
9730: LD_STRING DO-2-start-a
9732: PPUSH
9733: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9737: LD_EXP 40
9741: PPUSH
9742: LD_STRING DO-3-start-a
9744: PPUSH
9745: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9749: LD_EXP 31
9753: PPUSH
9754: LD_STRING DH-3-start-a
9756: PPUSH
9757: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9761: LD_EXP 39
9765: PPUSH
9766: LD_STRING DF-2-start-a
9768: PPUSH
9769: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9773: LD_EXP 40
9777: PPUSH
9778: LD_EXP 39
9782: PPUSH
9783: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9787: LD_EXP 40
9791: PPUSH
9792: LD_STRING DO-4-start-a
9794: PPUSH
9795: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9799: LD_EXP 39
9803: PPUSH
9804: LD_STRING DF-3-start-a
9806: PPUSH
9807: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9811: LD_EXP 40
9815: PPUSH
9816: LD_EXP 31
9820: PPUSH
9821: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9832: LD_EXP 40
9836: PPUSH
9837: LD_STRING DO-1-mission
9839: PPUSH
9840: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9844: LD_EXP 40
9848: PPUSH
9849: LD_STRING DO-2-mission
9851: PPUSH
9852: CALL_OW 88
// if not hasAll then
9856: LD_VAR 0 2
9860: NOT
9861: IFFALSE 9875
// Say ( Omar , DO-3-mission ) ;
9863: LD_EXP 40
9867: PPUSH
9868: LD_STRING DO-3-mission
9870: PPUSH
9871: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9875: LD_EXP 40
9879: PPUSH
9880: LD_STRING DO-4-mission
9882: PPUSH
9883: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9887: LD_EXP 31
9891: PPUSH
9892: LD_STRING DH-1-mission
9894: PPUSH
9895: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9899: LD_EXP 39
9903: PPUSH
9904: LD_STRING DF-1-mission
9906: PPUSH
9907: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9911: LD_EXP 40
9915: PPUSH
9916: LD_STRING DO-5-mission
9918: PPUSH
9919: CALL_OW 88
// if not hasAll then
9923: LD_VAR 0 2
9927: NOT
9928: IFFALSE 10063
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9930: LD_ADDR_VAR 0 4
9934: PUSH
9935: LD_INT 22
9937: PUSH
9938: LD_INT 2
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 23
9957: PUSH
9958: LD_INT 2
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: PPUSH
9970: CALL_OW 69
9974: ST_TO_ADDR
// for i := 7 downto tmp do
9975: LD_ADDR_VAR 0 3
9979: PUSH
9980: DOUBLE
9981: LD_INT 7
9983: INC
9984: ST_TO_ADDR
9985: LD_VAR 0 4
9989: PUSH
9990: FOR_DOWNTO
9991: IFFALSE 10061
// begin if omarSquad < 3 then
9993: LD_EXP 43
9997: PUSH
9998: LD_INT 3
10000: LESS
10001: IFFALSE 10005
// break ;
10003: GO 10061
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10005: LD_EXP 43
10009: PUSH
10010: LD_INT 3
10012: ARRAY
10013: PPUSH
10014: LD_INT 2
10016: PPUSH
10017: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10021: LD_ADDR_EXP 45
10025: PUSH
10026: LD_EXP 45
10030: PUSH
10031: LD_EXP 43
10035: PUSH
10036: LD_INT 3
10038: ARRAY
10039: UNION
10040: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10041: LD_ADDR_EXP 43
10045: PUSH
10046: LD_EXP 43
10050: PPUSH
10051: LD_INT 3
10053: PPUSH
10054: CALL_OW 3
10058: ST_TO_ADDR
// end ;
10059: GO 9990
10061: POP
10062: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10063: LD_EXP 40
10067: PUSH
10068: LD_EXP 43
10072: ADD
10073: PPUSH
10074: LD_INT 103
10076: PPUSH
10077: LD_INT 9
10079: PPUSH
10080: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10084: LD_VAR 0 2
10088: IFFALSE 10101
10090: PUSH
10091: LD_EXP 36
10095: PPUSH
10096: CALL_OW 302
10100: AND
10101: IFFALSE 10162
// begin wait ( 0 0$3 ) ;
10103: LD_INT 105
10105: PPUSH
10106: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10110: LD_EXP 36
10114: PPUSH
10115: LD_EXP 39
10119: PPUSH
10120: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10124: LD_EXP 36
10128: PPUSH
10129: LD_STRING DK-1-side
10131: PPUSH
10132: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10136: LD_EXP 39
10140: PPUSH
10141: LD_EXP 36
10145: PPUSH
10146: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10150: LD_EXP 39
10154: PPUSH
10155: LD_STRING DF-1-side
10157: PPUSH
10158: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10162: LD_INT 22
10164: PUSH
10165: LD_INT 2
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PPUSH
10172: CALL_OW 69
10176: PPUSH
10177: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10181: LD_EXP 39
10185: PUSH
10186: LD_EXP 42
10190: ADD
10191: PPUSH
10192: LD_INT 108
10194: PPUSH
10195: LD_INT 62
10197: PPUSH
10198: CALL_OW 111
// gameStarted := true ;
10202: LD_ADDR_EXP 3
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10210: LD_INT 105
10212: PPUSH
10213: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10217: LD_EXP 31
10221: PPUSH
10222: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10226: LD_EXP 31
10230: PPUSH
10231: LD_EXP 35
10235: PPUSH
10236: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10240: LD_INT 22
10242: PUSH
10243: LD_INT 2
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PPUSH
10250: CALL_OW 69
10254: PUSH
10255: LD_EXP 31
10259: DIFF
10260: PPUSH
10261: LD_EXP 31
10265: PPUSH
10266: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10270: LD_EXP 31
10274: PPUSH
10275: LD_STRING DH-1-explore
10277: PPUSH
10278: CALL_OW 88
// if Givi then
10282: LD_EXP 32
10286: IFFALSE 10302
// Say ( Givi , DG-1-explore ) else
10288: LD_EXP 32
10292: PPUSH
10293: LD_STRING DG-1-explore
10295: PPUSH
10296: CALL_OW 88
10300: GO 10339
// if heikeSecondSquad then
10302: LD_EXP 45
10306: IFFALSE 10339
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10308: LD_EXP 45
10312: PPUSH
10313: LD_INT 26
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 72
10327: PUSH
10328: LD_INT 1
10330: ARRAY
10331: PPUSH
10332: LD_STRING DArm-1-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10339: LD_EXP 35
10343: PPUSH
10344: LD_STRING DA-1-explore
10346: PPUSH
10347: CALL_OW 88
// if Sophia then
10351: LD_EXP 37
10355: IFFALSE 10433
// begin Say ( Sophia , DS-2-explore ) ;
10357: LD_EXP 37
10361: PPUSH
10362: LD_STRING DS-2-explore
10364: PPUSH
10365: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10369: LD_EXP 35
10373: PPUSH
10374: LD_STRING DA-2-explore
10376: PPUSH
10377: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10381: LD_EXP 37
10385: PPUSH
10386: LD_EXP 35
10390: PPUSH
10391: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10395: LD_EXP 35
10399: PPUSH
10400: LD_EXP 37
10404: PPUSH
10405: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10409: LD_EXP 37
10413: PPUSH
10414: LD_STRING DS-3-explore
10416: PPUSH
10417: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10421: LD_EXP 35
10425: PPUSH
10426: LD_STRING DA-3-explore
10428: PPUSH
10429: CALL_OW 88
// end ; if Mike then
10433: LD_EXP 33
10437: IFFALSE 10493
// begin Say ( Mike , DM-1-explore ) ;
10439: LD_EXP 33
10443: PPUSH
10444: LD_STRING DM-1-explore
10446: PPUSH
10447: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10451: LD_EXP 31
10455: PPUSH
10456: LD_STRING DH-2-explore
10458: PPUSH
10459: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10463: LD_EXP 33
10467: PPUSH
10468: LD_STRING DM-2-explore
10470: PPUSH
10471: CALL_OW 88
// if Kaia then
10475: LD_EXP 36
10479: IFFALSE 10493
// Say ( Kaia , DK-1-explore ) ;
10481: LD_EXP 36
10485: PPUSH
10486: LD_STRING DK-1-explore
10488: PPUSH
10489: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10493: LD_INT 22
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 69
10507: PPUSH
10508: CALL_OW 139
// tick := 0 ;
10512: LD_ADDR_OWVAR 1
10516: PUSH
10517: LD_INT 0
10519: ST_TO_ADDR
// Video ( false ) ;
10520: LD_INT 0
10522: PPUSH
10523: CALL 81262 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10527: LD_STRING BuildBase
10529: PPUSH
10530: CALL_OW 337
// SaveForQuickRestart ;
10534: CALL_OW 22
// end ;
10538: LD_VAR 0 1
10542: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10543: LD_EXP 5
10547: IFFALSE 10556
10549: PUSH
10550: LD_EXP 7
10554: NOT
10555: AND
10556: IFFALSE 10747
10558: GO 10560
10560: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10561: LD_EXP 48
10565: PPUSH
10566: LD_STRING DUsm-4-assault
10568: PPUSH
10569: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10580: LD_INT 22
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 50
10602: PUSH
10603: EMPTY
10604: LIST
10605: PUSH
10606: LD_INT 95
10608: PUSH
10609: LD_INT 7
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: IFFALSE 10573
// if not IsOk ( usCommander ) or americanBaseCaptured then
10628: LD_EXP 48
10632: PPUSH
10633: CALL_OW 302
10637: NOT
10638: IFTRUE 10646
10640: PUSH
10641: LD_EXP 7
10645: OR
10646: IFFALSE 10650
// exit ;
10648: GO 10747
// repeat wait ( 0 0$1 ) ;
10650: LD_INT 35
10652: PPUSH
10653: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10657: LD_INT 22
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 21
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 50
10679: PUSH
10680: EMPTY
10681: LIST
10682: PUSH
10683: LD_INT 95
10685: PUSH
10686: LD_INT 7
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: NOT
10704: IFFALSE 10650
// wait ( 0 0$3 ) ;
10706: LD_INT 105
10708: PPUSH
10709: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10713: LD_EXP 48
10717: PPUSH
10718: CALL_OW 302
10722: NOT
10723: IFTRUE 10731
10725: PUSH
10726: LD_EXP 7
10730: OR
10731: IFFALSE 10735
// exit ;
10733: GO 10747
// Say ( usCommander , DUsm-3-assault ) ;
10735: LD_EXP 48
10739: PPUSH
10740: LD_STRING DUsm-3-assault
10742: PPUSH
10743: CALL_OW 88
// end ;
10747: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10748: LD_EXP 6
10752: NOT
10753: IFFALSE 10762
10755: PUSH
10756: LD_EXP 7
10760: NOT
10761: AND
10762: IFFALSE 10797
10764: PUSH
10765: LD_INT 5
10767: PPUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 21
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 70
10796: AND
10797: IFFALSE 10806
10799: PUSH
10800: LD_EXP 7
10804: NOT
10805: AND
10806: IFFALSE 10891
10808: GO 10810
10810: DISABLE
// begin if Mike then
10811: LD_EXP 33
10815: IFFALSE 10831
// Say ( Mike , DM-1-scout ) else
10817: LD_EXP 33
10821: PPUSH
10822: LD_STRING DM-1-scout
10824: PPUSH
10825: CALL_OW 88
10829: GO 10862
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10831: LD_EXP 45
10835: PPUSH
10836: LD_INT 26
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 72
10850: PUSH
10851: LD_INT 1
10853: ARRAY
10854: PPUSH
10855: LD_STRING DArm-1-explore
10857: PPUSH
10858: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10862: LD_INT 54
10864: PPUSH
10865: LD_INT 35
10867: PPUSH
10868: LD_INT 2
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10878: LD_INT 54
10880: PPUSH
10881: LD_INT 35
10883: PPUSH
10884: LD_INT 2
10886: PPUSH
10887: CALL_OW 331
// end ;
10891: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10892: LD_INT 6
10894: PPUSH
10895: LD_INT 22
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 21
10907: PUSH
10908: LD_INT 1
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 70
10923: IFFALSE 10932
10925: PUSH
10926: LD_EXP 6
10930: NOT
10931: AND
10932: IFFALSE 10941
10934: PUSH
10935: LD_EXP 7
10939: NOT
10940: AND
10941: IFFALSE 11195
10943: GO 10945
10945: DISABLE
10946: LD_INT 0
10948: PPUSH
10949: PPUSH
10950: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10951: LD_ADDR_VAR 0 1
10955: PUSH
10956: LD_EXP 45
10960: PPUSH
10961: LD_INT 26
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PPUSH
10971: CALL_OW 72
10975: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10976: LD_ADDR_VAR 0 2
10980: PUSH
10981: LD_EXP 45
10985: PPUSH
10986: LD_INT 26
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 72
11000: ST_TO_ADDR
// DialogueOn ;
11001: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
11005: LD_INT 36
11007: PPUSH
11008: LD_INT 22
11010: PPUSH
11011: LD_INT 2
11013: PPUSH
11014: LD_INT 8
11016: PPUSH
11017: CALL_OW 330
// dwait ( 0 0$1 ) ;
11021: LD_INT 35
11023: PPUSH
11024: CALL_OW 68
// speakerOk := false ;
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// if Mike then
11036: LD_EXP 33
11040: IFFALSE 11062
// speakerOk := Say ( Mike , DM-1-spot ) else
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_EXP 33
11051: PPUSH
11052: LD_STRING DM-1-spot
11054: PPUSH
11055: CALL_OW 88
11059: ST_TO_ADDR
11060: GO 11090
// if randomMen then
11062: LD_VAR 0 1
11066: IFFALSE 11090
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 1
11080: ARRAY
11081: PPUSH
11082: LD_STRING DArm-1-spot-a
11084: PPUSH
11085: CALL_OW 88
11089: ST_TO_ADDR
// if speakerOk then
11090: LD_VAR 0 3
11094: IFFALSE 11138
// begin if Givi then
11096: LD_EXP 32
11100: IFFALSE 11116
// Say ( Givi , DG-1-spot ) else
11102: LD_EXP 32
11106: PPUSH
11107: LD_STRING DG-1-spot
11109: PPUSH
11110: CALL_OW 88
11114: GO 11138
// if randomWomen then
11116: LD_VAR 0 2
11120: IFFALSE 11138
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: PPUSH
11131: LD_STRING DArf-1-spot-a
11133: PPUSH
11134: CALL_OW 88
// end ; if Mike then
11138: LD_EXP 33
11142: IFFALSE 11158
// Say ( Heike , DH-1-spot ) else
11144: LD_EXP 31
11148: PPUSH
11149: LD_STRING DH-1-spot
11151: PPUSH
11152: CALL_OW 88
11156: GO 11170
// Say ( Heike , DH-1-spot-a ) ;
11158: LD_EXP 31
11162: PPUSH
11163: LD_STRING DH-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11170: LD_INT 36
11172: PPUSH
11173: LD_INT 22
11175: PPUSH
11176: LD_INT 2
11178: PPUSH
11179: CALL_OW 331
// DialogueOff ;
11183: CALL_OW 7
// americanBaseSpoted := true ;
11187: LD_ADDR_EXP 6
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// end ;
11195: PPOPN 3
11197: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11198: LD_EXP 6
11202: NOT
11203: IFFALSE 11235
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 101
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 69
11234: AND
11235: IFFALSE 11244
11237: PUSH
11238: LD_EXP 7
11242: NOT
11243: AND
11244: IFFALSE 11330
11246: GO 11248
11248: DISABLE
11249: LD_INT 0
11251: PPUSH
// begin americanBaseSpoted := true ;
11252: LD_ADDR_EXP 6
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11260: LD_ADDR_VAR 0 1
11264: PUSH
11265: LD_EXP 45
11269: PPUSH
11270: LD_INT 26
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 72
11284: ST_TO_ADDR
// if not randomMen then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11330
// DialogueOn ;
11294: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11298: LD_VAR 0 1
11302: PUSH
11303: LD_INT 1
11305: ARRAY
11306: PPUSH
11307: LD_STRING DArm-1-spot-a
11309: PPUSH
11310: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11314: LD_EXP 31
11318: PPUSH
11319: LD_STRING DH-1-spot-a
11321: PPUSH
11322: CALL_OW 88
// DialogueOff ;
11326: CALL_OW 7
// end ;
11330: PPOPN 1
11332: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11333: LD_INT 11
11335: PPUSH
11336: CALL_OW 255
11340: PUSH
11341: LD_INT 2
11343: EQUAL
11344: IFTRUE 11393
11346: PUSH
11347: LD_INT 7
11349: PPUSH
11350: LD_INT 22
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 3
11362: PUSH
11363: LD_INT 50
11365: PUSH
11366: EMPTY
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 30
11375: PUSH
11376: LD_INT 31
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: PPUSH
11388: CALL_OW 70
11392: OR
11393: IFTRUE 11418
11395: PUSH
11396: LD_INT 7
11398: PPUSH
11399: LD_INT 22
11401: PUSH
11402: LD_INT 2
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 70
11413: PUSH
11414: LD_INT 2
11416: GREATER
11417: OR
11418: IFTRUE 11430
11420: PUSH
11421: LD_EXP 47
11425: PUSH
11426: LD_INT 4
11428: LESSEQUAL
11429: OR
11430: IFFALSE 12072
11432: GO 11434
11434: DISABLE
11435: LD_INT 0
11437: PPUSH
11438: PPUSH
// begin wait ( 0 0$3 ) ;
11439: LD_INT 105
11441: PPUSH
11442: CALL_OW 67
// americanStartRun := true ;
11446: LD_ADDR_EXP 15
11450: PUSH
11451: LD_INT 1
11453: ST_TO_ADDR
// if IsOk ( usCommander ) then
11454: LD_EXP 48
11458: PPUSH
11459: CALL_OW 302
11463: IFFALSE 11493
// begin usForces := usForces union usCommander ;
11465: LD_ADDR_EXP 47
11469: PUSH
11470: LD_EXP 47
11474: PUSH
11475: LD_EXP 48
11479: UNION
11480: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11481: LD_EXP 48
11485: PPUSH
11486: LD_STRING DUsm-1-assault
11488: PPUSH
11489: CALL_OW 88
// end ; for i in usForces do
11493: LD_ADDR_VAR 0 1
11497: PUSH
11498: LD_EXP 47
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11550
// begin if IsInUnit ( i ) then
11506: LD_VAR 0 1
11510: PPUSH
11511: CALL_OW 310
11515: IFFALSE 11526
// ComExitBuilding ( i ) ;
11517: LD_VAR 0 1
11521: PPUSH
11522: CALL_OW 122
// wait ( 3 ) ;
11526: LD_INT 3
11528: PPUSH
11529: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11533: LD_VAR 0 1
11537: PPUSH
11538: LD_INT 34
11540: PPUSH
11541: LD_INT 67
11543: PPUSH
11544: CALL_OW 111
// end ;
11548: GO 11503
11550: POP
11551: POP
// Say ( Heike , DH-1-assault ) ;
11552: LD_EXP 31
11556: PPUSH
11557: LD_STRING DH-1-assault
11559: PPUSH
11560: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11564: LD_INT 35
11566: PPUSH
11567: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_INT 34
11578: PPUSH
11579: LD_INT 67
11581: PPUSH
11582: CALL_OW 111
// until not usForces ;
11586: LD_EXP 47
11590: NOT
11591: IFFALSE 11564
// music_nat := 2 ;
11593: LD_ADDR_OWVAR 71
11597: PUSH
11598: LD_INT 2
11600: ST_TO_ADDR
// music_class := music_victory ;
11601: LD_ADDR_OWVAR 72
11605: PUSH
11606: LD_INT 4
11608: ST_TO_ADDR
// if not americanHasEscaped then
11609: LD_EXP 9
11613: NOT
11614: IFFALSE 11635
// begin Say ( Heike , DH-2-assault ) ;
11616: LD_EXP 31
11620: PPUSH
11621: LD_STRING DH-2-assault
11623: PPUSH
11624: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11628: LD_STRING ACH_CLEAN
11630: PPUSH
11631: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11635: LD_INT 70
11637: PPUSH
11638: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11642: LD_INT 35
11644: PPUSH
11645: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11649: LD_INT 22
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 21
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 3
11671: PUSH
11672: LD_INT 50
11674: PUSH
11675: EMPTY
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: NOT
11692: IFFALSE 11642
// InGameOn ;
11694: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11698: LD_INT 11
11700: PPUSH
11701: CALL_OW 255
11705: PUSH
11706: LD_INT 2
11708: EQUAL
11709: NOT
11710: IFFALSE 11722
// SetSide ( usDepot , 2 ) ;
11712: LD_INT 11
11714: PPUSH
11715: LD_INT 2
11717: PPUSH
11718: CALL_OW 235
// if GetLives ( usDepot ) < 250 then
11722: LD_INT 11
11724: PPUSH
11725: CALL_OW 256
11729: PUSH
11730: LD_INT 250
11732: LESS
11733: IFFALSE 11745
// SetLives ( usDepot , 249 ) ;
11735: LD_INT 11
11737: PPUSH
11738: LD_INT 249
11740: PPUSH
11741: CALL_OW 234
// CenterOnXY ( 35 , 22 ) ;
11745: LD_INT 35
11747: PPUSH
11748: LD_INT 22
11750: PPUSH
11751: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11755: LD_EXP 31
11759: PPUSH
11760: LD_INT 35
11762: PPUSH
11763: LD_INT 22
11765: PPUSH
11766: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11770: LD_EXP 31
11774: PPUSH
11775: LD_INT 38
11777: PPUSH
11778: LD_INT 25
11780: PPUSH
11781: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11785: LD_EXP 35
11789: PUSH
11790: LD_EXP 44
11794: UNION
11795: PUSH
11796: LD_EXP 45
11800: UNION
11801: PPUSH
11802: LD_INT 39
11804: PPUSH
11805: LD_INT 26
11807: PPUSH
11808: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11812: LD_EXP 35
11816: PUSH
11817: LD_EXP 44
11821: UNION
11822: PUSH
11823: LD_EXP 45
11827: UNION
11828: PPUSH
11829: LD_EXP 31
11833: PPUSH
11834: CALL_OW 179
// p := 0 ;
11838: LD_ADDR_VAR 0 2
11842: PUSH
11843: LD_INT 0
11845: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11846: LD_INT 35
11848: PPUSH
11849: CALL_OW 67
// p := p + 1 ;
11853: LD_ADDR_VAR 0 2
11857: PUSH
11858: LD_VAR 0 2
11862: PUSH
11863: LD_INT 1
11865: PLUS
11866: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11867: LD_EXP 31
11871: PPUSH
11872: CALL_OW 314
11876: NOT
11877: IFTRUE 11889
11879: PUSH
11880: LD_VAR 0 2
11884: PUSH
11885: LD_INT 10
11887: GREATER
11888: OR
11889: IFFALSE 11846
// Say ( Heike , DH-1-capture ) ;
11891: LD_EXP 31
11895: PPUSH
11896: LD_STRING DH-1-capture
11898: PPUSH
11899: CALL_OW 88
// if IsOk ( Markov ) then
11903: LD_EXP 38
11907: PPUSH
11908: CALL_OW 302
11912: IFFALSE 11926
// Say ( Markov , DMar-1-capture ) ;
11914: LD_EXP 38
11918: PPUSH
11919: LD_STRING DMar-1-capture
11921: PPUSH
11922: CALL_OW 88
// if IsOk ( Sophia ) then
11926: LD_EXP 37
11930: PPUSH
11931: CALL_OW 302
11935: IFFALSE 11961
// begin Say ( Heike , DH-2-capture ) ;
11937: LD_EXP 31
11941: PPUSH
11942: LD_STRING DH-2-capture
11944: PPUSH
11945: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11949: LD_EXP 37
11953: PPUSH
11954: LD_STRING DS-1-capture
11956: PPUSH
11957: CALL_OW 88
// end ; if GetLives ( usDepot ) < 250 then
11961: LD_INT 11
11963: PPUSH
11964: CALL_OW 256
11968: PUSH
11969: LD_INT 250
11971: LESS
11972: IFFALSE 11984
// SetLives ( usDepot , 249 ) ;
11974: LD_INT 11
11976: PPUSH
11977: LD_INT 249
11979: PPUSH
11980: CALL_OW 234
// americanBaseCaptured := true ;
11984: LD_ADDR_EXP 7
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// InGameOff ;
11992: CALL_OW 9
// music_nat := music_auto ;
11996: LD_ADDR_OWVAR 71
12000: PUSH
12001: LD_INT 0
12003: ST_TO_ADDR
// music_class := music_auto ;
12004: LD_ADDR_OWVAR 72
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
12012: LD_STRING ConstructBase
12014: PPUSH
12015: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: LD_INT 22
12026: PUSH
12027: LD_INT 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PPUSH
12048: CALL_OW 69
12052: PUSH
12053: FOR_IN
12054: IFFALSE 12070
// SetSide ( i , 2 ) ;
12056: LD_VAR 0 1
12060: PPUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 235
12068: GO 12053
12070: POP
12071: POP
// end ;
12072: PPOPN 2
12074: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
12075: LD_EXP 14
12079: PUSH
12080: LD_INT 3
12082: GREATEREQUAL
12083: IFFALSE 12095
12085: GO 12087
12087: DISABLE
// SetAchievement ( ACH_ENG ) ;
12088: LD_STRING ACH_ENG
12090: PPUSH
12091: CALL_OW 543
12095: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
12096: LD_INT 22
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 15
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: PUSH
12125: LD_INT 4
12127: GREATEREQUAL
12128: IFFALSE 12140
12130: GO 12132
12132: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12133: LD_STRING ACH_APEGEN
12135: PPUSH
12136: CALL_OW 543
12140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12141: LD_INT 22
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 2
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: LD_INT 57
12166: PUSH
12167: EMPTY
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 69
12183: IFFALSE 12454
12185: GO 12187
12187: DISABLE
// begin workshopBuilded := true ;
12188: LD_ADDR_EXP 11
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if IsOk ( Markov ) then
12196: LD_EXP 38
12200: PPUSH
12201: CALL_OW 302
12205: IFFALSE 12266
// begin Say ( Heike , DH-1-shop-a ) ;
12207: LD_EXP 31
12211: PPUSH
12212: LD_STRING DH-1-shop-a
12214: PPUSH
12215: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12219: LD_INT 47
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: CALL_OW 321
12229: PUSH
12230: LD_INT 2
12232: EQUAL
12233: IFFALSE 12251
12235: PUSH
12236: LD_INT 45
12238: PPUSH
12239: LD_INT 2
12241: PPUSH
12242: CALL_OW 321
12246: PUSH
12247: LD_INT 2
12249: EQUAL
12250: AND
12251: NOT
12252: IFFALSE 12266
// Say ( Markov , DMar-1-shop-a ) ;
12254: LD_EXP 38
12258: PPUSH
12259: LD_STRING DMar-1-shop-a
12261: PPUSH
12262: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12266: LD_INT 35
12268: PPUSH
12269: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12273: LD_INT 47
12275: PPUSH
12276: LD_INT 2
12278: PPUSH
12279: CALL_OW 321
12283: PUSH
12284: LD_INT 2
12286: EQUAL
12287: IFTRUE 12305
12289: PUSH
12290: LD_INT 45
12292: PPUSH
12293: LD_INT 2
12295: PPUSH
12296: CALL_OW 321
12300: PUSH
12301: LD_INT 2
12303: EQUAL
12304: OR
12305: IFFALSE 12266
// if IsOk ( Markov ) and IsOk ( Heike ) then
12307: LD_EXP 38
12311: PPUSH
12312: CALL_OW 302
12316: IFFALSE 12329
12318: PUSH
12319: LD_EXP 31
12323: PPUSH
12324: CALL_OW 302
12328: AND
12329: IFFALSE 12447
// begin DialogueOn ;
12331: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12335: LD_EXP 38
12339: PPUSH
12340: LD_STRING DMar-1-shop
12342: PPUSH
12343: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12347: LD_EXP 31
12351: PPUSH
12352: LD_STRING DH-1-shop
12354: PPUSH
12355: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12359: LD_EXP 38
12363: PPUSH
12364: LD_STRING DMar-2-shop
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12371: LD_EXP 38
12375: PPUSH
12376: LD_STRING DMar-3-shop
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12383: LD_EXP 31
12387: PPUSH
12388: LD_STRING DH-2-shop
12390: PPUSH
12391: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12395: LD_EXP 38
12399: PPUSH
12400: LD_STRING DMar-4-shop
12402: PPUSH
12403: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12407: LD_EXP 31
12411: PPUSH
12412: LD_STRING DH-3-shop
12414: PPUSH
12415: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12419: LD_EXP 38
12423: PPUSH
12424: LD_STRING DMar-5-shop
12426: PPUSH
12427: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12431: LD_EXP 31
12435: PPUSH
12436: LD_STRING DH-4-shop
12438: PPUSH
12439: CALL_OW 88
// DialogueOff ;
12443: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12447: LD_STRING ConstructVeh
12449: PPUSH
12450: CALL_OW 337
// end ;
12454: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12455: LD_INT 2
12457: PPUSH
12458: LD_INT 2
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL 43237 0 3
12468: PUSH
12469: LD_INT 0
12471: EQUAL
12472: IFFALSE 12484
12474: GO 12476
12476: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12477: LD_STRING Techs
12479: PPUSH
12480: CALL_OW 337
12484: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12485: LD_EXP 38
12489: PPUSH
12490: CALL_OW 302
12494: IFFALSE 12544
12496: PUSH
12497: LD_INT 22
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: LD_INT 34
12512: PUSH
12513: LD_INT 22
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 35
12522: PUSH
12523: LD_INT 22
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: AND
12544: IFFALSE 12651
12546: GO 12548
12548: DISABLE
// begin DialogueOn ;
12549: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12553: LD_INT 22
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 2
12565: PUSH
12566: LD_INT 34
12568: PUSH
12569: LD_INT 22
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 35
12578: PUSH
12579: LD_INT 22
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 69
12599: PPUSH
12600: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12604: LD_INT 10
12606: PPUSH
12607: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12611: LD_EXP 31
12615: PPUSH
12616: LD_STRING DH-1-bal
12618: PPUSH
12619: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12623: LD_EXP 38
12627: PPUSH
12628: LD_STRING DMar-1-bal
12630: PPUSH
12631: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12635: LD_EXP 31
12639: PPUSH
12640: LD_STRING DH-2-bal
12642: PPUSH
12643: CALL_OW 88
// DialogueOff ;
12647: CALL_OW 7
// end ;
12651: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12652: LD_EXP 35
12656: PPUSH
12657: CALL_OW 302
12661: IFFALSE 12693
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 2
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_INT 6
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PPUSH
12688: CALL_OW 69
12692: AND
12693: IFFALSE 12754
12695: GO 12697
12697: DISABLE
// begin DialogueOn ;
12698: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DA-1-lab
12709: PPUSH
12710: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12714: LD_EXP 31
12718: PPUSH
12719: LD_STRING DH-1-lab
12721: PPUSH
12722: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DA-2-lab
12733: PPUSH
12734: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12738: LD_EXP 31
12742: PPUSH
12743: LD_STRING DH-2-lab
12745: PPUSH
12746: CALL_OW 88
// DialogueOff ;
12750: CALL_OW 7
// end ;
12754: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12755: LD_EXP 36
12759: PPUSH
12760: CALL_OW 302
12764: IFFALSE 12796
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 25
12779: PUSH
12780: LD_INT 15
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 12815
12798: PUSH
12799: LD_INT 81
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: NOT
12814: AND
12815: IFFALSE 13004
12817: GO 12819
12819: DISABLE
12820: LD_INT 0
12822: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_INT 22
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 15
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: ST_TO_ADDR
// InGameOn ;
12857: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12861: LD_VAR 0 1
12865: PUSH
12866: LD_INT 1
12868: ARRAY
12869: PPUSH
12870: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12874: LD_VAR 0 1
12878: PUSH
12879: LD_INT 1
12881: ARRAY
12882: PPUSH
12883: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12887: LD_EXP 36
12891: PPUSH
12892: LD_STRING DK-1-apesol
12894: PPUSH
12895: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12899: LD_VAR 0 1
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: LD_INT 35
12910: PPUSH
12911: LD_INT 28
12913: PPUSH
12914: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12918: LD_VAR 0 1
12922: PUSH
12923: LD_INT 1
12925: ARRAY
12926: PPUSH
12927: LD_INT 36
12929: PPUSH
12930: LD_INT 17
12932: PPUSH
12933: CALL_OW 171
// wait ( 0 0$2 ) ;
12937: LD_INT 70
12939: PPUSH
12940: CALL_OW 67
// DialogueOn ;
12944: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12948: LD_EXP 35
12952: PPUSH
12953: LD_STRING DA-1-apesol
12955: PPUSH
12956: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12960: LD_EXP 36
12964: PPUSH
12965: LD_STRING DK-2-apesol
12967: PPUSH
12968: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12972: LD_EXP 35
12976: PPUSH
12977: LD_STRING DA-2-apesol
12979: PPUSH
12980: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12984: LD_EXP 36
12988: PPUSH
12989: LD_STRING DK-3-apesol
12991: PPUSH
12992: CALL_OW 88
// DialogueOff ;
12996: CALL_OW 7
// InGameOff ;
13000: CALL_OW 9
// end ;
13004: PPOPN 1
13006: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
13007: LD_EXP 37
13011: PPUSH
13012: CALL_OW 302
13016: IFFALSE 13048
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 2
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 16
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: AND
13048: IFFALSE 13067
13050: PUSH
13051: LD_INT 81
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: NOT
13066: AND
13067: IFFALSE 13381
13069: GO 13071
13071: DISABLE
13072: LD_INT 0
13074: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
13075: LD_ADDR_VAR 0 1
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 25
13092: PUSH
13093: LD_INT 16
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: ST_TO_ADDR
// blockAttack := true ;
13109: LD_ADDR_EXP 29
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// InGameOn ;
13117: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
13121: LD_INT 35
13123: PPUSH
13124: LD_INT 22
13126: PPUSH
13127: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13131: LD_INT 5
13133: PPUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 22
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13147: LD_EXP 37
13151: PPUSH
13152: LD_VAR 0 1
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PPUSH
13161: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13165: LD_VAR 0 1
13169: PUSH
13170: LD_INT 1
13172: ARRAY
13173: PPUSH
13174: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13178: LD_VAR 0 1
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL_OW 122
// wait ( 0 0$2 ) ;
13191: LD_INT 70
13193: PPUSH
13194: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13198: LD_EXP 37
13202: PPUSH
13203: LD_STRING DS-1-apeeng
13205: PPUSH
13206: CALL_OW 88
// if IsOk ( Kamil ) then
13210: LD_EXP 34
13214: PPUSH
13215: CALL_OW 302
13219: IFFALSE 13369
// begin Say ( Kamil , DKam-1-apeeng ) ;
13221: LD_EXP 34
13225: PPUSH
13226: LD_STRING DKam-1-apeeng
13228: PPUSH
13229: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13233: LD_EXP 37
13237: PPUSH
13238: LD_STRING DS-2-apeeng
13240: PPUSH
13241: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13245: LD_EXP 34
13249: PPUSH
13250: LD_STRING DKam-2-apeeng
13252: PPUSH
13253: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13257: LD_EXP 37
13261: PPUSH
13262: LD_STRING DS-3-apeeng
13264: PPUSH
13265: CALL_OW 88
// if not IsOK ( Kaia ) then
13269: LD_EXP 36
13273: PPUSH
13274: CALL_OW 302
13278: NOT
13279: IFFALSE 13295
// begin InGameOff ;
13281: CALL_OW 9
// blockAttack := false ;
13285: LD_ADDR_EXP 29
13289: PUSH
13290: LD_INT 0
13292: ST_TO_ADDR
// exit ;
13293: GO 13381
// end ; Say ( Kaia , DK-1-apeeng ) ;
13295: LD_EXP 36
13299: PPUSH
13300: LD_STRING DK-1-apeeng
13302: PPUSH
13303: CALL_OW 88
// if not IsOk ( Givi ) then
13307: LD_EXP 32
13311: PPUSH
13312: CALL_OW 302
13316: NOT
13317: IFFALSE 13333
// begin InGameOff ;
13319: CALL_OW 9
// blockAttack := false ;
13323: LD_ADDR_EXP 29
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// exit ;
13331: GO 13381
// end ; Say ( Givi , DG-1-apeeng ) ;
13333: LD_EXP 32
13337: PPUSH
13338: LD_STRING DG-1-apeeng
13340: PPUSH
13341: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13345: LD_EXP 36
13349: PPUSH
13350: LD_STRING DK-2-apeeng
13352: PPUSH
13353: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13357: LD_EXP 36
13361: PPUSH
13362: LD_STRING DK-3-apeeng
13364: PPUSH
13365: CALL_OW 88
// end ; InGameOff ;
13369: CALL_OW 9
// blockAttack := false ;
13373: LD_ADDR_EXP 29
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// end ;
13381: PPOPN 1
13383: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13384: LD_EXP 4
13388: IFFALSE 13420
13390: PUSH
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 30
13403: PUSH
13404: LD_INT 0
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: AND
13420: IFFALSE 13601
13422: GO 13424
13424: DISABLE
// begin blockAttack := true ;
13425: LD_ADDR_EXP 29
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
// wait ( 0 0$20 ) ;
13433: LD_INT 700
13435: PPUSH
13436: CALL_OW 67
// DialogueOn ;
13440: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13444: LD_EXP 39
13448: PPUSH
13449: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13453: LD_EXP 39
13457: PPUSH
13458: LD_STRING DF-1-distribution
13460: PPUSH
13461: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13465: LD_EXP 31
13469: PPUSH
13470: LD_STRING DH-2-distribution
13472: PPUSH
13473: CALL_OW 88
// if IsOk ( Kaia ) then
13477: LD_EXP 36
13481: PPUSH
13482: CALL_OW 302
13486: IFFALSE 13547
// begin Say ( Kaia , DK-1-distribution ) ;
13488: LD_EXP 36
13492: PPUSH
13493: LD_STRING DK-1-distribution
13495: PPUSH
13496: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13500: LD_EXP 31
13504: PPUSH
13505: LD_STRING DH-1-distribution
13507: PPUSH
13508: CALL_OW 88
// if IsOk ( Givi ) then
13512: LD_EXP 32
13516: PPUSH
13517: CALL_OW 302
13521: IFFALSE 13547
// begin Say ( Givi , DG-1-distribution ) ;
13523: LD_EXP 32
13527: PPUSH
13528: LD_STRING DG-1-distribution
13530: PPUSH
13531: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13535: LD_EXP 31
13539: PPUSH
13540: LD_STRING DH-3-distribution
13542: PPUSH
13543: CALL_OW 88
// end ; end ; DialogueOff ;
13547: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13551: LD_STRING Crates1
13553: PPUSH
13554: CALL_OW 337
// farmerRequestedCrates := 300 ;
13558: LD_ADDR_EXP 17
13562: PUSH
13563: LD_INT 300
13565: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13566: LD_STRING FarmerCrates
13568: PPUSH
13569: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13573: LD_INT 10
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: CALL_OW 424
// blockAttack := false ;
13583: LD_ADDR_EXP 29
13587: PUSH
13588: LD_INT 0
13590: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13591: LD_INT 108
13593: PPUSH
13594: LD_INT 61
13596: PPUSH
13597: CALL_OW 86
// end ;
13601: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13602: LD_EXP 7
13606: IFFALSE 13670
13608: PUSH
13609: LD_INT 22
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 3
13621: PUSH
13622: LD_INT 57
13624: PUSH
13625: EMPTY
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 30
13637: PUSH
13638: LD_INT 6
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 7
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: PPUSH
13665: CALL_OW 69
13669: AND
13670: IFFALSE 13716
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 57
13688: PUSH
13689: EMPTY
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 4
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: PPUSH
13711: CALL_OW 69
13715: AND
13716: IFFALSE 13888
13718: GO 13720
13720: DISABLE
13721: LD_INT 0
13723: PPUSH
// begin wait ( 0 0$10 ) ;
13724: LD_INT 350
13726: PPUSH
13727: CALL_OW 67
// DialogueOn ;
13731: CALL_OW 6
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13735: LD_ADDR_VAR 0 1
13739: PUSH
13740: LD_EXP 45
13744: PPUSH
13745: LD_INT 26
13747: PUSH
13748: LD_INT 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 25
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 72
13773: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13774: LD_EXP 31
13778: PPUSH
13779: LD_STRING DH-1-task
13781: PPUSH
13782: CALL_OW 88
// if IsOk ( Sophia ) then
13786: LD_EXP 37
13790: PPUSH
13791: CALL_OW 302
13795: IFFALSE 13835
// begin Say ( Sophia , DS-1-task ) ;
13797: LD_EXP 37
13801: PPUSH
13802: LD_STRING DS-1-task
13804: PPUSH
13805: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13809: LD_EXP 37
13813: PPUSH
13814: LD_STRING DS-2-task
13816: PPUSH
13817: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13821: LD_EXP 31
13825: PPUSH
13826: LD_STRING DH-2-task
13828: PPUSH
13829: CALL_OW 88
// end else
13833: GO 13869
// if eng then
13835: LD_VAR 0 1
13839: IFFALSE 13869
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13841: LD_VAR 0 1
13845: PUSH
13846: LD_INT 1
13848: ARRAY
13849: PPUSH
13850: LD_STRING DArm-1-task
13852: PPUSH
13853: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING DH-2-task
13864: PPUSH
13865: CALL_OW 88
// end ; DialogueOff ;
13869: CALL_OW 7
// ChangeMissionObjectives ( BaseConstructed ) ;
13873: LD_STRING BaseConstructed
13875: PPUSH
13876: CALL_OW 337
// allowConvoys := true ;
13880: LD_ADDR_EXP 13
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// end ;
13888: PPOPN 1
13890: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13891: LD_INT 22
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 34
13903: PUSH
13904: LD_INT 12
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: IFFALSE 14087
13921: GO 13923
13923: DISABLE
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
13928: PPUSH
// begin wait ( 0 0$2 ) ;
13929: LD_INT 70
13931: PPUSH
13932: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13936: LD_ADDR_VAR 0 1
13940: PUSH
13941: LD_INT 22
13943: PUSH
13944: LD_INT 4
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 12
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 69
13969: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13970: LD_ADDR_VAR 0 2
13974: PUSH
13975: LD_VAR 0 1
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: CALL_OW 250
13988: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_VAR 0 1
13998: PUSH
13999: LD_INT 1
14001: ARRAY
14002: PPUSH
14003: CALL_OW 251
14007: ST_TO_ADDR
// DialogueOn ;
14008: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_VAR 0 3
14021: PPUSH
14022: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 2
14038: PPUSH
14039: LD_INT 6
14041: NEG
14042: PPUSH
14043: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
14047: LD_INT 10
14049: PPUSH
14050: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
14054: LD_EXP 31
14058: PPUSH
14059: LD_STRING DH-1-seecargo
14061: PPUSH
14062: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
14066: LD_VAR 0 2
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: CALL_OW 331
// DialogueOff ;
14083: CALL_OW 7
// end ;
14087: PPOPN 3
14089: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
14090: LD_EXP 4
14094: IFFALSE 14106
14096: PUSH
14097: LD_EXP 16
14101: PUSH
14102: LD_INT 300
14104: GREATEREQUAL
14105: AND
14106: IFFALSE 14178
14108: GO 14110
14110: DISABLE
// begin DialogueOn ;
14111: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
14115: LD_EXP 39
14119: PPUSH
14120: LD_STRING DF-1-delivery-2
14122: PPUSH
14123: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
14127: LD_EXP 31
14131: PPUSH
14132: LD_STRING DH-1-delivery-2
14134: PPUSH
14135: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
14139: LD_EXP 39
14143: PPUSH
14144: LD_STRING DF-2-delivery-2
14146: PPUSH
14147: CALL_OW 94
// DialogueOff ;
14151: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
14155: LD_STRING Crates2
14157: PPUSH
14158: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14162: LD_ADDR_EXP 18
14166: PUSH
14167: LD_INT 63000
14169: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14170: LD_ADDR_EXP 17
14174: PUSH
14175: LD_INT 600
14177: ST_TO_ADDR
// end ;
14178: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
14179: LD_EXP 4
14183: IFFALSE 14195
14185: PUSH
14186: LD_EXP 16
14190: PUSH
14191: LD_INT 600
14193: GREATEREQUAL
14194: AND
14195: IFFALSE 14207
14197: PUSH
14198: LD_OWVAR 67
14202: PUSH
14203: LD_INT 1
14205: GREATER
14206: AND
14207: IFFALSE 14407
14209: GO 14211
14211: DISABLE
// begin DialogueOn ;
14212: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14216: LD_EXP 39
14220: PPUSH
14221: LD_STRING DF-1-delivery-3
14223: PPUSH
14224: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14228: LD_EXP 31
14232: PPUSH
14233: LD_STRING DH-1-delivery-3
14235: PPUSH
14236: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14240: LD_EXP 39
14244: PPUSH
14245: LD_STRING DF-2-delivery-3
14247: PPUSH
14248: CALL_OW 94
// if IsOk ( Kaia ) then
14252: LD_EXP 36
14256: PPUSH
14257: CALL_OW 302
14261: IFFALSE 14311
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14263: LD_EXP 36
14267: PPUSH
14268: LD_STRING DK-1-delivery-3
14270: PPUSH
14271: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14275: LD_EXP 31
14279: PPUSH
14280: LD_STRING DH-2-delivery-3
14282: PPUSH
14283: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14287: LD_EXP 32
14291: PPUSH
14292: LD_STRING DG-1-delivery-3
14294: PPUSH
14295: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14299: LD_EXP 33
14303: PPUSH
14304: LD_STRING DM-1-delivery-3
14306: PPUSH
14307: CALL_OW 88
// end ; DialogueOff ;
14311: CALL_OW 7
// case Difficulty of 2 :
14315: LD_OWVAR 67
14319: PUSH
14320: LD_INT 2
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14346
14328: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14329: LD_STRING Crates3
14331: PPUSH
14332: CALL_OW 337
// farmerRequestedCrates := 900 ;
14336: LD_ADDR_EXP 17
14340: PUSH
14341: LD_INT 900
14343: ST_TO_ADDR
// end ; 3 :
14344: GO 14399
14346: LD_INT 3
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14372
14354: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14355: LD_STRING Crates4
14357: PPUSH
14358: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14362: LD_ADDR_EXP 17
14366: PUSH
14367: LD_INT 1200
14369: ST_TO_ADDR
// end ; 4 :
14370: GO 14399
14372: LD_INT 4
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14398
14380: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14381: LD_STRING Crates5
14383: PPUSH
14384: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14388: LD_ADDR_EXP 17
14392: PUSH
14393: LD_INT 1400
14395: ST_TO_ADDR
// end ; end ;
14396: GO 14399
14398: POP
// farmerCratesCounter := 30 30$00 ;
14399: LD_ADDR_EXP 18
14403: PUSH
14404: LD_INT 63000
14406: ST_TO_ADDR
// end ;
14407: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14408: LD_EXP 4
14412: IFFALSE 14445
14414: PUSH
14415: LD_EXP 16
14419: PUSH
14420: LD_INT 600
14422: PUSH
14423: LD_INT 900
14425: PUSH
14426: LD_INT 1200
14428: PUSH
14429: LD_INT 1400
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_OWVAR 67
14442: ARRAY
14443: GREATEREQUAL
14444: AND
14445: IFFALSE 14531
14447: GO 14449
14449: DISABLE
// begin retreatAllowed := true ;
14450: LD_ADDR_EXP 12
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// display_strings := [ ] ;
14458: LD_ADDR_OWVAR 47
14462: PUSH
14463: EMPTY
14464: ST_TO_ADDR
// DialogueOn ;
14465: CALL_OW 6
// InGameOn ;
14469: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14473: LD_EXP 40
14477: PPUSH
14478: LD_STRING DO-radio-end
14480: PPUSH
14481: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14485: LD_EXP 31
14489: PPUSH
14490: LD_STRING DH-1-radio-end
14492: PPUSH
14493: CALL_OW 88
// InGameOff ;
14497: CALL_OW 9
// DialogueOff ;
14501: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14505: LD_STRING Retreat
14507: PPUSH
14508: CALL_OW 337
// wait ( 0 0$2 ) ;
14512: LD_INT 70
14514: PPUSH
14515: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14519: LD_EXP 31
14523: PPUSH
14524: LD_STRING DH-2-radio-end
14526: PPUSH
14527: CALL_OW 88
// end ;
14531: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14532: LD_EXP 12
14536: IFFALSE 14669
14538: GO 14540
14540: DISABLE
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14545: LD_INT 10
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: LD_EXP 42
14564: PPUSH
14565: LD_INT 25
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 72
14579: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14580: LD_VAR 0 1
14584: IFFALSE 14602
14586: PUSH
14587: LD_INT 102
14589: PPUSH
14590: LD_INT 69
14592: PPUSH
14593: CALL_OW 428
14597: PUSH
14598: LD_INT 0
14600: EQUAL
14601: AND
14602: IFFALSE 14669
// begin for i in tmp do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 1
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14639
// if IsInUnit ( i ) then
14617: LD_VAR 0 2
14621: PPUSH
14622: CALL_OW 310
14626: IFFALSE 14637
// ComExitBuilding ( i ) ;
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 122
14637: GO 14614
14639: POP
14640: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_INT 31
14648: PPUSH
14649: LD_INT 102
14651: PPUSH
14652: LD_INT 69
14654: PPUSH
14655: LD_INT 2
14657: PPUSH
14658: CALL_OW 205
// wait ( 0 0$3 ) ;
14662: LD_INT 105
14664: PPUSH
14665: CALL_OW 67
// end ; end ;
14669: PPOPN 2
14671: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14672: LD_EXP 12
14676: NOT
14677: IFFALSE 14688
14679: PUSH
14680: LD_INT 5
14682: PPUSH
14683: CALL_OW 301
14687: AND
14688: IFFALSE 14720
14690: GO 14692
14692: DISABLE
// begin DialogueOn ;
14693: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14697: LD_EXP 39
14701: PPUSH
14702: LD_STRING DF-1-failure
14704: PPUSH
14705: CALL_OW 94
// DialogueOff ;
14709: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14713: LD_STRING FarmerDepot
14715: PPUSH
14716: CALL_OW 104
// end ;
14720: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14721: LD_EXP 12
14725: IFFALSE 14747
14727: PUSH
14728: LD_EXP 31
14732: PPUSH
14733: LD_EXP 39
14737: PPUSH
14738: CALL_OW 296
14742: PUSH
14743: LD_INT 12
14745: LESS
14746: AND
14747: IFFALSE 14780
14749: PUSH
14750: LD_INT 81
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 21
14762: PUSH
14763: LD_INT 1
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: NOT
14779: AND
14780: IFFALSE 15468
14782: GO 14784
14784: DISABLE
14785: LD_INT 0
14787: PPUSH
14788: PPUSH
14789: PPUSH
// begin allowConvoys := false ;
14790: LD_ADDR_EXP 13
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// InGameOn ;
14798: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14802: LD_EXP 31
14806: PPUSH
14807: LD_EXP 39
14811: PPUSH
14812: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14816: LD_EXP 39
14820: PPUSH
14821: LD_EXP 31
14825: PPUSH
14826: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14830: LD_EXP 39
14834: PPUSH
14835: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14839: LD_EXP 31
14843: PPUSH
14844: LD_STRING DH-1-end
14846: PPUSH
14847: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14851: LD_EXP 39
14855: PPUSH
14856: LD_STRING DF-1-end
14858: PPUSH
14859: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14863: LD_EXP 39
14867: PPUSH
14868: LD_STRING DF-2-end
14870: PPUSH
14871: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14875: LD_EXP 31
14879: PPUSH
14880: LD_STRING DH-2-end
14882: PPUSH
14883: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14887: LD_EXP 39
14891: PPUSH
14892: LD_STRING DF-3-end
14894: PPUSH
14895: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14899: LD_EXP 31
14903: PPUSH
14904: LD_STRING DH-3-end
14906: PPUSH
14907: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14911: LD_EXP 32
14915: PPUSH
14916: LD_STRING DG-1-end
14918: PPUSH
14919: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14923: LD_EXP 31
14927: PPUSH
14928: LD_STRING DH-4-end
14930: PPUSH
14931: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14935: LD_EXP 39
14939: PPUSH
14940: LD_STRING DF-4-end
14942: PPUSH
14943: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14947: LD_EXP 31
14951: PPUSH
14952: LD_STRING DH-5-end
14954: PPUSH
14955: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14959: LD_EXP 39
14963: PPUSH
14964: LD_STRING DF-5-end
14966: PPUSH
14967: CALL_OW 88
// InGameOff ;
14971: CALL_OW 9
// allowCargoEvacuation := true ;
14975: LD_ADDR_EXP 8
14979: PUSH
14980: LD_INT 1
14982: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14983: LD_ADDR_VAR 0 2
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: LD_OWVAR 67
15010: ARRAY
15011: ST_TO_ADDR
// if farmerSquad < max then
15012: LD_EXP 42
15016: PUSH
15017: LD_VAR 0 2
15021: LESS
15022: IFFALSE 15034
// max := farmerSquad ;
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_EXP 42
15033: ST_TO_ADDR
// for i := 1 to max do
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: DOUBLE
15040: LD_INT 1
15042: DEC
15043: ST_TO_ADDR
15044: LD_VAR 0 2
15048: PUSH
15049: FOR_TO
15050: IFFALSE 15088
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
15052: LD_EXP 42
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
15068: LD_ADDR_EXP 42
15072: PUSH
15073: LD_EXP 42
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 3
15085: ST_TO_ADDR
// end ;
15086: GO 15049
15088: POP
15089: POP
// for i in Farmer ^ farmerSquad do
15090: LD_ADDR_VAR 0 1
15094: PUSH
15095: LD_EXP 39
15099: PUSH
15100: LD_EXP 42
15104: ADD
15105: PUSH
15106: FOR_IN
15107: IFFALSE 15146
// begin if IsInUnit ( i ) then
15109: LD_VAR 0 1
15113: PPUSH
15114: CALL_OW 310
15118: IFFALSE 15129
// ComExitBuilding ( i ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_INT 102
15136: PPUSH
15137: LD_INT 7
15139: PPUSH
15140: CALL_OW 171
// end ;
15144: GO 15106
15146: POP
15147: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
15148: LD_ADDR_VAR 0 1
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 5
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 21
15165: PUSH
15166: LD_INT 3
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PPUSH
15177: CALL_OW 69
15181: PUSH
15182: LD_INT 5
15184: DIFF
15185: PUSH
15186: FOR_IN
15187: IFFALSE 15203
// SetSide ( i , 2 ) ;
15189: LD_VAR 0 1
15193: PPUSH
15194: LD_INT 2
15196: PPUSH
15197: CALL_OW 235
15201: GO 15186
15203: POP
15204: POP
// wait ( 0 0$2 ) ;
15205: LD_INT 70
15207: PPUSH
15208: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
15212: LD_EXP 31
15216: PPUSH
15217: LD_STRING DH-6-end
15219: PPUSH
15220: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
15224: LD_INT 35
15226: PPUSH
15227: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
15231: LD_ADDR_VAR 0 3
15235: PUSH
15236: LD_EXP 39
15240: PUSH
15241: LD_EXP 42
15245: ADD
15246: PPUSH
15247: LD_INT 95
15249: PUSH
15250: LD_INT 3
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 72
15261: ST_TO_ADDR
// if tmp then
15262: LD_VAR 0 3
15266: IFFALSE 15310
// for i in tmp do
15268: LD_ADDR_VAR 0 1
15272: PUSH
15273: LD_VAR 0 3
15277: PUSH
15278: FOR_IN
15279: IFFALSE 15308
// begin farmerSquad := farmerSquad diff i ;
15281: LD_ADDR_EXP 42
15285: PUSH
15286: LD_EXP 42
15290: PUSH
15291: LD_VAR 0 1
15295: DIFF
15296: ST_TO_ADDR
// RemoveUnit ( i ) ;
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 64
// end ;
15306: GO 15278
15308: POP
15309: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15310: LD_EXP 42
15314: PUSH
15315: EMPTY
15316: EQUAL
15317: IFFALSE 15331
15319: PUSH
15320: LD_EXP 39
15324: PPUSH
15325: CALL_OW 305
15329: NOT
15330: AND
15331: IFFALSE 15224
// if farmerHumanLoseCounter = 0 then
15333: LD_EXP 21
15337: PUSH
15338: LD_INT 0
15340: EQUAL
15341: IFFALSE 15350
// SetAchievement ( ACH_BABY ) ;
15343: LD_STRING ACH_BABY
15345: PPUSH
15346: CALL_OW 543
// wait ( 1 1$00 ) ;
15350: LD_INT 2100
15352: PPUSH
15353: CALL_OW 67
// SendAttack ;
15357: CALL 6218 0 0
// Say ( Heike , DH-7-end ) ;
15361: LD_EXP 31
15365: PPUSH
15366: LD_STRING DH-7-end
15368: PPUSH
15369: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15373: LD_ADDR_VAR 0 1
15377: PUSH
15378: DOUBLE
15379: LD_INT 1
15381: DEC
15382: ST_TO_ADDR
15383: LD_INT 2
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: LD_INT 4
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PUSH
15401: LD_OWVAR 67
15405: ARRAY
15406: PUSH
15407: FOR_TO
15408: IFFALSE 15466
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15410: LD_INT 4200
15412: PUSH
15413: LD_INT 3500
15415: PUSH
15416: LD_INT 3150
15418: PUSH
15419: LD_INT 2800
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: LD_OWVAR 67
15432: ARRAY
15433: PPUSH
15434: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15438: LD_EXP 12
15442: IFFALSE 15454
15444: PUSH
15445: LD_EXP 22
15449: PUSH
15450: LD_INT 1
15452: LESS
15453: AND
15454: IFFALSE 15460
// exit ;
15456: POP
15457: POP
15458: GO 15468
// SendAttack ;
15460: CALL 6218 0 0
// end ;
15464: GO 15407
15466: POP
15467: POP
// end ;
15468: PPOPN 3
15470: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15471: LD_EXP 8
15475: IFFALSE 15487
15477: PUSH
15478: LD_EXP 22
15482: PUSH
15483: LD_INT 0
15485: GREATER
15486: AND
15487: IFFALSE 15497
15489: GO 15491
15491: DISABLE
// begin enable ;
15492: ENABLE
// CargoEvacuation ;
15493: CALL 3613 0 0
// end ;
15497: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15498: LD_EXP 18
15502: PUSH
15503: LD_INT 18900
15505: LESSEQUAL
15506: IFFALSE 15555
15508: GO 15510
15510: DISABLE
// begin DialogueOn ;
15511: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15515: LD_EXP 39
15519: PPUSH
15520: LD_STRING DF-1-distribution-a
15522: PPUSH
15523: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15527: LD_EXP 31
15531: PPUSH
15532: LD_STRING DH-1-distribution-a
15534: PPUSH
15535: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15539: LD_EXP 39
15543: PPUSH
15544: LD_STRING DF-2-distribution-a
15546: PPUSH
15547: CALL_OW 94
// DialogueOff ;
15551: CALL_OW 7
// end ;
15555: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15556: LD_EXP 18
15560: PUSH
15561: LD_INT 0
15563: LESSEQUAL
15564: IFFALSE 15596
15566: GO 15568
15568: DISABLE
// begin DialogueOn ;
15569: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15573: LD_EXP 39
15577: PPUSH
15578: LD_STRING DF-3-distribution-a
15580: PPUSH
15581: CALL_OW 94
// YouLost ( Distribution ) ;
15585: LD_STRING Distribution
15587: PPUSH
15588: CALL_OW 104
// DialogueOff ;
15592: CALL_OW 7
// end ;
15596: END
// every 0 0$1 trigger vehCounter >= 2 do
15597: LD_EXP 23
15601: PUSH
15602: LD_INT 2
15604: GREATEREQUAL
15605: IFFALSE 15617
15607: GO 15609
15609: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15610: LD_STRING VehConstructed
15612: PPUSH
15613: CALL_OW 337
15617: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15618: LD_INT 22
15620: PUSH
15621: LD_INT 2
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 34
15630: PUSH
15631: LD_INT 12
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PPUSH
15642: CALL_OW 69
15646: IFFALSE 15706
15648: GO 15650
15650: DISABLE
// begin DialogueOn ;
15651: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15655: LD_EXP 31
15659: PPUSH
15660: LD_STRING DH-1-truck
15662: PPUSH
15663: CALL_OW 88
// if IsOk ( Markov ) then
15667: LD_EXP 38
15671: PPUSH
15672: CALL_OW 302
15676: IFFALSE 15702
// begin Say ( Markov , DMar-1-truck ) ;
15678: LD_EXP 38
15682: PPUSH
15683: LD_STRING DMar-1-truck
15685: PPUSH
15686: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15690: LD_EXP 31
15694: PPUSH
15695: LD_STRING DH-2-truck
15697: PPUSH
15698: CALL_OW 88
// end ; DialogueOff ;
15702: CALL_OW 7
// end ;
15706: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15707: LD_INT 0
15709: PPUSH
15710: PPUSH
15711: PPUSH
// if IsOk ( Givi ) then
15712: LD_EXP 32
15716: PPUSH
15717: CALL_OW 302
15721: IFFALSE 15737
// begin Say ( Givi , DG-1-nocargo ) ;
15723: LD_EXP 32
15727: PPUSH
15728: LD_STRING DG-1-nocargo
15730: PPUSH
15731: CALL_OW 88
// exit ;
15735: GO 15833
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15737: LD_ADDR_VAR 0 2
15741: PUSH
15742: LD_EXP 45
15746: PPUSH
15747: LD_INT 26
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PPUSH
15757: CALL_OW 72
15761: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_EXP 45
15771: PPUSH
15772: LD_INT 26
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PPUSH
15782: CALL_OW 72
15786: ST_TO_ADDR
// if randomMen then
15787: LD_VAR 0 2
15791: IFFALSE 15811
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15793: LD_VAR 0 2
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PPUSH
15802: LD_STRING DArm-1-nocargo
15804: PPUSH
15805: CALL_OW 88
15809: GO 15833
// if randomWomen then
15811: LD_VAR 0 3
15815: IFFALSE 15833
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15817: LD_VAR 0 3
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: PPUSH
15826: LD_STRING DArf-1-nocargo
15828: PPUSH
15829: CALL_OW 88
// end ;
15833: LD_VAR 0 1
15837: RET
// export function IncomingAttack ; begin
15838: LD_INT 0
15840: PPUSH
// if attackWave = 1 then
15841: LD_EXP 20
15845: PUSH
15846: LD_INT 1
15848: EQUAL
15849: IFFALSE 15920
// begin DialogueOn ;
15851: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15855: LD_EXP 40
15859: PPUSH
15860: LD_STRING DO-1-radio-1
15862: PPUSH
15863: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15867: LD_EXP 31
15871: PPUSH
15872: LD_STRING DH-1-radio-1-
15874: PPUSH
15875: CALL_OW 88
// if IsOk ( Markov ) then
15879: LD_EXP 38
15883: PPUSH
15884: CALL_OW 302
15888: IFFALSE 15914
// begin Say ( Markov , DMar-1-radio-1 ) ;
15890: LD_EXP 38
15894: PPUSH
15895: LD_STRING DMar-1-radio-1
15897: PPUSH
15898: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15902: LD_EXP 31
15906: PPUSH
15907: LD_STRING DH-2-radio-1
15909: PPUSH
15910: CALL_OW 88
// end ; DialogueOff ;
15914: CALL_OW 7
// end else
15918: GO 15944
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15920: LD_EXP 40
15924: PPUSH
15925: LD_STRING DO-1-radio-u
15927: PPUSH
15928: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15932: LD_EXP 31
15936: PPUSH
15937: LD_STRING DH-1-radio-u
15939: PPUSH
15940: CALL_OW 88
// end ; end ;
15944: LD_VAR 0 1
15948: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15949: LD_EXP 47
15953: PPUSH
15954: LD_INT 95
15956: PUSH
15957: LD_INT 8
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 72
15968: IFFALSE 16073
15970: GO 15972
15972: DISABLE
15973: LD_INT 0
15975: PPUSH
// begin enable ;
15976: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15977: LD_ADDR_VAR 0 1
15981: PUSH
15982: LD_EXP 47
15986: PPUSH
15987: LD_INT 95
15989: PUSH
15990: LD_INT 8
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 72
16001: PUSH
16002: FOR_IN
16003: IFFALSE 16032
// begin usForces := usForces diff i ;
16005: LD_ADDR_EXP 47
16009: PUSH
16010: LD_EXP 47
16014: PUSH
16015: LD_VAR 0 1
16019: DIFF
16020: ST_TO_ADDR
// RemoveUnit ( i ) ;
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 64
// end ;
16030: GO 16002
16032: POP
16033: POP
// if not americanHasEscaped and attackWave = 1 then
16034: LD_EXP 9
16038: NOT
16039: IFFALSE 16051
16041: PUSH
16042: LD_EXP 20
16046: PUSH
16047: LD_INT 1
16049: EQUAL
16050: AND
16051: IFFALSE 16073
// begin americanHasEscaped := true ;
16053: LD_ADDR_EXP 9
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
16061: LD_EXP 31
16065: PPUSH
16066: LD_STRING DH-2-assault-a
16068: PPUSH
16069: CALL_OW 88
// end ; end ;
16073: PPOPN 1
16075: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
16076: LD_INT 4
16078: PPUSH
16079: LD_INT 22
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 70
16093: IFFALSE 16102
16095: PUSH
16096: LD_EXP 12
16100: NOT
16101: AND
16102: IFFALSE 16119
16104: GO 16106
16106: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
16107: LD_EXP 39
16111: PPUSH
16112: LD_STRING DF-1-attack
16114: PPUSH
16115: CALL_OW 94
16119: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
16120: LD_INT 5
16122: PPUSH
16123: CALL_OW 255
16127: PUSH
16128: LD_INT 2
16130: EQUAL
16131: IFFALSE 16147
16133: GO 16135
16135: DISABLE
// begin enable ;
16136: ENABLE
// SetSide ( arDepot , 5 ) ;
16137: LD_INT 5
16139: PPUSH
16140: LD_INT 5
16142: PPUSH
16143: CALL_OW 235
// end ;
16147: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
16148: LD_INT 22
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 21
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: NOT
16177: IFFALSE 16196
16179: PUSH
16180: LD_INT 22
16182: PUSH
16183: LD_INT 4
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: NOT
16195: AND
16196: IFFALSE 16205
16198: PUSH
16199: LD_EXP 12
16203: NOT
16204: AND
16205: IFFALSE 16217
16207: PUSH
16208: LD_EXP 16
16212: PUSH
16213: LD_INT 90
16215: GREATER
16216: AND
16217: IFFALSE 16252
16219: PUSH
16220: LD_INT 7
16222: PPUSH
16223: LD_INT 22
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 21
16235: PUSH
16236: LD_INT 1
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 70
16251: AND
16252: IFFALSE 16291
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_INT 2
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 50
16267: PUSH
16268: EMPTY
16269: LIST
16270: PUSH
16271: LD_INT 30
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: AND
16291: IFFALSE 17106
16293: GO 16295
16295: DISABLE
16296: LD_INT 0
16298: PPUSH
16299: PPUSH
16300: PPUSH
16301: PPUSH
16302: PPUSH
// begin depot := usDepot ;
16303: LD_ADDR_VAR 0 5
16307: PUSH
16308: LD_INT 11
16310: ST_TO_ADDR
// if not depot then
16311: LD_VAR 0 5
16315: NOT
16316: IFFALSE 16356
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16318: LD_ADDR_VAR 0 5
16322: PUSH
16323: LD_INT 22
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 30
16335: PUSH
16336: LD_INT 0
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: LD_EXP 45
16365: PPUSH
16366: LD_INT 26
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_EXP 45
16390: PPUSH
16391: LD_INT 26
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 72
16405: ST_TO_ADDR
// if IsOk ( Kaia ) then
16406: LD_EXP 36
16410: PPUSH
16411: CALL_OW 302
16415: IFFALSE 16436
// speaker := [ Kaia , DK ] else
16417: LD_ADDR_VAR 0 3
16421: PUSH
16422: LD_EXP 36
16426: PUSH
16427: LD_STRING DK
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: ST_TO_ADDR
16434: GO 16516
// if randomMen then
16436: LD_VAR 0 1
16440: IFFALSE 16475
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16442: LD_ADDR_VAR 0 3
16446: PUSH
16447: LD_VAR 0 1
16451: PUSH
16452: LD_INT 1
16454: PPUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 12
16464: ARRAY
16465: PUSH
16466: LD_STRING DArm
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ST_TO_ADDR
16473: GO 16516
// if randomWomen then
16475: LD_VAR 0 2
16479: IFFALSE 16514
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16481: LD_ADDR_VAR 0 3
16485: PUSH
16486: LD_VAR 0 2
16490: PUSH
16491: LD_INT 1
16493: PPUSH
16494: LD_VAR 0 2
16498: PPUSH
16499: CALL_OW 12
16503: ARRAY
16504: PUSH
16505: LD_STRING DArf
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: ST_TO_ADDR
16512: GO 16516
// exit ;
16514: GO 17106
// if IsInUnit ( speaker [ 1 ] ) then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: PPUSH
16525: CALL_OW 310
16529: IFFALSE 16552
// place := IsInUnit ( speaker [ 1 ] ) else
16531: LD_ADDR_VAR 0 4
16535: PUSH
16536: LD_VAR 0 3
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PPUSH
16545: CALL_OW 310
16549: ST_TO_ADDR
16550: GO 16566
// place := speaker [ 1 ] ;
16552: LD_ADDR_VAR 0 4
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16566: LD_VAR 0 4
16570: PPUSH
16571: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16575: LD_VAR 0 4
16579: PPUSH
16580: CALL_OW 250
16584: PPUSH
16585: LD_VAR 0 4
16589: PPUSH
16590: CALL_OW 251
16594: PPUSH
16595: CALL 2090 0 2
// wait ( 0 0$2 ) ;
16599: LD_INT 70
16601: PPUSH
16602: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16606: LD_EXP 41
16610: PPUSH
16611: CALL_OW 305
16615: NOT
16616: IFFALSE 16620
// exit ;
16618: GO 17106
// allowConvoys := false ;
16620: LD_ADDR_EXP 13
16624: PUSH
16625: LD_INT 0
16627: ST_TO_ADDR
// blockAttack := true ;
16628: LD_ADDR_EXP 29
16632: PUSH
16633: LD_INT 1
16635: ST_TO_ADDR
// InGameOn ;
16636: CALL_OW 8
// wait ( 0 0$1 ) ;
16640: LD_INT 35
16642: PPUSH
16643: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16647: LD_EXP 41
16651: PPUSH
16652: LD_STRING DI-1-land
16654: PPUSH
16655: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16659: LD_VAR 0 3
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: CALL_OW 310
16672: IFFALSE 16687
// ComExit ( speaker [ 1 ] ) ;
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 1
16681: ARRAY
16682: PPUSH
16683: CALL 81688 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16687: LD_VAR 0 3
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: LD_EXP 41
16700: PPUSH
16701: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: LD_EXP 41
16718: PPUSH
16719: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16723: LD_EXP 41
16727: PPUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: PPUSH
16737: CALL_OW 119
// wait ( 0 0$1 ) ;
16741: LD_INT 35
16743: PPUSH
16744: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16748: LD_VAR 0 3
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: PPUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_INT 2
16764: ARRAY
16765: PUSH
16766: LD_STRING -1-land
16768: STR
16769: PPUSH
16770: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16774: LD_EXP 41
16778: PPUSH
16779: LD_STRING DI-2-land
16781: PPUSH
16782: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PPUSH
16795: LD_VAR 0 3
16799: PUSH
16800: LD_INT 2
16802: ARRAY
16803: PUSH
16804: LD_STRING -2-land
16806: STR
16807: PPUSH
16808: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PPUSH
16821: LD_VAR 0 3
16825: PUSH
16826: LD_INT 2
16828: ARRAY
16829: PUSH
16830: LD_STRING -3-land
16832: STR
16833: PPUSH
16834: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16838: LD_EXP 31
16842: PPUSH
16843: LD_STRING DH-1-land
16845: PPUSH
16846: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16850: LD_VAR 0 5
16854: PPUSH
16855: CALL_OW 313
16859: PUSH
16860: LD_INT 6
16862: EQUAL
16863: IFFALSE 16883
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16865: LD_VAR 0 5
16869: PPUSH
16870: CALL_OW 313
16874: PUSH
16875: LD_INT 1
16877: ARRAY
16878: PPUSH
16879: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16883: LD_EXP 41
16887: PPUSH
16888: LD_INT 2
16890: PPUSH
16891: CALL_OW 235
// CenterOnUnits ( depot ) ;
16895: LD_VAR 0 5
16899: PPUSH
16900: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16904: LD_EXP 41
16908: PPUSH
16909: LD_VAR 0 5
16913: PPUSH
16914: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16918: LD_VAR 0 3
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: LD_VAR 0 5
16931: PPUSH
16932: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16936: LD_INT 35
16938: PPUSH
16939: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16943: LD_EXP 41
16947: PPUSH
16948: CALL_OW 310
16952: IFTRUE 16966
16954: PUSH
16955: LD_EXP 41
16959: PPUSH
16960: CALL_OW 302
16964: NOT
16965: OR
16966: IFTRUE 16980
16968: PUSH
16969: LD_VAR 0 5
16973: PPUSH
16974: CALL_OW 302
16978: NOT
16979: OR
16980: IFFALSE 16936
// InGameOff ;
16982: CALL_OW 9
// blockAttack := false ;
16986: LD_ADDR_EXP 29
16990: PUSH
16991: LD_INT 0
16993: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16994: LD_EXP 41
16998: PPUSH
16999: CALL_OW 302
17003: NOT
17004: IFFALSE 17008
// exit ;
17006: GO 17106
// if not IsOk ( depot ) then
17008: LD_VAR 0 5
17012: PPUSH
17013: CALL_OW 302
17017: NOT
17018: IFFALSE 17083
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
17020: LD_EXP 41
17024: PPUSH
17025: LD_INT 30
17027: PPUSH
17028: LD_INT 1
17030: PPUSH
17031: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17035: LD_INT 35
17037: PPUSH
17038: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
17042: LD_EXP 41
17046: PPUSH
17047: LD_INT 30
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 307
17057: IFTRUE 17070
17059: PUSH
17060: LD_EXP 41
17064: PPUSH
17065: CALL_OW 301
17069: OR
17070: IFFALSE 17035
// RemoveUnit ( Ibrahim ) ;
17072: LD_EXP 41
17076: PPUSH
17077: CALL_OW 64
// exit ;
17081: GO 17106
// end ; ibrahimInDepot := true ;
17083: LD_ADDR_EXP 26
17087: PUSH
17088: LD_INT 1
17090: ST_TO_ADDR
// allowConvoys := true ;
17091: LD_ADDR_EXP 13
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
17099: LD_STRING IbrahimInDepot
17101: PPUSH
17102: CALL_OW 97
// end ;
17106: PPOPN 5
17108: END
// export function IbrahimQuery ; begin
17109: LD_INT 0
17111: PPUSH
// case Query ( IbrahimQuery ) of 1 :
17112: LD_STRING IbrahimQuery
17114: PPUSH
17115: CALL_OW 97
17119: PUSH
17120: LD_INT 1
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17498
17128: POP
// begin allowConvoys := false ;
17129: LD_ADDR_EXP 13
17133: PUSH
17134: LD_INT 0
17136: ST_TO_ADDR
// ibrahimInDepot := false ;
17137: LD_ADDR_EXP 26
17141: PUSH
17142: LD_INT 0
17144: ST_TO_ADDR
// InGameOn ;
17145: CALL_OW 8
// DialogueOn ;
17149: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
17153: LD_EXP 31
17157: PPUSH
17158: CALL_OW 87
// wait ( 0 0$1 ) ;
17162: LD_INT 35
17164: PPUSH
17165: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
17169: LD_EXP 31
17173: PPUSH
17174: LD_STRING DH-1-interrogation
17176: PPUSH
17177: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
17181: LD_EXP 41
17185: PPUSH
17186: LD_STRING DI-1-interrogation
17188: PPUSH
17189: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
17193: LD_EXP 31
17197: PPUSH
17198: LD_STRING DH-2-interrogation
17200: PPUSH
17201: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
17205: LD_EXP 41
17209: PPUSH
17210: LD_STRING DI-2-interrogation
17212: PPUSH
17213: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
17217: LD_EXP 31
17221: PPUSH
17222: LD_STRING DH-3-interrogation
17224: PPUSH
17225: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
17229: LD_EXP 41
17233: PPUSH
17234: LD_STRING DI-3-interrogation
17236: PPUSH
17237: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
17241: LD_EXP 31
17245: PPUSH
17246: LD_STRING DH-4-interrogation
17248: PPUSH
17249: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
17253: LD_EXP 41
17257: PPUSH
17258: LD_STRING DI-4-interrogation
17260: PPUSH
17261: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
17265: LD_EXP 31
17269: PPUSH
17270: LD_STRING DH-5-interrogation
17272: PPUSH
17273: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
17277: LD_EXP 41
17281: PPUSH
17282: LD_STRING DI-5-interrogation
17284: PPUSH
17285: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17296: LD_EXP 31
17300: PPUSH
17301: LD_STRING DH-6-interrogation
17303: PPUSH
17304: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17308: LD_EXP 41
17312: PPUSH
17313: LD_STRING DI-6-interrogation
17315: PPUSH
17316: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17320: LD_EXP 41
17324: PPUSH
17325: LD_STRING DI-7-interrogation
17327: PPUSH
17328: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17332: LD_EXP 31
17336: PPUSH
17337: LD_STRING DH-7-interrogation
17339: PPUSH
17340: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17344: LD_INT 10
17346: PPUSH
17347: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17351: LD_EXP 31
17355: PPUSH
17356: LD_STRING DH-8-interrogation
17358: PPUSH
17359: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17363: LD_EXP 41
17367: PPUSH
17368: LD_STRING DI-8-interrogation
17370: PPUSH
17371: CALL_OW 88
// wait ( 0 0$1 ) ;
17375: LD_INT 35
17377: PPUSH
17378: CALL_OW 67
// DialogueOff ;
17382: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17386: LD_STRING IbrahimDecisionQuery
17388: PPUSH
17389: CALL_OW 97
17393: PUSH
17394: LD_INT 1
17396: DOUBLE
17397: EQUAL
17398: IFTRUE 17402
17400: GO 17426
17402: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17403: LD_EXP 41
17407: PPUSH
17408: LD_STRING DI-1-kill
17410: PPUSH
17411: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17415: LD_EXP 41
17419: PPUSH
17420: CALL_OW 66
// end ; 2 :
17424: GO 17492
17426: LD_INT 2
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17491
17434: POP
// begin SetSide ( Ibrahim , 6 ) ;
17435: LD_EXP 41
17439: PPUSH
17440: LD_INT 6
17442: PPUSH
17443: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17447: LD_EXP 41
17451: PPUSH
17452: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17456: LD_EXP 41
17460: PPUSH
17461: LD_INT 66
17463: PPUSH
17464: LD_INT 2
17466: PPUSH
17467: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17471: LD_EXP 41
17475: PPUSH
17476: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17480: LD_EXP 31
17484: PPUSH
17485: CALL_OW 122
// end ; end ;
17489: GO 17492
17491: POP
// InGameOff ;
17492: CALL_OW 9
// end ; 2 :
17496: GO 17512
17498: LD_INT 2
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17511
17506: POP
// exit ; end ;
17507: GO 17596
17509: GO 17512
17511: POP
// allowConvoys := true ;
17512: LD_ADDR_EXP 13
17516: PUSH
17517: LD_INT 1
17519: ST_TO_ADDR
// blockAttack := false ;
17520: LD_ADDR_EXP 29
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17528: LD_INT 5250
17530: PPUSH
17531: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17535: LD_INT 35
17537: PPUSH
17538: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17542: LD_INT 81
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 1
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: NOT
17571: IFFALSE 17535
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17573: LD_EXP 41
17577: PPUSH
17578: LD_INT 34
17580: PPUSH
17581: LD_INT 21
17583: PPUSH
17584: CALL_OW 111
// ibrahimIsFree := true ;
17588: LD_ADDR_EXP 27
17592: PUSH
17593: LD_INT 1
17595: ST_TO_ADDR
// end ;
17596: LD_VAR 0 1
17600: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17601: LD_EXP 27
17605: IFFALSE 17618
17607: PUSH
17608: LD_EXP 41
17612: PPUSH
17613: CALL_OW 302
17617: AND
17618: IFFALSE 17634
17620: PUSH
17621: LD_INT 2
17623: PPUSH
17624: LD_EXP 41
17628: PPUSH
17629: CALL_OW 292
17633: AND
17634: IFFALSE 18452
17636: GO 17638
17638: DISABLE
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
// begin wait ( 0 0$10 ) ;
17647: LD_INT 350
17649: PPUSH
17650: CALL_OW 67
// allowConvoys := false ;
17654: LD_ADDR_EXP 13
17658: PUSH
17659: LD_INT 0
17661: ST_TO_ADDR
// blockAttack := true ;
17662: LD_ADDR_EXP 29
17666: PUSH
17667: LD_INT 1
17669: ST_TO_ADDR
// depot := usDepot ;
17670: LD_ADDR_VAR 0 4
17674: PUSH
17675: LD_INT 11
17677: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17678: LD_INT 11
17680: NOT
17681: IFFALSE 17720
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 50
17696: PUSH
17697: EMPTY
17698: LIST
17699: PUSH
17700: LD_INT 30
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: PPUSH
17715: CALL_OW 69
17719: AND
17720: IFFALSE 17767
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17722: LD_ADDR_VAR 0 4
17726: PUSH
17727: LD_INT 22
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 50
17739: PUSH
17740: EMPTY
17741: LIST
17742: PUSH
17743: LD_INT 30
17745: PUSH
17746: LD_INT 0
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PUSH
17763: LD_INT 1
17765: ARRAY
17766: ST_TO_ADDR
// InGameOn ;
17767: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17771: LD_EXP 41
17775: PPUSH
17776: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17780: LD_EXP 31
17784: PPUSH
17785: LD_EXP 41
17789: PPUSH
17790: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17794: LD_EXP 41
17798: PPUSH
17799: LD_EXP 31
17803: PPUSH
17804: CALL_OW 119
// DialogueOn ;
17808: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17812: LD_EXP 41
17816: PPUSH
17817: LD_STRING DI-1-free
17819: PPUSH
17820: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DH-1-free
17831: PPUSH
17832: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17836: LD_EXP 41
17840: PPUSH
17841: LD_STRING DI-2-free
17843: PPUSH
17844: CALL_OW 88
// changeClass := 0 ;
17848: LD_ADDR_VAR 0 1
17852: PUSH
17853: LD_INT 0
17855: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17856: LD_STRING IbrahimJoinQuery
17858: PPUSH
17859: CALL_OW 97
17863: PUSH
17864: LD_INT 1
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 17883
17872: POP
// begin changeClass := 1 ;
17873: LD_ADDR_VAR 0 1
17877: PUSH
17878: LD_INT 1
17880: ST_TO_ADDR
// end ; 2 :
17881: GO 18139
17883: LD_INT 2
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 18059
17891: POP
// begin Say ( Heike , DH-1-decline ) ;
17892: LD_EXP 31
17896: PPUSH
17897: LD_STRING DH-1-decline
17899: PPUSH
17900: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17904: LD_EXP 41
17908: PPUSH
17909: LD_STRING DI-1-decline
17911: PPUSH
17912: CALL_OW 88
// DialogueOff ;
17916: CALL_OW 7
// InGameOff ;
17920: CALL_OW 9
// blockAttack := false ;
17924: LD_ADDR_EXP 29
17928: PUSH
17929: LD_INT 0
17931: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17932: LD_EXP 41
17936: PPUSH
17937: LD_INT 30
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: CALL_OW 111
// p := 0 ;
17947: LD_ADDR_VAR 0 3
17951: PUSH
17952: LD_INT 0
17954: ST_TO_ADDR
// repeat p := p + 1 ;
17955: LD_ADDR_VAR 0 3
17959: PUSH
17960: LD_VAR 0 3
17964: PUSH
17965: LD_INT 1
17967: PLUS
17968: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17969: LD_INT 35
17971: PPUSH
17972: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17976: LD_EXP 41
17980: PPUSH
17981: LD_INT 30
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 307
17991: IFTRUE 18024
17993: PUSH
17994: LD_INT 22
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 101
18006: PUSH
18007: LD_INT 6
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: NOT
18023: OR
18024: IFTRUE 18036
18026: PUSH
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 10
18034: GREATER
18035: OR
18036: IFFALSE 17955
// RemoveUnit ( Ibrahim ) ;
18038: LD_EXP 41
18042: PPUSH
18043: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
18047: LD_INT 1
18049: PPUSH
18050: LD_STRING 03_IbrahimHasEscaped
18052: PPUSH
18053: CALL_OW 39
// end ; 3 :
18057: GO 18139
18059: LD_INT 3
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18138
18067: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
18068: LD_EXP 31
18072: PPUSH
18073: LD_STRING DH-1-radio-hq
18075: PPUSH
18076: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
18080: LD_EXP 40
18084: PPUSH
18085: LD_STRING DO-1-radio-hq
18087: PPUSH
18088: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
18092: LD_EXP 31
18096: PPUSH
18097: LD_STRING DH-2-radio-hq
18099: PPUSH
18100: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
18104: LD_EXP 40
18108: PPUSH
18109: LD_STRING DO-2-radio-hq
18111: PPUSH
18112: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
18116: LD_EXP 31
18120: PPUSH
18121: LD_STRING DH-3-radio-hq
18123: PPUSH
18124: CALL_OW 88
// changeClass := 1 ;
18128: LD_ADDR_VAR 0 1
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// end ; end ;
18136: GO 18139
18138: POP
// if changeClass then
18139: LD_VAR 0 1
18143: IFFALSE 18452
// begin Say ( Heike , DH-1-agree ) ;
18145: LD_EXP 31
18149: PPUSH
18150: LD_STRING DH-1-agree
18152: PPUSH
18153: CALL_OW 88
// if IsOk ( Givi ) then
18157: LD_EXP 32
18161: PPUSH
18162: CALL_OW 302
18166: IFFALSE 18204
// begin Say ( Givi , DG-1-agree ) ;
18168: LD_EXP 32
18172: PPUSH
18173: LD_STRING DG-1-agree
18175: PPUSH
18176: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
18180: LD_EXP 31
18184: PPUSH
18185: LD_STRING DH-2-agree
18187: PPUSH
18188: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
18192: LD_EXP 32
18196: PPUSH
18197: LD_STRING DG-2-agree
18199: PPUSH
18200: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
18204: LD_EXP 41
18208: PPUSH
18209: CALL_OW 87
// DialogueOff ;
18213: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
18217: LD_VAR 0 4
18221: PPUSH
18222: CALL_OW 313
18226: PUSH
18227: LD_INT 6
18229: EQUAL
18230: IFFALSE 18250
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
18232: LD_VAR 0 4
18236: PPUSH
18237: CALL_OW 313
18241: PUSH
18242: LD_INT 1
18244: ARRAY
18245: PPUSH
18246: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
18250: LD_EXP 41
18254: PPUSH
18255: LD_INT 2
18257: PPUSH
18258: CALL_OW 235
// x := GetX ( Ibrahim ) ;
18262: LD_ADDR_VAR 0 5
18266: PUSH
18267: LD_EXP 41
18271: PPUSH
18272: CALL_OW 250
18276: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
18277: LD_ADDR_VAR 0 6
18281: PUSH
18282: LD_EXP 41
18286: PPUSH
18287: CALL_OW 251
18291: ST_TO_ADDR
// if depot then
18292: LD_VAR 0 4
18296: IFFALSE 18345
// begin ComEnterUnit ( Ibrahim , depot ) ;
18298: LD_EXP 41
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18312: LD_INT 35
18314: PPUSH
18315: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18319: LD_EXP 41
18323: PPUSH
18324: CALL_OW 310
18328: IFFALSE 18312
// b := IsInUnit ( Ibrahim ) ;
18330: LD_ADDR_VAR 0 2
18334: PUSH
18335: LD_EXP 41
18339: PPUSH
18340: CALL_OW 310
18344: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18345: LD_EXP 41
18349: PPUSH
18350: CALL_OW 64
// uc_side := 2 ;
18354: LD_ADDR_OWVAR 20
18358: PUSH
18359: LD_INT 2
18361: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18362: LD_ADDR_EXP 41
18366: PUSH
18367: LD_STRING Ibrahim
18369: PPUSH
18370: LD_INT 0
18372: PPUSH
18373: LD_STRING 
18375: PPUSH
18376: CALL 43090 0 3
18380: ST_TO_ADDR
// if depot then
18381: LD_VAR 0 4
18385: IFFALSE 18403
// PlaceHumanInUnit ( Ibrahim , b ) else
18387: LD_EXP 41
18391: PPUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: CALL_OW 52
18401: GO 18425
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18403: LD_EXP 41
18407: PPUSH
18408: LD_VAR 0 5
18412: PPUSH
18413: LD_VAR 0 6
18417: PPUSH
18418: LD_INT 0
18420: PPUSH
18421: CALL_OW 48
// InGameOff ;
18425: CALL_OW 9
// allowConvoys := true ;
18429: LD_ADDR_EXP 13
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// blockAttack := false ;
18437: LD_ADDR_EXP 29
18441: PUSH
18442: LD_INT 0
18444: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18445: LD_STRING ACH_IBRAHIM
18447: PPUSH
18448: CALL_OW 543
// end ; end ;
18452: PPOPN 6
18454: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18455: LD_EXP 36
18459: PPUSH
18460: CALL_OW 256
18464: PUSH
18465: LD_INT 3
18467: LESS
18468: IFFALSE 18535
18470: GO 18472
18472: DISABLE
// begin DialogueOn ;
18473: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18477: LD_EXP 36
18481: PPUSH
18482: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18486: LD_EXP 36
18490: PPUSH
18491: LD_STRING DK-keydeath-1
18493: PPUSH
18494: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18498: LD_EXP 31
18502: PPUSH
18503: LD_STRING DH-keydeath-2
18505: PPUSH
18506: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18510: LD_EXP 31
18514: PPUSH
18515: LD_STRING DH-keydeath-3
18517: PPUSH
18518: CALL_OW 88
// DialogueOff ;
18522: CALL_OW 7
// KillUnit ( Kaia ) ;
18526: LD_EXP 36
18530: PPUSH
18531: CALL_OW 66
// end ;
18535: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do var m1 , m2 , m3 ;
18536: LD_EXP 12
18540: IFFALSE 18552
18542: PUSH
18543: LD_EXP 22
18547: PUSH
18548: LD_INT 1
18550: LESS
18551: AND
18552: IFFALSE 19220
18554: GO 18556
18556: DISABLE
18557: LD_INT 0
18559: PPUSH
18560: PPUSH
18561: PPUSH
// begin m1 := false ;
18562: LD_ADDR_VAR 0 1
18566: PUSH
18567: LD_INT 0
18569: ST_TO_ADDR
// m2 := false ;
18570: LD_ADDR_VAR 0 2
18574: PUSH
18575: LD_INT 0
18577: ST_TO_ADDR
// m3 := false ;
18578: LD_ADDR_VAR 0 3
18582: PUSH
18583: LD_INT 0
18585: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18586: LD_INT 22
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 25
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 25
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: IFFALSE 18710
// begin ChangeSideFog ( 1 , 2 ) ;
18634: LD_INT 1
18636: PPUSH
18637: LD_INT 2
18639: PPUSH
18640: CALL_OW 343
// Query ( DestroyEnemy ) ;
18644: LD_STRING DestroyEnemy
18646: PPUSH
18647: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18651: LD_INT 35
18653: PPUSH
18654: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18658: LD_INT 22
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: LD_INT 25
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 25
18683: PUSH
18684: LD_INT 3
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: PUSH
18705: LD_INT 0
18707: EQUAL
18708: IFFALSE 18651
// end ; if tick <= 45 45$00 then
18710: LD_OWVAR 1
18714: PUSH
18715: LD_INT 94500
18717: LESSEQUAL
18718: IFFALSE 18727
// SetAchievement ( ACH_HSPEED_3 ) ;
18720: LD_STRING ACH_HSPEED_3
18722: PPUSH
18723: CALL_OW 543
// DialogueOn ;
18727: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18731: LD_EXP 31
18735: PPUSH
18736: LD_STRING DH-1-final
18738: PPUSH
18739: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18743: LD_OWVAR 1
18747: PUSH
18748: LD_INT 138600
18750: PUSH
18751: LD_INT 134400
18753: PUSH
18754: LD_INT 130200
18756: PUSH
18757: LD_INT 126000
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: PUSH
18766: LD_OWVAR 67
18770: ARRAY
18771: LESSEQUAL
18772: IFFALSE 18794
// begin m1 := true ;
18774: LD_ADDR_VAR 0 1
18778: PUSH
18779: LD_INT 1
18781: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
18782: LD_STRING med1
18784: PPUSH
18785: LD_INT 1
18787: PPUSH
18788: CALL_OW 101
// end else
18792: GO 18805
// AddMedal ( med1 , - 1 ) ;
18794: LD_STRING med1
18796: PPUSH
18797: LD_INT 1
18799: NEG
18800: PPUSH
18801: CALL_OW 101
// if vehCounter >= 2 then
18805: LD_EXP 23
18809: PUSH
18810: LD_INT 2
18812: GREATEREQUAL
18813: IFFALSE 18835
// begin m2 := true ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 1
18822: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
18823: LD_STRING med2
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: CALL_OW 101
// end else
18833: GO 18846
// AddMedal ( med2 , - 1 ) ;
18835: LD_STRING med2
18837: PPUSH
18838: LD_INT 1
18840: NEG
18841: PPUSH
18842: CALL_OW 101
// if deadCounter = 0 then
18846: LD_EXP 10
18850: PUSH
18851: LD_INT 0
18853: EQUAL
18854: IFFALSE 18876
// begin m3 := true ;
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
18864: LD_STRING med3
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 101
// end else
18874: GO 18887
// AddMedal ( med3 , - 1 ) ;
18876: LD_STRING med3
18878: PPUSH
18879: LD_INT 1
18881: NEG
18882: PPUSH
18883: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18887: LD_VAR 0 1
18891: IFFALSE 18899
18893: PUSH
18894: LD_VAR 0 2
18898: AND
18899: IFFALSE 18907
18901: PUSH
18902: LD_VAR 0 3
18906: AND
18907: IFFALSE 18919
18909: PUSH
18910: LD_OWVAR 67
18914: PUSH
18915: LD_INT 3
18917: GREATEREQUAL
18918: AND
18919: IFFALSE 18931
// SetAchievementEX ( ACH_ARES , 3 ) ;
18921: LD_STRING ACH_ARES
18923: PPUSH
18924: LD_INT 3
18926: PPUSH
18927: CALL_OW 564
// GiveMedals ( MAIN ) ;
18931: LD_STRING MAIN
18933: PPUSH
18934: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18938: LD_INT 22
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 23
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 21
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: PPUSH
18973: CALL_OW 69
18977: PPUSH
18978: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18982: LD_EXP 31
18986: PPUSH
18987: LD_STRING 03_Heike
18989: PPUSH
18990: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18994: LD_EXP 35
18998: PPUSH
18999: LD_STRING 03_Aviradze
19001: PPUSH
19002: CALL_OW 38
// if Givi then
19006: LD_EXP 32
19010: IFFALSE 19024
// SaveCharacters ( Givi , 03_Givi ) ;
19012: LD_EXP 32
19016: PPUSH
19017: LD_STRING 03_Givi
19019: PPUSH
19020: CALL_OW 38
// if Mike then
19024: LD_EXP 33
19028: IFFALSE 19042
// SaveCharacters ( Mike , 03_Mike ) ;
19030: LD_EXP 33
19034: PPUSH
19035: LD_STRING 03_Mike
19037: PPUSH
19038: CALL_OW 38
// if Kamil then
19042: LD_EXP 34
19046: IFFALSE 19060
// SaveCharacters ( Kamil , 03_Kamil ) ;
19048: LD_EXP 34
19052: PPUSH
19053: LD_STRING 03_Kamil
19055: PPUSH
19056: CALL_OW 38
// if Kaia then
19060: LD_EXP 36
19064: IFFALSE 19078
// SaveCharacters ( Kaia , 03_Kaia ) ;
19066: LD_EXP 36
19070: PPUSH
19071: LD_STRING 03_Kaia
19073: PPUSH
19074: CALL_OW 38
// if Sophia then
19078: LD_EXP 37
19082: IFFALSE 19096
// SaveCharacters ( Sophia , 03_Sophia ) ;
19084: LD_EXP 37
19088: PPUSH
19089: LD_STRING 03_Sophia
19091: PPUSH
19092: CALL_OW 38
// if Markov then
19096: LD_EXP 38
19100: IFFALSE 19114
// SaveCharacters ( Markov , 03_Markov ) ;
19102: LD_EXP 38
19106: PPUSH
19107: LD_STRING 03_Markov
19109: PPUSH
19110: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
19114: LD_EXP 41
19118: IFFALSE 19135
19120: PUSH
19121: LD_EXP 41
19125: PPUSH
19126: CALL_OW 255
19130: PUSH
19131: LD_INT 2
19133: EQUAL
19134: AND
19135: IFFALSE 19156
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
19137: LD_STRING enableBioCharacter(BIO_IBRA)
19139: PPUSH
19140: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
19144: LD_EXP 41
19148: PPUSH
19149: LD_STRING 03_Ibrahim
19151: PPUSH
19152: CALL_OW 38
// end ; if heikeSecondSquad then
19156: LD_EXP 45
19160: IFFALSE 19174
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
19162: LD_EXP 45
19166: PPUSH
19167: LD_STRING 03_others
19169: PPUSH
19170: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
19174: LD_EXP 10
19178: PPUSH
19179: LD_STRING 03_DeadCounter
19181: PPUSH
19182: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
19186: LD_EXP 30
19190: PPUSH
19191: LD_STRING 03_CargoRecycled
19193: PPUSH
19194: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
19198: LD_STRING enableBioCharacter(BIO_OMAR)
19200: PPUSH
19201: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
19205: LD_STRING enableBioCharacter(BIO_FARM)
19207: PPUSH
19208: CALL_OW 559
// YouWin ;
19212: CALL_OW 103
// DialogueOff ;
19216: CALL_OW 7
// end ; end_of_file
19220: PPOPN 3
19222: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL 36616 0 1
// if un = Heike then
19232: LD_VAR 0 1
19236: PUSH
19237: LD_EXP 31
19241: EQUAL
19242: IFFALSE 19251
// YouLost ( Heike ) ;
19244: LD_STRING Heike
19246: PPUSH
19247: CALL_OW 104
// if un = Aviradze then
19251: LD_VAR 0 1
19255: PUSH
19256: LD_EXP 35
19260: EQUAL
19261: IFFALSE 19270
// YouLost ( Aviradze ) ;
19263: LD_STRING Aviradze
19265: PPUSH
19266: CALL_OW 104
// if un = usDepot and not retreatAllowed then
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 11
19277: EQUAL
19278: IFFALSE 19287
19280: PUSH
19281: LD_EXP 12
19285: NOT
19286: AND
19287: IFFALSE 19296
// YouLost ( Depot ) ;
19289: LD_STRING Depot
19291: PPUSH
19292: CALL_OW 104
// if un = arDepot then
19296: LD_VAR 0 1
19300: PUSH
19301: LD_INT 5
19303: EQUAL
19304: IFFALSE 19313
// YouLost ( FarmerDepot ) ;
19306: LD_STRING FarmerDepot
19308: PPUSH
19309: CALL_OW 104
// if un = Farmer then
19313: LD_VAR 0 1
19317: PUSH
19318: LD_EXP 39
19322: EQUAL
19323: IFFALSE 19332
// YouLost ( Farmer ) ;
19325: LD_STRING Farmer
19327: PPUSH
19328: CALL_OW 104
// if un in usForces then
19332: LD_VAR 0 1
19336: PUSH
19337: LD_EXP 47
19341: IN
19342: IFFALSE 19360
// usForces := usForces diff un ;
19344: LD_ADDR_EXP 47
19348: PUSH
19349: LD_EXP 47
19353: PUSH
19354: LD_VAR 0 1
19358: DIFF
19359: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
19360: LD_VAR 0 1
19364: PUSH
19365: LD_INT 22
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 23
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 21
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: IN
19405: IFFALSE 19421
// deadCounter := deadCounter + 1 ;
19407: LD_ADDR_EXP 10
19411: PUSH
19412: LD_EXP 10
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19421: LD_VAR 0 1
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 4
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 34
19438: PUSH
19439: LD_INT 12
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: IN
19455: IFFALSE 19464
19457: PUSH
19458: LD_EXP 19
19462: NOT
19463: AND
19464: IFFALSE 19474
// firstConvoyDestroyed := true ;
19466: LD_ADDR_EXP 19
19470: PUSH
19471: LD_INT 1
19473: ST_TO_ADDR
// if un in usAttackers then
19474: LD_VAR 0 1
19478: PUSH
19479: LD_EXP 50
19483: IN
19484: IFFALSE 19502
// usAttackers := usAttackers diff un ;
19486: LD_ADDR_EXP 50
19490: PUSH
19491: LD_EXP 50
19495: PUSH
19496: LD_VAR 0 1
19500: DIFF
19501: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 5
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: IN
19536: IFFALSE 19552
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19538: LD_ADDR_EXP 21
19542: PUSH
19543: LD_EXP 21
19547: PUSH
19548: LD_INT 1
19550: PLUS
19551: ST_TO_ADDR
// end ;
19552: PPOPN 1
19554: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19555: LD_VAR 0 2
19559: PUSH
19560: LD_EXP 41
19564: EQUAL
19565: IFFALSE 19573
19567: PUSH
19568: LD_EXP 26
19572: AND
19573: IFFALSE 19760
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19575: LD_INT 22
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 30
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 50
19597: PUSH
19598: EMPTY
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL_OW 69
19610: IFFALSE 19664
// begin InGameOn ;
19612: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19616: LD_EXP 41
19620: PPUSH
19621: LD_INT 11
19623: PPUSH
19624: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19628: LD_INT 35
19630: PPUSH
19631: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19635: LD_EXP 41
19639: PPUSH
19640: LD_INT 11
19642: PPUSH
19643: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19647: LD_EXP 41
19651: PPUSH
19652: CALL_OW 310
19656: IFFALSE 19628
// InGameOff ;
19658: CALL_OW 9
// end else
19662: GO 19760
// begin SetSide ( Ibrahim , 6 ) ;
19664: LD_EXP 41
19668: PPUSH
19669: LD_INT 6
19671: PPUSH
19672: CALL_OW 235
// ibrahimInDepot := false ;
19676: LD_ADDR_EXP 26
19680: PUSH
19681: LD_INT 0
19683: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19684: LD_EXP 41
19688: PPUSH
19689: LD_INT 30
19691: PPUSH
19692: LD_INT 1
19694: PPUSH
19695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19699: LD_INT 35
19701: PPUSH
19702: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19706: LD_EXP 41
19710: PPUSH
19711: LD_INT 30
19713: PPUSH
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19721: LD_EXP 41
19725: PPUSH
19726: LD_INT 30
19728: PPUSH
19729: LD_INT 1
19731: PPUSH
19732: CALL_OW 307
19736: IFTRUE 19749
19738: PUSH
19739: LD_EXP 41
19743: PPUSH
19744: CALL_OW 301
19748: OR
19749: IFFALSE 19699
// RemoveUnit ( Ibrahim ) ;
19751: LD_EXP 41
19755: PPUSH
19756: CALL_OW 64
// end ; end ; end ;
19760: PPOPN 2
19762: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19763: LD_VAR 0 2
19767: PUSH
19768: LD_EXP 31
19772: EQUAL
19773: IFFALSE 19785
19775: PUSH
19776: LD_VAR 0 1
19780: PUSH
19781: LD_INT 11
19783: EQUAL
19784: AND
19785: IFFALSE 19793
19787: PUSH
19788: LD_EXP 26
19792: AND
19793: IFFALSE 19799
// IbrahimQuery ;
19795: CALL 17109 0 0
// end ;
19799: PPOPN 2
19801: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 141
// if oldId in usAttackers then
19811: LD_VAR 0 2
19815: PUSH
19816: LD_EXP 50
19820: IN
19821: IFFALSE 19839
// usAttackers := usAttackers diff oldId ;
19823: LD_ADDR_EXP 50
19827: PUSH
19828: LD_EXP 50
19832: PUSH
19833: LD_VAR 0 2
19837: DIFF
19838: ST_TO_ADDR
// if newId in usAttackers then
19839: LD_VAR 0 1
19843: PUSH
19844: LD_EXP 50
19848: IN
19849: IFFALSE 19867
// usAttackers := usAttackers diff newId ;
19851: LD_ADDR_EXP 50
19855: PUSH
19856: LD_EXP 50
19860: PUSH
19861: LD_VAR 0 1
19865: DIFF
19866: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 4
19874: EQUAL
19875: IFFALSE 19884
19877: PUSH
19878: LD_EXP 19
19882: NOT
19883: AND
19884: IFFALSE 19894
// firstConvoyDestroyed := true ;
19886: LD_ADDR_EXP 19
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19894: LD_VAR 0 1
19898: PPUSH
19899: CALL_OW 264
19903: PUSH
19904: LD_INT 12
19906: EQUAL
19907: IFFALSE 19945
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19909: LD_ADDR_EXP 14
19913: PUSH
19914: LD_EXP 14
19918: PUSH
19919: LD_INT 1
19921: PLUS
19922: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 1
19930: PPUSH
19931: CALL_OW 289
19935: PUSH
19936: LD_INT 0
19938: EQUAL
19939: IFFALSE 19945
// EmptyCargoDialog ;
19941: CALL 15707 0 0
// end ; end ;
19945: PPOPN 4
19947: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19948: LD_VAR 0 1
19952: PUSH
19953: LD_INT 2
19955: EQUAL
19956: IFFALSE 19968
19958: PUSH
19959: LD_VAR 0 2
19963: PUSH
19964: LD_INT 5
19966: EQUAL
19967: AND
19968: IFFALSE 19977
// YouLost ( Attack ) ;
19970: LD_STRING Attack
19972: PPUSH
19973: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19977: LD_VAR 0 1
19981: PUSH
19982: LD_INT 2
19984: EQUAL
19985: IFFALSE 19997
19987: PUSH
19988: LD_VAR 0 2
19992: PUSH
19993: LD_INT 1
19995: EQUAL
19996: AND
19997: IFFALSE 20007
// americanContact := true ;
19999: LD_ADDR_EXP 5
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// end ;
20007: PPOPN 2
20009: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 255
20019: PUSH
20020: LD_INT 1
20022: EQUAL
20023: IFFALSE 20032
20025: PUSH
20026: LD_EXP 7
20030: NOT
20031: AND
20032: IFFALSE 20166
// begin if GetBType ( b ) = b_lab then
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 266
20043: PUSH
20044: LD_INT 6
20046: EQUAL
20047: IFFALSE 20087
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
20049: LD_EXP 47
20053: PPUSH
20054: LD_INT 25
20056: PUSH
20057: LD_INT 4
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 72
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 120
// AmLabResearch ( b ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: CALL 5218 0 1
// end ; if GetBType ( b ) = b_armoury then
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 266
20096: PUSH
20097: LD_INT 4
20099: EQUAL
20100: IFFALSE 20148
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
20102: LD_EXP 47
20106: PPUSH
20107: LD_INT 25
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 3
20119: PUSH
20120: LD_INT 54
20122: PUSH
20123: EMPTY
20124: LIST
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PPUSH
20134: CALL_OW 72
20138: PPUSH
20139: LD_VAR 0 1
20143: PPUSH
20144: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
20148: LD_ADDR_EXP 49
20152: PUSH
20153: LD_EXP 49
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: CALL_OW 3
20165: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 255
20175: PUSH
20176: LD_INT 5
20178: EQUAL
20179: IFFALSE 20193
// SetBLevel ( b , 5 ) ;
20181: LD_VAR 0 1
20185: PPUSH
20186: LD_INT 5
20188: PPUSH
20189: CALL_OW 241
// end ;
20193: PPOPN 1
20195: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
20196: LD_VAR 0 11
20200: PUSH
20201: LD_INT 12
20203: EQUAL
20204: IFFALSE 20214
// cargoRecycled := true ;
20206: LD_ADDR_EXP 30
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// end ;
20214: PPOPN 11
20216: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 255
20226: PUSH
20227: LD_INT 2
20229: EQUAL
20230: IFFALSE 20246
// vehCounter := vehCounter + 1 ;
20232: LD_ADDR_EXP 23
20236: PUSH
20237: LD_EXP 23
20241: PUSH
20242: LD_INT 1
20244: PLUS
20245: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
20246: LD_VAR 0 1
20250: PPUSH
20251: LD_VAR 0 2
20255: PPUSH
20256: CALL 36674 0 2
// end ;
20260: PPOPN 2
20262: END
// on SailEvent ( event ) do begin if event = eventAttack then
20263: LD_VAR 0 1
20267: PUSH
20268: LD_EXP 25
20272: EQUAL
20273: IFFALSE 20279
// AmericanAttack ;
20275: CALL 6878 0 0
// end ; end_of_file
20279: PPOPN 1
20281: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
20282: LD_OWVAR 1
20286: PUSH
20287: LD_INT 10500
20289: PUSH
20290: LD_INT 9800
20292: PUSH
20293: LD_INT 9450
20295: PUSH
20296: LD_INT 9100
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: PUSH
20305: LD_OWVAR 67
20309: ARRAY
20310: LESSEQUAL
20311: IFFALSE 20338
20313: GO 20315
20315: DISABLE
// begin enable ;
20316: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
20317: LD_INT 1
20319: PPUSH
20320: LD_INT 5
20322: PPUSH
20323: CALL_OW 12
20327: PPUSH
20328: LD_INT 9
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 55
// end ;
20338: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
20339: LD_EXP 7
20343: IFFALSE 20355
20345: PUSH
20346: LD_OWVAR 1
20350: PUSH
20351: LD_INT 94500
20353: LESSEQUAL
20354: AND
20355: IFFALSE 20382
20357: GO 20359
20359: DISABLE
// begin enable ;
20360: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
20361: LD_INT 3
20363: PPUSH
20364: LD_INT 5
20366: PPUSH
20367: CALL_OW 12
20371: PPUSH
20372: LD_INT 9
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 55
// end ; end_of_file
20382: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
20383: LD_EXP 12
20387: NOT
20388: IFFALSE 20396
20390: PUSH
20391: LD_EXP 17
20395: AND
20396: IFFALSE 20404
20398: PUSH
20399: LD_EXP 4
20403: AND
20404: IFFALSE 20418
20406: PUSH
20407: LD_EXP 16
20411: PUSH
20412: LD_EXP 17
20416: LESSEQUAL
20417: AND
20418: IFFALSE 20529
20420: GO 20422
20422: DISABLE
// begin enable ;
20423: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20424: LD_ADDR_OWVAR 47
20428: PUSH
20429: LD_STRING #X103-1
20431: PUSH
20432: LD_EXP 17
20436: PUSH
20437: LD_EXP 16
20441: MINUS
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20447: LD_ADDR_EXP 16
20451: PUSH
20452: LD_INT 5
20454: PPUSH
20455: CALL_OW 274
20459: PPUSH
20460: LD_INT 1
20462: PPUSH
20463: CALL_OW 275
20467: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20468: LD_INT 10
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 287
20478: PUSH
20479: LD_INT 0
20481: EQUAL
20482: IFFALSE 20500
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20484: LD_ADDR_EXP 18
20488: PUSH
20489: LD_EXP 18
20493: PUSH
20494: LD_INT 35
20496: MINUS
20497: ST_TO_ADDR
20498: GO 20529
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20500: LD_ADDR_EXP 18
20504: PUSH
20505: LD_INT 42000
20507: PUSH
20508: LD_INT 31500
20510: PUSH
20511: LD_INT 25200
20513: PUSH
20514: LD_INT 21000
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: PUSH
20523: LD_OWVAR 67
20527: ARRAY
20528: ST_TO_ADDR
// end ; end_of_file
20529: END
// export globalGameSaveCounter ; every 0 0$1 do
20530: GO 20532
20532: DISABLE
// begin enable ;
20533: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20534: LD_STRING updateTimer(
20536: PUSH
20537: LD_OWVAR 1
20541: STR
20542: PUSH
20543: LD_STRING );
20545: STR
20546: PPUSH
20547: CALL_OW 559
// end ;
20551: END
// every 0 0$1 do
20552: GO 20554
20554: DISABLE
// begin globalGameSaveCounter := 0 ;
20555: LD_ADDR_EXP 51
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20563: LD_STRING setGameSaveCounter(0)
20565: PPUSH
20566: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20570: LD_STRING initStreamRollete();
20572: PPUSH
20573: CALL_OW 559
// InitStreamMode ;
20577: CALL 21929 0 0
// DefineStreamItems ( false ) ;
20581: LD_INT 0
20583: PPUSH
20584: CALL 22393 0 1
// end ;
20588: END
// export function SOS_MapStart ( ) ; begin
20589: LD_INT 0
20591: PPUSH
// if streamModeActive then
20592: LD_EXP 52
20596: IFFALSE 20605
// DefineStreamItems ( true ) ;
20598: LD_INT 1
20600: PPUSH
20601: CALL 22393 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
20605: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
20607: PPUSH
20608: CALL_OW 559
// UpdateLuaVariables ( ) ;
20612: CALL 20629 0 0
// UpdateFactoryWaypoints ( ) ;
20616: CALL 35515 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20620: CALL 35767 0 0
// end ;
20624: LD_VAR 0 1
20628: RET
// function UpdateLuaVariables ( ) ; begin
20629: LD_INT 0
20631: PPUSH
// if globalGameSaveCounter then
20632: LD_EXP 51
20636: IFFALSE 20670
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20638: LD_ADDR_EXP 51
20642: PUSH
20643: LD_EXP 51
20647: PPUSH
20648: CALL 82663 0 1
20652: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20653: LD_STRING setGameSaveCounter(
20655: PUSH
20656: LD_EXP 51
20660: STR
20661: PUSH
20662: LD_STRING )
20664: STR
20665: PPUSH
20666: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20670: LD_STRING setGameDifficulty(
20672: PUSH
20673: LD_OWVAR 67
20677: STR
20678: PUSH
20679: LD_STRING )
20681: STR
20682: PPUSH
20683: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20687: LD_STRING displayDifficulty(
20689: PUSH
20690: LD_OWVAR 67
20694: STR
20695: PUSH
20696: LD_STRING )
20698: STR
20699: PPUSH
20700: CALL_OW 559
// end ;
20704: LD_VAR 0 1
20708: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20709: LD_INT 0
20711: PPUSH
// if p2 = stream_mode then
20712: LD_VAR 0 2
20716: PUSH
20717: LD_INT 100
20719: EQUAL
20720: IFFALSE 21723
// begin if not StreamModeActive then
20722: LD_EXP 52
20726: NOT
20727: IFFALSE 20737
// StreamModeActive := true ;
20729: LD_ADDR_EXP 52
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 0 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 0
20744: EQUAL
20745: IFFALSE 20751
// InitStreamMode ;
20747: CALL 21929 0 0
// if p3 = 1 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 1
20758: EQUAL
20759: IFFALSE 20769
// sRocket := true ;
20761: LD_ADDR_EXP 57
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 2 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 2
20776: EQUAL
20777: IFFALSE 20787
// sSpeed := true ;
20779: LD_ADDR_EXP 56
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 3 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 3
20794: EQUAL
20795: IFFALSE 20805
// sEngine := true ;
20797: LD_ADDR_EXP 58
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// if p3 = 4 then
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 4
20812: EQUAL
20813: IFFALSE 20823
// sSpec := true ;
20815: LD_ADDR_EXP 55
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// if p3 = 5 then
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 5
20830: EQUAL
20831: IFFALSE 20841
// sLevel := true ;
20833: LD_ADDR_EXP 59
20837: PUSH
20838: LD_INT 1
20840: ST_TO_ADDR
// if p3 = 6 then
20841: LD_VAR 0 3
20845: PUSH
20846: LD_INT 6
20848: EQUAL
20849: IFFALSE 20859
// sArmoury := true ;
20851: LD_ADDR_EXP 60
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// if p3 = 7 then
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 7
20866: EQUAL
20867: IFFALSE 20877
// sRadar := true ;
20869: LD_ADDR_EXP 61
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if p3 = 8 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_INT 8
20884: EQUAL
20885: IFFALSE 20895
// sBunker := true ;
20887: LD_ADDR_EXP 62
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// if p3 = 9 then
20895: LD_VAR 0 3
20899: PUSH
20900: LD_INT 9
20902: EQUAL
20903: IFFALSE 20913
// sHack := true ;
20905: LD_ADDR_EXP 63
20909: PUSH
20910: LD_INT 1
20912: ST_TO_ADDR
// if p3 = 10 then
20913: LD_VAR 0 3
20917: PUSH
20918: LD_INT 10
20920: EQUAL
20921: IFFALSE 20931
// sFire := true ;
20923: LD_ADDR_EXP 64
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// if p3 = 11 then
20931: LD_VAR 0 3
20935: PUSH
20936: LD_INT 11
20938: EQUAL
20939: IFFALSE 20949
// sRefresh := true ;
20941: LD_ADDR_EXP 65
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// if p3 = 12 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_INT 12
20956: EQUAL
20957: IFFALSE 20967
// sExp := true ;
20959: LD_ADDR_EXP 66
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
// if p3 = 13 then
20967: LD_VAR 0 3
20971: PUSH
20972: LD_INT 13
20974: EQUAL
20975: IFFALSE 20985
// sDepot := true ;
20977: LD_ADDR_EXP 67
20981: PUSH
20982: LD_INT 1
20984: ST_TO_ADDR
// if p3 = 14 then
20985: LD_VAR 0 3
20989: PUSH
20990: LD_INT 14
20992: EQUAL
20993: IFFALSE 21003
// sFlag := true ;
20995: LD_ADDR_EXP 68
20999: PUSH
21000: LD_INT 1
21002: ST_TO_ADDR
// if p3 = 15 then
21003: LD_VAR 0 3
21007: PUSH
21008: LD_INT 15
21010: EQUAL
21011: IFFALSE 21021
// sKamikadze := true ;
21013: LD_ADDR_EXP 76
21017: PUSH
21018: LD_INT 1
21020: ST_TO_ADDR
// if p3 = 16 then
21021: LD_VAR 0 3
21025: PUSH
21026: LD_INT 16
21028: EQUAL
21029: IFFALSE 21039
// sTroll := true ;
21031: LD_ADDR_EXP 77
21035: PUSH
21036: LD_INT 1
21038: ST_TO_ADDR
// if p3 = 17 then
21039: LD_VAR 0 3
21043: PUSH
21044: LD_INT 17
21046: EQUAL
21047: IFFALSE 21057
// sSlow := true ;
21049: LD_ADDR_EXP 78
21053: PUSH
21054: LD_INT 1
21056: ST_TO_ADDR
// if p3 = 18 then
21057: LD_VAR 0 3
21061: PUSH
21062: LD_INT 18
21064: EQUAL
21065: IFFALSE 21075
// sLack := true ;
21067: LD_ADDR_EXP 79
21071: PUSH
21072: LD_INT 1
21074: ST_TO_ADDR
// if p3 = 19 then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 19
21082: EQUAL
21083: IFFALSE 21093
// sTank := true ;
21085: LD_ADDR_EXP 81
21089: PUSH
21090: LD_INT 1
21092: ST_TO_ADDR
// if p3 = 20 then
21093: LD_VAR 0 3
21097: PUSH
21098: LD_INT 20
21100: EQUAL
21101: IFFALSE 21111
// sRemote := true ;
21103: LD_ADDR_EXP 82
21107: PUSH
21108: LD_INT 1
21110: ST_TO_ADDR
// if p3 = 21 then
21111: LD_VAR 0 3
21115: PUSH
21116: LD_INT 21
21118: EQUAL
21119: IFFALSE 21129
// sPowell := true ;
21121: LD_ADDR_EXP 83
21125: PUSH
21126: LD_INT 1
21128: ST_TO_ADDR
// if p3 = 22 then
21129: LD_VAR 0 3
21133: PUSH
21134: LD_INT 22
21136: EQUAL
21137: IFFALSE 21147
// sTeleport := true ;
21139: LD_ADDR_EXP 86
21143: PUSH
21144: LD_INT 1
21146: ST_TO_ADDR
// if p3 = 23 then
21147: LD_VAR 0 3
21151: PUSH
21152: LD_INT 23
21154: EQUAL
21155: IFFALSE 21165
// sOilTower := true ;
21157: LD_ADDR_EXP 88
21161: PUSH
21162: LD_INT 1
21164: ST_TO_ADDR
// if p3 = 24 then
21165: LD_VAR 0 3
21169: PUSH
21170: LD_INT 24
21172: EQUAL
21173: IFFALSE 21183
// sShovel := true ;
21175: LD_ADDR_EXP 89
21179: PUSH
21180: LD_INT 1
21182: ST_TO_ADDR
// if p3 = 25 then
21183: LD_VAR 0 3
21187: PUSH
21188: LD_INT 25
21190: EQUAL
21191: IFFALSE 21201
// sSheik := true ;
21193: LD_ADDR_EXP 90
21197: PUSH
21198: LD_INT 1
21200: ST_TO_ADDR
// if p3 = 26 then
21201: LD_VAR 0 3
21205: PUSH
21206: LD_INT 26
21208: EQUAL
21209: IFFALSE 21219
// sEarthquake := true ;
21211: LD_ADDR_EXP 92
21215: PUSH
21216: LD_INT 1
21218: ST_TO_ADDR
// if p3 = 27 then
21219: LD_VAR 0 3
21223: PUSH
21224: LD_INT 27
21226: EQUAL
21227: IFFALSE 21237
// sAI := true ;
21229: LD_ADDR_EXP 93
21233: PUSH
21234: LD_INT 1
21236: ST_TO_ADDR
// if p3 = 28 then
21237: LD_VAR 0 3
21241: PUSH
21242: LD_INT 28
21244: EQUAL
21245: IFFALSE 21255
// sCargo := true ;
21247: LD_ADDR_EXP 96
21251: PUSH
21252: LD_INT 1
21254: ST_TO_ADDR
// if p3 = 29 then
21255: LD_VAR 0 3
21259: PUSH
21260: LD_INT 29
21262: EQUAL
21263: IFFALSE 21273
// sDLaser := true ;
21265: LD_ADDR_EXP 97
21269: PUSH
21270: LD_INT 1
21272: ST_TO_ADDR
// if p3 = 30 then
21273: LD_VAR 0 3
21277: PUSH
21278: LD_INT 30
21280: EQUAL
21281: IFFALSE 21291
// sExchange := true ;
21283: LD_ADDR_EXP 98
21287: PUSH
21288: LD_INT 1
21290: ST_TO_ADDR
// if p3 = 31 then
21291: LD_VAR 0 3
21295: PUSH
21296: LD_INT 31
21298: EQUAL
21299: IFFALSE 21309
// sFac := true ;
21301: LD_ADDR_EXP 99
21305: PUSH
21306: LD_INT 1
21308: ST_TO_ADDR
// if p3 = 32 then
21309: LD_VAR 0 3
21313: PUSH
21314: LD_INT 32
21316: EQUAL
21317: IFFALSE 21327
// sPower := true ;
21319: LD_ADDR_EXP 100
21323: PUSH
21324: LD_INT 1
21326: ST_TO_ADDR
// if p3 = 33 then
21327: LD_VAR 0 3
21331: PUSH
21332: LD_INT 33
21334: EQUAL
21335: IFFALSE 21345
// sRandom := true ;
21337: LD_ADDR_EXP 101
21341: PUSH
21342: LD_INT 1
21344: ST_TO_ADDR
// if p3 = 34 then
21345: LD_VAR 0 3
21349: PUSH
21350: LD_INT 34
21352: EQUAL
21353: IFFALSE 21363
// sShield := true ;
21355: LD_ADDR_EXP 102
21359: PUSH
21360: LD_INT 1
21362: ST_TO_ADDR
// if p3 = 35 then
21363: LD_VAR 0 3
21367: PUSH
21368: LD_INT 35
21370: EQUAL
21371: IFFALSE 21381
// sTime := true ;
21373: LD_ADDR_EXP 103
21377: PUSH
21378: LD_INT 1
21380: ST_TO_ADDR
// if p3 = 36 then
21381: LD_VAR 0 3
21385: PUSH
21386: LD_INT 36
21388: EQUAL
21389: IFFALSE 21399
// sTools := true ;
21391: LD_ADDR_EXP 104
21395: PUSH
21396: LD_INT 1
21398: ST_TO_ADDR
// if p3 = 101 then
21399: LD_VAR 0 3
21403: PUSH
21404: LD_INT 101
21406: EQUAL
21407: IFFALSE 21417
// sSold := true ;
21409: LD_ADDR_EXP 69
21413: PUSH
21414: LD_INT 1
21416: ST_TO_ADDR
// if p3 = 102 then
21417: LD_VAR 0 3
21421: PUSH
21422: LD_INT 102
21424: EQUAL
21425: IFFALSE 21435
// sDiff := true ;
21427: LD_ADDR_EXP 70
21431: PUSH
21432: LD_INT 1
21434: ST_TO_ADDR
// if p3 = 103 then
21435: LD_VAR 0 3
21439: PUSH
21440: LD_INT 103
21442: EQUAL
21443: IFFALSE 21453
// sFog := true ;
21445: LD_ADDR_EXP 73
21449: PUSH
21450: LD_INT 1
21452: ST_TO_ADDR
// if p3 = 104 then
21453: LD_VAR 0 3
21457: PUSH
21458: LD_INT 104
21460: EQUAL
21461: IFFALSE 21471
// sReset := true ;
21463: LD_ADDR_EXP 74
21467: PUSH
21468: LD_INT 1
21470: ST_TO_ADDR
// if p3 = 105 then
21471: LD_VAR 0 3
21475: PUSH
21476: LD_INT 105
21478: EQUAL
21479: IFFALSE 21489
// sSun := true ;
21481: LD_ADDR_EXP 75
21485: PUSH
21486: LD_INT 1
21488: ST_TO_ADDR
// if p3 = 106 then
21489: LD_VAR 0 3
21493: PUSH
21494: LD_INT 106
21496: EQUAL
21497: IFFALSE 21507
// sTiger := true ;
21499: LD_ADDR_EXP 71
21503: PUSH
21504: LD_INT 1
21506: ST_TO_ADDR
// if p3 = 107 then
21507: LD_VAR 0 3
21511: PUSH
21512: LD_INT 107
21514: EQUAL
21515: IFFALSE 21525
// sBomb := true ;
21517: LD_ADDR_EXP 72
21521: PUSH
21522: LD_INT 1
21524: ST_TO_ADDR
// if p3 = 108 then
21525: LD_VAR 0 3
21529: PUSH
21530: LD_INT 108
21532: EQUAL
21533: IFFALSE 21543
// sWound := true ;
21535: LD_ADDR_EXP 80
21539: PUSH
21540: LD_INT 1
21542: ST_TO_ADDR
// if p3 = 109 then
21543: LD_VAR 0 3
21547: PUSH
21548: LD_INT 109
21550: EQUAL
21551: IFFALSE 21561
// sBetray := true ;
21553: LD_ADDR_EXP 84
21557: PUSH
21558: LD_INT 1
21560: ST_TO_ADDR
// if p3 = 110 then
21561: LD_VAR 0 3
21565: PUSH
21566: LD_INT 110
21568: EQUAL
21569: IFFALSE 21579
// sContamin := true ;
21571: LD_ADDR_EXP 85
21575: PUSH
21576: LD_INT 1
21578: ST_TO_ADDR
// if p3 = 111 then
21579: LD_VAR 0 3
21583: PUSH
21584: LD_INT 111
21586: EQUAL
21587: IFFALSE 21597
// sOil := true ;
21589: LD_ADDR_EXP 87
21593: PUSH
21594: LD_INT 1
21596: ST_TO_ADDR
// if p3 = 112 then
21597: LD_VAR 0 3
21601: PUSH
21602: LD_INT 112
21604: EQUAL
21605: IFFALSE 21615
// sStu := true ;
21607: LD_ADDR_EXP 91
21611: PUSH
21612: LD_INT 1
21614: ST_TO_ADDR
// if p3 = 113 then
21615: LD_VAR 0 3
21619: PUSH
21620: LD_INT 113
21622: EQUAL
21623: IFFALSE 21633
// sBazooka := true ;
21625: LD_ADDR_EXP 94
21629: PUSH
21630: LD_INT 1
21632: ST_TO_ADDR
// if p3 = 114 then
21633: LD_VAR 0 3
21637: PUSH
21638: LD_INT 114
21640: EQUAL
21641: IFFALSE 21651
// sMortar := true ;
21643: LD_ADDR_EXP 95
21647: PUSH
21648: LD_INT 1
21650: ST_TO_ADDR
// if p3 = 115 then
21651: LD_VAR 0 3
21655: PUSH
21656: LD_INT 115
21658: EQUAL
21659: IFFALSE 21669
// sRanger := true ;
21661: LD_ADDR_EXP 105
21665: PUSH
21666: LD_INT 1
21668: ST_TO_ADDR
// if p3 = 116 then
21669: LD_VAR 0 3
21673: PUSH
21674: LD_INT 116
21676: EQUAL
21677: IFFALSE 21687
// sComputer := true ;
21679: LD_ADDR_EXP 106
21683: PUSH
21684: LD_INT 1
21686: ST_TO_ADDR
// if p3 = 117 then
21687: LD_VAR 0 3
21691: PUSH
21692: LD_INT 117
21694: EQUAL
21695: IFFALSE 21705
// s30 := true ;
21697: LD_ADDR_EXP 107
21701: PUSH
21702: LD_INT 1
21704: ST_TO_ADDR
// if p3 = 118 then
21705: LD_VAR 0 3
21709: PUSH
21710: LD_INT 118
21712: EQUAL
21713: IFFALSE 21723
// s60 := true ;
21715: LD_ADDR_EXP 108
21719: PUSH
21720: LD_INT 1
21722: ST_TO_ADDR
// end ; if p2 = hack_mode then
21723: LD_VAR 0 2
21727: PUSH
21728: LD_INT 101
21730: EQUAL
21731: IFFALSE 21859
// begin case p3 of 1 :
21733: LD_VAR 0 3
21737: PUSH
21738: LD_INT 1
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21753
21746: POP
// hHackUnlimitedResources ; 2 :
21747: CALL 34122 0 0
21751: GO 21859
21753: LD_INT 2
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21768
21761: POP
// hHackSetLevel10 ; 3 :
21762: CALL 34255 0 0
21766: GO 21859
21768: LD_INT 3
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21783
21776: POP
// hHackSetLevel10YourUnits ; 4 :
21777: CALL 34340 0 0
21781: GO 21859
21783: LD_INT 4
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21798
21791: POP
// hHackInvincible ; 5 :
21792: CALL 34788 0 0
21796: GO 21859
21798: LD_INT 5
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 21813
21806: POP
// hHackInvisible ; 6 :
21807: CALL 34899 0 0
21811: GO 21859
21813: LD_INT 6
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 21828
21821: POP
// hHackChangeYourSide ; 7 :
21822: CALL 34956 0 0
21826: GO 21859
21828: LD_INT 7
21830: DOUBLE
21831: EQUAL
21832: IFTRUE 21836
21834: GO 21843
21836: POP
// hHackChangeUnitSide ; 8 :
21837: CALL 34998 0 0
21841: GO 21859
21843: LD_INT 8
21845: DOUBLE
21846: EQUAL
21847: IFTRUE 21851
21849: GO 21858
21851: POP
// hHackFog ; end ;
21852: CALL 35099 0 0
21856: GO 21859
21858: POP
// end ; if p2 = game_save_mode then
21859: LD_VAR 0 2
21863: PUSH
21864: LD_INT 102
21866: EQUAL
21867: IFFALSE 21924
// begin if p3 = 1 then
21869: LD_VAR 0 3
21873: PUSH
21874: LD_INT 1
21876: EQUAL
21877: IFFALSE 21889
// globalGameSaveCounter := p4 ;
21879: LD_ADDR_EXP 51
21883: PUSH
21884: LD_VAR 0 4
21888: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 2
21896: EQUAL
21897: IFFALSE 21905
21899: PUSH
21900: LD_EXP 51
21904: AND
21905: IFFALSE 21924
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21907: LD_STRING setGameSaveCounter(
21909: PUSH
21910: LD_EXP 51
21914: STR
21915: PUSH
21916: LD_STRING )
21918: STR
21919: PPUSH
21920: CALL_OW 559
// end ; end ;
21924: LD_VAR 0 7
21928: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21929: LD_INT 0
21931: PPUSH
// streamModeActive := false ;
21932: LD_ADDR_EXP 52
21936: PUSH
21937: LD_INT 0
21939: ST_TO_ADDR
// normalCounter := 36 ;
21940: LD_ADDR_EXP 53
21944: PUSH
21945: LD_INT 36
21947: ST_TO_ADDR
// hardcoreCounter := 18 ;
21948: LD_ADDR_EXP 54
21952: PUSH
21953: LD_INT 18
21955: ST_TO_ADDR
// sRocket := false ;
21956: LD_ADDR_EXP 57
21960: PUSH
21961: LD_INT 0
21963: ST_TO_ADDR
// sSpeed := false ;
21964: LD_ADDR_EXP 56
21968: PUSH
21969: LD_INT 0
21971: ST_TO_ADDR
// sEngine := false ;
21972: LD_ADDR_EXP 58
21976: PUSH
21977: LD_INT 0
21979: ST_TO_ADDR
// sSpec := false ;
21980: LD_ADDR_EXP 55
21984: PUSH
21985: LD_INT 0
21987: ST_TO_ADDR
// sLevel := false ;
21988: LD_ADDR_EXP 59
21992: PUSH
21993: LD_INT 0
21995: ST_TO_ADDR
// sArmoury := false ;
21996: LD_ADDR_EXP 60
22000: PUSH
22001: LD_INT 0
22003: ST_TO_ADDR
// sRadar := false ;
22004: LD_ADDR_EXP 61
22008: PUSH
22009: LD_INT 0
22011: ST_TO_ADDR
// sBunker := false ;
22012: LD_ADDR_EXP 62
22016: PUSH
22017: LD_INT 0
22019: ST_TO_ADDR
// sHack := false ;
22020: LD_ADDR_EXP 63
22024: PUSH
22025: LD_INT 0
22027: ST_TO_ADDR
// sFire := false ;
22028: LD_ADDR_EXP 64
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// sRefresh := false ;
22036: LD_ADDR_EXP 65
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
// sExp := false ;
22044: LD_ADDR_EXP 66
22048: PUSH
22049: LD_INT 0
22051: ST_TO_ADDR
// sDepot := false ;
22052: LD_ADDR_EXP 67
22056: PUSH
22057: LD_INT 0
22059: ST_TO_ADDR
// sFlag := false ;
22060: LD_ADDR_EXP 68
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// sKamikadze := false ;
22068: LD_ADDR_EXP 76
22072: PUSH
22073: LD_INT 0
22075: ST_TO_ADDR
// sTroll := false ;
22076: LD_ADDR_EXP 77
22080: PUSH
22081: LD_INT 0
22083: ST_TO_ADDR
// sSlow := false ;
22084: LD_ADDR_EXP 78
22088: PUSH
22089: LD_INT 0
22091: ST_TO_ADDR
// sLack := false ;
22092: LD_ADDR_EXP 79
22096: PUSH
22097: LD_INT 0
22099: ST_TO_ADDR
// sTank := false ;
22100: LD_ADDR_EXP 81
22104: PUSH
22105: LD_INT 0
22107: ST_TO_ADDR
// sRemote := false ;
22108: LD_ADDR_EXP 82
22112: PUSH
22113: LD_INT 0
22115: ST_TO_ADDR
// sPowell := false ;
22116: LD_ADDR_EXP 83
22120: PUSH
22121: LD_INT 0
22123: ST_TO_ADDR
// sTeleport := false ;
22124: LD_ADDR_EXP 86
22128: PUSH
22129: LD_INT 0
22131: ST_TO_ADDR
// sOilTower := false ;
22132: LD_ADDR_EXP 88
22136: PUSH
22137: LD_INT 0
22139: ST_TO_ADDR
// sShovel := false ;
22140: LD_ADDR_EXP 89
22144: PUSH
22145: LD_INT 0
22147: ST_TO_ADDR
// sSheik := false ;
22148: LD_ADDR_EXP 90
22152: PUSH
22153: LD_INT 0
22155: ST_TO_ADDR
// sEarthquake := false ;
22156: LD_ADDR_EXP 92
22160: PUSH
22161: LD_INT 0
22163: ST_TO_ADDR
// sAI := false ;
22164: LD_ADDR_EXP 93
22168: PUSH
22169: LD_INT 0
22171: ST_TO_ADDR
// sCargo := false ;
22172: LD_ADDR_EXP 96
22176: PUSH
22177: LD_INT 0
22179: ST_TO_ADDR
// sDLaser := false ;
22180: LD_ADDR_EXP 97
22184: PUSH
22185: LD_INT 0
22187: ST_TO_ADDR
// sExchange := false ;
22188: LD_ADDR_EXP 98
22192: PUSH
22193: LD_INT 0
22195: ST_TO_ADDR
// sFac := false ;
22196: LD_ADDR_EXP 99
22200: PUSH
22201: LD_INT 0
22203: ST_TO_ADDR
// sPower := false ;
22204: LD_ADDR_EXP 100
22208: PUSH
22209: LD_INT 0
22211: ST_TO_ADDR
// sRandom := false ;
22212: LD_ADDR_EXP 101
22216: PUSH
22217: LD_INT 0
22219: ST_TO_ADDR
// sShield := false ;
22220: LD_ADDR_EXP 102
22224: PUSH
22225: LD_INT 0
22227: ST_TO_ADDR
// sTime := false ;
22228: LD_ADDR_EXP 103
22232: PUSH
22233: LD_INT 0
22235: ST_TO_ADDR
// sTools := false ;
22236: LD_ADDR_EXP 104
22240: PUSH
22241: LD_INT 0
22243: ST_TO_ADDR
// sSold := false ;
22244: LD_ADDR_EXP 69
22248: PUSH
22249: LD_INT 0
22251: ST_TO_ADDR
// sDiff := false ;
22252: LD_ADDR_EXP 70
22256: PUSH
22257: LD_INT 0
22259: ST_TO_ADDR
// sFog := false ;
22260: LD_ADDR_EXP 73
22264: PUSH
22265: LD_INT 0
22267: ST_TO_ADDR
// sReset := false ;
22268: LD_ADDR_EXP 74
22272: PUSH
22273: LD_INT 0
22275: ST_TO_ADDR
// sSun := false ;
22276: LD_ADDR_EXP 75
22280: PUSH
22281: LD_INT 0
22283: ST_TO_ADDR
// sTiger := false ;
22284: LD_ADDR_EXP 71
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// sBomb := false ;
22292: LD_ADDR_EXP 72
22296: PUSH
22297: LD_INT 0
22299: ST_TO_ADDR
// sWound := false ;
22300: LD_ADDR_EXP 80
22304: PUSH
22305: LD_INT 0
22307: ST_TO_ADDR
// sBetray := false ;
22308: LD_ADDR_EXP 84
22312: PUSH
22313: LD_INT 0
22315: ST_TO_ADDR
// sContamin := false ;
22316: LD_ADDR_EXP 85
22320: PUSH
22321: LD_INT 0
22323: ST_TO_ADDR
// sOil := false ;
22324: LD_ADDR_EXP 87
22328: PUSH
22329: LD_INT 0
22331: ST_TO_ADDR
// sStu := false ;
22332: LD_ADDR_EXP 91
22336: PUSH
22337: LD_INT 0
22339: ST_TO_ADDR
// sBazooka := false ;
22340: LD_ADDR_EXP 94
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
// sMortar := false ;
22348: LD_ADDR_EXP 95
22352: PUSH
22353: LD_INT 0
22355: ST_TO_ADDR
// sRanger := false ;
22356: LD_ADDR_EXP 105
22360: PUSH
22361: LD_INT 0
22363: ST_TO_ADDR
// sComputer := false ;
22364: LD_ADDR_EXP 106
22368: PUSH
22369: LD_INT 0
22371: ST_TO_ADDR
// s30 := false ;
22372: LD_ADDR_EXP 107
22376: PUSH
22377: LD_INT 0
22379: ST_TO_ADDR
// s60 := false ;
22380: LD_ADDR_EXP 108
22384: PUSH
22385: LD_INT 0
22387: ST_TO_ADDR
// end ;
22388: LD_VAR 0 1
22392: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
// result := [ ] ;
22402: LD_ADDR_VAR 0 2
22406: PUSH
22407: EMPTY
22408: ST_TO_ADDR
// if campaign_id = 1 then
22409: LD_OWVAR 69
22413: PUSH
22414: LD_INT 1
22416: EQUAL
22417: IFFALSE 25583
// begin case mission_number of 1 :
22419: LD_OWVAR 70
22423: PUSH
22424: LD_INT 1
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22508
22432: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 4
22443: PUSH
22444: LD_INT 11
22446: PUSH
22447: LD_INT 12
22449: PUSH
22450: LD_INT 15
22452: PUSH
22453: LD_INT 16
22455: PUSH
22456: LD_INT 22
22458: PUSH
22459: LD_INT 23
22461: PUSH
22462: LD_INT 26
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 101
22478: PUSH
22479: LD_INT 102
22481: PUSH
22482: LD_INT 106
22484: PUSH
22485: LD_INT 116
22487: PUSH
22488: LD_INT 117
22490: PUSH
22491: LD_INT 118
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: ST_TO_ADDR
22506: GO 25581
22508: LD_INT 2
22510: DOUBLE
22511: EQUAL
22512: IFTRUE 22516
22514: GO 22600
22516: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22517: LD_ADDR_VAR 0 2
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 11
22530: PUSH
22531: LD_INT 12
22533: PUSH
22534: LD_INT 15
22536: PUSH
22537: LD_INT 16
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_INT 23
22545: PUSH
22546: LD_INT 26
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 101
22562: PUSH
22563: LD_INT 102
22565: PUSH
22566: LD_INT 105
22568: PUSH
22569: LD_INT 106
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 116
22577: PUSH
22578: LD_INT 117
22580: PUSH
22581: LD_INT 118
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: ST_TO_ADDR
22598: GO 25581
22600: LD_INT 3
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22696
22608: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22609: LD_ADDR_VAR 0 2
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 4
22619: PUSH
22620: LD_INT 5
22622: PUSH
22623: LD_INT 11
22625: PUSH
22626: LD_INT 12
22628: PUSH
22629: LD_INT 15
22631: PUSH
22632: LD_INT 16
22634: PUSH
22635: LD_INT 22
22637: PUSH
22638: LD_INT 26
22640: PUSH
22641: LD_INT 36
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 101
22658: PUSH
22659: LD_INT 102
22661: PUSH
22662: LD_INT 105
22664: PUSH
22665: LD_INT 106
22667: PUSH
22668: LD_INT 108
22670: PUSH
22671: LD_INT 116
22673: PUSH
22674: LD_INT 117
22676: PUSH
22677: LD_INT 118
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 25581
22696: LD_INT 4
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22800
22704: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 4
22715: PUSH
22716: LD_INT 5
22718: PUSH
22719: LD_INT 8
22721: PUSH
22722: LD_INT 11
22724: PUSH
22725: LD_INT 12
22727: PUSH
22728: LD_INT 15
22730: PUSH
22731: LD_INT 16
22733: PUSH
22734: LD_INT 22
22736: PUSH
22737: LD_INT 23
22739: PUSH
22740: LD_INT 26
22742: PUSH
22743: LD_INT 36
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 105
22768: PUSH
22769: LD_INT 106
22771: PUSH
22772: LD_INT 108
22774: PUSH
22775: LD_INT 116
22777: PUSH
22778: LD_INT 117
22780: PUSH
22781: LD_INT 118
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: ST_TO_ADDR
22798: GO 25581
22800: LD_INT 5
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22920
22808: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22809: LD_ADDR_VAR 0 2
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: LD_INT 5
22822: PUSH
22823: LD_INT 6
22825: PUSH
22826: LD_INT 8
22828: PUSH
22829: LD_INT 11
22831: PUSH
22832: LD_INT 12
22834: PUSH
22835: LD_INT 15
22837: PUSH
22838: LD_INT 16
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_INT 23
22846: PUSH
22847: LD_INT 25
22849: PUSH
22850: LD_INT 26
22852: PUSH
22853: LD_INT 36
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 101
22874: PUSH
22875: LD_INT 102
22877: PUSH
22878: LD_INT 105
22880: PUSH
22881: LD_INT 106
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 109
22889: PUSH
22890: LD_INT 112
22892: PUSH
22893: LD_INT 116
22895: PUSH
22896: LD_INT 117
22898: PUSH
22899: LD_INT 118
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: ST_TO_ADDR
22918: GO 25581
22920: LD_INT 6
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 23060
22928: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22929: LD_ADDR_VAR 0 2
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 4
22939: PUSH
22940: LD_INT 5
22942: PUSH
22943: LD_INT 6
22945: PUSH
22946: LD_INT 8
22948: PUSH
22949: LD_INT 11
22951: PUSH
22952: LD_INT 12
22954: PUSH
22955: LD_INT 15
22957: PUSH
22958: LD_INT 16
22960: PUSH
22961: LD_INT 20
22963: PUSH
22964: LD_INT 21
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: LD_INT 23
22972: PUSH
22973: LD_INT 25
22975: PUSH
22976: LD_INT 26
22978: PUSH
22979: LD_INT 30
22981: PUSH
22982: LD_INT 31
22984: PUSH
22985: LD_INT 32
22987: PUSH
22988: LD_INT 36
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 101
23014: PUSH
23015: LD_INT 102
23017: PUSH
23018: LD_INT 105
23020: PUSH
23021: LD_INT 106
23023: PUSH
23024: LD_INT 108
23026: PUSH
23027: LD_INT 109
23029: PUSH
23030: LD_INT 112
23032: PUSH
23033: LD_INT 116
23035: PUSH
23036: LD_INT 117
23038: PUSH
23039: LD_INT 118
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: ST_TO_ADDR
23058: GO 25581
23060: LD_INT 7
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23180
23068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23069: LD_ADDR_VAR 0 2
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: LD_INT 7
23085: PUSH
23086: LD_INT 11
23088: PUSH
23089: LD_INT 12
23091: PUSH
23092: LD_INT 15
23094: PUSH
23095: LD_INT 16
23097: PUSH
23098: LD_INT 20
23100: PUSH
23101: LD_INT 21
23103: PUSH
23104: LD_INT 22
23106: PUSH
23107: LD_INT 23
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 26
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 101
23134: PUSH
23135: LD_INT 102
23137: PUSH
23138: LD_INT 103
23140: PUSH
23141: LD_INT 105
23143: PUSH
23144: LD_INT 106
23146: PUSH
23147: LD_INT 108
23149: PUSH
23150: LD_INT 112
23152: PUSH
23153: LD_INT 116
23155: PUSH
23156: LD_INT 117
23158: PUSH
23159: LD_INT 118
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: ST_TO_ADDR
23178: GO 25581
23180: LD_INT 8
23182: DOUBLE
23183: EQUAL
23184: IFTRUE 23188
23186: GO 23328
23188: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23189: LD_ADDR_VAR 0 2
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 4
23199: PUSH
23200: LD_INT 5
23202: PUSH
23203: LD_INT 6
23205: PUSH
23206: LD_INT 7
23208: PUSH
23209: LD_INT 8
23211: PUSH
23212: LD_INT 11
23214: PUSH
23215: LD_INT 12
23217: PUSH
23218: LD_INT 15
23220: PUSH
23221: LD_INT 16
23223: PUSH
23224: LD_INT 20
23226: PUSH
23227: LD_INT 21
23229: PUSH
23230: LD_INT 22
23232: PUSH
23233: LD_INT 23
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 26
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 31
23247: PUSH
23248: LD_INT 32
23250: PUSH
23251: LD_INT 36
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 101
23278: PUSH
23279: LD_INT 102
23281: PUSH
23282: LD_INT 103
23284: PUSH
23285: LD_INT 105
23287: PUSH
23288: LD_INT 106
23290: PUSH
23291: LD_INT 108
23293: PUSH
23294: LD_INT 109
23296: PUSH
23297: LD_INT 112
23299: PUSH
23300: LD_INT 116
23302: PUSH
23303: LD_INT 117
23305: PUSH
23306: LD_INT 118
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 25581
23328: LD_INT 9
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23484
23336: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23337: LD_ADDR_VAR 0 2
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 4
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: LD_INT 6
23353: PUSH
23354: LD_INT 7
23356: PUSH
23357: LD_INT 8
23359: PUSH
23360: LD_INT 11
23362: PUSH
23363: LD_INT 12
23365: PUSH
23366: LD_INT 15
23368: PUSH
23369: LD_INT 16
23371: PUSH
23372: LD_INT 20
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 23
23383: PUSH
23384: LD_INT 25
23386: PUSH
23387: LD_INT 26
23389: PUSH
23390: LD_INT 28
23392: PUSH
23393: LD_INT 30
23395: PUSH
23396: LD_INT 31
23398: PUSH
23399: LD_INT 32
23401: PUSH
23402: LD_INT 36
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 101
23430: PUSH
23431: LD_INT 102
23433: PUSH
23434: LD_INT 103
23436: PUSH
23437: LD_INT 105
23439: PUSH
23440: LD_INT 106
23442: PUSH
23443: LD_INT 108
23445: PUSH
23446: LD_INT 109
23448: PUSH
23449: LD_INT 112
23451: PUSH
23452: LD_INT 114
23454: PUSH
23455: LD_INT 116
23457: PUSH
23458: LD_INT 117
23460: PUSH
23461: LD_INT 118
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: ST_TO_ADDR
23482: GO 25581
23484: LD_INT 10
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23688
23492: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 4
23503: PUSH
23504: LD_INT 5
23506: PUSH
23507: LD_INT 6
23509: PUSH
23510: LD_INT 7
23512: PUSH
23513: LD_INT 8
23515: PUSH
23516: LD_INT 9
23518: PUSH
23519: LD_INT 10
23521: PUSH
23522: LD_INT 11
23524: PUSH
23525: LD_INT 12
23527: PUSH
23528: LD_INT 13
23530: PUSH
23531: LD_INT 14
23533: PUSH
23534: LD_INT 15
23536: PUSH
23537: LD_INT 16
23539: PUSH
23540: LD_INT 17
23542: PUSH
23543: LD_INT 18
23545: PUSH
23546: LD_INT 19
23548: PUSH
23549: LD_INT 20
23551: PUSH
23552: LD_INT 21
23554: PUSH
23555: LD_INT 22
23557: PUSH
23558: LD_INT 23
23560: PUSH
23561: LD_INT 24
23563: PUSH
23564: LD_INT 25
23566: PUSH
23567: LD_INT 26
23569: PUSH
23570: LD_INT 28
23572: PUSH
23573: LD_INT 30
23575: PUSH
23576: LD_INT 31
23578: PUSH
23579: LD_INT 32
23581: PUSH
23582: LD_INT 36
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 104
23627: PUSH
23628: LD_INT 105
23630: PUSH
23631: LD_INT 106
23633: PUSH
23634: LD_INT 107
23636: PUSH
23637: LD_INT 108
23639: PUSH
23640: LD_INT 109
23642: PUSH
23643: LD_INT 110
23645: PUSH
23646: LD_INT 111
23648: PUSH
23649: LD_INT 112
23651: PUSH
23652: LD_INT 114
23654: PUSH
23655: LD_INT 116
23657: PUSH
23658: LD_INT 117
23660: PUSH
23661: LD_INT 118
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: ST_TO_ADDR
23686: GO 25581
23688: LD_INT 11
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23900
23696: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: LD_INT 4
23710: PUSH
23711: LD_INT 5
23713: PUSH
23714: LD_INT 6
23716: PUSH
23717: LD_INT 7
23719: PUSH
23720: LD_INT 8
23722: PUSH
23723: LD_INT 9
23725: PUSH
23726: LD_INT 10
23728: PUSH
23729: LD_INT 11
23731: PUSH
23732: LD_INT 12
23734: PUSH
23735: LD_INT 13
23737: PUSH
23738: LD_INT 14
23740: PUSH
23741: LD_INT 15
23743: PUSH
23744: LD_INT 16
23746: PUSH
23747: LD_INT 17
23749: PUSH
23750: LD_INT 18
23752: PUSH
23753: LD_INT 19
23755: PUSH
23756: LD_INT 20
23758: PUSH
23759: LD_INT 21
23761: PUSH
23762: LD_INT 22
23764: PUSH
23765: LD_INT 23
23767: PUSH
23768: LD_INT 24
23770: PUSH
23771: LD_INT 25
23773: PUSH
23774: LD_INT 26
23776: PUSH
23777: LD_INT 28
23779: PUSH
23780: LD_INT 30
23782: PUSH
23783: LD_INT 31
23785: PUSH
23786: LD_INT 32
23788: PUSH
23789: LD_INT 34
23791: PUSH
23792: LD_INT 36
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 101
23830: PUSH
23831: LD_INT 102
23833: PUSH
23834: LD_INT 103
23836: PUSH
23837: LD_INT 104
23839: PUSH
23840: LD_INT 105
23842: PUSH
23843: LD_INT 106
23845: PUSH
23846: LD_INT 107
23848: PUSH
23849: LD_INT 108
23851: PUSH
23852: LD_INT 109
23854: PUSH
23855: LD_INT 110
23857: PUSH
23858: LD_INT 111
23860: PUSH
23861: LD_INT 112
23863: PUSH
23864: LD_INT 114
23866: PUSH
23867: LD_INT 116
23869: PUSH
23870: LD_INT 117
23872: PUSH
23873: LD_INT 118
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: ST_TO_ADDR
23898: GO 25581
23900: LD_INT 12
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 24128
23908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: LD_INT 4
23925: PUSH
23926: LD_INT 5
23928: PUSH
23929: LD_INT 6
23931: PUSH
23932: LD_INT 7
23934: PUSH
23935: LD_INT 8
23937: PUSH
23938: LD_INT 9
23940: PUSH
23941: LD_INT 10
23943: PUSH
23944: LD_INT 11
23946: PUSH
23947: LD_INT 12
23949: PUSH
23950: LD_INT 13
23952: PUSH
23953: LD_INT 14
23955: PUSH
23956: LD_INT 15
23958: PUSH
23959: LD_INT 16
23961: PUSH
23962: LD_INT 17
23964: PUSH
23965: LD_INT 18
23967: PUSH
23968: LD_INT 19
23970: PUSH
23971: LD_INT 20
23973: PUSH
23974: LD_INT 21
23976: PUSH
23977: LD_INT 22
23979: PUSH
23980: LD_INT 23
23982: PUSH
23983: LD_INT 24
23985: PUSH
23986: LD_INT 25
23988: PUSH
23989: LD_INT 26
23991: PUSH
23992: LD_INT 27
23994: PUSH
23995: LD_INT 28
23997: PUSH
23998: LD_INT 30
24000: PUSH
24001: LD_INT 31
24003: PUSH
24004: LD_INT 32
24006: PUSH
24007: LD_INT 33
24009: PUSH
24010: LD_INT 34
24012: PUSH
24013: LD_INT 36
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 101
24054: PUSH
24055: LD_INT 102
24057: PUSH
24058: LD_INT 103
24060: PUSH
24061: LD_INT 104
24063: PUSH
24064: LD_INT 105
24066: PUSH
24067: LD_INT 106
24069: PUSH
24070: LD_INT 107
24072: PUSH
24073: LD_INT 108
24075: PUSH
24076: LD_INT 109
24078: PUSH
24079: LD_INT 110
24081: PUSH
24082: LD_INT 111
24084: PUSH
24085: LD_INT 112
24087: PUSH
24088: LD_INT 113
24090: PUSH
24091: LD_INT 114
24093: PUSH
24094: LD_INT 116
24096: PUSH
24097: LD_INT 117
24099: PUSH
24100: LD_INT 118
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: ST_TO_ADDR
24126: GO 25581
24128: LD_INT 13
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24344
24136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 3
24150: PUSH
24151: LD_INT 4
24153: PUSH
24154: LD_INT 5
24156: PUSH
24157: LD_INT 8
24159: PUSH
24160: LD_INT 9
24162: PUSH
24163: LD_INT 10
24165: PUSH
24166: LD_INT 11
24168: PUSH
24169: LD_INT 12
24171: PUSH
24172: LD_INT 14
24174: PUSH
24175: LD_INT 15
24177: PUSH
24178: LD_INT 16
24180: PUSH
24181: LD_INT 17
24183: PUSH
24184: LD_INT 18
24186: PUSH
24187: LD_INT 19
24189: PUSH
24190: LD_INT 20
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 22
24198: PUSH
24199: LD_INT 23
24201: PUSH
24202: LD_INT 24
24204: PUSH
24205: LD_INT 25
24207: PUSH
24208: LD_INT 26
24210: PUSH
24211: LD_INT 27
24213: PUSH
24214: LD_INT 28
24216: PUSH
24217: LD_INT 30
24219: PUSH
24220: LD_INT 31
24222: PUSH
24223: LD_INT 32
24225: PUSH
24226: LD_INT 33
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 101
24270: PUSH
24271: LD_INT 102
24273: PUSH
24274: LD_INT 103
24276: PUSH
24277: LD_INT 104
24279: PUSH
24280: LD_INT 105
24282: PUSH
24283: LD_INT 106
24285: PUSH
24286: LD_INT 107
24288: PUSH
24289: LD_INT 108
24291: PUSH
24292: LD_INT 109
24294: PUSH
24295: LD_INT 110
24297: PUSH
24298: LD_INT 111
24300: PUSH
24301: LD_INT 112
24303: PUSH
24304: LD_INT 113
24306: PUSH
24307: LD_INT 114
24309: PUSH
24310: LD_INT 116
24312: PUSH
24313: LD_INT 117
24315: PUSH
24316: LD_INT 118
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: ST_TO_ADDR
24342: GO 25581
24344: LD_INT 14
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24576
24352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24353: LD_ADDR_VAR 0 2
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: LD_INT 4
24369: PUSH
24370: LD_INT 5
24372: PUSH
24373: LD_INT 6
24375: PUSH
24376: LD_INT 7
24378: PUSH
24379: LD_INT 8
24381: PUSH
24382: LD_INT 9
24384: PUSH
24385: LD_INT 10
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 12
24393: PUSH
24394: LD_INT 13
24396: PUSH
24397: LD_INT 14
24399: PUSH
24400: LD_INT 15
24402: PUSH
24403: LD_INT 16
24405: PUSH
24406: LD_INT 17
24408: PUSH
24409: LD_INT 18
24411: PUSH
24412: LD_INT 19
24414: PUSH
24415: LD_INT 20
24417: PUSH
24418: LD_INT 21
24420: PUSH
24421: LD_INT 22
24423: PUSH
24424: LD_INT 23
24426: PUSH
24427: LD_INT 24
24429: PUSH
24430: LD_INT 25
24432: PUSH
24433: LD_INT 26
24435: PUSH
24436: LD_INT 27
24438: PUSH
24439: LD_INT 28
24441: PUSH
24442: LD_INT 29
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 31
24450: PUSH
24451: LD_INT 32
24453: PUSH
24454: LD_INT 33
24456: PUSH
24457: LD_INT 34
24459: PUSH
24460: LD_INT 36
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 101
24502: PUSH
24503: LD_INT 102
24505: PUSH
24506: LD_INT 103
24508: PUSH
24509: LD_INT 104
24511: PUSH
24512: LD_INT 105
24514: PUSH
24515: LD_INT 106
24517: PUSH
24518: LD_INT 107
24520: PUSH
24521: LD_INT 108
24523: PUSH
24524: LD_INT 109
24526: PUSH
24527: LD_INT 110
24529: PUSH
24530: LD_INT 111
24532: PUSH
24533: LD_INT 112
24535: PUSH
24536: LD_INT 113
24538: PUSH
24539: LD_INT 114
24541: PUSH
24542: LD_INT 116
24544: PUSH
24545: LD_INT 117
24547: PUSH
24548: LD_INT 118
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: ST_TO_ADDR
24574: GO 25581
24576: LD_INT 15
24578: DOUBLE
24579: EQUAL
24580: IFTRUE 24584
24582: GO 24808
24584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24585: LD_ADDR_VAR 0 2
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: LD_INT 4
24601: PUSH
24602: LD_INT 5
24604: PUSH
24605: LD_INT 6
24607: PUSH
24608: LD_INT 7
24610: PUSH
24611: LD_INT 8
24613: PUSH
24614: LD_INT 9
24616: PUSH
24617: LD_INT 10
24619: PUSH
24620: LD_INT 11
24622: PUSH
24623: LD_INT 12
24625: PUSH
24626: LD_INT 13
24628: PUSH
24629: LD_INT 14
24631: PUSH
24632: LD_INT 15
24634: PUSH
24635: LD_INT 16
24637: PUSH
24638: LD_INT 17
24640: PUSH
24641: LD_INT 18
24643: PUSH
24644: LD_INT 19
24646: PUSH
24647: LD_INT 20
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: LD_INT 24
24661: PUSH
24662: LD_INT 25
24664: PUSH
24665: LD_INT 26
24667: PUSH
24668: LD_INT 27
24670: PUSH
24671: LD_INT 28
24673: PUSH
24674: LD_INT 29
24676: PUSH
24677: LD_INT 30
24679: PUSH
24680: LD_INT 31
24682: PUSH
24683: LD_INT 32
24685: PUSH
24686: LD_INT 33
24688: PUSH
24689: LD_INT 34
24691: PUSH
24692: LD_INT 36
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 101
24734: PUSH
24735: LD_INT 102
24737: PUSH
24738: LD_INT 103
24740: PUSH
24741: LD_INT 104
24743: PUSH
24744: LD_INT 105
24746: PUSH
24747: LD_INT 106
24749: PUSH
24750: LD_INT 107
24752: PUSH
24753: LD_INT 108
24755: PUSH
24756: LD_INT 109
24758: PUSH
24759: LD_INT 110
24761: PUSH
24762: LD_INT 111
24764: PUSH
24765: LD_INT 112
24767: PUSH
24768: LD_INT 113
24770: PUSH
24771: LD_INT 114
24773: PUSH
24774: LD_INT 116
24776: PUSH
24777: LD_INT 117
24779: PUSH
24780: LD_INT 118
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: ST_TO_ADDR
24806: GO 25581
24808: LD_INT 16
24810: DOUBLE
24811: EQUAL
24812: IFTRUE 24816
24814: GO 24952
24816: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24817: LD_ADDR_VAR 0 2
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 4
24827: PUSH
24828: LD_INT 5
24830: PUSH
24831: LD_INT 7
24833: PUSH
24834: LD_INT 11
24836: PUSH
24837: LD_INT 12
24839: PUSH
24840: LD_INT 15
24842: PUSH
24843: LD_INT 16
24845: PUSH
24846: LD_INT 20
24848: PUSH
24849: LD_INT 21
24851: PUSH
24852: LD_INT 22
24854: PUSH
24855: LD_INT 23
24857: PUSH
24858: LD_INT 25
24860: PUSH
24861: LD_INT 26
24863: PUSH
24864: LD_INT 30
24866: PUSH
24867: LD_INT 31
24869: PUSH
24870: LD_INT 32
24872: PUSH
24873: LD_INT 33
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 101
24902: PUSH
24903: LD_INT 102
24905: PUSH
24906: LD_INT 103
24908: PUSH
24909: LD_INT 106
24911: PUSH
24912: LD_INT 108
24914: PUSH
24915: LD_INT 112
24917: PUSH
24918: LD_INT 113
24920: PUSH
24921: LD_INT 114
24923: PUSH
24924: LD_INT 116
24926: PUSH
24927: LD_INT 117
24929: PUSH
24930: LD_INT 118
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: ST_TO_ADDR
24950: GO 25581
24952: LD_INT 17
24954: DOUBLE
24955: EQUAL
24956: IFTRUE 24960
24958: GO 25184
24960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 4
24977: PUSH
24978: LD_INT 5
24980: PUSH
24981: LD_INT 6
24983: PUSH
24984: LD_INT 7
24986: PUSH
24987: LD_INT 8
24989: PUSH
24990: LD_INT 9
24992: PUSH
24993: LD_INT 10
24995: PUSH
24996: LD_INT 11
24998: PUSH
24999: LD_INT 12
25001: PUSH
25002: LD_INT 13
25004: PUSH
25005: LD_INT 14
25007: PUSH
25008: LD_INT 15
25010: PUSH
25011: LD_INT 16
25013: PUSH
25014: LD_INT 17
25016: PUSH
25017: LD_INT 18
25019: PUSH
25020: LD_INT 19
25022: PUSH
25023: LD_INT 20
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 22
25031: PUSH
25032: LD_INT 23
25034: PUSH
25035: LD_INT 24
25037: PUSH
25038: LD_INT 25
25040: PUSH
25041: LD_INT 26
25043: PUSH
25044: LD_INT 27
25046: PUSH
25047: LD_INT 28
25049: PUSH
25050: LD_INT 29
25052: PUSH
25053: LD_INT 30
25055: PUSH
25056: LD_INT 31
25058: PUSH
25059: LD_INT 32
25061: PUSH
25062: LD_INT 33
25064: PUSH
25065: LD_INT 34
25067: PUSH
25068: LD_INT 36
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 101
25110: PUSH
25111: LD_INT 102
25113: PUSH
25114: LD_INT 103
25116: PUSH
25117: LD_INT 104
25119: PUSH
25120: LD_INT 105
25122: PUSH
25123: LD_INT 106
25125: PUSH
25126: LD_INT 107
25128: PUSH
25129: LD_INT 108
25131: PUSH
25132: LD_INT 109
25134: PUSH
25135: LD_INT 110
25137: PUSH
25138: LD_INT 111
25140: PUSH
25141: LD_INT 112
25143: PUSH
25144: LD_INT 113
25146: PUSH
25147: LD_INT 114
25149: PUSH
25150: LD_INT 116
25152: PUSH
25153: LD_INT 117
25155: PUSH
25156: LD_INT 118
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: ST_TO_ADDR
25182: GO 25581
25184: LD_INT 18
25186: DOUBLE
25187: EQUAL
25188: IFTRUE 25192
25190: GO 25340
25192: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25193: LD_ADDR_VAR 0 2
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: LD_INT 4
25203: PUSH
25204: LD_INT 5
25206: PUSH
25207: LD_INT 7
25209: PUSH
25210: LD_INT 11
25212: PUSH
25213: LD_INT 12
25215: PUSH
25216: LD_INT 15
25218: PUSH
25219: LD_INT 16
25221: PUSH
25222: LD_INT 20
25224: PUSH
25225: LD_INT 21
25227: PUSH
25228: LD_INT 22
25230: PUSH
25231: LD_INT 23
25233: PUSH
25234: LD_INT 25
25236: PUSH
25237: LD_INT 26
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 31
25245: PUSH
25246: LD_INT 32
25248: PUSH
25249: LD_INT 33
25251: PUSH
25252: LD_INT 34
25254: PUSH
25255: LD_INT 35
25257: PUSH
25258: LD_INT 36
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 101
25286: PUSH
25287: LD_INT 102
25289: PUSH
25290: LD_INT 103
25292: PUSH
25293: LD_INT 106
25295: PUSH
25296: LD_INT 108
25298: PUSH
25299: LD_INT 112
25301: PUSH
25302: LD_INT 113
25304: PUSH
25305: LD_INT 114
25307: PUSH
25308: LD_INT 115
25310: PUSH
25311: LD_INT 116
25313: PUSH
25314: LD_INT 117
25316: PUSH
25317: LD_INT 118
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: ST_TO_ADDR
25338: GO 25581
25340: LD_INT 19
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25580
25348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25349: LD_ADDR_VAR 0 2
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: LD_INT 3
25362: PUSH
25363: LD_INT 4
25365: PUSH
25366: LD_INT 5
25368: PUSH
25369: LD_INT 6
25371: PUSH
25372: LD_INT 7
25374: PUSH
25375: LD_INT 8
25377: PUSH
25378: LD_INT 9
25380: PUSH
25381: LD_INT 10
25383: PUSH
25384: LD_INT 11
25386: PUSH
25387: LD_INT 12
25389: PUSH
25390: LD_INT 13
25392: PUSH
25393: LD_INT 14
25395: PUSH
25396: LD_INT 15
25398: PUSH
25399: LD_INT 16
25401: PUSH
25402: LD_INT 17
25404: PUSH
25405: LD_INT 18
25407: PUSH
25408: LD_INT 19
25410: PUSH
25411: LD_INT 20
25413: PUSH
25414: LD_INT 21
25416: PUSH
25417: LD_INT 22
25419: PUSH
25420: LD_INT 23
25422: PUSH
25423: LD_INT 24
25425: PUSH
25426: LD_INT 25
25428: PUSH
25429: LD_INT 26
25431: PUSH
25432: LD_INT 27
25434: PUSH
25435: LD_INT 28
25437: PUSH
25438: LD_INT 29
25440: PUSH
25441: LD_INT 30
25443: PUSH
25444: LD_INT 31
25446: PUSH
25447: LD_INT 32
25449: PUSH
25450: LD_INT 33
25452: PUSH
25453: LD_INT 34
25455: PUSH
25456: LD_INT 35
25458: PUSH
25459: LD_INT 36
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 101
25502: PUSH
25503: LD_INT 102
25505: PUSH
25506: LD_INT 103
25508: PUSH
25509: LD_INT 104
25511: PUSH
25512: LD_INT 105
25514: PUSH
25515: LD_INT 106
25517: PUSH
25518: LD_INT 107
25520: PUSH
25521: LD_INT 108
25523: PUSH
25524: LD_INT 109
25526: PUSH
25527: LD_INT 110
25529: PUSH
25530: LD_INT 111
25532: PUSH
25533: LD_INT 112
25535: PUSH
25536: LD_INT 113
25538: PUSH
25539: LD_INT 114
25541: PUSH
25542: LD_INT 115
25544: PUSH
25545: LD_INT 116
25547: PUSH
25548: LD_INT 117
25550: PUSH
25551: LD_INT 118
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 25581
25580: POP
// end else
25581: GO 25812
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25583: LD_ADDR_VAR 0 2
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 3
25596: PUSH
25597: LD_INT 4
25599: PUSH
25600: LD_INT 5
25602: PUSH
25603: LD_INT 6
25605: PUSH
25606: LD_INT 7
25608: PUSH
25609: LD_INT 8
25611: PUSH
25612: LD_INT 9
25614: PUSH
25615: LD_INT 10
25617: PUSH
25618: LD_INT 11
25620: PUSH
25621: LD_INT 12
25623: PUSH
25624: LD_INT 13
25626: PUSH
25627: LD_INT 14
25629: PUSH
25630: LD_INT 15
25632: PUSH
25633: LD_INT 16
25635: PUSH
25636: LD_INT 17
25638: PUSH
25639: LD_INT 18
25641: PUSH
25642: LD_INT 19
25644: PUSH
25645: LD_INT 20
25647: PUSH
25648: LD_INT 21
25650: PUSH
25651: LD_INT 22
25653: PUSH
25654: LD_INT 23
25656: PUSH
25657: LD_INT 24
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 26
25665: PUSH
25666: LD_INT 27
25668: PUSH
25669: LD_INT 28
25671: PUSH
25672: LD_INT 29
25674: PUSH
25675: LD_INT 30
25677: PUSH
25678: LD_INT 31
25680: PUSH
25681: LD_INT 32
25683: PUSH
25684: LD_INT 33
25686: PUSH
25687: LD_INT 34
25689: PUSH
25690: LD_INT 35
25692: PUSH
25693: LD_INT 36
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 101
25736: PUSH
25737: LD_INT 102
25739: PUSH
25740: LD_INT 103
25742: PUSH
25743: LD_INT 104
25745: PUSH
25746: LD_INT 105
25748: PUSH
25749: LD_INT 106
25751: PUSH
25752: LD_INT 107
25754: PUSH
25755: LD_INT 108
25757: PUSH
25758: LD_INT 109
25760: PUSH
25761: LD_INT 110
25763: PUSH
25764: LD_INT 111
25766: PUSH
25767: LD_INT 112
25769: PUSH
25770: LD_INT 113
25772: PUSH
25773: LD_INT 114
25775: PUSH
25776: LD_INT 115
25778: PUSH
25779: LD_INT 116
25781: PUSH
25782: LD_INT 117
25784: PUSH
25785: LD_INT 118
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: ST_TO_ADDR
// if result then
25812: LD_VAR 0 2
25816: IFFALSE 26602
// begin normal :=  ;
25818: LD_ADDR_VAR 0 5
25822: PUSH
25823: LD_STRING 
25825: ST_TO_ADDR
// hardcore :=  ;
25826: LD_ADDR_VAR 0 6
25830: PUSH
25831: LD_STRING 
25833: ST_TO_ADDR
// active :=  ;
25834: LD_ADDR_VAR 0 7
25838: PUSH
25839: LD_STRING 
25841: ST_TO_ADDR
// for i = 1 to normalCounter do
25842: LD_ADDR_VAR 0 8
25846: PUSH
25847: DOUBLE
25848: LD_INT 1
25850: DEC
25851: ST_TO_ADDR
25852: LD_EXP 53
25856: PUSH
25857: FOR_TO
25858: IFFALSE 25959
// begin tmp := 0 ;
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_STRING 0
25867: ST_TO_ADDR
// if result [ 1 ] then
25868: LD_VAR 0 2
25872: PUSH
25873: LD_INT 1
25875: ARRAY
25876: IFFALSE 25941
// if result [ 1 ] [ 1 ] = i then
25878: LD_VAR 0 2
25882: PUSH
25883: LD_INT 1
25885: ARRAY
25886: PUSH
25887: LD_INT 1
25889: ARRAY
25890: PUSH
25891: LD_VAR 0 8
25895: EQUAL
25896: IFFALSE 25941
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: LD_VAR 0 2
25915: PUSH
25916: LD_INT 1
25918: ARRAY
25919: PPUSH
25920: LD_INT 1
25922: PPUSH
25923: CALL_OW 3
25927: PPUSH
25928: CALL_OW 1
25932: ST_TO_ADDR
// tmp := 1 ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_STRING 1
25940: ST_TO_ADDR
// end ; normal := normal & tmp ;
25941: LD_ADDR_VAR 0 5
25945: PUSH
25946: LD_VAR 0 5
25950: PUSH
25951: LD_VAR 0 3
25955: STR
25956: ST_TO_ADDR
// end ;
25957: GO 25857
25959: POP
25960: POP
// for i = 1 to hardcoreCounter do
25961: LD_ADDR_VAR 0 8
25965: PUSH
25966: DOUBLE
25967: LD_INT 1
25969: DEC
25970: ST_TO_ADDR
25971: LD_EXP 54
25975: PUSH
25976: FOR_TO
25977: IFFALSE 26082
// begin tmp := 0 ;
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_STRING 0
25986: ST_TO_ADDR
// if result [ 2 ] then
25987: LD_VAR 0 2
25991: PUSH
25992: LD_INT 2
25994: ARRAY
25995: IFFALSE 26064
// if result [ 2 ] [ 1 ] = 100 + i then
25997: LD_VAR 0 2
26001: PUSH
26002: LD_INT 2
26004: ARRAY
26005: PUSH
26006: LD_INT 1
26008: ARRAY
26009: PUSH
26010: LD_INT 100
26012: PUSH
26013: LD_VAR 0 8
26017: PLUS
26018: EQUAL
26019: IFFALSE 26064
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26021: LD_ADDR_VAR 0 2
26025: PUSH
26026: LD_VAR 0 2
26030: PPUSH
26031: LD_INT 2
26033: PPUSH
26034: LD_VAR 0 2
26038: PUSH
26039: LD_INT 2
26041: ARRAY
26042: PPUSH
26043: LD_INT 1
26045: PPUSH
26046: CALL_OW 3
26050: PPUSH
26051: CALL_OW 1
26055: ST_TO_ADDR
// tmp := 1 ;
26056: LD_ADDR_VAR 0 3
26060: PUSH
26061: LD_STRING 1
26063: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26064: LD_ADDR_VAR 0 6
26068: PUSH
26069: LD_VAR 0 6
26073: PUSH
26074: LD_VAR 0 3
26078: STR
26079: ST_TO_ADDR
// end ;
26080: GO 25976
26082: POP
26083: POP
// if isGameLoad then
26084: LD_VAR 0 1
26088: IFFALSE 26563
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26090: LD_ADDR_VAR 0 4
26094: PUSH
26095: LD_EXP 57
26099: PUSH
26100: LD_EXP 56
26104: PUSH
26105: LD_EXP 58
26109: PUSH
26110: LD_EXP 55
26114: PUSH
26115: LD_EXP 59
26119: PUSH
26120: LD_EXP 60
26124: PUSH
26125: LD_EXP 61
26129: PUSH
26130: LD_EXP 62
26134: PUSH
26135: LD_EXP 63
26139: PUSH
26140: LD_EXP 64
26144: PUSH
26145: LD_EXP 65
26149: PUSH
26150: LD_EXP 66
26154: PUSH
26155: LD_EXP 67
26159: PUSH
26160: LD_EXP 68
26164: PUSH
26165: LD_EXP 76
26169: PUSH
26170: LD_EXP 77
26174: PUSH
26175: LD_EXP 78
26179: PUSH
26180: LD_EXP 79
26184: PUSH
26185: LD_EXP 81
26189: PUSH
26190: LD_EXP 82
26194: PUSH
26195: LD_EXP 83
26199: PUSH
26200: LD_EXP 86
26204: PUSH
26205: LD_EXP 88
26209: PUSH
26210: LD_EXP 89
26214: PUSH
26215: LD_EXP 90
26219: PUSH
26220: LD_EXP 92
26224: PUSH
26225: LD_EXP 93
26229: PUSH
26230: LD_EXP 96
26234: PUSH
26235: LD_EXP 97
26239: PUSH
26240: LD_EXP 98
26244: PUSH
26245: LD_EXP 99
26249: PUSH
26250: LD_EXP 100
26254: PUSH
26255: LD_EXP 101
26259: PUSH
26260: LD_EXP 102
26264: PUSH
26265: LD_EXP 103
26269: PUSH
26270: LD_EXP 104
26274: PUSH
26275: LD_EXP 69
26279: PUSH
26280: LD_EXP 70
26284: PUSH
26285: LD_EXP 73
26289: PUSH
26290: LD_EXP 74
26294: PUSH
26295: LD_EXP 75
26299: PUSH
26300: LD_EXP 71
26304: PUSH
26305: LD_EXP 72
26309: PUSH
26310: LD_EXP 80
26314: PUSH
26315: LD_EXP 84
26319: PUSH
26320: LD_EXP 85
26324: PUSH
26325: LD_EXP 87
26329: PUSH
26330: LD_EXP 91
26334: PUSH
26335: LD_EXP 94
26339: PUSH
26340: LD_EXP 95
26344: PUSH
26345: LD_EXP 105
26349: PUSH
26350: LD_EXP 106
26354: PUSH
26355: LD_EXP 107
26359: PUSH
26360: LD_EXP 108
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// tmp :=  ;
26421: LD_ADDR_VAR 0 3
26425: PUSH
26426: LD_STRING 
26428: ST_TO_ADDR
// for i = 1 to normalCounter do
26429: LD_ADDR_VAR 0 8
26433: PUSH
26434: DOUBLE
26435: LD_INT 1
26437: DEC
26438: ST_TO_ADDR
26439: LD_EXP 53
26443: PUSH
26444: FOR_TO
26445: IFFALSE 26481
// begin if flags [ i ] then
26447: LD_VAR 0 4
26451: PUSH
26452: LD_VAR 0 8
26456: ARRAY
26457: IFFALSE 26479
// tmp := tmp & i & ; ;
26459: LD_ADDR_VAR 0 3
26463: PUSH
26464: LD_VAR 0 3
26468: PUSH
26469: LD_VAR 0 8
26473: STR
26474: PUSH
26475: LD_STRING ;
26477: STR
26478: ST_TO_ADDR
// end ;
26479: GO 26444
26481: POP
26482: POP
// for i = 1 to hardcoreCounter do
26483: LD_ADDR_VAR 0 8
26487: PUSH
26488: DOUBLE
26489: LD_INT 1
26491: DEC
26492: ST_TO_ADDR
26493: LD_EXP 54
26497: PUSH
26498: FOR_TO
26499: IFFALSE 26545
// begin if flags [ normalCounter + i ] then
26501: LD_VAR 0 4
26505: PUSH
26506: LD_EXP 53
26510: PUSH
26511: LD_VAR 0 8
26515: PLUS
26516: ARRAY
26517: IFFALSE 26543
// tmp := tmp & ( 100 + i ) & ; ;
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_VAR 0 3
26528: PUSH
26529: LD_INT 100
26531: PUSH
26532: LD_VAR 0 8
26536: PLUS
26537: STR
26538: PUSH
26539: LD_STRING ;
26541: STR
26542: ST_TO_ADDR
// end ;
26543: GO 26498
26545: POP
26546: POP
// if tmp then
26547: LD_VAR 0 3
26551: IFFALSE 26563
// active := tmp ;
26553: LD_ADDR_VAR 0 7
26557: PUSH
26558: LD_VAR 0 3
26562: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26563: LD_STRING getStreamItemsFromMission("
26565: PUSH
26566: LD_VAR 0 5
26570: STR
26571: PUSH
26572: LD_STRING ","
26574: STR
26575: PUSH
26576: LD_VAR 0 6
26580: STR
26581: PUSH
26582: LD_STRING ","
26584: STR
26585: PUSH
26586: LD_VAR 0 7
26590: STR
26591: PUSH
26592: LD_STRING ")
26594: STR
26595: PPUSH
26596: CALL_OW 559
// end else
26600: GO 26609
// ToLua ( getStreamItemsFromMission("","","") ) ;
26602: LD_STRING getStreamItemsFromMission("","","")
26604: PPUSH
26605: CALL_OW 559
// end ;
26609: LD_VAR 0 2
26613: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26614: LD_EXP 52
26618: IFFALSE 26626
26620: PUSH
26621: LD_EXP 57
26625: AND
26626: IFFALSE 26750
26628: GO 26630
26630: DISABLE
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
// begin enable ;
26635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26636: LD_ADDR_VAR 0 2
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 34
26658: PUSH
26659: LD_INT 7
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 34
26668: PUSH
26669: LD_INT 45
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 34
26678: PUSH
26679: LD_INT 28
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 34
26688: PUSH
26689: LD_INT 47
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 69
26711: ST_TO_ADDR
// if not tmp then
26712: LD_VAR 0 2
26716: NOT
26717: IFFALSE 26721
// exit ;
26719: GO 26750
// for i in tmp do
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: LD_VAR 0 2
26730: PUSH
26731: FOR_IN
26732: IFFALSE 26748
// begin SetLives ( i , 0 ) ;
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_INT 0
26741: PPUSH
26742: CALL_OW 234
// end ;
26746: GO 26731
26748: POP
26749: POP
// end ;
26750: PPOPN 2
26752: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26753: LD_EXP 52
26757: IFFALSE 26765
26759: PUSH
26760: LD_EXP 58
26764: AND
26765: IFFALSE 26849
26767: GO 26769
26769: DISABLE
26770: LD_INT 0
26772: PPUSH
26773: PPUSH
// begin enable ;
26774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26775: LD_ADDR_VAR 0 2
26779: PUSH
26780: LD_INT 22
26782: PUSH
26783: LD_OWVAR 2
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 32
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PPUSH
26806: CALL_OW 69
26810: ST_TO_ADDR
// if not tmp then
26811: LD_VAR 0 2
26815: NOT
26816: IFFALSE 26820
// exit ;
26818: GO 26849
// for i in tmp do
26820: LD_ADDR_VAR 0 1
26824: PUSH
26825: LD_VAR 0 2
26829: PUSH
26830: FOR_IN
26831: IFFALSE 26847
// begin SetLives ( i , 0 ) ;
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_INT 0
26840: PPUSH
26841: CALL_OW 234
// end ;
26845: GO 26830
26847: POP
26848: POP
// end ;
26849: PPOPN 2
26851: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26852: LD_EXP 52
26856: IFFALSE 26864
26858: PUSH
26859: LD_EXP 55
26863: AND
26864: IFFALSE 26957
26866: GO 26868
26868: DISABLE
26869: LD_INT 0
26871: PPUSH
// begin enable ;
26872: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26873: LD_ADDR_VAR 0 1
26877: PUSH
26878: LD_INT 22
26880: PUSH
26881: LD_OWVAR 2
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 2
26892: PUSH
26893: LD_INT 25
26895: PUSH
26896: LD_INT 5
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 25
26905: PUSH
26906: LD_INT 9
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 25
26915: PUSH
26916: LD_INT 8
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PPUSH
26933: CALL_OW 69
26937: PUSH
26938: FOR_IN
26939: IFFALSE 26955
// begin SetClass ( i , 1 ) ;
26941: LD_VAR 0 1
26945: PPUSH
26946: LD_INT 1
26948: PPUSH
26949: CALL_OW 336
// end ;
26953: GO 26938
26955: POP
26956: POP
// end ;
26957: PPOPN 1
26959: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26960: LD_EXP 52
26964: IFFALSE 26972
26966: PUSH
26967: LD_EXP 56
26971: AND
26972: IFFALSE 26984
26974: PUSH
26975: LD_OWVAR 65
26979: PUSH
26980: LD_INT 7
26982: LESS
26983: AND
26984: IFFALSE 26998
26986: GO 26988
26988: DISABLE
// begin enable ;
26989: ENABLE
// game_speed := 7 ;
26990: LD_ADDR_OWVAR 65
26994: PUSH
26995: LD_INT 7
26997: ST_TO_ADDR
// end ;
26998: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26999: LD_EXP 52
27003: IFFALSE 27011
27005: PUSH
27006: LD_EXP 59
27010: AND
27011: IFFALSE 27213
27013: GO 27015
27015: DISABLE
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
27020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27021: LD_ADDR_VAR 0 3
27025: PUSH
27026: LD_INT 81
27028: PUSH
27029: LD_OWVAR 2
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 21
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PPUSH
27052: CALL_OW 69
27056: ST_TO_ADDR
// if not tmp then
27057: LD_VAR 0 3
27061: NOT
27062: IFFALSE 27066
// exit ;
27064: GO 27213
// if tmp > 5 then
27066: LD_VAR 0 3
27070: PUSH
27071: LD_INT 5
27073: GREATER
27074: IFFALSE 27086
// k := 5 else
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_INT 5
27083: ST_TO_ADDR
27084: GO 27096
// k := tmp ;
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 3
27095: ST_TO_ADDR
// for i := 1 to k do
27096: LD_ADDR_VAR 0 1
27100: PUSH
27101: DOUBLE
27102: LD_INT 1
27104: DEC
27105: ST_TO_ADDR
27106: LD_VAR 0 2
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27211
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27114: LD_VAR 0 3
27118: PUSH
27119: LD_VAR 0 1
27123: ARRAY
27124: PPUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 4
27132: MOD
27133: PUSH
27134: LD_INT 1
27136: PLUS
27137: PPUSH
27138: CALL_OW 259
27142: PUSH
27143: LD_INT 10
27145: LESS
27146: IFFALSE 27209
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27148: LD_VAR 0 3
27152: PUSH
27153: LD_VAR 0 1
27157: ARRAY
27158: PPUSH
27159: LD_VAR 0 1
27163: PUSH
27164: LD_INT 4
27166: MOD
27167: PUSH
27168: LD_INT 1
27170: PLUS
27171: PPUSH
27172: LD_VAR 0 3
27176: PUSH
27177: LD_VAR 0 1
27181: ARRAY
27182: PPUSH
27183: LD_VAR 0 1
27187: PUSH
27188: LD_INT 4
27190: MOD
27191: PUSH
27192: LD_INT 1
27194: PLUS
27195: PPUSH
27196: CALL_OW 259
27200: PUSH
27201: LD_INT 1
27203: PLUS
27204: PPUSH
27205: CALL_OW 237
27209: GO 27111
27211: POP
27212: POP
// end ;
27213: PPOPN 3
27215: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27216: LD_EXP 52
27220: IFFALSE 27228
27222: PUSH
27223: LD_EXP 60
27227: AND
27228: IFFALSE 27248
27230: GO 27232
27232: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27233: LD_INT 4
27235: PPUSH
27236: LD_OWVAR 2
27240: PPUSH
27241: LD_INT 0
27243: PPUSH
27244: CALL_OW 324
27248: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27249: LD_EXP 52
27253: IFFALSE 27261
27255: PUSH
27256: LD_EXP 89
27260: AND
27261: IFFALSE 27281
27263: GO 27265
27265: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27266: LD_INT 19
27268: PPUSH
27269: LD_OWVAR 2
27273: PPUSH
27274: LD_INT 0
27276: PPUSH
27277: CALL_OW 324
27281: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27282: LD_EXP 52
27286: IFFALSE 27294
27288: PUSH
27289: LD_EXP 61
27293: AND
27294: IFFALSE 27396
27296: GO 27298
27298: DISABLE
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
// begin enable ;
27303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27304: LD_ADDR_VAR 0 2
27308: PUSH
27309: LD_INT 22
27311: PUSH
27312: LD_OWVAR 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 34
27326: PUSH
27327: LD_INT 11
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 34
27336: PUSH
27337: LD_INT 30
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PPUSH
27353: CALL_OW 69
27357: ST_TO_ADDR
// if not tmp then
27358: LD_VAR 0 2
27362: NOT
27363: IFFALSE 27367
// exit ;
27365: GO 27396
// for i in tmp do
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_VAR 0 2
27376: PUSH
27377: FOR_IN
27378: IFFALSE 27394
// begin SetLives ( i , 0 ) ;
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_INT 0
27387: PPUSH
27388: CALL_OW 234
// end ;
27392: GO 27377
27394: POP
27395: POP
// end ;
27396: PPOPN 2
27398: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27399: LD_EXP 52
27403: IFFALSE 27411
27405: PUSH
27406: LD_EXP 62
27410: AND
27411: IFFALSE 27431
27413: GO 27415
27415: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27416: LD_INT 32
27418: PPUSH
27419: LD_OWVAR 2
27423: PPUSH
27424: LD_INT 0
27426: PPUSH
27427: CALL_OW 324
27431: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27432: LD_EXP 52
27436: IFFALSE 27444
27438: PUSH
27439: LD_EXP 63
27443: AND
27444: IFFALSE 27627
27446: GO 27448
27448: DISABLE
27449: LD_INT 0
27451: PPUSH
27452: PPUSH
27453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: LD_INT 22
27461: PUSH
27462: LD_OWVAR 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 33
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 69
27489: ST_TO_ADDR
// if not tmp then
27490: LD_VAR 0 2
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 27627
// side := 0 ;
27499: LD_ADDR_VAR 0 3
27503: PUSH
27504: LD_INT 0
27506: ST_TO_ADDR
// for i := 1 to 8 do
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: DOUBLE
27513: LD_INT 1
27515: DEC
27516: ST_TO_ADDR
27517: LD_INT 8
27519: PUSH
27520: FOR_TO
27521: IFFALSE 27571
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27523: LD_OWVAR 2
27527: PUSH
27528: LD_VAR 0 1
27532: NONEQUAL
27533: IFFALSE 27555
27535: PUSH
27536: LD_OWVAR 2
27540: PPUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 81
27550: PUSH
27551: LD_INT 2
27553: EQUAL
27554: AND
27555: IFFALSE 27569
// begin side := i ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 1
27566: ST_TO_ADDR
// break ;
27567: GO 27571
// end ;
27569: GO 27520
27571: POP
27572: POP
// if not side then
27573: LD_VAR 0 3
27577: NOT
27578: IFFALSE 27582
// exit ;
27580: GO 27627
// for i := 1 to tmp do
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: DOUBLE
27588: LD_INT 1
27590: DEC
27591: ST_TO_ADDR
27592: LD_VAR 0 2
27596: PUSH
27597: FOR_TO
27598: IFFALSE 27625
// if Prob ( 60 ) then
27600: LD_INT 60
27602: PPUSH
27603: CALL_OW 13
27607: IFFALSE 27623
// SetSide ( i , side ) ;
27609: LD_VAR 0 1
27613: PPUSH
27614: LD_VAR 0 3
27618: PPUSH
27619: CALL_OW 235
27623: GO 27597
27625: POP
27626: POP
// end ;
27627: PPOPN 3
27629: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27630: LD_EXP 52
27634: IFFALSE 27642
27636: PUSH
27637: LD_EXP 65
27641: AND
27642: IFFALSE 27761
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_OWVAR 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 23
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: PPUSH
27699: CALL_OW 69
27703: PUSH
27704: FOR_IN
27705: IFFALSE 27759
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27707: LD_VAR 0 1
27711: PPUSH
27712: CALL_OW 257
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: LD_INT 4
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: IN
27735: IFFALSE 27757
// SetClass ( un , rand ( 1 , 4 ) ) ;
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_INT 1
27744: PPUSH
27745: LD_INT 4
27747: PPUSH
27748: CALL_OW 12
27752: PPUSH
27753: CALL_OW 336
27757: GO 27704
27759: POP
27760: POP
// end ;
27761: PPOPN 1
27763: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27764: LD_EXP 52
27768: IFFALSE 27776
27770: PUSH
27771: LD_EXP 64
27775: AND
27776: IFFALSE 27855
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27784: LD_ADDR_VAR 0 1
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_OWVAR 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 69
27819: ST_TO_ADDR
// if not tmp then
27820: LD_VAR 0 1
27824: NOT
27825: IFFALSE 27829
// exit ;
27827: GO 27855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27829: LD_VAR 0 1
27833: PUSH
27834: LD_INT 1
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 12
27846: ARRAY
27847: PPUSH
27848: LD_INT 100
27850: PPUSH
27851: CALL_OW 234
// end ;
27855: PPOPN 1
27857: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27858: LD_EXP 52
27862: IFFALSE 27870
27864: PUSH
27865: LD_EXP 66
27869: AND
27870: IFFALSE 27968
27872: GO 27874
27874: DISABLE
27875: LD_INT 0
27877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27878: LD_ADDR_VAR 0 1
27882: PUSH
27883: LD_INT 22
27885: PUSH
27886: LD_OWVAR 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 21
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 1
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27968
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27923: LD_VAR 0 1
27927: PUSH
27928: LD_INT 1
27930: PPUSH
27931: LD_VAR 0 1
27935: PPUSH
27936: CALL_OW 12
27940: ARRAY
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 4
27947: PPUSH
27948: CALL_OW 12
27952: PPUSH
27953: LD_INT 3000
27955: PPUSH
27956: LD_INT 9000
27958: PPUSH
27959: CALL_OW 12
27963: PPUSH
27964: CALL_OW 492
// end ;
27968: PPOPN 1
27970: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27971: LD_EXP 52
27975: IFFALSE 27983
27977: PUSH
27978: LD_EXP 67
27982: AND
27983: IFFALSE 28003
27985: GO 27987
27987: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27988: LD_INT 1
27990: PPUSH
27991: LD_OWVAR 2
27995: PPUSH
27996: LD_INT 0
27998: PPUSH
27999: CALL_OW 324
28003: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28004: LD_EXP 52
28008: IFFALSE 28016
28010: PUSH
28011: LD_EXP 68
28015: AND
28016: IFFALSE 28099
28018: GO 28020
28020: DISABLE
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28025: LD_ADDR_VAR 0 2
28029: PUSH
28030: LD_INT 22
28032: PUSH
28033: LD_OWVAR 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 21
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 69
28060: ST_TO_ADDR
// if not tmp then
28061: LD_VAR 0 2
28065: NOT
28066: IFFALSE 28070
// exit ;
28068: GO 28099
// for i in tmp do
28070: LD_ADDR_VAR 0 1
28074: PUSH
28075: LD_VAR 0 2
28079: PUSH
28080: FOR_IN
28081: IFFALSE 28097
// SetBLevel ( i , 10 ) ;
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 10
28090: PPUSH
28091: CALL_OW 241
28095: GO 28080
28097: POP
28098: POP
// end ;
28099: PPOPN 2
28101: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28102: LD_EXP 52
28106: IFFALSE 28114
28108: PUSH
28109: LD_EXP 69
28113: AND
28114: IFFALSE 28225
28116: GO 28118
28118: DISABLE
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 25
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 69
28159: ST_TO_ADDR
// if not tmp then
28160: LD_VAR 0 3
28164: NOT
28165: IFFALSE 28169
// exit ;
28167: GO 28225
// un := tmp [ rand ( 1 , tmp ) ] ;
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: LD_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL_OW 12
28191: ARRAY
28192: ST_TO_ADDR
// if Crawls ( un ) then
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 318
28202: IFFALSE 28213
// ComWalk ( un ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_INT 5
28220: PPUSH
28221: CALL_OW 336
// end ;
28225: PPOPN 3
28227: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28228: LD_EXP 52
28232: IFFALSE 28240
28234: PUSH
28235: LD_EXP 70
28239: AND
28240: IFFALSE 28252
28242: PUSH
28243: LD_OWVAR 67
28247: PUSH
28248: LD_INT 4
28250: LESS
28251: AND
28252: IFFALSE 28271
28254: GO 28256
28256: DISABLE
// begin Difficulty := Difficulty + 1 ;
28257: LD_ADDR_OWVAR 67
28261: PUSH
28262: LD_OWVAR 67
28266: PUSH
28267: LD_INT 1
28269: PLUS
28270: ST_TO_ADDR
// end ;
28271: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28272: LD_EXP 52
28276: IFFALSE 28284
28278: PUSH
28279: LD_EXP 71
28283: AND
28284: IFFALSE 28387
28286: GO 28288
28288: DISABLE
28289: LD_INT 0
28291: PPUSH
// begin for i := 1 to 5 do
28292: LD_ADDR_VAR 0 1
28296: PUSH
28297: DOUBLE
28298: LD_INT 1
28300: DEC
28301: ST_TO_ADDR
28302: LD_INT 5
28304: PUSH
28305: FOR_TO
28306: IFFALSE 28385
// begin uc_nation := nation_nature ;
28308: LD_ADDR_OWVAR 21
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// uc_side := 0 ;
28316: LD_ADDR_OWVAR 20
28320: PUSH
28321: LD_INT 0
28323: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28324: LD_ADDR_OWVAR 29
28328: PUSH
28329: LD_INT 12
28331: PUSH
28332: LD_INT 12
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: ST_TO_ADDR
// hc_agressivity := 20 ;
28339: LD_ADDR_OWVAR 35
28343: PUSH
28344: LD_INT 20
28346: ST_TO_ADDR
// hc_class := class_tiger ;
28347: LD_ADDR_OWVAR 28
28351: PUSH
28352: LD_INT 14
28354: ST_TO_ADDR
// hc_gallery :=  ;
28355: LD_ADDR_OWVAR 33
28359: PUSH
28360: LD_STRING 
28362: ST_TO_ADDR
// hc_name :=  ;
28363: LD_ADDR_OWVAR 26
28367: PUSH
28368: LD_STRING 
28370: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28371: CALL_OW 44
28375: PPUSH
28376: LD_INT 0
28378: PPUSH
28379: CALL_OW 51
// end ;
28383: GO 28305
28385: POP
28386: POP
// end ;
28387: PPOPN 1
28389: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28390: LD_EXP 52
28394: IFFALSE 28402
28396: PUSH
28397: LD_EXP 72
28401: AND
28402: IFFALSE 28411
28404: GO 28406
28406: DISABLE
// StreamSibBomb ;
28407: CALL 28412 0 0
28411: END
// export function StreamSibBomb ; var i , x , y ; begin
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
28416: PPUSH
28417: PPUSH
// result := false ;
28418: LD_ADDR_VAR 0 1
28422: PUSH
28423: LD_INT 0
28425: ST_TO_ADDR
// for i := 1 to 16 do
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: DOUBLE
28432: LD_INT 1
28434: DEC
28435: ST_TO_ADDR
28436: LD_INT 16
28438: PUSH
28439: FOR_TO
28440: IFFALSE 28639
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_INT 10
28449: PUSH
28450: LD_INT 20
28452: PUSH
28453: LD_INT 30
28455: PUSH
28456: LD_INT 40
28458: PUSH
28459: LD_INT 50
28461: PUSH
28462: LD_INT 60
28464: PUSH
28465: LD_INT 70
28467: PUSH
28468: LD_INT 80
28470: PUSH
28471: LD_INT 90
28473: PUSH
28474: LD_INT 100
28476: PUSH
28477: LD_INT 110
28479: PUSH
28480: LD_INT 120
28482: PUSH
28483: LD_INT 130
28485: PUSH
28486: LD_INT 140
28488: PUSH
28489: LD_INT 150
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: PPUSH
28512: LD_INT 15
28514: PPUSH
28515: CALL_OW 12
28519: ARRAY
28520: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28521: LD_ADDR_VAR 0 4
28525: PUSH
28526: LD_INT 10
28528: PUSH
28529: LD_INT 20
28531: PUSH
28532: LD_INT 30
28534: PUSH
28535: LD_INT 40
28537: PUSH
28538: LD_INT 50
28540: PUSH
28541: LD_INT 60
28543: PUSH
28544: LD_INT 70
28546: PUSH
28547: LD_INT 80
28549: PUSH
28550: LD_INT 90
28552: PUSH
28553: LD_INT 100
28555: PUSH
28556: LD_INT 110
28558: PUSH
28559: LD_INT 120
28561: PUSH
28562: LD_INT 130
28564: PUSH
28565: LD_INT 140
28567: PUSH
28568: LD_INT 150
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PPUSH
28591: LD_INT 15
28593: PPUSH
28594: CALL_OW 12
28598: ARRAY
28599: ST_TO_ADDR
// if ValidHex ( x , y ) then
28600: LD_VAR 0 3
28604: PPUSH
28605: LD_VAR 0 4
28609: PPUSH
28610: CALL_OW 488
28614: IFFALSE 28637
// begin result := [ x , y ] ;
28616: LD_ADDR_VAR 0 1
28620: PUSH
28621: LD_VAR 0 3
28625: PUSH
28626: LD_VAR 0 4
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// break ;
28635: GO 28639
// end ; end ;
28637: GO 28439
28639: POP
28640: POP
// if result then
28641: LD_VAR 0 1
28645: IFFALSE 28705
// begin ToLua ( playSibBomb() ) ;
28647: LD_STRING playSibBomb()
28649: PPUSH
28650: CALL_OW 559
// wait ( 0 0$14 ) ;
28654: LD_INT 490
28656: PPUSH
28657: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28661: LD_VAR 0 1
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 2
28677: ARRAY
28678: PPUSH
28679: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28683: LD_VAR 0 1
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PPUSH
28692: LD_VAR 0 1
28696: PUSH
28697: LD_INT 2
28699: ARRAY
28700: PPUSH
28701: CALL_OW 429
// end ; end ;
28705: LD_VAR 0 1
28709: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28710: LD_EXP 52
28714: IFFALSE 28722
28716: PUSH
28717: LD_EXP 74
28721: AND
28722: IFFALSE 28734
28724: GO 28726
28726: DISABLE
// YouLost (  ) ;
28727: LD_STRING 
28729: PPUSH
28730: CALL_OW 104
28734: END
// every 0 0$1 trigger StreamModeActive and sFog do
28735: LD_EXP 52
28739: IFFALSE 28747
28741: PUSH
28742: LD_EXP 73
28746: AND
28747: IFFALSE 28761
28749: GO 28751
28751: DISABLE
// FogOff ( your_side ) ;
28752: LD_OWVAR 2
28756: PPUSH
28757: CALL_OW 344
28761: END
// every 0 0$1 trigger StreamModeActive and sSun do
28762: LD_EXP 52
28766: IFFALSE 28774
28768: PUSH
28769: LD_EXP 75
28773: AND
28774: IFFALSE 28802
28776: GO 28778
28778: DISABLE
// begin solar_recharge_percent := 0 ;
28779: LD_ADDR_OWVAR 79
28783: PUSH
28784: LD_INT 0
28786: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28787: LD_INT 10500
28789: PPUSH
28790: CALL_OW 67
// solar_recharge_percent := 100 ;
28794: LD_ADDR_OWVAR 79
28798: PUSH
28799: LD_INT 100
28801: ST_TO_ADDR
// end ;
28802: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28803: LD_EXP 52
28807: IFFALSE 28815
28809: PUSH
28810: LD_EXP 76
28814: AND
28815: IFFALSE 29054
28817: GO 28819
28819: DISABLE
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
28824: PPUSH
// begin tmp := [ ] ;
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: EMPTY
28831: ST_TO_ADDR
// for i := 1 to 6 do
28832: LD_ADDR_VAR 0 1
28836: PUSH
28837: DOUBLE
28838: LD_INT 1
28840: DEC
28841: ST_TO_ADDR
28842: LD_INT 6
28844: PUSH
28845: FOR_TO
28846: IFFALSE 28951
// begin uc_nation := nation_nature ;
28848: LD_ADDR_OWVAR 21
28852: PUSH
28853: LD_INT 0
28855: ST_TO_ADDR
// uc_side := 0 ;
28856: LD_ADDR_OWVAR 20
28860: PUSH
28861: LD_INT 0
28863: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28864: LD_ADDR_OWVAR 29
28868: PUSH
28869: LD_INT 12
28871: PUSH
28872: LD_INT 12
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// hc_agressivity := 20 ;
28879: LD_ADDR_OWVAR 35
28883: PUSH
28884: LD_INT 20
28886: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28887: LD_ADDR_OWVAR 28
28891: PUSH
28892: LD_INT 17
28894: ST_TO_ADDR
// hc_gallery :=  ;
28895: LD_ADDR_OWVAR 33
28899: PUSH
28900: LD_STRING 
28902: ST_TO_ADDR
// hc_name :=  ;
28903: LD_ADDR_OWVAR 26
28907: PUSH
28908: LD_STRING 
28910: ST_TO_ADDR
// un := CreateHuman ;
28911: LD_ADDR_VAR 0 2
28915: PUSH
28916: CALL_OW 44
28920: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28921: LD_VAR 0 2
28925: PPUSH
28926: LD_INT 1
28928: PPUSH
28929: CALL_OW 51
// tmp := tmp ^ un ;
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_VAR 0 3
28942: PUSH
28943: LD_VAR 0 2
28947: ADD
28948: ST_TO_ADDR
// end ;
28949: GO 28845
28951: POP
28952: POP
// repeat wait ( 0 0$1 ) ;
28953: LD_INT 35
28955: PPUSH
28956: CALL_OW 67
// for un in tmp do
28960: LD_ADDR_VAR 0 2
28964: PUSH
28965: LD_VAR 0 3
28969: PUSH
28970: FOR_IN
28971: IFFALSE 29045
// begin if IsDead ( un ) then
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 301
28982: IFFALSE 29002
// begin tmp := tmp diff un ;
28984: LD_ADDR_VAR 0 3
28988: PUSH
28989: LD_VAR 0 3
28993: PUSH
28994: LD_VAR 0 2
28998: DIFF
28999: ST_TO_ADDR
// continue ;
29000: GO 28970
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29002: LD_VAR 0 2
29006: PPUSH
29007: LD_INT 3
29009: PUSH
29010: LD_INT 22
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: PPUSH
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 74
29038: PPUSH
29039: CALL_OW 115
// end ;
29043: GO 28970
29045: POP
29046: POP
// until not tmp ;
29047: LD_VAR 0 3
29051: NOT
29052: IFFALSE 28953
// end ;
29054: PPOPN 3
29056: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29057: LD_EXP 52
29061: IFFALSE 29069
29063: PUSH
29064: LD_EXP 77
29068: AND
29069: IFFALSE 29123
29071: GO 29073
29073: DISABLE
// begin ToLua ( displayTroll(); ) ;
29074: LD_STRING displayTroll();
29076: PPUSH
29077: CALL_OW 559
// wait ( 3 3$00 ) ;
29081: LD_INT 6300
29083: PPUSH
29084: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29088: LD_STRING hideTroll();
29090: PPUSH
29091: CALL_OW 559
// wait ( 1 1$00 ) ;
29095: LD_INT 2100
29097: PPUSH
29098: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29102: LD_STRING displayTroll();
29104: PPUSH
29105: CALL_OW 559
// wait ( 1 1$00 ) ;
29109: LD_INT 2100
29111: PPUSH
29112: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29116: LD_STRING hideTroll();
29118: PPUSH
29119: CALL_OW 559
// end ;
29123: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29124: LD_EXP 52
29128: IFFALSE 29136
29130: PUSH
29131: LD_EXP 78
29135: AND
29136: IFFALSE 29199
29138: GO 29140
29140: DISABLE
29141: LD_INT 0
29143: PPUSH
// begin p := 0 ;
29144: LD_ADDR_VAR 0 1
29148: PUSH
29149: LD_INT 0
29151: ST_TO_ADDR
// repeat game_speed := 1 ;
29152: LD_ADDR_OWVAR 65
29156: PUSH
29157: LD_INT 1
29159: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29160: LD_INT 35
29162: PPUSH
29163: CALL_OW 67
// p := p + 1 ;
29167: LD_ADDR_VAR 0 1
29171: PUSH
29172: LD_VAR 0 1
29176: PUSH
29177: LD_INT 1
29179: PLUS
29180: ST_TO_ADDR
// until p >= 60 ;
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 60
29188: GREATEREQUAL
29189: IFFALSE 29152
// game_speed := 4 ;
29191: LD_ADDR_OWVAR 65
29195: PUSH
29196: LD_INT 4
29198: ST_TO_ADDR
// end ;
29199: PPOPN 1
29201: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29202: LD_EXP 52
29206: IFFALSE 29214
29208: PUSH
29209: LD_EXP 79
29213: AND
29214: IFFALSE 29360
29216: GO 29218
29218: DISABLE
29219: LD_INT 0
29221: PPUSH
29222: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29223: LD_ADDR_VAR 0 1
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_OWVAR 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 30
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 30
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: ST_TO_ADDR
// if not depot then
29277: LD_VAR 0 1
29281: NOT
29282: IFFALSE 29286
// exit ;
29284: GO 29360
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29286: LD_ADDR_VAR 0 2
29290: PUSH
29291: LD_VAR 0 1
29295: PUSH
29296: LD_INT 1
29298: PPUSH
29299: LD_VAR 0 1
29303: PPUSH
29304: CALL_OW 12
29308: ARRAY
29309: PPUSH
29310: CALL_OW 274
29314: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29315: LD_VAR 0 2
29319: PPUSH
29320: LD_INT 1
29322: PPUSH
29323: LD_INT 0
29325: PPUSH
29326: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_INT 2
29337: PPUSH
29338: LD_INT 0
29340: PPUSH
29341: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29345: LD_VAR 0 2
29349: PPUSH
29350: LD_INT 3
29352: PPUSH
29353: LD_INT 0
29355: PPUSH
29356: CALL_OW 277
// end ;
29360: PPOPN 2
29362: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29363: LD_EXP 52
29367: IFFALSE 29375
29369: PUSH
29370: LD_EXP 80
29374: AND
29375: IFFALSE 29472
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29383: LD_ADDR_VAR 0 1
29387: PUSH
29388: LD_INT 22
29390: PUSH
29391: LD_OWVAR 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 21
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: PUSH
29413: LD_INT 23
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: PPUSH
29432: CALL_OW 69
29436: ST_TO_ADDR
// if not tmp then
29437: LD_VAR 0 1
29441: NOT
29442: IFFALSE 29446
// exit ;
29444: GO 29472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29446: LD_VAR 0 1
29450: PUSH
29451: LD_INT 1
29453: PPUSH
29454: LD_VAR 0 1
29458: PPUSH
29459: CALL_OW 12
29463: ARRAY
29464: PPUSH
29465: LD_INT 200
29467: PPUSH
29468: CALL_OW 234
// end ;
29472: PPOPN 1
29474: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29475: LD_EXP 52
29479: IFFALSE 29487
29481: PUSH
29482: LD_EXP 81
29486: AND
29487: IFFALSE 29566
29489: GO 29491
29491: DISABLE
29492: LD_INT 0
29494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29495: LD_ADDR_VAR 0 1
29499: PUSH
29500: LD_INT 22
29502: PUSH
29503: LD_OWVAR 2
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 21
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: ST_TO_ADDR
// if not tmp then
29531: LD_VAR 0 1
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 1
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 12
29557: ARRAY
29558: PPUSH
29559: LD_INT 60
29561: PPUSH
29562: CALL_OW 234
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29569: LD_EXP 52
29573: IFFALSE 29581
29575: PUSH
29576: LD_EXP 82
29580: AND
29581: IFFALSE 29680
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
// begin enable ;
29590: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_INT 22
29598: PUSH
29599: LD_OWVAR 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 61
29610: PUSH
29611: EMPTY
29612: LIST
29613: PUSH
29614: LD_INT 33
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not tmp then
29634: LD_VAR 0 1
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29680
// for i in tmp do
29643: LD_ADDR_VAR 0 2
29647: PUSH
29648: LD_VAR 0 1
29652: PUSH
29653: FOR_IN
29654: IFFALSE 29678
// if IsControledBy ( i ) then
29656: LD_VAR 0 2
29660: PPUSH
29661: CALL_OW 312
29665: IFFALSE 29676
// ComUnlink ( i ) ;
29667: LD_VAR 0 2
29671: PPUSH
29672: CALL_OW 136
29676: GO 29653
29678: POP
29679: POP
// end ;
29680: PPOPN 2
29682: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29683: LD_EXP 52
29687: IFFALSE 29695
29689: PUSH
29690: LD_EXP 83
29694: AND
29695: IFFALSE 29835
29697: GO 29699
29699: DISABLE
29700: LD_INT 0
29702: PPUSH
29703: PPUSH
// begin ToLua ( displayPowell(); ) ;
29704: LD_STRING displayPowell();
29706: PPUSH
29707: CALL_OW 559
// uc_side := 0 ;
29711: LD_ADDR_OWVAR 20
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// uc_nation := 2 ;
29719: LD_ADDR_OWVAR 21
29723: PUSH
29724: LD_INT 2
29726: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29727: LD_ADDR_OWVAR 37
29731: PUSH
29732: LD_INT 14
29734: ST_TO_ADDR
// vc_engine := engine_siberite ;
29735: LD_ADDR_OWVAR 39
29739: PUSH
29740: LD_INT 3
29742: ST_TO_ADDR
// vc_control := control_apeman ;
29743: LD_ADDR_OWVAR 38
29747: PUSH
29748: LD_INT 5
29750: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29751: LD_ADDR_OWVAR 40
29755: PUSH
29756: LD_INT 29
29758: ST_TO_ADDR
// un := CreateVehicle ;
29759: LD_ADDR_VAR 0 2
29763: PUSH
29764: CALL_OW 45
29768: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29769: LD_VAR 0 2
29773: PPUSH
29774: LD_INT 1
29776: PPUSH
29777: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29781: LD_INT 35
29783: PPUSH
29784: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_INT 22
29795: PUSH
29796: LD_OWVAR 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 69
29809: PPUSH
29810: LD_VAR 0 2
29814: PPUSH
29815: CALL_OW 74
29819: PPUSH
29820: CALL_OW 115
// until IsDead ( un ) ;
29824: LD_VAR 0 2
29828: PPUSH
29829: CALL_OW 301
29833: IFFALSE 29781
// end ;
29835: PPOPN 2
29837: END
// every 0 0$1 trigger StreamModeActive and sStu do
29838: LD_EXP 52
29842: IFFALSE 29850
29844: PUSH
29845: LD_EXP 91
29849: AND
29850: IFFALSE 29866
29852: GO 29854
29854: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29855: LD_STRING displayStucuk();
29857: PPUSH
29858: CALL_OW 559
// ResetFog ;
29862: CALL_OW 335
// end ;
29866: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29867: LD_EXP 52
29871: IFFALSE 29879
29873: PUSH
29874: LD_EXP 84
29878: AND
29879: IFFALSE 30020
29881: GO 29883
29883: DISABLE
29884: LD_INT 0
29886: PPUSH
29887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29888: LD_ADDR_VAR 0 2
29892: PUSH
29893: LD_INT 22
29895: PUSH
29896: LD_OWVAR 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 21
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// if not tmp then
29924: LD_VAR 0 2
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 30020
// un := tmp [ rand ( 1 , tmp ) ] ;
29933: LD_ADDR_VAR 0 1
29937: PUSH
29938: LD_VAR 0 2
29942: PUSH
29943: LD_INT 1
29945: PPUSH
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 12
29955: ARRAY
29956: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29957: LD_VAR 0 1
29961: PPUSH
29962: LD_INT 0
29964: PPUSH
29965: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29969: LD_VAR 0 1
29973: PPUSH
29974: LD_OWVAR 3
29978: PUSH
29979: LD_VAR 0 1
29983: DIFF
29984: PPUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 74
29994: PPUSH
29995: CALL_OW 115
// wait ( 0 0$20 ) ;
29999: LD_INT 700
30001: PPUSH
30002: CALL_OW 67
// SetSide ( un , your_side ) ;
30006: LD_VAR 0 1
30010: PPUSH
30011: LD_OWVAR 2
30015: PPUSH
30016: CALL_OW 235
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30023: LD_EXP 52
30027: IFFALSE 30035
30029: PUSH
30030: LD_EXP 85
30034: AND
30035: IFFALSE 30141
30037: GO 30039
30039: DISABLE
30040: LD_INT 0
30042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30043: LD_ADDR_VAR 0 1
30047: PUSH
30048: LD_INT 22
30050: PUSH
30051: LD_OWVAR 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 30
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 30
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PPUSH
30092: CALL_OW 69
30096: ST_TO_ADDR
// if not depot then
30097: LD_VAR 0 1
30101: NOT
30102: IFFALSE 30106
// exit ;
30104: GO 30141
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: PPUSH
30115: CALL_OW 250
30119: PPUSH
30120: LD_VAR 0 1
30124: PUSH
30125: LD_INT 1
30127: ARRAY
30128: PPUSH
30129: CALL_OW 251
30133: PPUSH
30134: LD_INT 70
30136: PPUSH
30137: CALL_OW 495
// end ;
30141: PPOPN 1
30143: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30144: LD_EXP 52
30148: IFFALSE 30156
30150: PUSH
30151: LD_EXP 86
30155: AND
30156: IFFALSE 30367
30158: GO 30160
30160: DISABLE
30161: LD_INT 0
30163: PPUSH
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30168: LD_ADDR_VAR 0 5
30172: PUSH
30173: LD_INT 22
30175: PUSH
30176: LD_OWVAR 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 21
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PPUSH
30199: CALL_OW 69
30203: ST_TO_ADDR
// if not tmp then
30204: LD_VAR 0 5
30208: NOT
30209: IFFALSE 30213
// exit ;
30211: GO 30367
// for i in tmp do
30213: LD_ADDR_VAR 0 1
30217: PUSH
30218: LD_VAR 0 5
30222: PUSH
30223: FOR_IN
30224: IFFALSE 30365
// begin d := rand ( 0 , 5 ) ;
30226: LD_ADDR_VAR 0 4
30230: PUSH
30231: LD_INT 0
30233: PPUSH
30234: LD_INT 5
30236: PPUSH
30237: CALL_OW 12
30241: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30242: LD_ADDR_VAR 0 2
30246: PUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 250
30256: PPUSH
30257: LD_VAR 0 4
30261: PPUSH
30262: LD_INT 3
30264: PPUSH
30265: LD_INT 12
30267: PPUSH
30268: CALL_OW 12
30272: PPUSH
30273: CALL_OW 272
30277: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 251
30292: PPUSH
30293: LD_VAR 0 4
30297: PPUSH
30298: LD_INT 3
30300: PPUSH
30301: LD_INT 12
30303: PPUSH
30304: CALL_OW 12
30308: PPUSH
30309: CALL_OW 273
30313: ST_TO_ADDR
// if ValidHex ( x , y ) then
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 488
30328: IFFALSE 30363
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30330: LD_VAR 0 1
30334: PPUSH
30335: LD_VAR 0 2
30339: PPUSH
30340: LD_VAR 0 3
30344: PPUSH
30345: LD_INT 3
30347: PPUSH
30348: LD_INT 6
30350: PPUSH
30351: CALL_OW 12
30355: PPUSH
30356: LD_INT 1
30358: PPUSH
30359: CALL_OW 483
// end ;
30363: GO 30223
30365: POP
30366: POP
// end ;
30367: PPOPN 5
30369: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30370: LD_EXP 52
30374: IFFALSE 30382
30376: PUSH
30377: LD_EXP 87
30381: AND
30382: IFFALSE 30476
30384: GO 30386
30386: DISABLE
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30391: LD_ADDR_VAR 0 2
30395: PUSH
30396: LD_INT 22
30398: PUSH
30399: LD_OWVAR 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 32
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 21
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: PPUSH
30433: CALL_OW 69
30437: ST_TO_ADDR
// if not tmp then
30438: LD_VAR 0 2
30442: NOT
30443: IFFALSE 30447
// exit ;
30445: GO 30476
// for i in tmp do
30447: LD_ADDR_VAR 0 1
30451: PUSH
30452: LD_VAR 0 2
30456: PUSH
30457: FOR_IN
30458: IFFALSE 30474
// SetFuel ( i , 0 ) ;
30460: LD_VAR 0 1
30464: PPUSH
30465: LD_INT 0
30467: PPUSH
30468: CALL_OW 240
30472: GO 30457
30474: POP
30475: POP
// end ;
30476: PPOPN 2
30478: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30479: LD_EXP 52
30483: IFFALSE 30491
30485: PUSH
30486: LD_EXP 88
30490: AND
30491: IFFALSE 30557
30493: GO 30495
30495: DISABLE
30496: LD_INT 0
30498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30499: LD_ADDR_VAR 0 1
30503: PUSH
30504: LD_INT 22
30506: PUSH
30507: LD_OWVAR 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 30
30518: PUSH
30519: LD_INT 29
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 69
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 1
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 30557
// DestroyUnit ( tmp [ 1 ] ) ;
30544: LD_VAR 0 1
30548: PUSH
30549: LD_INT 1
30551: ARRAY
30552: PPUSH
30553: CALL_OW 65
// end ;
30557: PPOPN 1
30559: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30560: LD_EXP 52
30564: IFFALSE 30572
30566: PUSH
30567: LD_EXP 90
30571: AND
30572: IFFALSE 30701
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
// begin uc_side := 0 ;
30580: LD_ADDR_OWVAR 20
30584: PUSH
30585: LD_INT 0
30587: ST_TO_ADDR
// uc_nation := nation_arabian ;
30588: LD_ADDR_OWVAR 21
30592: PUSH
30593: LD_INT 2
30595: ST_TO_ADDR
// hc_gallery :=  ;
30596: LD_ADDR_OWVAR 33
30600: PUSH
30601: LD_STRING 
30603: ST_TO_ADDR
// hc_name :=  ;
30604: LD_ADDR_OWVAR 26
30608: PUSH
30609: LD_STRING 
30611: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30612: LD_INT 1
30614: PPUSH
30615: LD_INT 11
30617: PPUSH
30618: LD_INT 10
30620: PPUSH
30621: CALL_OW 380
// un := CreateHuman ;
30625: LD_ADDR_VAR 0 1
30629: PUSH
30630: CALL_OW 44
30634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30635: LD_VAR 0 1
30639: PPUSH
30640: LD_INT 1
30642: PPUSH
30643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30647: LD_INT 35
30649: PPUSH
30650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30654: LD_VAR 0 1
30658: PPUSH
30659: LD_INT 22
30661: PUSH
30662: LD_OWVAR 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 69
30675: PPUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 74
30685: PPUSH
30686: CALL_OW 115
// until IsDead ( un ) ;
30690: LD_VAR 0 1
30694: PPUSH
30695: CALL_OW 301
30699: IFFALSE 30647
// end ;
30701: PPOPN 1
30703: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30704: LD_EXP 52
30708: IFFALSE 30716
30710: PUSH
30711: LD_EXP 92
30715: AND
30716: IFFALSE 30728
30718: GO 30720
30720: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30721: LD_STRING earthquake(getX(game), 0, 32)
30723: PPUSH
30724: CALL_OW 559
30728: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30729: LD_EXP 52
30733: IFFALSE 30741
30735: PUSH
30736: LD_EXP 93
30740: AND
30741: IFFALSE 30832
30743: GO 30745
30745: DISABLE
30746: LD_INT 0
30748: PPUSH
// begin enable ;
30749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30750: LD_ADDR_VAR 0 1
30754: PUSH
30755: LD_INT 22
30757: PUSH
30758: LD_OWVAR 2
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 21
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 33
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: PPUSH
30792: CALL_OW 69
30796: ST_TO_ADDR
// if not tmp then
30797: LD_VAR 0 1
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 30832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30806: LD_VAR 0 1
30810: PUSH
30811: LD_INT 1
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 12
30823: ARRAY
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: CALL_OW 234
// end ;
30832: PPOPN 1
30834: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30835: LD_EXP 52
30839: IFFALSE 30847
30841: PUSH
30842: LD_EXP 94
30846: AND
30847: IFFALSE 30988
30849: GO 30851
30851: DISABLE
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 25
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PPUSH
30888: CALL_OW 69
30892: ST_TO_ADDR
// if not tmp then
30893: LD_VAR 0 3
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 30988
// un := tmp [ rand ( 1 , tmp ) ] ;
30902: LD_ADDR_VAR 0 2
30906: PUSH
30907: LD_VAR 0 3
30911: PUSH
30912: LD_INT 1
30914: PPUSH
30915: LD_VAR 0 3
30919: PPUSH
30920: CALL_OW 12
30924: ARRAY
30925: ST_TO_ADDR
// if Crawls ( un ) then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( un ) ;
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_INT 9
30953: PPUSH
30954: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30958: LD_INT 28
30960: PPUSH
30961: LD_OWVAR 2
30965: PPUSH
30966: LD_INT 2
30968: PPUSH
30969: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30973: LD_INT 29
30975: PPUSH
30976: LD_OWVAR 2
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 322
// end ;
30988: PPOPN 3
30990: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30991: LD_EXP 52
30995: IFFALSE 31003
30997: PUSH
30998: LD_EXP 95
31002: AND
31003: IFFALSE 31114
31005: GO 31007
31007: DISABLE
31008: LD_INT 0
31010: PPUSH
31011: PPUSH
31012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 22
31020: PUSH
31021: LD_OWVAR 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 25
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 69
31048: ST_TO_ADDR
// if not tmp then
31049: LD_VAR 0 3
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31114
// un := tmp [ rand ( 1 , tmp ) ] ;
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: LD_VAR 0 3
31067: PUSH
31068: LD_INT 1
31070: PPUSH
31071: LD_VAR 0 3
31075: PPUSH
31076: CALL_OW 12
31080: ARRAY
31081: ST_TO_ADDR
// if Crawls ( un ) then
31082: LD_VAR 0 2
31086: PPUSH
31087: CALL_OW 318
31091: IFFALSE 31102
// ComWalk ( un ) ;
31093: LD_VAR 0 2
31097: PPUSH
31098: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31102: LD_VAR 0 2
31106: PPUSH
31107: LD_INT 8
31109: PPUSH
31110: CALL_OW 336
// end ;
31114: PPOPN 3
31116: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31117: LD_EXP 52
31121: IFFALSE 31129
31123: PUSH
31124: LD_EXP 96
31128: AND
31129: IFFALSE 31273
31131: GO 31133
31133: DISABLE
31134: LD_INT 0
31136: PPUSH
31137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31138: LD_ADDR_VAR 0 2
31142: PUSH
31143: LD_INT 22
31145: PUSH
31146: LD_OWVAR 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 21
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 34
31170: PUSH
31171: LD_INT 12
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 34
31180: PUSH
31181: LD_INT 51
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 34
31190: PUSH
31191: LD_INT 32
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: PPUSH
31209: CALL_OW 69
31213: ST_TO_ADDR
// if not tmp then
31214: LD_VAR 0 2
31218: NOT
31219: IFFALSE 31223
// exit ;
31221: GO 31273
// for i in tmp do
31223: LD_ADDR_VAR 0 1
31227: PUSH
31228: LD_VAR 0 2
31232: PUSH
31233: FOR_IN
31234: IFFALSE 31271
// if GetCargo ( i , mat_artifact ) = 0 then
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_INT 4
31243: PPUSH
31244: CALL_OW 289
31248: PUSH
31249: LD_INT 0
31251: EQUAL
31252: IFFALSE 31269
// SetCargo ( i , mat_siberit , 100 ) ;
31254: LD_VAR 0 1
31258: PPUSH
31259: LD_INT 3
31261: PPUSH
31262: LD_INT 100
31264: PPUSH
31265: CALL_OW 290
31269: GO 31233
31271: POP
31272: POP
// end ;
31273: PPOPN 2
31275: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31276: LD_EXP 52
31280: IFFALSE 31288
31282: PUSH
31283: LD_EXP 97
31287: AND
31288: IFFALSE 31471
31290: GO 31292
31292: DISABLE
31293: LD_INT 0
31295: PPUSH
31296: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31297: LD_ADDR_VAR 0 2
31301: PUSH
31302: LD_INT 22
31304: PUSH
31305: LD_OWVAR 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ST_TO_ADDR
// if not tmp then
31319: LD_VAR 0 2
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31471
// for i := 1 to 2 do
31328: LD_ADDR_VAR 0 1
31332: PUSH
31333: DOUBLE
31334: LD_INT 1
31336: DEC
31337: ST_TO_ADDR
31338: LD_INT 2
31340: PUSH
31341: FOR_TO
31342: IFFALSE 31469
// begin uc_side := your_side ;
31344: LD_ADDR_OWVAR 20
31348: PUSH
31349: LD_OWVAR 2
31353: ST_TO_ADDR
// uc_nation := nation_american ;
31354: LD_ADDR_OWVAR 21
31358: PUSH
31359: LD_INT 1
31361: ST_TO_ADDR
// vc_chassis := us_morphling ;
31362: LD_ADDR_OWVAR 37
31366: PUSH
31367: LD_INT 5
31369: ST_TO_ADDR
// vc_engine := engine_siberite ;
31370: LD_ADDR_OWVAR 39
31374: PUSH
31375: LD_INT 3
31377: ST_TO_ADDR
// vc_control := control_computer ;
31378: LD_ADDR_OWVAR 38
31382: PUSH
31383: LD_INT 3
31385: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31386: LD_ADDR_OWVAR 40
31390: PUSH
31391: LD_INT 10
31393: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31394: LD_VAR 0 2
31398: PUSH
31399: LD_INT 1
31401: ARRAY
31402: PPUSH
31403: CALL_OW 310
31407: NOT
31408: IFFALSE 31455
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31410: CALL_OW 45
31414: PPUSH
31415: LD_VAR 0 2
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PPUSH
31424: CALL_OW 250
31428: PPUSH
31429: LD_VAR 0 2
31433: PUSH
31434: LD_INT 1
31436: ARRAY
31437: PPUSH
31438: CALL_OW 251
31442: PPUSH
31443: LD_INT 12
31445: PPUSH
31446: LD_INT 1
31448: PPUSH
31449: CALL_OW 50
31453: GO 31467
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31455: CALL_OW 45
31459: PPUSH
31460: LD_INT 1
31462: PPUSH
31463: CALL_OW 51
// end ;
31467: GO 31341
31469: POP
31470: POP
// end ;
31471: PPOPN 2
31473: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31474: LD_EXP 52
31478: IFFALSE 31486
31480: PUSH
31481: LD_EXP 98
31485: AND
31486: IFFALSE 31708
31488: GO 31490
31490: DISABLE
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31499: LD_ADDR_VAR 0 6
31503: PUSH
31504: LD_INT 22
31506: PUSH
31507: LD_OWVAR 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 21
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: LD_INT 23
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: PPUSH
31548: CALL_OW 69
31552: ST_TO_ADDR
// if not tmp then
31553: LD_VAR 0 6
31557: NOT
31558: IFFALSE 31562
// exit ;
31560: GO 31708
// s1 := rand ( 1 , 4 ) ;
31562: LD_ADDR_VAR 0 2
31566: PUSH
31567: LD_INT 1
31569: PPUSH
31570: LD_INT 4
31572: PPUSH
31573: CALL_OW 12
31577: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_VAR 0 6
31587: PUSH
31588: LD_INT 1
31590: ARRAY
31591: PPUSH
31592: LD_VAR 0 2
31596: PPUSH
31597: CALL_OW 259
31601: ST_TO_ADDR
// if s1 = 1 then
31602: LD_VAR 0 2
31606: PUSH
31607: LD_INT 1
31609: EQUAL
31610: IFFALSE 31630
// s2 := rand ( 2 , 4 ) else
31612: LD_ADDR_VAR 0 3
31616: PUSH
31617: LD_INT 2
31619: PPUSH
31620: LD_INT 4
31622: PPUSH
31623: CALL_OW 12
31627: ST_TO_ADDR
31628: GO 31638
// s2 := 1 ;
31630: LD_ADDR_VAR 0 3
31634: PUSH
31635: LD_INT 1
31637: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_VAR 0 6
31647: PUSH
31648: LD_INT 1
31650: ARRAY
31651: PPUSH
31652: LD_VAR 0 3
31656: PPUSH
31657: CALL_OW 259
31661: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31662: LD_VAR 0 6
31666: PUSH
31667: LD_INT 1
31669: ARRAY
31670: PPUSH
31671: LD_VAR 0 2
31675: PPUSH
31676: LD_VAR 0 5
31680: PPUSH
31681: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31685: LD_VAR 0 6
31689: PUSH
31690: LD_INT 1
31692: ARRAY
31693: PPUSH
31694: LD_VAR 0 3
31698: PPUSH
31699: LD_VAR 0 4
31703: PPUSH
31704: CALL_OW 237
// end ;
31708: PPOPN 6
31710: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31711: LD_EXP 52
31715: IFFALSE 31723
31717: PUSH
31718: LD_EXP 99
31722: AND
31723: IFFALSE 31802
31725: GO 31727
31727: DISABLE
31728: LD_INT 0
31730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31731: LD_ADDR_VAR 0 1
31735: PUSH
31736: LD_INT 22
31738: PUSH
31739: LD_OWVAR 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 30
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: ST_TO_ADDR
// if not tmp then
31767: LD_VAR 0 1
31771: NOT
31772: IFFALSE 31776
// exit ;
31774: GO 31802
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31776: LD_VAR 0 1
31780: PUSH
31781: LD_INT 1
31783: PPUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: CALL_OW 12
31793: ARRAY
31794: PPUSH
31795: LD_INT 1
31797: PPUSH
31798: CALL_OW 234
// end ;
31802: PPOPN 1
31804: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31805: LD_EXP 52
31809: IFFALSE 31817
31811: PUSH
31812: LD_EXP 100
31816: AND
31817: IFFALSE 31929
31819: GO 31821
31821: DISABLE
31822: LD_INT 0
31824: PPUSH
31825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31826: LD_ADDR_VAR 0 2
31830: PUSH
31831: LD_INT 22
31833: PUSH
31834: LD_OWVAR 2
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: LD_INT 27
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 30
31858: PUSH
31859: LD_INT 26
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 30
31868: PUSH
31869: LD_INT 28
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL_OW 69
31890: ST_TO_ADDR
// if not tmp then
31891: LD_VAR 0 2
31895: NOT
31896: IFFALSE 31900
// exit ;
31898: GO 31929
// for i in tmp do
31900: LD_ADDR_VAR 0 1
31904: PUSH
31905: LD_VAR 0 2
31909: PUSH
31910: FOR_IN
31911: IFFALSE 31927
// SetLives ( i , 1 ) ;
31913: LD_VAR 0 1
31917: PPUSH
31918: LD_INT 1
31920: PPUSH
31921: CALL_OW 234
31925: GO 31910
31927: POP
31928: POP
// end ;
31929: PPOPN 2
31931: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31932: LD_EXP 52
31936: IFFALSE 31944
31938: PUSH
31939: LD_EXP 101
31943: AND
31944: IFFALSE 32231
31946: GO 31948
31948: DISABLE
31949: LD_INT 0
31951: PPUSH
31952: PPUSH
31953: PPUSH
// begin i := rand ( 1 , 7 ) ;
31954: LD_ADDR_VAR 0 1
31958: PUSH
31959: LD_INT 1
31961: PPUSH
31962: LD_INT 7
31964: PPUSH
31965: CALL_OW 12
31969: ST_TO_ADDR
// case i of 1 :
31970: LD_VAR 0 1
31974: PUSH
31975: LD_INT 1
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31993
31983: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31984: LD_STRING earthquake(getX(game), 0, 32)
31986: PPUSH
31987: CALL_OW 559
31991: GO 32231
31993: LD_INT 2
31995: DOUBLE
31996: EQUAL
31997: IFTRUE 32001
31999: GO 32015
32001: POP
// begin ToLua ( displayStucuk(); ) ;
32002: LD_STRING displayStucuk();
32004: PPUSH
32005: CALL_OW 559
// ResetFog ;
32009: CALL_OW 335
// end ; 3 :
32013: GO 32231
32015: LD_INT 3
32017: DOUBLE
32018: EQUAL
32019: IFTRUE 32023
32021: GO 32127
32023: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32024: LD_ADDR_VAR 0 2
32028: PUSH
32029: LD_INT 22
32031: PUSH
32032: LD_OWVAR 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 25
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PPUSH
32055: CALL_OW 69
32059: ST_TO_ADDR
// if not tmp then
32060: LD_VAR 0 2
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32231
// un := tmp [ rand ( 1 , tmp ) ] ;
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_INT 1
32081: PPUSH
32082: LD_VAR 0 2
32086: PPUSH
32087: CALL_OW 12
32091: ARRAY
32092: ST_TO_ADDR
// if Crawls ( un ) then
32093: LD_VAR 0 3
32097: PPUSH
32098: CALL_OW 318
32102: IFFALSE 32113
// ComWalk ( un ) ;
32104: LD_VAR 0 3
32108: PPUSH
32109: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32113: LD_VAR 0 3
32117: PPUSH
32118: LD_INT 8
32120: PPUSH
32121: CALL_OW 336
// end ; 4 :
32125: GO 32231
32127: LD_INT 4
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 32209
32135: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32136: LD_ADDR_VAR 0 2
32140: PUSH
32141: LD_INT 22
32143: PUSH
32144: LD_OWVAR 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 30
32155: PUSH
32156: LD_INT 29
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 2
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32231
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32181: LD_VAR 0 2
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: PPUSH
32190: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32194: LD_VAR 0 2
32198: PUSH
32199: LD_INT 1
32201: ARRAY
32202: PPUSH
32203: CALL_OW 65
// end ; 5 .. 7 :
32207: GO 32231
32209: LD_INT 5
32211: DOUBLE
32212: GREATEREQUAL
32213: IFFALSE 32221
32215: LD_INT 7
32217: DOUBLE
32218: LESSEQUAL
32219: IFTRUE 32223
32221: GO 32230
32223: POP
// StreamSibBomb ; end ;
32224: CALL 28412 0 0
32228: GO 32231
32230: POP
// end ;
32231: PPOPN 3
32233: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32234: LD_EXP 52
32238: IFFALSE 32246
32240: PUSH
32241: LD_EXP 102
32245: AND
32246: IFFALSE 32402
32248: GO 32250
32250: DISABLE
32251: LD_INT 0
32253: PPUSH
32254: PPUSH
32255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32256: LD_ADDR_VAR 0 2
32260: PUSH
32261: LD_INT 81
32263: PUSH
32264: LD_OWVAR 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 21
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 21
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 69
32309: ST_TO_ADDR
// if not tmp then
32310: LD_VAR 0 2
32314: NOT
32315: IFFALSE 32319
// exit ;
32317: GO 32402
// p := 0 ;
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_INT 0
32326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32327: LD_INT 35
32329: PPUSH
32330: CALL_OW 67
// p := p + 1 ;
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_VAR 0 3
32343: PUSH
32344: LD_INT 1
32346: PLUS
32347: ST_TO_ADDR
// for i in tmp do
32348: LD_ADDR_VAR 0 1
32352: PUSH
32353: LD_VAR 0 2
32357: PUSH
32358: FOR_IN
32359: IFFALSE 32390
// if GetLives ( i ) < 1000 then
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 256
32370: PUSH
32371: LD_INT 1000
32373: LESS
32374: IFFALSE 32388
// SetLives ( i , 1000 ) ;
32376: LD_VAR 0 1
32380: PPUSH
32381: LD_INT 1000
32383: PPUSH
32384: CALL_OW 234
32388: GO 32358
32390: POP
32391: POP
// until p > 20 ;
32392: LD_VAR 0 3
32396: PUSH
32397: LD_INT 20
32399: GREATER
32400: IFFALSE 32327
// end ;
32402: PPOPN 3
32404: END
// every 0 0$1 trigger StreamModeActive and sTime do
32405: LD_EXP 52
32409: IFFALSE 32417
32411: PUSH
32412: LD_EXP 103
32416: AND
32417: IFFALSE 32452
32419: GO 32421
32421: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32422: LD_INT 28
32424: PPUSH
32425: LD_OWVAR 2
32429: PPUSH
32430: LD_INT 2
32432: PPUSH
32433: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32437: LD_INT 30
32439: PPUSH
32440: LD_OWVAR 2
32444: PPUSH
32445: LD_INT 2
32447: PPUSH
32448: CALL_OW 322
// end ;
32452: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32453: LD_EXP 52
32457: IFFALSE 32465
32459: PUSH
32460: LD_EXP 104
32464: AND
32465: IFFALSE 32586
32467: GO 32469
32469: DISABLE
32470: LD_INT 0
32472: PPUSH
32473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_INT 22
32481: PUSH
32482: LD_OWVAR 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 21
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: LD_INT 23
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: ST_TO_ADDR
// if not tmp then
32528: LD_VAR 0 2
32532: NOT
32533: IFFALSE 32537
// exit ;
32535: GO 32586
// for i in tmp do
32537: LD_ADDR_VAR 0 1
32541: PUSH
32542: LD_VAR 0 2
32546: PUSH
32547: FOR_IN
32548: IFFALSE 32584
// begin if Crawls ( i ) then
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 318
32559: IFFALSE 32570
// ComWalk ( i ) ;
32561: LD_VAR 0 1
32565: PPUSH
32566: CALL_OW 138
// SetClass ( i , 2 ) ;
32570: LD_VAR 0 1
32574: PPUSH
32575: LD_INT 2
32577: PPUSH
32578: CALL_OW 336
// end ;
32582: GO 32547
32584: POP
32585: POP
// end ;
32586: PPOPN 2
32588: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32589: LD_EXP 52
32593: IFFALSE 32601
32595: PUSH
32596: LD_EXP 105
32600: AND
32601: IFFALSE 32891
32603: GO 32605
32605: DISABLE
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
32610: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32611: LD_OWVAR 2
32615: PPUSH
32616: LD_INT 9
32618: PPUSH
32619: LD_INT 1
32621: PPUSH
32622: LD_INT 1
32624: PPUSH
32625: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32629: LD_INT 9
32631: PPUSH
32632: LD_OWVAR 2
32636: PPUSH
32637: CALL_OW 343
// uc_side := 9 ;
32641: LD_ADDR_OWVAR 20
32645: PUSH
32646: LD_INT 9
32648: ST_TO_ADDR
// uc_nation := 2 ;
32649: LD_ADDR_OWVAR 21
32653: PUSH
32654: LD_INT 2
32656: ST_TO_ADDR
// hc_name := Dark Warrior ;
32657: LD_ADDR_OWVAR 26
32661: PUSH
32662: LD_STRING Dark Warrior
32664: ST_TO_ADDR
// hc_gallery :=  ;
32665: LD_ADDR_OWVAR 33
32669: PUSH
32670: LD_STRING 
32672: ST_TO_ADDR
// hc_noskilllimit := true ;
32673: LD_ADDR_OWVAR 76
32677: PUSH
32678: LD_INT 1
32680: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32681: LD_ADDR_OWVAR 31
32685: PUSH
32686: LD_INT 30
32688: PUSH
32689: LD_INT 30
32691: PUSH
32692: LD_INT 30
32694: PUSH
32695: LD_INT 30
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: ST_TO_ADDR
// un := CreateHuman ;
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: CALL_OW 44
32713: ST_TO_ADDR
// hc_noskilllimit := false ;
32714: LD_ADDR_OWVAR 76
32718: PUSH
32719: LD_INT 0
32721: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32722: LD_VAR 0 3
32726: PPUSH
32727: LD_INT 1
32729: PPUSH
32730: CALL_OW 51
// ToLua ( playRanger() ) ;
32734: LD_STRING playRanger()
32736: PPUSH
32737: CALL_OW 559
// p := 0 ;
32741: LD_ADDR_VAR 0 2
32745: PUSH
32746: LD_INT 0
32748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32749: LD_INT 35
32751: PPUSH
32752: CALL_OW 67
// p := p + 1 ;
32756: LD_ADDR_VAR 0 2
32760: PUSH
32761: LD_VAR 0 2
32765: PUSH
32766: LD_INT 1
32768: PLUS
32769: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32770: LD_VAR 0 3
32774: PPUSH
32775: CALL_OW 256
32779: PUSH
32780: LD_INT 1000
32782: LESS
32783: IFFALSE 32797
// SetLives ( un , 1000 ) ;
32785: LD_VAR 0 3
32789: PPUSH
32790: LD_INT 1000
32792: PPUSH
32793: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32797: LD_VAR 0 3
32801: PPUSH
32802: LD_INT 81
32804: PUSH
32805: LD_OWVAR 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 91
32816: PUSH
32817: LD_VAR 0 3
32821: PUSH
32822: LD_INT 30
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PPUSH
32834: CALL_OW 69
32838: PPUSH
32839: LD_VAR 0 3
32843: PPUSH
32844: CALL_OW 74
32848: PPUSH
32849: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32853: LD_VAR 0 2
32857: PUSH
32858: LD_INT 80
32860: GREATER
32861: IFTRUE 32874
32863: PUSH
32864: LD_VAR 0 3
32868: PPUSH
32869: CALL_OW 301
32873: OR
32874: IFFALSE 32749
// if un then
32876: LD_VAR 0 3
32880: IFFALSE 32891
// RemoveUnit ( un ) ;
32882: LD_VAR 0 3
32886: PPUSH
32887: CALL_OW 64
// end ;
32891: PPOPN 3
32893: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32894: LD_EXP 106
32898: IFFALSE 33014
32900: GO 32902
32902: DISABLE
32903: LD_INT 0
32905: PPUSH
32906: PPUSH
32907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32908: LD_ADDR_VAR 0 2
32912: PUSH
32913: LD_INT 81
32915: PUSH
32916: LD_OWVAR 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 21
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PPUSH
32939: CALL_OW 69
32943: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32944: LD_STRING playComputer()
32946: PPUSH
32947: CALL_OW 559
// if not tmp then
32951: LD_VAR 0 2
32955: NOT
32956: IFFALSE 32960
// exit ;
32958: GO 33014
// for i in tmp do
32960: LD_ADDR_VAR 0 1
32964: PUSH
32965: LD_VAR 0 2
32969: PUSH
32970: FOR_IN
32971: IFFALSE 33012
// for j := 1 to 4 do
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: DOUBLE
32979: LD_INT 1
32981: DEC
32982: ST_TO_ADDR
32983: LD_INT 4
32985: PUSH
32986: FOR_TO
32987: IFFALSE 33008
// SetSkill ( i , j , 10 ) ;
32989: LD_VAR 0 1
32993: PPUSH
32994: LD_VAR 0 3
32998: PPUSH
32999: LD_INT 10
33001: PPUSH
33002: CALL_OW 237
33006: GO 32986
33008: POP
33009: POP
33010: GO 32970
33012: POP
33013: POP
// end ;
33014: PPOPN 3
33016: END
// every 0 0$1 trigger s30 do var i , tmp ;
33017: LD_EXP 107
33021: IFFALSE 33090
33023: GO 33025
33025: DISABLE
33026: LD_INT 0
33028: PPUSH
33029: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33030: LD_ADDR_VAR 0 2
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_OWVAR 2
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PPUSH
33047: CALL_OW 69
33051: ST_TO_ADDR
// if not tmp then
33052: LD_VAR 0 2
33056: NOT
33057: IFFALSE 33061
// exit ;
33059: GO 33090
// for i in tmp do
33061: LD_ADDR_VAR 0 1
33065: PUSH
33066: LD_VAR 0 2
33070: PUSH
33071: FOR_IN
33072: IFFALSE 33088
// SetLives ( i , 300 ) ;
33074: LD_VAR 0 1
33078: PPUSH
33079: LD_INT 300
33081: PPUSH
33082: CALL_OW 234
33086: GO 33071
33088: POP
33089: POP
// end ;
33090: PPOPN 2
33092: END
// every 0 0$1 trigger s60 do var i , tmp ;
33093: LD_EXP 108
33097: IFFALSE 33166
33099: GO 33101
33101: DISABLE
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33106: LD_ADDR_VAR 0 2
33110: PUSH
33111: LD_INT 22
33113: PUSH
33114: LD_OWVAR 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PPUSH
33123: CALL_OW 69
33127: ST_TO_ADDR
// if not tmp then
33128: LD_VAR 0 2
33132: NOT
33133: IFFALSE 33137
// exit ;
33135: GO 33166
// for i in tmp do
33137: LD_ADDR_VAR 0 1
33141: PUSH
33142: LD_VAR 0 2
33146: PUSH
33147: FOR_IN
33148: IFFALSE 33164
// SetLives ( i , 600 ) ;
33150: LD_VAR 0 1
33154: PPUSH
33155: LD_INT 600
33157: PPUSH
33158: CALL_OW 234
33162: GO 33147
33164: POP
33165: POP
// end ;
33166: PPOPN 2
33168: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33169: LD_INT 0
33171: PPUSH
// case cmd of 301 :
33172: LD_VAR 0 1
33176: PUSH
33177: LD_INT 301
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33217
33185: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33186: LD_VAR 0 6
33190: PPUSH
33191: LD_VAR 0 7
33195: PPUSH
33196: LD_VAR 0 8
33200: PPUSH
33201: LD_VAR 0 4
33205: PPUSH
33206: LD_VAR 0 5
33210: PPUSH
33211: CALL 34430 0 5
33215: GO 33338
33217: LD_INT 302
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33262
33225: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33226: LD_VAR 0 6
33230: PPUSH
33231: LD_VAR 0 7
33235: PPUSH
33236: LD_VAR 0 8
33240: PPUSH
33241: LD_VAR 0 9
33245: PPUSH
33246: LD_VAR 0 4
33250: PPUSH
33251: LD_VAR 0 5
33255: PPUSH
33256: CALL 34521 0 6
33260: GO 33338
33262: LD_INT 303
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33307
33270: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33271: LD_VAR 0 6
33275: PPUSH
33276: LD_VAR 0 7
33280: PPUSH
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_VAR 0 9
33290: PPUSH
33291: LD_VAR 0 4
33295: PPUSH
33296: LD_VAR 0 5
33300: PPUSH
33301: CALL 33343 0 6
33305: GO 33338
33307: LD_INT 304
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33337
33315: POP
// hHackTeleport ( unit , x , y ) ; end ;
33316: LD_VAR 0 2
33320: PPUSH
33321: LD_VAR 0 4
33325: PPUSH
33326: LD_VAR 0 5
33330: PPUSH
33331: CALL 35114 0 3
33335: GO 33338
33337: POP
// end ;
33338: LD_VAR 0 12
33342: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33343: LD_INT 0
33345: PPUSH
33346: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33347: LD_VAR 0 1
33351: PUSH
33352: LD_INT 1
33354: LESS
33355: IFTRUE 33367
33357: PUSH
33358: LD_VAR 0 1
33362: PUSH
33363: LD_INT 3
33365: GREATER
33366: OR
33367: IFTRUE 33385
33369: PUSH
33370: LD_VAR 0 5
33374: PPUSH
33375: LD_VAR 0 6
33379: PPUSH
33380: CALL_OW 428
33384: OR
33385: IFFALSE 33389
// exit ;
33387: GO 34117
// uc_side := your_side ;
33389: LD_ADDR_OWVAR 20
33393: PUSH
33394: LD_OWVAR 2
33398: ST_TO_ADDR
// uc_nation := nation ;
33399: LD_ADDR_OWVAR 21
33403: PUSH
33404: LD_VAR 0 1
33408: ST_TO_ADDR
// bc_level = 1 ;
33409: LD_ADDR_OWVAR 43
33413: PUSH
33414: LD_INT 1
33416: ST_TO_ADDR
// case btype of 1 :
33417: LD_VAR 0 2
33421: PUSH
33422: LD_INT 1
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33441
33430: POP
// bc_type := b_depot ; 2 :
33431: LD_ADDR_OWVAR 42
33435: PUSH
33436: LD_INT 0
33438: ST_TO_ADDR
33439: GO 34061
33441: LD_INT 2
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33460
33449: POP
// bc_type := b_warehouse ; 3 :
33450: LD_ADDR_OWVAR 42
33454: PUSH
33455: LD_INT 1
33457: ST_TO_ADDR
33458: GO 34061
33460: LD_INT 3
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33479
33468: POP
// bc_type := b_lab ; 4 .. 9 :
33469: LD_ADDR_OWVAR 42
33473: PUSH
33474: LD_INT 6
33476: ST_TO_ADDR
33477: GO 34061
33479: LD_INT 4
33481: DOUBLE
33482: GREATEREQUAL
33483: IFFALSE 33491
33485: LD_INT 9
33487: DOUBLE
33488: LESSEQUAL
33489: IFTRUE 33493
33491: GO 33553
33493: POP
// begin bc_type := b_lab_half ;
33494: LD_ADDR_OWVAR 42
33498: PUSH
33499: LD_INT 7
33501: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33502: LD_ADDR_OWVAR 44
33506: PUSH
33507: LD_INT 10
33509: PUSH
33510: LD_INT 11
33512: PUSH
33513: LD_INT 12
33515: PUSH
33516: LD_INT 15
33518: PUSH
33519: LD_INT 14
33521: PUSH
33522: LD_INT 13
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: PUSH
33533: LD_VAR 0 2
33537: PUSH
33538: LD_INT 3
33540: MINUS
33541: ARRAY
33542: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33543: LD_ADDR_OWVAR 45
33547: PUSH
33548: LD_INT 9
33550: ST_TO_ADDR
// end ; 10 .. 13 :
33551: GO 34061
33553: LD_INT 10
33555: DOUBLE
33556: GREATEREQUAL
33557: IFFALSE 33565
33559: LD_INT 13
33561: DOUBLE
33562: LESSEQUAL
33563: IFTRUE 33567
33565: GO 33644
33567: POP
// begin bc_type := b_lab_full ;
33568: LD_ADDR_OWVAR 42
33572: PUSH
33573: LD_INT 8
33575: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33576: LD_ADDR_OWVAR 44
33580: PUSH
33581: LD_INT 10
33583: PUSH
33584: LD_INT 12
33586: PUSH
33587: LD_INT 14
33589: PUSH
33590: LD_INT 13
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: PUSH
33599: LD_VAR 0 2
33603: PUSH
33604: LD_INT 9
33606: MINUS
33607: ARRAY
33608: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33609: LD_ADDR_OWVAR 45
33613: PUSH
33614: LD_INT 11
33616: PUSH
33617: LD_INT 15
33619: PUSH
33620: LD_INT 12
33622: PUSH
33623: LD_INT 15
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: LD_VAR 0 2
33636: PUSH
33637: LD_INT 9
33639: MINUS
33640: ARRAY
33641: ST_TO_ADDR
// end ; 14 :
33642: GO 34061
33644: LD_INT 14
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33652
33650: GO 33663
33652: POP
// bc_type := b_workshop ; 15 :
33653: LD_ADDR_OWVAR 42
33657: PUSH
33658: LD_INT 2
33660: ST_TO_ADDR
33661: GO 34061
33663: LD_INT 15
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33671
33669: GO 33682
33671: POP
// bc_type := b_factory ; 16 :
33672: LD_ADDR_OWVAR 42
33676: PUSH
33677: LD_INT 3
33679: ST_TO_ADDR
33680: GO 34061
33682: LD_INT 16
33684: DOUBLE
33685: EQUAL
33686: IFTRUE 33690
33688: GO 33701
33690: POP
// bc_type := b_ext_gun ; 17 :
33691: LD_ADDR_OWVAR 42
33695: PUSH
33696: LD_INT 17
33698: ST_TO_ADDR
33699: GO 34061
33701: LD_INT 17
33703: DOUBLE
33704: EQUAL
33705: IFTRUE 33709
33707: GO 33737
33709: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33710: LD_ADDR_OWVAR 42
33714: PUSH
33715: LD_INT 19
33717: PUSH
33718: LD_INT 23
33720: PUSH
33721: LD_INT 19
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: LD_VAR 0 1
33733: ARRAY
33734: ST_TO_ADDR
33735: GO 34061
33737: LD_INT 18
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33756
33745: POP
// bc_type := b_ext_radar ; 19 :
33746: LD_ADDR_OWVAR 42
33750: PUSH
33751: LD_INT 20
33753: ST_TO_ADDR
33754: GO 34061
33756: LD_INT 19
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33775
33764: POP
// bc_type := b_ext_radio ; 20 :
33765: LD_ADDR_OWVAR 42
33769: PUSH
33770: LD_INT 22
33772: ST_TO_ADDR
33773: GO 34061
33775: LD_INT 20
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33794
33783: POP
// bc_type := b_ext_siberium ; 21 :
33784: LD_ADDR_OWVAR 42
33788: PUSH
33789: LD_INT 21
33791: ST_TO_ADDR
33792: GO 34061
33794: LD_INT 21
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33813
33802: POP
// bc_type := b_ext_computer ; 22 :
33803: LD_ADDR_OWVAR 42
33807: PUSH
33808: LD_INT 24
33810: ST_TO_ADDR
33811: GO 34061
33813: LD_INT 22
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33832
33821: POP
// bc_type := b_ext_track ; 23 :
33822: LD_ADDR_OWVAR 42
33826: PUSH
33827: LD_INT 16
33829: ST_TO_ADDR
33830: GO 34061
33832: LD_INT 23
33834: DOUBLE
33835: EQUAL
33836: IFTRUE 33840
33838: GO 33851
33840: POP
// bc_type := b_ext_laser ; 24 :
33841: LD_ADDR_OWVAR 42
33845: PUSH
33846: LD_INT 25
33848: ST_TO_ADDR
33849: GO 34061
33851: LD_INT 24
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33870
33859: POP
// bc_type := b_control_tower ; 25 :
33860: LD_ADDR_OWVAR 42
33864: PUSH
33865: LD_INT 36
33867: ST_TO_ADDR
33868: GO 34061
33870: LD_INT 25
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33889
33878: POP
// bc_type := b_breastwork ; 26 :
33879: LD_ADDR_OWVAR 42
33883: PUSH
33884: LD_INT 31
33886: ST_TO_ADDR
33887: GO 34061
33889: LD_INT 26
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33908
33897: POP
// bc_type := b_bunker ; 27 :
33898: LD_ADDR_OWVAR 42
33902: PUSH
33903: LD_INT 32
33905: ST_TO_ADDR
33906: GO 34061
33908: LD_INT 27
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33916
33914: GO 33927
33916: POP
// bc_type := b_turret ; 28 :
33917: LD_ADDR_OWVAR 42
33921: PUSH
33922: LD_INT 33
33924: ST_TO_ADDR
33925: GO 34061
33927: LD_INT 28
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33946
33935: POP
// bc_type := b_armoury ; 29 :
33936: LD_ADDR_OWVAR 42
33940: PUSH
33941: LD_INT 4
33943: ST_TO_ADDR
33944: GO 34061
33946: LD_INT 29
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33965
33954: POP
// bc_type := b_barracks ; 30 :
33955: LD_ADDR_OWVAR 42
33959: PUSH
33960: LD_INT 5
33962: ST_TO_ADDR
33963: GO 34061
33965: LD_INT 30
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 33984
33973: POP
// bc_type := b_solar_power ; 31 :
33974: LD_ADDR_OWVAR 42
33978: PUSH
33979: LD_INT 27
33981: ST_TO_ADDR
33982: GO 34061
33984: LD_INT 31
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34003
33992: POP
// bc_type := b_oil_power ; 32 :
33993: LD_ADDR_OWVAR 42
33997: PUSH
33998: LD_INT 26
34000: ST_TO_ADDR
34001: GO 34061
34003: LD_INT 32
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34022
34011: POP
// bc_type := b_siberite_power ; 33 :
34012: LD_ADDR_OWVAR 42
34016: PUSH
34017: LD_INT 28
34019: ST_TO_ADDR
34020: GO 34061
34022: LD_INT 33
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34030
34028: GO 34041
34030: POP
// bc_type := b_oil_mine ; 34 :
34031: LD_ADDR_OWVAR 42
34035: PUSH
34036: LD_INT 29
34038: ST_TO_ADDR
34039: GO 34061
34041: LD_INT 34
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34060
34049: POP
// bc_type := b_siberite_mine ; end ;
34050: LD_ADDR_OWVAR 42
34054: PUSH
34055: LD_INT 30
34057: ST_TO_ADDR
34058: GO 34061
34060: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34061: LD_ADDR_VAR 0 8
34065: PUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: LD_VAR 0 6
34075: PPUSH
34076: LD_VAR 0 3
34080: PPUSH
34081: CALL_OW 47
34085: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34086: LD_OWVAR 42
34090: PUSH
34091: LD_INT 32
34093: PUSH
34094: LD_INT 33
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: IN
34101: IFFALSE 34117
// PlaceWeaponTurret ( b , weapon ) ;
34103: LD_VAR 0 8
34107: PPUSH
34108: LD_VAR 0 4
34112: PPUSH
34113: CALL_OW 431
// end ;
34117: LD_VAR 0 7
34121: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34122: LD_INT 0
34124: PPUSH
34125: PPUSH
34126: PPUSH
34127: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34128: LD_ADDR_VAR 0 4
34132: PUSH
34133: LD_INT 22
34135: PUSH
34136: LD_OWVAR 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 30
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 30
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PPUSH
34177: CALL_OW 69
34181: ST_TO_ADDR
// if not tmp then
34182: LD_VAR 0 4
34186: NOT
34187: IFFALSE 34191
// exit ;
34189: GO 34250
// for i in tmp do
34191: LD_ADDR_VAR 0 2
34195: PUSH
34196: LD_VAR 0 4
34200: PUSH
34201: FOR_IN
34202: IFFALSE 34248
// for j = 1 to 3 do
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: DOUBLE
34210: LD_INT 1
34212: DEC
34213: ST_TO_ADDR
34214: LD_INT 3
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34244
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34220: LD_VAR 0 2
34224: PPUSH
34225: CALL_OW 274
34229: PPUSH
34230: LD_VAR 0 3
34234: PPUSH
34235: LD_INT 99999
34237: PPUSH
34238: CALL_OW 277
34242: GO 34217
34244: POP
34245: POP
34246: GO 34201
34248: POP
34249: POP
// end ;
34250: LD_VAR 0 1
34254: RET
// export function hHackSetLevel10 ; var i , j ; begin
34255: LD_INT 0
34257: PPUSH
34258: PPUSH
34259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34260: LD_ADDR_VAR 0 2
34264: PUSH
34265: LD_INT 21
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PPUSH
34275: CALL_OW 69
34279: PUSH
34280: FOR_IN
34281: IFFALSE 34333
// if IsSelected ( i ) then
34283: LD_VAR 0 2
34287: PPUSH
34288: CALL_OW 306
34292: IFFALSE 34331
// begin for j := 1 to 4 do
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: DOUBLE
34300: LD_INT 1
34302: DEC
34303: ST_TO_ADDR
34304: LD_INT 4
34306: PUSH
34307: FOR_TO
34308: IFFALSE 34329
// SetSkill ( i , j , 10 ) ;
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 3
34319: PPUSH
34320: LD_INT 10
34322: PPUSH
34323: CALL_OW 237
34327: GO 34307
34329: POP
34330: POP
// end ;
34331: GO 34280
34333: POP
34334: POP
// end ;
34335: LD_VAR 0 1
34339: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
34344: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34345: LD_ADDR_VAR 0 2
34349: PUSH
34350: LD_INT 22
34352: PUSH
34353: LD_OWVAR 2
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 21
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PPUSH
34376: CALL_OW 69
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34423
// begin for j := 1 to 4 do
34384: LD_ADDR_VAR 0 3
34388: PUSH
34389: DOUBLE
34390: LD_INT 1
34392: DEC
34393: ST_TO_ADDR
34394: LD_INT 4
34396: PUSH
34397: FOR_TO
34398: IFFALSE 34419
// SetSkill ( i , j , 10 ) ;
34400: LD_VAR 0 2
34404: PPUSH
34405: LD_VAR 0 3
34409: PPUSH
34410: LD_INT 10
34412: PPUSH
34413: CALL_OW 237
34417: GO 34397
34419: POP
34420: POP
// end ;
34421: GO 34381
34423: POP
34424: POP
// end ;
34425: LD_VAR 0 1
34429: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34430: LD_INT 0
34432: PPUSH
// uc_side := your_side ;
34433: LD_ADDR_OWVAR 20
34437: PUSH
34438: LD_OWVAR 2
34442: ST_TO_ADDR
// uc_nation := nation ;
34443: LD_ADDR_OWVAR 21
34447: PUSH
34448: LD_VAR 0 1
34452: ST_TO_ADDR
// InitHc ;
34453: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34457: LD_INT 0
34459: PPUSH
34460: LD_VAR 0 2
34464: PPUSH
34465: LD_VAR 0 3
34469: PPUSH
34470: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34474: LD_VAR 0 4
34478: PPUSH
34479: LD_VAR 0 5
34483: PPUSH
34484: CALL_OW 428
34488: PUSH
34489: LD_INT 0
34491: EQUAL
34492: IFFALSE 34516
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34494: CALL_OW 44
34498: PPUSH
34499: LD_VAR 0 4
34503: PPUSH
34504: LD_VAR 0 5
34508: PPUSH
34509: LD_INT 1
34511: PPUSH
34512: CALL_OW 48
// end ;
34516: LD_VAR 0 6
34520: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34521: LD_INT 0
34523: PPUSH
34524: PPUSH
// uc_side := your_side ;
34525: LD_ADDR_OWVAR 20
34529: PUSH
34530: LD_OWVAR 2
34534: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34535: LD_VAR 0 1
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: IN
34562: IFFALSE 34574
// uc_nation := nation_american else
34564: LD_ADDR_OWVAR 21
34568: PUSH
34569: LD_INT 1
34571: ST_TO_ADDR
34572: GO 34617
// if chassis in [ 11 , 12 , 13 , 14 ] then
34574: LD_VAR 0 1
34578: PUSH
34579: LD_INT 11
34581: PUSH
34582: LD_INT 12
34584: PUSH
34585: LD_INT 13
34587: PUSH
34588: LD_INT 14
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: IN
34597: IFFALSE 34609
// uc_nation := nation_arabian else
34599: LD_ADDR_OWVAR 21
34603: PUSH
34604: LD_INT 2
34606: ST_TO_ADDR
34607: GO 34617
// uc_nation := nation_russian ;
34609: LD_ADDR_OWVAR 21
34613: PUSH
34614: LD_INT 3
34616: ST_TO_ADDR
// vc_chassis := chassis ;
34617: LD_ADDR_OWVAR 37
34621: PUSH
34622: LD_VAR 0 1
34626: ST_TO_ADDR
// vc_engine := engine ;
34627: LD_ADDR_OWVAR 39
34631: PUSH
34632: LD_VAR 0 2
34636: ST_TO_ADDR
// vc_control := control ;
34637: LD_ADDR_OWVAR 38
34641: PUSH
34642: LD_VAR 0 3
34646: ST_TO_ADDR
// vc_weapon := weapon ;
34647: LD_ADDR_OWVAR 40
34651: PUSH
34652: LD_VAR 0 4
34656: ST_TO_ADDR
// un := CreateVehicle ;
34657: LD_ADDR_VAR 0 8
34661: PUSH
34662: CALL_OW 45
34666: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34667: LD_VAR 0 8
34671: PPUSH
34672: LD_INT 0
34674: PPUSH
34675: LD_INT 5
34677: PPUSH
34678: CALL_OW 12
34682: PPUSH
34683: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34687: LD_VAR 0 8
34691: PPUSH
34692: LD_VAR 0 5
34696: PPUSH
34697: LD_VAR 0 6
34701: PPUSH
34702: LD_INT 1
34704: PPUSH
34705: CALL_OW 48
// end ;
34709: LD_VAR 0 7
34713: RET
// export hInvincible ; every 1 do
34714: GO 34716
34716: DISABLE
// hInvincible := [ ] ;
34717: LD_ADDR_EXP 109
34721: PUSH
34722: EMPTY
34723: ST_TO_ADDR
34724: END
// every 10 do var i ;
34725: GO 34727
34727: DISABLE
34728: LD_INT 0
34730: PPUSH
// begin enable ;
34731: ENABLE
// if not hInvincible then
34732: LD_EXP 109
34736: NOT
34737: IFFALSE 34741
// exit ;
34739: GO 34785
// for i in hInvincible do
34741: LD_ADDR_VAR 0 1
34745: PUSH
34746: LD_EXP 109
34750: PUSH
34751: FOR_IN
34752: IFFALSE 34783
// if GetLives ( i ) < 1000 then
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 256
34763: PUSH
34764: LD_INT 1000
34766: LESS
34767: IFFALSE 34781
// SetLives ( i , 1000 ) ;
34769: LD_VAR 0 1
34773: PPUSH
34774: LD_INT 1000
34776: PPUSH
34777: CALL_OW 234
34781: GO 34751
34783: POP
34784: POP
// end ;
34785: PPOPN 1
34787: END
// export function hHackInvincible ; var i ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 21
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 21
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: PPUSH
34825: CALL_OW 69
34829: PUSH
34830: FOR_IN
34831: IFFALSE 34892
// if IsSelected ( i ) then
34833: LD_VAR 0 2
34837: PPUSH
34838: CALL_OW 306
34842: IFFALSE 34890
// begin if i in hInvincible then
34844: LD_VAR 0 2
34848: PUSH
34849: LD_EXP 109
34853: IN
34854: IFFALSE 34874
// hInvincible := hInvincible diff i else
34856: LD_ADDR_EXP 109
34860: PUSH
34861: LD_EXP 109
34865: PUSH
34866: LD_VAR 0 2
34870: DIFF
34871: ST_TO_ADDR
34872: GO 34890
// hInvincible := hInvincible union i ;
34874: LD_ADDR_EXP 109
34878: PUSH
34879: LD_EXP 109
34883: PUSH
34884: LD_VAR 0 2
34888: UNION
34889: ST_TO_ADDR
// end ;
34890: GO 34830
34892: POP
34893: POP
// end ;
34894: LD_VAR 0 1
34898: RET
// export function hHackInvisible ; var i , j ; begin
34899: LD_INT 0
34901: PPUSH
34902: PPUSH
34903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34904: LD_ADDR_VAR 0 2
34908: PUSH
34909: LD_INT 21
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PPUSH
34919: CALL_OW 69
34923: PUSH
34924: FOR_IN
34925: IFFALSE 34949
// if IsSelected ( i ) then
34927: LD_VAR 0 2
34931: PPUSH
34932: CALL_OW 306
34936: IFFALSE 34947
// ComForceInvisible ( i ) ;
34938: LD_VAR 0 2
34942: PPUSH
34943: CALL_OW 496
34947: GO 34924
34949: POP
34950: POP
// end ;
34951: LD_VAR 0 1
34955: RET
// export function hHackChangeYourSide ; begin
34956: LD_INT 0
34958: PPUSH
// if your_side = 8 then
34959: LD_OWVAR 2
34963: PUSH
34964: LD_INT 8
34966: EQUAL
34967: IFFALSE 34979
// your_side := 0 else
34969: LD_ADDR_OWVAR 2
34973: PUSH
34974: LD_INT 0
34976: ST_TO_ADDR
34977: GO 34993
// your_side := your_side + 1 ;
34979: LD_ADDR_OWVAR 2
34983: PUSH
34984: LD_OWVAR 2
34988: PUSH
34989: LD_INT 1
34991: PLUS
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 1
34997: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34998: LD_INT 0
35000: PPUSH
35001: PPUSH
35002: PPUSH
// for i in all_units do
35003: LD_ADDR_VAR 0 2
35007: PUSH
35008: LD_OWVAR 3
35012: PUSH
35013: FOR_IN
35014: IFFALSE 35092
// if IsSelected ( i ) then
35016: LD_VAR 0 2
35020: PPUSH
35021: CALL_OW 306
35025: IFFALSE 35090
// begin j := GetSide ( i ) ;
35027: LD_ADDR_VAR 0 3
35031: PUSH
35032: LD_VAR 0 2
35036: PPUSH
35037: CALL_OW 255
35041: ST_TO_ADDR
// if j = 8 then
35042: LD_VAR 0 3
35046: PUSH
35047: LD_INT 8
35049: EQUAL
35050: IFFALSE 35062
// j := 0 else
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_INT 0
35059: ST_TO_ADDR
35060: GO 35076
// j := j + 1 ;
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_VAR 0 3
35071: PUSH
35072: LD_INT 1
35074: PLUS
35075: ST_TO_ADDR
// SetSide ( i , j ) ;
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 3
35085: PPUSH
35086: CALL_OW 235
// end ;
35090: GO 35013
35092: POP
35093: POP
// end ;
35094: LD_VAR 0 1
35098: RET
// export function hHackFog ; begin
35099: LD_INT 0
35101: PPUSH
// FogOff ( true ) ;
35102: LD_INT 1
35104: PPUSH
35105: CALL_OW 344
// end ;
35109: LD_VAR 0 1
35113: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35114: LD_INT 0
35116: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_VAR 0 3
35131: PPUSH
35132: LD_INT 1
35134: PPUSH
35135: LD_INT 1
35137: PPUSH
35138: CALL_OW 483
// CenterOnXY ( x , y ) ;
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_VAR 0 3
35151: PPUSH
35152: CALL_OW 84
// end ;
35156: LD_VAR 0 4
35160: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35161: LD_INT 0
35163: PPUSH
35164: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35165: LD_VAR 0 1
35169: NOT
35170: IFTRUE 35189
35172: PUSH
35173: LD_VAR 0 2
35177: PPUSH
35178: LD_VAR 0 3
35182: PPUSH
35183: CALL_OW 488
35187: NOT
35188: OR
35189: IFTRUE 35224
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 266
35201: PUSH
35202: LD_INT 3
35204: NONEQUAL
35205: IFFALSE 35223
35207: PUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 247
35217: PUSH
35218: LD_INT 1
35220: EQUAL
35221: NOT
35222: AND
35223: OR
35224: IFFALSE 35228
// exit ;
35226: GO 35510
// if GetType ( factory ) = unit_human then
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 247
35237: PUSH
35238: LD_INT 1
35240: EQUAL
35241: IFFALSE 35258
// factory := IsInUnit ( factory ) ;
35243: LD_ADDR_VAR 0 1
35247: PUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: CALL_OW 310
35257: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 266
35267: PUSH
35268: LD_INT 3
35270: NONEQUAL
35271: IFFALSE 35275
// exit ;
35273: GO 35510
// for i := 1 to Count ( factoryWaypoints ) do
35275: LD_ADDR_VAR 0 5
35279: PUSH
35280: DOUBLE
35281: LD_INT 1
35283: DEC
35284: ST_TO_ADDR
35285: LD_EXP 110
35289: PPUSH
35290: CALL 45314 0 1
35294: PUSH
35295: FOR_TO
35296: IFFALSE 35458
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35298: LD_VAR 0 2
35302: PPUSH
35303: LD_VAR 0 3
35307: PPUSH
35308: CALL_OW 428
35312: PUSH
35313: LD_EXP 110
35317: PUSH
35318: LD_VAR 0 5
35322: ARRAY
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: EQUAL
35328: IFFALSE 35360
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35330: LD_ADDR_EXP 110
35334: PUSH
35335: LD_EXP 110
35339: PPUSH
35340: LD_VAR 0 5
35344: PPUSH
35345: CALL_OW 3
35349: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35350: CALL 35515 0 0
// exit ;
35354: POP
35355: POP
35356: GO 35510
// end else
35358: GO 35456
// if factory = factoryWaypoints [ i ] [ 2 ] then
35360: LD_VAR 0 1
35364: PUSH
35365: LD_EXP 110
35369: PUSH
35370: LD_VAR 0 5
35374: ARRAY
35375: PUSH
35376: LD_INT 2
35378: ARRAY
35379: EQUAL
35380: IFFALSE 35456
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35382: LD_ADDR_EXP 110
35386: PUSH
35387: LD_EXP 110
35391: PPUSH
35392: LD_VAR 0 5
35396: PPUSH
35397: CALL_OW 3
35401: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35402: LD_ADDR_EXP 110
35406: PUSH
35407: LD_EXP 110
35411: PPUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL_OW 255
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_VAR 0 2
35431: PUSH
35432: LD_VAR 0 3
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: PPUSH
35443: CALL 81290 0 2
35447: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35448: CALL 35515 0 0
// exit ;
35452: POP
35453: POP
35454: GO 35510
// end ; end ;
35456: GO 35295
35458: POP
35459: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35460: LD_ADDR_EXP 110
35464: PUSH
35465: LD_EXP 110
35469: PPUSH
35470: LD_VAR 0 1
35474: PPUSH
35475: CALL_OW 255
35479: PUSH
35480: LD_VAR 0 1
35484: PUSH
35485: LD_VAR 0 2
35489: PUSH
35490: LD_VAR 0 3
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: PPUSH
35501: CALL 81290 0 2
35505: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35506: CALL 35515 0 0
// end ;
35510: LD_VAR 0 4
35514: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35520: LD_STRING resetFactoryWaypoint();
35522: PPUSH
35523: CALL_OW 559
// if factoryWaypoints then
35527: LD_EXP 110
35531: IFFALSE 35652
// begin list := factoryWaypoints ;
35533: LD_ADDR_VAR 0 3
35537: PUSH
35538: LD_EXP 110
35542: ST_TO_ADDR
// for i := 1 to list do
35543: LD_ADDR_VAR 0 2
35547: PUSH
35548: DOUBLE
35549: LD_INT 1
35551: DEC
35552: ST_TO_ADDR
35553: LD_VAR 0 3
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35650
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35561: LD_STRING setFactoryWaypointXY(
35563: PUSH
35564: LD_VAR 0 3
35568: PUSH
35569: LD_VAR 0 2
35573: ARRAY
35574: PUSH
35575: LD_INT 1
35577: ARRAY
35578: STR
35579: PUSH
35580: LD_STRING ,
35582: STR
35583: PUSH
35584: LD_VAR 0 3
35588: PUSH
35589: LD_VAR 0 2
35593: ARRAY
35594: PUSH
35595: LD_INT 2
35597: ARRAY
35598: STR
35599: PUSH
35600: LD_STRING ,
35602: STR
35603: PUSH
35604: LD_VAR 0 3
35608: PUSH
35609: LD_VAR 0 2
35613: ARRAY
35614: PUSH
35615: LD_INT 3
35617: ARRAY
35618: STR
35619: PUSH
35620: LD_STRING ,
35622: STR
35623: PUSH
35624: LD_VAR 0 3
35628: PUSH
35629: LD_VAR 0 2
35633: ARRAY
35634: PUSH
35635: LD_INT 4
35637: ARRAY
35638: STR
35639: PUSH
35640: LD_STRING )
35642: STR
35643: PPUSH
35644: CALL_OW 559
35648: GO 35558
35650: POP
35651: POP
// end ; end ;
35652: LD_VAR 0 1
35656: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35657: LD_INT 0
35659: PPUSH
// if HexInfo ( x , y ) = warehouse then
35660: LD_VAR 0 2
35664: PPUSH
35665: LD_VAR 0 3
35669: PPUSH
35670: CALL_OW 428
35674: PUSH
35675: LD_VAR 0 1
35679: EQUAL
35680: IFFALSE 35707
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35682: LD_ADDR_EXP 112
35686: PUSH
35687: LD_EXP 112
35691: PPUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: LD_INT 0
35699: PPUSH
35700: CALL_OW 1
35704: ST_TO_ADDR
35705: GO 35758
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35707: LD_ADDR_EXP 112
35711: PUSH
35712: LD_EXP 112
35716: PPUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 255
35731: PUSH
35732: LD_VAR 0 1
35736: PUSH
35737: LD_VAR 0 2
35741: PUSH
35742: LD_VAR 0 3
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PPUSH
35753: CALL_OW 1
35757: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35758: CALL 35767 0 0
// end ;
35762: LD_VAR 0 4
35766: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35767: LD_INT 0
35769: PPUSH
35770: PPUSH
35771: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35772: LD_STRING resetWarehouseGatheringPoints();
35774: PPUSH
35775: CALL_OW 559
// if warehouseGatheringPoints then
35779: LD_EXP 112
35783: IFFALSE 35909
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_EXP 112
35794: PPUSH
35795: CALL 85224 0 1
35799: ST_TO_ADDR
// for i := 1 to list do
35800: LD_ADDR_VAR 0 2
35804: PUSH
35805: DOUBLE
35806: LD_INT 1
35808: DEC
35809: ST_TO_ADDR
35810: LD_VAR 0 3
35814: PUSH
35815: FOR_TO
35816: IFFALSE 35907
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35818: LD_STRING setWarehouseGatheringPointXY(
35820: PUSH
35821: LD_VAR 0 3
35825: PUSH
35826: LD_VAR 0 2
35830: ARRAY
35831: PUSH
35832: LD_INT 1
35834: ARRAY
35835: STR
35836: PUSH
35837: LD_STRING ,
35839: STR
35840: PUSH
35841: LD_VAR 0 3
35845: PUSH
35846: LD_VAR 0 2
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: STR
35856: PUSH
35857: LD_STRING ,
35859: STR
35860: PUSH
35861: LD_VAR 0 3
35865: PUSH
35866: LD_VAR 0 2
35870: ARRAY
35871: PUSH
35872: LD_INT 3
35874: ARRAY
35875: STR
35876: PUSH
35877: LD_STRING ,
35879: STR
35880: PUSH
35881: LD_VAR 0 3
35885: PUSH
35886: LD_VAR 0 2
35890: ARRAY
35891: PUSH
35892: LD_INT 4
35894: ARRAY
35895: STR
35896: PUSH
35897: LD_STRING )
35899: STR
35900: PPUSH
35901: CALL_OW 559
35905: GO 35815
35907: POP
35908: POP
// end ; end ;
35909: LD_VAR 0 1
35913: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35914: LD_EXP 112
35918: IFFALSE 36613
35920: GO 35922
35922: DISABLE
35923: LD_INT 0
35925: PPUSH
35926: PPUSH
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
// begin enable ;
35934: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35935: LD_ADDR_VAR 0 3
35939: PUSH
35940: LD_EXP 112
35944: PPUSH
35945: CALL 85224 0 1
35949: ST_TO_ADDR
// if not list then
35950: LD_VAR 0 3
35954: NOT
35955: IFFALSE 35959
// exit ;
35957: GO 36613
// for i := 1 to list do
35959: LD_ADDR_VAR 0 1
35963: PUSH
35964: DOUBLE
35965: LD_INT 1
35967: DEC
35968: ST_TO_ADDR
35969: LD_VAR 0 3
35973: PUSH
35974: FOR_TO
35975: IFFALSE 36611
// begin depot := list [ i ] [ 2 ] ;
35977: LD_ADDR_VAR 0 8
35981: PUSH
35982: LD_VAR 0 3
35986: PUSH
35987: LD_VAR 0 1
35991: ARRAY
35992: PUSH
35993: LD_INT 2
35995: ARRAY
35996: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35997: LD_ADDR_VAR 0 5
36001: PUSH
36002: LD_VAR 0 3
36006: PUSH
36007: LD_VAR 0 1
36011: ARRAY
36012: PUSH
36013: LD_INT 1
36015: ARRAY
36016: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36017: LD_VAR 0 8
36021: PPUSH
36022: CALL_OW 301
36026: IFTRUE 36045
36028: PUSH
36029: LD_VAR 0 5
36033: PUSH
36034: LD_VAR 0 8
36038: PPUSH
36039: CALL_OW 255
36043: NONEQUAL
36044: OR
36045: IFFALSE 36074
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36047: LD_ADDR_EXP 112
36051: PUSH
36052: LD_EXP 112
36056: PPUSH
36057: LD_VAR 0 8
36061: PPUSH
36062: LD_INT 0
36064: PPUSH
36065: CALL_OW 1
36069: ST_TO_ADDR
// exit ;
36070: POP
36071: POP
36072: GO 36613
// end ; x := list [ i ] [ 3 ] ;
36074: LD_ADDR_VAR 0 6
36078: PUSH
36079: LD_VAR 0 3
36083: PUSH
36084: LD_VAR 0 1
36088: ARRAY
36089: PUSH
36090: LD_INT 3
36092: ARRAY
36093: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36094: LD_ADDR_VAR 0 7
36098: PUSH
36099: LD_VAR 0 3
36103: PUSH
36104: LD_VAR 0 1
36108: ARRAY
36109: PUSH
36110: LD_INT 4
36112: ARRAY
36113: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36114: LD_ADDR_VAR 0 9
36118: PUSH
36119: LD_VAR 0 6
36123: PPUSH
36124: LD_VAR 0 7
36128: PPUSH
36129: LD_INT 16
36131: PPUSH
36132: CALL 83798 0 3
36136: ST_TO_ADDR
// if not cratesNearbyPoint then
36137: LD_VAR 0 9
36141: NOT
36142: IFFALSE 36148
// exit ;
36144: POP
36145: POP
36146: GO 36613
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36148: LD_ADDR_VAR 0 4
36152: PUSH
36153: LD_INT 22
36155: PUSH
36156: LD_VAR 0 5
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: LD_INT 60
36170: PUSH
36171: EMPTY
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 91
36180: PUSH
36181: LD_VAR 0 8
36185: PUSH
36186: LD_INT 6
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 25
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 25
36209: PUSH
36210: LD_INT 16
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: PPUSH
36228: CALL_OW 69
36232: PUSH
36233: LD_VAR 0 8
36237: PPUSH
36238: CALL_OW 313
36242: PPUSH
36243: LD_INT 3
36245: PUSH
36246: LD_INT 60
36248: PUSH
36249: EMPTY
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 25
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 25
36271: PUSH
36272: LD_INT 16
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PPUSH
36288: CALL_OW 72
36292: UNION
36293: ST_TO_ADDR
// if tmp then
36294: LD_VAR 0 4
36298: IFFALSE 36378
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36300: LD_ADDR_VAR 0 4
36304: PUSH
36305: LD_VAR 0 4
36309: PPUSH
36310: LD_INT 3
36312: PPUSH
36313: CALL 81605 0 2
36317: ST_TO_ADDR
// for j in tmp do
36318: LD_ADDR_VAR 0 2
36322: PUSH
36323: LD_VAR 0 4
36327: PUSH
36328: FOR_IN
36329: IFFALSE 36372
// begin if IsInUnit ( j ) then
36331: LD_VAR 0 2
36335: PPUSH
36336: CALL_OW 310
36340: IFFALSE 36351
// ComExit ( j ) ;
36342: LD_VAR 0 2
36346: PPUSH
36347: CALL 81688 0 1
// AddComCollect ( j , x , y ) ;
36351: LD_VAR 0 2
36355: PPUSH
36356: LD_VAR 0 6
36360: PPUSH
36361: LD_VAR 0 7
36365: PPUSH
36366: CALL_OW 177
// end ;
36370: GO 36328
36372: POP
36373: POP
// exit ;
36374: POP
36375: POP
36376: GO 36613
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36378: LD_ADDR_VAR 0 4
36382: PUSH
36383: LD_INT 22
36385: PUSH
36386: LD_VAR 0 5
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 91
36397: PUSH
36398: LD_VAR 0 8
36402: PUSH
36403: LD_INT 8
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 34
36416: PUSH
36417: LD_INT 12
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 34
36426: PUSH
36427: LD_INT 51
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 34
36436: PUSH
36437: LD_INT 32
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 34
36446: PUSH
36447: LD_INT 89
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PPUSH
36466: CALL_OW 69
36470: ST_TO_ADDR
// if tmp then
36471: LD_VAR 0 4
36475: IFFALSE 36609
// begin for j in tmp do
36477: LD_ADDR_VAR 0 2
36481: PUSH
36482: LD_VAR 0 4
36486: PUSH
36487: FOR_IN
36488: IFFALSE 36607
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36490: LD_VAR 0 2
36494: PPUSH
36495: CALL_OW 262
36499: PUSH
36500: LD_INT 3
36502: EQUAL
36503: IFTRUE 36520
36505: PUSH
36506: LD_VAR 0 2
36510: PPUSH
36511: CALL_OW 261
36515: PUSH
36516: LD_INT 20
36518: GREATER
36519: OR
36520: IFFALSE 36534
36522: PUSH
36523: LD_VAR 0 2
36527: PPUSH
36528: CALL_OW 314
36532: NOT
36533: AND
36534: IFFALSE 36564
36536: PUSH
36537: LD_VAR 0 2
36541: PPUSH
36542: CALL_OW 263
36546: PUSH
36547: LD_INT 1
36549: NONEQUAL
36550: IFTRUE 36563
36552: PUSH
36553: LD_VAR 0 2
36557: PPUSH
36558: CALL_OW 311
36562: OR
36563: AND
36564: IFFALSE 36605
// begin ComCollect ( j , x , y ) ;
36566: LD_VAR 0 2
36570: PPUSH
36571: LD_VAR 0 6
36575: PPUSH
36576: LD_VAR 0 7
36580: PPUSH
36581: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36585: LD_VAR 0 2
36589: PPUSH
36590: LD_VAR 0 8
36594: PPUSH
36595: CALL_OW 172
// exit ;
36599: POP
36600: POP
36601: POP
36602: POP
36603: GO 36613
// end ;
36605: GO 36487
36607: POP
36608: POP
// end ; end ;
36609: GO 35974
36611: POP
36612: POP
// end ; end_of_file
36613: PPOPN 9
36615: END
// export function SOS_UnitDestroyed ( un ) ; begin
36616: LD_INT 0
36618: PPUSH
// ComRadiation ( un ) ;
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL 37786 0 1
// end ;
36628: LD_VAR 0 2
36632: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36633: LD_INT 0
36635: PPUSH
// ComRadiation ( un ) ;
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL 37786 0 1
// end ;
36645: LD_VAR 0 2
36649: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36650: LD_INT 0
36652: PPUSH
// end ;
36653: LD_VAR 0 4
36657: RET
// export function SOS_Command ( cmd ) ; begin
36658: LD_INT 0
36660: PPUSH
// end ;
36661: LD_VAR 0 2
36665: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36666: LD_INT 0
36668: PPUSH
// end ;
36669: LD_VAR 0 6
36673: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
36674: LD_INT 0
36676: PPUSH
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
// if not vehicle or not factory then
36681: LD_VAR 0 1
36685: NOT
36686: IFTRUE 36695
36688: PUSH
36689: LD_VAR 0 2
36693: NOT
36694: OR
36695: IFFALSE 36699
// exit ;
36697: GO 37361
// weapon := GetWeapon ( vehicle ) ;
36699: LD_ADDR_VAR 0 7
36703: PUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 264
36713: ST_TO_ADDR
// if weapon = ar_miner then
36714: LD_VAR 0 7
36718: PUSH
36719: LD_INT 81
36721: EQUAL
36722: IFFALSE 36779
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36724: LD_ADDR_EXP 121
36728: PUSH
36729: LD_EXP 121
36733: PPUSH
36734: LD_EXP 121
36738: PUSH
36739: LD_INT 1
36741: PLUS
36742: PPUSH
36743: LD_VAR 0 1
36747: PPUSH
36748: CALL_OW 1
36752: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36753: LD_ADDR_EXP 122
36757: PUSH
36758: LD_EXP 122
36762: PPUSH
36763: LD_EXP 122
36767: PUSH
36768: LD_INT 1
36770: PLUS
36771: PPUSH
36772: EMPTY
36773: PPUSH
36774: CALL_OW 1
36778: ST_TO_ADDR
// end ; if not factoryWaypoints then
36779: LD_EXP 110
36783: NOT
36784: IFFALSE 36788
// exit ;
36786: GO 37361
// for i := 1 to Count ( factoryWaypoints ) do
36788: LD_ADDR_VAR 0 4
36792: PUSH
36793: DOUBLE
36794: LD_INT 1
36796: DEC
36797: ST_TO_ADDR
36798: LD_EXP 110
36802: PPUSH
36803: CALL 45314 0 1
36807: PUSH
36808: FOR_TO
36809: IFFALSE 37359
// if factoryWaypoints [ i ] [ 2 ] = factory then
36811: LD_EXP 110
36815: PUSH
36816: LD_VAR 0 4
36820: ARRAY
36821: PUSH
36822: LD_INT 2
36824: ARRAY
36825: PUSH
36826: LD_VAR 0 2
36830: EQUAL
36831: IFFALSE 37357
// begin if GetControl ( vehicle ) = control_manual then
36833: LD_VAR 0 1
36837: PPUSH
36838: CALL_OW 263
36842: PUSH
36843: LD_INT 1
36845: EQUAL
36846: IFFALSE 37210
// begin driver := IsDrivenBy ( vehicle ) ;
36848: LD_ADDR_VAR 0 5
36852: PUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 311
36862: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36863: LD_VAR 0 5
36867: PUSH
36868: LD_EXP 111
36872: IN
36873: IFTRUE 36887
36875: PUSH
36876: LD_VAR 0 1
36880: PUSH
36881: LD_EXP 111
36885: IN
36886: OR
36887: IFFALSE 36893
// exit ;
36889: POP
36890: POP
36891: GO 37361
// if not HasTask ( driver ) then
36893: LD_VAR 0 5
36897: PPUSH
36898: CALL_OW 314
36902: NOT
36903: IFFALSE 37208
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36905: LD_ADDR_EXP 111
36909: PUSH
36910: LD_EXP 111
36914: PPUSH
36915: LD_VAR 0 5
36919: PPUSH
36920: CALL 81290 0 2
36924: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36925: LD_ADDR_EXP 111
36929: PUSH
36930: LD_EXP 111
36934: PPUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL 81290 0 2
36944: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36945: LD_ADDR_VAR 0 6
36949: PUSH
36950: LD_EXP 110
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: PUSH
36961: LD_INT 3
36963: ARRAY
36964: PPUSH
36965: LD_EXP 110
36969: PUSH
36970: LD_VAR 0 4
36974: ARRAY
36975: PUSH
36976: LD_INT 4
36978: ARRAY
36979: PPUSH
36980: CALL_OW 428
36984: ST_TO_ADDR
// if hex then
36985: LD_VAR 0 6
36989: IFFALSE 37007
// ComMoveUnit ( driver , hex ) else
36991: LD_VAR 0 5
36995: PPUSH
36996: LD_VAR 0 6
37000: PPUSH
37001: CALL_OW 112
37005: GO 37091
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
37007: LD_VAR 0 1
37011: PPUSH
37012: LD_EXP 110
37016: PUSH
37017: LD_VAR 0 4
37021: ARRAY
37022: PUSH
37023: LD_INT 3
37025: ARRAY
37026: PPUSH
37027: LD_EXP 110
37031: PUSH
37032: LD_VAR 0 4
37036: ARRAY
37037: PUSH
37038: LD_INT 4
37040: ARRAY
37041: PPUSH
37042: CALL_OW 297
37046: PUSH
37047: LD_INT 0
37049: GREATER
37050: IFFALSE 37091
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37052: LD_VAR 0 5
37056: PPUSH
37057: LD_EXP 110
37061: PUSH
37062: LD_VAR 0 4
37066: ARRAY
37067: PUSH
37068: LD_INT 3
37070: ARRAY
37071: PPUSH
37072: LD_EXP 110
37076: PUSH
37077: LD_VAR 0 4
37081: ARRAY
37082: PUSH
37083: LD_INT 4
37085: ARRAY
37086: PPUSH
37087: CALL_OW 111
// AddComExitVehicle ( driver ) ;
37091: LD_VAR 0 5
37095: PPUSH
37096: CALL_OW 181
// if Multiplayer then
37100: LD_OWVAR 4
37104: IFFALSE 37153
// begin repeat wait ( 10 ) ;
37106: LD_INT 10
37108: PPUSH
37109: CALL_OW 67
// until not IsInUnit ( driver ) ;
37113: LD_VAR 0 5
37117: PPUSH
37118: CALL_OW 310
37122: NOT
37123: IFFALSE 37106
// if not HasTask ( driver ) then
37125: LD_VAR 0 5
37129: PPUSH
37130: CALL_OW 314
37134: NOT
37135: IFFALSE 37151
// ComEnterUnit ( driver , factory ) ;
37137: LD_VAR 0 5
37141: PPUSH
37142: LD_VAR 0 2
37146: PPUSH
37147: CALL_OW 120
// end else
37151: GO 37167
// AddComEnterUnit ( driver , factory ) ;
37153: LD_VAR 0 5
37157: PPUSH
37158: LD_VAR 0 2
37162: PPUSH
37163: CALL_OW 180
// wait ( 0 0$1 ) ;
37167: LD_INT 35
37169: PPUSH
37170: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
37174: LD_ADDR_EXP 111
37178: PUSH
37179: LD_EXP 111
37183: PUSH
37184: LD_VAR 0 5
37188: DIFF
37189: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
37190: LD_ADDR_EXP 111
37194: PUSH
37195: LD_EXP 111
37199: PUSH
37200: LD_VAR 0 1
37204: DIFF
37205: ST_TO_ADDR
// break ;
37206: GO 37359
// end ; end else
37208: GO 37357
// if GetControl ( vehicle ) = control_remote then
37210: LD_VAR 0 1
37214: PPUSH
37215: CALL_OW 263
37219: PUSH
37220: LD_INT 2
37222: EQUAL
37223: IFFALSE 37309
// begin wait ( 0 0$2 ) ;
37225: LD_INT 70
37227: PPUSH
37228: CALL_OW 67
// repeat wait ( 10 ) ;
37232: LD_INT 10
37234: PPUSH
37235: CALL_OW 67
// Connect ( vehicle ) ;
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL 51592 0 1
// until IsControledBy ( vehicle ) ;
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 312
37257: IFFALSE 37232
// wait ( 10 ) ;
37259: LD_INT 10
37261: PPUSH
37262: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_EXP 110
37275: PUSH
37276: LD_VAR 0 4
37280: ARRAY
37281: PUSH
37282: LD_INT 3
37284: ARRAY
37285: PPUSH
37286: LD_EXP 110
37290: PUSH
37291: LD_VAR 0 4
37295: ARRAY
37296: PUSH
37297: LD_INT 4
37299: ARRAY
37300: PPUSH
37301: CALL_OW 111
// break ;
37305: GO 37359
// end else
37307: GO 37357
// begin wait ( 0 0$3 ) ;
37309: LD_INT 105
37311: PPUSH
37312: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37316: LD_VAR 0 1
37320: PPUSH
37321: LD_EXP 110
37325: PUSH
37326: LD_VAR 0 4
37330: ARRAY
37331: PUSH
37332: LD_INT 3
37334: ARRAY
37335: PPUSH
37336: LD_EXP 110
37340: PUSH
37341: LD_VAR 0 4
37345: ARRAY
37346: PUSH
37347: LD_INT 4
37349: ARRAY
37350: PPUSH
37351: CALL_OW 111
// break ;
37355: GO 37359
// end ; end ;
37357: GO 36808
37359: POP
37360: POP
// end ;
37361: LD_VAR 0 3
37365: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37366: LD_INT 0
37368: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37369: LD_VAR 0 1
37373: PUSH
37374: LD_INT 250
37376: EQUAL
37377: IFFALSE 37394
37379: PUSH
37380: LD_VAR 0 2
37384: PPUSH
37385: CALL_OW 264
37389: PUSH
37390: LD_INT 81
37392: EQUAL
37393: AND
37394: IFFALSE 37415
// MinerPlaceMine ( unit , x , y ) ;
37396: LD_VAR 0 2
37400: PPUSH
37401: LD_VAR 0 4
37405: PPUSH
37406: LD_VAR 0 5
37410: PPUSH
37411: CALL 40761 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37415: LD_VAR 0 1
37419: PUSH
37420: LD_INT 251
37422: EQUAL
37423: IFFALSE 37440
37425: PUSH
37426: LD_VAR 0 2
37430: PPUSH
37431: CALL_OW 264
37435: PUSH
37436: LD_INT 81
37438: EQUAL
37439: AND
37440: IFFALSE 37461
// MinerDetonateMine ( unit , x , y ) ;
37442: LD_VAR 0 2
37446: PPUSH
37447: LD_VAR 0 4
37451: PPUSH
37452: LD_VAR 0 5
37456: PPUSH
37457: CALL 41168 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37461: LD_VAR 0 1
37465: PUSH
37466: LD_INT 252
37468: EQUAL
37469: IFFALSE 37486
37471: PUSH
37472: LD_VAR 0 2
37476: PPUSH
37477: CALL_OW 264
37481: PUSH
37482: LD_INT 81
37484: EQUAL
37485: AND
37486: IFFALSE 37507
// MinerCreateMinefield ( unit , x , y ) ;
37488: LD_VAR 0 2
37492: PPUSH
37493: LD_VAR 0 4
37497: PPUSH
37498: LD_VAR 0 5
37502: PPUSH
37503: CALL 41400 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37507: LD_VAR 0 1
37511: PUSH
37512: LD_INT 253
37514: EQUAL
37515: IFFALSE 37532
37517: PUSH
37518: LD_VAR 0 2
37522: PPUSH
37523: CALL_OW 257
37527: PUSH
37528: LD_INT 5
37530: EQUAL
37531: AND
37532: IFFALSE 37553
// ComBinocular ( unit , x , y ) ;
37534: LD_VAR 0 2
37538: PPUSH
37539: LD_VAR 0 4
37543: PPUSH
37544: LD_VAR 0 5
37548: PPUSH
37549: CALL 41775 0 3
// if selectedUnit then
37553: LD_VAR 0 3
37557: IFFALSE 37617
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37559: LD_VAR 0 1
37563: PUSH
37564: LD_INT 254
37566: EQUAL
37567: IFFALSE 37584
37569: PUSH
37570: LD_VAR 0 2
37574: PPUSH
37575: CALL_OW 264
37579: PUSH
37580: LD_INT 99
37582: EQUAL
37583: AND
37584: IFFALSE 37601
37586: PUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 263
37596: PUSH
37597: LD_INT 3
37599: EQUAL
37600: AND
37601: IFFALSE 37617
// HackDestroyVehicle ( unit , selectedUnit ) ;
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: CALL 39951 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37617: LD_VAR 0 1
37621: PUSH
37622: LD_INT 255
37624: EQUAL
37625: IFFALSE 37649
37627: PUSH
37628: LD_VAR 0 2
37632: PPUSH
37633: CALL_OW 264
37637: PUSH
37638: LD_INT 14
37640: PUSH
37641: LD_INT 53
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: IN
37648: AND
37649: IFFALSE 37667
37651: PUSH
37652: LD_VAR 0 4
37656: PPUSH
37657: LD_VAR 0 5
37661: PPUSH
37662: CALL_OW 488
37666: AND
37667: IFFALSE 37691
// CutTreeXYR ( unit , x , y , 12 ) ;
37669: LD_VAR 0 2
37673: PPUSH
37674: LD_VAR 0 4
37678: PPUSH
37679: LD_VAR 0 5
37683: PPUSH
37684: LD_INT 12
37686: PPUSH
37687: CALL 37882 0 4
// if cmd = 256 then
37691: LD_VAR 0 1
37695: PUSH
37696: LD_INT 256
37698: EQUAL
37699: IFFALSE 37720
// SetFactoryWaypoint ( unit , x , y ) ;
37701: LD_VAR 0 2
37705: PPUSH
37706: LD_VAR 0 4
37710: PPUSH
37711: LD_VAR 0 5
37715: PPUSH
37716: CALL 35161 0 3
// if cmd = 257 then
37720: LD_VAR 0 1
37724: PUSH
37725: LD_INT 257
37727: EQUAL
37728: IFFALSE 37749
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37730: LD_VAR 0 2
37734: PPUSH
37735: LD_VAR 0 4
37739: PPUSH
37740: LD_VAR 0 5
37744: PPUSH
37745: CALL 35657 0 3
// if cmd = 258 then
37749: LD_VAR 0 1
37753: PUSH
37754: LD_INT 258
37756: EQUAL
37757: IFFALSE 37781
// BurnTreeXYR ( unit , x , y , 8 ) ;
37759: LD_VAR 0 2
37763: PPUSH
37764: LD_VAR 0 4
37768: PPUSH
37769: LD_VAR 0 5
37773: PPUSH
37774: LD_INT 8
37776: PPUSH
37777: CALL 38304 0 4
// end ;
37781: LD_VAR 0 6
37785: RET
// export function ComRadiation ( un ) ; var eff ; begin
37786: LD_INT 0
37788: PPUSH
37789: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 264
37799: PUSH
37800: LD_INT 91
37802: NONEQUAL
37803: IFFALSE 37807
// exit ;
37805: GO 37877
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37807: LD_INT 68
37809: PPUSH
37810: LD_VAR 0 1
37814: PPUSH
37815: CALL_OW 255
37819: PPUSH
37820: CALL_OW 321
37824: PUSH
37825: LD_INT 2
37827: EQUAL
37828: IFFALSE 37840
// eff := 50 else
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_INT 50
37837: ST_TO_ADDR
37838: GO 37848
// eff := 25 ;
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_INT 25
37847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 250
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 251
37867: PPUSH
37868: LD_VAR 0 3
37872: PPUSH
37873: CALL_OW 495
// end ;
37877: LD_VAR 0 2
37881: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37882: LD_INT 0
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 302
37902: NOT
37903: IFTRUE 37922
37905: PUSH
37906: LD_VAR 0 2
37910: PPUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: CALL_OW 488
37920: NOT
37921: OR
37922: IFTRUE 37931
37924: PUSH
37925: LD_VAR 0 4
37929: NOT
37930: OR
37931: IFFALSE 37935
// exit ;
37933: GO 38299
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 437
37944: PPUSH
37945: CALL 45314 0 1
37949: PUSH
37950: LD_INT 10
37952: GREATER
37953: IFFALSE 37957
// exit ;
37955: GO 38299
// list := [ ] ;
37957: LD_ADDR_VAR 0 13
37961: PUSH
37962: EMPTY
37963: ST_TO_ADDR
// if x - r < 0 then
37964: LD_VAR 0 2
37968: PUSH
37969: LD_VAR 0 4
37973: MINUS
37974: PUSH
37975: LD_INT 0
37977: LESS
37978: IFFALSE 37990
// min_x := 0 else
37980: LD_ADDR_VAR 0 7
37984: PUSH
37985: LD_INT 0
37987: ST_TO_ADDR
37988: GO 38006
// min_x := x - r ;
37990: LD_ADDR_VAR 0 7
37994: PUSH
37995: LD_VAR 0 2
37999: PUSH
38000: LD_VAR 0 4
38004: MINUS
38005: ST_TO_ADDR
// if y - r < 0 then
38006: LD_VAR 0 3
38010: PUSH
38011: LD_VAR 0 4
38015: MINUS
38016: PUSH
38017: LD_INT 0
38019: LESS
38020: IFFALSE 38032
// min_y := 0 else
38022: LD_ADDR_VAR 0 8
38026: PUSH
38027: LD_INT 0
38029: ST_TO_ADDR
38030: GO 38048
// min_y := y - r ;
38032: LD_ADDR_VAR 0 8
38036: PUSH
38037: LD_VAR 0 3
38041: PUSH
38042: LD_VAR 0 4
38046: MINUS
38047: ST_TO_ADDR
// max_x := x + r ;
38048: LD_ADDR_VAR 0 9
38052: PUSH
38053: LD_VAR 0 2
38057: PUSH
38058: LD_VAR 0 4
38062: PLUS
38063: ST_TO_ADDR
// max_y := y + r ;
38064: LD_ADDR_VAR 0 10
38068: PUSH
38069: LD_VAR 0 3
38073: PUSH
38074: LD_VAR 0 4
38078: PLUS
38079: ST_TO_ADDR
// for _x = min_x to max_x do
38080: LD_ADDR_VAR 0 11
38084: PUSH
38085: DOUBLE
38086: LD_VAR 0 7
38090: DEC
38091: ST_TO_ADDR
38092: LD_VAR 0 9
38096: PUSH
38097: FOR_TO
38098: IFFALSE 38217
// for _y = min_y to max_y do
38100: LD_ADDR_VAR 0 12
38104: PUSH
38105: DOUBLE
38106: LD_VAR 0 8
38110: DEC
38111: ST_TO_ADDR
38112: LD_VAR 0 10
38116: PUSH
38117: FOR_TO
38118: IFFALSE 38213
// begin if not ValidHex ( _x , _y ) then
38120: LD_VAR 0 11
38124: PPUSH
38125: LD_VAR 0 12
38129: PPUSH
38130: CALL_OW 488
38134: NOT
38135: IFFALSE 38139
// continue ;
38137: GO 38117
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38139: LD_VAR 0 11
38143: PPUSH
38144: LD_VAR 0 12
38148: PPUSH
38149: CALL_OW 351
38153: IFFALSE 38171
38155: PUSH
38156: LD_VAR 0 11
38160: PPUSH
38161: LD_VAR 0 12
38165: PPUSH
38166: CALL_OW 554
38170: AND
38171: IFFALSE 38211
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38173: LD_ADDR_VAR 0 13
38177: PUSH
38178: LD_VAR 0 13
38182: PPUSH
38183: LD_VAR 0 13
38187: PUSH
38188: LD_INT 1
38190: PLUS
38191: PPUSH
38192: LD_VAR 0 11
38196: PUSH
38197: LD_VAR 0 12
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 2
38210: ST_TO_ADDR
// end ;
38211: GO 38117
38213: POP
38214: POP
38215: GO 38097
38217: POP
38218: POP
// if not list then
38219: LD_VAR 0 13
38223: NOT
38224: IFFALSE 38228
// exit ;
38226: GO 38299
// for i in list do
38228: LD_ADDR_VAR 0 6
38232: PUSH
38233: LD_VAR 0 13
38237: PUSH
38238: FOR_IN
38239: IFFALSE 38297
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38241: LD_VAR 0 1
38245: PPUSH
38246: LD_STRING M
38248: PUSH
38249: LD_VAR 0 6
38253: PUSH
38254: LD_INT 1
38256: ARRAY
38257: PUSH
38258: LD_VAR 0 6
38262: PUSH
38263: LD_INT 2
38265: ARRAY
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: PPUSH
38291: CALL_OW 447
38295: GO 38238
38297: POP
38298: POP
// end ;
38299: LD_VAR 0 5
38303: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38304: LD_INT 0
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 302
38325: NOT
38326: IFTRUE 38345
38328: PUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 3
38338: PPUSH
38339: CALL_OW 488
38343: NOT
38344: OR
38345: IFTRUE 38354
38347: PUSH
38348: LD_VAR 0 4
38352: NOT
38353: OR
38354: IFFALSE 38358
// exit ;
38356: GO 38897
// if Count ( GetTaskList ( flame ) ) > 10 then
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 437
38367: PPUSH
38368: CALL 45314 0 1
38372: PUSH
38373: LD_INT 10
38375: GREATER
38376: IFFALSE 38380
// exit ;
38378: GO 38897
// list := [ ] ;
38380: LD_ADDR_VAR 0 13
38384: PUSH
38385: EMPTY
38386: ST_TO_ADDR
// if x - r < 0 then
38387: LD_VAR 0 2
38391: PUSH
38392: LD_VAR 0 4
38396: MINUS
38397: PUSH
38398: LD_INT 0
38400: LESS
38401: IFFALSE 38413
// min_x := 0 else
38403: LD_ADDR_VAR 0 7
38407: PUSH
38408: LD_INT 0
38410: ST_TO_ADDR
38411: GO 38429
// min_x := x - r ;
38413: LD_ADDR_VAR 0 7
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_VAR 0 4
38427: MINUS
38428: ST_TO_ADDR
// if y - r < 0 then
38429: LD_VAR 0 3
38433: PUSH
38434: LD_VAR 0 4
38438: MINUS
38439: PUSH
38440: LD_INT 0
38442: LESS
38443: IFFALSE 38455
// min_y := 0 else
38445: LD_ADDR_VAR 0 8
38449: PUSH
38450: LD_INT 0
38452: ST_TO_ADDR
38453: GO 38471
// min_y := y - r ;
38455: LD_ADDR_VAR 0 8
38459: PUSH
38460: LD_VAR 0 3
38464: PUSH
38465: LD_VAR 0 4
38469: MINUS
38470: ST_TO_ADDR
// max_x := x + r ;
38471: LD_ADDR_VAR 0 9
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_VAR 0 4
38485: PLUS
38486: ST_TO_ADDR
// max_y := y + r ;
38487: LD_ADDR_VAR 0 10
38491: PUSH
38492: LD_VAR 0 3
38496: PUSH
38497: LD_VAR 0 4
38501: PLUS
38502: ST_TO_ADDR
// for _x = min_x to max_x do
38503: LD_ADDR_VAR 0 11
38507: PUSH
38508: DOUBLE
38509: LD_VAR 0 7
38513: DEC
38514: ST_TO_ADDR
38515: LD_VAR 0 9
38519: PUSH
38520: FOR_TO
38521: IFFALSE 38640
// for _y = min_y to max_y do
38523: LD_ADDR_VAR 0 12
38527: PUSH
38528: DOUBLE
38529: LD_VAR 0 8
38533: DEC
38534: ST_TO_ADDR
38535: LD_VAR 0 10
38539: PUSH
38540: FOR_TO
38541: IFFALSE 38636
// begin if not ValidHex ( _x , _y ) then
38543: LD_VAR 0 11
38547: PPUSH
38548: LD_VAR 0 12
38552: PPUSH
38553: CALL_OW 488
38557: NOT
38558: IFFALSE 38562
// continue ;
38560: GO 38540
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38562: LD_VAR 0 11
38566: PPUSH
38567: LD_VAR 0 12
38571: PPUSH
38572: CALL_OW 351
38576: IFFALSE 38594
38578: PUSH
38579: LD_VAR 0 11
38583: PPUSH
38584: LD_VAR 0 12
38588: PPUSH
38589: CALL_OW 554
38593: AND
38594: IFFALSE 38634
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38596: LD_ADDR_VAR 0 13
38600: PUSH
38601: LD_VAR 0 13
38605: PPUSH
38606: LD_VAR 0 13
38610: PUSH
38611: LD_INT 1
38613: PLUS
38614: PPUSH
38615: LD_VAR 0 11
38619: PUSH
38620: LD_VAR 0 12
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PPUSH
38629: CALL_OW 2
38633: ST_TO_ADDR
// end ;
38634: GO 38540
38636: POP
38637: POP
38638: GO 38520
38640: POP
38641: POP
// if not list then
38642: LD_VAR 0 13
38646: NOT
38647: IFFALSE 38651
// exit ;
38649: GO 38897
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38651: LD_ADDR_VAR 0 13
38655: PUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: LD_VAR 0 13
38665: PPUSH
38666: LD_INT 1
38668: PPUSH
38669: LD_INT 1
38671: PPUSH
38672: CALL 48720 0 4
38676: ST_TO_ADDR
// ComStop ( flame ) ;
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 141
// for i in list do
38686: LD_ADDR_VAR 0 6
38690: PUSH
38691: LD_VAR 0 13
38695: PUSH
38696: FOR_IN
38697: IFFALSE 38728
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38699: LD_VAR 0 1
38703: PPUSH
38704: LD_VAR 0 6
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: PPUSH
38713: LD_VAR 0 6
38717: PUSH
38718: LD_INT 2
38720: ARRAY
38721: PPUSH
38722: CALL_OW 176
38726: GO 38696
38728: POP
38729: POP
// repeat wait ( 0 0$1 ) ;
38730: LD_INT 35
38732: PPUSH
38733: CALL_OW 67
// task := GetTaskList ( flame ) ;
38737: LD_ADDR_VAR 0 14
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 437
38751: ST_TO_ADDR
// if not task then
38752: LD_VAR 0 14
38756: NOT
38757: IFFALSE 38761
// exit ;
38759: GO 38897
// if task [ 1 ] [ 1 ] <> | then
38761: LD_VAR 0 14
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: PUSH
38774: LD_STRING |
38776: NONEQUAL
38777: IFFALSE 38781
// exit ;
38779: GO 38897
// _x := task [ 1 ] [ 2 ] ;
38781: LD_ADDR_VAR 0 11
38785: PUSH
38786: LD_VAR 0 14
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PUSH
38795: LD_INT 2
38797: ARRAY
38798: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38799: LD_ADDR_VAR 0 12
38803: PUSH
38804: LD_VAR 0 14
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: PUSH
38813: LD_INT 3
38815: ARRAY
38816: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38817: LD_VAR 0 11
38821: PPUSH
38822: LD_VAR 0 12
38826: PPUSH
38827: CALL_OW 351
38831: NOT
38832: IFTRUE 38851
38834: PUSH
38835: LD_VAR 0 11
38839: PPUSH
38840: LD_VAR 0 12
38844: PPUSH
38845: CALL_OW 554
38849: NOT
38850: OR
38851: IFFALSE 38885
// begin task := Delete ( task , 1 ) ;
38853: LD_ADDR_VAR 0 14
38857: PUSH
38858: LD_VAR 0 14
38862: PPUSH
38863: LD_INT 1
38865: PPUSH
38866: CALL_OW 3
38870: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_VAR 0 14
38880: PPUSH
38881: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 314
38894: NOT
38895: IFFALSE 38730
// end ;
38897: LD_VAR 0 5
38901: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38902: LD_EXP 114
38906: NOT
38907: IFFALSE 38957
38909: GO 38911
38911: DISABLE
// begin initHack := true ;
38912: LD_ADDR_EXP 114
38916: PUSH
38917: LD_INT 1
38919: ST_TO_ADDR
// hackTanks := [ ] ;
38920: LD_ADDR_EXP 115
38924: PUSH
38925: EMPTY
38926: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38927: LD_ADDR_EXP 116
38931: PUSH
38932: EMPTY
38933: ST_TO_ADDR
// hackLimit := 3 ;
38934: LD_ADDR_EXP 117
38938: PUSH
38939: LD_INT 3
38941: ST_TO_ADDR
// hackDist := 12 ;
38942: LD_ADDR_EXP 118
38946: PUSH
38947: LD_INT 12
38949: ST_TO_ADDR
// hackCounter := [ ] ;
38950: LD_ADDR_EXP 119
38954: PUSH
38955: EMPTY
38956: ST_TO_ADDR
// end ;
38957: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38958: LD_EXP 114
38962: IFFALSE 38980
38964: PUSH
38965: LD_INT 34
38967: PUSH
38968: LD_INT 99
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 69
38979: AND
38980: IFFALSE 39233
38982: GO 38984
38984: DISABLE
38985: LD_INT 0
38987: PPUSH
38988: PPUSH
// begin enable ;
38989: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38990: LD_ADDR_VAR 0 1
38994: PUSH
38995: LD_INT 34
38997: PUSH
38998: LD_INT 99
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PPUSH
39005: CALL_OW 69
39009: PUSH
39010: FOR_IN
39011: IFFALSE 39231
// begin if not i in hackTanks then
39013: LD_VAR 0 1
39017: PUSH
39018: LD_EXP 115
39022: IN
39023: NOT
39024: IFFALSE 39107
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39026: LD_ADDR_EXP 115
39030: PUSH
39031: LD_EXP 115
39035: PPUSH
39036: LD_EXP 115
39040: PUSH
39041: LD_INT 1
39043: PLUS
39044: PPUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 1
39054: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39055: LD_ADDR_EXP 116
39059: PUSH
39060: LD_EXP 116
39064: PPUSH
39065: LD_EXP 116
39069: PUSH
39070: LD_INT 1
39072: PLUS
39073: PPUSH
39074: EMPTY
39075: PPUSH
39076: CALL_OW 1
39080: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39081: LD_ADDR_EXP 119
39085: PUSH
39086: LD_EXP 119
39090: PPUSH
39091: LD_EXP 119
39095: PUSH
39096: LD_INT 1
39098: PLUS
39099: PPUSH
39100: EMPTY
39101: PPUSH
39102: CALL_OW 1
39106: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 302
39116: NOT
39117: IFFALSE 39130
// begin HackUnlinkAll ( i ) ;
39119: LD_VAR 0 1
39123: PPUSH
39124: CALL 39236 0 1
// continue ;
39128: GO 39010
// end ; HackCheckCapturedStatus ( i ) ;
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL 39681 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39139: LD_ADDR_VAR 0 2
39143: PUSH
39144: LD_INT 81
39146: PUSH
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 255
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 33
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 91
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_EXP 118
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 50
39191: PUSH
39192: EMPTY
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: PPUSH
39201: CALL_OW 69
39205: ST_TO_ADDR
// if not tmp then
39206: LD_VAR 0 2
39210: NOT
39211: IFFALSE 39215
// continue ;
39213: GO 39010
// HackLink ( i , tmp ) ;
39215: LD_VAR 0 1
39219: PPUSH
39220: LD_VAR 0 2
39224: PPUSH
39225: CALL 39372 0 2
// end ;
39229: GO 39010
39231: POP
39232: POP
// end ;
39233: PPOPN 2
39235: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39236: LD_INT 0
39238: PPUSH
39239: PPUSH
39240: PPUSH
// if not hack in hackTanks then
39241: LD_VAR 0 1
39245: PUSH
39246: LD_EXP 115
39250: IN
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 39367
// index := GetElementIndex ( hackTanks , hack ) ;
39256: LD_ADDR_VAR 0 4
39260: PUSH
39261: LD_EXP 115
39265: PPUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL 48015 0 2
39275: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39276: LD_EXP 116
39280: PUSH
39281: LD_VAR 0 4
39285: ARRAY
39286: IFFALSE 39367
// begin for i in hackTanksCaptured [ index ] do
39288: LD_ADDR_VAR 0 3
39292: PUSH
39293: LD_EXP 116
39297: PUSH
39298: LD_VAR 0 4
39302: ARRAY
39303: PUSH
39304: FOR_IN
39305: IFFALSE 39331
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39307: LD_VAR 0 3
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PPUSH
39316: LD_VAR 0 3
39320: PUSH
39321: LD_INT 2
39323: ARRAY
39324: PPUSH
39325: CALL_OW 235
39329: GO 39304
39331: POP
39332: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39333: LD_ADDR_EXP 116
39337: PUSH
39338: LD_EXP 116
39342: PPUSH
39343: LD_VAR 0 4
39347: PPUSH
39348: EMPTY
39349: PPUSH
39350: CALL_OW 1
39354: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39355: LD_VAR 0 1
39359: PPUSH
39360: LD_INT 0
39362: PPUSH
39363: CALL_OW 505
// end ; end ;
39367: LD_VAR 0 2
39371: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39372: LD_INT 0
39374: PPUSH
39375: PPUSH
39376: PPUSH
// if not hack in hackTanks or not vehicles then
39377: LD_VAR 0 1
39381: PUSH
39382: LD_EXP 115
39386: IN
39387: NOT
39388: IFTRUE 39397
39390: PUSH
39391: LD_VAR 0 2
39395: NOT
39396: OR
39397: IFFALSE 39401
// exit ;
39399: GO 39676
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39401: LD_ADDR_VAR 0 2
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: LD_INT 1
39418: PPUSH
39419: LD_INT 1
39421: PPUSH
39422: CALL 48667 0 4
39426: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39427: LD_ADDR_VAR 0 5
39431: PUSH
39432: LD_EXP 115
39436: PPUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL 48015 0 2
39446: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39447: LD_EXP 116
39451: PUSH
39452: LD_VAR 0 5
39456: ARRAY
39457: PUSH
39458: LD_EXP 117
39462: LESS
39463: IFFALSE 39652
// begin for i := 1 to vehicles do
39465: LD_ADDR_VAR 0 4
39469: PUSH
39470: DOUBLE
39471: LD_INT 1
39473: DEC
39474: ST_TO_ADDR
39475: LD_VAR 0 2
39479: PUSH
39480: FOR_TO
39481: IFFALSE 39650
// begin if hackTanksCaptured [ index ] = hackLimit then
39483: LD_EXP 116
39487: PUSH
39488: LD_VAR 0 5
39492: ARRAY
39493: PUSH
39494: LD_EXP 117
39498: EQUAL
39499: IFFALSE 39503
// break ;
39501: GO 39650
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39503: LD_ADDR_EXP 119
39507: PUSH
39508: LD_EXP 119
39512: PPUSH
39513: LD_VAR 0 5
39517: PPUSH
39518: LD_EXP 119
39522: PUSH
39523: LD_VAR 0 5
39527: ARRAY
39528: PUSH
39529: LD_INT 1
39531: PLUS
39532: PPUSH
39533: CALL_OW 1
39537: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39538: LD_ADDR_EXP 116
39542: PUSH
39543: LD_EXP 116
39547: PPUSH
39548: LD_VAR 0 5
39552: PUSH
39553: LD_EXP 116
39557: PUSH
39558: LD_VAR 0 5
39562: ARRAY
39563: PUSH
39564: LD_INT 1
39566: PLUS
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PPUSH
39572: LD_VAR 0 2
39576: PUSH
39577: LD_VAR 0 4
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 2
39587: PUSH
39588: LD_VAR 0 4
39592: ARRAY
39593: PPUSH
39594: CALL_OW 255
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PPUSH
39603: CALL 48232 0 3
39607: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39608: LD_VAR 0 2
39612: PUSH
39613: LD_VAR 0 4
39617: ARRAY
39618: PPUSH
39619: LD_VAR 0 1
39623: PPUSH
39624: CALL_OW 255
39628: PPUSH
39629: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39633: LD_VAR 0 2
39637: PUSH
39638: LD_VAR 0 4
39642: ARRAY
39643: PPUSH
39644: CALL_OW 141
// end ;
39648: GO 39480
39650: POP
39651: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39652: LD_VAR 0 1
39656: PPUSH
39657: LD_EXP 116
39661: PUSH
39662: LD_VAR 0 5
39666: ARRAY
39667: PUSH
39668: LD_INT 0
39670: PLUS
39671: PPUSH
39672: CALL_OW 505
// end ;
39676: LD_VAR 0 3
39680: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
// if not hack in hackTanks then
39687: LD_VAR 0 1
39691: PUSH
39692: LD_EXP 115
39696: IN
39697: NOT
39698: IFFALSE 39702
// exit ;
39700: GO 39946
// index := GetElementIndex ( hackTanks , hack ) ;
39702: LD_ADDR_VAR 0 4
39706: PUSH
39707: LD_EXP 115
39711: PPUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL 48015 0 2
39721: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: DOUBLE
39728: LD_EXP 116
39732: PUSH
39733: LD_VAR 0 4
39737: ARRAY
39738: INC
39739: ST_TO_ADDR
39740: LD_INT 1
39742: PUSH
39743: FOR_DOWNTO
39744: IFFALSE 39920
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_EXP 116
39755: PUSH
39756: LD_VAR 0 4
39760: ARRAY
39761: PUSH
39762: LD_VAR 0 3
39766: ARRAY
39767: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39768: LD_VAR 0 5
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: PPUSH
39777: CALL_OW 302
39781: NOT
39782: IFTRUE 39810
39784: PUSH
39785: LD_VAR 0 5
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: PPUSH
39794: CALL_OW 255
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 255
39808: NONEQUAL
39809: OR
39810: IFFALSE 39918
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39812: LD_VAR 0 5
39816: PUSH
39817: LD_INT 1
39819: ARRAY
39820: PPUSH
39821: CALL_OW 305
39825: IFFALSE 39853
39827: PUSH
39828: LD_VAR 0 5
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: PPUSH
39837: CALL_OW 255
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 255
39851: EQUAL
39852: AND
39853: IFFALSE 39877
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39855: LD_VAR 0 5
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: LD_VAR 0 5
39868: PUSH
39869: LD_INT 2
39871: ARRAY
39872: PPUSH
39873: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39877: LD_ADDR_EXP 116
39881: PUSH
39882: LD_EXP 116
39886: PPUSH
39887: LD_VAR 0 4
39891: PPUSH
39892: LD_EXP 116
39896: PUSH
39897: LD_VAR 0 4
39901: ARRAY
39902: PPUSH
39903: LD_VAR 0 3
39907: PPUSH
39908: CALL_OW 3
39912: PPUSH
39913: CALL_OW 1
39917: ST_TO_ADDR
// end ; end ;
39918: GO 39743
39920: POP
39921: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39922: LD_VAR 0 1
39926: PPUSH
39927: LD_EXP 116
39931: PUSH
39932: LD_VAR 0 4
39936: ARRAY
39937: PUSH
39938: LD_INT 0
39940: PLUS
39941: PPUSH
39942: CALL_OW 505
// end ;
39946: LD_VAR 0 2
39950: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39951: LD_INT 0
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
// if not hack in hackTanks then
39957: LD_VAR 0 1
39961: PUSH
39962: LD_EXP 115
39966: IN
39967: NOT
39968: IFFALSE 39972
// exit ;
39970: GO 40057
// index := GetElementIndex ( hackTanks , hack ) ;
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_EXP 115
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL 48015 0 2
39991: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39992: LD_ADDR_VAR 0 4
39996: PUSH
39997: DOUBLE
39998: LD_INT 1
40000: DEC
40001: ST_TO_ADDR
40002: LD_EXP 116
40006: PUSH
40007: LD_VAR 0 5
40011: ARRAY
40012: PUSH
40013: FOR_TO
40014: IFFALSE 40055
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40016: LD_EXP 116
40020: PUSH
40021: LD_VAR 0 5
40025: ARRAY
40026: PUSH
40027: LD_VAR 0 4
40031: ARRAY
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: EQUAL
40042: IFFALSE 40053
// KillUnit ( vehicle ) ;
40044: LD_VAR 0 2
40048: PPUSH
40049: CALL_OW 66
40053: GO 40013
40055: POP
40056: POP
// end ;
40057: LD_VAR 0 3
40061: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
40062: LD_EXP 120
40066: NOT
40067: IFFALSE 40200
40069: GO 40071
40071: DISABLE
40072: LD_INT 0
40074: PPUSH
// begin initMiner := true ;
40075: LD_ADDR_EXP 120
40079: PUSH
40080: LD_INT 1
40082: ST_TO_ADDR
// minersList := [ ] ;
40083: LD_ADDR_EXP 121
40087: PUSH
40088: EMPTY
40089: ST_TO_ADDR
// minerMinesList := [ ] ;
40090: LD_ADDR_EXP 122
40094: PUSH
40095: EMPTY
40096: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
40097: LD_ADDR_EXP 123
40101: PUSH
40102: LD_INT 10
40104: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40105: LD_ADDR_VAR 0 1
40109: PUSH
40110: LD_INT 34
40112: PUSH
40113: LD_INT 81
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PPUSH
40120: CALL_OW 69
40124: PUSH
40125: FOR_IN
40126: IFFALSE 40198
// begin if not i in minersList then
40128: LD_VAR 0 1
40132: PUSH
40133: LD_EXP 121
40137: IN
40138: NOT
40139: IFFALSE 40196
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40141: LD_ADDR_EXP 121
40145: PUSH
40146: LD_EXP 121
40150: PPUSH
40151: LD_EXP 121
40155: PUSH
40156: LD_INT 1
40158: PLUS
40159: PPUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 1
40169: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40170: LD_ADDR_EXP 122
40174: PUSH
40175: LD_EXP 122
40179: PPUSH
40180: LD_EXP 122
40184: PUSH
40185: LD_INT 1
40187: PLUS
40188: PPUSH
40189: EMPTY
40190: PPUSH
40191: CALL_OW 1
40195: ST_TO_ADDR
// end end ;
40196: GO 40125
40198: POP
40199: POP
// end ;
40200: PPOPN 1
40202: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
40203: LD_EXP 120
40207: IFFALSE 40238
40209: PUSH
40210: LD_EXP 122
40214: PPUSH
40215: CALL 45314 0 1
40219: IFTRUE 40237
40221: PUSH
40222: LD_INT 34
40224: PUSH
40225: LD_INT 81
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PPUSH
40232: CALL_OW 69
40236: OR
40237: AND
40238: IFFALSE 40758
40240: GO 40242
40242: DISABLE
40243: LD_INT 0
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
// begin enable ;
40249: ENABLE
// for i := minerMinesList downto 1 do
40250: LD_ADDR_VAR 0 1
40254: PUSH
40255: DOUBLE
40256: LD_EXP 122
40260: INC
40261: ST_TO_ADDR
40262: LD_INT 1
40264: PUSH
40265: FOR_DOWNTO
40266: IFFALSE 40756
// begin side := GetSide ( minersList [ i ] ) ;
40268: LD_ADDR_VAR 0 3
40272: PUSH
40273: LD_EXP 121
40277: PUSH
40278: LD_VAR 0 1
40282: ARRAY
40283: PPUSH
40284: CALL_OW 255
40288: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
40289: LD_EXP 121
40293: PUSH
40294: LD_VAR 0 1
40298: ARRAY
40299: PPUSH
40300: CALL_OW 300
40304: IFFALSE 40325
40306: PUSH
40307: LD_VAR 0 3
40311: PUSH
40312: LD_OWVAR 2
40316: PUSH
40317: LD_INT 9
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: IN
40324: AND
40325: IFFALSE 40358
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
40327: LD_EXP 121
40331: PUSH
40332: LD_VAR 0 1
40336: ARRAY
40337: PPUSH
40338: LD_EXP 122
40342: PUSH
40343: LD_VAR 0 1
40347: ARRAY
40348: PPUSH
40349: CALL 45314 0 1
40353: PPUSH
40354: CALL_OW 505
// if not minerMinesList [ i ] then
40358: LD_EXP 122
40362: PUSH
40363: LD_VAR 0 1
40367: ARRAY
40368: NOT
40369: IFFALSE 40373
// continue ;
40371: GO 40265
// for j := minerMinesList [ i ] downto 1 do
40373: LD_ADDR_VAR 0 2
40377: PUSH
40378: DOUBLE
40379: LD_EXP 122
40383: PUSH
40384: LD_VAR 0 1
40388: ARRAY
40389: INC
40390: ST_TO_ADDR
40391: LD_INT 1
40393: PUSH
40394: FOR_DOWNTO
40395: IFFALSE 40752
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
40397: LD_EXP 121
40401: PUSH
40402: LD_VAR 0 1
40406: ARRAY
40407: PPUSH
40408: CALL_OW 301
40412: IFTRUE 40432
40414: PUSH
40415: LD_EXP 121
40419: PUSH
40420: LD_VAR 0 1
40424: ARRAY
40425: PPUSH
40426: CALL_OW 305
40430: NOT
40431: OR
40432: IFFALSE 40523
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40434: LD_EXP 122
40438: PUSH
40439: LD_VAR 0 1
40443: ARRAY
40444: PUSH
40445: LD_VAR 0 2
40449: ARRAY
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: PPUSH
40455: LD_EXP 122
40459: PUSH
40460: LD_VAR 0 1
40464: ARRAY
40465: PUSH
40466: LD_VAR 0 2
40470: ARRAY
40471: PUSH
40472: LD_INT 2
40474: ARRAY
40475: PPUSH
40476: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40480: LD_ADDR_EXP 122
40484: PUSH
40485: LD_EXP 122
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: LD_EXP 122
40499: PUSH
40500: LD_VAR 0 1
40504: ARRAY
40505: PPUSH
40506: LD_VAR 0 2
40510: PPUSH
40511: CALL_OW 3
40515: PPUSH
40516: CALL_OW 1
40520: ST_TO_ADDR
// continue ;
40521: GO 40394
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40523: LD_ADDR_VAR 0 4
40527: PUSH
40528: LD_EXP 122
40532: PUSH
40533: LD_VAR 0 1
40537: ARRAY
40538: PUSH
40539: LD_VAR 0 2
40543: ARRAY
40544: PUSH
40545: LD_INT 1
40547: ARRAY
40548: PPUSH
40549: LD_EXP 122
40553: PUSH
40554: LD_VAR 0 1
40558: ARRAY
40559: PUSH
40560: LD_VAR 0 2
40564: ARRAY
40565: PUSH
40566: LD_INT 2
40568: ARRAY
40569: PPUSH
40570: CALL_OW 428
40574: ST_TO_ADDR
// if not tmp then
40575: LD_VAR 0 4
40579: NOT
40580: IFFALSE 40584
// continue ;
40582: GO 40394
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40584: LD_VAR 0 4
40588: PUSH
40589: LD_INT 81
40591: PUSH
40592: LD_VAR 0 3
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PPUSH
40601: CALL_OW 69
40605: IN
40606: IFFALSE 40656
40608: PUSH
40609: LD_EXP 122
40613: PUSH
40614: LD_VAR 0 1
40618: ARRAY
40619: PUSH
40620: LD_VAR 0 2
40624: ARRAY
40625: PUSH
40626: LD_INT 1
40628: ARRAY
40629: PPUSH
40630: LD_EXP 122
40634: PUSH
40635: LD_VAR 0 1
40639: ARRAY
40640: PUSH
40641: LD_VAR 0 2
40645: ARRAY
40646: PUSH
40647: LD_INT 2
40649: ARRAY
40650: PPUSH
40651: CALL_OW 458
40655: AND
40656: IFFALSE 40750
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40658: LD_EXP 122
40662: PUSH
40663: LD_VAR 0 1
40667: ARRAY
40668: PUSH
40669: LD_VAR 0 2
40673: ARRAY
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: LD_EXP 122
40683: PUSH
40684: LD_VAR 0 1
40688: ARRAY
40689: PUSH
40690: LD_VAR 0 2
40694: ARRAY
40695: PUSH
40696: LD_INT 2
40698: ARRAY
40699: PPUSH
40700: LD_VAR 0 3
40704: PPUSH
40705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40709: LD_ADDR_EXP 122
40713: PUSH
40714: LD_EXP 122
40718: PPUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: LD_EXP 122
40728: PUSH
40729: LD_VAR 0 1
40733: ARRAY
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: CALL_OW 3
40744: PPUSH
40745: CALL_OW 1
40749: ST_TO_ADDR
// end ; end ;
40750: GO 40394
40752: POP
40753: POP
// end ;
40754: GO 40265
40756: POP
40757: POP
// end ;
40758: PPOPN 4
40760: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40761: LD_INT 0
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
// result := false ;
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: LD_INT 0
40774: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 264
40784: PUSH
40785: LD_INT 81
40787: EQUAL
40788: NOT
40789: IFFALSE 40793
// exit ;
40791: GO 41163
// side := GetSide ( unit ) ;
40793: LD_ADDR_VAR 0 6
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 255
40807: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40808: LD_ADDR_VAR 0 5
40812: PUSH
40813: LD_EXP 121
40817: PPUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL 48015 0 2
40827: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40828: LD_EXP 122
40832: PUSH
40833: LD_VAR 0 5
40837: ARRAY
40838: PUSH
40839: LD_EXP 123
40843: GREATEREQUAL
40844: IFFALSE 40848
// exit ;
40846: GO 41163
// ComMoveXY ( unit , x , y ) ;
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_VAR 0 2
40857: PPUSH
40858: LD_VAR 0 3
40862: PPUSH
40863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40867: LD_INT 35
40869: PPUSH
40870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40874: LD_VAR 0 1
40878: PPUSH
40879: LD_VAR 0 2
40883: PPUSH
40884: LD_VAR 0 3
40888: PPUSH
40889: CALL 80071 0 3
40893: NOT
40894: IFFALSE 40907
40896: PUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 314
40906: AND
40907: IFFALSE 40911
// exit ;
40909: GO 41163
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40911: LD_VAR 0 2
40915: PPUSH
40916: LD_VAR 0 3
40920: PPUSH
40921: CALL_OW 428
40925: PUSH
40926: LD_VAR 0 1
40930: EQUAL
40931: IFFALSE 40945
40933: PUSH
40934: LD_VAR 0 1
40938: PPUSH
40939: CALL_OW 314
40943: NOT
40944: AND
40945: IFFALSE 40867
// if MineAtPos ( x , y ) then
40947: LD_VAR 0 2
40951: PPUSH
40952: LD_VAR 0 3
40956: PPUSH
40957: CALL_OW 458
40961: IFFALSE 40965
// exit ;
40963: GO 41163
// if your_side = side then
40965: LD_OWVAR 2
40969: PUSH
40970: LD_VAR 0 6
40974: EQUAL
40975: IFFALSE 40994
// PlaySoundXY ( x , y , PlantMine ) ;
40977: LD_VAR 0 2
40981: PPUSH
40982: LD_VAR 0 3
40986: PPUSH
40987: LD_STRING PlantMine
40989: PPUSH
40990: CALL_OW 366
// repeat wait ( 1 ) ;
40994: LD_INT 1
40996: PPUSH
40997: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
41001: LD_VAR 0 2
41005: PPUSH
41006: LD_VAR 0 3
41010: PPUSH
41011: LD_VAR 0 6
41015: PPUSH
41016: LD_INT 0
41018: PPUSH
41019: CALL_OW 454
41023: IFFALSE 40994
// if MineAtPos ( x , y ) then
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_VAR 0 3
41034: PPUSH
41035: CALL_OW 458
41039: IFFALSE 41155
// begin for i in minerMinesList [ index ] do
41041: LD_ADDR_VAR 0 7
41045: PUSH
41046: LD_EXP 122
41050: PUSH
41051: LD_VAR 0 5
41055: ARRAY
41056: PUSH
41057: FOR_IN
41058: IFFALSE 41100
// if i [ 1 ] = x and i [ 2 ] = y then
41060: LD_VAR 0 7
41064: PUSH
41065: LD_INT 1
41067: ARRAY
41068: PUSH
41069: LD_VAR 0 2
41073: EQUAL
41074: IFFALSE 41092
41076: PUSH
41077: LD_VAR 0 7
41081: PUSH
41082: LD_INT 2
41084: ARRAY
41085: PUSH
41086: LD_VAR 0 3
41090: EQUAL
41091: AND
41092: IFFALSE 41098
// exit ;
41094: POP
41095: POP
41096: GO 41163
41098: GO 41057
41100: POP
41101: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41102: LD_ADDR_EXP 122
41106: PUSH
41107: LD_EXP 122
41111: PPUSH
41112: LD_VAR 0 5
41116: PUSH
41117: LD_EXP 122
41121: PUSH
41122: LD_VAR 0 5
41126: ARRAY
41127: PUSH
41128: LD_INT 1
41130: PLUS
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PPUSH
41136: LD_VAR 0 2
41140: PUSH
41141: LD_VAR 0 3
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL 48232 0 3
41154: ST_TO_ADDR
// end ; result := true ;
41155: LD_ADDR_VAR 0 4
41159: PUSH
41160: LD_INT 1
41162: ST_TO_ADDR
// end ;
41163: LD_VAR 0 4
41167: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41168: LD_INT 0
41170: PPUSH
41171: PPUSH
41172: PPUSH
// if not unit in minersList then
41173: LD_VAR 0 1
41177: PUSH
41178: LD_EXP 121
41182: IN
41183: NOT
41184: IFFALSE 41188
// exit ;
41186: GO 41395
// index := GetElementIndex ( minersList , unit ) ;
41188: LD_ADDR_VAR 0 6
41192: PUSH
41193: LD_EXP 121
41197: PPUSH
41198: LD_VAR 0 1
41202: PPUSH
41203: CALL 48015 0 2
41207: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41208: LD_ADDR_VAR 0 5
41212: PUSH
41213: DOUBLE
41214: LD_EXP 122
41218: PUSH
41219: LD_VAR 0 6
41223: ARRAY
41224: INC
41225: ST_TO_ADDR
41226: LD_INT 1
41228: PUSH
41229: FOR_DOWNTO
41230: IFFALSE 41393
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41232: LD_EXP 122
41236: PUSH
41237: LD_VAR 0 6
41241: ARRAY
41242: PUSH
41243: LD_VAR 0 5
41247: ARRAY
41248: PUSH
41249: LD_INT 1
41251: ARRAY
41252: PPUSH
41253: LD_EXP 122
41257: PUSH
41258: LD_VAR 0 6
41262: ARRAY
41263: PUSH
41264: LD_VAR 0 5
41268: ARRAY
41269: PUSH
41270: LD_INT 2
41272: ARRAY
41273: PPUSH
41274: LD_VAR 0 2
41278: PPUSH
41279: LD_VAR 0 3
41283: PPUSH
41284: CALL_OW 298
41288: PUSH
41289: LD_INT 6
41291: LESS
41292: IFFALSE 41391
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41294: LD_EXP 122
41298: PUSH
41299: LD_VAR 0 6
41303: ARRAY
41304: PUSH
41305: LD_VAR 0 5
41309: ARRAY
41310: PUSH
41311: LD_INT 1
41313: ARRAY
41314: PPUSH
41315: LD_EXP 122
41319: PUSH
41320: LD_VAR 0 6
41324: ARRAY
41325: PUSH
41326: LD_VAR 0 5
41330: ARRAY
41331: PUSH
41332: LD_INT 2
41334: ARRAY
41335: PPUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 255
41345: PPUSH
41346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41350: LD_ADDR_EXP 122
41354: PUSH
41355: LD_EXP 122
41359: PPUSH
41360: LD_VAR 0 6
41364: PPUSH
41365: LD_EXP 122
41369: PUSH
41370: LD_VAR 0 6
41374: ARRAY
41375: PPUSH
41376: LD_VAR 0 5
41380: PPUSH
41381: CALL_OW 3
41385: PPUSH
41386: CALL_OW 1
41390: ST_TO_ADDR
// end ; end ;
41391: GO 41229
41393: POP
41394: POP
// end ;
41395: LD_VAR 0 4
41399: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41400: LD_INT 0
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 264
41420: PUSH
41421: LD_INT 81
41423: EQUAL
41424: NOT
41425: IFTRUE 41440
41427: PUSH
41428: LD_VAR 0 1
41432: PUSH
41433: LD_EXP 121
41437: IN
41438: NOT
41439: OR
41440: IFFALSE 41444
// exit ;
41442: GO 41770
// index := GetElementIndex ( minersList , unit ) ;
41444: LD_ADDR_VAR 0 6
41448: PUSH
41449: LD_EXP 121
41453: PPUSH
41454: LD_VAR 0 1
41458: PPUSH
41459: CALL 48015 0 2
41463: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41464: LD_ADDR_VAR 0 8
41468: PUSH
41469: LD_EXP 123
41473: PUSH
41474: LD_EXP 122
41478: PUSH
41479: LD_VAR 0 6
41483: ARRAY
41484: MINUS
41485: ST_TO_ADDR
// if not minesFreeAmount then
41486: LD_VAR 0 8
41490: NOT
41491: IFFALSE 41495
// exit ;
41493: GO 41770
// tmp := [ ] ;
41495: LD_ADDR_VAR 0 7
41499: PUSH
41500: EMPTY
41501: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41502: LD_ADDR_VAR 0 5
41506: PUSH
41507: DOUBLE
41508: LD_INT 1
41510: DEC
41511: ST_TO_ADDR
41512: LD_VAR 0 8
41516: PUSH
41517: FOR_TO
41518: IFFALSE 41717
// begin _d := rand ( 0 , 5 ) ;
41520: LD_ADDR_VAR 0 11
41524: PUSH
41525: LD_INT 0
41527: PPUSH
41528: LD_INT 5
41530: PPUSH
41531: CALL_OW 12
41535: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41536: LD_ADDR_VAR 0 12
41540: PUSH
41541: LD_INT 2
41543: PPUSH
41544: LD_INT 6
41546: PPUSH
41547: CALL_OW 12
41551: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41552: LD_ADDR_VAR 0 9
41556: PUSH
41557: LD_VAR 0 2
41561: PPUSH
41562: LD_VAR 0 11
41566: PPUSH
41567: LD_VAR 0 12
41571: PPUSH
41572: CALL_OW 272
41576: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41577: LD_ADDR_VAR 0 10
41581: PUSH
41582: LD_VAR 0 3
41586: PPUSH
41587: LD_VAR 0 11
41591: PPUSH
41592: LD_VAR 0 12
41596: PPUSH
41597: CALL_OW 273
41601: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41602: LD_VAR 0 9
41606: PPUSH
41607: LD_VAR 0 10
41611: PPUSH
41612: CALL_OW 488
41616: IFFALSE 41640
41618: PUSH
41619: LD_VAR 0 9
41623: PUSH
41624: LD_VAR 0 10
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_VAR 0 7
41637: IN
41638: NOT
41639: AND
41640: IFFALSE 41659
41642: PUSH
41643: LD_VAR 0 9
41647: PPUSH
41648: LD_VAR 0 10
41652: PPUSH
41653: CALL_OW 458
41657: NOT
41658: AND
41659: IFFALSE 41701
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41661: LD_ADDR_VAR 0 7
41665: PUSH
41666: LD_VAR 0 7
41670: PPUSH
41671: LD_VAR 0 7
41675: PUSH
41676: LD_INT 1
41678: PLUS
41679: PPUSH
41680: LD_VAR 0 9
41684: PUSH
41685: LD_VAR 0 10
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PPUSH
41694: CALL_OW 1
41698: ST_TO_ADDR
41699: GO 41715
// i := i - 1 ;
41701: LD_ADDR_VAR 0 5
41705: PUSH
41706: LD_VAR 0 5
41710: PUSH
41711: LD_INT 1
41713: MINUS
41714: ST_TO_ADDR
// end ;
41715: GO 41517
41717: POP
41718: POP
// for i in tmp do
41719: LD_ADDR_VAR 0 5
41723: PUSH
41724: LD_VAR 0 7
41728: PUSH
41729: FOR_IN
41730: IFFALSE 41768
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41732: LD_VAR 0 1
41736: PPUSH
41737: LD_VAR 0 5
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: PPUSH
41746: LD_VAR 0 5
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL 40761 0 3
41759: NOT
41760: IFFALSE 41766
// exit ;
41762: POP
41763: POP
41764: GO 41770
41766: GO 41729
41768: POP
41769: POP
// end ;
41770: LD_VAR 0 4
41774: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41775: LD_INT 0
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
// if GetClass ( unit ) <> class_sniper then
41786: LD_VAR 0 1
41790: PPUSH
41791: CALL_OW 257
41795: PUSH
41796: LD_INT 5
41798: NONEQUAL
41799: IFFALSE 41803
// exit ;
41801: GO 42273
// dist := 8 ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_INT 8
41810: ST_TO_ADDR
// viewRange := 12 ;
41811: LD_ADDR_VAR 0 8
41815: PUSH
41816: LD_INT 12
41818: ST_TO_ADDR
// side := GetSide ( unit ) ;
41819: LD_ADDR_VAR 0 6
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 255
41833: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41834: LD_INT 61
41836: PPUSH
41837: LD_VAR 0 6
41841: PPUSH
41842: CALL_OW 321
41846: PUSH
41847: LD_INT 2
41849: EQUAL
41850: IFFALSE 41860
// viewRange := 16 ;
41852: LD_ADDR_VAR 0 8
41856: PUSH
41857: LD_INT 16
41859: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41860: LD_VAR 0 1
41864: PPUSH
41865: LD_VAR 0 2
41869: PPUSH
41870: LD_VAR 0 3
41874: PPUSH
41875: CALL_OW 297
41879: PUSH
41880: LD_VAR 0 5
41884: GREATER
41885: IFFALSE 41964
// begin ComMoveXY ( unit , x , y ) ;
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 2
41896: PPUSH
41897: LD_VAR 0 3
41901: PPUSH
41902: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41906: LD_INT 35
41908: PPUSH
41909: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41913: LD_VAR 0 1
41917: PPUSH
41918: LD_VAR 0 2
41922: PPUSH
41923: LD_VAR 0 3
41927: PPUSH
41928: CALL 80071 0 3
41932: NOT
41933: IFFALSE 41937
// exit ;
41935: GO 42273
// until GetDistUnitXY ( unit , x , y ) < dist ;
41937: LD_VAR 0 1
41941: PPUSH
41942: LD_VAR 0 2
41946: PPUSH
41947: LD_VAR 0 3
41951: PPUSH
41952: CALL_OW 297
41956: PUSH
41957: LD_VAR 0 5
41961: LESS
41962: IFFALSE 41906
// end ; ComTurnXY ( unit , x , y ) ;
41964: LD_VAR 0 1
41968: PPUSH
41969: LD_VAR 0 2
41973: PPUSH
41974: LD_VAR 0 3
41978: PPUSH
41979: CALL_OW 118
// repeat if Multiplayer then
41983: LD_OWVAR 4
41987: IFFALSE 41998
// wait ( 35 ) else
41989: LD_INT 35
41991: PPUSH
41992: CALL_OW 67
41996: GO 42005
// wait ( 5 ) ;
41998: LD_INT 5
42000: PPUSH
42001: CALL_OW 67
// _d := GetDir ( unit ) ;
42005: LD_ADDR_VAR 0 11
42009: PUSH
42010: LD_VAR 0 1
42014: PPUSH
42015: CALL_OW 254
42019: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
42020: LD_ADDR_VAR 0 7
42024: PUSH
42025: LD_VAR 0 1
42029: PPUSH
42030: CALL_OW 250
42034: PPUSH
42035: LD_VAR 0 1
42039: PPUSH
42040: CALL_OW 251
42044: PPUSH
42045: LD_VAR 0 2
42049: PPUSH
42050: LD_VAR 0 3
42054: PPUSH
42055: CALL 82707 0 4
42059: ST_TO_ADDR
// until dir = _d ;
42060: LD_VAR 0 7
42064: PUSH
42065: LD_VAR 0 11
42069: EQUAL
42070: IFFALSE 41983
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_VAR 0 1
42081: PPUSH
42082: CALL_OW 250
42086: PPUSH
42087: LD_VAR 0 7
42091: PPUSH
42092: LD_VAR 0 5
42096: PPUSH
42097: CALL_OW 272
42101: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
42102: LD_ADDR_VAR 0 10
42106: PUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 251
42116: PPUSH
42117: LD_VAR 0 7
42121: PPUSH
42122: LD_VAR 0 5
42126: PPUSH
42127: CALL_OW 273
42131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42132: LD_VAR 0 9
42136: PPUSH
42137: LD_VAR 0 10
42141: PPUSH
42142: CALL_OW 488
42146: NOT
42147: IFFALSE 42151
// exit ;
42149: GO 42273
// ComAnimCustom ( unit , 1 ) ;
42151: LD_VAR 0 1
42155: PPUSH
42156: LD_INT 1
42158: PPUSH
42159: CALL_OW 592
// p := 0 ;
42163: LD_ADDR_VAR 0 12
42167: PUSH
42168: LD_INT 0
42170: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42171: LD_VAR 0 9
42175: PPUSH
42176: LD_VAR 0 10
42180: PPUSH
42181: LD_VAR 0 6
42185: PPUSH
42186: LD_VAR 0 8
42190: PPUSH
42191: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
42195: LD_INT 35
42197: PPUSH
42198: CALL_OW 67
// p := Inc ( p ) ;
42202: LD_ADDR_VAR 0 12
42206: PUSH
42207: LD_VAR 0 12
42211: PPUSH
42212: CALL 82663 0 1
42216: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
42217: LD_VAR 0 12
42221: PUSH
42222: LD_INT 3
42224: EQUAL
42225: IFTRUE 42239
42227: PUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 302
42237: NOT
42238: OR
42239: IFTRUE 42252
42241: PUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 301
42251: OR
42252: IFFALSE 42195
// RemoveSeeing ( _x , _y , side ) ;
42254: LD_VAR 0 9
42258: PPUSH
42259: LD_VAR 0 10
42263: PPUSH
42264: LD_VAR 0 6
42268: PPUSH
42269: CALL_OW 331
// end ;
42273: LD_VAR 0 4
42277: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
42278: LD_INT 0
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
// if not unit then
42291: LD_VAR 0 1
42295: NOT
42296: IFFALSE 42300
// exit ;
42298: GO 42571
// side := GetSide ( unit ) ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_VAR 0 1
42309: PPUSH
42310: CALL_OW 255
42314: ST_TO_ADDR
// x := GetX ( unit ) ;
42315: LD_ADDR_VAR 0 5
42319: PUSH
42320: LD_VAR 0 1
42324: PPUSH
42325: CALL_OW 250
42329: ST_TO_ADDR
// y := GetY ( unit ) ;
42330: LD_ADDR_VAR 0 6
42334: PUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: CALL_OW 251
42344: ST_TO_ADDR
// r := 8 ;
42345: LD_ADDR_VAR 0 4
42349: PUSH
42350: LD_INT 8
42352: ST_TO_ADDR
// if x - r < 0 then
42353: LD_VAR 0 5
42357: PUSH
42358: LD_VAR 0 4
42362: MINUS
42363: PUSH
42364: LD_INT 0
42366: LESS
42367: IFFALSE 42379
// min_x := 0 else
42369: LD_ADDR_VAR 0 7
42373: PUSH
42374: LD_INT 0
42376: ST_TO_ADDR
42377: GO 42395
// min_x := x - r ;
42379: LD_ADDR_VAR 0 7
42383: PUSH
42384: LD_VAR 0 5
42388: PUSH
42389: LD_VAR 0 4
42393: MINUS
42394: ST_TO_ADDR
// if y - r < 0 then
42395: LD_VAR 0 6
42399: PUSH
42400: LD_VAR 0 4
42404: MINUS
42405: PUSH
42406: LD_INT 0
42408: LESS
42409: IFFALSE 42421
// min_y := 0 else
42411: LD_ADDR_VAR 0 8
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
42419: GO 42437
// min_y := y - r ;
42421: LD_ADDR_VAR 0 8
42425: PUSH
42426: LD_VAR 0 6
42430: PUSH
42431: LD_VAR 0 4
42435: MINUS
42436: ST_TO_ADDR
// max_x := x + r ;
42437: LD_ADDR_VAR 0 9
42441: PUSH
42442: LD_VAR 0 5
42446: PUSH
42447: LD_VAR 0 4
42451: PLUS
42452: ST_TO_ADDR
// max_y := y + r ;
42453: LD_ADDR_VAR 0 10
42457: PUSH
42458: LD_VAR 0 6
42462: PUSH
42463: LD_VAR 0 4
42467: PLUS
42468: ST_TO_ADDR
// for _x = min_x to max_x do
42469: LD_ADDR_VAR 0 11
42473: PUSH
42474: DOUBLE
42475: LD_VAR 0 7
42479: DEC
42480: ST_TO_ADDR
42481: LD_VAR 0 9
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42569
// for _y = min_y to max_y do
42489: LD_ADDR_VAR 0 12
42493: PUSH
42494: DOUBLE
42495: LD_VAR 0 8
42499: DEC
42500: ST_TO_ADDR
42501: LD_VAR 0 10
42505: PUSH
42506: FOR_TO
42507: IFFALSE 42565
// begin if not ValidHex ( _x , _y ) then
42509: LD_VAR 0 11
42513: PPUSH
42514: LD_VAR 0 12
42518: PPUSH
42519: CALL_OW 488
42523: NOT
42524: IFFALSE 42528
// continue ;
42526: GO 42506
// if MineAtPos ( _x , _y ) then
42528: LD_VAR 0 11
42532: PPUSH
42533: LD_VAR 0 12
42537: PPUSH
42538: CALL_OW 458
42542: IFFALSE 42563
// ViewMineAtPos ( _x , _y , side ) ;
42544: LD_VAR 0 11
42548: PPUSH
42549: LD_VAR 0 12
42553: PPUSH
42554: LD_VAR 0 3
42558: PPUSH
42559: CALL_OW 457
// end ;
42563: GO 42506
42565: POP
42566: POP
42567: GO 42486
42569: POP
42570: POP
// end ;
42571: LD_VAR 0 2
42575: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
42576: LD_INT 0
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
// if not units then
42585: LD_VAR 0 1
42589: NOT
42590: IFFALSE 42594
// exit ;
42592: GO 43058
// scaners := [ ] ;
42594: LD_ADDR_VAR 0 6
42598: PUSH
42599: EMPTY
42600: ST_TO_ADDR
// for i in units do
42601: LD_ADDR_VAR 0 3
42605: PUSH
42606: LD_VAR 0 1
42610: PUSH
42611: FOR_IN
42612: IFFALSE 42769
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42614: LD_VAR 0 3
42618: PPUSH
42619: CALL_OW 264
42623: PUSH
42624: LD_INT 11
42626: NONEQUAL
42627: IFTRUE 42641
42629: PUSH
42630: LD_VAR 0 3
42634: PPUSH
42635: CALL_OW 302
42639: NOT
42640: OR
42641: IFTRUE 42658
42643: PUSH
42644: LD_VAR 0 3
42648: PPUSH
42649: CALL_OW 110
42653: PUSH
42654: LD_INT 502
42656: EQUAL
42657: OR
42658: IFFALSE 42662
// continue ;
42660: GO 42611
// ComStop ( i ) ;
42662: LD_VAR 0 3
42666: PPUSH
42667: CALL_OW 141
// x := GetX ( i ) ;
42671: LD_ADDR_VAR 0 4
42675: PUSH
42676: LD_VAR 0 3
42680: PPUSH
42681: CALL_OW 250
42685: ST_TO_ADDR
// y := GetY ( i ) ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: LD_VAR 0 3
42695: PPUSH
42696: CALL_OW 251
42700: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42701: LD_VAR 0 3
42705: PPUSH
42706: CALL_OW 255
42710: PUSH
42711: LD_OWVAR 2
42715: EQUAL
42716: IFFALSE 42735
// PlaySoundXY ( x , y , mineDetector ) ;
42718: LD_VAR 0 4
42722: PPUSH
42723: LD_VAR 0 5
42727: PPUSH
42728: LD_STRING mineDetector
42730: PPUSH
42731: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42735: LD_ADDR_VAR 0 6
42739: PUSH
42740: LD_VAR 0 6
42744: PPUSH
42745: LD_VAR 0 3
42749: PPUSH
42750: CALL 81290 0 2
42754: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42755: LD_VAR 0 3
42759: PPUSH
42760: LD_INT 502
42762: PPUSH
42763: CALL_OW 109
// end ;
42767: GO 42611
42769: POP
42770: POP
// if not scaners then
42771: LD_VAR 0 6
42775: NOT
42776: IFFALSE 42780
// exit ;
42778: GO 43058
// wait ( 3 ) ;
42780: LD_INT 3
42782: PPUSH
42783: CALL_OW 67
// timer := 6 ;
42787: LD_ADDR_VAR 0 7
42791: PUSH
42792: LD_INT 6
42794: ST_TO_ADDR
// repeat for i in scaners do
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_VAR 0 6
42804: PUSH
42805: FOR_IN
42806: IFFALSE 42956
// begin side := GetSide ( i ) ;
42808: LD_ADDR_VAR 0 8
42812: PUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: CALL_OW 255
42822: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42823: LD_VAR 0 3
42827: PPUSH
42828: CALL_OW 302
42832: NOT
42833: IFTRUE 42846
42835: PUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: CALL_OW 314
42845: OR
42846: IFTRUE 42877
42848: PUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: CALL_OW 263
42858: PUSH
42859: LD_INT 1
42861: EQUAL
42862: IFFALSE 42876
42864: PUSH
42865: LD_VAR 0 3
42869: PPUSH
42870: CALL_OW 311
42874: NOT
42875: AND
42876: OR
42877: IFFALSE 42921
// begin SetUnitDisplayNumber ( i , 0 ) ;
42879: LD_VAR 0 3
42883: PPUSH
42884: LD_INT 0
42886: PPUSH
42887: CALL_OW 505
// SetTag ( i , 0 ) ;
42891: LD_VAR 0 3
42895: PPUSH
42896: LD_INT 0
42898: PPUSH
42899: CALL_OW 109
// scaners := scaners diff i ;
42903: LD_ADDR_VAR 0 6
42907: PUSH
42908: LD_VAR 0 6
42912: PUSH
42913: LD_VAR 0 3
42917: DIFF
42918: ST_TO_ADDR
// continue ;
42919: GO 42805
// end ; if side in [ your_side , 9 ] then
42921: LD_VAR 0 8
42925: PUSH
42926: LD_OWVAR 2
42930: PUSH
42931: LD_INT 9
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: IN
42938: IFFALSE 42954
// SetUnitDisplayNumber ( i , timer ) ;
42940: LD_VAR 0 3
42944: PPUSH
42945: LD_VAR 0 7
42949: PPUSH
42950: CALL_OW 505
// end ;
42954: GO 42805
42956: POP
42957: POP
// if not scaners then
42958: LD_VAR 0 6
42962: NOT
42963: IFFALSE 42967
// exit ;
42965: GO 43058
// timer := Dec ( timer ) ;
42967: LD_ADDR_VAR 0 7
42971: PUSH
42972: LD_VAR 0 7
42976: PPUSH
42977: CALL 82685 0 1
42981: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42982: LD_INT 35
42984: PPUSH
42985: CALL_OW 67
// until timer = 0 ;
42989: LD_VAR 0 7
42993: PUSH
42994: LD_INT 0
42996: EQUAL
42997: IFFALSE 42795
// if not scaners then
42999: LD_VAR 0 6
43003: NOT
43004: IFFALSE 43008
// exit ;
43006: GO 43058
// for i in scaners do
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_VAR 0 6
43017: PUSH
43018: FOR_IN
43019: IFFALSE 43056
// begin SetUnitDisplayNumber ( i , 0 ) ;
43021: LD_VAR 0 3
43025: PPUSH
43026: LD_INT 0
43028: PPUSH
43029: CALL_OW 505
// SetTag ( i , 0 ) ;
43033: LD_VAR 0 3
43037: PPUSH
43038: LD_INT 0
43040: PPUSH
43041: CALL_OW 109
// RevealDetectorMine ( i ) ;
43045: LD_VAR 0 3
43049: PPUSH
43050: CALL 42278 0 1
// end ;
43054: GO 43018
43056: POP
43057: POP
// end ;
43058: LD_VAR 0 2
43062: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
43063: LD_INT 0
43065: PPUSH
// if p1 = mine_detector_mode then
43066: LD_VAR 0 2
43070: PUSH
43071: LD_INT 103
43073: EQUAL
43074: IFFALSE 43085
// DetectMine ( units ) ;
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL 42576 0 1
// end ; end_of_file
43085: LD_VAR 0 7
43089: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43090: LD_INT 0
43092: PPUSH
43093: PPUSH
// if exist_mode then
43094: LD_VAR 0 2
43098: IFFALSE 43144
// begin unit := CreateCharacter ( prefix & ident ) ;
43100: LD_ADDR_VAR 0 5
43104: PUSH
43105: LD_VAR 0 3
43109: PUSH
43110: LD_VAR 0 1
43114: STR
43115: PPUSH
43116: CALL_OW 34
43120: ST_TO_ADDR
// if unit then
43121: LD_VAR 0 5
43125: IFFALSE 43142
// DeleteCharacters ( prefix & ident ) ;
43127: LD_VAR 0 3
43131: PUSH
43132: LD_VAR 0 1
43136: STR
43137: PPUSH
43138: CALL_OW 40
// end else
43142: GO 43159
// unit := NewCharacter ( ident ) ;
43144: LD_ADDR_VAR 0 5
43148: PUSH
43149: LD_VAR 0 1
43153: PPUSH
43154: CALL_OW 25
43158: ST_TO_ADDR
// result := unit ;
43159: LD_ADDR_VAR 0 4
43163: PUSH
43164: LD_VAR 0 5
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 4
43173: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43174: LD_INT 0
43176: PPUSH
43177: PPUSH
// if exist_mode then
43178: LD_VAR 0 2
43182: IFFALSE 43207
// unit := CreateCharacter ( prefix & ident ) else
43184: LD_ADDR_VAR 0 5
43188: PUSH
43189: LD_VAR 0 3
43193: PUSH
43194: LD_VAR 0 1
43198: STR
43199: PPUSH
43200: CALL_OW 34
43204: ST_TO_ADDR
43205: GO 43222
// unit := NewCharacter ( ident ) ;
43207: LD_ADDR_VAR 0 5
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 25
43221: ST_TO_ADDR
// result := unit ;
43222: LD_ADDR_VAR 0 4
43226: PUSH
43227: LD_VAR 0 5
43231: ST_TO_ADDR
// end ;
43232: LD_VAR 0 4
43236: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43237: LD_INT 0
43239: PPUSH
43240: PPUSH
// if not side or not nation then
43241: LD_VAR 0 1
43245: NOT
43246: IFTRUE 43255
43248: PUSH
43249: LD_VAR 0 2
43253: NOT
43254: OR
43255: IFFALSE 43259
// exit ;
43257: GO 44053
// case nation of nation_american :
43259: LD_VAR 0 2
43263: PUSH
43264: LD_INT 1
43266: DOUBLE
43267: EQUAL
43268: IFTRUE 43272
43270: GO 43494
43272: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
43273: LD_ADDR_VAR 0 4
43277: PUSH
43278: LD_INT 35
43280: PUSH
43281: LD_INT 45
43283: PUSH
43284: LD_INT 46
43286: PUSH
43287: LD_INT 47
43289: PUSH
43290: LD_INT 82
43292: PUSH
43293: LD_INT 83
43295: PUSH
43296: LD_INT 84
43298: PUSH
43299: LD_INT 85
43301: PUSH
43302: LD_INT 86
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 6
43313: PUSH
43314: LD_INT 15
43316: PUSH
43317: LD_INT 16
43319: PUSH
43320: LD_INT 7
43322: PUSH
43323: LD_INT 12
43325: PUSH
43326: LD_INT 13
43328: PUSH
43329: LD_INT 10
43331: PUSH
43332: LD_INT 14
43334: PUSH
43335: LD_INT 20
43337: PUSH
43338: LD_INT 21
43340: PUSH
43341: LD_INT 22
43343: PUSH
43344: LD_INT 25
43346: PUSH
43347: LD_INT 32
43349: PUSH
43350: LD_INT 27
43352: PUSH
43353: LD_INT 36
43355: PUSH
43356: LD_INT 69
43358: PUSH
43359: LD_INT 39
43361: PUSH
43362: LD_INT 34
43364: PUSH
43365: LD_INT 40
43367: PUSH
43368: LD_INT 48
43370: PUSH
43371: LD_INT 49
43373: PUSH
43374: LD_INT 50
43376: PUSH
43377: LD_INT 51
43379: PUSH
43380: LD_INT 52
43382: PUSH
43383: LD_INT 53
43385: PUSH
43386: LD_INT 54
43388: PUSH
43389: LD_INT 55
43391: PUSH
43392: LD_INT 56
43394: PUSH
43395: LD_INT 57
43397: PUSH
43398: LD_INT 58
43400: PUSH
43401: LD_INT 59
43403: PUSH
43404: LD_INT 60
43406: PUSH
43407: LD_INT 61
43409: PUSH
43410: LD_INT 62
43412: PUSH
43413: LD_INT 80
43415: PUSH
43416: LD_INT 82
43418: PUSH
43419: LD_INT 83
43421: PUSH
43422: LD_INT 84
43424: PUSH
43425: LD_INT 85
43427: PUSH
43428: LD_INT 86
43430: PUSH
43431: LD_INT 90
43433: PUSH
43434: LD_INT 93
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
43492: GO 43975
43494: LD_INT 2
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43736
43502: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43503: LD_ADDR_VAR 0 4
43507: PUSH
43508: LD_INT 35
43510: PUSH
43511: LD_INT 45
43513: PUSH
43514: LD_INT 46
43516: PUSH
43517: LD_INT 47
43519: PUSH
43520: LD_INT 82
43522: PUSH
43523: LD_INT 83
43525: PUSH
43526: LD_INT 84
43528: PUSH
43529: LD_INT 85
43531: PUSH
43532: LD_INT 87
43534: PUSH
43535: LD_INT 70
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 11
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: LD_INT 4
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: LD_INT 6
43555: PUSH
43556: LD_INT 15
43558: PUSH
43559: LD_INT 18
43561: PUSH
43562: LD_INT 7
43564: PUSH
43565: LD_INT 17
43567: PUSH
43568: LD_INT 8
43570: PUSH
43571: LD_INT 20
43573: PUSH
43574: LD_INT 21
43576: PUSH
43577: LD_INT 22
43579: PUSH
43580: LD_INT 72
43582: PUSH
43583: LD_INT 26
43585: PUSH
43586: LD_INT 69
43588: PUSH
43589: LD_INT 39
43591: PUSH
43592: LD_INT 40
43594: PUSH
43595: LD_INT 41
43597: PUSH
43598: LD_INT 42
43600: PUSH
43601: LD_INT 43
43603: PUSH
43604: LD_INT 48
43606: PUSH
43607: LD_INT 49
43609: PUSH
43610: LD_INT 50
43612: PUSH
43613: LD_INT 51
43615: PUSH
43616: LD_INT 52
43618: PUSH
43619: LD_INT 53
43621: PUSH
43622: LD_INT 54
43624: PUSH
43625: LD_INT 55
43627: PUSH
43628: LD_INT 56
43630: PUSH
43631: LD_INT 60
43633: PUSH
43634: LD_INT 61
43636: PUSH
43637: LD_INT 62
43639: PUSH
43640: LD_INT 66
43642: PUSH
43643: LD_INT 67
43645: PUSH
43646: LD_INT 68
43648: PUSH
43649: LD_INT 81
43651: PUSH
43652: LD_INT 82
43654: PUSH
43655: LD_INT 83
43657: PUSH
43658: LD_INT 84
43660: PUSH
43661: LD_INT 85
43663: PUSH
43664: LD_INT 87
43666: PUSH
43667: LD_INT 88
43669: PUSH
43670: LD_INT 92
43672: PUSH
43673: LD_INT 94
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
43734: GO 43975
43736: LD_INT 3
43738: DOUBLE
43739: EQUAL
43740: IFTRUE 43744
43742: GO 43974
43744: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43745: LD_ADDR_VAR 0 4
43749: PUSH
43750: LD_INT 46
43752: PUSH
43753: LD_INT 47
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 82
43764: PUSH
43765: LD_INT 83
43767: PUSH
43768: LD_INT 84
43770: PUSH
43771: LD_INT 85
43773: PUSH
43774: LD_INT 86
43776: PUSH
43777: LD_INT 11
43779: PUSH
43780: LD_INT 9
43782: PUSH
43783: LD_INT 20
43785: PUSH
43786: LD_INT 19
43788: PUSH
43789: LD_INT 21
43791: PUSH
43792: LD_INT 24
43794: PUSH
43795: LD_INT 22
43797: PUSH
43798: LD_INT 25
43800: PUSH
43801: LD_INT 28
43803: PUSH
43804: LD_INT 29
43806: PUSH
43807: LD_INT 30
43809: PUSH
43810: LD_INT 31
43812: PUSH
43813: LD_INT 37
43815: PUSH
43816: LD_INT 38
43818: PUSH
43819: LD_INT 32
43821: PUSH
43822: LD_INT 27
43824: PUSH
43825: LD_INT 33
43827: PUSH
43828: LD_INT 69
43830: PUSH
43831: LD_INT 39
43833: PUSH
43834: LD_INT 34
43836: PUSH
43837: LD_INT 40
43839: PUSH
43840: LD_INT 71
43842: PUSH
43843: LD_INT 23
43845: PUSH
43846: LD_INT 44
43848: PUSH
43849: LD_INT 48
43851: PUSH
43852: LD_INT 49
43854: PUSH
43855: LD_INT 50
43857: PUSH
43858: LD_INT 51
43860: PUSH
43861: LD_INT 52
43863: PUSH
43864: LD_INT 53
43866: PUSH
43867: LD_INT 54
43869: PUSH
43870: LD_INT 55
43872: PUSH
43873: LD_INT 56
43875: PUSH
43876: LD_INT 57
43878: PUSH
43879: LD_INT 58
43881: PUSH
43882: LD_INT 59
43884: PUSH
43885: LD_INT 63
43887: PUSH
43888: LD_INT 64
43890: PUSH
43891: LD_INT 65
43893: PUSH
43894: LD_INT 82
43896: PUSH
43897: LD_INT 83
43899: PUSH
43900: LD_INT 84
43902: PUSH
43903: LD_INT 85
43905: PUSH
43906: LD_INT 86
43908: PUSH
43909: LD_INT 89
43911: PUSH
43912: LD_INT 91
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
43972: GO 43975
43974: POP
// if state > - 1 and state < 3 then
43975: LD_VAR 0 3
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: GREATER
43984: IFFALSE 43996
43986: PUSH
43987: LD_VAR 0 3
43991: PUSH
43992: LD_INT 3
43994: LESS
43995: AND
43996: IFFALSE 44053
// for i in result do
43998: LD_ADDR_VAR 0 5
44002: PUSH
44003: LD_VAR 0 4
44007: PUSH
44008: FOR_IN
44009: IFFALSE 44051
// if GetTech ( i , side ) <> state then
44011: LD_VAR 0 5
44015: PPUSH
44016: LD_VAR 0 1
44020: PPUSH
44021: CALL_OW 321
44025: PUSH
44026: LD_VAR 0 3
44030: NONEQUAL
44031: IFFALSE 44049
// result := result diff i ;
44033: LD_ADDR_VAR 0 4
44037: PUSH
44038: LD_VAR 0 4
44042: PUSH
44043: LD_VAR 0 5
44047: DIFF
44048: ST_TO_ADDR
44049: GO 44008
44051: POP
44052: POP
// end ;
44053: LD_VAR 0 4
44057: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44058: LD_INT 0
44060: PPUSH
44061: PPUSH
44062: PPUSH
// result := true ;
44063: LD_ADDR_VAR 0 3
44067: PUSH
44068: LD_INT 1
44070: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: LD_VAR 0 2
44080: PPUSH
44081: CALL_OW 480
44085: ST_TO_ADDR
// if not tmp then
44086: LD_VAR 0 5
44090: NOT
44091: IFFALSE 44095
// exit ;
44093: GO 44144
// for i in tmp do
44095: LD_ADDR_VAR 0 4
44099: PUSH
44100: LD_VAR 0 5
44104: PUSH
44105: FOR_IN
44106: IFFALSE 44142
// if GetTech ( i , side ) <> state_researched then
44108: LD_VAR 0 4
44112: PPUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 321
44122: PUSH
44123: LD_INT 2
44125: NONEQUAL
44126: IFFALSE 44140
// begin result := false ;
44128: LD_ADDR_VAR 0 3
44132: PUSH
44133: LD_INT 0
44135: ST_TO_ADDR
// exit ;
44136: POP
44137: POP
44138: GO 44144
// end ;
44140: GO 44105
44142: POP
44143: POP
// end ;
44144: LD_VAR 0 3
44148: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44149: LD_INT 0
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44164: LD_VAR 0 1
44168: NOT
44169: IFTRUE 44186
44171: PUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 257
44181: PUSH
44182: LD_INT 9
44184: NONEQUAL
44185: OR
44186: IFFALSE 44190
// exit ;
44188: GO 44769
// side := GetSide ( unit ) ;
44190: LD_ADDR_VAR 0 9
44194: PUSH
44195: LD_VAR 0 1
44199: PPUSH
44200: CALL_OW 255
44204: ST_TO_ADDR
// tech_space := tech_spacanom ;
44205: LD_ADDR_VAR 0 12
44209: PUSH
44210: LD_INT 29
44212: ST_TO_ADDR
// tech_time := tech_taurad ;
44213: LD_ADDR_VAR 0 13
44217: PUSH
44218: LD_INT 28
44220: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44221: LD_ADDR_VAR 0 11
44225: PUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: CALL_OW 310
44235: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44236: LD_VAR 0 11
44240: PPUSH
44241: CALL_OW 247
44245: PUSH
44246: LD_INT 2
44248: EQUAL
44249: IFFALSE 44253
// exit ;
44251: GO 44769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44253: LD_ADDR_VAR 0 8
44257: PUSH
44258: LD_INT 81
44260: PUSH
44261: LD_VAR 0 9
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 21
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PPUSH
44291: CALL_OW 69
44295: ST_TO_ADDR
// if not tmp then
44296: LD_VAR 0 8
44300: NOT
44301: IFFALSE 44305
// exit ;
44303: GO 44769
// if in_unit then
44305: LD_VAR 0 11
44309: IFFALSE 44333
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44311: LD_ADDR_VAR 0 10
44315: PUSH
44316: LD_VAR 0 8
44320: PPUSH
44321: LD_VAR 0 11
44325: PPUSH
44326: CALL_OW 74
44330: ST_TO_ADDR
44331: GO 44353
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44333: LD_ADDR_VAR 0 10
44337: PUSH
44338: LD_VAR 0 8
44342: PPUSH
44343: LD_VAR 0 1
44347: PPUSH
44348: CALL_OW 74
44352: ST_TO_ADDR
// if not enemy then
44353: LD_VAR 0 10
44357: NOT
44358: IFFALSE 44362
// exit ;
44360: GO 44769
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44362: LD_VAR 0 11
44366: IFFALSE 44388
44368: PUSH
44369: LD_VAR 0 11
44373: PPUSH
44374: LD_VAR 0 10
44378: PPUSH
44379: CALL_OW 296
44383: PUSH
44384: LD_INT 13
44386: GREATER
44387: AND
44388: IFTRUE 44410
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: LD_VAR 0 10
44400: PPUSH
44401: CALL_OW 296
44405: PUSH
44406: LD_INT 12
44408: GREATER
44409: OR
44410: IFFALSE 44414
// exit ;
44412: GO 44769
// missile := [ 1 ] ;
44414: LD_ADDR_VAR 0 14
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44425: LD_VAR 0 9
44429: PPUSH
44430: LD_VAR 0 12
44434: PPUSH
44435: CALL_OW 325
44439: IFFALSE 44468
// missile := Replace ( missile , missile + 1 , 2 ) ;
44441: LD_ADDR_VAR 0 14
44445: PUSH
44446: LD_VAR 0 14
44450: PPUSH
44451: LD_VAR 0 14
44455: PUSH
44456: LD_INT 1
44458: PLUS
44459: PPUSH
44460: LD_INT 2
44462: PPUSH
44463: CALL_OW 1
44467: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44468: LD_VAR 0 9
44472: PPUSH
44473: LD_VAR 0 13
44477: PPUSH
44478: CALL_OW 325
44482: IFFALSE 44506
44484: PUSH
44485: LD_VAR 0 10
44489: PPUSH
44490: CALL_OW 255
44494: PPUSH
44495: LD_VAR 0 13
44499: PPUSH
44500: CALL_OW 325
44504: NOT
44505: AND
44506: IFFALSE 44535
// missile := Replace ( missile , missile + 1 , 3 ) ;
44508: LD_ADDR_VAR 0 14
44512: PUSH
44513: LD_VAR 0 14
44517: PPUSH
44518: LD_VAR 0 14
44522: PUSH
44523: LD_INT 1
44525: PLUS
44526: PPUSH
44527: LD_INT 3
44529: PPUSH
44530: CALL_OW 1
44534: ST_TO_ADDR
// if missile < 2 then
44535: LD_VAR 0 14
44539: PUSH
44540: LD_INT 2
44542: LESS
44543: IFFALSE 44547
// exit ;
44545: GO 44769
// x := GetX ( enemy ) ;
44547: LD_ADDR_VAR 0 4
44551: PUSH
44552: LD_VAR 0 10
44556: PPUSH
44557: CALL_OW 250
44561: ST_TO_ADDR
// y := GetY ( enemy ) ;
44562: LD_ADDR_VAR 0 5
44566: PUSH
44567: LD_VAR 0 10
44571: PPUSH
44572: CALL_OW 251
44576: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44577: LD_ADDR_VAR 0 6
44581: PUSH
44582: LD_VAR 0 4
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PPUSH
44591: LD_INT 1
44593: PPUSH
44594: CALL_OW 12
44598: PLUS
44599: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44600: LD_ADDR_VAR 0 7
44604: PUSH
44605: LD_VAR 0 5
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PPUSH
44614: LD_INT 1
44616: PPUSH
44617: CALL_OW 12
44621: PLUS
44622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44623: LD_VAR 0 6
44627: PPUSH
44628: LD_VAR 0 7
44632: PPUSH
44633: CALL_OW 488
44637: NOT
44638: IFFALSE 44660
// begin _x := x ;
44640: LD_ADDR_VAR 0 6
44644: PUSH
44645: LD_VAR 0 4
44649: ST_TO_ADDR
// _y := y ;
44650: LD_ADDR_VAR 0 7
44654: PUSH
44655: LD_VAR 0 5
44659: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 1
44667: PPUSH
44668: LD_VAR 0 14
44672: PPUSH
44673: CALL_OW 12
44677: ST_TO_ADDR
// case i of 1 :
44678: LD_VAR 0 3
44682: PUSH
44683: LD_INT 1
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44708
44691: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44692: LD_VAR 0 1
44696: PPUSH
44697: LD_VAR 0 10
44701: PPUSH
44702: CALL_OW 115
44706: GO 44769
44708: LD_INT 2
44710: DOUBLE
44711: EQUAL
44712: IFTRUE 44716
44714: GO 44738
44716: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44717: LD_VAR 0 1
44721: PPUSH
44722: LD_VAR 0 6
44726: PPUSH
44727: LD_VAR 0 7
44731: PPUSH
44732: CALL_OW 153
44736: GO 44769
44738: LD_INT 3
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44768
44746: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44747: LD_VAR 0 1
44751: PPUSH
44752: LD_VAR 0 6
44756: PPUSH
44757: LD_VAR 0 7
44761: PPUSH
44762: CALL_OW 154
44766: GO 44769
44768: POP
// end ;
44769: LD_VAR 0 2
44773: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44774: LD_INT 0
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
// if not unit or not building then
44782: LD_VAR 0 1
44786: NOT
44787: IFTRUE 44796
44789: PUSH
44790: LD_VAR 0 2
44794: NOT
44795: OR
44796: IFFALSE 44800
// exit ;
44798: GO 44958
// x := GetX ( building ) ;
44800: LD_ADDR_VAR 0 5
44804: PUSH
44805: LD_VAR 0 2
44809: PPUSH
44810: CALL_OW 250
44814: ST_TO_ADDR
// y := GetY ( building ) ;
44815: LD_ADDR_VAR 0 6
44819: PUSH
44820: LD_VAR 0 2
44824: PPUSH
44825: CALL_OW 251
44829: ST_TO_ADDR
// for i := 0 to 5 do
44830: LD_ADDR_VAR 0 4
44834: PUSH
44835: DOUBLE
44836: LD_INT 0
44838: DEC
44839: ST_TO_ADDR
44840: LD_INT 5
44842: PUSH
44843: FOR_TO
44844: IFFALSE 44956
// begin _x := ShiftX ( x , i , 3 ) ;
44846: LD_ADDR_VAR 0 7
44850: PUSH
44851: LD_VAR 0 5
44855: PPUSH
44856: LD_VAR 0 4
44860: PPUSH
44861: LD_INT 3
44863: PPUSH
44864: CALL_OW 272
44868: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44869: LD_ADDR_VAR 0 8
44873: PUSH
44874: LD_VAR 0 6
44878: PPUSH
44879: LD_VAR 0 4
44883: PPUSH
44884: LD_INT 3
44886: PPUSH
44887: CALL_OW 273
44891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44892: LD_VAR 0 7
44896: PPUSH
44897: LD_VAR 0 8
44901: PPUSH
44902: CALL_OW 488
44906: NOT
44907: IFFALSE 44911
// continue ;
44909: GO 44843
// if HexInfo ( _x , _y ) = 0 then
44911: LD_VAR 0 7
44915: PPUSH
44916: LD_VAR 0 8
44920: PPUSH
44921: CALL_OW 428
44925: PUSH
44926: LD_INT 0
44928: EQUAL
44929: IFFALSE 44954
// begin ComMoveXY ( unit , _x , _y ) ;
44931: LD_VAR 0 1
44935: PPUSH
44936: LD_VAR 0 7
44940: PPUSH
44941: LD_VAR 0 8
44945: PPUSH
44946: CALL_OW 111
// exit ;
44950: POP
44951: POP
44952: GO 44958
// end ; end ;
44954: GO 44843
44956: POP
44957: POP
// end ;
44958: LD_VAR 0 3
44962: RET
// export function ScanBase ( side , base_area ) ; begin
44963: LD_INT 0
44965: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_VAR 0 2
44975: PPUSH
44976: LD_INT 81
44978: PUSH
44979: LD_VAR 0 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 70
44992: ST_TO_ADDR
// end ;
44993: LD_VAR 0 3
44997: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44998: LD_INT 0
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
// result := false ;
45004: LD_ADDR_VAR 0 2
45008: PUSH
45009: LD_INT 0
45011: ST_TO_ADDR
// side := GetSide ( unit ) ;
45012: LD_ADDR_VAR 0 3
45016: PUSH
45017: LD_VAR 0 1
45021: PPUSH
45022: CALL_OW 255
45026: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45027: LD_ADDR_VAR 0 4
45031: PUSH
45032: LD_VAR 0 1
45036: PPUSH
45037: CALL_OW 248
45041: ST_TO_ADDR
// case nat of 1 :
45042: LD_VAR 0 4
45046: PUSH
45047: LD_INT 1
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45066
45055: POP
// tech := tech_lassight ; 2 :
45056: LD_ADDR_VAR 0 5
45060: PUSH
45061: LD_INT 12
45063: ST_TO_ADDR
45064: GO 45105
45066: LD_INT 2
45068: DOUBLE
45069: EQUAL
45070: IFTRUE 45074
45072: GO 45085
45074: POP
// tech := tech_mortar ; 3 :
45075: LD_ADDR_VAR 0 5
45079: PUSH
45080: LD_INT 41
45082: ST_TO_ADDR
45083: GO 45105
45085: LD_INT 3
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45093
45091: GO 45104
45093: POP
// tech := tech_bazooka ; end ;
45094: LD_ADDR_VAR 0 5
45098: PUSH
45099: LD_INT 44
45101: ST_TO_ADDR
45102: GO 45105
45104: POP
// if Researched ( side , tech ) then
45105: LD_VAR 0 3
45109: PPUSH
45110: LD_VAR 0 5
45114: PPUSH
45115: CALL_OW 325
45119: IFFALSE 45146
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45121: LD_ADDR_VAR 0 2
45125: PUSH
45126: LD_INT 5
45128: PUSH
45129: LD_INT 8
45131: PUSH
45132: LD_INT 9
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: PUSH
45140: LD_VAR 0 4
45144: ARRAY
45145: ST_TO_ADDR
// end ;
45146: LD_VAR 0 2
45150: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45151: LD_INT 0
45153: PPUSH
45154: PPUSH
45155: PPUSH
// if not mines then
45156: LD_VAR 0 2
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45165: LD_ADDR_VAR 0 5
45169: PUSH
45170: LD_INT 81
45172: PUSH
45173: LD_VAR 0 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 21
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PPUSH
45203: CALL_OW 69
45207: ST_TO_ADDR
// for i in mines do
45208: LD_ADDR_VAR 0 4
45212: PUSH
45213: LD_VAR 0 2
45217: PUSH
45218: FOR_IN
45219: IFFALSE 45307
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45221: LD_VAR 0 4
45225: PUSH
45226: LD_INT 1
45228: ARRAY
45229: PPUSH
45230: LD_VAR 0 4
45234: PUSH
45235: LD_INT 2
45237: ARRAY
45238: PPUSH
45239: CALL_OW 458
45243: NOT
45244: IFFALSE 45248
// continue ;
45246: GO 45218
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45248: LD_VAR 0 4
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PPUSH
45257: LD_VAR 0 4
45261: PUSH
45262: LD_INT 2
45264: ARRAY
45265: PPUSH
45266: CALL_OW 428
45270: PUSH
45271: LD_VAR 0 5
45275: IN
45276: IFFALSE 45305
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45278: LD_VAR 0 4
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PPUSH
45287: LD_VAR 0 4
45291: PUSH
45292: LD_INT 2
45294: ARRAY
45295: PPUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 456
// end ;
45305: GO 45218
45307: POP
45308: POP
// end ;
45309: LD_VAR 0 3
45313: RET
// export function Count ( array ) ; begin
45314: LD_INT 0
45316: PPUSH
// result := array + 0 ;
45317: LD_ADDR_VAR 0 2
45321: PUSH
45322: LD_VAR 0 1
45326: PUSH
45327: LD_INT 0
45329: PLUS
45330: ST_TO_ADDR
// end ;
45331: LD_VAR 0 2
45335: RET
// export function IsEmpty ( building ) ; begin
45336: LD_INT 0
45338: PPUSH
// if not building then
45339: LD_VAR 0 1
45343: NOT
45344: IFFALSE 45348
// exit ;
45346: GO 45391
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45348: LD_ADDR_VAR 0 2
45352: PUSH
45353: LD_VAR 0 1
45357: PUSH
45358: LD_INT 22
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: CALL_OW 255
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 58
45377: PUSH
45378: EMPTY
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PPUSH
45385: CALL_OW 69
45389: IN
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 2
45395: RET
// export function IsNotFull ( building ) ; var places ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
// if not building then
45400: LD_VAR 0 1
45404: NOT
45405: IFFALSE 45409
// exit ;
45407: GO 45437
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45409: LD_ADDR_VAR 0 2
45413: PUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 62
45424: PUSH
45425: EMPTY
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PPUSH
45432: CALL_OW 72
45436: ST_TO_ADDR
// end ;
45437: LD_VAR 0 2
45441: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45442: LD_INT 0
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
// tmp := [ ] ;
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: EMPTY
45454: ST_TO_ADDR
// list := [ ] ;
45455: LD_ADDR_VAR 0 5
45459: PUSH
45460: EMPTY
45461: ST_TO_ADDR
// for i = 16 to 25 do
45462: LD_ADDR_VAR 0 4
45466: PUSH
45467: DOUBLE
45468: LD_INT 16
45470: DEC
45471: ST_TO_ADDR
45472: LD_INT 25
45474: PUSH
45475: FOR_TO
45476: IFFALSE 45549
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: LD_VAR 0 3
45487: PUSH
45488: LD_INT 22
45490: PUSH
45491: LD_VAR 0 1
45495: PPUSH
45496: CALL_OW 255
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 91
45507: PUSH
45508: LD_VAR 0 1
45512: PUSH
45513: LD_INT 6
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 30
45523: PUSH
45524: LD_VAR 0 4
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: PPUSH
45541: CALL_OW 69
45545: ADD
45546: ST_TO_ADDR
45547: GO 45475
45549: POP
45550: POP
// for i = 1 to tmp do
45551: LD_ADDR_VAR 0 4
45555: PUSH
45556: DOUBLE
45557: LD_INT 1
45559: DEC
45560: ST_TO_ADDR
45561: LD_VAR 0 3
45565: PUSH
45566: FOR_TO
45567: IFFALSE 45655
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45569: LD_ADDR_VAR 0 5
45573: PUSH
45574: LD_VAR 0 5
45578: PUSH
45579: LD_VAR 0 3
45583: PUSH
45584: LD_VAR 0 4
45588: ARRAY
45589: PPUSH
45590: CALL_OW 266
45594: PUSH
45595: LD_VAR 0 3
45599: PUSH
45600: LD_VAR 0 4
45604: ARRAY
45605: PPUSH
45606: CALL_OW 250
45610: PUSH
45611: LD_VAR 0 3
45615: PUSH
45616: LD_VAR 0 4
45620: ARRAY
45621: PPUSH
45622: CALL_OW 251
45626: PUSH
45627: LD_VAR 0 3
45631: PUSH
45632: LD_VAR 0 4
45636: ARRAY
45637: PPUSH
45638: CALL_OW 254
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: PUSH
45649: EMPTY
45650: LIST
45651: ADD
45652: ST_TO_ADDR
45653: GO 45566
45655: POP
45656: POP
// result := list ;
45657: LD_ADDR_VAR 0 2
45661: PUSH
45662: LD_VAR 0 5
45666: ST_TO_ADDR
// end ;
45667: LD_VAR 0 2
45671: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45672: LD_INT 0
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
// if not factory then
45681: LD_VAR 0 1
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 46293
// if control = control_apeman then
45690: LD_VAR 0 4
45694: PUSH
45695: LD_INT 5
45697: EQUAL
45698: IFFALSE 45807
// begin tmp := UnitsInside ( factory ) ;
45700: LD_ADDR_VAR 0 8
45704: PUSH
45705: LD_VAR 0 1
45709: PPUSH
45710: CALL_OW 313
45714: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45715: LD_VAR 0 8
45719: PPUSH
45720: LD_INT 25
45722: PUSH
45723: LD_INT 12
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PPUSH
45730: CALL_OW 72
45734: NOT
45735: IFFALSE 45745
// control := control_manual ;
45737: LD_ADDR_VAR 0 4
45741: PUSH
45742: LD_INT 1
45744: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45745: LD_ADDR_VAR 0 8
45749: PUSH
45750: LD_VAR 0 1
45754: PPUSH
45755: CALL 45442 0 1
45759: ST_TO_ADDR
// if tmp then
45760: LD_VAR 0 8
45764: IFFALSE 45807
// begin for i in tmp do
45766: LD_ADDR_VAR 0 7
45770: PUSH
45771: LD_VAR 0 8
45775: PUSH
45776: FOR_IN
45777: IFFALSE 45805
// if i [ 1 ] = b_ext_radio then
45779: LD_VAR 0 7
45783: PUSH
45784: LD_INT 1
45786: ARRAY
45787: PUSH
45788: LD_INT 22
45790: EQUAL
45791: IFFALSE 45803
// begin control := control_remote ;
45793: LD_ADDR_VAR 0 4
45797: PUSH
45798: LD_INT 2
45800: ST_TO_ADDR
// break ;
45801: GO 45805
// end ;
45803: GO 45776
45805: POP
45806: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45807: LD_VAR 0 1
45811: PPUSH
45812: LD_VAR 0 2
45816: PPUSH
45817: LD_VAR 0 3
45821: PPUSH
45822: LD_VAR 0 4
45826: PPUSH
45827: LD_VAR 0 5
45831: PPUSH
45832: CALL_OW 448
45836: IFFALSE 45871
// begin result := [ chassis , engine , control , weapon ] ;
45838: LD_ADDR_VAR 0 6
45842: PUSH
45843: LD_VAR 0 2
45847: PUSH
45848: LD_VAR 0 3
45852: PUSH
45853: LD_VAR 0 4
45857: PUSH
45858: LD_VAR 0 5
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// exit ;
45869: GO 46293
// end ; _chassis := AvailableChassisList ( factory ) ;
45871: LD_ADDR_VAR 0 9
45875: PUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 475
45885: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45886: LD_ADDR_VAR 0 11
45890: PUSH
45891: LD_VAR 0 1
45895: PPUSH
45896: CALL_OW 476
45900: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45901: LD_ADDR_VAR 0 12
45905: PUSH
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 477
45915: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45916: LD_ADDR_VAR 0 10
45920: PUSH
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 478
45930: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45931: LD_VAR 0 9
45935: NOT
45936: IFTRUE 45945
45938: PUSH
45939: LD_VAR 0 11
45943: NOT
45944: OR
45945: IFTRUE 45954
45947: PUSH
45948: LD_VAR 0 12
45952: NOT
45953: OR
45954: IFTRUE 45963
45956: PUSH
45957: LD_VAR 0 10
45961: NOT
45962: OR
45963: IFFALSE 45998
// begin result := [ chassis , engine , control , weapon ] ;
45965: LD_ADDR_VAR 0 6
45969: PUSH
45970: LD_VAR 0 2
45974: PUSH
45975: LD_VAR 0 3
45979: PUSH
45980: LD_VAR 0 4
45984: PUSH
45985: LD_VAR 0 5
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// exit ;
45996: GO 46293
// end ; if not chassis in _chassis then
45998: LD_VAR 0 2
46002: PUSH
46003: LD_VAR 0 9
46007: IN
46008: NOT
46009: IFFALSE 46035
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_VAR 0 9
46020: PUSH
46021: LD_INT 1
46023: PPUSH
46024: LD_VAR 0 9
46028: PPUSH
46029: CALL_OW 12
46033: ARRAY
46034: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46035: LD_VAR 0 2
46039: PPUSH
46040: LD_VAR 0 3
46044: PPUSH
46045: CALL 46298 0 2
46049: NOT
46050: IFFALSE 46111
// repeat engine := _engine [ 1 ] ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_VAR 0 11
46061: PUSH
46062: LD_INT 1
46064: ARRAY
46065: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46066: LD_ADDR_VAR 0 11
46070: PUSH
46071: LD_VAR 0 11
46075: PPUSH
46076: LD_INT 1
46078: PPUSH
46079: CALL_OW 3
46083: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46084: LD_VAR 0 2
46088: PPUSH
46089: LD_VAR 0 3
46093: PPUSH
46094: CALL 46298 0 2
46098: IFTRUE 46109
46100: PUSH
46101: LD_VAR 0 11
46105: PUSH
46106: EMPTY
46107: EQUAL
46108: OR
46109: IFFALSE 46052
// if not control in _control then
46111: LD_VAR 0 4
46115: PUSH
46116: LD_VAR 0 12
46120: IN
46121: NOT
46122: IFFALSE 46148
// control := _control [ rand ( 1 , _control ) ] ;
46124: LD_ADDR_VAR 0 4
46128: PUSH
46129: LD_VAR 0 12
46133: PUSH
46134: LD_INT 1
46136: PPUSH
46137: LD_VAR 0 12
46141: PPUSH
46142: CALL_OW 12
46146: ARRAY
46147: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46148: LD_VAR 0 2
46152: PPUSH
46153: LD_VAR 0 5
46157: PPUSH
46158: CALL 46520 0 2
46162: NOT
46163: IFFALSE 46224
// repeat weapon := _weapon [ 1 ] ;
46165: LD_ADDR_VAR 0 5
46169: PUSH
46170: LD_VAR 0 10
46174: PUSH
46175: LD_INT 1
46177: ARRAY
46178: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46179: LD_ADDR_VAR 0 10
46183: PUSH
46184: LD_VAR 0 10
46188: PPUSH
46189: LD_INT 1
46191: PPUSH
46192: CALL_OW 3
46196: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46197: LD_VAR 0 2
46201: PPUSH
46202: LD_VAR 0 5
46206: PPUSH
46207: CALL 46520 0 2
46211: IFTRUE 46222
46213: PUSH
46214: LD_VAR 0 10
46218: PUSH
46219: EMPTY
46220: EQUAL
46221: OR
46222: IFFALSE 46165
// result := [ ] ;
46224: LD_ADDR_VAR 0 6
46228: PUSH
46229: EMPTY
46230: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46231: LD_VAR 0 1
46235: PPUSH
46236: LD_VAR 0 2
46240: PPUSH
46241: LD_VAR 0 3
46245: PPUSH
46246: LD_VAR 0 4
46250: PPUSH
46251: LD_VAR 0 5
46255: PPUSH
46256: CALL_OW 448
46260: IFFALSE 46293
// result := [ chassis , engine , control , weapon ] ;
46262: LD_ADDR_VAR 0 6
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_VAR 0 3
46276: PUSH
46277: LD_VAR 0 4
46281: PUSH
46282: LD_VAR 0 5
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// end ;
46293: LD_VAR 0 6
46297: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46298: LD_INT 0
46300: PPUSH
// if not chassis or not engine then
46301: LD_VAR 0 1
46305: NOT
46306: IFTRUE 46315
46308: PUSH
46309: LD_VAR 0 2
46313: NOT
46314: OR
46315: IFFALSE 46319
// exit ;
46317: GO 46515
// case engine of engine_solar :
46319: LD_VAR 0 2
46323: PUSH
46324: LD_INT 2
46326: DOUBLE
46327: EQUAL
46328: IFTRUE 46332
46330: GO 46370
46332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46333: LD_ADDR_VAR 0 3
46337: PUSH
46338: LD_INT 11
46340: PUSH
46341: LD_INT 12
46343: PUSH
46344: LD_INT 13
46346: PUSH
46347: LD_INT 14
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
46368: GO 46499
46370: LD_INT 1
46372: DOUBLE
46373: EQUAL
46374: IFTRUE 46378
46376: GO 46440
46378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 11
46386: PUSH
46387: LD_INT 12
46389: PUSH
46390: LD_INT 13
46392: PUSH
46393: LD_INT 14
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: LD_INT 4
46407: PUSH
46408: LD_INT 5
46410: PUSH
46411: LD_INT 21
46413: PUSH
46414: LD_INT 23
46416: PUSH
46417: LD_INT 22
46419: PUSH
46420: LD_INT 24
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
46438: GO 46499
46440: LD_INT 3
46442: DOUBLE
46443: EQUAL
46444: IFTRUE 46448
46446: GO 46498
46448: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46449: LD_ADDR_VAR 0 3
46453: PUSH
46454: LD_INT 13
46456: PUSH
46457: LD_INT 14
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: LD_INT 4
46468: PUSH
46469: LD_INT 5
46471: PUSH
46472: LD_INT 21
46474: PUSH
46475: LD_INT 22
46477: PUSH
46478: LD_INT 23
46480: PUSH
46481: LD_INT 24
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: ST_TO_ADDR
46496: GO 46499
46498: POP
// result := ( chassis in result ) ;
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_VAR 0 1
46508: PUSH
46509: LD_VAR 0 3
46513: IN
46514: ST_TO_ADDR
// end ;
46515: LD_VAR 0 3
46519: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46520: LD_INT 0
46522: PPUSH
// if not chassis or not weapon then
46523: LD_VAR 0 1
46527: NOT
46528: IFTRUE 46537
46530: PUSH
46531: LD_VAR 0 2
46535: NOT
46536: OR
46537: IFFALSE 46541
// exit ;
46539: GO 47635
// case weapon of us_machine_gun :
46541: LD_VAR 0 2
46545: PUSH
46546: LD_INT 2
46548: DOUBLE
46549: EQUAL
46550: IFTRUE 46554
46552: GO 46584
46554: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46555: LD_ADDR_VAR 0 3
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: LD_INT 4
46571: PUSH
46572: LD_INT 5
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
46582: GO 47619
46584: LD_INT 3
46586: DOUBLE
46587: EQUAL
46588: IFTRUE 46592
46590: GO 46622
46592: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46593: LD_ADDR_VAR 0 3
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 4
46609: PUSH
46610: LD_INT 5
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
46620: GO 47619
46622: LD_INT 11
46624: DOUBLE
46625: EQUAL
46626: IFTRUE 46630
46628: GO 46660
46630: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46631: LD_ADDR_VAR 0 3
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: LD_INT 5
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
46658: GO 47619
46660: LD_INT 4
46662: DOUBLE
46663: EQUAL
46664: IFTRUE 46668
46666: GO 46694
46668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46669: LD_ADDR_VAR 0 3
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: LD_INT 5
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
46692: GO 47619
46694: LD_INT 5
46696: DOUBLE
46697: EQUAL
46698: IFTRUE 46702
46700: GO 46728
46702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46703: LD_ADDR_VAR 0 3
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 4
46716: PUSH
46717: LD_INT 5
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
46726: GO 47619
46728: LD_INT 9
46730: DOUBLE
46731: EQUAL
46732: IFTRUE 46736
46734: GO 46762
46736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46737: LD_ADDR_VAR 0 3
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: LD_INT 4
46750: PUSH
46751: LD_INT 5
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: ST_TO_ADDR
46760: GO 47619
46762: LD_INT 7
46764: DOUBLE
46765: EQUAL
46766: IFTRUE 46770
46768: GO 46796
46770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 4
46784: PUSH
46785: LD_INT 5
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
46794: GO 47619
46796: LD_INT 12
46798: DOUBLE
46799: EQUAL
46800: IFTRUE 46804
46802: GO 46830
46804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46805: LD_ADDR_VAR 0 3
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: LD_INT 4
46818: PUSH
46819: LD_INT 5
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
46828: GO 47619
46830: LD_INT 13
46832: DOUBLE
46833: EQUAL
46834: IFTRUE 46838
46836: GO 46864
46838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46839: LD_ADDR_VAR 0 3
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 4
46852: PUSH
46853: LD_INT 5
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: ST_TO_ADDR
46862: GO 47619
46864: LD_INT 14
46866: DOUBLE
46867: EQUAL
46868: IFTRUE 46872
46870: GO 46890
46872: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: LD_INT 4
46880: PUSH
46881: LD_INT 5
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: ST_TO_ADDR
46888: GO 47619
46890: LD_INT 6
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46916
46898: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46899: LD_ADDR_VAR 0 3
46903: PUSH
46904: LD_INT 4
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: ST_TO_ADDR
46914: GO 47619
46916: LD_INT 10
46918: DOUBLE
46919: EQUAL
46920: IFTRUE 46924
46922: GO 46942
46924: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46925: LD_ADDR_VAR 0 3
46929: PUSH
46930: LD_INT 4
46932: PUSH
46933: LD_INT 5
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: ST_TO_ADDR
46940: GO 47619
46942: LD_INT 22
46944: DOUBLE
46945: EQUAL
46946: IFTRUE 46950
46948: GO 46976
46950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_INT 11
46958: PUSH
46959: LD_INT 12
46961: PUSH
46962: LD_INT 13
46964: PUSH
46965: LD_INT 14
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
46974: GO 47619
46976: LD_INT 23
46978: DOUBLE
46979: EQUAL
46980: IFTRUE 46984
46982: GO 47010
46984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46985: LD_ADDR_VAR 0 3
46989: PUSH
46990: LD_INT 11
46992: PUSH
46993: LD_INT 12
46995: PUSH
46996: LD_INT 13
46998: PUSH
46999: LD_INT 14
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
47008: GO 47619
47010: LD_INT 24
47012: DOUBLE
47013: EQUAL
47014: IFTRUE 47018
47016: GO 47044
47018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47019: LD_ADDR_VAR 0 3
47023: PUSH
47024: LD_INT 11
47026: PUSH
47027: LD_INT 12
47029: PUSH
47030: LD_INT 13
47032: PUSH
47033: LD_INT 14
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
47042: GO 47619
47044: LD_INT 30
47046: DOUBLE
47047: EQUAL
47048: IFTRUE 47052
47050: GO 47078
47052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47053: LD_ADDR_VAR 0 3
47057: PUSH
47058: LD_INT 11
47060: PUSH
47061: LD_INT 12
47063: PUSH
47064: LD_INT 13
47066: PUSH
47067: LD_INT 14
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: ST_TO_ADDR
47076: GO 47619
47078: LD_INT 25
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47104
47086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47087: LD_ADDR_VAR 0 3
47091: PUSH
47092: LD_INT 13
47094: PUSH
47095: LD_INT 14
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: ST_TO_ADDR
47102: GO 47619
47104: LD_INT 27
47106: DOUBLE
47107: EQUAL
47108: IFTRUE 47112
47110: GO 47130
47112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47113: LD_ADDR_VAR 0 3
47117: PUSH
47118: LD_INT 13
47120: PUSH
47121: LD_INT 14
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: ST_TO_ADDR
47128: GO 47619
47130: LD_INT 92
47132: DOUBLE
47133: EQUAL
47134: IFTRUE 47138
47136: GO 47164
47138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47139: LD_ADDR_VAR 0 3
47143: PUSH
47144: LD_INT 11
47146: PUSH
47147: LD_INT 12
47149: PUSH
47150: LD_INT 13
47152: PUSH
47153: LD_INT 14
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
47162: GO 47619
47164: LD_INT 28
47166: DOUBLE
47167: EQUAL
47168: IFTRUE 47172
47170: GO 47190
47172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47173: LD_ADDR_VAR 0 3
47177: PUSH
47178: LD_INT 13
47180: PUSH
47181: LD_INT 14
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: ST_TO_ADDR
47188: GO 47619
47190: LD_INT 29
47192: DOUBLE
47193: EQUAL
47194: IFTRUE 47198
47196: GO 47216
47198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47199: LD_ADDR_VAR 0 3
47203: PUSH
47204: LD_INT 13
47206: PUSH
47207: LD_INT 14
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: ST_TO_ADDR
47214: GO 47619
47216: LD_INT 31
47218: DOUBLE
47219: EQUAL
47220: IFTRUE 47224
47222: GO 47242
47224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47225: LD_ADDR_VAR 0 3
47229: PUSH
47230: LD_INT 13
47232: PUSH
47233: LD_INT 14
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: ST_TO_ADDR
47240: GO 47619
47242: LD_INT 26
47244: DOUBLE
47245: EQUAL
47246: IFTRUE 47250
47248: GO 47268
47250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47251: LD_ADDR_VAR 0 3
47255: PUSH
47256: LD_INT 13
47258: PUSH
47259: LD_INT 14
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: ST_TO_ADDR
47266: GO 47619
47268: LD_INT 42
47270: DOUBLE
47271: EQUAL
47272: IFTRUE 47276
47274: GO 47302
47276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47277: LD_ADDR_VAR 0 3
47281: PUSH
47282: LD_INT 21
47284: PUSH
47285: LD_INT 22
47287: PUSH
47288: LD_INT 23
47290: PUSH
47291: LD_INT 24
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
47300: GO 47619
47302: LD_INT 43
47304: DOUBLE
47305: EQUAL
47306: IFTRUE 47310
47308: GO 47336
47310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47311: LD_ADDR_VAR 0 3
47315: PUSH
47316: LD_INT 21
47318: PUSH
47319: LD_INT 22
47321: PUSH
47322: LD_INT 23
47324: PUSH
47325: LD_INT 24
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
47334: GO 47619
47336: LD_INT 44
47338: DOUBLE
47339: EQUAL
47340: IFTRUE 47344
47342: GO 47370
47344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47345: LD_ADDR_VAR 0 3
47349: PUSH
47350: LD_INT 21
47352: PUSH
47353: LD_INT 22
47355: PUSH
47356: LD_INT 23
47358: PUSH
47359: LD_INT 24
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
47368: GO 47619
47370: LD_INT 45
47372: DOUBLE
47373: EQUAL
47374: IFTRUE 47378
47376: GO 47404
47378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47379: LD_ADDR_VAR 0 3
47383: PUSH
47384: LD_INT 21
47386: PUSH
47387: LD_INT 22
47389: PUSH
47390: LD_INT 23
47392: PUSH
47393: LD_INT 24
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
47402: GO 47619
47404: LD_INT 49
47406: DOUBLE
47407: EQUAL
47408: IFTRUE 47412
47410: GO 47438
47412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47413: LD_ADDR_VAR 0 3
47417: PUSH
47418: LD_INT 21
47420: PUSH
47421: LD_INT 22
47423: PUSH
47424: LD_INT 23
47426: PUSH
47427: LD_INT 24
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: ST_TO_ADDR
47436: GO 47619
47438: LD_INT 51
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47472
47446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47447: LD_ADDR_VAR 0 3
47451: PUSH
47452: LD_INT 21
47454: PUSH
47455: LD_INT 22
47457: PUSH
47458: LD_INT 23
47460: PUSH
47461: LD_INT 24
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
47470: GO 47619
47472: LD_INT 52
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 47506
47480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_INT 21
47488: PUSH
47489: LD_INT 22
47491: PUSH
47492: LD_INT 23
47494: PUSH
47495: LD_INT 24
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
47504: GO 47619
47506: LD_INT 53
47508: DOUBLE
47509: EQUAL
47510: IFTRUE 47514
47512: GO 47532
47514: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47515: LD_ADDR_VAR 0 3
47519: PUSH
47520: LD_INT 23
47522: PUSH
47523: LD_INT 24
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: ST_TO_ADDR
47530: GO 47619
47532: LD_INT 46
47534: DOUBLE
47535: EQUAL
47536: IFTRUE 47540
47538: GO 47558
47540: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47541: LD_ADDR_VAR 0 3
47545: PUSH
47546: LD_INT 23
47548: PUSH
47549: LD_INT 24
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: ST_TO_ADDR
47556: GO 47619
47558: LD_INT 47
47560: DOUBLE
47561: EQUAL
47562: IFTRUE 47566
47564: GO 47584
47566: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: LD_INT 23
47574: PUSH
47575: LD_INT 24
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: ST_TO_ADDR
47582: GO 47619
47584: LD_INT 98
47586: DOUBLE
47587: EQUAL
47588: IFTRUE 47592
47590: GO 47618
47592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47593: LD_ADDR_VAR 0 3
47597: PUSH
47598: LD_INT 21
47600: PUSH
47601: LD_INT 22
47603: PUSH
47604: LD_INT 23
47606: PUSH
47607: LD_INT 24
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
47616: GO 47619
47618: POP
// result := ( chassis in result ) ;
47619: LD_ADDR_VAR 0 3
47623: PUSH
47624: LD_VAR 0 1
47628: PUSH
47629: LD_VAR 0 3
47633: IN
47634: ST_TO_ADDR
// end ;
47635: LD_VAR 0 3
47639: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47640: LD_INT 0
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
47648: PPUSH
// result := array ;
47649: LD_ADDR_VAR 0 5
47653: PUSH
47654: LD_VAR 0 1
47658: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47659: LD_VAR 0 1
47663: NOT
47664: IFTRUE 47673
47666: PUSH
47667: LD_VAR 0 2
47671: NOT
47672: OR
47673: IFTRUE 47682
47675: PUSH
47676: LD_VAR 0 3
47680: NOT
47681: OR
47682: IFTRUE 47696
47684: PUSH
47685: LD_VAR 0 2
47689: PUSH
47690: LD_VAR 0 1
47694: GREATER
47695: OR
47696: IFTRUE 47710
47698: PUSH
47699: LD_VAR 0 3
47703: PUSH
47704: LD_VAR 0 1
47708: GREATER
47709: OR
47710: IFFALSE 47714
// exit ;
47712: GO 48010
// if direction then
47714: LD_VAR 0 4
47718: IFFALSE 47782
// begin d := 1 ;
47720: LD_ADDR_VAR 0 9
47724: PUSH
47725: LD_INT 1
47727: ST_TO_ADDR
// if i_from > i_to then
47728: LD_VAR 0 2
47732: PUSH
47733: LD_VAR 0 3
47737: GREATER
47738: IFFALSE 47764
// length := ( array - i_from ) + i_to else
47740: LD_ADDR_VAR 0 11
47744: PUSH
47745: LD_VAR 0 1
47749: PUSH
47750: LD_VAR 0 2
47754: MINUS
47755: PUSH
47756: LD_VAR 0 3
47760: PLUS
47761: ST_TO_ADDR
47762: GO 47780
// length := i_to - i_from ;
47764: LD_ADDR_VAR 0 11
47768: PUSH
47769: LD_VAR 0 3
47773: PUSH
47774: LD_VAR 0 2
47778: MINUS
47779: ST_TO_ADDR
// end else
47780: GO 47843
// begin d := - 1 ;
47782: LD_ADDR_VAR 0 9
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: ST_TO_ADDR
// if i_from > i_to then
47791: LD_VAR 0 2
47795: PUSH
47796: LD_VAR 0 3
47800: GREATER
47801: IFFALSE 47821
// length := i_from - i_to else
47803: LD_ADDR_VAR 0 11
47807: PUSH
47808: LD_VAR 0 2
47812: PUSH
47813: LD_VAR 0 3
47817: MINUS
47818: ST_TO_ADDR
47819: GO 47843
// length := ( array - i_to ) + i_from ;
47821: LD_ADDR_VAR 0 11
47825: PUSH
47826: LD_VAR 0 1
47830: PUSH
47831: LD_VAR 0 3
47835: MINUS
47836: PUSH
47837: LD_VAR 0 2
47841: PLUS
47842: ST_TO_ADDR
// end ; if not length then
47843: LD_VAR 0 11
47847: NOT
47848: IFFALSE 47852
// exit ;
47850: GO 48010
// tmp := array ;
47852: LD_ADDR_VAR 0 10
47856: PUSH
47857: LD_VAR 0 1
47861: ST_TO_ADDR
// for i = 1 to length do
47862: LD_ADDR_VAR 0 6
47866: PUSH
47867: DOUBLE
47868: LD_INT 1
47870: DEC
47871: ST_TO_ADDR
47872: LD_VAR 0 11
47876: PUSH
47877: FOR_TO
47878: IFFALSE 47998
// begin for j = 1 to array do
47880: LD_ADDR_VAR 0 7
47884: PUSH
47885: DOUBLE
47886: LD_INT 1
47888: DEC
47889: ST_TO_ADDR
47890: LD_VAR 0 1
47894: PUSH
47895: FOR_TO
47896: IFFALSE 47984
// begin k := j + d ;
47898: LD_ADDR_VAR 0 8
47902: PUSH
47903: LD_VAR 0 7
47907: PUSH
47908: LD_VAR 0 9
47912: PLUS
47913: ST_TO_ADDR
// if k > array then
47914: LD_VAR 0 8
47918: PUSH
47919: LD_VAR 0 1
47923: GREATER
47924: IFFALSE 47934
// k := 1 ;
47926: LD_ADDR_VAR 0 8
47930: PUSH
47931: LD_INT 1
47933: ST_TO_ADDR
// if not k then
47934: LD_VAR 0 8
47938: NOT
47939: IFFALSE 47951
// k := array ;
47941: LD_ADDR_VAR 0 8
47945: PUSH
47946: LD_VAR 0 1
47950: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47951: LD_ADDR_VAR 0 10
47955: PUSH
47956: LD_VAR 0 10
47960: PPUSH
47961: LD_VAR 0 8
47965: PPUSH
47966: LD_VAR 0 1
47970: PUSH
47971: LD_VAR 0 7
47975: ARRAY
47976: PPUSH
47977: CALL_OW 1
47981: ST_TO_ADDR
// end ;
47982: GO 47895
47984: POP
47985: POP
// array := tmp ;
47986: LD_ADDR_VAR 0 1
47990: PUSH
47991: LD_VAR 0 10
47995: ST_TO_ADDR
// end ;
47996: GO 47877
47998: POP
47999: POP
// result := array ;
48000: LD_ADDR_VAR 0 5
48004: PUSH
48005: LD_VAR 0 1
48009: ST_TO_ADDR
// end ;
48010: LD_VAR 0 5
48014: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48015: LD_INT 0
48017: PPUSH
48018: PPUSH
// result := 0 ;
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_INT 0
48026: ST_TO_ADDR
// if not array or not value in array then
48027: LD_VAR 0 1
48031: NOT
48032: IFTRUE 48047
48034: PUSH
48035: LD_VAR 0 2
48039: PUSH
48040: LD_VAR 0 1
48044: IN
48045: NOT
48046: OR
48047: IFFALSE 48051
// exit ;
48049: GO 48105
// for i = 1 to array do
48051: LD_ADDR_VAR 0 4
48055: PUSH
48056: DOUBLE
48057: LD_INT 1
48059: DEC
48060: ST_TO_ADDR
48061: LD_VAR 0 1
48065: PUSH
48066: FOR_TO
48067: IFFALSE 48103
// if value = array [ i ] then
48069: LD_VAR 0 2
48073: PUSH
48074: LD_VAR 0 1
48078: PUSH
48079: LD_VAR 0 4
48083: ARRAY
48084: EQUAL
48085: IFFALSE 48101
// begin result := i ;
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: LD_VAR 0 4
48096: ST_TO_ADDR
// exit ;
48097: POP
48098: POP
48099: GO 48105
// end ;
48101: GO 48066
48103: POP
48104: POP
// end ;
48105: LD_VAR 0 3
48109: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48110: LD_INT 0
48112: PPUSH
// vc_chassis := chassis ;
48113: LD_ADDR_OWVAR 37
48117: PUSH
48118: LD_VAR 0 1
48122: ST_TO_ADDR
// vc_engine := engine ;
48123: LD_ADDR_OWVAR 39
48127: PUSH
48128: LD_VAR 0 2
48132: ST_TO_ADDR
// vc_control := control ;
48133: LD_ADDR_OWVAR 38
48137: PUSH
48138: LD_VAR 0 3
48142: ST_TO_ADDR
// vc_weapon := weapon ;
48143: LD_ADDR_OWVAR 40
48147: PUSH
48148: LD_VAR 0 4
48152: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48153: LD_ADDR_OWVAR 41
48157: PUSH
48158: LD_VAR 0 5
48162: ST_TO_ADDR
// end ;
48163: LD_VAR 0 6
48167: RET
// export function WantPlant ( unit ) ; var task ; begin
48168: LD_INT 0
48170: PPUSH
48171: PPUSH
// result := false ;
48172: LD_ADDR_VAR 0 2
48176: PUSH
48177: LD_INT 0
48179: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: CALL_OW 437
48194: ST_TO_ADDR
// if task then
48195: LD_VAR 0 3
48199: IFFALSE 48227
// if task [ 1 ] [ 1 ] = p then
48201: LD_VAR 0 3
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: PUSH
48214: LD_STRING p
48216: EQUAL
48217: IFFALSE 48227
// result := true ;
48219: LD_ADDR_VAR 0 2
48223: PUSH
48224: LD_INT 1
48226: ST_TO_ADDR
// end ;
48227: LD_VAR 0 2
48231: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48232: LD_INT 0
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
// if pos < 1 then
48238: LD_VAR 0 2
48242: PUSH
48243: LD_INT 1
48245: LESS
48246: IFFALSE 48250
// exit ;
48248: GO 48553
// if pos = 1 then
48250: LD_VAR 0 2
48254: PUSH
48255: LD_INT 1
48257: EQUAL
48258: IFFALSE 48291
// result := Replace ( arr , pos [ 1 ] , value ) else
48260: LD_ADDR_VAR 0 4
48264: PUSH
48265: LD_VAR 0 1
48269: PPUSH
48270: LD_VAR 0 2
48274: PUSH
48275: LD_INT 1
48277: ARRAY
48278: PPUSH
48279: LD_VAR 0 3
48283: PPUSH
48284: CALL_OW 1
48288: ST_TO_ADDR
48289: GO 48553
// begin tmp := arr ;
48291: LD_ADDR_VAR 0 6
48295: PUSH
48296: LD_VAR 0 1
48300: ST_TO_ADDR
// s_arr := [ tmp ] ;
48301: LD_ADDR_VAR 0 7
48305: PUSH
48306: LD_VAR 0 6
48310: PUSH
48311: EMPTY
48312: LIST
48313: ST_TO_ADDR
// for i = 1 to pos - 1 do
48314: LD_ADDR_VAR 0 5
48318: PUSH
48319: DOUBLE
48320: LD_INT 1
48322: DEC
48323: ST_TO_ADDR
48324: LD_VAR 0 2
48328: PUSH
48329: LD_INT 1
48331: MINUS
48332: PUSH
48333: FOR_TO
48334: IFFALSE 48379
// begin tmp := tmp [ pos [ i ] ] ;
48336: LD_ADDR_VAR 0 6
48340: PUSH
48341: LD_VAR 0 6
48345: PUSH
48346: LD_VAR 0 2
48350: PUSH
48351: LD_VAR 0 5
48355: ARRAY
48356: ARRAY
48357: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48358: LD_ADDR_VAR 0 7
48362: PUSH
48363: LD_VAR 0 7
48367: PUSH
48368: LD_VAR 0 6
48372: PUSH
48373: EMPTY
48374: LIST
48375: ADD
48376: ST_TO_ADDR
// end ;
48377: GO 48333
48379: POP
48380: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48381: LD_ADDR_VAR 0 6
48385: PUSH
48386: LD_VAR 0 6
48390: PPUSH
48391: LD_VAR 0 2
48395: PUSH
48396: LD_VAR 0 2
48400: ARRAY
48401: PPUSH
48402: LD_VAR 0 3
48406: PPUSH
48407: CALL_OW 1
48411: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48412: LD_ADDR_VAR 0 7
48416: PUSH
48417: LD_VAR 0 7
48421: PPUSH
48422: LD_VAR 0 7
48426: PPUSH
48427: LD_VAR 0 6
48431: PPUSH
48432: CALL_OW 1
48436: ST_TO_ADDR
// for i = s_arr downto 2 do
48437: LD_ADDR_VAR 0 5
48441: PUSH
48442: DOUBLE
48443: LD_VAR 0 7
48447: INC
48448: ST_TO_ADDR
48449: LD_INT 2
48451: PUSH
48452: FOR_DOWNTO
48453: IFFALSE 48537
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48455: LD_ADDR_VAR 0 6
48459: PUSH
48460: LD_VAR 0 7
48464: PUSH
48465: LD_VAR 0 5
48469: PUSH
48470: LD_INT 1
48472: MINUS
48473: ARRAY
48474: PPUSH
48475: LD_VAR 0 2
48479: PUSH
48480: LD_VAR 0 5
48484: PUSH
48485: LD_INT 1
48487: MINUS
48488: ARRAY
48489: PPUSH
48490: LD_VAR 0 7
48494: PUSH
48495: LD_VAR 0 5
48499: ARRAY
48500: PPUSH
48501: CALL_OW 1
48505: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48506: LD_ADDR_VAR 0 7
48510: PUSH
48511: LD_VAR 0 7
48515: PPUSH
48516: LD_VAR 0 5
48520: PUSH
48521: LD_INT 1
48523: MINUS
48524: PPUSH
48525: LD_VAR 0 6
48529: PPUSH
48530: CALL_OW 1
48534: ST_TO_ADDR
// end ;
48535: GO 48452
48537: POP
48538: POP
// result := s_arr [ 1 ] ;
48539: LD_ADDR_VAR 0 4
48543: PUSH
48544: LD_VAR 0 7
48548: PUSH
48549: LD_INT 1
48551: ARRAY
48552: ST_TO_ADDR
// end ; end ;
48553: LD_VAR 0 4
48557: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48558: LD_INT 0
48560: PPUSH
48561: PPUSH
// if not list then
48562: LD_VAR 0 1
48566: NOT
48567: IFFALSE 48571
// exit ;
48569: GO 48662
// i := list [ pos1 ] ;
48571: LD_ADDR_VAR 0 5
48575: PUSH
48576: LD_VAR 0 1
48580: PUSH
48581: LD_VAR 0 2
48585: ARRAY
48586: ST_TO_ADDR
// if not i then
48587: LD_VAR 0 5
48591: NOT
48592: IFFALSE 48596
// exit ;
48594: GO 48662
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48596: LD_ADDR_VAR 0 1
48600: PUSH
48601: LD_VAR 0 1
48605: PPUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: LD_VAR 0 1
48615: PUSH
48616: LD_VAR 0 3
48620: ARRAY
48621: PPUSH
48622: CALL_OW 1
48626: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48627: LD_ADDR_VAR 0 1
48631: PUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: LD_VAR 0 3
48641: PPUSH
48642: LD_VAR 0 5
48646: PPUSH
48647: CALL_OW 1
48651: ST_TO_ADDR
// result := list ;
48652: LD_ADDR_VAR 0 4
48656: PUSH
48657: LD_VAR 0 1
48661: ST_TO_ADDR
// end ;
48662: LD_VAR 0 4
48666: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48667: LD_INT 0
48669: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48670: LD_ADDR_VAR 0 5
48674: PUSH
48675: LD_VAR 0 1
48679: PPUSH
48680: CALL_OW 250
48684: PPUSH
48685: LD_VAR 0 1
48689: PPUSH
48690: CALL_OW 251
48694: PPUSH
48695: LD_VAR 0 2
48699: PPUSH
48700: LD_VAR 0 3
48704: PPUSH
48705: LD_VAR 0 4
48709: PPUSH
48710: CALL 49092 0 5
48714: ST_TO_ADDR
// end ;
48715: LD_VAR 0 5
48719: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48720: LD_INT 0
48722: PPUSH
48723: PPUSH
48724: PPUSH
48725: PPUSH
// if not list or not unit then
48726: LD_VAR 0 2
48730: NOT
48731: IFTRUE 48740
48733: PUSH
48734: LD_VAR 0 1
48738: NOT
48739: OR
48740: IFFALSE 48744
// exit ;
48742: GO 49087
// result := [ ] ;
48744: LD_ADDR_VAR 0 5
48748: PUSH
48749: EMPTY
48750: ST_TO_ADDR
// for i in list do
48751: LD_ADDR_VAR 0 6
48755: PUSH
48756: LD_VAR 0 2
48760: PUSH
48761: FOR_IN
48762: IFFALSE 48980
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48764: LD_ADDR_VAR 0 8
48768: PUSH
48769: LD_VAR 0 1
48773: PPUSH
48774: LD_VAR 0 6
48778: PUSH
48779: LD_INT 1
48781: ARRAY
48782: PPUSH
48783: LD_VAR 0 6
48787: PUSH
48788: LD_INT 2
48790: ARRAY
48791: PPUSH
48792: CALL_OW 297
48796: ST_TO_ADDR
// if not Count ( result ) then
48797: LD_VAR 0 5
48801: PPUSH
48802: CALL 45314 0 1
48806: NOT
48807: IFFALSE 48840
// begin result := Join ( result , [ i , tmp ] ) ;
48809: LD_ADDR_VAR 0 5
48813: PUSH
48814: LD_VAR 0 5
48818: PPUSH
48819: LD_VAR 0 6
48823: PUSH
48824: LD_VAR 0 8
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PPUSH
48833: CALL 81290 0 2
48837: ST_TO_ADDR
// continue ;
48838: GO 48761
// end ; if result [ result ] [ 2 ] <= tmp then
48840: LD_VAR 0 5
48844: PUSH
48845: LD_VAR 0 5
48849: ARRAY
48850: PUSH
48851: LD_INT 2
48853: ARRAY
48854: PUSH
48855: LD_VAR 0 8
48859: LESSEQUAL
48860: IFFALSE 48893
// result := Join ( result , [ i , tmp ] ) else
48862: LD_ADDR_VAR 0 5
48866: PUSH
48867: LD_VAR 0 5
48871: PPUSH
48872: LD_VAR 0 6
48876: PUSH
48877: LD_VAR 0 8
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PPUSH
48886: CALL 81290 0 2
48890: ST_TO_ADDR
48891: GO 48978
// begin for j := 1 to Count ( result ) do
48893: LD_ADDR_VAR 0 7
48897: PUSH
48898: DOUBLE
48899: LD_INT 1
48901: DEC
48902: ST_TO_ADDR
48903: LD_VAR 0 5
48907: PPUSH
48908: CALL 45314 0 1
48912: PUSH
48913: FOR_TO
48914: IFFALSE 48976
// begin if tmp < result [ j ] [ 2 ] then
48916: LD_VAR 0 8
48920: PUSH
48921: LD_VAR 0 5
48925: PUSH
48926: LD_VAR 0 7
48930: ARRAY
48931: PUSH
48932: LD_INT 2
48934: ARRAY
48935: LESS
48936: IFFALSE 48974
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48938: LD_ADDR_VAR 0 5
48942: PUSH
48943: LD_VAR 0 5
48947: PPUSH
48948: LD_VAR 0 7
48952: PPUSH
48953: LD_VAR 0 6
48957: PUSH
48958: LD_VAR 0 8
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PPUSH
48967: CALL_OW 2
48971: ST_TO_ADDR
// break ;
48972: GO 48976
// end ; end ;
48974: GO 48913
48976: POP
48977: POP
// end ; end ;
48978: GO 48761
48980: POP
48981: POP
// if result and not asc then
48982: LD_VAR 0 5
48986: IFFALSE 48995
48988: PUSH
48989: LD_VAR 0 3
48993: NOT
48994: AND
48995: IFFALSE 49012
// result := ReverseArray ( result ) ;
48997: LD_ADDR_VAR 0 5
49001: PUSH
49002: LD_VAR 0 5
49006: PPUSH
49007: CALL 76370 0 1
49011: ST_TO_ADDR
// tmp := [ ] ;
49012: LD_ADDR_VAR 0 8
49016: PUSH
49017: EMPTY
49018: ST_TO_ADDR
// if mode then
49019: LD_VAR 0 4
49023: IFFALSE 49087
// begin for i := 1 to result do
49025: LD_ADDR_VAR 0 6
49029: PUSH
49030: DOUBLE
49031: LD_INT 1
49033: DEC
49034: ST_TO_ADDR
49035: LD_VAR 0 5
49039: PUSH
49040: FOR_TO
49041: IFFALSE 49075
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49043: LD_ADDR_VAR 0 8
49047: PUSH
49048: LD_VAR 0 8
49052: PPUSH
49053: LD_VAR 0 5
49057: PUSH
49058: LD_VAR 0 6
49062: ARRAY
49063: PUSH
49064: LD_INT 1
49066: ARRAY
49067: PPUSH
49068: CALL 81290 0 2
49072: ST_TO_ADDR
49073: GO 49040
49075: POP
49076: POP
// result := tmp ;
49077: LD_ADDR_VAR 0 5
49081: PUSH
49082: LD_VAR 0 8
49086: ST_TO_ADDR
// end ; end ;
49087: LD_VAR 0 5
49091: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49092: LD_INT 0
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
// if not list then
49098: LD_VAR 0 3
49102: NOT
49103: IFFALSE 49107
// exit ;
49105: GO 49497
// result := [ ] ;
49107: LD_ADDR_VAR 0 6
49111: PUSH
49112: EMPTY
49113: ST_TO_ADDR
// for i in list do
49114: LD_ADDR_VAR 0 7
49118: PUSH
49119: LD_VAR 0 3
49123: PUSH
49124: FOR_IN
49125: IFFALSE 49327
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49127: LD_ADDR_VAR 0 9
49131: PUSH
49132: LD_VAR 0 7
49136: PPUSH
49137: LD_VAR 0 1
49141: PPUSH
49142: LD_VAR 0 2
49146: PPUSH
49147: CALL_OW 297
49151: ST_TO_ADDR
// if not result then
49152: LD_VAR 0 6
49156: NOT
49157: IFFALSE 49183
// result := [ [ i , tmp ] ] else
49159: LD_ADDR_VAR 0 6
49163: PUSH
49164: LD_VAR 0 7
49168: PUSH
49169: LD_VAR 0 9
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: ST_TO_ADDR
49181: GO 49325
// begin if result [ result ] [ 2 ] <= tmp then
49183: LD_VAR 0 6
49187: PUSH
49188: LD_VAR 0 6
49192: ARRAY
49193: PUSH
49194: LD_INT 2
49196: ARRAY
49197: PUSH
49198: LD_VAR 0 9
49202: LESSEQUAL
49203: IFFALSE 49245
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49205: LD_ADDR_VAR 0 6
49209: PUSH
49210: LD_VAR 0 6
49214: PPUSH
49215: LD_VAR 0 6
49219: PUSH
49220: LD_INT 1
49222: PLUS
49223: PPUSH
49224: LD_VAR 0 7
49228: PUSH
49229: LD_VAR 0 9
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PPUSH
49238: CALL_OW 2
49242: ST_TO_ADDR
49243: GO 49325
// for j := 1 to result do
49245: LD_ADDR_VAR 0 8
49249: PUSH
49250: DOUBLE
49251: LD_INT 1
49253: DEC
49254: ST_TO_ADDR
49255: LD_VAR 0 6
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49323
// begin if tmp < result [ j ] [ 2 ] then
49263: LD_VAR 0 9
49267: PUSH
49268: LD_VAR 0 6
49272: PUSH
49273: LD_VAR 0 8
49277: ARRAY
49278: PUSH
49279: LD_INT 2
49281: ARRAY
49282: LESS
49283: IFFALSE 49321
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49285: LD_ADDR_VAR 0 6
49289: PUSH
49290: LD_VAR 0 6
49294: PPUSH
49295: LD_VAR 0 8
49299: PPUSH
49300: LD_VAR 0 7
49304: PUSH
49305: LD_VAR 0 9
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PPUSH
49314: CALL_OW 2
49318: ST_TO_ADDR
// break ;
49319: GO 49323
// end ; end ;
49321: GO 49260
49323: POP
49324: POP
// end ; end ;
49325: GO 49124
49327: POP
49328: POP
// if result and not asc then
49329: LD_VAR 0 6
49333: IFFALSE 49342
49335: PUSH
49336: LD_VAR 0 4
49340: NOT
49341: AND
49342: IFFALSE 49417
// begin tmp := result ;
49344: LD_ADDR_VAR 0 9
49348: PUSH
49349: LD_VAR 0 6
49353: ST_TO_ADDR
// for i = tmp downto 1 do
49354: LD_ADDR_VAR 0 7
49358: PUSH
49359: DOUBLE
49360: LD_VAR 0 9
49364: INC
49365: ST_TO_ADDR
49366: LD_INT 1
49368: PUSH
49369: FOR_DOWNTO
49370: IFFALSE 49415
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49372: LD_ADDR_VAR 0 6
49376: PUSH
49377: LD_VAR 0 6
49381: PPUSH
49382: LD_VAR 0 9
49386: PUSH
49387: LD_VAR 0 7
49391: MINUS
49392: PUSH
49393: LD_INT 1
49395: PLUS
49396: PPUSH
49397: LD_VAR 0 9
49401: PUSH
49402: LD_VAR 0 7
49406: ARRAY
49407: PPUSH
49408: CALL_OW 1
49412: ST_TO_ADDR
49413: GO 49369
49415: POP
49416: POP
// end ; tmp := [ ] ;
49417: LD_ADDR_VAR 0 9
49421: PUSH
49422: EMPTY
49423: ST_TO_ADDR
// if mode then
49424: LD_VAR 0 5
49428: IFFALSE 49497
// begin for i = 1 to result do
49430: LD_ADDR_VAR 0 7
49434: PUSH
49435: DOUBLE
49436: LD_INT 1
49438: DEC
49439: ST_TO_ADDR
49440: LD_VAR 0 6
49444: PUSH
49445: FOR_TO
49446: IFFALSE 49485
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49448: LD_ADDR_VAR 0 9
49452: PUSH
49453: LD_VAR 0 9
49457: PPUSH
49458: LD_VAR 0 7
49462: PPUSH
49463: LD_VAR 0 6
49467: PUSH
49468: LD_VAR 0 7
49472: ARRAY
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: CALL_OW 1
49482: ST_TO_ADDR
49483: GO 49445
49485: POP
49486: POP
// result := tmp ;
49487: LD_ADDR_VAR 0 6
49491: PUSH
49492: LD_VAR 0 9
49496: ST_TO_ADDR
// end ; end ;
49497: LD_VAR 0 6
49501: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49502: LD_INT 0
49504: PPUSH
49505: PPUSH
49506: PPUSH
49507: PPUSH
49508: PPUSH
49509: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49510: LD_ADDR_VAR 0 5
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// if not x or not y then
49532: LD_VAR 0 2
49536: NOT
49537: IFTRUE 49546
49539: PUSH
49540: LD_VAR 0 3
49544: NOT
49545: OR
49546: IFFALSE 49550
// exit ;
49548: GO 51206
// if not range then
49550: LD_VAR 0 4
49554: NOT
49555: IFFALSE 49565
// range := 10 ;
49557: LD_ADDR_VAR 0 4
49561: PUSH
49562: LD_INT 10
49564: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49565: LD_ADDR_VAR 0 8
49569: PUSH
49570: LD_INT 81
49572: PUSH
49573: LD_VAR 0 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 92
49584: PUSH
49585: LD_VAR 0 2
49589: PUSH
49590: LD_VAR 0 3
49594: PUSH
49595: LD_VAR 0 4
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: LD_INT 21
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: PPUSH
49628: CALL_OW 69
49632: ST_TO_ADDR
// if not tmp then
49633: LD_VAR 0 8
49637: NOT
49638: IFFALSE 49642
// exit ;
49640: GO 51206
// for i in tmp do
49642: LD_ADDR_VAR 0 6
49646: PUSH
49647: LD_VAR 0 8
49651: PUSH
49652: FOR_IN
49653: IFFALSE 51181
// begin points := [ 0 , 0 , 0 ] ;
49655: LD_ADDR_VAR 0 9
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// bpoints := 1 ;
49674: LD_ADDR_VAR 0 10
49678: PUSH
49679: LD_INT 1
49681: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49682: LD_VAR 0 6
49686: PPUSH
49687: CALL_OW 247
49691: PUSH
49692: LD_INT 1
49694: DOUBLE
49695: EQUAL
49696: IFTRUE 49700
49698: GO 50282
49700: POP
// begin if GetClass ( i ) = 1 then
49701: LD_VAR 0 6
49705: PPUSH
49706: CALL_OW 257
49710: PUSH
49711: LD_INT 1
49713: EQUAL
49714: IFFALSE 49735
// points := [ 10 , 5 , 3 ] ;
49716: LD_ADDR_VAR 0 9
49720: PUSH
49721: LD_INT 10
49723: PUSH
49724: LD_INT 5
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49735: LD_VAR 0 6
49739: PPUSH
49740: CALL_OW 257
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: LD_INT 4
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: IN
49759: IFFALSE 49780
// points := [ 3 , 2 , 1 ] ;
49761: LD_ADDR_VAR 0 9
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49780: LD_VAR 0 6
49784: PPUSH
49785: CALL_OW 257
49789: PUSH
49790: LD_INT 5
49792: EQUAL
49793: IFFALSE 49814
// points := [ 130 , 5 , 2 ] ;
49795: LD_ADDR_VAR 0 9
49799: PUSH
49800: LD_INT 130
49802: PUSH
49803: LD_INT 5
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49814: LD_VAR 0 6
49818: PPUSH
49819: CALL_OW 257
49823: PUSH
49824: LD_INT 8
49826: EQUAL
49827: IFFALSE 49848
// points := [ 35 , 35 , 30 ] ;
49829: LD_ADDR_VAR 0 9
49833: PUSH
49834: LD_INT 35
49836: PUSH
49837: LD_INT 35
49839: PUSH
49840: LD_INT 30
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49848: LD_VAR 0 6
49852: PPUSH
49853: CALL_OW 257
49857: PUSH
49858: LD_INT 9
49860: EQUAL
49861: IFFALSE 49882
// points := [ 20 , 55 , 40 ] ;
49863: LD_ADDR_VAR 0 9
49867: PUSH
49868: LD_INT 20
49870: PUSH
49871: LD_INT 55
49873: PUSH
49874: LD_INT 40
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49882: LD_VAR 0 6
49886: PPUSH
49887: CALL_OW 257
49891: PUSH
49892: LD_INT 12
49894: PUSH
49895: LD_INT 16
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: IN
49902: IFFALSE 49923
// points := [ 5 , 3 , 2 ] ;
49904: LD_ADDR_VAR 0 9
49908: PUSH
49909: LD_INT 5
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49923: LD_VAR 0 6
49927: PPUSH
49928: CALL_OW 257
49932: PUSH
49933: LD_INT 17
49935: EQUAL
49936: IFFALSE 49957
// points := [ 100 , 50 , 75 ] ;
49938: LD_ADDR_VAR 0 9
49942: PUSH
49943: LD_INT 100
49945: PUSH
49946: LD_INT 50
49948: PUSH
49949: LD_INT 75
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49957: LD_VAR 0 6
49961: PPUSH
49962: CALL_OW 257
49966: PUSH
49967: LD_INT 15
49969: EQUAL
49970: IFFALSE 49991
// points := [ 10 , 5 , 3 ] ;
49972: LD_ADDR_VAR 0 9
49976: PUSH
49977: LD_INT 10
49979: PUSH
49980: LD_INT 5
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49991: LD_VAR 0 6
49995: PPUSH
49996: CALL_OW 257
50000: PUSH
50001: LD_INT 14
50003: EQUAL
50004: IFFALSE 50025
// points := [ 10 , 0 , 0 ] ;
50006: LD_ADDR_VAR 0 9
50010: PUSH
50011: LD_INT 10
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50025: LD_VAR 0 6
50029: PPUSH
50030: CALL_OW 257
50034: PUSH
50035: LD_INT 11
50037: EQUAL
50038: IFFALSE 50059
// points := [ 30 , 10 , 5 ] ;
50040: LD_ADDR_VAR 0 9
50044: PUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 10
50050: PUSH
50051: LD_INT 5
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50059: LD_VAR 0 1
50063: PPUSH
50064: LD_INT 5
50066: PPUSH
50067: CALL_OW 321
50071: PUSH
50072: LD_INT 2
50074: EQUAL
50075: IFFALSE 50092
// bpoints := bpoints * 1.8 ;
50077: LD_ADDR_VAR 0 10
50081: PUSH
50082: LD_VAR 0 10
50086: PUSH
50087: LD_REAL  1.80000000000000E+0000
50090: MUL
50091: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50092: LD_VAR 0 6
50096: PPUSH
50097: CALL_OW 257
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 4
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: IN
50120: IFFALSE 50140
50122: PUSH
50123: LD_VAR 0 1
50127: PPUSH
50128: LD_INT 51
50130: PPUSH
50131: CALL_OW 321
50135: PUSH
50136: LD_INT 2
50138: EQUAL
50139: AND
50140: IFFALSE 50157
// bpoints := bpoints * 1.2 ;
50142: LD_ADDR_VAR 0 10
50146: PUSH
50147: LD_VAR 0 10
50151: PUSH
50152: LD_REAL  1.20000000000000E+0000
50155: MUL
50156: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50157: LD_VAR 0 6
50161: PPUSH
50162: CALL_OW 257
50166: PUSH
50167: LD_INT 5
50169: PUSH
50170: LD_INT 7
50172: PUSH
50173: LD_INT 9
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: IN
50181: IFFALSE 50201
50183: PUSH
50184: LD_VAR 0 1
50188: PPUSH
50189: LD_INT 52
50191: PPUSH
50192: CALL_OW 321
50196: PUSH
50197: LD_INT 2
50199: EQUAL
50200: AND
50201: IFFALSE 50218
// bpoints := bpoints * 1.5 ;
50203: LD_ADDR_VAR 0 10
50207: PUSH
50208: LD_VAR 0 10
50212: PUSH
50213: LD_REAL  1.50000000000000E+0000
50216: MUL
50217: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50218: LD_VAR 0 1
50222: PPUSH
50223: LD_INT 66
50225: PPUSH
50226: CALL_OW 321
50230: PUSH
50231: LD_INT 2
50233: EQUAL
50234: IFFALSE 50251
// bpoints := bpoints * 1.1 ;
50236: LD_ADDR_VAR 0 10
50240: PUSH
50241: LD_VAR 0 10
50245: PUSH
50246: LD_REAL  1.10000000000000E+0000
50249: MUL
50250: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50251: LD_ADDR_VAR 0 10
50255: PUSH
50256: LD_VAR 0 10
50260: PUSH
50261: LD_VAR 0 6
50265: PPUSH
50266: LD_INT 1
50268: PPUSH
50269: CALL_OW 259
50273: PUSH
50274: LD_REAL  1.15000000000000E+0000
50277: MUL
50278: MUL
50279: ST_TO_ADDR
// end ; unit_vehicle :
50280: GO 51110
50282: LD_INT 2
50284: DOUBLE
50285: EQUAL
50286: IFTRUE 50290
50288: GO 51098
50290: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50291: LD_VAR 0 6
50295: PPUSH
50296: CALL_OW 264
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 42
50306: PUSH
50307: LD_INT 24
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: IN
50315: IFFALSE 50336
// points := [ 25 , 5 , 3 ] ;
50317: LD_ADDR_VAR 0 9
50321: PUSH
50322: LD_INT 25
50324: PUSH
50325: LD_INT 5
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50336: LD_VAR 0 6
50340: PPUSH
50341: CALL_OW 264
50345: PUSH
50346: LD_INT 4
50348: PUSH
50349: LD_INT 43
50351: PUSH
50352: LD_INT 25
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: IN
50360: IFFALSE 50381
// points := [ 40 , 15 , 5 ] ;
50362: LD_ADDR_VAR 0 9
50366: PUSH
50367: LD_INT 40
50369: PUSH
50370: LD_INT 15
50372: PUSH
50373: LD_INT 5
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50381: LD_VAR 0 6
50385: PPUSH
50386: CALL_OW 264
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 23
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: IN
50401: IFFALSE 50422
// points := [ 7 , 25 , 8 ] ;
50403: LD_ADDR_VAR 0 9
50407: PUSH
50408: LD_INT 7
50410: PUSH
50411: LD_INT 25
50413: PUSH
50414: LD_INT 8
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50422: LD_VAR 0 6
50426: PPUSH
50427: CALL_OW 264
50431: PUSH
50432: LD_INT 5
50434: PUSH
50435: LD_INT 27
50437: PUSH
50438: LD_INT 44
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: LIST
50445: IN
50446: IFFALSE 50467
// points := [ 14 , 50 , 16 ] ;
50448: LD_ADDR_VAR 0 9
50452: PUSH
50453: LD_INT 14
50455: PUSH
50456: LD_INT 50
50458: PUSH
50459: LD_INT 16
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50467: LD_VAR 0 6
50471: PPUSH
50472: CALL_OW 264
50476: PUSH
50477: LD_INT 6
50479: PUSH
50480: LD_INT 46
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: IN
50487: IFFALSE 50508
// points := [ 32 , 120 , 70 ] ;
50489: LD_ADDR_VAR 0 9
50493: PUSH
50494: LD_INT 32
50496: PUSH
50497: LD_INT 120
50499: PUSH
50500: LD_INT 70
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50508: LD_VAR 0 6
50512: PPUSH
50513: CALL_OW 264
50517: PUSH
50518: LD_INT 7
50520: PUSH
50521: LD_INT 28
50523: PUSH
50524: LD_INT 45
50526: PUSH
50527: LD_INT 92
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: IN
50536: IFFALSE 50557
// points := [ 35 , 20 , 45 ] ;
50538: LD_ADDR_VAR 0 9
50542: PUSH
50543: LD_INT 35
50545: PUSH
50546: LD_INT 20
50548: PUSH
50549: LD_INT 45
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50557: LD_VAR 0 6
50561: PPUSH
50562: CALL_OW 264
50566: PUSH
50567: LD_INT 47
50569: PUSH
50570: EMPTY
50571: LIST
50572: IN
50573: IFFALSE 50594
// points := [ 67 , 45 , 75 ] ;
50575: LD_ADDR_VAR 0 9
50579: PUSH
50580: LD_INT 67
50582: PUSH
50583: LD_INT 45
50585: PUSH
50586: LD_INT 75
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50594: LD_VAR 0 6
50598: PPUSH
50599: CALL_OW 264
50603: PUSH
50604: LD_INT 26
50606: PUSH
50607: EMPTY
50608: LIST
50609: IN
50610: IFFALSE 50631
// points := [ 120 , 30 , 80 ] ;
50612: LD_ADDR_VAR 0 9
50616: PUSH
50617: LD_INT 120
50619: PUSH
50620: LD_INT 30
50622: PUSH
50623: LD_INT 80
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50631: LD_VAR 0 6
50635: PPUSH
50636: CALL_OW 264
50640: PUSH
50641: LD_INT 22
50643: PUSH
50644: EMPTY
50645: LIST
50646: IN
50647: IFFALSE 50668
// points := [ 40 , 1 , 1 ] ;
50649: LD_ADDR_VAR 0 9
50653: PUSH
50654: LD_INT 40
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50668: LD_VAR 0 6
50672: PPUSH
50673: CALL_OW 264
50677: PUSH
50678: LD_INT 29
50680: PUSH
50681: EMPTY
50682: LIST
50683: IN
50684: IFFALSE 50705
// points := [ 70 , 200 , 400 ] ;
50686: LD_ADDR_VAR 0 9
50690: PUSH
50691: LD_INT 70
50693: PUSH
50694: LD_INT 200
50696: PUSH
50697: LD_INT 400
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50705: LD_VAR 0 6
50709: PPUSH
50710: CALL_OW 264
50714: PUSH
50715: LD_INT 14
50717: PUSH
50718: LD_INT 53
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: IN
50725: IFFALSE 50746
// points := [ 40 , 10 , 20 ] ;
50727: LD_ADDR_VAR 0 9
50731: PUSH
50732: LD_INT 40
50734: PUSH
50735: LD_INT 10
50737: PUSH
50738: LD_INT 20
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50746: LD_VAR 0 6
50750: PPUSH
50751: CALL_OW 264
50755: PUSH
50756: LD_INT 9
50758: PUSH
50759: EMPTY
50760: LIST
50761: IN
50762: IFFALSE 50783
// points := [ 5 , 70 , 20 ] ;
50764: LD_ADDR_VAR 0 9
50768: PUSH
50769: LD_INT 5
50771: PUSH
50772: LD_INT 70
50774: PUSH
50775: LD_INT 20
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50783: LD_VAR 0 6
50787: PPUSH
50788: CALL_OW 264
50792: PUSH
50793: LD_INT 10
50795: PUSH
50796: EMPTY
50797: LIST
50798: IN
50799: IFFALSE 50820
// points := [ 35 , 110 , 70 ] ;
50801: LD_ADDR_VAR 0 9
50805: PUSH
50806: LD_INT 35
50808: PUSH
50809: LD_INT 110
50811: PUSH
50812: LD_INT 70
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50820: LD_VAR 0 6
50824: PPUSH
50825: CALL_OW 265
50829: PUSH
50830: LD_INT 25
50832: EQUAL
50833: IFFALSE 50854
// points := [ 80 , 65 , 100 ] ;
50835: LD_ADDR_VAR 0 9
50839: PUSH
50840: LD_INT 80
50842: PUSH
50843: LD_INT 65
50845: PUSH
50846: LD_INT 100
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50854: LD_VAR 0 6
50858: PPUSH
50859: CALL_OW 263
50863: PUSH
50864: LD_INT 1
50866: EQUAL
50867: IFFALSE 50902
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50869: LD_ADDR_VAR 0 10
50873: PUSH
50874: LD_VAR 0 10
50878: PUSH
50879: LD_VAR 0 6
50883: PPUSH
50884: CALL_OW 311
50888: PPUSH
50889: LD_INT 3
50891: PPUSH
50892: CALL_OW 259
50896: PUSH
50897: LD_INT 4
50899: MUL
50900: MUL
50901: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50902: LD_VAR 0 6
50906: PPUSH
50907: CALL_OW 263
50911: PUSH
50912: LD_INT 2
50914: EQUAL
50915: IFFALSE 50966
// begin j := IsControledBy ( i ) ;
50917: LD_ADDR_VAR 0 7
50921: PUSH
50922: LD_VAR 0 6
50926: PPUSH
50927: CALL_OW 312
50931: ST_TO_ADDR
// if j then
50932: LD_VAR 0 7
50936: IFFALSE 50966
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50938: LD_ADDR_VAR 0 10
50942: PUSH
50943: LD_VAR 0 10
50947: PUSH
50948: LD_VAR 0 7
50952: PPUSH
50953: LD_INT 3
50955: PPUSH
50956: CALL_OW 259
50960: PUSH
50961: LD_INT 3
50963: MUL
50964: MUL
50965: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50966: LD_VAR 0 6
50970: PPUSH
50971: CALL_OW 264
50975: PUSH
50976: LD_INT 5
50978: PUSH
50979: LD_INT 6
50981: PUSH
50982: LD_INT 46
50984: PUSH
50985: LD_INT 44
50987: PUSH
50988: LD_INT 47
50990: PUSH
50991: LD_INT 45
50993: PUSH
50994: LD_INT 28
50996: PUSH
50997: LD_INT 7
50999: PUSH
51000: LD_INT 27
51002: PUSH
51003: LD_INT 29
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: IN
51018: IFFALSE 51038
51020: PUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: LD_INT 52
51028: PPUSH
51029: CALL_OW 321
51033: PUSH
51034: LD_INT 2
51036: EQUAL
51037: AND
51038: IFFALSE 51055
// bpoints := bpoints * 1.2 ;
51040: LD_ADDR_VAR 0 10
51044: PUSH
51045: LD_VAR 0 10
51049: PUSH
51050: LD_REAL  1.20000000000000E+0000
51053: MUL
51054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51055: LD_VAR 0 6
51059: PPUSH
51060: CALL_OW 264
51064: PUSH
51065: LD_INT 6
51067: PUSH
51068: LD_INT 46
51070: PUSH
51071: LD_INT 47
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: IN
51079: IFFALSE 51096
// bpoints := bpoints * 1.2 ;
51081: LD_ADDR_VAR 0 10
51085: PUSH
51086: LD_VAR 0 10
51090: PUSH
51091: LD_REAL  1.20000000000000E+0000
51094: MUL
51095: ST_TO_ADDR
// end ; unit_building :
51096: GO 51110
51098: LD_INT 3
51100: DOUBLE
51101: EQUAL
51102: IFTRUE 51106
51104: GO 51109
51106: POP
// ; end ;
51107: GO 51110
51109: POP
// for j = 1 to 3 do
51110: LD_ADDR_VAR 0 7
51114: PUSH
51115: DOUBLE
51116: LD_INT 1
51118: DEC
51119: ST_TO_ADDR
51120: LD_INT 3
51122: PUSH
51123: FOR_TO
51124: IFFALSE 51177
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51126: LD_ADDR_VAR 0 5
51130: PUSH
51131: LD_VAR 0 5
51135: PPUSH
51136: LD_VAR 0 7
51140: PPUSH
51141: LD_VAR 0 5
51145: PUSH
51146: LD_VAR 0 7
51150: ARRAY
51151: PUSH
51152: LD_VAR 0 9
51156: PUSH
51157: LD_VAR 0 7
51161: ARRAY
51162: PUSH
51163: LD_VAR 0 10
51167: MUL
51168: PLUS
51169: PPUSH
51170: CALL_OW 1
51174: ST_TO_ADDR
51175: GO 51123
51177: POP
51178: POP
// end ;
51179: GO 49652
51181: POP
51182: POP
// result := Replace ( result , 4 , tmp ) ;
51183: LD_ADDR_VAR 0 5
51187: PUSH
51188: LD_VAR 0 5
51192: PPUSH
51193: LD_INT 4
51195: PPUSH
51196: LD_VAR 0 8
51200: PPUSH
51201: CALL_OW 1
51205: ST_TO_ADDR
// end ;
51206: LD_VAR 0 5
51210: RET
// export function DangerAtRange ( unit , range ) ; begin
51211: LD_INT 0
51213: PPUSH
// if not unit then
51214: LD_VAR 0 1
51218: NOT
51219: IFFALSE 51223
// exit ;
51221: GO 51268
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 255
51237: PPUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: CALL_OW 250
51247: PPUSH
51248: LD_VAR 0 1
51252: PPUSH
51253: CALL_OW 251
51257: PPUSH
51258: LD_VAR 0 2
51262: PPUSH
51263: CALL 49502 0 4
51267: ST_TO_ADDR
// end ;
51268: LD_VAR 0 3
51272: RET
// export function DangerInArea ( side , area ) ; begin
51273: LD_INT 0
51275: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51276: LD_ADDR_VAR 0 3
51280: PUSH
51281: LD_VAR 0 2
51285: PPUSH
51286: LD_INT 81
51288: PUSH
51289: LD_VAR 0 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PPUSH
51298: CALL_OW 70
51302: ST_TO_ADDR
// end ;
51303: LD_VAR 0 3
51307: RET
// export function IsExtension ( b ) ; begin
51308: LD_INT 0
51310: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51311: LD_ADDR_VAR 0 2
51315: PUSH
51316: LD_VAR 0 1
51320: PUSH
51321: LD_INT 23
51323: PUSH
51324: LD_INT 20
51326: PUSH
51327: LD_INT 22
51329: PUSH
51330: LD_INT 17
51332: PUSH
51333: LD_INT 24
51335: PUSH
51336: LD_INT 21
51338: PUSH
51339: LD_INT 19
51341: PUSH
51342: LD_INT 16
51344: PUSH
51345: LD_INT 25
51347: PUSH
51348: LD_INT 18
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: IN
51363: ST_TO_ADDR
// end ;
51364: LD_VAR 0 2
51368: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51369: LD_INT 0
51371: PPUSH
51372: PPUSH
51373: PPUSH
// result := [ ] ;
51374: LD_ADDR_VAR 0 4
51378: PUSH
51379: EMPTY
51380: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51381: LD_ADDR_VAR 0 5
51385: PUSH
51386: LD_VAR 0 2
51390: PPUSH
51391: LD_INT 21
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PPUSH
51401: CALL_OW 70
51405: ST_TO_ADDR
// if not tmp then
51406: LD_VAR 0 5
51410: NOT
51411: IFFALSE 51415
// exit ;
51413: GO 51479
// if checkLink then
51415: LD_VAR 0 3
51419: IFFALSE 51469
// begin for i in tmp do
51421: LD_ADDR_VAR 0 6
51425: PUSH
51426: LD_VAR 0 5
51430: PUSH
51431: FOR_IN
51432: IFFALSE 51467
// if GetBase ( i ) <> base then
51434: LD_VAR 0 6
51438: PPUSH
51439: CALL_OW 274
51443: PUSH
51444: LD_VAR 0 1
51448: NONEQUAL
51449: IFFALSE 51465
// ComLinkToBase ( base , i ) ;
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_VAR 0 6
51460: PPUSH
51461: CALL_OW 169
51465: GO 51431
51467: POP
51468: POP
// end ; result := tmp ;
51469: LD_ADDR_VAR 0 4
51473: PUSH
51474: LD_VAR 0 5
51478: ST_TO_ADDR
// end ;
51479: LD_VAR 0 4
51483: RET
// export function ComComplete ( units , b ) ; var i ; begin
51484: LD_INT 0
51486: PPUSH
51487: PPUSH
// if not units then
51488: LD_VAR 0 1
51492: NOT
51493: IFFALSE 51497
// exit ;
51495: GO 51587
// for i in units do
51497: LD_ADDR_VAR 0 4
51501: PUSH
51502: LD_VAR 0 1
51506: PUSH
51507: FOR_IN
51508: IFFALSE 51585
// if BuildingStatus ( b ) = bs_build then
51510: LD_VAR 0 2
51514: PPUSH
51515: CALL_OW 461
51519: PUSH
51520: LD_INT 1
51522: EQUAL
51523: IFFALSE 51583
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51525: LD_VAR 0 4
51529: PPUSH
51530: LD_STRING h
51532: PUSH
51533: LD_VAR 0 2
51537: PPUSH
51538: CALL_OW 250
51542: PUSH
51543: LD_VAR 0 2
51547: PPUSH
51548: CALL_OW 251
51552: PUSH
51553: LD_VAR 0 2
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: PPUSH
51579: CALL_OW 446
51583: GO 51507
51585: POP
51586: POP
// end ;
51587: LD_VAR 0 3
51591: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51592: LD_INT 0
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
51598: PPUSH
51599: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51600: LD_VAR 0 1
51604: NOT
51605: IFTRUE 51622
51607: PUSH
51608: LD_VAR 0 1
51612: PPUSH
51613: CALL_OW 263
51617: PUSH
51618: LD_INT 2
51620: NONEQUAL
51621: OR
51622: IFFALSE 51626
// exit ;
51624: GO 51942
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51626: LD_ADDR_VAR 0 6
51630: PUSH
51631: LD_INT 22
51633: PUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: CALL_OW 255
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 30
51653: PUSH
51654: LD_INT 36
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 34
51663: PUSH
51664: LD_INT 31
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PPUSH
51680: CALL_OW 69
51684: ST_TO_ADDR
// if not tmp then
51685: LD_VAR 0 6
51689: NOT
51690: IFFALSE 51694
// exit ;
51692: GO 51942
// result := [ ] ;
51694: LD_ADDR_VAR 0 2
51698: PUSH
51699: EMPTY
51700: ST_TO_ADDR
// for i in tmp do
51701: LD_ADDR_VAR 0 3
51705: PUSH
51706: LD_VAR 0 6
51710: PUSH
51711: FOR_IN
51712: IFFALSE 51783
// begin t := UnitsInside ( i ) ;
51714: LD_ADDR_VAR 0 4
51718: PUSH
51719: LD_VAR 0 3
51723: PPUSH
51724: CALL_OW 313
51728: ST_TO_ADDR
// if t then
51729: LD_VAR 0 4
51733: IFFALSE 51781
// for j in t do
51735: LD_ADDR_VAR 0 7
51739: PUSH
51740: LD_VAR 0 4
51744: PUSH
51745: FOR_IN
51746: IFFALSE 51779
// result := Replace ( result , result + 1 , j ) ;
51748: LD_ADDR_VAR 0 2
51752: PUSH
51753: LD_VAR 0 2
51757: PPUSH
51758: LD_VAR 0 2
51762: PUSH
51763: LD_INT 1
51765: PLUS
51766: PPUSH
51767: LD_VAR 0 7
51771: PPUSH
51772: CALL_OW 1
51776: ST_TO_ADDR
51777: GO 51745
51779: POP
51780: POP
// end ;
51781: GO 51711
51783: POP
51784: POP
// if not result then
51785: LD_VAR 0 2
51789: NOT
51790: IFFALSE 51794
// exit ;
51792: GO 51942
// mech := result [ 1 ] ;
51794: LD_ADDR_VAR 0 5
51798: PUSH
51799: LD_VAR 0 2
51803: PUSH
51804: LD_INT 1
51806: ARRAY
51807: ST_TO_ADDR
// if result > 1 then
51808: LD_VAR 0 2
51812: PUSH
51813: LD_INT 1
51815: GREATER
51816: IFFALSE 51928
// begin for i = 2 to result do
51818: LD_ADDR_VAR 0 3
51822: PUSH
51823: DOUBLE
51824: LD_INT 2
51826: DEC
51827: ST_TO_ADDR
51828: LD_VAR 0 2
51832: PUSH
51833: FOR_TO
51834: IFFALSE 51926
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51836: LD_ADDR_VAR 0 4
51840: PUSH
51841: LD_VAR 0 2
51845: PUSH
51846: LD_VAR 0 3
51850: ARRAY
51851: PPUSH
51852: LD_INT 3
51854: PPUSH
51855: CALL_OW 259
51859: PUSH
51860: LD_VAR 0 2
51864: PUSH
51865: LD_VAR 0 3
51869: ARRAY
51870: PPUSH
51871: CALL_OW 432
51875: MINUS
51876: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51877: LD_VAR 0 4
51881: PUSH
51882: LD_VAR 0 5
51886: PPUSH
51887: LD_INT 3
51889: PPUSH
51890: CALL_OW 259
51894: PUSH
51895: LD_VAR 0 5
51899: PPUSH
51900: CALL_OW 432
51904: MINUS
51905: GREATEREQUAL
51906: IFFALSE 51924
// mech := result [ i ] ;
51908: LD_ADDR_VAR 0 5
51912: PUSH
51913: LD_VAR 0 2
51917: PUSH
51918: LD_VAR 0 3
51922: ARRAY
51923: ST_TO_ADDR
// end ;
51924: GO 51833
51926: POP
51927: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51928: LD_VAR 0 1
51932: PPUSH
51933: LD_VAR 0 5
51937: PPUSH
51938: CALL_OW 135
// end ;
51942: LD_VAR 0 2
51946: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51947: LD_INT 0
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
// result := [ ] ;
51962: LD_ADDR_VAR 0 7
51966: PUSH
51967: EMPTY
51968: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51969: LD_VAR 0 1
51973: PPUSH
51974: CALL_OW 266
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: IN
51989: NOT
51990: IFFALSE 51994
// exit ;
51992: GO 53634
// if name then
51994: LD_VAR 0 3
51998: IFFALSE 52014
// SetBName ( base_dep , name ) ;
52000: LD_VAR 0 1
52004: PPUSH
52005: LD_VAR 0 3
52009: PPUSH
52010: CALL_OW 500
// base := GetBase ( base_dep ) ;
52014: LD_ADDR_VAR 0 15
52018: PUSH
52019: LD_VAR 0 1
52023: PPUSH
52024: CALL_OW 274
52028: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52029: LD_ADDR_VAR 0 16
52033: PUSH
52034: LD_VAR 0 1
52038: PPUSH
52039: CALL_OW 255
52043: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52044: LD_ADDR_VAR 0 17
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 248
52058: ST_TO_ADDR
// if sources then
52059: LD_VAR 0 5
52063: IFFALSE 52110
// for i = 1 to 3 do
52065: LD_ADDR_VAR 0 8
52069: PUSH
52070: DOUBLE
52071: LD_INT 1
52073: DEC
52074: ST_TO_ADDR
52075: LD_INT 3
52077: PUSH
52078: FOR_TO
52079: IFFALSE 52108
// AddResourceType ( base , i , sources [ i ] ) ;
52081: LD_VAR 0 15
52085: PPUSH
52086: LD_VAR 0 8
52090: PPUSH
52091: LD_VAR 0 5
52095: PUSH
52096: LD_VAR 0 8
52100: ARRAY
52101: PPUSH
52102: CALL_OW 276
52106: GO 52078
52108: POP
52109: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52110: LD_ADDR_VAR 0 18
52114: PUSH
52115: LD_VAR 0 15
52119: PPUSH
52120: LD_VAR 0 2
52124: PPUSH
52125: LD_INT 1
52127: PPUSH
52128: CALL 51369 0 3
52132: ST_TO_ADDR
// InitHc ;
52133: CALL_OW 19
// InitUc ;
52137: CALL_OW 18
// uc_side := side ;
52141: LD_ADDR_OWVAR 20
52145: PUSH
52146: LD_VAR 0 16
52150: ST_TO_ADDR
// uc_nation := nation ;
52151: LD_ADDR_OWVAR 21
52155: PUSH
52156: LD_VAR 0 17
52160: ST_TO_ADDR
// if buildings then
52161: LD_VAR 0 18
52165: IFFALSE 53493
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52167: LD_ADDR_VAR 0 19
52171: PUSH
52172: LD_VAR 0 18
52176: PPUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 30
52182: PUSH
52183: LD_INT 29
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 30
52192: PUSH
52193: LD_INT 30
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: PPUSH
52205: CALL_OW 72
52209: ST_TO_ADDR
// if tmp then
52210: LD_VAR 0 19
52214: IFFALSE 52262
// for i in tmp do
52216: LD_ADDR_VAR 0 8
52220: PUSH
52221: LD_VAR 0 19
52225: PUSH
52226: FOR_IN
52227: IFFALSE 52260
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52229: LD_VAR 0 8
52233: PPUSH
52234: CALL_OW 250
52238: PPUSH
52239: LD_VAR 0 8
52243: PPUSH
52244: CALL_OW 251
52248: PPUSH
52249: LD_VAR 0 16
52253: PPUSH
52254: CALL_OW 441
52258: GO 52226
52260: POP
52261: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52262: LD_VAR 0 18
52266: PPUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 30
52272: PUSH
52273: LD_INT 32
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 30
52282: PUSH
52283: LD_INT 33
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: PPUSH
52295: CALL_OW 72
52299: IFFALSE 52387
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52301: LD_ADDR_VAR 0 8
52305: PUSH
52306: LD_VAR 0 18
52310: PPUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 30
52316: PUSH
52317: LD_INT 32
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 30
52326: PUSH
52327: LD_INT 33
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: PPUSH
52339: CALL_OW 72
52343: PUSH
52344: FOR_IN
52345: IFFALSE 52385
// begin if not GetBWeapon ( i ) then
52347: LD_VAR 0 8
52351: PPUSH
52352: CALL_OW 269
52356: NOT
52357: IFFALSE 52383
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52359: LD_VAR 0 8
52363: PPUSH
52364: LD_VAR 0 8
52368: PPUSH
52369: LD_VAR 0 2
52373: PPUSH
52374: CALL 53639 0 2
52378: PPUSH
52379: CALL_OW 431
// end ;
52383: GO 52344
52385: POP
52386: POP
// end ; for i = 1 to personel do
52387: LD_ADDR_VAR 0 8
52391: PUSH
52392: DOUBLE
52393: LD_INT 1
52395: DEC
52396: ST_TO_ADDR
52397: LD_VAR 0 6
52401: PUSH
52402: FOR_TO
52403: IFFALSE 53473
// begin if i > 4 then
52405: LD_VAR 0 8
52409: PUSH
52410: LD_INT 4
52412: GREATER
52413: IFFALSE 52417
// break ;
52415: GO 53473
// case i of 1 :
52417: LD_VAR 0 8
52421: PUSH
52422: LD_INT 1
52424: DOUBLE
52425: EQUAL
52426: IFTRUE 52430
52428: GO 52510
52430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52431: LD_ADDR_VAR 0 12
52435: PUSH
52436: LD_VAR 0 18
52440: PPUSH
52441: LD_INT 22
52443: PUSH
52444: LD_VAR 0 16
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 58
52455: PUSH
52456: EMPTY
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 30
52464: PUSH
52465: LD_INT 32
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 30
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 30
52484: PUSH
52485: LD_INT 5
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: PPUSH
52503: CALL_OW 72
52507: ST_TO_ADDR
52508: GO 52732
52510: LD_INT 2
52512: DOUBLE
52513: EQUAL
52514: IFTRUE 52518
52516: GO 52580
52518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52519: LD_ADDR_VAR 0 12
52523: PUSH
52524: LD_VAR 0 18
52528: PPUSH
52529: LD_INT 22
52531: PUSH
52532: LD_VAR 0 16
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 30
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 30
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PPUSH
52573: CALL_OW 72
52577: ST_TO_ADDR
52578: GO 52732
52580: LD_INT 3
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52588
52586: GO 52650
52588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52589: LD_ADDR_VAR 0 12
52593: PUSH
52594: LD_VAR 0 18
52598: PPUSH
52599: LD_INT 22
52601: PUSH
52602: LD_VAR 0 16
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 30
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 30
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PPUSH
52643: CALL_OW 72
52647: ST_TO_ADDR
52648: GO 52732
52650: LD_INT 4
52652: DOUBLE
52653: EQUAL
52654: IFTRUE 52658
52656: GO 52731
52658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52659: LD_ADDR_VAR 0 12
52663: PUSH
52664: LD_VAR 0 18
52668: PPUSH
52669: LD_INT 22
52671: PUSH
52672: LD_VAR 0 16
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 30
52686: PUSH
52687: LD_INT 6
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 30
52696: PUSH
52697: LD_INT 7
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 30
52706: PUSH
52707: LD_INT 8
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PPUSH
52724: CALL_OW 72
52728: ST_TO_ADDR
52729: GO 52732
52731: POP
// if i = 1 then
52732: LD_VAR 0 8
52736: PUSH
52737: LD_INT 1
52739: EQUAL
52740: IFFALSE 52851
// begin tmp := [ ] ;
52742: LD_ADDR_VAR 0 19
52746: PUSH
52747: EMPTY
52748: ST_TO_ADDR
// for j in f do
52749: LD_ADDR_VAR 0 9
52753: PUSH
52754: LD_VAR 0 12
52758: PUSH
52759: FOR_IN
52760: IFFALSE 52833
// if GetBType ( j ) = b_bunker then
52762: LD_VAR 0 9
52766: PPUSH
52767: CALL_OW 266
52771: PUSH
52772: LD_INT 32
52774: EQUAL
52775: IFFALSE 52802
// tmp := Insert ( tmp , 1 , j ) else
52777: LD_ADDR_VAR 0 19
52781: PUSH
52782: LD_VAR 0 19
52786: PPUSH
52787: LD_INT 1
52789: PPUSH
52790: LD_VAR 0 9
52794: PPUSH
52795: CALL_OW 2
52799: ST_TO_ADDR
52800: GO 52831
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52802: LD_ADDR_VAR 0 19
52806: PUSH
52807: LD_VAR 0 19
52811: PPUSH
52812: LD_VAR 0 19
52816: PUSH
52817: LD_INT 1
52819: PLUS
52820: PPUSH
52821: LD_VAR 0 9
52825: PPUSH
52826: CALL_OW 2
52830: ST_TO_ADDR
52831: GO 52759
52833: POP
52834: POP
// if tmp then
52835: LD_VAR 0 19
52839: IFFALSE 52851
// f := tmp ;
52841: LD_ADDR_VAR 0 12
52845: PUSH
52846: LD_VAR 0 19
52850: ST_TO_ADDR
// end ; x := personel [ i ] ;
52851: LD_ADDR_VAR 0 13
52855: PUSH
52856: LD_VAR 0 6
52860: PUSH
52861: LD_VAR 0 8
52865: ARRAY
52866: ST_TO_ADDR
// if x = - 1 then
52867: LD_VAR 0 13
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: EQUAL
52876: IFFALSE 53087
// begin for j in f do
52878: LD_ADDR_VAR 0 9
52882: PUSH
52883: LD_VAR 0 12
52887: PUSH
52888: FOR_IN
52889: IFFALSE 53083
// repeat InitHc ;
52891: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52895: LD_VAR 0 9
52899: PPUSH
52900: CALL_OW 266
52904: PUSH
52905: LD_INT 5
52907: EQUAL
52908: IFFALSE 52978
// begin if UnitsInside ( j ) < 3 then
52910: LD_VAR 0 9
52914: PPUSH
52915: CALL_OW 313
52919: PUSH
52920: LD_INT 3
52922: LESS
52923: IFFALSE 52959
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52925: LD_INT 0
52927: PPUSH
52928: LD_INT 5
52930: PUSH
52931: LD_INT 8
52933: PUSH
52934: LD_INT 9
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: LD_VAR 0 17
52946: ARRAY
52947: PPUSH
52948: LD_VAR 0 4
52952: PPUSH
52953: CALL_OW 380
52957: GO 52976
// PrepareHuman ( false , i , skill ) ;
52959: LD_INT 0
52961: PPUSH
52962: LD_VAR 0 8
52966: PPUSH
52967: LD_VAR 0 4
52971: PPUSH
52972: CALL_OW 380
// end else
52976: GO 52995
// PrepareHuman ( false , i , skill ) ;
52978: LD_INT 0
52980: PPUSH
52981: LD_VAR 0 8
52985: PPUSH
52986: LD_VAR 0 4
52990: PPUSH
52991: CALL_OW 380
// un := CreateHuman ;
52995: LD_ADDR_VAR 0 14
52999: PUSH
53000: CALL_OW 44
53004: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53005: LD_ADDR_VAR 0 7
53009: PUSH
53010: LD_VAR 0 7
53014: PPUSH
53015: LD_INT 1
53017: PPUSH
53018: LD_VAR 0 14
53022: PPUSH
53023: CALL_OW 2
53027: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53028: LD_VAR 0 14
53032: PPUSH
53033: LD_VAR 0 9
53037: PPUSH
53038: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53042: LD_VAR 0 9
53046: PPUSH
53047: CALL_OW 313
53051: PUSH
53052: LD_INT 6
53054: EQUAL
53055: IFTRUE 53079
53057: PUSH
53058: LD_VAR 0 9
53062: PPUSH
53063: CALL_OW 266
53067: PUSH
53068: LD_INT 32
53070: PUSH
53071: LD_INT 31
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: IN
53078: OR
53079: IFFALSE 52891
53081: GO 52888
53083: POP
53084: POP
// end else
53085: GO 53471
// for j = 1 to x do
53087: LD_ADDR_VAR 0 9
53091: PUSH
53092: DOUBLE
53093: LD_INT 1
53095: DEC
53096: ST_TO_ADDR
53097: LD_VAR 0 13
53101: PUSH
53102: FOR_TO
53103: IFFALSE 53469
// begin InitHc ;
53105: CALL_OW 19
// if not f then
53109: LD_VAR 0 12
53113: NOT
53114: IFFALSE 53203
// begin PrepareHuman ( false , i , skill ) ;
53116: LD_INT 0
53118: PPUSH
53119: LD_VAR 0 8
53123: PPUSH
53124: LD_VAR 0 4
53128: PPUSH
53129: CALL_OW 380
// un := CreateHuman ;
53133: LD_ADDR_VAR 0 14
53137: PUSH
53138: CALL_OW 44
53142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53143: LD_ADDR_VAR 0 7
53147: PUSH
53148: LD_VAR 0 7
53152: PPUSH
53153: LD_INT 1
53155: PPUSH
53156: LD_VAR 0 14
53160: PPUSH
53161: CALL_OW 2
53165: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53166: LD_VAR 0 14
53170: PPUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 250
53180: PPUSH
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 251
53190: PPUSH
53191: LD_INT 10
53193: PPUSH
53194: LD_INT 0
53196: PPUSH
53197: CALL_OW 50
// continue ;
53201: GO 53102
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53203: LD_VAR 0 12
53207: PUSH
53208: LD_INT 1
53210: ARRAY
53211: PPUSH
53212: CALL_OW 313
53216: IFFALSE 53244
53218: PUSH
53219: LD_VAR 0 12
53223: PUSH
53224: LD_INT 1
53226: ARRAY
53227: PPUSH
53228: CALL_OW 266
53232: PUSH
53233: LD_INT 32
53235: PUSH
53236: LD_INT 31
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: IN
53243: AND
53244: IFTRUE 53265
53246: PUSH
53247: LD_VAR 0 12
53251: PUSH
53252: LD_INT 1
53254: ARRAY
53255: PPUSH
53256: CALL_OW 313
53260: PUSH
53261: LD_INT 6
53263: EQUAL
53264: OR
53265: IFFALSE 53285
// f := Delete ( f , 1 ) ;
53267: LD_ADDR_VAR 0 12
53271: PUSH
53272: LD_VAR 0 12
53276: PPUSH
53277: LD_INT 1
53279: PPUSH
53280: CALL_OW 3
53284: ST_TO_ADDR
// if not f then
53285: LD_VAR 0 12
53289: NOT
53290: IFFALSE 53308
// begin x := x + 2 ;
53292: LD_ADDR_VAR 0 13
53296: PUSH
53297: LD_VAR 0 13
53301: PUSH
53302: LD_INT 2
53304: PLUS
53305: ST_TO_ADDR
// continue ;
53306: GO 53102
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53308: LD_VAR 0 12
53312: PUSH
53313: LD_INT 1
53315: ARRAY
53316: PPUSH
53317: CALL_OW 266
53321: PUSH
53322: LD_INT 5
53324: EQUAL
53325: IFFALSE 53399
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53327: LD_VAR 0 12
53331: PUSH
53332: LD_INT 1
53334: ARRAY
53335: PPUSH
53336: CALL_OW 313
53340: PUSH
53341: LD_INT 3
53343: LESS
53344: IFFALSE 53380
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53346: LD_INT 0
53348: PPUSH
53349: LD_INT 5
53351: PUSH
53352: LD_INT 8
53354: PUSH
53355: LD_INT 9
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: PUSH
53363: LD_VAR 0 17
53367: ARRAY
53368: PPUSH
53369: LD_VAR 0 4
53373: PPUSH
53374: CALL_OW 380
53378: GO 53397
// PrepareHuman ( false , i , skill ) ;
53380: LD_INT 0
53382: PPUSH
53383: LD_VAR 0 8
53387: PPUSH
53388: LD_VAR 0 4
53392: PPUSH
53393: CALL_OW 380
// end else
53397: GO 53416
// PrepareHuman ( false , i , skill ) ;
53399: LD_INT 0
53401: PPUSH
53402: LD_VAR 0 8
53406: PPUSH
53407: LD_VAR 0 4
53411: PPUSH
53412: CALL_OW 380
// un := CreateHuman ;
53416: LD_ADDR_VAR 0 14
53420: PUSH
53421: CALL_OW 44
53425: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53426: LD_ADDR_VAR 0 7
53430: PUSH
53431: LD_VAR 0 7
53435: PPUSH
53436: LD_INT 1
53438: PPUSH
53439: LD_VAR 0 14
53443: PPUSH
53444: CALL_OW 2
53448: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53449: LD_VAR 0 14
53453: PPUSH
53454: LD_VAR 0 12
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: PPUSH
53463: CALL_OW 52
// end ;
53467: GO 53102
53469: POP
53470: POP
// end ;
53471: GO 52402
53473: POP
53474: POP
// result := result ^ buildings ;
53475: LD_ADDR_VAR 0 7
53479: PUSH
53480: LD_VAR 0 7
53484: PUSH
53485: LD_VAR 0 18
53489: ADD
53490: ST_TO_ADDR
// end else
53491: GO 53634
// begin for i = 1 to personel do
53493: LD_ADDR_VAR 0 8
53497: PUSH
53498: DOUBLE
53499: LD_INT 1
53501: DEC
53502: ST_TO_ADDR
53503: LD_VAR 0 6
53507: PUSH
53508: FOR_TO
53509: IFFALSE 53632
// begin if i > 4 then
53511: LD_VAR 0 8
53515: PUSH
53516: LD_INT 4
53518: GREATER
53519: IFFALSE 53523
// break ;
53521: GO 53632
// x := personel [ i ] ;
53523: LD_ADDR_VAR 0 13
53527: PUSH
53528: LD_VAR 0 6
53532: PUSH
53533: LD_VAR 0 8
53537: ARRAY
53538: ST_TO_ADDR
// if x = - 1 then
53539: LD_VAR 0 13
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: EQUAL
53548: IFFALSE 53552
// continue ;
53550: GO 53508
// PrepareHuman ( false , i , skill ) ;
53552: LD_INT 0
53554: PPUSH
53555: LD_VAR 0 8
53559: PPUSH
53560: LD_VAR 0 4
53564: PPUSH
53565: CALL_OW 380
// un := CreateHuman ;
53569: LD_ADDR_VAR 0 14
53573: PUSH
53574: CALL_OW 44
53578: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53579: LD_VAR 0 14
53583: PPUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 250
53593: PPUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 251
53603: PPUSH
53604: LD_INT 10
53606: PPUSH
53607: LD_INT 0
53609: PPUSH
53610: CALL_OW 50
// result := result ^ un ;
53614: LD_ADDR_VAR 0 7
53618: PUSH
53619: LD_VAR 0 7
53623: PUSH
53624: LD_VAR 0 14
53628: ADD
53629: ST_TO_ADDR
// end ;
53630: GO 53508
53632: POP
53633: POP
// end ; end ;
53634: LD_VAR 0 7
53638: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53639: LD_INT 0
53641: PPUSH
53642: PPUSH
53643: PPUSH
53644: PPUSH
53645: PPUSH
53646: PPUSH
53647: PPUSH
53648: PPUSH
53649: PPUSH
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
53655: PPUSH
53656: PPUSH
// result := false ;
53657: LD_ADDR_VAR 0 3
53661: PUSH
53662: LD_INT 0
53664: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53665: LD_VAR 0 1
53669: NOT
53670: IFTRUE 53695
53672: PUSH
53673: LD_VAR 0 1
53677: PPUSH
53678: CALL_OW 266
53682: PUSH
53683: LD_INT 32
53685: PUSH
53686: LD_INT 33
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: IN
53693: NOT
53694: OR
53695: IFFALSE 53699
// exit ;
53697: GO 54834
// nat := GetNation ( tower ) ;
53699: LD_ADDR_VAR 0 12
53703: PUSH
53704: LD_VAR 0 1
53708: PPUSH
53709: CALL_OW 248
53713: ST_TO_ADDR
// side := GetSide ( tower ) ;
53714: LD_ADDR_VAR 0 16
53718: PUSH
53719: LD_VAR 0 1
53723: PPUSH
53724: CALL_OW 255
53728: ST_TO_ADDR
// x := GetX ( tower ) ;
53729: LD_ADDR_VAR 0 10
53733: PUSH
53734: LD_VAR 0 1
53738: PPUSH
53739: CALL_OW 250
53743: ST_TO_ADDR
// y := GetY ( tower ) ;
53744: LD_ADDR_VAR 0 11
53748: PUSH
53749: LD_VAR 0 1
53753: PPUSH
53754: CALL_OW 251
53758: ST_TO_ADDR
// if not x or not y then
53759: LD_VAR 0 10
53763: NOT
53764: IFTRUE 53773
53766: PUSH
53767: LD_VAR 0 11
53771: NOT
53772: OR
53773: IFFALSE 53777
// exit ;
53775: GO 54834
// weapon := 0 ;
53777: LD_ADDR_VAR 0 18
53781: PUSH
53782: LD_INT 0
53784: ST_TO_ADDR
// fac_list := [ ] ;
53785: LD_ADDR_VAR 0 17
53789: PUSH
53790: EMPTY
53791: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53792: LD_ADDR_VAR 0 6
53796: PUSH
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 274
53806: PPUSH
53807: LD_VAR 0 2
53811: PPUSH
53812: LD_INT 0
53814: PPUSH
53815: CALL 51369 0 3
53819: PPUSH
53820: LD_INT 30
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PPUSH
53830: CALL_OW 72
53834: ST_TO_ADDR
// if not factories then
53835: LD_VAR 0 6
53839: NOT
53840: IFFALSE 53844
// exit ;
53842: GO 54834
// for i in factories do
53844: LD_ADDR_VAR 0 8
53848: PUSH
53849: LD_VAR 0 6
53853: PUSH
53854: FOR_IN
53855: IFFALSE 53880
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53857: LD_ADDR_VAR 0 17
53861: PUSH
53862: LD_VAR 0 17
53866: PUSH
53867: LD_VAR 0 8
53871: PPUSH
53872: CALL_OW 478
53876: UNION
53877: ST_TO_ADDR
53878: GO 53854
53880: POP
53881: POP
// if not fac_list then
53882: LD_VAR 0 17
53886: NOT
53887: IFFALSE 53891
// exit ;
53889: GO 54834
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53891: LD_ADDR_VAR 0 5
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: LD_INT 9
53904: PUSH
53905: LD_INT 10
53907: PUSH
53908: LD_INT 6
53910: PUSH
53911: LD_INT 7
53913: PUSH
53914: LD_INT 11
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 27
53928: PUSH
53929: LD_INT 28
53931: PUSH
53932: LD_INT 26
53934: PUSH
53935: LD_INT 30
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 43
53946: PUSH
53947: LD_INT 44
53949: PUSH
53950: LD_INT 46
53952: PUSH
53953: LD_INT 45
53955: PUSH
53956: LD_INT 47
53958: PUSH
53959: LD_INT 49
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: PUSH
53975: LD_VAR 0 12
53979: ARRAY
53980: ST_TO_ADDR
// list := list isect fac_list ;
53981: LD_ADDR_VAR 0 5
53985: PUSH
53986: LD_VAR 0 5
53990: PUSH
53991: LD_VAR 0 17
53995: ISECT
53996: ST_TO_ADDR
// if not list then
53997: LD_VAR 0 5
54001: NOT
54002: IFFALSE 54006
// exit ;
54004: GO 54834
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54006: LD_VAR 0 12
54010: PUSH
54011: LD_INT 3
54013: EQUAL
54014: IFFALSE 54026
54016: PUSH
54017: LD_INT 49
54019: PUSH
54020: LD_VAR 0 5
54024: IN
54025: AND
54026: IFFALSE 54046
54028: PUSH
54029: LD_INT 31
54031: PPUSH
54032: LD_VAR 0 16
54036: PPUSH
54037: CALL_OW 321
54041: PUSH
54042: LD_INT 2
54044: EQUAL
54045: AND
54046: IFFALSE 54106
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54048: LD_INT 22
54050: PUSH
54051: LD_VAR 0 16
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 35
54062: PUSH
54063: LD_INT 49
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 91
54072: PUSH
54073: LD_VAR 0 1
54077: PUSH
54078: LD_INT 10
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: PPUSH
54091: CALL_OW 69
54095: NOT
54096: IFFALSE 54106
// weapon := ru_time_lapser ;
54098: LD_ADDR_VAR 0 18
54102: PUSH
54103: LD_INT 49
54105: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54106: LD_VAR 0 12
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: IN
54121: IFFALSE 54145
54123: PUSH
54124: LD_INT 11
54126: PUSH
54127: LD_VAR 0 5
54131: IN
54132: IFTRUE 54144
54134: PUSH
54135: LD_INT 30
54137: PUSH
54138: LD_VAR 0 5
54142: IN
54143: OR
54144: AND
54145: IFFALSE 54165
54147: PUSH
54148: LD_INT 6
54150: PPUSH
54151: LD_VAR 0 16
54155: PPUSH
54156: CALL_OW 321
54160: PUSH
54161: LD_INT 2
54163: EQUAL
54164: AND
54165: IFFALSE 54332
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54167: LD_INT 22
54169: PUSH
54170: LD_VAR 0 16
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 35
54184: PUSH
54185: LD_INT 11
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 35
54194: PUSH
54195: LD_INT 30
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 91
54209: PUSH
54210: LD_VAR 0 1
54214: PUSH
54215: LD_INT 18
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: PPUSH
54228: CALL_OW 69
54232: NOT
54233: IFFALSE 54309
54235: PUSH
54236: LD_INT 22
54238: PUSH
54239: LD_VAR 0 16
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 30
54253: PUSH
54254: LD_INT 32
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 30
54263: PUSH
54264: LD_INT 33
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 91
54278: PUSH
54279: LD_VAR 0 1
54283: PUSH
54284: LD_INT 12
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: PPUSH
54300: CALL_OW 69
54304: PUSH
54305: LD_INT 2
54307: GREATER
54308: AND
54309: IFFALSE 54332
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54311: LD_ADDR_VAR 0 18
54315: PUSH
54316: LD_INT 11
54318: PUSH
54319: LD_INT 30
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_VAR 0 12
54330: ARRAY
54331: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54332: LD_VAR 0 18
54336: NOT
54337: IFFALSE 54357
54339: PUSH
54340: LD_INT 40
54342: PPUSH
54343: LD_VAR 0 16
54347: PPUSH
54348: CALL_OW 321
54352: PUSH
54353: LD_INT 2
54355: EQUAL
54356: AND
54357: IFFALSE 54393
54359: PUSH
54360: LD_INT 7
54362: PUSH
54363: LD_VAR 0 5
54367: IN
54368: IFTRUE 54380
54370: PUSH
54371: LD_INT 28
54373: PUSH
54374: LD_VAR 0 5
54378: IN
54379: OR
54380: IFTRUE 54392
54382: PUSH
54383: LD_INT 45
54385: PUSH
54386: LD_VAR 0 5
54390: IN
54391: OR
54392: AND
54393: IFFALSE 54647
// begin hex := GetHexInfo ( x , y ) ;
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_VAR 0 10
54404: PPUSH
54405: LD_VAR 0 11
54409: PPUSH
54410: CALL_OW 546
54414: ST_TO_ADDR
// if hex [ 1 ] then
54415: LD_VAR 0 4
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: IFFALSE 54427
// exit ;
54425: GO 54834
// height := hex [ 2 ] ;
54427: LD_ADDR_VAR 0 15
54431: PUSH
54432: LD_VAR 0 4
54436: PUSH
54437: LD_INT 2
54439: ARRAY
54440: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54441: LD_ADDR_VAR 0 14
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: LD_INT 5
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
// for i in tmp do
54464: LD_ADDR_VAR 0 8
54468: PUSH
54469: LD_VAR 0 14
54473: PUSH
54474: FOR_IN
54475: IFFALSE 54645
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54477: LD_ADDR_VAR 0 9
54481: PUSH
54482: LD_VAR 0 10
54486: PPUSH
54487: LD_VAR 0 8
54491: PPUSH
54492: LD_INT 5
54494: PPUSH
54495: CALL_OW 272
54499: PUSH
54500: LD_VAR 0 11
54504: PPUSH
54505: LD_VAR 0 8
54509: PPUSH
54510: LD_INT 5
54512: PPUSH
54513: CALL_OW 273
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54522: LD_VAR 0 9
54526: PUSH
54527: LD_INT 1
54529: ARRAY
54530: PPUSH
54531: LD_VAR 0 9
54535: PUSH
54536: LD_INT 2
54538: ARRAY
54539: PPUSH
54540: CALL_OW 488
54544: IFFALSE 54643
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54546: LD_ADDR_VAR 0 4
54550: PUSH
54551: LD_VAR 0 9
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PPUSH
54560: LD_VAR 0 9
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: CALL_OW 546
54573: ST_TO_ADDR
// if hex [ 1 ] then
54574: LD_VAR 0 4
54578: PUSH
54579: LD_INT 1
54581: ARRAY
54582: IFFALSE 54586
// continue ;
54584: GO 54474
// h := hex [ 2 ] ;
54586: LD_ADDR_VAR 0 13
54590: PUSH
54591: LD_VAR 0 4
54595: PUSH
54596: LD_INT 2
54598: ARRAY
54599: ST_TO_ADDR
// if h + 7 < height then
54600: LD_VAR 0 13
54604: PUSH
54605: LD_INT 7
54607: PLUS
54608: PUSH
54609: LD_VAR 0 15
54613: LESS
54614: IFFALSE 54643
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54616: LD_ADDR_VAR 0 18
54620: PUSH
54621: LD_INT 7
54623: PUSH
54624: LD_INT 28
54626: PUSH
54627: LD_INT 45
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: PUSH
54635: LD_VAR 0 12
54639: ARRAY
54640: ST_TO_ADDR
// break ;
54641: GO 54645
// end ; end ; end ;
54643: GO 54474
54645: POP
54646: POP
// end ; if not weapon then
54647: LD_VAR 0 18
54651: NOT
54652: IFFALSE 54712
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54654: LD_ADDR_VAR 0 5
54658: PUSH
54659: LD_VAR 0 5
54663: PUSH
54664: LD_INT 11
54666: PUSH
54667: LD_INT 30
54669: PUSH
54670: LD_INT 49
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: DIFF
54678: ST_TO_ADDR
// if not list then
54679: LD_VAR 0 5
54683: NOT
54684: IFFALSE 54688
// exit ;
54686: GO 54834
// weapon := list [ rand ( 1 , list ) ] ;
54688: LD_ADDR_VAR 0 18
54692: PUSH
54693: LD_VAR 0 5
54697: PUSH
54698: LD_INT 1
54700: PPUSH
54701: LD_VAR 0 5
54705: PPUSH
54706: CALL_OW 12
54710: ARRAY
54711: ST_TO_ADDR
// end ; if weapon then
54712: LD_VAR 0 18
54716: IFFALSE 54834
// begin tmp := CostOfWeapon ( weapon ) ;
54718: LD_ADDR_VAR 0 14
54722: PUSH
54723: LD_VAR 0 18
54727: PPUSH
54728: CALL_OW 451
54732: ST_TO_ADDR
// j := GetBase ( tower ) ;
54733: LD_ADDR_VAR 0 9
54737: PUSH
54738: LD_VAR 0 1
54742: PPUSH
54743: CALL_OW 274
54747: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54748: LD_VAR 0 9
54752: PPUSH
54753: LD_INT 1
54755: PPUSH
54756: CALL_OW 275
54760: PUSH
54761: LD_VAR 0 14
54765: PUSH
54766: LD_INT 1
54768: ARRAY
54769: GREATEREQUAL
54770: IFFALSE 54796
54772: PUSH
54773: LD_VAR 0 9
54777: PPUSH
54778: LD_INT 2
54780: PPUSH
54781: CALL_OW 275
54785: PUSH
54786: LD_VAR 0 14
54790: PUSH
54791: LD_INT 2
54793: ARRAY
54794: GREATEREQUAL
54795: AND
54796: IFFALSE 54822
54798: PUSH
54799: LD_VAR 0 9
54803: PPUSH
54804: LD_INT 3
54806: PPUSH
54807: CALL_OW 275
54811: PUSH
54812: LD_VAR 0 14
54816: PUSH
54817: LD_INT 3
54819: ARRAY
54820: GREATEREQUAL
54821: AND
54822: IFFALSE 54834
// result := weapon ;
54824: LD_ADDR_VAR 0 3
54828: PUSH
54829: LD_VAR 0 18
54833: ST_TO_ADDR
// end ; end ;
54834: LD_VAR 0 3
54838: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
// result := true ;
54843: LD_ADDR_VAR 0 3
54847: PUSH
54848: LD_INT 1
54850: ST_TO_ADDR
// if array1 = array2 then
54851: LD_VAR 0 1
54855: PUSH
54856: LD_VAR 0 2
54860: EQUAL
54861: IFFALSE 54921
// begin for i = 1 to array1 do
54863: LD_ADDR_VAR 0 4
54867: PUSH
54868: DOUBLE
54869: LD_INT 1
54871: DEC
54872: ST_TO_ADDR
54873: LD_VAR 0 1
54877: PUSH
54878: FOR_TO
54879: IFFALSE 54917
// if array1 [ i ] <> array2 [ i ] then
54881: LD_VAR 0 1
54885: PUSH
54886: LD_VAR 0 4
54890: ARRAY
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_VAR 0 4
54901: ARRAY
54902: NONEQUAL
54903: IFFALSE 54915
// begin result := false ;
54905: LD_ADDR_VAR 0 3
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
// break ;
54913: GO 54917
// end ;
54915: GO 54878
54917: POP
54918: POP
// end else
54919: GO 54929
// result := false ;
54921: LD_ADDR_VAR 0 3
54925: PUSH
54926: LD_INT 0
54928: ST_TO_ADDR
// end ;
54929: LD_VAR 0 3
54933: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54934: LD_INT 0
54936: PPUSH
54937: PPUSH
// if not array1 or not array2 then
54938: LD_VAR 0 1
54942: NOT
54943: IFTRUE 54952
54945: PUSH
54946: LD_VAR 0 2
54950: NOT
54951: OR
54952: IFFALSE 54956
// exit ;
54954: GO 55020
// result := true ;
54956: LD_ADDR_VAR 0 3
54960: PUSH
54961: LD_INT 1
54963: ST_TO_ADDR
// for i = 1 to array1 do
54964: LD_ADDR_VAR 0 4
54968: PUSH
54969: DOUBLE
54970: LD_INT 1
54972: DEC
54973: ST_TO_ADDR
54974: LD_VAR 0 1
54978: PUSH
54979: FOR_TO
54980: IFFALSE 55018
// if array1 [ i ] <> array2 [ i ] then
54982: LD_VAR 0 1
54986: PUSH
54987: LD_VAR 0 4
54991: ARRAY
54992: PUSH
54993: LD_VAR 0 2
54997: PUSH
54998: LD_VAR 0 4
55002: ARRAY
55003: NONEQUAL
55004: IFFALSE 55016
// begin result := false ;
55006: LD_ADDR_VAR 0 3
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
// break ;
55014: GO 55018
// end ;
55016: GO 54979
55018: POP
55019: POP
// end ;
55020: LD_VAR 0 3
55024: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55025: LD_INT 0
55027: PPUSH
55028: PPUSH
55029: PPUSH
// pom := GetBase ( fac ) ;
55030: LD_ADDR_VAR 0 5
55034: PUSH
55035: LD_VAR 0 1
55039: PPUSH
55040: CALL_OW 274
55044: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55045: LD_ADDR_VAR 0 4
55049: PUSH
55050: LD_VAR 0 2
55054: PUSH
55055: LD_INT 1
55057: ARRAY
55058: PPUSH
55059: LD_VAR 0 2
55063: PUSH
55064: LD_INT 2
55066: ARRAY
55067: PPUSH
55068: LD_VAR 0 2
55072: PUSH
55073: LD_INT 3
55075: ARRAY
55076: PPUSH
55077: LD_VAR 0 2
55081: PUSH
55082: LD_INT 4
55084: ARRAY
55085: PPUSH
55086: CALL_OW 449
55090: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55091: LD_ADDR_VAR 0 3
55095: PUSH
55096: LD_VAR 0 5
55100: PPUSH
55101: LD_INT 1
55103: PPUSH
55104: CALL_OW 275
55108: PUSH
55109: LD_VAR 0 4
55113: PUSH
55114: LD_INT 1
55116: ARRAY
55117: GREATEREQUAL
55118: IFFALSE 55144
55120: PUSH
55121: LD_VAR 0 5
55125: PPUSH
55126: LD_INT 2
55128: PPUSH
55129: CALL_OW 275
55133: PUSH
55134: LD_VAR 0 4
55138: PUSH
55139: LD_INT 2
55141: ARRAY
55142: GREATEREQUAL
55143: AND
55144: IFFALSE 55170
55146: PUSH
55147: LD_VAR 0 5
55151: PPUSH
55152: LD_INT 3
55154: PPUSH
55155: CALL_OW 275
55159: PUSH
55160: LD_VAR 0 4
55164: PUSH
55165: LD_INT 3
55167: ARRAY
55168: GREATEREQUAL
55169: AND
55170: ST_TO_ADDR
// end ;
55171: LD_VAR 0 3
55175: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55176: LD_INT 0
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
// pom := GetBase ( building ) ;
55182: LD_ADDR_VAR 0 3
55186: PUSH
55187: LD_VAR 0 1
55191: PPUSH
55192: CALL_OW 274
55196: ST_TO_ADDR
// if not pom then
55197: LD_VAR 0 3
55201: NOT
55202: IFFALSE 55206
// exit ;
55204: GO 55380
// btype := GetBType ( building ) ;
55206: LD_ADDR_VAR 0 5
55210: PUSH
55211: LD_VAR 0 1
55215: PPUSH
55216: CALL_OW 266
55220: ST_TO_ADDR
// if btype = b_armoury then
55221: LD_VAR 0 5
55225: PUSH
55226: LD_INT 4
55228: EQUAL
55229: IFFALSE 55239
// btype := b_barracks ;
55231: LD_ADDR_VAR 0 5
55235: PUSH
55236: LD_INT 5
55238: ST_TO_ADDR
// if btype = b_depot then
55239: LD_VAR 0 5
55243: PUSH
55244: LD_INT 0
55246: EQUAL
55247: IFFALSE 55257
// btype := b_warehouse ;
55249: LD_ADDR_VAR 0 5
55253: PUSH
55254: LD_INT 1
55256: ST_TO_ADDR
// if btype = b_workshop then
55257: LD_VAR 0 5
55261: PUSH
55262: LD_INT 2
55264: EQUAL
55265: IFFALSE 55275
// btype := b_factory ;
55267: LD_ADDR_VAR 0 5
55271: PUSH
55272: LD_INT 3
55274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55275: LD_ADDR_VAR 0 4
55279: PUSH
55280: LD_VAR 0 5
55284: PPUSH
55285: LD_VAR 0 1
55289: PPUSH
55290: CALL_OW 248
55294: PPUSH
55295: CALL_OW 450
55299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55300: LD_ADDR_VAR 0 2
55304: PUSH
55305: LD_VAR 0 3
55309: PPUSH
55310: LD_INT 1
55312: PPUSH
55313: CALL_OW 275
55317: PUSH
55318: LD_VAR 0 4
55322: PUSH
55323: LD_INT 1
55325: ARRAY
55326: GREATEREQUAL
55327: IFFALSE 55353
55329: PUSH
55330: LD_VAR 0 3
55334: PPUSH
55335: LD_INT 2
55337: PPUSH
55338: CALL_OW 275
55342: PUSH
55343: LD_VAR 0 4
55347: PUSH
55348: LD_INT 2
55350: ARRAY
55351: GREATEREQUAL
55352: AND
55353: IFFALSE 55379
55355: PUSH
55356: LD_VAR 0 3
55360: PPUSH
55361: LD_INT 3
55363: PPUSH
55364: CALL_OW 275
55368: PUSH
55369: LD_VAR 0 4
55373: PUSH
55374: LD_INT 3
55376: ARRAY
55377: GREATEREQUAL
55378: AND
55379: ST_TO_ADDR
// end ;
55380: LD_VAR 0 2
55384: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55385: LD_INT 0
55387: PPUSH
55388: PPUSH
55389: PPUSH
// pom := GetBase ( building ) ;
55390: LD_ADDR_VAR 0 4
55394: PUSH
55395: LD_VAR 0 1
55399: PPUSH
55400: CALL_OW 274
55404: ST_TO_ADDR
// if not pom then
55405: LD_VAR 0 4
55409: NOT
55410: IFFALSE 55414
// exit ;
55412: GO 55519
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55414: LD_ADDR_VAR 0 5
55418: PUSH
55419: LD_VAR 0 2
55423: PPUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: CALL_OW 248
55433: PPUSH
55434: CALL_OW 450
55438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55439: LD_ADDR_VAR 0 3
55443: PUSH
55444: LD_VAR 0 4
55448: PPUSH
55449: LD_INT 1
55451: PPUSH
55452: CALL_OW 275
55456: PUSH
55457: LD_VAR 0 5
55461: PUSH
55462: LD_INT 1
55464: ARRAY
55465: GREATEREQUAL
55466: IFFALSE 55492
55468: PUSH
55469: LD_VAR 0 4
55473: PPUSH
55474: LD_INT 2
55476: PPUSH
55477: CALL_OW 275
55481: PUSH
55482: LD_VAR 0 5
55486: PUSH
55487: LD_INT 2
55489: ARRAY
55490: GREATEREQUAL
55491: AND
55492: IFFALSE 55518
55494: PUSH
55495: LD_VAR 0 4
55499: PPUSH
55500: LD_INT 3
55502: PPUSH
55503: CALL_OW 275
55507: PUSH
55508: LD_VAR 0 5
55512: PUSH
55513: LD_INT 3
55515: ARRAY
55516: GREATEREQUAL
55517: AND
55518: ST_TO_ADDR
// end ;
55519: LD_VAR 0 3
55523: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55524: LD_INT 0
55526: PPUSH
55527: PPUSH
55528: PPUSH
55529: PPUSH
55530: PPUSH
55531: PPUSH
55532: PPUSH
55533: PPUSH
55534: PPUSH
55535: PPUSH
55536: PPUSH
// result := false ;
55537: LD_ADDR_VAR 0 8
55541: PUSH
55542: LD_INT 0
55544: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55545: LD_VAR 0 5
55549: NOT
55550: IFTRUE 55559
55552: PUSH
55553: LD_VAR 0 1
55557: NOT
55558: OR
55559: IFTRUE 55568
55561: PUSH
55562: LD_VAR 0 2
55566: NOT
55567: OR
55568: IFTRUE 55577
55570: PUSH
55571: LD_VAR 0 3
55575: NOT
55576: OR
55577: IFFALSE 55581
// exit ;
55579: GO 56407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55581: LD_ADDR_VAR 0 14
55585: PUSH
55586: LD_VAR 0 1
55590: PPUSH
55591: LD_VAR 0 2
55595: PPUSH
55596: LD_VAR 0 3
55600: PPUSH
55601: LD_VAR 0 4
55605: PPUSH
55606: LD_VAR 0 5
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PPUSH
55615: CALL_OW 248
55619: PPUSH
55620: LD_INT 0
55622: PPUSH
55623: CALL 57688 0 6
55627: ST_TO_ADDR
// if not hexes then
55628: LD_VAR 0 14
55632: NOT
55633: IFFALSE 55637
// exit ;
55635: GO 56407
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55637: LD_ADDR_VAR 0 17
55641: PUSH
55642: LD_VAR 0 5
55646: PPUSH
55647: LD_INT 22
55649: PUSH
55650: LD_VAR 0 13
55654: PPUSH
55655: CALL_OW 255
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 30
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 30
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PPUSH
55696: CALL_OW 72
55700: ST_TO_ADDR
// for i = 1 to hexes do
55701: LD_ADDR_VAR 0 9
55705: PUSH
55706: DOUBLE
55707: LD_INT 1
55709: DEC
55710: ST_TO_ADDR
55711: LD_VAR 0 14
55715: PUSH
55716: FOR_TO
55717: IFFALSE 56405
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55719: LD_ADDR_VAR 0 13
55723: PUSH
55724: LD_VAR 0 14
55728: PUSH
55729: LD_VAR 0 9
55733: ARRAY
55734: PUSH
55735: LD_INT 1
55737: ARRAY
55738: PPUSH
55739: LD_VAR 0 14
55743: PUSH
55744: LD_VAR 0 9
55748: ARRAY
55749: PUSH
55750: LD_INT 2
55752: ARRAY
55753: PPUSH
55754: CALL_OW 428
55758: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55759: LD_VAR 0 14
55763: PUSH
55764: LD_VAR 0 9
55768: ARRAY
55769: PUSH
55770: LD_INT 1
55772: ARRAY
55773: PPUSH
55774: LD_VAR 0 14
55778: PUSH
55779: LD_VAR 0 9
55783: ARRAY
55784: PUSH
55785: LD_INT 2
55787: ARRAY
55788: PPUSH
55789: CALL_OW 351
55793: IFTRUE 55832
55795: PUSH
55796: LD_VAR 0 14
55800: PUSH
55801: LD_VAR 0 9
55805: ARRAY
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: PPUSH
55811: LD_VAR 0 14
55815: PUSH
55816: LD_VAR 0 9
55820: ARRAY
55821: PUSH
55822: LD_INT 2
55824: ARRAY
55825: PPUSH
55826: CALL_OW 488
55830: NOT
55831: OR
55832: IFTRUE 55849
55834: PUSH
55835: LD_VAR 0 13
55839: PPUSH
55840: CALL_OW 247
55844: PUSH
55845: LD_INT 3
55847: EQUAL
55848: OR
55849: IFFALSE 55855
// exit ;
55851: POP
55852: POP
55853: GO 56407
// if not tmp then
55855: LD_VAR 0 13
55859: NOT
55860: IFFALSE 55864
// continue ;
55862: GO 55716
// result := true ;
55864: LD_ADDR_VAR 0 8
55868: PUSH
55869: LD_INT 1
55871: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55872: LD_VAR 0 6
55876: IFFALSE 55893
55878: PUSH
55879: LD_VAR 0 13
55883: PPUSH
55884: CALL_OW 247
55888: PUSH
55889: LD_INT 2
55891: EQUAL
55892: AND
55893: IFFALSE 55910
55895: PUSH
55896: LD_VAR 0 13
55900: PPUSH
55901: CALL_OW 263
55905: PUSH
55906: LD_INT 1
55908: EQUAL
55909: AND
55910: IFFALSE 56074
// begin if IsDrivenBy ( tmp ) then
55912: LD_VAR 0 13
55916: PPUSH
55917: CALL_OW 311
55921: IFFALSE 55925
// continue ;
55923: GO 55716
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55925: LD_VAR 0 6
55929: PPUSH
55930: LD_INT 3
55932: PUSH
55933: LD_INT 60
55935: PUSH
55936: EMPTY
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: LD_INT 55
55948: PUSH
55949: EMPTY
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PPUSH
55960: CALL_OW 72
55964: IFFALSE 56072
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55966: LD_ADDR_VAR 0 18
55970: PUSH
55971: LD_VAR 0 6
55975: PPUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 60
55981: PUSH
55982: EMPTY
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 55
55994: PUSH
55995: EMPTY
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PPUSH
56006: CALL_OW 72
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: ST_TO_ADDR
// if IsInUnit ( driver ) then
56015: LD_VAR 0 18
56019: PPUSH
56020: CALL_OW 310
56024: IFFALSE 56035
// ComExit ( driver ) ;
56026: LD_VAR 0 18
56030: PPUSH
56031: CALL 81688 0 1
// AddComEnterUnit ( driver , tmp ) ;
56035: LD_VAR 0 18
56039: PPUSH
56040: LD_VAR 0 13
56044: PPUSH
56045: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56049: LD_VAR 0 18
56053: PPUSH
56054: LD_VAR 0 7
56058: PPUSH
56059: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56063: LD_VAR 0 18
56067: PPUSH
56068: CALL_OW 181
// end ; continue ;
56072: GO 55716
// end ; if not cleaners or not tmp in cleaners then
56074: LD_VAR 0 6
56078: NOT
56079: IFTRUE 56094
56081: PUSH
56082: LD_VAR 0 13
56086: PUSH
56087: LD_VAR 0 6
56091: IN
56092: NOT
56093: OR
56094: IFFALSE 56403
// begin if dep then
56096: LD_VAR 0 17
56100: IFFALSE 56236
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56102: LD_ADDR_VAR 0 16
56106: PUSH
56107: LD_VAR 0 17
56111: PUSH
56112: LD_INT 1
56114: ARRAY
56115: PPUSH
56116: CALL_OW 250
56120: PPUSH
56121: LD_VAR 0 17
56125: PUSH
56126: LD_INT 1
56128: ARRAY
56129: PPUSH
56130: CALL_OW 254
56134: PPUSH
56135: LD_INT 5
56137: PPUSH
56138: CALL_OW 272
56142: PUSH
56143: LD_VAR 0 17
56147: PUSH
56148: LD_INT 1
56150: ARRAY
56151: PPUSH
56152: CALL_OW 251
56156: PPUSH
56157: LD_VAR 0 17
56161: PUSH
56162: LD_INT 1
56164: ARRAY
56165: PPUSH
56166: CALL_OW 254
56170: PPUSH
56171: LD_INT 5
56173: PPUSH
56174: CALL_OW 273
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56183: LD_VAR 0 16
56187: PUSH
56188: LD_INT 1
56190: ARRAY
56191: PPUSH
56192: LD_VAR 0 16
56196: PUSH
56197: LD_INT 2
56199: ARRAY
56200: PPUSH
56201: CALL_OW 488
56205: IFFALSE 56236
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56207: LD_VAR 0 13
56211: PPUSH
56212: LD_VAR 0 16
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: PPUSH
56221: LD_VAR 0 16
56225: PUSH
56226: LD_INT 2
56228: ARRAY
56229: PPUSH
56230: CALL_OW 111
// continue ;
56234: GO 55716
// end ; end ; r := GetDir ( tmp ) ;
56236: LD_ADDR_VAR 0 15
56240: PUSH
56241: LD_VAR 0 13
56245: PPUSH
56246: CALL_OW 254
56250: ST_TO_ADDR
// if r = 5 then
56251: LD_VAR 0 15
56255: PUSH
56256: LD_INT 5
56258: EQUAL
56259: IFFALSE 56269
// r := 0 ;
56261: LD_ADDR_VAR 0 15
56265: PUSH
56266: LD_INT 0
56268: ST_TO_ADDR
// for j = r to 5 do
56269: LD_ADDR_VAR 0 10
56273: PUSH
56274: DOUBLE
56275: LD_VAR 0 15
56279: DEC
56280: ST_TO_ADDR
56281: LD_INT 5
56283: PUSH
56284: FOR_TO
56285: IFFALSE 56401
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56287: LD_ADDR_VAR 0 11
56291: PUSH
56292: LD_VAR 0 13
56296: PPUSH
56297: CALL_OW 250
56301: PPUSH
56302: LD_VAR 0 10
56306: PPUSH
56307: LD_INT 2
56309: PPUSH
56310: CALL_OW 272
56314: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56315: LD_ADDR_VAR 0 12
56319: PUSH
56320: LD_VAR 0 13
56324: PPUSH
56325: CALL_OW 251
56329: PPUSH
56330: LD_VAR 0 10
56334: PPUSH
56335: LD_INT 2
56337: PPUSH
56338: CALL_OW 273
56342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56343: LD_VAR 0 11
56347: PPUSH
56348: LD_VAR 0 12
56352: PPUSH
56353: CALL_OW 488
56357: IFFALSE 56376
56359: PUSH
56360: LD_VAR 0 11
56364: PPUSH
56365: LD_VAR 0 12
56369: PPUSH
56370: CALL_OW 428
56374: NOT
56375: AND
56376: IFFALSE 56399
// begin ComMoveXY ( tmp , _x , _y ) ;
56378: LD_VAR 0 13
56382: PPUSH
56383: LD_VAR 0 11
56387: PPUSH
56388: LD_VAR 0 12
56392: PPUSH
56393: CALL_OW 111
// break ;
56397: GO 56401
// end ; end ;
56399: GO 56284
56401: POP
56402: POP
// end ; end ;
56403: GO 55716
56405: POP
56406: POP
// end ;
56407: LD_VAR 0 8
56411: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56412: LD_INT 0
56414: PPUSH
// result := true ;
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_INT 1
56422: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56423: LD_VAR 0 2
56427: PUSH
56428: LD_INT 24
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56442
56434: LD_INT 33
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56442
56440: GO 56467
56442: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56443: LD_ADDR_VAR 0 3
56447: PUSH
56448: LD_INT 32
56450: PPUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 321
56460: PUSH
56461: LD_INT 2
56463: EQUAL
56464: ST_TO_ADDR
56465: GO 56783
56467: LD_INT 20
56469: DOUBLE
56470: EQUAL
56471: IFTRUE 56475
56473: GO 56500
56475: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56476: LD_ADDR_VAR 0 3
56480: PUSH
56481: LD_INT 6
56483: PPUSH
56484: LD_VAR 0 1
56488: PPUSH
56489: CALL_OW 321
56493: PUSH
56494: LD_INT 2
56496: EQUAL
56497: ST_TO_ADDR
56498: GO 56783
56500: LD_INT 22
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56514
56506: LD_INT 36
56508: DOUBLE
56509: EQUAL
56510: IFTRUE 56514
56512: GO 56539
56514: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56515: LD_ADDR_VAR 0 3
56519: PUSH
56520: LD_INT 15
56522: PPUSH
56523: LD_VAR 0 1
56527: PPUSH
56528: CALL_OW 321
56532: PUSH
56533: LD_INT 2
56535: EQUAL
56536: ST_TO_ADDR
56537: GO 56783
56539: LD_INT 30
56541: DOUBLE
56542: EQUAL
56543: IFTRUE 56547
56545: GO 56572
56547: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: LD_INT 20
56555: PPUSH
56556: LD_VAR 0 1
56560: PPUSH
56561: CALL_OW 321
56565: PUSH
56566: LD_INT 2
56568: EQUAL
56569: ST_TO_ADDR
56570: GO 56783
56572: LD_INT 28
56574: DOUBLE
56575: EQUAL
56576: IFTRUE 56586
56578: LD_INT 21
56580: DOUBLE
56581: EQUAL
56582: IFTRUE 56586
56584: GO 56611
56586: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56587: LD_ADDR_VAR 0 3
56591: PUSH
56592: LD_INT 21
56594: PPUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: CALL_OW 321
56604: PUSH
56605: LD_INT 2
56607: EQUAL
56608: ST_TO_ADDR
56609: GO 56783
56611: LD_INT 16
56613: DOUBLE
56614: EQUAL
56615: IFTRUE 56619
56617: GO 56644
56619: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56620: LD_ADDR_VAR 0 3
56624: PUSH
56625: LD_INT 84
56627: PPUSH
56628: LD_VAR 0 1
56632: PPUSH
56633: CALL_OW 321
56637: PUSH
56638: LD_INT 2
56640: EQUAL
56641: ST_TO_ADDR
56642: GO 56783
56644: LD_INT 19
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56658
56650: LD_INT 23
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56658
56656: GO 56683
56658: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56659: LD_ADDR_VAR 0 3
56663: PUSH
56664: LD_INT 83
56666: PPUSH
56667: LD_VAR 0 1
56671: PPUSH
56672: CALL_OW 321
56676: PUSH
56677: LD_INT 2
56679: EQUAL
56680: ST_TO_ADDR
56681: GO 56783
56683: LD_INT 17
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56691
56689: GO 56716
56691: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56692: LD_ADDR_VAR 0 3
56696: PUSH
56697: LD_INT 39
56699: PPUSH
56700: LD_VAR 0 1
56704: PPUSH
56705: CALL_OW 321
56709: PUSH
56710: LD_INT 2
56712: EQUAL
56713: ST_TO_ADDR
56714: GO 56783
56716: LD_INT 18
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56724
56722: GO 56749
56724: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56725: LD_ADDR_VAR 0 3
56729: PUSH
56730: LD_INT 40
56732: PPUSH
56733: LD_VAR 0 1
56737: PPUSH
56738: CALL_OW 321
56742: PUSH
56743: LD_INT 2
56745: EQUAL
56746: ST_TO_ADDR
56747: GO 56783
56749: LD_INT 27
56751: DOUBLE
56752: EQUAL
56753: IFTRUE 56757
56755: GO 56782
56757: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56758: LD_ADDR_VAR 0 3
56762: PUSH
56763: LD_INT 35
56765: PPUSH
56766: LD_VAR 0 1
56770: PPUSH
56771: CALL_OW 321
56775: PUSH
56776: LD_INT 2
56778: EQUAL
56779: ST_TO_ADDR
56780: GO 56783
56782: POP
// end ;
56783: LD_VAR 0 3
56787: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56788: LD_INT 0
56790: PPUSH
56791: PPUSH
56792: PPUSH
56793: PPUSH
56794: PPUSH
56795: PPUSH
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
56800: PPUSH
// result := false ;
56801: LD_ADDR_VAR 0 6
56805: PUSH
56806: LD_INT 0
56808: ST_TO_ADDR
// if btype = b_depot then
56809: LD_VAR 0 2
56813: PUSH
56814: LD_INT 0
56816: EQUAL
56817: IFFALSE 56829
// begin result := true ;
56819: LD_ADDR_VAR 0 6
56823: PUSH
56824: LD_INT 1
56826: ST_TO_ADDR
// exit ;
56827: GO 57683
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56829: LD_VAR 0 1
56833: NOT
56834: IFTRUE 56859
56836: PUSH
56837: LD_VAR 0 1
56841: PPUSH
56842: CALL_OW 266
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: IN
56857: NOT
56858: OR
56859: IFTRUE 56868
56861: PUSH
56862: LD_VAR 0 2
56866: NOT
56867: OR
56868: IFTRUE 56904
56870: PUSH
56871: LD_VAR 0 5
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: LD_INT 5
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: IN
56902: NOT
56903: OR
56904: IFTRUE 56923
56906: PUSH
56907: LD_VAR 0 3
56911: PPUSH
56912: LD_VAR 0 4
56916: PPUSH
56917: CALL_OW 488
56921: NOT
56922: OR
56923: IFFALSE 56927
// exit ;
56925: GO 57683
// side := GetSide ( depot ) ;
56927: LD_ADDR_VAR 0 9
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: CALL_OW 255
56941: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56942: LD_VAR 0 9
56946: PPUSH
56947: LD_VAR 0 2
56951: PPUSH
56952: CALL 56412 0 2
56956: NOT
56957: IFFALSE 56961
// exit ;
56959: GO 57683
// pom := GetBase ( depot ) ;
56961: LD_ADDR_VAR 0 10
56965: PUSH
56966: LD_VAR 0 1
56970: PPUSH
56971: CALL_OW 274
56975: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56976: LD_ADDR_VAR 0 11
56980: PUSH
56981: LD_VAR 0 2
56985: PPUSH
56986: LD_VAR 0 1
56990: PPUSH
56991: CALL_OW 248
56995: PPUSH
56996: CALL_OW 450
57000: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57001: LD_VAR 0 10
57005: PPUSH
57006: LD_INT 1
57008: PPUSH
57009: CALL_OW 275
57013: PUSH
57014: LD_VAR 0 11
57018: PUSH
57019: LD_INT 1
57021: ARRAY
57022: GREATEREQUAL
57023: IFFALSE 57049
57025: PUSH
57026: LD_VAR 0 10
57030: PPUSH
57031: LD_INT 2
57033: PPUSH
57034: CALL_OW 275
57038: PUSH
57039: LD_VAR 0 11
57043: PUSH
57044: LD_INT 2
57046: ARRAY
57047: GREATEREQUAL
57048: AND
57049: IFFALSE 57075
57051: PUSH
57052: LD_VAR 0 10
57056: PPUSH
57057: LD_INT 3
57059: PPUSH
57060: CALL_OW 275
57064: PUSH
57065: LD_VAR 0 11
57069: PUSH
57070: LD_INT 3
57072: ARRAY
57073: GREATEREQUAL
57074: AND
57075: NOT
57076: IFFALSE 57080
// exit ;
57078: GO 57683
// if GetBType ( depot ) = b_depot then
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 266
57089: PUSH
57090: LD_INT 0
57092: EQUAL
57093: IFFALSE 57105
// dist := 28 else
57095: LD_ADDR_VAR 0 14
57099: PUSH
57100: LD_INT 28
57102: ST_TO_ADDR
57103: GO 57113
// dist := 36 ;
57105: LD_ADDR_VAR 0 14
57109: PUSH
57110: LD_INT 36
57112: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57113: LD_VAR 0 1
57117: PPUSH
57118: LD_VAR 0 3
57122: PPUSH
57123: LD_VAR 0 4
57127: PPUSH
57128: CALL_OW 297
57132: PUSH
57133: LD_VAR 0 14
57137: GREATER
57138: IFFALSE 57142
// exit ;
57140: GO 57683
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57142: LD_ADDR_VAR 0 12
57146: PUSH
57147: LD_VAR 0 2
57151: PPUSH
57152: LD_VAR 0 3
57156: PPUSH
57157: LD_VAR 0 4
57161: PPUSH
57162: LD_VAR 0 5
57166: PPUSH
57167: LD_VAR 0 1
57171: PPUSH
57172: CALL_OW 248
57176: PPUSH
57177: LD_INT 0
57179: PPUSH
57180: CALL 57688 0 6
57184: ST_TO_ADDR
// if not hexes then
57185: LD_VAR 0 12
57189: NOT
57190: IFFALSE 57194
// exit ;
57192: GO 57683
// hex := GetHexInfo ( x , y ) ;
57194: LD_ADDR_VAR 0 15
57198: PUSH
57199: LD_VAR 0 3
57203: PPUSH
57204: LD_VAR 0 4
57208: PPUSH
57209: CALL_OW 546
57213: ST_TO_ADDR
// if hex [ 1 ] then
57214: LD_VAR 0 15
57218: PUSH
57219: LD_INT 1
57221: ARRAY
57222: IFFALSE 57226
// exit ;
57224: GO 57683
// height := hex [ 2 ] ;
57226: LD_ADDR_VAR 0 13
57230: PUSH
57231: LD_VAR 0 15
57235: PUSH
57236: LD_INT 2
57238: ARRAY
57239: ST_TO_ADDR
// for i = 1 to hexes do
57240: LD_ADDR_VAR 0 7
57244: PUSH
57245: DOUBLE
57246: LD_INT 1
57248: DEC
57249: ST_TO_ADDR
57250: LD_VAR 0 12
57254: PUSH
57255: FOR_TO
57256: IFFALSE 57600
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57258: LD_VAR 0 12
57262: PUSH
57263: LD_VAR 0 7
57267: ARRAY
57268: PUSH
57269: LD_INT 1
57271: ARRAY
57272: PPUSH
57273: LD_VAR 0 12
57277: PUSH
57278: LD_VAR 0 7
57282: ARRAY
57283: PUSH
57284: LD_INT 2
57286: ARRAY
57287: PPUSH
57288: CALL_OW 488
57292: NOT
57293: IFTRUE 57335
57295: PUSH
57296: LD_VAR 0 12
57300: PUSH
57301: LD_VAR 0 7
57305: ARRAY
57306: PUSH
57307: LD_INT 1
57309: ARRAY
57310: PPUSH
57311: LD_VAR 0 12
57315: PUSH
57316: LD_VAR 0 7
57320: ARRAY
57321: PUSH
57322: LD_INT 2
57324: ARRAY
57325: PPUSH
57326: CALL_OW 428
57330: PUSH
57331: LD_INT 0
57333: GREATER
57334: OR
57335: IFTRUE 57373
57337: PUSH
57338: LD_VAR 0 12
57342: PUSH
57343: LD_VAR 0 7
57347: ARRAY
57348: PUSH
57349: LD_INT 1
57351: ARRAY
57352: PPUSH
57353: LD_VAR 0 12
57357: PUSH
57358: LD_VAR 0 7
57362: ARRAY
57363: PUSH
57364: LD_INT 2
57366: ARRAY
57367: PPUSH
57368: CALL_OW 351
57372: OR
57373: IFFALSE 57379
// exit ;
57375: POP
57376: POP
57377: GO 57683
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57379: LD_ADDR_VAR 0 8
57383: PUSH
57384: LD_VAR 0 12
57388: PUSH
57389: LD_VAR 0 7
57393: ARRAY
57394: PUSH
57395: LD_INT 1
57397: ARRAY
57398: PPUSH
57399: LD_VAR 0 12
57403: PUSH
57404: LD_VAR 0 7
57408: ARRAY
57409: PUSH
57410: LD_INT 2
57412: ARRAY
57413: PPUSH
57414: CALL_OW 546
57418: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57419: LD_VAR 0 8
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: IFTRUE 57449
57429: PUSH
57430: LD_VAR 0 8
57434: PUSH
57435: LD_INT 2
57437: ARRAY
57438: PUSH
57439: LD_VAR 0 13
57443: PUSH
57444: LD_INT 2
57446: PLUS
57447: GREATER
57448: OR
57449: IFTRUE 57471
57451: PUSH
57452: LD_VAR 0 8
57456: PUSH
57457: LD_INT 2
57459: ARRAY
57460: PUSH
57461: LD_VAR 0 13
57465: PUSH
57466: LD_INT 2
57468: MINUS
57469: LESS
57470: OR
57471: IFTRUE 57539
57473: PUSH
57474: LD_VAR 0 8
57478: PUSH
57479: LD_INT 3
57481: ARRAY
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 8
57488: PUSH
57489: LD_INT 9
57491: PUSH
57492: LD_INT 10
57494: PUSH
57495: LD_INT 11
57497: PUSH
57498: LD_INT 12
57500: PUSH
57501: LD_INT 13
57503: PUSH
57504: LD_INT 16
57506: PUSH
57507: LD_INT 17
57509: PUSH
57510: LD_INT 18
57512: PUSH
57513: LD_INT 19
57515: PUSH
57516: LD_INT 20
57518: PUSH
57519: LD_INT 21
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: IN
57537: NOT
57538: OR
57539: IFTRUE 57552
57541: PUSH
57542: LD_VAR 0 8
57546: PUSH
57547: LD_INT 5
57549: ARRAY
57550: NOT
57551: OR
57552: IFTRUE 57592
57554: PUSH
57555: LD_VAR 0 8
57559: PUSH
57560: LD_INT 6
57562: ARRAY
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 7
57572: PUSH
57573: LD_INT 9
57575: PUSH
57576: LD_INT 10
57578: PUSH
57579: LD_INT 11
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: IN
57590: NOT
57591: OR
57592: IFFALSE 57598
// exit ;
57594: POP
57595: POP
57596: GO 57683
// end ;
57598: GO 57255
57600: POP
57601: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57602: LD_VAR 0 9
57606: PPUSH
57607: LD_VAR 0 3
57611: PPUSH
57612: LD_VAR 0 4
57616: PPUSH
57617: LD_INT 20
57619: PPUSH
57620: CALL 49502 0 4
57624: PUSH
57625: LD_INT 4
57627: ARRAY
57628: IFFALSE 57632
// exit ;
57630: GO 57683
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 29
57639: PUSH
57640: LD_INT 30
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: IN
57647: IFFALSE 57671
57649: PUSH
57650: LD_VAR 0 3
57654: PPUSH
57655: LD_VAR 0 4
57659: PPUSH
57660: LD_VAR 0 9
57664: PPUSH
57665: CALL_OW 440
57669: NOT
57670: AND
57671: IFFALSE 57675
// exit ;
57673: GO 57683
// result := true ;
57675: LD_ADDR_VAR 0 6
57679: PUSH
57680: LD_INT 1
57682: ST_TO_ADDR
// end ;
57683: LD_VAR 0 6
57687: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57688: LD_INT 0
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
57704: PPUSH
57705: PPUSH
57706: PPUSH
57707: PPUSH
57708: PPUSH
57709: PPUSH
57710: PPUSH
57711: PPUSH
57712: PPUSH
57713: PPUSH
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
57731: PPUSH
57732: PPUSH
57733: PPUSH
57734: PPUSH
57735: PPUSH
57736: PPUSH
57737: PPUSH
57738: PPUSH
57739: PPUSH
57740: PPUSH
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
// result = [ ] ;
57748: LD_ADDR_VAR 0 7
57752: PUSH
57753: EMPTY
57754: ST_TO_ADDR
// temp_list = [ ] ;
57755: LD_ADDR_VAR 0 9
57759: PUSH
57760: EMPTY
57761: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57762: LD_VAR 0 4
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: IN
57793: NOT
57794: IFTRUE 57837
57796: PUSH
57797: LD_VAR 0 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: IN
57812: IFFALSE 57836
57814: PUSH
57815: LD_VAR 0 5
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: IN
57834: NOT
57835: AND
57836: OR
57837: IFFALSE 57841
// exit ;
57839: GO 76240
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57841: LD_VAR 0 1
57845: PUSH
57846: LD_INT 6
57848: PUSH
57849: LD_INT 7
57851: PUSH
57852: LD_INT 8
57854: PUSH
57855: LD_INT 13
57857: PUSH
57858: LD_INT 12
57860: PUSH
57861: LD_INT 15
57863: PUSH
57864: LD_INT 11
57866: PUSH
57867: LD_INT 14
57869: PUSH
57870: LD_INT 10
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: IN
57884: IFFALSE 57894
// btype = b_lab ;
57886: LD_ADDR_VAR 0 1
57890: PUSH
57891: LD_INT 6
57893: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57894: LD_VAR 0 6
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: IN
57913: NOT
57914: IFTRUE 57982
57916: PUSH
57917: LD_VAR 0 1
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: LD_INT 6
57936: PUSH
57937: LD_INT 36
57939: PUSH
57940: LD_INT 4
57942: PUSH
57943: LD_INT 5
57945: PUSH
57946: LD_INT 31
57948: PUSH
57949: LD_INT 32
57951: PUSH
57952: LD_INT 33
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: IN
57968: NOT
57969: IFFALSE 57981
57971: PUSH
57972: LD_VAR 0 6
57976: PUSH
57977: LD_INT 1
57979: EQUAL
57980: AND
57981: OR
57982: IFTRUE 58014
57984: PUSH
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: IN
58000: NOT
58001: IFFALSE 58013
58003: PUSH
58004: LD_VAR 0 6
58008: PUSH
58009: LD_INT 2
58011: EQUAL
58012: AND
58013: OR
58014: IFFALSE 58024
// mode = 0 ;
58016: LD_ADDR_VAR 0 6
58020: PUSH
58021: LD_INT 0
58023: ST_TO_ADDR
// case mode of 0 :
58024: LD_VAR 0 6
58028: PUSH
58029: LD_INT 0
58031: DOUBLE
58032: EQUAL
58033: IFTRUE 58037
58035: GO 69490
58037: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58038: LD_ADDR_VAR 0 11
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58231: LD_ADDR_VAR 0 12
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58427: LD_ADDR_VAR 0 13
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58626: LD_ADDR_VAR 0 14
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58822: LD_ADDR_VAR 0 15
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59015: LD_ADDR_VAR 0 16
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59208: LD_ADDR_VAR 0 17
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59438: LD_ADDR_VAR 0 18
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59668: LD_ADDR_VAR 0 19
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59898: LD_ADDR_VAR 0 20
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60128: LD_ADDR_VAR 0 21
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60358: LD_ADDR_VAR 0 22
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60588: LD_ADDR_VAR 0 23
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 3
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60868: LD_ADDR_VAR 0 24
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61144: LD_ADDR_VAR 0 25
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61418: LD_ADDR_VAR 0 26
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61694: LD_ADDR_VAR 0 27
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61974: LD_ADDR_VAR 0 28
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: NEG
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62256: LD_ADDR_VAR 0 29
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 2
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 3
62500: NEG
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62535: LD_ADDR_VAR 0 30
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62813: LD_ADDR_VAR 0 31
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: NEG
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63091: LD_ADDR_VAR 0 32
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 3
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 3
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63369: LD_ADDR_VAR 0 33
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 3
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: LD_INT 3
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63648: LD_ADDR_VAR 0 34
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 3
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63928: LD_ADDR_VAR 0 35
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64040: LD_ADDR_VAR 0 36
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64152: LD_ADDR_VAR 0 37
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64264: LD_ADDR_VAR 0 38
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64376: LD_ADDR_VAR 0 39
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 2
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64488: LD_ADDR_VAR 0 40
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64600: LD_ADDR_VAR 0 41
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 2
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 2
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 3
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 3
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64950: LD_ADDR_VAR 0 42
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: LD_INT 2
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 2
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 3
65247: NEG
65248: PUSH
65249: LD_INT 2
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: LD_INT 3
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65300: LD_ADDR_VAR 0 43
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 2
65585: NEG
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: NEG
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65648: LD_ADDR_VAR 0 44
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: LD_INT 2
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: LD_INT 2
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 3
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: NEG
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65998: LD_ADDR_VAR 0 45
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 3
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 3
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 3
66295: NEG
66296: PUSH
66297: LD_INT 2
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: NEG
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66348: LD_ADDR_VAR 0 46
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 3
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: LD_INT 2
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: LD_INT 3
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 3
66644: NEG
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: NEG
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66696: LD_ADDR_VAR 0 47
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: LD_INT 2
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66847: LD_ADDR_VAR 0 48
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66994: LD_ADDR_VAR 0 49
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 1
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67138: LD_ADDR_VAR 0 50
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67282: LD_ADDR_VAR 0 51
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: LD_INT 1
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 2
67394: NEG
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67429: LD_ADDR_VAR 0 52
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: NEG
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 2
67556: NEG
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67580: LD_ADDR_VAR 0 53
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 1
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: LD_INT 2
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67810: LD_ADDR_VAR 0 54
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 2
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: NEG
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 2
67997: NEG
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68040: LD_ADDR_VAR 0 55
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: LD_INT 2
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: LD_INT 2
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: LD_INT 2
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68270: LD_ADDR_VAR 0 56
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: NEG
68340: PUSH
68341: LD_INT 1
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68500: LD_ADDR_VAR 0 57
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 1
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: LD_INT 1
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: LD_INT 2
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68730: LD_ADDR_VAR 0 58
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 2
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 2
68929: NEG
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68960: LD_ADDR_VAR 0 59
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69048: LD_ADDR_VAR 0 60
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 1
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: PUSH
69087: LD_INT 1
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 1
69106: NEG
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69136: LD_ADDR_VAR 0 61
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: LD_INT 1
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 1
69194: NEG
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69224: LD_ADDR_VAR 0 62
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: LD_INT 1
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69312: LD_ADDR_VAR 0 63
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 1
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: LD_INT 1
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 0
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69400: LD_ADDR_VAR 0 64
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: NEG
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 1
69469: NEG
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: ST_TO_ADDR
// end ; 1 :
69488: GO 75385
69490: LD_INT 1
69492: DOUBLE
69493: EQUAL
69494: IFTRUE 69498
69496: GO 72121
69498: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69499: LD_ADDR_VAR 0 11
69503: PUSH
69504: LD_INT 1
69506: NEG
69507: PUSH
69508: LD_INT 3
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: LD_INT 3
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: PUSH
69530: LD_INT 2
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69543: LD_ADDR_VAR 0 12
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: LD_INT 1
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 0
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69584: LD_ADDR_VAR 0 13
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 3
69601: PUSH
69602: LD_INT 3
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 3
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69624: LD_ADDR_VAR 0 14
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: LD_INT 3
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 1
69651: NEG
69652: PUSH
69653: LD_INT 2
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: LIST
69664: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69665: LD_ADDR_VAR 0 15
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: LD_INT 1
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 3
69683: NEG
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: LD_INT 1
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69709: LD_ADDR_VAR 0 16
69713: PUSH
69714: LD_INT 2
69716: NEG
69717: PUSH
69718: LD_INT 3
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 3
69728: NEG
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69755: LD_ADDR_VAR 0 17
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: LD_INT 3
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 0
69774: PUSH
69775: LD_INT 3
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 1
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69799: LD_ADDR_VAR 0 18
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 3
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69840: LD_ADDR_VAR 0 19
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 2
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 2
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69880: LD_ADDR_VAR 0 20
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: LD_INT 2
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: LIST
69920: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69921: LD_ADDR_VAR 0 21
69925: PUSH
69926: LD_INT 2
69928: NEG
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 3
69950: NEG
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: LIST
69964: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69965: LD_ADDR_VAR 0 22
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 3
69984: NEG
69985: PUSH
69986: LD_INT 2
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: LD_INT 3
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70011: LD_ADDR_VAR 0 23
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: LD_INT 3
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70055: LD_ADDR_VAR 0 24
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: LD_INT 1
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 4
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: LIST
70095: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70096: LD_ADDR_VAR 0 25
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70136: LD_ADDR_VAR 0 26
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: PUSH
70154: LD_INT 4
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70177: LD_ADDR_VAR 0 27
70181: PUSH
70182: LD_INT 3
70184: NEG
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 3
70195: NEG
70196: PUSH
70197: LD_INT 1
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 4
70206: NEG
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70221: LD_ADDR_VAR 0 28
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: LD_INT 3
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 3
70240: NEG
70241: PUSH
70242: LD_INT 4
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: LD_INT 3
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70267: LD_ADDR_VAR 0 29
70271: PUSH
70272: LD_INT 1
70274: NEG
70275: PUSH
70276: LD_INT 3
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 1
70308: NEG
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: LD_INT 3
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 1
70342: NEG
70343: PUSH
70344: LD_INT 5
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: LD_INT 5
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: NEG
70377: PUSH
70378: LD_INT 6
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 6
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 1
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70422: LD_ADDR_VAR 0 30
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 3
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 4
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 4
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 4
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 5
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 5
70512: PUSH
70513: LD_INT 1
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 5
70522: PUSH
70523: LD_INT 1
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 6
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 6
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70565: LD_ADDR_VAR 0 31
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: LD_INT 2
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: LD_INT 3
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 2
70592: PUSH
70593: LD_INT 3
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 4
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 4
70612: PUSH
70613: LD_INT 4
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: LD_INT 4
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 5
70632: PUSH
70633: LD_INT 4
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 5
70642: PUSH
70643: LD_INT 5
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 4
70652: PUSH
70653: LD_INT 5
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 6
70662: PUSH
70663: LD_INT 5
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 6
70672: PUSH
70673: LD_INT 6
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: PUSH
70683: LD_INT 6
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70704: LD_ADDR_VAR 0 32
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: LD_INT 3
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 0
70721: PUSH
70722: LD_INT 3
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: LD_INT 2
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 1
70742: PUSH
70743: LD_INT 4
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: LD_INT 3
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: LD_INT 5
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: LD_INT 5
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 6
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 6
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: LD_INT 5
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70847: LD_ADDR_VAR 0 33
70851: PUSH
70852: LD_INT 2
70854: NEG
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 3
70865: NEG
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 3
70876: NEG
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 3
70888: NEG
70889: PUSH
70890: LD_INT 1
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 4
70899: NEG
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: LD_INT 1
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 4
70922: NEG
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 5
70933: NEG
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 5
70956: NEG
70957: PUSH
70958: LD_INT 1
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 6
70967: NEG
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 6
70978: NEG
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71002: LD_ADDR_VAR 0 34
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 3
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 3
71045: NEG
71046: PUSH
71047: LD_INT 4
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 4
71057: NEG
71058: PUSH
71059: LD_INT 3
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 4
71069: NEG
71070: PUSH
71071: LD_INT 4
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 4
71081: NEG
71082: PUSH
71083: LD_INT 5
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 5
71093: NEG
71094: PUSH
71095: LD_INT 4
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 5
71105: NEG
71106: PUSH
71107: LD_INT 5
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 5
71117: NEG
71118: PUSH
71119: LD_INT 6
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 6
71129: NEG
71130: PUSH
71131: LD_INT 5
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 6
71141: NEG
71142: PUSH
71143: LD_INT 6
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71165: LD_ADDR_VAR 0 41
71169: PUSH
71170: LD_INT 0
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 1
71183: NEG
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: LIST
71208: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71209: LD_ADDR_VAR 0 42
71213: PUSH
71214: LD_INT 2
71216: PUSH
71217: LD_INT 0
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 3
71237: PUSH
71238: LD_INT 1
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: LIST
71249: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71250: LD_ADDR_VAR 0 43
71254: PUSH
71255: LD_INT 2
71257: PUSH
71258: LD_INT 2
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 2
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: LD_INT 3
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: LIST
71289: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71290: LD_ADDR_VAR 0 44
71294: PUSH
71295: LD_INT 0
71297: PUSH
71298: LD_INT 2
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 3
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 1
71317: NEG
71318: PUSH
71319: LD_INT 2
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: LIST
71330: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71331: LD_ADDR_VAR 0 45
71335: PUSH
71336: LD_INT 2
71338: NEG
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 2
71349: NEG
71350: PUSH
71351: LD_INT 1
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 3
71360: NEG
71361: PUSH
71362: LD_INT 1
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71375: LD_ADDR_VAR 0 46
71379: PUSH
71380: LD_INT 2
71382: NEG
71383: PUSH
71384: LD_INT 2
71386: NEG
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 2
71394: NEG
71395: PUSH
71396: LD_INT 3
71398: NEG
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 3
71406: NEG
71407: PUSH
71408: LD_INT 2
71410: NEG
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: LIST
71420: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71421: LD_ADDR_VAR 0 47
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: LD_INT 3
71432: NEG
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 1
71440: NEG
71441: PUSH
71442: LD_INT 3
71444: NEG
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71454: LD_ADDR_VAR 0 48
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: LD_INT 2
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: PUSH
71473: LD_INT 1
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71485: LD_ADDR_VAR 0 49
71489: PUSH
71490: LD_INT 3
71492: PUSH
71493: LD_INT 1
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 3
71502: PUSH
71503: LD_INT 2
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71514: LD_ADDR_VAR 0 50
71518: PUSH
71519: LD_INT 2
71521: PUSH
71522: LD_INT 3
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 3
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71543: LD_ADDR_VAR 0 51
71547: PUSH
71548: LD_INT 1
71550: NEG
71551: PUSH
71552: LD_INT 2
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 2
71561: NEG
71562: PUSH
71563: LD_INT 1
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71574: LD_ADDR_VAR 0 52
71578: PUSH
71579: LD_INT 3
71581: NEG
71582: PUSH
71583: LD_INT 1
71585: NEG
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 3
71593: NEG
71594: PUSH
71595: LD_INT 2
71597: NEG
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71607: LD_ADDR_VAR 0 53
71611: PUSH
71612: LD_INT 1
71614: NEG
71615: PUSH
71616: LD_INT 3
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: LD_INT 3
71629: NEG
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 1
71637: PUSH
71638: LD_INT 2
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71651: LD_ADDR_VAR 0 54
71655: PUSH
71656: LD_INT 2
71658: PUSH
71659: LD_INT 1
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 3
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: LD_INT 1
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71692: LD_ADDR_VAR 0 55
71696: PUSH
71697: LD_INT 3
71699: PUSH
71700: LD_INT 2
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: PUSH
71710: LD_INT 3
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 2
71719: PUSH
71720: LD_INT 3
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: LIST
71731: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71732: LD_ADDR_VAR 0 56
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 1
71759: NEG
71760: PUSH
71761: LD_INT 2
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71773: LD_ADDR_VAR 0 57
71777: PUSH
71778: LD_INT 2
71780: NEG
71781: PUSH
71782: LD_INT 1
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 3
71791: NEG
71792: PUSH
71793: LD_INT 0
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 3
71802: NEG
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71817: LD_ADDR_VAR 0 58
71821: PUSH
71822: LD_INT 2
71824: NEG
71825: PUSH
71826: LD_INT 3
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: LD_INT 2
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: LD_INT 3
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71863: LD_ADDR_VAR 0 59
71867: PUSH
71868: LD_INT 1
71870: NEG
71871: PUSH
71872: LD_INT 2
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: LD_INT 1
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71907: LD_ADDR_VAR 0 60
71911: PUSH
71912: LD_INT 1
71914: PUSH
71915: LD_INT 1
71917: NEG
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: LD_INT 0
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 2
71935: PUSH
71936: LD_INT 1
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: LIST
71947: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71948: LD_ADDR_VAR 0 61
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: LD_INT 1
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 2
71965: PUSH
71966: LD_INT 2
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 1
71975: PUSH
71976: LD_INT 2
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71988: LD_ADDR_VAR 0 62
71992: PUSH
71993: LD_INT 1
71995: PUSH
71996: LD_INT 2
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: LD_INT 2
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72029: LD_ADDR_VAR 0 63
72033: PUSH
72034: LD_INT 1
72036: NEG
72037: PUSH
72038: LD_INT 1
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 2
72058: NEG
72059: PUSH
72060: LD_INT 1
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72073: LD_ADDR_VAR 0 64
72077: PUSH
72078: LD_INT 1
72080: NEG
72081: PUSH
72082: LD_INT 2
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 2
72092: NEG
72093: PUSH
72094: LD_INT 1
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 2
72104: NEG
72105: PUSH
72106: LD_INT 2
72108: NEG
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: ST_TO_ADDR
// end ; 2 :
72119: GO 75385
72121: LD_INT 2
72123: DOUBLE
72124: EQUAL
72125: IFTRUE 72129
72127: GO 75384
72129: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72130: LD_ADDR_VAR 0 29
72134: PUSH
72135: LD_INT 4
72137: PUSH
72138: LD_INT 0
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 4
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 5
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 5
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 4
72178: PUSH
72179: LD_INT 1
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 3
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 3
72198: PUSH
72199: LD_INT 1
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 3
72209: PUSH
72210: LD_INT 2
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 5
72220: PUSH
72221: LD_INT 2
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 3
72230: PUSH
72231: LD_INT 3
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 3
72240: PUSH
72241: LD_INT 2
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: LD_INT 3
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: LD_INT 4
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 4
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 2
72290: PUSH
72291: LD_INT 2
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 4
72300: PUSH
72301: LD_INT 2
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 2
72310: PUSH
72311: LD_INT 4
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: LD_INT 4
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 0
72330: PUSH
72331: LD_INT 3
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 1
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: LD_INT 5
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: LD_INT 5
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: NEG
72371: PUSH
72372: LD_INT 4
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 1
72381: NEG
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: LD_INT 5
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 2
72402: NEG
72403: PUSH
72404: LD_INT 3
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 3
72413: NEG
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 3
72424: NEG
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 2
72436: NEG
72437: PUSH
72438: LD_INT 0
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 2
72447: NEG
72448: PUSH
72449: LD_INT 1
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 3
72458: NEG
72459: PUSH
72460: LD_INT 1
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 4
72469: NEG
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 4
72480: NEG
72481: PUSH
72482: LD_INT 1
72484: NEG
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 4
72492: NEG
72493: PUSH
72494: LD_INT 2
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 2
72504: NEG
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 4
72515: NEG
72516: PUSH
72517: LD_INT 4
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 4
72527: NEG
72528: PUSH
72529: LD_INT 5
72531: NEG
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 3
72539: NEG
72540: PUSH
72541: LD_INT 4
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 3
72551: NEG
72552: PUSH
72553: LD_INT 3
72555: NEG
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: NEG
72564: PUSH
72565: LD_INT 3
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 5
72575: NEG
72576: PUSH
72577: LD_INT 4
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 5
72587: NEG
72588: PUSH
72589: LD_INT 5
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 3
72599: NEG
72600: PUSH
72601: LD_INT 5
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 5
72611: NEG
72612: PUSH
72613: LD_INT 3
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72668: LD_ADDR_VAR 0 30
72672: PUSH
72673: LD_INT 4
72675: PUSH
72676: LD_INT 4
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 4
72685: PUSH
72686: LD_INT 3
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 5
72695: PUSH
72696: LD_INT 4
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 5
72705: PUSH
72706: LD_INT 5
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 4
72715: PUSH
72716: LD_INT 5
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 3
72725: PUSH
72726: LD_INT 4
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 3
72735: PUSH
72736: LD_INT 3
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 5
72745: PUSH
72746: LD_INT 3
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: LD_INT 5
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: LD_INT 2
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 1
72785: PUSH
72786: LD_INT 3
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 1
72795: PUSH
72796: LD_INT 4
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: LD_INT 4
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 1
72815: NEG
72816: PUSH
72817: LD_INT 3
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 1
72826: NEG
72827: PUSH
72828: LD_INT 2
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 2
72837: PUSH
72838: LD_INT 4
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 2
72847: NEG
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 4
72858: NEG
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 4
72869: NEG
72870: PUSH
72871: LD_INT 1
72873: NEG
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 3
72881: NEG
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 3
72892: NEG
72893: PUSH
72894: LD_INT 1
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 4
72903: NEG
72904: PUSH
72905: LD_INT 1
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 5
72914: NEG
72915: PUSH
72916: LD_INT 0
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 5
72925: NEG
72926: PUSH
72927: LD_INT 1
72929: NEG
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 5
72937: NEG
72938: PUSH
72939: LD_INT 2
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 3
72949: NEG
72950: PUSH
72951: LD_INT 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: NEG
72961: PUSH
72962: LD_INT 3
72964: NEG
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 3
72972: NEG
72973: PUSH
72974: LD_INT 4
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 2
72984: NEG
72985: PUSH
72986: LD_INT 3
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 2
72996: NEG
72997: PUSH
72998: LD_INT 2
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 3
73008: NEG
73009: PUSH
73010: LD_INT 2
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 4
73020: NEG
73021: PUSH
73022: LD_INT 3
73024: NEG
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 4
73032: NEG
73033: PUSH
73034: LD_INT 4
73036: NEG
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 2
73044: NEG
73045: PUSH
73046: LD_INT 4
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 4
73056: NEG
73057: PUSH
73058: LD_INT 2
73060: NEG
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 0
73068: PUSH
73069: LD_INT 4
73071: NEG
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PUSH
73077: LD_INT 0
73079: PUSH
73080: LD_INT 5
73082: NEG
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: LD_INT 4
73093: NEG
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 1
73101: PUSH
73102: LD_INT 3
73104: NEG
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 0
73112: PUSH
73113: LD_INT 3
73115: NEG
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 1
73123: NEG
73124: PUSH
73125: LD_INT 4
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 1
73135: NEG
73136: PUSH
73137: LD_INT 5
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 2
73147: PUSH
73148: LD_INT 3
73150: NEG
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 2
73158: NEG
73159: PUSH
73160: LD_INT 5
73162: NEG
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73215: LD_ADDR_VAR 0 31
73219: PUSH
73220: LD_INT 0
73222: PUSH
73223: LD_INT 4
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 0
73232: PUSH
73233: LD_INT 3
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 1
73242: PUSH
73243: LD_INT 4
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: LD_INT 5
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 5
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 1
73272: NEG
73273: PUSH
73274: LD_INT 4
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 1
73283: NEG
73284: PUSH
73285: LD_INT 3
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 2
73294: PUSH
73295: LD_INT 5
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 2
73304: NEG
73305: PUSH
73306: LD_INT 3
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 3
73315: NEG
73316: PUSH
73317: LD_INT 0
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 3
73326: NEG
73327: PUSH
73328: LD_INT 1
73330: NEG
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 2
73338: NEG
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 2
73349: NEG
73350: PUSH
73351: LD_INT 1
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 3
73360: NEG
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 4
73371: NEG
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 4
73382: NEG
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 4
73394: NEG
73395: PUSH
73396: LD_INT 2
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 2
73406: NEG
73407: PUSH
73408: LD_INT 2
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 4
73417: NEG
73418: PUSH
73419: LD_INT 4
73421: NEG
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 4
73429: NEG
73430: PUSH
73431: LD_INT 5
73433: NEG
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 3
73441: NEG
73442: PUSH
73443: LD_INT 4
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 3
73453: NEG
73454: PUSH
73455: LD_INT 3
73457: NEG
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 4
73465: NEG
73466: PUSH
73467: LD_INT 3
73469: NEG
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 5
73477: NEG
73478: PUSH
73479: LD_INT 4
73481: NEG
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 5
73489: NEG
73490: PUSH
73491: LD_INT 5
73493: NEG
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 3
73501: NEG
73502: PUSH
73503: LD_INT 5
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 5
73513: NEG
73514: PUSH
73515: LD_INT 3
73517: NEG
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 0
73525: PUSH
73526: LD_INT 3
73528: NEG
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: LD_INT 4
73539: NEG
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 1
73547: PUSH
73548: LD_INT 3
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 1
73558: PUSH
73559: LD_INT 2
73561: NEG
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 0
73569: PUSH
73570: LD_INT 2
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: NEG
73581: PUSH
73582: LD_INT 3
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 1
73592: NEG
73593: PUSH
73594: LD_INT 4
73596: NEG
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 2
73604: PUSH
73605: LD_INT 2
73607: NEG
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 2
73615: NEG
73616: PUSH
73617: LD_INT 4
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 4
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 4
73637: PUSH
73638: LD_INT 1
73640: NEG
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 5
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 5
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 4
73668: PUSH
73669: LD_INT 1
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 3
73678: PUSH
73679: LD_INT 0
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 3
73688: PUSH
73689: LD_INT 1
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: LD_INT 2
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 5
73710: PUSH
73711: LD_INT 2
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73765: LD_ADDR_VAR 0 32
73769: PUSH
73770: LD_INT 4
73772: NEG
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 4
73783: NEG
73784: PUSH
73785: LD_INT 1
73787: NEG
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 3
73795: NEG
73796: PUSH
73797: LD_INT 0
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 3
73806: NEG
73807: PUSH
73808: LD_INT 1
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 4
73817: NEG
73818: PUSH
73819: LD_INT 1
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 5
73828: NEG
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 5
73839: NEG
73840: PUSH
73841: LD_INT 1
73843: NEG
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 5
73851: NEG
73852: PUSH
73853: LD_INT 2
73855: NEG
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 3
73863: NEG
73864: PUSH
73865: LD_INT 2
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 3
73874: NEG
73875: PUSH
73876: LD_INT 3
73878: NEG
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 3
73886: NEG
73887: PUSH
73888: LD_INT 4
73890: NEG
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 2
73898: NEG
73899: PUSH
73900: LD_INT 3
73902: NEG
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 2
73910: NEG
73911: PUSH
73912: LD_INT 2
73914: NEG
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: NEG
73923: PUSH
73924: LD_INT 2
73926: NEG
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 4
73934: NEG
73935: PUSH
73936: LD_INT 3
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 4
73946: NEG
73947: PUSH
73948: LD_INT 4
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 2
73958: NEG
73959: PUSH
73960: LD_INT 4
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 4
73970: NEG
73971: PUSH
73972: LD_INT 2
73974: NEG
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: LD_INT 4
73985: NEG
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 0
73993: PUSH
73994: LD_INT 5
73996: NEG
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: PUSH
74005: LD_INT 4
74007: NEG
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 1
74015: PUSH
74016: LD_INT 3
74018: NEG
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: LD_INT 3
74029: NEG
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 1
74037: NEG
74038: PUSH
74039: LD_INT 4
74041: NEG
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 1
74049: NEG
74050: PUSH
74051: LD_INT 5
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 2
74061: PUSH
74062: LD_INT 3
74064: NEG
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 2
74072: NEG
74073: PUSH
74074: LD_INT 5
74076: NEG
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 3
74084: PUSH
74085: LD_INT 0
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 3
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 4
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 4
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 3
74125: PUSH
74126: LD_INT 1
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 2
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 2
74145: PUSH
74146: LD_INT 1
74148: NEG
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PUSH
74154: LD_INT 2
74156: PUSH
74157: LD_INT 2
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 4
74167: PUSH
74168: LD_INT 2
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 4
74177: PUSH
74178: LD_INT 4
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 4
74187: PUSH
74188: LD_INT 3
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 5
74197: PUSH
74198: LD_INT 4
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 5
74207: PUSH
74208: LD_INT 5
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 4
74217: PUSH
74218: LD_INT 5
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 3
74227: PUSH
74228: LD_INT 4
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 3
74237: PUSH
74238: LD_INT 3
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 5
74247: PUSH
74248: LD_INT 3
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 3
74257: PUSH
74258: LD_INT 5
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74312: LD_ADDR_VAR 0 33
74316: PUSH
74317: LD_INT 4
74319: NEG
74320: PUSH
74321: LD_INT 4
74323: NEG
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 4
74331: NEG
74332: PUSH
74333: LD_INT 5
74335: NEG
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 3
74343: NEG
74344: PUSH
74345: LD_INT 4
74347: NEG
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 3
74355: NEG
74356: PUSH
74357: LD_INT 3
74359: NEG
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 4
74367: NEG
74368: PUSH
74369: LD_INT 3
74371: NEG
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 5
74379: NEG
74380: PUSH
74381: LD_INT 4
74383: NEG
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 5
74391: NEG
74392: PUSH
74393: LD_INT 5
74395: NEG
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 3
74403: NEG
74404: PUSH
74405: LD_INT 5
74407: NEG
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 5
74415: NEG
74416: PUSH
74417: LD_INT 3
74419: NEG
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 0
74427: PUSH
74428: LD_INT 3
74430: NEG
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 0
74438: PUSH
74439: LD_INT 4
74441: NEG
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 1
74449: PUSH
74450: LD_INT 3
74452: NEG
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 1
74460: PUSH
74461: LD_INT 2
74463: NEG
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 0
74471: PUSH
74472: LD_INT 2
74474: NEG
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 1
74482: NEG
74483: PUSH
74484: LD_INT 3
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 1
74494: NEG
74495: PUSH
74496: LD_INT 4
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 2
74506: PUSH
74507: LD_INT 2
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 2
74517: NEG
74518: PUSH
74519: LD_INT 4
74521: NEG
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 4
74529: PUSH
74530: LD_INT 0
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 4
74539: PUSH
74540: LD_INT 1
74542: NEG
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 5
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 5
74560: PUSH
74561: LD_INT 1
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 4
74570: PUSH
74571: LD_INT 1
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 3
74580: PUSH
74581: LD_INT 0
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 3
74590: PUSH
74591: LD_INT 1
74593: NEG
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 3
74601: PUSH
74602: LD_INT 2
74604: NEG
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 5
74612: PUSH
74613: LD_INT 2
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: LD_INT 3
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 3
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 4
74642: PUSH
74643: LD_INT 3
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 4
74652: PUSH
74653: LD_INT 4
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: LD_INT 3
74662: PUSH
74663: LD_INT 4
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 2
74672: PUSH
74673: LD_INT 3
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 2
74682: PUSH
74683: LD_INT 2
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 4
74692: PUSH
74693: LD_INT 2
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 2
74702: PUSH
74703: LD_INT 4
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 0
74712: PUSH
74713: LD_INT 4
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 0
74722: PUSH
74723: LD_INT 3
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 1
74732: PUSH
74733: LD_INT 4
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 1
74742: PUSH
74743: LD_INT 5
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 0
74752: PUSH
74753: LD_INT 5
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 1
74762: NEG
74763: PUSH
74764: LD_INT 4
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 1
74773: NEG
74774: PUSH
74775: LD_INT 3
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PUSH
74782: LD_INT 2
74784: PUSH
74785: LD_INT 5
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 2
74794: NEG
74795: PUSH
74796: LD_INT 3
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74850: LD_ADDR_VAR 0 34
74854: PUSH
74855: LD_INT 0
74857: PUSH
74858: LD_INT 4
74860: NEG
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_INT 0
74868: PUSH
74869: LD_INT 5
74871: NEG
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: LD_INT 1
74879: PUSH
74880: LD_INT 4
74882: NEG
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: LD_INT 1
74890: PUSH
74891: LD_INT 3
74893: NEG
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 0
74901: PUSH
74902: LD_INT 3
74904: NEG
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 1
74912: NEG
74913: PUSH
74914: LD_INT 4
74916: NEG
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 1
74924: NEG
74925: PUSH
74926: LD_INT 5
74928: NEG
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 2
74936: PUSH
74937: LD_INT 3
74939: NEG
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 2
74947: NEG
74948: PUSH
74949: LD_INT 5
74951: NEG
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 3
74969: PUSH
74970: LD_INT 1
74972: NEG
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 4
74980: PUSH
74981: LD_INT 0
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 4
74990: PUSH
74991: LD_INT 1
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 3
75000: PUSH
75001: LD_INT 1
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 2
75010: PUSH
75011: LD_INT 0
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 2
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 2
75031: PUSH
75032: LD_INT 2
75034: NEG
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 4
75042: PUSH
75043: LD_INT 2
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 4
75052: PUSH
75053: LD_INT 4
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 4
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 5
75072: PUSH
75073: LD_INT 4
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 5
75082: PUSH
75083: LD_INT 5
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 4
75092: PUSH
75093: LD_INT 5
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_INT 3
75102: PUSH
75103: LD_INT 4
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 3
75112: PUSH
75113: LD_INT 3
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 5
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 3
75132: PUSH
75133: LD_INT 5
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: LD_INT 3
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 0
75152: PUSH
75153: LD_INT 2
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 1
75162: PUSH
75163: LD_INT 3
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 1
75172: PUSH
75173: LD_INT 4
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 0
75182: PUSH
75183: LD_INT 4
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 1
75192: NEG
75193: PUSH
75194: LD_INT 3
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 1
75203: NEG
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 2
75214: PUSH
75215: LD_INT 4
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 2
75224: NEG
75225: PUSH
75226: LD_INT 2
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 4
75235: NEG
75236: PUSH
75237: LD_INT 0
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 4
75246: NEG
75247: PUSH
75248: LD_INT 1
75250: NEG
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 3
75258: NEG
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 3
75269: NEG
75270: PUSH
75271: LD_INT 1
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 4
75280: NEG
75281: PUSH
75282: LD_INT 1
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 5
75291: NEG
75292: PUSH
75293: LD_INT 0
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 5
75302: NEG
75303: PUSH
75304: LD_INT 1
75306: NEG
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 5
75314: NEG
75315: PUSH
75316: LD_INT 2
75318: NEG
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 3
75326: NEG
75327: PUSH
75328: LD_INT 2
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: ST_TO_ADDR
// end ; end ;
75382: GO 75385
75384: POP
// case btype of b_depot , b_warehouse :
75385: LD_VAR 0 1
75389: PUSH
75390: LD_INT 0
75392: DOUBLE
75393: EQUAL
75394: IFTRUE 75404
75396: LD_INT 1
75398: DOUBLE
75399: EQUAL
75400: IFTRUE 75404
75402: GO 75605
75404: POP
// case nation of nation_american :
75405: LD_VAR 0 5
75409: PUSH
75410: LD_INT 1
75412: DOUBLE
75413: EQUAL
75414: IFTRUE 75418
75416: GO 75474
75418: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75419: LD_ADDR_VAR 0 9
75423: PUSH
75424: LD_VAR 0 11
75428: PUSH
75429: LD_VAR 0 12
75433: PUSH
75434: LD_VAR 0 13
75438: PUSH
75439: LD_VAR 0 14
75443: PUSH
75444: LD_VAR 0 15
75448: PUSH
75449: LD_VAR 0 16
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: PUSH
75462: LD_VAR 0 4
75466: PUSH
75467: LD_INT 1
75469: PLUS
75470: ARRAY
75471: ST_TO_ADDR
75472: GO 75603
75474: LD_INT 2
75476: DOUBLE
75477: EQUAL
75478: IFTRUE 75482
75480: GO 75538
75482: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75483: LD_ADDR_VAR 0 9
75487: PUSH
75488: LD_VAR 0 17
75492: PUSH
75493: LD_VAR 0 18
75497: PUSH
75498: LD_VAR 0 19
75502: PUSH
75503: LD_VAR 0 20
75507: PUSH
75508: LD_VAR 0 21
75512: PUSH
75513: LD_VAR 0 22
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: PUSH
75526: LD_VAR 0 4
75530: PUSH
75531: LD_INT 1
75533: PLUS
75534: ARRAY
75535: ST_TO_ADDR
75536: GO 75603
75538: LD_INT 3
75540: DOUBLE
75541: EQUAL
75542: IFTRUE 75546
75544: GO 75602
75546: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75547: LD_ADDR_VAR 0 9
75551: PUSH
75552: LD_VAR 0 23
75556: PUSH
75557: LD_VAR 0 24
75561: PUSH
75562: LD_VAR 0 25
75566: PUSH
75567: LD_VAR 0 26
75571: PUSH
75572: LD_VAR 0 27
75576: PUSH
75577: LD_VAR 0 28
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: PUSH
75590: LD_VAR 0 4
75594: PUSH
75595: LD_INT 1
75597: PLUS
75598: ARRAY
75599: ST_TO_ADDR
75600: GO 75603
75602: POP
75603: GO 76158
75605: LD_INT 2
75607: DOUBLE
75608: EQUAL
75609: IFTRUE 75619
75611: LD_INT 3
75613: DOUBLE
75614: EQUAL
75615: IFTRUE 75619
75617: GO 75675
75619: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75620: LD_ADDR_VAR 0 9
75624: PUSH
75625: LD_VAR 0 29
75629: PUSH
75630: LD_VAR 0 30
75634: PUSH
75635: LD_VAR 0 31
75639: PUSH
75640: LD_VAR 0 32
75644: PUSH
75645: LD_VAR 0 33
75649: PUSH
75650: LD_VAR 0 34
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: PUSH
75663: LD_VAR 0 4
75667: PUSH
75668: LD_INT 1
75670: PLUS
75671: ARRAY
75672: ST_TO_ADDR
75673: GO 76158
75675: LD_INT 16
75677: DOUBLE
75678: EQUAL
75679: IFTRUE 75737
75681: LD_INT 17
75683: DOUBLE
75684: EQUAL
75685: IFTRUE 75737
75687: LD_INT 18
75689: DOUBLE
75690: EQUAL
75691: IFTRUE 75737
75693: LD_INT 19
75695: DOUBLE
75696: EQUAL
75697: IFTRUE 75737
75699: LD_INT 22
75701: DOUBLE
75702: EQUAL
75703: IFTRUE 75737
75705: LD_INT 20
75707: DOUBLE
75708: EQUAL
75709: IFTRUE 75737
75711: LD_INT 21
75713: DOUBLE
75714: EQUAL
75715: IFTRUE 75737
75717: LD_INT 23
75719: DOUBLE
75720: EQUAL
75721: IFTRUE 75737
75723: LD_INT 24
75725: DOUBLE
75726: EQUAL
75727: IFTRUE 75737
75729: LD_INT 25
75731: DOUBLE
75732: EQUAL
75733: IFTRUE 75737
75735: GO 75793
75737: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75738: LD_ADDR_VAR 0 9
75742: PUSH
75743: LD_VAR 0 35
75747: PUSH
75748: LD_VAR 0 36
75752: PUSH
75753: LD_VAR 0 37
75757: PUSH
75758: LD_VAR 0 38
75762: PUSH
75763: LD_VAR 0 39
75767: PUSH
75768: LD_VAR 0 40
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: PUSH
75781: LD_VAR 0 4
75785: PUSH
75786: LD_INT 1
75788: PLUS
75789: ARRAY
75790: ST_TO_ADDR
75791: GO 76158
75793: LD_INT 6
75795: DOUBLE
75796: EQUAL
75797: IFTRUE 75849
75799: LD_INT 7
75801: DOUBLE
75802: EQUAL
75803: IFTRUE 75849
75805: LD_INT 8
75807: DOUBLE
75808: EQUAL
75809: IFTRUE 75849
75811: LD_INT 13
75813: DOUBLE
75814: EQUAL
75815: IFTRUE 75849
75817: LD_INT 12
75819: DOUBLE
75820: EQUAL
75821: IFTRUE 75849
75823: LD_INT 15
75825: DOUBLE
75826: EQUAL
75827: IFTRUE 75849
75829: LD_INT 11
75831: DOUBLE
75832: EQUAL
75833: IFTRUE 75849
75835: LD_INT 14
75837: DOUBLE
75838: EQUAL
75839: IFTRUE 75849
75841: LD_INT 10
75843: DOUBLE
75844: EQUAL
75845: IFTRUE 75849
75847: GO 75905
75849: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75850: LD_ADDR_VAR 0 9
75854: PUSH
75855: LD_VAR 0 41
75859: PUSH
75860: LD_VAR 0 42
75864: PUSH
75865: LD_VAR 0 43
75869: PUSH
75870: LD_VAR 0 44
75874: PUSH
75875: LD_VAR 0 45
75879: PUSH
75880: LD_VAR 0 46
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: PUSH
75893: LD_VAR 0 4
75897: PUSH
75898: LD_INT 1
75900: PLUS
75901: ARRAY
75902: ST_TO_ADDR
75903: GO 76158
75905: LD_INT 36
75907: DOUBLE
75908: EQUAL
75909: IFTRUE 75913
75911: GO 75969
75913: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75914: LD_ADDR_VAR 0 9
75918: PUSH
75919: LD_VAR 0 47
75923: PUSH
75924: LD_VAR 0 48
75928: PUSH
75929: LD_VAR 0 49
75933: PUSH
75934: LD_VAR 0 50
75938: PUSH
75939: LD_VAR 0 51
75943: PUSH
75944: LD_VAR 0 52
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: PUSH
75957: LD_VAR 0 4
75961: PUSH
75962: LD_INT 1
75964: PLUS
75965: ARRAY
75966: ST_TO_ADDR
75967: GO 76158
75969: LD_INT 4
75971: DOUBLE
75972: EQUAL
75973: IFTRUE 75995
75975: LD_INT 5
75977: DOUBLE
75978: EQUAL
75979: IFTRUE 75995
75981: LD_INT 34
75983: DOUBLE
75984: EQUAL
75985: IFTRUE 75995
75987: LD_INT 37
75989: DOUBLE
75990: EQUAL
75991: IFTRUE 75995
75993: GO 76051
75995: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75996: LD_ADDR_VAR 0 9
76000: PUSH
76001: LD_VAR 0 53
76005: PUSH
76006: LD_VAR 0 54
76010: PUSH
76011: LD_VAR 0 55
76015: PUSH
76016: LD_VAR 0 56
76020: PUSH
76021: LD_VAR 0 57
76025: PUSH
76026: LD_VAR 0 58
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: PUSH
76039: LD_VAR 0 4
76043: PUSH
76044: LD_INT 1
76046: PLUS
76047: ARRAY
76048: ST_TO_ADDR
76049: GO 76158
76051: LD_INT 31
76053: DOUBLE
76054: EQUAL
76055: IFTRUE 76101
76057: LD_INT 32
76059: DOUBLE
76060: EQUAL
76061: IFTRUE 76101
76063: LD_INT 33
76065: DOUBLE
76066: EQUAL
76067: IFTRUE 76101
76069: LD_INT 27
76071: DOUBLE
76072: EQUAL
76073: IFTRUE 76101
76075: LD_INT 26
76077: DOUBLE
76078: EQUAL
76079: IFTRUE 76101
76081: LD_INT 28
76083: DOUBLE
76084: EQUAL
76085: IFTRUE 76101
76087: LD_INT 29
76089: DOUBLE
76090: EQUAL
76091: IFTRUE 76101
76093: LD_INT 30
76095: DOUBLE
76096: EQUAL
76097: IFTRUE 76101
76099: GO 76157
76101: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76102: LD_ADDR_VAR 0 9
76106: PUSH
76107: LD_VAR 0 59
76111: PUSH
76112: LD_VAR 0 60
76116: PUSH
76117: LD_VAR 0 61
76121: PUSH
76122: LD_VAR 0 62
76126: PUSH
76127: LD_VAR 0 63
76131: PUSH
76132: LD_VAR 0 64
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: PUSH
76145: LD_VAR 0 4
76149: PUSH
76150: LD_INT 1
76152: PLUS
76153: ARRAY
76154: ST_TO_ADDR
76155: GO 76158
76157: POP
// temp_list2 = [ ] ;
76158: LD_ADDR_VAR 0 10
76162: PUSH
76163: EMPTY
76164: ST_TO_ADDR
// for i in temp_list do
76165: LD_ADDR_VAR 0 8
76169: PUSH
76170: LD_VAR 0 9
76174: PUSH
76175: FOR_IN
76176: IFFALSE 76228
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76178: LD_ADDR_VAR 0 10
76182: PUSH
76183: LD_VAR 0 10
76187: PUSH
76188: LD_VAR 0 8
76192: PUSH
76193: LD_INT 1
76195: ARRAY
76196: PUSH
76197: LD_VAR 0 2
76201: PLUS
76202: PUSH
76203: LD_VAR 0 8
76207: PUSH
76208: LD_INT 2
76210: ARRAY
76211: PUSH
76212: LD_VAR 0 3
76216: PLUS
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: EMPTY
76223: LIST
76224: ADD
76225: ST_TO_ADDR
76226: GO 76175
76228: POP
76229: POP
// result = temp_list2 ;
76230: LD_ADDR_VAR 0 7
76234: PUSH
76235: LD_VAR 0 10
76239: ST_TO_ADDR
// end ;
76240: LD_VAR 0 7
76244: RET
// export function EnemyInRange ( unit , dist ) ; begin
76245: LD_INT 0
76247: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76248: LD_ADDR_VAR 0 3
76252: PUSH
76253: LD_VAR 0 1
76257: PPUSH
76258: CALL_OW 255
76262: PPUSH
76263: LD_VAR 0 1
76267: PPUSH
76268: CALL_OW 250
76272: PPUSH
76273: LD_VAR 0 1
76277: PPUSH
76278: CALL_OW 251
76282: PPUSH
76283: LD_VAR 0 2
76287: PPUSH
76288: CALL 49502 0 4
76292: PUSH
76293: LD_INT 4
76295: ARRAY
76296: ST_TO_ADDR
// end ;
76297: LD_VAR 0 3
76301: RET
// export function PlayerSeeMe ( unit ) ; begin
76302: LD_INT 0
76304: PPUSH
// result := See ( your_side , unit ) ;
76305: LD_ADDR_VAR 0 2
76309: PUSH
76310: LD_OWVAR 2
76314: PPUSH
76315: LD_VAR 0 1
76319: PPUSH
76320: CALL_OW 292
76324: ST_TO_ADDR
// end ;
76325: LD_VAR 0 2
76329: RET
// export function ReverseDir ( unit ) ; begin
76330: LD_INT 0
76332: PPUSH
// if not unit then
76333: LD_VAR 0 1
76337: NOT
76338: IFFALSE 76342
// exit ;
76340: GO 76365
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76342: LD_ADDR_VAR 0 2
76346: PUSH
76347: LD_VAR 0 1
76351: PPUSH
76352: CALL_OW 254
76356: PUSH
76357: LD_INT 3
76359: PLUS
76360: PUSH
76361: LD_INT 6
76363: MOD
76364: ST_TO_ADDR
// end ;
76365: LD_VAR 0 2
76369: RET
// export function ReverseArray ( array ) ; var i ; begin
76370: LD_INT 0
76372: PPUSH
76373: PPUSH
// if not array then
76374: LD_VAR 0 1
76378: NOT
76379: IFFALSE 76383
// exit ;
76381: GO 76438
// result := [ ] ;
76383: LD_ADDR_VAR 0 2
76387: PUSH
76388: EMPTY
76389: ST_TO_ADDR
// for i := array downto 1 do
76390: LD_ADDR_VAR 0 3
76394: PUSH
76395: DOUBLE
76396: LD_VAR 0 1
76400: INC
76401: ST_TO_ADDR
76402: LD_INT 1
76404: PUSH
76405: FOR_DOWNTO
76406: IFFALSE 76436
// result := Join ( result , array [ i ] ) ;
76408: LD_ADDR_VAR 0 2
76412: PUSH
76413: LD_VAR 0 2
76417: PPUSH
76418: LD_VAR 0 1
76422: PUSH
76423: LD_VAR 0 3
76427: ARRAY
76428: PPUSH
76429: CALL 81290 0 2
76433: ST_TO_ADDR
76434: GO 76405
76436: POP
76437: POP
// end ;
76438: LD_VAR 0 2
76442: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76443: LD_INT 0
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
76450: PPUSH
// if not unit or not hexes then
76451: LD_VAR 0 1
76455: NOT
76456: IFTRUE 76465
76458: PUSH
76459: LD_VAR 0 2
76463: NOT
76464: OR
76465: IFFALSE 76469
// exit ;
76467: GO 76592
// dist := 9999 ;
76469: LD_ADDR_VAR 0 5
76473: PUSH
76474: LD_INT 9999
76476: ST_TO_ADDR
// for i = 1 to hexes do
76477: LD_ADDR_VAR 0 4
76481: PUSH
76482: DOUBLE
76483: LD_INT 1
76485: DEC
76486: ST_TO_ADDR
76487: LD_VAR 0 2
76491: PUSH
76492: FOR_TO
76493: IFFALSE 76580
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76495: LD_ADDR_VAR 0 6
76499: PUSH
76500: LD_VAR 0 1
76504: PPUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_VAR 0 4
76514: ARRAY
76515: PUSH
76516: LD_INT 1
76518: ARRAY
76519: PPUSH
76520: LD_VAR 0 2
76524: PUSH
76525: LD_VAR 0 4
76529: ARRAY
76530: PUSH
76531: LD_INT 2
76533: ARRAY
76534: PPUSH
76535: CALL_OW 297
76539: ST_TO_ADDR
// if tdist < dist then
76540: LD_VAR 0 6
76544: PUSH
76545: LD_VAR 0 5
76549: LESS
76550: IFFALSE 76578
// begin hex := hexes [ i ] ;
76552: LD_ADDR_VAR 0 8
76556: PUSH
76557: LD_VAR 0 2
76561: PUSH
76562: LD_VAR 0 4
76566: ARRAY
76567: ST_TO_ADDR
// dist := tdist ;
76568: LD_ADDR_VAR 0 5
76572: PUSH
76573: LD_VAR 0 6
76577: ST_TO_ADDR
// end ; end ;
76578: GO 76492
76580: POP
76581: POP
// result := hex ;
76582: LD_ADDR_VAR 0 3
76586: PUSH
76587: LD_VAR 0 8
76591: ST_TO_ADDR
// end ;
76592: LD_VAR 0 3
76596: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76597: LD_INT 0
76599: PPUSH
76600: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76601: LD_VAR 0 1
76605: NOT
76606: IFTRUE 76645
76608: PUSH
76609: LD_VAR 0 1
76613: PUSH
76614: LD_INT 21
76616: PUSH
76617: LD_INT 2
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 23
76626: PUSH
76627: LD_INT 2
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PPUSH
76638: CALL_OW 69
76642: IN
76643: NOT
76644: OR
76645: IFFALSE 76649
// exit ;
76647: GO 76696
// for i = 1 to 3 do
76649: LD_ADDR_VAR 0 3
76653: PUSH
76654: DOUBLE
76655: LD_INT 1
76657: DEC
76658: ST_TO_ADDR
76659: LD_INT 3
76661: PUSH
76662: FOR_TO
76663: IFFALSE 76694
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76665: LD_VAR 0 1
76669: PPUSH
76670: CALL_OW 250
76674: PPUSH
76675: LD_VAR 0 1
76679: PPUSH
76680: CALL_OW 251
76684: PPUSH
76685: LD_INT 1
76687: PPUSH
76688: CALL_OW 453
76692: GO 76662
76694: POP
76695: POP
// end ;
76696: LD_VAR 0 2
76700: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76701: LD_INT 0
76703: PPUSH
76704: PPUSH
76705: PPUSH
76706: PPUSH
76707: PPUSH
76708: PPUSH
// if not unit or not enemy_unit then
76709: LD_VAR 0 1
76713: NOT
76714: IFTRUE 76723
76716: PUSH
76717: LD_VAR 0 2
76721: NOT
76722: OR
76723: IFFALSE 76727
// exit ;
76725: GO 77208
// if GetLives ( i ) < 250 then
76727: LD_VAR 0 4
76731: PPUSH
76732: CALL_OW 256
76736: PUSH
76737: LD_INT 250
76739: LESS
76740: IFFALSE 76753
// begin ComAutodestruct ( i ) ;
76742: LD_VAR 0 4
76746: PPUSH
76747: CALL 76597 0 1
// exit ;
76751: GO 77208
// end ; x := GetX ( enemy_unit ) ;
76753: LD_ADDR_VAR 0 7
76757: PUSH
76758: LD_VAR 0 2
76762: PPUSH
76763: CALL_OW 250
76767: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76768: LD_ADDR_VAR 0 8
76772: PUSH
76773: LD_VAR 0 2
76777: PPUSH
76778: CALL_OW 251
76782: ST_TO_ADDR
// if not x or not y then
76783: LD_VAR 0 7
76787: NOT
76788: IFTRUE 76797
76790: PUSH
76791: LD_VAR 0 8
76795: NOT
76796: OR
76797: IFFALSE 76801
// exit ;
76799: GO 77208
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76801: LD_ADDR_VAR 0 6
76805: PUSH
76806: LD_VAR 0 7
76810: PPUSH
76811: LD_INT 0
76813: PPUSH
76814: LD_INT 4
76816: PPUSH
76817: CALL_OW 272
76821: PUSH
76822: LD_VAR 0 8
76826: PPUSH
76827: LD_INT 0
76829: PPUSH
76830: LD_INT 4
76832: PPUSH
76833: CALL_OW 273
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_VAR 0 7
76846: PPUSH
76847: LD_INT 1
76849: PPUSH
76850: LD_INT 4
76852: PPUSH
76853: CALL_OW 272
76857: PUSH
76858: LD_VAR 0 8
76862: PPUSH
76863: LD_INT 1
76865: PPUSH
76866: LD_INT 4
76868: PPUSH
76869: CALL_OW 273
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_VAR 0 7
76882: PPUSH
76883: LD_INT 2
76885: PPUSH
76886: LD_INT 4
76888: PPUSH
76889: CALL_OW 272
76893: PUSH
76894: LD_VAR 0 8
76898: PPUSH
76899: LD_INT 2
76901: PPUSH
76902: LD_INT 4
76904: PPUSH
76905: CALL_OW 273
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_VAR 0 7
76918: PPUSH
76919: LD_INT 3
76921: PPUSH
76922: LD_INT 4
76924: PPUSH
76925: CALL_OW 272
76929: PUSH
76930: LD_VAR 0 8
76934: PPUSH
76935: LD_INT 3
76937: PPUSH
76938: LD_INT 4
76940: PPUSH
76941: CALL_OW 273
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_VAR 0 7
76954: PPUSH
76955: LD_INT 4
76957: PPUSH
76958: LD_INT 4
76960: PPUSH
76961: CALL_OW 272
76965: PUSH
76966: LD_VAR 0 8
76970: PPUSH
76971: LD_INT 4
76973: PPUSH
76974: LD_INT 4
76976: PPUSH
76977: CALL_OW 273
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: PUSH
76986: LD_VAR 0 7
76990: PPUSH
76991: LD_INT 5
76993: PPUSH
76994: LD_INT 4
76996: PPUSH
76997: CALL_OW 272
77001: PUSH
77002: LD_VAR 0 8
77006: PPUSH
77007: LD_INT 5
77009: PPUSH
77010: LD_INT 4
77012: PPUSH
77013: CALL_OW 273
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: ST_TO_ADDR
// for i = tmp downto 1 do
77030: LD_ADDR_VAR 0 4
77034: PUSH
77035: DOUBLE
77036: LD_VAR 0 6
77040: INC
77041: ST_TO_ADDR
77042: LD_INT 1
77044: PUSH
77045: FOR_DOWNTO
77046: IFFALSE 77149
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77048: LD_VAR 0 6
77052: PUSH
77053: LD_VAR 0 4
77057: ARRAY
77058: PUSH
77059: LD_INT 1
77061: ARRAY
77062: PPUSH
77063: LD_VAR 0 6
77067: PUSH
77068: LD_VAR 0 4
77072: ARRAY
77073: PUSH
77074: LD_INT 2
77076: ARRAY
77077: PPUSH
77078: CALL_OW 488
77082: NOT
77083: IFTRUE 77125
77085: PUSH
77086: LD_VAR 0 6
77090: PUSH
77091: LD_VAR 0 4
77095: ARRAY
77096: PUSH
77097: LD_INT 1
77099: ARRAY
77100: PPUSH
77101: LD_VAR 0 6
77105: PUSH
77106: LD_VAR 0 4
77110: ARRAY
77111: PUSH
77112: LD_INT 2
77114: ARRAY
77115: PPUSH
77116: CALL_OW 428
77120: PUSH
77121: LD_INT 0
77123: NONEQUAL
77124: OR
77125: IFFALSE 77147
// tmp := Delete ( tmp , i ) ;
77127: LD_ADDR_VAR 0 6
77131: PUSH
77132: LD_VAR 0 6
77136: PPUSH
77137: LD_VAR 0 4
77141: PPUSH
77142: CALL_OW 3
77146: ST_TO_ADDR
77147: GO 77045
77149: POP
77150: POP
// j := GetClosestHex ( unit , tmp ) ;
77151: LD_ADDR_VAR 0 5
77155: PUSH
77156: LD_VAR 0 1
77160: PPUSH
77161: LD_VAR 0 6
77165: PPUSH
77166: CALL 76443 0 2
77170: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77171: LD_VAR 0 1
77175: PPUSH
77176: LD_VAR 0 5
77180: PUSH
77181: LD_INT 1
77183: ARRAY
77184: PPUSH
77185: LD_VAR 0 5
77189: PUSH
77190: LD_INT 2
77192: ARRAY
77193: PPUSH
77194: CALL_OW 111
// result := j ;
77198: LD_ADDR_VAR 0 3
77202: PUSH
77203: LD_VAR 0 5
77207: ST_TO_ADDR
// end ;
77208: LD_VAR 0 3
77212: RET
// export function PrepareApemanSoldier ( ) ; begin
77213: LD_INT 0
77215: PPUSH
// uc_nation := 0 ;
77216: LD_ADDR_OWVAR 21
77220: PUSH
77221: LD_INT 0
77223: ST_TO_ADDR
// hc_sex := sex_male ;
77224: LD_ADDR_OWVAR 27
77228: PUSH
77229: LD_INT 1
77231: ST_TO_ADDR
// hc_name :=  ;
77232: LD_ADDR_OWVAR 26
77236: PUSH
77237: LD_STRING 
77239: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77240: LD_ADDR_OWVAR 28
77244: PUSH
77245: LD_INT 15
77247: ST_TO_ADDR
// hc_gallery :=  ;
77248: LD_ADDR_OWVAR 33
77252: PUSH
77253: LD_STRING 
77255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77256: LD_ADDR_OWVAR 31
77260: PUSH
77261: LD_INT 0
77263: PPUSH
77264: LD_INT 3
77266: PPUSH
77267: CALL_OW 12
77271: PUSH
77272: LD_INT 0
77274: PPUSH
77275: LD_INT 3
77277: PPUSH
77278: CALL_OW 12
77282: PUSH
77283: LD_INT 0
77285: PUSH
77286: LD_INT 0
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77295: LD_ADDR_OWVAR 29
77299: PUSH
77300: LD_INT 10
77302: PUSH
77303: LD_INT 12
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: ST_TO_ADDR
// end ;
77310: LD_VAR 0 1
77314: RET
// export function PrepareApemanEngineer ( ) ; begin
77315: LD_INT 0
77317: PPUSH
// uc_nation := 0 ;
77318: LD_ADDR_OWVAR 21
77322: PUSH
77323: LD_INT 0
77325: ST_TO_ADDR
// hc_sex := sex_male ;
77326: LD_ADDR_OWVAR 27
77330: PUSH
77331: LD_INT 1
77333: ST_TO_ADDR
// hc_name :=  ;
77334: LD_ADDR_OWVAR 26
77338: PUSH
77339: LD_STRING 
77341: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77342: LD_ADDR_OWVAR 28
77346: PUSH
77347: LD_INT 16
77349: ST_TO_ADDR
// hc_gallery :=  ;
77350: LD_ADDR_OWVAR 33
77354: PUSH
77355: LD_STRING 
77357: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77358: LD_ADDR_OWVAR 31
77362: PUSH
77363: LD_INT 0
77365: PPUSH
77366: LD_INT 3
77368: PPUSH
77369: CALL_OW 12
77373: PUSH
77374: LD_INT 0
77376: PPUSH
77377: LD_INT 3
77379: PPUSH
77380: CALL_OW 12
77384: PUSH
77385: LD_INT 0
77387: PUSH
77388: LD_INT 0
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77397: LD_ADDR_OWVAR 29
77401: PUSH
77402: LD_INT 10
77404: PUSH
77405: LD_INT 12
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: ST_TO_ADDR
// end ;
77412: LD_VAR 0 1
77416: RET
// export function PrepareApeman ( agressivity ) ; begin
77417: LD_INT 0
77419: PPUSH
// uc_side := 0 ;
77420: LD_ADDR_OWVAR 20
77424: PUSH
77425: LD_INT 0
77427: ST_TO_ADDR
// uc_nation := 0 ;
77428: LD_ADDR_OWVAR 21
77432: PUSH
77433: LD_INT 0
77435: ST_TO_ADDR
// hc_sex := sex_male ;
77436: LD_ADDR_OWVAR 27
77440: PUSH
77441: LD_INT 1
77443: ST_TO_ADDR
// hc_class := class_apeman ;
77444: LD_ADDR_OWVAR 28
77448: PUSH
77449: LD_INT 12
77451: ST_TO_ADDR
// hc_gallery :=  ;
77452: LD_ADDR_OWVAR 33
77456: PUSH
77457: LD_STRING 
77459: ST_TO_ADDR
// hc_name :=  ;
77460: LD_ADDR_OWVAR 26
77464: PUSH
77465: LD_STRING 
77467: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77468: LD_ADDR_OWVAR 29
77472: PUSH
77473: LD_INT 10
77475: PUSH
77476: LD_INT 12
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: ST_TO_ADDR
// if agressivity = 0 then
77483: LD_VAR 0 1
77487: PUSH
77488: LD_INT 0
77490: EQUAL
77491: IFFALSE 77503
// hc_agressivity := 0 else
77493: LD_ADDR_OWVAR 35
77497: PUSH
77498: LD_INT 0
77500: ST_TO_ADDR
77501: GO 77524
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77503: LD_ADDR_OWVAR 35
77507: PUSH
77508: LD_VAR 0 1
77512: NEG
77513: PPUSH
77514: LD_VAR 0 1
77518: PPUSH
77519: CALL_OW 12
77523: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77524: LD_ADDR_OWVAR 31
77528: PUSH
77529: LD_INT 0
77531: PPUSH
77532: LD_INT 3
77534: PPUSH
77535: CALL_OW 12
77539: PUSH
77540: LD_INT 0
77542: PPUSH
77543: LD_INT 3
77545: PPUSH
77546: CALL_OW 12
77550: PUSH
77551: LD_INT 0
77553: PUSH
77554: LD_INT 0
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: ST_TO_ADDR
// end ;
77563: LD_VAR 0 2
77567: RET
// export function PrepareTiger ( agressivity ) ; begin
77568: LD_INT 0
77570: PPUSH
// uc_side := 0 ;
77571: LD_ADDR_OWVAR 20
77575: PUSH
77576: LD_INT 0
77578: ST_TO_ADDR
// uc_nation := 0 ;
77579: LD_ADDR_OWVAR 21
77583: PUSH
77584: LD_INT 0
77586: ST_TO_ADDR
// InitHc ;
77587: CALL_OW 19
// hc_class := class_tiger ;
77591: LD_ADDR_OWVAR 28
77595: PUSH
77596: LD_INT 14
77598: ST_TO_ADDR
// hc_gallery :=  ;
77599: LD_ADDR_OWVAR 33
77603: PUSH
77604: LD_STRING 
77606: ST_TO_ADDR
// hc_name :=  ;
77607: LD_ADDR_OWVAR 26
77611: PUSH
77612: LD_STRING 
77614: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77615: LD_ADDR_OWVAR 35
77619: PUSH
77620: LD_VAR 0 1
77624: NEG
77625: PPUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: CALL_OW 12
77635: ST_TO_ADDR
// end ;
77636: LD_VAR 0 2
77640: RET
// export function PrepareEnchidna ( ) ; begin
77641: LD_INT 0
77643: PPUSH
// uc_side := 0 ;
77644: LD_ADDR_OWVAR 20
77648: PUSH
77649: LD_INT 0
77651: ST_TO_ADDR
// uc_nation := 0 ;
77652: LD_ADDR_OWVAR 21
77656: PUSH
77657: LD_INT 0
77659: ST_TO_ADDR
// InitHc ;
77660: CALL_OW 19
// hc_class := class_baggie ;
77664: LD_ADDR_OWVAR 28
77668: PUSH
77669: LD_INT 13
77671: ST_TO_ADDR
// hc_gallery :=  ;
77672: LD_ADDR_OWVAR 33
77676: PUSH
77677: LD_STRING 
77679: ST_TO_ADDR
// hc_name :=  ;
77680: LD_ADDR_OWVAR 26
77684: PUSH
77685: LD_STRING 
77687: ST_TO_ADDR
// end ;
77688: LD_VAR 0 1
77692: RET
// export function PrepareFrog ( ) ; begin
77693: LD_INT 0
77695: PPUSH
// uc_side := 0 ;
77696: LD_ADDR_OWVAR 20
77700: PUSH
77701: LD_INT 0
77703: ST_TO_ADDR
// uc_nation := 0 ;
77704: LD_ADDR_OWVAR 21
77708: PUSH
77709: LD_INT 0
77711: ST_TO_ADDR
// InitHc ;
77712: CALL_OW 19
// hc_class := class_frog ;
77716: LD_ADDR_OWVAR 28
77720: PUSH
77721: LD_INT 19
77723: ST_TO_ADDR
// hc_gallery :=  ;
77724: LD_ADDR_OWVAR 33
77728: PUSH
77729: LD_STRING 
77731: ST_TO_ADDR
// hc_name :=  ;
77732: LD_ADDR_OWVAR 26
77736: PUSH
77737: LD_STRING 
77739: ST_TO_ADDR
// end ;
77740: LD_VAR 0 1
77744: RET
// export function PrepareFish ( ) ; begin
77745: LD_INT 0
77747: PPUSH
// uc_side := 0 ;
77748: LD_ADDR_OWVAR 20
77752: PUSH
77753: LD_INT 0
77755: ST_TO_ADDR
// uc_nation := 0 ;
77756: LD_ADDR_OWVAR 21
77760: PUSH
77761: LD_INT 0
77763: ST_TO_ADDR
// InitHc ;
77764: CALL_OW 19
// hc_class := class_fish ;
77768: LD_ADDR_OWVAR 28
77772: PUSH
77773: LD_INT 20
77775: ST_TO_ADDR
// hc_gallery :=  ;
77776: LD_ADDR_OWVAR 33
77780: PUSH
77781: LD_STRING 
77783: ST_TO_ADDR
// hc_name :=  ;
77784: LD_ADDR_OWVAR 26
77788: PUSH
77789: LD_STRING 
77791: ST_TO_ADDR
// end ;
77792: LD_VAR 0 1
77796: RET
// export function PrepareBird ( ) ; begin
77797: LD_INT 0
77799: PPUSH
// uc_side := 0 ;
77800: LD_ADDR_OWVAR 20
77804: PUSH
77805: LD_INT 0
77807: ST_TO_ADDR
// uc_nation := 0 ;
77808: LD_ADDR_OWVAR 21
77812: PUSH
77813: LD_INT 0
77815: ST_TO_ADDR
// InitHc ;
77816: CALL_OW 19
// hc_class := class_phororhacos ;
77820: LD_ADDR_OWVAR 28
77824: PUSH
77825: LD_INT 18
77827: ST_TO_ADDR
// hc_gallery :=  ;
77828: LD_ADDR_OWVAR 33
77832: PUSH
77833: LD_STRING 
77835: ST_TO_ADDR
// hc_name :=  ;
77836: LD_ADDR_OWVAR 26
77840: PUSH
77841: LD_STRING 
77843: ST_TO_ADDR
// end ;
77844: LD_VAR 0 1
77848: RET
// export function PrepareHorse ( ) ; begin
77849: LD_INT 0
77851: PPUSH
// uc_side := 0 ;
77852: LD_ADDR_OWVAR 20
77856: PUSH
77857: LD_INT 0
77859: ST_TO_ADDR
// uc_nation := 0 ;
77860: LD_ADDR_OWVAR 21
77864: PUSH
77865: LD_INT 0
77867: ST_TO_ADDR
// InitHc ;
77868: CALL_OW 19
// hc_class := class_horse ;
77872: LD_ADDR_OWVAR 28
77876: PUSH
77877: LD_INT 21
77879: ST_TO_ADDR
// hc_gallery :=  ;
77880: LD_ADDR_OWVAR 33
77884: PUSH
77885: LD_STRING 
77887: ST_TO_ADDR
// hc_name :=  ;
77888: LD_ADDR_OWVAR 26
77892: PUSH
77893: LD_STRING 
77895: ST_TO_ADDR
// end ;
77896: LD_VAR 0 1
77900: RET
// export function PrepareMastodont ( ) ; begin
77901: LD_INT 0
77903: PPUSH
// uc_side := 0 ;
77904: LD_ADDR_OWVAR 20
77908: PUSH
77909: LD_INT 0
77911: ST_TO_ADDR
// uc_nation := 0 ;
77912: LD_ADDR_OWVAR 21
77916: PUSH
77917: LD_INT 0
77919: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77920: LD_ADDR_OWVAR 37
77924: PUSH
77925: LD_INT 31
77927: ST_TO_ADDR
// vc_control := control_rider ;
77928: LD_ADDR_OWVAR 38
77932: PUSH
77933: LD_INT 4
77935: ST_TO_ADDR
// end ;
77936: LD_VAR 0 1
77940: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77941: LD_INT 0
77943: PPUSH
77944: PPUSH
77945: PPUSH
// uc_side = 0 ;
77946: LD_ADDR_OWVAR 20
77950: PUSH
77951: LD_INT 0
77953: ST_TO_ADDR
// uc_nation = 0 ;
77954: LD_ADDR_OWVAR 21
77958: PUSH
77959: LD_INT 0
77961: ST_TO_ADDR
// InitHc_All ( ) ;
77962: CALL_OW 584
// InitVc ;
77966: CALL_OW 20
// if mastodonts then
77970: LD_VAR 0 6
77974: IFFALSE 78041
// for i = 1 to mastodonts do
77976: LD_ADDR_VAR 0 11
77980: PUSH
77981: DOUBLE
77982: LD_INT 1
77984: DEC
77985: ST_TO_ADDR
77986: LD_VAR 0 6
77990: PUSH
77991: FOR_TO
77992: IFFALSE 78039
// begin vc_chassis := 31 ;
77994: LD_ADDR_OWVAR 37
77998: PUSH
77999: LD_INT 31
78001: ST_TO_ADDR
// vc_control := control_rider ;
78002: LD_ADDR_OWVAR 38
78006: PUSH
78007: LD_INT 4
78009: ST_TO_ADDR
// animal := CreateVehicle ;
78010: LD_ADDR_VAR 0 12
78014: PUSH
78015: CALL_OW 45
78019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78020: LD_VAR 0 12
78024: PPUSH
78025: LD_VAR 0 8
78029: PPUSH
78030: LD_INT 0
78032: PPUSH
78033: CALL 80183 0 3
// end ;
78037: GO 77991
78039: POP
78040: POP
// if horses then
78041: LD_VAR 0 5
78045: IFFALSE 78112
// for i = 1 to horses do
78047: LD_ADDR_VAR 0 11
78051: PUSH
78052: DOUBLE
78053: LD_INT 1
78055: DEC
78056: ST_TO_ADDR
78057: LD_VAR 0 5
78061: PUSH
78062: FOR_TO
78063: IFFALSE 78110
// begin hc_class := 21 ;
78065: LD_ADDR_OWVAR 28
78069: PUSH
78070: LD_INT 21
78072: ST_TO_ADDR
// hc_gallery :=  ;
78073: LD_ADDR_OWVAR 33
78077: PUSH
78078: LD_STRING 
78080: ST_TO_ADDR
// animal := CreateHuman ;
78081: LD_ADDR_VAR 0 12
78085: PUSH
78086: CALL_OW 44
78090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78091: LD_VAR 0 12
78095: PPUSH
78096: LD_VAR 0 8
78100: PPUSH
78101: LD_INT 0
78103: PPUSH
78104: CALL 80183 0 3
// end ;
78108: GO 78062
78110: POP
78111: POP
// if birds then
78112: LD_VAR 0 1
78116: IFFALSE 78183
// for i = 1 to birds do
78118: LD_ADDR_VAR 0 11
78122: PUSH
78123: DOUBLE
78124: LD_INT 1
78126: DEC
78127: ST_TO_ADDR
78128: LD_VAR 0 1
78132: PUSH
78133: FOR_TO
78134: IFFALSE 78181
// begin hc_class := 18 ;
78136: LD_ADDR_OWVAR 28
78140: PUSH
78141: LD_INT 18
78143: ST_TO_ADDR
// hc_gallery =  ;
78144: LD_ADDR_OWVAR 33
78148: PUSH
78149: LD_STRING 
78151: ST_TO_ADDR
// animal := CreateHuman ;
78152: LD_ADDR_VAR 0 12
78156: PUSH
78157: CALL_OW 44
78161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78162: LD_VAR 0 12
78166: PPUSH
78167: LD_VAR 0 8
78171: PPUSH
78172: LD_INT 0
78174: PPUSH
78175: CALL 80183 0 3
// end ;
78179: GO 78133
78181: POP
78182: POP
// if tigers then
78183: LD_VAR 0 2
78187: IFFALSE 78271
// for i = 1 to tigers do
78189: LD_ADDR_VAR 0 11
78193: PUSH
78194: DOUBLE
78195: LD_INT 1
78197: DEC
78198: ST_TO_ADDR
78199: LD_VAR 0 2
78203: PUSH
78204: FOR_TO
78205: IFFALSE 78269
// begin hc_class = class_tiger ;
78207: LD_ADDR_OWVAR 28
78211: PUSH
78212: LD_INT 14
78214: ST_TO_ADDR
// hc_gallery =  ;
78215: LD_ADDR_OWVAR 33
78219: PUSH
78220: LD_STRING 
78222: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78223: LD_ADDR_OWVAR 35
78227: PUSH
78228: LD_INT 7
78230: NEG
78231: PPUSH
78232: LD_INT 7
78234: PPUSH
78235: CALL_OW 12
78239: ST_TO_ADDR
// animal := CreateHuman ;
78240: LD_ADDR_VAR 0 12
78244: PUSH
78245: CALL_OW 44
78249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78250: LD_VAR 0 12
78254: PPUSH
78255: LD_VAR 0 8
78259: PPUSH
78260: LD_INT 0
78262: PPUSH
78263: CALL 80183 0 3
// end ;
78267: GO 78204
78269: POP
78270: POP
// if apemans then
78271: LD_VAR 0 3
78275: IFFALSE 78398
// for i = 1 to apemans do
78277: LD_ADDR_VAR 0 11
78281: PUSH
78282: DOUBLE
78283: LD_INT 1
78285: DEC
78286: ST_TO_ADDR
78287: LD_VAR 0 3
78291: PUSH
78292: FOR_TO
78293: IFFALSE 78396
// begin hc_class = class_apeman ;
78295: LD_ADDR_OWVAR 28
78299: PUSH
78300: LD_INT 12
78302: ST_TO_ADDR
// hc_gallery =  ;
78303: LD_ADDR_OWVAR 33
78307: PUSH
78308: LD_STRING 
78310: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78311: LD_ADDR_OWVAR 35
78315: PUSH
78316: LD_INT 2
78318: NEG
78319: PPUSH
78320: LD_INT 2
78322: PPUSH
78323: CALL_OW 12
78327: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78328: LD_ADDR_OWVAR 31
78332: PUSH
78333: LD_INT 1
78335: PPUSH
78336: LD_INT 3
78338: PPUSH
78339: CALL_OW 12
78343: PUSH
78344: LD_INT 1
78346: PPUSH
78347: LD_INT 3
78349: PPUSH
78350: CALL_OW 12
78354: PUSH
78355: LD_INT 0
78357: PUSH
78358: LD_INT 0
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: LIST
78365: LIST
78366: ST_TO_ADDR
// animal := CreateHuman ;
78367: LD_ADDR_VAR 0 12
78371: PUSH
78372: CALL_OW 44
78376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78377: LD_VAR 0 12
78381: PPUSH
78382: LD_VAR 0 8
78386: PPUSH
78387: LD_INT 0
78389: PPUSH
78390: CALL 80183 0 3
// end ;
78394: GO 78292
78396: POP
78397: POP
// if enchidnas then
78398: LD_VAR 0 4
78402: IFFALSE 78469
// for i = 1 to enchidnas do
78404: LD_ADDR_VAR 0 11
78408: PUSH
78409: DOUBLE
78410: LD_INT 1
78412: DEC
78413: ST_TO_ADDR
78414: LD_VAR 0 4
78418: PUSH
78419: FOR_TO
78420: IFFALSE 78467
// begin hc_class = 13 ;
78422: LD_ADDR_OWVAR 28
78426: PUSH
78427: LD_INT 13
78429: ST_TO_ADDR
// hc_gallery =  ;
78430: LD_ADDR_OWVAR 33
78434: PUSH
78435: LD_STRING 
78437: ST_TO_ADDR
// animal := CreateHuman ;
78438: LD_ADDR_VAR 0 12
78442: PUSH
78443: CALL_OW 44
78447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78448: LD_VAR 0 12
78452: PPUSH
78453: LD_VAR 0 8
78457: PPUSH
78458: LD_INT 0
78460: PPUSH
78461: CALL 80183 0 3
// end ;
78465: GO 78419
78467: POP
78468: POP
// if fishes then
78469: LD_VAR 0 7
78473: IFFALSE 78540
// for i = 1 to fishes do
78475: LD_ADDR_VAR 0 11
78479: PUSH
78480: DOUBLE
78481: LD_INT 1
78483: DEC
78484: ST_TO_ADDR
78485: LD_VAR 0 7
78489: PUSH
78490: FOR_TO
78491: IFFALSE 78538
// begin hc_class = 20 ;
78493: LD_ADDR_OWVAR 28
78497: PUSH
78498: LD_INT 20
78500: ST_TO_ADDR
// hc_gallery =  ;
78501: LD_ADDR_OWVAR 33
78505: PUSH
78506: LD_STRING 
78508: ST_TO_ADDR
// animal := CreateHuman ;
78509: LD_ADDR_VAR 0 12
78513: PUSH
78514: CALL_OW 44
78518: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78519: LD_VAR 0 12
78523: PPUSH
78524: LD_VAR 0 9
78528: PPUSH
78529: LD_INT 0
78531: PPUSH
78532: CALL 80183 0 3
// end ;
78536: GO 78490
78538: POP
78539: POP
// end ;
78540: LD_VAR 0 10
78544: RET
// export function WantHeal ( sci , unit ) ; begin
78545: LD_INT 0
78547: PPUSH
// if GetTaskList ( sci ) > 0 then
78548: LD_VAR 0 1
78552: PPUSH
78553: CALL_OW 437
78557: PUSH
78558: LD_INT 0
78560: GREATER
78561: IFFALSE 78633
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78563: LD_VAR 0 1
78567: PPUSH
78568: CALL_OW 437
78572: PUSH
78573: LD_INT 1
78575: ARRAY
78576: PUSH
78577: LD_INT 1
78579: ARRAY
78580: PUSH
78581: LD_STRING l
78583: EQUAL
78584: IFFALSE 78611
78586: PUSH
78587: LD_VAR 0 1
78591: PPUSH
78592: CALL_OW 437
78596: PUSH
78597: LD_INT 1
78599: ARRAY
78600: PUSH
78601: LD_INT 4
78603: ARRAY
78604: PUSH
78605: LD_VAR 0 2
78609: EQUAL
78610: AND
78611: IFFALSE 78623
// result := true else
78613: LD_ADDR_VAR 0 3
78617: PUSH
78618: LD_INT 1
78620: ST_TO_ADDR
78621: GO 78631
// result := false ;
78623: LD_ADDR_VAR 0 3
78627: PUSH
78628: LD_INT 0
78630: ST_TO_ADDR
// end else
78631: GO 78641
// result := false ;
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_INT 0
78640: ST_TO_ADDR
// end ;
78641: LD_VAR 0 3
78645: RET
// export function HealTarget ( sci ) ; begin
78646: LD_INT 0
78648: PPUSH
// if not sci then
78649: LD_VAR 0 1
78653: NOT
78654: IFFALSE 78658
// exit ;
78656: GO 78723
// result := 0 ;
78658: LD_ADDR_VAR 0 2
78662: PUSH
78663: LD_INT 0
78665: ST_TO_ADDR
// if GetTaskList ( sci ) then
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 437
78675: IFFALSE 78723
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78677: LD_VAR 0 1
78681: PPUSH
78682: CALL_OW 437
78686: PUSH
78687: LD_INT 1
78689: ARRAY
78690: PUSH
78691: LD_INT 1
78693: ARRAY
78694: PUSH
78695: LD_STRING l
78697: EQUAL
78698: IFFALSE 78723
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78700: LD_ADDR_VAR 0 2
78704: PUSH
78705: LD_VAR 0 1
78709: PPUSH
78710: CALL_OW 437
78714: PUSH
78715: LD_INT 1
78717: ARRAY
78718: PUSH
78719: LD_INT 4
78721: ARRAY
78722: ST_TO_ADDR
// end ;
78723: LD_VAR 0 2
78727: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78728: LD_INT 0
78730: PPUSH
78731: PPUSH
78732: PPUSH
78733: PPUSH
// if not base_units then
78734: LD_VAR 0 1
78738: NOT
78739: IFFALSE 78743
// exit ;
78741: GO 78830
// result := false ;
78743: LD_ADDR_VAR 0 2
78747: PUSH
78748: LD_INT 0
78750: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78751: LD_ADDR_VAR 0 5
78755: PUSH
78756: LD_VAR 0 1
78760: PPUSH
78761: LD_INT 21
78763: PUSH
78764: LD_INT 3
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PPUSH
78771: CALL_OW 72
78775: ST_TO_ADDR
// if not tmp then
78776: LD_VAR 0 5
78780: NOT
78781: IFFALSE 78785
// exit ;
78783: GO 78830
// for i in tmp do
78785: LD_ADDR_VAR 0 3
78789: PUSH
78790: LD_VAR 0 5
78794: PUSH
78795: FOR_IN
78796: IFFALSE 78828
// begin result := EnemyInRange ( i , 22 ) ;
78798: LD_ADDR_VAR 0 2
78802: PUSH
78803: LD_VAR 0 3
78807: PPUSH
78808: LD_INT 22
78810: PPUSH
78811: CALL 76245 0 2
78815: ST_TO_ADDR
// if result then
78816: LD_VAR 0 2
78820: IFFALSE 78826
// exit ;
78822: POP
78823: POP
78824: GO 78830
// end ;
78826: GO 78795
78828: POP
78829: POP
// end ;
78830: LD_VAR 0 2
78834: RET
// export function FilterByTag ( units , tag ) ; begin
78835: LD_INT 0
78837: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78838: LD_ADDR_VAR 0 3
78842: PUSH
78843: LD_VAR 0 1
78847: PPUSH
78848: LD_INT 120
78850: PUSH
78851: LD_VAR 0 2
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PPUSH
78860: CALL_OW 72
78864: ST_TO_ADDR
// end ;
78865: LD_VAR 0 3
78869: RET
// export function IsDriver ( un ) ; begin
78870: LD_INT 0
78872: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78873: LD_ADDR_VAR 0 2
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_INT 55
78885: PUSH
78886: EMPTY
78887: LIST
78888: PPUSH
78889: CALL_OW 69
78893: IN
78894: ST_TO_ADDR
// end ;
78895: LD_VAR 0 2
78899: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78900: LD_INT 0
78902: PPUSH
78903: PPUSH
// list := [ ] ;
78904: LD_ADDR_VAR 0 5
78908: PUSH
78909: EMPTY
78910: ST_TO_ADDR
// case d of 0 :
78911: LD_VAR 0 3
78915: PUSH
78916: LD_INT 0
78918: DOUBLE
78919: EQUAL
78920: IFTRUE 78924
78922: GO 79057
78924: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78925: LD_ADDR_VAR 0 5
78929: PUSH
78930: LD_VAR 0 1
78934: PUSH
78935: LD_INT 4
78937: MINUS
78938: PUSH
78939: LD_VAR 0 2
78943: PUSH
78944: LD_INT 4
78946: MINUS
78947: PUSH
78948: LD_INT 2
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: LD_VAR 0 1
78960: PUSH
78961: LD_INT 3
78963: MINUS
78964: PUSH
78965: LD_VAR 0 2
78969: PUSH
78970: LD_INT 1
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: LIST
78977: PUSH
78978: LD_VAR 0 1
78982: PUSH
78983: LD_INT 4
78985: PLUS
78986: PUSH
78987: LD_VAR 0 2
78991: PUSH
78992: LD_INT 4
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: LIST
78999: PUSH
79000: LD_VAR 0 1
79004: PUSH
79005: LD_INT 3
79007: PLUS
79008: PUSH
79009: LD_VAR 0 2
79013: PUSH
79014: LD_INT 3
79016: PLUS
79017: PUSH
79018: LD_INT 5
79020: PUSH
79021: EMPTY
79022: LIST
79023: LIST
79024: LIST
79025: PUSH
79026: LD_VAR 0 1
79030: PUSH
79031: LD_VAR 0 2
79035: PUSH
79036: LD_INT 4
79038: PLUS
79039: PUSH
79040: LD_INT 0
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: ST_TO_ADDR
// end ; 1 :
79055: GO 79755
79057: LD_INT 1
79059: DOUBLE
79060: EQUAL
79061: IFTRUE 79065
79063: GO 79198
79065: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79066: LD_ADDR_VAR 0 5
79070: PUSH
79071: LD_VAR 0 1
79075: PUSH
79076: LD_VAR 0 2
79080: PUSH
79081: LD_INT 4
79083: MINUS
79084: PUSH
79085: LD_INT 3
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: LIST
79092: PUSH
79093: LD_VAR 0 1
79097: PUSH
79098: LD_INT 3
79100: MINUS
79101: PUSH
79102: LD_VAR 0 2
79106: PUSH
79107: LD_INT 3
79109: MINUS
79110: PUSH
79111: LD_INT 2
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: LIST
79118: PUSH
79119: LD_VAR 0 1
79123: PUSH
79124: LD_INT 4
79126: MINUS
79127: PUSH
79128: LD_VAR 0 2
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: LIST
79140: PUSH
79141: LD_VAR 0 1
79145: PUSH
79146: LD_VAR 0 2
79150: PUSH
79151: LD_INT 3
79153: PLUS
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: LIST
79162: PUSH
79163: LD_VAR 0 1
79167: PUSH
79168: LD_INT 4
79170: PLUS
79171: PUSH
79172: LD_VAR 0 2
79176: PUSH
79177: LD_INT 4
79179: PLUS
79180: PUSH
79181: LD_INT 5
79183: PUSH
79184: EMPTY
79185: LIST
79186: LIST
79187: LIST
79188: PUSH
79189: EMPTY
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: ST_TO_ADDR
// end ; 2 :
79196: GO 79755
79198: LD_INT 2
79200: DOUBLE
79201: EQUAL
79202: IFTRUE 79206
79204: GO 79335
79206: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79207: LD_ADDR_VAR 0 5
79211: PUSH
79212: LD_VAR 0 1
79216: PUSH
79217: LD_VAR 0 2
79221: PUSH
79222: LD_INT 3
79224: MINUS
79225: PUSH
79226: LD_INT 3
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: PUSH
79234: LD_VAR 0 1
79238: PUSH
79239: LD_INT 4
79241: PLUS
79242: PUSH
79243: LD_VAR 0 2
79247: PUSH
79248: LD_INT 4
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: LIST
79255: PUSH
79256: LD_VAR 0 1
79260: PUSH
79261: LD_VAR 0 2
79265: PUSH
79266: LD_INT 4
79268: PLUS
79269: PUSH
79270: LD_INT 0
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: LIST
79277: PUSH
79278: LD_VAR 0 1
79282: PUSH
79283: LD_INT 3
79285: MINUS
79286: PUSH
79287: LD_VAR 0 2
79291: PUSH
79292: LD_INT 1
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: LIST
79299: PUSH
79300: LD_VAR 0 1
79304: PUSH
79305: LD_INT 4
79307: MINUS
79308: PUSH
79309: LD_VAR 0 2
79313: PUSH
79314: LD_INT 4
79316: MINUS
79317: PUSH
79318: LD_INT 2
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: LIST
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: ST_TO_ADDR
// end ; 3 :
79333: GO 79755
79335: LD_INT 3
79337: DOUBLE
79338: EQUAL
79339: IFTRUE 79343
79341: GO 79476
79343: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79344: LD_ADDR_VAR 0 5
79348: PUSH
79349: LD_VAR 0 1
79353: PUSH
79354: LD_INT 3
79356: PLUS
79357: PUSH
79358: LD_VAR 0 2
79362: PUSH
79363: LD_INT 4
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: LIST
79370: PUSH
79371: LD_VAR 0 1
79375: PUSH
79376: LD_INT 4
79378: PLUS
79379: PUSH
79380: LD_VAR 0 2
79384: PUSH
79385: LD_INT 4
79387: PLUS
79388: PUSH
79389: LD_INT 5
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: LIST
79396: PUSH
79397: LD_VAR 0 1
79401: PUSH
79402: LD_INT 4
79404: MINUS
79405: PUSH
79406: LD_VAR 0 2
79410: PUSH
79411: LD_INT 1
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: LIST
79418: PUSH
79419: LD_VAR 0 1
79423: PUSH
79424: LD_VAR 0 2
79428: PUSH
79429: LD_INT 4
79431: MINUS
79432: PUSH
79433: LD_INT 3
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: LIST
79440: PUSH
79441: LD_VAR 0 1
79445: PUSH
79446: LD_INT 3
79448: MINUS
79449: PUSH
79450: LD_VAR 0 2
79454: PUSH
79455: LD_INT 3
79457: MINUS
79458: PUSH
79459: LD_INT 2
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: LIST
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: ST_TO_ADDR
// end ; 4 :
79474: GO 79755
79476: LD_INT 4
79478: DOUBLE
79479: EQUAL
79480: IFTRUE 79484
79482: GO 79617
79484: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79485: LD_ADDR_VAR 0 5
79489: PUSH
79490: LD_VAR 0 1
79494: PUSH
79495: LD_VAR 0 2
79499: PUSH
79500: LD_INT 4
79502: PLUS
79503: PUSH
79504: LD_INT 0
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: LIST
79511: PUSH
79512: LD_VAR 0 1
79516: PUSH
79517: LD_INT 3
79519: PLUS
79520: PUSH
79521: LD_VAR 0 2
79525: PUSH
79526: LD_INT 3
79528: PLUS
79529: PUSH
79530: LD_INT 5
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: LIST
79537: PUSH
79538: LD_VAR 0 1
79542: PUSH
79543: LD_INT 4
79545: PLUS
79546: PUSH
79547: LD_VAR 0 2
79551: PUSH
79552: LD_INT 4
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: LIST
79559: PUSH
79560: LD_VAR 0 1
79564: PUSH
79565: LD_VAR 0 2
79569: PUSH
79570: LD_INT 3
79572: MINUS
79573: PUSH
79574: LD_INT 3
79576: PUSH
79577: EMPTY
79578: LIST
79579: LIST
79580: LIST
79581: PUSH
79582: LD_VAR 0 1
79586: PUSH
79587: LD_INT 4
79589: MINUS
79590: PUSH
79591: LD_VAR 0 2
79595: PUSH
79596: LD_INT 4
79598: MINUS
79599: PUSH
79600: LD_INT 2
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: LIST
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: LIST
79614: ST_TO_ADDR
// end ; 5 :
79615: GO 79755
79617: LD_INT 5
79619: DOUBLE
79620: EQUAL
79621: IFTRUE 79625
79623: GO 79754
79625: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79626: LD_ADDR_VAR 0 5
79630: PUSH
79631: LD_VAR 0 1
79635: PUSH
79636: LD_INT 4
79638: MINUS
79639: PUSH
79640: LD_VAR 0 2
79644: PUSH
79645: LD_INT 1
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: LIST
79652: PUSH
79653: LD_VAR 0 1
79657: PUSH
79658: LD_VAR 0 2
79662: PUSH
79663: LD_INT 4
79665: MINUS
79666: PUSH
79667: LD_INT 3
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: LIST
79674: PUSH
79675: LD_VAR 0 1
79679: PUSH
79680: LD_INT 4
79682: PLUS
79683: PUSH
79684: LD_VAR 0 2
79688: PUSH
79689: LD_INT 4
79691: PLUS
79692: PUSH
79693: LD_INT 5
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: LIST
79700: PUSH
79701: LD_VAR 0 1
79705: PUSH
79706: LD_INT 3
79708: PLUS
79709: PUSH
79710: LD_VAR 0 2
79714: PUSH
79715: LD_INT 4
79717: PUSH
79718: EMPTY
79719: LIST
79720: LIST
79721: LIST
79722: PUSH
79723: LD_VAR 0 1
79727: PUSH
79728: LD_VAR 0 2
79732: PUSH
79733: LD_INT 3
79735: PLUS
79736: PUSH
79737: LD_INT 0
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: LIST
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: ST_TO_ADDR
// end ; end ;
79752: GO 79755
79754: POP
// result := list ;
79755: LD_ADDR_VAR 0 4
79759: PUSH
79760: LD_VAR 0 5
79764: ST_TO_ADDR
// end ;
79765: LD_VAR 0 4
79769: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79770: LD_INT 0
79772: PPUSH
79773: PPUSH
79774: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79775: LD_VAR 0 1
79779: NOT
79780: IFTRUE 79808
79782: PUSH
79783: LD_VAR 0 2
79787: PUSH
79788: LD_INT 1
79790: PUSH
79791: LD_INT 2
79793: PUSH
79794: LD_INT 3
79796: PUSH
79797: LD_INT 4
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: LIST
79804: LIST
79805: IN
79806: NOT
79807: OR
79808: IFFALSE 79812
// exit ;
79810: GO 79895
// tmp := [ ] ;
79812: LD_ADDR_VAR 0 5
79816: PUSH
79817: EMPTY
79818: ST_TO_ADDR
// for i in units do
79819: LD_ADDR_VAR 0 4
79823: PUSH
79824: LD_VAR 0 1
79828: PUSH
79829: FOR_IN
79830: IFFALSE 79864
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79832: LD_ADDR_VAR 0 5
79836: PUSH
79837: LD_VAR 0 5
79841: PPUSH
79842: LD_VAR 0 4
79846: PPUSH
79847: LD_VAR 0 2
79851: PPUSH
79852: CALL_OW 259
79856: PPUSH
79857: CALL 81290 0 2
79861: ST_TO_ADDR
79862: GO 79829
79864: POP
79865: POP
// if not tmp then
79866: LD_VAR 0 5
79870: NOT
79871: IFFALSE 79875
// exit ;
79873: GO 79895
// result := SortListByListDesc ( units , tmp ) ;
79875: LD_ADDR_VAR 0 3
79879: PUSH
79880: LD_VAR 0 1
79884: PPUSH
79885: LD_VAR 0 5
79889: PPUSH
79890: CALL_OW 77
79894: ST_TO_ADDR
// end ;
79895: LD_VAR 0 3
79899: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79900: LD_INT 0
79902: PPUSH
79903: PPUSH
79904: PPUSH
// result := false ;
79905: LD_ADDR_VAR 0 3
79909: PUSH
79910: LD_INT 0
79912: ST_TO_ADDR
// if not building then
79913: LD_VAR 0 2
79917: NOT
79918: IFFALSE 79922
// exit ;
79920: GO 80066
// x := GetX ( building ) ;
79922: LD_ADDR_VAR 0 4
79926: PUSH
79927: LD_VAR 0 2
79931: PPUSH
79932: CALL_OW 250
79936: ST_TO_ADDR
// y := GetY ( building ) ;
79937: LD_ADDR_VAR 0 5
79941: PUSH
79942: LD_VAR 0 2
79946: PPUSH
79947: CALL_OW 251
79951: ST_TO_ADDR
// if not x or not y then
79952: LD_VAR 0 4
79956: NOT
79957: IFTRUE 79966
79959: PUSH
79960: LD_VAR 0 5
79964: NOT
79965: OR
79966: IFFALSE 79970
// exit ;
79968: GO 80066
// if GetTaskList ( unit ) then
79970: LD_VAR 0 1
79974: PPUSH
79975: CALL_OW 437
79979: IFFALSE 80066
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79981: LD_STRING e
79983: PUSH
79984: LD_VAR 0 1
79988: PPUSH
79989: CALL_OW 437
79993: PUSH
79994: LD_INT 1
79996: ARRAY
79997: PUSH
79998: LD_INT 1
80000: ARRAY
80001: EQUAL
80002: IFFALSE 80029
80004: PUSH
80005: LD_VAR 0 4
80009: PUSH
80010: LD_VAR 0 1
80014: PPUSH
80015: CALL_OW 437
80019: PUSH
80020: LD_INT 1
80022: ARRAY
80023: PUSH
80024: LD_INT 2
80026: ARRAY
80027: EQUAL
80028: AND
80029: IFFALSE 80056
80031: PUSH
80032: LD_VAR 0 5
80036: PUSH
80037: LD_VAR 0 1
80041: PPUSH
80042: CALL_OW 437
80046: PUSH
80047: LD_INT 1
80049: ARRAY
80050: PUSH
80051: LD_INT 3
80053: ARRAY
80054: EQUAL
80055: AND
80056: IFFALSE 80066
// result := true end ;
80058: LD_ADDR_VAR 0 3
80062: PUSH
80063: LD_INT 1
80065: ST_TO_ADDR
// end ;
80066: LD_VAR 0 3
80070: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80071: LD_INT 0
80073: PPUSH
// result := false ;
80074: LD_ADDR_VAR 0 4
80078: PUSH
80079: LD_INT 0
80081: ST_TO_ADDR
// if GetTaskList ( unit ) then
80082: LD_VAR 0 1
80086: PPUSH
80087: CALL_OW 437
80091: IFFALSE 80178
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80093: LD_STRING M
80095: PUSH
80096: LD_VAR 0 1
80100: PPUSH
80101: CALL_OW 437
80105: PUSH
80106: LD_INT 1
80108: ARRAY
80109: PUSH
80110: LD_INT 1
80112: ARRAY
80113: EQUAL
80114: IFFALSE 80141
80116: PUSH
80117: LD_VAR 0 2
80121: PUSH
80122: LD_VAR 0 1
80126: PPUSH
80127: CALL_OW 437
80131: PUSH
80132: LD_INT 1
80134: ARRAY
80135: PUSH
80136: LD_INT 2
80138: ARRAY
80139: EQUAL
80140: AND
80141: IFFALSE 80168
80143: PUSH
80144: LD_VAR 0 3
80148: PUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: CALL_OW 437
80158: PUSH
80159: LD_INT 1
80161: ARRAY
80162: PUSH
80163: LD_INT 3
80165: ARRAY
80166: EQUAL
80167: AND
80168: IFFALSE 80178
// result := true ;
80170: LD_ADDR_VAR 0 4
80174: PUSH
80175: LD_INT 1
80177: ST_TO_ADDR
// end ; end ;
80178: LD_VAR 0 4
80182: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80183: LD_INT 0
80185: PPUSH
80186: PPUSH
80187: PPUSH
80188: PPUSH
// if not unit or not area then
80189: LD_VAR 0 1
80193: NOT
80194: IFTRUE 80203
80196: PUSH
80197: LD_VAR 0 2
80201: NOT
80202: OR
80203: IFFALSE 80207
// exit ;
80205: GO 80383
// tmp := AreaToList ( area , i ) ;
80207: LD_ADDR_VAR 0 6
80211: PUSH
80212: LD_VAR 0 2
80216: PPUSH
80217: LD_VAR 0 5
80221: PPUSH
80222: CALL_OW 517
80226: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80227: LD_ADDR_VAR 0 5
80231: PUSH
80232: DOUBLE
80233: LD_INT 1
80235: DEC
80236: ST_TO_ADDR
80237: LD_VAR 0 6
80241: PUSH
80242: LD_INT 1
80244: ARRAY
80245: PUSH
80246: FOR_TO
80247: IFFALSE 80381
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80249: LD_ADDR_VAR 0 7
80253: PUSH
80254: LD_VAR 0 6
80258: PUSH
80259: LD_INT 1
80261: ARRAY
80262: PUSH
80263: LD_VAR 0 5
80267: ARRAY
80268: PUSH
80269: LD_VAR 0 6
80273: PUSH
80274: LD_INT 2
80276: ARRAY
80277: PUSH
80278: LD_VAR 0 5
80282: ARRAY
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80288: LD_INT 92
80290: PUSH
80291: LD_VAR 0 7
80295: PUSH
80296: LD_INT 1
80298: ARRAY
80299: PUSH
80300: LD_VAR 0 7
80304: PUSH
80305: LD_INT 2
80307: ARRAY
80308: PUSH
80309: LD_INT 2
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: PPUSH
80318: CALL_OW 69
80322: PUSH
80323: LD_INT 0
80325: EQUAL
80326: IFFALSE 80379
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80328: LD_VAR 0 1
80332: PPUSH
80333: LD_VAR 0 7
80337: PUSH
80338: LD_INT 1
80340: ARRAY
80341: PPUSH
80342: LD_VAR 0 7
80346: PUSH
80347: LD_INT 2
80349: ARRAY
80350: PPUSH
80351: LD_VAR 0 3
80355: PPUSH
80356: CALL_OW 48
// result := IsPlaced ( unit ) ;
80360: LD_ADDR_VAR 0 4
80364: PUSH
80365: LD_VAR 0 1
80369: PPUSH
80370: CALL_OW 305
80374: ST_TO_ADDR
// exit ;
80375: POP
80376: POP
80377: GO 80383
// end ; end ;
80379: GO 80246
80381: POP
80382: POP
// end ;
80383: LD_VAR 0 4
80387: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80388: LD_INT 0
80390: PPUSH
80391: PPUSH
80392: PPUSH
// if not side or side > 8 then
80393: LD_VAR 0 1
80397: NOT
80398: IFTRUE 80410
80400: PUSH
80401: LD_VAR 0 1
80405: PUSH
80406: LD_INT 8
80408: GREATER
80409: OR
80410: IFFALSE 80414
// exit ;
80412: GO 80601
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80414: LD_ADDR_VAR 0 4
80418: PUSH
80419: LD_INT 22
80421: PUSH
80422: LD_VAR 0 1
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 21
80433: PUSH
80434: LD_INT 3
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PPUSH
80445: CALL_OW 69
80449: ST_TO_ADDR
// if not tmp then
80450: LD_VAR 0 4
80454: NOT
80455: IFFALSE 80459
// exit ;
80457: GO 80601
// enable_addtolog := true ;
80459: LD_ADDR_OWVAR 81
80463: PUSH
80464: LD_INT 1
80466: ST_TO_ADDR
// AddToLog ( [ ) ;
80467: LD_STRING [
80469: PPUSH
80470: CALL_OW 561
// for i in tmp do
80474: LD_ADDR_VAR 0 3
80478: PUSH
80479: LD_VAR 0 4
80483: PUSH
80484: FOR_IN
80485: IFFALSE 80592
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80487: LD_STRING [
80489: PUSH
80490: LD_VAR 0 3
80494: PPUSH
80495: CALL_OW 266
80499: STR
80500: PUSH
80501: LD_STRING , 
80503: STR
80504: PUSH
80505: LD_VAR 0 3
80509: PPUSH
80510: CALL_OW 250
80514: STR
80515: PUSH
80516: LD_STRING , 
80518: STR
80519: PUSH
80520: LD_VAR 0 3
80524: PPUSH
80525: CALL_OW 251
80529: STR
80530: PUSH
80531: LD_STRING , 
80533: STR
80534: PUSH
80535: LD_VAR 0 3
80539: PPUSH
80540: CALL_OW 254
80544: STR
80545: PUSH
80546: LD_STRING , 
80548: STR
80549: PUSH
80550: LD_VAR 0 3
80554: PPUSH
80555: LD_INT 1
80557: PPUSH
80558: CALL_OW 268
80562: STR
80563: PUSH
80564: LD_STRING , 
80566: STR
80567: PUSH
80568: LD_VAR 0 3
80572: PPUSH
80573: LD_INT 2
80575: PPUSH
80576: CALL_OW 268
80580: STR
80581: PUSH
80582: LD_STRING ],
80584: STR
80585: PPUSH
80586: CALL_OW 561
// end ;
80590: GO 80484
80592: POP
80593: POP
// AddToLog ( ]; ) ;
80594: LD_STRING ];
80596: PPUSH
80597: CALL_OW 561
// end ;
80601: LD_VAR 0 2
80605: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
// if not area or not rate or not max then
80613: LD_VAR 0 1
80617: NOT
80618: IFTRUE 80627
80620: PUSH
80621: LD_VAR 0 2
80625: NOT
80626: OR
80627: IFTRUE 80636
80629: PUSH
80630: LD_VAR 0 4
80634: NOT
80635: OR
80636: IFFALSE 80640
// exit ;
80638: GO 80829
// while 1 do
80640: LD_INT 1
80642: IFFALSE 80829
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80644: LD_ADDR_VAR 0 9
80648: PUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: LD_INT 1
80656: PPUSH
80657: CALL_OW 287
80661: PUSH
80662: LD_INT 10
80664: MUL
80665: ST_TO_ADDR
// r := rate / 10 ;
80666: LD_ADDR_VAR 0 7
80670: PUSH
80671: LD_VAR 0 2
80675: PUSH
80676: LD_INT 10
80678: DIVREAL
80679: ST_TO_ADDR
// time := 1 1$00 ;
80680: LD_ADDR_VAR 0 8
80684: PUSH
80685: LD_INT 2100
80687: ST_TO_ADDR
// if amount < min then
80688: LD_VAR 0 9
80692: PUSH
80693: LD_VAR 0 3
80697: LESS
80698: IFFALSE 80716
// r := r * 2 else
80700: LD_ADDR_VAR 0 7
80704: PUSH
80705: LD_VAR 0 7
80709: PUSH
80710: LD_INT 2
80712: MUL
80713: ST_TO_ADDR
80714: GO 80742
// if amount > max then
80716: LD_VAR 0 9
80720: PUSH
80721: LD_VAR 0 4
80725: GREATER
80726: IFFALSE 80742
// r := r / 2 ;
80728: LD_ADDR_VAR 0 7
80732: PUSH
80733: LD_VAR 0 7
80737: PUSH
80738: LD_INT 2
80740: DIVREAL
80741: ST_TO_ADDR
// time := time / r ;
80742: LD_ADDR_VAR 0 8
80746: PUSH
80747: LD_VAR 0 8
80751: PUSH
80752: LD_VAR 0 7
80756: DIVREAL
80757: ST_TO_ADDR
// if time < 0 then
80758: LD_VAR 0 8
80762: PUSH
80763: LD_INT 0
80765: LESS
80766: IFFALSE 80783
// time := time * - 1 ;
80768: LD_ADDR_VAR 0 8
80772: PUSH
80773: LD_VAR 0 8
80777: PUSH
80778: LD_INT 1
80780: NEG
80781: MUL
80782: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80783: LD_VAR 0 8
80787: PUSH
80788: LD_INT 35
80790: PPUSH
80791: LD_INT 875
80793: PPUSH
80794: CALL_OW 12
80798: PLUS
80799: PPUSH
80800: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80804: LD_INT 1
80806: PPUSH
80807: LD_INT 5
80809: PPUSH
80810: CALL_OW 12
80814: PPUSH
80815: LD_VAR 0 1
80819: PPUSH
80820: LD_INT 1
80822: PPUSH
80823: CALL_OW 55
// end ;
80827: GO 80640
// end ;
80829: LD_VAR 0 5
80833: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80834: LD_INT 0
80836: PPUSH
80837: PPUSH
80838: PPUSH
80839: PPUSH
80840: PPUSH
80841: PPUSH
80842: PPUSH
80843: PPUSH
// if not turrets or not factories then
80844: LD_VAR 0 1
80848: NOT
80849: IFTRUE 80858
80851: PUSH
80852: LD_VAR 0 2
80856: NOT
80857: OR
80858: IFFALSE 80862
// exit ;
80860: GO 81169
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80862: LD_ADDR_VAR 0 10
80866: PUSH
80867: LD_INT 5
80869: PUSH
80870: LD_INT 6
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 2
80879: PUSH
80880: LD_INT 4
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 3
80889: PUSH
80890: LD_INT 5
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 24
80904: PUSH
80905: LD_INT 25
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 23
80914: PUSH
80915: LD_INT 27
80917: PUSH
80918: EMPTY
80919: LIST
80920: LIST
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: PUSH
80926: LD_INT 42
80928: PUSH
80929: LD_INT 43
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PUSH
80936: LD_INT 44
80938: PUSH
80939: LD_INT 46
80941: PUSH
80942: EMPTY
80943: LIST
80944: LIST
80945: PUSH
80946: LD_INT 45
80948: PUSH
80949: LD_INT 47
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: LIST
80960: PUSH
80961: EMPTY
80962: LIST
80963: LIST
80964: LIST
80965: ST_TO_ADDR
// result := [ ] ;
80966: LD_ADDR_VAR 0 3
80970: PUSH
80971: EMPTY
80972: ST_TO_ADDR
// for i in turrets do
80973: LD_ADDR_VAR 0 4
80977: PUSH
80978: LD_VAR 0 1
80982: PUSH
80983: FOR_IN
80984: IFFALSE 81167
// begin nat := GetNation ( i ) ;
80986: LD_ADDR_VAR 0 7
80990: PUSH
80991: LD_VAR 0 4
80995: PPUSH
80996: CALL_OW 248
81000: ST_TO_ADDR
// weapon := 0 ;
81001: LD_ADDR_VAR 0 8
81005: PUSH
81006: LD_INT 0
81008: ST_TO_ADDR
// if not nat then
81009: LD_VAR 0 7
81013: NOT
81014: IFFALSE 81018
// continue ;
81016: GO 80983
// for j in list [ nat ] do
81018: LD_ADDR_VAR 0 5
81022: PUSH
81023: LD_VAR 0 10
81027: PUSH
81028: LD_VAR 0 7
81032: ARRAY
81033: PUSH
81034: FOR_IN
81035: IFFALSE 81076
// if GetBWeapon ( i ) = j [ 1 ] then
81037: LD_VAR 0 4
81041: PPUSH
81042: CALL_OW 269
81046: PUSH
81047: LD_VAR 0 5
81051: PUSH
81052: LD_INT 1
81054: ARRAY
81055: EQUAL
81056: IFFALSE 81074
// begin weapon := j [ 2 ] ;
81058: LD_ADDR_VAR 0 8
81062: PUSH
81063: LD_VAR 0 5
81067: PUSH
81068: LD_INT 2
81070: ARRAY
81071: ST_TO_ADDR
// break ;
81072: GO 81076
// end ;
81074: GO 81034
81076: POP
81077: POP
// if not weapon then
81078: LD_VAR 0 8
81082: NOT
81083: IFFALSE 81087
// continue ;
81085: GO 80983
// for k in factories do
81087: LD_ADDR_VAR 0 6
81091: PUSH
81092: LD_VAR 0 2
81096: PUSH
81097: FOR_IN
81098: IFFALSE 81163
// begin weapons := AvailableWeaponList ( k ) ;
81100: LD_ADDR_VAR 0 9
81104: PUSH
81105: LD_VAR 0 6
81109: PPUSH
81110: CALL_OW 478
81114: ST_TO_ADDR
// if not weapons then
81115: LD_VAR 0 9
81119: NOT
81120: IFFALSE 81124
// continue ;
81122: GO 81097
// if weapon in weapons then
81124: LD_VAR 0 8
81128: PUSH
81129: LD_VAR 0 9
81133: IN
81134: IFFALSE 81161
// begin result := [ i , weapon ] ;
81136: LD_ADDR_VAR 0 3
81140: PUSH
81141: LD_VAR 0 4
81145: PUSH
81146: LD_VAR 0 8
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: ST_TO_ADDR
// exit ;
81155: POP
81156: POP
81157: POP
81158: POP
81159: GO 81169
// end ; end ;
81161: GO 81097
81163: POP
81164: POP
// end ;
81165: GO 80983
81167: POP
81168: POP
// end ;
81169: LD_VAR 0 3
81173: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81174: LD_INT 0
81176: PPUSH
// if not side or side > 8 then
81177: LD_VAR 0 3
81181: NOT
81182: IFTRUE 81194
81184: PUSH
81185: LD_VAR 0 3
81189: PUSH
81190: LD_INT 8
81192: GREATER
81193: OR
81194: IFFALSE 81198
// exit ;
81196: GO 81257
// if not range then
81198: LD_VAR 0 4
81202: NOT
81203: IFFALSE 81214
// range := - 12 ;
81205: LD_ADDR_VAR 0 4
81209: PUSH
81210: LD_INT 12
81212: NEG
81213: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81214: LD_VAR 0 1
81218: PPUSH
81219: LD_VAR 0 2
81223: PPUSH
81224: LD_VAR 0 3
81228: PPUSH
81229: LD_VAR 0 4
81233: PPUSH
81234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81238: LD_VAR 0 1
81242: PPUSH
81243: LD_VAR 0 2
81247: PPUSH
81248: LD_VAR 0 3
81252: PPUSH
81253: CALL_OW 331
// end ;
81257: LD_VAR 0 5
81261: RET
// export function Video ( mode ) ; begin
81262: LD_INT 0
81264: PPUSH
// ingame_video = mode ;
81265: LD_ADDR_OWVAR 52
81269: PUSH
81270: LD_VAR 0 1
81274: ST_TO_ADDR
// interface_hidden = mode ;
81275: LD_ADDR_OWVAR 54
81279: PUSH
81280: LD_VAR 0 1
81284: ST_TO_ADDR
// end ;
81285: LD_VAR 0 2
81289: RET
// export function Join ( array , element ) ; begin
81290: LD_INT 0
81292: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81293: LD_ADDR_VAR 0 3
81297: PUSH
81298: LD_VAR 0 1
81302: PPUSH
81303: LD_VAR 0 1
81307: PUSH
81308: LD_INT 1
81310: PLUS
81311: PPUSH
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL_OW 1
81321: ST_TO_ADDR
// end ;
81322: LD_VAR 0 3
81326: RET
// export function JoinUnion ( array , element ) ; begin
81327: LD_INT 0
81329: PPUSH
// result := array union element ;
81330: LD_ADDR_VAR 0 3
81334: PUSH
81335: LD_VAR 0 1
81339: PUSH
81340: LD_VAR 0 2
81344: UNION
81345: ST_TO_ADDR
// end ;
81346: LD_VAR 0 3
81350: RET
// export function GetBehemoths ( side ) ; begin
81351: LD_INT 0
81353: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81354: LD_ADDR_VAR 0 2
81358: PUSH
81359: LD_INT 22
81361: PUSH
81362: LD_VAR 0 1
81366: PUSH
81367: EMPTY
81368: LIST
81369: LIST
81370: PUSH
81371: LD_INT 31
81373: PUSH
81374: LD_INT 25
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PPUSH
81385: CALL_OW 69
81389: ST_TO_ADDR
// end ;
81390: LD_VAR 0 2
81394: RET
// export function Shuffle ( array ) ; var i , index ; begin
81395: LD_INT 0
81397: PPUSH
81398: PPUSH
81399: PPUSH
// result := [ ] ;
81400: LD_ADDR_VAR 0 2
81404: PUSH
81405: EMPTY
81406: ST_TO_ADDR
// if not array then
81407: LD_VAR 0 1
81411: NOT
81412: IFFALSE 81416
// exit ;
81414: GO 81515
// Randomize ;
81416: CALL_OW 10
// for i = array downto 1 do
81420: LD_ADDR_VAR 0 3
81424: PUSH
81425: DOUBLE
81426: LD_VAR 0 1
81430: INC
81431: ST_TO_ADDR
81432: LD_INT 1
81434: PUSH
81435: FOR_DOWNTO
81436: IFFALSE 81513
// begin index := rand ( 1 , array ) ;
81438: LD_ADDR_VAR 0 4
81442: PUSH
81443: LD_INT 1
81445: PPUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: CALL_OW 12
81455: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81456: LD_ADDR_VAR 0 2
81460: PUSH
81461: LD_VAR 0 2
81465: PPUSH
81466: LD_VAR 0 2
81470: PUSH
81471: LD_INT 1
81473: PLUS
81474: PPUSH
81475: LD_VAR 0 1
81479: PUSH
81480: LD_VAR 0 4
81484: ARRAY
81485: PPUSH
81486: CALL_OW 2
81490: ST_TO_ADDR
// array := Delete ( array , index ) ;
81491: LD_ADDR_VAR 0 1
81495: PUSH
81496: LD_VAR 0 1
81500: PPUSH
81501: LD_VAR 0 4
81505: PPUSH
81506: CALL_OW 3
81510: ST_TO_ADDR
// end ;
81511: GO 81435
81513: POP
81514: POP
// end ;
81515: LD_VAR 0 2
81519: RET
// export function GetBaseMaterials ( base ) ; begin
81520: LD_INT 0
81522: PPUSH
// result := [ 0 , 0 , 0 ] ;
81523: LD_ADDR_VAR 0 2
81527: PUSH
81528: LD_INT 0
81530: PUSH
81531: LD_INT 0
81533: PUSH
81534: LD_INT 0
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: LIST
81541: ST_TO_ADDR
// if not base then
81542: LD_VAR 0 1
81546: NOT
81547: IFFALSE 81551
// exit ;
81549: GO 81600
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 1
81560: PPUSH
81561: LD_INT 1
81563: PPUSH
81564: CALL_OW 275
81568: PUSH
81569: LD_VAR 0 1
81573: PPUSH
81574: LD_INT 2
81576: PPUSH
81577: CALL_OW 275
81581: PUSH
81582: LD_VAR 0 1
81586: PPUSH
81587: LD_INT 3
81589: PPUSH
81590: CALL_OW 275
81594: PUSH
81595: EMPTY
81596: LIST
81597: LIST
81598: LIST
81599: ST_TO_ADDR
// end ;
81600: LD_VAR 0 2
81604: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81605: LD_INT 0
81607: PPUSH
81608: PPUSH
// result := array ;
81609: LD_ADDR_VAR 0 3
81613: PUSH
81614: LD_VAR 0 1
81618: ST_TO_ADDR
// if size >= result then
81619: LD_VAR 0 2
81623: PUSH
81624: LD_VAR 0 3
81628: GREATEREQUAL
81629: IFFALSE 81633
// exit ;
81631: GO 81683
// if size then
81633: LD_VAR 0 2
81637: IFFALSE 81683
// for i := array downto size do
81639: LD_ADDR_VAR 0 4
81643: PUSH
81644: DOUBLE
81645: LD_VAR 0 1
81649: INC
81650: ST_TO_ADDR
81651: LD_VAR 0 2
81655: PUSH
81656: FOR_DOWNTO
81657: IFFALSE 81681
// result := Delete ( result , result ) ;
81659: LD_ADDR_VAR 0 3
81663: PUSH
81664: LD_VAR 0 3
81668: PPUSH
81669: LD_VAR 0 3
81673: PPUSH
81674: CALL_OW 3
81678: ST_TO_ADDR
81679: GO 81656
81681: POP
81682: POP
// end ;
81683: LD_VAR 0 3
81687: RET
// export function ComExit ( unit ) ; var tmp ; begin
81688: LD_INT 0
81690: PPUSH
81691: PPUSH
// if not IsInUnit ( unit ) then
81692: LD_VAR 0 1
81696: PPUSH
81697: CALL_OW 310
81701: NOT
81702: IFFALSE 81706
// exit ;
81704: GO 81766
// tmp := IsInUnit ( unit ) ;
81706: LD_ADDR_VAR 0 3
81710: PUSH
81711: LD_VAR 0 1
81715: PPUSH
81716: CALL_OW 310
81720: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81721: LD_VAR 0 3
81725: PPUSH
81726: CALL_OW 247
81730: PUSH
81731: LD_INT 2
81733: EQUAL
81734: IFFALSE 81747
// ComExitVehicle ( unit ) else
81736: LD_VAR 0 1
81740: PPUSH
81741: CALL_OW 121
81745: GO 81756
// ComExitBuilding ( unit ) ;
81747: LD_VAR 0 1
81751: PPUSH
81752: CALL_OW 122
// result := tmp ;
81756: LD_ADDR_VAR 0 2
81760: PUSH
81761: LD_VAR 0 3
81765: ST_TO_ADDR
// end ;
81766: LD_VAR 0 2
81770: RET
// export function ComExitAll ( units ) ; var i ; begin
81771: LD_INT 0
81773: PPUSH
81774: PPUSH
// if not units then
81775: LD_VAR 0 1
81779: NOT
81780: IFFALSE 81784
// exit ;
81782: GO 81810
// for i in units do
81784: LD_ADDR_VAR 0 3
81788: PUSH
81789: LD_VAR 0 1
81793: PUSH
81794: FOR_IN
81795: IFFALSE 81808
// ComExit ( i ) ;
81797: LD_VAR 0 3
81801: PPUSH
81802: CALL 81688 0 1
81806: GO 81794
81808: POP
81809: POP
// end ;
81810: LD_VAR 0 2
81814: RET
// export function ResetHc ; begin
81815: LD_INT 0
81817: PPUSH
// InitHc ;
81818: CALL_OW 19
// hc_importance := 0 ;
81822: LD_ADDR_OWVAR 32
81826: PUSH
81827: LD_INT 0
81829: ST_TO_ADDR
// end ;
81830: LD_VAR 0 1
81834: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81835: LD_INT 0
81837: PPUSH
81838: PPUSH
81839: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81840: LD_ADDR_VAR 0 6
81844: PUSH
81845: LD_VAR 0 1
81849: PUSH
81850: LD_VAR 0 3
81854: PLUS
81855: PUSH
81856: LD_INT 2
81858: DIV
81859: ST_TO_ADDR
// if _x < 0 then
81860: LD_VAR 0 6
81864: PUSH
81865: LD_INT 0
81867: LESS
81868: IFFALSE 81885
// _x := _x * - 1 ;
81870: LD_ADDR_VAR 0 6
81874: PUSH
81875: LD_VAR 0 6
81879: PUSH
81880: LD_INT 1
81882: NEG
81883: MUL
81884: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81885: LD_ADDR_VAR 0 7
81889: PUSH
81890: LD_VAR 0 2
81894: PUSH
81895: LD_VAR 0 4
81899: PLUS
81900: PUSH
81901: LD_INT 2
81903: DIV
81904: ST_TO_ADDR
// if _y < 0 then
81905: LD_VAR 0 7
81909: PUSH
81910: LD_INT 0
81912: LESS
81913: IFFALSE 81930
// _y := _y * - 1 ;
81915: LD_ADDR_VAR 0 7
81919: PUSH
81920: LD_VAR 0 7
81924: PUSH
81925: LD_INT 1
81927: NEG
81928: MUL
81929: ST_TO_ADDR
// result := [ _x , _y ] ;
81930: LD_ADDR_VAR 0 5
81934: PUSH
81935: LD_VAR 0 6
81939: PUSH
81940: LD_VAR 0 7
81944: PUSH
81945: EMPTY
81946: LIST
81947: LIST
81948: ST_TO_ADDR
// end ;
81949: LD_VAR 0 5
81953: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81954: LD_INT 0
81956: PPUSH
81957: PPUSH
81958: PPUSH
81959: PPUSH
// task := GetTaskList ( unit ) ;
81960: LD_ADDR_VAR 0 7
81964: PUSH
81965: LD_VAR 0 1
81969: PPUSH
81970: CALL_OW 437
81974: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81975: LD_VAR 0 7
81979: NOT
81980: IFFALSE 81999
81982: PUSH
81983: LD_VAR 0 1
81987: PPUSH
81988: LD_VAR 0 2
81992: PPUSH
81993: CALL_OW 308
81997: NOT
81998: AND
81999: IFFALSE 82003
// exit ;
82001: GO 82121
// if IsInArea ( unit , area ) then
82003: LD_VAR 0 1
82007: PPUSH
82008: LD_VAR 0 2
82012: PPUSH
82013: CALL_OW 308
82017: IFFALSE 82035
// begin ComMoveToArea ( unit , goAway ) ;
82019: LD_VAR 0 1
82023: PPUSH
82024: LD_VAR 0 3
82028: PPUSH
82029: CALL_OW 113
// exit ;
82033: GO 82121
// end ; if task [ 1 ] [ 1 ] <> M then
82035: LD_VAR 0 7
82039: PUSH
82040: LD_INT 1
82042: ARRAY
82043: PUSH
82044: LD_INT 1
82046: ARRAY
82047: PUSH
82048: LD_STRING M
82050: NONEQUAL
82051: IFFALSE 82055
// exit ;
82053: GO 82121
// x := task [ 1 ] [ 2 ] ;
82055: LD_ADDR_VAR 0 5
82059: PUSH
82060: LD_VAR 0 7
82064: PUSH
82065: LD_INT 1
82067: ARRAY
82068: PUSH
82069: LD_INT 2
82071: ARRAY
82072: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82073: LD_ADDR_VAR 0 6
82077: PUSH
82078: LD_VAR 0 7
82082: PUSH
82083: LD_INT 1
82085: ARRAY
82086: PUSH
82087: LD_INT 3
82089: ARRAY
82090: ST_TO_ADDR
// if InArea ( x , y , area ) then
82091: LD_VAR 0 5
82095: PPUSH
82096: LD_VAR 0 6
82100: PPUSH
82101: LD_VAR 0 2
82105: PPUSH
82106: CALL_OW 309
82110: IFFALSE 82121
// ComStop ( unit ) ;
82112: LD_VAR 0 1
82116: PPUSH
82117: CALL_OW 141
// end ;
82121: LD_VAR 0 4
82125: RET
// export function Abs ( value ) ; begin
82126: LD_INT 0
82128: PPUSH
// result := value ;
82129: LD_ADDR_VAR 0 2
82133: PUSH
82134: LD_VAR 0 1
82138: ST_TO_ADDR
// if value < 0 then
82139: LD_VAR 0 1
82143: PUSH
82144: LD_INT 0
82146: LESS
82147: IFFALSE 82164
// result := value * - 1 ;
82149: LD_ADDR_VAR 0 2
82153: PUSH
82154: LD_VAR 0 1
82158: PUSH
82159: LD_INT 1
82161: NEG
82162: MUL
82163: ST_TO_ADDR
// end ;
82164: LD_VAR 0 2
82168: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82169: LD_INT 0
82171: PPUSH
82172: PPUSH
82173: PPUSH
82174: PPUSH
82175: PPUSH
82176: PPUSH
82177: PPUSH
82178: PPUSH
// if not unit or not building then
82179: LD_VAR 0 1
82183: NOT
82184: IFTRUE 82193
82186: PUSH
82187: LD_VAR 0 2
82191: NOT
82192: OR
82193: IFFALSE 82197
// exit ;
82195: GO 82425
// x := GetX ( building ) ;
82197: LD_ADDR_VAR 0 4
82201: PUSH
82202: LD_VAR 0 2
82206: PPUSH
82207: CALL_OW 250
82211: ST_TO_ADDR
// y := GetY ( building ) ;
82212: LD_ADDR_VAR 0 6
82216: PUSH
82217: LD_VAR 0 2
82221: PPUSH
82222: CALL_OW 251
82226: ST_TO_ADDR
// d := GetDir ( building ) ;
82227: LD_ADDR_VAR 0 8
82231: PUSH
82232: LD_VAR 0 2
82236: PPUSH
82237: CALL_OW 254
82241: ST_TO_ADDR
// r := 4 ;
82242: LD_ADDR_VAR 0 9
82246: PUSH
82247: LD_INT 4
82249: ST_TO_ADDR
// for i := 1 to 5 do
82250: LD_ADDR_VAR 0 10
82254: PUSH
82255: DOUBLE
82256: LD_INT 1
82258: DEC
82259: ST_TO_ADDR
82260: LD_INT 5
82262: PUSH
82263: FOR_TO
82264: IFFALSE 82423
// begin _x := ShiftX ( x , d , r + i ) ;
82266: LD_ADDR_VAR 0 5
82270: PUSH
82271: LD_VAR 0 4
82275: PPUSH
82276: LD_VAR 0 8
82280: PPUSH
82281: LD_VAR 0 9
82285: PUSH
82286: LD_VAR 0 10
82290: PLUS
82291: PPUSH
82292: CALL_OW 272
82296: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82297: LD_ADDR_VAR 0 7
82301: PUSH
82302: LD_VAR 0 6
82306: PPUSH
82307: LD_VAR 0 8
82311: PPUSH
82312: LD_VAR 0 9
82316: PUSH
82317: LD_VAR 0 10
82321: PLUS
82322: PPUSH
82323: CALL_OW 273
82327: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82328: LD_VAR 0 5
82332: PPUSH
82333: LD_VAR 0 7
82337: PPUSH
82338: CALL_OW 488
82342: IFFALSE 82377
82344: PUSH
82345: LD_VAR 0 5
82349: PPUSH
82350: LD_VAR 0 7
82354: PPUSH
82355: CALL_OW 428
82359: PPUSH
82360: CALL_OW 247
82364: PUSH
82365: LD_INT 3
82367: PUSH
82368: LD_INT 2
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: IN
82375: NOT
82376: AND
82377: IFFALSE 82421
// begin ComMoveXY ( unit , _x , _y ) ;
82379: LD_VAR 0 1
82383: PPUSH
82384: LD_VAR 0 5
82388: PPUSH
82389: LD_VAR 0 7
82393: PPUSH
82394: CALL_OW 111
// result := [ _x , _y ] ;
82398: LD_ADDR_VAR 0 3
82402: PUSH
82403: LD_VAR 0 5
82407: PUSH
82408: LD_VAR 0 7
82412: PUSH
82413: EMPTY
82414: LIST
82415: LIST
82416: ST_TO_ADDR
// exit ;
82417: POP
82418: POP
82419: GO 82425
// end ; end ;
82421: GO 82263
82423: POP
82424: POP
// end ;
82425: LD_VAR 0 3
82429: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82430: LD_INT 0
82432: PPUSH
82433: PPUSH
82434: PPUSH
// result := 0 ;
82435: LD_ADDR_VAR 0 3
82439: PUSH
82440: LD_INT 0
82442: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82443: LD_VAR 0 1
82447: PUSH
82448: LD_INT 0
82450: LESS
82451: IFTRUE 82463
82453: PUSH
82454: LD_VAR 0 1
82458: PUSH
82459: LD_INT 8
82461: GREATER
82462: OR
82463: IFTRUE 82475
82465: PUSH
82466: LD_VAR 0 2
82470: PUSH
82471: LD_INT 0
82473: LESS
82474: OR
82475: IFTRUE 82487
82477: PUSH
82478: LD_VAR 0 2
82482: PUSH
82483: LD_INT 8
82485: GREATER
82486: OR
82487: IFFALSE 82491
// exit ;
82489: GO 82566
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82491: LD_ADDR_VAR 0 4
82495: PUSH
82496: LD_INT 22
82498: PUSH
82499: LD_VAR 0 2
82503: PUSH
82504: EMPTY
82505: LIST
82506: LIST
82507: PPUSH
82508: CALL_OW 69
82512: PUSH
82513: FOR_IN
82514: IFFALSE 82564
// begin un := UnitShoot ( i ) ;
82516: LD_ADDR_VAR 0 5
82520: PUSH
82521: LD_VAR 0 4
82525: PPUSH
82526: CALL_OW 504
82530: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82531: LD_VAR 0 5
82535: PPUSH
82536: CALL_OW 255
82540: PUSH
82541: LD_VAR 0 1
82545: EQUAL
82546: IFFALSE 82562
// begin result := un ;
82548: LD_ADDR_VAR 0 3
82552: PUSH
82553: LD_VAR 0 5
82557: ST_TO_ADDR
// exit ;
82558: POP
82559: POP
82560: GO 82566
// end ; end ;
82562: GO 82513
82564: POP
82565: POP
// end ;
82566: LD_VAR 0 3
82570: RET
// export function GetCargoBay ( units ) ; begin
82571: LD_INT 0
82573: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82574: LD_ADDR_VAR 0 2
82578: PUSH
82579: LD_VAR 0 1
82583: PPUSH
82584: LD_INT 2
82586: PUSH
82587: LD_INT 34
82589: PUSH
82590: LD_INT 12
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: PUSH
82597: LD_INT 34
82599: PUSH
82600: LD_INT 51
82602: PUSH
82603: EMPTY
82604: LIST
82605: LIST
82606: PUSH
82607: LD_INT 34
82609: PUSH
82610: LD_INT 32
82612: PUSH
82613: EMPTY
82614: LIST
82615: LIST
82616: PUSH
82617: LD_INT 34
82619: PUSH
82620: LD_INT 89
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: EMPTY
82628: LIST
82629: LIST
82630: LIST
82631: LIST
82632: LIST
82633: PPUSH
82634: CALL_OW 72
82638: ST_TO_ADDR
// end ;
82639: LD_VAR 0 2
82643: RET
// export function Negate ( value ) ; begin
82644: LD_INT 0
82646: PPUSH
// result := not value ;
82647: LD_ADDR_VAR 0 2
82651: PUSH
82652: LD_VAR 0 1
82656: NOT
82657: ST_TO_ADDR
// end ;
82658: LD_VAR 0 2
82662: RET
// export function Inc ( value ) ; begin
82663: LD_INT 0
82665: PPUSH
// result := value + 1 ;
82666: LD_ADDR_VAR 0 2
82670: PUSH
82671: LD_VAR 0 1
82675: PUSH
82676: LD_INT 1
82678: PLUS
82679: ST_TO_ADDR
// end ;
82680: LD_VAR 0 2
82684: RET
// export function Dec ( value ) ; begin
82685: LD_INT 0
82687: PPUSH
// result := value - 1 ;
82688: LD_ADDR_VAR 0 2
82692: PUSH
82693: LD_VAR 0 1
82697: PUSH
82698: LD_INT 1
82700: MINUS
82701: ST_TO_ADDR
// end ;
82702: LD_VAR 0 2
82706: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82707: LD_INT 0
82709: PPUSH
82710: PPUSH
82711: PPUSH
82712: PPUSH
82713: PPUSH
82714: PPUSH
82715: PPUSH
82716: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82717: LD_VAR 0 1
82721: PPUSH
82722: LD_VAR 0 2
82726: PPUSH
82727: CALL_OW 488
82731: NOT
82732: IFTRUE 82751
82734: PUSH
82735: LD_VAR 0 3
82739: PPUSH
82740: LD_VAR 0 4
82744: PPUSH
82745: CALL_OW 488
82749: NOT
82750: OR
82751: IFFALSE 82764
// begin result := - 1 ;
82753: LD_ADDR_VAR 0 5
82757: PUSH
82758: LD_INT 1
82760: NEG
82761: ST_TO_ADDR
// exit ;
82762: GO 82999
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82764: LD_ADDR_VAR 0 12
82768: PUSH
82769: LD_VAR 0 1
82773: PPUSH
82774: LD_VAR 0 2
82778: PPUSH
82779: LD_VAR 0 3
82783: PPUSH
82784: LD_VAR 0 4
82788: PPUSH
82789: CALL 81835 0 4
82793: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82794: LD_ADDR_VAR 0 11
82798: PUSH
82799: LD_VAR 0 1
82803: PPUSH
82804: LD_VAR 0 2
82808: PPUSH
82809: LD_VAR 0 12
82813: PUSH
82814: LD_INT 1
82816: ARRAY
82817: PPUSH
82818: LD_VAR 0 12
82822: PUSH
82823: LD_INT 2
82825: ARRAY
82826: PPUSH
82827: CALL_OW 298
82831: ST_TO_ADDR
// distance := 9999 ;
82832: LD_ADDR_VAR 0 10
82836: PUSH
82837: LD_INT 9999
82839: ST_TO_ADDR
// for i := 0 to 5 do
82840: LD_ADDR_VAR 0 6
82844: PUSH
82845: DOUBLE
82846: LD_INT 0
82848: DEC
82849: ST_TO_ADDR
82850: LD_INT 5
82852: PUSH
82853: FOR_TO
82854: IFFALSE 82997
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82856: LD_ADDR_VAR 0 7
82860: PUSH
82861: LD_VAR 0 1
82865: PPUSH
82866: LD_VAR 0 6
82870: PPUSH
82871: LD_VAR 0 11
82875: PPUSH
82876: CALL_OW 272
82880: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82881: LD_ADDR_VAR 0 8
82885: PUSH
82886: LD_VAR 0 2
82890: PPUSH
82891: LD_VAR 0 6
82895: PPUSH
82896: LD_VAR 0 11
82900: PPUSH
82901: CALL_OW 273
82905: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82906: LD_VAR 0 7
82910: PPUSH
82911: LD_VAR 0 8
82915: PPUSH
82916: CALL_OW 488
82920: NOT
82921: IFFALSE 82925
// continue ;
82923: GO 82853
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82925: LD_ADDR_VAR 0 9
82929: PUSH
82930: LD_VAR 0 12
82934: PUSH
82935: LD_INT 1
82937: ARRAY
82938: PPUSH
82939: LD_VAR 0 12
82943: PUSH
82944: LD_INT 2
82946: ARRAY
82947: PPUSH
82948: LD_VAR 0 7
82952: PPUSH
82953: LD_VAR 0 8
82957: PPUSH
82958: CALL_OW 298
82962: ST_TO_ADDR
// if tmp < distance then
82963: LD_VAR 0 9
82967: PUSH
82968: LD_VAR 0 10
82972: LESS
82973: IFFALSE 82995
// begin result := i ;
82975: LD_ADDR_VAR 0 5
82979: PUSH
82980: LD_VAR 0 6
82984: ST_TO_ADDR
// distance := tmp ;
82985: LD_ADDR_VAR 0 10
82989: PUSH
82990: LD_VAR 0 9
82994: ST_TO_ADDR
// end ; end ;
82995: GO 82853
82997: POP
82998: POP
// end ;
82999: LD_VAR 0 5
83003: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83004: LD_INT 0
83006: PPUSH
83007: PPUSH
// if not driver or not IsInUnit ( driver ) then
83008: LD_VAR 0 1
83012: NOT
83013: IFTRUE 83027
83015: PUSH
83016: LD_VAR 0 1
83020: PPUSH
83021: CALL_OW 310
83025: NOT
83026: OR
83027: IFFALSE 83031
// exit ;
83029: GO 83121
// vehicle := IsInUnit ( driver ) ;
83031: LD_ADDR_VAR 0 3
83035: PUSH
83036: LD_VAR 0 1
83040: PPUSH
83041: CALL_OW 310
83045: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83046: LD_VAR 0 1
83050: PPUSH
83051: LD_STRING \
83053: PUSH
83054: LD_INT 0
83056: PUSH
83057: LD_INT 0
83059: PUSH
83060: LD_INT 0
83062: PUSH
83063: LD_INT 0
83065: PUSH
83066: LD_INT 0
83068: PUSH
83069: LD_INT 0
83071: PUSH
83072: EMPTY
83073: LIST
83074: LIST
83075: LIST
83076: LIST
83077: LIST
83078: LIST
83079: LIST
83080: PUSH
83081: LD_STRING E
83083: PUSH
83084: LD_INT 0
83086: PUSH
83087: LD_INT 0
83089: PUSH
83090: LD_VAR 0 3
83094: PUSH
83095: LD_INT 0
83097: PUSH
83098: LD_INT 0
83100: PUSH
83101: LD_INT 0
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: LIST
83108: LIST
83109: LIST
83110: LIST
83111: LIST
83112: PUSH
83113: EMPTY
83114: LIST
83115: LIST
83116: PPUSH
83117: CALL_OW 446
// end ;
83121: LD_VAR 0 2
83125: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83126: LD_INT 0
83128: PPUSH
83129: PPUSH
// if not driver or not IsInUnit ( driver ) then
83130: LD_VAR 0 1
83134: NOT
83135: IFTRUE 83149
83137: PUSH
83138: LD_VAR 0 1
83142: PPUSH
83143: CALL_OW 310
83147: NOT
83148: OR
83149: IFFALSE 83153
// exit ;
83151: GO 83243
// vehicle := IsInUnit ( driver ) ;
83153: LD_ADDR_VAR 0 3
83157: PUSH
83158: LD_VAR 0 1
83162: PPUSH
83163: CALL_OW 310
83167: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83168: LD_VAR 0 1
83172: PPUSH
83173: LD_STRING \
83175: PUSH
83176: LD_INT 0
83178: PUSH
83179: LD_INT 0
83181: PUSH
83182: LD_INT 0
83184: PUSH
83185: LD_INT 0
83187: PUSH
83188: LD_INT 0
83190: PUSH
83191: LD_INT 0
83193: PUSH
83194: EMPTY
83195: LIST
83196: LIST
83197: LIST
83198: LIST
83199: LIST
83200: LIST
83201: LIST
83202: PUSH
83203: LD_STRING E
83205: PUSH
83206: LD_INT 0
83208: PUSH
83209: LD_INT 0
83211: PUSH
83212: LD_VAR 0 3
83216: PUSH
83217: LD_INT 0
83219: PUSH
83220: LD_INT 0
83222: PUSH
83223: LD_INT 0
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: LIST
83230: LIST
83231: LIST
83232: LIST
83233: LIST
83234: PUSH
83235: EMPTY
83236: LIST
83237: LIST
83238: PPUSH
83239: CALL_OW 447
// end ;
83243: LD_VAR 0 2
83247: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83248: LD_INT 0
83250: PPUSH
83251: PPUSH
83252: PPUSH
// tmp := [ ] ;
83253: LD_ADDR_VAR 0 5
83257: PUSH
83258: EMPTY
83259: ST_TO_ADDR
// for i in units do
83260: LD_ADDR_VAR 0 4
83264: PUSH
83265: LD_VAR 0 1
83269: PUSH
83270: FOR_IN
83271: IFFALSE 83309
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83273: LD_ADDR_VAR 0 5
83277: PUSH
83278: LD_VAR 0 5
83282: PPUSH
83283: LD_VAR 0 5
83287: PUSH
83288: LD_INT 1
83290: PLUS
83291: PPUSH
83292: LD_VAR 0 4
83296: PPUSH
83297: CALL_OW 256
83301: PPUSH
83302: CALL_OW 2
83306: ST_TO_ADDR
83307: GO 83270
83309: POP
83310: POP
// if not tmp then
83311: LD_VAR 0 5
83315: NOT
83316: IFFALSE 83320
// exit ;
83318: GO 83368
// if asc then
83320: LD_VAR 0 2
83324: IFFALSE 83348
// result := SortListByListAsc ( units , tmp ) else
83326: LD_ADDR_VAR 0 3
83330: PUSH
83331: LD_VAR 0 1
83335: PPUSH
83336: LD_VAR 0 5
83340: PPUSH
83341: CALL_OW 76
83345: ST_TO_ADDR
83346: GO 83368
// result := SortListByListDesc ( units , tmp ) ;
83348: LD_ADDR_VAR 0 3
83352: PUSH
83353: LD_VAR 0 1
83357: PPUSH
83358: LD_VAR 0 5
83362: PPUSH
83363: CALL_OW 77
83367: ST_TO_ADDR
// end ;
83368: LD_VAR 0 3
83372: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83373: LD_INT 0
83375: PPUSH
83376: PPUSH
// task := GetTaskList ( mech ) ;
83377: LD_ADDR_VAR 0 4
83381: PUSH
83382: LD_VAR 0 1
83386: PPUSH
83387: CALL_OW 437
83391: ST_TO_ADDR
// if not task then
83392: LD_VAR 0 4
83396: NOT
83397: IFFALSE 83401
// exit ;
83399: GO 83445
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83401: LD_ADDR_VAR 0 3
83405: PUSH
83406: LD_VAR 0 4
83410: PUSH
83411: LD_INT 1
83413: ARRAY
83414: PUSH
83415: LD_INT 1
83417: ARRAY
83418: PUSH
83419: LD_STRING r
83421: EQUAL
83422: IFFALSE 83444
83424: PUSH
83425: LD_VAR 0 4
83429: PUSH
83430: LD_INT 1
83432: ARRAY
83433: PUSH
83434: LD_INT 4
83436: ARRAY
83437: PUSH
83438: LD_VAR 0 2
83442: EQUAL
83443: AND
83444: ST_TO_ADDR
// end ;
83445: LD_VAR 0 3
83449: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83450: LD_INT 0
83452: PPUSH
// SetDir ( unit , d ) ;
83453: LD_VAR 0 1
83457: PPUSH
83458: LD_VAR 0 4
83462: PPUSH
83463: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83467: LD_ADDR_VAR 0 6
83471: PUSH
83472: LD_VAR 0 1
83476: PPUSH
83477: LD_VAR 0 2
83481: PPUSH
83482: LD_VAR 0 3
83486: PPUSH
83487: LD_VAR 0 5
83491: PPUSH
83492: CALL_OW 48
83496: ST_TO_ADDR
// end ;
83497: LD_VAR 0 6
83501: RET
// export function ToNaturalNumber ( number ) ; begin
83502: LD_INT 0
83504: PPUSH
// result := number div 1 ;
83505: LD_ADDR_VAR 0 2
83509: PUSH
83510: LD_VAR 0 1
83514: PUSH
83515: LD_INT 1
83517: DIV
83518: ST_TO_ADDR
// if number < 0 then
83519: LD_VAR 0 1
83523: PUSH
83524: LD_INT 0
83526: LESS
83527: IFFALSE 83537
// result := 0 ;
83529: LD_ADDR_VAR 0 2
83533: PUSH
83534: LD_INT 0
83536: ST_TO_ADDR
// end ;
83537: LD_VAR 0 2
83541: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
83542: LD_INT 0
83544: PPUSH
83545: PPUSH
83546: PPUSH
// if not buildings then
83547: LD_VAR 0 1
83551: NOT
83552: IFFALSE 83556
// exit ;
83554: GO 83671
// tmp := [ ] ;
83556: LD_ADDR_VAR 0 5
83560: PUSH
83561: EMPTY
83562: ST_TO_ADDR
// for b in buildings do
83563: LD_ADDR_VAR 0 4
83567: PUSH
83568: LD_VAR 0 1
83572: PUSH
83573: FOR_IN
83574: IFFALSE 83612
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83576: LD_ADDR_VAR 0 5
83580: PUSH
83581: LD_VAR 0 5
83585: PPUSH
83586: LD_VAR 0 5
83590: PUSH
83591: LD_INT 1
83593: PLUS
83594: PPUSH
83595: LD_VAR 0 4
83599: PPUSH
83600: CALL_OW 266
83604: PPUSH
83605: CALL_OW 1
83609: ST_TO_ADDR
83610: GO 83573
83612: POP
83613: POP
// if not tmp then
83614: LD_VAR 0 5
83618: NOT
83619: IFFALSE 83623
// exit ;
83621: GO 83671
// if asc then
83623: LD_VAR 0 2
83627: IFFALSE 83651
// result := SortListByListAsc ( buildings , tmp ) else
83629: LD_ADDR_VAR 0 3
83633: PUSH
83634: LD_VAR 0 1
83638: PPUSH
83639: LD_VAR 0 5
83643: PPUSH
83644: CALL_OW 76
83648: ST_TO_ADDR
83649: GO 83671
// result := SortListByListDesc ( buildings , tmp ) ;
83651: LD_ADDR_VAR 0 3
83655: PUSH
83656: LD_VAR 0 1
83660: PPUSH
83661: LD_VAR 0 5
83665: PPUSH
83666: CALL_OW 77
83670: ST_TO_ADDR
// end ;
83671: LD_VAR 0 3
83675: RET
// export function SortByClass ( units , class ) ; var un ; begin
83676: LD_INT 0
83678: PPUSH
83679: PPUSH
// if not units or not class then
83680: LD_VAR 0 1
83684: NOT
83685: IFTRUE 83694
83687: PUSH
83688: LD_VAR 0 2
83692: NOT
83693: OR
83694: IFFALSE 83698
// exit ;
83696: GO 83793
// result := [ ] ;
83698: LD_ADDR_VAR 0 3
83702: PUSH
83703: EMPTY
83704: ST_TO_ADDR
// for un in units do
83705: LD_ADDR_VAR 0 4
83709: PUSH
83710: LD_VAR 0 1
83714: PUSH
83715: FOR_IN
83716: IFFALSE 83791
// if GetClass ( un ) = class then
83718: LD_VAR 0 4
83722: PPUSH
83723: CALL_OW 257
83727: PUSH
83728: LD_VAR 0 2
83732: EQUAL
83733: IFFALSE 83760
// result := Insert ( result , 1 , un ) else
83735: LD_ADDR_VAR 0 3
83739: PUSH
83740: LD_VAR 0 3
83744: PPUSH
83745: LD_INT 1
83747: PPUSH
83748: LD_VAR 0 4
83752: PPUSH
83753: CALL_OW 2
83757: ST_TO_ADDR
83758: GO 83789
// result := Replace ( result , result + 1 , un ) ;
83760: LD_ADDR_VAR 0 3
83764: PUSH
83765: LD_VAR 0 3
83769: PPUSH
83770: LD_VAR 0 3
83774: PUSH
83775: LD_INT 1
83777: PLUS
83778: PPUSH
83779: LD_VAR 0 4
83783: PPUSH
83784: CALL_OW 1
83788: ST_TO_ADDR
83789: GO 83715
83791: POP
83792: POP
// end ;
83793: LD_VAR 0 3
83797: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83798: LD_INT 0
83800: PPUSH
83801: PPUSH
83802: PPUSH
83803: PPUSH
83804: PPUSH
83805: PPUSH
83806: PPUSH
// result := [ ] ;
83807: LD_ADDR_VAR 0 4
83811: PUSH
83812: EMPTY
83813: ST_TO_ADDR
// if x - r < 0 then
83814: LD_VAR 0 1
83818: PUSH
83819: LD_VAR 0 3
83823: MINUS
83824: PUSH
83825: LD_INT 0
83827: LESS
83828: IFFALSE 83840
// min_x := 0 else
83830: LD_ADDR_VAR 0 8
83834: PUSH
83835: LD_INT 0
83837: ST_TO_ADDR
83838: GO 83856
// min_x := x - r ;
83840: LD_ADDR_VAR 0 8
83844: PUSH
83845: LD_VAR 0 1
83849: PUSH
83850: LD_VAR 0 3
83854: MINUS
83855: ST_TO_ADDR
// if y - r < 0 then
83856: LD_VAR 0 2
83860: PUSH
83861: LD_VAR 0 3
83865: MINUS
83866: PUSH
83867: LD_INT 0
83869: LESS
83870: IFFALSE 83882
// min_y := 0 else
83872: LD_ADDR_VAR 0 7
83876: PUSH
83877: LD_INT 0
83879: ST_TO_ADDR
83880: GO 83898
// min_y := y - r ;
83882: LD_ADDR_VAR 0 7
83886: PUSH
83887: LD_VAR 0 2
83891: PUSH
83892: LD_VAR 0 3
83896: MINUS
83897: ST_TO_ADDR
// max_x := x + r ;
83898: LD_ADDR_VAR 0 9
83902: PUSH
83903: LD_VAR 0 1
83907: PUSH
83908: LD_VAR 0 3
83912: PLUS
83913: ST_TO_ADDR
// max_y := y + r ;
83914: LD_ADDR_VAR 0 10
83918: PUSH
83919: LD_VAR 0 2
83923: PUSH
83924: LD_VAR 0 3
83928: PLUS
83929: ST_TO_ADDR
// for _x = min_x to max_x do
83930: LD_ADDR_VAR 0 5
83934: PUSH
83935: DOUBLE
83936: LD_VAR 0 8
83940: DEC
83941: ST_TO_ADDR
83942: LD_VAR 0 9
83946: PUSH
83947: FOR_TO
83948: IFFALSE 84049
// for _y = min_y to max_y do
83950: LD_ADDR_VAR 0 6
83954: PUSH
83955: DOUBLE
83956: LD_VAR 0 7
83960: DEC
83961: ST_TO_ADDR
83962: LD_VAR 0 10
83966: PUSH
83967: FOR_TO
83968: IFFALSE 84045
// begin if not ValidHex ( _x , _y ) then
83970: LD_VAR 0 5
83974: PPUSH
83975: LD_VAR 0 6
83979: PPUSH
83980: CALL_OW 488
83984: NOT
83985: IFFALSE 83989
// continue ;
83987: GO 83967
// if GetResourceTypeXY ( _x , _y ) then
83989: LD_VAR 0 5
83993: PPUSH
83994: LD_VAR 0 6
83998: PPUSH
83999: CALL_OW 283
84003: IFFALSE 84043
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84005: LD_ADDR_VAR 0 4
84009: PUSH
84010: LD_VAR 0 4
84014: PPUSH
84015: LD_VAR 0 4
84019: PUSH
84020: LD_INT 1
84022: PLUS
84023: PPUSH
84024: LD_VAR 0 5
84028: PUSH
84029: LD_VAR 0 6
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: PPUSH
84038: CALL_OW 1
84042: ST_TO_ADDR
// end ;
84043: GO 83967
84045: POP
84046: POP
84047: GO 83947
84049: POP
84050: POP
// end ;
84051: LD_VAR 0 4
84055: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84056: LD_INT 0
84058: PPUSH
84059: PPUSH
84060: PPUSH
84061: PPUSH
84062: PPUSH
84063: PPUSH
84064: PPUSH
84065: PPUSH
// if not units then
84066: LD_VAR 0 1
84070: NOT
84071: IFFALSE 84075
// exit ;
84073: GO 84607
// result := UnitFilter ( units , [ f_ok ] ) ;
84075: LD_ADDR_VAR 0 3
84079: PUSH
84080: LD_VAR 0 1
84084: PPUSH
84085: LD_INT 50
84087: PUSH
84088: EMPTY
84089: LIST
84090: PPUSH
84091: CALL_OW 72
84095: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84096: LD_ADDR_VAR 0 8
84100: PUSH
84101: LD_VAR 0 1
84105: PUSH
84106: LD_INT 1
84108: ARRAY
84109: PPUSH
84110: CALL_OW 255
84114: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84115: LD_ADDR_VAR 0 10
84119: PUSH
84120: LD_INT 29
84122: PUSH
84123: LD_INT 91
84125: PUSH
84126: LD_INT 49
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: LIST
84133: ST_TO_ADDR
// if not result then
84134: LD_VAR 0 3
84138: NOT
84139: IFFALSE 84143
// exit ;
84141: GO 84607
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84143: LD_ADDR_VAR 0 5
84147: PUSH
84148: LD_INT 81
84150: PUSH
84151: LD_VAR 0 8
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: PPUSH
84160: CALL_OW 69
84164: ST_TO_ADDR
// for i in result do
84165: LD_ADDR_VAR 0 4
84169: PUSH
84170: LD_VAR 0 3
84174: PUSH
84175: FOR_IN
84176: IFFALSE 84605
// begin tag := GetTag ( i ) + 1 ;
84178: LD_ADDR_VAR 0 9
84182: PUSH
84183: LD_VAR 0 4
84187: PPUSH
84188: CALL_OW 110
84192: PUSH
84193: LD_INT 1
84195: PLUS
84196: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
84197: LD_ADDR_VAR 0 7
84201: PUSH
84202: LD_VAR 0 4
84206: PPUSH
84207: CALL_OW 250
84211: PPUSH
84212: LD_VAR 0 4
84216: PPUSH
84217: CALL_OW 251
84221: PPUSH
84222: LD_INT 4
84224: PPUSH
84225: CALL 83798 0 3
84229: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
84230: LD_VAR 0 4
84234: PPUSH
84235: CALL_OW 247
84239: PUSH
84240: LD_INT 2
84242: EQUAL
84243: IFFALSE 84255
84245: PUSH
84246: LD_VAR 0 7
84250: PUSH
84251: LD_INT 2
84253: GREATER
84254: AND
84255: IFFALSE 84275
84257: PUSH
84258: LD_VAR 0 4
84262: PPUSH
84263: CALL_OW 264
84267: PUSH
84268: LD_VAR 0 10
84272: IN
84273: NOT
84274: AND
84275: IFFALSE 84314
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84277: LD_VAR 0 4
84281: PPUSH
84282: LD_VAR 0 7
84286: PUSH
84287: LD_INT 1
84289: ARRAY
84290: PUSH
84291: LD_INT 1
84293: ARRAY
84294: PPUSH
84295: LD_VAR 0 7
84299: PUSH
84300: LD_INT 1
84302: ARRAY
84303: PUSH
84304: LD_INT 2
84306: ARRAY
84307: PPUSH
84308: CALL_OW 116
84312: GO 84603
// if path > tag then
84314: LD_VAR 0 2
84318: PUSH
84319: LD_VAR 0 9
84323: GREATER
84324: IFFALSE 84532
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84326: LD_ADDR_VAR 0 6
84330: PUSH
84331: LD_VAR 0 5
84335: PPUSH
84336: LD_INT 91
84338: PUSH
84339: LD_VAR 0 4
84343: PUSH
84344: LD_INT 8
84346: PUSH
84347: EMPTY
84348: LIST
84349: LIST
84350: LIST
84351: PPUSH
84352: CALL_OW 72
84356: ST_TO_ADDR
// if nearEnemy then
84357: LD_VAR 0 6
84361: IFFALSE 84430
// begin if GetWeapon ( i ) = ru_time_lapser then
84363: LD_VAR 0 4
84367: PPUSH
84368: CALL_OW 264
84372: PUSH
84373: LD_INT 49
84375: EQUAL
84376: IFFALSE 84404
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84378: LD_VAR 0 4
84382: PPUSH
84383: LD_VAR 0 6
84387: PPUSH
84388: LD_VAR 0 4
84392: PPUSH
84393: CALL_OW 74
84397: PPUSH
84398: CALL_OW 112
84402: GO 84428
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84404: LD_VAR 0 4
84408: PPUSH
84409: LD_VAR 0 6
84413: PPUSH
84414: LD_VAR 0 4
84418: PPUSH
84419: CALL_OW 74
84423: PPUSH
84424: CALL 85688 0 2
// end else
84428: GO 84530
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84430: LD_VAR 0 4
84434: PPUSH
84435: LD_VAR 0 2
84439: PUSH
84440: LD_VAR 0 9
84444: ARRAY
84445: PUSH
84446: LD_INT 1
84448: ARRAY
84449: PPUSH
84450: LD_VAR 0 2
84454: PUSH
84455: LD_VAR 0 9
84459: ARRAY
84460: PUSH
84461: LD_INT 2
84463: ARRAY
84464: PPUSH
84465: CALL_OW 297
84469: PUSH
84470: LD_INT 6
84472: GREATER
84473: IFFALSE 84516
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84475: LD_VAR 0 4
84479: PPUSH
84480: LD_VAR 0 2
84484: PUSH
84485: LD_VAR 0 9
84489: ARRAY
84490: PUSH
84491: LD_INT 1
84493: ARRAY
84494: PPUSH
84495: LD_VAR 0 2
84499: PUSH
84500: LD_VAR 0 9
84504: ARRAY
84505: PUSH
84506: LD_INT 2
84508: ARRAY
84509: PPUSH
84510: CALL_OW 114
84514: GO 84530
// SetTag ( i , tag ) ;
84516: LD_VAR 0 4
84520: PPUSH
84521: LD_VAR 0 9
84525: PPUSH
84526: CALL_OW 109
// end else
84530: GO 84603
// if enemy then
84532: LD_VAR 0 5
84536: IFFALSE 84603
// begin if GetWeapon ( i ) = ru_time_lapser then
84538: LD_VAR 0 4
84542: PPUSH
84543: CALL_OW 264
84547: PUSH
84548: LD_INT 49
84550: EQUAL
84551: IFFALSE 84579
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84553: LD_VAR 0 4
84557: PPUSH
84558: LD_VAR 0 5
84562: PPUSH
84563: LD_VAR 0 4
84567: PPUSH
84568: CALL_OW 74
84572: PPUSH
84573: CALL_OW 112
84577: GO 84603
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84579: LD_VAR 0 4
84583: PPUSH
84584: LD_VAR 0 5
84588: PPUSH
84589: LD_VAR 0 4
84593: PPUSH
84594: CALL_OW 74
84598: PPUSH
84599: CALL 85688 0 2
// end ; end ;
84603: GO 84175
84605: POP
84606: POP
// end ;
84607: LD_VAR 0 3
84611: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84612: LD_INT 0
84614: PPUSH
84615: PPUSH
84616: PPUSH
// if not unit or IsInUnit ( unit ) then
84617: LD_VAR 0 1
84621: NOT
84622: IFTRUE 84635
84624: PUSH
84625: LD_VAR 0 1
84629: PPUSH
84630: CALL_OW 310
84634: OR
84635: IFFALSE 84639
// exit ;
84637: GO 84730
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84639: LD_ADDR_VAR 0 4
84643: PUSH
84644: LD_VAR 0 1
84648: PPUSH
84649: CALL_OW 250
84653: PPUSH
84654: LD_VAR 0 2
84658: PPUSH
84659: LD_INT 1
84661: PPUSH
84662: CALL_OW 272
84666: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84667: LD_ADDR_VAR 0 5
84671: PUSH
84672: LD_VAR 0 1
84676: PPUSH
84677: CALL_OW 251
84681: PPUSH
84682: LD_VAR 0 2
84686: PPUSH
84687: LD_INT 1
84689: PPUSH
84690: CALL_OW 273
84694: ST_TO_ADDR
// if ValidHex ( x , y ) then
84695: LD_VAR 0 4
84699: PPUSH
84700: LD_VAR 0 5
84704: PPUSH
84705: CALL_OW 488
84709: IFFALSE 84730
// ComTurnXY ( unit , x , y ) ;
84711: LD_VAR 0 1
84715: PPUSH
84716: LD_VAR 0 4
84720: PPUSH
84721: LD_VAR 0 5
84725: PPUSH
84726: CALL_OW 118
// end ;
84730: LD_VAR 0 3
84734: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84735: LD_INT 0
84737: PPUSH
84738: PPUSH
// result := false ;
84739: LD_ADDR_VAR 0 3
84743: PUSH
84744: LD_INT 0
84746: ST_TO_ADDR
// if not units then
84747: LD_VAR 0 2
84751: NOT
84752: IFFALSE 84756
// exit ;
84754: GO 84801
// for i in units do
84756: LD_ADDR_VAR 0 4
84760: PUSH
84761: LD_VAR 0 2
84765: PUSH
84766: FOR_IN
84767: IFFALSE 84799
// if See ( side , i ) then
84769: LD_VAR 0 1
84773: PPUSH
84774: LD_VAR 0 4
84778: PPUSH
84779: CALL_OW 292
84783: IFFALSE 84797
// begin result := true ;
84785: LD_ADDR_VAR 0 3
84789: PUSH
84790: LD_INT 1
84792: ST_TO_ADDR
// exit ;
84793: POP
84794: POP
84795: GO 84801
// end ;
84797: GO 84766
84799: POP
84800: POP
// end ;
84801: LD_VAR 0 3
84805: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84806: LD_INT 0
84808: PPUSH
84809: PPUSH
84810: PPUSH
84811: PPUSH
// if not unit or not points then
84812: LD_VAR 0 1
84816: NOT
84817: IFTRUE 84826
84819: PUSH
84820: LD_VAR 0 2
84824: NOT
84825: OR
84826: IFFALSE 84830
// exit ;
84828: GO 84920
// dist := 99999 ;
84830: LD_ADDR_VAR 0 5
84834: PUSH
84835: LD_INT 99999
84837: ST_TO_ADDR
// for i in points do
84838: LD_ADDR_VAR 0 4
84842: PUSH
84843: LD_VAR 0 2
84847: PUSH
84848: FOR_IN
84849: IFFALSE 84918
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84851: LD_ADDR_VAR 0 6
84855: PUSH
84856: LD_VAR 0 1
84860: PPUSH
84861: LD_VAR 0 4
84865: PUSH
84866: LD_INT 1
84868: ARRAY
84869: PPUSH
84870: LD_VAR 0 4
84874: PUSH
84875: LD_INT 2
84877: ARRAY
84878: PPUSH
84879: CALL_OW 297
84883: ST_TO_ADDR
// if tmpDist < dist then
84884: LD_VAR 0 6
84888: PUSH
84889: LD_VAR 0 5
84893: LESS
84894: IFFALSE 84916
// begin result := i ;
84896: LD_ADDR_VAR 0 3
84900: PUSH
84901: LD_VAR 0 4
84905: ST_TO_ADDR
// dist := tmpDist ;
84906: LD_ADDR_VAR 0 5
84910: PUSH
84911: LD_VAR 0 6
84915: ST_TO_ADDR
// end ; end ;
84916: GO 84848
84918: POP
84919: POP
// end ;
84920: LD_VAR 0 3
84924: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84925: LD_INT 0
84927: PPUSH
// uc_side := side ;
84928: LD_ADDR_OWVAR 20
84932: PUSH
84933: LD_VAR 0 1
84937: ST_TO_ADDR
// uc_nation := 3 ;
84938: LD_ADDR_OWVAR 21
84942: PUSH
84943: LD_INT 3
84945: ST_TO_ADDR
// vc_chassis := 25 ;
84946: LD_ADDR_OWVAR 37
84950: PUSH
84951: LD_INT 25
84953: ST_TO_ADDR
// vc_engine := engine_siberite ;
84954: LD_ADDR_OWVAR 39
84958: PUSH
84959: LD_INT 3
84961: ST_TO_ADDR
// vc_control := control_computer ;
84962: LD_ADDR_OWVAR 38
84966: PUSH
84967: LD_INT 3
84969: ST_TO_ADDR
// vc_weapon := 59 ;
84970: LD_ADDR_OWVAR 40
84974: PUSH
84975: LD_INT 59
84977: ST_TO_ADDR
// result := CreateVehicle ;
84978: LD_ADDR_VAR 0 5
84982: PUSH
84983: CALL_OW 45
84987: ST_TO_ADDR
// SetDir ( result , d ) ;
84988: LD_VAR 0 5
84992: PPUSH
84993: LD_VAR 0 4
84997: PPUSH
84998: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85002: LD_VAR 0 5
85006: PPUSH
85007: LD_VAR 0 2
85011: PPUSH
85012: LD_VAR 0 3
85016: PPUSH
85017: LD_INT 0
85019: PPUSH
85020: CALL_OW 48
// end ;
85024: LD_VAR 0 5
85028: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
85029: LD_INT 0
85031: PPUSH
85032: PPUSH
85033: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
85034: LD_ADDR_VAR 0 2
85038: PUSH
85039: LD_INT 0
85041: PUSH
85042: LD_INT 0
85044: PUSH
85045: LD_INT 0
85047: PUSH
85048: LD_INT 0
85050: PUSH
85051: EMPTY
85052: LIST
85053: LIST
85054: LIST
85055: LIST
85056: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
85057: LD_VAR 0 1
85061: NOT
85062: IFTRUE 85095
85064: PUSH
85065: LD_VAR 0 1
85069: PPUSH
85070: CALL_OW 264
85074: PUSH
85075: LD_INT 12
85077: PUSH
85078: LD_INT 51
85080: PUSH
85081: LD_INT 32
85083: PUSH
85084: LD_INT 89
85086: PUSH
85087: EMPTY
85088: LIST
85089: LIST
85090: LIST
85091: LIST
85092: IN
85093: NOT
85094: OR
85095: IFFALSE 85099
// exit ;
85097: GO 85197
// for i := 1 to 3 do
85099: LD_ADDR_VAR 0 3
85103: PUSH
85104: DOUBLE
85105: LD_INT 1
85107: DEC
85108: ST_TO_ADDR
85109: LD_INT 3
85111: PUSH
85112: FOR_TO
85113: IFFALSE 85195
// begin tmp := GetCargo ( cargo , i ) ;
85115: LD_ADDR_VAR 0 4
85119: PUSH
85120: LD_VAR 0 1
85124: PPUSH
85125: LD_VAR 0 3
85129: PPUSH
85130: CALL_OW 289
85134: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
85135: LD_ADDR_VAR 0 2
85139: PUSH
85140: LD_VAR 0 2
85144: PPUSH
85145: LD_VAR 0 3
85149: PPUSH
85150: LD_VAR 0 4
85154: PPUSH
85155: CALL_OW 1
85159: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
85160: LD_ADDR_VAR 0 2
85164: PUSH
85165: LD_VAR 0 2
85169: PPUSH
85170: LD_INT 4
85172: PPUSH
85173: LD_VAR 0 2
85177: PUSH
85178: LD_INT 4
85180: ARRAY
85181: PUSH
85182: LD_VAR 0 4
85186: PLUS
85187: PPUSH
85188: CALL_OW 1
85192: ST_TO_ADDR
// end ;
85193: GO 85112
85195: POP
85196: POP
// end ;
85197: LD_VAR 0 2
85201: RET
// export function Length ( array ) ; begin
85202: LD_INT 0
85204: PPUSH
// result := array + 0 ;
85205: LD_ADDR_VAR 0 2
85209: PUSH
85210: LD_VAR 0 1
85214: PUSH
85215: LD_INT 0
85217: PLUS
85218: ST_TO_ADDR
// end ;
85219: LD_VAR 0 2
85223: RET
// export function PrepareArray ( array ) ; begin
85224: LD_INT 0
85226: PPUSH
// result := array diff 0 ;
85227: LD_ADDR_VAR 0 2
85231: PUSH
85232: LD_VAR 0 1
85236: PUSH
85237: LD_INT 0
85239: DIFF
85240: ST_TO_ADDR
// if not result [ 1 ] then
85241: LD_VAR 0 2
85245: PUSH
85246: LD_INT 1
85248: ARRAY
85249: NOT
85250: IFFALSE 85270
// result := Delete ( result , 1 ) ;
85252: LD_ADDR_VAR 0 2
85256: PUSH
85257: LD_VAR 0 2
85261: PPUSH
85262: LD_INT 1
85264: PPUSH
85265: CALL_OW 3
85269: ST_TO_ADDR
// end ;
85270: LD_VAR 0 2
85274: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
85275: LD_INT 0
85277: PPUSH
85278: PPUSH
85279: PPUSH
85280: PPUSH
// sibRocketRange := 25 ;
85281: LD_ADDR_VAR 0 6
85285: PUSH
85286: LD_INT 25
85288: ST_TO_ADDR
// result := false ;
85289: LD_ADDR_VAR 0 4
85293: PUSH
85294: LD_INT 0
85296: ST_TO_ADDR
// for i := 0 to 5 do
85297: LD_ADDR_VAR 0 5
85301: PUSH
85302: DOUBLE
85303: LD_INT 0
85305: DEC
85306: ST_TO_ADDR
85307: LD_INT 5
85309: PUSH
85310: FOR_TO
85311: IFFALSE 85378
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
85313: LD_VAR 0 1
85317: PPUSH
85318: LD_VAR 0 5
85322: PPUSH
85323: LD_VAR 0 6
85327: PPUSH
85328: CALL_OW 272
85332: PPUSH
85333: LD_VAR 0 2
85337: PPUSH
85338: LD_VAR 0 5
85342: PPUSH
85343: LD_VAR 0 6
85347: PPUSH
85348: CALL_OW 273
85352: PPUSH
85353: LD_VAR 0 3
85357: PPUSH
85358: CALL_OW 309
85362: IFFALSE 85376
// begin result := true ;
85364: LD_ADDR_VAR 0 4
85368: PUSH
85369: LD_INT 1
85371: ST_TO_ADDR
// exit ;
85372: POP
85373: POP
85374: GO 85380
// end ;
85376: GO 85310
85378: POP
85379: POP
// end ;
85380: LD_VAR 0 4
85384: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85385: LD_INT 0
85387: PPUSH
85388: PPUSH
85389: PPUSH
// if btype = b_depot then
85390: LD_VAR 0 2
85394: PUSH
85395: LD_INT 0
85397: EQUAL
85398: IFFALSE 85410
// begin result := true ;
85400: LD_ADDR_VAR 0 3
85404: PUSH
85405: LD_INT 1
85407: ST_TO_ADDR
// exit ;
85408: GO 85530
// end ; pom := GetBase ( depot ) ;
85410: LD_ADDR_VAR 0 4
85414: PUSH
85415: LD_VAR 0 1
85419: PPUSH
85420: CALL_OW 274
85424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85425: LD_ADDR_VAR 0 5
85429: PUSH
85430: LD_VAR 0 2
85434: PPUSH
85435: LD_VAR 0 1
85439: PPUSH
85440: CALL_OW 248
85444: PPUSH
85445: CALL_OW 450
85449: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85450: LD_ADDR_VAR 0 3
85454: PUSH
85455: LD_VAR 0 4
85459: PPUSH
85460: LD_INT 1
85462: PPUSH
85463: CALL_OW 275
85467: PUSH
85468: LD_VAR 0 5
85472: PUSH
85473: LD_INT 1
85475: ARRAY
85476: GREATEREQUAL
85477: IFFALSE 85503
85479: PUSH
85480: LD_VAR 0 4
85484: PPUSH
85485: LD_INT 2
85487: PPUSH
85488: CALL_OW 275
85492: PUSH
85493: LD_VAR 0 5
85497: PUSH
85498: LD_INT 2
85500: ARRAY
85501: GREATEREQUAL
85502: AND
85503: IFFALSE 85529
85505: PUSH
85506: LD_VAR 0 4
85510: PPUSH
85511: LD_INT 3
85513: PPUSH
85514: CALL_OW 275
85518: PUSH
85519: LD_VAR 0 5
85523: PUSH
85524: LD_INT 3
85526: ARRAY
85527: GREATEREQUAL
85528: AND
85529: ST_TO_ADDR
// end ;
85530: LD_VAR 0 3
85534: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85535: LD_INT 0
85537: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85538: LD_VAR 0 1
85542: PPUSH
85543: LD_VAR 0 2
85547: PPUSH
85548: LD_INT 0
85550: PPUSH
85551: LD_INT 0
85553: PPUSH
85554: LD_INT 1
85556: PPUSH
85557: LD_INT 0
85559: PPUSH
85560: CALL_OW 587
// end ;
85564: LD_VAR 0 3
85568: RET
// export function CenterOnNow ( unit ) ; begin
85569: LD_INT 0
85571: PPUSH
// result := IsInUnit ( unit ) ;
85572: LD_ADDR_VAR 0 2
85576: PUSH
85577: LD_VAR 0 1
85581: PPUSH
85582: CALL_OW 310
85586: ST_TO_ADDR
// if not result then
85587: LD_VAR 0 2
85591: NOT
85592: IFFALSE 85604
// result := unit ;
85594: LD_ADDR_VAR 0 2
85598: PUSH
85599: LD_VAR 0 1
85603: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85604: LD_VAR 0 1
85608: PPUSH
85609: CALL_OW 87
// end ;
85613: LD_VAR 0 2
85617: RET
// export function ComMoveHex ( unit , hex ) ; begin
85618: LD_INT 0
85620: PPUSH
// if not hex then
85621: LD_VAR 0 2
85625: NOT
85626: IFFALSE 85630
// exit ;
85628: GO 85683
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85630: LD_VAR 0 2
85634: PUSH
85635: LD_INT 1
85637: ARRAY
85638: PPUSH
85639: LD_VAR 0 2
85643: PUSH
85644: LD_INT 2
85646: ARRAY
85647: PPUSH
85648: CALL_OW 428
85652: IFFALSE 85656
// exit ;
85654: GO 85683
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85656: LD_VAR 0 1
85660: PPUSH
85661: LD_VAR 0 2
85665: PUSH
85666: LD_INT 1
85668: ARRAY
85669: PPUSH
85670: LD_VAR 0 2
85674: PUSH
85675: LD_INT 2
85677: ARRAY
85678: PPUSH
85679: CALL_OW 111
// end ;
85683: LD_VAR 0 3
85687: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85688: LD_INT 0
85690: PPUSH
85691: PPUSH
85692: PPUSH
// if not unit or not enemy then
85693: LD_VAR 0 1
85697: NOT
85698: IFTRUE 85707
85700: PUSH
85701: LD_VAR 0 2
85705: NOT
85706: OR
85707: IFFALSE 85711
// exit ;
85709: GO 85837
// x := GetX ( enemy ) ;
85711: LD_ADDR_VAR 0 4
85715: PUSH
85716: LD_VAR 0 2
85720: PPUSH
85721: CALL_OW 250
85725: ST_TO_ADDR
// y := GetY ( enemy ) ;
85726: LD_ADDR_VAR 0 5
85730: PUSH
85731: LD_VAR 0 2
85735: PPUSH
85736: CALL_OW 251
85740: ST_TO_ADDR
// if ValidHex ( x , y ) then
85741: LD_VAR 0 4
85745: PPUSH
85746: LD_VAR 0 5
85750: PPUSH
85751: CALL_OW 488
85755: IFFALSE 85837
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85757: LD_VAR 0 2
85761: PPUSH
85762: CALL_OW 247
85766: PUSH
85767: LD_INT 3
85769: PUSH
85770: LD_INT 2
85772: PUSH
85773: EMPTY
85774: LIST
85775: LIST
85776: IN
85777: IFTRUE 85800
85779: PUSH
85780: LD_VAR 0 1
85784: PPUSH
85785: CALL_OW 255
85789: PPUSH
85790: LD_VAR 0 2
85794: PPUSH
85795: CALL_OW 292
85799: OR
85800: IFFALSE 85818
// ComAttackUnit ( unit , enemy ) else
85802: LD_VAR 0 1
85806: PPUSH
85807: LD_VAR 0 2
85811: PPUSH
85812: CALL_OW 115
85816: GO 85837
// ComAgressiveMove ( unit , x , y ) ;
85818: LD_VAR 0 1
85822: PPUSH
85823: LD_VAR 0 4
85827: PPUSH
85828: LD_VAR 0 5
85832: PPUSH
85833: CALL_OW 114
// end ;
85837: LD_VAR 0 3
85841: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85842: LD_INT 0
85844: PPUSH
85845: PPUSH
85846: PPUSH
// list := AreaToList ( area , 0 ) ;
85847: LD_ADDR_VAR 0 5
85851: PUSH
85852: LD_VAR 0 1
85856: PPUSH
85857: LD_INT 0
85859: PPUSH
85860: CALL_OW 517
85864: ST_TO_ADDR
// if not list then
85865: LD_VAR 0 5
85869: NOT
85870: IFFALSE 85874
// exit ;
85872: GO 86004
// if all then
85874: LD_VAR 0 2
85878: IFFALSE 85966
// begin for i := 1 to list [ 1 ] do
85880: LD_ADDR_VAR 0 4
85884: PUSH
85885: DOUBLE
85886: LD_INT 1
85888: DEC
85889: ST_TO_ADDR
85890: LD_VAR 0 5
85894: PUSH
85895: LD_INT 1
85897: ARRAY
85898: PUSH
85899: FOR_TO
85900: IFFALSE 85962
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85902: LD_ADDR_VAR 0 3
85906: PUSH
85907: LD_VAR 0 3
85911: PPUSH
85912: LD_VAR 0 3
85916: PUSH
85917: LD_INT 1
85919: PLUS
85920: PPUSH
85921: LD_VAR 0 5
85925: PUSH
85926: LD_INT 1
85928: ARRAY
85929: PUSH
85930: LD_VAR 0 4
85934: ARRAY
85935: PUSH
85936: LD_VAR 0 5
85940: PUSH
85941: LD_INT 2
85943: ARRAY
85944: PUSH
85945: LD_VAR 0 4
85949: ARRAY
85950: PUSH
85951: EMPTY
85952: LIST
85953: LIST
85954: PPUSH
85955: CALL_OW 1
85959: ST_TO_ADDR
85960: GO 85899
85962: POP
85963: POP
// exit ;
85964: GO 86004
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85966: LD_ADDR_VAR 0 3
85970: PUSH
85971: LD_VAR 0 5
85975: PUSH
85976: LD_INT 1
85978: ARRAY
85979: PUSH
85980: LD_INT 1
85982: ARRAY
85983: PUSH
85984: LD_VAR 0 5
85988: PUSH
85989: LD_INT 2
85991: ARRAY
85992: PUSH
85993: LD_INT 1
85995: ARRAY
85996: PUSH
85997: EMPTY
85998: LIST
85999: LIST
86000: PUSH
86001: EMPTY
86002: LIST
86003: ST_TO_ADDR
// end ;
86004: LD_VAR 0 3
86008: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
86009: LD_INT 0
86011: PPUSH
86012: PPUSH
// list := AreaToList ( area , 0 ) ;
86013: LD_ADDR_VAR 0 4
86017: PUSH
86018: LD_VAR 0 1
86022: PPUSH
86023: LD_INT 0
86025: PPUSH
86026: CALL_OW 517
86030: ST_TO_ADDR
// if not list then
86031: LD_VAR 0 4
86035: NOT
86036: IFFALSE 86040
// exit ;
86038: GO 86081
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
86040: LD_ADDR_VAR 0 3
86044: PUSH
86045: LD_VAR 0 4
86049: PUSH
86050: LD_INT 1
86052: ARRAY
86053: PUSH
86054: LD_INT 1
86056: ARRAY
86057: PUSH
86058: LD_VAR 0 4
86062: PUSH
86063: LD_INT 2
86065: ARRAY
86066: PUSH
86067: LD_INT 1
86069: ARRAY
86070: PUSH
86071: LD_VAR 0 2
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: LIST
86080: ST_TO_ADDR
// end ;
86081: LD_VAR 0 3
86085: RET
// export function First ( array ) ; begin
86086: LD_INT 0
86088: PPUSH
// if not array then
86089: LD_VAR 0 1
86093: NOT
86094: IFFALSE 86098
// exit ;
86096: GO 86112
// result := array [ 1 ] ;
86098: LD_ADDR_VAR 0 2
86102: PUSH
86103: LD_VAR 0 1
86107: PUSH
86108: LD_INT 1
86110: ARRAY
86111: ST_TO_ADDR
// end ;
86112: LD_VAR 0 2
86116: RET
// export function Last ( array ) ; begin
86117: LD_INT 0
86119: PPUSH
// if not array then
86120: LD_VAR 0 1
86124: NOT
86125: IFFALSE 86129
// exit ;
86127: GO 86145
// result := array [ array ] ;
86129: LD_ADDR_VAR 0 2
86133: PUSH
86134: LD_VAR 0 1
86138: PUSH
86139: LD_VAR 0 1
86143: ARRAY
86144: ST_TO_ADDR
// end ;
86145: LD_VAR 0 2
86149: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
86150: LD_INT 0
86152: PPUSH
86153: PPUSH
// result := [ ] ;
86154: LD_ADDR_VAR 0 5
86158: PUSH
86159: EMPTY
86160: ST_TO_ADDR
// if not array then
86161: LD_VAR 0 1
86165: NOT
86166: IFFALSE 86170
// exit ;
86168: GO 86282
// for i := 1 to array do
86170: LD_ADDR_VAR 0 6
86174: PUSH
86175: DOUBLE
86176: LD_INT 1
86178: DEC
86179: ST_TO_ADDR
86180: LD_VAR 0 1
86184: PUSH
86185: FOR_TO
86186: IFFALSE 86280
// if array [ i ] [ index ] = value then
86188: LD_VAR 0 1
86192: PUSH
86193: LD_VAR 0 6
86197: ARRAY
86198: PUSH
86199: LD_VAR 0 2
86203: ARRAY
86204: PUSH
86205: LD_VAR 0 3
86209: EQUAL
86210: IFFALSE 86278
// begin if indexColumn then
86212: LD_VAR 0 4
86216: IFFALSE 86252
// result := Join ( result , array [ i ] [ indexColumn ] ) else
86218: LD_ADDR_VAR 0 5
86222: PUSH
86223: LD_VAR 0 5
86227: PPUSH
86228: LD_VAR 0 1
86232: PUSH
86233: LD_VAR 0 6
86237: ARRAY
86238: PUSH
86239: LD_VAR 0 4
86243: ARRAY
86244: PPUSH
86245: CALL 81290 0 2
86249: ST_TO_ADDR
86250: GO 86278
// result := Join ( result , array [ i ] ) ;
86252: LD_ADDR_VAR 0 5
86256: PUSH
86257: LD_VAR 0 5
86261: PPUSH
86262: LD_VAR 0 1
86266: PUSH
86267: LD_VAR 0 6
86271: ARRAY
86272: PPUSH
86273: CALL 81290 0 2
86277: ST_TO_ADDR
// end ;
86278: GO 86185
86280: POP
86281: POP
// end ;
86282: LD_VAR 0 5
86286: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
86287: LD_INT 0
86289: PPUSH
// if not vehicles or not parkingPoint then
86290: LD_VAR 0 1
86294: NOT
86295: IFTRUE 86304
86297: PUSH
86298: LD_VAR 0 2
86302: NOT
86303: OR
86304: IFFALSE 86308
// exit ;
86306: GO 86406
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
86308: LD_ADDR_VAR 0 1
86312: PUSH
86313: LD_VAR 0 1
86317: PPUSH
86318: LD_INT 50
86320: PUSH
86321: EMPTY
86322: LIST
86323: PUSH
86324: LD_INT 3
86326: PUSH
86327: LD_INT 92
86329: PUSH
86330: LD_VAR 0 2
86334: PUSH
86335: LD_INT 1
86337: ARRAY
86338: PUSH
86339: LD_VAR 0 2
86343: PUSH
86344: LD_INT 2
86346: ARRAY
86347: PUSH
86348: LD_INT 8
86350: PUSH
86351: EMPTY
86352: LIST
86353: LIST
86354: LIST
86355: LIST
86356: PUSH
86357: EMPTY
86358: LIST
86359: LIST
86360: PUSH
86361: EMPTY
86362: LIST
86363: LIST
86364: PPUSH
86365: CALL_OW 72
86369: ST_TO_ADDR
// if not vehicles then
86370: LD_VAR 0 1
86374: NOT
86375: IFFALSE 86379
// exit ;
86377: GO 86406
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
86379: LD_VAR 0 1
86383: PPUSH
86384: LD_VAR 0 2
86388: PUSH
86389: LD_INT 1
86391: ARRAY
86392: PPUSH
86393: LD_VAR 0 2
86397: PUSH
86398: LD_INT 2
86400: ARRAY
86401: PPUSH
86402: CALL_OW 111
// end ;
86406: LD_VAR 0 3
86410: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86411: LD_INT 0
86413: PPUSH
86414: PPUSH
86415: PPUSH
// if not side or not area then
86416: LD_VAR 0 1
86420: NOT
86421: IFTRUE 86430
86423: PUSH
86424: LD_VAR 0 2
86428: NOT
86429: OR
86430: IFFALSE 86434
// exit ;
86432: GO 86553
// tmp := AreaToList ( area , 0 ) ;
86434: LD_ADDR_VAR 0 5
86438: PUSH
86439: LD_VAR 0 2
86443: PPUSH
86444: LD_INT 0
86446: PPUSH
86447: CALL_OW 517
86451: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86452: LD_ADDR_VAR 0 4
86456: PUSH
86457: DOUBLE
86458: LD_INT 1
86460: DEC
86461: ST_TO_ADDR
86462: LD_VAR 0 5
86466: PUSH
86467: LD_INT 1
86469: ARRAY
86470: PUSH
86471: FOR_TO
86472: IFFALSE 86551
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86474: LD_VAR 0 5
86478: PUSH
86479: LD_INT 1
86481: ARRAY
86482: PUSH
86483: LD_VAR 0 4
86487: ARRAY
86488: PPUSH
86489: LD_VAR 0 5
86493: PUSH
86494: LD_INT 2
86496: ARRAY
86497: PUSH
86498: LD_VAR 0 4
86502: ARRAY
86503: PPUSH
86504: CALL_OW 351
86508: IFFALSE 86549
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86510: LD_VAR 0 5
86514: PUSH
86515: LD_INT 1
86517: ARRAY
86518: PUSH
86519: LD_VAR 0 4
86523: ARRAY
86524: PPUSH
86525: LD_VAR 0 5
86529: PUSH
86530: LD_INT 2
86532: ARRAY
86533: PUSH
86534: LD_VAR 0 4
86538: ARRAY
86539: PPUSH
86540: LD_VAR 0 1
86544: PPUSH
86545: CALL_OW 244
// end ;
86549: GO 86471
86551: POP
86552: POP
// end ;
86553: LD_VAR 0 3
86557: RET
// export function UniqueArray ( array ) ; var i ; begin
86558: LD_INT 0
86560: PPUSH
86561: PPUSH
// result := [ ] ;
86562: LD_ADDR_VAR 0 2
86566: PUSH
86567: EMPTY
86568: ST_TO_ADDR
// if not array then
86569: LD_VAR 0 1
86573: NOT
86574: IFFALSE 86578
// exit ;
86576: GO 86639
// for i := 1 to array do
86578: LD_ADDR_VAR 0 3
86582: PUSH
86583: DOUBLE
86584: LD_INT 1
86586: DEC
86587: ST_TO_ADDR
86588: LD_VAR 0 1
86592: PUSH
86593: FOR_TO
86594: IFFALSE 86637
// if not array [ i ] in result then
86596: LD_VAR 0 1
86600: PUSH
86601: LD_VAR 0 3
86605: ARRAY
86606: PUSH
86607: LD_VAR 0 2
86611: IN
86612: NOT
86613: IFFALSE 86635
// result := Join ( result , i ) ;
86615: LD_ADDR_VAR 0 2
86619: PUSH
86620: LD_VAR 0 2
86624: PPUSH
86625: LD_VAR 0 3
86629: PPUSH
86630: CALL 81290 0 2
86634: ST_TO_ADDR
86635: GO 86593
86637: POP
86638: POP
// end ; end_of_file
86639: LD_VAR 0 2
86643: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86644: LD_VAR 0 1
86648: PUSH
86649: LD_INT 200
86651: DOUBLE
86652: GREATEREQUAL
86653: IFFALSE 86661
86655: LD_INT 299
86657: DOUBLE
86658: LESSEQUAL
86659: IFTRUE 86663
86661: GO 86695
86663: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86664: LD_VAR 0 1
86668: PPUSH
86669: LD_VAR 0 2
86673: PPUSH
86674: LD_VAR 0 3
86678: PPUSH
86679: LD_VAR 0 4
86683: PPUSH
86684: LD_VAR 0 5
86688: PPUSH
86689: CALL 37366 0 5
86693: GO 86772
86695: LD_INT 300
86697: DOUBLE
86698: GREATEREQUAL
86699: IFFALSE 86707
86701: LD_INT 399
86703: DOUBLE
86704: LESSEQUAL
86705: IFTRUE 86709
86707: GO 86771
86709: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86710: LD_VAR 0 1
86714: PPUSH
86715: LD_VAR 0 2
86719: PPUSH
86720: LD_VAR 0 3
86724: PPUSH
86725: LD_VAR 0 4
86729: PPUSH
86730: LD_VAR 0 5
86734: PPUSH
86735: LD_VAR 0 6
86739: PPUSH
86740: LD_VAR 0 7
86744: PPUSH
86745: LD_VAR 0 8
86749: PPUSH
86750: LD_VAR 0 9
86754: PPUSH
86755: LD_VAR 0 10
86759: PPUSH
86760: LD_VAR 0 11
86764: PPUSH
86765: CALL 33169 0 11
86769: GO 86772
86771: POP
// end ;
86772: PPOPN 11
86774: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86775: LD_VAR 0 1
86779: PPUSH
86780: LD_VAR 0 2
86784: PPUSH
86785: LD_VAR 0 3
86789: PPUSH
86790: LD_VAR 0 4
86794: PPUSH
86795: LD_VAR 0 5
86799: PPUSH
86800: CALL 36666 0 5
// end ; end_of_file
86804: PPOPN 5
86806: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86807: LD_VAR 0 1
86811: PPUSH
86812: LD_VAR 0 2
86816: PPUSH
86817: LD_VAR 0 3
86821: PPUSH
86822: LD_VAR 0 4
86826: PPUSH
86827: LD_VAR 0 5
86831: PPUSH
86832: LD_VAR 0 6
86836: PPUSH
86837: CALL 20709 0 6
// end ;
86841: PPOPN 6
86843: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86844: LD_INT 0
86846: PPUSH
// begin if not units then
86847: LD_VAR 0 1
86851: NOT
86852: IFFALSE 86856
// exit ;
86854: GO 86890
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86856: LD_VAR 0 1
86860: PPUSH
86861: LD_VAR 0 2
86865: PPUSH
86866: LD_VAR 0 3
86870: PPUSH
86871: LD_VAR 0 4
86875: PPUSH
86876: LD_VAR 0 5
86880: PPUSH
86881: LD_VAR 0 6
86885: PPUSH
86886: CALL 43063 0 6
// end ;
86890: PPOPN 7
86892: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86893: CALL 20589 0 0
// end ;
86897: PPOPN 1
86899: END
