// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9048 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36697 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36697 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36697 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36697 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36697 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36697 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36697 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36697 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36697 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36697 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36697 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// if ingame_video then
6129: LD_OWVAR 52
6133: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// until not ingame_video ;
6142: LD_OWVAR 52
6146: NOT
6147: IFFALSE 6135
// wait ( 0 0$5 ) ;
6149: LD_INT 175
6151: PPUSH
6152: CALL_OW 67
// end ; IncomingAttack ;
6156: CALL 15091 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6160: LD_INT 2100
6162: PPUSH
6163: LD_INT 3500
6165: PPUSH
6166: CALL_OW 12
6170: PPUSH
6171: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 3
6187: PUSH
6188: LD_INT 4
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_OWVAR 67
6203: ARRAY
6204: PUSH
6205: LD_EXP 19
6209: PUSH
6210: LD_INT 3
6212: DIV
6213: PLUS
6214: PUSH
6215: FOR_TO
6216: IFFALSE 6328
// begin uc_side := 1 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// uc_nation := 1 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 1
6239: PPUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_OWVAR 67
6258: ARRAY
6259: PPUSH
6260: CALL_OW 380
// un := CreateHuman ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: CALL_OW 44
6273: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 37
6281: PPUSH
6282: LD_INT 70
6284: PPUSH
6285: LD_INT 3
6287: PPUSH
6288: LD_INT 0
6290: PPUSH
6291: CALL_OW 50
// usAttackers := usAttackers union un ;
6295: LD_ADDR_EXP 47
6299: PUSH
6300: LD_EXP 47
6304: PUSH
6305: LD_VAR 0 2
6309: UNION
6310: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6311: LD_VAR 0 2
6315: PPUSH
6316: LD_INT 40
6318: PPUSH
6319: LD_INT 65
6321: PPUSH
6322: CALL_OW 111
// end ;
6326: GO 6215
6328: POP
6329: POP
// uc_side := 1 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// uc_nation := 1 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 4
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 380
// un := CreateHuman ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: CALL_OW 44
6368: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_INT 70
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 0
6385: PPUSH
6386: CALL_OW 50
// usAttackers := usAttackers union un ;
6390: LD_ADDR_EXP 47
6394: PUSH
6395: LD_EXP 47
6399: PUSH
6400: LD_VAR 0 2
6404: UNION
6405: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6406: LD_VAR 0 2
6410: PPUSH
6411: LD_INT 40
6413: PPUSH
6414: LD_INT 65
6416: PPUSH
6417: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: DOUBLE
6427: LD_INT 1
6429: DEC
6430: ST_TO_ADDR
6431: LD_OWVAR 67
6435: PUSH
6436: LD_EXP 19
6440: PUSH
6441: LD_INT 4
6443: DIV
6444: PLUS
6445: PUSH
6446: FOR_TO
6447: IFFALSE 6620
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: CALL_OW 12
6493: ARRAY
6494: PPUSH
6495: LD_INT 90
6497: PPUSH
6498: CALL 313 0 7
6502: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6503: LD_VAR 0 3
6507: PPUSH
6508: LD_INT 35
6510: PPUSH
6511: LD_INT 65
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 3
6526: PPUSH
6527: LD_OWVAR 67
6531: PUSH
6532: LD_INT 1
6534: PLUS
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_VAR 0 3
6559: PPUSH
6560: CALL_OW 52
// usAttackers := usAttackers union un ;
6564: LD_ADDR_EXP 47
6568: PUSH
6569: LD_EXP 47
6573: PUSH
6574: LD_VAR 0 2
6578: UNION
6579: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_INT 39
6587: PPUSH
6588: LD_INT 60
6590: PPUSH
6591: CALL_OW 111
// wait ( 0 0$3 ) ;
6595: LD_INT 105
6597: PPUSH
6598: CALL_OW 67
// usAttackers := usAttackers union veh ;
6602: LD_ADDR_EXP 47
6606: PUSH
6607: LD_EXP 47
6611: PUSH
6612: LD_VAR 0 3
6616: UNION
6617: ST_TO_ADDR
// end ;
6618: GO 6446
6620: POP
6621: POP
// attackWave := attackWave + 1 ;
6622: LD_ADDR_EXP 19
6626: PUSH
6627: LD_EXP 19
6631: PUSH
6632: LD_INT 1
6634: PLUS
6635: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6636: LD_EXP 24
6640: PPUSH
6641: CALL_OW 427
// end ;
6645: LD_VAR 0 1
6649: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if retreatAllowed then
6663: LD_EXP 11
6667: IFFALSE 6679
// strategy := 2 else
6669: LD_ADDR_VAR 0 5
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
6677: GO 6695
// strategy := rand ( 0 , 2 ) ;
6679: LD_ADDR_VAR 0 5
6683: PUSH
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 2
6689: PPUSH
6690: CALL_OW 12
6694: ST_TO_ADDR
// attackFormula := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// case strategy of 0 :
6702: LD_VAR 0 5
6706: PUSH
6707: LD_INT 0
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 7045
6715: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6716: LD_INT 11
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 30
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 70
6747: NOT
6748: IFFALSE 6820
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6750: LD_ADDR_VAR 0 6
6754: PUSH
6755: LD_INT 41
6757: PUSH
6758: LD_INT 34
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: LD_INT 53
6770: PUSH
6771: LD_INT 62
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 37
6780: PUSH
6781: LD_INT 63
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 44
6790: PUSH
6791: LD_INT 45
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 37
6800: PUSH
6801: LD_INT 28
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7043
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6820: LD_INT 12
6822: PPUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 30
6848: PUSH
6849: LD_INT 31
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 32
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: IFFALSE 6964
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 27
6890: PUSH
6891: LD_INT 42
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 27
6900: PUSH
6901: LD_INT 32
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 53
6914: PUSH
6915: LD_INT 62
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 37
6924: PUSH
6925: LD_INT 63
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 44
6934: PUSH
6935: LD_INT 45
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 37
6944: PUSH
6945: LD_INT 28
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
6962: GO 7043
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6964: LD_ADDR_VAR 0 6
6968: PUSH
6969: LD_INT 71
6971: PUSH
6972: LD_INT 67
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 54
6981: PUSH
6982: LD_INT 35
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 63
6995: PUSH
6996: LD_INT 40
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 37
7005: PUSH
7006: LD_INT 63
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 44
7015: PUSH
7016: LD_INT 45
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 37
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; 1 :
7043: GO 7248
7045: LD_INT 1
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7157
7053: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7054: LD_ADDR_VAR 0 6
7058: PUSH
7059: LD_INT 71
7061: PUSH
7062: LD_INT 67
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 82
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 53
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 43
7091: PUSH
7092: LD_INT 10
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 53
7107: PUSH
7108: LD_INT 62
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 37
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 44
7127: PUSH
7128: LD_INT 45
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 37
7137: PUSH
7138: LD_INT 28
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7248
7157: LD_INT 2
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7247
7165: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7166: LD_ADDR_VAR 0 6
7170: PUSH
7171: LD_INT 90
7173: PUSH
7174: LD_INT 59
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 64
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 82
7197: PUSH
7198: LD_INT 75
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 73
7207: PUSH
7208: LD_INT 67
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 101
7217: PUSH
7218: LD_INT 65
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 108
7227: PUSH
7228: LD_INT 62
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7248
7247: POP
// if not attackFormula then
7248: LD_VAR 0 6
7252: NOT
7253: IFFALSE 7257
// exit ;
7255: GO 8935
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7257: LD_ADDR_VAR 0 7
7261: PUSH
7262: LD_EXP 47
7266: PPUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 72
7281: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7282: LD_ADDR_VAR 0 8
7286: PUSH
7287: LD_EXP 47
7291: PPUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 72
7306: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7307: LD_ADDR_VAR 0 9
7311: PUSH
7312: LD_EXP 47
7316: PPUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PPUSH
7327: CALL_OW 72
7331: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7332: LD_ADDR_VAR 0 10
7336: PUSH
7337: LD_EXP 47
7341: PPUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 72
7356: ST_TO_ADDR
// if sci then
7357: LD_VAR 0 8
7361: IFFALSE 7398
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7363: LD_VAR 0 8
7367: PPUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_INT 2
7375: ARRAY
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: LD_VAR 0 6
7385: PUSH
7386: LD_INT 2
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: CALL_OW 111
// repeat wait ( 10 ) ;
7398: LD_INT 10
7400: PPUSH
7401: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7405: LD_ADDR_VAR 0 7
7409: PUSH
7410: LD_EXP 47
7414: PPUSH
7415: LD_INT 25
7417: PUSH
7418: LD_INT 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 72
7429: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7430: LD_ADDR_VAR 0 8
7434: PUSH
7435: LD_EXP 47
7439: PPUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 72
7454: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7455: LD_ADDR_VAR 0 9
7459: PUSH
7460: LD_EXP 47
7464: PPUSH
7465: LD_INT 25
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PPUSH
7475: CALL_OW 72
7479: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7480: LD_ADDR_VAR 0 10
7484: PUSH
7485: LD_EXP 47
7489: PPUSH
7490: LD_INT 21
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 72
7504: ST_TO_ADDR
// if sol then
7505: LD_VAR 0 7
7509: IFFALSE 7930
// begin for i in sol do
7511: LD_ADDR_VAR 0 2
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: FOR_IN
7522: IFFALSE 7928
// begin tag := GetTag ( i ) ;
7524: LD_ADDR_VAR 0 4
7528: PUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 110
7538: ST_TO_ADDR
// if not tag then
7539: LD_VAR 0 4
7543: NOT
7544: IFFALSE 7653
// begin if GetLives ( i ) = 1000 then
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL_OW 256
7555: PUSH
7556: LD_INT 1000
7558: EQUAL
7559: IFFALSE 7575
// SetTag ( i , 1 ) else
7561: LD_VAR 0 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 109
7573: GO 7651
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7575: LD_VAR 0 2
7579: PPUSH
7580: LD_VAR 0 6
7584: PUSH
7585: LD_INT 2
7587: ARRAY
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: LD_VAR 0 6
7597: PUSH
7598: LD_INT 2
7600: ARRAY
7601: PUSH
7602: LD_INT 2
7604: ARRAY
7605: PPUSH
7606: CALL_OW 297
7610: PUSH
7611: LD_INT 10
7613: GREATER
7614: IFFALSE 7651
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_VAR 0 6
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: PPUSH
7634: LD_VAR 0 6
7638: PUSH
7639: LD_INT 2
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PPUSH
7647: CALL_OW 111
// end else
7651: GO 7926
// begin if GetLives ( i ) < 760 then
7653: LD_VAR 0 2
7657: PPUSH
7658: CALL_OW 256
7662: PUSH
7663: LD_INT 760
7665: LESS
7666: IFFALSE 7717
// begin SetTag ( i , 0 ) ;
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7680: LD_VAR 0 2
7684: PPUSH
7685: LD_VAR 0 6
7689: PUSH
7690: LD_INT 2
7692: ARRAY
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: PPUSH
7698: LD_VAR 0 6
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: CALL_OW 111
// end else
7715: GO 7926
// if tag <= attackFormula [ 1 ] then
7717: LD_VAR 0 4
7721: PUSH
7722: LD_VAR 0 6
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: LESSEQUAL
7731: IFFALSE 7892
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 6
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PUSH
7747: LD_VAR 0 4
7751: ARRAY
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PUSH
7766: LD_VAR 0 4
7770: ARRAY
7771: PUSH
7772: LD_INT 2
7774: ARRAY
7775: PPUSH
7776: CALL_OW 297
7780: PUSH
7781: LD_INT 6
7783: GREATER
7784: IFFALSE 7835
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7786: LD_VAR 0 2
7790: PPUSH
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: PUSH
7800: LD_VAR 0 4
7804: ARRAY
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 6
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PUSH
7819: LD_VAR 0 4
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 114
7833: GO 7890
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7835: LD_INT 81
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 91
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PPUSH
7865: CALL_OW 69
7869: NOT
7870: IFFALSE 7890
// SetTag ( i , tag + 1 ) ;
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_VAR 0 4
7881: PUSH
7882: LD_INT 1
7884: PLUS
7885: PPUSH
7886: CALL_OW 109
// end else
7890: GO 7926
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 81
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 74
7921: PPUSH
7922: CALL_OW 115
// end ; end ;
7926: GO 7521
7928: POP
7929: POP
// end ; if sci then
7930: LD_VAR 0 8
7934: IFFALSE 8203
// begin if not sol and not mech then
7936: LD_VAR 0 7
7940: NOT
7941: PUSH
7942: LD_VAR 0 9
7946: NOT
7947: AND
7948: IFFALSE 8000
// begin for i in sci do
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_VAR 0 8
7959: PUSH
7960: FOR_IN
7961: IFFALSE 7996
// begin usForces := usForces union i ;
7963: LD_ADDR_EXP 44
7967: PUSH
7968: LD_EXP 44
7972: PUSH
7973: LD_VAR 0 2
7977: UNION
7978: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 34
7986: PPUSH
7987: LD_INT 68
7989: PPUSH
7990: CALL_OW 111
// end ;
7994: GO 7960
7996: POP
7997: POP
// end else
7998: GO 8203
// for i in sci do
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_VAR 0 8
8009: PUSH
8010: FOR_IN
8011: IFFALSE 8201
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: LD_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ARRAY
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 10
8051: GREATER
8052: IFFALSE 8091
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PPUSH
8072: LD_VAR 0 6
8076: PUSH
8077: LD_INT 2
8079: ARRAY
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: CALL_OW 111
8089: GO 8199
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 24
8101: PUSH
8102: LD_INT 1000
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 91
8115: PUSH
8116: LD_VAR 0 2
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 72
8137: IFFALSE 8199
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 24
8154: PUSH
8155: LD_INT 1000
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 91
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 10
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 72
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: CALL_OW 128
8199: GO 8010
8201: POP
8202: POP
// end ; if mech then
8203: LD_VAR 0 9
8207: IFFALSE 8917
// begin for i in mech do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_VAR 0 9
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8915
// begin tag := GetTag ( i ) ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 110
8236: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8237: LD_ADDR_VAR 0 11
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 310
8251: ST_TO_ADDR
// if not tag then
8252: LD_VAR 0 4
8256: NOT
8257: IFFALSE 8628
// begin if veh then
8259: LD_VAR 0 11
8263: IFFALSE 8434
// begin if GetLives ( veh ) = 1000 then
8265: LD_VAR 0 11
8269: PPUSH
8270: CALL_OW 256
8274: PUSH
8275: LD_INT 1000
8277: EQUAL
8278: IFFALSE 8294
// SetTag ( i , 1 ) else
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 109
8292: GO 8432
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8294: LD_VAR 0 11
8298: PPUSH
8299: LD_VAR 0 6
8303: PUSH
8304: LD_INT 3
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 6
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PPUSH
8325: CALL_OW 297
8329: PUSH
8330: LD_INT 8
8332: GREATER
8333: IFFALSE 8372
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8335: LD_VAR 0 11
8339: PPUSH
8340: LD_VAR 0 6
8344: PUSH
8345: LD_INT 3
8347: ARRAY
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 3
8360: ARRAY
8361: PUSH
8362: LD_INT 2
8364: ARRAY
8365: PPUSH
8366: CALL_OW 111
8370: GO 8432
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8372: LD_INT 81
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: NOT
8407: IFFALSE 8432
// begin ComExitVehicle ( i ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 11
8427: PPUSH
8428: CALL_OW 189
// end ; end else
8432: GO 8626
// if GetLives ( i ) < 400 then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 256
8443: PUSH
8444: LD_INT 400
8446: LESS
8447: IFFALSE 8498
// begin usAttackers := usAttackers diff i ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: LD_EXP 47
8458: PUSH
8459: LD_VAR 0 2
8463: DIFF
8464: ST_TO_ADDR
// usForces := usForces union i ;
8465: LD_ADDR_EXP 44
8469: PUSH
8470: LD_EXP 44
8474: PUSH
8475: LD_VAR 0 2
8479: UNION
8480: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_INT 34
8488: PPUSH
8489: LD_INT 68
8491: PPUSH
8492: CALL_OW 111
// end else
8496: GO 8626
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8498: LD_VAR 0 10
8502: PPUSH
8503: LD_INT 58
8505: PUSH
8506: EMPTY
8507: LIST
8508: PUSH
8509: LD_INT 24
8511: PUSH
8512: LD_INT 1000
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_VAR 0 2
8532: PPUSH
8533: CALL_OW 314
8537: NOT
8538: AND
8539: PUSH
8540: LD_INT 81
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 91
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: OR
8575: IFFALSE 8626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 10
8586: PPUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: LD_INT 250
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 72
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 120
// end else
8626: GO 8913
// begin if veh and GetLives ( veh ) < 760 then
8628: LD_VAR 0 11
8632: PUSH
8633: LD_VAR 0 11
8637: PPUSH
8638: CALL_OW 256
8642: PUSH
8643: LD_INT 760
8645: LESS
8646: AND
8647: IFFALSE 8698
// begin SetTag ( i , 0 ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 0
8656: PPUSH
8657: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8661: LD_VAR 0 11
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 2
8690: ARRAY
8691: PPUSH
8692: CALL_OW 111
// end else
8696: GO 8913
// if veh then
8698: LD_VAR 0 11
8702: IFFALSE 8913
// if tag <= attackFormula [ 4 ] then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_VAR 0 6
8713: PUSH
8714: LD_INT 4
8716: ARRAY
8717: LESSEQUAL
8718: IFFALSE 8879
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8720: LD_VAR 0 11
8724: PPUSH
8725: LD_VAR 0 6
8729: PUSH
8730: LD_INT 4
8732: ARRAY
8733: PUSH
8734: LD_VAR 0 4
8738: ARRAY
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_VAR 0 6
8748: PUSH
8749: LD_INT 4
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 2
8761: ARRAY
8762: PPUSH
8763: CALL_OW 297
8767: PUSH
8768: LD_INT 6
8770: GREATER
8771: IFFALSE 8822
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8773: LD_VAR 0 11
8777: PPUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_INT 4
8785: ARRAY
8786: PUSH
8787: LD_VAR 0 4
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_VAR 0 6
8801: PUSH
8802: LD_INT 4
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 4
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 114
8820: GO 8877
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8822: LD_INT 81
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 91
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: LD_INT 10
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: NOT
8857: IFFALSE 8877
// SetTag ( i , tag + 1 ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_VAR 0 4
8868: PUSH
8869: LD_INT 1
8871: PLUS
8872: PPUSH
8873: CALL_OW 109
// end else
8877: GO 8913
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8879: LD_VAR 0 11
8883: PPUSH
8884: LD_INT 81
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// end ; end ;
8913: GO 8219
8915: POP
8916: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8917: LD_EXP 47
8921: PPUSH
8922: LD_INT 52
8924: PUSH
8925: EMPTY
8926: LIST
8927: PPUSH
8928: CALL_OW 72
8932: NOT
8933: IFFALSE 7398
// end ;
8935: LD_VAR 0 1
8939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8940: LD_INT 22
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: IFFALSE 9045
8970: GO 8972
8972: DISABLE
8973: LD_INT 0
8975: PPUSH
// begin enable ;
8976: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 32
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 69
9010: PUSH
9011: FOR_IN
9012: IFFALSE 9043
// if GetFuel ( i ) < 10 then
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 261
9023: PUSH
9024: LD_INT 10
9026: LESS
9027: IFFALSE 9041
// SetFuel ( i , 10 ) ;
9029: LD_VAR 0 1
9033: PPUSH
9034: LD_INT 10
9036: PPUSH
9037: CALL_OW 240
9041: GO 9011
9043: POP
9044: POP
// end ; end_of_file
9045: PPOPN 1
9047: END
// export function Action ; var hasAll , i , tmp ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9054: LD_ADDR_VAR 0 2
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PUSH
9099: LD_INT 7
9101: GREATEREQUAL
9102: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_STRING 03_HasAll
9110: PPUSH
9111: CALL_OW 39
// Video ( true ) ;
9115: LD_INT 1
9117: PPUSH
9118: CALL 73406 0 1
// CenterNowOnUnits ( Heike ) ;
9122: LD_EXP 28
9126: PPUSH
9127: CALL_OW 87
// wait ( 0 0$2 ) ;
9131: LD_INT 70
9133: PPUSH
9134: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9138: LD_EXP 36
9142: PPUSH
9143: LD_STRING DF-1-start
9145: PPUSH
9146: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9150: LD_EXP 28
9154: PPUSH
9155: LD_EXP 36
9159: PPUSH
9160: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9164: LD_EXP 28
9168: PPUSH
9169: LD_STRING DH-1-start
9171: PPUSH
9172: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9176: LD_EXP 37
9180: PPUSH
9181: LD_INT 92
9183: PPUSH
9184: LD_INT 21
9186: PPUSH
9187: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9191: LD_EXP 32
9195: PPUSH
9196: LD_INT 94
9198: PPUSH
9199: LD_INT 23
9201: PPUSH
9202: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9206: LD_EXP 40
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PPUSH
9215: LD_INT 90
9217: PPUSH
9218: LD_INT 23
9220: PPUSH
9221: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9225: LD_EXP 40
9229: PUSH
9230: LD_INT 2
9232: ARRAY
9233: PPUSH
9234: LD_INT 93
9236: PPUSH
9237: LD_INT 25
9239: PPUSH
9240: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9244: LD_EXP 40
9248: PPUSH
9249: LD_EXP 37
9253: PPUSH
9254: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9258: LD_EXP 37
9262: PUSH
9263: LD_EXP 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: LD_EXP 28
9276: PPUSH
9277: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9281: LD_EXP 28
9285: PPUSH
9286: LD_EXP 37
9290: PPUSH
9291: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9302: LD_EXP 37
9306: PPUSH
9307: LD_INT 92
9309: PPUSH
9310: LD_INT 21
9312: PPUSH
9313: CALL_OW 307
9317: IFFALSE 9295
// Say ( Omar , DO-1-start ) ;
9319: LD_EXP 37
9323: PPUSH
9324: LD_STRING DO-1-start
9326: PPUSH
9327: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9331: LD_EXP 28
9335: PPUSH
9336: LD_STRING DH-2-start
9338: PPUSH
9339: CALL_OW 88
// if hasAll then
9343: LD_VAR 0 2
9347: IFFALSE 9475
// begin Say ( Omar , DO-2-start ) ;
9349: LD_EXP 37
9353: PPUSH
9354: LD_STRING DO-2-start
9356: PPUSH
9357: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9361: LD_EXP 37
9365: PPUSH
9366: LD_STRING DO-3-start
9368: PPUSH
9369: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9373: LD_EXP 28
9377: PPUSH
9378: LD_STRING DH-3-start
9380: PPUSH
9381: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9385: LD_EXP 36
9389: PPUSH
9390: LD_STRING DF-2-start
9392: PPUSH
9393: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_EXP 36
9406: PPUSH
9407: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9411: LD_EXP 37
9415: PPUSH
9416: LD_STRING DO-4-start
9418: PPUSH
9419: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9423: LD_EXP 36
9427: PPUSH
9428: LD_STRING DF-3-start
9430: PPUSH
9431: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9435: LD_EXP 37
9439: PPUSH
9440: LD_STRING DO-5-start
9442: PPUSH
9443: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9447: LD_EXP 36
9451: PPUSH
9452: LD_STRING DF-4-start
9454: PPUSH
9455: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_EXP 28
9468: PPUSH
9469: CALL_OW 119
// end else
9473: GO 9575
// begin Say ( Omar , DO-2-start-a ) ;
9475: LD_EXP 37
9479: PPUSH
9480: LD_STRING DO-2-start-a
9482: PPUSH
9483: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9487: LD_EXP 37
9491: PPUSH
9492: LD_STRING DO-3-start-a
9494: PPUSH
9495: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9499: LD_EXP 28
9503: PPUSH
9504: LD_STRING DH-3-start-a
9506: PPUSH
9507: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9511: LD_EXP 36
9515: PPUSH
9516: LD_STRING DF-2-start-a
9518: PPUSH
9519: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_EXP 36
9532: PPUSH
9533: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9537: LD_EXP 37
9541: PPUSH
9542: LD_STRING DO-4-start-a
9544: PPUSH
9545: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9549: LD_EXP 36
9553: PPUSH
9554: LD_STRING DF-3-start-a
9556: PPUSH
9557: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 28
9570: PPUSH
9571: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9575: LD_INT 10
9577: PPUSH
9578: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9582: LD_EXP 37
9586: PPUSH
9587: LD_STRING DO-1-mission
9589: PPUSH
9590: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9594: LD_EXP 37
9598: PPUSH
9599: LD_STRING DO-2-mission
9601: PPUSH
9602: CALL_OW 88
// if not hasAll then
9606: LD_VAR 0 2
9610: NOT
9611: IFFALSE 9625
// Say ( Omar , DO-3-mission ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING DO-3-mission
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9625: LD_EXP 37
9629: PPUSH
9630: LD_STRING DO-4-mission
9632: PPUSH
9633: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9637: LD_EXP 28
9641: PPUSH
9642: LD_STRING DH-1-mission
9644: PPUSH
9645: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9649: LD_EXP 36
9653: PPUSH
9654: LD_STRING DF-1-mission
9656: PPUSH
9657: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-5-mission
9668: PPUSH
9669: CALL_OW 88
// if not hasAll then
9673: LD_VAR 0 2
9677: NOT
9678: IFFALSE 9813
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9680: LD_ADDR_VAR 0 4
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 21
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 23
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: ST_TO_ADDR
// for i := 7 downto tmp do
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: DOUBLE
9731: LD_INT 7
9733: INC
9734: ST_TO_ADDR
9735: LD_VAR 0 4
9739: PUSH
9740: FOR_DOWNTO
9741: IFFALSE 9811
// begin if omarSquad < 3 then
9743: LD_EXP 40
9747: PUSH
9748: LD_INT 3
9750: LESS
9751: IFFALSE 9755
// break ;
9753: GO 9811
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9755: LD_EXP 40
9759: PUSH
9760: LD_INT 3
9762: ARRAY
9763: PPUSH
9764: LD_INT 2
9766: PPUSH
9767: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9771: LD_ADDR_EXP 42
9775: PUSH
9776: LD_EXP 42
9780: PUSH
9781: LD_EXP 40
9785: PUSH
9786: LD_INT 3
9788: ARRAY
9789: UNION
9790: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9791: LD_ADDR_EXP 40
9795: PUSH
9796: LD_EXP 40
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: CALL_OW 3
9808: ST_TO_ADDR
// end ;
9809: GO 9740
9811: POP
9812: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9813: LD_EXP 37
9817: PUSH
9818: LD_EXP 40
9822: ADD
9823: PPUSH
9824: LD_INT 103
9826: PPUSH
9827: LD_INT 9
9829: PPUSH
9830: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9834: LD_VAR 0 2
9838: PUSH
9839: LD_EXP 33
9843: PPUSH
9844: CALL_OW 302
9848: AND
9849: IFFALSE 9910
// begin wait ( 0 0$3 ) ;
9851: LD_INT 105
9853: PPUSH
9854: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9858: LD_EXP 33
9862: PPUSH
9863: LD_EXP 36
9867: PPUSH
9868: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9872: LD_EXP 33
9876: PPUSH
9877: LD_STRING DK-1-side
9879: PPUSH
9880: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9884: LD_EXP 36
9888: PPUSH
9889: LD_EXP 33
9893: PPUSH
9894: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9898: LD_EXP 36
9902: PPUSH
9903: LD_STRING DF-1-side
9905: PPUSH
9906: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9910: LD_INT 22
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9929: LD_EXP 36
9933: PUSH
9934: LD_EXP 39
9938: ADD
9939: PPUSH
9940: LD_INT 108
9942: PPUSH
9943: LD_INT 62
9945: PPUSH
9946: CALL_OW 111
// gameStarted := true ;
9950: LD_ADDR_EXP 3
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9958: LD_INT 105
9960: PPUSH
9961: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9965: LD_EXP 28
9969: PPUSH
9970: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9974: LD_EXP 28
9978: PPUSH
9979: LD_EXP 32
9983: PPUSH
9984: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9988: LD_INT 22
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: PUSH
10003: LD_EXP 28
10007: DIFF
10008: PPUSH
10009: LD_EXP 28
10013: PPUSH
10014: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10018: LD_EXP 28
10022: PPUSH
10023: LD_STRING DH-1-explore
10025: PPUSH
10026: CALL_OW 88
// if Givi then
10030: LD_EXP 29
10034: IFFALSE 10050
// Say ( Givi , DG-1-explore ) else
10036: LD_EXP 29
10040: PPUSH
10041: LD_STRING DG-1-explore
10043: PPUSH
10044: CALL_OW 88
10048: GO 10087
// if heikeSecondSquad then
10050: LD_EXP 42
10054: IFFALSE 10087
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10056: LD_EXP 42
10060: PPUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: LD_STRING DArm-1-explore
10082: PPUSH
10083: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10087: LD_EXP 32
10091: PPUSH
10092: LD_STRING DA-1-explore
10094: PPUSH
10095: CALL_OW 88
// if Sophia then
10099: LD_EXP 34
10103: IFFALSE 10181
// begin Say ( Sophia , DS-2-explore ) ;
10105: LD_EXP 34
10109: PPUSH
10110: LD_STRING DS-2-explore
10112: PPUSH
10113: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10117: LD_EXP 32
10121: PPUSH
10122: LD_STRING DA-2-explore
10124: PPUSH
10125: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10129: LD_EXP 34
10133: PPUSH
10134: LD_EXP 32
10138: PPUSH
10139: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10143: LD_EXP 32
10147: PPUSH
10148: LD_EXP 34
10152: PPUSH
10153: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10157: LD_EXP 34
10161: PPUSH
10162: LD_STRING DS-3-explore
10164: PPUSH
10165: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10169: LD_EXP 32
10173: PPUSH
10174: LD_STRING DA-3-explore
10176: PPUSH
10177: CALL_OW 88
// end ; if Mike then
10181: LD_EXP 30
10185: IFFALSE 10241
// begin Say ( Mike , DM-1-explore ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DM-1-explore
10194: PPUSH
10195: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10199: LD_EXP 28
10203: PPUSH
10204: LD_STRING DH-2-explore
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DM-2-explore
10218: PPUSH
10219: CALL_OW 88
// if Kaia then
10223: LD_EXP 33
10227: IFFALSE 10241
// Say ( Kaia , DK-1-explore ) ;
10229: LD_EXP 33
10233: PPUSH
10234: LD_STRING DK-1-explore
10236: PPUSH
10237: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10241: LD_INT 22
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: PPUSH
10256: CALL_OW 139
// Video ( false ) ;
10260: LD_INT 0
10262: PPUSH
10263: CALL 73406 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10267: LD_STRING BuildBase
10269: PPUSH
10270: CALL_OW 337
// SaveForQuickRestart ;
10274: CALL_OW 22
// end ;
10278: LD_VAR 0 1
10282: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10283: LD_EXP 5
10287: NOT
10288: PUSH
10289: LD_EXP 6
10293: NOT
10294: AND
10295: PUSH
10296: LD_INT 5
10298: PPUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 70
10313: AND
10314: PUSH
10315: LD_EXP 6
10319: NOT
10320: AND
10321: IFFALSE 10406
10323: GO 10325
10325: DISABLE
// begin if Mike then
10326: LD_EXP 30
10330: IFFALSE 10346
// Say ( Mike , DM-1-scout ) else
10332: LD_EXP 30
10336: PPUSH
10337: LD_STRING DM-1-scout
10339: PPUSH
10340: CALL_OW 88
10344: GO 10377
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10346: LD_EXP 42
10350: PPUSH
10351: LD_INT 26
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 72
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_STRING DArm-1-explore
10372: PPUSH
10373: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10377: LD_INT 54
10379: PPUSH
10380: LD_INT 35
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10393: LD_INT 54
10395: PPUSH
10396: LD_INT 35
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 331
// end ;
10406: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10407: LD_INT 6
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 70
10424: PUSH
10425: LD_EXP 6
10429: NOT
10430: AND
10431: IFFALSE 10685
10433: GO 10435
10435: DISABLE
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
10440: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_EXP 42
10450: PPUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PPUSH
10461: CALL_OW 72
10465: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_EXP 42
10475: PPUSH
10476: LD_INT 26
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: ST_TO_ADDR
// DialogueOn ;
10491: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10495: LD_INT 36
10497: PPUSH
10498: LD_INT 22
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: LD_INT 8
10506: PPUSH
10507: CALL_OW 330
// dwait ( 0 0$1 ) ;
10511: LD_INT 35
10513: PPUSH
10514: CALL_OW 68
// speakerOk := false ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// if Mike then
10526: LD_EXP 30
10530: IFFALSE 10552
// speakerOk := Say ( Mike , DM-1-spot ) else
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_EXP 30
10541: PPUSH
10542: LD_STRING DM-1-spot
10544: PPUSH
10545: CALL_OW 88
10549: ST_TO_ADDR
10550: GO 10580
// if randomMen then
10552: LD_VAR 0 1
10556: IFFALSE 10580
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_STRING DArm-1-spot-a
10574: PPUSH
10575: CALL_OW 88
10579: ST_TO_ADDR
// if speakerOk then
10580: LD_VAR 0 3
10584: IFFALSE 10628
// begin if Givi then
10586: LD_EXP 29
10590: IFFALSE 10606
// Say ( Givi , DG-1-spot ) else
10592: LD_EXP 29
10596: PPUSH
10597: LD_STRING DG-1-spot
10599: PPUSH
10600: CALL_OW 88
10604: GO 10628
// if randomWomen then
10606: LD_VAR 0 2
10610: IFFALSE 10628
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10612: LD_VAR 0 2
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PPUSH
10621: LD_STRING DArf-1-spot-a
10623: PPUSH
10624: CALL_OW 88
// end ; if Mike then
10628: LD_EXP 30
10632: IFFALSE 10648
// Say ( Heike , DH-1-spot ) else
10634: LD_EXP 28
10638: PPUSH
10639: LD_STRING DH-1-spot
10641: PPUSH
10642: CALL_OW 88
10646: GO 10660
// Say ( Heike , DH-1-spot-a ) ;
10648: LD_EXP 28
10652: PPUSH
10653: LD_STRING DH-1-spot-a
10655: PPUSH
10656: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10660: LD_INT 36
10662: PPUSH
10663: LD_INT 22
10665: PPUSH
10666: LD_INT 2
10668: PPUSH
10669: CALL_OW 331
// DialogueOff ;
10673: CALL_OW 7
// americanBaseSpoted := true ;
10677: LD_ADDR_EXP 5
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: PPOPN 3
10687: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10688: LD_EXP 5
10692: NOT
10693: PUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: AND
10723: PUSH
10724: LD_EXP 6
10728: NOT
10729: AND
10730: IFFALSE 10816
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
// begin americanBaseSpoted := true ;
10738: LD_ADDR_EXP 5
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_EXP 42
10755: PPUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 72
10770: ST_TO_ADDR
// if not randomMen then
10771: LD_VAR 0 1
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10816
// DialogueOn ;
10780: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10784: LD_VAR 0 1
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: LD_STRING DArm-1-spot-a
10795: PPUSH
10796: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10800: LD_EXP 28
10804: PPUSH
10805: LD_STRING DH-1-spot-a
10807: PPUSH
10808: CALL_OW 88
// DialogueOff ;
10812: CALL_OW 7
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10819: LD_INT 11
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: PUSH
10831: LD_INT 7
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 50
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 31
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 70
10876: OR
10877: PUSH
10878: LD_INT 7
10880: PPUSH
10881: LD_INT 22
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 70
10895: PUSH
10896: LD_INT 1
10898: GREATER
10899: OR
10900: PUSH
10901: LD_EXP 44
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: OR
10910: IFFALSE 11489
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
// begin wait ( 0 0$3 ) ;
10919: LD_INT 105
10921: PPUSH
10922: CALL_OW 67
// americanStartRun := true ;
10926: LD_ADDR_EXP 14
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// if IsOk ( usCommander ) then
10934: LD_EXP 45
10938: PPUSH
10939: CALL_OW 302
10943: IFFALSE 10973
// begin usForces := usForces union usCommander ;
10945: LD_ADDR_EXP 44
10949: PUSH
10950: LD_EXP 44
10954: PUSH
10955: LD_EXP 45
10959: UNION
10960: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10961: LD_EXP 45
10965: PPUSH
10966: LD_STRING DUsm-1-assault
10968: PPUSH
10969: CALL_OW 88
// end ; for i in usForces do
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_EXP 44
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11030
// begin if IsInUnit ( i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: CALL_OW 310
10995: IFFALSE 11006
// ComExitBuilding ( i ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 122
// wait ( 3 ) ;
11006: LD_INT 3
11008: PPUSH
11009: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: LD_INT 34
11020: PPUSH
11021: LD_INT 67
11023: PPUSH
11024: CALL_OW 111
// end ;
11028: GO 10983
11030: POP
11031: POP
// Say ( Heike , DH-1-assault ) ;
11032: LD_EXP 28
11036: PPUSH
11037: LD_STRING DH-1-assault
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_INT 34
11058: PPUSH
11059: LD_INT 67
11061: PPUSH
11062: CALL_OW 111
// until not usForces ;
11066: LD_EXP 44
11070: NOT
11071: IFFALSE 11044
// music_nat := 2 ;
11073: LD_ADDR_OWVAR 71
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// music_class := music_victory ;
11081: LD_ADDR_OWVAR 72
11085: PUSH
11086: LD_INT 4
11088: ST_TO_ADDR
// if not americanHasEscaped then
11089: LD_EXP 8
11093: NOT
11094: IFFALSE 11115
// begin Say ( Heike , DH-2-assault ) ;
11096: LD_EXP 28
11100: PPUSH
11101: LD_STRING DH-2-assault
11103: PPUSH
11104: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11108: LD_STRING ACH_CLEAN
11110: PPUSH
11111: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11115: LD_INT 70
11117: PPUSH
11118: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11122: LD_INT 35
11124: PPUSH
11125: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11129: LD_INT 22
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: NOT
11172: IFFALSE 11122
// InGameOn ;
11174: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11178: LD_INT 11
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: NOT
11190: IFFALSE 11202
// SetSide ( usDepot , 2 ) ;
11192: LD_INT 11
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11202: LD_INT 35
11204: PPUSH
11205: LD_INT 22
11207: PPUSH
11208: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11212: LD_EXP 28
11216: PPUSH
11217: LD_INT 35
11219: PPUSH
11220: LD_INT 22
11222: PPUSH
11223: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11227: LD_EXP 28
11231: PPUSH
11232: LD_INT 38
11234: PPUSH
11235: LD_INT 25
11237: PPUSH
11238: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11242: LD_EXP 41
11246: PUSH
11247: LD_EXP 42
11251: UNION
11252: PPUSH
11253: LD_INT 39
11255: PPUSH
11256: LD_INT 26
11258: PPUSH
11259: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11263: LD_EXP 41
11267: PUSH
11268: LD_EXP 42
11272: UNION
11273: PPUSH
11274: LD_EXP 28
11278: PPUSH
11279: CALL_OW 179
// p := 0 ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11291: LD_INT 35
11293: PPUSH
11294: CALL_OW 67
// p := p + 1 ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11312: LD_EXP 28
11316: PPUSH
11317: CALL_OW 314
11321: NOT
11322: PUSH
11323: LD_VAR 0 2
11327: PUSH
11328: LD_INT 10
11330: GREATER
11331: OR
11332: IFFALSE 11291
// Say ( Heike , DH-1-capture ) ;
11334: LD_EXP 28
11338: PPUSH
11339: LD_STRING DH-1-capture
11341: PPUSH
11342: CALL_OW 88
// if Markov then
11346: LD_EXP 35
11350: IFFALSE 11364
// Say ( Markov , DMar-1-capture ) ;
11352: LD_EXP 35
11356: PPUSH
11357: LD_STRING DMar-1-capture
11359: PPUSH
11360: CALL_OW 88
// if Sophia then
11364: LD_EXP 34
11368: IFFALSE 11394
// begin Say ( Heike , DH-2-capture ) ;
11370: LD_EXP 28
11374: PPUSH
11375: LD_STRING DH-2-capture
11377: PPUSH
11378: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11382: LD_EXP 34
11386: PPUSH
11387: LD_STRING DS-1-capture
11389: PPUSH
11390: CALL_OW 88
// end ; InGameOff ;
11394: CALL_OW 9
// music_nat := music_auto ;
11398: LD_ADDR_OWVAR 71
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// music_class := music_auto ;
11406: LD_ADDR_OWVAR 72
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11414: LD_STRING ConstructBase
11416: PPUSH
11417: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11472
// SetSide ( i , 2 ) ;
11458: LD_VAR 0 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 235
11470: GO 11455
11472: POP
11473: POP
// wait ( 0 0$3 ) ;
11474: LD_INT 105
11476: PPUSH
11477: CALL_OW 67
// americanBaseCaptured := true ;
11481: LD_ADDR_EXP 6
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// end ;
11489: PPOPN 2
11491: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11492: LD_EXP 13
11496: PUSH
11497: LD_INT 3
11499: GREATEREQUAL
11500: IFFALSE 11512
11502: GO 11504
11504: DISABLE
// SetAchievement ( ACH_ENG ) ;
11505: LD_STRING ACH_ENG
11507: PPUSH
11508: CALL_OW 543
11512: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11513: LD_INT 22
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 15
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: PUSH
11542: LD_INT 4
11544: GREATEREQUAL
11545: IFFALSE 11557
11547: GO 11549
11549: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11550: LD_STRING ACH_APEGEN
11552: PPUSH
11553: CALL_OW 543
11557: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11558: LD_INT 22
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: LD_INT 57
11583: PUSH
11584: EMPTY
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: IFFALSE 11865
11602: GO 11604
11604: DISABLE
// begin workshopBuilded := true ;
11605: LD_ADDR_EXP 10
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if IsOk ( Markov ) then
11613: LD_EXP 35
11617: PPUSH
11618: CALL_OW 302
11622: IFFALSE 11681
// begin Say ( Heike , DH-1-shop-a ) ;
11624: LD_EXP 28
11628: PPUSH
11629: LD_STRING DH-1-shop-a
11631: PPUSH
11632: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11636: LD_INT 47
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 321
11646: PUSH
11647: LD_INT 2
11649: EQUAL
11650: PUSH
11651: LD_INT 45
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: CALL_OW 321
11661: PUSH
11662: LD_INT 2
11664: EQUAL
11665: AND
11666: NOT
11667: IFFALSE 11681
// Say ( Markov , DMar-1-shop-a ) ;
11669: LD_EXP 35
11673: PPUSH
11674: LD_STRING DMar-1-shop-a
11676: PPUSH
11677: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11688: LD_INT 47
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: PUSH
11703: LD_INT 45
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 321
11713: PUSH
11714: LD_INT 2
11716: EQUAL
11717: OR
11718: IFFALSE 11681
// if IsOk ( Markov ) and IsOk ( Heike ) then
11720: LD_EXP 35
11724: PPUSH
11725: CALL_OW 302
11729: PUSH
11730: LD_EXP 28
11734: PPUSH
11735: CALL_OW 302
11739: AND
11740: IFFALSE 11858
// begin DialogueOn ;
11742: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11746: LD_EXP 35
11750: PPUSH
11751: LD_STRING DMar-1-shop
11753: PPUSH
11754: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11758: LD_EXP 28
11762: PPUSH
11763: LD_STRING DH-1-shop
11765: PPUSH
11766: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11770: LD_EXP 35
11774: PPUSH
11775: LD_STRING DMar-2-shop
11777: PPUSH
11778: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11782: LD_EXP 35
11786: PPUSH
11787: LD_STRING DMar-3-shop
11789: PPUSH
11790: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11794: LD_EXP 28
11798: PPUSH
11799: LD_STRING DH-2-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11806: LD_EXP 35
11810: PPUSH
11811: LD_STRING DMar-4-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11818: LD_EXP 28
11822: PPUSH
11823: LD_STRING DH-3-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-5-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-4-shop
11849: PPUSH
11850: CALL_OW 88
// DialogueOff ;
11854: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11858: LD_STRING ConstructVeh
11860: PPUSH
11861: CALL_OW 337
// end ;
11865: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11866: LD_INT 2
11868: PPUSH
11869: LD_INT 2
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL 36760 0 3
11879: PUSH
11880: LD_INT 0
11882: EQUAL
11883: IFFALSE 11895
11885: GO 11887
11887: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11888: LD_STRING Techs
11890: PPUSH
11891: CALL_OW 337
11895: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11896: LD_EXP 35
11900: PPUSH
11901: CALL_OW 302
11905: PUSH
11906: LD_INT 22
11908: PUSH
11909: LD_INT 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 34
11921: PUSH
11922: LD_INT 22
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 35
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL_OW 69
11952: AND
11953: IFFALSE 12060
11955: GO 11957
11957: DISABLE
// begin DialogueOn ;
11958: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11962: LD_INT 22
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: LD_INT 34
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 35
11987: PUSH
11988: LD_INT 22
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PPUSH
12009: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12013: LD_INT 10
12015: PPUSH
12016: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12020: LD_EXP 28
12024: PPUSH
12025: LD_STRING DH-1-bal
12027: PPUSH
12028: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12032: LD_EXP 35
12036: PPUSH
12037: LD_STRING DMar-1-bal
12039: PPUSH
12040: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12044: LD_EXP 28
12048: PPUSH
12049: LD_STRING DH-2-bal
12051: PPUSH
12052: CALL_OW 88
// DialogueOff ;
12056: CALL_OW 7
// end ;
12060: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12061: LD_EXP 32
12065: PPUSH
12066: CALL_OW 302
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 2
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 30
12083: PUSH
12084: LD_INT 6
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: AND
12100: IFFALSE 12161
12102: GO 12104
12104: DISABLE
// begin DialogueOn ;
12105: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12109: LD_EXP 32
12113: PPUSH
12114: LD_STRING DA-1-lab
12116: PPUSH
12117: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12121: LD_EXP 28
12125: PPUSH
12126: LD_STRING DH-1-lab
12128: PPUSH
12129: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12133: LD_EXP 32
12137: PPUSH
12138: LD_STRING DA-2-lab
12140: PPUSH
12141: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12145: LD_EXP 28
12149: PPUSH
12150: LD_STRING DH-2-lab
12152: PPUSH
12153: CALL_OW 88
// DialogueOff ;
12157: CALL_OW 7
// end ;
12161: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12162: LD_EXP 33
12166: PPUSH
12167: CALL_OW 302
12171: PUSH
12172: LD_INT 22
12174: PUSH
12175: LD_INT 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 25
12184: PUSH
12185: LD_INT 15
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: AND
12201: PUSH
12202: LD_INT 81
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: NOT
12217: AND
12218: IFFALSE 12400
12220: GO 12222
12222: DISABLE
12223: LD_INT 0
12225: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_INT 22
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 15
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// InGameOn ;
12260: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12277: LD_VAR 0 1
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12290: LD_EXP 33
12294: PPUSH
12295: LD_STRING DK-1-apesol
12297: PPUSH
12298: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12302: LD_VAR 0 1
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_INT 35
12313: PPUSH
12314: LD_INT 28
12316: PPUSH
12317: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12321: LD_VAR 0 1
12325: PUSH
12326: LD_INT 1
12328: ARRAY
12329: PPUSH
12330: LD_INT 36
12332: PPUSH
12333: LD_INT 17
12335: PPUSH
12336: CALL_OW 171
// DialogueOn ;
12340: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12344: LD_EXP 32
12348: PPUSH
12349: LD_STRING DA-1-apesol
12351: PPUSH
12352: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12356: LD_EXP 33
12360: PPUSH
12361: LD_STRING DK-2-apesol
12363: PPUSH
12364: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12368: LD_EXP 32
12372: PPUSH
12373: LD_STRING DA-2-apesol
12375: PPUSH
12376: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12380: LD_EXP 33
12384: PPUSH
12385: LD_STRING DK-3-apesol
12387: PPUSH
12388: CALL_OW 88
// DialogueOff ;
12392: CALL_OW 7
// InGameOff ;
12396: CALL_OW 9
// end ;
12400: PPOPN 1
12402: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12403: LD_EXP 34
12407: PPUSH
12408: CALL_OW 302
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 25
12425: PUSH
12426: LD_INT 16
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 69
12441: AND
12442: PUSH
12443: LD_INT 81
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 69
12457: NOT
12458: AND
12459: IFFALSE 12744
12461: GO 12463
12463: DISABLE
12464: LD_INT 0
12466: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 2
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 25
12484: PUSH
12485: LD_INT 16
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: ST_TO_ADDR
// InGameOn ;
12501: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12505: LD_INT 35
12507: PPUSH
12508: LD_INT 22
12510: PPUSH
12511: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12515: LD_INT 5
12517: PPUSH
12518: LD_INT 35
12520: PPUSH
12521: LD_INT 22
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12531: LD_EXP 34
12535: PPUSH
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12549: LD_VAR 0 1
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12562: LD_VAR 0 1
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: CALL_OW 122
// wait ( 0 0$2 ) ;
12575: LD_INT 70
12577: PPUSH
12578: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12582: LD_EXP 34
12586: PPUSH
12587: LD_STRING DS-1-apeeng
12589: PPUSH
12590: CALL_OW 88
// if IsOk ( Kamil ) then
12594: LD_EXP 31
12598: PPUSH
12599: CALL_OW 302
12603: IFFALSE 12740
// begin Say ( Kamil , DKam-1-apeeng ) ;
12605: LD_EXP 31
12609: PPUSH
12610: LD_STRING DKam-1-apeeng
12612: PPUSH
12613: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12617: LD_EXP 34
12621: PPUSH
12622: LD_STRING DS-2-apeeng
12624: PPUSH
12625: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12629: LD_EXP 31
12633: PPUSH
12634: LD_STRING DKam-2-apeeng
12636: PPUSH
12637: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12641: LD_EXP 34
12645: PPUSH
12646: LD_STRING DS-3-apeeng
12648: PPUSH
12649: CALL_OW 88
// if not IsOK ( Kaia ) then
12653: LD_EXP 33
12657: PPUSH
12658: CALL_OW 302
12662: NOT
12663: IFFALSE 12671
// begin InGameOff ;
12665: CALL_OW 9
// exit ;
12669: GO 12744
// end ; Say ( Kaia , DK-1-apeeng ) ;
12671: LD_EXP 33
12675: PPUSH
12676: LD_STRING DK-1-apeeng
12678: PPUSH
12679: CALL_OW 88
// if not IsOk ( Givi ) then
12683: LD_EXP 29
12687: PPUSH
12688: CALL_OW 302
12692: NOT
12693: IFFALSE 12704
// begin Video ( false ) ;
12695: LD_INT 0
12697: PPUSH
12698: CALL 73406 0 1
// exit ;
12702: GO 12744
// end ; Say ( Givi , DG-1-apeeng ) ;
12704: LD_EXP 29
12708: PPUSH
12709: LD_STRING DG-1-apeeng
12711: PPUSH
12712: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12716: LD_EXP 33
12720: PPUSH
12721: LD_STRING DK-2-apeeng
12723: PPUSH
12724: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12728: LD_EXP 33
12732: PPUSH
12733: LD_STRING DK-3-apeeng
12735: PPUSH
12736: CALL_OW 88
// end ; InGameOff ;
12740: CALL_OW 9
// end ;
12744: PPOPN 1
12746: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12747: LD_EXP 4
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_INT 2
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 0
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 69
12780: AND
12781: IFFALSE 12946
12783: GO 12785
12785: DISABLE
// begin wait ( 0 0$10 ) ;
12786: LD_INT 350
12788: PPUSH
12789: CALL_OW 67
// DialogueOn ;
12793: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12797: LD_EXP 36
12801: PPUSH
12802: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12806: LD_EXP 36
12810: PPUSH
12811: LD_STRING DF-1-distribution
12813: PPUSH
12814: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12818: LD_EXP 28
12822: PPUSH
12823: LD_STRING DH-2-distribution
12825: PPUSH
12826: CALL_OW 88
// if IsOk ( Kaia ) then
12830: LD_EXP 33
12834: PPUSH
12835: CALL_OW 302
12839: IFFALSE 12900
// begin Say ( Kaia , DK-1-distribution ) ;
12841: LD_EXP 33
12845: PPUSH
12846: LD_STRING DK-1-distribution
12848: PPUSH
12849: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12853: LD_EXP 28
12857: PPUSH
12858: LD_STRING DH-1-distribution
12860: PPUSH
12861: CALL_OW 88
// if IsOk ( Givi ) then
12865: LD_EXP 29
12869: PPUSH
12870: CALL_OW 302
12874: IFFALSE 12900
// begin Say ( Givi , DG-1-distribution ) ;
12876: LD_EXP 29
12880: PPUSH
12881: LD_STRING DG-1-distribution
12883: PPUSH
12884: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12888: LD_EXP 28
12892: PPUSH
12893: LD_STRING DH-3-distribution
12895: PPUSH
12896: CALL_OW 88
// end ; end ; DialogueOff ;
12900: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12904: LD_STRING Crates1
12906: PPUSH
12907: CALL_OW 337
// farmerRequestedCrates := 300 ;
12911: LD_ADDR_EXP 16
12915: PUSH
12916: LD_INT 300
12918: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12919: LD_STRING FarmerCrates
12921: PPUSH
12922: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12926: LD_INT 10
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12936: LD_INT 108
12938: PPUSH
12939: LD_INT 61
12941: PPUSH
12942: CALL_OW 86
// end ;
12946: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12947: LD_EXP 6
12951: PUSH
12952: LD_INT 22
12954: PUSH
12955: LD_INT 2
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 3
12964: PUSH
12965: LD_INT 57
12967: PUSH
12968: EMPTY
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: LD_INT 30
12980: PUSH
12981: LD_INT 6
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 30
12990: PUSH
12991: LD_INT 7
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: PPUSH
13008: CALL_OW 69
13012: AND
13013: PUSH
13014: LD_INT 22
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: LD_INT 57
13029: PUSH
13030: EMPTY
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 30
13039: PUSH
13040: LD_INT 4
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: AND
13057: IFFALSE 13221
13059: GO 13061
13061: DISABLE
13062: LD_INT 0
13064: PPUSH
// begin wait ( 0 0$10 ) ;
13065: LD_INT 350
13067: PPUSH
13068: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13072: LD_ADDR_VAR 0 1
13076: PUSH
13077: LD_EXP 42
13081: PPUSH
13082: LD_INT 26
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 25
13094: PUSH
13095: LD_INT 2
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PPUSH
13106: CALL_OW 72
13110: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13111: LD_EXP 28
13115: PPUSH
13116: LD_STRING DH-1-task
13118: PPUSH
13119: CALL_OW 88
// if IsOk ( Sophia ) then
13123: LD_EXP 34
13127: PPUSH
13128: CALL_OW 302
13132: IFFALSE 13172
// begin Say ( Sophia , DS-1-task ) ;
13134: LD_EXP 34
13138: PPUSH
13139: LD_STRING DS-1-task
13141: PPUSH
13142: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13146: LD_EXP 34
13150: PPUSH
13151: LD_STRING DS-2-task
13153: PPUSH
13154: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13158: LD_EXP 28
13162: PPUSH
13163: LD_STRING DH-2-task
13165: PPUSH
13166: CALL_OW 88
// end else
13170: GO 13206
// if eng then
13172: LD_VAR 0 1
13176: IFFALSE 13206
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13178: LD_VAR 0 1
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: LD_STRING DArm-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13194: LD_EXP 28
13198: PPUSH
13199: LD_STRING DH-2-task
13201: PPUSH
13202: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13206: LD_STRING BaseConstructed
13208: PPUSH
13209: CALL_OW 337
// allowConvoys := true ;
13213: LD_ADDR_EXP 12
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// end ;
13221: PPOPN 1
13223: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13224: LD_INT 22
13226: PUSH
13227: LD_INT 4
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 34
13236: PUSH
13237: LD_INT 12
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PPUSH
13248: CALL_OW 69
13252: IFFALSE 13420
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
// begin wait ( 0 0$2 ) ;
13262: LD_INT 70
13264: PPUSH
13265: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13269: LD_ADDR_VAR 0 1
13273: PUSH
13274: LD_INT 22
13276: PUSH
13277: LD_INT 4
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 34
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 69
13302: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13303: LD_ADDR_VAR 0 2
13307: PUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: CALL_OW 250
13321: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13322: LD_ADDR_VAR 0 3
13326: PUSH
13327: LD_VAR 0 1
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: CALL_OW 251
13340: ST_TO_ADDR
// DialogueOn ;
13341: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13359: LD_VAR 0 2
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: LD_INT 6
13374: NEG
13375: PPUSH
13376: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13380: LD_INT 10
13382: PPUSH
13383: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13387: LD_EXP 28
13391: PPUSH
13392: LD_STRING DH-1-seecargo
13394: PPUSH
13395: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13399: LD_VAR 0 2
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 2
13411: PPUSH
13412: CALL_OW 331
// DialogueOff ;
13416: CALL_OW 7
// end ;
13420: PPOPN 3
13422: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13423: LD_EXP 4
13427: PUSH
13428: LD_EXP 15
13432: PUSH
13433: LD_INT 300
13435: GREATEREQUAL
13436: AND
13437: IFFALSE 13509
13439: GO 13441
13441: DISABLE
// begin DialogueOn ;
13442: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13446: LD_EXP 36
13450: PPUSH
13451: LD_STRING DF-1-delivery-2
13453: PPUSH
13454: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13458: LD_EXP 28
13462: PPUSH
13463: LD_STRING DH-1-delivery-2
13465: PPUSH
13466: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13470: LD_EXP 36
13474: PPUSH
13475: LD_STRING DF-2-delivery-2
13477: PPUSH
13478: CALL_OW 94
// DialogueOff ;
13482: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13486: LD_STRING Crates2
13488: PPUSH
13489: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13493: LD_ADDR_EXP 17
13497: PUSH
13498: LD_INT 63000
13500: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13501: LD_ADDR_EXP 16
13505: PUSH
13506: LD_INT 600
13508: ST_TO_ADDR
// end ;
13509: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13510: LD_EXP 4
13514: PUSH
13515: LD_EXP 15
13519: PUSH
13520: LD_INT 600
13522: GREATEREQUAL
13523: AND
13524: PUSH
13525: LD_OWVAR 67
13529: PUSH
13530: LD_INT 1
13532: GREATER
13533: AND
13534: IFFALSE 13700
13536: GO 13538
13538: DISABLE
// begin DialogueOn ;
13539: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13543: LD_EXP 36
13547: PPUSH
13548: LD_STRING DF-1-delivery-3
13550: PPUSH
13551: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13555: LD_EXP 28
13559: PPUSH
13560: LD_STRING DH-1-delivery-3
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13567: LD_EXP 36
13571: PPUSH
13572: LD_STRING DF-2-delivery-3
13574: PPUSH
13575: CALL_OW 94
// if IsOk ( Kaia ) then
13579: LD_EXP 33
13583: PPUSH
13584: CALL_OW 302
13588: IFFALSE 13638
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13590: LD_EXP 33
13594: PPUSH
13595: LD_STRING DK-1-delivery-3
13597: PPUSH
13598: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13602: LD_EXP 28
13606: PPUSH
13607: LD_STRING DH-2-delivery-3
13609: PPUSH
13610: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13614: LD_EXP 29
13618: PPUSH
13619: LD_STRING DG-1-delivery-3
13621: PPUSH
13622: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13626: LD_EXP 30
13630: PPUSH
13631: LD_STRING DM-1-delivery-3
13633: PPUSH
13634: CALL_OW 88
// end ; DialogueOff ;
13638: CALL_OW 7
// if Difficulty = 2 then
13642: LD_OWVAR 67
13646: PUSH
13647: LD_INT 2
13649: EQUAL
13650: IFFALSE 13677
// begin ChangeMissionObjectives ( Crates3 ) ;
13652: LD_STRING Crates3
13654: PPUSH
13655: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13659: LD_ADDR_EXP 17
13663: PUSH
13664: LD_INT 63000
13666: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13667: LD_ADDR_EXP 16
13671: PUSH
13672: LD_INT 900
13674: ST_TO_ADDR
// end else
13675: GO 13700
// begin ChangeMissionObjectives ( Crates4 ) ;
13677: LD_STRING Crates4
13679: PPUSH
13680: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13684: LD_ADDR_EXP 17
13688: PUSH
13689: LD_INT 63000
13691: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13692: LD_ADDR_EXP 16
13696: PUSH
13697: LD_INT 1200
13699: ST_TO_ADDR
// end ; end ;
13700: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13701: LD_EXP 4
13705: PUSH
13706: LD_EXP 15
13710: PUSH
13711: LD_INT 600
13713: PUSH
13714: LD_INT 900
13716: PUSH
13717: LD_INT 1200
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: LD_OWVAR 67
13729: ARRAY
13730: GREATEREQUAL
13731: AND
13732: PUSH
13733: LD_EXP 16
13737: PUSH
13738: LD_EXP 17
13742: LESSEQUAL
13743: AND
13744: IFFALSE 13830
13746: GO 13748
13748: DISABLE
// begin retreatAllowed := true ;
13749: LD_ADDR_EXP 11
13753: PUSH
13754: LD_INT 1
13756: ST_TO_ADDR
// display_strings := [ ] ;
13757: LD_ADDR_OWVAR 47
13761: PUSH
13762: EMPTY
13763: ST_TO_ADDR
// DialogueOn ;
13764: CALL_OW 6
// InGameOn ;
13768: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13772: LD_EXP 37
13776: PPUSH
13777: LD_STRING DO-radio-end
13779: PPUSH
13780: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13784: LD_EXP 28
13788: PPUSH
13789: LD_STRING DH-1-radio-end
13791: PPUSH
13792: CALL_OW 88
// InGameOff ;
13796: CALL_OW 9
// DialogueOff ;
13800: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13804: LD_STRING Retreat
13806: PPUSH
13807: CALL_OW 337
// wait ( 0 0$2 ) ;
13811: LD_INT 70
13813: PPUSH
13814: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13818: LD_EXP 28
13822: PPUSH
13823: LD_STRING DH-2-radio-end
13825: PPUSH
13826: CALL_OW 88
// end ;
13830: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13831: LD_EXP 11
13835: IFFALSE 13966
13837: GO 13839
13839: DISABLE
13840: LD_INT 0
13842: PPUSH
13843: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13844: LD_INT 10
13846: PPUSH
13847: LD_INT 0
13849: PPUSH
13850: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13854: LD_ADDR_VAR 0 1
13858: PUSH
13859: LD_EXP 39
13863: PPUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 72
13878: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13879: LD_VAR 0 1
13883: PUSH
13884: LD_INT 102
13886: PPUSH
13887: LD_INT 69
13889: PPUSH
13890: CALL_OW 428
13894: PUSH
13895: LD_INT 0
13897: EQUAL
13898: AND
13899: IFFALSE 13966
// begin for i in tmp do
13901: LD_ADDR_VAR 0 2
13905: PUSH
13906: LD_VAR 0 1
13910: PUSH
13911: FOR_IN
13912: IFFALSE 13936
// if IsInUnit ( i ) then
13914: LD_VAR 0 2
13918: PPUSH
13919: CALL_OW 310
13923: IFFALSE 13934
// ComExitBuilding ( i ) ;
13925: LD_VAR 0 2
13929: PPUSH
13930: CALL_OW 122
13934: GO 13911
13936: POP
13937: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13938: LD_VAR 0 1
13942: PPUSH
13943: LD_INT 31
13945: PPUSH
13946: LD_INT 102
13948: PPUSH
13949: LD_INT 69
13951: PPUSH
13952: LD_INT 2
13954: PPUSH
13955: CALL_OW 205
// wait ( 0 0$3 ) ;
13959: LD_INT 105
13961: PPUSH
13962: CALL_OW 67
// end ; end ;
13966: PPOPN 2
13968: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13969: LD_EXP 11
13973: NOT
13974: PUSH
13975: LD_INT 5
13977: PPUSH
13978: CALL_OW 301
13982: AND
13983: IFFALSE 14015
13985: GO 13987
13987: DISABLE
// begin DialogueOn ;
13988: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13992: LD_EXP 36
13996: PPUSH
13997: LD_STRING DF-1-failure
13999: PPUSH
14000: CALL_OW 94
// DialogueOff ;
14004: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14008: LD_STRING FarmerDepot
14010: PPUSH
14011: CALL_OW 104
// end ;
14015: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14016: LD_EXP 11
14020: PUSH
14021: LD_EXP 28
14025: PPUSH
14026: LD_EXP 36
14030: PPUSH
14031: CALL_OW 296
14035: PUSH
14036: LD_INT 12
14038: LESS
14039: AND
14040: PUSH
14041: LD_INT 81
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 21
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PPUSH
14065: CALL_OW 69
14069: NOT
14070: AND
14071: IFFALSE 14723
14073: GO 14075
14075: DISABLE
14076: LD_INT 0
14078: PPUSH
14079: PPUSH
14080: PPUSH
// begin allowConvoys := false ;
14081: LD_ADDR_EXP 12
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// InGameOn ;
14089: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14093: LD_EXP 28
14097: PPUSH
14098: LD_EXP 36
14102: PPUSH
14103: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14107: LD_EXP 36
14111: PPUSH
14112: LD_EXP 28
14116: PPUSH
14117: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14121: LD_EXP 36
14125: PPUSH
14126: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14130: LD_EXP 28
14134: PPUSH
14135: LD_STRING DH-1-end
14137: PPUSH
14138: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14142: LD_EXP 36
14146: PPUSH
14147: LD_STRING DF-1-end
14149: PPUSH
14150: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14154: LD_EXP 36
14158: PPUSH
14159: LD_STRING DF-2-end
14161: PPUSH
14162: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14166: LD_EXP 28
14170: PPUSH
14171: LD_STRING DH-2-end
14173: PPUSH
14174: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14178: LD_EXP 36
14182: PPUSH
14183: LD_STRING DF-3-end
14185: PPUSH
14186: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14190: LD_EXP 28
14194: PPUSH
14195: LD_STRING DH-3-end
14197: PPUSH
14198: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14202: LD_EXP 29
14206: PPUSH
14207: LD_STRING DG-1-end
14209: PPUSH
14210: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14214: LD_EXP 28
14218: PPUSH
14219: LD_STRING DH-4-end
14221: PPUSH
14222: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14226: LD_EXP 36
14230: PPUSH
14231: LD_STRING DF-4-end
14233: PPUSH
14234: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14238: LD_EXP 28
14242: PPUSH
14243: LD_STRING DH-5-end
14245: PPUSH
14246: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14250: LD_EXP 36
14254: PPUSH
14255: LD_STRING DF-5-end
14257: PPUSH
14258: CALL_OW 88
// InGameOff ;
14262: CALL_OW 9
// allowCargoEvacuation := true ;
14266: LD_ADDR_EXP 7
14270: PUSH
14271: LD_INT 1
14273: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_INT 4
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: PUSH
14293: LD_OWVAR 67
14297: ARRAY
14298: ST_TO_ADDR
// if farmerSquad < max then
14299: LD_EXP 39
14303: PUSH
14304: LD_VAR 0 2
14308: LESS
14309: IFFALSE 14321
// max := farmerSquad ;
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_EXP 39
14320: ST_TO_ADDR
// for i := 1 to max do
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: DOUBLE
14327: LD_INT 1
14329: DEC
14330: ST_TO_ADDR
14331: LD_VAR 0 2
14335: PUSH
14336: FOR_TO
14337: IFFALSE 14375
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14339: LD_EXP 39
14343: PUSH
14344: LD_INT 1
14346: ARRAY
14347: PPUSH
14348: LD_INT 2
14350: PPUSH
14351: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14355: LD_ADDR_EXP 39
14359: PUSH
14360: LD_EXP 39
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 3
14372: ST_TO_ADDR
// end ;
14373: GO 14336
14375: POP
14376: POP
// for i in Farmer ^ farmerSquad do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: LD_EXP 36
14386: PUSH
14387: LD_EXP 39
14391: ADD
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14433
// begin if IsInUnit ( i ) then
14396: LD_VAR 0 1
14400: PPUSH
14401: CALL_OW 310
14405: IFFALSE 14416
// ComExitBuilding ( i ) ;
14407: LD_VAR 0 1
14411: PPUSH
14412: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14416: LD_VAR 0 1
14420: PPUSH
14421: LD_INT 102
14423: PPUSH
14424: LD_INT 7
14426: PPUSH
14427: CALL_OW 171
// end ;
14431: GO 14393
14433: POP
14434: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14435: LD_ADDR_VAR 0 1
14439: PUSH
14440: LD_INT 22
14442: PUSH
14443: LD_INT 5
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 21
14452: PUSH
14453: LD_INT 3
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PPUSH
14464: CALL_OW 69
14468: PUSH
14469: LD_INT 5
14471: DIFF
14472: PUSH
14473: FOR_IN
14474: IFFALSE 14490
// SetSide ( i , 2 ) ;
14476: LD_VAR 0 1
14480: PPUSH
14481: LD_INT 2
14483: PPUSH
14484: CALL_OW 235
14488: GO 14473
14490: POP
14491: POP
// wait ( 0 0$2 ) ;
14492: LD_INT 70
14494: PPUSH
14495: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14499: LD_EXP 28
14503: PPUSH
14504: LD_STRING DH-6-end
14506: PPUSH
14507: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14511: LD_INT 35
14513: PPUSH
14514: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14518: LD_ADDR_VAR 0 3
14522: PUSH
14523: LD_EXP 36
14527: PUSH
14528: LD_EXP 39
14532: ADD
14533: PPUSH
14534: LD_INT 95
14536: PUSH
14537: LD_INT 3
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 72
14548: ST_TO_ADDR
// if tmp then
14549: LD_VAR 0 3
14553: IFFALSE 14597
// for i in tmp do
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: LD_VAR 0 3
14564: PUSH
14565: FOR_IN
14566: IFFALSE 14595
// begin farmerSquad := farmerSquad diff i ;
14568: LD_ADDR_EXP 39
14572: PUSH
14573: LD_EXP 39
14577: PUSH
14578: LD_VAR 0 1
14582: DIFF
14583: ST_TO_ADDR
// RemoveUnit ( i ) ;
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 64
// end ;
14593: GO 14565
14595: POP
14596: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14597: LD_EXP 39
14601: PUSH
14602: EMPTY
14603: EQUAL
14604: PUSH
14605: LD_EXP 36
14609: PPUSH
14610: CALL_OW 305
14614: NOT
14615: AND
14616: IFFALSE 14511
// if farmerHumanLoseCounter = 0 then
14618: LD_EXP 20
14622: PUSH
14623: LD_INT 0
14625: EQUAL
14626: IFFALSE 14635
// SetAchievement ( ACH_BABY ) ;
14628: LD_STRING ACH_BABY
14630: PPUSH
14631: CALL_OW 543
// wait ( 1 1$00 ) ;
14635: LD_INT 2100
14637: PPUSH
14638: CALL_OW 67
// SendAttack ;
14642: CALL 6123 0 0
// Say ( Heike , DH-7-end ) ;
14646: LD_EXP 28
14650: PPUSH
14651: LD_STRING DH-7-end
14653: PPUSH
14654: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14658: LD_ADDR_VAR 0 1
14662: PUSH
14663: DOUBLE
14664: LD_INT 1
14666: DEC
14667: ST_TO_ADDR
14668: LD_INT 2
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 4
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_OWVAR 67
14686: ARRAY
14687: PUSH
14688: FOR_TO
14689: IFFALSE 14721
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14691: LD_INT 4200
14693: PUSH
14694: LD_INT 3500
14696: PUSH
14697: LD_INT 3150
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_OWVAR 67
14709: ARRAY
14710: PPUSH
14711: CALL_OW 67
// SendAttack ;
14715: CALL 6123 0 0
// end ;
14719: GO 14688
14721: POP
14722: POP
// end ;
14723: PPOPN 3
14725: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14726: LD_EXP 7
14730: PUSH
14731: LD_EXP 21
14735: PUSH
14736: LD_INT 0
14738: GREATER
14739: AND
14740: IFFALSE 14750
14742: GO 14744
14744: DISABLE
// begin enable ;
14745: ENABLE
// CargoEvacuation ;
14746: CALL 3644 0 0
// end ;
14750: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14751: LD_EXP 17
14755: PUSH
14756: LD_INT 18900
14758: LESSEQUAL
14759: IFFALSE 14808
14761: GO 14763
14763: DISABLE
// begin DialogueOn ;
14764: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14768: LD_EXP 36
14772: PPUSH
14773: LD_STRING DF-1-distribution-a
14775: PPUSH
14776: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14780: LD_EXP 28
14784: PPUSH
14785: LD_STRING DH-1-distribution-a
14787: PPUSH
14788: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14792: LD_EXP 36
14796: PPUSH
14797: LD_STRING DF-2-distribution-a
14799: PPUSH
14800: CALL_OW 94
// DialogueOff ;
14804: CALL_OW 7
// end ;
14808: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14809: LD_EXP 17
14813: PUSH
14814: LD_INT 0
14816: LESSEQUAL
14817: IFFALSE 14849
14819: GO 14821
14821: DISABLE
// begin DialogueOn ;
14822: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14826: LD_EXP 36
14830: PPUSH
14831: LD_STRING DF-3-distribution-a
14833: PPUSH
14834: CALL_OW 94
// YouLost ( Distribution ) ;
14838: LD_STRING Distribution
14840: PPUSH
14841: CALL_OW 104
// DialogueOff ;
14845: CALL_OW 7
// end ;
14849: END
// every 0 0$1 trigger vehCounter >= 2 do
14850: LD_EXP 22
14854: PUSH
14855: LD_INT 2
14857: GREATEREQUAL
14858: IFFALSE 14870
14860: GO 14862
14862: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14863: LD_STRING VehConstructed
14865: PPUSH
14866: CALL_OW 337
14870: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14871: LD_INT 22
14873: PUSH
14874: LD_INT 2
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 34
14883: PUSH
14884: LD_INT 12
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 69
14899: IFFALSE 14959
14901: GO 14903
14903: DISABLE
// begin DialogueOn ;
14904: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14908: LD_EXP 28
14912: PPUSH
14913: LD_STRING DH-1-truck
14915: PPUSH
14916: CALL_OW 88
// if IsOk ( Markov ) then
14920: LD_EXP 35
14924: PPUSH
14925: CALL_OW 302
14929: IFFALSE 14955
// begin Say ( Markov , DMar-1-truck ) ;
14931: LD_EXP 35
14935: PPUSH
14936: LD_STRING DMar-1-truck
14938: PPUSH
14939: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14943: LD_EXP 28
14947: PPUSH
14948: LD_STRING DH-2-truck
14950: PPUSH
14951: CALL_OW 88
// end ; DialogueOff ;
14955: CALL_OW 7
// end ;
14959: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
// if IsOk ( Givi ) then
14965: LD_EXP 29
14969: PPUSH
14970: CALL_OW 302
14974: IFFALSE 14990
// begin Say ( Givi , DG-1-nocargo ) ;
14976: LD_EXP 29
14980: PPUSH
14981: LD_STRING DG-1-nocargo
14983: PPUSH
14984: CALL_OW 88
// exit ;
14988: GO 15086
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_EXP 42
14999: PPUSH
15000: LD_INT 26
15002: PUSH
15003: LD_INT 1
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 72
15014: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: LD_EXP 42
15024: PPUSH
15025: LD_INT 26
15027: PUSH
15028: LD_INT 2
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 72
15039: ST_TO_ADDR
// if randomMen then
15040: LD_VAR 0 2
15044: IFFALSE 15064
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15046: LD_VAR 0 2
15050: PUSH
15051: LD_INT 1
15053: ARRAY
15054: PPUSH
15055: LD_STRING DArm-1-nocargo
15057: PPUSH
15058: CALL_OW 88
15062: GO 15086
// if randomWomen then
15064: LD_VAR 0 3
15068: IFFALSE 15086
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15070: LD_VAR 0 3
15074: PUSH
15075: LD_INT 1
15077: ARRAY
15078: PPUSH
15079: LD_STRING DArf-1-nocargo
15081: PPUSH
15082: CALL_OW 88
// end ;
15086: LD_VAR 0 1
15090: RET
// export function IncomingAttack ; begin
15091: LD_INT 0
15093: PPUSH
// if attackWave = 1 then
15094: LD_EXP 19
15098: PUSH
15099: LD_INT 1
15101: EQUAL
15102: IFFALSE 15173
// begin DialogueOn ;
15104: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15108: LD_EXP 37
15112: PPUSH
15113: LD_STRING DO-1-radio-1
15115: PPUSH
15116: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15120: LD_EXP 28
15124: PPUSH
15125: LD_STRING DH-1-radio-1-
15127: PPUSH
15128: CALL_OW 88
// if IsOk ( Markov ) then
15132: LD_EXP 35
15136: PPUSH
15137: CALL_OW 302
15141: IFFALSE 15167
// begin Say ( Markov , DMar-1-radio-1 ) ;
15143: LD_EXP 35
15147: PPUSH
15148: LD_STRING DMar-1-radio-1
15150: PPUSH
15151: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15155: LD_EXP 28
15159: PPUSH
15160: LD_STRING DH-2-radio-1
15162: PPUSH
15163: CALL_OW 88
// end ; DialogueOff ;
15167: CALL_OW 7
// end else
15171: GO 15197
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15173: LD_EXP 37
15177: PPUSH
15178: LD_STRING DO-1-radio-u
15180: PPUSH
15181: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15185: LD_EXP 28
15189: PPUSH
15190: LD_STRING DH-1-radio-u
15192: PPUSH
15193: CALL_OW 88
// end ; end ;
15197: LD_VAR 0 1
15201: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15202: LD_EXP 44
15206: PPUSH
15207: LD_INT 95
15209: PUSH
15210: LD_INT 8
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 72
15221: IFFALSE 15324
15223: GO 15225
15225: DISABLE
15226: LD_INT 0
15228: PPUSH
// begin enable ;
15229: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15230: LD_ADDR_VAR 0 1
15234: PUSH
15235: LD_EXP 44
15239: PPUSH
15240: LD_INT 95
15242: PUSH
15243: LD_INT 8
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL_OW 72
15254: PUSH
15255: FOR_IN
15256: IFFALSE 15285
// begin usForces := usForces diff i ;
15258: LD_ADDR_EXP 44
15262: PUSH
15263: LD_EXP 44
15267: PUSH
15268: LD_VAR 0 1
15272: DIFF
15273: ST_TO_ADDR
// RemoveUnit ( i ) ;
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 64
// end ;
15283: GO 15255
15285: POP
15286: POP
// if not americanHasEscaped and attackWave = 1 then
15287: LD_EXP 8
15291: NOT
15292: PUSH
15293: LD_EXP 19
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15324
// begin americanHasEscaped := true ;
15304: LD_ADDR_EXP 8
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15312: LD_EXP 28
15316: PPUSH
15317: LD_STRING DH-2-assault-a
15319: PPUSH
15320: CALL_OW 88
// end ; end ;
15324: PPOPN 1
15326: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15327: LD_INT 4
15329: PPUSH
15330: LD_INT 22
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 70
15344: PUSH
15345: LD_EXP 11
15349: NOT
15350: AND
15351: IFFALSE 15368
15353: GO 15355
15355: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15356: LD_EXP 36
15360: PPUSH
15361: LD_STRING DF-1-attack
15363: PPUSH
15364: CALL_OW 94
15368: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15369: LD_INT 5
15371: PPUSH
15372: CALL_OW 255
15376: PUSH
15377: LD_INT 2
15379: EQUAL
15380: IFFALSE 15392
15382: GO 15384
15384: DISABLE
// YouLost ( Attack ) ;
15385: LD_STRING Attack
15387: PPUSH
15388: CALL_OW 104
15392: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15393: LD_INT 22
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 21
15405: PUSH
15406: LD_INT 1
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: NOT
15422: PUSH
15423: LD_INT 22
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: NOT
15438: AND
15439: PUSH
15440: LD_EXP 11
15444: NOT
15445: AND
15446: PUSH
15447: LD_EXP 15
15451: PUSH
15452: LD_INT 90
15454: GREATER
15455: AND
15456: PUSH
15457: LD_INT 7
15459: PPUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 2
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 21
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 70
15488: AND
15489: PUSH
15490: LD_INT 22
15492: PUSH
15493: LD_INT 2
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 50
15502: PUSH
15503: EMPTY
15504: LIST
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 0
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: AND
15526: IFFALSE 16319
15528: GO 15530
15530: DISABLE
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
15535: PPUSH
15536: PPUSH
15537: PPUSH
// begin depot := usDepot ;
15538: LD_ADDR_VAR 0 5
15542: PUSH
15543: LD_INT 11
15545: ST_TO_ADDR
// if not depot then
15546: LD_VAR 0 5
15550: NOT
15551: IFFALSE 15591
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15553: LD_ADDR_VAR 0 5
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 30
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: PUSH
15587: LD_INT 1
15589: ARRAY
15590: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15591: LD_ADDR_VAR 0 1
15595: PUSH
15596: LD_EXP 42
15600: PPUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PPUSH
15611: CALL_OW 72
15615: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_EXP 42
15625: PPUSH
15626: LD_INT 26
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 72
15640: ST_TO_ADDR
// if IsOk ( Kaia ) then
15641: LD_EXP 33
15645: PPUSH
15646: CALL_OW 302
15650: IFFALSE 15671
// speaker := [ Kaia , DK ] else
15652: LD_ADDR_VAR 0 3
15656: PUSH
15657: LD_EXP 33
15661: PUSH
15662: LD_STRING DK
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: ST_TO_ADDR
15669: GO 15751
// if randomMen then
15671: LD_VAR 0 1
15675: IFFALSE 15710
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15677: LD_ADDR_VAR 0 3
15681: PUSH
15682: LD_VAR 0 1
15686: PUSH
15687: LD_INT 1
15689: PPUSH
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 12
15699: ARRAY
15700: PUSH
15701: LD_STRING DArm
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: ST_TO_ADDR
15708: GO 15751
// if randomWomen then
15710: LD_VAR 0 2
15714: IFFALSE 15749
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15716: LD_ADDR_VAR 0 3
15720: PUSH
15721: LD_VAR 0 2
15725: PUSH
15726: LD_INT 1
15728: PPUSH
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: PUSH
15740: LD_STRING DArf
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
15747: GO 15751
// exit ;
15749: GO 16319
// if IsInUnit ( speaker [ 1 ] ) then
15751: LD_VAR 0 3
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: CALL_OW 310
15764: IFFALSE 15787
// place := IsInUnit ( speaker [ 1 ] ) else
15766: LD_ADDR_VAR 0 4
15770: PUSH
15771: LD_VAR 0 3
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PPUSH
15780: CALL_OW 310
15784: ST_TO_ADDR
15785: GO 15801
// place := speaker [ 1 ] ;
15787: LD_ADDR_VAR 0 4
15791: PUSH
15792: LD_VAR 0 3
15796: PUSH
15797: LD_INT 1
15799: ARRAY
15800: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15801: LD_VAR 0 4
15805: PPUSH
15806: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15810: LD_VAR 0 4
15814: PPUSH
15815: CALL_OW 250
15819: PPUSH
15820: LD_VAR 0 4
15824: PPUSH
15825: CALL_OW 251
15829: PPUSH
15830: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15834: LD_INT 70
15836: PPUSH
15837: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15841: LD_EXP 38
15845: PPUSH
15846: CALL_OW 305
15850: NOT
15851: IFFALSE 15855
// exit ;
15853: GO 16319
// allowConvoys := false ;
15855: LD_ADDR_EXP 12
15859: PUSH
15860: LD_INT 0
15862: ST_TO_ADDR
// InGameOn ;
15863: CALL_OW 8
// wait ( 0 0$1 ) ;
15867: LD_INT 35
15869: PPUSH
15870: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15874: LD_EXP 38
15878: PPUSH
15879: LD_STRING DI-1-land
15881: PPUSH
15882: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 1
15893: ARRAY
15894: PPUSH
15895: CALL_OW 310
15899: IFFALSE 15914
// ComExit ( speaker [ 1 ] ) ;
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: CALL 73822 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 1
15921: ARRAY
15922: PPUSH
15923: LD_EXP 38
15927: PPUSH
15928: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15932: LD_VAR 0 3
15936: PUSH
15937: LD_INT 1
15939: ARRAY
15940: PPUSH
15941: LD_EXP 38
15945: PPUSH
15946: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15950: LD_EXP 38
15954: PPUSH
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 1
15962: ARRAY
15963: PPUSH
15964: CALL_OW 119
// wait ( 0 0$1 ) ;
15968: LD_INT 35
15970: PPUSH
15971: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 2
15991: ARRAY
15992: PUSH
15993: LD_STRING -1-land
15995: STR
15996: PPUSH
15997: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16001: LD_EXP 38
16005: PPUSH
16006: LD_STRING DI-2-land
16008: PPUSH
16009: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16013: LD_VAR 0 3
16017: PUSH
16018: LD_INT 1
16020: ARRAY
16021: PPUSH
16022: LD_VAR 0 3
16026: PUSH
16027: LD_INT 2
16029: ARRAY
16030: PUSH
16031: LD_STRING -2-land
16033: STR
16034: PPUSH
16035: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16039: LD_VAR 0 3
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 2
16055: ARRAY
16056: PUSH
16057: LD_STRING -3-land
16059: STR
16060: PPUSH
16061: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16065: LD_EXP 28
16069: PPUSH
16070: LD_STRING DH-1-land
16072: PPUSH
16073: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16077: LD_VAR 0 5
16081: PPUSH
16082: CALL_OW 313
16086: PUSH
16087: LD_INT 6
16089: EQUAL
16090: IFFALSE 16110
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16092: LD_VAR 0 5
16096: PPUSH
16097: CALL_OW 313
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PPUSH
16106: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16110: LD_EXP 38
16114: PPUSH
16115: LD_INT 2
16117: PPUSH
16118: CALL_OW 235
// CenterOnUnits ( depot ) ;
16122: LD_VAR 0 5
16126: PPUSH
16127: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16131: LD_EXP 38
16135: PPUSH
16136: LD_VAR 0 5
16140: PPUSH
16141: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16145: LD_VAR 0 3
16149: PUSH
16150: LD_INT 1
16152: ARRAY
16153: PPUSH
16154: LD_VAR 0 5
16158: PPUSH
16159: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16163: LD_INT 35
16165: PPUSH
16166: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16170: LD_EXP 38
16174: PPUSH
16175: CALL_OW 310
16179: PUSH
16180: LD_EXP 38
16184: PPUSH
16185: CALL_OW 302
16189: NOT
16190: OR
16191: PUSH
16192: LD_VAR 0 5
16196: PPUSH
16197: CALL_OW 302
16201: NOT
16202: OR
16203: IFFALSE 16163
// InGameOff ;
16205: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16209: LD_EXP 38
16213: PPUSH
16214: CALL_OW 302
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16319
// if not IsOk ( depot ) then
16223: LD_VAR 0 5
16227: PPUSH
16228: CALL_OW 302
16232: NOT
16233: IFFALSE 16296
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16235: LD_EXP 38
16239: PPUSH
16240: LD_INT 30
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16250: LD_INT 35
16252: PPUSH
16253: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16257: LD_EXP 38
16261: PPUSH
16262: LD_INT 30
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 307
16272: PUSH
16273: LD_EXP 38
16277: PPUSH
16278: CALL_OW 301
16282: OR
16283: IFFALSE 16250
// RemoveUnit ( Ibrahim ) ;
16285: LD_EXP 38
16289: PPUSH
16290: CALL_OW 64
// exit ;
16294: GO 16319
// end ; ibrahimInDepot := true ;
16296: LD_ADDR_EXP 25
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// allowConvoys := true ;
16304: LD_ADDR_EXP 12
16308: PUSH
16309: LD_INT 1
16311: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16312: LD_STRING IbrahimInDepot
16314: PPUSH
16315: CALL_OW 97
// end ;
16319: PPOPN 5
16321: END
// export function IbrahimQuery ; begin
16322: LD_INT 0
16324: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16325: LD_STRING IbrahimQuery
16327: PPUSH
16328: CALL_OW 97
16332: PUSH
16333: LD_INT 1
16335: DOUBLE
16336: EQUAL
16337: IFTRUE 16341
16339: GO 16617
16341: POP
// begin allowConvoys := false ;
16342: LD_ADDR_EXP 12
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// ibrahimInDepot := false ;
16350: LD_ADDR_EXP 25
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// InGameOn ;
16358: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16362: LD_EXP 28
16366: PPUSH
16367: CALL_OW 87
// wait ( 0 0$1 ) ;
16371: LD_INT 35
16373: PPUSH
16374: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16378: LD_EXP 28
16382: PPUSH
16383: LD_STRING DH-1-interrogation
16385: PPUSH
16386: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16390: LD_EXP 38
16394: PPUSH
16395: LD_STRING DI-1-interrogation
16397: PPUSH
16398: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16402: LD_EXP 28
16406: PPUSH
16407: LD_STRING DH-2-interrogation
16409: PPUSH
16410: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16414: LD_EXP 38
16418: PPUSH
16419: LD_STRING DI-2-interrogation
16421: PPUSH
16422: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16426: LD_EXP 28
16430: PPUSH
16431: LD_STRING DH-3-interrogation
16433: PPUSH
16434: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16438: LD_EXP 38
16442: PPUSH
16443: LD_STRING DI-3-interrogation
16445: PPUSH
16446: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16450: LD_EXP 28
16454: PPUSH
16455: LD_STRING DH-4-interrogation
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16462: LD_EXP 38
16466: PPUSH
16467: LD_STRING DI-4-interrogation
16469: PPUSH
16470: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16474: LD_EXP 28
16478: PPUSH
16479: LD_STRING DH-5-interrogation
16481: PPUSH
16482: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16486: LD_EXP 38
16490: PPUSH
16491: LD_STRING DI-5-interrogation
16493: PPUSH
16494: CALL_OW 88
// wait ( 0 0$1 ) ;
16498: LD_INT 35
16500: PPUSH
16501: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16505: LD_STRING IbrahimDecisionQuery
16507: PPUSH
16508: CALL_OW 97
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16545
16521: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16522: LD_EXP 38
16526: PPUSH
16527: LD_STRING DI-1-kill
16529: PPUSH
16530: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16534: LD_EXP 38
16538: PPUSH
16539: CALL_OW 66
// end ; 2 :
16543: GO 16611
16545: LD_INT 2
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16610
16553: POP
// begin SetSide ( Ibrahim , 6 ) ;
16554: LD_EXP 38
16558: PPUSH
16559: LD_INT 6
16561: PPUSH
16562: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16566: LD_EXP 38
16570: PPUSH
16571: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16575: LD_EXP 38
16579: PPUSH
16580: LD_INT 66
16582: PPUSH
16583: LD_INT 2
16585: PPUSH
16586: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16590: LD_EXP 38
16594: PPUSH
16595: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16599: LD_EXP 28
16603: PPUSH
16604: CALL_OW 122
// end ; end ;
16608: GO 16611
16610: POP
// InGameOff ;
16611: CALL_OW 9
// end ; 2 :
16615: GO 16631
16617: LD_INT 2
16619: DOUBLE
16620: EQUAL
16621: IFTRUE 16625
16623: GO 16630
16625: POP
// exit ; end ;
16626: GO 16707
16628: GO 16631
16630: POP
// allowConvoys := true ;
16631: LD_ADDR_EXP 12
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16639: LD_INT 5250
16641: PPUSH
16642: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16646: LD_INT 35
16648: PPUSH
16649: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16653: LD_INT 81
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 21
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL_OW 69
16681: NOT
16682: IFFALSE 16646
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16684: LD_EXP 38
16688: PPUSH
16689: LD_INT 34
16691: PPUSH
16692: LD_INT 21
16694: PPUSH
16695: CALL_OW 111
// ibrahimIsFree := true ;
16699: LD_ADDR_EXP 26
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// end ;
16707: LD_VAR 0 1
16711: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16712: LD_EXP 26
16716: PUSH
16717: LD_EXP 38
16721: PPUSH
16722: CALL_OW 302
16726: AND
16727: PUSH
16728: LD_INT 2
16730: PPUSH
16731: LD_EXP 38
16735: PPUSH
16736: CALL_OW 292
16740: AND
16741: IFFALSE 17508
16743: GO 16745
16745: DISABLE
16746: LD_INT 0
16748: PPUSH
16749: PPUSH
16750: PPUSH
16751: PPUSH
16752: PPUSH
16753: PPUSH
// begin wait ( 0 0$10 ) ;
16754: LD_INT 350
16756: PPUSH
16757: CALL_OW 67
// allowConvoys := false ;
16761: LD_ADDR_EXP 12
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// depot := usDepot ;
16769: LD_ADDR_VAR 0 4
16773: PUSH
16774: LD_INT 11
16776: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16777: LD_INT 11
16779: NOT
16780: PUSH
16781: LD_INT 22
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 50
16793: PUSH
16794: EMPTY
16795: LIST
16796: PUSH
16797: LD_INT 30
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: AND
16817: IFFALSE 16864
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16819: LD_ADDR_VAR 0 4
16823: PUSH
16824: LD_INT 22
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 50
16836: PUSH
16837: EMPTY
16838: LIST
16839: PUSH
16840: LD_INT 30
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: PUSH
16860: LD_INT 1
16862: ARRAY
16863: ST_TO_ADDR
// InGameOn ;
16864: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16868: LD_EXP 38
16872: PPUSH
16873: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16877: LD_EXP 38
16881: PPUSH
16882: LD_STRING DI-1-free
16884: PPUSH
16885: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16889: LD_EXP 28
16893: PPUSH
16894: LD_EXP 38
16898: PPUSH
16899: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16903: LD_EXP 28
16907: PPUSH
16908: LD_STRING DH-1-free
16910: PPUSH
16911: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16915: LD_EXP 38
16919: PPUSH
16920: LD_EXP 28
16924: PPUSH
16925: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16929: LD_EXP 38
16933: PPUSH
16934: LD_STRING DI-2-free
16936: PPUSH
16937: CALL_OW 88
// changeClass := 0 ;
16941: LD_ADDR_VAR 0 1
16945: PUSH
16946: LD_INT 0
16948: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16949: LD_STRING IbrahimJoinQuery
16951: PPUSH
16952: CALL_OW 97
16956: PUSH
16957: LD_INT 1
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 16976
16965: POP
// begin changeClass := 1 ;
16966: LD_ADDR_VAR 0 1
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// end ; 2 :
16974: GO 17216
16976: LD_INT 2
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17136
16984: POP
// begin Say ( Heike , DH-1-decline ) ;
16985: LD_EXP 28
16989: PPUSH
16990: LD_STRING DH-1-decline
16992: PPUSH
16993: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16997: LD_EXP 38
17001: PPUSH
17002: LD_STRING DI-1-decline
17004: PPUSH
17005: CALL_OW 88
// InGameOff ;
17009: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17013: LD_EXP 38
17017: PPUSH
17018: LD_INT 30
17020: PPUSH
17021: LD_INT 1
17023: PPUSH
17024: CALL_OW 111
// p := 0 ;
17028: LD_ADDR_VAR 0 3
17032: PUSH
17033: LD_INT 0
17035: ST_TO_ADDR
// repeat p := p + 1 ;
17036: LD_ADDR_VAR 0 3
17040: PUSH
17041: LD_VAR 0 3
17045: PUSH
17046: LD_INT 1
17048: PLUS
17049: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17050: LD_INT 35
17052: PPUSH
17053: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17057: LD_EXP 38
17061: PPUSH
17062: LD_INT 30
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 307
17072: PUSH
17073: LD_INT 22
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 101
17085: PUSH
17086: LD_INT 6
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PPUSH
17097: CALL_OW 69
17101: NOT
17102: OR
17103: PUSH
17104: LD_VAR 0 3
17108: PUSH
17109: LD_INT 10
17111: GREATER
17112: OR
17113: IFFALSE 17036
// RemoveUnit ( Ibrahim ) ;
17115: LD_EXP 38
17119: PPUSH
17120: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17124: LD_INT 1
17126: PPUSH
17127: LD_STRING 03_IbrahimHasEscaped
17129: PPUSH
17130: CALL_OW 39
// end ; 3 :
17134: GO 17216
17136: LD_INT 3
17138: DOUBLE
17139: EQUAL
17140: IFTRUE 17144
17142: GO 17215
17144: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17145: LD_EXP 28
17149: PPUSH
17150: LD_STRING DH-1-radio-hq
17152: PPUSH
17153: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17157: LD_EXP 37
17161: PPUSH
17162: LD_STRING DO-1-radio-hq
17164: PPUSH
17165: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17169: LD_EXP 28
17173: PPUSH
17174: LD_STRING DH-2-radio-hq
17176: PPUSH
17177: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17181: LD_EXP 37
17185: PPUSH
17186: LD_STRING DO-2-radio-hq
17188: PPUSH
17189: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17193: LD_EXP 28
17197: PPUSH
17198: LD_STRING DH-3-radio-hq
17200: PPUSH
17201: CALL_OW 88
// changeClass := 1 ;
17205: LD_ADDR_VAR 0 1
17209: PUSH
17210: LD_INT 1
17212: ST_TO_ADDR
// end ; end ;
17213: GO 17216
17215: POP
// if changeClass then
17216: LD_VAR 0 1
17220: IFFALSE 17508
// begin Say ( Heike , DH-1-agree ) ;
17222: LD_EXP 28
17226: PPUSH
17227: LD_STRING DH-1-agree
17229: PPUSH
17230: CALL_OW 88
// if IsOk ( Givi ) then
17234: LD_EXP 29
17238: PPUSH
17239: CALL_OW 302
17243: IFFALSE 17281
// begin Say ( Givi , DG-1-agree ) ;
17245: LD_EXP 29
17249: PPUSH
17250: LD_STRING DG-1-agree
17252: PPUSH
17253: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17257: LD_EXP 28
17261: PPUSH
17262: LD_STRING DH-2-agree
17264: PPUSH
17265: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17269: LD_EXP 29
17273: PPUSH
17274: LD_STRING DG-2-agree
17276: PPUSH
17277: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17281: LD_VAR 0 4
17285: PPUSH
17286: CALL_OW 313
17290: PUSH
17291: LD_INT 6
17293: EQUAL
17294: IFFALSE 17314
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17296: LD_VAR 0 4
17300: PPUSH
17301: CALL_OW 313
17305: PUSH
17306: LD_INT 1
17308: ARRAY
17309: PPUSH
17310: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17314: LD_EXP 38
17318: PPUSH
17319: LD_INT 2
17321: PPUSH
17322: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17326: LD_ADDR_VAR 0 5
17330: PUSH
17331: LD_EXP 38
17335: PPUSH
17336: CALL_OW 250
17340: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17341: LD_ADDR_VAR 0 6
17345: PUSH
17346: LD_EXP 38
17350: PPUSH
17351: CALL_OW 251
17355: ST_TO_ADDR
// if depot then
17356: LD_VAR 0 4
17360: IFFALSE 17409
// begin ComEnterUnit ( Ibrahim , depot ) ;
17362: LD_EXP 38
17366: PPUSH
17367: LD_VAR 0 4
17371: PPUSH
17372: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17376: LD_INT 35
17378: PPUSH
17379: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17383: LD_EXP 38
17387: PPUSH
17388: CALL_OW 310
17392: IFFALSE 17376
// b := IsInUnit ( Ibrahim ) ;
17394: LD_ADDR_VAR 0 2
17398: PUSH
17399: LD_EXP 38
17403: PPUSH
17404: CALL_OW 310
17408: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17409: LD_EXP 38
17413: PPUSH
17414: CALL_OW 64
// uc_side := 2 ;
17418: LD_ADDR_OWVAR 20
17422: PUSH
17423: LD_INT 2
17425: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17426: LD_ADDR_EXP 38
17430: PUSH
17431: LD_STRING Ibrahim
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_STRING 
17439: PPUSH
17440: CALL 36697 0 3
17444: ST_TO_ADDR
// if depot then
17445: LD_VAR 0 4
17449: IFFALSE 17467
// PlaceHumanInUnit ( Ibrahim , b ) else
17451: LD_EXP 38
17455: PPUSH
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 52
17465: GO 17489
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17467: LD_EXP 38
17471: PPUSH
17472: LD_VAR 0 5
17476: PPUSH
17477: LD_VAR 0 6
17481: PPUSH
17482: LD_INT 0
17484: PPUSH
17485: CALL_OW 48
// InGameOff ;
17489: CALL_OW 9
// allowConvoys := true ;
17493: LD_ADDR_EXP 12
17497: PUSH
17498: LD_INT 1
17500: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17501: LD_STRING ACH_IBRAHIM
17503: PPUSH
17504: CALL_OW 543
// end ; end ;
17508: PPOPN 6
17510: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17511: LD_EXP 33
17515: PPUSH
17516: CALL_OW 256
17520: PUSH
17521: LD_INT 3
17523: LESS
17524: IFFALSE 17591
17526: GO 17528
17528: DISABLE
// begin DialogueOn ;
17529: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17533: LD_EXP 33
17537: PPUSH
17538: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17542: LD_EXP 33
17546: PPUSH
17547: LD_STRING DK-keydeath-1
17549: PPUSH
17550: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17554: LD_EXP 28
17558: PPUSH
17559: LD_STRING DH-keydeath-2
17561: PPUSH
17562: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17566: LD_EXP 28
17570: PPUSH
17571: LD_STRING DH-keydeath-3
17573: PPUSH
17574: CALL_OW 88
// DialogueOff ;
17578: CALL_OW 7
// KillUnit ( Kaia ) ;
17582: LD_EXP 33
17586: PPUSH
17587: CALL_OW 66
// end ;
17591: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17592: LD_EXP 11
17596: PUSH
17597: LD_EXP 21
17601: PUSH
17602: LD_INT 1
17604: LESS
17605: AND
17606: IFFALSE 18142
17608: GO 17610
17610: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17611: LD_INT 22
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 25
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 25
17636: PUSH
17637: LD_INT 3
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: IFFALSE 17735
// begin ChangeSideFog ( 1 , 2 ) ;
17659: LD_INT 1
17661: PPUSH
17662: LD_INT 2
17664: PPUSH
17665: CALL_OW 343
// Query ( DestroyEnemy ) ;
17669: LD_STRING DestroyEnemy
17671: PPUSH
17672: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17676: LD_INT 35
17678: PPUSH
17679: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17683: LD_INT 22
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 25
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 25
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PPUSH
17725: CALL_OW 69
17729: PUSH
17730: LD_INT 0
17732: EQUAL
17733: IFFALSE 17676
// end ; DialogueOn ;
17735: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17739: LD_EXP 28
17743: PPUSH
17744: LD_STRING DH-1-final
17746: PPUSH
17747: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17751: LD_OWVAR 1
17755: PUSH
17756: LD_INT 126000
17758: PUSH
17759: LD_INT 115500
17761: PUSH
17762: LD_INT 105000
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: PUSH
17770: LD_OWVAR 67
17774: ARRAY
17775: LESSEQUAL
17776: IFFALSE 17790
// AddMedal ( med1 , 1 ) else
17778: LD_STRING med1
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 101
17788: GO 17801
// AddMedal ( med1 , - 1 ) ;
17790: LD_STRING med1
17792: PPUSH
17793: LD_INT 1
17795: NEG
17796: PPUSH
17797: CALL_OW 101
// if vehCounter >= 2 then
17801: LD_EXP 22
17805: PUSH
17806: LD_INT 2
17808: GREATEREQUAL
17809: IFFALSE 17823
// AddMedal ( med2 , 1 ) else
17811: LD_STRING med2
17813: PPUSH
17814: LD_INT 1
17816: PPUSH
17817: CALL_OW 101
17821: GO 17834
// AddMedal ( med2 , - 1 ) ;
17823: LD_STRING med2
17825: PPUSH
17826: LD_INT 1
17828: NEG
17829: PPUSH
17830: CALL_OW 101
// if deadCounter = 0 then
17834: LD_EXP 9
17838: PUSH
17839: LD_INT 0
17841: EQUAL
17842: IFFALSE 17856
// AddMedal ( med3 , 1 ) else
17844: LD_STRING med3
17846: PPUSH
17847: LD_INT 1
17849: PPUSH
17850: CALL_OW 101
17854: GO 17867
// AddMedal ( med3 , - 1 ) ;
17856: LD_STRING med3
17858: PPUSH
17859: LD_INT 1
17861: NEG
17862: PPUSH
17863: CALL_OW 101
// GiveMedals ( MAIN ) ;
17867: LD_STRING MAIN
17869: PPUSH
17870: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17874: LD_INT 22
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 23
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: PPUSH
17914: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17918: LD_EXP 28
17922: PPUSH
17923: LD_STRING 03_Heike
17925: PPUSH
17926: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17930: LD_EXP 32
17934: PPUSH
17935: LD_STRING 03_Aviradze
17937: PPUSH
17938: CALL_OW 38
// if Givi then
17942: LD_EXP 29
17946: IFFALSE 17960
// SaveCharacters ( Givi , 03_Givi ) ;
17948: LD_EXP 29
17952: PPUSH
17953: LD_STRING 03_Givi
17955: PPUSH
17956: CALL_OW 38
// if Mike then
17960: LD_EXP 30
17964: IFFALSE 17978
// SaveCharacters ( Mike , 03_Mike ) ;
17966: LD_EXP 30
17970: PPUSH
17971: LD_STRING 03_Mike
17973: PPUSH
17974: CALL_OW 38
// if Kamil then
17978: LD_EXP 31
17982: IFFALSE 17996
// SaveCharacters ( Kamil , 03_Kamil ) ;
17984: LD_EXP 31
17988: PPUSH
17989: LD_STRING 03_Kamil
17991: PPUSH
17992: CALL_OW 38
// if Kaia then
17996: LD_EXP 33
18000: IFFALSE 18014
// SaveCharacters ( Kaia , 03_Kaia ) ;
18002: LD_EXP 33
18006: PPUSH
18007: LD_STRING 03_Kaia
18009: PPUSH
18010: CALL_OW 38
// if Sophia then
18014: LD_EXP 34
18018: IFFALSE 18032
// SaveCharacters ( Sophia , 03_Sophia ) ;
18020: LD_EXP 34
18024: PPUSH
18025: LD_STRING 03_Sophia
18027: PPUSH
18028: CALL_OW 38
// if Markov then
18032: LD_EXP 35
18036: IFFALSE 18050
// SaveCharacters ( Markov , 03_Markov ) ;
18038: LD_EXP 35
18042: PPUSH
18043: LD_STRING 03_Markov
18045: PPUSH
18046: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18050: LD_EXP 38
18054: PUSH
18055: LD_EXP 38
18059: PPUSH
18060: CALL_OW 255
18064: PUSH
18065: LD_INT 2
18067: EQUAL
18068: AND
18069: IFFALSE 18090
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18071: LD_STRING enableBioCharacter(BIO_IBRA)
18073: PPUSH
18074: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18078: LD_EXP 38
18082: PPUSH
18083: LD_STRING 03_Ibrahim
18085: PPUSH
18086: CALL_OW 38
// end ; if heikeSecondSquad then
18090: LD_EXP 42
18094: IFFALSE 18108
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18096: LD_EXP 42
18100: PPUSH
18101: LD_STRING 03_others
18103: PPUSH
18104: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18108: LD_EXP 9
18112: PPUSH
18113: LD_STRING 03_DeadCounter
18115: PPUSH
18116: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18120: LD_STRING enableBioCharacter(BIO_OMAR)
18122: PPUSH
18123: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18127: LD_STRING enableBioCharacter(BIO_FARM)
18129: PPUSH
18130: CALL_OW 559
// YouWin ;
18134: CALL_OW 103
// DialogueOff ;
18138: CALL_OW 7
// end ; end_of_file
18142: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18143: LD_VAR 0 1
18147: PUSH
18148: LD_EXP 28
18152: EQUAL
18153: IFFALSE 18162
// YouLost ( Heike ) ;
18155: LD_STRING Heike
18157: PPUSH
18158: CALL_OW 104
// if un = Aviradze then
18162: LD_VAR 0 1
18166: PUSH
18167: LD_EXP 32
18171: EQUAL
18172: IFFALSE 18181
// YouLost ( Aviradze ) ;
18174: LD_STRING Aviradze
18176: PPUSH
18177: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18181: LD_VAR 0 1
18185: PUSH
18186: LD_INT 11
18188: EQUAL
18189: PUSH
18190: LD_EXP 11
18194: NOT
18195: AND
18196: IFFALSE 18205
// YouLost ( Depot ) ;
18198: LD_STRING Depot
18200: PPUSH
18201: CALL_OW 104
// if un = arDepot then
18205: LD_VAR 0 1
18209: PUSH
18210: LD_INT 5
18212: EQUAL
18213: IFFALSE 18222
// YouLost ( FarmerDepot ) ;
18215: LD_STRING FarmerDepot
18217: PPUSH
18218: CALL_OW 104
// if un = Farmer then
18222: LD_VAR 0 1
18226: PUSH
18227: LD_EXP 36
18231: EQUAL
18232: IFFALSE 18241
// YouLost ( Farmer ) ;
18234: LD_STRING Farmer
18236: PPUSH
18237: CALL_OW 104
// if un in usForces then
18241: LD_VAR 0 1
18245: PUSH
18246: LD_EXP 44
18250: IN
18251: IFFALSE 18269
// usForces := usForces diff un ;
18253: LD_ADDR_EXP 44
18257: PUSH
18258: LD_EXP 44
18262: PUSH
18263: LD_VAR 0 1
18267: DIFF
18268: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18269: LD_VAR 0 1
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 23
18286: PUSH
18287: LD_INT 2
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 21
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: IN
18314: IFFALSE 18330
// deadCounter := deadCounter + 1 ;
18316: LD_ADDR_EXP 9
18320: PUSH
18321: LD_EXP 9
18325: PUSH
18326: LD_INT 1
18328: PLUS
18329: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 22
18337: PUSH
18338: LD_INT 4
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 34
18347: PUSH
18348: LD_INT 12
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: IN
18364: PUSH
18365: LD_EXP 18
18369: NOT
18370: AND
18371: IFFALSE 18381
// firstConvoyDestroyed := true ;
18373: LD_ADDR_EXP 18
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if un in usAttackers then
18381: LD_VAR 0 1
18385: PUSH
18386: LD_EXP 47
18390: IN
18391: IFFALSE 18409
// usAttackers := usAttackers diff un ;
18393: LD_ADDR_EXP 47
18397: PUSH
18398: LD_EXP 47
18402: PUSH
18403: LD_VAR 0 1
18407: DIFF
18408: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18409: LD_VAR 0 1
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 5
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: IN
18443: IFFALSE 18459
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18445: LD_ADDR_EXP 20
18449: PUSH
18450: LD_EXP 20
18454: PUSH
18455: LD_INT 1
18457: PLUS
18458: ST_TO_ADDR
// end ;
18459: PPOPN 1
18461: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18462: LD_VAR 0 2
18466: PUSH
18467: LD_EXP 38
18471: EQUAL
18472: PUSH
18473: LD_EXP 25
18477: AND
18478: IFFALSE 18663
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18480: LD_INT 22
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 30
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 50
18502: PUSH
18503: EMPTY
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: PPUSH
18511: CALL_OW 69
18515: IFFALSE 18569
// begin InGameOn ;
18517: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18521: LD_EXP 38
18525: PPUSH
18526: LD_INT 11
18528: PPUSH
18529: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18533: LD_INT 35
18535: PPUSH
18536: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18540: LD_EXP 38
18544: PPUSH
18545: LD_INT 11
18547: PPUSH
18548: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18552: LD_EXP 38
18556: PPUSH
18557: CALL_OW 310
18561: IFFALSE 18533
// InGameOff ;
18563: CALL_OW 9
// end else
18567: GO 18663
// begin SetSide ( Ibrahim , 6 ) ;
18569: LD_EXP 38
18573: PPUSH
18574: LD_INT 6
18576: PPUSH
18577: CALL_OW 235
// ibrahimInDepot := false ;
18581: LD_ADDR_EXP 25
18585: PUSH
18586: LD_INT 0
18588: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18589: LD_EXP 38
18593: PPUSH
18594: LD_INT 30
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18604: LD_INT 35
18606: PPUSH
18607: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18611: LD_EXP 38
18615: PPUSH
18616: LD_INT 30
18618: PPUSH
18619: LD_INT 1
18621: PPUSH
18622: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18626: LD_EXP 38
18630: PPUSH
18631: LD_INT 30
18633: PPUSH
18634: LD_INT 1
18636: PPUSH
18637: CALL_OW 307
18641: PUSH
18642: LD_EXP 38
18646: PPUSH
18647: CALL_OW 301
18651: OR
18652: IFFALSE 18604
// RemoveUnit ( Ibrahim ) ;
18654: LD_EXP 38
18658: PPUSH
18659: CALL_OW 64
// end ; end ; end ;
18663: PPOPN 2
18665: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18666: LD_VAR 0 2
18670: PUSH
18671: LD_EXP 28
18675: EQUAL
18676: PUSH
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 11
18684: EQUAL
18685: AND
18686: PUSH
18687: LD_EXP 25
18691: AND
18692: IFFALSE 18698
// IbrahimQuery ;
18694: CALL 16322 0 0
// end ;
18698: PPOPN 2
18700: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 141
// if oldId in usAttackers then
18710: LD_VAR 0 2
18714: PUSH
18715: LD_EXP 47
18719: IN
18720: IFFALSE 18738
// usAttackers := usAttackers diff oldId ;
18722: LD_ADDR_EXP 47
18726: PUSH
18727: LD_EXP 47
18731: PUSH
18732: LD_VAR 0 2
18736: DIFF
18737: ST_TO_ADDR
// if newId in usAttackers then
18738: LD_VAR 0 1
18742: PUSH
18743: LD_EXP 47
18747: IN
18748: IFFALSE 18766
// usAttackers := usAttackers diff newId ;
18750: LD_ADDR_EXP 47
18754: PUSH
18755: LD_EXP 47
18759: PUSH
18760: LD_VAR 0 1
18764: DIFF
18765: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18766: LD_VAR 0 3
18770: PUSH
18771: LD_INT 4
18773: EQUAL
18774: PUSH
18775: LD_EXP 18
18779: NOT
18780: AND
18781: IFFALSE 18791
// firstConvoyDestroyed := true ;
18783: LD_ADDR_EXP 18
18787: PUSH
18788: LD_INT 1
18790: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 264
18800: PUSH
18801: LD_INT 12
18803: EQUAL
18804: IFFALSE 18842
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18806: LD_ADDR_EXP 13
18810: PUSH
18811: LD_EXP 13
18815: PUSH
18816: LD_INT 1
18818: PLUS
18819: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18820: LD_VAR 0 1
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL_OW 289
18832: PUSH
18833: LD_INT 0
18835: EQUAL
18836: IFFALSE 18842
// EmptyCargoDialog ;
18838: CALL 14960 0 0
// end ; end ;
18842: PPOPN 4
18844: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 2
18852: EQUAL
18853: PUSH
18854: LD_VAR 0 2
18858: PUSH
18859: LD_INT 5
18861: EQUAL
18862: AND
18863: IFFALSE 18872
// YouLost ( Attack ) ;
18865: LD_STRING Attack
18867: PPUSH
18868: CALL_OW 104
// end ;
18872: PPOPN 2
18874: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 255
18884: PUSH
18885: LD_INT 1
18887: EQUAL
18888: PUSH
18889: LD_EXP 6
18893: NOT
18894: AND
18895: IFFALSE 19029
// begin if GetBType ( b ) = b_lab then
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 266
18906: PUSH
18907: LD_INT 6
18909: EQUAL
18910: IFFALSE 18950
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18912: LD_EXP 44
18916: PPUSH
18917: LD_INT 25
18919: PUSH
18920: LD_INT 4
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 72
18931: PPUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 120
// AmLabResearch ( b ) ;
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL_OW 266
18959: PUSH
18960: LD_INT 4
18962: EQUAL
18963: IFFALSE 19011
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18965: LD_EXP 44
18969: PPUSH
18970: LD_INT 25
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 3
18982: PUSH
18983: LD_INT 54
18985: PUSH
18986: EMPTY
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL_OW 72
19001: PPUSH
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19011: LD_ADDR_EXP 46
19015: PUSH
19016: LD_EXP 46
19020: PPUSH
19021: LD_INT 1
19023: PPUSH
19024: CALL_OW 3
19028: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 255
19038: PUSH
19039: LD_INT 5
19041: EQUAL
19042: IFFALSE 19056
// SetBLevel ( b , 5 ) ;
19044: LD_VAR 0 1
19048: PPUSH
19049: LD_INT 5
19051: PPUSH
19052: CALL_OW 241
// end ;
19056: PPOPN 1
19058: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 255
19068: PUSH
19069: LD_INT 2
19071: EQUAL
19072: IFFALSE 19088
// vehCounter := vehCounter + 1 ;
19074: LD_ADDR_EXP 22
19078: PUSH
19079: LD_EXP 22
19083: PUSH
19084: LD_INT 1
19086: PLUS
19087: ST_TO_ADDR
// end ;
19088: PPOPN 2
19090: END
// on SailEvent ( event ) do begin if event = eventAttack then
19091: LD_VAR 0 1
19095: PUSH
19096: LD_EXP 24
19100: EQUAL
19101: IFFALSE 19107
// AmericanAttack ;
19103: CALL 6650 0 0
// end ; end_of_file
19107: PPOPN 1
19109: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
19110: LD_OWVAR 1
19114: PUSH
19115: LD_INT 10500
19117: PUSH
19118: LD_INT 9800
19120: PUSH
19121: LD_INT 9450
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: LD_OWVAR 67
19133: ARRAY
19134: LESSEQUAL
19135: IFFALSE 19162
19137: GO 19139
19139: DISABLE
// begin enable ;
19140: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19141: LD_INT 1
19143: PPUSH
19144: LD_INT 5
19146: PPUSH
19147: CALL_OW 12
19151: PPUSH
19152: LD_INT 9
19154: PPUSH
19155: LD_INT 1
19157: PPUSH
19158: CALL_OW 55
// end ;
19162: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
19163: LD_EXP 6
19167: PUSH
19168: LD_OWVAR 1
19172: PUSH
19173: LD_INT 56700
19175: PUSH
19176: LD_INT 55650
19178: PUSH
19179: LD_INT 54600
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: PUSH
19187: LD_OWVAR 67
19191: ARRAY
19192: LESSEQUAL
19193: AND
19194: IFFALSE 19221
19196: GO 19198
19198: DISABLE
// begin enable ;
19199: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19200: LD_INT 3
19202: PPUSH
19203: LD_INT 5
19205: PPUSH
19206: CALL_OW 12
19210: PPUSH
19211: LD_INT 9
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 55
// end ; end_of_file
19221: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19222: LD_EXP 11
19226: NOT
19227: PUSH
19228: LD_EXP 16
19232: AND
19233: PUSH
19234: LD_EXP 4
19238: AND
19239: PUSH
19240: LD_EXP 15
19244: PUSH
19245: LD_EXP 16
19249: LESSEQUAL
19250: AND
19251: IFFALSE 19341
19253: GO 19255
19255: DISABLE
// begin enable ;
19256: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19257: LD_ADDR_OWVAR 47
19261: PUSH
19262: LD_STRING #X103-1
19264: PUSH
19265: LD_EXP 16
19269: PUSH
19270: LD_EXP 15
19274: MINUS
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19280: LD_ADDR_EXP 15
19284: PUSH
19285: LD_INT 5
19287: PPUSH
19288: CALL_OW 274
19292: PPUSH
19293: LD_INT 1
19295: PPUSH
19296: CALL_OW 275
19300: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19301: LD_INT 10
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: CALL_OW 287
19311: PUSH
19312: LD_INT 0
19314: EQUAL
19315: IFFALSE 19333
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19317: LD_ADDR_EXP 17
19321: PUSH
19322: LD_EXP 17
19326: PUSH
19327: LD_INT 35
19329: MINUS
19330: ST_TO_ADDR
19331: GO 19341
// farmerCratesCounter := 30 30$00 ;
19333: LD_ADDR_EXP 17
19337: PUSH
19338: LD_INT 63000
19340: ST_TO_ADDR
// end ; end_of_file
19341: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19342: LD_INT 0
19344: PPUSH
// ar_miner := 81 ;
19345: LD_ADDR_EXP 55
19349: PUSH
19350: LD_INT 81
19352: ST_TO_ADDR
// ar_crane := 88 ;
19353: LD_ADDR_EXP 54
19357: PUSH
19358: LD_INT 88
19360: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19361: LD_ADDR_EXP 49
19365: PUSH
19366: LD_INT 89
19368: ST_TO_ADDR
// us_hack := 99 ;
19369: LD_ADDR_EXP 50
19373: PUSH
19374: LD_INT 99
19376: ST_TO_ADDR
// us_artillery := 97 ;
19377: LD_ADDR_EXP 51
19381: PUSH
19382: LD_INT 97
19384: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19385: LD_ADDR_EXP 52
19389: PUSH
19390: LD_INT 91
19392: ST_TO_ADDR
// ar_mortar := 92 ;
19393: LD_ADDR_EXP 53
19397: PUSH
19398: LD_INT 92
19400: ST_TO_ADDR
// ru_radar := 98 ;
19401: LD_ADDR_EXP 48
19405: PUSH
19406: LD_INT 98
19408: ST_TO_ADDR
// tech_Artillery := 80 ;
19409: LD_ADDR_EXP 56
19413: PUSH
19414: LD_INT 80
19416: ST_TO_ADDR
// tech_RadMat := 81 ;
19417: LD_ADDR_EXP 57
19421: PUSH
19422: LD_INT 81
19424: ST_TO_ADDR
// tech_BasicTools := 82 ;
19425: LD_ADDR_EXP 58
19429: PUSH
19430: LD_INT 82
19432: ST_TO_ADDR
// tech_Cargo := 83 ;
19433: LD_ADDR_EXP 59
19437: PUSH
19438: LD_INT 83
19440: ST_TO_ADDR
// tech_Track := 84 ;
19441: LD_ADDR_EXP 60
19445: PUSH
19446: LD_INT 84
19448: ST_TO_ADDR
// tech_Crane := 85 ;
19449: LD_ADDR_EXP 61
19453: PUSH
19454: LD_INT 85
19456: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19457: LD_ADDR_EXP 62
19461: PUSH
19462: LD_INT 86
19464: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19465: LD_ADDR_EXP 63
19469: PUSH
19470: LD_INT 87
19472: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19473: LD_ADDR_EXP 64
19477: PUSH
19478: LD_INT 88
19480: ST_TO_ADDR
// class_mastodont := 31 ;
19481: LD_ADDR_EXP 65
19485: PUSH
19486: LD_INT 31
19488: ST_TO_ADDR
// class_horse := 21 ;
19489: LD_ADDR_EXP 66
19493: PUSH
19494: LD_INT 21
19496: ST_TO_ADDR
// end ;
19497: LD_VAR 0 1
19501: RET
// every 1 do
19502: GO 19504
19504: DISABLE
// InitGlobalVariables ; end_of_file
19505: CALL 19342 0 0
19509: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19510: LD_INT 0
19512: PPUSH
// if p2 = 100 then
19513: LD_VAR 0 2
19517: PUSH
19518: LD_INT 100
19520: EQUAL
19521: IFFALSE 20470
// begin if not StreamModeActive then
19523: LD_EXP 67
19527: NOT
19528: IFFALSE 19538
// StreamModeActive := true ;
19530: LD_ADDR_EXP 67
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 0 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 0
19545: EQUAL
19546: IFFALSE 19552
// InitStreamMode ;
19548: CALL 20630 0 0
// if p3 = 1 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 1
19559: EQUAL
19560: IFFALSE 19570
// sRocket := true ;
19562: LD_ADDR_EXP 72
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 2 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 2
19577: EQUAL
19578: IFFALSE 19588
// sSpeed := true ;
19580: LD_ADDR_EXP 71
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 3 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 3
19595: EQUAL
19596: IFFALSE 19606
// sEngine := true ;
19598: LD_ADDR_EXP 73
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 4 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 4
19613: EQUAL
19614: IFFALSE 19624
// sSpec := true ;
19616: LD_ADDR_EXP 70
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 5 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 5
19631: EQUAL
19632: IFFALSE 19642
// sLevel := true ;
19634: LD_ADDR_EXP 74
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// if p3 = 6 then
19642: LD_VAR 0 3
19646: PUSH
19647: LD_INT 6
19649: EQUAL
19650: IFFALSE 19660
// sArmoury := true ;
19652: LD_ADDR_EXP 75
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 7 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 7
19667: EQUAL
19668: IFFALSE 19678
// sRadar := true ;
19670: LD_ADDR_EXP 76
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if p3 = 8 then
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 8
19685: EQUAL
19686: IFFALSE 19696
// sBunker := true ;
19688: LD_ADDR_EXP 77
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if p3 = 9 then
19696: LD_VAR 0 3
19700: PUSH
19701: LD_INT 9
19703: EQUAL
19704: IFFALSE 19714
// sHack := true ;
19706: LD_ADDR_EXP 78
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if p3 = 10 then
19714: LD_VAR 0 3
19718: PUSH
19719: LD_INT 10
19721: EQUAL
19722: IFFALSE 19732
// sFire := true ;
19724: LD_ADDR_EXP 79
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 11 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 11
19739: EQUAL
19740: IFFALSE 19750
// sRefresh := true ;
19742: LD_ADDR_EXP 80
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// if p3 = 12 then
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 12
19757: EQUAL
19758: IFFALSE 19768
// sExp := true ;
19760: LD_ADDR_EXP 81
19764: PUSH
19765: LD_INT 1
19767: ST_TO_ADDR
// if p3 = 13 then
19768: LD_VAR 0 3
19772: PUSH
19773: LD_INT 13
19775: EQUAL
19776: IFFALSE 19786
// sDepot := true ;
19778: LD_ADDR_EXP 82
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// if p3 = 14 then
19786: LD_VAR 0 3
19790: PUSH
19791: LD_INT 14
19793: EQUAL
19794: IFFALSE 19804
// sFlag := true ;
19796: LD_ADDR_EXP 83
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// if p3 = 15 then
19804: LD_VAR 0 3
19808: PUSH
19809: LD_INT 15
19811: EQUAL
19812: IFFALSE 19822
// sKamikadze := true ;
19814: LD_ADDR_EXP 91
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// if p3 = 16 then
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 16
19829: EQUAL
19830: IFFALSE 19840
// sTroll := true ;
19832: LD_ADDR_EXP 92
19836: PUSH
19837: LD_INT 1
19839: ST_TO_ADDR
// if p3 = 17 then
19840: LD_VAR 0 3
19844: PUSH
19845: LD_INT 17
19847: EQUAL
19848: IFFALSE 19858
// sSlow := true ;
19850: LD_ADDR_EXP 93
19854: PUSH
19855: LD_INT 1
19857: ST_TO_ADDR
// if p3 = 18 then
19858: LD_VAR 0 3
19862: PUSH
19863: LD_INT 18
19865: EQUAL
19866: IFFALSE 19876
// sLack := true ;
19868: LD_ADDR_EXP 94
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// if p3 = 19 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 19
19883: EQUAL
19884: IFFALSE 19894
// sTank := true ;
19886: LD_ADDR_EXP 96
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// if p3 = 20 then
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 20
19901: EQUAL
19902: IFFALSE 19912
// sRemote := true ;
19904: LD_ADDR_EXP 97
19908: PUSH
19909: LD_INT 1
19911: ST_TO_ADDR
// if p3 = 21 then
19912: LD_VAR 0 3
19916: PUSH
19917: LD_INT 21
19919: EQUAL
19920: IFFALSE 19930
// sPowell := true ;
19922: LD_ADDR_EXP 98
19926: PUSH
19927: LD_INT 1
19929: ST_TO_ADDR
// if p3 = 22 then
19930: LD_VAR 0 3
19934: PUSH
19935: LD_INT 22
19937: EQUAL
19938: IFFALSE 19948
// sTeleport := true ;
19940: LD_ADDR_EXP 101
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if p3 = 23 then
19948: LD_VAR 0 3
19952: PUSH
19953: LD_INT 23
19955: EQUAL
19956: IFFALSE 19966
// sOilTower := true ;
19958: LD_ADDR_EXP 103
19962: PUSH
19963: LD_INT 1
19965: ST_TO_ADDR
// if p3 = 24 then
19966: LD_VAR 0 3
19970: PUSH
19971: LD_INT 24
19973: EQUAL
19974: IFFALSE 19984
// sShovel := true ;
19976: LD_ADDR_EXP 104
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// if p3 = 25 then
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 25
19991: EQUAL
19992: IFFALSE 20002
// sSheik := true ;
19994: LD_ADDR_EXP 105
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// if p3 = 26 then
20002: LD_VAR 0 3
20006: PUSH
20007: LD_INT 26
20009: EQUAL
20010: IFFALSE 20020
// sEarthquake := true ;
20012: LD_ADDR_EXP 107
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// if p3 = 27 then
20020: LD_VAR 0 3
20024: PUSH
20025: LD_INT 27
20027: EQUAL
20028: IFFALSE 20038
// sAI := true ;
20030: LD_ADDR_EXP 108
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// if p3 = 28 then
20038: LD_VAR 0 3
20042: PUSH
20043: LD_INT 28
20045: EQUAL
20046: IFFALSE 20056
// sCargo := true ;
20048: LD_ADDR_EXP 111
20052: PUSH
20053: LD_INT 1
20055: ST_TO_ADDR
// if p3 = 29 then
20056: LD_VAR 0 3
20060: PUSH
20061: LD_INT 29
20063: EQUAL
20064: IFFALSE 20074
// sDLaser := true ;
20066: LD_ADDR_EXP 112
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// if p3 = 30 then
20074: LD_VAR 0 3
20078: PUSH
20079: LD_INT 30
20081: EQUAL
20082: IFFALSE 20092
// sExchange := true ;
20084: LD_ADDR_EXP 113
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// if p3 = 31 then
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 31
20099: EQUAL
20100: IFFALSE 20110
// sFac := true ;
20102: LD_ADDR_EXP 114
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// if p3 = 32 then
20110: LD_VAR 0 3
20114: PUSH
20115: LD_INT 32
20117: EQUAL
20118: IFFALSE 20128
// sPower := true ;
20120: LD_ADDR_EXP 115
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// if p3 = 33 then
20128: LD_VAR 0 3
20132: PUSH
20133: LD_INT 33
20135: EQUAL
20136: IFFALSE 20146
// sRandom := true ;
20138: LD_ADDR_EXP 116
20142: PUSH
20143: LD_INT 1
20145: ST_TO_ADDR
// if p3 = 34 then
20146: LD_VAR 0 3
20150: PUSH
20151: LD_INT 34
20153: EQUAL
20154: IFFALSE 20164
// sShield := true ;
20156: LD_ADDR_EXP 117
20160: PUSH
20161: LD_INT 1
20163: ST_TO_ADDR
// if p3 = 35 then
20164: LD_VAR 0 3
20168: PUSH
20169: LD_INT 35
20171: EQUAL
20172: IFFALSE 20182
// sTime := true ;
20174: LD_ADDR_EXP 118
20178: PUSH
20179: LD_INT 1
20181: ST_TO_ADDR
// if p3 = 36 then
20182: LD_VAR 0 3
20186: PUSH
20187: LD_INT 36
20189: EQUAL
20190: IFFALSE 20200
// sTools := true ;
20192: LD_ADDR_EXP 119
20196: PUSH
20197: LD_INT 1
20199: ST_TO_ADDR
// if p3 = 101 then
20200: LD_VAR 0 3
20204: PUSH
20205: LD_INT 101
20207: EQUAL
20208: IFFALSE 20218
// sSold := true ;
20210: LD_ADDR_EXP 84
20214: PUSH
20215: LD_INT 1
20217: ST_TO_ADDR
// if p3 = 102 then
20218: LD_VAR 0 3
20222: PUSH
20223: LD_INT 102
20225: EQUAL
20226: IFFALSE 20236
// sDiff := true ;
20228: LD_ADDR_EXP 85
20232: PUSH
20233: LD_INT 1
20235: ST_TO_ADDR
// if p3 = 103 then
20236: LD_VAR 0 3
20240: PUSH
20241: LD_INT 103
20243: EQUAL
20244: IFFALSE 20254
// sFog := true ;
20246: LD_ADDR_EXP 88
20250: PUSH
20251: LD_INT 1
20253: ST_TO_ADDR
// if p3 = 104 then
20254: LD_VAR 0 3
20258: PUSH
20259: LD_INT 104
20261: EQUAL
20262: IFFALSE 20272
// sReset := true ;
20264: LD_ADDR_EXP 89
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// if p3 = 105 then
20272: LD_VAR 0 3
20276: PUSH
20277: LD_INT 105
20279: EQUAL
20280: IFFALSE 20290
// sSun := true ;
20282: LD_ADDR_EXP 90
20286: PUSH
20287: LD_INT 1
20289: ST_TO_ADDR
// if p3 = 106 then
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 106
20297: EQUAL
20298: IFFALSE 20308
// sTiger := true ;
20300: LD_ADDR_EXP 86
20304: PUSH
20305: LD_INT 1
20307: ST_TO_ADDR
// if p3 = 107 then
20308: LD_VAR 0 3
20312: PUSH
20313: LD_INT 107
20315: EQUAL
20316: IFFALSE 20326
// sBomb := true ;
20318: LD_ADDR_EXP 87
20322: PUSH
20323: LD_INT 1
20325: ST_TO_ADDR
// if p3 = 108 then
20326: LD_VAR 0 3
20330: PUSH
20331: LD_INT 108
20333: EQUAL
20334: IFFALSE 20344
// sWound := true ;
20336: LD_ADDR_EXP 95
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// if p3 = 109 then
20344: LD_VAR 0 3
20348: PUSH
20349: LD_INT 109
20351: EQUAL
20352: IFFALSE 20362
// sBetray := true ;
20354: LD_ADDR_EXP 99
20358: PUSH
20359: LD_INT 1
20361: ST_TO_ADDR
// if p3 = 110 then
20362: LD_VAR 0 3
20366: PUSH
20367: LD_INT 110
20369: EQUAL
20370: IFFALSE 20380
// sContamin := true ;
20372: LD_ADDR_EXP 100
20376: PUSH
20377: LD_INT 1
20379: ST_TO_ADDR
// if p3 = 111 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 111
20387: EQUAL
20388: IFFALSE 20398
// sOil := true ;
20390: LD_ADDR_EXP 102
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 112 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 112
20405: EQUAL
20406: IFFALSE 20416
// sStu := true ;
20408: LD_ADDR_EXP 106
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 113 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 113
20423: EQUAL
20424: IFFALSE 20434
// sBazooka := true ;
20426: LD_ADDR_EXP 109
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 114 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 114
20441: EQUAL
20442: IFFALSE 20452
// sMortar := true ;
20444: LD_ADDR_EXP 110
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 115 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 115
20459: EQUAL
20460: IFFALSE 20470
// sRanger := true ;
20462: LD_ADDR_EXP 120
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// end ; if p2 = 101 then
20470: LD_VAR 0 2
20474: PUSH
20475: LD_INT 101
20477: EQUAL
20478: IFFALSE 20606
// begin case p3 of 1 :
20480: LD_VAR 0 3
20484: PUSH
20485: LD_INT 1
20487: DOUBLE
20488: EQUAL
20489: IFTRUE 20493
20491: GO 20500
20493: POP
// hHackUnlimitedResources ; 2 :
20494: CALL 31643 0 0
20498: GO 20606
20500: LD_INT 2
20502: DOUBLE
20503: EQUAL
20504: IFTRUE 20508
20506: GO 20515
20508: POP
// hHackSetLevel10 ; 3 :
20509: CALL 31776 0 0
20513: GO 20606
20515: LD_INT 3
20517: DOUBLE
20518: EQUAL
20519: IFTRUE 20523
20521: GO 20530
20523: POP
// hHackSetLevel10YourUnits ; 4 :
20524: CALL 31861 0 0
20528: GO 20606
20530: LD_INT 4
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20545
20538: POP
// hHackInvincible ; 5 :
20539: CALL 32309 0 0
20543: GO 20606
20545: LD_INT 5
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20560
20553: POP
// hHackInvisible ; 6 :
20554: CALL 32420 0 0
20558: GO 20606
20560: LD_INT 6
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20575
20568: POP
// hHackChangeYourSide ; 7 :
20569: CALL 32477 0 0
20573: GO 20606
20575: LD_INT 7
20577: DOUBLE
20578: EQUAL
20579: IFTRUE 20583
20581: GO 20590
20583: POP
// hHackChangeUnitSide ; 8 :
20584: CALL 32519 0 0
20588: GO 20606
20590: LD_INT 8
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20605
20598: POP
// hHackFog ; end ;
20599: CALL 32620 0 0
20603: GO 20606
20605: POP
// end ; end ;
20606: LD_VAR 0 7
20610: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20611: GO 20613
20613: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20614: LD_STRING initStreamRollete();
20616: PPUSH
20617: CALL_OW 559
// InitStreamMode ;
20621: CALL 20630 0 0
// DefineStreamItems ( ) ;
20625: CALL 21070 0 0
// end ;
20629: END
// function InitStreamMode ; begin
20630: LD_INT 0
20632: PPUSH
// streamModeActive := false ;
20633: LD_ADDR_EXP 67
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// normalCounter := 36 ;
20641: LD_ADDR_EXP 68
20645: PUSH
20646: LD_INT 36
20648: ST_TO_ADDR
// hardcoreCounter := 16 ;
20649: LD_ADDR_EXP 69
20653: PUSH
20654: LD_INT 16
20656: ST_TO_ADDR
// sRocket := false ;
20657: LD_ADDR_EXP 72
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sSpeed := false ;
20665: LD_ADDR_EXP 71
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sEngine := false ;
20673: LD_ADDR_EXP 73
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sSpec := false ;
20681: LD_ADDR_EXP 70
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sLevel := false ;
20689: LD_ADDR_EXP 74
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sArmoury := false ;
20697: LD_ADDR_EXP 75
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sRadar := false ;
20705: LD_ADDR_EXP 76
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sBunker := false ;
20713: LD_ADDR_EXP 77
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sHack := false ;
20721: LD_ADDR_EXP 78
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sFire := false ;
20729: LD_ADDR_EXP 79
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sRefresh := false ;
20737: LD_ADDR_EXP 80
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sExp := false ;
20745: LD_ADDR_EXP 81
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sDepot := false ;
20753: LD_ADDR_EXP 82
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sFlag := false ;
20761: LD_ADDR_EXP 83
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sKamikadze := false ;
20769: LD_ADDR_EXP 91
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sTroll := false ;
20777: LD_ADDR_EXP 92
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sSlow := false ;
20785: LD_ADDR_EXP 93
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sLack := false ;
20793: LD_ADDR_EXP 94
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sTank := false ;
20801: LD_ADDR_EXP 96
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sRemote := false ;
20809: LD_ADDR_EXP 97
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sPowell := false ;
20817: LD_ADDR_EXP 98
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sTeleport := false ;
20825: LD_ADDR_EXP 101
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sOilTower := false ;
20833: LD_ADDR_EXP 103
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sShovel := false ;
20841: LD_ADDR_EXP 104
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sSheik := false ;
20849: LD_ADDR_EXP 105
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sEarthquake := false ;
20857: LD_ADDR_EXP 107
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sAI := false ;
20865: LD_ADDR_EXP 108
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sCargo := false ;
20873: LD_ADDR_EXP 111
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sDLaser := false ;
20881: LD_ADDR_EXP 112
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sExchange := false ;
20889: LD_ADDR_EXP 113
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sFac := false ;
20897: LD_ADDR_EXP 114
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sPower := false ;
20905: LD_ADDR_EXP 115
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sRandom := false ;
20913: LD_ADDR_EXP 116
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sShield := false ;
20921: LD_ADDR_EXP 117
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sTime := false ;
20929: LD_ADDR_EXP 118
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sTools := false ;
20937: LD_ADDR_EXP 119
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sSold := false ;
20945: LD_ADDR_EXP 84
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sDiff := false ;
20953: LD_ADDR_EXP 85
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sFog := false ;
20961: LD_ADDR_EXP 88
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sReset := false ;
20969: LD_ADDR_EXP 89
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sSun := false ;
20977: LD_ADDR_EXP 90
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sTiger := false ;
20985: LD_ADDR_EXP 86
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sBomb := false ;
20993: LD_ADDR_EXP 87
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sWound := false ;
21001: LD_ADDR_EXP 95
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sBetray := false ;
21009: LD_ADDR_EXP 99
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sContamin := false ;
21017: LD_ADDR_EXP 100
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sOil := false ;
21025: LD_ADDR_EXP 102
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sStu := false ;
21033: LD_ADDR_EXP 106
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// sBazooka := false ;
21041: LD_ADDR_EXP 109
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// sMortar := false ;
21049: LD_ADDR_EXP 110
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// sRanger := false ;
21057: LD_ADDR_EXP 120
21061: PUSH
21062: LD_INT 0
21064: ST_TO_ADDR
// end ;
21065: LD_VAR 0 1
21069: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21070: LD_INT 0
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
// result := [ ] ;
21077: LD_ADDR_VAR 0 1
21081: PUSH
21082: EMPTY
21083: ST_TO_ADDR
// if campaign_id = 1 then
21084: LD_OWVAR 69
21088: PUSH
21089: LD_INT 1
21091: EQUAL
21092: IFFALSE 24030
// begin case mission_number of 1 :
21094: LD_OWVAR 70
21098: PUSH
21099: LD_INT 1
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21171
21107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21108: LD_ADDR_VAR 0 1
21112: PUSH
21113: LD_INT 2
21115: PUSH
21116: LD_INT 4
21118: PUSH
21119: LD_INT 11
21121: PUSH
21122: LD_INT 12
21124: PUSH
21125: LD_INT 15
21127: PUSH
21128: LD_INT 16
21130: PUSH
21131: LD_INT 22
21133: PUSH
21134: LD_INT 23
21136: PUSH
21137: LD_INT 26
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 101
21153: PUSH
21154: LD_INT 102
21156: PUSH
21157: LD_INT 106
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: ST_TO_ADDR
21169: GO 24028
21171: LD_INT 2
21173: DOUBLE
21174: EQUAL
21175: IFTRUE 21179
21177: GO 21251
21179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21180: LD_ADDR_VAR 0 1
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 4
21190: PUSH
21191: LD_INT 11
21193: PUSH
21194: LD_INT 12
21196: PUSH
21197: LD_INT 15
21199: PUSH
21200: LD_INT 16
21202: PUSH
21203: LD_INT 22
21205: PUSH
21206: LD_INT 23
21208: PUSH
21209: LD_INT 26
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 101
21225: PUSH
21226: LD_INT 102
21228: PUSH
21229: LD_INT 105
21231: PUSH
21232: LD_INT 106
21234: PUSH
21235: LD_INT 108
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: ST_TO_ADDR
21249: GO 24028
21251: LD_INT 3
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21335
21259: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: LD_INT 4
21270: PUSH
21271: LD_INT 5
21273: PUSH
21274: LD_INT 11
21276: PUSH
21277: LD_INT 12
21279: PUSH
21280: LD_INT 15
21282: PUSH
21283: LD_INT 16
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_INT 26
21291: PUSH
21292: LD_INT 36
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 101
21309: PUSH
21310: LD_INT 102
21312: PUSH
21313: LD_INT 105
21315: PUSH
21316: LD_INT 106
21318: PUSH
21319: LD_INT 108
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: ST_TO_ADDR
21333: GO 24028
21335: LD_INT 4
21337: DOUBLE
21338: EQUAL
21339: IFTRUE 21343
21341: GO 21427
21343: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 4
21354: PUSH
21355: LD_INT 5
21357: PUSH
21358: LD_INT 8
21360: PUSH
21361: LD_INT 11
21363: PUSH
21364: LD_INT 12
21366: PUSH
21367: LD_INT 15
21369: PUSH
21370: LD_INT 16
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_INT 23
21378: PUSH
21379: LD_INT 26
21381: PUSH
21382: LD_INT 36
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 101
21401: PUSH
21402: LD_INT 102
21404: PUSH
21405: LD_INT 105
21407: PUSH
21408: LD_INT 106
21410: PUSH
21411: LD_INT 108
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: ST_TO_ADDR
21425: GO 24028
21427: LD_INT 5
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21535
21435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 4
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: LD_INT 6
21452: PUSH
21453: LD_INT 8
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 15
21464: PUSH
21465: LD_INT 16
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_INT 23
21473: PUSH
21474: LD_INT 25
21476: PUSH
21477: LD_INT 26
21479: PUSH
21480: LD_INT 36
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 101
21501: PUSH
21502: LD_INT 102
21504: PUSH
21505: LD_INT 105
21507: PUSH
21508: LD_INT 106
21510: PUSH
21511: LD_INT 108
21513: PUSH
21514: LD_INT 109
21516: PUSH
21517: LD_INT 112
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: ST_TO_ADDR
21533: GO 24028
21535: LD_INT 6
21537: DOUBLE
21538: EQUAL
21539: IFTRUE 21543
21541: GO 21663
21543: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21544: LD_ADDR_VAR 0 1
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 4
21554: PUSH
21555: LD_INT 5
21557: PUSH
21558: LD_INT 6
21560: PUSH
21561: LD_INT 8
21563: PUSH
21564: LD_INT 11
21566: PUSH
21567: LD_INT 12
21569: PUSH
21570: LD_INT 15
21572: PUSH
21573: LD_INT 16
21575: PUSH
21576: LD_INT 20
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_INT 23
21587: PUSH
21588: LD_INT 25
21590: PUSH
21591: LD_INT 26
21593: PUSH
21594: LD_INT 30
21596: PUSH
21597: LD_INT 31
21599: PUSH
21600: LD_INT 32
21602: PUSH
21603: LD_INT 36
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 101
21629: PUSH
21630: LD_INT 102
21632: PUSH
21633: LD_INT 105
21635: PUSH
21636: LD_INT 106
21638: PUSH
21639: LD_INT 108
21641: PUSH
21642: LD_INT 109
21644: PUSH
21645: LD_INT 112
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: ST_TO_ADDR
21661: GO 24028
21663: LD_INT 7
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21771
21671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21672: LD_ADDR_VAR 0 1
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: LD_INT 4
21682: PUSH
21683: LD_INT 5
21685: PUSH
21686: LD_INT 7
21688: PUSH
21689: LD_INT 11
21691: PUSH
21692: LD_INT 12
21694: PUSH
21695: LD_INT 15
21697: PUSH
21698: LD_INT 16
21700: PUSH
21701: LD_INT 20
21703: PUSH
21704: LD_INT 21
21706: PUSH
21707: LD_INT 22
21709: PUSH
21710: LD_INT 23
21712: PUSH
21713: LD_INT 25
21715: PUSH
21716: LD_INT 26
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 101
21737: PUSH
21738: LD_INT 102
21740: PUSH
21741: LD_INT 103
21743: PUSH
21744: LD_INT 105
21746: PUSH
21747: LD_INT 106
21749: PUSH
21750: LD_INT 108
21752: PUSH
21753: LD_INT 112
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: ST_TO_ADDR
21769: GO 24028
21771: LD_INT 8
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21907
21779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21780: LD_ADDR_VAR 0 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 4
21790: PUSH
21791: LD_INT 5
21793: PUSH
21794: LD_INT 6
21796: PUSH
21797: LD_INT 7
21799: PUSH
21800: LD_INT 8
21802: PUSH
21803: LD_INT 11
21805: PUSH
21806: LD_INT 12
21808: PUSH
21809: LD_INT 15
21811: PUSH
21812: LD_INT 16
21814: PUSH
21815: LD_INT 20
21817: PUSH
21818: LD_INT 21
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_INT 23
21826: PUSH
21827: LD_INT 25
21829: PUSH
21830: LD_INT 26
21832: PUSH
21833: LD_INT 30
21835: PUSH
21836: LD_INT 31
21838: PUSH
21839: LD_INT 32
21841: PUSH
21842: LD_INT 36
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 101
21869: PUSH
21870: LD_INT 102
21872: PUSH
21873: LD_INT 103
21875: PUSH
21876: LD_INT 105
21878: PUSH
21879: LD_INT 106
21881: PUSH
21882: LD_INT 108
21884: PUSH
21885: LD_INT 109
21887: PUSH
21888: LD_INT 112
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: ST_TO_ADDR
21905: GO 24028
21907: LD_INT 9
21909: DOUBLE
21910: EQUAL
21911: IFTRUE 21915
21913: GO 22051
21915: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21916: LD_ADDR_VAR 0 1
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 4
21926: PUSH
21927: LD_INT 5
21929: PUSH
21930: LD_INT 6
21932: PUSH
21933: LD_INT 7
21935: PUSH
21936: LD_INT 8
21938: PUSH
21939: LD_INT 11
21941: PUSH
21942: LD_INT 12
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 20
21953: PUSH
21954: LD_INT 21
21956: PUSH
21957: LD_INT 22
21959: PUSH
21960: LD_INT 23
21962: PUSH
21963: LD_INT 25
21965: PUSH
21966: LD_INT 26
21968: PUSH
21969: LD_INT 28
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: LD_INT 31
21977: PUSH
21978: LD_INT 32
21980: PUSH
21981: LD_INT 36
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 101
22009: PUSH
22010: LD_INT 102
22012: PUSH
22013: LD_INT 103
22015: PUSH
22016: LD_INT 105
22018: PUSH
22019: LD_INT 106
22021: PUSH
22022: LD_INT 108
22024: PUSH
22025: LD_INT 109
22027: PUSH
22028: LD_INT 112
22030: PUSH
22031: LD_INT 114
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: ST_TO_ADDR
22049: GO 24028
22051: LD_INT 10
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22243
22059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22060: LD_ADDR_VAR 0 1
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 4
22070: PUSH
22071: LD_INT 5
22073: PUSH
22074: LD_INT 6
22076: PUSH
22077: LD_INT 7
22079: PUSH
22080: LD_INT 8
22082: PUSH
22083: LD_INT 9
22085: PUSH
22086: LD_INT 10
22088: PUSH
22089: LD_INT 11
22091: PUSH
22092: LD_INT 12
22094: PUSH
22095: LD_INT 13
22097: PUSH
22098: LD_INT 14
22100: PUSH
22101: LD_INT 15
22103: PUSH
22104: LD_INT 16
22106: PUSH
22107: LD_INT 17
22109: PUSH
22110: LD_INT 18
22112: PUSH
22113: LD_INT 19
22115: PUSH
22116: LD_INT 20
22118: PUSH
22119: LD_INT 21
22121: PUSH
22122: LD_INT 22
22124: PUSH
22125: LD_INT 23
22127: PUSH
22128: LD_INT 24
22130: PUSH
22131: LD_INT 25
22133: PUSH
22134: LD_INT 26
22136: PUSH
22137: LD_INT 28
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: LD_INT 31
22145: PUSH
22146: LD_INT 32
22148: PUSH
22149: LD_INT 36
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 101
22185: PUSH
22186: LD_INT 102
22188: PUSH
22189: LD_INT 103
22191: PUSH
22192: LD_INT 104
22194: PUSH
22195: LD_INT 105
22197: PUSH
22198: LD_INT 106
22200: PUSH
22201: LD_INT 107
22203: PUSH
22204: LD_INT 108
22206: PUSH
22207: LD_INT 109
22209: PUSH
22210: LD_INT 110
22212: PUSH
22213: LD_INT 111
22215: PUSH
22216: LD_INT 112
22218: PUSH
22219: LD_INT 114
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: ST_TO_ADDR
22241: GO 24028
22243: LD_INT 11
22245: DOUBLE
22246: EQUAL
22247: IFTRUE 22251
22249: GO 22443
22251: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: LD_INT 3
22262: PUSH
22263: LD_INT 4
22265: PUSH
22266: LD_INT 5
22268: PUSH
22269: LD_INT 6
22271: PUSH
22272: LD_INT 7
22274: PUSH
22275: LD_INT 8
22277: PUSH
22278: LD_INT 9
22280: PUSH
22281: LD_INT 10
22283: PUSH
22284: LD_INT 11
22286: PUSH
22287: LD_INT 12
22289: PUSH
22290: LD_INT 13
22292: PUSH
22293: LD_INT 14
22295: PUSH
22296: LD_INT 15
22298: PUSH
22299: LD_INT 16
22301: PUSH
22302: LD_INT 17
22304: PUSH
22305: LD_INT 18
22307: PUSH
22308: LD_INT 19
22310: PUSH
22311: LD_INT 20
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_INT 23
22322: PUSH
22323: LD_INT 24
22325: PUSH
22326: LD_INT 25
22328: PUSH
22329: LD_INT 26
22331: PUSH
22332: LD_INT 28
22334: PUSH
22335: LD_INT 30
22337: PUSH
22338: LD_INT 31
22340: PUSH
22341: LD_INT 32
22343: PUSH
22344: LD_INT 34
22346: PUSH
22347: LD_INT 36
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 101
22385: PUSH
22386: LD_INT 102
22388: PUSH
22389: LD_INT 103
22391: PUSH
22392: LD_INT 104
22394: PUSH
22395: LD_INT 105
22397: PUSH
22398: LD_INT 106
22400: PUSH
22401: LD_INT 107
22403: PUSH
22404: LD_INT 108
22406: PUSH
22407: LD_INT 109
22409: PUSH
22410: LD_INT 110
22412: PUSH
22413: LD_INT 111
22415: PUSH
22416: LD_INT 112
22418: PUSH
22419: LD_INT 114
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: ST_TO_ADDR
22441: GO 24028
22443: LD_INT 12
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22659
22451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22452: LD_ADDR_VAR 0 1
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: LD_INT 4
22468: PUSH
22469: LD_INT 5
22471: PUSH
22472: LD_INT 6
22474: PUSH
22475: LD_INT 7
22477: PUSH
22478: LD_INT 8
22480: PUSH
22481: LD_INT 9
22483: PUSH
22484: LD_INT 10
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 13
22495: PUSH
22496: LD_INT 14
22498: PUSH
22499: LD_INT 15
22501: PUSH
22502: LD_INT 16
22504: PUSH
22505: LD_INT 17
22507: PUSH
22508: LD_INT 18
22510: PUSH
22511: LD_INT 19
22513: PUSH
22514: LD_INT 20
22516: PUSH
22517: LD_INT 21
22519: PUSH
22520: LD_INT 22
22522: PUSH
22523: LD_INT 23
22525: PUSH
22526: LD_INT 24
22528: PUSH
22529: LD_INT 25
22531: PUSH
22532: LD_INT 26
22534: PUSH
22535: LD_INT 27
22537: PUSH
22538: LD_INT 28
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 31
22546: PUSH
22547: LD_INT 32
22549: PUSH
22550: LD_INT 33
22552: PUSH
22553: LD_INT 34
22555: PUSH
22556: LD_INT 36
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 101
22597: PUSH
22598: LD_INT 102
22600: PUSH
22601: LD_INT 103
22603: PUSH
22604: LD_INT 104
22606: PUSH
22607: LD_INT 105
22609: PUSH
22610: LD_INT 106
22612: PUSH
22613: LD_INT 107
22615: PUSH
22616: LD_INT 108
22618: PUSH
22619: LD_INT 109
22621: PUSH
22622: LD_INT 110
22624: PUSH
22625: LD_INT 111
22627: PUSH
22628: LD_INT 112
22630: PUSH
22631: LD_INT 113
22633: PUSH
22634: LD_INT 114
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: ST_TO_ADDR
22657: GO 24028
22659: LD_INT 13
22661: DOUBLE
22662: EQUAL
22663: IFTRUE 22667
22665: GO 22863
22667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22668: LD_ADDR_VAR 0 1
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 4
22684: PUSH
22685: LD_INT 5
22687: PUSH
22688: LD_INT 8
22690: PUSH
22691: LD_INT 9
22693: PUSH
22694: LD_INT 10
22696: PUSH
22697: LD_INT 11
22699: PUSH
22700: LD_INT 12
22702: PUSH
22703: LD_INT 14
22705: PUSH
22706: LD_INT 15
22708: PUSH
22709: LD_INT 16
22711: PUSH
22712: LD_INT 17
22714: PUSH
22715: LD_INT 18
22717: PUSH
22718: LD_INT 19
22720: PUSH
22721: LD_INT 20
22723: PUSH
22724: LD_INT 21
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_INT 23
22732: PUSH
22733: LD_INT 24
22735: PUSH
22736: LD_INT 25
22738: PUSH
22739: LD_INT 26
22741: PUSH
22742: LD_INT 27
22744: PUSH
22745: LD_INT 28
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 31
22753: PUSH
22754: LD_INT 32
22756: PUSH
22757: LD_INT 33
22759: PUSH
22760: LD_INT 34
22762: PUSH
22763: LD_INT 36
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 101
22801: PUSH
22802: LD_INT 102
22804: PUSH
22805: LD_INT 103
22807: PUSH
22808: LD_INT 104
22810: PUSH
22811: LD_INT 105
22813: PUSH
22814: LD_INT 106
22816: PUSH
22817: LD_INT 107
22819: PUSH
22820: LD_INT 108
22822: PUSH
22823: LD_INT 109
22825: PUSH
22826: LD_INT 110
22828: PUSH
22829: LD_INT 111
22831: PUSH
22832: LD_INT 112
22834: PUSH
22835: LD_INT 113
22837: PUSH
22838: LD_INT 114
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: ST_TO_ADDR
22861: GO 24028
22863: LD_INT 14
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 23083
22871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22872: LD_ADDR_VAR 0 1
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: LD_INT 4
22888: PUSH
22889: LD_INT 5
22891: PUSH
22892: LD_INT 6
22894: PUSH
22895: LD_INT 7
22897: PUSH
22898: LD_INT 8
22900: PUSH
22901: LD_INT 9
22903: PUSH
22904: LD_INT 10
22906: PUSH
22907: LD_INT 11
22909: PUSH
22910: LD_INT 12
22912: PUSH
22913: LD_INT 13
22915: PUSH
22916: LD_INT 14
22918: PUSH
22919: LD_INT 15
22921: PUSH
22922: LD_INT 16
22924: PUSH
22925: LD_INT 17
22927: PUSH
22928: LD_INT 18
22930: PUSH
22931: LD_INT 19
22933: PUSH
22934: LD_INT 20
22936: PUSH
22937: LD_INT 21
22939: PUSH
22940: LD_INT 22
22942: PUSH
22943: LD_INT 23
22945: PUSH
22946: LD_INT 24
22948: PUSH
22949: LD_INT 25
22951: PUSH
22952: LD_INT 26
22954: PUSH
22955: LD_INT 27
22957: PUSH
22958: LD_INT 28
22960: PUSH
22961: LD_INT 29
22963: PUSH
22964: LD_INT 30
22966: PUSH
22967: LD_INT 31
22969: PUSH
22970: LD_INT 32
22972: PUSH
22973: LD_INT 33
22975: PUSH
22976: LD_INT 34
22978: PUSH
22979: LD_INT 36
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 101
23021: PUSH
23022: LD_INT 102
23024: PUSH
23025: LD_INT 103
23027: PUSH
23028: LD_INT 104
23030: PUSH
23031: LD_INT 105
23033: PUSH
23034: LD_INT 106
23036: PUSH
23037: LD_INT 107
23039: PUSH
23040: LD_INT 108
23042: PUSH
23043: LD_INT 109
23045: PUSH
23046: LD_INT 110
23048: PUSH
23049: LD_INT 111
23051: PUSH
23052: LD_INT 112
23054: PUSH
23055: LD_INT 113
23057: PUSH
23058: LD_INT 114
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: ST_TO_ADDR
23081: GO 24028
23083: LD_INT 15
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23303
23091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23092: LD_ADDR_VAR 0 1
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 4
23108: PUSH
23109: LD_INT 5
23111: PUSH
23112: LD_INT 6
23114: PUSH
23115: LD_INT 7
23117: PUSH
23118: LD_INT 8
23120: PUSH
23121: LD_INT 9
23123: PUSH
23124: LD_INT 10
23126: PUSH
23127: LD_INT 11
23129: PUSH
23130: LD_INT 12
23132: PUSH
23133: LD_INT 13
23135: PUSH
23136: LD_INT 14
23138: PUSH
23139: LD_INT 15
23141: PUSH
23142: LD_INT 16
23144: PUSH
23145: LD_INT 17
23147: PUSH
23148: LD_INT 18
23150: PUSH
23151: LD_INT 19
23153: PUSH
23154: LD_INT 20
23156: PUSH
23157: LD_INT 21
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_INT 23
23165: PUSH
23166: LD_INT 24
23168: PUSH
23169: LD_INT 25
23171: PUSH
23172: LD_INT 26
23174: PUSH
23175: LD_INT 27
23177: PUSH
23178: LD_INT 28
23180: PUSH
23181: LD_INT 29
23183: PUSH
23184: LD_INT 30
23186: PUSH
23187: LD_INT 31
23189: PUSH
23190: LD_INT 32
23192: PUSH
23193: LD_INT 33
23195: PUSH
23196: LD_INT 34
23198: PUSH
23199: LD_INT 36
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 101
23241: PUSH
23242: LD_INT 102
23244: PUSH
23245: LD_INT 103
23247: PUSH
23248: LD_INT 104
23250: PUSH
23251: LD_INT 105
23253: PUSH
23254: LD_INT 106
23256: PUSH
23257: LD_INT 107
23259: PUSH
23260: LD_INT 108
23262: PUSH
23263: LD_INT 109
23265: PUSH
23266: LD_INT 110
23268: PUSH
23269: LD_INT 111
23271: PUSH
23272: LD_INT 112
23274: PUSH
23275: LD_INT 113
23277: PUSH
23278: LD_INT 114
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 24028
23303: LD_INT 16
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23435
23311: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23312: LD_ADDR_VAR 0 1
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 4
23322: PUSH
23323: LD_INT 5
23325: PUSH
23326: LD_INT 7
23328: PUSH
23329: LD_INT 11
23331: PUSH
23332: LD_INT 12
23334: PUSH
23335: LD_INT 15
23337: PUSH
23338: LD_INT 16
23340: PUSH
23341: LD_INT 20
23343: PUSH
23344: LD_INT 21
23346: PUSH
23347: LD_INT 22
23349: PUSH
23350: LD_INT 23
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 26
23358: PUSH
23359: LD_INT 30
23361: PUSH
23362: LD_INT 31
23364: PUSH
23365: LD_INT 32
23367: PUSH
23368: LD_INT 33
23370: PUSH
23371: LD_INT 34
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 101
23397: PUSH
23398: LD_INT 102
23400: PUSH
23401: LD_INT 103
23403: PUSH
23404: LD_INT 106
23406: PUSH
23407: LD_INT 108
23409: PUSH
23410: LD_INT 112
23412: PUSH
23413: LD_INT 113
23415: PUSH
23416: LD_INT 114
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: ST_TO_ADDR
23433: GO 24028
23435: LD_INT 17
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23655
23443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23444: LD_ADDR_VAR 0 1
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 3
23457: PUSH
23458: LD_INT 4
23460: PUSH
23461: LD_INT 5
23463: PUSH
23464: LD_INT 6
23466: PUSH
23467: LD_INT 7
23469: PUSH
23470: LD_INT 8
23472: PUSH
23473: LD_INT 9
23475: PUSH
23476: LD_INT 10
23478: PUSH
23479: LD_INT 11
23481: PUSH
23482: LD_INT 12
23484: PUSH
23485: LD_INT 13
23487: PUSH
23488: LD_INT 14
23490: PUSH
23491: LD_INT 15
23493: PUSH
23494: LD_INT 16
23496: PUSH
23497: LD_INT 17
23499: PUSH
23500: LD_INT 18
23502: PUSH
23503: LD_INT 19
23505: PUSH
23506: LD_INT 20
23508: PUSH
23509: LD_INT 21
23511: PUSH
23512: LD_INT 22
23514: PUSH
23515: LD_INT 23
23517: PUSH
23518: LD_INT 24
23520: PUSH
23521: LD_INT 25
23523: PUSH
23524: LD_INT 26
23526: PUSH
23527: LD_INT 27
23529: PUSH
23530: LD_INT 28
23532: PUSH
23533: LD_INT 29
23535: PUSH
23536: LD_INT 30
23538: PUSH
23539: LD_INT 31
23541: PUSH
23542: LD_INT 32
23544: PUSH
23545: LD_INT 33
23547: PUSH
23548: LD_INT 34
23550: PUSH
23551: LD_INT 36
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 101
23593: PUSH
23594: LD_INT 102
23596: PUSH
23597: LD_INT 103
23599: PUSH
23600: LD_INT 104
23602: PUSH
23603: LD_INT 105
23605: PUSH
23606: LD_INT 106
23608: PUSH
23609: LD_INT 107
23611: PUSH
23612: LD_INT 108
23614: PUSH
23615: LD_INT 109
23617: PUSH
23618: LD_INT 110
23620: PUSH
23621: LD_INT 111
23623: PUSH
23624: LD_INT 112
23626: PUSH
23627: LD_INT 113
23629: PUSH
23630: LD_INT 114
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: ST_TO_ADDR
23653: GO 24028
23655: LD_INT 18
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23799
23663: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23664: LD_ADDR_VAR 0 1
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: LD_INT 4
23674: PUSH
23675: LD_INT 5
23677: PUSH
23678: LD_INT 7
23680: PUSH
23681: LD_INT 11
23683: PUSH
23684: LD_INT 12
23686: PUSH
23687: LD_INT 15
23689: PUSH
23690: LD_INT 16
23692: PUSH
23693: LD_INT 20
23695: PUSH
23696: LD_INT 21
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: LD_INT 23
23704: PUSH
23705: LD_INT 25
23707: PUSH
23708: LD_INT 26
23710: PUSH
23711: LD_INT 30
23713: PUSH
23714: LD_INT 31
23716: PUSH
23717: LD_INT 32
23719: PUSH
23720: LD_INT 33
23722: PUSH
23723: LD_INT 34
23725: PUSH
23726: LD_INT 35
23728: PUSH
23729: LD_INT 36
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 101
23757: PUSH
23758: LD_INT 102
23760: PUSH
23761: LD_INT 103
23763: PUSH
23764: LD_INT 106
23766: PUSH
23767: LD_INT 108
23769: PUSH
23770: LD_INT 112
23772: PUSH
23773: LD_INT 113
23775: PUSH
23776: LD_INT 114
23778: PUSH
23779: LD_INT 115
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: ST_TO_ADDR
23797: GO 24028
23799: LD_INT 19
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 24027
23807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23808: LD_ADDR_VAR 0 1
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: LD_INT 4
23824: PUSH
23825: LD_INT 5
23827: PUSH
23828: LD_INT 6
23830: PUSH
23831: LD_INT 7
23833: PUSH
23834: LD_INT 8
23836: PUSH
23837: LD_INT 9
23839: PUSH
23840: LD_INT 10
23842: PUSH
23843: LD_INT 11
23845: PUSH
23846: LD_INT 12
23848: PUSH
23849: LD_INT 13
23851: PUSH
23852: LD_INT 14
23854: PUSH
23855: LD_INT 15
23857: PUSH
23858: LD_INT 16
23860: PUSH
23861: LD_INT 17
23863: PUSH
23864: LD_INT 18
23866: PUSH
23867: LD_INT 19
23869: PUSH
23870: LD_INT 20
23872: PUSH
23873: LD_INT 21
23875: PUSH
23876: LD_INT 22
23878: PUSH
23879: LD_INT 23
23881: PUSH
23882: LD_INT 24
23884: PUSH
23885: LD_INT 25
23887: PUSH
23888: LD_INT 26
23890: PUSH
23891: LD_INT 27
23893: PUSH
23894: LD_INT 28
23896: PUSH
23897: LD_INT 29
23899: PUSH
23900: LD_INT 30
23902: PUSH
23903: LD_INT 31
23905: PUSH
23906: LD_INT 32
23908: PUSH
23909: LD_INT 33
23911: PUSH
23912: LD_INT 34
23914: PUSH
23915: LD_INT 35
23917: PUSH
23918: LD_INT 36
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 101
23961: PUSH
23962: LD_INT 102
23964: PUSH
23965: LD_INT 103
23967: PUSH
23968: LD_INT 104
23970: PUSH
23971: LD_INT 105
23973: PUSH
23974: LD_INT 106
23976: PUSH
23977: LD_INT 107
23979: PUSH
23980: LD_INT 108
23982: PUSH
23983: LD_INT 109
23985: PUSH
23986: LD_INT 110
23988: PUSH
23989: LD_INT 111
23991: PUSH
23992: LD_INT 112
23994: PUSH
23995: LD_INT 113
23997: PUSH
23998: LD_INT 114
24000: PUSH
24001: LD_INT 115
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: ST_TO_ADDR
24025: GO 24028
24027: POP
// end else
24028: GO 24247
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24030: LD_ADDR_VAR 0 1
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 4
24046: PUSH
24047: LD_INT 5
24049: PUSH
24050: LD_INT 6
24052: PUSH
24053: LD_INT 7
24055: PUSH
24056: LD_INT 8
24058: PUSH
24059: LD_INT 9
24061: PUSH
24062: LD_INT 10
24064: PUSH
24065: LD_INT 11
24067: PUSH
24068: LD_INT 12
24070: PUSH
24071: LD_INT 13
24073: PUSH
24074: LD_INT 14
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 16
24082: PUSH
24083: LD_INT 17
24085: PUSH
24086: LD_INT 18
24088: PUSH
24089: LD_INT 19
24091: PUSH
24092: LD_INT 20
24094: PUSH
24095: LD_INT 21
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 24
24106: PUSH
24107: LD_INT 25
24109: PUSH
24110: LD_INT 26
24112: PUSH
24113: LD_INT 27
24115: PUSH
24116: LD_INT 28
24118: PUSH
24119: LD_INT 29
24121: PUSH
24122: LD_INT 30
24124: PUSH
24125: LD_INT 31
24127: PUSH
24128: LD_INT 32
24130: PUSH
24131: LD_INT 33
24133: PUSH
24134: LD_INT 34
24136: PUSH
24137: LD_INT 35
24139: PUSH
24140: LD_INT 36
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 101
24183: PUSH
24184: LD_INT 102
24186: PUSH
24187: LD_INT 103
24189: PUSH
24190: LD_INT 104
24192: PUSH
24193: LD_INT 105
24195: PUSH
24196: LD_INT 106
24198: PUSH
24199: LD_INT 107
24201: PUSH
24202: LD_INT 108
24204: PUSH
24205: LD_INT 109
24207: PUSH
24208: LD_INT 110
24210: PUSH
24211: LD_INT 111
24213: PUSH
24214: LD_INT 112
24216: PUSH
24217: LD_INT 113
24219: PUSH
24220: LD_INT 114
24222: PUSH
24223: LD_INT 115
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
// if result then
24247: LD_VAR 0 1
24251: IFFALSE 24540
// begin normal :=  ;
24253: LD_ADDR_VAR 0 3
24257: PUSH
24258: LD_STRING 
24260: ST_TO_ADDR
// hardcore :=  ;
24261: LD_ADDR_VAR 0 4
24265: PUSH
24266: LD_STRING 
24268: ST_TO_ADDR
// for i = 1 to normalCounter do
24269: LD_ADDR_VAR 0 5
24273: PUSH
24274: DOUBLE
24275: LD_INT 1
24277: DEC
24278: ST_TO_ADDR
24279: LD_EXP 68
24283: PUSH
24284: FOR_TO
24285: IFFALSE 24386
// begin tmp := 0 ;
24287: LD_ADDR_VAR 0 2
24291: PUSH
24292: LD_STRING 0
24294: ST_TO_ADDR
// if result [ 1 ] then
24295: LD_VAR 0 1
24299: PUSH
24300: LD_INT 1
24302: ARRAY
24303: IFFALSE 24368
// if result [ 1 ] [ 1 ] = i then
24305: LD_VAR 0 1
24309: PUSH
24310: LD_INT 1
24312: ARRAY
24313: PUSH
24314: LD_INT 1
24316: ARRAY
24317: PUSH
24318: LD_VAR 0 5
24322: EQUAL
24323: IFFALSE 24368
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_VAR 0 1
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: LD_VAR 0 1
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: PPUSH
24347: LD_INT 1
24349: PPUSH
24350: CALL_OW 3
24354: PPUSH
24355: CALL_OW 1
24359: ST_TO_ADDR
// tmp := 1 ;
24360: LD_ADDR_VAR 0 2
24364: PUSH
24365: LD_STRING 1
24367: ST_TO_ADDR
// end ; normal := normal & tmp ;
24368: LD_ADDR_VAR 0 3
24372: PUSH
24373: LD_VAR 0 3
24377: PUSH
24378: LD_VAR 0 2
24382: STR
24383: ST_TO_ADDR
// end ;
24384: GO 24284
24386: POP
24387: POP
// for i = 1 to hardcoreCounter do
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: DOUBLE
24394: LD_INT 1
24396: DEC
24397: ST_TO_ADDR
24398: LD_EXP 69
24402: PUSH
24403: FOR_TO
24404: IFFALSE 24509
// begin tmp := 0 ;
24406: LD_ADDR_VAR 0 2
24410: PUSH
24411: LD_STRING 0
24413: ST_TO_ADDR
// if result [ 2 ] then
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 2
24421: ARRAY
24422: IFFALSE 24491
// if result [ 2 ] [ 1 ] = 100 + i then
24424: LD_VAR 0 1
24428: PUSH
24429: LD_INT 2
24431: ARRAY
24432: PUSH
24433: LD_INT 1
24435: ARRAY
24436: PUSH
24437: LD_INT 100
24439: PUSH
24440: LD_VAR 0 5
24444: PLUS
24445: EQUAL
24446: IFFALSE 24491
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: LD_INT 2
24460: PPUSH
24461: LD_VAR 0 1
24465: PUSH
24466: LD_INT 2
24468: ARRAY
24469: PPUSH
24470: LD_INT 1
24472: PPUSH
24473: CALL_OW 3
24477: PPUSH
24478: CALL_OW 1
24482: ST_TO_ADDR
// tmp := 1 ;
24483: LD_ADDR_VAR 0 2
24487: PUSH
24488: LD_STRING 1
24490: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24491: LD_ADDR_VAR 0 4
24495: PUSH
24496: LD_VAR 0 4
24500: PUSH
24501: LD_VAR 0 2
24505: STR
24506: ST_TO_ADDR
// end ;
24507: GO 24403
24509: POP
24510: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24511: LD_STRING getStreamItemsFromMission("
24513: PUSH
24514: LD_VAR 0 3
24518: STR
24519: PUSH
24520: LD_STRING ","
24522: STR
24523: PUSH
24524: LD_VAR 0 4
24528: STR
24529: PUSH
24530: LD_STRING ")
24532: STR
24533: PPUSH
24534: CALL_OW 559
// end else
24538: GO 24547
// ToLua ( getStreamItemsFromMission("","") ) ;
24540: LD_STRING getStreamItemsFromMission("","")
24542: PPUSH
24543: CALL_OW 559
// end ;
24547: LD_VAR 0 1
24551: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24552: LD_EXP 67
24556: PUSH
24557: LD_EXP 72
24561: AND
24562: IFFALSE 24686
24564: GO 24566
24566: DISABLE
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
// begin enable ;
24571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24572: LD_ADDR_VAR 0 2
24576: PUSH
24577: LD_INT 22
24579: PUSH
24580: LD_OWVAR 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 34
24594: PUSH
24595: LD_INT 7
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 34
24604: PUSH
24605: LD_INT 45
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 34
24614: PUSH
24615: LD_INT 28
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 34
24624: PUSH
24625: LD_INT 47
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PPUSH
24643: CALL_OW 69
24647: ST_TO_ADDR
// if not tmp then
24648: LD_VAR 0 2
24652: NOT
24653: IFFALSE 24657
// exit ;
24655: GO 24686
// for i in tmp do
24657: LD_ADDR_VAR 0 1
24661: PUSH
24662: LD_VAR 0 2
24666: PUSH
24667: FOR_IN
24668: IFFALSE 24684
// begin SetLives ( i , 0 ) ;
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_INT 0
24677: PPUSH
24678: CALL_OW 234
// end ;
24682: GO 24667
24684: POP
24685: POP
// end ;
24686: PPOPN 2
24688: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24689: LD_EXP 67
24693: PUSH
24694: LD_EXP 73
24698: AND
24699: IFFALSE 24783
24701: GO 24703
24703: DISABLE
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
// begin enable ;
24708: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_OWVAR 2
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 32
24728: PUSH
24729: LD_INT 3
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PPUSH
24740: CALL_OW 69
24744: ST_TO_ADDR
// if not tmp then
24745: LD_VAR 0 2
24749: NOT
24750: IFFALSE 24754
// exit ;
24752: GO 24783
// for i in tmp do
24754: LD_ADDR_VAR 0 1
24758: PUSH
24759: LD_VAR 0 2
24763: PUSH
24764: FOR_IN
24765: IFFALSE 24781
// begin SetLives ( i , 0 ) ;
24767: LD_VAR 0 1
24771: PPUSH
24772: LD_INT 0
24774: PPUSH
24775: CALL_OW 234
// end ;
24779: GO 24764
24781: POP
24782: POP
// end ;
24783: PPOPN 2
24785: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24786: LD_EXP 67
24790: PUSH
24791: LD_EXP 70
24795: AND
24796: IFFALSE 24889
24798: GO 24800
24800: DISABLE
24801: LD_INT 0
24803: PPUSH
// begin enable ;
24804: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24805: LD_ADDR_VAR 0 1
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_OWVAR 2
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 25
24827: PUSH
24828: LD_INT 5
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 25
24837: PUSH
24838: LD_INT 9
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 25
24847: PUSH
24848: LD_INT 8
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PPUSH
24865: CALL_OW 69
24869: PUSH
24870: FOR_IN
24871: IFFALSE 24887
// begin SetClass ( i , 1 ) ;
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_INT 1
24880: PPUSH
24881: CALL_OW 336
// end ;
24885: GO 24870
24887: POP
24888: POP
// end ;
24889: PPOPN 1
24891: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24892: LD_EXP 67
24896: PUSH
24897: LD_EXP 71
24901: AND
24902: PUSH
24903: LD_OWVAR 65
24907: PUSH
24908: LD_INT 7
24910: LESS
24911: AND
24912: IFFALSE 24926
24914: GO 24916
24916: DISABLE
// begin enable ;
24917: ENABLE
// game_speed := 7 ;
24918: LD_ADDR_OWVAR 65
24922: PUSH
24923: LD_INT 7
24925: ST_TO_ADDR
// end ;
24926: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24927: LD_EXP 67
24931: PUSH
24932: LD_EXP 74
24936: AND
24937: IFFALSE 25139
24939: GO 24941
24941: DISABLE
24942: LD_INT 0
24944: PPUSH
24945: PPUSH
24946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24947: LD_ADDR_VAR 0 3
24951: PUSH
24952: LD_INT 81
24954: PUSH
24955: LD_OWVAR 2
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 21
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PPUSH
24978: CALL_OW 69
24982: ST_TO_ADDR
// if not tmp then
24983: LD_VAR 0 3
24987: NOT
24988: IFFALSE 24992
// exit ;
24990: GO 25139
// if tmp > 5 then
24992: LD_VAR 0 3
24996: PUSH
24997: LD_INT 5
24999: GREATER
25000: IFFALSE 25012
// k := 5 else
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_INT 5
25009: ST_TO_ADDR
25010: GO 25022
// k := tmp ;
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_VAR 0 3
25021: ST_TO_ADDR
// for i := 1 to k do
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: DOUBLE
25028: LD_INT 1
25030: DEC
25031: ST_TO_ADDR
25032: LD_VAR 0 2
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25137
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25040: LD_VAR 0 3
25044: PUSH
25045: LD_VAR 0 1
25049: ARRAY
25050: PPUSH
25051: LD_VAR 0 1
25055: PUSH
25056: LD_INT 4
25058: MOD
25059: PUSH
25060: LD_INT 1
25062: PLUS
25063: PPUSH
25064: CALL_OW 259
25068: PUSH
25069: LD_INT 10
25071: LESS
25072: IFFALSE 25135
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25074: LD_VAR 0 3
25078: PUSH
25079: LD_VAR 0 1
25083: ARRAY
25084: PPUSH
25085: LD_VAR 0 1
25089: PUSH
25090: LD_INT 4
25092: MOD
25093: PUSH
25094: LD_INT 1
25096: PLUS
25097: PPUSH
25098: LD_VAR 0 3
25102: PUSH
25103: LD_VAR 0 1
25107: ARRAY
25108: PPUSH
25109: LD_VAR 0 1
25113: PUSH
25114: LD_INT 4
25116: MOD
25117: PUSH
25118: LD_INT 1
25120: PLUS
25121: PPUSH
25122: CALL_OW 259
25126: PUSH
25127: LD_INT 1
25129: PLUS
25130: PPUSH
25131: CALL_OW 237
25135: GO 25037
25137: POP
25138: POP
// end ;
25139: PPOPN 3
25141: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25142: LD_EXP 67
25146: PUSH
25147: LD_EXP 75
25151: AND
25152: IFFALSE 25172
25154: GO 25156
25156: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25157: LD_INT 4
25159: PPUSH
25160: LD_OWVAR 2
25164: PPUSH
25165: LD_INT 0
25167: PPUSH
25168: CALL_OW 324
25172: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25173: LD_EXP 67
25177: PUSH
25178: LD_EXP 104
25182: AND
25183: IFFALSE 25203
25185: GO 25187
25187: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25188: LD_INT 19
25190: PPUSH
25191: LD_OWVAR 2
25195: PPUSH
25196: LD_INT 0
25198: PPUSH
25199: CALL_OW 324
25203: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25204: LD_EXP 67
25208: PUSH
25209: LD_EXP 76
25213: AND
25214: IFFALSE 25316
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
// begin enable ;
25223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25224: LD_ADDR_VAR 0 2
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_OWVAR 2
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: PUSH
25244: LD_INT 34
25246: PUSH
25247: LD_INT 11
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 34
25256: PUSH
25257: LD_INT 30
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL_OW 69
25277: ST_TO_ADDR
// if not tmp then
25278: LD_VAR 0 2
25282: NOT
25283: IFFALSE 25287
// exit ;
25285: GO 25316
// for i in tmp do
25287: LD_ADDR_VAR 0 1
25291: PUSH
25292: LD_VAR 0 2
25296: PUSH
25297: FOR_IN
25298: IFFALSE 25314
// begin SetLives ( i , 0 ) ;
25300: LD_VAR 0 1
25304: PPUSH
25305: LD_INT 0
25307: PPUSH
25308: CALL_OW 234
// end ;
25312: GO 25297
25314: POP
25315: POP
// end ;
25316: PPOPN 2
25318: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25319: LD_EXP 67
25323: PUSH
25324: LD_EXP 77
25328: AND
25329: IFFALSE 25349
25331: GO 25333
25333: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25334: LD_INT 32
25336: PPUSH
25337: LD_OWVAR 2
25341: PPUSH
25342: LD_INT 0
25344: PPUSH
25345: CALL_OW 324
25349: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25350: LD_EXP 67
25354: PUSH
25355: LD_EXP 78
25359: AND
25360: IFFALSE 25541
25362: GO 25364
25364: DISABLE
25365: LD_INT 0
25367: PPUSH
25368: PPUSH
25369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25370: LD_ADDR_VAR 0 2
25374: PUSH
25375: LD_INT 22
25377: PUSH
25378: LD_OWVAR 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 33
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 69
25405: ST_TO_ADDR
// if not tmp then
25406: LD_VAR 0 2
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25541
// side := 0 ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 0
25422: ST_TO_ADDR
// for i := 1 to 8 do
25423: LD_ADDR_VAR 0 1
25427: PUSH
25428: DOUBLE
25429: LD_INT 1
25431: DEC
25432: ST_TO_ADDR
25433: LD_INT 8
25435: PUSH
25436: FOR_TO
25437: IFFALSE 25485
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25439: LD_OWVAR 2
25443: PUSH
25444: LD_VAR 0 1
25448: NONEQUAL
25449: PUSH
25450: LD_OWVAR 2
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 81
25464: PUSH
25465: LD_INT 2
25467: EQUAL
25468: AND
25469: IFFALSE 25483
// begin side := i ;
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_VAR 0 1
25480: ST_TO_ADDR
// break ;
25481: GO 25485
// end ;
25483: GO 25436
25485: POP
25486: POP
// if not side then
25487: LD_VAR 0 3
25491: NOT
25492: IFFALSE 25496
// exit ;
25494: GO 25541
// for i := 1 to tmp do
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: DOUBLE
25502: LD_INT 1
25504: DEC
25505: ST_TO_ADDR
25506: LD_VAR 0 2
25510: PUSH
25511: FOR_TO
25512: IFFALSE 25539
// if Prob ( 60 ) then
25514: LD_INT 60
25516: PPUSH
25517: CALL_OW 13
25521: IFFALSE 25537
// SetSide ( i , side ) ;
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_VAR 0 3
25532: PPUSH
25533: CALL_OW 235
25537: GO 25511
25539: POP
25540: POP
// end ;
25541: PPOPN 3
25543: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25544: LD_EXP 67
25548: PUSH
25549: LD_EXP 80
25553: AND
25554: IFFALSE 25673
25556: GO 25558
25558: DISABLE
25559: LD_INT 0
25561: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_INT 22
25569: PUSH
25570: LD_OWVAR 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 3
25591: PUSH
25592: LD_INT 23
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: PPUSH
25611: CALL_OW 69
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25671
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 257
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: LD_INT 4
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: IN
25647: IFFALSE 25669
// SetClass ( un , rand ( 1 , 4 ) ) ;
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_INT 1
25656: PPUSH
25657: LD_INT 4
25659: PPUSH
25660: CALL_OW 12
25664: PPUSH
25665: CALL_OW 336
25669: GO 25616
25671: POP
25672: POP
// end ;
25673: PPOPN 1
25675: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25676: LD_EXP 67
25680: PUSH
25681: LD_EXP 79
25685: AND
25686: IFFALSE 25765
25688: GO 25690
25690: DISABLE
25691: LD_INT 0
25693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25694: LD_ADDR_VAR 0 1
25698: PUSH
25699: LD_INT 22
25701: PUSH
25702: LD_OWVAR 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PPUSH
25725: CALL_OW 69
25729: ST_TO_ADDR
// if not tmp then
25730: LD_VAR 0 1
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25739: LD_VAR 0 1
25743: PUSH
25744: LD_INT 1
25746: PPUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 12
25756: ARRAY
25757: PPUSH
25758: LD_INT 100
25760: PPUSH
25761: CALL_OW 234
// end ;
25765: PPOPN 1
25767: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25768: LD_EXP 67
25772: PUSH
25773: LD_EXP 81
25777: AND
25778: IFFALSE 25876
25780: GO 25782
25782: DISABLE
25783: LD_INT 0
25785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25786: LD_ADDR_VAR 0 1
25790: PUSH
25791: LD_INT 22
25793: PUSH
25794: LD_OWVAR 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 21
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: ST_TO_ADDR
// if not tmp then
25822: LD_VAR 0 1
25826: NOT
25827: IFFALSE 25831
// exit ;
25829: GO 25876
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25831: LD_VAR 0 1
25835: PUSH
25836: LD_INT 1
25838: PPUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 12
25848: ARRAY
25849: PPUSH
25850: LD_INT 1
25852: PPUSH
25853: LD_INT 4
25855: PPUSH
25856: CALL_OW 12
25860: PPUSH
25861: LD_INT 3000
25863: PPUSH
25864: LD_INT 9000
25866: PPUSH
25867: CALL_OW 12
25871: PPUSH
25872: CALL_OW 492
// end ;
25876: PPOPN 1
25878: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25879: LD_EXP 67
25883: PUSH
25884: LD_EXP 82
25888: AND
25889: IFFALSE 25909
25891: GO 25893
25893: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25894: LD_INT 1
25896: PPUSH
25897: LD_OWVAR 2
25901: PPUSH
25902: LD_INT 0
25904: PPUSH
25905: CALL_OW 324
25909: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25910: LD_EXP 67
25914: PUSH
25915: LD_EXP 83
25919: AND
25920: IFFALSE 26003
25922: GO 25924
25924: DISABLE
25925: LD_INT 0
25927: PPUSH
25928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25929: LD_ADDR_VAR 0 2
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 21
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PPUSH
25960: CALL_OW 69
25964: ST_TO_ADDR
// if not tmp then
25965: LD_VAR 0 2
25969: NOT
25970: IFFALSE 25974
// exit ;
25972: GO 26003
// for i in tmp do
25974: LD_ADDR_VAR 0 1
25978: PUSH
25979: LD_VAR 0 2
25983: PUSH
25984: FOR_IN
25985: IFFALSE 26001
// SetBLevel ( i , 10 ) ;
25987: LD_VAR 0 1
25991: PPUSH
25992: LD_INT 10
25994: PPUSH
25995: CALL_OW 241
25999: GO 25984
26001: POP
26002: POP
// end ;
26003: PPOPN 2
26005: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26006: LD_EXP 67
26010: PUSH
26011: LD_EXP 84
26015: AND
26016: IFFALSE 26127
26018: GO 26020
26020: DISABLE
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26026: LD_ADDR_VAR 0 3
26030: PUSH
26031: LD_INT 22
26033: PUSH
26034: LD_OWVAR 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 25
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PPUSH
26057: CALL_OW 69
26061: ST_TO_ADDR
// if not tmp then
26062: LD_VAR 0 3
26066: NOT
26067: IFFALSE 26071
// exit ;
26069: GO 26127
// un := tmp [ rand ( 1 , tmp ) ] ;
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_VAR 0 3
26080: PUSH
26081: LD_INT 1
26083: PPUSH
26084: LD_VAR 0 3
26088: PPUSH
26089: CALL_OW 12
26093: ARRAY
26094: ST_TO_ADDR
// if Crawls ( un ) then
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 318
26104: IFFALSE 26115
// ComWalk ( un ) ;
26106: LD_VAR 0 2
26110: PPUSH
26111: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26115: LD_VAR 0 2
26119: PPUSH
26120: LD_INT 5
26122: PPUSH
26123: CALL_OW 336
// end ;
26127: PPOPN 3
26129: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26130: LD_EXP 67
26134: PUSH
26135: LD_EXP 85
26139: AND
26140: PUSH
26141: LD_OWVAR 67
26145: PUSH
26146: LD_INT 3
26148: LESS
26149: AND
26150: IFFALSE 26169
26152: GO 26154
26154: DISABLE
// Difficulty := Difficulty + 1 ;
26155: LD_ADDR_OWVAR 67
26159: PUSH
26160: LD_OWVAR 67
26164: PUSH
26165: LD_INT 1
26167: PLUS
26168: ST_TO_ADDR
26169: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26170: LD_EXP 67
26174: PUSH
26175: LD_EXP 86
26179: AND
26180: IFFALSE 26283
26182: GO 26184
26184: DISABLE
26185: LD_INT 0
26187: PPUSH
// begin for i := 1 to 5 do
26188: LD_ADDR_VAR 0 1
26192: PUSH
26193: DOUBLE
26194: LD_INT 1
26196: DEC
26197: ST_TO_ADDR
26198: LD_INT 5
26200: PUSH
26201: FOR_TO
26202: IFFALSE 26281
// begin uc_nation := nation_nature ;
26204: LD_ADDR_OWVAR 21
26208: PUSH
26209: LD_INT 0
26211: ST_TO_ADDR
// uc_side := 0 ;
26212: LD_ADDR_OWVAR 20
26216: PUSH
26217: LD_INT 0
26219: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26220: LD_ADDR_OWVAR 29
26224: PUSH
26225: LD_INT 12
26227: PUSH
26228: LD_INT 12
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// hc_agressivity := 20 ;
26235: LD_ADDR_OWVAR 35
26239: PUSH
26240: LD_INT 20
26242: ST_TO_ADDR
// hc_class := class_tiger ;
26243: LD_ADDR_OWVAR 28
26247: PUSH
26248: LD_INT 14
26250: ST_TO_ADDR
// hc_gallery :=  ;
26251: LD_ADDR_OWVAR 33
26255: PUSH
26256: LD_STRING 
26258: ST_TO_ADDR
// hc_name :=  ;
26259: LD_ADDR_OWVAR 26
26263: PUSH
26264: LD_STRING 
26266: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26267: CALL_OW 44
26271: PPUSH
26272: LD_INT 0
26274: PPUSH
26275: CALL_OW 51
// end ;
26279: GO 26201
26281: POP
26282: POP
// end ;
26283: PPOPN 1
26285: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26286: LD_EXP 67
26290: PUSH
26291: LD_EXP 87
26295: AND
26296: IFFALSE 26305
26298: GO 26300
26300: DISABLE
// StreamSibBomb ;
26301: CALL 26306 0 0
26305: END
// export function StreamSibBomb ; var i , x , y ; begin
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
26310: PPUSH
26311: PPUSH
// result := false ;
26312: LD_ADDR_VAR 0 1
26316: PUSH
26317: LD_INT 0
26319: ST_TO_ADDR
// for i := 1 to 16 do
26320: LD_ADDR_VAR 0 2
26324: PUSH
26325: DOUBLE
26326: LD_INT 1
26328: DEC
26329: ST_TO_ADDR
26330: LD_INT 16
26332: PUSH
26333: FOR_TO
26334: IFFALSE 26533
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26336: LD_ADDR_VAR 0 3
26340: PUSH
26341: LD_INT 10
26343: PUSH
26344: LD_INT 20
26346: PUSH
26347: LD_INT 30
26349: PUSH
26350: LD_INT 40
26352: PUSH
26353: LD_INT 50
26355: PUSH
26356: LD_INT 60
26358: PUSH
26359: LD_INT 70
26361: PUSH
26362: LD_INT 80
26364: PUSH
26365: LD_INT 90
26367: PUSH
26368: LD_INT 100
26370: PUSH
26371: LD_INT 110
26373: PUSH
26374: LD_INT 120
26376: PUSH
26377: LD_INT 130
26379: PUSH
26380: LD_INT 140
26382: PUSH
26383: LD_INT 150
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PPUSH
26406: LD_INT 15
26408: PPUSH
26409: CALL_OW 12
26413: ARRAY
26414: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26415: LD_ADDR_VAR 0 4
26419: PUSH
26420: LD_INT 10
26422: PUSH
26423: LD_INT 20
26425: PUSH
26426: LD_INT 30
26428: PUSH
26429: LD_INT 40
26431: PUSH
26432: LD_INT 50
26434: PUSH
26435: LD_INT 60
26437: PUSH
26438: LD_INT 70
26440: PUSH
26441: LD_INT 80
26443: PUSH
26444: LD_INT 90
26446: PUSH
26447: LD_INT 100
26449: PUSH
26450: LD_INT 110
26452: PUSH
26453: LD_INT 120
26455: PUSH
26456: LD_INT 130
26458: PUSH
26459: LD_INT 140
26461: PUSH
26462: LD_INT 150
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: PPUSH
26485: LD_INT 15
26487: PPUSH
26488: CALL_OW 12
26492: ARRAY
26493: ST_TO_ADDR
// if ValidHex ( x , y ) then
26494: LD_VAR 0 3
26498: PPUSH
26499: LD_VAR 0 4
26503: PPUSH
26504: CALL_OW 488
26508: IFFALSE 26531
// begin result := [ x , y ] ;
26510: LD_ADDR_VAR 0 1
26514: PUSH
26515: LD_VAR 0 3
26519: PUSH
26520: LD_VAR 0 4
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: ST_TO_ADDR
// break ;
26529: GO 26533
// end ; end ;
26531: GO 26333
26533: POP
26534: POP
// if result then
26535: LD_VAR 0 1
26539: IFFALSE 26599
// begin ToLua ( playSibBomb() ) ;
26541: LD_STRING playSibBomb()
26543: PPUSH
26544: CALL_OW 559
// wait ( 0 0$14 ) ;
26548: LD_INT 490
26550: PPUSH
26551: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26555: LD_VAR 0 1
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: PPUSH
26564: LD_VAR 0 1
26568: PUSH
26569: LD_INT 2
26571: ARRAY
26572: PPUSH
26573: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26577: LD_VAR 0 1
26581: PUSH
26582: LD_INT 1
26584: ARRAY
26585: PPUSH
26586: LD_VAR 0 1
26590: PUSH
26591: LD_INT 2
26593: ARRAY
26594: PPUSH
26595: CALL_OW 429
// end ; end ;
26599: LD_VAR 0 1
26603: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26604: LD_EXP 67
26608: PUSH
26609: LD_EXP 89
26613: AND
26614: IFFALSE 26626
26616: GO 26618
26618: DISABLE
// YouLost (  ) ;
26619: LD_STRING 
26621: PPUSH
26622: CALL_OW 104
26626: END
// every 0 0$1 trigger StreamModeActive and sFog do
26627: LD_EXP 67
26631: PUSH
26632: LD_EXP 88
26636: AND
26637: IFFALSE 26651
26639: GO 26641
26641: DISABLE
// FogOff ( your_side ) ;
26642: LD_OWVAR 2
26646: PPUSH
26647: CALL_OW 344
26651: END
// every 0 0$1 trigger StreamModeActive and sSun do
26652: LD_EXP 67
26656: PUSH
26657: LD_EXP 90
26661: AND
26662: IFFALSE 26690
26664: GO 26666
26666: DISABLE
// begin solar_recharge_percent := 0 ;
26667: LD_ADDR_OWVAR 79
26671: PUSH
26672: LD_INT 0
26674: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26675: LD_INT 10500
26677: PPUSH
26678: CALL_OW 67
// solar_recharge_percent := 100 ;
26682: LD_ADDR_OWVAR 79
26686: PUSH
26687: LD_INT 100
26689: ST_TO_ADDR
// end ;
26690: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26691: LD_EXP 67
26695: PUSH
26696: LD_EXP 91
26700: AND
26701: IFFALSE 26940
26703: GO 26705
26705: DISABLE
26706: LD_INT 0
26708: PPUSH
26709: PPUSH
26710: PPUSH
// begin tmp := [ ] ;
26711: LD_ADDR_VAR 0 3
26715: PUSH
26716: EMPTY
26717: ST_TO_ADDR
// for i := 1 to 6 do
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: DOUBLE
26724: LD_INT 1
26726: DEC
26727: ST_TO_ADDR
26728: LD_INT 6
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26837
// begin uc_nation := nation_nature ;
26734: LD_ADDR_OWVAR 21
26738: PUSH
26739: LD_INT 0
26741: ST_TO_ADDR
// uc_side := 0 ;
26742: LD_ADDR_OWVAR 20
26746: PUSH
26747: LD_INT 0
26749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26750: LD_ADDR_OWVAR 29
26754: PUSH
26755: LD_INT 12
26757: PUSH
26758: LD_INT 12
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// hc_agressivity := 20 ;
26765: LD_ADDR_OWVAR 35
26769: PUSH
26770: LD_INT 20
26772: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26773: LD_ADDR_OWVAR 28
26777: PUSH
26778: LD_INT 17
26780: ST_TO_ADDR
// hc_gallery :=  ;
26781: LD_ADDR_OWVAR 33
26785: PUSH
26786: LD_STRING 
26788: ST_TO_ADDR
// hc_name :=  ;
26789: LD_ADDR_OWVAR 26
26793: PUSH
26794: LD_STRING 
26796: ST_TO_ADDR
// un := CreateHuman ;
26797: LD_ADDR_VAR 0 2
26801: PUSH
26802: CALL_OW 44
26806: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_INT 1
26814: PPUSH
26815: CALL_OW 51
// tmp := tmp ^ un ;
26819: LD_ADDR_VAR 0 3
26823: PUSH
26824: LD_VAR 0 3
26828: PUSH
26829: LD_VAR 0 2
26833: ADD
26834: ST_TO_ADDR
// end ;
26835: GO 26731
26837: POP
26838: POP
// repeat wait ( 0 0$1 ) ;
26839: LD_INT 35
26841: PPUSH
26842: CALL_OW 67
// for un in tmp do
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: LD_VAR 0 3
26855: PUSH
26856: FOR_IN
26857: IFFALSE 26931
// begin if IsDead ( un ) then
26859: LD_VAR 0 2
26863: PPUSH
26864: CALL_OW 301
26868: IFFALSE 26888
// begin tmp := tmp diff un ;
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_VAR 0 3
26879: PUSH
26880: LD_VAR 0 2
26884: DIFF
26885: ST_TO_ADDR
// continue ;
26886: GO 26856
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_INT 3
26895: PUSH
26896: LD_INT 22
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 69
26914: PPUSH
26915: LD_VAR 0 2
26919: PPUSH
26920: CALL_OW 74
26924: PPUSH
26925: CALL_OW 115
// end ;
26929: GO 26856
26931: POP
26932: POP
// until not tmp ;
26933: LD_VAR 0 3
26937: NOT
26938: IFFALSE 26839
// end ;
26940: PPOPN 3
26942: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26943: LD_EXP 67
26947: PUSH
26948: LD_EXP 92
26952: AND
26953: IFFALSE 27007
26955: GO 26957
26957: DISABLE
// begin ToLua ( displayTroll(); ) ;
26958: LD_STRING displayTroll();
26960: PPUSH
26961: CALL_OW 559
// wait ( 3 3$00 ) ;
26965: LD_INT 6300
26967: PPUSH
26968: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26972: LD_STRING hideTroll();
26974: PPUSH
26975: CALL_OW 559
// wait ( 1 1$00 ) ;
26979: LD_INT 2100
26981: PPUSH
26982: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26986: LD_STRING displayTroll();
26988: PPUSH
26989: CALL_OW 559
// wait ( 1 1$00 ) ;
26993: LD_INT 2100
26995: PPUSH
26996: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27000: LD_STRING hideTroll();
27002: PPUSH
27003: CALL_OW 559
// end ;
27007: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27008: LD_EXP 67
27012: PUSH
27013: LD_EXP 93
27017: AND
27018: IFFALSE 27081
27020: GO 27022
27022: DISABLE
27023: LD_INT 0
27025: PPUSH
// begin p := 0 ;
27026: LD_ADDR_VAR 0 1
27030: PUSH
27031: LD_INT 0
27033: ST_TO_ADDR
// repeat game_speed := 1 ;
27034: LD_ADDR_OWVAR 65
27038: PUSH
27039: LD_INT 1
27041: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27042: LD_INT 35
27044: PPUSH
27045: CALL_OW 67
// p := p + 1 ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_VAR 0 1
27058: PUSH
27059: LD_INT 1
27061: PLUS
27062: ST_TO_ADDR
// until p >= 60 ;
27063: LD_VAR 0 1
27067: PUSH
27068: LD_INT 60
27070: GREATEREQUAL
27071: IFFALSE 27034
// game_speed := 4 ;
27073: LD_ADDR_OWVAR 65
27077: PUSH
27078: LD_INT 4
27080: ST_TO_ADDR
// end ;
27081: PPOPN 1
27083: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27084: LD_EXP 67
27088: PUSH
27089: LD_EXP 94
27093: AND
27094: IFFALSE 27240
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
27102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27103: LD_ADDR_VAR 0 1
27107: PUSH
27108: LD_INT 22
27110: PUSH
27111: LD_OWVAR 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: LD_INT 30
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 30
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PPUSH
27152: CALL_OW 69
27156: ST_TO_ADDR
// if not depot then
27157: LD_VAR 0 1
27161: NOT
27162: IFFALSE 27166
// exit ;
27164: GO 27240
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27166: LD_ADDR_VAR 0 2
27170: PUSH
27171: LD_VAR 0 1
27175: PUSH
27176: LD_INT 1
27178: PPUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: CALL_OW 12
27188: ARRAY
27189: PPUSH
27190: CALL_OW 274
27194: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27195: LD_VAR 0 2
27199: PPUSH
27200: LD_INT 1
27202: PPUSH
27203: LD_INT 0
27205: PPUSH
27206: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27210: LD_VAR 0 2
27214: PPUSH
27215: LD_INT 2
27217: PPUSH
27218: LD_INT 0
27220: PPUSH
27221: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27225: LD_VAR 0 2
27229: PPUSH
27230: LD_INT 3
27232: PPUSH
27233: LD_INT 0
27235: PPUSH
27236: CALL_OW 277
// end ;
27240: PPOPN 2
27242: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27243: LD_EXP 67
27247: PUSH
27248: LD_EXP 95
27252: AND
27253: IFFALSE 27350
27255: GO 27257
27257: DISABLE
27258: LD_INT 0
27260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_INT 22
27268: PUSH
27269: LD_OWVAR 2
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 21
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 3
27290: PUSH
27291: LD_INT 23
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PPUSH
27310: CALL_OW 69
27314: ST_TO_ADDR
// if not tmp then
27315: LD_VAR 0 1
27319: NOT
27320: IFFALSE 27324
// exit ;
27322: GO 27350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27324: LD_VAR 0 1
27328: PUSH
27329: LD_INT 1
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 12
27341: ARRAY
27342: PPUSH
27343: LD_INT 200
27345: PPUSH
27346: CALL_OW 234
// end ;
27350: PPOPN 1
27352: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27353: LD_EXP 67
27357: PUSH
27358: LD_EXP 96
27362: AND
27363: IFFALSE 27442
27365: GO 27367
27367: DISABLE
27368: LD_INT 0
27370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27371: LD_ADDR_VAR 0 1
27375: PUSH
27376: LD_INT 22
27378: PUSH
27379: LD_OWVAR 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 21
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 69
27406: ST_TO_ADDR
// if not tmp then
27407: LD_VAR 0 1
27411: NOT
27412: IFFALSE 27416
// exit ;
27414: GO 27442
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27416: LD_VAR 0 1
27420: PUSH
27421: LD_INT 1
27423: PPUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 12
27433: ARRAY
27434: PPUSH
27435: LD_INT 60
27437: PPUSH
27438: CALL_OW 234
// end ;
27442: PPOPN 1
27444: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27445: LD_EXP 67
27449: PUSH
27450: LD_EXP 97
27454: AND
27455: IFFALSE 27554
27457: GO 27459
27459: DISABLE
27460: LD_INT 0
27462: PPUSH
27463: PPUSH
// begin enable ;
27464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27465: LD_ADDR_VAR 0 1
27469: PUSH
27470: LD_INT 22
27472: PUSH
27473: LD_OWVAR 2
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 61
27484: PUSH
27485: EMPTY
27486: LIST
27487: PUSH
27488: LD_INT 33
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: PPUSH
27503: CALL_OW 69
27507: ST_TO_ADDR
// if not tmp then
27508: LD_VAR 0 1
27512: NOT
27513: IFFALSE 27517
// exit ;
27515: GO 27554
// for i in tmp do
27517: LD_ADDR_VAR 0 2
27521: PUSH
27522: LD_VAR 0 1
27526: PUSH
27527: FOR_IN
27528: IFFALSE 27552
// if IsControledBy ( i ) then
27530: LD_VAR 0 2
27534: PPUSH
27535: CALL_OW 312
27539: IFFALSE 27550
// ComUnlink ( i ) ;
27541: LD_VAR 0 2
27545: PPUSH
27546: CALL_OW 136
27550: GO 27527
27552: POP
27553: POP
// end ;
27554: PPOPN 2
27556: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27557: LD_EXP 67
27561: PUSH
27562: LD_EXP 98
27566: AND
27567: IFFALSE 27707
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
// begin ToLua ( displayPowell(); ) ;
27576: LD_STRING displayPowell();
27578: PPUSH
27579: CALL_OW 559
// uc_side := 0 ;
27583: LD_ADDR_OWVAR 20
27587: PUSH
27588: LD_INT 0
27590: ST_TO_ADDR
// uc_nation := 2 ;
27591: LD_ADDR_OWVAR 21
27595: PUSH
27596: LD_INT 2
27598: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27599: LD_ADDR_OWVAR 37
27603: PUSH
27604: LD_INT 14
27606: ST_TO_ADDR
// vc_engine := engine_siberite ;
27607: LD_ADDR_OWVAR 39
27611: PUSH
27612: LD_INT 3
27614: ST_TO_ADDR
// vc_control := control_apeman ;
27615: LD_ADDR_OWVAR 38
27619: PUSH
27620: LD_INT 5
27622: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27623: LD_ADDR_OWVAR 40
27627: PUSH
27628: LD_INT 29
27630: ST_TO_ADDR
// un := CreateVehicle ;
27631: LD_ADDR_VAR 0 2
27635: PUSH
27636: CALL_OW 45
27640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27641: LD_VAR 0 2
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27653: LD_INT 35
27655: PPUSH
27656: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27660: LD_VAR 0 2
27664: PPUSH
27665: LD_INT 22
27667: PUSH
27668: LD_OWVAR 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: PPUSH
27682: LD_VAR 0 2
27686: PPUSH
27687: CALL_OW 74
27691: PPUSH
27692: CALL_OW 115
// until IsDead ( un ) ;
27696: LD_VAR 0 2
27700: PPUSH
27701: CALL_OW 301
27705: IFFALSE 27653
// end ;
27707: PPOPN 2
27709: END
// every 0 0$1 trigger StreamModeActive and sStu do
27710: LD_EXP 67
27714: PUSH
27715: LD_EXP 106
27719: AND
27720: IFFALSE 27736
27722: GO 27724
27724: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27725: LD_STRING displayStucuk();
27727: PPUSH
27728: CALL_OW 559
// ResetFog ;
27732: CALL_OW 335
// end ;
27736: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27737: LD_EXP 67
27741: PUSH
27742: LD_EXP 99
27746: AND
27747: IFFALSE 27888
27749: GO 27751
27751: DISABLE
27752: LD_INT 0
27754: PPUSH
27755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27756: LD_ADDR_VAR 0 2
27760: PUSH
27761: LD_INT 22
27763: PUSH
27764: LD_OWVAR 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 21
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: ST_TO_ADDR
// if not tmp then
27792: LD_VAR 0 2
27796: NOT
27797: IFFALSE 27801
// exit ;
27799: GO 27888
// un := tmp [ rand ( 1 , tmp ) ] ;
27801: LD_ADDR_VAR 0 1
27805: PUSH
27806: LD_VAR 0 2
27810: PUSH
27811: LD_INT 1
27813: PPUSH
27814: LD_VAR 0 2
27818: PPUSH
27819: CALL_OW 12
27823: ARRAY
27824: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27825: LD_VAR 0 1
27829: PPUSH
27830: LD_INT 0
27832: PPUSH
27833: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27837: LD_VAR 0 1
27841: PPUSH
27842: LD_OWVAR 3
27846: PUSH
27847: LD_VAR 0 1
27851: DIFF
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL_OW 74
27862: PPUSH
27863: CALL_OW 115
// wait ( 0 0$20 ) ;
27867: LD_INT 700
27869: PPUSH
27870: CALL_OW 67
// SetSide ( un , your_side ) ;
27874: LD_VAR 0 1
27878: PPUSH
27879: LD_OWVAR 2
27883: PPUSH
27884: CALL_OW 235
// end ;
27888: PPOPN 2
27890: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27891: LD_EXP 67
27895: PUSH
27896: LD_EXP 100
27900: AND
27901: IFFALSE 28007
27903: GO 27905
27905: DISABLE
27906: LD_INT 0
27908: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27909: LD_ADDR_VAR 0 1
27913: PUSH
27914: LD_INT 22
27916: PUSH
27917: LD_OWVAR 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 30
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 30
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PPUSH
27958: CALL_OW 69
27962: ST_TO_ADDR
// if not depot then
27963: LD_VAR 0 1
27967: NOT
27968: IFFALSE 27972
// exit ;
27970: GO 28007
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27972: LD_VAR 0 1
27976: PUSH
27977: LD_INT 1
27979: ARRAY
27980: PPUSH
27981: CALL_OW 250
27985: PPUSH
27986: LD_VAR 0 1
27990: PUSH
27991: LD_INT 1
27993: ARRAY
27994: PPUSH
27995: CALL_OW 251
27999: PPUSH
28000: LD_INT 70
28002: PPUSH
28003: CALL_OW 495
// end ;
28007: PPOPN 1
28009: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28010: LD_EXP 67
28014: PUSH
28015: LD_EXP 101
28019: AND
28020: IFFALSE 28231
28022: GO 28024
28024: DISABLE
28025: LD_INT 0
28027: PPUSH
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28032: LD_ADDR_VAR 0 5
28036: PUSH
28037: LD_INT 22
28039: PUSH
28040: LD_OWVAR 2
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 21
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PPUSH
28063: CALL_OW 69
28067: ST_TO_ADDR
// if not tmp then
28068: LD_VAR 0 5
28072: NOT
28073: IFFALSE 28077
// exit ;
28075: GO 28231
// for i in tmp do
28077: LD_ADDR_VAR 0 1
28081: PUSH
28082: LD_VAR 0 5
28086: PUSH
28087: FOR_IN
28088: IFFALSE 28229
// begin d := rand ( 0 , 5 ) ;
28090: LD_ADDR_VAR 0 4
28094: PUSH
28095: LD_INT 0
28097: PPUSH
28098: LD_INT 5
28100: PPUSH
28101: CALL_OW 12
28105: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL_OW 250
28120: PPUSH
28121: LD_VAR 0 4
28125: PPUSH
28126: LD_INT 3
28128: PPUSH
28129: LD_INT 12
28131: PPUSH
28132: CALL_OW 12
28136: PPUSH
28137: CALL_OW 272
28141: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_VAR 0 1
28151: PPUSH
28152: CALL_OW 251
28156: PPUSH
28157: LD_VAR 0 4
28161: PPUSH
28162: LD_INT 3
28164: PPUSH
28165: LD_INT 12
28167: PPUSH
28168: CALL_OW 12
28172: PPUSH
28173: CALL_OW 273
28177: ST_TO_ADDR
// if ValidHex ( x , y ) then
28178: LD_VAR 0 2
28182: PPUSH
28183: LD_VAR 0 3
28187: PPUSH
28188: CALL_OW 488
28192: IFFALSE 28227
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_VAR 0 3
28208: PPUSH
28209: LD_INT 3
28211: PPUSH
28212: LD_INT 6
28214: PPUSH
28215: CALL_OW 12
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 483
// end ;
28227: GO 28087
28229: POP
28230: POP
// end ;
28231: PPOPN 5
28233: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28234: LD_EXP 67
28238: PUSH
28239: LD_EXP 102
28243: AND
28244: IFFALSE 28338
28246: GO 28248
28248: DISABLE
28249: LD_INT 0
28251: PPUSH
28252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28253: LD_ADDR_VAR 0 2
28257: PUSH
28258: LD_INT 22
28260: PUSH
28261: LD_OWVAR 2
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 32
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 21
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 69
28299: ST_TO_ADDR
// if not tmp then
28300: LD_VAR 0 2
28304: NOT
28305: IFFALSE 28309
// exit ;
28307: GO 28338
// for i in tmp do
28309: LD_ADDR_VAR 0 1
28313: PUSH
28314: LD_VAR 0 2
28318: PUSH
28319: FOR_IN
28320: IFFALSE 28336
// SetFuel ( i , 0 ) ;
28322: LD_VAR 0 1
28326: PPUSH
28327: LD_INT 0
28329: PPUSH
28330: CALL_OW 240
28334: GO 28319
28336: POP
28337: POP
// end ;
28338: PPOPN 2
28340: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28341: LD_EXP 67
28345: PUSH
28346: LD_EXP 103
28350: AND
28351: IFFALSE 28417
28353: GO 28355
28355: DISABLE
28356: LD_INT 0
28358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28359: LD_ADDR_VAR 0 1
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_OWVAR 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 30
28378: PUSH
28379: LD_INT 29
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PPUSH
28390: CALL_OW 69
28394: ST_TO_ADDR
// if not tmp then
28395: LD_VAR 0 1
28399: NOT
28400: IFFALSE 28404
// exit ;
28402: GO 28417
// DestroyUnit ( tmp [ 1 ] ) ;
28404: LD_VAR 0 1
28408: PUSH
28409: LD_INT 1
28411: ARRAY
28412: PPUSH
28413: CALL_OW 65
// end ;
28417: PPOPN 1
28419: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28420: LD_EXP 67
28424: PUSH
28425: LD_EXP 105
28429: AND
28430: IFFALSE 28559
28432: GO 28434
28434: DISABLE
28435: LD_INT 0
28437: PPUSH
// begin uc_side := 0 ;
28438: LD_ADDR_OWVAR 20
28442: PUSH
28443: LD_INT 0
28445: ST_TO_ADDR
// uc_nation := nation_arabian ;
28446: LD_ADDR_OWVAR 21
28450: PUSH
28451: LD_INT 2
28453: ST_TO_ADDR
// hc_gallery :=  ;
28454: LD_ADDR_OWVAR 33
28458: PUSH
28459: LD_STRING 
28461: ST_TO_ADDR
// hc_name :=  ;
28462: LD_ADDR_OWVAR 26
28466: PUSH
28467: LD_STRING 
28469: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28470: LD_INT 1
28472: PPUSH
28473: LD_INT 11
28475: PPUSH
28476: LD_INT 10
28478: PPUSH
28479: CALL_OW 380
// un := CreateHuman ;
28483: LD_ADDR_VAR 0 1
28487: PUSH
28488: CALL_OW 44
28492: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28493: LD_VAR 0 1
28497: PPUSH
28498: LD_INT 1
28500: PPUSH
28501: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28505: LD_INT 35
28507: PPUSH
28508: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28512: LD_VAR 0 1
28516: PPUSH
28517: LD_INT 22
28519: PUSH
28520: LD_OWVAR 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 69
28533: PPUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: CALL_OW 74
28543: PPUSH
28544: CALL_OW 115
// until IsDead ( un ) ;
28548: LD_VAR 0 1
28552: PPUSH
28553: CALL_OW 301
28557: IFFALSE 28505
// end ;
28559: PPOPN 1
28561: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28562: LD_EXP 67
28566: PUSH
28567: LD_EXP 107
28571: AND
28572: IFFALSE 28584
28574: GO 28576
28576: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28577: LD_STRING earthquake(getX(game), 0, 32)
28579: PPUSH
28580: CALL_OW 559
28584: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28585: LD_EXP 67
28589: PUSH
28590: LD_EXP 108
28594: AND
28595: IFFALSE 28686
28597: GO 28599
28599: DISABLE
28600: LD_INT 0
28602: PPUSH
// begin enable ;
28603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_OWVAR 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 21
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 33
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: PPUSH
28646: CALL_OW 69
28650: ST_TO_ADDR
// if not tmp then
28651: LD_VAR 0 1
28655: NOT
28656: IFFALSE 28660
// exit ;
28658: GO 28686
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 12
28677: ARRAY
28678: PPUSH
28679: LD_INT 1
28681: PPUSH
28682: CALL_OW 234
// end ;
28686: PPOPN 1
28688: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28689: LD_EXP 67
28693: PUSH
28694: LD_EXP 109
28698: AND
28699: IFFALSE 28840
28701: GO 28703
28703: DISABLE
28704: LD_INT 0
28706: PPUSH
28707: PPUSH
28708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: LD_INT 22
28716: PUSH
28717: LD_OWVAR 2
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 25
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PPUSH
28740: CALL_OW 69
28744: ST_TO_ADDR
// if not tmp then
28745: LD_VAR 0 3
28749: NOT
28750: IFFALSE 28754
// exit ;
28752: GO 28840
// un := tmp [ rand ( 1 , tmp ) ] ;
28754: LD_ADDR_VAR 0 2
28758: PUSH
28759: LD_VAR 0 3
28763: PUSH
28764: LD_INT 1
28766: PPUSH
28767: LD_VAR 0 3
28771: PPUSH
28772: CALL_OW 12
28776: ARRAY
28777: ST_TO_ADDR
// if Crawls ( un ) then
28778: LD_VAR 0 2
28782: PPUSH
28783: CALL_OW 318
28787: IFFALSE 28798
// ComWalk ( un ) ;
28789: LD_VAR 0 2
28793: PPUSH
28794: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28798: LD_VAR 0 2
28802: PPUSH
28803: LD_INT 9
28805: PPUSH
28806: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28810: LD_INT 28
28812: PPUSH
28813: LD_OWVAR 2
28817: PPUSH
28818: LD_INT 2
28820: PPUSH
28821: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28825: LD_INT 29
28827: PPUSH
28828: LD_OWVAR 2
28832: PPUSH
28833: LD_INT 2
28835: PPUSH
28836: CALL_OW 322
// end ;
28840: PPOPN 3
28842: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28843: LD_EXP 67
28847: PUSH
28848: LD_EXP 110
28852: AND
28853: IFFALSE 28964
28855: GO 28857
28857: DISABLE
28858: LD_INT 0
28860: PPUSH
28861: PPUSH
28862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 22
28870: PUSH
28871: LD_OWVAR 2
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 25
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PPUSH
28894: CALL_OW 69
28898: ST_TO_ADDR
// if not tmp then
28899: LD_VAR 0 3
28903: NOT
28904: IFFALSE 28908
// exit ;
28906: GO 28964
// un := tmp [ rand ( 1 , tmp ) ] ;
28908: LD_ADDR_VAR 0 2
28912: PUSH
28913: LD_VAR 0 3
28917: PUSH
28918: LD_INT 1
28920: PPUSH
28921: LD_VAR 0 3
28925: PPUSH
28926: CALL_OW 12
28930: ARRAY
28931: ST_TO_ADDR
// if Crawls ( un ) then
28932: LD_VAR 0 2
28936: PPUSH
28937: CALL_OW 318
28941: IFFALSE 28952
// ComWalk ( un ) ;
28943: LD_VAR 0 2
28947: PPUSH
28948: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28952: LD_VAR 0 2
28956: PPUSH
28957: LD_INT 8
28959: PPUSH
28960: CALL_OW 336
// end ;
28964: PPOPN 3
28966: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28967: LD_EXP 67
28971: PUSH
28972: LD_EXP 111
28976: AND
28977: IFFALSE 29121
28979: GO 28981
28981: DISABLE
28982: LD_INT 0
28984: PPUSH
28985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28986: LD_ADDR_VAR 0 2
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 21
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: LD_INT 34
29018: PUSH
29019: LD_INT 12
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 34
29028: PUSH
29029: LD_INT 51
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 34
29038: PUSH
29039: LD_INT 32
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: ST_TO_ADDR
// if not tmp then
29062: LD_VAR 0 2
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29121
// for i in tmp do
29071: LD_ADDR_VAR 0 1
29075: PUSH
29076: LD_VAR 0 2
29080: PUSH
29081: FOR_IN
29082: IFFALSE 29119
// if GetCargo ( i , mat_artifact ) = 0 then
29084: LD_VAR 0 1
29088: PPUSH
29089: LD_INT 4
29091: PPUSH
29092: CALL_OW 289
29096: PUSH
29097: LD_INT 0
29099: EQUAL
29100: IFFALSE 29117
// SetCargo ( i , mat_siberit , 100 ) ;
29102: LD_VAR 0 1
29106: PPUSH
29107: LD_INT 3
29109: PPUSH
29110: LD_INT 100
29112: PPUSH
29113: CALL_OW 290
29117: GO 29081
29119: POP
29120: POP
// end ;
29121: PPOPN 2
29123: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29124: LD_EXP 67
29128: PUSH
29129: LD_EXP 112
29133: AND
29134: IFFALSE 29317
29136: GO 29138
29138: DISABLE
29139: LD_INT 0
29141: PPUSH
29142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29143: LD_ADDR_VAR 0 2
29147: PUSH
29148: LD_INT 22
29150: PUSH
29151: LD_OWVAR 2
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 2
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29317
// for i := 1 to 2 do
29174: LD_ADDR_VAR 0 1
29178: PUSH
29179: DOUBLE
29180: LD_INT 1
29182: DEC
29183: ST_TO_ADDR
29184: LD_INT 2
29186: PUSH
29187: FOR_TO
29188: IFFALSE 29315
// begin uc_side := your_side ;
29190: LD_ADDR_OWVAR 20
29194: PUSH
29195: LD_OWVAR 2
29199: ST_TO_ADDR
// uc_nation := nation_american ;
29200: LD_ADDR_OWVAR 21
29204: PUSH
29205: LD_INT 1
29207: ST_TO_ADDR
// vc_chassis := us_morphling ;
29208: LD_ADDR_OWVAR 37
29212: PUSH
29213: LD_INT 5
29215: ST_TO_ADDR
// vc_engine := engine_siberite ;
29216: LD_ADDR_OWVAR 39
29220: PUSH
29221: LD_INT 3
29223: ST_TO_ADDR
// vc_control := control_computer ;
29224: LD_ADDR_OWVAR 38
29228: PUSH
29229: LD_INT 3
29231: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29232: LD_ADDR_OWVAR 40
29236: PUSH
29237: LD_INT 10
29239: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29240: LD_VAR 0 2
29244: PUSH
29245: LD_INT 1
29247: ARRAY
29248: PPUSH
29249: CALL_OW 310
29253: NOT
29254: IFFALSE 29301
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29256: CALL_OW 45
29260: PPUSH
29261: LD_VAR 0 2
29265: PUSH
29266: LD_INT 1
29268: ARRAY
29269: PPUSH
29270: CALL_OW 250
29274: PPUSH
29275: LD_VAR 0 2
29279: PUSH
29280: LD_INT 1
29282: ARRAY
29283: PPUSH
29284: CALL_OW 251
29288: PPUSH
29289: LD_INT 12
29291: PPUSH
29292: LD_INT 1
29294: PPUSH
29295: CALL_OW 50
29299: GO 29313
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29301: CALL_OW 45
29305: PPUSH
29306: LD_INT 1
29308: PPUSH
29309: CALL_OW 51
// end ;
29313: GO 29187
29315: POP
29316: POP
// end ;
29317: PPOPN 2
29319: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29320: LD_EXP 67
29324: PUSH
29325: LD_EXP 113
29329: AND
29330: IFFALSE 29552
29332: GO 29334
29334: DISABLE
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29343: LD_ADDR_VAR 0 6
29347: PUSH
29348: LD_INT 22
29350: PUSH
29351: LD_OWVAR 2
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 21
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 23
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: PPUSH
29392: CALL_OW 69
29396: ST_TO_ADDR
// if not tmp then
29397: LD_VAR 0 6
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 29552
// s1 := rand ( 1 , 4 ) ;
29406: LD_ADDR_VAR 0 2
29410: PUSH
29411: LD_INT 1
29413: PPUSH
29414: LD_INT 4
29416: PPUSH
29417: CALL_OW 12
29421: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29422: LD_ADDR_VAR 0 4
29426: PUSH
29427: LD_VAR 0 6
29431: PUSH
29432: LD_INT 1
29434: ARRAY
29435: PPUSH
29436: LD_VAR 0 2
29440: PPUSH
29441: CALL_OW 259
29445: ST_TO_ADDR
// if s1 = 1 then
29446: LD_VAR 0 2
29450: PUSH
29451: LD_INT 1
29453: EQUAL
29454: IFFALSE 29474
// s2 := rand ( 2 , 4 ) else
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 2
29463: PPUSH
29464: LD_INT 4
29466: PPUSH
29467: CALL_OW 12
29471: ST_TO_ADDR
29472: GO 29482
// s2 := 1 ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 1
29481: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29482: LD_ADDR_VAR 0 5
29486: PUSH
29487: LD_VAR 0 6
29491: PUSH
29492: LD_INT 1
29494: ARRAY
29495: PPUSH
29496: LD_VAR 0 3
29500: PPUSH
29501: CALL_OW 259
29505: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29506: LD_VAR 0 6
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PPUSH
29515: LD_VAR 0 2
29519: PPUSH
29520: LD_VAR 0 5
29524: PPUSH
29525: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29529: LD_VAR 0 6
29533: PUSH
29534: LD_INT 1
29536: ARRAY
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: LD_VAR 0 4
29547: PPUSH
29548: CALL_OW 237
// end ;
29552: PPOPN 6
29554: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29555: LD_EXP 67
29559: PUSH
29560: LD_EXP 114
29564: AND
29565: IFFALSE 29644
29567: GO 29569
29569: DISABLE
29570: LD_INT 0
29572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29573: LD_ADDR_VAR 0 1
29577: PUSH
29578: LD_INT 22
29580: PUSH
29581: LD_OWVAR 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 30
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 69
29608: ST_TO_ADDR
// if not tmp then
29609: LD_VAR 0 1
29613: NOT
29614: IFFALSE 29618
// exit ;
29616: GO 29644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 12
29635: ARRAY
29636: PPUSH
29637: LD_INT 1
29639: PPUSH
29640: CALL_OW 234
// end ;
29644: PPOPN 1
29646: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29647: LD_EXP 67
29651: PUSH
29652: LD_EXP 115
29656: AND
29657: IFFALSE 29769
29659: GO 29661
29661: DISABLE
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29666: LD_ADDR_VAR 0 2
29670: PUSH
29671: LD_INT 22
29673: PUSH
29674: LD_OWVAR 2
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: LD_INT 30
29688: PUSH
29689: LD_INT 27
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 26
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 28
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PPUSH
29726: CALL_OW 69
29730: ST_TO_ADDR
// if not tmp then
29731: LD_VAR 0 2
29735: NOT
29736: IFFALSE 29740
// exit ;
29738: GO 29769
// for i in tmp do
29740: LD_ADDR_VAR 0 1
29744: PUSH
29745: LD_VAR 0 2
29749: PUSH
29750: FOR_IN
29751: IFFALSE 29767
// SetLives ( i , 1 ) ;
29753: LD_VAR 0 1
29757: PPUSH
29758: LD_INT 1
29760: PPUSH
29761: CALL_OW 234
29765: GO 29750
29767: POP
29768: POP
// end ;
29769: PPOPN 2
29771: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29772: LD_EXP 67
29776: PUSH
29777: LD_EXP 116
29781: AND
29782: IFFALSE 30056
29784: GO 29786
29786: DISABLE
29787: LD_INT 0
29789: PPUSH
29790: PPUSH
29791: PPUSH
// begin i := rand ( 1 , 7 ) ;
29792: LD_ADDR_VAR 0 1
29796: PUSH
29797: LD_INT 1
29799: PPUSH
29800: LD_INT 7
29802: PPUSH
29803: CALL_OW 12
29807: ST_TO_ADDR
// case i of 1 :
29808: LD_VAR 0 1
29812: PUSH
29813: LD_INT 1
29815: DOUBLE
29816: EQUAL
29817: IFTRUE 29821
29819: GO 29831
29821: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29822: LD_STRING earthquake(getX(game), 0, 32)
29824: PPUSH
29825: CALL_OW 559
29829: GO 30056
29831: LD_INT 2
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 29853
29839: POP
// begin ToLua ( displayStucuk(); ) ;
29840: LD_STRING displayStucuk();
29842: PPUSH
29843: CALL_OW 559
// ResetFog ;
29847: CALL_OW 335
// end ; 3 :
29851: GO 30056
29853: LD_INT 3
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 29965
29861: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29862: LD_ADDR_VAR 0 2
29866: PUSH
29867: LD_INT 22
29869: PUSH
29870: LD_OWVAR 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 25
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PPUSH
29893: CALL_OW 69
29897: ST_TO_ADDR
// if not tmp then
29898: LD_VAR 0 2
29902: NOT
29903: IFFALSE 29907
// exit ;
29905: GO 30056
// un := tmp [ rand ( 1 , tmp ) ] ;
29907: LD_ADDR_VAR 0 3
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_INT 1
29919: PPUSH
29920: LD_VAR 0 2
29924: PPUSH
29925: CALL_OW 12
29929: ARRAY
29930: ST_TO_ADDR
// if Crawls ( un ) then
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 318
29940: IFFALSE 29951
// ComWalk ( un ) ;
29942: LD_VAR 0 3
29946: PPUSH
29947: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29951: LD_VAR 0 3
29955: PPUSH
29956: LD_INT 8
29958: PPUSH
29959: CALL_OW 336
// end ; 4 :
29963: GO 30056
29965: LD_INT 4
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30034
29973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29974: LD_ADDR_VAR 0 2
29978: PUSH
29979: LD_INT 22
29981: PUSH
29982: LD_OWVAR 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 30
29993: PUSH
29994: LD_INT 29
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PPUSH
30005: CALL_OW 69
30009: ST_TO_ADDR
// if not tmp then
30010: LD_VAR 0 2
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 30056
// DestroyUnit ( tmp [ 1 ] ) ;
30019: LD_VAR 0 2
30023: PUSH
30024: LD_INT 1
30026: ARRAY
30027: PPUSH
30028: CALL_OW 65
// end ; 5 .. 7 :
30032: GO 30056
30034: LD_INT 5
30036: DOUBLE
30037: GREATEREQUAL
30038: IFFALSE 30046
30040: LD_INT 7
30042: DOUBLE
30043: LESSEQUAL
30044: IFTRUE 30048
30046: GO 30055
30048: POP
// StreamSibBomb ; end ;
30049: CALL 26306 0 0
30053: GO 30056
30055: POP
// end ;
30056: PPOPN 3
30058: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30059: LD_EXP 67
30063: PUSH
30064: LD_EXP 117
30068: AND
30069: IFFALSE 30225
30071: GO 30073
30073: DISABLE
30074: LD_INT 0
30076: PPUSH
30077: PPUSH
30078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30079: LD_ADDR_VAR 0 2
30083: PUSH
30084: LD_INT 81
30086: PUSH
30087: LD_OWVAR 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 21
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 21
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PPUSH
30128: CALL_OW 69
30132: ST_TO_ADDR
// if not tmp then
30133: LD_VAR 0 2
30137: NOT
30138: IFFALSE 30142
// exit ;
30140: GO 30225
// p := 0 ;
30142: LD_ADDR_VAR 0 3
30146: PUSH
30147: LD_INT 0
30149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30150: LD_INT 35
30152: PPUSH
30153: CALL_OW 67
// p := p + 1 ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_VAR 0 3
30166: PUSH
30167: LD_INT 1
30169: PLUS
30170: ST_TO_ADDR
// for i in tmp do
30171: LD_ADDR_VAR 0 1
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: FOR_IN
30182: IFFALSE 30213
// if GetLives ( i ) < 1000 then
30184: LD_VAR 0 1
30188: PPUSH
30189: CALL_OW 256
30193: PUSH
30194: LD_INT 1000
30196: LESS
30197: IFFALSE 30211
// SetLives ( i , 1000 ) ;
30199: LD_VAR 0 1
30203: PPUSH
30204: LD_INT 1000
30206: PPUSH
30207: CALL_OW 234
30211: GO 30181
30213: POP
30214: POP
// until p > 20 ;
30215: LD_VAR 0 3
30219: PUSH
30220: LD_INT 20
30222: GREATER
30223: IFFALSE 30150
// end ;
30225: PPOPN 3
30227: END
// every 0 0$1 trigger StreamModeActive and sTime do
30228: LD_EXP 67
30232: PUSH
30233: LD_EXP 118
30237: AND
30238: IFFALSE 30273
30240: GO 30242
30242: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30243: LD_INT 28
30245: PPUSH
30246: LD_OWVAR 2
30250: PPUSH
30251: LD_INT 2
30253: PPUSH
30254: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30258: LD_INT 30
30260: PPUSH
30261: LD_OWVAR 2
30265: PPUSH
30266: LD_INT 2
30268: PPUSH
30269: CALL_OW 322
// end ;
30273: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30274: LD_EXP 67
30278: PUSH
30279: LD_EXP 119
30283: AND
30284: IFFALSE 30405
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30293: LD_ADDR_VAR 0 2
30297: PUSH
30298: LD_INT 22
30300: PUSH
30301: LD_OWVAR 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 21
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 23
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: PPUSH
30342: CALL_OW 69
30346: ST_TO_ADDR
// if not tmp then
30347: LD_VAR 0 2
30351: NOT
30352: IFFALSE 30356
// exit ;
30354: GO 30405
// for i in tmp do
30356: LD_ADDR_VAR 0 1
30360: PUSH
30361: LD_VAR 0 2
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30403
// begin if Crawls ( i ) then
30369: LD_VAR 0 1
30373: PPUSH
30374: CALL_OW 318
30378: IFFALSE 30389
// ComWalk ( i ) ;
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 138
// SetClass ( i , 2 ) ;
30389: LD_VAR 0 1
30393: PPUSH
30394: LD_INT 2
30396: PPUSH
30397: CALL_OW 336
// end ;
30401: GO 30366
30403: POP
30404: POP
// end ;
30405: PPOPN 2
30407: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30408: LD_EXP 67
30412: PUSH
30413: LD_EXP 120
30417: AND
30418: IFFALSE 30699
30420: GO 30422
30422: DISABLE
30423: LD_INT 0
30425: PPUSH
30426: PPUSH
30427: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30428: LD_OWVAR 2
30432: PPUSH
30433: LD_INT 9
30435: PPUSH
30436: LD_INT 1
30438: PPUSH
30439: LD_INT 1
30441: PPUSH
30442: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30446: LD_INT 9
30448: PPUSH
30449: LD_OWVAR 2
30453: PPUSH
30454: CALL_OW 343
// uc_side := 9 ;
30458: LD_ADDR_OWVAR 20
30462: PUSH
30463: LD_INT 9
30465: ST_TO_ADDR
// uc_nation := 2 ;
30466: LD_ADDR_OWVAR 21
30470: PUSH
30471: LD_INT 2
30473: ST_TO_ADDR
// hc_name := Dark Warrior ;
30474: LD_ADDR_OWVAR 26
30478: PUSH
30479: LD_STRING Dark Warrior
30481: ST_TO_ADDR
// hc_gallery :=  ;
30482: LD_ADDR_OWVAR 33
30486: PUSH
30487: LD_STRING 
30489: ST_TO_ADDR
// hc_noskilllimit := true ;
30490: LD_ADDR_OWVAR 76
30494: PUSH
30495: LD_INT 1
30497: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30498: LD_ADDR_OWVAR 31
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: LD_INT 30
30508: PUSH
30509: LD_INT 30
30511: PUSH
30512: LD_INT 30
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// un := CreateHuman ;
30521: LD_ADDR_VAR 0 3
30525: PUSH
30526: CALL_OW 44
30530: ST_TO_ADDR
// hc_noskilllimit := false ;
30531: LD_ADDR_OWVAR 76
30535: PUSH
30536: LD_INT 0
30538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30539: LD_VAR 0 3
30543: PPUSH
30544: LD_INT 1
30546: PPUSH
30547: CALL_OW 51
// p := 0 ;
30551: LD_ADDR_VAR 0 2
30555: PUSH
30556: LD_INT 0
30558: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30559: LD_INT 35
30561: PPUSH
30562: CALL_OW 67
// p := p + 1 ;
30566: LD_ADDR_VAR 0 2
30570: PUSH
30571: LD_VAR 0 2
30575: PUSH
30576: LD_INT 1
30578: PLUS
30579: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30580: LD_VAR 0 3
30584: PPUSH
30585: CALL_OW 256
30589: PUSH
30590: LD_INT 1000
30592: LESS
30593: IFFALSE 30607
// SetLives ( un , 1000 ) ;
30595: LD_VAR 0 3
30599: PPUSH
30600: LD_INT 1000
30602: PPUSH
30603: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30607: LD_VAR 0 3
30611: PPUSH
30612: LD_INT 81
30614: PUSH
30615: LD_OWVAR 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 91
30626: PUSH
30627: LD_VAR 0 3
30631: PUSH
30632: LD_INT 30
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 69
30648: PPUSH
30649: LD_VAR 0 3
30653: PPUSH
30654: CALL_OW 74
30658: PPUSH
30659: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30663: LD_VAR 0 2
30667: PUSH
30668: LD_INT 60
30670: GREATER
30671: PUSH
30672: LD_VAR 0 3
30676: PPUSH
30677: CALL_OW 301
30681: OR
30682: IFFALSE 30559
// if un then
30684: LD_VAR 0 3
30688: IFFALSE 30699
// RemoveUnit ( un ) ;
30690: LD_VAR 0 3
30694: PPUSH
30695: CALL_OW 64
// end ;
30699: PPOPN 3
30701: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30702: LD_INT 0
30704: PPUSH
// case cmd of 301 :
30705: LD_VAR 0 1
30709: PUSH
30710: LD_INT 301
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30750
30718: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30719: LD_VAR 0 6
30723: PPUSH
30724: LD_VAR 0 7
30728: PPUSH
30729: LD_VAR 0 8
30733: PPUSH
30734: LD_VAR 0 4
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL 31951 0 5
30748: GO 30871
30750: LD_INT 302
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30795
30758: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30759: LD_VAR 0 6
30763: PPUSH
30764: LD_VAR 0 7
30768: PPUSH
30769: LD_VAR 0 8
30773: PPUSH
30774: LD_VAR 0 9
30778: PPUSH
30779: LD_VAR 0 4
30783: PPUSH
30784: LD_VAR 0 5
30788: PPUSH
30789: CALL 32042 0 6
30793: GO 30871
30795: LD_INT 303
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30840
30803: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30804: LD_VAR 0 6
30808: PPUSH
30809: LD_VAR 0 7
30813: PPUSH
30814: LD_VAR 0 8
30818: PPUSH
30819: LD_VAR 0 9
30823: PPUSH
30824: LD_VAR 0 4
30828: PPUSH
30829: LD_VAR 0 5
30833: PPUSH
30834: CALL 30876 0 6
30838: GO 30871
30840: LD_INT 304
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30870
30848: POP
// hHackTeleport ( unit , x , y ) ; end ;
30849: LD_VAR 0 2
30853: PPUSH
30854: LD_VAR 0 4
30858: PPUSH
30859: LD_VAR 0 5
30863: PPUSH
30864: CALL 32635 0 3
30868: GO 30871
30870: POP
// end ;
30871: LD_VAR 0 12
30875: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30876: LD_INT 0
30878: PPUSH
30879: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30880: LD_VAR 0 1
30884: PUSH
30885: LD_INT 1
30887: LESS
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: LD_INT 3
30896: GREATER
30897: OR
30898: PUSH
30899: LD_VAR 0 5
30903: PPUSH
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 428
30913: OR
30914: IFFALSE 30918
// exit ;
30916: GO 31638
// uc_side := your_side ;
30918: LD_ADDR_OWVAR 20
30922: PUSH
30923: LD_OWVAR 2
30927: ST_TO_ADDR
// uc_nation := nation ;
30928: LD_ADDR_OWVAR 21
30932: PUSH
30933: LD_VAR 0 1
30937: ST_TO_ADDR
// bc_level = 1 ;
30938: LD_ADDR_OWVAR 43
30942: PUSH
30943: LD_INT 1
30945: ST_TO_ADDR
// case btype of 1 :
30946: LD_VAR 0 2
30950: PUSH
30951: LD_INT 1
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// bc_type := b_depot ; 2 :
30960: LD_ADDR_OWVAR 42
30964: PUSH
30965: LD_INT 0
30967: ST_TO_ADDR
30968: GO 31582
30970: LD_INT 2
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 30989
30978: POP
// bc_type := b_warehouse ; 3 :
30979: LD_ADDR_OWVAR 42
30983: PUSH
30984: LD_INT 1
30986: ST_TO_ADDR
30987: GO 31582
30989: LD_INT 3
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31008
30997: POP
// bc_type := b_lab ; 4 .. 9 :
30998: LD_ADDR_OWVAR 42
31002: PUSH
31003: LD_INT 6
31005: ST_TO_ADDR
31006: GO 31582
31008: LD_INT 4
31010: DOUBLE
31011: GREATEREQUAL
31012: IFFALSE 31020
31014: LD_INT 9
31016: DOUBLE
31017: LESSEQUAL
31018: IFTRUE 31022
31020: GO 31074
31022: POP
// begin bc_type := b_lab_half ;
31023: LD_ADDR_OWVAR 42
31027: PUSH
31028: LD_INT 7
31030: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31031: LD_ADDR_OWVAR 44
31035: PUSH
31036: LD_INT 10
31038: PUSH
31039: LD_INT 11
31041: PUSH
31042: LD_INT 12
31044: PUSH
31045: LD_INT 15
31047: PUSH
31048: LD_INT 14
31050: PUSH
31051: LD_INT 13
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: PUSH
31062: LD_VAR 0 2
31066: PUSH
31067: LD_INT 3
31069: MINUS
31070: ARRAY
31071: ST_TO_ADDR
// end ; 10 .. 13 :
31072: GO 31582
31074: LD_INT 10
31076: DOUBLE
31077: GREATEREQUAL
31078: IFFALSE 31086
31080: LD_INT 13
31082: DOUBLE
31083: LESSEQUAL
31084: IFTRUE 31088
31086: GO 31165
31088: POP
// begin bc_type := b_lab_full ;
31089: LD_ADDR_OWVAR 42
31093: PUSH
31094: LD_INT 8
31096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31097: LD_ADDR_OWVAR 44
31101: PUSH
31102: LD_INT 10
31104: PUSH
31105: LD_INT 12
31107: PUSH
31108: LD_INT 14
31110: PUSH
31111: LD_INT 13
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: PUSH
31120: LD_VAR 0 2
31124: PUSH
31125: LD_INT 9
31127: MINUS
31128: ARRAY
31129: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31130: LD_ADDR_OWVAR 45
31134: PUSH
31135: LD_INT 11
31137: PUSH
31138: LD_INT 15
31140: PUSH
31141: LD_INT 12
31143: PUSH
31144: LD_INT 15
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: PUSH
31153: LD_VAR 0 2
31157: PUSH
31158: LD_INT 9
31160: MINUS
31161: ARRAY
31162: ST_TO_ADDR
// end ; 14 :
31163: GO 31582
31165: LD_INT 14
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31184
31173: POP
// bc_type := b_workshop ; 15 :
31174: LD_ADDR_OWVAR 42
31178: PUSH
31179: LD_INT 2
31181: ST_TO_ADDR
31182: GO 31582
31184: LD_INT 15
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31203
31192: POP
// bc_type := b_factory ; 16 :
31193: LD_ADDR_OWVAR 42
31197: PUSH
31198: LD_INT 3
31200: ST_TO_ADDR
31201: GO 31582
31203: LD_INT 16
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31211
31209: GO 31222
31211: POP
// bc_type := b_ext_gun ; 17 :
31212: LD_ADDR_OWVAR 42
31216: PUSH
31217: LD_INT 17
31219: ST_TO_ADDR
31220: GO 31582
31222: LD_INT 17
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31258
31230: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31231: LD_ADDR_OWVAR 42
31235: PUSH
31236: LD_INT 19
31238: PUSH
31239: LD_INT 23
31241: PUSH
31242: LD_INT 19
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: PUSH
31250: LD_VAR 0 1
31254: ARRAY
31255: ST_TO_ADDR
31256: GO 31582
31258: LD_INT 18
31260: DOUBLE
31261: EQUAL
31262: IFTRUE 31266
31264: GO 31277
31266: POP
// bc_type := b_ext_radar ; 19 :
31267: LD_ADDR_OWVAR 42
31271: PUSH
31272: LD_INT 20
31274: ST_TO_ADDR
31275: GO 31582
31277: LD_INT 19
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31296
31285: POP
// bc_type := b_ext_radio ; 20 :
31286: LD_ADDR_OWVAR 42
31290: PUSH
31291: LD_INT 22
31293: ST_TO_ADDR
31294: GO 31582
31296: LD_INT 20
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31315
31304: POP
// bc_type := b_ext_siberium ; 21 :
31305: LD_ADDR_OWVAR 42
31309: PUSH
31310: LD_INT 21
31312: ST_TO_ADDR
31313: GO 31582
31315: LD_INT 21
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31334
31323: POP
// bc_type := b_ext_computer ; 22 :
31324: LD_ADDR_OWVAR 42
31328: PUSH
31329: LD_INT 24
31331: ST_TO_ADDR
31332: GO 31582
31334: LD_INT 22
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31353
31342: POP
// bc_type := b_ext_track ; 23 :
31343: LD_ADDR_OWVAR 42
31347: PUSH
31348: LD_INT 16
31350: ST_TO_ADDR
31351: GO 31582
31353: LD_INT 23
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31372
31361: POP
// bc_type := b_ext_laser ; 24 :
31362: LD_ADDR_OWVAR 42
31366: PUSH
31367: LD_INT 25
31369: ST_TO_ADDR
31370: GO 31582
31372: LD_INT 24
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31391
31380: POP
// bc_type := b_control_tower ; 25 :
31381: LD_ADDR_OWVAR 42
31385: PUSH
31386: LD_INT 36
31388: ST_TO_ADDR
31389: GO 31582
31391: LD_INT 25
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31410
31399: POP
// bc_type := b_breastwork ; 26 :
31400: LD_ADDR_OWVAR 42
31404: PUSH
31405: LD_INT 31
31407: ST_TO_ADDR
31408: GO 31582
31410: LD_INT 26
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31429
31418: POP
// bc_type := b_bunker ; 27 :
31419: LD_ADDR_OWVAR 42
31423: PUSH
31424: LD_INT 32
31426: ST_TO_ADDR
31427: GO 31582
31429: LD_INT 27
31431: DOUBLE
31432: EQUAL
31433: IFTRUE 31437
31435: GO 31448
31437: POP
// bc_type := b_turret ; 28 :
31438: LD_ADDR_OWVAR 42
31442: PUSH
31443: LD_INT 33
31445: ST_TO_ADDR
31446: GO 31582
31448: LD_INT 28
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31467
31456: POP
// bc_type := b_armoury ; 29 :
31457: LD_ADDR_OWVAR 42
31461: PUSH
31462: LD_INT 4
31464: ST_TO_ADDR
31465: GO 31582
31467: LD_INT 29
31469: DOUBLE
31470: EQUAL
31471: IFTRUE 31475
31473: GO 31486
31475: POP
// bc_type := b_barracks ; 30 :
31476: LD_ADDR_OWVAR 42
31480: PUSH
31481: LD_INT 5
31483: ST_TO_ADDR
31484: GO 31582
31486: LD_INT 30
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31505
31494: POP
// bc_type := b_solar_power ; 31 :
31495: LD_ADDR_OWVAR 42
31499: PUSH
31500: LD_INT 27
31502: ST_TO_ADDR
31503: GO 31582
31505: LD_INT 31
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31513
31511: GO 31524
31513: POP
// bc_type := b_oil_power ; 32 :
31514: LD_ADDR_OWVAR 42
31518: PUSH
31519: LD_INT 26
31521: ST_TO_ADDR
31522: GO 31582
31524: LD_INT 32
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31543
31532: POP
// bc_type := b_siberite_power ; 33 :
31533: LD_ADDR_OWVAR 42
31537: PUSH
31538: LD_INT 28
31540: ST_TO_ADDR
31541: GO 31582
31543: LD_INT 33
31545: DOUBLE
31546: EQUAL
31547: IFTRUE 31551
31549: GO 31562
31551: POP
// bc_type := b_oil_mine ; 34 :
31552: LD_ADDR_OWVAR 42
31556: PUSH
31557: LD_INT 29
31559: ST_TO_ADDR
31560: GO 31582
31562: LD_INT 34
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 31581
31570: POP
// bc_type := b_siberite_mine ; end ;
31571: LD_ADDR_OWVAR 42
31575: PUSH
31576: LD_INT 30
31578: ST_TO_ADDR
31579: GO 31582
31581: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31582: LD_ADDR_VAR 0 8
31586: PUSH
31587: LD_VAR 0 5
31591: PPUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_VAR 0 3
31601: PPUSH
31602: CALL_OW 47
31606: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31607: LD_OWVAR 42
31611: PUSH
31612: LD_INT 32
31614: PUSH
31615: LD_INT 33
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: IN
31622: IFFALSE 31638
// PlaceWeaponTurret ( b , weapon ) ;
31624: LD_VAR 0 8
31628: PPUSH
31629: LD_VAR 0 4
31633: PPUSH
31634: CALL_OW 431
// end ;
31638: LD_VAR 0 7
31642: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31643: LD_INT 0
31645: PPUSH
31646: PPUSH
31647: PPUSH
31648: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31649: LD_ADDR_VAR 0 4
31653: PUSH
31654: LD_INT 22
31656: PUSH
31657: LD_OWVAR 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 30
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 30
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PPUSH
31698: CALL_OW 69
31702: ST_TO_ADDR
// if not tmp then
31703: LD_VAR 0 4
31707: NOT
31708: IFFALSE 31712
// exit ;
31710: GO 31771
// for i in tmp do
31712: LD_ADDR_VAR 0 2
31716: PUSH
31717: LD_VAR 0 4
31721: PUSH
31722: FOR_IN
31723: IFFALSE 31769
// for j = 1 to 3 do
31725: LD_ADDR_VAR 0 3
31729: PUSH
31730: DOUBLE
31731: LD_INT 1
31733: DEC
31734: ST_TO_ADDR
31735: LD_INT 3
31737: PUSH
31738: FOR_TO
31739: IFFALSE 31765
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31741: LD_VAR 0 2
31745: PPUSH
31746: CALL_OW 274
31750: PPUSH
31751: LD_VAR 0 3
31755: PPUSH
31756: LD_INT 99999
31758: PPUSH
31759: CALL_OW 277
31763: GO 31738
31765: POP
31766: POP
31767: GO 31722
31769: POP
31770: POP
// end ;
31771: LD_VAR 0 1
31775: RET
// export function hHackSetLevel10 ; var i , j ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_INT 21
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 69
31800: PUSH
31801: FOR_IN
31802: IFFALSE 31854
// if IsSelected ( i ) then
31804: LD_VAR 0 2
31808: PPUSH
31809: CALL_OW 306
31813: IFFALSE 31852
// begin for j := 1 to 4 do
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: DOUBLE
31821: LD_INT 1
31823: DEC
31824: ST_TO_ADDR
31825: LD_INT 4
31827: PUSH
31828: FOR_TO
31829: IFFALSE 31850
// SetSkill ( i , j , 10 ) ;
31831: LD_VAR 0 2
31835: PPUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_INT 10
31843: PPUSH
31844: CALL_OW 237
31848: GO 31828
31850: POP
31851: POP
// end ;
31852: GO 31801
31854: POP
31855: POP
// end ;
31856: LD_VAR 0 1
31860: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31861: LD_INT 0
31863: PPUSH
31864: PPUSH
31865: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31866: LD_ADDR_VAR 0 2
31870: PUSH
31871: LD_INT 22
31873: PUSH
31874: LD_OWVAR 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 21
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PPUSH
31897: CALL_OW 69
31901: PUSH
31902: FOR_IN
31903: IFFALSE 31944
// begin for j := 1 to 4 do
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: DOUBLE
31911: LD_INT 1
31913: DEC
31914: ST_TO_ADDR
31915: LD_INT 4
31917: PUSH
31918: FOR_TO
31919: IFFALSE 31940
// SetSkill ( i , j , 10 ) ;
31921: LD_VAR 0 2
31925: PPUSH
31926: LD_VAR 0 3
31930: PPUSH
31931: LD_INT 10
31933: PPUSH
31934: CALL_OW 237
31938: GO 31918
31940: POP
31941: POP
// end ;
31942: GO 31902
31944: POP
31945: POP
// end ;
31946: LD_VAR 0 1
31950: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31951: LD_INT 0
31953: PPUSH
// uc_side := your_side ;
31954: LD_ADDR_OWVAR 20
31958: PUSH
31959: LD_OWVAR 2
31963: ST_TO_ADDR
// uc_nation := nation ;
31964: LD_ADDR_OWVAR 21
31968: PUSH
31969: LD_VAR 0 1
31973: ST_TO_ADDR
// InitHc ;
31974: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31978: LD_INT 0
31980: PPUSH
31981: LD_VAR 0 2
31985: PPUSH
31986: LD_VAR 0 3
31990: PPUSH
31991: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31995: LD_VAR 0 4
31999: PPUSH
32000: LD_VAR 0 5
32004: PPUSH
32005: CALL_OW 428
32009: PUSH
32010: LD_INT 0
32012: EQUAL
32013: IFFALSE 32037
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32015: CALL_OW 44
32019: PPUSH
32020: LD_VAR 0 4
32024: PPUSH
32025: LD_VAR 0 5
32029: PPUSH
32030: LD_INT 1
32032: PPUSH
32033: CALL_OW 48
// end ;
32037: LD_VAR 0 6
32041: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32042: LD_INT 0
32044: PPUSH
32045: PPUSH
// uc_side := your_side ;
32046: LD_ADDR_OWVAR 20
32050: PUSH
32051: LD_OWVAR 2
32055: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32056: LD_VAR 0 1
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: LD_INT 5
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: IN
32083: IFFALSE 32095
// uc_nation := nation_american else
32085: LD_ADDR_OWVAR 21
32089: PUSH
32090: LD_INT 1
32092: ST_TO_ADDR
32093: GO 32138
// if chassis in [ 11 , 12 , 13 , 14 ] then
32095: LD_VAR 0 1
32099: PUSH
32100: LD_INT 11
32102: PUSH
32103: LD_INT 12
32105: PUSH
32106: LD_INT 13
32108: PUSH
32109: LD_INT 14
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: IN
32118: IFFALSE 32130
// uc_nation := nation_arabian else
32120: LD_ADDR_OWVAR 21
32124: PUSH
32125: LD_INT 2
32127: ST_TO_ADDR
32128: GO 32138
// uc_nation := nation_russian ;
32130: LD_ADDR_OWVAR 21
32134: PUSH
32135: LD_INT 3
32137: ST_TO_ADDR
// vc_chassis := chassis ;
32138: LD_ADDR_OWVAR 37
32142: PUSH
32143: LD_VAR 0 1
32147: ST_TO_ADDR
// vc_engine := engine ;
32148: LD_ADDR_OWVAR 39
32152: PUSH
32153: LD_VAR 0 2
32157: ST_TO_ADDR
// vc_control := control ;
32158: LD_ADDR_OWVAR 38
32162: PUSH
32163: LD_VAR 0 3
32167: ST_TO_ADDR
// vc_weapon := weapon ;
32168: LD_ADDR_OWVAR 40
32172: PUSH
32173: LD_VAR 0 4
32177: ST_TO_ADDR
// un := CreateVehicle ;
32178: LD_ADDR_VAR 0 8
32182: PUSH
32183: CALL_OW 45
32187: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32188: LD_VAR 0 8
32192: PPUSH
32193: LD_INT 0
32195: PPUSH
32196: LD_INT 5
32198: PPUSH
32199: CALL_OW 12
32203: PPUSH
32204: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32208: LD_VAR 0 8
32212: PPUSH
32213: LD_VAR 0 5
32217: PPUSH
32218: LD_VAR 0 6
32222: PPUSH
32223: LD_INT 1
32225: PPUSH
32226: CALL_OW 48
// end ;
32230: LD_VAR 0 7
32234: RET
// export hInvincible ; every 1 do
32235: GO 32237
32237: DISABLE
// hInvincible := [ ] ;
32238: LD_ADDR_EXP 121
32242: PUSH
32243: EMPTY
32244: ST_TO_ADDR
32245: END
// every 10 do var i ;
32246: GO 32248
32248: DISABLE
32249: LD_INT 0
32251: PPUSH
// begin enable ;
32252: ENABLE
// if not hInvincible then
32253: LD_EXP 121
32257: NOT
32258: IFFALSE 32262
// exit ;
32260: GO 32306
// for i in hInvincible do
32262: LD_ADDR_VAR 0 1
32266: PUSH
32267: LD_EXP 121
32271: PUSH
32272: FOR_IN
32273: IFFALSE 32304
// if GetLives ( i ) < 1000 then
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 256
32284: PUSH
32285: LD_INT 1000
32287: LESS
32288: IFFALSE 32302
// SetLives ( i , 1000 ) ;
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_INT 1000
32297: PPUSH
32298: CALL_OW 234
32302: GO 32272
32304: POP
32305: POP
// end ;
32306: PPOPN 1
32308: END
// export function hHackInvincible ; var i ; begin
32309: LD_INT 0
32311: PPUSH
32312: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32313: LD_ADDR_VAR 0 2
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 21
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 21
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: PPUSH
32346: CALL_OW 69
32350: PUSH
32351: FOR_IN
32352: IFFALSE 32413
// if IsSelected ( i ) then
32354: LD_VAR 0 2
32358: PPUSH
32359: CALL_OW 306
32363: IFFALSE 32411
// begin if i in hInvincible then
32365: LD_VAR 0 2
32369: PUSH
32370: LD_EXP 121
32374: IN
32375: IFFALSE 32395
// hInvincible := hInvincible diff i else
32377: LD_ADDR_EXP 121
32381: PUSH
32382: LD_EXP 121
32386: PUSH
32387: LD_VAR 0 2
32391: DIFF
32392: ST_TO_ADDR
32393: GO 32411
// hInvincible := hInvincible union i ;
32395: LD_ADDR_EXP 121
32399: PUSH
32400: LD_EXP 121
32404: PUSH
32405: LD_VAR 0 2
32409: UNION
32410: ST_TO_ADDR
// end ;
32411: GO 32351
32413: POP
32414: POP
// end ;
32415: LD_VAR 0 1
32419: RET
// export function hHackInvisible ; var i , j ; begin
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32425: LD_ADDR_VAR 0 2
32429: PUSH
32430: LD_INT 21
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PPUSH
32440: CALL_OW 69
32444: PUSH
32445: FOR_IN
32446: IFFALSE 32470
// if IsSelected ( i ) then
32448: LD_VAR 0 2
32452: PPUSH
32453: CALL_OW 306
32457: IFFALSE 32468
// ComForceInvisible ( i ) ;
32459: LD_VAR 0 2
32463: PPUSH
32464: CALL_OW 496
32468: GO 32445
32470: POP
32471: POP
// end ;
32472: LD_VAR 0 1
32476: RET
// export function hHackChangeYourSide ; begin
32477: LD_INT 0
32479: PPUSH
// if your_side = 8 then
32480: LD_OWVAR 2
32484: PUSH
32485: LD_INT 8
32487: EQUAL
32488: IFFALSE 32500
// your_side := 0 else
32490: LD_ADDR_OWVAR 2
32494: PUSH
32495: LD_INT 0
32497: ST_TO_ADDR
32498: GO 32514
// your_side := your_side + 1 ;
32500: LD_ADDR_OWVAR 2
32504: PUSH
32505: LD_OWVAR 2
32509: PUSH
32510: LD_INT 1
32512: PLUS
32513: ST_TO_ADDR
// end ;
32514: LD_VAR 0 1
32518: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32519: LD_INT 0
32521: PPUSH
32522: PPUSH
32523: PPUSH
// for i in all_units do
32524: LD_ADDR_VAR 0 2
32528: PUSH
32529: LD_OWVAR 3
32533: PUSH
32534: FOR_IN
32535: IFFALSE 32613
// if IsSelected ( i ) then
32537: LD_VAR 0 2
32541: PPUSH
32542: CALL_OW 306
32546: IFFALSE 32611
// begin j := GetSide ( i ) ;
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_VAR 0 2
32557: PPUSH
32558: CALL_OW 255
32562: ST_TO_ADDR
// if j = 8 then
32563: LD_VAR 0 3
32567: PUSH
32568: LD_INT 8
32570: EQUAL
32571: IFFALSE 32583
// j := 0 else
32573: LD_ADDR_VAR 0 3
32577: PUSH
32578: LD_INT 0
32580: ST_TO_ADDR
32581: GO 32597
// j := j + 1 ;
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_VAR 0 3
32592: PUSH
32593: LD_INT 1
32595: PLUS
32596: ST_TO_ADDR
// SetSide ( i , j ) ;
32597: LD_VAR 0 2
32601: PPUSH
32602: LD_VAR 0 3
32606: PPUSH
32607: CALL_OW 235
// end ;
32611: GO 32534
32613: POP
32614: POP
// end ;
32615: LD_VAR 0 1
32619: RET
// export function hHackFog ; begin
32620: LD_INT 0
32622: PPUSH
// FogOff ( true ) ;
32623: LD_INT 1
32625: PPUSH
32626: CALL_OW 344
// end ;
32630: LD_VAR 0 1
32634: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32635: LD_INT 0
32637: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32638: LD_VAR 0 1
32642: PPUSH
32643: LD_VAR 0 2
32647: PPUSH
32648: LD_VAR 0 3
32652: PPUSH
32653: LD_INT 1
32655: PPUSH
32656: LD_INT 1
32658: PPUSH
32659: CALL_OW 483
// CenterOnXY ( x , y ) ;
32663: LD_VAR 0 2
32667: PPUSH
32668: LD_VAR 0 3
32672: PPUSH
32673: CALL_OW 84
// end ; end_of_file
32677: LD_VAR 0 4
32681: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32682: LD_INT 0
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 264
32697: PUSH
32698: LD_EXP 52
32702: EQUAL
32703: IFFALSE 32775
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32705: LD_INT 68
32707: PPUSH
32708: LD_VAR 0 1
32712: PPUSH
32713: CALL_OW 255
32717: PPUSH
32718: CALL_OW 321
32722: PUSH
32723: LD_INT 2
32725: EQUAL
32726: IFFALSE 32738
// eff := 70 else
32728: LD_ADDR_VAR 0 4
32732: PUSH
32733: LD_INT 70
32735: ST_TO_ADDR
32736: GO 32746
// eff := 30 ;
32738: LD_ADDR_VAR 0 4
32742: PUSH
32743: LD_INT 30
32745: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 250
32755: PPUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 251
32765: PPUSH
32766: LD_VAR 0 4
32770: PPUSH
32771: CALL_OW 495
// end ; end ;
32775: LD_VAR 0 2
32779: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32780: LD_INT 0
32782: PPUSH
// end ;
32783: LD_VAR 0 4
32787: RET
// export function SOS_Command ( cmd ) ; begin
32788: LD_INT 0
32790: PPUSH
// end ;
32791: LD_VAR 0 2
32795: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32796: LD_INT 0
32798: PPUSH
// if cmd = 121 then
32799: LD_VAR 0 1
32803: PUSH
32804: LD_INT 121
32806: EQUAL
32807: IFFALSE 32809
// end ;
32809: LD_VAR 0 6
32813: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32814: LD_INT 0
32816: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32817: LD_VAR 0 1
32821: PUSH
32822: LD_INT 250
32824: EQUAL
32825: PUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: CALL_OW 264
32835: PUSH
32836: LD_EXP 55
32840: EQUAL
32841: AND
32842: IFFALSE 32863
// MinerPlaceMine ( unit , x , y ) ;
32844: LD_VAR 0 2
32848: PPUSH
32849: LD_VAR 0 4
32853: PPUSH
32854: LD_VAR 0 5
32858: PPUSH
32859: CALL 35212 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32863: LD_VAR 0 1
32867: PUSH
32868: LD_INT 251
32870: EQUAL
32871: PUSH
32872: LD_VAR 0 2
32876: PPUSH
32877: CALL_OW 264
32881: PUSH
32882: LD_EXP 55
32886: EQUAL
32887: AND
32888: IFFALSE 32909
// MinerDetonateMine ( unit , x , y ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 4
32899: PPUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL 35489 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_INT 252
32916: EQUAL
32917: PUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: CALL_OW 264
32927: PUSH
32928: LD_EXP 55
32932: EQUAL
32933: AND
32934: IFFALSE 32955
// MinerCreateMinefield ( unit , x , y ) ;
32936: LD_VAR 0 2
32940: PPUSH
32941: LD_VAR 0 4
32945: PPUSH
32946: LD_VAR 0 5
32950: PPUSH
32951: CALL 35906 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32955: LD_VAR 0 1
32959: PUSH
32960: LD_INT 253
32962: EQUAL
32963: PUSH
32964: LD_VAR 0 2
32968: PPUSH
32969: CALL_OW 257
32973: PUSH
32974: LD_INT 5
32976: EQUAL
32977: AND
32978: IFFALSE 32999
// ComBinocular ( unit , x , y ) ;
32980: LD_VAR 0 2
32984: PPUSH
32985: LD_VAR 0 4
32989: PPUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL 36277 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32999: LD_VAR 0 1
33003: PUSH
33004: LD_INT 254
33006: EQUAL
33007: PUSH
33008: LD_VAR 0 2
33012: PPUSH
33013: CALL_OW 264
33017: PUSH
33018: LD_EXP 50
33022: EQUAL
33023: AND
33024: PUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: CALL_OW 263
33034: PUSH
33035: LD_INT 3
33037: EQUAL
33038: AND
33039: IFFALSE 33055
// HackDestroyVehicle ( unit , selectedUnit ) ;
33041: LD_VAR 0 2
33045: PPUSH
33046: LD_VAR 0 3
33050: PPUSH
33051: CALL 34572 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33055: LD_VAR 0 1
33059: PUSH
33060: LD_INT 255
33062: EQUAL
33063: PUSH
33064: LD_VAR 0 2
33068: PPUSH
33069: CALL_OW 264
33073: PUSH
33074: LD_INT 14
33076: PUSH
33077: LD_INT 53
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: IN
33084: AND
33085: PUSH
33086: LD_VAR 0 4
33090: PPUSH
33091: LD_VAR 0 5
33095: PPUSH
33096: CALL_OW 488
33100: AND
33101: IFFALSE 33125
// CutTreeXYR ( unit , x , y , 12 ) ;
33103: LD_VAR 0 2
33107: PPUSH
33108: LD_VAR 0 4
33112: PPUSH
33113: LD_VAR 0 5
33117: PPUSH
33118: LD_INT 12
33120: PPUSH
33121: CALL 33138 0 4
// end ;
33125: LD_VAR 0 6
33129: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33130: LD_INT 0
33132: PPUSH
// end ;
33133: LD_VAR 0 4
33137: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33138: LD_INT 0
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33149: LD_VAR 0 1
33153: NOT
33154: PUSH
33155: LD_VAR 0 2
33159: PPUSH
33160: LD_VAR 0 3
33164: PPUSH
33165: CALL_OW 488
33169: NOT
33170: OR
33171: PUSH
33172: LD_VAR 0 4
33176: NOT
33177: OR
33178: IFFALSE 33182
// exit ;
33180: GO 33522
// list := [ ] ;
33182: LD_ADDR_VAR 0 13
33186: PUSH
33187: EMPTY
33188: ST_TO_ADDR
// if x - r < 0 then
33189: LD_VAR 0 2
33193: PUSH
33194: LD_VAR 0 4
33198: MINUS
33199: PUSH
33200: LD_INT 0
33202: LESS
33203: IFFALSE 33215
// min_x := 0 else
33205: LD_ADDR_VAR 0 7
33209: PUSH
33210: LD_INT 0
33212: ST_TO_ADDR
33213: GO 33231
// min_x := x - r ;
33215: LD_ADDR_VAR 0 7
33219: PUSH
33220: LD_VAR 0 2
33224: PUSH
33225: LD_VAR 0 4
33229: MINUS
33230: ST_TO_ADDR
// if y - r < 0 then
33231: LD_VAR 0 3
33235: PUSH
33236: LD_VAR 0 4
33240: MINUS
33241: PUSH
33242: LD_INT 0
33244: LESS
33245: IFFALSE 33257
// min_y := 0 else
33247: LD_ADDR_VAR 0 8
33251: PUSH
33252: LD_INT 0
33254: ST_TO_ADDR
33255: GO 33273
// min_y := y - r ;
33257: LD_ADDR_VAR 0 8
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 4
33271: MINUS
33272: ST_TO_ADDR
// max_x := x + r ;
33273: LD_ADDR_VAR 0 9
33277: PUSH
33278: LD_VAR 0 2
33282: PUSH
33283: LD_VAR 0 4
33287: PLUS
33288: ST_TO_ADDR
// max_y := y + r ;
33289: LD_ADDR_VAR 0 10
33293: PUSH
33294: LD_VAR 0 3
33298: PUSH
33299: LD_VAR 0 4
33303: PLUS
33304: ST_TO_ADDR
// for _x = min_x to max_x do
33305: LD_ADDR_VAR 0 11
33309: PUSH
33310: DOUBLE
33311: LD_VAR 0 7
33315: DEC
33316: ST_TO_ADDR
33317: LD_VAR 0 9
33321: PUSH
33322: FOR_TO
33323: IFFALSE 33440
// for _y = min_y to max_y do
33325: LD_ADDR_VAR 0 12
33329: PUSH
33330: DOUBLE
33331: LD_VAR 0 8
33335: DEC
33336: ST_TO_ADDR
33337: LD_VAR 0 10
33341: PUSH
33342: FOR_TO
33343: IFFALSE 33436
// begin if not ValidHex ( _x , _y ) then
33345: LD_VAR 0 11
33349: PPUSH
33350: LD_VAR 0 12
33354: PPUSH
33355: CALL_OW 488
33359: NOT
33360: IFFALSE 33364
// continue ;
33362: GO 33342
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33364: LD_VAR 0 11
33368: PPUSH
33369: LD_VAR 0 12
33373: PPUSH
33374: CALL_OW 351
33378: PUSH
33379: LD_VAR 0 11
33383: PPUSH
33384: LD_VAR 0 12
33388: PPUSH
33389: CALL_OW 554
33393: AND
33394: IFFALSE 33434
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33396: LD_ADDR_VAR 0 13
33400: PUSH
33401: LD_VAR 0 13
33405: PPUSH
33406: LD_VAR 0 13
33410: PUSH
33411: LD_INT 1
33413: PLUS
33414: PPUSH
33415: LD_VAR 0 11
33419: PUSH
33420: LD_VAR 0 12
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PPUSH
33429: CALL_OW 2
33433: ST_TO_ADDR
// end ;
33434: GO 33342
33436: POP
33437: POP
33438: GO 33322
33440: POP
33441: POP
// if not list then
33442: LD_VAR 0 13
33446: NOT
33447: IFFALSE 33451
// exit ;
33449: GO 33522
// for i in list do
33451: LD_ADDR_VAR 0 6
33455: PUSH
33456: LD_VAR 0 13
33460: PUSH
33461: FOR_IN
33462: IFFALSE 33520
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33464: LD_VAR 0 1
33468: PPUSH
33469: LD_STRING M
33471: PUSH
33472: LD_VAR 0 6
33476: PUSH
33477: LD_INT 1
33479: ARRAY
33480: PUSH
33481: LD_VAR 0 6
33485: PUSH
33486: LD_INT 2
33488: ARRAY
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: PPUSH
33514: CALL_OW 447
33518: GO 33461
33520: POP
33521: POP
// end ;
33522: LD_VAR 0 5
33526: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33527: LD_EXP 124
33531: NOT
33532: IFFALSE 33582
33534: GO 33536
33536: DISABLE
// begin initHack := true ;
33537: LD_ADDR_EXP 124
33541: PUSH
33542: LD_INT 1
33544: ST_TO_ADDR
// hackTanks := [ ] ;
33545: LD_ADDR_EXP 125
33549: PUSH
33550: EMPTY
33551: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33552: LD_ADDR_EXP 126
33556: PUSH
33557: EMPTY
33558: ST_TO_ADDR
// hackLimit := 3 ;
33559: LD_ADDR_EXP 127
33563: PUSH
33564: LD_INT 3
33566: ST_TO_ADDR
// hackDist := 12 ;
33567: LD_ADDR_EXP 128
33571: PUSH
33572: LD_INT 12
33574: ST_TO_ADDR
// hackCounter := [ ] ;
33575: LD_ADDR_EXP 129
33579: PUSH
33580: EMPTY
33581: ST_TO_ADDR
// end ;
33582: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33583: LD_EXP 124
33587: PUSH
33588: LD_INT 34
33590: PUSH
33591: LD_EXP 50
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PPUSH
33600: CALL_OW 69
33604: AND
33605: IFFALSE 33860
33607: GO 33609
33609: DISABLE
33610: LD_INT 0
33612: PPUSH
33613: PPUSH
// begin enable ;
33614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33615: LD_ADDR_VAR 0 1
33619: PUSH
33620: LD_INT 34
33622: PUSH
33623: LD_EXP 50
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PPUSH
33632: CALL_OW 69
33636: PUSH
33637: FOR_IN
33638: IFFALSE 33858
// begin if not i in hackTanks then
33640: LD_VAR 0 1
33644: PUSH
33645: LD_EXP 125
33649: IN
33650: NOT
33651: IFFALSE 33734
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33653: LD_ADDR_EXP 125
33657: PUSH
33658: LD_EXP 125
33662: PPUSH
33663: LD_EXP 125
33667: PUSH
33668: LD_INT 1
33670: PLUS
33671: PPUSH
33672: LD_VAR 0 1
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33682: LD_ADDR_EXP 126
33686: PUSH
33687: LD_EXP 126
33691: PPUSH
33692: LD_EXP 126
33696: PUSH
33697: LD_INT 1
33699: PLUS
33700: PPUSH
33701: EMPTY
33702: PPUSH
33703: CALL_OW 1
33707: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33708: LD_ADDR_EXP 129
33712: PUSH
33713: LD_EXP 129
33717: PPUSH
33718: LD_EXP 129
33722: PUSH
33723: LD_INT 1
33725: PLUS
33726: PPUSH
33727: EMPTY
33728: PPUSH
33729: CALL_OW 1
33733: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 302
33743: NOT
33744: IFFALSE 33757
// begin HackUnlinkAll ( i ) ;
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL 33863 0 1
// continue ;
33755: GO 33637
// end ; HackCheckCapturedStatus ( i ) ;
33757: LD_VAR 0 1
33761: PPUSH
33762: CALL 34306 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33766: LD_ADDR_VAR 0 2
33770: PUSH
33771: LD_INT 81
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 255
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 33
33790: PUSH
33791: LD_INT 3
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 91
33800: PUSH
33801: LD_VAR 0 1
33805: PUSH
33806: LD_EXP 128
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 50
33818: PUSH
33819: EMPTY
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: PPUSH
33828: CALL_OW 69
33832: ST_TO_ADDR
// if not tmp then
33833: LD_VAR 0 2
33837: NOT
33838: IFFALSE 33842
// continue ;
33840: GO 33637
// HackLink ( i , tmp ) ;
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL 33999 0 2
// end ;
33856: GO 33637
33858: POP
33859: POP
// end ;
33860: PPOPN 2
33862: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
// if not hack in hackTanks then
33868: LD_VAR 0 1
33872: PUSH
33873: LD_EXP 125
33877: IN
33878: NOT
33879: IFFALSE 33883
// exit ;
33881: GO 33994
// index := GetElementIndex ( hackTanks , hack ) ;
33883: LD_ADDR_VAR 0 4
33887: PUSH
33888: LD_EXP 125
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL 41468 0 2
33902: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33903: LD_EXP 126
33907: PUSH
33908: LD_VAR 0 4
33912: ARRAY
33913: IFFALSE 33994
// begin for i in hackTanksCaptured [ index ] do
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_EXP 126
33924: PUSH
33925: LD_VAR 0 4
33929: ARRAY
33930: PUSH
33931: FOR_IN
33932: IFFALSE 33958
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33934: LD_VAR 0 3
33938: PUSH
33939: LD_INT 1
33941: ARRAY
33942: PPUSH
33943: LD_VAR 0 3
33947: PUSH
33948: LD_INT 2
33950: ARRAY
33951: PPUSH
33952: CALL_OW 235
33956: GO 33931
33958: POP
33959: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33960: LD_ADDR_EXP 126
33964: PUSH
33965: LD_EXP 126
33969: PPUSH
33970: LD_VAR 0 4
33974: PPUSH
33975: EMPTY
33976: PPUSH
33977: CALL_OW 1
33981: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33982: LD_VAR 0 1
33986: PPUSH
33987: LD_INT 0
33989: PPUSH
33990: CALL_OW 505
// end ; end ;
33994: LD_VAR 0 2
33998: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33999: LD_INT 0
34001: PPUSH
34002: PPUSH
34003: PPUSH
// if not hack in hackTanks or not vehicles then
34004: LD_VAR 0 1
34008: PUSH
34009: LD_EXP 125
34013: IN
34014: NOT
34015: PUSH
34016: LD_VAR 0 2
34020: NOT
34021: OR
34022: IFFALSE 34026
// exit ;
34024: GO 34301
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34026: LD_ADDR_VAR 0 2
34030: PUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_VAR 0 2
34040: PPUSH
34041: LD_INT 1
34043: PPUSH
34044: LD_INT 1
34046: PPUSH
34047: CALL 42118 0 4
34051: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34052: LD_ADDR_VAR 0 5
34056: PUSH
34057: LD_EXP 125
34061: PPUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL 41468 0 2
34071: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34072: LD_EXP 126
34076: PUSH
34077: LD_VAR 0 5
34081: ARRAY
34082: PUSH
34083: LD_EXP 127
34087: LESS
34088: IFFALSE 34277
// begin for i := 1 to vehicles do
34090: LD_ADDR_VAR 0 4
34094: PUSH
34095: DOUBLE
34096: LD_INT 1
34098: DEC
34099: ST_TO_ADDR
34100: LD_VAR 0 2
34104: PUSH
34105: FOR_TO
34106: IFFALSE 34275
// begin if hackTanksCaptured [ index ] = hackLimit then
34108: LD_EXP 126
34112: PUSH
34113: LD_VAR 0 5
34117: ARRAY
34118: PUSH
34119: LD_EXP 127
34123: EQUAL
34124: IFFALSE 34128
// break ;
34126: GO 34275
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34128: LD_ADDR_EXP 129
34132: PUSH
34133: LD_EXP 129
34137: PPUSH
34138: LD_VAR 0 5
34142: PPUSH
34143: LD_EXP 129
34147: PUSH
34148: LD_VAR 0 5
34152: ARRAY
34153: PUSH
34154: LD_INT 1
34156: PLUS
34157: PPUSH
34158: CALL_OW 1
34162: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34163: LD_ADDR_EXP 126
34167: PUSH
34168: LD_EXP 126
34172: PPUSH
34173: LD_VAR 0 5
34177: PUSH
34178: LD_EXP 126
34182: PUSH
34183: LD_VAR 0 5
34187: ARRAY
34188: PUSH
34189: LD_INT 1
34191: PLUS
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PPUSH
34197: LD_VAR 0 2
34201: PUSH
34202: LD_VAR 0 4
34206: ARRAY
34207: PUSH
34208: LD_VAR 0 2
34212: PUSH
34213: LD_VAR 0 4
34217: ARRAY
34218: PPUSH
34219: CALL_OW 255
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PPUSH
34228: CALL 41683 0 3
34232: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34233: LD_VAR 0 2
34237: PUSH
34238: LD_VAR 0 4
34242: ARRAY
34243: PPUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 255
34253: PPUSH
34254: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34258: LD_VAR 0 2
34262: PUSH
34263: LD_VAR 0 4
34267: ARRAY
34268: PPUSH
34269: CALL_OW 141
// end ;
34273: GO 34105
34275: POP
34276: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34277: LD_VAR 0 1
34281: PPUSH
34282: LD_EXP 126
34286: PUSH
34287: LD_VAR 0 5
34291: ARRAY
34292: PUSH
34293: LD_INT 0
34295: PLUS
34296: PPUSH
34297: CALL_OW 505
// end ;
34301: LD_VAR 0 3
34305: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34306: LD_INT 0
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
// if not hack in hackTanks then
34312: LD_VAR 0 1
34316: PUSH
34317: LD_EXP 125
34321: IN
34322: NOT
34323: IFFALSE 34327
// exit ;
34325: GO 34567
// index := GetElementIndex ( hackTanks , hack ) ;
34327: LD_ADDR_VAR 0 4
34331: PUSH
34332: LD_EXP 125
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL 41468 0 2
34346: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: DOUBLE
34353: LD_EXP 126
34357: PUSH
34358: LD_VAR 0 4
34362: ARRAY
34363: INC
34364: ST_TO_ADDR
34365: LD_INT 1
34367: PUSH
34368: FOR_DOWNTO
34369: IFFALSE 34541
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34371: LD_ADDR_VAR 0 5
34375: PUSH
34376: LD_EXP 126
34380: PUSH
34381: LD_VAR 0 4
34385: ARRAY
34386: PUSH
34387: LD_VAR 0 3
34391: ARRAY
34392: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34393: LD_VAR 0 5
34397: PUSH
34398: LD_INT 1
34400: ARRAY
34401: PPUSH
34402: CALL_OW 302
34406: NOT
34407: PUSH
34408: LD_VAR 0 5
34412: PUSH
34413: LD_INT 1
34415: ARRAY
34416: PPUSH
34417: CALL_OW 255
34421: PUSH
34422: LD_VAR 0 1
34426: PPUSH
34427: CALL_OW 255
34431: NONEQUAL
34432: OR
34433: IFFALSE 34539
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34435: LD_VAR 0 5
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: PPUSH
34444: CALL_OW 305
34448: PUSH
34449: LD_VAR 0 5
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: CALL_OW 255
34462: PUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL_OW 255
34472: EQUAL
34473: AND
34474: IFFALSE 34498
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34476: LD_VAR 0 5
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PPUSH
34485: LD_VAR 0 5
34489: PUSH
34490: LD_INT 2
34492: ARRAY
34493: PPUSH
34494: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34498: LD_ADDR_EXP 126
34502: PUSH
34503: LD_EXP 126
34507: PPUSH
34508: LD_VAR 0 4
34512: PPUSH
34513: LD_EXP 126
34517: PUSH
34518: LD_VAR 0 4
34522: ARRAY
34523: PPUSH
34524: LD_VAR 0 3
34528: PPUSH
34529: CALL_OW 3
34533: PPUSH
34534: CALL_OW 1
34538: ST_TO_ADDR
// end ; end ;
34539: GO 34368
34541: POP
34542: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34543: LD_VAR 0 1
34547: PPUSH
34548: LD_EXP 126
34552: PUSH
34553: LD_VAR 0 4
34557: ARRAY
34558: PUSH
34559: LD_INT 0
34561: PLUS
34562: PPUSH
34563: CALL_OW 505
// end ;
34567: LD_VAR 0 2
34571: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34572: LD_INT 0
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
// if not hack in hackTanks then
34578: LD_VAR 0 1
34582: PUSH
34583: LD_EXP 125
34587: IN
34588: NOT
34589: IFFALSE 34593
// exit ;
34591: GO 34678
// index := GetElementIndex ( hackTanks , hack ) ;
34593: LD_ADDR_VAR 0 5
34597: PUSH
34598: LD_EXP 125
34602: PPUSH
34603: LD_VAR 0 1
34607: PPUSH
34608: CALL 41468 0 2
34612: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34613: LD_ADDR_VAR 0 4
34617: PUSH
34618: DOUBLE
34619: LD_INT 1
34621: DEC
34622: ST_TO_ADDR
34623: LD_EXP 126
34627: PUSH
34628: LD_VAR 0 5
34632: ARRAY
34633: PUSH
34634: FOR_TO
34635: IFFALSE 34676
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34637: LD_EXP 126
34641: PUSH
34642: LD_VAR 0 5
34646: ARRAY
34647: PUSH
34648: LD_VAR 0 4
34652: ARRAY
34653: PUSH
34654: LD_INT 1
34656: ARRAY
34657: PUSH
34658: LD_VAR 0 2
34662: EQUAL
34663: IFFALSE 34674
// KillUnit ( vehicle ) ;
34665: LD_VAR 0 2
34669: PPUSH
34670: CALL_OW 66
34674: GO 34634
34676: POP
34677: POP
// end ;
34678: LD_VAR 0 3
34682: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34683: LD_EXP 130
34687: NOT
34688: IFFALSE 34723
34690: GO 34692
34692: DISABLE
// begin initMiner := true ;
34693: LD_ADDR_EXP 130
34697: PUSH
34698: LD_INT 1
34700: ST_TO_ADDR
// minersList := [ ] ;
34701: LD_ADDR_EXP 131
34705: PUSH
34706: EMPTY
34707: ST_TO_ADDR
// minerMinesList := [ ] ;
34708: LD_ADDR_EXP 132
34712: PUSH
34713: EMPTY
34714: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34715: LD_ADDR_EXP 133
34719: PUSH
34720: LD_INT 5
34722: ST_TO_ADDR
// end ;
34723: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34724: LD_EXP 130
34728: PUSH
34729: LD_INT 34
34731: PUSH
34732: LD_EXP 55
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PPUSH
34741: CALL_OW 69
34745: AND
34746: IFFALSE 35209
34748: GO 34750
34750: DISABLE
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
// begin enable ;
34757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34758: LD_ADDR_VAR 0 1
34762: PUSH
34763: LD_INT 34
34765: PUSH
34766: LD_EXP 55
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: PUSH
34780: FOR_IN
34781: IFFALSE 34853
// begin if not i in minersList then
34783: LD_VAR 0 1
34787: PUSH
34788: LD_EXP 131
34792: IN
34793: NOT
34794: IFFALSE 34851
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34796: LD_ADDR_EXP 131
34800: PUSH
34801: LD_EXP 131
34805: PPUSH
34806: LD_EXP 131
34810: PUSH
34811: LD_INT 1
34813: PLUS
34814: PPUSH
34815: LD_VAR 0 1
34819: PPUSH
34820: CALL_OW 1
34824: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34825: LD_ADDR_EXP 132
34829: PUSH
34830: LD_EXP 132
34834: PPUSH
34835: LD_EXP 132
34839: PUSH
34840: LD_INT 1
34842: PLUS
34843: PPUSH
34844: EMPTY
34845: PPUSH
34846: CALL_OW 1
34850: ST_TO_ADDR
// end end ;
34851: GO 34780
34853: POP
34854: POP
// for i := minerMinesList downto 1 do
34855: LD_ADDR_VAR 0 1
34859: PUSH
34860: DOUBLE
34861: LD_EXP 132
34865: INC
34866: ST_TO_ADDR
34867: LD_INT 1
34869: PUSH
34870: FOR_DOWNTO
34871: IFFALSE 35207
// begin if IsLive ( minersList [ i ] ) then
34873: LD_EXP 131
34877: PUSH
34878: LD_VAR 0 1
34882: ARRAY
34883: PPUSH
34884: CALL_OW 300
34888: IFFALSE 34916
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34890: LD_EXP 131
34894: PUSH
34895: LD_VAR 0 1
34899: ARRAY
34900: PPUSH
34901: LD_EXP 132
34905: PUSH
34906: LD_VAR 0 1
34910: ARRAY
34911: PPUSH
34912: CALL_OW 505
// if not minerMinesList [ i ] then
34916: LD_EXP 132
34920: PUSH
34921: LD_VAR 0 1
34925: ARRAY
34926: NOT
34927: IFFALSE 34931
// continue ;
34929: GO 34870
// for j := minerMinesList [ i ] downto 1 do
34931: LD_ADDR_VAR 0 2
34935: PUSH
34936: DOUBLE
34937: LD_EXP 132
34941: PUSH
34942: LD_VAR 0 1
34946: ARRAY
34947: INC
34948: ST_TO_ADDR
34949: LD_INT 1
34951: PUSH
34952: FOR_DOWNTO
34953: IFFALSE 35203
// begin side := GetSide ( minersList [ i ] ) ;
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_EXP 131
34964: PUSH
34965: LD_VAR 0 1
34969: ARRAY
34970: PPUSH
34971: CALL_OW 255
34975: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34976: LD_ADDR_VAR 0 4
34980: PUSH
34981: LD_EXP 132
34985: PUSH
34986: LD_VAR 0 1
34990: ARRAY
34991: PUSH
34992: LD_VAR 0 2
34996: ARRAY
34997: PUSH
34998: LD_INT 1
35000: ARRAY
35001: PPUSH
35002: LD_EXP 132
35006: PUSH
35007: LD_VAR 0 1
35011: ARRAY
35012: PUSH
35013: LD_VAR 0 2
35017: ARRAY
35018: PUSH
35019: LD_INT 2
35021: ARRAY
35022: PPUSH
35023: CALL_OW 428
35027: ST_TO_ADDR
// if not tmp then
35028: LD_VAR 0 4
35032: NOT
35033: IFFALSE 35037
// continue ;
35035: GO 34952
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35037: LD_VAR 0 4
35041: PUSH
35042: LD_INT 81
35044: PUSH
35045: LD_VAR 0 3
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PPUSH
35054: CALL_OW 69
35058: IN
35059: PUSH
35060: LD_EXP 132
35064: PUSH
35065: LD_VAR 0 1
35069: ARRAY
35070: PUSH
35071: LD_VAR 0 2
35075: ARRAY
35076: PUSH
35077: LD_INT 1
35079: ARRAY
35080: PPUSH
35081: LD_EXP 132
35085: PUSH
35086: LD_VAR 0 1
35090: ARRAY
35091: PUSH
35092: LD_VAR 0 2
35096: ARRAY
35097: PUSH
35098: LD_INT 2
35100: ARRAY
35101: PPUSH
35102: CALL_OW 458
35106: AND
35107: IFFALSE 35201
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35109: LD_EXP 132
35113: PUSH
35114: LD_VAR 0 1
35118: ARRAY
35119: PUSH
35120: LD_VAR 0 2
35124: ARRAY
35125: PUSH
35126: LD_INT 1
35128: ARRAY
35129: PPUSH
35130: LD_EXP 132
35134: PUSH
35135: LD_VAR 0 1
35139: ARRAY
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 2
35149: ARRAY
35150: PPUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35160: LD_ADDR_EXP 132
35164: PUSH
35165: LD_EXP 132
35169: PPUSH
35170: LD_VAR 0 1
35174: PPUSH
35175: LD_EXP 132
35179: PUSH
35180: LD_VAR 0 1
35184: ARRAY
35185: PPUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL_OW 3
35195: PPUSH
35196: CALL_OW 1
35200: ST_TO_ADDR
// end ; end ;
35201: GO 34952
35203: POP
35204: POP
// end ;
35205: GO 34870
35207: POP
35208: POP
// end ;
35209: PPOPN 4
35211: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
// result := false ;
35216: LD_ADDR_VAR 0 4
35220: PUSH
35221: LD_INT 0
35223: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 264
35233: PUSH
35234: LD_EXP 55
35238: EQUAL
35239: NOT
35240: IFFALSE 35244
// exit ;
35242: GO 35484
// index := GetElementIndex ( minersList , unit ) ;
35244: LD_ADDR_VAR 0 5
35248: PUSH
35249: LD_EXP 131
35253: PPUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL 41468 0 2
35263: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35264: LD_EXP 132
35268: PUSH
35269: LD_VAR 0 5
35273: ARRAY
35274: PUSH
35275: LD_EXP 133
35279: GREATEREQUAL
35280: IFFALSE 35284
// exit ;
35282: GO 35484
// ComMoveXY ( unit , x , y ) ;
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_VAR 0 2
35293: PPUSH
35294: LD_VAR 0 3
35298: PPUSH
35299: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35303: LD_INT 35
35305: PPUSH
35306: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35310: LD_VAR 0 1
35314: PPUSH
35315: LD_VAR 0 2
35319: PPUSH
35320: LD_VAR 0 3
35324: PPUSH
35325: CALL 72240 0 3
35329: NOT
35330: PUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 314
35340: AND
35341: IFFALSE 35345
// exit ;
35343: GO 35484
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35345: LD_VAR 0 2
35349: PPUSH
35350: LD_VAR 0 3
35354: PPUSH
35355: CALL_OW 428
35359: PUSH
35360: LD_VAR 0 1
35364: EQUAL
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 314
35375: NOT
35376: AND
35377: IFFALSE 35303
// PlaySoundXY ( x , y , PlantMine ) ;
35379: LD_VAR 0 2
35383: PPUSH
35384: LD_VAR 0 3
35388: PPUSH
35389: LD_STRING PlantMine
35391: PPUSH
35392: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35396: LD_VAR 0 2
35400: PPUSH
35401: LD_VAR 0 3
35405: PPUSH
35406: LD_VAR 0 1
35410: PPUSH
35411: CALL_OW 255
35415: PPUSH
35416: LD_INT 0
35418: PPUSH
35419: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35423: LD_ADDR_EXP 132
35427: PUSH
35428: LD_EXP 132
35432: PPUSH
35433: LD_VAR 0 5
35437: PUSH
35438: LD_EXP 132
35442: PUSH
35443: LD_VAR 0 5
35447: ARRAY
35448: PUSH
35449: LD_INT 1
35451: PLUS
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PPUSH
35457: LD_VAR 0 2
35461: PUSH
35462: LD_VAR 0 3
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: CALL 41683 0 3
35475: ST_TO_ADDR
// result := true ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_INT 1
35483: ST_TO_ADDR
// end ;
35484: LD_VAR 0 4
35488: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35489: LD_INT 0
35491: PPUSH
35492: PPUSH
35493: PPUSH
// if not unit in minersList then
35494: LD_VAR 0 1
35498: PUSH
35499: LD_EXP 131
35503: IN
35504: NOT
35505: IFFALSE 35509
// exit ;
35507: GO 35901
// index := GetElementIndex ( minersList , unit ) ;
35509: LD_ADDR_VAR 0 6
35513: PUSH
35514: LD_EXP 131
35518: PPUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: CALL 41468 0 2
35528: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35529: LD_ADDR_VAR 0 5
35533: PUSH
35534: DOUBLE
35535: LD_EXP 132
35539: PUSH
35540: LD_VAR 0 6
35544: ARRAY
35545: INC
35546: ST_TO_ADDR
35547: LD_INT 1
35549: PUSH
35550: FOR_DOWNTO
35551: IFFALSE 35712
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35553: LD_EXP 132
35557: PUSH
35558: LD_VAR 0 6
35562: ARRAY
35563: PUSH
35564: LD_VAR 0 5
35568: ARRAY
35569: PUSH
35570: LD_INT 1
35572: ARRAY
35573: PUSH
35574: LD_VAR 0 2
35578: EQUAL
35579: PUSH
35580: LD_EXP 132
35584: PUSH
35585: LD_VAR 0 6
35589: ARRAY
35590: PUSH
35591: LD_VAR 0 5
35595: ARRAY
35596: PUSH
35597: LD_INT 2
35599: ARRAY
35600: PUSH
35601: LD_VAR 0 3
35605: EQUAL
35606: AND
35607: IFFALSE 35710
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35609: LD_EXP 132
35613: PUSH
35614: LD_VAR 0 6
35618: ARRAY
35619: PUSH
35620: LD_VAR 0 5
35624: ARRAY
35625: PUSH
35626: LD_INT 1
35628: ARRAY
35629: PPUSH
35630: LD_EXP 132
35634: PUSH
35635: LD_VAR 0 6
35639: ARRAY
35640: PUSH
35641: LD_VAR 0 5
35645: ARRAY
35646: PUSH
35647: LD_INT 2
35649: ARRAY
35650: PPUSH
35651: LD_VAR 0 1
35655: PPUSH
35656: CALL_OW 255
35660: PPUSH
35661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35665: LD_ADDR_EXP 132
35669: PUSH
35670: LD_EXP 132
35674: PPUSH
35675: LD_VAR 0 6
35679: PPUSH
35680: LD_EXP 132
35684: PUSH
35685: LD_VAR 0 6
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 5
35695: PPUSH
35696: CALL_OW 3
35700: PPUSH
35701: CALL_OW 1
35705: ST_TO_ADDR
// exit ;
35706: POP
35707: POP
35708: GO 35901
// end ; end ;
35710: GO 35550
35712: POP
35713: POP
// for i := minerMinesList [ index ] downto 1 do
35714: LD_ADDR_VAR 0 5
35718: PUSH
35719: DOUBLE
35720: LD_EXP 132
35724: PUSH
35725: LD_VAR 0 6
35729: ARRAY
35730: INC
35731: ST_TO_ADDR
35732: LD_INT 1
35734: PUSH
35735: FOR_DOWNTO
35736: IFFALSE 35899
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35738: LD_EXP 132
35742: PUSH
35743: LD_VAR 0 6
35747: ARRAY
35748: PUSH
35749: LD_VAR 0 5
35753: ARRAY
35754: PUSH
35755: LD_INT 1
35757: ARRAY
35758: PPUSH
35759: LD_EXP 132
35763: PUSH
35764: LD_VAR 0 6
35768: ARRAY
35769: PUSH
35770: LD_VAR 0 5
35774: ARRAY
35775: PUSH
35776: LD_INT 2
35778: ARRAY
35779: PPUSH
35780: LD_VAR 0 2
35784: PPUSH
35785: LD_VAR 0 3
35789: PPUSH
35790: CALL_OW 298
35794: PUSH
35795: LD_INT 6
35797: LESS
35798: IFFALSE 35897
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35800: LD_EXP 132
35804: PUSH
35805: LD_VAR 0 6
35809: ARRAY
35810: PUSH
35811: LD_VAR 0 5
35815: ARRAY
35816: PUSH
35817: LD_INT 1
35819: ARRAY
35820: PPUSH
35821: LD_EXP 132
35825: PUSH
35826: LD_VAR 0 6
35830: ARRAY
35831: PUSH
35832: LD_VAR 0 5
35836: ARRAY
35837: PUSH
35838: LD_INT 2
35840: ARRAY
35841: PPUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 255
35851: PPUSH
35852: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35856: LD_ADDR_EXP 132
35860: PUSH
35861: LD_EXP 132
35865: PPUSH
35866: LD_VAR 0 6
35870: PPUSH
35871: LD_EXP 132
35875: PUSH
35876: LD_VAR 0 6
35880: ARRAY
35881: PPUSH
35882: LD_VAR 0 5
35886: PPUSH
35887: CALL_OW 3
35891: PPUSH
35892: CALL_OW 1
35896: ST_TO_ADDR
// end ; end ;
35897: GO 35735
35899: POP
35900: POP
// end ;
35901: LD_VAR 0 4
35905: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35906: LD_INT 0
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 264
35926: PUSH
35927: LD_EXP 55
35931: EQUAL
35932: NOT
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_EXP 131
35943: IN
35944: NOT
35945: OR
35946: IFFALSE 35950
// exit ;
35948: GO 36272
// index := GetElementIndex ( minersList , unit ) ;
35950: LD_ADDR_VAR 0 6
35954: PUSH
35955: LD_EXP 131
35959: PPUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL 41468 0 2
35969: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35970: LD_ADDR_VAR 0 8
35974: PUSH
35975: LD_EXP 133
35979: PUSH
35980: LD_EXP 132
35984: PUSH
35985: LD_VAR 0 6
35989: ARRAY
35990: MINUS
35991: ST_TO_ADDR
// if not minesFreeAmount then
35992: LD_VAR 0 8
35996: NOT
35997: IFFALSE 36001
// exit ;
35999: GO 36272
// tmp := [ ] ;
36001: LD_ADDR_VAR 0 7
36005: PUSH
36006: EMPTY
36007: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36008: LD_ADDR_VAR 0 5
36012: PUSH
36013: DOUBLE
36014: LD_INT 1
36016: DEC
36017: ST_TO_ADDR
36018: LD_VAR 0 8
36022: PUSH
36023: FOR_TO
36024: IFFALSE 36219
// begin _d := rand ( 0 , 5 ) ;
36026: LD_ADDR_VAR 0 11
36030: PUSH
36031: LD_INT 0
36033: PPUSH
36034: LD_INT 5
36036: PPUSH
36037: CALL_OW 12
36041: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36042: LD_ADDR_VAR 0 12
36046: PUSH
36047: LD_INT 2
36049: PPUSH
36050: LD_INT 6
36052: PPUSH
36053: CALL_OW 12
36057: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36058: LD_ADDR_VAR 0 9
36062: PUSH
36063: LD_VAR 0 2
36067: PPUSH
36068: LD_VAR 0 11
36072: PPUSH
36073: LD_VAR 0 12
36077: PPUSH
36078: CALL_OW 272
36082: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36083: LD_ADDR_VAR 0 10
36087: PUSH
36088: LD_VAR 0 3
36092: PPUSH
36093: LD_VAR 0 11
36097: PPUSH
36098: LD_VAR 0 12
36102: PPUSH
36103: CALL_OW 273
36107: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36108: LD_VAR 0 9
36112: PPUSH
36113: LD_VAR 0 10
36117: PPUSH
36118: CALL_OW 488
36122: PUSH
36123: LD_VAR 0 9
36127: PUSH
36128: LD_VAR 0 10
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_VAR 0 7
36141: IN
36142: NOT
36143: AND
36144: PUSH
36145: LD_VAR 0 9
36149: PPUSH
36150: LD_VAR 0 10
36154: PPUSH
36155: CALL_OW 458
36159: NOT
36160: AND
36161: IFFALSE 36203
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 7
36172: PPUSH
36173: LD_VAR 0 7
36177: PUSH
36178: LD_INT 1
36180: PLUS
36181: PPUSH
36182: LD_VAR 0 9
36186: PUSH
36187: LD_VAR 0 10
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PPUSH
36196: CALL_OW 1
36200: ST_TO_ADDR
36201: GO 36217
// i := i - 1 ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_VAR 0 5
36212: PUSH
36213: LD_INT 1
36215: MINUS
36216: ST_TO_ADDR
// end ;
36217: GO 36023
36219: POP
36220: POP
// for i in tmp do
36221: LD_ADDR_VAR 0 5
36225: PUSH
36226: LD_VAR 0 7
36230: PUSH
36231: FOR_IN
36232: IFFALSE 36270
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36234: LD_VAR 0 1
36238: PPUSH
36239: LD_VAR 0 5
36243: PUSH
36244: LD_INT 1
36246: ARRAY
36247: PPUSH
36248: LD_VAR 0 5
36252: PUSH
36253: LD_INT 2
36255: ARRAY
36256: PPUSH
36257: CALL 35212 0 3
36261: NOT
36262: IFFALSE 36268
// exit ;
36264: POP
36265: POP
36266: GO 36272
36268: GO 36231
36270: POP
36271: POP
// end ;
36272: LD_VAR 0 4
36276: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36277: LD_INT 0
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
// if not GetClass ( unit ) = class_sniper then
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 257
36295: PUSH
36296: LD_INT 5
36298: EQUAL
36299: NOT
36300: IFFALSE 36304
// exit ;
36302: GO 36692
// dist := 8 ;
36304: LD_ADDR_VAR 0 5
36308: PUSH
36309: LD_INT 8
36311: ST_TO_ADDR
// viewRange := 12 ;
36312: LD_ADDR_VAR 0 7
36316: PUSH
36317: LD_INT 12
36319: ST_TO_ADDR
// side := GetSide ( unit ) ;
36320: LD_ADDR_VAR 0 6
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 255
36334: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36335: LD_INT 61
36337: PPUSH
36338: LD_VAR 0 6
36342: PPUSH
36343: CALL_OW 321
36347: PUSH
36348: LD_INT 2
36350: EQUAL
36351: IFFALSE 36361
// viewRange := 16 ;
36353: LD_ADDR_VAR 0 7
36357: PUSH
36358: LD_INT 16
36360: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36361: LD_VAR 0 1
36365: PPUSH
36366: LD_VAR 0 2
36370: PPUSH
36371: LD_VAR 0 3
36375: PPUSH
36376: CALL_OW 297
36380: PUSH
36381: LD_VAR 0 5
36385: GREATER
36386: IFFALSE 36465
// begin ComMoveXY ( unit , x , y ) ;
36388: LD_VAR 0 1
36392: PPUSH
36393: LD_VAR 0 2
36397: PPUSH
36398: LD_VAR 0 3
36402: PPUSH
36403: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36407: LD_INT 35
36409: PPUSH
36410: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36414: LD_VAR 0 1
36418: PPUSH
36419: LD_VAR 0 2
36423: PPUSH
36424: LD_VAR 0 3
36428: PPUSH
36429: CALL 72240 0 3
36433: NOT
36434: IFFALSE 36438
// exit ;
36436: GO 36692
// until GetDistUnitXY ( unit , x , y ) < dist ;
36438: LD_VAR 0 1
36442: PPUSH
36443: LD_VAR 0 2
36447: PPUSH
36448: LD_VAR 0 3
36452: PPUSH
36453: CALL_OW 297
36457: PUSH
36458: LD_VAR 0 5
36462: LESS
36463: IFFALSE 36407
// end ; ComTurnXY ( unit , x , y ) ;
36465: LD_VAR 0 1
36469: PPUSH
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_VAR 0 3
36479: PPUSH
36480: CALL_OW 118
// wait ( 5 ) ;
36484: LD_INT 5
36486: PPUSH
36487: CALL_OW 67
// _d := GetDir ( unit ) ;
36491: LD_ADDR_VAR 0 10
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 254
36505: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36506: LD_ADDR_VAR 0 8
36510: PUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 250
36520: PPUSH
36521: LD_VAR 0 10
36525: PPUSH
36526: LD_VAR 0 5
36530: PPUSH
36531: CALL_OW 272
36535: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36536: LD_ADDR_VAR 0 9
36540: PUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 251
36550: PPUSH
36551: LD_VAR 0 10
36555: PPUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: CALL_OW 273
36565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36566: LD_VAR 0 8
36570: PPUSH
36571: LD_VAR 0 9
36575: PPUSH
36576: CALL_OW 488
36580: NOT
36581: IFFALSE 36585
// exit ;
36583: GO 36692
// ComAnimCustom ( unit , 1 ) ;
36585: LD_VAR 0 1
36589: PPUSH
36590: LD_INT 1
36592: PPUSH
36593: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36597: LD_VAR 0 8
36601: PPUSH
36602: LD_VAR 0 9
36606: PPUSH
36607: LD_VAR 0 6
36611: PPUSH
36612: LD_VAR 0 7
36616: PPUSH
36617: CALL_OW 330
// repeat wait ( 1 ) ;
36621: LD_INT 1
36623: PPUSH
36624: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 316
36637: PUSH
36638: LD_VAR 0 1
36642: PPUSH
36643: CALL_OW 314
36647: OR
36648: PUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: CALL_OW 302
36658: NOT
36659: OR
36660: PUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL_OW 301
36670: OR
36671: IFFALSE 36621
// RemoveSeeing ( _x , _y , side ) ;
36673: LD_VAR 0 8
36677: PPUSH
36678: LD_VAR 0 9
36682: PPUSH
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL_OW 331
// end ; end_of_file
36692: LD_VAR 0 4
36696: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36697: LD_INT 0
36699: PPUSH
36700: PPUSH
// if exist_mode then
36701: LD_VAR 0 2
36705: IFFALSE 36730
// unit := CreateCharacter ( prefix & ident ) else
36707: LD_ADDR_VAR 0 5
36711: PUSH
36712: LD_VAR 0 3
36716: PUSH
36717: LD_VAR 0 1
36721: STR
36722: PPUSH
36723: CALL_OW 34
36727: ST_TO_ADDR
36728: GO 36745
// unit := NewCharacter ( ident ) ;
36730: LD_ADDR_VAR 0 5
36734: PUSH
36735: LD_VAR 0 1
36739: PPUSH
36740: CALL_OW 25
36744: ST_TO_ADDR
// result := unit ;
36745: LD_ADDR_VAR 0 4
36749: PUSH
36750: LD_VAR 0 5
36754: ST_TO_ADDR
// end ;
36755: LD_VAR 0 4
36759: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36760: LD_INT 0
36762: PPUSH
36763: PPUSH
// if not side or not nation then
36764: LD_VAR 0 1
36768: NOT
36769: PUSH
36770: LD_VAR 0 2
36774: NOT
36775: OR
36776: IFFALSE 36780
// exit ;
36778: GO 37548
// case nation of nation_american :
36780: LD_VAR 0 2
36784: PUSH
36785: LD_INT 1
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36793
36791: GO 37007
36793: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36794: LD_ADDR_VAR 0 4
36798: PUSH
36799: LD_INT 35
36801: PUSH
36802: LD_INT 45
36804: PUSH
36805: LD_INT 46
36807: PUSH
36808: LD_INT 47
36810: PUSH
36811: LD_INT 82
36813: PUSH
36814: LD_INT 83
36816: PUSH
36817: LD_INT 84
36819: PUSH
36820: LD_INT 85
36822: PUSH
36823: LD_INT 86
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 6
36834: PUSH
36835: LD_INT 15
36837: PUSH
36838: LD_INT 16
36840: PUSH
36841: LD_INT 7
36843: PUSH
36844: LD_INT 12
36846: PUSH
36847: LD_INT 13
36849: PUSH
36850: LD_INT 10
36852: PUSH
36853: LD_INT 14
36855: PUSH
36856: LD_INT 20
36858: PUSH
36859: LD_INT 21
36861: PUSH
36862: LD_INT 22
36864: PUSH
36865: LD_INT 25
36867: PUSH
36868: LD_INT 32
36870: PUSH
36871: LD_INT 27
36873: PUSH
36874: LD_INT 36
36876: PUSH
36877: LD_INT 69
36879: PUSH
36880: LD_INT 39
36882: PUSH
36883: LD_INT 34
36885: PUSH
36886: LD_INT 40
36888: PUSH
36889: LD_INT 48
36891: PUSH
36892: LD_INT 49
36894: PUSH
36895: LD_INT 50
36897: PUSH
36898: LD_INT 51
36900: PUSH
36901: LD_INT 52
36903: PUSH
36904: LD_INT 53
36906: PUSH
36907: LD_INT 54
36909: PUSH
36910: LD_INT 55
36912: PUSH
36913: LD_INT 56
36915: PUSH
36916: LD_INT 57
36918: PUSH
36919: LD_INT 58
36921: PUSH
36922: LD_INT 59
36924: PUSH
36925: LD_INT 60
36927: PUSH
36928: LD_INT 61
36930: PUSH
36931: LD_INT 62
36933: PUSH
36934: LD_INT 80
36936: PUSH
36937: LD_INT 82
36939: PUSH
36940: LD_INT 83
36942: PUSH
36943: LD_INT 84
36945: PUSH
36946: LD_INT 85
36948: PUSH
36949: LD_INT 86
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: ST_TO_ADDR
37005: GO 37472
37007: LD_INT 2
37009: DOUBLE
37010: EQUAL
37011: IFTRUE 37015
37013: GO 37241
37015: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37016: LD_ADDR_VAR 0 4
37020: PUSH
37021: LD_INT 35
37023: PUSH
37024: LD_INT 45
37026: PUSH
37027: LD_INT 46
37029: PUSH
37030: LD_INT 47
37032: PUSH
37033: LD_INT 82
37035: PUSH
37036: LD_INT 83
37038: PUSH
37039: LD_INT 84
37041: PUSH
37042: LD_INT 85
37044: PUSH
37045: LD_INT 87
37047: PUSH
37048: LD_INT 70
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 11
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 4
37062: PUSH
37063: LD_INT 5
37065: PUSH
37066: LD_INT 6
37068: PUSH
37069: LD_INT 15
37071: PUSH
37072: LD_INT 18
37074: PUSH
37075: LD_INT 7
37077: PUSH
37078: LD_INT 17
37080: PUSH
37081: LD_INT 8
37083: PUSH
37084: LD_INT 20
37086: PUSH
37087: LD_INT 21
37089: PUSH
37090: LD_INT 22
37092: PUSH
37093: LD_INT 72
37095: PUSH
37096: LD_INT 26
37098: PUSH
37099: LD_INT 69
37101: PUSH
37102: LD_INT 39
37104: PUSH
37105: LD_INT 40
37107: PUSH
37108: LD_INT 41
37110: PUSH
37111: LD_INT 42
37113: PUSH
37114: LD_INT 43
37116: PUSH
37117: LD_INT 48
37119: PUSH
37120: LD_INT 49
37122: PUSH
37123: LD_INT 50
37125: PUSH
37126: LD_INT 51
37128: PUSH
37129: LD_INT 52
37131: PUSH
37132: LD_INT 53
37134: PUSH
37135: LD_INT 54
37137: PUSH
37138: LD_INT 55
37140: PUSH
37141: LD_INT 56
37143: PUSH
37144: LD_INT 60
37146: PUSH
37147: LD_INT 61
37149: PUSH
37150: LD_INT 62
37152: PUSH
37153: LD_INT 66
37155: PUSH
37156: LD_INT 67
37158: PUSH
37159: LD_INT 68
37161: PUSH
37162: LD_INT 81
37164: PUSH
37165: LD_INT 82
37167: PUSH
37168: LD_INT 83
37170: PUSH
37171: LD_INT 84
37173: PUSH
37174: LD_INT 85
37176: PUSH
37177: LD_INT 87
37179: PUSH
37180: LD_INT 88
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
37239: GO 37472
37241: LD_INT 3
37243: DOUBLE
37244: EQUAL
37245: IFTRUE 37249
37247: GO 37471
37249: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37250: LD_ADDR_VAR 0 4
37254: PUSH
37255: LD_INT 46
37257: PUSH
37258: LD_INT 47
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 82
37269: PUSH
37270: LD_INT 83
37272: PUSH
37273: LD_INT 84
37275: PUSH
37276: LD_INT 85
37278: PUSH
37279: LD_INT 86
37281: PUSH
37282: LD_INT 11
37284: PUSH
37285: LD_INT 9
37287: PUSH
37288: LD_INT 20
37290: PUSH
37291: LD_INT 19
37293: PUSH
37294: LD_INT 21
37296: PUSH
37297: LD_INT 24
37299: PUSH
37300: LD_INT 22
37302: PUSH
37303: LD_INT 25
37305: PUSH
37306: LD_INT 28
37308: PUSH
37309: LD_INT 29
37311: PUSH
37312: LD_INT 30
37314: PUSH
37315: LD_INT 31
37317: PUSH
37318: LD_INT 37
37320: PUSH
37321: LD_INT 38
37323: PUSH
37324: LD_INT 32
37326: PUSH
37327: LD_INT 27
37329: PUSH
37330: LD_INT 33
37332: PUSH
37333: LD_INT 69
37335: PUSH
37336: LD_INT 39
37338: PUSH
37339: LD_INT 34
37341: PUSH
37342: LD_INT 40
37344: PUSH
37345: LD_INT 71
37347: PUSH
37348: LD_INT 23
37350: PUSH
37351: LD_INT 44
37353: PUSH
37354: LD_INT 48
37356: PUSH
37357: LD_INT 49
37359: PUSH
37360: LD_INT 50
37362: PUSH
37363: LD_INT 51
37365: PUSH
37366: LD_INT 52
37368: PUSH
37369: LD_INT 53
37371: PUSH
37372: LD_INT 54
37374: PUSH
37375: LD_INT 55
37377: PUSH
37378: LD_INT 56
37380: PUSH
37381: LD_INT 57
37383: PUSH
37384: LD_INT 58
37386: PUSH
37387: LD_INT 59
37389: PUSH
37390: LD_INT 63
37392: PUSH
37393: LD_INT 64
37395: PUSH
37396: LD_INT 65
37398: PUSH
37399: LD_INT 82
37401: PUSH
37402: LD_INT 83
37404: PUSH
37405: LD_INT 84
37407: PUSH
37408: LD_INT 85
37410: PUSH
37411: LD_INT 86
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
37469: GO 37472
37471: POP
// if state > - 1 and state < 3 then
37472: LD_VAR 0 3
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: GREATER
37481: PUSH
37482: LD_VAR 0 3
37486: PUSH
37487: LD_INT 3
37489: LESS
37490: AND
37491: IFFALSE 37548
// for i in result do
37493: LD_ADDR_VAR 0 5
37497: PUSH
37498: LD_VAR 0 4
37502: PUSH
37503: FOR_IN
37504: IFFALSE 37546
// if GetTech ( i , side ) <> state then
37506: LD_VAR 0 5
37510: PPUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 321
37520: PUSH
37521: LD_VAR 0 3
37525: NONEQUAL
37526: IFFALSE 37544
// result := result diff i ;
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_VAR 0 4
37537: PUSH
37538: LD_VAR 0 5
37542: DIFF
37543: ST_TO_ADDR
37544: GO 37503
37546: POP
37547: POP
// end ;
37548: LD_VAR 0 4
37552: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
// result := true ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_INT 1
37565: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37566: LD_ADDR_VAR 0 5
37570: PUSH
37571: LD_VAR 0 2
37575: PPUSH
37576: CALL_OW 480
37580: ST_TO_ADDR
// if not tmp then
37581: LD_VAR 0 5
37585: NOT
37586: IFFALSE 37590
// exit ;
37588: GO 37639
// for i in tmp do
37590: LD_ADDR_VAR 0 4
37594: PUSH
37595: LD_VAR 0 5
37599: PUSH
37600: FOR_IN
37601: IFFALSE 37637
// if GetTech ( i , side ) <> state_researched then
37603: LD_VAR 0 4
37607: PPUSH
37608: LD_VAR 0 1
37612: PPUSH
37613: CALL_OW 321
37617: PUSH
37618: LD_INT 2
37620: NONEQUAL
37621: IFFALSE 37635
// begin result := false ;
37623: LD_ADDR_VAR 0 3
37627: PUSH
37628: LD_INT 0
37630: ST_TO_ADDR
// exit ;
37631: POP
37632: POP
37633: GO 37639
// end ;
37635: GO 37600
37637: POP
37638: POP
// end ;
37639: LD_VAR 0 3
37643: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37644: LD_INT 0
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37659: LD_VAR 0 1
37663: NOT
37664: PUSH
37665: LD_VAR 0 1
37669: PPUSH
37670: CALL_OW 257
37674: PUSH
37675: LD_INT 9
37677: NONEQUAL
37678: OR
37679: IFFALSE 37683
// exit ;
37681: GO 38256
// side := GetSide ( unit ) ;
37683: LD_ADDR_VAR 0 9
37687: PUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 255
37697: ST_TO_ADDR
// tech_space := tech_spacanom ;
37698: LD_ADDR_VAR 0 12
37702: PUSH
37703: LD_INT 29
37705: ST_TO_ADDR
// tech_time := tech_taurad ;
37706: LD_ADDR_VAR 0 13
37710: PUSH
37711: LD_INT 28
37713: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37714: LD_ADDR_VAR 0 11
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 310
37728: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37729: LD_VAR 0 11
37733: PPUSH
37734: CALL_OW 247
37738: PUSH
37739: LD_INT 2
37741: EQUAL
37742: IFFALSE 37746
// exit ;
37744: GO 38256
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37746: LD_ADDR_VAR 0 8
37750: PUSH
37751: LD_INT 81
37753: PUSH
37754: LD_VAR 0 9
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 21
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PPUSH
37784: CALL_OW 69
37788: ST_TO_ADDR
// if not tmp then
37789: LD_VAR 0 8
37793: NOT
37794: IFFALSE 37798
// exit ;
37796: GO 38256
// if in_unit then
37798: LD_VAR 0 11
37802: IFFALSE 37826
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37804: LD_ADDR_VAR 0 10
37808: PUSH
37809: LD_VAR 0 8
37813: PPUSH
37814: LD_VAR 0 11
37818: PPUSH
37819: CALL_OW 74
37823: ST_TO_ADDR
37824: GO 37846
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37826: LD_ADDR_VAR 0 10
37830: PUSH
37831: LD_VAR 0 8
37835: PPUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 74
37845: ST_TO_ADDR
// if not enemy then
37846: LD_VAR 0 10
37850: NOT
37851: IFFALSE 37855
// exit ;
37853: GO 38256
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37855: LD_VAR 0 11
37859: PUSH
37860: LD_VAR 0 11
37864: PPUSH
37865: LD_VAR 0 10
37869: PPUSH
37870: CALL_OW 296
37874: PUSH
37875: LD_INT 13
37877: GREATER
37878: AND
37879: PUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: LD_VAR 0 10
37889: PPUSH
37890: CALL_OW 296
37894: PUSH
37895: LD_INT 12
37897: GREATER
37898: OR
37899: IFFALSE 37903
// exit ;
37901: GO 38256
// missile := [ 1 ] ;
37903: LD_ADDR_VAR 0 14
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37914: LD_VAR 0 9
37918: PPUSH
37919: LD_VAR 0 12
37923: PPUSH
37924: CALL_OW 325
37928: IFFALSE 37957
// missile := Insert ( missile , missile + 1 , 2 ) ;
37930: LD_ADDR_VAR 0 14
37934: PUSH
37935: LD_VAR 0 14
37939: PPUSH
37940: LD_VAR 0 14
37944: PUSH
37945: LD_INT 1
37947: PLUS
37948: PPUSH
37949: LD_INT 2
37951: PPUSH
37952: CALL_OW 2
37956: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37957: LD_VAR 0 9
37961: PPUSH
37962: LD_VAR 0 13
37966: PPUSH
37967: CALL_OW 325
37971: PUSH
37972: LD_VAR 0 10
37976: PPUSH
37977: CALL_OW 255
37981: PPUSH
37982: LD_VAR 0 13
37986: PPUSH
37987: CALL_OW 325
37991: NOT
37992: AND
37993: IFFALSE 38022
// missile := Insert ( missile , missile + 1 , 3 ) ;
37995: LD_ADDR_VAR 0 14
37999: PUSH
38000: LD_VAR 0 14
38004: PPUSH
38005: LD_VAR 0 14
38009: PUSH
38010: LD_INT 1
38012: PLUS
38013: PPUSH
38014: LD_INT 3
38016: PPUSH
38017: CALL_OW 2
38021: ST_TO_ADDR
// if missile < 2 then
38022: LD_VAR 0 14
38026: PUSH
38027: LD_INT 2
38029: LESS
38030: IFFALSE 38034
// exit ;
38032: GO 38256
// x := GetX ( enemy ) ;
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: LD_VAR 0 10
38043: PPUSH
38044: CALL_OW 250
38048: ST_TO_ADDR
// y := GetY ( enemy ) ;
38049: LD_ADDR_VAR 0 5
38053: PUSH
38054: LD_VAR 0 10
38058: PPUSH
38059: CALL_OW 251
38063: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38064: LD_ADDR_VAR 0 6
38068: PUSH
38069: LD_VAR 0 4
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PPUSH
38078: LD_INT 1
38080: PPUSH
38081: CALL_OW 12
38085: PLUS
38086: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38087: LD_ADDR_VAR 0 7
38091: PUSH
38092: LD_VAR 0 5
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PPUSH
38101: LD_INT 1
38103: PPUSH
38104: CALL_OW 12
38108: PLUS
38109: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38110: LD_VAR 0 6
38114: PPUSH
38115: LD_VAR 0 7
38119: PPUSH
38120: CALL_OW 488
38124: NOT
38125: IFFALSE 38147
// begin _x := x ;
38127: LD_ADDR_VAR 0 6
38131: PUSH
38132: LD_VAR 0 4
38136: ST_TO_ADDR
// _y := y ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 5
38146: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: LD_INT 1
38154: PPUSH
38155: LD_VAR 0 14
38159: PPUSH
38160: CALL_OW 12
38164: ST_TO_ADDR
// case i of 1 :
38165: LD_VAR 0 3
38169: PUSH
38170: LD_INT 1
38172: DOUBLE
38173: EQUAL
38174: IFTRUE 38178
38176: GO 38195
38178: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38179: LD_VAR 0 1
38183: PPUSH
38184: LD_VAR 0 10
38188: PPUSH
38189: CALL_OW 115
38193: GO 38256
38195: LD_INT 2
38197: DOUBLE
38198: EQUAL
38199: IFTRUE 38203
38201: GO 38225
38203: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38204: LD_VAR 0 1
38208: PPUSH
38209: LD_VAR 0 6
38213: PPUSH
38214: LD_VAR 0 7
38218: PPUSH
38219: CALL_OW 153
38223: GO 38256
38225: LD_INT 3
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38233
38231: GO 38255
38233: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38234: LD_VAR 0 1
38238: PPUSH
38239: LD_VAR 0 6
38243: PPUSH
38244: LD_VAR 0 7
38248: PPUSH
38249: CALL_OW 154
38253: GO 38256
38255: POP
// end ;
38256: LD_VAR 0 2
38260: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38261: LD_INT 0
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
// if not unit or not building then
38269: LD_VAR 0 1
38273: NOT
38274: PUSH
38275: LD_VAR 0 2
38279: NOT
38280: OR
38281: IFFALSE 38285
// exit ;
38283: GO 38443
// x := GetX ( building ) ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_VAR 0 2
38294: PPUSH
38295: CALL_OW 250
38299: ST_TO_ADDR
// y := GetY ( building ) ;
38300: LD_ADDR_VAR 0 6
38304: PUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: CALL_OW 251
38314: ST_TO_ADDR
// for i = 0 to 5 do
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: DOUBLE
38321: LD_INT 0
38323: DEC
38324: ST_TO_ADDR
38325: LD_INT 5
38327: PUSH
38328: FOR_TO
38329: IFFALSE 38441
// begin _x := ShiftX ( x , i , 3 ) ;
38331: LD_ADDR_VAR 0 7
38335: PUSH
38336: LD_VAR 0 5
38340: PPUSH
38341: LD_VAR 0 4
38345: PPUSH
38346: LD_INT 3
38348: PPUSH
38349: CALL_OW 272
38353: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38354: LD_ADDR_VAR 0 8
38358: PUSH
38359: LD_VAR 0 6
38363: PPUSH
38364: LD_VAR 0 4
38368: PPUSH
38369: LD_INT 3
38371: PPUSH
38372: CALL_OW 273
38376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38377: LD_VAR 0 7
38381: PPUSH
38382: LD_VAR 0 8
38386: PPUSH
38387: CALL_OW 488
38391: NOT
38392: IFFALSE 38396
// continue ;
38394: GO 38328
// if HexInfo ( _x , _y ) = 0 then
38396: LD_VAR 0 7
38400: PPUSH
38401: LD_VAR 0 8
38405: PPUSH
38406: CALL_OW 428
38410: PUSH
38411: LD_INT 0
38413: EQUAL
38414: IFFALSE 38439
// begin ComMoveXY ( unit , _x , _y ) ;
38416: LD_VAR 0 1
38420: PPUSH
38421: LD_VAR 0 7
38425: PPUSH
38426: LD_VAR 0 8
38430: PPUSH
38431: CALL_OW 111
// exit ;
38435: POP
38436: POP
38437: GO 38443
// end ; end ;
38439: GO 38328
38441: POP
38442: POP
// end ;
38443: LD_VAR 0 3
38447: RET
// export function ScanBase ( side , base_area ) ; begin
38448: LD_INT 0
38450: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_VAR 0 2
38460: PPUSH
38461: LD_INT 81
38463: PUSH
38464: LD_VAR 0 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PPUSH
38473: CALL_OW 70
38477: ST_TO_ADDR
// end ;
38478: LD_VAR 0 3
38482: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
// result := false ;
38489: LD_ADDR_VAR 0 2
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
// side := GetSide ( unit ) ;
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: CALL_OW 255
38511: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38512: LD_ADDR_VAR 0 4
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 248
38526: ST_TO_ADDR
// case nat of 1 :
38527: LD_VAR 0 4
38531: PUSH
38532: LD_INT 1
38534: DOUBLE
38535: EQUAL
38536: IFTRUE 38540
38538: GO 38551
38540: POP
// tech := tech_lassight ; 2 :
38541: LD_ADDR_VAR 0 5
38545: PUSH
38546: LD_INT 12
38548: ST_TO_ADDR
38549: GO 38590
38551: LD_INT 2
38553: DOUBLE
38554: EQUAL
38555: IFTRUE 38559
38557: GO 38570
38559: POP
// tech := tech_mortar ; 3 :
38560: LD_ADDR_VAR 0 5
38564: PUSH
38565: LD_INT 41
38567: ST_TO_ADDR
38568: GO 38590
38570: LD_INT 3
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38589
38578: POP
// tech := tech_bazooka ; end ;
38579: LD_ADDR_VAR 0 5
38583: PUSH
38584: LD_INT 44
38586: ST_TO_ADDR
38587: GO 38590
38589: POP
// if Researched ( side , tech ) then
38590: LD_VAR 0 3
38594: PPUSH
38595: LD_VAR 0 5
38599: PPUSH
38600: CALL_OW 325
38604: IFFALSE 38631
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38606: LD_ADDR_VAR 0 2
38610: PUSH
38611: LD_INT 5
38613: PUSH
38614: LD_INT 8
38616: PUSH
38617: LD_INT 9
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: PUSH
38625: LD_VAR 0 4
38629: ARRAY
38630: ST_TO_ADDR
// end ;
38631: LD_VAR 0 2
38635: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38636: LD_INT 0
38638: PPUSH
38639: PPUSH
38640: PPUSH
// if not mines then
38641: LD_VAR 0 2
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 38794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: LD_INT 81
38657: PUSH
38658: LD_VAR 0 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: LD_INT 21
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PPUSH
38688: CALL_OW 69
38692: ST_TO_ADDR
// for i in mines do
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: FOR_IN
38704: IFFALSE 38792
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38706: LD_VAR 0 4
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: PPUSH
38715: LD_VAR 0 4
38719: PUSH
38720: LD_INT 2
38722: ARRAY
38723: PPUSH
38724: CALL_OW 458
38728: NOT
38729: IFFALSE 38733
// continue ;
38731: GO 38703
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38733: LD_VAR 0 4
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: PPUSH
38742: LD_VAR 0 4
38746: PUSH
38747: LD_INT 2
38749: ARRAY
38750: PPUSH
38751: CALL_OW 428
38755: PUSH
38756: LD_VAR 0 5
38760: IN
38761: IFFALSE 38790
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38763: LD_VAR 0 4
38767: PUSH
38768: LD_INT 1
38770: ARRAY
38771: PPUSH
38772: LD_VAR 0 4
38776: PUSH
38777: LD_INT 2
38779: ARRAY
38780: PPUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 456
// end ;
38790: GO 38703
38792: POP
38793: POP
// end ;
38794: LD_VAR 0 3
38798: RET
// export function Count ( array ) ; var i ; begin
38799: LD_INT 0
38801: PPUSH
38802: PPUSH
// result := 0 ;
38803: LD_ADDR_VAR 0 2
38807: PUSH
38808: LD_INT 0
38810: ST_TO_ADDR
// for i in array do
38811: LD_ADDR_VAR 0 3
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: FOR_IN
38822: IFFALSE 38846
// if i then
38824: LD_VAR 0 3
38828: IFFALSE 38844
// result := result + 1 ;
38830: LD_ADDR_VAR 0 2
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 1
38842: PLUS
38843: ST_TO_ADDR
38844: GO 38821
38846: POP
38847: POP
// end ;
38848: LD_VAR 0 2
38852: RET
// export function IsEmpty ( building ) ; begin
38853: LD_INT 0
38855: PPUSH
// if not building then
38856: LD_VAR 0 1
38860: NOT
38861: IFFALSE 38865
// exit ;
38863: GO 38908
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38865: LD_ADDR_VAR 0 2
38869: PUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_INT 22
38877: PUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 255
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 58
38894: PUSH
38895: EMPTY
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 69
38906: IN
38907: ST_TO_ADDR
// end ;
38908: LD_VAR 0 2
38912: RET
// export function IsNotFull ( building ) ; begin
38913: LD_INT 0
38915: PPUSH
// if not building then
38916: LD_VAR 0 1
38920: NOT
38921: IFFALSE 38925
// exit ;
38923: GO 38944
// result := UnitsInside ( building ) < 6 ;
38925: LD_ADDR_VAR 0 2
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 313
38939: PUSH
38940: LD_INT 6
38942: LESS
38943: ST_TO_ADDR
// end ;
38944: LD_VAR 0 2
38948: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38949: LD_INT 0
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
// tmp := [ ] ;
38955: LD_ADDR_VAR 0 3
38959: PUSH
38960: EMPTY
38961: ST_TO_ADDR
// list := [ ] ;
38962: LD_ADDR_VAR 0 5
38966: PUSH
38967: EMPTY
38968: ST_TO_ADDR
// for i = 16 to 25 do
38969: LD_ADDR_VAR 0 4
38973: PUSH
38974: DOUBLE
38975: LD_INT 16
38977: DEC
38978: ST_TO_ADDR
38979: LD_INT 25
38981: PUSH
38982: FOR_TO
38983: IFFALSE 39056
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38985: LD_ADDR_VAR 0 3
38989: PUSH
38990: LD_VAR 0 3
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 255
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 91
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_INT 6
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 30
39030: PUSH
39031: LD_VAR 0 4
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: PPUSH
39048: CALL_OW 69
39052: ADD
39053: ST_TO_ADDR
39054: GO 38982
39056: POP
39057: POP
// for i = 1 to tmp do
39058: LD_ADDR_VAR 0 4
39062: PUSH
39063: DOUBLE
39064: LD_INT 1
39066: DEC
39067: ST_TO_ADDR
39068: LD_VAR 0 3
39072: PUSH
39073: FOR_TO
39074: IFFALSE 39162
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39076: LD_ADDR_VAR 0 5
39080: PUSH
39081: LD_VAR 0 5
39085: PUSH
39086: LD_VAR 0 3
39090: PUSH
39091: LD_VAR 0 4
39095: ARRAY
39096: PPUSH
39097: CALL_OW 266
39101: PUSH
39102: LD_VAR 0 3
39106: PUSH
39107: LD_VAR 0 4
39111: ARRAY
39112: PPUSH
39113: CALL_OW 250
39117: PUSH
39118: LD_VAR 0 3
39122: PUSH
39123: LD_VAR 0 4
39127: ARRAY
39128: PPUSH
39129: CALL_OW 251
39133: PUSH
39134: LD_VAR 0 3
39138: PUSH
39139: LD_VAR 0 4
39143: ARRAY
39144: PPUSH
39145: CALL_OW 254
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: ADD
39159: ST_TO_ADDR
39160: GO 39073
39162: POP
39163: POP
// result := list ;
39164: LD_ADDR_VAR 0 2
39168: PUSH
39169: LD_VAR 0 5
39173: ST_TO_ADDR
// end ;
39174: LD_VAR 0 2
39178: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39179: LD_INT 0
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
// if not factory then
39188: LD_VAR 0 1
39192: NOT
39193: IFFALSE 39197
// exit ;
39195: GO 39790
// if control = control_apeman then
39197: LD_VAR 0 4
39201: PUSH
39202: LD_INT 5
39204: EQUAL
39205: IFFALSE 39314
// begin tmp := UnitsInside ( factory ) ;
39207: LD_ADDR_VAR 0 8
39211: PUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 313
39221: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_INT 25
39229: PUSH
39230: LD_INT 12
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PPUSH
39237: CALL_OW 72
39241: NOT
39242: IFFALSE 39252
// control := control_manual ;
39244: LD_ADDR_VAR 0 4
39248: PUSH
39249: LD_INT 1
39251: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39252: LD_ADDR_VAR 0 8
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL 38949 0 1
39266: ST_TO_ADDR
// if tmp then
39267: LD_VAR 0 8
39271: IFFALSE 39314
// begin for i in tmp do
39273: LD_ADDR_VAR 0 7
39277: PUSH
39278: LD_VAR 0 8
39282: PUSH
39283: FOR_IN
39284: IFFALSE 39312
// if i [ 1 ] = b_ext_radio then
39286: LD_VAR 0 7
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PUSH
39295: LD_INT 22
39297: EQUAL
39298: IFFALSE 39310
// begin control := control_remote ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 2
39307: ST_TO_ADDR
// break ;
39308: GO 39312
// end ;
39310: GO 39283
39312: POP
39313: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39314: LD_VAR 0 1
39318: PPUSH
39319: LD_VAR 0 2
39323: PPUSH
39324: LD_VAR 0 3
39328: PPUSH
39329: LD_VAR 0 4
39333: PPUSH
39334: LD_VAR 0 5
39338: PPUSH
39339: CALL_OW 448
39343: IFFALSE 39378
// begin result := [ chassis , engine , control , weapon ] ;
39345: LD_ADDR_VAR 0 6
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: LD_VAR 0 3
39359: PUSH
39360: LD_VAR 0 4
39364: PUSH
39365: LD_VAR 0 5
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
// exit ;
39376: GO 39790
// end ; _chassis := AvailableChassisList ( factory ) ;
39378: LD_ADDR_VAR 0 9
39382: PUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 475
39392: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39393: LD_ADDR_VAR 0 11
39397: PUSH
39398: LD_VAR 0 1
39402: PPUSH
39403: CALL_OW 476
39407: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39408: LD_ADDR_VAR 0 12
39412: PUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: CALL_OW 477
39422: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39423: LD_ADDR_VAR 0 10
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 478
39437: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39438: LD_VAR 0 9
39442: NOT
39443: PUSH
39444: LD_VAR 0 11
39448: NOT
39449: OR
39450: PUSH
39451: LD_VAR 0 12
39455: NOT
39456: OR
39457: PUSH
39458: LD_VAR 0 10
39462: NOT
39463: OR
39464: IFFALSE 39499
// begin result := [ chassis , engine , control , weapon ] ;
39466: LD_ADDR_VAR 0 6
39470: PUSH
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 3
39480: PUSH
39481: LD_VAR 0 4
39485: PUSH
39486: LD_VAR 0 5
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// exit ;
39497: GO 39790
// end ; if not chassis in _chassis then
39499: LD_VAR 0 2
39503: PUSH
39504: LD_VAR 0 9
39508: IN
39509: NOT
39510: IFFALSE 39536
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39512: LD_ADDR_VAR 0 2
39516: PUSH
39517: LD_VAR 0 9
39521: PUSH
39522: LD_INT 1
39524: PPUSH
39525: LD_VAR 0 9
39529: PPUSH
39530: CALL_OW 12
39534: ARRAY
39535: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39536: LD_VAR 0 2
39540: PPUSH
39541: LD_VAR 0 3
39545: PPUSH
39546: CALL 39795 0 2
39550: NOT
39551: IFFALSE 39610
// repeat engine := _engine [ 1 ] ;
39553: LD_ADDR_VAR 0 3
39557: PUSH
39558: LD_VAR 0 11
39562: PUSH
39563: LD_INT 1
39565: ARRAY
39566: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39567: LD_ADDR_VAR 0 11
39571: PUSH
39572: LD_VAR 0 11
39576: PPUSH
39577: LD_INT 1
39579: PPUSH
39580: CALL_OW 3
39584: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39585: LD_VAR 0 2
39589: PPUSH
39590: LD_VAR 0 3
39594: PPUSH
39595: CALL 39795 0 2
39599: PUSH
39600: LD_VAR 0 11
39604: PUSH
39605: EMPTY
39606: EQUAL
39607: OR
39608: IFFALSE 39553
// if not control in _control then
39610: LD_VAR 0 4
39614: PUSH
39615: LD_VAR 0 12
39619: IN
39620: NOT
39621: IFFALSE 39647
// control := _control [ rand ( 1 , _control ) ] ;
39623: LD_ADDR_VAR 0 4
39627: PUSH
39628: LD_VAR 0 12
39632: PUSH
39633: LD_INT 1
39635: PPUSH
39636: LD_VAR 0 12
39640: PPUSH
39641: CALL_OW 12
39645: ARRAY
39646: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39647: LD_VAR 0 2
39651: PPUSH
39652: LD_VAR 0 5
39656: PPUSH
39657: CALL 40015 0 2
39661: NOT
39662: IFFALSE 39721
// repeat weapon := _weapon [ 1 ] ;
39664: LD_ADDR_VAR 0 5
39668: PUSH
39669: LD_VAR 0 10
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39678: LD_ADDR_VAR 0 10
39682: PUSH
39683: LD_VAR 0 10
39687: PPUSH
39688: LD_INT 1
39690: PPUSH
39691: CALL_OW 3
39695: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39696: LD_VAR 0 2
39700: PPUSH
39701: LD_VAR 0 5
39705: PPUSH
39706: CALL 40015 0 2
39710: PUSH
39711: LD_VAR 0 10
39715: PUSH
39716: EMPTY
39717: EQUAL
39718: OR
39719: IFFALSE 39664
// result := [ ] ;
39721: LD_ADDR_VAR 0 6
39725: PUSH
39726: EMPTY
39727: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39728: LD_VAR 0 1
39732: PPUSH
39733: LD_VAR 0 2
39737: PPUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: LD_VAR 0 5
39752: PPUSH
39753: CALL_OW 448
39757: IFFALSE 39790
// result := [ chassis , engine , control , weapon ] ;
39759: LD_ADDR_VAR 0 6
39763: PUSH
39764: LD_VAR 0 2
39768: PUSH
39769: LD_VAR 0 3
39773: PUSH
39774: LD_VAR 0 4
39778: PUSH
39779: LD_VAR 0 5
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
// end ;
39790: LD_VAR 0 6
39794: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39795: LD_INT 0
39797: PPUSH
// if not chassis or not engine then
39798: LD_VAR 0 1
39802: NOT
39803: PUSH
39804: LD_VAR 0 2
39808: NOT
39809: OR
39810: IFFALSE 39814
// exit ;
39812: GO 40010
// case engine of engine_solar :
39814: LD_VAR 0 2
39818: PUSH
39819: LD_INT 2
39821: DOUBLE
39822: EQUAL
39823: IFTRUE 39827
39825: GO 39865
39827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_INT 11
39835: PUSH
39836: LD_INT 12
39838: PUSH
39839: LD_INT 13
39841: PUSH
39842: LD_INT 14
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
39863: GO 39994
39865: LD_INT 1
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39935
39873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_INT 11
39881: PUSH
39882: LD_INT 12
39884: PUSH
39885: LD_INT 13
39887: PUSH
39888: LD_INT 14
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: LD_INT 5
39905: PUSH
39906: LD_INT 21
39908: PUSH
39909: LD_INT 23
39911: PUSH
39912: LD_INT 22
39914: PUSH
39915: LD_INT 24
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
39933: GO 39994
39935: LD_INT 3
39937: DOUBLE
39938: EQUAL
39939: IFTRUE 39943
39941: GO 39993
39943: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_INT 13
39951: PUSH
39952: LD_INT 14
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: LD_INT 4
39963: PUSH
39964: LD_INT 5
39966: PUSH
39967: LD_INT 21
39969: PUSH
39970: LD_INT 22
39972: PUSH
39973: LD_INT 23
39975: PUSH
39976: LD_INT 24
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
39991: GO 39994
39993: POP
// result := ( chassis in result ) ;
39994: LD_ADDR_VAR 0 3
39998: PUSH
39999: LD_VAR 0 1
40003: PUSH
40004: LD_VAR 0 3
40008: IN
40009: ST_TO_ADDR
// end ;
40010: LD_VAR 0 3
40014: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40015: LD_INT 0
40017: PPUSH
// if not chassis or not weapon then
40018: LD_VAR 0 1
40022: NOT
40023: PUSH
40024: LD_VAR 0 2
40028: NOT
40029: OR
40030: IFFALSE 40034
// exit ;
40032: GO 41096
// case weapon of us_machine_gun :
40034: LD_VAR 0 2
40038: PUSH
40039: LD_INT 2
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40077
40047: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 4
40064: PUSH
40065: LD_INT 5
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: ST_TO_ADDR
40075: GO 41080
40077: LD_INT 3
40079: DOUBLE
40080: EQUAL
40081: IFTRUE 40085
40083: GO 40115
40085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40086: LD_ADDR_VAR 0 3
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: LD_INT 4
40102: PUSH
40103: LD_INT 5
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
40113: GO 41080
40115: LD_INT 11
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40153
40123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: ST_TO_ADDR
40151: GO 41080
40153: LD_INT 4
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 40187
40161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: LD_INT 4
40175: PUSH
40176: LD_INT 5
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: ST_TO_ADDR
40185: GO 41080
40187: LD_INT 5
40189: DOUBLE
40190: EQUAL
40191: IFTRUE 40195
40193: GO 40221
40195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 4
40209: PUSH
40210: LD_INT 5
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
40219: GO 41080
40221: LD_INT 9
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40255
40229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: LD_INT 5
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
40253: GO 41080
40255: LD_INT 7
40257: DOUBLE
40258: EQUAL
40259: IFTRUE 40263
40261: GO 40289
40263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40264: LD_ADDR_VAR 0 3
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: LD_INT 4
40277: PUSH
40278: LD_INT 5
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: ST_TO_ADDR
40287: GO 41080
40289: LD_INT 12
40291: DOUBLE
40292: EQUAL
40293: IFTRUE 40297
40295: GO 40323
40297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40298: LD_ADDR_VAR 0 3
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: LD_INT 5
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
40321: GO 41080
40323: LD_INT 13
40325: DOUBLE
40326: EQUAL
40327: IFTRUE 40331
40329: GO 40357
40331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40332: LD_ADDR_VAR 0 3
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 3
40342: PUSH
40343: LD_INT 4
40345: PUSH
40346: LD_INT 5
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
40355: GO 41080
40357: LD_INT 14
40359: DOUBLE
40360: EQUAL
40361: IFTRUE 40365
40363: GO 40383
40365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40366: LD_ADDR_VAR 0 3
40370: PUSH
40371: LD_INT 4
40373: PUSH
40374: LD_INT 5
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: ST_TO_ADDR
40381: GO 41080
40383: LD_INT 6
40385: DOUBLE
40386: EQUAL
40387: IFTRUE 40391
40389: GO 40409
40391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_INT 4
40399: PUSH
40400: LD_INT 5
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: ST_TO_ADDR
40407: GO 41080
40409: LD_INT 10
40411: DOUBLE
40412: EQUAL
40413: IFTRUE 40417
40415: GO 40435
40417: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40418: LD_ADDR_VAR 0 3
40422: PUSH
40423: LD_INT 4
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: ST_TO_ADDR
40433: GO 41080
40435: LD_INT 22
40437: DOUBLE
40438: EQUAL
40439: IFTRUE 40443
40441: GO 40469
40443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: LD_INT 11
40451: PUSH
40452: LD_INT 12
40454: PUSH
40455: LD_INT 13
40457: PUSH
40458: LD_INT 14
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
40467: GO 41080
40469: LD_INT 23
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40477
40475: GO 40503
40477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40478: LD_ADDR_VAR 0 3
40482: PUSH
40483: LD_INT 11
40485: PUSH
40486: LD_INT 12
40488: PUSH
40489: LD_INT 13
40491: PUSH
40492: LD_INT 14
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
40501: GO 41080
40503: LD_INT 24
40505: DOUBLE
40506: EQUAL
40507: IFTRUE 40511
40509: GO 40537
40511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40512: LD_ADDR_VAR 0 3
40516: PUSH
40517: LD_INT 11
40519: PUSH
40520: LD_INT 12
40522: PUSH
40523: LD_INT 13
40525: PUSH
40526: LD_INT 14
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: ST_TO_ADDR
40535: GO 41080
40537: LD_INT 30
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40571
40545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40546: LD_ADDR_VAR 0 3
40550: PUSH
40551: LD_INT 11
40553: PUSH
40554: LD_INT 12
40556: PUSH
40557: LD_INT 13
40559: PUSH
40560: LD_INT 14
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: ST_TO_ADDR
40569: GO 41080
40571: LD_INT 25
40573: DOUBLE
40574: EQUAL
40575: IFTRUE 40579
40577: GO 40597
40579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40580: LD_ADDR_VAR 0 3
40584: PUSH
40585: LD_INT 13
40587: PUSH
40588: LD_INT 14
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: ST_TO_ADDR
40595: GO 41080
40597: LD_INT 27
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40623
40605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_INT 13
40613: PUSH
40614: LD_INT 14
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: ST_TO_ADDR
40621: GO 41080
40623: LD_EXP 53
40627: DOUBLE
40628: EQUAL
40629: IFTRUE 40633
40631: GO 40659
40633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40634: LD_ADDR_VAR 0 3
40638: PUSH
40639: LD_INT 11
40641: PUSH
40642: LD_INT 12
40644: PUSH
40645: LD_INT 13
40647: PUSH
40648: LD_INT 14
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: ST_TO_ADDR
40657: GO 41080
40659: LD_INT 28
40661: DOUBLE
40662: EQUAL
40663: IFTRUE 40667
40665: GO 40685
40667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40668: LD_ADDR_VAR 0 3
40672: PUSH
40673: LD_INT 13
40675: PUSH
40676: LD_INT 14
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: ST_TO_ADDR
40683: GO 41080
40685: LD_INT 29
40687: DOUBLE
40688: EQUAL
40689: IFTRUE 40693
40691: GO 40711
40693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40694: LD_ADDR_VAR 0 3
40698: PUSH
40699: LD_INT 13
40701: PUSH
40702: LD_INT 14
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: ST_TO_ADDR
40709: GO 41080
40711: LD_INT 31
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40737
40719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40720: LD_ADDR_VAR 0 3
40724: PUSH
40725: LD_INT 13
40727: PUSH
40728: LD_INT 14
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: ST_TO_ADDR
40735: GO 41080
40737: LD_INT 26
40739: DOUBLE
40740: EQUAL
40741: IFTRUE 40745
40743: GO 40763
40745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40746: LD_ADDR_VAR 0 3
40750: PUSH
40751: LD_INT 13
40753: PUSH
40754: LD_INT 14
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: ST_TO_ADDR
40761: GO 41080
40763: LD_INT 42
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40771
40769: GO 40797
40771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40772: LD_ADDR_VAR 0 3
40776: PUSH
40777: LD_INT 21
40779: PUSH
40780: LD_INT 22
40782: PUSH
40783: LD_INT 23
40785: PUSH
40786: LD_INT 24
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: ST_TO_ADDR
40795: GO 41080
40797: LD_INT 43
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 40831
40805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40806: LD_ADDR_VAR 0 3
40810: PUSH
40811: LD_INT 21
40813: PUSH
40814: LD_INT 22
40816: PUSH
40817: LD_INT 23
40819: PUSH
40820: LD_INT 24
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
40829: GO 41080
40831: LD_INT 44
40833: DOUBLE
40834: EQUAL
40835: IFTRUE 40839
40837: GO 40865
40839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 21
40847: PUSH
40848: LD_INT 22
40850: PUSH
40851: LD_INT 23
40853: PUSH
40854: LD_INT 24
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
40863: GO 41080
40865: LD_INT 45
40867: DOUBLE
40868: EQUAL
40869: IFTRUE 40873
40871: GO 40899
40873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40874: LD_ADDR_VAR 0 3
40878: PUSH
40879: LD_INT 21
40881: PUSH
40882: LD_INT 22
40884: PUSH
40885: LD_INT 23
40887: PUSH
40888: LD_INT 24
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: ST_TO_ADDR
40897: GO 41080
40899: LD_INT 49
40901: DOUBLE
40902: EQUAL
40903: IFTRUE 40907
40905: GO 40933
40907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40908: LD_ADDR_VAR 0 3
40912: PUSH
40913: LD_INT 21
40915: PUSH
40916: LD_INT 22
40918: PUSH
40919: LD_INT 23
40921: PUSH
40922: LD_INT 24
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
40931: GO 41080
40933: LD_INT 51
40935: DOUBLE
40936: EQUAL
40937: IFTRUE 40941
40939: GO 40967
40941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_INT 21
40949: PUSH
40950: LD_INT 22
40952: PUSH
40953: LD_INT 23
40955: PUSH
40956: LD_INT 24
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
40965: GO 41080
40967: LD_INT 52
40969: DOUBLE
40970: EQUAL
40971: IFTRUE 40975
40973: GO 41001
40975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40976: LD_ADDR_VAR 0 3
40980: PUSH
40981: LD_INT 21
40983: PUSH
40984: LD_INT 22
40986: PUSH
40987: LD_INT 23
40989: PUSH
40990: LD_INT 24
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
40999: GO 41080
41001: LD_INT 53
41003: DOUBLE
41004: EQUAL
41005: IFTRUE 41009
41007: GO 41027
41009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_INT 23
41017: PUSH
41018: LD_INT 24
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: ST_TO_ADDR
41025: GO 41080
41027: LD_INT 46
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41053
41035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_INT 23
41043: PUSH
41044: LD_INT 24
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: ST_TO_ADDR
41051: GO 41080
41053: LD_INT 47
41055: DOUBLE
41056: EQUAL
41057: IFTRUE 41061
41059: GO 41079
41061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_INT 23
41069: PUSH
41070: LD_INT 24
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: ST_TO_ADDR
41077: GO 41080
41079: POP
// result := ( chassis in result ) ;
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_VAR 0 1
41089: PUSH
41090: LD_VAR 0 3
41094: IN
41095: ST_TO_ADDR
// end ;
41096: LD_VAR 0 3
41100: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41101: LD_INT 0
41103: PPUSH
41104: PPUSH
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
// result := array ;
41110: LD_ADDR_VAR 0 5
41114: PUSH
41115: LD_VAR 0 1
41119: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41120: LD_VAR 0 1
41124: NOT
41125: PUSH
41126: LD_VAR 0 2
41130: NOT
41131: OR
41132: PUSH
41133: LD_VAR 0 3
41137: NOT
41138: OR
41139: PUSH
41140: LD_VAR 0 2
41144: PUSH
41145: LD_VAR 0 1
41149: GREATER
41150: OR
41151: PUSH
41152: LD_VAR 0 3
41156: PUSH
41157: LD_VAR 0 1
41161: GREATER
41162: OR
41163: IFFALSE 41167
// exit ;
41165: GO 41463
// if direction then
41167: LD_VAR 0 4
41171: IFFALSE 41235
// begin d := 1 ;
41173: LD_ADDR_VAR 0 9
41177: PUSH
41178: LD_INT 1
41180: ST_TO_ADDR
// if i_from > i_to then
41181: LD_VAR 0 2
41185: PUSH
41186: LD_VAR 0 3
41190: GREATER
41191: IFFALSE 41217
// length := ( array - i_from ) + i_to else
41193: LD_ADDR_VAR 0 11
41197: PUSH
41198: LD_VAR 0 1
41202: PUSH
41203: LD_VAR 0 2
41207: MINUS
41208: PUSH
41209: LD_VAR 0 3
41213: PLUS
41214: ST_TO_ADDR
41215: GO 41233
// length := i_to - i_from ;
41217: LD_ADDR_VAR 0 11
41221: PUSH
41222: LD_VAR 0 3
41226: PUSH
41227: LD_VAR 0 2
41231: MINUS
41232: ST_TO_ADDR
// end else
41233: GO 41296
// begin d := - 1 ;
41235: LD_ADDR_VAR 0 9
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: ST_TO_ADDR
// if i_from > i_to then
41244: LD_VAR 0 2
41248: PUSH
41249: LD_VAR 0 3
41253: GREATER
41254: IFFALSE 41274
// length := i_from - i_to else
41256: LD_ADDR_VAR 0 11
41260: PUSH
41261: LD_VAR 0 2
41265: PUSH
41266: LD_VAR 0 3
41270: MINUS
41271: ST_TO_ADDR
41272: GO 41296
// length := ( array - i_to ) + i_from ;
41274: LD_ADDR_VAR 0 11
41278: PUSH
41279: LD_VAR 0 1
41283: PUSH
41284: LD_VAR 0 3
41288: MINUS
41289: PUSH
41290: LD_VAR 0 2
41294: PLUS
41295: ST_TO_ADDR
// end ; if not length then
41296: LD_VAR 0 11
41300: NOT
41301: IFFALSE 41305
// exit ;
41303: GO 41463
// tmp := array ;
41305: LD_ADDR_VAR 0 10
41309: PUSH
41310: LD_VAR 0 1
41314: ST_TO_ADDR
// for i = 1 to length do
41315: LD_ADDR_VAR 0 6
41319: PUSH
41320: DOUBLE
41321: LD_INT 1
41323: DEC
41324: ST_TO_ADDR
41325: LD_VAR 0 11
41329: PUSH
41330: FOR_TO
41331: IFFALSE 41451
// begin for j = 1 to array do
41333: LD_ADDR_VAR 0 7
41337: PUSH
41338: DOUBLE
41339: LD_INT 1
41341: DEC
41342: ST_TO_ADDR
41343: LD_VAR 0 1
41347: PUSH
41348: FOR_TO
41349: IFFALSE 41437
// begin k := j + d ;
41351: LD_ADDR_VAR 0 8
41355: PUSH
41356: LD_VAR 0 7
41360: PUSH
41361: LD_VAR 0 9
41365: PLUS
41366: ST_TO_ADDR
// if k > array then
41367: LD_VAR 0 8
41371: PUSH
41372: LD_VAR 0 1
41376: GREATER
41377: IFFALSE 41387
// k := 1 ;
41379: LD_ADDR_VAR 0 8
41383: PUSH
41384: LD_INT 1
41386: ST_TO_ADDR
// if not k then
41387: LD_VAR 0 8
41391: NOT
41392: IFFALSE 41404
// k := array ;
41394: LD_ADDR_VAR 0 8
41398: PUSH
41399: LD_VAR 0 1
41403: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41404: LD_ADDR_VAR 0 10
41408: PUSH
41409: LD_VAR 0 10
41413: PPUSH
41414: LD_VAR 0 8
41418: PPUSH
41419: LD_VAR 0 1
41423: PUSH
41424: LD_VAR 0 7
41428: ARRAY
41429: PPUSH
41430: CALL_OW 1
41434: ST_TO_ADDR
// end ;
41435: GO 41348
41437: POP
41438: POP
// array := tmp ;
41439: LD_ADDR_VAR 0 1
41443: PUSH
41444: LD_VAR 0 10
41448: ST_TO_ADDR
// end ;
41449: GO 41330
41451: POP
41452: POP
// result := array ;
41453: LD_ADDR_VAR 0 5
41457: PUSH
41458: LD_VAR 0 1
41462: ST_TO_ADDR
// end ;
41463: LD_VAR 0 5
41467: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41468: LD_INT 0
41470: PPUSH
41471: PPUSH
// result := 0 ;
41472: LD_ADDR_VAR 0 3
41476: PUSH
41477: LD_INT 0
41479: ST_TO_ADDR
// if not array or not value in array then
41480: LD_VAR 0 1
41484: NOT
41485: PUSH
41486: LD_VAR 0 2
41490: PUSH
41491: LD_VAR 0 1
41495: IN
41496: NOT
41497: OR
41498: IFFALSE 41502
// exit ;
41500: GO 41556
// for i = 1 to array do
41502: LD_ADDR_VAR 0 4
41506: PUSH
41507: DOUBLE
41508: LD_INT 1
41510: DEC
41511: ST_TO_ADDR
41512: LD_VAR 0 1
41516: PUSH
41517: FOR_TO
41518: IFFALSE 41554
// if value = array [ i ] then
41520: LD_VAR 0 2
41524: PUSH
41525: LD_VAR 0 1
41529: PUSH
41530: LD_VAR 0 4
41534: ARRAY
41535: EQUAL
41536: IFFALSE 41552
// begin result := i ;
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_VAR 0 4
41547: ST_TO_ADDR
// exit ;
41548: POP
41549: POP
41550: GO 41556
// end ;
41552: GO 41517
41554: POP
41555: POP
// end ;
41556: LD_VAR 0 3
41560: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41561: LD_INT 0
41563: PPUSH
// vc_chassis := chassis ;
41564: LD_ADDR_OWVAR 37
41568: PUSH
41569: LD_VAR 0 1
41573: ST_TO_ADDR
// vc_engine := engine ;
41574: LD_ADDR_OWVAR 39
41578: PUSH
41579: LD_VAR 0 2
41583: ST_TO_ADDR
// vc_control := control ;
41584: LD_ADDR_OWVAR 38
41588: PUSH
41589: LD_VAR 0 3
41593: ST_TO_ADDR
// vc_weapon := weapon ;
41594: LD_ADDR_OWVAR 40
41598: PUSH
41599: LD_VAR 0 4
41603: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41604: LD_ADDR_OWVAR 41
41608: PUSH
41609: LD_VAR 0 5
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 6
41618: RET
// export function WantPlant ( unit ) ; var task ; begin
41619: LD_INT 0
41621: PPUSH
41622: PPUSH
// result := false ;
41623: LD_ADDR_VAR 0 2
41627: PUSH
41628: LD_INT 0
41630: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41631: LD_ADDR_VAR 0 3
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 437
41645: ST_TO_ADDR
// if task then
41646: LD_VAR 0 3
41650: IFFALSE 41678
// if task [ 1 ] [ 1 ] = p then
41652: LD_VAR 0 3
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PUSH
41661: LD_INT 1
41663: ARRAY
41664: PUSH
41665: LD_STRING p
41667: EQUAL
41668: IFFALSE 41678
// result := true ;
41670: LD_ADDR_VAR 0 2
41674: PUSH
41675: LD_INT 1
41677: ST_TO_ADDR
// end ;
41678: LD_VAR 0 2
41682: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41683: LD_INT 0
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
// if pos < 1 then
41689: LD_VAR 0 2
41693: PUSH
41694: LD_INT 1
41696: LESS
41697: IFFALSE 41701
// exit ;
41699: GO 42004
// if pos = 1 then
41701: LD_VAR 0 2
41705: PUSH
41706: LD_INT 1
41708: EQUAL
41709: IFFALSE 41742
// result := Replace ( arr , pos [ 1 ] , value ) else
41711: LD_ADDR_VAR 0 4
41715: PUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_VAR 0 2
41725: PUSH
41726: LD_INT 1
41728: ARRAY
41729: PPUSH
41730: LD_VAR 0 3
41734: PPUSH
41735: CALL_OW 1
41739: ST_TO_ADDR
41740: GO 42004
// begin tmp := arr ;
41742: LD_ADDR_VAR 0 6
41746: PUSH
41747: LD_VAR 0 1
41751: ST_TO_ADDR
// s_arr := [ tmp ] ;
41752: LD_ADDR_VAR 0 7
41756: PUSH
41757: LD_VAR 0 6
41761: PUSH
41762: EMPTY
41763: LIST
41764: ST_TO_ADDR
// for i = 1 to pos - 1 do
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: DOUBLE
41771: LD_INT 1
41773: DEC
41774: ST_TO_ADDR
41775: LD_VAR 0 2
41779: PUSH
41780: LD_INT 1
41782: MINUS
41783: PUSH
41784: FOR_TO
41785: IFFALSE 41830
// begin tmp := tmp [ pos [ i ] ] ;
41787: LD_ADDR_VAR 0 6
41791: PUSH
41792: LD_VAR 0 6
41796: PUSH
41797: LD_VAR 0 2
41801: PUSH
41802: LD_VAR 0 5
41806: ARRAY
41807: ARRAY
41808: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41809: LD_ADDR_VAR 0 7
41813: PUSH
41814: LD_VAR 0 7
41818: PUSH
41819: LD_VAR 0 6
41823: PUSH
41824: EMPTY
41825: LIST
41826: ADD
41827: ST_TO_ADDR
// end ;
41828: GO 41784
41830: POP
41831: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41832: LD_ADDR_VAR 0 6
41836: PUSH
41837: LD_VAR 0 6
41841: PPUSH
41842: LD_VAR 0 2
41846: PUSH
41847: LD_VAR 0 2
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 3
41857: PPUSH
41858: CALL_OW 1
41862: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_VAR 0 7
41872: PPUSH
41873: LD_VAR 0 7
41877: PPUSH
41878: LD_VAR 0 6
41882: PPUSH
41883: CALL_OW 1
41887: ST_TO_ADDR
// for i = s_arr downto 2 do
41888: LD_ADDR_VAR 0 5
41892: PUSH
41893: DOUBLE
41894: LD_VAR 0 7
41898: INC
41899: ST_TO_ADDR
41900: LD_INT 2
41902: PUSH
41903: FOR_DOWNTO
41904: IFFALSE 41988
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41906: LD_ADDR_VAR 0 6
41910: PUSH
41911: LD_VAR 0 7
41915: PUSH
41916: LD_VAR 0 5
41920: PUSH
41921: LD_INT 1
41923: MINUS
41924: ARRAY
41925: PPUSH
41926: LD_VAR 0 2
41930: PUSH
41931: LD_VAR 0 5
41935: PUSH
41936: LD_INT 1
41938: MINUS
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 7
41945: PUSH
41946: LD_VAR 0 5
41950: ARRAY
41951: PPUSH
41952: CALL_OW 1
41956: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41957: LD_ADDR_VAR 0 7
41961: PUSH
41962: LD_VAR 0 7
41966: PPUSH
41967: LD_VAR 0 5
41971: PUSH
41972: LD_INT 1
41974: MINUS
41975: PPUSH
41976: LD_VAR 0 6
41980: PPUSH
41981: CALL_OW 1
41985: ST_TO_ADDR
// end ;
41986: GO 41903
41988: POP
41989: POP
// result := s_arr [ 1 ] ;
41990: LD_ADDR_VAR 0 4
41994: PUSH
41995: LD_VAR 0 7
41999: PUSH
42000: LD_INT 1
42002: ARRAY
42003: ST_TO_ADDR
// end ; end ;
42004: LD_VAR 0 4
42008: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42009: LD_INT 0
42011: PPUSH
42012: PPUSH
// if not list then
42013: LD_VAR 0 1
42017: NOT
42018: IFFALSE 42022
// exit ;
42020: GO 42113
// i := list [ pos1 ] ;
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_VAR 0 1
42031: PUSH
42032: LD_VAR 0 2
42036: ARRAY
42037: ST_TO_ADDR
// if not i then
42038: LD_VAR 0 5
42042: NOT
42043: IFFALSE 42047
// exit ;
42045: GO 42113
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42047: LD_ADDR_VAR 0 1
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: LD_VAR 0 1
42066: PUSH
42067: LD_VAR 0 3
42071: ARRAY
42072: PPUSH
42073: CALL_OW 1
42077: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42078: LD_ADDR_VAR 0 1
42082: PUSH
42083: LD_VAR 0 1
42087: PPUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_VAR 0 5
42097: PPUSH
42098: CALL_OW 1
42102: ST_TO_ADDR
// result := list ;
42103: LD_ADDR_VAR 0 4
42107: PUSH
42108: LD_VAR 0 1
42112: ST_TO_ADDR
// end ;
42113: LD_VAR 0 4
42117: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42118: LD_INT 0
42120: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_VAR 0 1
42130: PPUSH
42131: CALL_OW 250
42135: PPUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 251
42145: PPUSH
42146: LD_VAR 0 2
42150: PPUSH
42151: LD_VAR 0 3
42155: PPUSH
42156: LD_VAR 0 4
42160: PPUSH
42161: CALL 42171 0 5
42165: ST_TO_ADDR
// end ;
42166: LD_VAR 0 5
42170: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42171: LD_INT 0
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
// if not list then
42177: LD_VAR 0 3
42181: NOT
42182: IFFALSE 42186
// exit ;
42184: GO 42574
// result := [ ] ;
42186: LD_ADDR_VAR 0 6
42190: PUSH
42191: EMPTY
42192: ST_TO_ADDR
// for i in list do
42193: LD_ADDR_VAR 0 7
42197: PUSH
42198: LD_VAR 0 3
42202: PUSH
42203: FOR_IN
42204: IFFALSE 42406
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42206: LD_ADDR_VAR 0 9
42210: PUSH
42211: LD_VAR 0 7
42215: PPUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: LD_VAR 0 2
42225: PPUSH
42226: CALL_OW 297
42230: ST_TO_ADDR
// if not result then
42231: LD_VAR 0 6
42235: NOT
42236: IFFALSE 42262
// result := [ [ i , tmp ] ] else
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: LD_VAR 0 7
42247: PUSH
42248: LD_VAR 0 9
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: ST_TO_ADDR
42260: GO 42404
// begin if result [ result ] [ 2 ] < tmp then
42262: LD_VAR 0 6
42266: PUSH
42267: LD_VAR 0 6
42271: ARRAY
42272: PUSH
42273: LD_INT 2
42275: ARRAY
42276: PUSH
42277: LD_VAR 0 9
42281: LESS
42282: IFFALSE 42324
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42284: LD_ADDR_VAR 0 6
42288: PUSH
42289: LD_VAR 0 6
42293: PPUSH
42294: LD_VAR 0 6
42298: PUSH
42299: LD_INT 1
42301: PLUS
42302: PPUSH
42303: LD_VAR 0 7
42307: PUSH
42308: LD_VAR 0 9
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PPUSH
42317: CALL_OW 2
42321: ST_TO_ADDR
42322: GO 42404
// for j = 1 to result do
42324: LD_ADDR_VAR 0 8
42328: PUSH
42329: DOUBLE
42330: LD_INT 1
42332: DEC
42333: ST_TO_ADDR
42334: LD_VAR 0 6
42338: PUSH
42339: FOR_TO
42340: IFFALSE 42402
// begin if tmp < result [ j ] [ 2 ] then
42342: LD_VAR 0 9
42346: PUSH
42347: LD_VAR 0 6
42351: PUSH
42352: LD_VAR 0 8
42356: ARRAY
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: LESS
42362: IFFALSE 42400
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42364: LD_ADDR_VAR 0 6
42368: PUSH
42369: LD_VAR 0 6
42373: PPUSH
42374: LD_VAR 0 8
42378: PPUSH
42379: LD_VAR 0 7
42383: PUSH
42384: LD_VAR 0 9
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 2
42397: ST_TO_ADDR
// break ;
42398: GO 42402
// end ; end ;
42400: GO 42339
42402: POP
42403: POP
// end ; end ;
42404: GO 42203
42406: POP
42407: POP
// if result and not asc then
42408: LD_VAR 0 6
42412: PUSH
42413: LD_VAR 0 4
42417: NOT
42418: AND
42419: IFFALSE 42494
// begin tmp := result ;
42421: LD_ADDR_VAR 0 9
42425: PUSH
42426: LD_VAR 0 6
42430: ST_TO_ADDR
// for i = tmp downto 1 do
42431: LD_ADDR_VAR 0 7
42435: PUSH
42436: DOUBLE
42437: LD_VAR 0 9
42441: INC
42442: ST_TO_ADDR
42443: LD_INT 1
42445: PUSH
42446: FOR_DOWNTO
42447: IFFALSE 42492
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42449: LD_ADDR_VAR 0 6
42453: PUSH
42454: LD_VAR 0 6
42458: PPUSH
42459: LD_VAR 0 9
42463: PUSH
42464: LD_VAR 0 7
42468: MINUS
42469: PUSH
42470: LD_INT 1
42472: PLUS
42473: PPUSH
42474: LD_VAR 0 9
42478: PUSH
42479: LD_VAR 0 7
42483: ARRAY
42484: PPUSH
42485: CALL_OW 1
42489: ST_TO_ADDR
42490: GO 42446
42492: POP
42493: POP
// end ; tmp := [ ] ;
42494: LD_ADDR_VAR 0 9
42498: PUSH
42499: EMPTY
42500: ST_TO_ADDR
// if mode then
42501: LD_VAR 0 5
42505: IFFALSE 42574
// begin for i = 1 to result do
42507: LD_ADDR_VAR 0 7
42511: PUSH
42512: DOUBLE
42513: LD_INT 1
42515: DEC
42516: ST_TO_ADDR
42517: LD_VAR 0 6
42521: PUSH
42522: FOR_TO
42523: IFFALSE 42562
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42525: LD_ADDR_VAR 0 9
42529: PUSH
42530: LD_VAR 0 9
42534: PPUSH
42535: LD_VAR 0 7
42539: PPUSH
42540: LD_VAR 0 6
42544: PUSH
42545: LD_VAR 0 7
42549: ARRAY
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: PPUSH
42555: CALL_OW 1
42559: ST_TO_ADDR
42560: GO 42522
42562: POP
42563: POP
// result := tmp ;
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: LD_VAR 0 9
42573: ST_TO_ADDR
// end ; end ;
42574: LD_VAR 0 6
42578: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42579: LD_INT 0
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42587: LD_ADDR_VAR 0 5
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// if not x or not y then
42609: LD_VAR 0 2
42613: NOT
42614: PUSH
42615: LD_VAR 0 3
42619: NOT
42620: OR
42621: IFFALSE 42625
// exit ;
42623: GO 44277
// if not range then
42625: LD_VAR 0 4
42629: NOT
42630: IFFALSE 42640
// range := 10 ;
42632: LD_ADDR_VAR 0 4
42636: PUSH
42637: LD_INT 10
42639: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42640: LD_ADDR_VAR 0 8
42644: PUSH
42645: LD_INT 81
42647: PUSH
42648: LD_VAR 0 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 92
42659: PUSH
42660: LD_VAR 0 2
42664: PUSH
42665: LD_VAR 0 3
42669: PUSH
42670: LD_VAR 0 4
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 3
42683: PUSH
42684: LD_INT 21
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: PPUSH
42703: CALL_OW 69
42707: ST_TO_ADDR
// if not tmp then
42708: LD_VAR 0 8
42712: NOT
42713: IFFALSE 42717
// exit ;
42715: GO 44277
// for i in tmp do
42717: LD_ADDR_VAR 0 6
42721: PUSH
42722: LD_VAR 0 8
42726: PUSH
42727: FOR_IN
42728: IFFALSE 44252
// begin points := [ 0 , 0 , 0 ] ;
42730: LD_ADDR_VAR 0 9
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// bpoints := 1 ;
42749: LD_ADDR_VAR 0 10
42753: PUSH
42754: LD_INT 1
42756: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42757: LD_VAR 0 6
42761: PPUSH
42762: CALL_OW 247
42766: PUSH
42767: LD_INT 1
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 43353
42775: POP
// begin if GetClass ( i ) = 1 then
42776: LD_VAR 0 6
42780: PPUSH
42781: CALL_OW 257
42785: PUSH
42786: LD_INT 1
42788: EQUAL
42789: IFFALSE 42810
// points := [ 10 , 5 , 3 ] ;
42791: LD_ADDR_VAR 0 9
42795: PUSH
42796: LD_INT 10
42798: PUSH
42799: LD_INT 5
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42810: LD_VAR 0 6
42814: PPUSH
42815: CALL_OW 257
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: IN
42834: IFFALSE 42855
// points := [ 3 , 2 , 1 ] ;
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: LD_INT 3
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42855: LD_VAR 0 6
42859: PPUSH
42860: CALL_OW 257
42864: PUSH
42865: LD_INT 5
42867: EQUAL
42868: IFFALSE 42889
// points := [ 130 , 5 , 2 ] ;
42870: LD_ADDR_VAR 0 9
42874: PUSH
42875: LD_INT 130
42877: PUSH
42878: LD_INT 5
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42889: LD_VAR 0 6
42893: PPUSH
42894: CALL_OW 257
42898: PUSH
42899: LD_INT 8
42901: EQUAL
42902: IFFALSE 42923
// points := [ 35 , 35 , 30 ] ;
42904: LD_ADDR_VAR 0 9
42908: PUSH
42909: LD_INT 35
42911: PUSH
42912: LD_INT 35
42914: PUSH
42915: LD_INT 30
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42923: LD_VAR 0 6
42927: PPUSH
42928: CALL_OW 257
42932: PUSH
42933: LD_INT 9
42935: EQUAL
42936: IFFALSE 42957
// points := [ 20 , 55 , 40 ] ;
42938: LD_ADDR_VAR 0 9
42942: PUSH
42943: LD_INT 20
42945: PUSH
42946: LD_INT 55
42948: PUSH
42949: LD_INT 40
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42957: LD_VAR 0 6
42961: PPUSH
42962: CALL_OW 257
42966: PUSH
42967: LD_INT 12
42969: PUSH
42970: LD_INT 16
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: IN
42977: IFFALSE 42998
// points := [ 5 , 3 , 2 ] ;
42979: LD_ADDR_VAR 0 9
42983: PUSH
42984: LD_INT 5
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42998: LD_VAR 0 6
43002: PPUSH
43003: CALL_OW 257
43007: PUSH
43008: LD_INT 17
43010: EQUAL
43011: IFFALSE 43032
// points := [ 100 , 50 , 75 ] ;
43013: LD_ADDR_VAR 0 9
43017: PUSH
43018: LD_INT 100
43020: PUSH
43021: LD_INT 50
43023: PUSH
43024: LD_INT 75
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43032: LD_VAR 0 6
43036: PPUSH
43037: CALL_OW 257
43041: PUSH
43042: LD_INT 15
43044: EQUAL
43045: IFFALSE 43066
// points := [ 10 , 5 , 3 ] ;
43047: LD_ADDR_VAR 0 9
43051: PUSH
43052: LD_INT 10
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43066: LD_VAR 0 6
43070: PPUSH
43071: CALL_OW 257
43075: PUSH
43076: LD_INT 14
43078: EQUAL
43079: IFFALSE 43100
// points := [ 10 , 0 , 0 ] ;
43081: LD_ADDR_VAR 0 9
43085: PUSH
43086: LD_INT 10
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43100: LD_VAR 0 6
43104: PPUSH
43105: CALL_OW 257
43109: PUSH
43110: LD_INT 11
43112: EQUAL
43113: IFFALSE 43134
// points := [ 30 , 10 , 5 ] ;
43115: LD_ADDR_VAR 0 9
43119: PUSH
43120: LD_INT 30
43122: PUSH
43123: LD_INT 10
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43134: LD_VAR 0 1
43138: PPUSH
43139: LD_INT 5
43141: PPUSH
43142: CALL_OW 321
43146: PUSH
43147: LD_INT 2
43149: EQUAL
43150: IFFALSE 43167
// bpoints := bpoints * 1.8 ;
43152: LD_ADDR_VAR 0 10
43156: PUSH
43157: LD_VAR 0 10
43161: PUSH
43162: LD_REAL  1.80000000000000E+0000
43165: MUL
43166: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 257
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: IN
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: LD_INT 51
43203: PPUSH
43204: CALL_OW 321
43208: PUSH
43209: LD_INT 2
43211: EQUAL
43212: AND
43213: IFFALSE 43230
// bpoints := bpoints * 1.2 ;
43215: LD_ADDR_VAR 0 10
43219: PUSH
43220: LD_VAR 0 10
43224: PUSH
43225: LD_REAL  1.20000000000000E+0000
43228: MUL
43229: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43230: LD_VAR 0 6
43234: PPUSH
43235: CALL_OW 257
43239: PUSH
43240: LD_INT 5
43242: PUSH
43243: LD_INT 7
43245: PUSH
43246: LD_INT 9
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: IN
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: LD_INT 52
43262: PPUSH
43263: CALL_OW 321
43267: PUSH
43268: LD_INT 2
43270: EQUAL
43271: AND
43272: IFFALSE 43289
// bpoints := bpoints * 1.5 ;
43274: LD_ADDR_VAR 0 10
43278: PUSH
43279: LD_VAR 0 10
43283: PUSH
43284: LD_REAL  1.50000000000000E+0000
43287: MUL
43288: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43289: LD_VAR 0 1
43293: PPUSH
43294: LD_INT 66
43296: PPUSH
43297: CALL_OW 321
43301: PUSH
43302: LD_INT 2
43304: EQUAL
43305: IFFALSE 43322
// bpoints := bpoints * 1.1 ;
43307: LD_ADDR_VAR 0 10
43311: PUSH
43312: LD_VAR 0 10
43316: PUSH
43317: LD_REAL  1.10000000000000E+0000
43320: MUL
43321: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43322: LD_ADDR_VAR 0 10
43326: PUSH
43327: LD_VAR 0 10
43331: PUSH
43332: LD_VAR 0 6
43336: PPUSH
43337: LD_INT 1
43339: PPUSH
43340: CALL_OW 259
43344: PUSH
43345: LD_REAL  1.15000000000000E+0000
43348: MUL
43349: MUL
43350: ST_TO_ADDR
// end ; unit_vehicle :
43351: GO 44181
43353: LD_INT 2
43355: DOUBLE
43356: EQUAL
43357: IFTRUE 43361
43359: GO 44169
43361: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43362: LD_VAR 0 6
43366: PPUSH
43367: CALL_OW 264
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 42
43377: PUSH
43378: LD_INT 24
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: IN
43386: IFFALSE 43407
// points := [ 25 , 5 , 3 ] ;
43388: LD_ADDR_VAR 0 9
43392: PUSH
43393: LD_INT 25
43395: PUSH
43396: LD_INT 5
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43407: LD_VAR 0 6
43411: PPUSH
43412: CALL_OW 264
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 43
43422: PUSH
43423: LD_INT 25
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: IN
43431: IFFALSE 43452
// points := [ 40 , 15 , 5 ] ;
43433: LD_ADDR_VAR 0 9
43437: PUSH
43438: LD_INT 40
43440: PUSH
43441: LD_INT 15
43443: PUSH
43444: LD_INT 5
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43452: LD_VAR 0 6
43456: PPUSH
43457: CALL_OW 264
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 23
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: IN
43472: IFFALSE 43493
// points := [ 7 , 25 , 8 ] ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_INT 7
43481: PUSH
43482: LD_INT 25
43484: PUSH
43485: LD_INT 8
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 264
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: LD_INT 27
43508: PUSH
43509: LD_INT 44
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: IN
43517: IFFALSE 43538
// points := [ 14 , 50 , 16 ] ;
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_INT 14
43526: PUSH
43527: LD_INT 50
43529: PUSH
43530: LD_INT 16
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43538: LD_VAR 0 6
43542: PPUSH
43543: CALL_OW 264
43547: PUSH
43548: LD_INT 6
43550: PUSH
43551: LD_INT 46
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: IN
43558: IFFALSE 43579
// points := [ 32 , 120 , 70 ] ;
43560: LD_ADDR_VAR 0 9
43564: PUSH
43565: LD_INT 32
43567: PUSH
43568: LD_INT 120
43570: PUSH
43571: LD_INT 70
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43579: LD_VAR 0 6
43583: PPUSH
43584: CALL_OW 264
43588: PUSH
43589: LD_INT 7
43591: PUSH
43592: LD_INT 28
43594: PUSH
43595: LD_INT 45
43597: PUSH
43598: LD_EXP 53
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: IN
43609: IFFALSE 43630
// points := [ 35 , 20 , 45 ] ;
43611: LD_ADDR_VAR 0 9
43615: PUSH
43616: LD_INT 35
43618: PUSH
43619: LD_INT 20
43621: PUSH
43622: LD_INT 45
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43630: LD_VAR 0 6
43634: PPUSH
43635: CALL_OW 264
43639: PUSH
43640: LD_INT 47
43642: PUSH
43643: EMPTY
43644: LIST
43645: IN
43646: IFFALSE 43667
// points := [ 67 , 45 , 75 ] ;
43648: LD_ADDR_VAR 0 9
43652: PUSH
43653: LD_INT 67
43655: PUSH
43656: LD_INT 45
43658: PUSH
43659: LD_INT 75
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43667: LD_VAR 0 6
43671: PPUSH
43672: CALL_OW 264
43676: PUSH
43677: LD_INT 26
43679: PUSH
43680: EMPTY
43681: LIST
43682: IN
43683: IFFALSE 43704
// points := [ 120 , 30 , 80 ] ;
43685: LD_ADDR_VAR 0 9
43689: PUSH
43690: LD_INT 120
43692: PUSH
43693: LD_INT 30
43695: PUSH
43696: LD_INT 80
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43704: LD_VAR 0 6
43708: PPUSH
43709: CALL_OW 264
43713: PUSH
43714: LD_INT 22
43716: PUSH
43717: EMPTY
43718: LIST
43719: IN
43720: IFFALSE 43741
// points := [ 40 , 1 , 1 ] ;
43722: LD_ADDR_VAR 0 9
43726: PUSH
43727: LD_INT 40
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43741: LD_VAR 0 6
43745: PPUSH
43746: CALL_OW 264
43750: PUSH
43751: LD_INT 29
43753: PUSH
43754: EMPTY
43755: LIST
43756: IN
43757: IFFALSE 43778
// points := [ 70 , 200 , 400 ] ;
43759: LD_ADDR_VAR 0 9
43763: PUSH
43764: LD_INT 70
43766: PUSH
43767: LD_INT 200
43769: PUSH
43770: LD_INT 400
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43778: LD_VAR 0 6
43782: PPUSH
43783: CALL_OW 264
43787: PUSH
43788: LD_INT 14
43790: PUSH
43791: LD_INT 53
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: IN
43798: IFFALSE 43819
// points := [ 40 , 10 , 20 ] ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_INT 40
43807: PUSH
43808: LD_INT 10
43810: PUSH
43811: LD_INT 20
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43819: LD_VAR 0 6
43823: PPUSH
43824: CALL_OW 264
43828: PUSH
43829: LD_INT 9
43831: PUSH
43832: EMPTY
43833: LIST
43834: IN
43835: IFFALSE 43856
// points := [ 5 , 70 , 20 ] ;
43837: LD_ADDR_VAR 0 9
43841: PUSH
43842: LD_INT 5
43844: PUSH
43845: LD_INT 70
43847: PUSH
43848: LD_INT 20
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43856: LD_VAR 0 6
43860: PPUSH
43861: CALL_OW 264
43865: PUSH
43866: LD_INT 10
43868: PUSH
43869: EMPTY
43870: LIST
43871: IN
43872: IFFALSE 43893
// points := [ 35 , 110 , 70 ] ;
43874: LD_ADDR_VAR 0 9
43878: PUSH
43879: LD_INT 35
43881: PUSH
43882: LD_INT 110
43884: PUSH
43885: LD_INT 70
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43893: LD_VAR 0 6
43897: PPUSH
43898: CALL_OW 265
43902: PUSH
43903: LD_INT 25
43905: EQUAL
43906: IFFALSE 43927
// points := [ 80 , 65 , 100 ] ;
43908: LD_ADDR_VAR 0 9
43912: PUSH
43913: LD_INT 80
43915: PUSH
43916: LD_INT 65
43918: PUSH
43919: LD_INT 100
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43927: LD_VAR 0 6
43931: PPUSH
43932: CALL_OW 263
43936: PUSH
43937: LD_INT 1
43939: EQUAL
43940: IFFALSE 43975
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43942: LD_ADDR_VAR 0 10
43946: PUSH
43947: LD_VAR 0 10
43951: PUSH
43952: LD_VAR 0 6
43956: PPUSH
43957: CALL_OW 311
43961: PPUSH
43962: LD_INT 3
43964: PPUSH
43965: CALL_OW 259
43969: PUSH
43970: LD_INT 4
43972: MUL
43973: MUL
43974: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43975: LD_VAR 0 6
43979: PPUSH
43980: CALL_OW 263
43984: PUSH
43985: LD_INT 2
43987: EQUAL
43988: IFFALSE 44039
// begin j := IsControledBy ( i ) ;
43990: LD_ADDR_VAR 0 7
43994: PUSH
43995: LD_VAR 0 6
43999: PPUSH
44000: CALL_OW 312
44004: ST_TO_ADDR
// if j then
44005: LD_VAR 0 7
44009: IFFALSE 44039
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44011: LD_ADDR_VAR 0 10
44015: PUSH
44016: LD_VAR 0 10
44020: PUSH
44021: LD_VAR 0 7
44025: PPUSH
44026: LD_INT 3
44028: PPUSH
44029: CALL_OW 259
44033: PUSH
44034: LD_INT 3
44036: MUL
44037: MUL
44038: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44039: LD_VAR 0 6
44043: PPUSH
44044: CALL_OW 264
44048: PUSH
44049: LD_INT 5
44051: PUSH
44052: LD_INT 6
44054: PUSH
44055: LD_INT 46
44057: PUSH
44058: LD_INT 44
44060: PUSH
44061: LD_INT 47
44063: PUSH
44064: LD_INT 45
44066: PUSH
44067: LD_INT 28
44069: PUSH
44070: LD_INT 7
44072: PUSH
44073: LD_INT 27
44075: PUSH
44076: LD_INT 29
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: IN
44091: PUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: LD_INT 52
44099: PPUSH
44100: CALL_OW 321
44104: PUSH
44105: LD_INT 2
44107: EQUAL
44108: AND
44109: IFFALSE 44126
// bpoints := bpoints * 1.2 ;
44111: LD_ADDR_VAR 0 10
44115: PUSH
44116: LD_VAR 0 10
44120: PUSH
44121: LD_REAL  1.20000000000000E+0000
44124: MUL
44125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44126: LD_VAR 0 6
44130: PPUSH
44131: CALL_OW 264
44135: PUSH
44136: LD_INT 6
44138: PUSH
44139: LD_INT 46
44141: PUSH
44142: LD_INT 47
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: IN
44150: IFFALSE 44167
// bpoints := bpoints * 1.2 ;
44152: LD_ADDR_VAR 0 10
44156: PUSH
44157: LD_VAR 0 10
44161: PUSH
44162: LD_REAL  1.20000000000000E+0000
44165: MUL
44166: ST_TO_ADDR
// end ; unit_building :
44167: GO 44181
44169: LD_INT 3
44171: DOUBLE
44172: EQUAL
44173: IFTRUE 44177
44175: GO 44180
44177: POP
// ; end ;
44178: GO 44181
44180: POP
// for j = 1 to 3 do
44181: LD_ADDR_VAR 0 7
44185: PUSH
44186: DOUBLE
44187: LD_INT 1
44189: DEC
44190: ST_TO_ADDR
44191: LD_INT 3
44193: PUSH
44194: FOR_TO
44195: IFFALSE 44248
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44197: LD_ADDR_VAR 0 5
44201: PUSH
44202: LD_VAR 0 5
44206: PPUSH
44207: LD_VAR 0 7
44211: PPUSH
44212: LD_VAR 0 5
44216: PUSH
44217: LD_VAR 0 7
44221: ARRAY
44222: PUSH
44223: LD_VAR 0 9
44227: PUSH
44228: LD_VAR 0 7
44232: ARRAY
44233: PUSH
44234: LD_VAR 0 10
44238: MUL
44239: PLUS
44240: PPUSH
44241: CALL_OW 1
44245: ST_TO_ADDR
44246: GO 44194
44248: POP
44249: POP
// end ;
44250: GO 42727
44252: POP
44253: POP
// result := Replace ( result , 4 , tmp ) ;
44254: LD_ADDR_VAR 0 5
44258: PUSH
44259: LD_VAR 0 5
44263: PPUSH
44264: LD_INT 4
44266: PPUSH
44267: LD_VAR 0 8
44271: PPUSH
44272: CALL_OW 1
44276: ST_TO_ADDR
// end ;
44277: LD_VAR 0 5
44281: RET
// export function DangerAtRange ( unit , range ) ; begin
44282: LD_INT 0
44284: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44285: LD_ADDR_VAR 0 3
44289: PUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 255
44299: PPUSH
44300: LD_VAR 0 1
44304: PPUSH
44305: CALL_OW 250
44309: PPUSH
44310: LD_VAR 0 1
44314: PPUSH
44315: CALL_OW 251
44319: PPUSH
44320: LD_VAR 0 2
44324: PPUSH
44325: CALL 42579 0 4
44329: ST_TO_ADDR
// end ;
44330: LD_VAR 0 3
44334: RET
// export function DangerInArea ( side , area ) ; begin
44335: LD_INT 0
44337: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44338: LD_ADDR_VAR 0 3
44342: PUSH
44343: LD_VAR 0 2
44347: PPUSH
44348: LD_INT 81
44350: PUSH
44351: LD_VAR 0 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PPUSH
44360: CALL_OW 70
44364: ST_TO_ADDR
// end ;
44365: LD_VAR 0 3
44369: RET
// export function IsExtension ( b ) ; begin
44370: LD_INT 0
44372: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44373: LD_ADDR_VAR 0 2
44377: PUSH
44378: LD_VAR 0 1
44382: PUSH
44383: LD_INT 23
44385: PUSH
44386: LD_INT 20
44388: PUSH
44389: LD_INT 22
44391: PUSH
44392: LD_INT 17
44394: PUSH
44395: LD_INT 24
44397: PUSH
44398: LD_INT 21
44400: PUSH
44401: LD_INT 19
44403: PUSH
44404: LD_INT 16
44406: PUSH
44407: LD_INT 25
44409: PUSH
44410: LD_INT 18
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: IN
44425: ST_TO_ADDR
// end ;
44426: LD_VAR 0 2
44430: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44431: LD_INT 0
44433: PPUSH
44434: PPUSH
44435: PPUSH
// result := [ ] ;
44436: LD_ADDR_VAR 0 4
44440: PUSH
44441: EMPTY
44442: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44443: LD_ADDR_VAR 0 5
44447: PUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_INT 21
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PPUSH
44463: CALL_OW 70
44467: ST_TO_ADDR
// if not tmp then
44468: LD_VAR 0 5
44472: NOT
44473: IFFALSE 44477
// exit ;
44475: GO 44541
// if checkLink then
44477: LD_VAR 0 3
44481: IFFALSE 44531
// begin for i in tmp do
44483: LD_ADDR_VAR 0 6
44487: PUSH
44488: LD_VAR 0 5
44492: PUSH
44493: FOR_IN
44494: IFFALSE 44529
// if GetBase ( i ) <> base then
44496: LD_VAR 0 6
44500: PPUSH
44501: CALL_OW 274
44505: PUSH
44506: LD_VAR 0 1
44510: NONEQUAL
44511: IFFALSE 44527
// ComLinkToBase ( base , i ) ;
44513: LD_VAR 0 1
44517: PPUSH
44518: LD_VAR 0 6
44522: PPUSH
44523: CALL_OW 169
44527: GO 44493
44529: POP
44530: POP
// end ; result := tmp ;
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 5
44540: ST_TO_ADDR
// end ;
44541: LD_VAR 0 4
44545: RET
// export function ComComplete ( units , b ) ; var i ; begin
44546: LD_INT 0
44548: PPUSH
44549: PPUSH
// if not units then
44550: LD_VAR 0 1
44554: NOT
44555: IFFALSE 44559
// exit ;
44557: GO 44649
// for i in units do
44559: LD_ADDR_VAR 0 4
44563: PUSH
44564: LD_VAR 0 1
44568: PUSH
44569: FOR_IN
44570: IFFALSE 44647
// if BuildingStatus ( b ) = bs_build then
44572: LD_VAR 0 2
44576: PPUSH
44577: CALL_OW 461
44581: PUSH
44582: LD_INT 1
44584: EQUAL
44585: IFFALSE 44645
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44587: LD_VAR 0 4
44591: PPUSH
44592: LD_STRING h
44594: PUSH
44595: LD_VAR 0 2
44599: PPUSH
44600: CALL_OW 250
44604: PUSH
44605: LD_VAR 0 2
44609: PPUSH
44610: CALL_OW 251
44614: PUSH
44615: LD_VAR 0 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: PPUSH
44641: CALL_OW 446
44645: GO 44569
44647: POP
44648: POP
// end ;
44649: LD_VAR 0 3
44653: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44654: LD_INT 0
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44662: LD_VAR 0 1
44666: NOT
44667: PUSH
44668: LD_VAR 0 1
44672: PPUSH
44673: CALL_OW 263
44677: PUSH
44678: LD_INT 2
44680: NONEQUAL
44681: OR
44682: IFFALSE 44686
// exit ;
44684: GO 45002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44686: LD_ADDR_VAR 0 6
44690: PUSH
44691: LD_INT 22
44693: PUSH
44694: LD_VAR 0 1
44698: PPUSH
44699: CALL_OW 255
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 30
44713: PUSH
44714: LD_INT 36
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 34
44723: PUSH
44724: LD_INT 31
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 69
44744: ST_TO_ADDR
// if not tmp then
44745: LD_VAR 0 6
44749: NOT
44750: IFFALSE 44754
// exit ;
44752: GO 45002
// result := [ ] ;
44754: LD_ADDR_VAR 0 2
44758: PUSH
44759: EMPTY
44760: ST_TO_ADDR
// for i in tmp do
44761: LD_ADDR_VAR 0 3
44765: PUSH
44766: LD_VAR 0 6
44770: PUSH
44771: FOR_IN
44772: IFFALSE 44843
// begin t := UnitsInside ( i ) ;
44774: LD_ADDR_VAR 0 4
44778: PUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: CALL_OW 313
44788: ST_TO_ADDR
// if t then
44789: LD_VAR 0 4
44793: IFFALSE 44841
// for j in t do
44795: LD_ADDR_VAR 0 7
44799: PUSH
44800: LD_VAR 0 4
44804: PUSH
44805: FOR_IN
44806: IFFALSE 44839
// result := Replace ( result , result + 1 , j ) ;
44808: LD_ADDR_VAR 0 2
44812: PUSH
44813: LD_VAR 0 2
44817: PPUSH
44818: LD_VAR 0 2
44822: PUSH
44823: LD_INT 1
44825: PLUS
44826: PPUSH
44827: LD_VAR 0 7
44831: PPUSH
44832: CALL_OW 1
44836: ST_TO_ADDR
44837: GO 44805
44839: POP
44840: POP
// end ;
44841: GO 44771
44843: POP
44844: POP
// if not result then
44845: LD_VAR 0 2
44849: NOT
44850: IFFALSE 44854
// exit ;
44852: GO 45002
// mech := result [ 1 ] ;
44854: LD_ADDR_VAR 0 5
44858: PUSH
44859: LD_VAR 0 2
44863: PUSH
44864: LD_INT 1
44866: ARRAY
44867: ST_TO_ADDR
// if result > 1 then
44868: LD_VAR 0 2
44872: PUSH
44873: LD_INT 1
44875: GREATER
44876: IFFALSE 44988
// begin for i = 2 to result do
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: DOUBLE
44884: LD_INT 2
44886: DEC
44887: ST_TO_ADDR
44888: LD_VAR 0 2
44892: PUSH
44893: FOR_TO
44894: IFFALSE 44986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44896: LD_ADDR_VAR 0 4
44900: PUSH
44901: LD_VAR 0 2
44905: PUSH
44906: LD_VAR 0 3
44910: ARRAY
44911: PPUSH
44912: LD_INT 3
44914: PPUSH
44915: CALL_OW 259
44919: PUSH
44920: LD_VAR 0 2
44924: PUSH
44925: LD_VAR 0 3
44929: ARRAY
44930: PPUSH
44931: CALL_OW 432
44935: MINUS
44936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44937: LD_VAR 0 4
44941: PUSH
44942: LD_VAR 0 5
44946: PPUSH
44947: LD_INT 3
44949: PPUSH
44950: CALL_OW 259
44954: PUSH
44955: LD_VAR 0 5
44959: PPUSH
44960: CALL_OW 432
44964: MINUS
44965: GREATEREQUAL
44966: IFFALSE 44984
// mech := result [ i ] ;
44968: LD_ADDR_VAR 0 5
44972: PUSH
44973: LD_VAR 0 2
44977: PUSH
44978: LD_VAR 0 3
44982: ARRAY
44983: ST_TO_ADDR
// end ;
44984: GO 44893
44986: POP
44987: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44988: LD_VAR 0 1
44992: PPUSH
44993: LD_VAR 0 5
44997: PPUSH
44998: CALL_OW 135
// end ;
45002: LD_VAR 0 2
45006: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45007: LD_INT 0
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
// result := [ ] ;
45022: LD_ADDR_VAR 0 7
45026: PUSH
45027: EMPTY
45028: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45029: LD_VAR 0 1
45033: PPUSH
45034: CALL_OW 266
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: IN
45049: NOT
45050: IFFALSE 45054
// exit ;
45052: GO 46688
// if name then
45054: LD_VAR 0 3
45058: IFFALSE 45074
// SetBName ( base_dep , name ) ;
45060: LD_VAR 0 1
45064: PPUSH
45065: LD_VAR 0 3
45069: PPUSH
45070: CALL_OW 500
// base := GetBase ( base_dep ) ;
45074: LD_ADDR_VAR 0 15
45078: PUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 274
45088: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45089: LD_ADDR_VAR 0 16
45093: PUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL_OW 255
45103: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45104: LD_ADDR_VAR 0 17
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 248
45118: ST_TO_ADDR
// if sources then
45119: LD_VAR 0 5
45123: IFFALSE 45170
// for i = 1 to 3 do
45125: LD_ADDR_VAR 0 8
45129: PUSH
45130: DOUBLE
45131: LD_INT 1
45133: DEC
45134: ST_TO_ADDR
45135: LD_INT 3
45137: PUSH
45138: FOR_TO
45139: IFFALSE 45168
// AddResourceType ( base , i , sources [ i ] ) ;
45141: LD_VAR 0 15
45145: PPUSH
45146: LD_VAR 0 8
45150: PPUSH
45151: LD_VAR 0 5
45155: PUSH
45156: LD_VAR 0 8
45160: ARRAY
45161: PPUSH
45162: CALL_OW 276
45166: GO 45138
45168: POP
45169: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45170: LD_ADDR_VAR 0 18
45174: PUSH
45175: LD_VAR 0 15
45179: PPUSH
45180: LD_VAR 0 2
45184: PPUSH
45185: LD_INT 1
45187: PPUSH
45188: CALL 44431 0 3
45192: ST_TO_ADDR
// InitHc ;
45193: CALL_OW 19
// InitUc ;
45197: CALL_OW 18
// uc_side := side ;
45201: LD_ADDR_OWVAR 20
45205: PUSH
45206: LD_VAR 0 16
45210: ST_TO_ADDR
// uc_nation := nation ;
45211: LD_ADDR_OWVAR 21
45215: PUSH
45216: LD_VAR 0 17
45220: ST_TO_ADDR
// if buildings then
45221: LD_VAR 0 18
45225: IFFALSE 46547
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45227: LD_ADDR_VAR 0 19
45231: PUSH
45232: LD_VAR 0 18
45236: PPUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 30
45242: PUSH
45243: LD_INT 29
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 30
45252: PUSH
45253: LD_INT 30
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: PPUSH
45265: CALL_OW 72
45269: ST_TO_ADDR
// if tmp then
45270: LD_VAR 0 19
45274: IFFALSE 45322
// for i in tmp do
45276: LD_ADDR_VAR 0 8
45280: PUSH
45281: LD_VAR 0 19
45285: PUSH
45286: FOR_IN
45287: IFFALSE 45320
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45289: LD_VAR 0 8
45293: PPUSH
45294: CALL_OW 250
45298: PPUSH
45299: LD_VAR 0 8
45303: PPUSH
45304: CALL_OW 251
45308: PPUSH
45309: LD_VAR 0 16
45313: PPUSH
45314: CALL_OW 441
45318: GO 45286
45320: POP
45321: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45322: LD_VAR 0 18
45326: PPUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 30
45332: PUSH
45333: LD_INT 32
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 30
45342: PUSH
45343: LD_INT 33
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: PPUSH
45355: CALL_OW 72
45359: IFFALSE 45447
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45361: LD_ADDR_VAR 0 8
45365: PUSH
45366: LD_VAR 0 18
45370: PPUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 30
45376: PUSH
45377: LD_INT 32
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 30
45386: PUSH
45387: LD_INT 33
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: PPUSH
45399: CALL_OW 72
45403: PUSH
45404: FOR_IN
45405: IFFALSE 45445
// begin if not GetBWeapon ( i ) then
45407: LD_VAR 0 8
45411: PPUSH
45412: CALL_OW 269
45416: NOT
45417: IFFALSE 45443
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45419: LD_VAR 0 8
45423: PPUSH
45424: LD_VAR 0 8
45428: PPUSH
45429: LD_VAR 0 2
45433: PPUSH
45434: CALL 46693 0 2
45438: PPUSH
45439: CALL_OW 431
// end ;
45443: GO 45404
45445: POP
45446: POP
// end ; for i = 1 to personel do
45447: LD_ADDR_VAR 0 8
45451: PUSH
45452: DOUBLE
45453: LD_INT 1
45455: DEC
45456: ST_TO_ADDR
45457: LD_VAR 0 6
45461: PUSH
45462: FOR_TO
45463: IFFALSE 46527
// begin if i > 4 then
45465: LD_VAR 0 8
45469: PUSH
45470: LD_INT 4
45472: GREATER
45473: IFFALSE 45477
// break ;
45475: GO 46527
// case i of 1 :
45477: LD_VAR 0 8
45481: PUSH
45482: LD_INT 1
45484: DOUBLE
45485: EQUAL
45486: IFTRUE 45490
45488: GO 45570
45490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45491: LD_ADDR_VAR 0 12
45495: PUSH
45496: LD_VAR 0 18
45500: PPUSH
45501: LD_INT 22
45503: PUSH
45504: LD_VAR 0 16
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 58
45515: PUSH
45516: EMPTY
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 30
45524: PUSH
45525: LD_INT 32
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 30
45534: PUSH
45535: LD_INT 4
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 30
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: PPUSH
45563: CALL_OW 72
45567: ST_TO_ADDR
45568: GO 45792
45570: LD_INT 2
45572: DOUBLE
45573: EQUAL
45574: IFTRUE 45578
45576: GO 45640
45578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45579: LD_ADDR_VAR 0 12
45583: PUSH
45584: LD_VAR 0 18
45588: PPUSH
45589: LD_INT 22
45591: PUSH
45592: LD_VAR 0 16
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 30
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 30
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PPUSH
45633: CALL_OW 72
45637: ST_TO_ADDR
45638: GO 45792
45640: LD_INT 3
45642: DOUBLE
45643: EQUAL
45644: IFTRUE 45648
45646: GO 45710
45648: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45649: LD_ADDR_VAR 0 12
45653: PUSH
45654: LD_VAR 0 18
45658: PPUSH
45659: LD_INT 22
45661: PUSH
45662: LD_VAR 0 16
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 30
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 30
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PPUSH
45703: CALL_OW 72
45707: ST_TO_ADDR
45708: GO 45792
45710: LD_INT 4
45712: DOUBLE
45713: EQUAL
45714: IFTRUE 45718
45716: GO 45791
45718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45719: LD_ADDR_VAR 0 12
45723: PUSH
45724: LD_VAR 0 18
45728: PPUSH
45729: LD_INT 22
45731: PUSH
45732: LD_VAR 0 16
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 30
45746: PUSH
45747: LD_INT 6
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 30
45756: PUSH
45757: LD_INT 7
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 30
45766: PUSH
45767: LD_INT 8
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PPUSH
45784: CALL_OW 72
45788: ST_TO_ADDR
45789: GO 45792
45791: POP
// if i = 1 then
45792: LD_VAR 0 8
45796: PUSH
45797: LD_INT 1
45799: EQUAL
45800: IFFALSE 45911
// begin tmp := [ ] ;
45802: LD_ADDR_VAR 0 19
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// for j in f do
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_VAR 0 12
45818: PUSH
45819: FOR_IN
45820: IFFALSE 45893
// if GetBType ( j ) = b_bunker then
45822: LD_VAR 0 9
45826: PPUSH
45827: CALL_OW 266
45831: PUSH
45832: LD_INT 32
45834: EQUAL
45835: IFFALSE 45862
// tmp := Insert ( tmp , 1 , j ) else
45837: LD_ADDR_VAR 0 19
45841: PUSH
45842: LD_VAR 0 19
45846: PPUSH
45847: LD_INT 1
45849: PPUSH
45850: LD_VAR 0 9
45854: PPUSH
45855: CALL_OW 2
45859: ST_TO_ADDR
45860: GO 45891
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45862: LD_ADDR_VAR 0 19
45866: PUSH
45867: LD_VAR 0 19
45871: PPUSH
45872: LD_VAR 0 19
45876: PUSH
45877: LD_INT 1
45879: PLUS
45880: PPUSH
45881: LD_VAR 0 9
45885: PPUSH
45886: CALL_OW 2
45890: ST_TO_ADDR
45891: GO 45819
45893: POP
45894: POP
// if tmp then
45895: LD_VAR 0 19
45899: IFFALSE 45911
// f := tmp ;
45901: LD_ADDR_VAR 0 12
45905: PUSH
45906: LD_VAR 0 19
45910: ST_TO_ADDR
// end ; x := personel [ i ] ;
45911: LD_ADDR_VAR 0 13
45915: PUSH
45916: LD_VAR 0 6
45920: PUSH
45921: LD_VAR 0 8
45925: ARRAY
45926: ST_TO_ADDR
// if x = - 1 then
45927: LD_VAR 0 13
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: EQUAL
45936: IFFALSE 46145
// begin for j in f do
45938: LD_ADDR_VAR 0 9
45942: PUSH
45943: LD_VAR 0 12
45947: PUSH
45948: FOR_IN
45949: IFFALSE 46141
// repeat InitHc ;
45951: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45955: LD_VAR 0 9
45959: PPUSH
45960: CALL_OW 266
45964: PUSH
45965: LD_INT 5
45967: EQUAL
45968: IFFALSE 46038
// begin if UnitsInside ( j ) < 3 then
45970: LD_VAR 0 9
45974: PPUSH
45975: CALL_OW 313
45979: PUSH
45980: LD_INT 3
45982: LESS
45983: IFFALSE 46019
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45985: LD_INT 0
45987: PPUSH
45988: LD_INT 5
45990: PUSH
45991: LD_INT 8
45993: PUSH
45994: LD_INT 9
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: PUSH
46002: LD_VAR 0 17
46006: ARRAY
46007: PPUSH
46008: LD_VAR 0 4
46012: PPUSH
46013: CALL_OW 380
46017: GO 46036
// PrepareHuman ( false , i , skill ) ;
46019: LD_INT 0
46021: PPUSH
46022: LD_VAR 0 8
46026: PPUSH
46027: LD_VAR 0 4
46031: PPUSH
46032: CALL_OW 380
// end else
46036: GO 46055
// PrepareHuman ( false , i , skill ) ;
46038: LD_INT 0
46040: PPUSH
46041: LD_VAR 0 8
46045: PPUSH
46046: LD_VAR 0 4
46050: PPUSH
46051: CALL_OW 380
// un := CreateHuman ;
46055: LD_ADDR_VAR 0 14
46059: PUSH
46060: CALL_OW 44
46064: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46065: LD_ADDR_VAR 0 7
46069: PUSH
46070: LD_VAR 0 7
46074: PPUSH
46075: LD_INT 1
46077: PPUSH
46078: LD_VAR 0 14
46082: PPUSH
46083: CALL_OW 2
46087: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46088: LD_VAR 0 14
46092: PPUSH
46093: LD_VAR 0 9
46097: PPUSH
46098: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46102: LD_VAR 0 9
46106: PPUSH
46107: CALL_OW 313
46111: PUSH
46112: LD_INT 6
46114: EQUAL
46115: PUSH
46116: LD_VAR 0 9
46120: PPUSH
46121: CALL_OW 266
46125: PUSH
46126: LD_INT 32
46128: PUSH
46129: LD_INT 31
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: IN
46136: OR
46137: IFFALSE 45951
46139: GO 45948
46141: POP
46142: POP
// end else
46143: GO 46525
// for j = 1 to x do
46145: LD_ADDR_VAR 0 9
46149: PUSH
46150: DOUBLE
46151: LD_INT 1
46153: DEC
46154: ST_TO_ADDR
46155: LD_VAR 0 13
46159: PUSH
46160: FOR_TO
46161: IFFALSE 46523
// begin InitHc ;
46163: CALL_OW 19
// if not f then
46167: LD_VAR 0 12
46171: NOT
46172: IFFALSE 46261
// begin PrepareHuman ( false , i , skill ) ;
46174: LD_INT 0
46176: PPUSH
46177: LD_VAR 0 8
46181: PPUSH
46182: LD_VAR 0 4
46186: PPUSH
46187: CALL_OW 380
// un := CreateHuman ;
46191: LD_ADDR_VAR 0 14
46195: PUSH
46196: CALL_OW 44
46200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46201: LD_ADDR_VAR 0 7
46205: PUSH
46206: LD_VAR 0 7
46210: PPUSH
46211: LD_INT 1
46213: PPUSH
46214: LD_VAR 0 14
46218: PPUSH
46219: CALL_OW 2
46223: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46224: LD_VAR 0 14
46228: PPUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: CALL_OW 250
46238: PPUSH
46239: LD_VAR 0 1
46243: PPUSH
46244: CALL_OW 251
46248: PPUSH
46249: LD_INT 10
46251: PPUSH
46252: LD_INT 0
46254: PPUSH
46255: CALL_OW 50
// continue ;
46259: GO 46160
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46261: LD_VAR 0 12
46265: PUSH
46266: LD_INT 1
46268: ARRAY
46269: PPUSH
46270: CALL_OW 313
46274: PUSH
46275: LD_VAR 0 12
46279: PUSH
46280: LD_INT 1
46282: ARRAY
46283: PPUSH
46284: CALL_OW 266
46288: PUSH
46289: LD_INT 32
46291: PUSH
46292: LD_INT 31
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: IN
46299: AND
46300: PUSH
46301: LD_VAR 0 12
46305: PUSH
46306: LD_INT 1
46308: ARRAY
46309: PPUSH
46310: CALL_OW 313
46314: PUSH
46315: LD_INT 6
46317: EQUAL
46318: OR
46319: IFFALSE 46339
// f := Delete ( f , 1 ) ;
46321: LD_ADDR_VAR 0 12
46325: PUSH
46326: LD_VAR 0 12
46330: PPUSH
46331: LD_INT 1
46333: PPUSH
46334: CALL_OW 3
46338: ST_TO_ADDR
// if not f then
46339: LD_VAR 0 12
46343: NOT
46344: IFFALSE 46362
// begin x := x + 2 ;
46346: LD_ADDR_VAR 0 13
46350: PUSH
46351: LD_VAR 0 13
46355: PUSH
46356: LD_INT 2
46358: PLUS
46359: ST_TO_ADDR
// continue ;
46360: GO 46160
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46362: LD_VAR 0 12
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PPUSH
46371: CALL_OW 266
46375: PUSH
46376: LD_INT 5
46378: EQUAL
46379: IFFALSE 46453
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46381: LD_VAR 0 12
46385: PUSH
46386: LD_INT 1
46388: ARRAY
46389: PPUSH
46390: CALL_OW 313
46394: PUSH
46395: LD_INT 3
46397: LESS
46398: IFFALSE 46434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46400: LD_INT 0
46402: PPUSH
46403: LD_INT 5
46405: PUSH
46406: LD_INT 8
46408: PUSH
46409: LD_INT 9
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: PUSH
46417: LD_VAR 0 17
46421: ARRAY
46422: PPUSH
46423: LD_VAR 0 4
46427: PPUSH
46428: CALL_OW 380
46432: GO 46451
// PrepareHuman ( false , i , skill ) ;
46434: LD_INT 0
46436: PPUSH
46437: LD_VAR 0 8
46441: PPUSH
46442: LD_VAR 0 4
46446: PPUSH
46447: CALL_OW 380
// end else
46451: GO 46470
// PrepareHuman ( false , i , skill ) ;
46453: LD_INT 0
46455: PPUSH
46456: LD_VAR 0 8
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: CALL_OW 380
// un := CreateHuman ;
46470: LD_ADDR_VAR 0 14
46474: PUSH
46475: CALL_OW 44
46479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46480: LD_ADDR_VAR 0 7
46484: PUSH
46485: LD_VAR 0 7
46489: PPUSH
46490: LD_INT 1
46492: PPUSH
46493: LD_VAR 0 14
46497: PPUSH
46498: CALL_OW 2
46502: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46503: LD_VAR 0 14
46507: PPUSH
46508: LD_VAR 0 12
46512: PUSH
46513: LD_INT 1
46515: ARRAY
46516: PPUSH
46517: CALL_OW 52
// end ;
46521: GO 46160
46523: POP
46524: POP
// end ;
46525: GO 45462
46527: POP
46528: POP
// result := result ^ buildings ;
46529: LD_ADDR_VAR 0 7
46533: PUSH
46534: LD_VAR 0 7
46538: PUSH
46539: LD_VAR 0 18
46543: ADD
46544: ST_TO_ADDR
// end else
46545: GO 46688
// begin for i = 1 to personel do
46547: LD_ADDR_VAR 0 8
46551: PUSH
46552: DOUBLE
46553: LD_INT 1
46555: DEC
46556: ST_TO_ADDR
46557: LD_VAR 0 6
46561: PUSH
46562: FOR_TO
46563: IFFALSE 46686
// begin if i > 4 then
46565: LD_VAR 0 8
46569: PUSH
46570: LD_INT 4
46572: GREATER
46573: IFFALSE 46577
// break ;
46575: GO 46686
// x := personel [ i ] ;
46577: LD_ADDR_VAR 0 13
46581: PUSH
46582: LD_VAR 0 6
46586: PUSH
46587: LD_VAR 0 8
46591: ARRAY
46592: ST_TO_ADDR
// if x = - 1 then
46593: LD_VAR 0 13
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: EQUAL
46602: IFFALSE 46606
// continue ;
46604: GO 46562
// PrepareHuman ( false , i , skill ) ;
46606: LD_INT 0
46608: PPUSH
46609: LD_VAR 0 8
46613: PPUSH
46614: LD_VAR 0 4
46618: PPUSH
46619: CALL_OW 380
// un := CreateHuman ;
46623: LD_ADDR_VAR 0 14
46627: PUSH
46628: CALL_OW 44
46632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46633: LD_VAR 0 14
46637: PPUSH
46638: LD_VAR 0 1
46642: PPUSH
46643: CALL_OW 250
46647: PPUSH
46648: LD_VAR 0 1
46652: PPUSH
46653: CALL_OW 251
46657: PPUSH
46658: LD_INT 10
46660: PPUSH
46661: LD_INT 0
46663: PPUSH
46664: CALL_OW 50
// result := result ^ un ;
46668: LD_ADDR_VAR 0 7
46672: PUSH
46673: LD_VAR 0 7
46677: PUSH
46678: LD_VAR 0 14
46682: ADD
46683: ST_TO_ADDR
// end ;
46684: GO 46562
46686: POP
46687: POP
// end ; end ;
46688: LD_VAR 0 7
46692: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46693: LD_INT 0
46695: PPUSH
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
46700: PPUSH
46701: PPUSH
46702: PPUSH
46703: PPUSH
46704: PPUSH
46705: PPUSH
46706: PPUSH
46707: PPUSH
46708: PPUSH
46709: PPUSH
46710: PPUSH
// result := false ;
46711: LD_ADDR_VAR 0 3
46715: PUSH
46716: LD_INT 0
46718: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46719: LD_VAR 0 1
46723: NOT
46724: PUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 266
46734: PUSH
46735: LD_INT 32
46737: PUSH
46738: LD_INT 33
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: IN
46745: NOT
46746: OR
46747: IFFALSE 46751
// exit ;
46749: GO 47860
// nat := GetNation ( tower ) ;
46751: LD_ADDR_VAR 0 12
46755: PUSH
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 248
46765: ST_TO_ADDR
// side := GetSide ( tower ) ;
46766: LD_ADDR_VAR 0 16
46770: PUSH
46771: LD_VAR 0 1
46775: PPUSH
46776: CALL_OW 255
46780: ST_TO_ADDR
// x := GetX ( tower ) ;
46781: LD_ADDR_VAR 0 10
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 250
46795: ST_TO_ADDR
// y := GetY ( tower ) ;
46796: LD_ADDR_VAR 0 11
46800: PUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL_OW 251
46810: ST_TO_ADDR
// if not x or not y then
46811: LD_VAR 0 10
46815: NOT
46816: PUSH
46817: LD_VAR 0 11
46821: NOT
46822: OR
46823: IFFALSE 46827
// exit ;
46825: GO 47860
// weapon := 0 ;
46827: LD_ADDR_VAR 0 18
46831: PUSH
46832: LD_INT 0
46834: ST_TO_ADDR
// fac_list := [ ] ;
46835: LD_ADDR_VAR 0 17
46839: PUSH
46840: EMPTY
46841: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46842: LD_ADDR_VAR 0 6
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 274
46856: PPUSH
46857: LD_VAR 0 2
46861: PPUSH
46862: LD_INT 0
46864: PPUSH
46865: CALL 44431 0 3
46869: PPUSH
46870: LD_INT 30
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PPUSH
46880: CALL_OW 72
46884: ST_TO_ADDR
// if not factories then
46885: LD_VAR 0 6
46889: NOT
46890: IFFALSE 46894
// exit ;
46892: GO 47860
// for i in factories do
46894: LD_ADDR_VAR 0 8
46898: PUSH
46899: LD_VAR 0 6
46903: PUSH
46904: FOR_IN
46905: IFFALSE 46930
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46907: LD_ADDR_VAR 0 17
46911: PUSH
46912: LD_VAR 0 17
46916: PUSH
46917: LD_VAR 0 8
46921: PPUSH
46922: CALL_OW 478
46926: UNION
46927: ST_TO_ADDR
46928: GO 46904
46930: POP
46931: POP
// if not fac_list then
46932: LD_VAR 0 17
46936: NOT
46937: IFFALSE 46941
// exit ;
46939: GO 47860
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46941: LD_ADDR_VAR 0 5
46945: PUSH
46946: LD_INT 4
46948: PUSH
46949: LD_INT 5
46951: PUSH
46952: LD_INT 9
46954: PUSH
46955: LD_INT 10
46957: PUSH
46958: LD_INT 6
46960: PUSH
46961: LD_INT 7
46963: PUSH
46964: LD_INT 11
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 27
46978: PUSH
46979: LD_INT 28
46981: PUSH
46982: LD_INT 26
46984: PUSH
46985: LD_INT 30
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 43
46996: PUSH
46997: LD_INT 44
46999: PUSH
47000: LD_INT 46
47002: PUSH
47003: LD_INT 45
47005: PUSH
47006: LD_INT 47
47008: PUSH
47009: LD_INT 49
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: PUSH
47025: LD_VAR 0 12
47029: ARRAY
47030: ST_TO_ADDR
// list := list isect fac_list ;
47031: LD_ADDR_VAR 0 5
47035: PUSH
47036: LD_VAR 0 5
47040: PUSH
47041: LD_VAR 0 17
47045: ISECT
47046: ST_TO_ADDR
// if not list then
47047: LD_VAR 0 5
47051: NOT
47052: IFFALSE 47056
// exit ;
47054: GO 47860
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47056: LD_VAR 0 12
47060: PUSH
47061: LD_INT 3
47063: EQUAL
47064: PUSH
47065: LD_INT 49
47067: PUSH
47068: LD_VAR 0 5
47072: IN
47073: AND
47074: PUSH
47075: LD_INT 31
47077: PPUSH
47078: LD_VAR 0 16
47082: PPUSH
47083: CALL_OW 321
47087: PUSH
47088: LD_INT 2
47090: EQUAL
47091: AND
47092: IFFALSE 47152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47094: LD_INT 22
47096: PUSH
47097: LD_VAR 0 16
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 35
47108: PUSH
47109: LD_INT 49
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 91
47118: PUSH
47119: LD_VAR 0 1
47123: PUSH
47124: LD_INT 10
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: PPUSH
47137: CALL_OW 69
47141: NOT
47142: IFFALSE 47152
// weapon := ru_time_lapser ;
47144: LD_ADDR_VAR 0 18
47148: PUSH
47149: LD_INT 49
47151: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47152: LD_VAR 0 12
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: IN
47167: PUSH
47168: LD_INT 11
47170: PUSH
47171: LD_VAR 0 5
47175: IN
47176: PUSH
47177: LD_INT 30
47179: PUSH
47180: LD_VAR 0 5
47184: IN
47185: OR
47186: AND
47187: PUSH
47188: LD_INT 6
47190: PPUSH
47191: LD_VAR 0 16
47195: PPUSH
47196: CALL_OW 321
47200: PUSH
47201: LD_INT 2
47203: EQUAL
47204: AND
47205: IFFALSE 47370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47207: LD_INT 22
47209: PUSH
47210: LD_VAR 0 16
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 35
47224: PUSH
47225: LD_INT 11
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 35
47234: PUSH
47235: LD_INT 30
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 91
47249: PUSH
47250: LD_VAR 0 1
47254: PUSH
47255: LD_INT 18
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: PPUSH
47268: CALL_OW 69
47272: NOT
47273: PUSH
47274: LD_INT 22
47276: PUSH
47277: LD_VAR 0 16
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 30
47291: PUSH
47292: LD_INT 32
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 30
47301: PUSH
47302: LD_INT 33
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 91
47316: PUSH
47317: LD_VAR 0 1
47321: PUSH
47322: LD_INT 12
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: PPUSH
47338: CALL_OW 69
47342: PUSH
47343: LD_INT 2
47345: GREATER
47346: AND
47347: IFFALSE 47370
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47349: LD_ADDR_VAR 0 18
47353: PUSH
47354: LD_INT 11
47356: PUSH
47357: LD_INT 30
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_VAR 0 12
47368: ARRAY
47369: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47370: LD_VAR 0 18
47374: NOT
47375: PUSH
47376: LD_INT 40
47378: PPUSH
47379: LD_VAR 0 16
47383: PPUSH
47384: CALL_OW 321
47388: PUSH
47389: LD_INT 2
47391: EQUAL
47392: AND
47393: PUSH
47394: LD_INT 7
47396: PUSH
47397: LD_VAR 0 5
47401: IN
47402: PUSH
47403: LD_INT 28
47405: PUSH
47406: LD_VAR 0 5
47410: IN
47411: OR
47412: PUSH
47413: LD_INT 45
47415: PUSH
47416: LD_VAR 0 5
47420: IN
47421: OR
47422: AND
47423: IFFALSE 47677
// begin hex := GetHexInfo ( x , y ) ;
47425: LD_ADDR_VAR 0 4
47429: PUSH
47430: LD_VAR 0 10
47434: PPUSH
47435: LD_VAR 0 11
47439: PPUSH
47440: CALL_OW 546
47444: ST_TO_ADDR
// if hex [ 1 ] then
47445: LD_VAR 0 4
47449: PUSH
47450: LD_INT 1
47452: ARRAY
47453: IFFALSE 47457
// exit ;
47455: GO 47860
// height := hex [ 2 ] ;
47457: LD_ADDR_VAR 0 15
47461: PUSH
47462: LD_VAR 0 4
47466: PUSH
47467: LD_INT 2
47469: ARRAY
47470: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47471: LD_ADDR_VAR 0 14
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 5
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// for i in tmp do
47494: LD_ADDR_VAR 0 8
47498: PUSH
47499: LD_VAR 0 14
47503: PUSH
47504: FOR_IN
47505: IFFALSE 47675
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47507: LD_ADDR_VAR 0 9
47511: PUSH
47512: LD_VAR 0 10
47516: PPUSH
47517: LD_VAR 0 8
47521: PPUSH
47522: LD_INT 5
47524: PPUSH
47525: CALL_OW 272
47529: PUSH
47530: LD_VAR 0 11
47534: PPUSH
47535: LD_VAR 0 8
47539: PPUSH
47540: LD_INT 5
47542: PPUSH
47543: CALL_OW 273
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47552: LD_VAR 0 9
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: LD_VAR 0 9
47565: PUSH
47566: LD_INT 2
47568: ARRAY
47569: PPUSH
47570: CALL_OW 488
47574: IFFALSE 47673
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47576: LD_ADDR_VAR 0 4
47580: PUSH
47581: LD_VAR 0 9
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PPUSH
47590: LD_VAR 0 9
47594: PUSH
47595: LD_INT 2
47597: ARRAY
47598: PPUSH
47599: CALL_OW 546
47603: ST_TO_ADDR
// if hex [ 1 ] then
47604: LD_VAR 0 4
47608: PUSH
47609: LD_INT 1
47611: ARRAY
47612: IFFALSE 47616
// continue ;
47614: GO 47504
// h := hex [ 2 ] ;
47616: LD_ADDR_VAR 0 13
47620: PUSH
47621: LD_VAR 0 4
47625: PUSH
47626: LD_INT 2
47628: ARRAY
47629: ST_TO_ADDR
// if h + 7 < height then
47630: LD_VAR 0 13
47634: PUSH
47635: LD_INT 7
47637: PLUS
47638: PUSH
47639: LD_VAR 0 15
47643: LESS
47644: IFFALSE 47673
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47646: LD_ADDR_VAR 0 18
47650: PUSH
47651: LD_INT 7
47653: PUSH
47654: LD_INT 28
47656: PUSH
47657: LD_INT 45
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: PUSH
47665: LD_VAR 0 12
47669: ARRAY
47670: ST_TO_ADDR
// break ;
47671: GO 47675
// end ; end ; end ;
47673: GO 47504
47675: POP
47676: POP
// end ; if not weapon then
47677: LD_VAR 0 18
47681: NOT
47682: IFFALSE 47742
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47684: LD_ADDR_VAR 0 5
47688: PUSH
47689: LD_VAR 0 5
47693: PUSH
47694: LD_INT 11
47696: PUSH
47697: LD_INT 30
47699: PUSH
47700: LD_INT 49
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: DIFF
47708: ST_TO_ADDR
// if not list then
47709: LD_VAR 0 5
47713: NOT
47714: IFFALSE 47718
// exit ;
47716: GO 47860
// weapon := list [ rand ( 1 , list ) ] ;
47718: LD_ADDR_VAR 0 18
47722: PUSH
47723: LD_VAR 0 5
47727: PUSH
47728: LD_INT 1
47730: PPUSH
47731: LD_VAR 0 5
47735: PPUSH
47736: CALL_OW 12
47740: ARRAY
47741: ST_TO_ADDR
// end ; if weapon then
47742: LD_VAR 0 18
47746: IFFALSE 47860
// begin tmp := CostOfWeapon ( weapon ) ;
47748: LD_ADDR_VAR 0 14
47752: PUSH
47753: LD_VAR 0 18
47757: PPUSH
47758: CALL_OW 451
47762: ST_TO_ADDR
// j := GetBase ( tower ) ;
47763: LD_ADDR_VAR 0 9
47767: PUSH
47768: LD_VAR 0 1
47772: PPUSH
47773: CALL_OW 274
47777: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47778: LD_VAR 0 9
47782: PPUSH
47783: LD_INT 1
47785: PPUSH
47786: CALL_OW 275
47790: PUSH
47791: LD_VAR 0 14
47795: PUSH
47796: LD_INT 1
47798: ARRAY
47799: GREATEREQUAL
47800: PUSH
47801: LD_VAR 0 9
47805: PPUSH
47806: LD_INT 2
47808: PPUSH
47809: CALL_OW 275
47813: PUSH
47814: LD_VAR 0 14
47818: PUSH
47819: LD_INT 2
47821: ARRAY
47822: GREATEREQUAL
47823: AND
47824: PUSH
47825: LD_VAR 0 9
47829: PPUSH
47830: LD_INT 3
47832: PPUSH
47833: CALL_OW 275
47837: PUSH
47838: LD_VAR 0 14
47842: PUSH
47843: LD_INT 3
47845: ARRAY
47846: GREATEREQUAL
47847: AND
47848: IFFALSE 47860
// result := weapon ;
47850: LD_ADDR_VAR 0 3
47854: PUSH
47855: LD_VAR 0 18
47859: ST_TO_ADDR
// end ; end ;
47860: LD_VAR 0 3
47864: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47865: LD_INT 0
47867: PPUSH
47868: PPUSH
// result := true ;
47869: LD_ADDR_VAR 0 3
47873: PUSH
47874: LD_INT 1
47876: ST_TO_ADDR
// if array1 = array2 then
47877: LD_VAR 0 1
47881: PUSH
47882: LD_VAR 0 2
47886: EQUAL
47887: IFFALSE 47947
// begin for i = 1 to array1 do
47889: LD_ADDR_VAR 0 4
47893: PUSH
47894: DOUBLE
47895: LD_INT 1
47897: DEC
47898: ST_TO_ADDR
47899: LD_VAR 0 1
47903: PUSH
47904: FOR_TO
47905: IFFALSE 47943
// if array1 [ i ] <> array2 [ i ] then
47907: LD_VAR 0 1
47911: PUSH
47912: LD_VAR 0 4
47916: ARRAY
47917: PUSH
47918: LD_VAR 0 2
47922: PUSH
47923: LD_VAR 0 4
47927: ARRAY
47928: NONEQUAL
47929: IFFALSE 47941
// begin result := false ;
47931: LD_ADDR_VAR 0 3
47935: PUSH
47936: LD_INT 0
47938: ST_TO_ADDR
// break ;
47939: GO 47943
// end ;
47941: GO 47904
47943: POP
47944: POP
// end else
47945: GO 47955
// result := false ;
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_INT 0
47954: ST_TO_ADDR
// end ;
47955: LD_VAR 0 3
47959: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
// if not array1 or not array2 then
47964: LD_VAR 0 1
47968: NOT
47969: PUSH
47970: LD_VAR 0 2
47974: NOT
47975: OR
47976: IFFALSE 47980
// exit ;
47978: GO 48044
// result := true ;
47980: LD_ADDR_VAR 0 3
47984: PUSH
47985: LD_INT 1
47987: ST_TO_ADDR
// for i = 1 to array1 do
47988: LD_ADDR_VAR 0 4
47992: PUSH
47993: DOUBLE
47994: LD_INT 1
47996: DEC
47997: ST_TO_ADDR
47998: LD_VAR 0 1
48002: PUSH
48003: FOR_TO
48004: IFFALSE 48042
// if array1 [ i ] <> array2 [ i ] then
48006: LD_VAR 0 1
48010: PUSH
48011: LD_VAR 0 4
48015: ARRAY
48016: PUSH
48017: LD_VAR 0 2
48021: PUSH
48022: LD_VAR 0 4
48026: ARRAY
48027: NONEQUAL
48028: IFFALSE 48040
// begin result := false ;
48030: LD_ADDR_VAR 0 3
48034: PUSH
48035: LD_INT 0
48037: ST_TO_ADDR
// break ;
48038: GO 48042
// end ;
48040: GO 48003
48042: POP
48043: POP
// end ;
48044: LD_VAR 0 3
48048: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48049: LD_INT 0
48051: PPUSH
48052: PPUSH
48053: PPUSH
// pom := GetBase ( fac ) ;
48054: LD_ADDR_VAR 0 5
48058: PUSH
48059: LD_VAR 0 1
48063: PPUSH
48064: CALL_OW 274
48068: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48069: LD_ADDR_VAR 0 4
48073: PUSH
48074: LD_VAR 0 2
48078: PUSH
48079: LD_INT 1
48081: ARRAY
48082: PPUSH
48083: LD_VAR 0 2
48087: PUSH
48088: LD_INT 2
48090: ARRAY
48091: PPUSH
48092: LD_VAR 0 2
48096: PUSH
48097: LD_INT 3
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 2
48105: PUSH
48106: LD_INT 4
48108: ARRAY
48109: PPUSH
48110: CALL_OW 449
48114: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48115: LD_ADDR_VAR 0 3
48119: PUSH
48120: LD_VAR 0 5
48124: PPUSH
48125: LD_INT 1
48127: PPUSH
48128: CALL_OW 275
48132: PUSH
48133: LD_VAR 0 4
48137: PUSH
48138: LD_INT 1
48140: ARRAY
48141: GREATEREQUAL
48142: PUSH
48143: LD_VAR 0 5
48147: PPUSH
48148: LD_INT 2
48150: PPUSH
48151: CALL_OW 275
48155: PUSH
48156: LD_VAR 0 4
48160: PUSH
48161: LD_INT 2
48163: ARRAY
48164: GREATEREQUAL
48165: AND
48166: PUSH
48167: LD_VAR 0 5
48171: PPUSH
48172: LD_INT 3
48174: PPUSH
48175: CALL_OW 275
48179: PUSH
48180: LD_VAR 0 4
48184: PUSH
48185: LD_INT 3
48187: ARRAY
48188: GREATEREQUAL
48189: AND
48190: ST_TO_ADDR
// end ;
48191: LD_VAR 0 3
48195: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48196: LD_INT 0
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
// pom := GetBase ( building ) ;
48202: LD_ADDR_VAR 0 3
48206: PUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: CALL_OW 274
48216: ST_TO_ADDR
// if not pom then
48217: LD_VAR 0 3
48221: NOT
48222: IFFALSE 48226
// exit ;
48224: GO 48396
// btype := GetBType ( building ) ;
48226: LD_ADDR_VAR 0 5
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: CALL_OW 266
48240: ST_TO_ADDR
// if btype = b_armoury then
48241: LD_VAR 0 5
48245: PUSH
48246: LD_INT 4
48248: EQUAL
48249: IFFALSE 48259
// btype := b_barracks ;
48251: LD_ADDR_VAR 0 5
48255: PUSH
48256: LD_INT 5
48258: ST_TO_ADDR
// if btype = b_depot then
48259: LD_VAR 0 5
48263: PUSH
48264: LD_INT 0
48266: EQUAL
48267: IFFALSE 48277
// btype := b_warehouse ;
48269: LD_ADDR_VAR 0 5
48273: PUSH
48274: LD_INT 1
48276: ST_TO_ADDR
// if btype = b_workshop then
48277: LD_VAR 0 5
48281: PUSH
48282: LD_INT 2
48284: EQUAL
48285: IFFALSE 48295
// btype := b_factory ;
48287: LD_ADDR_VAR 0 5
48291: PUSH
48292: LD_INT 3
48294: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48295: LD_ADDR_VAR 0 4
48299: PUSH
48300: LD_VAR 0 5
48304: PPUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 248
48314: PPUSH
48315: CALL_OW 450
48319: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48320: LD_ADDR_VAR 0 2
48324: PUSH
48325: LD_VAR 0 3
48329: PPUSH
48330: LD_INT 1
48332: PPUSH
48333: CALL_OW 275
48337: PUSH
48338: LD_VAR 0 4
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: GREATEREQUAL
48347: PUSH
48348: LD_VAR 0 3
48352: PPUSH
48353: LD_INT 2
48355: PPUSH
48356: CALL_OW 275
48360: PUSH
48361: LD_VAR 0 4
48365: PUSH
48366: LD_INT 2
48368: ARRAY
48369: GREATEREQUAL
48370: AND
48371: PUSH
48372: LD_VAR 0 3
48376: PPUSH
48377: LD_INT 3
48379: PPUSH
48380: CALL_OW 275
48384: PUSH
48385: LD_VAR 0 4
48389: PUSH
48390: LD_INT 3
48392: ARRAY
48393: GREATEREQUAL
48394: AND
48395: ST_TO_ADDR
// end ;
48396: LD_VAR 0 2
48400: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48401: LD_INT 0
48403: PPUSH
48404: PPUSH
48405: PPUSH
// pom := GetBase ( building ) ;
48406: LD_ADDR_VAR 0 4
48410: PUSH
48411: LD_VAR 0 1
48415: PPUSH
48416: CALL_OW 274
48420: ST_TO_ADDR
// if not pom then
48421: LD_VAR 0 4
48425: NOT
48426: IFFALSE 48430
// exit ;
48428: GO 48531
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48430: LD_ADDR_VAR 0 5
48434: PUSH
48435: LD_VAR 0 2
48439: PPUSH
48440: LD_VAR 0 1
48444: PPUSH
48445: CALL_OW 248
48449: PPUSH
48450: CALL_OW 450
48454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48455: LD_ADDR_VAR 0 3
48459: PUSH
48460: LD_VAR 0 4
48464: PPUSH
48465: LD_INT 1
48467: PPUSH
48468: CALL_OW 275
48472: PUSH
48473: LD_VAR 0 5
48477: PUSH
48478: LD_INT 1
48480: ARRAY
48481: GREATEREQUAL
48482: PUSH
48483: LD_VAR 0 4
48487: PPUSH
48488: LD_INT 2
48490: PPUSH
48491: CALL_OW 275
48495: PUSH
48496: LD_VAR 0 5
48500: PUSH
48501: LD_INT 2
48503: ARRAY
48504: GREATEREQUAL
48505: AND
48506: PUSH
48507: LD_VAR 0 4
48511: PPUSH
48512: LD_INT 3
48514: PPUSH
48515: CALL_OW 275
48519: PUSH
48520: LD_VAR 0 5
48524: PUSH
48525: LD_INT 3
48527: ARRAY
48528: GREATEREQUAL
48529: AND
48530: ST_TO_ADDR
// end ;
48531: LD_VAR 0 3
48535: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
// result := false ;
48549: LD_ADDR_VAR 0 8
48553: PUSH
48554: LD_INT 0
48556: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48557: LD_VAR 0 5
48561: NOT
48562: PUSH
48563: LD_VAR 0 1
48567: NOT
48568: OR
48569: PUSH
48570: LD_VAR 0 2
48574: NOT
48575: OR
48576: PUSH
48577: LD_VAR 0 3
48581: NOT
48582: OR
48583: IFFALSE 48587
// exit ;
48585: GO 49401
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48587: LD_ADDR_VAR 0 14
48591: PUSH
48592: LD_VAR 0 1
48596: PPUSH
48597: LD_VAR 0 2
48601: PPUSH
48602: LD_VAR 0 3
48606: PPUSH
48607: LD_VAR 0 4
48611: PPUSH
48612: LD_VAR 0 5
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: CALL_OW 248
48625: PPUSH
48626: LD_INT 0
48628: PPUSH
48629: CALL 50638 0 6
48633: ST_TO_ADDR
// if not hexes then
48634: LD_VAR 0 14
48638: NOT
48639: IFFALSE 48643
// exit ;
48641: GO 49401
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48643: LD_ADDR_VAR 0 17
48647: PUSH
48648: LD_VAR 0 5
48652: PPUSH
48653: LD_INT 22
48655: PUSH
48656: LD_VAR 0 13
48660: PPUSH
48661: CALL_OW 255
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 30
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 30
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PPUSH
48702: CALL_OW 72
48706: ST_TO_ADDR
// for i = 1 to hexes do
48707: LD_ADDR_VAR 0 9
48711: PUSH
48712: DOUBLE
48713: LD_INT 1
48715: DEC
48716: ST_TO_ADDR
48717: LD_VAR 0 14
48721: PUSH
48722: FOR_TO
48723: IFFALSE 49399
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48725: LD_ADDR_VAR 0 13
48729: PUSH
48730: LD_VAR 0 14
48734: PUSH
48735: LD_VAR 0 9
48739: ARRAY
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: PPUSH
48745: LD_VAR 0 14
48749: PUSH
48750: LD_VAR 0 9
48754: ARRAY
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: PPUSH
48760: CALL_OW 428
48764: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48765: LD_VAR 0 14
48769: PUSH
48770: LD_VAR 0 9
48774: ARRAY
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: PPUSH
48780: LD_VAR 0 14
48784: PUSH
48785: LD_VAR 0 9
48789: ARRAY
48790: PUSH
48791: LD_INT 2
48793: ARRAY
48794: PPUSH
48795: CALL_OW 351
48799: PUSH
48800: LD_VAR 0 14
48804: PUSH
48805: LD_VAR 0 9
48809: ARRAY
48810: PUSH
48811: LD_INT 1
48813: ARRAY
48814: PPUSH
48815: LD_VAR 0 14
48819: PUSH
48820: LD_VAR 0 9
48824: ARRAY
48825: PUSH
48826: LD_INT 2
48828: ARRAY
48829: PPUSH
48830: CALL_OW 488
48834: NOT
48835: OR
48836: PUSH
48837: LD_VAR 0 13
48841: PPUSH
48842: CALL_OW 247
48846: PUSH
48847: LD_INT 3
48849: EQUAL
48850: OR
48851: IFFALSE 48857
// exit ;
48853: POP
48854: POP
48855: GO 49401
// if not tmp then
48857: LD_VAR 0 13
48861: NOT
48862: IFFALSE 48866
// continue ;
48864: GO 48722
// result := true ;
48866: LD_ADDR_VAR 0 8
48870: PUSH
48871: LD_INT 1
48873: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48874: LD_VAR 0 6
48878: PUSH
48879: LD_VAR 0 13
48883: PPUSH
48884: CALL_OW 247
48888: PUSH
48889: LD_INT 2
48891: EQUAL
48892: AND
48893: PUSH
48894: LD_VAR 0 13
48898: PPUSH
48899: CALL_OW 263
48903: PUSH
48904: LD_INT 1
48906: EQUAL
48907: AND
48908: IFFALSE 49072
// begin if IsDrivenBy ( tmp ) then
48910: LD_VAR 0 13
48914: PPUSH
48915: CALL_OW 311
48919: IFFALSE 48923
// continue ;
48921: GO 48722
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48923: LD_VAR 0 6
48927: PPUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 60
48933: PUSH
48934: EMPTY
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: LD_INT 55
48946: PUSH
48947: EMPTY
48948: LIST
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PPUSH
48958: CALL_OW 72
48962: IFFALSE 49070
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48964: LD_ADDR_VAR 0 18
48968: PUSH
48969: LD_VAR 0 6
48973: PPUSH
48974: LD_INT 3
48976: PUSH
48977: LD_INT 60
48979: PUSH
48980: EMPTY
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 55
48992: PUSH
48993: EMPTY
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PPUSH
49004: CALL_OW 72
49008: PUSH
49009: LD_INT 1
49011: ARRAY
49012: ST_TO_ADDR
// if IsInUnit ( driver ) then
49013: LD_VAR 0 18
49017: PPUSH
49018: CALL_OW 310
49022: IFFALSE 49033
// ComExit ( driver ) ;
49024: LD_VAR 0 18
49028: PPUSH
49029: CALL 73822 0 1
// AddComEnterUnit ( driver , tmp ) ;
49033: LD_VAR 0 18
49037: PPUSH
49038: LD_VAR 0 13
49042: PPUSH
49043: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49047: LD_VAR 0 18
49051: PPUSH
49052: LD_VAR 0 7
49056: PPUSH
49057: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49061: LD_VAR 0 18
49065: PPUSH
49066: CALL_OW 181
// end ; continue ;
49070: GO 48722
// end ; if not cleaners or not tmp in cleaners then
49072: LD_VAR 0 6
49076: NOT
49077: PUSH
49078: LD_VAR 0 13
49082: PUSH
49083: LD_VAR 0 6
49087: IN
49088: NOT
49089: OR
49090: IFFALSE 49397
// begin if dep then
49092: LD_VAR 0 17
49096: IFFALSE 49232
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49098: LD_ADDR_VAR 0 16
49102: PUSH
49103: LD_VAR 0 17
49107: PUSH
49108: LD_INT 1
49110: ARRAY
49111: PPUSH
49112: CALL_OW 250
49116: PPUSH
49117: LD_VAR 0 17
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PPUSH
49126: CALL_OW 254
49130: PPUSH
49131: LD_INT 5
49133: PPUSH
49134: CALL_OW 272
49138: PUSH
49139: LD_VAR 0 17
49143: PUSH
49144: LD_INT 1
49146: ARRAY
49147: PPUSH
49148: CALL_OW 251
49152: PPUSH
49153: LD_VAR 0 17
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PPUSH
49162: CALL_OW 254
49166: PPUSH
49167: LD_INT 5
49169: PPUSH
49170: CALL_OW 273
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49179: LD_VAR 0 16
49183: PUSH
49184: LD_INT 1
49186: ARRAY
49187: PPUSH
49188: LD_VAR 0 16
49192: PUSH
49193: LD_INT 2
49195: ARRAY
49196: PPUSH
49197: CALL_OW 488
49201: IFFALSE 49232
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49203: LD_VAR 0 13
49207: PPUSH
49208: LD_VAR 0 16
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PPUSH
49217: LD_VAR 0 16
49221: PUSH
49222: LD_INT 2
49224: ARRAY
49225: PPUSH
49226: CALL_OW 111
// continue ;
49230: GO 48722
// end ; end ; r := GetDir ( tmp ) ;
49232: LD_ADDR_VAR 0 15
49236: PUSH
49237: LD_VAR 0 13
49241: PPUSH
49242: CALL_OW 254
49246: ST_TO_ADDR
// if r = 5 then
49247: LD_VAR 0 15
49251: PUSH
49252: LD_INT 5
49254: EQUAL
49255: IFFALSE 49265
// r := 0 ;
49257: LD_ADDR_VAR 0 15
49261: PUSH
49262: LD_INT 0
49264: ST_TO_ADDR
// for j = r to 5 do
49265: LD_ADDR_VAR 0 10
49269: PUSH
49270: DOUBLE
49271: LD_VAR 0 15
49275: DEC
49276: ST_TO_ADDR
49277: LD_INT 5
49279: PUSH
49280: FOR_TO
49281: IFFALSE 49395
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49283: LD_ADDR_VAR 0 11
49287: PUSH
49288: LD_VAR 0 13
49292: PPUSH
49293: CALL_OW 250
49297: PPUSH
49298: LD_VAR 0 10
49302: PPUSH
49303: LD_INT 2
49305: PPUSH
49306: CALL_OW 272
49310: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49311: LD_ADDR_VAR 0 12
49315: PUSH
49316: LD_VAR 0 13
49320: PPUSH
49321: CALL_OW 251
49325: PPUSH
49326: LD_VAR 0 10
49330: PPUSH
49331: LD_INT 2
49333: PPUSH
49334: CALL_OW 273
49338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49339: LD_VAR 0 11
49343: PPUSH
49344: LD_VAR 0 12
49348: PPUSH
49349: CALL_OW 488
49353: PUSH
49354: LD_VAR 0 11
49358: PPUSH
49359: LD_VAR 0 12
49363: PPUSH
49364: CALL_OW 428
49368: NOT
49369: AND
49370: IFFALSE 49393
// begin ComMoveXY ( tmp , _x , _y ) ;
49372: LD_VAR 0 13
49376: PPUSH
49377: LD_VAR 0 11
49381: PPUSH
49382: LD_VAR 0 12
49386: PPUSH
49387: CALL_OW 111
// break ;
49391: GO 49395
// end ; end ;
49393: GO 49280
49395: POP
49396: POP
// end ; end ;
49397: GO 48722
49399: POP
49400: POP
// end ;
49401: LD_VAR 0 8
49405: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49406: LD_INT 0
49408: PPUSH
// result := true ;
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_INT 1
49416: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49417: LD_VAR 0 2
49421: PUSH
49422: LD_INT 24
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49436
49428: LD_INT 33
49430: DOUBLE
49431: EQUAL
49432: IFTRUE 49436
49434: GO 49461
49436: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49437: LD_ADDR_VAR 0 3
49441: PUSH
49442: LD_INT 32
49444: PPUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: CALL_OW 321
49454: PUSH
49455: LD_INT 2
49457: EQUAL
49458: ST_TO_ADDR
49459: GO 49781
49461: LD_INT 20
49463: DOUBLE
49464: EQUAL
49465: IFTRUE 49469
49467: GO 49494
49469: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49470: LD_ADDR_VAR 0 3
49474: PUSH
49475: LD_INT 6
49477: PPUSH
49478: LD_VAR 0 1
49482: PPUSH
49483: CALL_OW 321
49487: PUSH
49488: LD_INT 2
49490: EQUAL
49491: ST_TO_ADDR
49492: GO 49781
49494: LD_INT 22
49496: DOUBLE
49497: EQUAL
49498: IFTRUE 49508
49500: LD_INT 36
49502: DOUBLE
49503: EQUAL
49504: IFTRUE 49508
49506: GO 49533
49508: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49509: LD_ADDR_VAR 0 3
49513: PUSH
49514: LD_INT 15
49516: PPUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: CALL_OW 321
49526: PUSH
49527: LD_INT 2
49529: EQUAL
49530: ST_TO_ADDR
49531: GO 49781
49533: LD_INT 30
49535: DOUBLE
49536: EQUAL
49537: IFTRUE 49541
49539: GO 49566
49541: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49542: LD_ADDR_VAR 0 3
49546: PUSH
49547: LD_INT 20
49549: PPUSH
49550: LD_VAR 0 1
49554: PPUSH
49555: CALL_OW 321
49559: PUSH
49560: LD_INT 2
49562: EQUAL
49563: ST_TO_ADDR
49564: GO 49781
49566: LD_INT 28
49568: DOUBLE
49569: EQUAL
49570: IFTRUE 49580
49572: LD_INT 21
49574: DOUBLE
49575: EQUAL
49576: IFTRUE 49580
49578: GO 49605
49580: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49581: LD_ADDR_VAR 0 3
49585: PUSH
49586: LD_INT 21
49588: PPUSH
49589: LD_VAR 0 1
49593: PPUSH
49594: CALL_OW 321
49598: PUSH
49599: LD_INT 2
49601: EQUAL
49602: ST_TO_ADDR
49603: GO 49781
49605: LD_INT 16
49607: DOUBLE
49608: EQUAL
49609: IFTRUE 49613
49611: GO 49640
49613: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49614: LD_ADDR_VAR 0 3
49618: PUSH
49619: LD_EXP 60
49623: PPUSH
49624: LD_VAR 0 1
49628: PPUSH
49629: CALL_OW 321
49633: PUSH
49634: LD_INT 2
49636: EQUAL
49637: ST_TO_ADDR
49638: GO 49781
49640: LD_INT 19
49642: DOUBLE
49643: EQUAL
49644: IFTRUE 49654
49646: LD_INT 23
49648: DOUBLE
49649: EQUAL
49650: IFTRUE 49654
49652: GO 49681
49654: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49655: LD_ADDR_VAR 0 3
49659: PUSH
49660: LD_EXP 59
49664: PPUSH
49665: LD_VAR 0 1
49669: PPUSH
49670: CALL_OW 321
49674: PUSH
49675: LD_INT 2
49677: EQUAL
49678: ST_TO_ADDR
49679: GO 49781
49681: LD_INT 17
49683: DOUBLE
49684: EQUAL
49685: IFTRUE 49689
49687: GO 49714
49689: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49690: LD_ADDR_VAR 0 3
49694: PUSH
49695: LD_INT 39
49697: PPUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL_OW 321
49707: PUSH
49708: LD_INT 2
49710: EQUAL
49711: ST_TO_ADDR
49712: GO 49781
49714: LD_INT 18
49716: DOUBLE
49717: EQUAL
49718: IFTRUE 49722
49720: GO 49747
49722: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49723: LD_ADDR_VAR 0 3
49727: PUSH
49728: LD_INT 40
49730: PPUSH
49731: LD_VAR 0 1
49735: PPUSH
49736: CALL_OW 321
49740: PUSH
49741: LD_INT 2
49743: EQUAL
49744: ST_TO_ADDR
49745: GO 49781
49747: LD_INT 27
49749: DOUBLE
49750: EQUAL
49751: IFTRUE 49755
49753: GO 49780
49755: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49756: LD_ADDR_VAR 0 3
49760: PUSH
49761: LD_INT 35
49763: PPUSH
49764: LD_VAR 0 1
49768: PPUSH
49769: CALL_OW 321
49773: PUSH
49774: LD_INT 2
49776: EQUAL
49777: ST_TO_ADDR
49778: GO 49781
49780: POP
// end ;
49781: LD_VAR 0 3
49785: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49786: LD_INT 0
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
49798: PPUSH
// result := false ;
49799: LD_ADDR_VAR 0 6
49803: PUSH
49804: LD_INT 0
49806: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49807: LD_VAR 0 1
49811: NOT
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 266
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: IN
49833: NOT
49834: OR
49835: PUSH
49836: LD_VAR 0 2
49840: NOT
49841: OR
49842: PUSH
49843: LD_VAR 0 5
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 5
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: IN
49874: NOT
49875: OR
49876: PUSH
49877: LD_VAR 0 3
49881: PPUSH
49882: LD_VAR 0 4
49886: PPUSH
49887: CALL_OW 488
49891: NOT
49892: OR
49893: IFFALSE 49897
// exit ;
49895: GO 50633
// side := GetSide ( depot ) ;
49897: LD_ADDR_VAR 0 9
49901: PUSH
49902: LD_VAR 0 1
49906: PPUSH
49907: CALL_OW 255
49911: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49912: LD_VAR 0 9
49916: PPUSH
49917: LD_VAR 0 2
49921: PPUSH
49922: CALL 49406 0 2
49926: NOT
49927: IFFALSE 49931
// exit ;
49929: GO 50633
// pom := GetBase ( depot ) ;
49931: LD_ADDR_VAR 0 10
49935: PUSH
49936: LD_VAR 0 1
49940: PPUSH
49941: CALL_OW 274
49945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49946: LD_ADDR_VAR 0 11
49950: PUSH
49951: LD_VAR 0 2
49955: PPUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 248
49965: PPUSH
49966: CALL_OW 450
49970: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49971: LD_VAR 0 10
49975: PPUSH
49976: LD_INT 1
49978: PPUSH
49979: CALL_OW 275
49983: PUSH
49984: LD_VAR 0 11
49988: PUSH
49989: LD_INT 1
49991: ARRAY
49992: GREATEREQUAL
49993: PUSH
49994: LD_VAR 0 10
49998: PPUSH
49999: LD_INT 2
50001: PPUSH
50002: CALL_OW 275
50006: PUSH
50007: LD_VAR 0 11
50011: PUSH
50012: LD_INT 2
50014: ARRAY
50015: GREATEREQUAL
50016: AND
50017: PUSH
50018: LD_VAR 0 10
50022: PPUSH
50023: LD_INT 3
50025: PPUSH
50026: CALL_OW 275
50030: PUSH
50031: LD_VAR 0 11
50035: PUSH
50036: LD_INT 3
50038: ARRAY
50039: GREATEREQUAL
50040: AND
50041: NOT
50042: IFFALSE 50046
// exit ;
50044: GO 50633
// if GetBType ( depot ) = b_depot then
50046: LD_VAR 0 1
50050: PPUSH
50051: CALL_OW 266
50055: PUSH
50056: LD_INT 0
50058: EQUAL
50059: IFFALSE 50071
// dist := 28 else
50061: LD_ADDR_VAR 0 14
50065: PUSH
50066: LD_INT 28
50068: ST_TO_ADDR
50069: GO 50079
// dist := 36 ;
50071: LD_ADDR_VAR 0 14
50075: PUSH
50076: LD_INT 36
50078: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50079: LD_VAR 0 1
50083: PPUSH
50084: LD_VAR 0 3
50088: PPUSH
50089: LD_VAR 0 4
50093: PPUSH
50094: CALL_OW 297
50098: PUSH
50099: LD_VAR 0 14
50103: GREATER
50104: IFFALSE 50108
// exit ;
50106: GO 50633
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50108: LD_ADDR_VAR 0 12
50112: PUSH
50113: LD_VAR 0 2
50117: PPUSH
50118: LD_VAR 0 3
50122: PPUSH
50123: LD_VAR 0 4
50127: PPUSH
50128: LD_VAR 0 5
50132: PPUSH
50133: LD_VAR 0 1
50137: PPUSH
50138: CALL_OW 248
50142: PPUSH
50143: LD_INT 0
50145: PPUSH
50146: CALL 50638 0 6
50150: ST_TO_ADDR
// if not hexes then
50151: LD_VAR 0 12
50155: NOT
50156: IFFALSE 50160
// exit ;
50158: GO 50633
// hex := GetHexInfo ( x , y ) ;
50160: LD_ADDR_VAR 0 15
50164: PUSH
50165: LD_VAR 0 3
50169: PPUSH
50170: LD_VAR 0 4
50174: PPUSH
50175: CALL_OW 546
50179: ST_TO_ADDR
// if hex [ 1 ] then
50180: LD_VAR 0 15
50184: PUSH
50185: LD_INT 1
50187: ARRAY
50188: IFFALSE 50192
// exit ;
50190: GO 50633
// height := hex [ 2 ] ;
50192: LD_ADDR_VAR 0 13
50196: PUSH
50197: LD_VAR 0 15
50201: PUSH
50202: LD_INT 2
50204: ARRAY
50205: ST_TO_ADDR
// for i = 1 to hexes do
50206: LD_ADDR_VAR 0 7
50210: PUSH
50211: DOUBLE
50212: LD_INT 1
50214: DEC
50215: ST_TO_ADDR
50216: LD_VAR 0 12
50220: PUSH
50221: FOR_TO
50222: IFFALSE 50552
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50224: LD_VAR 0 12
50228: PUSH
50229: LD_VAR 0 7
50233: ARRAY
50234: PUSH
50235: LD_INT 1
50237: ARRAY
50238: PPUSH
50239: LD_VAR 0 12
50243: PUSH
50244: LD_VAR 0 7
50248: ARRAY
50249: PUSH
50250: LD_INT 2
50252: ARRAY
50253: PPUSH
50254: CALL_OW 488
50258: NOT
50259: PUSH
50260: LD_VAR 0 12
50264: PUSH
50265: LD_VAR 0 7
50269: ARRAY
50270: PUSH
50271: LD_INT 1
50273: ARRAY
50274: PPUSH
50275: LD_VAR 0 12
50279: PUSH
50280: LD_VAR 0 7
50284: ARRAY
50285: PUSH
50286: LD_INT 2
50288: ARRAY
50289: PPUSH
50290: CALL_OW 428
50294: PUSH
50295: LD_INT 0
50297: GREATER
50298: OR
50299: PUSH
50300: LD_VAR 0 12
50304: PUSH
50305: LD_VAR 0 7
50309: ARRAY
50310: PUSH
50311: LD_INT 1
50313: ARRAY
50314: PPUSH
50315: LD_VAR 0 12
50319: PUSH
50320: LD_VAR 0 7
50324: ARRAY
50325: PUSH
50326: LD_INT 2
50328: ARRAY
50329: PPUSH
50330: CALL_OW 351
50334: OR
50335: IFFALSE 50341
// exit ;
50337: POP
50338: POP
50339: GO 50633
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50341: LD_ADDR_VAR 0 8
50345: PUSH
50346: LD_VAR 0 12
50350: PUSH
50351: LD_VAR 0 7
50355: ARRAY
50356: PUSH
50357: LD_INT 1
50359: ARRAY
50360: PPUSH
50361: LD_VAR 0 12
50365: PUSH
50366: LD_VAR 0 7
50370: ARRAY
50371: PUSH
50372: LD_INT 2
50374: ARRAY
50375: PPUSH
50376: CALL_OW 546
50380: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50381: LD_VAR 0 8
50385: PUSH
50386: LD_INT 1
50388: ARRAY
50389: PUSH
50390: LD_VAR 0 8
50394: PUSH
50395: LD_INT 2
50397: ARRAY
50398: PUSH
50399: LD_VAR 0 13
50403: PUSH
50404: LD_INT 2
50406: PLUS
50407: GREATER
50408: OR
50409: PUSH
50410: LD_VAR 0 8
50414: PUSH
50415: LD_INT 2
50417: ARRAY
50418: PUSH
50419: LD_VAR 0 13
50423: PUSH
50424: LD_INT 2
50426: MINUS
50427: LESS
50428: OR
50429: PUSH
50430: LD_VAR 0 8
50434: PUSH
50435: LD_INT 3
50437: ARRAY
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 8
50444: PUSH
50445: LD_INT 9
50447: PUSH
50448: LD_INT 10
50450: PUSH
50451: LD_INT 11
50453: PUSH
50454: LD_INT 12
50456: PUSH
50457: LD_INT 13
50459: PUSH
50460: LD_INT 16
50462: PUSH
50463: LD_INT 17
50465: PUSH
50466: LD_INT 18
50468: PUSH
50469: LD_INT 19
50471: PUSH
50472: LD_INT 20
50474: PUSH
50475: LD_INT 21
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: IN
50493: NOT
50494: OR
50495: PUSH
50496: LD_VAR 0 8
50500: PUSH
50501: LD_INT 5
50503: ARRAY
50504: NOT
50505: OR
50506: PUSH
50507: LD_VAR 0 8
50511: PUSH
50512: LD_INT 6
50514: ARRAY
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 7
50524: PUSH
50525: LD_INT 9
50527: PUSH
50528: LD_INT 10
50530: PUSH
50531: LD_INT 11
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: IN
50542: NOT
50543: OR
50544: IFFALSE 50550
// exit ;
50546: POP
50547: POP
50548: GO 50633
// end ;
50550: GO 50221
50552: POP
50553: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50554: LD_VAR 0 9
50558: PPUSH
50559: LD_VAR 0 3
50563: PPUSH
50564: LD_VAR 0 4
50568: PPUSH
50569: LD_INT 20
50571: PPUSH
50572: CALL 42579 0 4
50576: PUSH
50577: LD_INT 4
50579: ARRAY
50580: IFFALSE 50584
// exit ;
50582: GO 50633
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50584: LD_VAR 0 2
50588: PUSH
50589: LD_INT 29
50591: PUSH
50592: LD_INT 30
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: IN
50599: PUSH
50600: LD_VAR 0 3
50604: PPUSH
50605: LD_VAR 0 4
50609: PPUSH
50610: LD_VAR 0 9
50614: PPUSH
50615: CALL_OW 440
50619: NOT
50620: AND
50621: IFFALSE 50625
// exit ;
50623: GO 50633
// result := true ;
50625: LD_ADDR_VAR 0 6
50629: PUSH
50630: LD_INT 1
50632: ST_TO_ADDR
// end ;
50633: LD_VAR 0 6
50637: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50638: LD_INT 0
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
// result = [ ] ;
50698: LD_ADDR_VAR 0 7
50702: PUSH
50703: EMPTY
50704: ST_TO_ADDR
// temp_list = [ ] ;
50705: LD_ADDR_VAR 0 9
50709: PUSH
50710: EMPTY
50711: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50712: LD_VAR 0 4
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 4
50731: PUSH
50732: LD_INT 5
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: IN
50743: NOT
50744: PUSH
50745: LD_VAR 0 1
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: IN
50760: PUSH
50761: LD_VAR 0 5
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: IN
50780: NOT
50781: AND
50782: OR
50783: IFFALSE 50787
// exit ;
50785: GO 69178
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50787: LD_VAR 0 1
50791: PUSH
50792: LD_INT 6
50794: PUSH
50795: LD_INT 7
50797: PUSH
50798: LD_INT 8
50800: PUSH
50801: LD_INT 13
50803: PUSH
50804: LD_INT 12
50806: PUSH
50807: LD_INT 15
50809: PUSH
50810: LD_INT 11
50812: PUSH
50813: LD_INT 14
50815: PUSH
50816: LD_INT 10
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: IN
50830: IFFALSE 50840
// btype = b_lab ;
50832: LD_ADDR_VAR 0 1
50836: PUSH
50837: LD_INT 6
50839: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50840: LD_VAR 0 6
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: IN
50859: NOT
50860: PUSH
50861: LD_VAR 0 1
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: LD_INT 6
50880: PUSH
50881: LD_INT 36
50883: PUSH
50884: LD_INT 4
50886: PUSH
50887: LD_INT 5
50889: PUSH
50890: LD_INT 31
50892: PUSH
50893: LD_INT 32
50895: PUSH
50896: LD_INT 33
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: IN
50912: NOT
50913: PUSH
50914: LD_VAR 0 6
50918: PUSH
50919: LD_INT 1
50921: EQUAL
50922: AND
50923: OR
50924: PUSH
50925: LD_VAR 0 1
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: IN
50940: NOT
50941: PUSH
50942: LD_VAR 0 6
50946: PUSH
50947: LD_INT 2
50949: EQUAL
50950: AND
50951: OR
50952: IFFALSE 50962
// mode = 0 ;
50954: LD_ADDR_VAR 0 6
50958: PUSH
50959: LD_INT 0
50961: ST_TO_ADDR
// case mode of 0 :
50962: LD_VAR 0 6
50966: PUSH
50967: LD_INT 0
50969: DOUBLE
50970: EQUAL
50971: IFTRUE 50975
50973: GO 62428
50975: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50976: LD_ADDR_VAR 0 11
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51169: LD_ADDR_VAR 0 12
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51365: LD_ADDR_VAR 0 13
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51564: LD_ADDR_VAR 0 14
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51760: LD_ADDR_VAR 0 15
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51953: LD_ADDR_VAR 0 16
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52146: LD_ADDR_VAR 0 17
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52376: LD_ADDR_VAR 0 18
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52606: LD_ADDR_VAR 0 19
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52836: LD_ADDR_VAR 0 20
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 21
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53296: LD_ADDR_VAR 0 22
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53526: LD_ADDR_VAR 0 23
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53806: LD_ADDR_VAR 0 24
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54082: LD_ADDR_VAR 0 25
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54356: LD_ADDR_VAR 0 26
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54632: LD_ADDR_VAR 0 27
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54912: LD_ADDR_VAR 0 28
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55194: LD_ADDR_VAR 0 29
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55473: LD_ADDR_VAR 0 30
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55751: LD_ADDR_VAR 0 31
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56029: LD_ADDR_VAR 0 32
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56307: LD_ADDR_VAR 0 33
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56586: LD_ADDR_VAR 0 34
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56866: LD_ADDR_VAR 0 35
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56978: LD_ADDR_VAR 0 36
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57090: LD_ADDR_VAR 0 37
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57202: LD_ADDR_VAR 0 38
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57314: LD_ADDR_VAR 0 39
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57426: LD_ADDR_VAR 0 40
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57538: LD_ADDR_VAR 0 41
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57888: LD_ADDR_VAR 0 42
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: LD_INT 3
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58238: LD_ADDR_VAR 0 43
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 3
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58586: LD_ADDR_VAR 0 44
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 3
58883: NEG
58884: PUSH
58885: LD_INT 2
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58936: LD_ADDR_VAR 0 45
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: LD_INT 3
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59286: LD_ADDR_VAR 0 46
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59634: LD_ADDR_VAR 0 47
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59785: LD_ADDR_VAR 0 48
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59932: LD_ADDR_VAR 0 49
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60076: LD_ADDR_VAR 0 50
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60220: LD_ADDR_VAR 0 51
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60367: LD_ADDR_VAR 0 52
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60518: LD_ADDR_VAR 0 53
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60748: LD_ADDR_VAR 0 54
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60978: LD_ADDR_VAR 0 55
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61208: LD_ADDR_VAR 0 56
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61438: LD_ADDR_VAR 0 57
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61668: LD_ADDR_VAR 0 58
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61898: LD_ADDR_VAR 0 59
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61986: LD_ADDR_VAR 0 60
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62074: LD_ADDR_VAR 0 61
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62162: LD_ADDR_VAR 0 62
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62250: LD_ADDR_VAR 0 63
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62338: LD_ADDR_VAR 0 64
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: ST_TO_ADDR
// end ; 1 :
62426: GO 68323
62428: LD_INT 1
62430: DOUBLE
62431: EQUAL
62432: IFTRUE 62436
62434: GO 65059
62436: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62437: LD_ADDR_VAR 0 11
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62481: LD_ADDR_VAR 0 12
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62522: LD_ADDR_VAR 0 13
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62562: LD_ADDR_VAR 0 14
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62603: LD_ADDR_VAR 0 15
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 3
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62647: LD_ADDR_VAR 0 16
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: LIST
62692: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62693: LD_ADDR_VAR 0 17
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62737: LD_ADDR_VAR 0 18
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62778: LD_ADDR_VAR 0 19
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62818: LD_ADDR_VAR 0 20
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62859: LD_ADDR_VAR 0 21
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62903: LD_ADDR_VAR 0 22
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62949: LD_ADDR_VAR 0 23
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 4
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62993: LD_ADDR_VAR 0 24
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 3
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63034: LD_ADDR_VAR 0 25
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 4
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63074: LD_ADDR_VAR 0 26
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63115: LD_ADDR_VAR 0 27
63119: PUSH
63120: LD_INT 3
63122: NEG
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 4
63144: NEG
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63159: LD_ADDR_VAR 0 28
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: LD_INT 4
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: NEG
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63205: LD_ADDR_VAR 0 29
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 5
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 5
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 4
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 6
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 6
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 5
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63360: LD_ADDR_VAR 0 30
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 4
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 4
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 4
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 5
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 5
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 6
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 6
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63503: LD_ADDR_VAR 0 31
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 4
63550: PUSH
63551: LD_INT 4
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: LD_INT 4
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 5
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 6
63600: PUSH
63601: LD_INT 5
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 6
63610: PUSH
63611: LD_INT 6
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: LD_INT 6
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63642: LD_ADDR_VAR 0 32
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 3
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 4
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 4
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 5
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 5
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 4
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 6
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 6
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 5
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63785: LD_ADDR_VAR 0 33
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 3
63803: NEG
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 3
63814: NEG
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 4
63848: NEG
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 5
63871: NEG
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 5
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 5
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 6
63905: NEG
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 6
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63940: LD_ADDR_VAR 0 34
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 4
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 4
63995: NEG
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: NEG
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 4
64019: NEG
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 5
64031: NEG
64032: PUSH
64033: LD_INT 4
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 5
64043: NEG
64044: PUSH
64045: LD_INT 5
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 5
64055: NEG
64056: PUSH
64057: LD_INT 6
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 6
64067: NEG
64068: PUSH
64069: LD_INT 5
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 6
64079: NEG
64080: PUSH
64081: LD_INT 6
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64103: LD_ADDR_VAR 0 41
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64147: LD_ADDR_VAR 0 42
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 3
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64188: LD_ADDR_VAR 0 43
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: LD_INT 3
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64228: LD_ADDR_VAR 0 44
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64269: LD_ADDR_VAR 0 45
64273: PUSH
64274: LD_INT 2
64276: NEG
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64313: LD_ADDR_VAR 0 46
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: LD_INT 3
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64359: LD_ADDR_VAR 0 47
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 3
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64392: LD_ADDR_VAR 0 48
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64423: LD_ADDR_VAR 0 49
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64452: LD_ADDR_VAR 0 50
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64481: LD_ADDR_VAR 0 51
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64512: LD_ADDR_VAR 0 52
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64545: LD_ADDR_VAR 0 53
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 3
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64589: LD_ADDR_VAR 0 54
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64630: LD_ADDR_VAR 0 55
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64670: LD_ADDR_VAR 0 56
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64711: LD_ADDR_VAR 0 57
64715: PUSH
64716: LD_INT 2
64718: NEG
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 3
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64755: LD_ADDR_VAR 0 58
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: NEG
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64801: LD_ADDR_VAR 0 59
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64845: LD_ADDR_VAR 0 60
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64886: LD_ADDR_VAR 0 61
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64926: LD_ADDR_VAR 0 62
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64967: LD_ADDR_VAR 0 63
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 2
64985: NEG
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65011: LD_ADDR_VAR 0 64
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// end ; 2 :
65057: GO 68323
65059: LD_INT 2
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65067
65065: GO 68322
65067: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65068: LD_ADDR_VAR 0 29
65072: PUSH
65073: LD_INT 4
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 5
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 5
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 3
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 5
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: LD_INT 3
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 4
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 4
65198: PUSH
65199: LD_INT 4
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: PUSH
65209: LD_INT 4
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 2
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: LD_INT 4
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 5
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 4
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 5
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 3
65396: NEG
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 4
65407: NEG
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 4
65418: NEG
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 4
65430: NEG
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 4
65453: NEG
65454: PUSH
65455: LD_INT 4
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 4
65465: NEG
65466: PUSH
65467: LD_INT 5
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: LD_INT 4
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 4
65501: NEG
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 5
65513: NEG
65514: PUSH
65515: LD_INT 4
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 5
65525: NEG
65526: PUSH
65527: LD_INT 5
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: LD_INT 5
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 5
65549: NEG
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65606: LD_ADDR_VAR 0 30
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: LD_INT 4
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 4
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 5
65633: PUSH
65634: LD_INT 4
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 5
65643: PUSH
65644: LD_INT 5
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: LD_INT 5
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 4
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 3
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 5
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 4
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: LD_INT 4
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 4
65796: NEG
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 4
65807: NEG
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 3
65830: NEG
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 4
65841: NEG
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 5
65852: NEG
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 5
65863: NEG
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 5
65875: NEG
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 4
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: NEG
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: NEG
65971: PUSH
65972: LD_INT 4
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 4
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 4
65994: NEG
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 4
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 5
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 4
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: NEG
66074: PUSH
66075: LD_INT 5
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 5
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66153: LD_ADDR_VAR 0 31
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 4
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 3
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 4
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: LD_INT 5
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 5
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 4
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 5
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 3
66253: NEG
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 4
66309: NEG
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 4
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 4
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 4
66355: NEG
66356: PUSH
66357: LD_INT 4
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 4
66367: NEG
66368: PUSH
66369: LD_INT 5
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: LD_INT 4
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 4
66403: NEG
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 5
66415: NEG
66416: PUSH
66417: LD_INT 4
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 5
66427: NEG
66428: PUSH
66429: LD_INT 5
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: LD_INT 5
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 5
66451: NEG
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 4
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 3
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 3
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 4
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: LD_INT 4
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 5
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 5
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 4
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 3
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66703: LD_ADDR_VAR 0 32
66707: PUSH
66708: LD_INT 4
66710: NEG
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 4
66721: NEG
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 4
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 5
66766: NEG
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 5
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 5
66789: NEG
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: NEG
66802: PUSH
66803: LD_INT 2
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 3
66812: NEG
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 4
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: LD_INT 3
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 4
66872: NEG
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 4
66884: NEG
66885: PUSH
66886: LD_INT 4
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: NEG
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 4
66908: NEG
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: LD_INT 4
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 5
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 4
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: LD_INT 5
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: PUSH
67000: LD_INT 3
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 2
67010: NEG
67011: PUSH
67012: LD_INT 5
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 4
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 4
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 4
67115: PUSH
67116: LD_INT 4
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 4
67125: PUSH
67126: LD_INT 3
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 5
67135: PUSH
67136: LD_INT 4
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: LD_INT 5
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 5
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: PUSH
67166: LD_INT 4
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: LD_INT 3
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67250: LD_ADDR_VAR 0 33
67254: PUSH
67255: LD_INT 4
67257: NEG
67258: PUSH
67259: LD_INT 4
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 4
67269: NEG
67270: PUSH
67271: LD_INT 5
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: NEG
67282: PUSH
67283: LD_INT 4
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 4
67305: NEG
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 5
67317: NEG
67318: PUSH
67319: LD_INT 4
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 5
67329: NEG
67330: PUSH
67331: LD_INT 5
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 3
67341: NEG
67342: PUSH
67343: LD_INT 5
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 5
67353: NEG
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: LD_INT 4
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 2
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: NEG
67456: PUSH
67457: LD_INT 4
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 4
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 4
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 5
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 5
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 3
67539: PUSH
67540: LD_INT 2
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 5
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 3
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 4
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 4
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: LD_INT 4
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: LD_INT 2
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 4
67630: PUSH
67631: LD_INT 2
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 4
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 4
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: LD_INT 5
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: LD_INT 4
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: LD_INT 5
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67788: LD_ADDR_VAR 0 34
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_INT 4
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 5
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 3
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: LD_INT 4
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: LD_INT 5
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: LD_INT 3
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 2
67885: NEG
67886: PUSH
67887: LD_INT 5
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 3
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 4
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 4
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 2
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 4
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 5
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 5
68020: PUSH
68021: LD_INT 5
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 5
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 3
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: LD_INT 4
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 4
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 2
68162: NEG
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: NEG
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 4
68218: NEG
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 5
68229: NEG
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 5
68240: NEG
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 5
68252: NEG
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: NEG
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: ST_TO_ADDR
// end ; end ;
68320: GO 68323
68322: POP
// case btype of b_depot , b_warehouse :
68323: LD_VAR 0 1
68327: PUSH
68328: LD_INT 0
68330: DOUBLE
68331: EQUAL
68332: IFTRUE 68342
68334: LD_INT 1
68336: DOUBLE
68337: EQUAL
68338: IFTRUE 68342
68340: GO 68543
68342: POP
// case nation of nation_american :
68343: LD_VAR 0 5
68347: PUSH
68348: LD_INT 1
68350: DOUBLE
68351: EQUAL
68352: IFTRUE 68356
68354: GO 68412
68356: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68357: LD_ADDR_VAR 0 9
68361: PUSH
68362: LD_VAR 0 11
68366: PUSH
68367: LD_VAR 0 12
68371: PUSH
68372: LD_VAR 0 13
68376: PUSH
68377: LD_VAR 0 14
68381: PUSH
68382: LD_VAR 0 15
68386: PUSH
68387: LD_VAR 0 16
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: PUSH
68400: LD_VAR 0 4
68404: PUSH
68405: LD_INT 1
68407: PLUS
68408: ARRAY
68409: ST_TO_ADDR
68410: GO 68541
68412: LD_INT 2
68414: DOUBLE
68415: EQUAL
68416: IFTRUE 68420
68418: GO 68476
68420: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68421: LD_ADDR_VAR 0 9
68425: PUSH
68426: LD_VAR 0 17
68430: PUSH
68431: LD_VAR 0 18
68435: PUSH
68436: LD_VAR 0 19
68440: PUSH
68441: LD_VAR 0 20
68445: PUSH
68446: LD_VAR 0 21
68450: PUSH
68451: LD_VAR 0 22
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: PUSH
68464: LD_VAR 0 4
68468: PUSH
68469: LD_INT 1
68471: PLUS
68472: ARRAY
68473: ST_TO_ADDR
68474: GO 68541
68476: LD_INT 3
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 68540
68484: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68485: LD_ADDR_VAR 0 9
68489: PUSH
68490: LD_VAR 0 23
68494: PUSH
68495: LD_VAR 0 24
68499: PUSH
68500: LD_VAR 0 25
68504: PUSH
68505: LD_VAR 0 26
68509: PUSH
68510: LD_VAR 0 27
68514: PUSH
68515: LD_VAR 0 28
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: PUSH
68528: LD_VAR 0 4
68532: PUSH
68533: LD_INT 1
68535: PLUS
68536: ARRAY
68537: ST_TO_ADDR
68538: GO 68541
68540: POP
68541: GO 69096
68543: LD_INT 2
68545: DOUBLE
68546: EQUAL
68547: IFTRUE 68557
68549: LD_INT 3
68551: DOUBLE
68552: EQUAL
68553: IFTRUE 68557
68555: GO 68613
68557: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68558: LD_ADDR_VAR 0 9
68562: PUSH
68563: LD_VAR 0 29
68567: PUSH
68568: LD_VAR 0 30
68572: PUSH
68573: LD_VAR 0 31
68577: PUSH
68578: LD_VAR 0 32
68582: PUSH
68583: LD_VAR 0 33
68587: PUSH
68588: LD_VAR 0 34
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: PUSH
68601: LD_VAR 0 4
68605: PUSH
68606: LD_INT 1
68608: PLUS
68609: ARRAY
68610: ST_TO_ADDR
68611: GO 69096
68613: LD_INT 16
68615: DOUBLE
68616: EQUAL
68617: IFTRUE 68675
68619: LD_INT 17
68621: DOUBLE
68622: EQUAL
68623: IFTRUE 68675
68625: LD_INT 18
68627: DOUBLE
68628: EQUAL
68629: IFTRUE 68675
68631: LD_INT 19
68633: DOUBLE
68634: EQUAL
68635: IFTRUE 68675
68637: LD_INT 22
68639: DOUBLE
68640: EQUAL
68641: IFTRUE 68675
68643: LD_INT 20
68645: DOUBLE
68646: EQUAL
68647: IFTRUE 68675
68649: LD_INT 21
68651: DOUBLE
68652: EQUAL
68653: IFTRUE 68675
68655: LD_INT 23
68657: DOUBLE
68658: EQUAL
68659: IFTRUE 68675
68661: LD_INT 24
68663: DOUBLE
68664: EQUAL
68665: IFTRUE 68675
68667: LD_INT 25
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68675
68673: GO 68731
68675: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68676: LD_ADDR_VAR 0 9
68680: PUSH
68681: LD_VAR 0 35
68685: PUSH
68686: LD_VAR 0 36
68690: PUSH
68691: LD_VAR 0 37
68695: PUSH
68696: LD_VAR 0 38
68700: PUSH
68701: LD_VAR 0 39
68705: PUSH
68706: LD_VAR 0 40
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: PUSH
68719: LD_VAR 0 4
68723: PUSH
68724: LD_INT 1
68726: PLUS
68727: ARRAY
68728: ST_TO_ADDR
68729: GO 69096
68731: LD_INT 6
68733: DOUBLE
68734: EQUAL
68735: IFTRUE 68787
68737: LD_INT 7
68739: DOUBLE
68740: EQUAL
68741: IFTRUE 68787
68743: LD_INT 8
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68787
68749: LD_INT 13
68751: DOUBLE
68752: EQUAL
68753: IFTRUE 68787
68755: LD_INT 12
68757: DOUBLE
68758: EQUAL
68759: IFTRUE 68787
68761: LD_INT 15
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68787
68767: LD_INT 11
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68787
68773: LD_INT 14
68775: DOUBLE
68776: EQUAL
68777: IFTRUE 68787
68779: LD_INT 10
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68787
68785: GO 68843
68787: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68788: LD_ADDR_VAR 0 9
68792: PUSH
68793: LD_VAR 0 41
68797: PUSH
68798: LD_VAR 0 42
68802: PUSH
68803: LD_VAR 0 43
68807: PUSH
68808: LD_VAR 0 44
68812: PUSH
68813: LD_VAR 0 45
68817: PUSH
68818: LD_VAR 0 46
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: PUSH
68831: LD_VAR 0 4
68835: PUSH
68836: LD_INT 1
68838: PLUS
68839: ARRAY
68840: ST_TO_ADDR
68841: GO 69096
68843: LD_INT 36
68845: DOUBLE
68846: EQUAL
68847: IFTRUE 68851
68849: GO 68907
68851: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68852: LD_ADDR_VAR 0 9
68856: PUSH
68857: LD_VAR 0 47
68861: PUSH
68862: LD_VAR 0 48
68866: PUSH
68867: LD_VAR 0 49
68871: PUSH
68872: LD_VAR 0 50
68876: PUSH
68877: LD_VAR 0 51
68881: PUSH
68882: LD_VAR 0 52
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: PUSH
68895: LD_VAR 0 4
68899: PUSH
68900: LD_INT 1
68902: PLUS
68903: ARRAY
68904: ST_TO_ADDR
68905: GO 69096
68907: LD_INT 4
68909: DOUBLE
68910: EQUAL
68911: IFTRUE 68933
68913: LD_INT 5
68915: DOUBLE
68916: EQUAL
68917: IFTRUE 68933
68919: LD_INT 34
68921: DOUBLE
68922: EQUAL
68923: IFTRUE 68933
68925: LD_INT 37
68927: DOUBLE
68928: EQUAL
68929: IFTRUE 68933
68931: GO 68989
68933: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68934: LD_ADDR_VAR 0 9
68938: PUSH
68939: LD_VAR 0 53
68943: PUSH
68944: LD_VAR 0 54
68948: PUSH
68949: LD_VAR 0 55
68953: PUSH
68954: LD_VAR 0 56
68958: PUSH
68959: LD_VAR 0 57
68963: PUSH
68964: LD_VAR 0 58
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: PUSH
68977: LD_VAR 0 4
68981: PUSH
68982: LD_INT 1
68984: PLUS
68985: ARRAY
68986: ST_TO_ADDR
68987: GO 69096
68989: LD_INT 31
68991: DOUBLE
68992: EQUAL
68993: IFTRUE 69039
68995: LD_INT 32
68997: DOUBLE
68998: EQUAL
68999: IFTRUE 69039
69001: LD_INT 33
69003: DOUBLE
69004: EQUAL
69005: IFTRUE 69039
69007: LD_INT 27
69009: DOUBLE
69010: EQUAL
69011: IFTRUE 69039
69013: LD_INT 26
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69039
69019: LD_INT 28
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69039
69025: LD_INT 29
69027: DOUBLE
69028: EQUAL
69029: IFTRUE 69039
69031: LD_INT 30
69033: DOUBLE
69034: EQUAL
69035: IFTRUE 69039
69037: GO 69095
69039: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69040: LD_ADDR_VAR 0 9
69044: PUSH
69045: LD_VAR 0 59
69049: PUSH
69050: LD_VAR 0 60
69054: PUSH
69055: LD_VAR 0 61
69059: PUSH
69060: LD_VAR 0 62
69064: PUSH
69065: LD_VAR 0 63
69069: PUSH
69070: LD_VAR 0 64
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: PUSH
69083: LD_VAR 0 4
69087: PUSH
69088: LD_INT 1
69090: PLUS
69091: ARRAY
69092: ST_TO_ADDR
69093: GO 69096
69095: POP
// temp_list2 = [ ] ;
69096: LD_ADDR_VAR 0 10
69100: PUSH
69101: EMPTY
69102: ST_TO_ADDR
// for i in temp_list do
69103: LD_ADDR_VAR 0 8
69107: PUSH
69108: LD_VAR 0 9
69112: PUSH
69113: FOR_IN
69114: IFFALSE 69166
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69116: LD_ADDR_VAR 0 10
69120: PUSH
69121: LD_VAR 0 10
69125: PUSH
69126: LD_VAR 0 8
69130: PUSH
69131: LD_INT 1
69133: ARRAY
69134: PUSH
69135: LD_VAR 0 2
69139: PLUS
69140: PUSH
69141: LD_VAR 0 8
69145: PUSH
69146: LD_INT 2
69148: ARRAY
69149: PUSH
69150: LD_VAR 0 3
69154: PLUS
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: EMPTY
69161: LIST
69162: ADD
69163: ST_TO_ADDR
69164: GO 69113
69166: POP
69167: POP
// result = temp_list2 ;
69168: LD_ADDR_VAR 0 7
69172: PUSH
69173: LD_VAR 0 10
69177: ST_TO_ADDR
// end ;
69178: LD_VAR 0 7
69182: RET
// export function EnemyInRange ( unit , dist ) ; begin
69183: LD_INT 0
69185: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69186: LD_ADDR_VAR 0 3
69190: PUSH
69191: LD_VAR 0 1
69195: PPUSH
69196: CALL_OW 255
69200: PPUSH
69201: LD_VAR 0 1
69205: PPUSH
69206: CALL_OW 250
69210: PPUSH
69211: LD_VAR 0 1
69215: PPUSH
69216: CALL_OW 251
69220: PPUSH
69221: LD_VAR 0 2
69225: PPUSH
69226: CALL 42579 0 4
69230: PUSH
69231: LD_INT 4
69233: ARRAY
69234: ST_TO_ADDR
// end ;
69235: LD_VAR 0 3
69239: RET
// export function PlayerSeeMe ( unit ) ; begin
69240: LD_INT 0
69242: PPUSH
// result := See ( your_side , unit ) ;
69243: LD_ADDR_VAR 0 2
69247: PUSH
69248: LD_OWVAR 2
69252: PPUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: CALL_OW 292
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 2
69267: RET
// export function ReverseDir ( unit ) ; begin
69268: LD_INT 0
69270: PPUSH
// if not unit then
69271: LD_VAR 0 1
69275: NOT
69276: IFFALSE 69280
// exit ;
69278: GO 69303
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69280: LD_ADDR_VAR 0 2
69284: PUSH
69285: LD_VAR 0 1
69289: PPUSH
69290: CALL_OW 254
69294: PUSH
69295: LD_INT 3
69297: PLUS
69298: PUSH
69299: LD_INT 6
69301: MOD
69302: ST_TO_ADDR
// end ;
69303: LD_VAR 0 2
69307: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69308: LD_INT 0
69310: PPUSH
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
// if not hexes then
69315: LD_VAR 0 2
69319: NOT
69320: IFFALSE 69324
// exit ;
69322: GO 69472
// dist := 9999 ;
69324: LD_ADDR_VAR 0 5
69328: PUSH
69329: LD_INT 9999
69331: ST_TO_ADDR
// for i = 1 to hexes do
69332: LD_ADDR_VAR 0 4
69336: PUSH
69337: DOUBLE
69338: LD_INT 1
69340: DEC
69341: ST_TO_ADDR
69342: LD_VAR 0 2
69346: PUSH
69347: FOR_TO
69348: IFFALSE 69460
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_VAR 0 2
69359: PUSH
69360: LD_VAR 0 4
69364: ARRAY
69365: PUSH
69366: LD_INT 1
69368: ARRAY
69369: PPUSH
69370: LD_VAR 0 2
69374: PUSH
69375: LD_VAR 0 4
69379: ARRAY
69380: PUSH
69381: LD_INT 2
69383: ARRAY
69384: PPUSH
69385: CALL_OW 297
69389: PUSH
69390: LD_VAR 0 5
69394: LESS
69395: IFFALSE 69458
// begin hex := hexes [ i ] ;
69397: LD_ADDR_VAR 0 7
69401: PUSH
69402: LD_VAR 0 2
69406: PUSH
69407: LD_VAR 0 4
69411: ARRAY
69412: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69413: LD_ADDR_VAR 0 5
69417: PUSH
69418: LD_VAR 0 1
69422: PPUSH
69423: LD_VAR 0 2
69427: PUSH
69428: LD_VAR 0 4
69432: ARRAY
69433: PUSH
69434: LD_INT 1
69436: ARRAY
69437: PPUSH
69438: LD_VAR 0 2
69442: PUSH
69443: LD_VAR 0 4
69447: ARRAY
69448: PUSH
69449: LD_INT 2
69451: ARRAY
69452: PPUSH
69453: CALL_OW 297
69457: ST_TO_ADDR
// end ; end ;
69458: GO 69347
69460: POP
69461: POP
// result := hex ;
69462: LD_ADDR_VAR 0 3
69466: PUSH
69467: LD_VAR 0 7
69471: ST_TO_ADDR
// end ;
69472: LD_VAR 0 3
69476: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69477: LD_INT 0
69479: PPUSH
69480: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69481: LD_VAR 0 1
69485: NOT
69486: PUSH
69487: LD_VAR 0 1
69491: PUSH
69492: LD_INT 21
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 23
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 69
69520: IN
69521: NOT
69522: OR
69523: IFFALSE 69527
// exit ;
69525: GO 69574
// for i = 1 to 3 do
69527: LD_ADDR_VAR 0 3
69531: PUSH
69532: DOUBLE
69533: LD_INT 1
69535: DEC
69536: ST_TO_ADDR
69537: LD_INT 3
69539: PUSH
69540: FOR_TO
69541: IFFALSE 69572
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69543: LD_VAR 0 1
69547: PPUSH
69548: CALL_OW 250
69552: PPUSH
69553: LD_VAR 0 1
69557: PPUSH
69558: CALL_OW 251
69562: PPUSH
69563: LD_INT 1
69565: PPUSH
69566: CALL_OW 453
69570: GO 69540
69572: POP
69573: POP
// end ;
69574: LD_VAR 0 2
69578: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69579: LD_INT 0
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
69585: PPUSH
69586: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69587: LD_VAR 0 1
69591: NOT
69592: PUSH
69593: LD_VAR 0 2
69597: NOT
69598: OR
69599: PUSH
69600: LD_VAR 0 1
69604: PPUSH
69605: CALL_OW 314
69609: OR
69610: IFFALSE 69614
// exit ;
69612: GO 70055
// x := GetX ( enemy_unit ) ;
69614: LD_ADDR_VAR 0 7
69618: PUSH
69619: LD_VAR 0 2
69623: PPUSH
69624: CALL_OW 250
69628: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69629: LD_ADDR_VAR 0 8
69633: PUSH
69634: LD_VAR 0 2
69638: PPUSH
69639: CALL_OW 251
69643: ST_TO_ADDR
// if not x or not y then
69644: LD_VAR 0 7
69648: NOT
69649: PUSH
69650: LD_VAR 0 8
69654: NOT
69655: OR
69656: IFFALSE 69660
// exit ;
69658: GO 70055
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69660: LD_ADDR_VAR 0 6
69664: PUSH
69665: LD_VAR 0 7
69669: PPUSH
69670: LD_INT 0
69672: PPUSH
69673: LD_INT 4
69675: PPUSH
69676: CALL_OW 272
69680: PUSH
69681: LD_VAR 0 8
69685: PPUSH
69686: LD_INT 0
69688: PPUSH
69689: LD_INT 4
69691: PPUSH
69692: CALL_OW 273
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_VAR 0 7
69705: PPUSH
69706: LD_INT 1
69708: PPUSH
69709: LD_INT 4
69711: PPUSH
69712: CALL_OW 272
69716: PUSH
69717: LD_VAR 0 8
69721: PPUSH
69722: LD_INT 1
69724: PPUSH
69725: LD_INT 4
69727: PPUSH
69728: CALL_OW 273
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_VAR 0 7
69741: PPUSH
69742: LD_INT 2
69744: PPUSH
69745: LD_INT 4
69747: PPUSH
69748: CALL_OW 272
69752: PUSH
69753: LD_VAR 0 8
69757: PPUSH
69758: LD_INT 2
69760: PPUSH
69761: LD_INT 4
69763: PPUSH
69764: CALL_OW 273
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_VAR 0 7
69777: PPUSH
69778: LD_INT 3
69780: PPUSH
69781: LD_INT 4
69783: PPUSH
69784: CALL_OW 272
69788: PUSH
69789: LD_VAR 0 8
69793: PPUSH
69794: LD_INT 3
69796: PPUSH
69797: LD_INT 4
69799: PPUSH
69800: CALL_OW 273
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_VAR 0 7
69813: PPUSH
69814: LD_INT 4
69816: PPUSH
69817: LD_INT 4
69819: PPUSH
69820: CALL_OW 272
69824: PUSH
69825: LD_VAR 0 8
69829: PPUSH
69830: LD_INT 4
69832: PPUSH
69833: LD_INT 4
69835: PPUSH
69836: CALL_OW 273
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_VAR 0 7
69849: PPUSH
69850: LD_INT 5
69852: PPUSH
69853: LD_INT 4
69855: PPUSH
69856: CALL_OW 272
69860: PUSH
69861: LD_VAR 0 8
69865: PPUSH
69866: LD_INT 5
69868: PPUSH
69869: LD_INT 4
69871: PPUSH
69872: CALL_OW 273
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: ST_TO_ADDR
// for i = tmp downto 1 do
69889: LD_ADDR_VAR 0 4
69893: PUSH
69894: DOUBLE
69895: LD_VAR 0 6
69899: INC
69900: ST_TO_ADDR
69901: LD_INT 1
69903: PUSH
69904: FOR_DOWNTO
69905: IFFALSE 70006
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69907: LD_VAR 0 6
69911: PUSH
69912: LD_VAR 0 4
69916: ARRAY
69917: PUSH
69918: LD_INT 1
69920: ARRAY
69921: PPUSH
69922: LD_VAR 0 6
69926: PUSH
69927: LD_VAR 0 4
69931: ARRAY
69932: PUSH
69933: LD_INT 2
69935: ARRAY
69936: PPUSH
69937: CALL_OW 488
69941: NOT
69942: PUSH
69943: LD_VAR 0 6
69947: PUSH
69948: LD_VAR 0 4
69952: ARRAY
69953: PUSH
69954: LD_INT 1
69956: ARRAY
69957: PPUSH
69958: LD_VAR 0 6
69962: PUSH
69963: LD_VAR 0 4
69967: ARRAY
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: PPUSH
69973: CALL_OW 428
69977: PUSH
69978: LD_INT 0
69980: NONEQUAL
69981: OR
69982: IFFALSE 70004
// tmp := Delete ( tmp , i ) ;
69984: LD_ADDR_VAR 0 6
69988: PUSH
69989: LD_VAR 0 6
69993: PPUSH
69994: LD_VAR 0 4
69998: PPUSH
69999: CALL_OW 3
70003: ST_TO_ADDR
70004: GO 69904
70006: POP
70007: POP
// j := GetClosestHex ( unit , tmp ) ;
70008: LD_ADDR_VAR 0 5
70012: PUSH
70013: LD_VAR 0 1
70017: PPUSH
70018: LD_VAR 0 6
70022: PPUSH
70023: CALL 69308 0 2
70027: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70028: LD_VAR 0 1
70032: PPUSH
70033: LD_VAR 0 5
70037: PUSH
70038: LD_INT 1
70040: ARRAY
70041: PPUSH
70042: LD_VAR 0 5
70046: PUSH
70047: LD_INT 2
70049: ARRAY
70050: PPUSH
70051: CALL_OW 111
// end ;
70055: LD_VAR 0 3
70059: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70060: LD_INT 0
70062: PPUSH
70063: PPUSH
70064: PPUSH
// uc_side = 0 ;
70065: LD_ADDR_OWVAR 20
70069: PUSH
70070: LD_INT 0
70072: ST_TO_ADDR
// uc_nation = 0 ;
70073: LD_ADDR_OWVAR 21
70077: PUSH
70078: LD_INT 0
70080: ST_TO_ADDR
// InitHc_All ( ) ;
70081: CALL_OW 584
// InitVc ;
70085: CALL_OW 20
// if mastodonts then
70089: LD_VAR 0 6
70093: IFFALSE 70160
// for i = 1 to mastodonts do
70095: LD_ADDR_VAR 0 11
70099: PUSH
70100: DOUBLE
70101: LD_INT 1
70103: DEC
70104: ST_TO_ADDR
70105: LD_VAR 0 6
70109: PUSH
70110: FOR_TO
70111: IFFALSE 70158
// begin vc_chassis := 31 ;
70113: LD_ADDR_OWVAR 37
70117: PUSH
70118: LD_INT 31
70120: ST_TO_ADDR
// vc_control := control_rider ;
70121: LD_ADDR_OWVAR 38
70125: PUSH
70126: LD_INT 4
70128: ST_TO_ADDR
// animal := CreateVehicle ;
70129: LD_ADDR_VAR 0 12
70133: PUSH
70134: CALL_OW 45
70138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70139: LD_VAR 0 12
70143: PPUSH
70144: LD_VAR 0 8
70148: PPUSH
70149: LD_INT 0
70151: PPUSH
70152: CALL 72348 0 3
// end ;
70156: GO 70110
70158: POP
70159: POP
// if horses then
70160: LD_VAR 0 5
70164: IFFALSE 70231
// for i = 1 to horses do
70166: LD_ADDR_VAR 0 11
70170: PUSH
70171: DOUBLE
70172: LD_INT 1
70174: DEC
70175: ST_TO_ADDR
70176: LD_VAR 0 5
70180: PUSH
70181: FOR_TO
70182: IFFALSE 70229
// begin hc_class := 21 ;
70184: LD_ADDR_OWVAR 28
70188: PUSH
70189: LD_INT 21
70191: ST_TO_ADDR
// hc_gallery :=  ;
70192: LD_ADDR_OWVAR 33
70196: PUSH
70197: LD_STRING 
70199: ST_TO_ADDR
// animal := CreateHuman ;
70200: LD_ADDR_VAR 0 12
70204: PUSH
70205: CALL_OW 44
70209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70210: LD_VAR 0 12
70214: PPUSH
70215: LD_VAR 0 8
70219: PPUSH
70220: LD_INT 0
70222: PPUSH
70223: CALL 72348 0 3
// end ;
70227: GO 70181
70229: POP
70230: POP
// if birds then
70231: LD_VAR 0 1
70235: IFFALSE 70302
// for i = 1 to birds do
70237: LD_ADDR_VAR 0 11
70241: PUSH
70242: DOUBLE
70243: LD_INT 1
70245: DEC
70246: ST_TO_ADDR
70247: LD_VAR 0 1
70251: PUSH
70252: FOR_TO
70253: IFFALSE 70300
// begin hc_class = 18 ;
70255: LD_ADDR_OWVAR 28
70259: PUSH
70260: LD_INT 18
70262: ST_TO_ADDR
// hc_gallery =  ;
70263: LD_ADDR_OWVAR 33
70267: PUSH
70268: LD_STRING 
70270: ST_TO_ADDR
// animal := CreateHuman ;
70271: LD_ADDR_VAR 0 12
70275: PUSH
70276: CALL_OW 44
70280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70281: LD_VAR 0 12
70285: PPUSH
70286: LD_VAR 0 8
70290: PPUSH
70291: LD_INT 0
70293: PPUSH
70294: CALL 72348 0 3
// end ;
70298: GO 70252
70300: POP
70301: POP
// if tigers then
70302: LD_VAR 0 2
70306: IFFALSE 70390
// for i = 1 to tigers do
70308: LD_ADDR_VAR 0 11
70312: PUSH
70313: DOUBLE
70314: LD_INT 1
70316: DEC
70317: ST_TO_ADDR
70318: LD_VAR 0 2
70322: PUSH
70323: FOR_TO
70324: IFFALSE 70388
// begin hc_class = class_tiger ;
70326: LD_ADDR_OWVAR 28
70330: PUSH
70331: LD_INT 14
70333: ST_TO_ADDR
// hc_gallery =  ;
70334: LD_ADDR_OWVAR 33
70338: PUSH
70339: LD_STRING 
70341: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70342: LD_ADDR_OWVAR 35
70346: PUSH
70347: LD_INT 7
70349: NEG
70350: PPUSH
70351: LD_INT 7
70353: PPUSH
70354: CALL_OW 12
70358: ST_TO_ADDR
// animal := CreateHuman ;
70359: LD_ADDR_VAR 0 12
70363: PUSH
70364: CALL_OW 44
70368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70369: LD_VAR 0 12
70373: PPUSH
70374: LD_VAR 0 8
70378: PPUSH
70379: LD_INT 0
70381: PPUSH
70382: CALL 72348 0 3
// end ;
70386: GO 70323
70388: POP
70389: POP
// if apemans then
70390: LD_VAR 0 3
70394: IFFALSE 70517
// for i = 1 to apemans do
70396: LD_ADDR_VAR 0 11
70400: PUSH
70401: DOUBLE
70402: LD_INT 1
70404: DEC
70405: ST_TO_ADDR
70406: LD_VAR 0 3
70410: PUSH
70411: FOR_TO
70412: IFFALSE 70515
// begin hc_class = class_apeman ;
70414: LD_ADDR_OWVAR 28
70418: PUSH
70419: LD_INT 12
70421: ST_TO_ADDR
// hc_gallery =  ;
70422: LD_ADDR_OWVAR 33
70426: PUSH
70427: LD_STRING 
70429: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70430: LD_ADDR_OWVAR 35
70434: PUSH
70435: LD_INT 2
70437: NEG
70438: PPUSH
70439: LD_INT 2
70441: PPUSH
70442: CALL_OW 12
70446: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70447: LD_ADDR_OWVAR 31
70451: PUSH
70452: LD_INT 1
70454: PPUSH
70455: LD_INT 3
70457: PPUSH
70458: CALL_OW 12
70462: PUSH
70463: LD_INT 1
70465: PPUSH
70466: LD_INT 3
70468: PPUSH
70469: CALL_OW 12
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: ST_TO_ADDR
// animal := CreateHuman ;
70486: LD_ADDR_VAR 0 12
70490: PUSH
70491: CALL_OW 44
70495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70496: LD_VAR 0 12
70500: PPUSH
70501: LD_VAR 0 8
70505: PPUSH
70506: LD_INT 0
70508: PPUSH
70509: CALL 72348 0 3
// end ;
70513: GO 70411
70515: POP
70516: POP
// if enchidnas then
70517: LD_VAR 0 4
70521: IFFALSE 70588
// for i = 1 to enchidnas do
70523: LD_ADDR_VAR 0 11
70527: PUSH
70528: DOUBLE
70529: LD_INT 1
70531: DEC
70532: ST_TO_ADDR
70533: LD_VAR 0 4
70537: PUSH
70538: FOR_TO
70539: IFFALSE 70586
// begin hc_class = 13 ;
70541: LD_ADDR_OWVAR 28
70545: PUSH
70546: LD_INT 13
70548: ST_TO_ADDR
// hc_gallery =  ;
70549: LD_ADDR_OWVAR 33
70553: PUSH
70554: LD_STRING 
70556: ST_TO_ADDR
// animal := CreateHuman ;
70557: LD_ADDR_VAR 0 12
70561: PUSH
70562: CALL_OW 44
70566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70567: LD_VAR 0 12
70571: PPUSH
70572: LD_VAR 0 8
70576: PPUSH
70577: LD_INT 0
70579: PPUSH
70580: CALL 72348 0 3
// end ;
70584: GO 70538
70586: POP
70587: POP
// if fishes then
70588: LD_VAR 0 7
70592: IFFALSE 70659
// for i = 1 to fishes do
70594: LD_ADDR_VAR 0 11
70598: PUSH
70599: DOUBLE
70600: LD_INT 1
70602: DEC
70603: ST_TO_ADDR
70604: LD_VAR 0 7
70608: PUSH
70609: FOR_TO
70610: IFFALSE 70657
// begin hc_class = 20 ;
70612: LD_ADDR_OWVAR 28
70616: PUSH
70617: LD_INT 20
70619: ST_TO_ADDR
// hc_gallery =  ;
70620: LD_ADDR_OWVAR 33
70624: PUSH
70625: LD_STRING 
70627: ST_TO_ADDR
// animal := CreateHuman ;
70628: LD_ADDR_VAR 0 12
70632: PUSH
70633: CALL_OW 44
70637: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70638: LD_VAR 0 12
70642: PPUSH
70643: LD_VAR 0 9
70647: PPUSH
70648: LD_INT 0
70650: PPUSH
70651: CALL 72348 0 3
// end ;
70655: GO 70609
70657: POP
70658: POP
// end ;
70659: LD_VAR 0 10
70663: RET
// export function WantHeal ( sci , unit ) ; begin
70664: LD_INT 0
70666: PPUSH
// if GetTaskList ( sci ) > 0 then
70667: LD_VAR 0 1
70671: PPUSH
70672: CALL_OW 437
70676: PUSH
70677: LD_INT 0
70679: GREATER
70680: IFFALSE 70750
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70682: LD_VAR 0 1
70686: PPUSH
70687: CALL_OW 437
70691: PUSH
70692: LD_INT 1
70694: ARRAY
70695: PUSH
70696: LD_INT 1
70698: ARRAY
70699: PUSH
70700: LD_STRING l
70702: EQUAL
70703: PUSH
70704: LD_VAR 0 1
70708: PPUSH
70709: CALL_OW 437
70713: PUSH
70714: LD_INT 1
70716: ARRAY
70717: PUSH
70718: LD_INT 4
70720: ARRAY
70721: PUSH
70722: LD_VAR 0 2
70726: EQUAL
70727: AND
70728: IFFALSE 70740
// result := true else
70730: LD_ADDR_VAR 0 3
70734: PUSH
70735: LD_INT 1
70737: ST_TO_ADDR
70738: GO 70748
// result := false ;
70740: LD_ADDR_VAR 0 3
70744: PUSH
70745: LD_INT 0
70747: ST_TO_ADDR
// end else
70748: GO 70758
// result := false ;
70750: LD_ADDR_VAR 0 3
70754: PUSH
70755: LD_INT 0
70757: ST_TO_ADDR
// end ;
70758: LD_VAR 0 3
70762: RET
// export function HealTarget ( sci ) ; begin
70763: LD_INT 0
70765: PPUSH
// if not sci then
70766: LD_VAR 0 1
70770: NOT
70771: IFFALSE 70775
// exit ;
70773: GO 70840
// result := 0 ;
70775: LD_ADDR_VAR 0 2
70779: PUSH
70780: LD_INT 0
70782: ST_TO_ADDR
// if GetTaskList ( sci ) then
70783: LD_VAR 0 1
70787: PPUSH
70788: CALL_OW 437
70792: IFFALSE 70840
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 437
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PUSH
70808: LD_INT 1
70810: ARRAY
70811: PUSH
70812: LD_STRING l
70814: EQUAL
70815: IFFALSE 70840
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70817: LD_ADDR_VAR 0 2
70821: PUSH
70822: LD_VAR 0 1
70826: PPUSH
70827: CALL_OW 437
70831: PUSH
70832: LD_INT 1
70834: ARRAY
70835: PUSH
70836: LD_INT 4
70838: ARRAY
70839: ST_TO_ADDR
// end ;
70840: LD_VAR 0 2
70844: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70845: LD_INT 0
70847: PPUSH
70848: PPUSH
70849: PPUSH
70850: PPUSH
// if not base_units then
70851: LD_VAR 0 1
70855: NOT
70856: IFFALSE 70860
// exit ;
70858: GO 70947
// result := false ;
70860: LD_ADDR_VAR 0 2
70864: PUSH
70865: LD_INT 0
70867: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70868: LD_ADDR_VAR 0 5
70872: PUSH
70873: LD_VAR 0 1
70877: PPUSH
70878: LD_INT 21
70880: PUSH
70881: LD_INT 3
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PPUSH
70888: CALL_OW 72
70892: ST_TO_ADDR
// if not tmp then
70893: LD_VAR 0 5
70897: NOT
70898: IFFALSE 70902
// exit ;
70900: GO 70947
// for i in tmp do
70902: LD_ADDR_VAR 0 3
70906: PUSH
70907: LD_VAR 0 5
70911: PUSH
70912: FOR_IN
70913: IFFALSE 70945
// begin result := EnemyInRange ( i , 22 ) ;
70915: LD_ADDR_VAR 0 2
70919: PUSH
70920: LD_VAR 0 3
70924: PPUSH
70925: LD_INT 22
70927: PPUSH
70928: CALL 69183 0 2
70932: ST_TO_ADDR
// if result then
70933: LD_VAR 0 2
70937: IFFALSE 70943
// exit ;
70939: POP
70940: POP
70941: GO 70947
// end ;
70943: GO 70912
70945: POP
70946: POP
// end ;
70947: LD_VAR 0 2
70951: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70952: LD_INT 0
70954: PPUSH
70955: PPUSH
// if not units then
70956: LD_VAR 0 1
70960: NOT
70961: IFFALSE 70965
// exit ;
70963: GO 71035
// result := [ ] ;
70965: LD_ADDR_VAR 0 3
70969: PUSH
70970: EMPTY
70971: ST_TO_ADDR
// for i in units do
70972: LD_ADDR_VAR 0 4
70976: PUSH
70977: LD_VAR 0 1
70981: PUSH
70982: FOR_IN
70983: IFFALSE 71033
// if GetTag ( i ) = tag then
70985: LD_VAR 0 4
70989: PPUSH
70990: CALL_OW 110
70994: PUSH
70995: LD_VAR 0 2
70999: EQUAL
71000: IFFALSE 71031
// result := Replace ( result , result + 1 , i ) ;
71002: LD_ADDR_VAR 0 3
71006: PUSH
71007: LD_VAR 0 3
71011: PPUSH
71012: LD_VAR 0 3
71016: PUSH
71017: LD_INT 1
71019: PLUS
71020: PPUSH
71021: LD_VAR 0 4
71025: PPUSH
71026: CALL_OW 1
71030: ST_TO_ADDR
71031: GO 70982
71033: POP
71034: POP
// end ;
71035: LD_VAR 0 3
71039: RET
// export function IsDriver ( un ) ; begin
71040: LD_INT 0
71042: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71043: LD_ADDR_VAR 0 2
71047: PUSH
71048: LD_VAR 0 1
71052: PUSH
71053: LD_INT 55
71055: PUSH
71056: EMPTY
71057: LIST
71058: PPUSH
71059: CALL_OW 69
71063: IN
71064: ST_TO_ADDR
// end ;
71065: LD_VAR 0 2
71069: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71070: LD_INT 0
71072: PPUSH
71073: PPUSH
// list := [ ] ;
71074: LD_ADDR_VAR 0 5
71078: PUSH
71079: EMPTY
71080: ST_TO_ADDR
// case d of 0 :
71081: LD_VAR 0 3
71085: PUSH
71086: LD_INT 0
71088: DOUBLE
71089: EQUAL
71090: IFTRUE 71094
71092: GO 71227
71094: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71095: LD_ADDR_VAR 0 5
71099: PUSH
71100: LD_VAR 0 1
71104: PUSH
71105: LD_INT 4
71107: MINUS
71108: PUSH
71109: LD_VAR 0 2
71113: PUSH
71114: LD_INT 4
71116: MINUS
71117: PUSH
71118: LD_INT 2
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: LIST
71125: PUSH
71126: LD_VAR 0 1
71130: PUSH
71131: LD_INT 3
71133: MINUS
71134: PUSH
71135: LD_VAR 0 2
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: PUSH
71148: LD_VAR 0 1
71152: PUSH
71153: LD_INT 4
71155: PLUS
71156: PUSH
71157: LD_VAR 0 2
71161: PUSH
71162: LD_INT 4
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: LIST
71169: PUSH
71170: LD_VAR 0 1
71174: PUSH
71175: LD_INT 3
71177: PLUS
71178: PUSH
71179: LD_VAR 0 2
71183: PUSH
71184: LD_INT 3
71186: PLUS
71187: PUSH
71188: LD_INT 5
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: PUSH
71196: LD_VAR 0 1
71200: PUSH
71201: LD_VAR 0 2
71205: PUSH
71206: LD_INT 4
71208: PLUS
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// end ; 1 :
71225: GO 71925
71227: LD_INT 1
71229: DOUBLE
71230: EQUAL
71231: IFTRUE 71235
71233: GO 71368
71235: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71236: LD_ADDR_VAR 0 5
71240: PUSH
71241: LD_VAR 0 1
71245: PUSH
71246: LD_VAR 0 2
71250: PUSH
71251: LD_INT 4
71253: MINUS
71254: PUSH
71255: LD_INT 3
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: LIST
71262: PUSH
71263: LD_VAR 0 1
71267: PUSH
71268: LD_INT 3
71270: MINUS
71271: PUSH
71272: LD_VAR 0 2
71276: PUSH
71277: LD_INT 3
71279: MINUS
71280: PUSH
71281: LD_INT 2
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: LIST
71288: PUSH
71289: LD_VAR 0 1
71293: PUSH
71294: LD_INT 4
71296: MINUS
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: LIST
71310: PUSH
71311: LD_VAR 0 1
71315: PUSH
71316: LD_VAR 0 2
71320: PUSH
71321: LD_INT 3
71323: PLUS
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: PUSH
71333: LD_VAR 0 1
71337: PUSH
71338: LD_INT 4
71340: PLUS
71341: PUSH
71342: LD_VAR 0 2
71346: PUSH
71347: LD_INT 4
71349: PLUS
71350: PUSH
71351: LD_INT 5
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: ST_TO_ADDR
// end ; 2 :
71366: GO 71925
71368: LD_INT 2
71370: DOUBLE
71371: EQUAL
71372: IFTRUE 71376
71374: GO 71505
71376: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_VAR 0 1
71386: PUSH
71387: LD_VAR 0 2
71391: PUSH
71392: LD_INT 3
71394: MINUS
71395: PUSH
71396: LD_INT 3
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: LD_VAR 0 1
71408: PUSH
71409: LD_INT 4
71411: PLUS
71412: PUSH
71413: LD_VAR 0 2
71417: PUSH
71418: LD_INT 4
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: LIST
71425: PUSH
71426: LD_VAR 0 1
71430: PUSH
71431: LD_VAR 0 2
71435: PUSH
71436: LD_INT 4
71438: PLUS
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: PUSH
71448: LD_VAR 0 1
71452: PUSH
71453: LD_INT 3
71455: MINUS
71456: PUSH
71457: LD_VAR 0 2
71461: PUSH
71462: LD_INT 1
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: PUSH
71470: LD_VAR 0 1
71474: PUSH
71475: LD_INT 4
71477: MINUS
71478: PUSH
71479: LD_VAR 0 2
71483: PUSH
71484: LD_INT 4
71486: MINUS
71487: PUSH
71488: LD_INT 2
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: LIST
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: ST_TO_ADDR
// end ; 3 :
71503: GO 71925
71505: LD_INT 3
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71513
71511: GO 71646
71513: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71514: LD_ADDR_VAR 0 5
71518: PUSH
71519: LD_VAR 0 1
71523: PUSH
71524: LD_INT 3
71526: PLUS
71527: PUSH
71528: LD_VAR 0 2
71532: PUSH
71533: LD_INT 4
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: LIST
71540: PUSH
71541: LD_VAR 0 1
71545: PUSH
71546: LD_INT 4
71548: PLUS
71549: PUSH
71550: LD_VAR 0 2
71554: PUSH
71555: LD_INT 4
71557: PLUS
71558: PUSH
71559: LD_INT 5
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: PUSH
71567: LD_VAR 0 1
71571: PUSH
71572: LD_INT 4
71574: MINUS
71575: PUSH
71576: LD_VAR 0 2
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: PUSH
71589: LD_VAR 0 1
71593: PUSH
71594: LD_VAR 0 2
71598: PUSH
71599: LD_INT 4
71601: MINUS
71602: PUSH
71603: LD_INT 3
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: LIST
71610: PUSH
71611: LD_VAR 0 1
71615: PUSH
71616: LD_INT 3
71618: MINUS
71619: PUSH
71620: LD_VAR 0 2
71624: PUSH
71625: LD_INT 3
71627: MINUS
71628: PUSH
71629: LD_INT 2
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: LIST
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: ST_TO_ADDR
// end ; 4 :
71644: GO 71925
71646: LD_INT 4
71648: DOUBLE
71649: EQUAL
71650: IFTRUE 71654
71652: GO 71787
71654: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71655: LD_ADDR_VAR 0 5
71659: PUSH
71660: LD_VAR 0 1
71664: PUSH
71665: LD_VAR 0 2
71669: PUSH
71670: LD_INT 4
71672: PLUS
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: LIST
71681: PUSH
71682: LD_VAR 0 1
71686: PUSH
71687: LD_INT 3
71689: PLUS
71690: PUSH
71691: LD_VAR 0 2
71695: PUSH
71696: LD_INT 3
71698: PLUS
71699: PUSH
71700: LD_INT 5
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: PUSH
71708: LD_VAR 0 1
71712: PUSH
71713: LD_INT 4
71715: PLUS
71716: PUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_INT 4
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: PUSH
71730: LD_VAR 0 1
71734: PUSH
71735: LD_VAR 0 2
71739: PUSH
71740: LD_INT 3
71742: MINUS
71743: PUSH
71744: LD_INT 3
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: LIST
71751: PUSH
71752: LD_VAR 0 1
71756: PUSH
71757: LD_INT 4
71759: MINUS
71760: PUSH
71761: LD_VAR 0 2
71765: PUSH
71766: LD_INT 4
71768: MINUS
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: LIST
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: ST_TO_ADDR
// end ; 5 :
71785: GO 71925
71787: LD_INT 5
71789: DOUBLE
71790: EQUAL
71791: IFTRUE 71795
71793: GO 71924
71795: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71796: LD_ADDR_VAR 0 5
71800: PUSH
71801: LD_VAR 0 1
71805: PUSH
71806: LD_INT 4
71808: MINUS
71809: PUSH
71810: LD_VAR 0 2
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: LIST
71822: PUSH
71823: LD_VAR 0 1
71827: PUSH
71828: LD_VAR 0 2
71832: PUSH
71833: LD_INT 4
71835: MINUS
71836: PUSH
71837: LD_INT 3
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: LIST
71844: PUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_INT 4
71852: PLUS
71853: PUSH
71854: LD_VAR 0 2
71858: PUSH
71859: LD_INT 4
71861: PLUS
71862: PUSH
71863: LD_INT 5
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: PUSH
71871: LD_VAR 0 1
71875: PUSH
71876: LD_INT 3
71878: PLUS
71879: PUSH
71880: LD_VAR 0 2
71884: PUSH
71885: LD_INT 4
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: PUSH
71893: LD_VAR 0 1
71897: PUSH
71898: LD_VAR 0 2
71902: PUSH
71903: LD_INT 3
71905: PLUS
71906: PUSH
71907: LD_INT 0
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: LIST
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: ST_TO_ADDR
// end ; end ;
71922: GO 71925
71924: POP
// result := list ;
71925: LD_ADDR_VAR 0 4
71929: PUSH
71930: LD_VAR 0 5
71934: ST_TO_ADDR
// end ;
71935: LD_VAR 0 4
71939: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71940: LD_INT 0
71942: PPUSH
71943: PPUSH
71944: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71945: LD_VAR 0 1
71949: NOT
71950: PUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_INT 1
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: LD_INT 3
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: IN
71974: NOT
71975: OR
71976: IFFALSE 71980
// exit ;
71978: GO 72072
// tmp := [ ] ;
71980: LD_ADDR_VAR 0 5
71984: PUSH
71985: EMPTY
71986: ST_TO_ADDR
// for i in units do
71987: LD_ADDR_VAR 0 4
71991: PUSH
71992: LD_VAR 0 1
71996: PUSH
71997: FOR_IN
71998: IFFALSE 72041
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72000: LD_ADDR_VAR 0 5
72004: PUSH
72005: LD_VAR 0 5
72009: PPUSH
72010: LD_VAR 0 5
72014: PUSH
72015: LD_INT 1
72017: PLUS
72018: PPUSH
72019: LD_VAR 0 4
72023: PPUSH
72024: LD_VAR 0 2
72028: PPUSH
72029: CALL_OW 259
72033: PPUSH
72034: CALL_OW 2
72038: ST_TO_ADDR
72039: GO 71997
72041: POP
72042: POP
// if not tmp then
72043: LD_VAR 0 5
72047: NOT
72048: IFFALSE 72052
// exit ;
72050: GO 72072
// result := SortListByListDesc ( units , tmp ) ;
72052: LD_ADDR_VAR 0 3
72056: PUSH
72057: LD_VAR 0 1
72061: PPUSH
72062: LD_VAR 0 5
72066: PPUSH
72067: CALL_OW 77
72071: ST_TO_ADDR
// end ;
72072: LD_VAR 0 3
72076: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72077: LD_INT 0
72079: PPUSH
72080: PPUSH
72081: PPUSH
// result := false ;
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: LD_INT 0
72089: ST_TO_ADDR
// x := GetX ( building ) ;
72090: LD_ADDR_VAR 0 4
72094: PUSH
72095: LD_VAR 0 2
72099: PPUSH
72100: CALL_OW 250
72104: ST_TO_ADDR
// y := GetY ( building ) ;
72105: LD_ADDR_VAR 0 5
72109: PUSH
72110: LD_VAR 0 2
72114: PPUSH
72115: CALL_OW 251
72119: ST_TO_ADDR
// if not building or not x or not y then
72120: LD_VAR 0 2
72124: NOT
72125: PUSH
72126: LD_VAR 0 4
72130: NOT
72131: OR
72132: PUSH
72133: LD_VAR 0 5
72137: NOT
72138: OR
72139: IFFALSE 72143
// exit ;
72141: GO 72235
// if GetTaskList ( unit ) then
72143: LD_VAR 0 1
72147: PPUSH
72148: CALL_OW 437
72152: IFFALSE 72235
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72154: LD_STRING e
72156: PUSH
72157: LD_VAR 0 1
72161: PPUSH
72162: CALL_OW 437
72166: PUSH
72167: LD_INT 1
72169: ARRAY
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: EQUAL
72175: PUSH
72176: LD_VAR 0 4
72180: PUSH
72181: LD_VAR 0 1
72185: PPUSH
72186: CALL_OW 437
72190: PUSH
72191: LD_INT 1
72193: ARRAY
72194: PUSH
72195: LD_INT 2
72197: ARRAY
72198: EQUAL
72199: AND
72200: PUSH
72201: LD_VAR 0 5
72205: PUSH
72206: LD_VAR 0 1
72210: PPUSH
72211: CALL_OW 437
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PUSH
72220: LD_INT 3
72222: ARRAY
72223: EQUAL
72224: AND
72225: IFFALSE 72235
// result := true end ;
72227: LD_ADDR_VAR 0 3
72231: PUSH
72232: LD_INT 1
72234: ST_TO_ADDR
// end ;
72235: LD_VAR 0 3
72239: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72240: LD_INT 0
72242: PPUSH
// result := false ;
72243: LD_ADDR_VAR 0 4
72247: PUSH
72248: LD_INT 0
72250: ST_TO_ADDR
// if GetTaskList ( unit ) then
72251: LD_VAR 0 1
72255: PPUSH
72256: CALL_OW 437
72260: IFFALSE 72343
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72262: LD_STRING M
72264: PUSH
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 437
72274: PUSH
72275: LD_INT 1
72277: ARRAY
72278: PUSH
72279: LD_INT 1
72281: ARRAY
72282: EQUAL
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_VAR 0 1
72293: PPUSH
72294: CALL_OW 437
72298: PUSH
72299: LD_INT 1
72301: ARRAY
72302: PUSH
72303: LD_INT 2
72305: ARRAY
72306: EQUAL
72307: AND
72308: PUSH
72309: LD_VAR 0 3
72313: PUSH
72314: LD_VAR 0 1
72318: PPUSH
72319: CALL_OW 437
72323: PUSH
72324: LD_INT 1
72326: ARRAY
72327: PUSH
72328: LD_INT 3
72330: ARRAY
72331: EQUAL
72332: AND
72333: IFFALSE 72343
// result := true ;
72335: LD_ADDR_VAR 0 4
72339: PUSH
72340: LD_INT 1
72342: ST_TO_ADDR
// end ; end ;
72343: LD_VAR 0 4
72347: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
72352: PPUSH
72353: PPUSH
// if not unit or not area then
72354: LD_VAR 0 1
72358: NOT
72359: PUSH
72360: LD_VAR 0 2
72364: NOT
72365: OR
72366: IFFALSE 72370
// exit ;
72368: GO 72534
// tmp := AreaToList ( area , i ) ;
72370: LD_ADDR_VAR 0 6
72374: PUSH
72375: LD_VAR 0 2
72379: PPUSH
72380: LD_VAR 0 5
72384: PPUSH
72385: CALL_OW 517
72389: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72390: LD_ADDR_VAR 0 5
72394: PUSH
72395: DOUBLE
72396: LD_INT 1
72398: DEC
72399: ST_TO_ADDR
72400: LD_VAR 0 6
72404: PUSH
72405: LD_INT 1
72407: ARRAY
72408: PUSH
72409: FOR_TO
72410: IFFALSE 72532
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72412: LD_ADDR_VAR 0 7
72416: PUSH
72417: LD_VAR 0 6
72421: PUSH
72422: LD_INT 1
72424: ARRAY
72425: PUSH
72426: LD_VAR 0 5
72430: ARRAY
72431: PUSH
72432: LD_VAR 0 6
72436: PUSH
72437: LD_INT 2
72439: ARRAY
72440: PUSH
72441: LD_VAR 0 5
72445: ARRAY
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72451: LD_VAR 0 7
72455: PUSH
72456: LD_INT 1
72458: ARRAY
72459: PPUSH
72460: LD_VAR 0 7
72464: PUSH
72465: LD_INT 2
72467: ARRAY
72468: PPUSH
72469: CALL_OW 428
72473: PUSH
72474: LD_INT 0
72476: EQUAL
72477: IFFALSE 72530
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72479: LD_VAR 0 1
72483: PPUSH
72484: LD_VAR 0 7
72488: PUSH
72489: LD_INT 1
72491: ARRAY
72492: PPUSH
72493: LD_VAR 0 7
72497: PUSH
72498: LD_INT 2
72500: ARRAY
72501: PPUSH
72502: LD_VAR 0 3
72506: PPUSH
72507: CALL_OW 48
// result := IsPlaced ( unit ) ;
72511: LD_ADDR_VAR 0 4
72515: PUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: CALL_OW 305
72525: ST_TO_ADDR
// exit ;
72526: POP
72527: POP
72528: GO 72534
// end ; end ;
72530: GO 72409
72532: POP
72533: POP
// end ;
72534: LD_VAR 0 4
72538: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72539: LD_INT 0
72541: PPUSH
72542: PPUSH
72543: PPUSH
// if not side or side > 8 then
72544: LD_VAR 0 1
72548: NOT
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 8
72557: GREATER
72558: OR
72559: IFFALSE 72563
// exit ;
72561: GO 72750
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72563: LD_ADDR_VAR 0 4
72567: PUSH
72568: LD_INT 22
72570: PUSH
72571: LD_VAR 0 1
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 21
72582: PUSH
72583: LD_INT 3
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PPUSH
72594: CALL_OW 69
72598: ST_TO_ADDR
// if not tmp then
72599: LD_VAR 0 4
72603: NOT
72604: IFFALSE 72608
// exit ;
72606: GO 72750
// enable_addtolog := true ;
72608: LD_ADDR_OWVAR 81
72612: PUSH
72613: LD_INT 1
72615: ST_TO_ADDR
// AddToLog ( [ ) ;
72616: LD_STRING [
72618: PPUSH
72619: CALL_OW 561
// for i in tmp do
72623: LD_ADDR_VAR 0 3
72627: PUSH
72628: LD_VAR 0 4
72632: PUSH
72633: FOR_IN
72634: IFFALSE 72741
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72636: LD_STRING [
72638: PUSH
72639: LD_VAR 0 3
72643: PPUSH
72644: CALL_OW 266
72648: STR
72649: PUSH
72650: LD_STRING , 
72652: STR
72653: PUSH
72654: LD_VAR 0 3
72658: PPUSH
72659: CALL_OW 250
72663: STR
72664: PUSH
72665: LD_STRING , 
72667: STR
72668: PUSH
72669: LD_VAR 0 3
72673: PPUSH
72674: CALL_OW 251
72678: STR
72679: PUSH
72680: LD_STRING , 
72682: STR
72683: PUSH
72684: LD_VAR 0 3
72688: PPUSH
72689: CALL_OW 254
72693: STR
72694: PUSH
72695: LD_STRING , 
72697: STR
72698: PUSH
72699: LD_VAR 0 3
72703: PPUSH
72704: LD_INT 1
72706: PPUSH
72707: CALL_OW 268
72711: STR
72712: PUSH
72713: LD_STRING , 
72715: STR
72716: PUSH
72717: LD_VAR 0 3
72721: PPUSH
72722: LD_INT 2
72724: PPUSH
72725: CALL_OW 268
72729: STR
72730: PUSH
72731: LD_STRING ],
72733: STR
72734: PPUSH
72735: CALL_OW 561
// end ;
72739: GO 72633
72741: POP
72742: POP
// AddToLog ( ]; ) ;
72743: LD_STRING ];
72745: PPUSH
72746: CALL_OW 561
// end ;
72750: LD_VAR 0 2
72754: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72755: LD_INT 0
72757: PPUSH
72758: PPUSH
72759: PPUSH
72760: PPUSH
72761: PPUSH
// if not area or not rate or not max then
72762: LD_VAR 0 1
72766: NOT
72767: PUSH
72768: LD_VAR 0 2
72772: NOT
72773: OR
72774: PUSH
72775: LD_VAR 0 4
72779: NOT
72780: OR
72781: IFFALSE 72785
// exit ;
72783: GO 72977
// while 1 do
72785: LD_INT 1
72787: IFFALSE 72977
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72789: LD_ADDR_VAR 0 9
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: LD_INT 1
72801: PPUSH
72802: CALL_OW 287
72806: PUSH
72807: LD_INT 10
72809: MUL
72810: ST_TO_ADDR
// r := rate / 10 ;
72811: LD_ADDR_VAR 0 7
72815: PUSH
72816: LD_VAR 0 2
72820: PUSH
72821: LD_INT 10
72823: DIVREAL
72824: ST_TO_ADDR
// time := 1 1$00 ;
72825: LD_ADDR_VAR 0 8
72829: PUSH
72830: LD_INT 2100
72832: ST_TO_ADDR
// if amount < min then
72833: LD_VAR 0 9
72837: PUSH
72838: LD_VAR 0 3
72842: LESS
72843: IFFALSE 72861
// r := r * 2 else
72845: LD_ADDR_VAR 0 7
72849: PUSH
72850: LD_VAR 0 7
72854: PUSH
72855: LD_INT 2
72857: MUL
72858: ST_TO_ADDR
72859: GO 72887
// if amount > max then
72861: LD_VAR 0 9
72865: PUSH
72866: LD_VAR 0 4
72870: GREATER
72871: IFFALSE 72887
// r := r / 2 ;
72873: LD_ADDR_VAR 0 7
72877: PUSH
72878: LD_VAR 0 7
72882: PUSH
72883: LD_INT 2
72885: DIVREAL
72886: ST_TO_ADDR
// time := time / r ;
72887: LD_ADDR_VAR 0 8
72891: PUSH
72892: LD_VAR 0 8
72896: PUSH
72897: LD_VAR 0 7
72901: DIVREAL
72902: ST_TO_ADDR
// if time < 0 then
72903: LD_VAR 0 8
72907: PUSH
72908: LD_INT 0
72910: LESS
72911: IFFALSE 72928
// time := time * - 1 ;
72913: LD_ADDR_VAR 0 8
72917: PUSH
72918: LD_VAR 0 8
72922: PUSH
72923: LD_INT 1
72925: NEG
72926: MUL
72927: ST_TO_ADDR
// wait ( time ) ;
72928: LD_VAR 0 8
72932: PPUSH
72933: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72937: LD_INT 35
72939: PPUSH
72940: LD_INT 875
72942: PPUSH
72943: CALL_OW 12
72947: PPUSH
72948: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72952: LD_INT 1
72954: PPUSH
72955: LD_INT 5
72957: PPUSH
72958: CALL_OW 12
72962: PPUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: LD_INT 1
72970: PPUSH
72971: CALL_OW 55
// end ;
72975: GO 72785
// end ;
72977: LD_VAR 0 5
72981: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72982: LD_INT 0
72984: PPUSH
72985: PPUSH
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
72990: PPUSH
72991: PPUSH
// if not turrets or not factories then
72992: LD_VAR 0 1
72996: NOT
72997: PUSH
72998: LD_VAR 0 2
73002: NOT
73003: OR
73004: IFFALSE 73008
// exit ;
73006: GO 73315
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73008: LD_ADDR_VAR 0 10
73012: PUSH
73013: LD_INT 5
73015: PUSH
73016: LD_INT 6
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 2
73025: PUSH
73026: LD_INT 4
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 3
73035: PUSH
73036: LD_INT 5
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 24
73050: PUSH
73051: LD_INT 25
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 23
73060: PUSH
73061: LD_INT 27
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 42
73074: PUSH
73075: LD_INT 43
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 44
73084: PUSH
73085: LD_INT 46
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 45
73094: PUSH
73095: LD_INT 47
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: LIST
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: LIST
73111: ST_TO_ADDR
// result := [ ] ;
73112: LD_ADDR_VAR 0 3
73116: PUSH
73117: EMPTY
73118: ST_TO_ADDR
// for i in turrets do
73119: LD_ADDR_VAR 0 4
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: FOR_IN
73130: IFFALSE 73313
// begin nat := GetNation ( i ) ;
73132: LD_ADDR_VAR 0 7
73136: PUSH
73137: LD_VAR 0 4
73141: PPUSH
73142: CALL_OW 248
73146: ST_TO_ADDR
// weapon := 0 ;
73147: LD_ADDR_VAR 0 8
73151: PUSH
73152: LD_INT 0
73154: ST_TO_ADDR
// if not nat then
73155: LD_VAR 0 7
73159: NOT
73160: IFFALSE 73164
// continue ;
73162: GO 73129
// for j in list [ nat ] do
73164: LD_ADDR_VAR 0 5
73168: PUSH
73169: LD_VAR 0 10
73173: PUSH
73174: LD_VAR 0 7
73178: ARRAY
73179: PUSH
73180: FOR_IN
73181: IFFALSE 73222
// if GetBWeapon ( i ) = j [ 1 ] then
73183: LD_VAR 0 4
73187: PPUSH
73188: CALL_OW 269
73192: PUSH
73193: LD_VAR 0 5
73197: PUSH
73198: LD_INT 1
73200: ARRAY
73201: EQUAL
73202: IFFALSE 73220
// begin weapon := j [ 2 ] ;
73204: LD_ADDR_VAR 0 8
73208: PUSH
73209: LD_VAR 0 5
73213: PUSH
73214: LD_INT 2
73216: ARRAY
73217: ST_TO_ADDR
// break ;
73218: GO 73222
// end ;
73220: GO 73180
73222: POP
73223: POP
// if not weapon then
73224: LD_VAR 0 8
73228: NOT
73229: IFFALSE 73233
// continue ;
73231: GO 73129
// for k in factories do
73233: LD_ADDR_VAR 0 6
73237: PUSH
73238: LD_VAR 0 2
73242: PUSH
73243: FOR_IN
73244: IFFALSE 73309
// begin weapons := AvailableWeaponList ( k ) ;
73246: LD_ADDR_VAR 0 9
73250: PUSH
73251: LD_VAR 0 6
73255: PPUSH
73256: CALL_OW 478
73260: ST_TO_ADDR
// if not weapons then
73261: LD_VAR 0 9
73265: NOT
73266: IFFALSE 73270
// continue ;
73268: GO 73243
// if weapon in weapons then
73270: LD_VAR 0 8
73274: PUSH
73275: LD_VAR 0 9
73279: IN
73280: IFFALSE 73307
// begin result := [ i , weapon ] ;
73282: LD_ADDR_VAR 0 3
73286: PUSH
73287: LD_VAR 0 4
73291: PUSH
73292: LD_VAR 0 8
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: ST_TO_ADDR
// exit ;
73301: POP
73302: POP
73303: POP
73304: POP
73305: GO 73315
// end ; end ;
73307: GO 73243
73309: POP
73310: POP
// end ;
73311: GO 73129
73313: POP
73314: POP
// end ;
73315: LD_VAR 0 3
73319: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73320: LD_INT 0
73322: PPUSH
// if not side or side > 8 then
73323: LD_VAR 0 3
73327: NOT
73328: PUSH
73329: LD_VAR 0 3
73333: PUSH
73334: LD_INT 8
73336: GREATER
73337: OR
73338: IFFALSE 73342
// exit ;
73340: GO 73401
// if not range then
73342: LD_VAR 0 4
73346: NOT
73347: IFFALSE 73358
// range := - 12 ;
73349: LD_ADDR_VAR 0 4
73353: PUSH
73354: LD_INT 12
73356: NEG
73357: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73358: LD_VAR 0 1
73362: PPUSH
73363: LD_VAR 0 2
73367: PPUSH
73368: LD_VAR 0 3
73372: PPUSH
73373: LD_VAR 0 4
73377: PPUSH
73378: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73382: LD_VAR 0 1
73386: PPUSH
73387: LD_VAR 0 2
73391: PPUSH
73392: LD_VAR 0 3
73396: PPUSH
73397: CALL_OW 331
// end ;
73401: LD_VAR 0 5
73405: RET
// export function Video ( mode ) ; begin
73406: LD_INT 0
73408: PPUSH
// ingame_video = mode ;
73409: LD_ADDR_OWVAR 52
73413: PUSH
73414: LD_VAR 0 1
73418: ST_TO_ADDR
// interface_hidden = mode ;
73419: LD_ADDR_OWVAR 54
73423: PUSH
73424: LD_VAR 0 1
73428: ST_TO_ADDR
// end ;
73429: LD_VAR 0 2
73433: RET
// export function Join ( array , element ) ; begin
73434: LD_INT 0
73436: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73437: LD_ADDR_VAR 0 3
73441: PUSH
73442: LD_VAR 0 1
73446: PPUSH
73447: LD_VAR 0 1
73451: PUSH
73452: LD_INT 1
73454: PLUS
73455: PPUSH
73456: LD_VAR 0 2
73460: PPUSH
73461: CALL_OW 1
73465: ST_TO_ADDR
// end ;
73466: LD_VAR 0 3
73470: RET
// export function JoinUnion ( array , element ) ; begin
73471: LD_INT 0
73473: PPUSH
// result := array union element ;
73474: LD_ADDR_VAR 0 3
73478: PUSH
73479: LD_VAR 0 1
73483: PUSH
73484: LD_VAR 0 2
73488: UNION
73489: ST_TO_ADDR
// end ;
73490: LD_VAR 0 3
73494: RET
// export function GetBehemoths ( side ) ; begin
73495: LD_INT 0
73497: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73498: LD_ADDR_VAR 0 2
73502: PUSH
73503: LD_INT 22
73505: PUSH
73506: LD_VAR 0 1
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 31
73517: PUSH
73518: LD_INT 25
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PPUSH
73529: CALL_OW 69
73533: ST_TO_ADDR
// end ;
73534: LD_VAR 0 2
73538: RET
// export function Shuffle ( array ) ; var i , index ; begin
73539: LD_INT 0
73541: PPUSH
73542: PPUSH
73543: PPUSH
// result := [ ] ;
73544: LD_ADDR_VAR 0 2
73548: PUSH
73549: EMPTY
73550: ST_TO_ADDR
// if not array then
73551: LD_VAR 0 1
73555: NOT
73556: IFFALSE 73560
// exit ;
73558: GO 73659
// Randomize ;
73560: CALL_OW 10
// for i = array downto 1 do
73564: LD_ADDR_VAR 0 3
73568: PUSH
73569: DOUBLE
73570: LD_VAR 0 1
73574: INC
73575: ST_TO_ADDR
73576: LD_INT 1
73578: PUSH
73579: FOR_DOWNTO
73580: IFFALSE 73657
// begin index := rand ( 1 , array ) ;
73582: LD_ADDR_VAR 0 4
73586: PUSH
73587: LD_INT 1
73589: PPUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: CALL_OW 12
73599: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73600: LD_ADDR_VAR 0 2
73604: PUSH
73605: LD_VAR 0 2
73609: PPUSH
73610: LD_VAR 0 2
73614: PUSH
73615: LD_INT 1
73617: PLUS
73618: PPUSH
73619: LD_VAR 0 1
73623: PUSH
73624: LD_VAR 0 4
73628: ARRAY
73629: PPUSH
73630: CALL_OW 2
73634: ST_TO_ADDR
// array := Delete ( array , index ) ;
73635: LD_ADDR_VAR 0 1
73639: PUSH
73640: LD_VAR 0 1
73644: PPUSH
73645: LD_VAR 0 4
73649: PPUSH
73650: CALL_OW 3
73654: ST_TO_ADDR
// end ;
73655: GO 73579
73657: POP
73658: POP
// end ;
73659: LD_VAR 0 2
73663: RET
// export function GetBaseMaterials ( base ) ; begin
73664: LD_INT 0
73666: PPUSH
// result := [ 0 , 0 , 0 ] ;
73667: LD_ADDR_VAR 0 2
73671: PUSH
73672: LD_INT 0
73674: PUSH
73675: LD_INT 0
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: LIST
73685: ST_TO_ADDR
// if not base then
73686: LD_VAR 0 1
73690: NOT
73691: IFFALSE 73695
// exit ;
73693: GO 73744
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73695: LD_ADDR_VAR 0 2
73699: PUSH
73700: LD_VAR 0 1
73704: PPUSH
73705: LD_INT 1
73707: PPUSH
73708: CALL_OW 275
73712: PUSH
73713: LD_VAR 0 1
73717: PPUSH
73718: LD_INT 2
73720: PPUSH
73721: CALL_OW 275
73725: PUSH
73726: LD_VAR 0 1
73730: PPUSH
73731: LD_INT 3
73733: PPUSH
73734: CALL_OW 275
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: LIST
73743: ST_TO_ADDR
// end ;
73744: LD_VAR 0 2
73748: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73749: LD_INT 0
73751: PPUSH
73752: PPUSH
// result := array ;
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: LD_VAR 0 1
73762: ST_TO_ADDR
// if size > 0 then
73763: LD_VAR 0 2
73767: PUSH
73768: LD_INT 0
73770: GREATER
73771: IFFALSE 73817
// for i := array downto size do
73773: LD_ADDR_VAR 0 4
73777: PUSH
73778: DOUBLE
73779: LD_VAR 0 1
73783: INC
73784: ST_TO_ADDR
73785: LD_VAR 0 2
73789: PUSH
73790: FOR_DOWNTO
73791: IFFALSE 73815
// result := Delete ( result , result ) ;
73793: LD_ADDR_VAR 0 3
73797: PUSH
73798: LD_VAR 0 3
73802: PPUSH
73803: LD_VAR 0 3
73807: PPUSH
73808: CALL_OW 3
73812: ST_TO_ADDR
73813: GO 73790
73815: POP
73816: POP
// end ;
73817: LD_VAR 0 3
73821: RET
// export function ComExit ( unit ) ; var tmp ; begin
73822: LD_INT 0
73824: PPUSH
73825: PPUSH
// if not IsInUnit ( unit ) then
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 310
73835: NOT
73836: IFFALSE 73840
// exit ;
73838: GO 73900
// tmp := IsInUnit ( unit ) ;
73840: LD_ADDR_VAR 0 3
73844: PUSH
73845: LD_VAR 0 1
73849: PPUSH
73850: CALL_OW 310
73854: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73855: LD_VAR 0 3
73859: PPUSH
73860: CALL_OW 247
73864: PUSH
73865: LD_INT 2
73867: EQUAL
73868: IFFALSE 73881
// ComExitVehicle ( unit ) else
73870: LD_VAR 0 1
73874: PPUSH
73875: CALL_OW 121
73879: GO 73890
// ComExitBuilding ( unit ) ;
73881: LD_VAR 0 1
73885: PPUSH
73886: CALL_OW 122
// result := tmp ;
73890: LD_ADDR_VAR 0 2
73894: PUSH
73895: LD_VAR 0 3
73899: ST_TO_ADDR
// end ;
73900: LD_VAR 0 2
73904: RET
// export function ComExitAll ( units ) ; var i ; begin
73905: LD_INT 0
73907: PPUSH
73908: PPUSH
// if not units then
73909: LD_VAR 0 1
73913: NOT
73914: IFFALSE 73918
// exit ;
73916: GO 73944
// for i in units do
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 1
73927: PUSH
73928: FOR_IN
73929: IFFALSE 73942
// ComExit ( i ) ;
73931: LD_VAR 0 3
73935: PPUSH
73936: CALL 73822 0 1
73940: GO 73928
73942: POP
73943: POP
// end ;
73944: LD_VAR 0 2
73948: RET
// export function ResetHc ; begin
73949: LD_INT 0
73951: PPUSH
// InitHc ;
73952: CALL_OW 19
// hc_importance := 0 ;
73956: LD_ADDR_OWVAR 32
73960: PUSH
73961: LD_INT 0
73963: ST_TO_ADDR
// end ;
73964: LD_VAR 0 1
73968: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73969: LD_INT 0
73971: PPUSH
73972: PPUSH
73973: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73974: LD_ADDR_VAR 0 6
73978: PUSH
73979: LD_VAR 0 1
73983: PUSH
73984: LD_VAR 0 3
73988: PLUS
73989: PUSH
73990: LD_INT 2
73992: DIV
73993: ST_TO_ADDR
// if _x < 0 then
73994: LD_VAR 0 6
73998: PUSH
73999: LD_INT 0
74001: LESS
74002: IFFALSE 74019
// _x := _x * - 1 ;
74004: LD_ADDR_VAR 0 6
74008: PUSH
74009: LD_VAR 0 6
74013: PUSH
74014: LD_INT 1
74016: NEG
74017: MUL
74018: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74019: LD_ADDR_VAR 0 7
74023: PUSH
74024: LD_VAR 0 2
74028: PUSH
74029: LD_VAR 0 4
74033: PLUS
74034: PUSH
74035: LD_INT 2
74037: DIV
74038: ST_TO_ADDR
// if _y < 0 then
74039: LD_VAR 0 7
74043: PUSH
74044: LD_INT 0
74046: LESS
74047: IFFALSE 74064
// _y := _y * - 1 ;
74049: LD_ADDR_VAR 0 7
74053: PUSH
74054: LD_VAR 0 7
74058: PUSH
74059: LD_INT 1
74061: NEG
74062: MUL
74063: ST_TO_ADDR
// result := [ _x , _y ] ;
74064: LD_ADDR_VAR 0 5
74068: PUSH
74069: LD_VAR 0 6
74073: PUSH
74074: LD_VAR 0 7
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: ST_TO_ADDR
// end ;
74083: LD_VAR 0 5
74087: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74088: LD_INT 0
74090: PPUSH
74091: PPUSH
74092: PPUSH
74093: PPUSH
// task := GetTaskList ( unit ) ;
74094: LD_ADDR_VAR 0 7
74098: PUSH
74099: LD_VAR 0 1
74103: PPUSH
74104: CALL_OW 437
74108: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74109: LD_VAR 0 7
74113: NOT
74114: PUSH
74115: LD_VAR 0 1
74119: PPUSH
74120: LD_VAR 0 2
74124: PPUSH
74125: CALL_OW 308
74129: NOT
74130: AND
74131: IFFALSE 74135
// exit ;
74133: GO 74253
// if IsInArea ( unit , area ) then
74135: LD_VAR 0 1
74139: PPUSH
74140: LD_VAR 0 2
74144: PPUSH
74145: CALL_OW 308
74149: IFFALSE 74167
// begin ComMoveToArea ( unit , goAway ) ;
74151: LD_VAR 0 1
74155: PPUSH
74156: LD_VAR 0 3
74160: PPUSH
74161: CALL_OW 113
// exit ;
74165: GO 74253
// end ; if task [ 1 ] [ 1 ] <> M then
74167: LD_VAR 0 7
74171: PUSH
74172: LD_INT 1
74174: ARRAY
74175: PUSH
74176: LD_INT 1
74178: ARRAY
74179: PUSH
74180: LD_STRING M
74182: NONEQUAL
74183: IFFALSE 74187
// exit ;
74185: GO 74253
// x := task [ 1 ] [ 2 ] ;
74187: LD_ADDR_VAR 0 5
74191: PUSH
74192: LD_VAR 0 7
74196: PUSH
74197: LD_INT 1
74199: ARRAY
74200: PUSH
74201: LD_INT 2
74203: ARRAY
74204: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74205: LD_ADDR_VAR 0 6
74209: PUSH
74210: LD_VAR 0 7
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PUSH
74219: LD_INT 3
74221: ARRAY
74222: ST_TO_ADDR
// if InArea ( x , y , area ) then
74223: LD_VAR 0 5
74227: PPUSH
74228: LD_VAR 0 6
74232: PPUSH
74233: LD_VAR 0 2
74237: PPUSH
74238: CALL_OW 309
74242: IFFALSE 74253
// ComStop ( unit ) ;
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 141
// end ;
74253: LD_VAR 0 4
74257: RET
// export function Abs ( value ) ; begin
74258: LD_INT 0
74260: PPUSH
// result := value ;
74261: LD_ADDR_VAR 0 2
74265: PUSH
74266: LD_VAR 0 1
74270: ST_TO_ADDR
// if value < 0 then
74271: LD_VAR 0 1
74275: PUSH
74276: LD_INT 0
74278: LESS
74279: IFFALSE 74296
// result := value * - 1 ;
74281: LD_ADDR_VAR 0 2
74285: PUSH
74286: LD_VAR 0 1
74290: PUSH
74291: LD_INT 1
74293: NEG
74294: MUL
74295: ST_TO_ADDR
// end ;
74296: LD_VAR 0 2
74300: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74301: LD_INT 0
74303: PPUSH
74304: PPUSH
74305: PPUSH
74306: PPUSH
74307: PPUSH
74308: PPUSH
74309: PPUSH
74310: PPUSH
// if not unit or not building then
74311: LD_VAR 0 1
74315: NOT
74316: PUSH
74317: LD_VAR 0 2
74321: NOT
74322: OR
74323: IFFALSE 74327
// exit ;
74325: GO 74553
// x := GetX ( building ) ;
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: LD_VAR 0 2
74336: PPUSH
74337: CALL_OW 250
74341: ST_TO_ADDR
// y := GetY ( building ) ;
74342: LD_ADDR_VAR 0 6
74346: PUSH
74347: LD_VAR 0 2
74351: PPUSH
74352: CALL_OW 251
74356: ST_TO_ADDR
// d := GetDir ( building ) ;
74357: LD_ADDR_VAR 0 8
74361: PUSH
74362: LD_VAR 0 2
74366: PPUSH
74367: CALL_OW 254
74371: ST_TO_ADDR
// r := 4 ;
74372: LD_ADDR_VAR 0 9
74376: PUSH
74377: LD_INT 4
74379: ST_TO_ADDR
// for i := 1 to 5 do
74380: LD_ADDR_VAR 0 10
74384: PUSH
74385: DOUBLE
74386: LD_INT 1
74388: DEC
74389: ST_TO_ADDR
74390: LD_INT 5
74392: PUSH
74393: FOR_TO
74394: IFFALSE 74551
// begin _x := ShiftX ( x , d , r + i ) ;
74396: LD_ADDR_VAR 0 5
74400: PUSH
74401: LD_VAR 0 4
74405: PPUSH
74406: LD_VAR 0 8
74410: PPUSH
74411: LD_VAR 0 9
74415: PUSH
74416: LD_VAR 0 10
74420: PLUS
74421: PPUSH
74422: CALL_OW 272
74426: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74427: LD_ADDR_VAR 0 7
74431: PUSH
74432: LD_VAR 0 6
74436: PPUSH
74437: LD_VAR 0 8
74441: PPUSH
74442: LD_VAR 0 9
74446: PUSH
74447: LD_VAR 0 10
74451: PLUS
74452: PPUSH
74453: CALL_OW 273
74457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74458: LD_VAR 0 5
74462: PPUSH
74463: LD_VAR 0 7
74467: PPUSH
74468: CALL_OW 488
74472: PUSH
74473: LD_VAR 0 5
74477: PPUSH
74478: LD_VAR 0 7
74482: PPUSH
74483: CALL_OW 428
74487: PPUSH
74488: CALL_OW 247
74492: PUSH
74493: LD_INT 3
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: IN
74503: NOT
74504: AND
74505: IFFALSE 74549
// begin ComMoveXY ( unit , _x , _y ) ;
74507: LD_VAR 0 1
74511: PPUSH
74512: LD_VAR 0 5
74516: PPUSH
74517: LD_VAR 0 7
74521: PPUSH
74522: CALL_OW 111
// result := [ _x , _y ] ;
74526: LD_ADDR_VAR 0 3
74530: PUSH
74531: LD_VAR 0 5
74535: PUSH
74536: LD_VAR 0 7
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: ST_TO_ADDR
// exit ;
74545: POP
74546: POP
74547: GO 74553
// end ; end ;
74549: GO 74393
74551: POP
74552: POP
// end ;
74553: LD_VAR 0 3
74557: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74558: LD_INT 0
74560: PPUSH
74561: PPUSH
74562: PPUSH
// result := 0 ;
74563: LD_ADDR_VAR 0 3
74567: PUSH
74568: LD_INT 0
74570: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74571: LD_VAR 0 1
74575: PUSH
74576: LD_INT 0
74578: LESS
74579: PUSH
74580: LD_VAR 0 1
74584: PUSH
74585: LD_INT 8
74587: GREATER
74588: OR
74589: PUSH
74590: LD_VAR 0 2
74594: PUSH
74595: LD_INT 0
74597: LESS
74598: OR
74599: PUSH
74600: LD_VAR 0 2
74604: PUSH
74605: LD_INT 8
74607: GREATER
74608: OR
74609: IFFALSE 74613
// exit ;
74611: GO 74688
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74613: LD_ADDR_VAR 0 4
74617: PUSH
74618: LD_INT 22
74620: PUSH
74621: LD_VAR 0 2
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PPUSH
74630: CALL_OW 69
74634: PUSH
74635: FOR_IN
74636: IFFALSE 74686
// begin un := UnitShoot ( i ) ;
74638: LD_ADDR_VAR 0 5
74642: PUSH
74643: LD_VAR 0 4
74647: PPUSH
74648: CALL_OW 504
74652: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74653: LD_VAR 0 5
74657: PPUSH
74658: CALL_OW 255
74662: PUSH
74663: LD_VAR 0 1
74667: EQUAL
74668: IFFALSE 74684
// begin result := un ;
74670: LD_ADDR_VAR 0 3
74674: PUSH
74675: LD_VAR 0 5
74679: ST_TO_ADDR
// exit ;
74680: POP
74681: POP
74682: GO 74688
// end ; end ;
74684: GO 74635
74686: POP
74687: POP
// end ;
74688: LD_VAR 0 3
74692: RET
// export function GetCargoBay ( units ) ; begin
74693: LD_INT 0
74695: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74696: LD_ADDR_VAR 0 2
74700: PUSH
74701: LD_VAR 0 1
74705: PPUSH
74706: LD_INT 2
74708: PUSH
74709: LD_INT 34
74711: PUSH
74712: LD_INT 12
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 34
74721: PUSH
74722: LD_INT 51
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 34
74731: PUSH
74732: LD_INT 32
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 34
74741: PUSH
74742: LD_EXP 49
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: PPUSH
74758: CALL_OW 72
74762: ST_TO_ADDR
// end ;
74763: LD_VAR 0 2
74767: RET
// export function Negate ( value ) ; begin
74768: LD_INT 0
74770: PPUSH
// result := not value ;
74771: LD_ADDR_VAR 0 2
74775: PUSH
74776: LD_VAR 0 1
74780: NOT
74781: ST_TO_ADDR
// end ;
74782: LD_VAR 0 2
74786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74787: LD_INT 0
74789: PPUSH
// if x1 = x2 then
74790: LD_VAR 0 1
74794: PUSH
74795: LD_VAR 0 3
74799: EQUAL
74800: IFFALSE 74834
// begin if y1 > y2 then
74802: LD_VAR 0 2
74806: PUSH
74807: LD_VAR 0 4
74811: GREATER
74812: IFFALSE 74824
// result := 0 else
74814: LD_ADDR_VAR 0 5
74818: PUSH
74819: LD_INT 0
74821: ST_TO_ADDR
74822: GO 74832
// result := 3 ;
74824: LD_ADDR_VAR 0 5
74828: PUSH
74829: LD_INT 3
74831: ST_TO_ADDR
// exit ;
74832: GO 74920
// end ; if y1 = y2 then
74834: LD_VAR 0 2
74838: PUSH
74839: LD_VAR 0 4
74843: EQUAL
74844: IFFALSE 74878
// begin if x1 > x2 then
74846: LD_VAR 0 1
74850: PUSH
74851: LD_VAR 0 3
74855: GREATER
74856: IFFALSE 74868
// result := 1 else
74858: LD_ADDR_VAR 0 5
74862: PUSH
74863: LD_INT 1
74865: ST_TO_ADDR
74866: GO 74876
// result := 4 ;
74868: LD_ADDR_VAR 0 5
74872: PUSH
74873: LD_INT 4
74875: ST_TO_ADDR
// exit ;
74876: GO 74920
// end ; if x1 > x2 and y1 > y2 then
74878: LD_VAR 0 1
74882: PUSH
74883: LD_VAR 0 3
74887: GREATER
74888: PUSH
74889: LD_VAR 0 2
74893: PUSH
74894: LD_VAR 0 4
74898: GREATER
74899: AND
74900: IFFALSE 74912
// result := 2 else
74902: LD_ADDR_VAR 0 5
74906: PUSH
74907: LD_INT 2
74909: ST_TO_ADDR
74910: GO 74920
// result := 5 ;
74912: LD_ADDR_VAR 0 5
74916: PUSH
74917: LD_INT 5
74919: ST_TO_ADDR
// end ;
74920: LD_VAR 0 5
74924: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74925: LD_INT 0
74927: PPUSH
74928: PPUSH
// if not driver or not IsInUnit ( driver ) then
74929: LD_VAR 0 1
74933: NOT
74934: PUSH
74935: LD_VAR 0 1
74939: PPUSH
74940: CALL_OW 310
74944: NOT
74945: OR
74946: IFFALSE 74950
// exit ;
74948: GO 75040
// vehicle := IsInUnit ( driver ) ;
74950: LD_ADDR_VAR 0 3
74954: PUSH
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 310
74964: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74965: LD_VAR 0 1
74969: PPUSH
74970: LD_STRING \
74972: PUSH
74973: LD_INT 0
74975: PUSH
74976: LD_INT 0
74978: PUSH
74979: LD_INT 0
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: PUSH
75000: LD_STRING E
75002: PUSH
75003: LD_INT 0
75005: PUSH
75006: LD_INT 0
75008: PUSH
75009: LD_VAR 0 3
75013: PUSH
75014: LD_INT 0
75016: PUSH
75017: LD_INT 0
75019: PUSH
75020: LD_INT 0
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PPUSH
75036: CALL_OW 446
// end ;
75040: LD_VAR 0 2
75044: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75045: LD_INT 0
75047: PPUSH
75048: PPUSH
// if not driver or not IsInUnit ( driver ) then
75049: LD_VAR 0 1
75053: NOT
75054: PUSH
75055: LD_VAR 0 1
75059: PPUSH
75060: CALL_OW 310
75064: NOT
75065: OR
75066: IFFALSE 75070
// exit ;
75068: GO 75160
// vehicle := IsInUnit ( driver ) ;
75070: LD_ADDR_VAR 0 3
75074: PUSH
75075: LD_VAR 0 1
75079: PPUSH
75080: CALL_OW 310
75084: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75085: LD_VAR 0 1
75089: PPUSH
75090: LD_STRING \
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: LD_INT 0
75101: PUSH
75102: LD_INT 0
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: LD_INT 0
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: PUSH
75120: LD_STRING E
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: LD_VAR 0 3
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PPUSH
75156: CALL_OW 447
// end ;
75160: LD_VAR 0 2
75164: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75165: LD_INT 0
75167: PPUSH
75168: PPUSH
75169: PPUSH
// tmp := [ ] ;
75170: LD_ADDR_VAR 0 5
75174: PUSH
75175: EMPTY
75176: ST_TO_ADDR
// for i in units do
75177: LD_ADDR_VAR 0 4
75181: PUSH
75182: LD_VAR 0 1
75186: PUSH
75187: FOR_IN
75188: IFFALSE 75226
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75190: LD_ADDR_VAR 0 5
75194: PUSH
75195: LD_VAR 0 5
75199: PPUSH
75200: LD_VAR 0 5
75204: PUSH
75205: LD_INT 1
75207: PLUS
75208: PPUSH
75209: LD_VAR 0 4
75213: PPUSH
75214: CALL_OW 256
75218: PPUSH
75219: CALL_OW 2
75223: ST_TO_ADDR
75224: GO 75187
75226: POP
75227: POP
// if not tmp then
75228: LD_VAR 0 5
75232: NOT
75233: IFFALSE 75237
// exit ;
75235: GO 75285
// if asc then
75237: LD_VAR 0 2
75241: IFFALSE 75265
// result := SortListByListAsc ( units , tmp ) else
75243: LD_ADDR_VAR 0 3
75247: PUSH
75248: LD_VAR 0 1
75252: PPUSH
75253: LD_VAR 0 5
75257: PPUSH
75258: CALL_OW 76
75262: ST_TO_ADDR
75263: GO 75285
// result := SortListByListDesc ( units , tmp ) ;
75265: LD_ADDR_VAR 0 3
75269: PUSH
75270: LD_VAR 0 1
75274: PPUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: CALL_OW 77
75284: ST_TO_ADDR
// end ;
75285: LD_VAR 0 3
75289: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75290: LD_INT 0
75292: PPUSH
75293: PPUSH
// task := GetTaskList ( mech ) ;
75294: LD_ADDR_VAR 0 4
75298: PUSH
75299: LD_VAR 0 1
75303: PPUSH
75304: CALL_OW 437
75308: ST_TO_ADDR
// if not task then
75309: LD_VAR 0 4
75313: NOT
75314: IFFALSE 75318
// exit ;
75316: GO 75360
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75318: LD_ADDR_VAR 0 3
75322: PUSH
75323: LD_VAR 0 4
75327: PUSH
75328: LD_INT 1
75330: ARRAY
75331: PUSH
75332: LD_INT 1
75334: ARRAY
75335: PUSH
75336: LD_STRING r
75338: EQUAL
75339: PUSH
75340: LD_VAR 0 4
75344: PUSH
75345: LD_INT 1
75347: ARRAY
75348: PUSH
75349: LD_INT 4
75351: ARRAY
75352: PUSH
75353: LD_VAR 0 2
75357: EQUAL
75358: AND
75359: ST_TO_ADDR
// end ;
75360: LD_VAR 0 3
75364: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75365: LD_INT 0
75367: PPUSH
// SetDir ( unit , d ) ;
75368: LD_VAR 0 1
75372: PPUSH
75373: LD_VAR 0 4
75377: PPUSH
75378: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75382: LD_VAR 0 1
75386: PPUSH
75387: LD_VAR 0 2
75391: PPUSH
75392: LD_VAR 0 3
75396: PPUSH
75397: LD_VAR 0 5
75401: PPUSH
75402: CALL_OW 48
// end ;
75406: LD_VAR 0 6
75410: RET
// export function ToNaturalNumber ( number ) ; begin
75411: LD_INT 0
75413: PPUSH
// result := number div 1 ;
75414: LD_ADDR_VAR 0 2
75418: PUSH
75419: LD_VAR 0 1
75423: PUSH
75424: LD_INT 1
75426: DIV
75427: ST_TO_ADDR
// if number < 0 then
75428: LD_VAR 0 1
75432: PUSH
75433: LD_INT 0
75435: LESS
75436: IFFALSE 75446
// result := 0 ;
75438: LD_ADDR_VAR 0 2
75442: PUSH
75443: LD_INT 0
75445: ST_TO_ADDR
// end ;
75446: LD_VAR 0 2
75450: RET
// export function SortByClass ( units , class ) ; var un ; begin
75451: LD_INT 0
75453: PPUSH
75454: PPUSH
// if not units or not class then
75455: LD_VAR 0 1
75459: NOT
75460: PUSH
75461: LD_VAR 0 2
75465: NOT
75466: OR
75467: IFFALSE 75471
// exit ;
75469: GO 75566
// result := [ ] ;
75471: LD_ADDR_VAR 0 3
75475: PUSH
75476: EMPTY
75477: ST_TO_ADDR
// for un in units do
75478: LD_ADDR_VAR 0 4
75482: PUSH
75483: LD_VAR 0 1
75487: PUSH
75488: FOR_IN
75489: IFFALSE 75564
// if GetClass ( un ) = class then
75491: LD_VAR 0 4
75495: PPUSH
75496: CALL_OW 257
75500: PUSH
75501: LD_VAR 0 2
75505: EQUAL
75506: IFFALSE 75533
// result := Insert ( result , 1 , un ) else
75508: LD_ADDR_VAR 0 3
75512: PUSH
75513: LD_VAR 0 3
75517: PPUSH
75518: LD_INT 1
75520: PPUSH
75521: LD_VAR 0 4
75525: PPUSH
75526: CALL_OW 2
75530: ST_TO_ADDR
75531: GO 75562
// result := Replace ( result , result + 1 , un ) ;
75533: LD_ADDR_VAR 0 3
75537: PUSH
75538: LD_VAR 0 3
75542: PPUSH
75543: LD_VAR 0 3
75547: PUSH
75548: LD_INT 1
75550: PLUS
75551: PPUSH
75552: LD_VAR 0 4
75556: PPUSH
75557: CALL_OW 1
75561: ST_TO_ADDR
75562: GO 75488
75564: POP
75565: POP
// end ;
75566: LD_VAR 0 3
75570: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75571: LD_INT 0
75573: PPUSH
75574: PPUSH
75575: PPUSH
75576: PPUSH
75577: PPUSH
75578: PPUSH
75579: PPUSH
// result := [ ] ;
75580: LD_ADDR_VAR 0 4
75584: PUSH
75585: EMPTY
75586: ST_TO_ADDR
// if x - r < 0 then
75587: LD_VAR 0 1
75591: PUSH
75592: LD_VAR 0 3
75596: MINUS
75597: PUSH
75598: LD_INT 0
75600: LESS
75601: IFFALSE 75613
// min_x := 0 else
75603: LD_ADDR_VAR 0 8
75607: PUSH
75608: LD_INT 0
75610: ST_TO_ADDR
75611: GO 75629
// min_x := x - r ;
75613: LD_ADDR_VAR 0 8
75617: PUSH
75618: LD_VAR 0 1
75622: PUSH
75623: LD_VAR 0 3
75627: MINUS
75628: ST_TO_ADDR
// if y - r < 0 then
75629: LD_VAR 0 2
75633: PUSH
75634: LD_VAR 0 3
75638: MINUS
75639: PUSH
75640: LD_INT 0
75642: LESS
75643: IFFALSE 75655
// min_y := 0 else
75645: LD_ADDR_VAR 0 7
75649: PUSH
75650: LD_INT 0
75652: ST_TO_ADDR
75653: GO 75671
// min_y := y - r ;
75655: LD_ADDR_VAR 0 7
75659: PUSH
75660: LD_VAR 0 2
75664: PUSH
75665: LD_VAR 0 3
75669: MINUS
75670: ST_TO_ADDR
// max_x := x + r ;
75671: LD_ADDR_VAR 0 9
75675: PUSH
75676: LD_VAR 0 1
75680: PUSH
75681: LD_VAR 0 3
75685: PLUS
75686: ST_TO_ADDR
// max_y := y + r ;
75687: LD_ADDR_VAR 0 10
75691: PUSH
75692: LD_VAR 0 2
75696: PUSH
75697: LD_VAR 0 3
75701: PLUS
75702: ST_TO_ADDR
// for _x = min_x to max_x do
75703: LD_ADDR_VAR 0 5
75707: PUSH
75708: DOUBLE
75709: LD_VAR 0 8
75713: DEC
75714: ST_TO_ADDR
75715: LD_VAR 0 9
75719: PUSH
75720: FOR_TO
75721: IFFALSE 75822
// for _y = min_y to max_y do
75723: LD_ADDR_VAR 0 6
75727: PUSH
75728: DOUBLE
75729: LD_VAR 0 7
75733: DEC
75734: ST_TO_ADDR
75735: LD_VAR 0 10
75739: PUSH
75740: FOR_TO
75741: IFFALSE 75818
// begin if not ValidHex ( _x , _y ) then
75743: LD_VAR 0 5
75747: PPUSH
75748: LD_VAR 0 6
75752: PPUSH
75753: CALL_OW 488
75757: NOT
75758: IFFALSE 75762
// continue ;
75760: GO 75740
// if GetResourceTypeXY ( _x , _y ) then
75762: LD_VAR 0 5
75766: PPUSH
75767: LD_VAR 0 6
75771: PPUSH
75772: CALL_OW 283
75776: IFFALSE 75816
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75778: LD_ADDR_VAR 0 4
75782: PUSH
75783: LD_VAR 0 4
75787: PPUSH
75788: LD_VAR 0 4
75792: PUSH
75793: LD_INT 1
75795: PLUS
75796: PPUSH
75797: LD_VAR 0 5
75801: PUSH
75802: LD_VAR 0 6
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PPUSH
75811: CALL_OW 1
75815: ST_TO_ADDR
// end ;
75816: GO 75740
75818: POP
75819: POP
75820: GO 75720
75822: POP
75823: POP
// end ;
75824: LD_VAR 0 4
75828: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75829: LD_INT 0
75831: PPUSH
75832: PPUSH
75833: PPUSH
75834: PPUSH
75835: PPUSH
75836: PPUSH
// if not units then
75837: LD_VAR 0 1
75841: NOT
75842: IFFALSE 75846
// exit ;
75844: GO 76247
// result := UnitFilter ( units , [ f_ok ] ) ;
75846: LD_ADDR_VAR 0 3
75850: PUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: LD_INT 50
75858: PUSH
75859: EMPTY
75860: LIST
75861: PPUSH
75862: CALL_OW 72
75866: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75867: LD_ADDR_VAR 0 7
75871: PUSH
75872: LD_VAR 0 1
75876: PUSH
75877: LD_INT 1
75879: ARRAY
75880: PPUSH
75881: CALL_OW 255
75885: ST_TO_ADDR
// if not result then
75886: LD_VAR 0 3
75890: NOT
75891: IFFALSE 75895
// exit ;
75893: GO 76247
// for i in result do
75895: LD_ADDR_VAR 0 4
75899: PUSH
75900: LD_VAR 0 3
75904: PUSH
75905: FOR_IN
75906: IFFALSE 76245
// begin tag := GetTag ( i ) + 1 ;
75908: LD_ADDR_VAR 0 8
75912: PUSH
75913: LD_VAR 0 4
75917: PPUSH
75918: CALL_OW 110
75922: PUSH
75923: LD_INT 1
75925: PLUS
75926: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75927: LD_ADDR_VAR 0 6
75931: PUSH
75932: LD_VAR 0 4
75936: PPUSH
75937: CALL_OW 250
75941: PPUSH
75942: LD_VAR 0 4
75946: PPUSH
75947: CALL_OW 251
75951: PPUSH
75952: LD_INT 6
75954: PPUSH
75955: CALL 75571 0 3
75959: ST_TO_ADDR
// if cr then
75960: LD_VAR 0 6
75964: IFFALSE 76003
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75966: LD_VAR 0 4
75970: PPUSH
75971: LD_VAR 0 6
75975: PUSH
75976: LD_INT 1
75978: ARRAY
75979: PUSH
75980: LD_INT 1
75982: ARRAY
75983: PPUSH
75984: LD_VAR 0 6
75988: PUSH
75989: LD_INT 1
75991: ARRAY
75992: PUSH
75993: LD_INT 2
75995: ARRAY
75996: PPUSH
75997: CALL_OW 116
76001: GO 76243
// if path > tag then
76003: LD_VAR 0 2
76007: PUSH
76008: LD_VAR 0 8
76012: GREATER
76013: IFFALSE 76191
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76015: LD_ADDR_VAR 0 5
76019: PUSH
76020: LD_INT 81
76022: PUSH
76023: LD_VAR 0 7
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: PUSH
76032: LD_INT 91
76034: PUSH
76035: LD_VAR 0 4
76039: PUSH
76040: LD_INT 12
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: LIST
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PPUSH
76052: CALL_OW 69
76056: ST_TO_ADDR
// if enemy then
76057: LD_VAR 0 5
76061: IFFALSE 76089
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76063: LD_VAR 0 4
76067: PPUSH
76068: LD_VAR 0 5
76072: PPUSH
76073: LD_VAR 0 4
76077: PPUSH
76078: CALL_OW 74
76082: PPUSH
76083: CALL_OW 115
76087: GO 76189
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76089: LD_VAR 0 4
76093: PPUSH
76094: LD_VAR 0 2
76098: PUSH
76099: LD_VAR 0 8
76103: ARRAY
76104: PUSH
76105: LD_INT 1
76107: ARRAY
76108: PPUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_VAR 0 8
76118: ARRAY
76119: PUSH
76120: LD_INT 2
76122: ARRAY
76123: PPUSH
76124: CALL_OW 297
76128: PUSH
76129: LD_INT 6
76131: GREATER
76132: IFFALSE 76175
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76134: LD_VAR 0 4
76138: PPUSH
76139: LD_VAR 0 2
76143: PUSH
76144: LD_VAR 0 8
76148: ARRAY
76149: PUSH
76150: LD_INT 1
76152: ARRAY
76153: PPUSH
76154: LD_VAR 0 2
76158: PUSH
76159: LD_VAR 0 8
76163: ARRAY
76164: PUSH
76165: LD_INT 2
76167: ARRAY
76168: PPUSH
76169: CALL_OW 114
76173: GO 76189
// SetTag ( i , tag ) ;
76175: LD_VAR 0 4
76179: PPUSH
76180: LD_VAR 0 8
76184: PPUSH
76185: CALL_OW 109
// end else
76189: GO 76243
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76191: LD_ADDR_VAR 0 5
76195: PUSH
76196: LD_INT 81
76198: PUSH
76199: LD_VAR 0 7
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PPUSH
76208: CALL_OW 69
76212: ST_TO_ADDR
// if enemy then
76213: LD_VAR 0 5
76217: IFFALSE 76243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76219: LD_VAR 0 4
76223: PPUSH
76224: LD_VAR 0 5
76228: PPUSH
76229: LD_VAR 0 4
76233: PPUSH
76234: CALL_OW 74
76238: PPUSH
76239: CALL_OW 115
// end ; end ;
76243: GO 75905
76245: POP
76246: POP
// end ; end_of_file
76247: LD_VAR 0 3
76251: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76252: LD_VAR 0 1
76256: PUSH
76257: LD_INT 200
76259: DOUBLE
76260: GREATEREQUAL
76261: IFFALSE 76269
76263: LD_INT 299
76265: DOUBLE
76266: LESSEQUAL
76267: IFTRUE 76271
76269: GO 76303
76271: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76272: LD_VAR 0 1
76276: PPUSH
76277: LD_VAR 0 2
76281: PPUSH
76282: LD_VAR 0 3
76286: PPUSH
76287: LD_VAR 0 4
76291: PPUSH
76292: LD_VAR 0 5
76296: PPUSH
76297: CALL 32814 0 5
76301: GO 76380
76303: LD_INT 300
76305: DOUBLE
76306: GREATEREQUAL
76307: IFFALSE 76315
76309: LD_INT 399
76311: DOUBLE
76312: LESSEQUAL
76313: IFTRUE 76317
76315: GO 76379
76317: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76318: LD_VAR 0 1
76322: PPUSH
76323: LD_VAR 0 2
76327: PPUSH
76328: LD_VAR 0 3
76332: PPUSH
76333: LD_VAR 0 4
76337: PPUSH
76338: LD_VAR 0 5
76342: PPUSH
76343: LD_VAR 0 6
76347: PPUSH
76348: LD_VAR 0 7
76352: PPUSH
76353: LD_VAR 0 8
76357: PPUSH
76358: LD_VAR 0 9
76362: PPUSH
76363: LD_VAR 0 10
76367: PPUSH
76368: LD_VAR 0 11
76372: PPUSH
76373: CALL 30702 0 11
76377: GO 76380
76379: POP
// end ;
76380: PPOPN 11
76382: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76383: LD_VAR 0 1
76387: PPUSH
76388: LD_VAR 0 2
76392: PPUSH
76393: LD_VAR 0 3
76397: PPUSH
76398: LD_VAR 0 4
76402: PPUSH
76403: LD_VAR 0 5
76407: PPUSH
76408: CALL 32796 0 5
// end ; end_of_file
76412: PPOPN 5
76414: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76415: LD_VAR 0 1
76419: PPUSH
76420: LD_VAR 0 2
76424: PPUSH
76425: LD_VAR 0 3
76429: PPUSH
76430: LD_VAR 0 4
76434: PPUSH
76435: LD_VAR 0 5
76439: PPUSH
76440: LD_VAR 0 6
76444: PPUSH
76445: CALL 19510 0 6
// end ;
76449: PPOPN 6
76451: END
