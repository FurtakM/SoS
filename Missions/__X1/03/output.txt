// export CaptureAmBase ; export FarmerDepot ; export start_americans , ConvoyAmericans_List , AmConvoySeePlayer , AmConvoyEscapeFromMap , AmConvoyEscapedFromPlayer , AmAlarmAttack , ConvoyPlaced ; export attacksCounter ; export first_wave , second_wave , third_wave , fourth_wave ; export waveDialog , waveDialogBlock ; export main_crate_goal , secondary_crate_goal , crates_other_needs ; export americans_attacking , attack_times ; export Americans_are_evacuating , Americans_have_evacuated , Americans_got_away ; export aviradze_plant_gathering , tamed_apemen , num_apeman_soldiers , first_armoury ; export first_workshop , first_lab , first_oil_mine , first_vehicle ; export GameCounterShow ; export SpottedAmericansBase ; export KilledAmSci_02 ; export first_shipment_have_been_sent ; export OtherTechHint ; export testing ; starting begin Resetfog ;
   0: NOP4
// testing = false ;
   4: NOP4
   8: PUSH
   9: LD_INT 0
  11: ST_TO_ADDR
// KilledAmSci_02 = LoadVariable ( scientists_got_away_02 , 1 ) ;
  12: NOP4
  16: PUSH
  17: LD_STRING scientists_got_away_02
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: NOP4
  27: ST_TO_ADDR
// CaptureAmBase = false ;
  28: NOP4
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// Americans_are_evacuating = false ;
  36: NOP4
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// Americans_have_evacuated = false ;
  44: NOP4
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// Americans_got_away = false ;
  52: NOP4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// SpottedAmericansBase = false ;
  60: NOP4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// AmConvoySeePlayer = false ;
  68: NOP4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// AmConvoyEscapeFromMap = false ;
  76: NOP4
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// AmConvoyEscapedFromPlayer = false ;
  84: NOP4
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// first_shipment_have_been_sent = false ;
  92: NOP4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// GameCounterShow = 0 ;
 100: NOP4
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// first_workshop = true ;
 108: NOP4
 112: PUSH
 113: LD_INT 1
 115: ST_TO_ADDR
// first_lab = true ;
 116: NOP4
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// first_armoury = true ;
 124: NOP4
 128: PUSH
 129: LD_INT 1
 131: ST_TO_ADDR
// first_oil_mine = true ;
 132: NOP4
 136: PUSH
 137: LD_INT 1
 139: ST_TO_ADDR
// first_vehicle = true ;
 140: NOP4
 144: PUSH
 145: LD_INT 1
 147: ST_TO_ADDR
// main_crate_goal = 350 ;
 148: NOP4
 152: PUSH
 153: LD_INT 350
 155: ST_TO_ADDR
// secondary_crate_goal = 450 ;
 156: NOP4
 160: PUSH
 161: LD_INT 450
 163: ST_TO_ADDR
// crates_other_needs = 140 ;
 164: NOP4
 168: PUSH
 169: LD_INT 140
 171: ST_TO_ADDR
// attacksCounter = 1 ;
 172: NOP4
 176: PUSH
 177: LD_INT 1
 179: ST_TO_ADDR
// waveDialog = 0 ;
 180: NOP4
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// waveDialogBlock = 0 ;
 188: NOP4
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// lastCrates = 0 ;
 196: NOP4
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// aviradze_plant_gathering = [ 2 , 2 , 2 ] ;
 204: NOP4
 208: PUSH
 209: LD_INT 2
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: LD_INT 2
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// attack_times = [ ] ;
 223: NOP4
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// ConvoyAmericans_List = [ ] ;
 230: NOP4
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// first_wave = [ ] ;
 237: NOP4
 241: PUSH
 242: EMPTY
 243: ST_TO_ADDR
// second_wave = [ ] ;
 244: NOP4
 248: PUSH
 249: EMPTY
 250: ST_TO_ADDR
// third_wave = [ ] ;
 251: NOP4
 255: PUSH
 256: EMPTY
 257: ST_TO_ADDR
// fourth_wave = [ ] ;
 258: NOP4
 262: PUSH
 263: EMPTY
 264: ST_TO_ADDR
// SetTech ( tech_Weap1 , 2 , state_enabled ) ;
 265: LD_INT 51
 267: PPUSH
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 1
 273: PPUSH
 274: NOP4
// PrepareDifficulty ;
 278: NOP4
// PrepareArabian ;
 282: NOP4
// PrepareAmericans ;
 286: NOP4
// PrepareNature ;
 290: NOP4
// Action ;
 294: NOP4
// end ; end_of_file
 298: END
// export Heike , Aviradze , Ralph , Oswald , Sonya , Kowalski , Willard , ArEngi , ArSol , Messenger , Sebel ; export FarmerVehicle ; export function PrepareArabian ; var i , temp_list ; var Lister ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
// InitUc ;
 305: NOP4
// InitHc ;
 309: NOP4
// uc_nation = nation_arabian ;
 313: LD_ADDR_OWVAR 21
 317: PUSH
 318: LD_INT 2
 320: ST_TO_ADDR
// uc_side = 2 ;
 321: LD_ADDR_OWVAR 20
 325: PUSH
 326: LD_INT 2
 328: ST_TO_ADDR
// uc_direction = 4 ;
 329: LD_ADDR_OWVAR 24
 333: PUSH
 334: LD_INT 4
 336: ST_TO_ADDR
// if not testing then
 337: NOP4
 341: NOT
 342: IFFALSE 636
// begin Heike = CreateCharacter ( Heike_02 ) ;
 344: NOP4
 348: PUSH
 349: LD_STRING Heike_02
 351: PPUSH
 352: NOP4
 356: ST_TO_ADDR
// SetClass ( Heike , class_soldier ) ;
 357: NOP4
 361: PPUSH
 362: LD_INT 1
 364: PPUSH
 365: NOP4
// Aviradze = CreateCharacter ( Aviradze_02 ) ;
 369: NOP4
 373: PUSH
 374: LD_STRING Aviradze_02
 376: PPUSH
 377: NOP4
 381: ST_TO_ADDR
// SetClass ( Aviradze , class_scientistic ) ;
 382: NOP4
 386: PPUSH
 387: LD_INT 4
 389: PPUSH
 390: NOP4
// if TestCharacters ( Ralph_02 ) then
 394: LD_STRING Ralph_02
 396: PPUSH
 397: NOP4
 401: IFFALSE 430
// begin Ralph = CreateCharacter ( Ralph_02 ) ;
 403: NOP4
 407: PUSH
 408: LD_STRING Ralph_02
 410: PPUSH
 411: NOP4
 415: ST_TO_ADDR
// SetClass ( Ralph , class_soldier ) ;
 416: NOP4
 420: PPUSH
 421: LD_INT 1
 423: PPUSH
 424: NOP4
// end else
 428: GO 438
// Ralph = 0 ;
 430: NOP4
 434: PUSH
 435: LD_INT 0
 437: ST_TO_ADDR
// if TestCharacters ( Oswald_02 ) then
 438: LD_STRING Oswald_02
 440: PPUSH
 441: NOP4
 445: IFFALSE 474
// begin Oswald = CreateCharacter ( Oswald_02 ) ;
 447: NOP4
 451: PUSH
 452: LD_STRING Oswald_02
 454: PPUSH
 455: NOP4
 459: ST_TO_ADDR
// SetClass ( Oswald , class_soldier ) ;
 460: NOP4
 464: PPUSH
 465: LD_INT 1
 467: PPUSH
 468: NOP4
// end else
 472: GO 482
// Oswald = 0 ;
 474: NOP4
 478: PUSH
 479: LD_INT 0
 481: ST_TO_ADDR
// if TestCharacters ( Sonya_02 ) then
 482: LD_STRING Sonya_02
 484: PPUSH
 485: NOP4
 489: IFFALSE 518
// begin Sonya = CreateCharacter ( Sonya_02 ) ;
 491: NOP4
 495: PUSH
 496: LD_STRING Sonya_02
 498: PPUSH
 499: NOP4
 503: ST_TO_ADDR
// SetClass ( Sonya , class_scientistic ) ;
 504: NOP4
 508: PPUSH
 509: LD_INT 4
 511: PPUSH
 512: NOP4
// end else
 516: GO 526
// Sonya = 0 ;
 518: NOP4
 522: PUSH
 523: LD_INT 0
 525: ST_TO_ADDR
// if TestCharacters ( Lister_02 ) then
 526: LD_STRING Lister_02
 528: PPUSH
 529: NOP4
 533: IFFALSE 562
// begin Lister = CreateCharacter ( Lister_02 ) ;
 535: NOP4
 539: PUSH
 540: LD_STRING Lister_02
 542: PPUSH
 543: NOP4
 547: ST_TO_ADDR
// SetClass ( Lister , class_soldier ) ;
 548: NOP4
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: NOP4
// end else
 560: GO 570
// Lister = 0 ;
 562: NOP4
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// for i in [ Heike , Aviradze , Ralph , Oswald , Sonya , Lister ] do
 570: NOP4
 574: PUSH
 575: NOP4
 579: PUSH
 580: NOP4
 584: PUSH
 585: NOP4
 589: PUSH
 590: NOP4
 594: PUSH
 595: NOP4
 599: PUSH
 600: NOP4
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: FOR_IN
 614: IFFALSE 632
// SetDir ( i , uc_direction ) ;
 616: NOP4
 620: PPUSH
 621: NOP4
 625: PPUSH
 626: NOP4
 630: GO 613
 632: POP
 633: POP
// end else
 634: GO 1132
// begin hc_attr = [ 10 , 12 ] ;
 636: LD_ADDR_OWVAR 29
 640: PUSH
 641: LD_INT 10
 643: PUSH
 644: LD_INT 12
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: ST_TO_ADDR
// hc_class = class_soldier ;
 651: LD_ADDR_OWVAR 28
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// hc_importance = 110 ;
 659: LD_ADDR_OWVAR 32
 663: PUSH
 664: LD_INT 110
 666: ST_TO_ADDR
// hc_sex = sex_female ;
 667: LD_ADDR_OWVAR 27
 671: PUSH
 672: LD_INT 2
 674: ST_TO_ADDR
// hc_name = Heike ;
 675: LD_ADDR_OWVAR 26
 679: PUSH
 680: LD_STRING Heike
 682: ST_TO_ADDR
// hc_skills = [ 5 , 0 , 1 , 1 ] ;
 683: LD_ADDR_OWVAR 31
 687: PUSH
 688: LD_INT 5
 690: PUSH
 691: LD_INT 0
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: LD_INT 1
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: ST_TO_ADDR
// Heike = CreateHuman ;
 706: NOP4
 710: PUSH
 711: NOP4
 715: ST_TO_ADDR
// hc_importance = 0 ;
 716: LD_ADDR_OWVAR 32
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// hc_sex := sex_male ;
 724: LD_ADDR_OWVAR 27
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// hc_class := class_scientistic ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 4
 739: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 1 , 4 ] ;
 740: LD_ADDR_OWVAR 30
 744: PUSH
 745: LD_INT 0
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 4
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 1 , 4 ] ;
 763: LD_ADDR_OWVAR 31
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 4
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: ST_TO_ADDR
// hc_name := Aviradze ;
 786: LD_ADDR_OWVAR 26
 790: PUSH
 791: LD_STRING Aviradze
 793: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
 794: LD_ADDR_OWVAR 29
 798: PUSH
 799: LD_INT 10
 801: PUSH
 802: LD_INT 12
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: ST_TO_ADDR
// Aviradze := CreateHuman ;
 809: NOP4
 813: PUSH
 814: NOP4
 818: ST_TO_ADDR
// hc_sex := sex_male ;
 819: LD_ADDR_OWVAR 27
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
// hc_class := class_soldier ;
 827: LD_ADDR_OWVAR 28
 831: PUSH
 832: LD_INT 1
 834: ST_TO_ADDR
// hc_basic_skills = [ 2 , 0 , 1 , 0 ] ;
 835: LD_ADDR_OWVAR 30
 839: PUSH
 840: LD_INT 2
 842: PUSH
 843: LD_INT 0
 845: PUSH
 846: LD_INT 1
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 2 , 0 ] ;
 858: LD_ADDR_OWVAR 31
 862: PUSH
 863: LD_INT 4
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 0
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// hc_name := Ralph ;
 881: LD_ADDR_OWVAR 26
 885: PUSH
 886: LD_STRING Ralph
 888: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 889: LD_ADDR_OWVAR 29
 893: PUSH
 894: LD_INT 10
 896: PUSH
 897: LD_INT 10
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: ST_TO_ADDR
// Ralph := CreateHuman ;
 904: NOP4
 908: PUSH
 909: NOP4
 913: ST_TO_ADDR
// hc_sex := sex_male ;
 914: LD_ADDR_OWVAR 27
 918: PUSH
 919: LD_INT 1
 921: ST_TO_ADDR
// hc_class := class_soldier ;
 922: LD_ADDR_OWVAR 28
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// hc_basic_skills = [ 2 , 1 , 1 , 0 ] ;
 930: LD_ADDR_OWVAR 30
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: ST_TO_ADDR
// hc_skills := [ 5 , 2 , 1 , 0 ] ;
 953: LD_ADDR_OWVAR 31
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: LD_INT 0
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: ST_TO_ADDR
// hc_name := Oswald ;
 976: LD_ADDR_OWVAR 26
 980: PUSH
 981: LD_STRING Oswald
 983: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 984: LD_ADDR_OWVAR 29
 988: PUSH
 989: LD_INT 11
 991: PUSH
 992: LD_INT 10
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: ST_TO_ADDR
// Oswald := CreateHuman ;
 999: NOP4
1003: PUSH
1004: NOP4
1008: ST_TO_ADDR
// hc_sex := sex_female ;
1009: LD_ADDR_OWVAR 27
1013: PUSH
1014: LD_INT 2
1016: ST_TO_ADDR
// hc_class := class_scientistic ;
1017: LD_ADDR_OWVAR 28
1021: PUSH
1022: LD_INT 4
1024: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 2 , 3 ] ;
1025: LD_ADDR_OWVAR 30
1029: PUSH
1030: LD_INT 0
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: LD_INT 2
1038: PUSH
1039: LD_INT 3
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 2 , 4 ] ;
1048: LD_ADDR_OWVAR 31
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 2
1061: PUSH
1062: LD_INT 4
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: ST_TO_ADDR
// hc_name := Sonya ;
1071: LD_ADDR_OWVAR 26
1075: PUSH
1076: LD_STRING Sonya
1078: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1079: LD_ADDR_OWVAR 29
1083: PUSH
1084: LD_INT 10
1086: PUSH
1087: LD_INT 11
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// Sonya := CreateHuman ;
1094: NOP4
1098: PUSH
1099: NOP4
1103: ST_TO_ADDR
// PrepareSoldier ( sex_male , 3 ) ;
1104: LD_INT 1
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: NOP4
// hc_name = Lister ;
1114: LD_ADDR_OWVAR 26
1118: PUSH
1119: LD_STRING Lister
1121: ST_TO_ADDR
// Lister = CreateHuman ;
1122: NOP4
1126: PUSH
1127: NOP4
1131: ST_TO_ADDR
// end ; Kowalski = NewCharacter ( Kowalski ) ;
1132: NOP4
1136: PUSH
1137: LD_STRING Kowalski
1139: PPUSH
1140: NOP4
1144: ST_TO_ADDR
// SetDir ( Kowalski , uc_direction ) ;
1145: NOP4
1149: PPUSH
1150: NOP4
1154: PPUSH
1155: NOP4
// PlaceUnitXY ( Kowalski , 87 , 37 , false ) ;
1159: NOP4
1163: PPUSH
1164: LD_INT 87
1166: PPUSH
1167: LD_INT 37
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: NOP4
// uc_direction = 1 ;
1177: LD_ADDR_OWVAR 24
1181: PUSH
1182: LD_INT 1
1184: ST_TO_ADDR
// Willard = NewCharacter ( Hadarach ) ;
1185: NOP4
1189: PUSH
1190: LD_STRING Hadarach
1192: PPUSH
1193: NOP4
1197: ST_TO_ADDR
// SetDir ( Willard , uc_direction ) ;
1198: NOP4
1202: PPUSH
1203: NOP4
1207: PPUSH
1208: NOP4
// PlaceUnitXY ( Willard , 85 , 39 , false ) ;
1212: NOP4
1216: PPUSH
1217: LD_INT 85
1219: PPUSH
1220: LD_INT 39
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: NOP4
// InitHc ;
1230: NOP4
// PrepareEngineer ( sex_male , 3 ) ;
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 3
1239: PPUSH
1240: NOP4
// ArEngi = CreateHuman ;
1244: NOP4
1248: PUSH
1249: NOP4
1253: ST_TO_ADDR
// SetSkill ( ArEngi , skill_engineering , 3 ) ;
1254: NOP4
1258: PPUSH
1259: LD_INT 2
1261: PPUSH
1262: LD_INT 3
1264: PPUSH
1265: NOP4
// PlaceUnitXY ( ArEngi , 87 , 38 , false ) ;
1269: NOP4
1273: PPUSH
1274: LD_INT 87
1276: PPUSH
1277: LD_INT 38
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: NOP4
// ArSol = Lister ;
1287: NOP4
1291: PUSH
1292: NOP4
1296: ST_TO_ADDR
// hc_sex = sex_female ;
1297: LD_ADDR_OWVAR 27
1301: PUSH
1302: LD_INT 2
1304: ST_TO_ADDR
// hc_class = class_scientistic ;
1305: LD_ADDR_OWVAR 28
1309: PUSH
1310: LD_INT 4
1312: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
1313: LD_ADDR_OWVAR 29
1317: PUSH
1318: LD_INT 10
1320: PUSH
1321: LD_INT 10
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
1328: LD_ADDR_OWVAR 30
1332: PUSH
1333: LD_INT 0
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 0
1341: PUSH
1342: LD_INT 2
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 0 , 3 ] ;
1351: LD_ADDR_OWVAR 31
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 3
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: ST_TO_ADDR
// hc_gallery = SecondCharsGal ;
1374: LD_ADDR_OWVAR 33
1378: PUSH
1379: LD_STRING SecondCharsGal
1381: ST_TO_ADDR
// hc_face_number = 15 ;
1382: LD_ADDR_OWVAR 34
1386: PUSH
1387: LD_INT 15
1389: ST_TO_ADDR
// hc_name = Lucy Sebel ;
1390: LD_ADDR_OWVAR 26
1394: PUSH
1395: LD_STRING Lucy Sebel
1397: ST_TO_ADDR
// Sebel = CreateHuman ;
1398: NOP4
1402: PUSH
1403: NOP4
1407: ST_TO_ADDR
// PlaceUnitXY ( Sebel , 88 , 40 , false ) ;
1408: NOP4
1412: PPUSH
1413: LD_INT 88
1415: PPUSH
1416: LD_INT 40
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: NOP4
// InitHc ;
1426: NOP4
// uc_direction = 4 ;
1430: LD_ADDR_OWVAR 24
1434: PUSH
1435: LD_INT 4
1437: ST_TO_ADDR
// uc_nation = 2 ;
1438: LD_ADDR_OWVAR 21
1442: PUSH
1443: LD_INT 2
1445: ST_TO_ADDR
// vc_chassis = ar_light_trike ;
1446: LD_ADDR_OWVAR 37
1450: PUSH
1451: LD_INT 12
1453: ST_TO_ADDR
// vc_control = control_manual ;
1454: LD_ADDR_OWVAR 38
1458: PUSH
1459: LD_INT 1
1461: ST_TO_ADDR
// vc_engine = engine_solar ;
1462: LD_ADDR_OWVAR 39
1466: PUSH
1467: LD_INT 2
1469: ST_TO_ADDR
// vc_weapon = 24 ;
1470: LD_ADDR_OWVAR 40
1474: PUSH
1475: LD_INT 24
1477: ST_TO_ADDR
// FarmerVehicle = CreateVehicle ;
1478: NOP4
1482: PUSH
1483: NOP4
1487: ST_TO_ADDR
// PlaceUnitXY ( FarmerVehicle , 99 , 9 , false ) ;
1488: NOP4
1492: PPUSH
1493: LD_INT 99
1495: PPUSH
1496: LD_INT 9
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: NOP4
// if not testing then
1506: NOP4
1510: NOT
1511: IFFALSE 1528
// begin Messenger = CreateCharacter ( Messenger_03 ) ;
1513: NOP4
1517: PUSH
1518: LD_STRING Messenger_03
1520: PPUSH
1521: NOP4
1525: ST_TO_ADDR
// end else
1526: GO 1541
// begin Messenger = NewCharacter ( Farmer ) ;
1528: NOP4
1532: PUSH
1533: LD_STRING Farmer
1535: PPUSH
1536: NOP4
1540: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Messenger , FarmerVehicle ) ;
1541: NOP4
1545: PPUSH
1546: NOP4
1550: PPUSH
1551: NOP4
// PlaceUnitXY ( Heike , 101 , 9 , false ) ;
1555: NOP4
1559: PPUSH
1560: LD_INT 101
1562: PPUSH
1563: LD_INT 9
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: NOP4
// PlaceUnitXY ( Aviradze , 102 , 7 , false ) ;
1573: NOP4
1577: PPUSH
1578: LD_INT 102
1580: PPUSH
1581: LD_INT 7
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: NOP4
// PlaceUnitXY ( Ralph , 101 , 8 , false ) ;
1591: NOP4
1595: PPUSH
1596: LD_INT 101
1598: PPUSH
1599: LD_INT 8
1601: PPUSH
1602: LD_INT 0
1604: PPUSH
1605: NOP4
// PlaceUnitXY ( Oswald , 102 , 10 , false ) ;
1609: NOP4
1613: PPUSH
1614: LD_INT 102
1616: PPUSH
1617: LD_INT 10
1619: PPUSH
1620: LD_INT 0
1622: PPUSH
1623: NOP4
// PlaceUnitXY ( Sonya , 103 , 9 , false ) ;
1627: NOP4
1631: PPUSH
1632: LD_INT 103
1634: PPUSH
1635: LD_INT 9
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: NOP4
// PlaceUnitXY ( Lister , 104 , 11 , false ) ;
1645: NOP4
1649: PPUSH
1650: LD_INT 104
1652: PPUSH
1653: LD_INT 11
1655: PPUSH
1656: LD_INT 0
1658: PPUSH
1659: NOP4
// ComTurnUnit ( [ Kowalski , Willard , ArEngi , Sebel ] , Heike ) ;
1663: NOP4
1667: PUSH
1668: NOP4
1672: PUSH
1673: NOP4
1677: PUSH
1678: NOP4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PPUSH
1689: NOP4
1693: PPUSH
1694: NOP4
// end ;
1698: LD_VAR 0 1
1702: RET
// export function PrepareFarmerUnits ; var eng , i ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
// InitUc ;
1708: NOP4
// InitHc ;
1712: NOP4
// uc_side = 5 ;
1716: LD_ADDR_OWVAR 20
1720: PUSH
1721: LD_INT 5
1723: ST_TO_ADDR
// uc_nation = 2 ;
1724: LD_ADDR_OWVAR 21
1728: PUSH
1729: LD_INT 2
1731: ST_TO_ADDR
// PrepareEngineer ( false , 4 ) ;
1732: LD_INT 0
1734: PPUSH
1735: LD_INT 4
1737: PPUSH
1738: NOP4
// eng = CreateHuman ;
1742: NOP4
1746: PUSH
1747: NOP4
1751: ST_TO_ADDR
// PrepareEngineer ( false , 4 ) ;
1752: LD_INT 0
1754: PPUSH
1755: LD_INT 4
1757: PPUSH
1758: NOP4
// eng = eng ^ CreateHuman ;
1762: NOP4
1766: PUSH
1767: NOP4
1771: PUSH
1772: NOP4
1776: ADD
1777: ST_TO_ADDR
// PrepareEngineer ( false , 4 ) ;
1778: LD_INT 0
1780: PPUSH
1781: LD_INT 4
1783: PPUSH
1784: NOP4
// eng = eng ^ CreateHuman ;
1788: NOP4
1792: PUSH
1793: NOP4
1797: PUSH
1798: NOP4
1802: ADD
1803: ST_TO_ADDR
// for i in eng do
1804: NOP4
1808: PUSH
1809: NOP4
1813: PUSH
1814: FOR_IN
1815: IFFALSE 1836
// PlaceUnitArea ( i , FarmerExitArea , false ) ;
1817: NOP4
1821: PPUSH
1822: NOP4
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: NOP4
1834: GO 1814
1836: POP
1837: POP
// for i = 1 to [ 2 , 1 , 0 ] [ difficulty ] do
1838: NOP4
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: NOP4
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1917
// begin PrepareSoldier ( false , [ 3 , 2 , 0 ] [ Difficulty ] ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 0
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: NOP4
1892: ARRAY
1893: PPUSH
1894: NOP4
// PlaceUnitArea ( CreateHuman , FarmerExitArea , false ) ;
1898: NOP4
1902: PPUSH
1903: NOP4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: NOP4
// end ;
1915: GO 1868
1917: POP
1918: POP
// end ; end_of_file
1919: LD_VAR 0 1
1923: RET
// export AmBuildCount ; every 0 0$1 do var i , temp , sol , eng , mech , sci , wounded , center , emptyBunkers , arm , enemy_inbase , fact , lab , depo , con , damaged ;
1924: GO 1926
1926: DISABLE
1927: LD_INT 0
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
1933: PPUSH
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// begin if americans_are_evacuating then
1945: NOP4
1949: IFFALSE 1953
// exit ;
1951: GO 3990
// center = [ 37 , 30 ] ;
1953: NOP4
1957: PUSH
1958: LD_INT 37
1960: PUSH
1961: LD_INT 30
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// wounded = UnitFilter ( start_americans , [ f_not , [ f_lives , 600 ] ] ) ;
1968: NOP4
1972: PUSH
1973: NOP4
1977: PPUSH
1978: LD_INT 3
1980: PUSH
1981: LD_INT 24
1983: PUSH
1984: LD_INT 600
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: NOP4
1999: ST_TO_ADDR
// con = FilterAllUnits ( [ [ f_side , 1 ] , [ f_constructed ] ] ) ;
2000: NOP4
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 57
2017: PUSH
2018: EMPTY
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: NOP4
2029: ST_TO_ADDR
// for i in wounded do
2030: NOP4
2034: PUSH
2035: NOP4
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2127
// if IsInUnit ( i ) then
2043: NOP4
2047: PPUSH
2048: NOP4
2052: IFFALSE 2065
// ComExitBuilding ( i ) else
2054: NOP4
2058: PPUSH
2059: NOP4
2063: GO 2125
// if GetDistUnitXY ( i , center [ 1 ] , center [ 2 ] ) > 5 then
2065: NOP4
2069: PPUSH
2070: NOP4
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: NOP4
2083: PUSH
2084: LD_INT 2
2086: ARRAY
2087: PPUSH
2088: NOP4
2092: PUSH
2093: LD_INT 5
2095: GREATER
2096: IFFALSE 2125
// ComMoveXY ( i , center [ 1 ] , center [ 2 ] ) ;
2098: NOP4
2102: PPUSH
2103: NOP4
2107: PUSH
2108: LD_INT 1
2110: ARRAY
2111: PPUSH
2112: NOP4
2116: PUSH
2117: LD_INT 2
2119: ARRAY
2120: PPUSH
2121: NOP4
2125: GO 2040
2127: POP
2128: POP
// sol = UnitFilter ( start_americans , [ [ f_class , class_soldier ] , [ f_lives , 600 ] ] ) ;
2129: NOP4
2133: PUSH
2134: NOP4
2138: PPUSH
2139: LD_INT 25
2141: PUSH
2142: LD_INT 1
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 24
2151: PUSH
2152: LD_INT 600
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PPUSH
2163: NOP4
2167: ST_TO_ADDR
// emptyBunkers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) ;
2168: NOP4
2172: PUSH
2173: LD_INT 22
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 58
2185: PUSH
2186: EMPTY
2187: LIST
2188: PUSH
2189: LD_INT 30
2191: PUSH
2192: LD_INT 32
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PPUSH
2204: NOP4
2208: PUSH
2209: LD_INT 22
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 58
2221: PUSH
2222: EMPTY
2223: LIST
2224: PUSH
2225: LD_INT 30
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PPUSH
2240: NOP4
2244: ADD
2245: ST_TO_ADDR
// arm = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_ok ] ] ) ;
2246: NOP4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 4
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 50
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: NOP4
2286: ST_TO_ADDR
// enemy_inbase = FilterUnitsInArea ( AmericanBaseArea , [ f_enemy , 1 ] ) ;
2287: NOP4
2291: PUSH
2292: NOP4
2296: PPUSH
2297: LD_INT 81
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: NOP4
2311: ST_TO_ADDR
// for i in sol do
2312: NOP4
2316: PUSH
2317: NOP4
2321: PUSH
2322: FOR_IN
2323: IFFALSE 2567
// if emptybunkers > 0 then
2325: NOP4
2329: PUSH
2330: LD_INT 0
2332: GREATER
2333: IFFALSE 2373
// begin ComEnterUnit ( i , emptybunkers [ 1 ] ) ;
2335: NOP4
2339: PPUSH
2340: NOP4
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: NOP4
// emptybunkers = Delete ( emptybunkers , 1 ) ;
2353: NOP4
2357: PUSH
2358: NOP4
2362: PPUSH
2363: LD_INT 1
2365: PPUSH
2366: NOP4
2370: ST_TO_ADDR
// end else
2371: GO 2565
// if not IsInUnit ( i ) then
2373: NOP4
2377: PPUSH
2378: NOP4
2382: NOT
2383: IFFALSE 2565
// if arm > 0 then
2385: NOP4
2389: PUSH
2390: LD_INT 0
2392: GREATER
2393: IFFALSE 2415
// ComEnterUnit ( i , arm [ 1 ] ) else
2395: NOP4
2399: PPUSH
2400: NOP4
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: NOP4
2413: GO 2565
// if enemy_inbase > 0 then
2415: NOP4
2419: PUSH
2420: LD_INT 0
2422: GREATER
2423: IFFALSE 2445
// ComAttackUnit ( i , enemy_inbase [ 1 ] ) else
2425: NOP4
2429: PPUSH
2430: NOP4
2434: PUSH
2435: LD_INT 1
2437: ARRAY
2438: PPUSH
2439: NOP4
2443: GO 2565
// if con > 0 then
2445: NOP4
2449: PUSH
2450: LD_INT 0
2452: GREATER
2453: IFFALSE 2505
// SetTaskList ( i , [ [ h , 0 , 0 , con [ 1 ] , 0 , 0 , 0 ] ] ) else
2455: NOP4
2459: PPUSH
2460: LD_STRING h
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: NOP4
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: PPUSH
2499: NOP4
2503: GO 2565
// if GetDistUnitXY ( i , center [ 1 ] , center [ 2 ] ) > 5 then
2505: NOP4
2509: PPUSH
2510: NOP4
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: NOP4
2523: PUSH
2524: LD_INT 2
2526: ARRAY
2527: PPUSH
2528: NOP4
2532: PUSH
2533: LD_INT 5
2535: GREATER
2536: IFFALSE 2565
// ComMoveXY ( i , center [ 1 ] , center [ 2 ] ) ;
2538: NOP4
2542: PPUSH
2543: NOP4
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PPUSH
2552: NOP4
2556: PUSH
2557: LD_INT 2
2559: ARRAY
2560: PPUSH
2561: NOP4
2565: GO 2322
2567: POP
2568: POP
// mech = UnitFilter ( start_americans , [ [ f_class , class_mechanic ] , [ f_lives , 600 ] ] ) ;
2569: NOP4
2573: PUSH
2574: NOP4
2578: PPUSH
2579: LD_INT 25
2581: PUSH
2582: LD_INT 3
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 24
2591: PUSH
2592: LD_INT 600
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: NOP4
2607: ST_TO_ADDR
// fact = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2608: NOP4
2612: PUSH
2613: LD_INT 22
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 30
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 50
2635: PUSH
2636: EMPTY
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PPUSH
2644: NOP4
2648: ST_TO_ADDR
// for i in mech do
2649: NOP4
2653: PUSH
2654: NOP4
2658: PUSH
2659: FOR_IN
2660: IFFALSE 2826
// if fact = 0 then
2662: NOP4
2666: PUSH
2667: LD_INT 0
2669: EQUAL
2670: IFFALSE 2794
// begin if con > 0 then
2672: NOP4
2676: PUSH
2677: LD_INT 0
2679: GREATER
2680: IFFALSE 2732
// SetTaskList ( i , [ [ h , 0 , 0 , con [ 1 ] , 0 , 0 , 0 ] ] ) else
2682: NOP4
2686: PPUSH
2687: LD_STRING h
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: NOP4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: LD_INT 0
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: PPUSH
2726: NOP4
2730: GO 2792
// if GetDistUnitXY ( i , center [ 1 ] , center [ 2 ] ) > 5 then
2732: NOP4
2736: PPUSH
2737: NOP4
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: PPUSH
2746: NOP4
2750: PUSH
2751: LD_INT 2
2753: ARRAY
2754: PPUSH
2755: NOP4
2759: PUSH
2760: LD_INT 5
2762: GREATER
2763: IFFALSE 2792
// ComMoveXY ( i , center [ 1 ] , center [ 2 ] ) ;
2765: NOP4
2769: PPUSH
2770: NOP4
2774: PUSH
2775: LD_INT 1
2777: ARRAY
2778: PPUSH
2779: NOP4
2783: PUSH
2784: LD_INT 2
2786: ARRAY
2787: PPUSH
2788: NOP4
// end else
2792: GO 2824
// if not IsInUnit ( mech ) then
2794: NOP4
2798: PPUSH
2799: NOP4
2803: NOT
2804: IFFALSE 2824
// ComEnterUnit ( mech , fact [ 1 ] ) ;
2806: NOP4
2810: PPUSH
2811: NOP4
2815: PUSH
2816: LD_INT 1
2818: ARRAY
2819: PPUSH
2820: NOP4
2824: GO 2659
2826: POP
2827: POP
// sci = UnitFilter ( start_americans , [ [ f_class , class_scientistic ] , [ f_lives , 600 ] ] ) ;
2828: NOP4
2832: PUSH
2833: NOP4
2837: PPUSH
2838: LD_INT 25
2840: PUSH
2841: LD_INT 4
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 24
2850: PUSH
2851: LD_INT 600
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: NOP4
2866: ST_TO_ADDR
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] , [ f_ok ] ] ) ;
2867: NOP4
2871: PUSH
2872: LD_INT 22
2874: PUSH
2875: LD_INT 1
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 2
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 6
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 30
2897: PUSH
2898: LD_INT 7
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: PUSH
2910: LD_INT 50
2912: PUSH
2913: EMPTY
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: LIST
2920: PPUSH
2921: NOP4
2925: ST_TO_ADDR
// for i in sci do
2926: NOP4
2930: PUSH
2931: NOP4
2935: PUSH
2936: FOR_IN
2937: IFFALSE 3155
// if wounded > 0 then
2939: NOP4
2943: PUSH
2944: LD_INT 0
2946: GREATER
2947: IFFALSE 2991
// begin if IsInUnit ( i ) then
2949: NOP4
2953: PPUSH
2954: NOP4
2958: IFFALSE 2971
// ComExitBuilding ( i ) else
2960: NOP4
2964: PPUSH
2965: NOP4
2969: GO 2989
// ComHeal ( i , wounded [ 1 ] ) ;
2971: NOP4
2975: PPUSH
2976: NOP4
2980: PUSH
2981: LD_INT 1
2983: ARRAY
2984: PPUSH
2985: NOP4
// end else
2989: GO 3153
// if lab > 0 then
2991: NOP4
2995: PUSH
2996: LD_INT 0
2998: GREATER
2999: IFFALSE 3033
// begin if not IsInUnit ( i ) then
3001: NOP4
3005: PPUSH
3006: NOP4
3010: NOT
3011: IFFALSE 3031
// ComEnterUnit ( i , lab [ 1 ] ) ;
3013: NOP4
3017: PPUSH
3018: NOP4
3022: PUSH
3023: LD_INT 1
3025: ARRAY
3026: PPUSH
3027: NOP4
// end else
3031: GO 3153
// if con > 0 then
3033: NOP4
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3093
// SetTaskList ( i , [ [ h , 0 , 0 , con [ 1 ] , 0 , 0 , 0 ] ] ) else
3043: NOP4
3047: PPUSH
3048: LD_STRING h
3050: PUSH
3051: LD_INT 0
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: NOP4
3061: PUSH
3062: LD_INT 1
3064: ARRAY
3065: PUSH
3066: LD_INT 0
3068: PUSH
3069: LD_INT 0
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: PPUSH
3087: NOP4
3091: GO 3153
// if GetDistUnitXY ( i , center [ 1 ] , center [ 2 ] ) > 5 then
3093: NOP4
3097: PPUSH
3098: NOP4
3102: PUSH
3103: LD_INT 1
3105: ARRAY
3106: PPUSH
3107: NOP4
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: PPUSH
3116: NOP4
3120: PUSH
3121: LD_INT 5
3123: GREATER
3124: IFFALSE 3153
// ComMoveXY ( i , center [ 1 ] , center [ 2 ] ) ;
3126: NOP4
3130: PPUSH
3131: NOP4
3135: PUSH
3136: LD_INT 1
3138: ARRAY
3139: PPUSH
3140: NOP4
3144: PUSH
3145: LD_INT 2
3147: ARRAY
3148: PPUSH
3149: NOP4
3153: GO 2936
3155: POP
3156: POP
// eng = UnitFilter ( start_americans , [ [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] , [ f_lives , 600 ] ] ) ;
3157: NOP4
3161: PUSH
3162: NOP4
3166: PPUSH
3167: LD_INT 2
3169: PUSH
3170: LD_INT 25
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 16
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 600
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: NOP4
3213: ST_TO_ADDR
// depo = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
3214: NOP4
3218: PUSH
3219: LD_INT 22
3221: PUSH
3222: LD_INT 1
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 30
3231: PUSH
3232: LD_INT 0
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PPUSH
3243: NOP4
3247: ST_TO_ADDR
// damaged = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3248: NOP4
3252: PUSH
3253: LD_INT 22
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 21
3265: PUSH
3266: LD_INT 3
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: LD_INT 24
3278: PUSH
3279: LD_INT 1000
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: PPUSH
3295: NOP4
3299: ST_TO_ADDR
// for i in eng do
3300: NOP4
3304: PUSH
3305: NOP4
3309: PUSH
3310: FOR_IN
3311: IFFALSE 3879
// if damaged > 0 then
3313: NOP4
3317: PUSH
3318: LD_INT 0
3320: GREATER
3321: IFFALSE 3365
// begin if IsInUnit ( i ) then
3323: NOP4
3327: PPUSH
3328: NOP4
3332: IFFALSE 3345
// ComExitBuilding ( i ) else
3334: NOP4
3338: PPUSH
3339: NOP4
3343: GO 3363
// ComRepairBuilding ( i , damaged [ 1 ] ) end else
3345: NOP4
3349: PPUSH
3350: NOP4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: NOP4
3363: GO 3877
// if con > 0 then
3365: NOP4
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3425
// SetTaskList ( i , [ [ h , 0 , 0 , con [ 1 ] , 0 , 0 , 0 ] ] ) else
3375: NOP4
3379: PPUSH
3380: LD_STRING h
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: NOP4
3393: PUSH
3394: LD_INT 1
3396: ARRAY
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: LD_INT 0
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: PPUSH
3419: NOP4
3423: GO 3877
// case AmBuildCount of 0 :
3425: NOP4
3429: PUSH
3430: LD_INT 0
3432: DOUBLE
3433: EQUAL
3434: IFTRUE 3438
3436: GO 3462
3438: POP
// ComBuild ( i , b_lab , 29 , 15 , 2 ) ; 1 :
3439: NOP4
3443: PPUSH
3444: LD_INT 6
3446: PPUSH
3447: LD_INT 29
3449: PPUSH
3450: LD_INT 15
3452: PPUSH
3453: LD_INT 2
3455: PPUSH
3456: NOP4
3460: GO 3877
3462: LD_INT 1
3464: DOUBLE
3465: EQUAL
3466: IFTRUE 3470
3468: GO 3494
3470: POP
// ComBuild ( i , b_armoury , 42 , 19 , 3 ) ; 2 :
3471: NOP4
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 42
3481: PPUSH
3482: LD_INT 19
3484: PPUSH
3485: LD_INT 3
3487: PPUSH
3488: NOP4
3492: GO 3877
3494: LD_INT 2
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3502
3500: GO 3526
3502: POP
// ComBuild ( i , b_workshop , 30 , 29 , 2 ) ; 3 :
3503: NOP4
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 30
3513: PPUSH
3514: LD_INT 29
3516: PPUSH
3517: LD_INT 2
3519: PPUSH
3520: NOP4
3524: GO 3877
3526: LD_INT 3
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3558
3534: POP
// ComBuild ( i , b_solar_power , 31 , 24 , 3 ) ; 4 :
3535: NOP4
3539: PPUSH
3540: LD_INT 27
3542: PPUSH
3543: LD_INT 31
3545: PPUSH
3546: LD_INT 24
3548: PPUSH
3549: LD_INT 3
3551: PPUSH
3552: NOP4
3556: GO 3877
3558: LD_INT 4
3560: DOUBLE
3561: EQUAL
3562: IFTRUE 3566
3564: GO 3645
3566: POP
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3567: NOP4
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 30
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PPUSH
3596: NOP4
3600: ST_TO_ADDR
// if temp = 0 then
3601: NOP4
3605: PUSH
3606: LD_INT 0
3608: EQUAL
3609: IFFALSE 3627
// AmBuildCount = AmBuildCount + 5 else
3611: NOP4
3615: PUSH
3616: NOP4
3620: PUSH
3621: LD_INT 5
3623: PLUS
3624: ST_TO_ADDR
3625: GO 3643
// ComUpgradeLab ( temp [ 1 ] , b_lab_weapon ) ;
3627: NOP4
3631: PUSH
3632: LD_INT 1
3634: ARRAY
3635: PPUSH
3636: LD_INT 10
3638: PPUSH
3639: NOP4
// end ; 5 :
3643: GO 3877
3645: LD_INT 5
3647: DOUBLE
3648: EQUAL
3649: IFTRUE 3653
3651: GO 3729
3653: POP
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_workshop ] ] ) ;
3654: NOP4
3658: PUSH
3659: LD_INT 22
3661: PUSH
3662: LD_INT 1
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: LD_INT 30
3671: PUSH
3672: LD_INT 2
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PPUSH
3683: NOP4
3687: ST_TO_ADDR
// if temp = 0 then
3688: NOP4
3692: PUSH
3693: LD_INT 0
3695: EQUAL
3696: IFFALSE 3714
// AmBuildCount = AmBuildCount + 5 else
3698: NOP4
3702: PUSH
3703: NOP4
3707: PUSH
3708: LD_INT 5
3710: PLUS
3711: ST_TO_ADDR
3712: GO 3727
// ComUpgrade ( temp [ 1 ] ) ;
3714: NOP4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: NOP4
// end ; 6 :
3727: GO 3877
3729: LD_INT 6
3731: DOUBLE
3732: EQUAL
3733: IFTRUE 3737
3735: GO 3846
3737: POP
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
3738: NOP4
3742: PUSH
3743: LD_INT 22
3745: PUSH
3746: LD_INT 1
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 30
3755: PUSH
3756: LD_INT 31
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PPUSH
3767: NOP4
3771: ST_TO_ADDR
// if temp = 0 then
3772: NOP4
3776: PUSH
3777: LD_INT 0
3779: EQUAL
3780: IFFALSE 3798
// AmBuildCount = AmBuildCount + 5 else
3782: NOP4
3786: PUSH
3787: NOP4
3791: PUSH
3792: LD_INT 5
3794: PLUS
3795: ST_TO_ADDR
3796: GO 3844
// SetTaskList ( temp [ 1 ] , [ [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ] ) ;
3798: NOP4
3802: PUSH
3803: LD_INT 1
3805: ARRAY
3806: PPUSH
3807: LD_INT 2
3809: PUSH
3810: LD_INT 0
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: LD_INT 0
3821: PUSH
3822: LD_INT 0
3824: PUSH
3825: LD_INT 0
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: PPUSH
3840: NOP4
// end ; else
3844: GO 3877
3846: POP
// if not IsInUnit ( i ) then
3847: NOP4
3851: PPUSH
3852: NOP4
3856: NOT
3857: IFFALSE 3877
// ComEnterUnit ( i , depo [ 1 ] ) ; end ;
3859: NOP4
3863: PPUSH
3864: NOP4
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: PPUSH
3873: NOP4
3877: GO 3310
3879: POP
3880: POP
// temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
3881: NOP4
3885: PUSH
3886: LD_INT 22
3888: PUSH
3889: LD_INT 1
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 30
3898: PUSH
3899: LD_INT 32
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PPUSH
3910: NOP4
3914: ST_TO_ADDR
// if temp > 0 then
3915: NOP4
3919: PUSH
3920: LD_INT 0
3922: GREATER
3923: IFFALSE 3989
// if GetBWeapon ( temp [ 1 ] ) = 0 and fact > 0 and IsBusy ( fact [ 1 ] ) = 0 then
3925: NOP4
3929: PUSH
3930: LD_INT 1
3932: ARRAY
3933: PPUSH
3934: NOP4
3938: PUSH
3939: LD_INT 0
3941: EQUAL
3942: PUSH
3943: NOP4
3947: PUSH
3948: LD_INT 0
3950: GREATER
3951: AND
3952: PUSH
3953: NOP4
3957: PUSH
3958: LD_INT 1
3960: ARRAY
3961: PPUSH
3962: NOP4
3966: PUSH
3967: LD_INT 0
3969: EQUAL
3970: AND
3971: IFFALSE 3989
// ComPlaceWeapon ( temp [ 1 ] , us_gatling_gun ) ;
3973: NOP4
3977: PUSH
3978: LD_INT 1
3980: ARRAY
3981: PPUSH
3982: LD_INT 4
3984: PPUSH
3985: NOP4
// enable ;
3989: ENABLE
// end ;
3990: PPOPN 16
3992: END
// export function PrepareAmericans ; var i , k , temp_unit , temp_list ; begin
3993: LD_INT 0
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
// SetBName ( dep , eta ) ;
4000: LD_INT 1
4002: PPUSH
4003: LD_STRING eta
4005: PPUSH
4006: NOP4
// InitHc ;
4010: NOP4
// InitUc ;
4014: NOP4
// uc_nation = nation_american ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 1
4025: ST_TO_ADDR
// uc_side = 1 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 1
4033: ST_TO_ADDR
// start_americans = [ ] ;
4034: NOP4
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// for i = 1 to 2 do
4041: NOP4
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 2
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4152
// begin PrepareSoldier ( sex_male , am_skill_lvl ) ;
4057: LD_INT 1
4059: PPUSH
4060: NOP4
4064: PPUSH
4065: NOP4
// hc_attr = [ Rand ( 10 , 11 ) , [ 10 , 11 , 12 ] [ difficulty ] ] ;
4069: LD_ADDR_OWVAR 29
4073: PUSH
4074: LD_INT 10
4076: PPUSH
4077: LD_INT 11
4079: PPUSH
4080: NOP4
4084: PUSH
4085: LD_INT 10
4087: PUSH
4088: LD_INT 11
4090: PUSH
4091: LD_INT 12
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: NOP4
4103: ARRAY
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: ST_TO_ADDR
// start_americans = start_americans ^ CreateHuman ;
4109: NOP4
4113: PUSH
4114: NOP4
4118: PUSH
4119: NOP4
4123: ADD
4124: ST_TO_ADDR
// PlaceHumanInUnit ( start_americans [ i ] , [ bunkr1 ] [ 1 ] ) ;
4125: NOP4
4129: PUSH
4130: NOP4
4134: ARRAY
4135: PPUSH
4136: LD_INT 3
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: NOP4
// end ;
4150: GO 4054
4152: POP
4153: POP
// PrepareEngineer ( sex_male , 2 ) ;
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 2
4159: PPUSH
4160: NOP4
// hc_attr = [ Rand ( 10 , 11 ) , [ 10 , 11 , 12 ] [ difficulty ] ] ;
4164: LD_ADDR_OWVAR 29
4168: PUSH
4169: LD_INT 10
4171: PPUSH
4172: LD_INT 11
4174: PPUSH
4175: NOP4
4179: PUSH
4180: LD_INT 10
4182: PUSH
4183: LD_INT 11
4185: PUSH
4186: LD_INT 12
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: NOP4
4198: ARRAY
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// start_americans = start_americans ^ CreateHuman ;
4204: NOP4
4208: PUSH
4209: NOP4
4213: PUSH
4214: NOP4
4218: ADD
4219: ST_TO_ADDR
// PlaceHumanInUnit ( start_americans [ 3 ] , dep ) ;
4220: NOP4
4224: PUSH
4225: LD_INT 3
4227: ARRAY
4228: PPUSH
4229: LD_INT 1
4231: PPUSH
4232: NOP4
// PrepareScientist ( false , 2 ) ;
4236: LD_INT 0
4238: PPUSH
4239: LD_INT 2
4241: PPUSH
4242: NOP4
// hc_attr = [ Rand ( 10 , 11 ) , [ 10 , 11 , 12 ] [ difficulty ] ] ;
4246: LD_ADDR_OWVAR 29
4250: PUSH
4251: LD_INT 10
4253: PPUSH
4254: LD_INT 11
4256: PPUSH
4257: NOP4
4261: PUSH
4262: LD_INT 10
4264: PUSH
4265: LD_INT 11
4267: PUSH
4268: LD_INT 12
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: NOP4
4280: ARRAY
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: ST_TO_ADDR
// start_americans = start_americans ^ CreateHuman ;
4286: NOP4
4290: PUSH
4291: NOP4
4295: PUSH
4296: NOP4
4300: ADD
4301: ST_TO_ADDR
// PlaceUnitXY ( start_americans [ 4 ] , 35 , 28 , false ) ;
4302: NOP4
4306: PUSH
4307: LD_INT 4
4309: ARRAY
4310: PPUSH
4311: LD_INT 35
4313: PPUSH
4314: LD_INT 28
4316: PPUSH
4317: LD_INT 0
4319: PPUSH
4320: NOP4
// PrepareMechanic ( false , 2 ) ;
4324: LD_INT 0
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: NOP4
// hc_attr = [ Rand ( 10 , 11 ) , [ 10 , 11 , 12 ] [ difficulty ] ] ;
4334: LD_ADDR_OWVAR 29
4338: PUSH
4339: LD_INT 10
4341: PPUSH
4342: LD_INT 11
4344: PPUSH
4345: NOP4
4349: PUSH
4350: LD_INT 10
4352: PUSH
4353: LD_INT 11
4355: PUSH
4356: LD_INT 12
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PUSH
4364: NOP4
4368: ARRAY
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// start_americans = start_americans ^ CreateHuman ;
4374: NOP4
4378: PUSH
4379: NOP4
4383: PUSH
4384: NOP4
4388: ADD
4389: ST_TO_ADDR
// PlaceUnitXY ( start_americans [ 4 ] , 35 , 28 , false ) ;
4390: NOP4
4394: PUSH
4395: LD_INT 4
4397: ARRAY
4398: PPUSH
4399: LD_INT 35
4401: PPUSH
4402: LD_INT 28
4404: PPUSH
4405: LD_INT 0
4407: PPUSH
4408: NOP4
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
4412: NOP4
4416: PUSH
4417: DOUBLE
4418: LD_INT 1
4420: DEC
4421: ST_TO_ADDR
4422: LD_INT 2
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: LD_INT 3
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: PUSH
4436: NOP4
4440: ARRAY
4441: PUSH
4442: FOR_TO
4443: IFFALSE 4546
// begin PrepareSoldier ( sex_male , am_skill_lvl ) ;
4445: LD_INT 1
4447: PPUSH
4448: NOP4
4452: PPUSH
4453: NOP4
// hc_attr = [ Rand ( 10 , 11 ) , [ 10 , 11 , 12 ] [ difficulty ] ] ;
4457: LD_ADDR_OWVAR 29
4461: PUSH
4462: LD_INT 10
4464: PPUSH
4465: LD_INT 11
4467: PPUSH
4468: NOP4
4472: PUSH
4473: LD_INT 10
4475: PUSH
4476: LD_INT 11
4478: PUSH
4479: LD_INT 12
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: NOP4
4491: ARRAY
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// start_americans = start_americans ^ CreateHuman ;
4497: NOP4
4501: PUSH
4502: NOP4
4506: PUSH
4507: NOP4
4511: ADD
4512: ST_TO_ADDR
// PlaceUnitXYR ( start_americans [ 4 + i ] , 37 , 29 , 5 , false ) ;
4513: NOP4
4517: PUSH
4518: LD_INT 4
4520: PUSH
4521: NOP4
4525: PLUS
4526: ARRAY
4527: PPUSH
4528: LD_INT 37
4530: PPUSH
4531: LD_INT 29
4533: PPUSH
4534: LD_INT 5
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: NOP4
// end ;
4544: GO 4442
4546: POP
4547: POP
// if KilledAmSci_02 = 1 then
4548: NOP4
4552: PUSH
4553: LD_INT 1
4555: EQUAL
4556: IFFALSE 4641
// begin for i = 1 to 2 do
4558: NOP4
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_INT 2
4570: PUSH
4571: FOR_TO
4572: IFFALSE 4639
// begin uc_nation = 0 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 0
4581: ST_TO_ADDR
// hc_class = class_apeman_engineer ;
4582: LD_ADDR_OWVAR 28
4586: PUSH
4587: LD_INT 16
4589: ST_TO_ADDR
// temp_unit = CreateHuman ;
4590: NOP4
4594: PUSH
4595: NOP4
4599: ST_TO_ADDR
// start_americans = start_americans ^ temp_unit ;
4600: NOP4
4604: PUSH
4605: NOP4
4609: PUSH
4610: NOP4
4614: ADD
4615: ST_TO_ADDR
// PlaceUnitXYR ( temp_unit , 37 , 29 , 5 , false ) ;
4616: NOP4
4620: PPUSH
4621: LD_INT 37
4623: PPUSH
4624: LD_INT 29
4626: PPUSH
4627: LD_INT 5
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: NOP4
// end ;
4637: GO 4571
4639: POP
4640: POP
// end ; k = GetSkill ( start_americans [ 3 ] , skill_engineering ) ;
4641: NOP4
4645: PUSH
4646: NOP4
4650: PUSH
4651: LD_INT 3
4653: ARRAY
4654: PPUSH
4655: LD_INT 2
4657: PPUSH
4658: NOP4
4662: ST_TO_ADDR
// for i in [ dep , bunkr1 ] do
4663: NOP4
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: FOR_IN
4679: IFFALSE 4697
// SetBLevel ( i , k ) ;
4681: NOP4
4685: PPUSH
4686: NOP4
4690: PPUSH
4691: NOP4
4695: GO 4678
4697: POP
4698: POP
// SetResourceVisibility ( 28 , 3 , 1 ) ;
4699: LD_INT 28
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: NOP4
// end ;
4712: LD_VAR 0 1
4716: RET
// export function PrepareAmConvoy ; var i , tmp_veh , tmp_human ; begin
4717: LD_INT 0
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
// InitUc ;
4723: NOP4
// InitHc ;
4727: NOP4
// uc_side = 1 ;
4731: LD_ADDR_OWVAR 20
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// uc_nation = 1 ;
4739: LD_ADDR_OWVAR 21
4743: PUSH
4744: LD_INT 1
4746: ST_TO_ADDR
// vc_control = control_manual ;
4747: LD_ADDR_OWVAR 38
4751: PUSH
4752: LD_INT 1
4754: ST_TO_ADDR
// vc_engine = engine_combustion ;
4755: LD_ADDR_OWVAR 39
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ difficulty ] do
4763: NOP4
4767: PUSH
4768: DOUBLE
4769: LD_INT 1
4771: DEC
4772: ST_TO_ADDR
4773: LD_INT 2
4775: PUSH
4776: LD_INT 2
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: PUSH
4787: NOP4
4791: ARRAY
4792: PUSH
4793: FOR_TO
4794: IFFALSE 5033
// begin case i of 1 :
4796: NOP4
4800: PUSH
4801: LD_INT 1
4803: DOUBLE
4804: EQUAL
4805: IFTRUE 4809
4807: GO 4828
4809: POP
// begin vc_chassis = us_light_wheeled ;
4810: LD_ADDR_OWVAR 37
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
4818: LD_ADDR_OWVAR 40
4822: PUSH
4823: LD_INT 2
4825: ST_TO_ADDR
// end ; 2 :
4826: GO 4903
4828: LD_INT 2
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4836
4834: GO 4875
4836: POP
// begin vc_chassis = us_medium_wheeled ;
4837: LD_ADDR_OWVAR 37
4841: PUSH
4842: LD_INT 2
4844: ST_TO_ADDR
// if Difficulty = 1 then
4845: NOP4
4849: PUSH
4850: LD_INT 1
4852: EQUAL
4853: IFFALSE 4865
// vc_weapon = us_cargo_bay else
4855: LD_ADDR_OWVAR 40
4859: PUSH
4860: LD_INT 12
4862: ST_TO_ADDR
4863: GO 4873
// vc_weapon = us_gatling_gun ;
4865: LD_ADDR_OWVAR 40
4869: PUSH
4870: LD_INT 4
4872: ST_TO_ADDR
// end ; 3 :
4873: GO 4903
4875: LD_INT 3
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4902
4883: POP
// begin vc_chassis = us_light_wheeled ;
4884: LD_ADDR_OWVAR 37
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// vc_weapon = us_light_gun ;
4892: LD_ADDR_OWVAR 40
4896: PUSH
4897: LD_INT 3
4899: ST_TO_ADDR
// end ; end ;
4900: GO 4903
4902: POP
// tmp_veh = CreateVehicle ;
4903: NOP4
4907: PUSH
4908: NOP4
4912: ST_TO_ADDR
// PlaceUnitArea ( tmp_veh , AmConvoySpawnArea , false ) ;
4913: NOP4
4917: PPUSH
4918: NOP4
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: NOP4
// if i = 1 then
4930: NOP4
4934: PUSH
4935: LD_INT 1
4937: EQUAL
4938: IFFALSE 4955
// AddCargo ( tmp_veh , 1 , 50 ) ;
4940: NOP4
4944: PPUSH
4945: LD_INT 1
4947: PPUSH
4948: LD_INT 50
4950: PPUSH
4951: NOP4
// PrepareMechanic ( false , am_skill_lvl ) ;
4955: LD_INT 0
4957: PPUSH
4958: NOP4
4962: PPUSH
4963: NOP4
// tmp_human = CreateHuman ;
4967: NOP4
4971: PUSH
4972: NOP4
4976: ST_TO_ADDR
// PlaceHumanInUnit ( tmp_human , tmp_veh ) ;
4977: NOP4
4981: PPUSH
4982: NOP4
4986: PPUSH
4987: NOP4
// ConvoyAmericans_List = ConvoyAmericans_List ^ tmp_human ;
4991: NOP4
4995: PUSH
4996: NOP4
5000: PUSH
5001: NOP4
5005: ADD
5006: ST_TO_ADDR
// ConvoyAmericans_List = ConvoyAmericans_List ^ tmp_veh ;
5007: NOP4
5011: PUSH
5012: NOP4
5016: PUSH
5017: NOP4
5021: ADD
5022: ST_TO_ADDR
// ConvoyPlaced = 1 ;
5023: NOP4
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// end ;
5031: GO 4793
5033: POP
5034: POP
// end ;
5035: LD_VAR 0 1
5039: RET
// export function SpawnAttack ( AttackIndex , SpawnArea ) ; var i , roadX , roadY , roadRand , temp_list , temp_unit , temp_veh ; begin
5040: LD_INT 0
5042: PPUSH
5043: PPUSH
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
// roadRand = 0 ;
5050: NOP4
5054: PUSH
5055: LD_INT 0
5057: ST_TO_ADDR
// if SpawnArea = AmNorthSpawnArea then
5058: NOP4
5062: PUSH
5063: NOP4
5067: EQUAL
5068: IFFALSE 5208
// begin roadRand = Rand ( 1 , 3 ) ;
5070: NOP4
5074: PUSH
5075: LD_INT 1
5077: PPUSH
5078: LD_INT 3
5080: PPUSH
5081: NOP4
5085: ST_TO_ADDR
// roadX = [ [ 62 , 39 , 32 , 33 ] , [ 62 , 57 , 61 , 54 ] , [ 62 , 92 , 111 ] ] ;
5086: NOP4
5090: PUSH
5091: LD_INT 62
5093: PUSH
5094: LD_INT 39
5096: PUSH
5097: LD_INT 32
5099: PUSH
5100: LD_INT 33
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 62
5111: PUSH
5112: LD_INT 57
5114: PUSH
5115: LD_INT 61
5117: PUSH
5118: LD_INT 54
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 62
5129: PUSH
5130: LD_INT 92
5132: PUSH
5133: LD_INT 111
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// roadY = [ [ 6 , 5 , 9 , 26 ] , [ 6 , 23 , 38 , 36 ] , [ 6 , 30 , 59 ] ] ;
5146: NOP4
5150: PUSH
5151: LD_INT 6
5153: PUSH
5154: LD_INT 5
5156: PUSH
5157: LD_INT 9
5159: PUSH
5160: LD_INT 26
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 6
5171: PUSH
5172: LD_INT 23
5174: PUSH
5175: LD_INT 38
5177: PUSH
5178: LD_INT 36
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 6
5189: PUSH
5190: LD_INT 30
5192: PUSH
5193: LD_INT 59
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: ST_TO_ADDR
// end else
5206: GO 5314
// begin roadRand = Rand ( 1 , 2 ) ;
5208: NOP4
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: NOP4
5223: ST_TO_ADDR
// roadX = [ [ 38 , 45 , 38 ] , [ 38 , 54 , 81 , 87 , 111 ] ] ;
5224: NOP4
5228: PUSH
5229: LD_INT 38
5231: PUSH
5232: LD_INT 45
5234: PUSH
5235: LD_INT 38
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 38
5245: PUSH
5246: LD_INT 54
5248: PUSH
5249: LD_INT 81
5251: PUSH
5252: LD_INT 87
5254: PUSH
5255: LD_INT 111
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: ST_TO_ADDR
// roadY = [ [ 66 , 46 , 30 ] , [ 66 , 52 , 72 , 57 , 72 ] ] ;
5269: NOP4
5273: PUSH
5274: LD_INT 66
5276: PUSH
5277: LD_INT 46
5279: PUSH
5280: LD_INT 30
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 66
5290: PUSH
5291: LD_INT 52
5293: PUSH
5294: LD_INT 72
5296: PUSH
5297: LD_INT 57
5299: PUSH
5300: LD_INT 72
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: ST_TO_ADDR
// end ; InitHc ;
5314: NOP4
// InitUc ;
5318: NOP4
// uc_nation = nation_american ;
5322: LD_ADDR_OWVAR 21
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// uc_side = 1 ;
5330: LD_ADDR_OWVAR 20
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// case AttackIndex of 1 :
5338: NOP4
5342: PUSH
5343: LD_INT 1
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 6099
5351: POP
// begin temp_list = [ ] ;
5352: NOP4
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// if Difficulty > 1 then
5359: NOP4
5363: PUSH
5364: LD_INT 1
5366: GREATER
5367: IFFALSE 5514
// begin PrepareMechanic ( false , am_skill_lvl ) ;
5369: LD_INT 0
5371: PPUSH
5372: NOP4
5376: PPUSH
5377: NOP4
// temp_unit = CreateHuman ;
5381: NOP4
5385: PUSH
5386: NOP4
5390: ST_TO_ADDR
// vc_weapon = us_light_gun ;
5391: LD_ADDR_OWVAR 40
5395: PUSH
5396: LD_INT 3
5398: ST_TO_ADDR
// case difficulty of 2 :
5399: NOP4
5403: PUSH
5404: LD_INT 2
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5423
5412: POP
// vc_chassis = us_light_wheeled ; 3 :
5413: LD_ADDR_OWVAR 37
5417: PUSH
5418: LD_INT 1
5420: ST_TO_ADDR
5421: GO 5443
5423: LD_INT 3
5425: DOUBLE
5426: EQUAL
5427: IFTRUE 5431
5429: GO 5442
5431: POP
// vc_chassis = us_medium_wheeled ; end ;
5432: LD_ADDR_OWVAR 37
5436: PUSH
5437: LD_INT 2
5439: ST_TO_ADDR
5440: GO 5443
5442: POP
// temp_veh = CreateVehicle ;
5443: NOP4
5447: PUSH
5448: NOP4
5452: ST_TO_ADDR
// temp_list = [ [ temp_veh , temp_unit ] ] ;
5453: NOP4
5457: PUSH
5458: NOP4
5462: PUSH
5463: NOP4
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: ST_TO_ADDR
// PlaceUnitArea ( temp_veh , SpawnArea , false ) ;
5475: NOP4
5479: PPUSH
5480: NOP4
5484: PPUSH
5485: LD_INT 0
5487: PPUSH
5488: NOP4
// PlaceHumanInUnit ( temp_unit , temp_list [ 1 ] [ 1 ] ) ;
5492: NOP4
5496: PPUSH
5497: NOP4
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PUSH
5506: LD_INT 1
5508: ARRAY
5509: PPUSH
5510: NOP4
// end ; first_wave = Replace ( first_wave , 1 , temp_list ) ;
5514: NOP4
5518: PUSH
5519: NOP4
5523: PPUSH
5524: LD_INT 1
5526: PPUSH
5527: NOP4
5531: PPUSH
5532: NOP4
5536: ST_TO_ADDR
// temp_list = [ ] ;
5537: NOP4
5541: PUSH
5542: EMPTY
5543: ST_TO_ADDR
// for i = 1 to difficulty + 1 do
5544: NOP4
5548: PUSH
5549: DOUBLE
5550: LD_INT 1
5552: DEC
5553: ST_TO_ADDR
5554: NOP4
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: PUSH
5563: FOR_TO
5564: IFFALSE 5623
// begin PrepareSoldier ( false , am_skill_lvl ) ;
5566: LD_INT 0
5568: PPUSH
5569: NOP4
5573: PPUSH
5574: NOP4
// temp_unit = CreateHuman ;
5578: NOP4
5582: PUSH
5583: NOP4
5587: ST_TO_ADDR
// temp_list = temp_list ^ temp_unit ;
5588: NOP4
5592: PUSH
5593: NOP4
5597: PUSH
5598: NOP4
5602: ADD
5603: ST_TO_ADDR
// PlaceUnitArea ( temp_unit , SpawnArea , false ) ;
5604: NOP4
5608: PPUSH
5609: NOP4
5613: PPUSH
5614: LD_INT 0
5616: PPUSH
5617: NOP4
// end ;
5621: GO 5563
5623: POP
5624: POP
// first_wave = Replace ( first_wave , 2 , temp_list ) ;
5625: NOP4
5629: PUSH
5630: NOP4
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: NOP4
5642: PPUSH
5643: NOP4
5647: ST_TO_ADDR
// for i = 1 to roadX [ RoadRand ] do
5648: NOP4
5652: PUSH
5653: DOUBLE
5654: LD_INT 1
5656: DEC
5657: ST_TO_ADDR
5658: NOP4
5662: PUSH
5663: NOP4
5667: ARRAY
5668: PUSH
5669: FOR_TO
5670: IFFALSE 5899
// begin if SpawnArea = AmNorthSpawnArea and RoadRand <> 2 then
5672: NOP4
5676: PUSH
5677: NOP4
5681: EQUAL
5682: PUSH
5683: NOP4
5687: PUSH
5688: LD_INT 2
5690: NONEQUAL
5691: AND
5692: IFFALSE 5763
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) else
5694: LD_INT 22
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 21
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PPUSH
5718: NOP4
5722: PPUSH
5723: NOP4
5727: PUSH
5728: NOP4
5732: ARRAY
5733: PUSH
5734: NOP4
5738: ARRAY
5739: PPUSH
5740: NOP4
5744: PUSH
5745: NOP4
5749: ARRAY
5750: PUSH
5751: NOP4
5755: ARRAY
5756: PPUSH
5757: NOP4
5761: GO 5830
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
5763: LD_INT 22
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 21
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PPUSH
5787: NOP4
5791: PPUSH
5792: NOP4
5796: PUSH
5797: NOP4
5801: ARRAY
5802: PUSH
5803: NOP4
5807: ARRAY
5808: PPUSH
5809: NOP4
5813: PUSH
5814: NOP4
5818: ARRAY
5819: PUSH
5820: NOP4
5824: ARRAY
5825: PPUSH
5826: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
5830: LD_INT 22
5832: PUSH
5833: LD_INT 1
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: NOP4
5858: PPUSH
5859: NOP4
5863: PUSH
5864: NOP4
5868: ARRAY
5869: PUSH
5870: NOP4
5874: ARRAY
5875: PPUSH
5876: NOP4
5880: PUSH
5881: NOP4
5885: ARRAY
5886: PUSH
5887: NOP4
5891: ARRAY
5892: PPUSH
5893: NOP4
// end ;
5897: GO 5669
5899: POP
5900: POP
// if SpawnArea = AmNorthSpawnArea and RoadRand = 2 then
5901: NOP4
5905: PUSH
5906: NOP4
5910: EQUAL
5911: PUSH
5912: NOP4
5916: PUSH
5917: LD_INT 2
5919: EQUAL
5920: AND
5921: IFFALSE 6097
// if Rand ( 1 , 2 ) = 1 then
5923: LD_INT 1
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: NOP4
5933: PUSH
5934: LD_INT 1
5936: EQUAL
5937: IFFALSE 5980
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 39 , 25 ) else
5939: LD_INT 22
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: PUSH
5949: LD_INT 21
5951: PUSH
5952: LD_INT 2
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: NOP4
5967: PPUSH
5968: LD_INT 39
5970: PPUSH
5971: LD_INT 25
5973: PPUSH
5974: NOP4
5978: GO 6097
// begin ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 88 , 42 ) ;
5980: LD_INT 22
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 2
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: NOP4
6008: PPUSH
6009: LD_INT 88
6011: PPUSH
6012: LD_INT 42
6014: PPUSH
6015: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 78 , 71 ) ;
6019: LD_INT 22
6021: PUSH
6022: LD_INT 1
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 21
6031: PUSH
6032: LD_INT 2
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: NOP4
6047: PPUSH
6048: LD_INT 78
6050: PPUSH
6051: LD_INT 71
6053: PPUSH
6054: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 35 , 29 ) ;
6058: LD_INT 22
6060: PUSH
6061: LD_INT 1
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 2
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PPUSH
6082: NOP4
6086: PPUSH
6087: LD_INT 35
6089: PPUSH
6090: LD_INT 29
6092: PPUSH
6093: NOP4
// end ; end ; 2 :
6097: GO 8841
6099: LD_INT 2
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6107
6105: GO 6988
6107: POP
// begin temp_list = [ ] ;
6108: NOP4
6112: PUSH
6113: EMPTY
6114: ST_TO_ADDR
// for i = 1 to 2 do
6115: NOP4
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_INT 2
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6387
// begin if i = 2 and difficulty = 1 then
6131: NOP4
6135: PUSH
6136: LD_INT 2
6138: EQUAL
6139: PUSH
6140: NOP4
6144: PUSH
6145: LD_INT 1
6147: EQUAL
6148: AND
6149: IFFALSE 6153
// break ;
6151: GO 6387
// if Rand ( 1 , 2 ) = 1 then
6153: LD_INT 1
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: NOP4
6163: PUSH
6164: LD_INT 1
6166: EQUAL
6167: IFFALSE 6183
// PrepareMechanic ( false , am_skill_lvl ) else
6169: LD_INT 0
6171: PPUSH
6172: NOP4
6176: PPUSH
6177: NOP4
6181: GO 6196
// PrepareMechanic ( false , - am_skill_lvl ) ;
6183: LD_INT 0
6185: PPUSH
6186: NOP4
6190: NEG
6191: PPUSH
6192: NOP4
// temp_unit = CreateHuman ;
6196: NOP4
6200: PUSH
6201: NOP4
6205: ST_TO_ADDR
// case i of 1 :
6206: NOP4
6210: PUSH
6211: LD_INT 1
6213: DOUBLE
6214: EQUAL
6215: IFTRUE 6219
6217: GO 6258
6219: POP
// begin vc_chassis = us_medium_wheeled ;
6220: LD_ADDR_OWVAR 37
6224: PUSH
6225: LD_INT 2
6227: ST_TO_ADDR
// if difficulty = 1 then
6228: NOP4
6232: PUSH
6233: LD_INT 1
6235: EQUAL
6236: IFFALSE 6248
// vc_weapon = us_light_gun else
6238: LD_ADDR_OWVAR 40
6242: PUSH
6243: LD_INT 3
6245: ST_TO_ADDR
6246: GO 6256
// vc_weapon = us_double_gun ;
6248: LD_ADDR_OWVAR 40
6252: PUSH
6253: LD_INT 5
6255: ST_TO_ADDR
// end ; 2 :
6256: GO 6306
6258: LD_INT 2
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6266
6264: GO 6305
6266: POP
// begin if difficulty = 2 then
6267: NOP4
6271: PUSH
6272: LD_INT 2
6274: EQUAL
6275: IFFALSE 6287
// vc_chassis = us_light_wheeled else
6277: LD_ADDR_OWVAR 37
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
6285: GO 6295
// vc_chassis = us_medium_wheeled ;
6287: LD_ADDR_OWVAR 37
6291: PUSH
6292: LD_INT 2
6294: ST_TO_ADDR
// vc_weapon = us_light_gun ;
6295: LD_ADDR_OWVAR 40
6299: PUSH
6300: LD_INT 3
6302: ST_TO_ADDR
// end ; end ;
6303: GO 6306
6305: POP
// temp_veh = CreateVehicle ;
6306: NOP4
6310: PUSH
6311: NOP4
6315: ST_TO_ADDR
// temp_list = temp_list ^ [ [ temp_veh , temp_unit ] ] ;
6316: NOP4
6320: PUSH
6321: NOP4
6325: PUSH
6326: NOP4
6330: PUSH
6331: NOP4
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: ADD
6343: ST_TO_ADDR
// PlaceUnitArea ( temp_veh , SpawnArea , false ) ;
6344: NOP4
6348: PPUSH
6349: NOP4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: NOP4
// PlaceHumanInUnit ( temp_unit , temp_list [ i ] [ 1 ] ) ;
6361: NOP4
6365: PPUSH
6366: NOP4
6370: PUSH
6371: NOP4
6375: ARRAY
6376: PUSH
6377: LD_INT 1
6379: ARRAY
6380: PPUSH
6381: NOP4
// end ;
6385: GO 6128
6387: POP
6388: POP
// second_wave = Replace ( second_wave , 1 , temp_list ) ;
6389: NOP4
6393: PUSH
6394: NOP4
6398: PPUSH
6399: LD_INT 1
6401: PPUSH
6402: NOP4
6406: PPUSH
6407: NOP4
6411: ST_TO_ADDR
// temp_list = [ ] ;
6412: NOP4
6416: PUSH
6417: EMPTY
6418: ST_TO_ADDR
// for i = 1 to ( difficulty + 1 ) * 2 + difficulty - 1 do
6419: NOP4
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: NOP4
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PUSH
6438: LD_INT 2
6440: MUL
6441: PUSH
6442: NOP4
6446: PLUS
6447: PUSH
6448: LD_INT 1
6450: MINUS
6451: PUSH
6452: FOR_TO
6453: IFFALSE 6512
// begin PrepareSoldier ( false , am_skill_lvl ) ;
6455: LD_INT 0
6457: PPUSH
6458: NOP4
6462: PPUSH
6463: NOP4
// temp_unit = CreateHuman ;
6467: NOP4
6471: PUSH
6472: NOP4
6476: ST_TO_ADDR
// temp_list = temp_list ^ temp_unit ;
6477: NOP4
6481: PUSH
6482: NOP4
6486: PUSH
6487: NOP4
6491: ADD
6492: ST_TO_ADDR
// PlaceUnitArea ( temp_unit , SpawnArea , false ) ;
6493: NOP4
6497: PPUSH
6498: NOP4
6502: PPUSH
6503: LD_INT 0
6505: PPUSH
6506: NOP4
// end ;
6510: GO 6452
6512: POP
6513: POP
// second_wave = Replace ( second_wave , 2 , temp_list ) ;
6514: NOP4
6518: PUSH
6519: NOP4
6523: PPUSH
6524: LD_INT 2
6526: PPUSH
6527: NOP4
6531: PPUSH
6532: NOP4
6536: ST_TO_ADDR
// for i = 1 to roadX [ RoadRand ] do
6537: NOP4
6541: PUSH
6542: DOUBLE
6543: LD_INT 1
6545: DEC
6546: ST_TO_ADDR
6547: NOP4
6551: PUSH
6552: NOP4
6556: ARRAY
6557: PUSH
6558: FOR_TO
6559: IFFALSE 6788
// begin if SpawnArea = AmNorthSpawnArea and RoadRand <> 2 then
6561: NOP4
6565: PUSH
6566: NOP4
6570: EQUAL
6571: PUSH
6572: NOP4
6576: PUSH
6577: LD_INT 2
6579: NONEQUAL
6580: AND
6581: IFFALSE 6652
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) else
6583: LD_INT 22
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 21
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: NOP4
6611: PPUSH
6612: NOP4
6616: PUSH
6617: NOP4
6621: ARRAY
6622: PUSH
6623: NOP4
6627: ARRAY
6628: PPUSH
6629: NOP4
6633: PUSH
6634: NOP4
6638: ARRAY
6639: PUSH
6640: NOP4
6644: ARRAY
6645: PPUSH
6646: NOP4
6650: GO 6719
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
6652: LD_INT 22
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 21
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: NOP4
6680: PPUSH
6681: NOP4
6685: PUSH
6686: NOP4
6690: ARRAY
6691: PUSH
6692: NOP4
6696: ARRAY
6697: PPUSH
6698: NOP4
6702: PUSH
6703: NOP4
6707: ARRAY
6708: PUSH
6709: NOP4
6713: ARRAY
6714: PPUSH
6715: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
6719: LD_INT 22
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: NOP4
6747: PPUSH
6748: NOP4
6752: PUSH
6753: NOP4
6757: ARRAY
6758: PUSH
6759: NOP4
6763: ARRAY
6764: PPUSH
6765: NOP4
6769: PUSH
6770: NOP4
6774: ARRAY
6775: PUSH
6776: NOP4
6780: ARRAY
6781: PPUSH
6782: NOP4
// end ;
6786: GO 6558
6788: POP
6789: POP
// if SpawnArea = AmNorthSpawnArea and RoadRand = 2 then
6790: NOP4
6794: PUSH
6795: NOP4
6799: EQUAL
6800: PUSH
6801: NOP4
6805: PUSH
6806: LD_INT 2
6808: EQUAL
6809: AND
6810: IFFALSE 6986
// if Rand ( 1 , 2 ) = 1 then
6812: LD_INT 1
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: NOP4
6822: PUSH
6823: LD_INT 1
6825: EQUAL
6826: IFFALSE 6869
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 39 , 25 ) else
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 21
6840: PUSH
6841: LD_INT 2
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PPUSH
6852: NOP4
6856: PPUSH
6857: LD_INT 39
6859: PPUSH
6860: LD_INT 25
6862: PPUSH
6863: NOP4
6867: GO 6986
// begin ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 88 , 42 ) ;
6869: LD_INT 22
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 21
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: NOP4
6897: PPUSH
6898: LD_INT 88
6900: PPUSH
6901: LD_INT 42
6903: PPUSH
6904: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 78 , 71 ) ;
6908: LD_INT 22
6910: PUSH
6911: LD_INT 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 21
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PPUSH
6932: NOP4
6936: PPUSH
6937: LD_INT 78
6939: PPUSH
6940: LD_INT 71
6942: PPUSH
6943: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 35 , 29 ) ;
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 21
6959: PUSH
6960: LD_INT 2
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: NOP4
6975: PPUSH
6976: LD_INT 35
6978: PPUSH
6979: LD_INT 29
6981: PPUSH
6982: NOP4
// end ; end ; 3 :
6986: GO 8841
6988: LD_INT 3
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7872
6996: POP
// begin temp_list = [ ] ;
6997: NOP4
7001: PUSH
7002: EMPTY
7003: ST_TO_ADDR
// for i = 1 to 2 do
7004: NOP4
7008: PUSH
7009: DOUBLE
7010: LD_INT 1
7012: DEC
7013: ST_TO_ADDR
7014: LD_INT 2
7016: PUSH
7017: FOR_TO
7018: IFFALSE 7274
// begin if Rand ( 1 , 2 ) = 1 then
7020: LD_INT 1
7022: PPUSH
7023: LD_INT 2
7025: PPUSH
7026: NOP4
7030: PUSH
7031: LD_INT 1
7033: EQUAL
7034: IFFALSE 7050
// PrepareMechanic ( false , am_skill_lvl ) else
7036: LD_INT 0
7038: PPUSH
7039: NOP4
7043: PPUSH
7044: NOP4
7048: GO 7063
// PrepareMechanic ( false , - am_skill_lvl ) ;
7050: LD_INT 0
7052: PPUSH
7053: NOP4
7057: NEG
7058: PPUSH
7059: NOP4
// temp_unit = CreateHuman ;
7063: NOP4
7067: PUSH
7068: NOP4
7072: ST_TO_ADDR
// case i of 1 :
7073: NOP4
7077: PUSH
7078: LD_INT 1
7080: DOUBLE
7081: EQUAL
7082: IFTRUE 7086
7084: GO 7125
7086: POP
// begin vc_chassis = us_medium_wheeled ;
7087: LD_ADDR_OWVAR 37
7091: PUSH
7092: LD_INT 2
7094: ST_TO_ADDR
// if difficulty = 1 then
7095: NOP4
7099: PUSH
7100: LD_INT 1
7102: EQUAL
7103: IFFALSE 7115
// vc_weapon = us_light_gun else
7105: LD_ADDR_OWVAR 40
7109: PUSH
7110: LD_INT 3
7112: ST_TO_ADDR
7113: GO 7123
// vc_weapon = us_double_gun ;
7115: LD_ADDR_OWVAR 40
7119: PUSH
7120: LD_INT 5
7122: ST_TO_ADDR
// end ; 2 :
7123: GO 7193
7125: LD_INT 2
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7192
7133: POP
// begin if difficulty = 1 then
7134: NOP4
7138: PUSH
7139: LD_INT 1
7141: EQUAL
7142: IFFALSE 7154
// vc_chassis = us_light_wheeled else
7144: LD_ADDR_OWVAR 37
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
7152: GO 7162
// vc_chassis = us_medium_wheeled ;
7154: LD_ADDR_OWVAR 37
7158: PUSH
7159: LD_INT 2
7161: ST_TO_ADDR
// if difficulty < 3 then
7162: NOP4
7166: PUSH
7167: LD_INT 3
7169: LESS
7170: IFFALSE 7182
// vc_weapon = us_light_gun else
7172: LD_ADDR_OWVAR 40
7176: PUSH
7177: LD_INT 3
7179: ST_TO_ADDR
7180: GO 7190
// vc_weapon = us_double_gun ;
7182: LD_ADDR_OWVAR 40
7186: PUSH
7187: LD_INT 5
7189: ST_TO_ADDR
// end ; end ;
7190: GO 7193
7192: POP
// temp_veh = CreateVehicle ;
7193: NOP4
7197: PUSH
7198: NOP4
7202: ST_TO_ADDR
// temp_list = temp_list ^ [ [ temp_veh , temp_unit ] ] ;
7203: NOP4
7207: PUSH
7208: NOP4
7212: PUSH
7213: NOP4
7217: PUSH
7218: NOP4
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: ADD
7230: ST_TO_ADDR
// PlaceUnitArea ( temp_veh , SpawnArea , false ) ;
7231: NOP4
7235: PPUSH
7236: NOP4
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: NOP4
// PlaceHumanInUnit ( temp_unit , temp_list [ i ] [ 1 ] ) ;
7248: NOP4
7252: PPUSH
7253: NOP4
7257: PUSH
7258: NOP4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: NOP4
// end ;
7272: GO 7017
7274: POP
7275: POP
// third_wave = Replace ( third_wave , 1 , temp_list ) ;
7276: NOP4
7280: PUSH
7281: NOP4
7285: PPUSH
7286: LD_INT 1
7288: PPUSH
7289: NOP4
7293: PPUSH
7294: NOP4
7298: ST_TO_ADDR
// temp_list = [ ] ;
7299: NOP4
7303: PUSH
7304: EMPTY
7305: ST_TO_ADDR
// for i = 1 to [ 7 , 9 , 11 ] [ difficulty ] do
7306: NOP4
7310: PUSH
7311: DOUBLE
7312: LD_INT 1
7314: DEC
7315: ST_TO_ADDR
7316: LD_INT 7
7318: PUSH
7319: LD_INT 9
7321: PUSH
7322: LD_INT 11
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: NOP4
7334: ARRAY
7335: PUSH
7336: FOR_TO
7337: IFFALSE 7396
// begin PrepareSoldier ( false , am_skill_lvl ) ;
7339: LD_INT 0
7341: PPUSH
7342: NOP4
7346: PPUSH
7347: NOP4
// temp_unit = CreateHuman ;
7351: NOP4
7355: PUSH
7356: NOP4
7360: ST_TO_ADDR
// temp_list = temp_list ^ temp_unit ;
7361: NOP4
7365: PUSH
7366: NOP4
7370: PUSH
7371: NOP4
7375: ADD
7376: ST_TO_ADDR
// PlaceUnitArea ( temp_unit , SpawnArea , false ) ;
7377: NOP4
7381: PPUSH
7382: NOP4
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: NOP4
// end ;
7394: GO 7336
7396: POP
7397: POP
// third_wave = Replace ( third_wave , 2 , temp_list ) ;
7398: NOP4
7402: PUSH
7403: NOP4
7407: PPUSH
7408: LD_INT 2
7410: PPUSH
7411: NOP4
7415: PPUSH
7416: NOP4
7420: ST_TO_ADDR
// for i = 1 to roadX [ RoadRand ] do
7421: NOP4
7425: PUSH
7426: DOUBLE
7427: LD_INT 1
7429: DEC
7430: ST_TO_ADDR
7431: NOP4
7435: PUSH
7436: NOP4
7440: ARRAY
7441: PUSH
7442: FOR_TO
7443: IFFALSE 7672
// begin if SpawnArea = AmNorthSpawnArea and RoadRand <> 2 then
7445: NOP4
7449: PUSH
7450: NOP4
7454: EQUAL
7455: PUSH
7456: NOP4
7460: PUSH
7461: LD_INT 2
7463: NONEQUAL
7464: AND
7465: IFFALSE 7536
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) else
7467: LD_INT 22
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 21
7479: PUSH
7480: LD_INT 2
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PPUSH
7491: NOP4
7495: PPUSH
7496: NOP4
7500: PUSH
7501: NOP4
7505: ARRAY
7506: PUSH
7507: NOP4
7511: ARRAY
7512: PPUSH
7513: NOP4
7517: PUSH
7518: NOP4
7522: ARRAY
7523: PUSH
7524: NOP4
7528: ARRAY
7529: PPUSH
7530: NOP4
7534: GO 7603
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: NOP4
7564: PPUSH
7565: NOP4
7569: PUSH
7570: NOP4
7574: ARRAY
7575: PUSH
7576: NOP4
7580: ARRAY
7581: PPUSH
7582: NOP4
7586: PUSH
7587: NOP4
7591: ARRAY
7592: PUSH
7593: NOP4
7597: ARRAY
7598: PPUSH
7599: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
7603: LD_INT 22
7605: PUSH
7606: LD_INT 1
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 21
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: NOP4
7631: PPUSH
7632: NOP4
7636: PUSH
7637: NOP4
7641: ARRAY
7642: PUSH
7643: NOP4
7647: ARRAY
7648: PPUSH
7649: NOP4
7653: PUSH
7654: NOP4
7658: ARRAY
7659: PUSH
7660: NOP4
7664: ARRAY
7665: PPUSH
7666: NOP4
// end ;
7670: GO 7442
7672: POP
7673: POP
// if SpawnArea = AmNorthSpawnArea and RoadRand = 2 then
7674: NOP4
7678: PUSH
7679: NOP4
7683: EQUAL
7684: PUSH
7685: NOP4
7689: PUSH
7690: LD_INT 2
7692: EQUAL
7693: AND
7694: IFFALSE 7870
// if Rand ( 1 , 2 ) = 1 then
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: NOP4
7706: PUSH
7707: LD_INT 1
7709: EQUAL
7710: IFFALSE 7753
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 39 , 25 ) else
7712: LD_INT 22
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 21
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PPUSH
7736: NOP4
7740: PPUSH
7741: LD_INT 39
7743: PPUSH
7744: LD_INT 25
7746: PPUSH
7747: NOP4
7751: GO 7870
// begin ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 88 , 42 ) ;
7753: LD_INT 22
7755: PUSH
7756: LD_INT 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 21
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PPUSH
7777: NOP4
7781: PPUSH
7782: LD_INT 88
7784: PPUSH
7785: LD_INT 42
7787: PPUSH
7788: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 78 , 71 ) ;
7792: LD_INT 22
7794: PUSH
7795: LD_INT 1
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PPUSH
7816: NOP4
7820: PPUSH
7821: LD_INT 78
7823: PPUSH
7824: LD_INT 71
7826: PPUSH
7827: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 35 , 29 ) ;
7831: LD_INT 22
7833: PUSH
7834: LD_INT 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PPUSH
7855: NOP4
7859: PPUSH
7860: LD_INT 35
7862: PPUSH
7863: LD_INT 29
7865: PPUSH
7866: NOP4
// end ; end ; 4 :
7870: GO 8841
7872: LD_INT 4
7874: DOUBLE
7875: EQUAL
7876: IFTRUE 7880
7878: GO 8840
7880: POP
// begin temp_list = [ ] ;
7881: NOP4
7885: PUSH
7886: EMPTY
7887: ST_TO_ADDR
// for i = 1 to 6 do
7888: NOP4
7892: PUSH
7893: DOUBLE
7894: LD_INT 1
7896: DEC
7897: ST_TO_ADDR
7898: LD_INT 6
7900: PUSH
7901: FOR_TO
7902: IFFALSE 8229
// begin if i > 4 and difficulty = 1 then
7904: NOP4
7908: PUSH
7909: LD_INT 4
7911: GREATER
7912: PUSH
7913: NOP4
7917: PUSH
7918: LD_INT 1
7920: EQUAL
7921: AND
7922: IFFALSE 7926
// break ;
7924: GO 8229
// if Rand ( 1 , 2 ) = 1 then
7926: LD_INT 1
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: NOP4
7936: PUSH
7937: LD_INT 1
7939: EQUAL
7940: IFFALSE 7956
// PrepareMechanic ( false , am_skill_lvl ) else
7942: LD_INT 0
7944: PPUSH
7945: NOP4
7949: PPUSH
7950: NOP4
7954: GO 7969
// PrepareMechanic ( false , - am_skill_lvl ) ;
7956: LD_INT 0
7958: PPUSH
7959: NOP4
7963: NEG
7964: PPUSH
7965: NOP4
// temp_unit = CreateHuman ;
7969: NOP4
7973: PUSH
7974: NOP4
7978: ST_TO_ADDR
// case i of 1 , 2 :
7979: NOP4
7983: PUSH
7984: LD_INT 1
7986: DOUBLE
7987: EQUAL
7988: IFTRUE 7998
7990: LD_INT 2
7992: DOUBLE
7993: EQUAL
7994: IFTRUE 7998
7996: GO 8017
7998: POP
// begin vc_chassis = us_medium_wheeled ;
7999: LD_ADDR_OWVAR 37
8003: PUSH
8004: LD_INT 2
8006: ST_TO_ADDR
// vc_weapon = us_double_gun ;
8007: LD_ADDR_OWVAR 40
8011: PUSH
8012: LD_INT 5
8014: ST_TO_ADDR
// end ; 3 , 4 :
8015: GO 8148
8017: LD_INT 3
8019: DOUBLE
8020: EQUAL
8021: IFTRUE 8031
8023: LD_INT 4
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8078
8031: POP
// begin vc_chassis = us_medium_wheeled ;
8032: LD_ADDR_OWVAR 37
8036: PUSH
8037: LD_INT 2
8039: ST_TO_ADDR
// if Rand ( 1 , difficulty ) = 1 then
8040: LD_INT 1
8042: PPUSH
8043: NOP4
8047: PPUSH
8048: NOP4
8052: PUSH
8053: LD_INT 1
8055: EQUAL
8056: IFFALSE 8068
// vc_weapon = us_light_gun else
8058: LD_ADDR_OWVAR 40
8062: PUSH
8063: LD_INT 3
8065: ST_TO_ADDR
8066: GO 8076
// vc_weapon = us_double_gun ;
8068: LD_ADDR_OWVAR 40
8072: PUSH
8073: LD_INT 5
8075: ST_TO_ADDR
// end ; 5 , 6 :
8076: GO 8148
8078: LD_INT 5
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8092
8084: LD_INT 6
8086: DOUBLE
8087: EQUAL
8088: IFTRUE 8092
8090: GO 8147
8092: POP
// if Rand ( 1 , difficulty ) = 1 then
8093: LD_INT 1
8095: PPUSH
8096: NOP4
8100: PPUSH
8101: NOP4
8105: PUSH
8106: LD_INT 1
8108: EQUAL
8109: IFFALSE 8129
// begin vc_weapon = us_light_gun ;
8111: LD_ADDR_OWVAR 40
8115: PUSH
8116: LD_INT 3
8118: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
8119: LD_ADDR_OWVAR 37
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// end else
8127: GO 8145
// begin vc_weapon = us_double_gun ;
8129: LD_ADDR_OWVAR 40
8133: PUSH
8134: LD_INT 5
8136: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
8137: LD_ADDR_OWVAR 37
8141: PUSH
8142: LD_INT 2
8144: ST_TO_ADDR
// end ; end ;
8145: GO 8148
8147: POP
// temp_veh = CreateVehicle ;
8148: NOP4
8152: PUSH
8153: NOP4
8157: ST_TO_ADDR
// temp_list = temp_list ^ [ [ temp_veh , temp_unit ] ] ;
8158: NOP4
8162: PUSH
8163: NOP4
8167: PUSH
8168: NOP4
8172: PUSH
8173: NOP4
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: ADD
8185: ST_TO_ADDR
// PlaceUnitArea ( temp_veh , SpawnArea , false ) ;
8186: NOP4
8190: PPUSH
8191: NOP4
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: NOP4
// PlaceHumanInUnit ( temp_unit , temp_list [ i ] [ 1 ] ) ;
8203: NOP4
8207: PPUSH
8208: NOP4
8212: PUSH
8213: NOP4
8217: ARRAY
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: NOP4
// end ;
8227: GO 7901
8229: POP
8230: POP
// fourth_wave = Replace ( fourth_wave , 1 , temp_list ) ;
8231: NOP4
8235: PUSH
8236: NOP4
8240: PPUSH
8241: LD_INT 1
8243: PPUSH
8244: NOP4
8248: PPUSH
8249: NOP4
8253: ST_TO_ADDR
// temp_list = [ ] ;
8254: NOP4
8258: PUSH
8259: EMPTY
8260: ST_TO_ADDR
// for i = 1 to ( difficulty + 3 ) * 2 + difficulty + 2 + difficulty + 1 do
8261: NOP4
8265: PUSH
8266: DOUBLE
8267: LD_INT 1
8269: DEC
8270: ST_TO_ADDR
8271: NOP4
8275: PUSH
8276: LD_INT 3
8278: PLUS
8279: PUSH
8280: LD_INT 2
8282: MUL
8283: PUSH
8284: NOP4
8288: PLUS
8289: PUSH
8290: LD_INT 2
8292: PLUS
8293: PUSH
8294: NOP4
8298: PLUS
8299: PUSH
8300: LD_INT 1
8302: PLUS
8303: PUSH
8304: FOR_TO
8305: IFFALSE 8364
// begin PrepareSoldier ( false , am_skill_lvl ) ;
8307: LD_INT 0
8309: PPUSH
8310: NOP4
8314: PPUSH
8315: NOP4
// temp_unit = CreateHuman ;
8319: NOP4
8323: PUSH
8324: NOP4
8328: ST_TO_ADDR
// temp_list = temp_list ^ temp_unit ;
8329: NOP4
8333: PUSH
8334: NOP4
8338: PUSH
8339: NOP4
8343: ADD
8344: ST_TO_ADDR
// PlaceUnitArea ( temp_unit , SpawnArea , false ) ;
8345: NOP4
8349: PPUSH
8350: NOP4
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: NOP4
// end ;
8362: GO 8304
8364: POP
8365: POP
// fourth_wave = Replace ( fourth_wave , 2 , temp_list ) ;
8366: NOP4
8370: PUSH
8371: NOP4
8375: PPUSH
8376: LD_INT 2
8378: PPUSH
8379: NOP4
8383: PPUSH
8384: NOP4
8388: ST_TO_ADDR
// for i = 1 to roadX [ RoadRand ] do
8389: NOP4
8393: PUSH
8394: DOUBLE
8395: LD_INT 1
8397: DEC
8398: ST_TO_ADDR
8399: NOP4
8403: PUSH
8404: NOP4
8408: ARRAY
8409: PUSH
8410: FOR_TO
8411: IFFALSE 8640
// begin if SpawnArea = AmNorthSpawnArea and RoadRand <> 2 then
8413: NOP4
8417: PUSH
8418: NOP4
8422: EQUAL
8423: PUSH
8424: NOP4
8428: PUSH
8429: LD_INT 2
8431: NONEQUAL
8432: AND
8433: IFFALSE 8504
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) else
8435: LD_INT 22
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 21
8447: PUSH
8448: LD_INT 2
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: NOP4
8463: PPUSH
8464: NOP4
8468: PUSH
8469: NOP4
8473: ARRAY
8474: PUSH
8475: NOP4
8479: ARRAY
8480: PPUSH
8481: NOP4
8485: PUSH
8486: NOP4
8490: ARRAY
8491: PUSH
8492: NOP4
8496: ARRAY
8497: PPUSH
8498: NOP4
8502: GO 8571
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
8504: LD_INT 22
8506: PUSH
8507: LD_INT 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 2
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PPUSH
8528: NOP4
8532: PPUSH
8533: NOP4
8537: PUSH
8538: NOP4
8542: ARRAY
8543: PUSH
8544: NOP4
8548: ARRAY
8549: PPUSH
8550: NOP4
8554: PUSH
8555: NOP4
8559: ARRAY
8560: PUSH
8561: NOP4
8565: ARRAY
8566: PPUSH
8567: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , roadX [ RoadRand ] [ i ] , roadY [ RoadRand ] [ i ] ) ;
8571: LD_INT 22
8573: PUSH
8574: LD_INT 1
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 21
8583: PUSH
8584: LD_INT 1
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PPUSH
8595: NOP4
8599: PPUSH
8600: NOP4
8604: PUSH
8605: NOP4
8609: ARRAY
8610: PUSH
8611: NOP4
8615: ARRAY
8616: PPUSH
8617: NOP4
8621: PUSH
8622: NOP4
8626: ARRAY
8627: PUSH
8628: NOP4
8632: ARRAY
8633: PPUSH
8634: NOP4
// end ;
8638: GO 8410
8640: POP
8641: POP
// if SpawnArea = AmNorthSpawnArea and RoadRand = 2 then
8642: NOP4
8646: PUSH
8647: NOP4
8651: EQUAL
8652: PUSH
8653: NOP4
8657: PUSH
8658: LD_INT 2
8660: EQUAL
8661: AND
8662: IFFALSE 8838
// if Rand ( 1 , 2 ) = 1 then
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: NOP4
8674: PUSH
8675: LD_INT 1
8677: EQUAL
8678: IFFALSE 8721
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 39 , 25 ) else
8680: LD_INT 22
8682: PUSH
8683: LD_INT 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: NOP4
8708: PPUSH
8709: LD_INT 39
8711: PPUSH
8712: LD_INT 25
8714: PPUSH
8715: NOP4
8719: GO 8838
// begin ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 88 , 42 ) ;
8721: LD_INT 22
8723: PUSH
8724: LD_INT 1
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 21
8733: PUSH
8734: LD_INT 2
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: NOP4
8749: PPUSH
8750: LD_INT 88
8752: PPUSH
8753: LD_INT 42
8755: PPUSH
8756: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 78 , 71 ) ;
8760: LD_INT 22
8762: PUSH
8763: LD_INT 1
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 21
8772: PUSH
8773: LD_INT 2
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PPUSH
8784: NOP4
8788: PPUSH
8789: LD_INT 78
8791: PPUSH
8792: LD_INT 71
8794: PPUSH
8795: NOP4
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 35 , 29 ) ;
8799: LD_INT 22
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: NOP4
8827: PPUSH
8828: LD_INT 35
8830: PPUSH
8831: LD_INT 29
8833: PPUSH
8834: NOP4
// end ; end ; end ;
8838: GO 8841
8840: POP
// end ;
8841: LD_VAR 0 3
8845: RET
// every 0 0$1 trigger AmAlarmAttack and FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) do var i , target1 , target2 ;
8846: NOP4
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 50
8863: PUSH
8864: EMPTY
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PPUSH
8871: NOP4
8875: AND
8876: IFFALSE 9104
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin enable ;
8886: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) do
8887: NOP4
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 50
8904: PUSH
8905: EMPTY
8906: LIST
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: NOP4
8916: PUSH
8917: FOR_IN
8918: IFFALSE 9102
// if not HasTask ( i ) then
8920: NOP4
8924: PPUSH
8925: NOP4
8929: NOT
8930: IFFALSE 9100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ;
8932: NOP4
8936: PUSH
8937: LD_INT 81
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: NOP4
8951: PPUSH
8952: NOP4
8956: PPUSH
8957: NOP4
8961: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8962: NOP4
8966: PUSH
8967: LD_INT 81
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 59
8982: PUSH
8983: EMPTY
8984: LIST
8985: PUSH
8986: LD_INT 21
8988: PUSH
8989: LD_INT 1
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 21
8998: PUSH
8999: LD_INT 2
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: PPUSH
9019: NOP4
9023: PPUSH
9024: NOP4
9028: PPUSH
9029: NOP4
9033: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9034: NOP4
9038: PPUSH
9039: NOP4
9043: PPUSH
9044: NOP4
9048: PUSH
9049: LD_INT 8
9051: PLUS
9052: PUSH
9053: NOP4
9057: PPUSH
9058: NOP4
9062: PPUSH
9063: NOP4
9067: LESS
9068: IFFALSE 9086
// ComAttackUnit ( i , target1 ) else
9070: NOP4
9074: PPUSH
9075: NOP4
9079: PPUSH
9080: NOP4
9084: GO 9100
// ComAttackUnit ( i , target2 ) ;
9086: NOP4
9090: PPUSH
9091: NOP4
9095: PPUSH
9096: NOP4
// end ;
9100: GO 8917
9102: POP
9103: POP
// end ; end_of_file
9104: PPOPN 3
9106: END
// export function Action ; begin
9107: LD_INT 0
9109: PPUSH
// InGameOn ;
9110: NOP4
// CenterNowOnUnits ( [ Heike , FarmerVehicle ] ) ;
9114: NOP4
9118: PUSH
9119: NOP4
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PPUSH
9128: NOP4
// ComMoveXY ( [ Heike , Aviradze , Ralph , Oswald , Sonya , ArSol , FarmerVehicle ] , 97 , 11 ) ;
9132: NOP4
9136: PUSH
9137: NOP4
9141: PUSH
9142: NOP4
9146: PUSH
9147: NOP4
9151: PUSH
9152: NOP4
9156: PUSH
9157: NOP4
9161: PUSH
9162: NOP4
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: PPUSH
9176: LD_INT 97
9178: PPUSH
9179: LD_INT 11
9181: PPUSH
9182: NOP4
// AddComMoveXY ( [ Heike , Aviradze , Ralph , Oswald , Sonya , ArSol , FarmerVehicle ] , 94 , 13 ) ;
9186: NOP4
9190: PUSH
9191: NOP4
9195: PUSH
9196: NOP4
9200: PUSH
9201: NOP4
9205: PUSH
9206: NOP4
9210: PUSH
9211: NOP4
9215: PUSH
9216: NOP4
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: LD_INT 94
9232: PPUSH
9233: LD_INT 13
9235: PPUSH
9236: NOP4
// AddComMoveXY ( [ Heike , Aviradze , Ralph , Oswald , Sonya , ArSol , FarmerVehicle ] , 94 , 20 ) ;
9240: NOP4
9244: PUSH
9245: NOP4
9249: PUSH
9250: NOP4
9254: PUSH
9255: NOP4
9259: PUSH
9260: NOP4
9264: PUSH
9265: NOP4
9269: PUSH
9270: NOP4
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PPUSH
9284: LD_INT 94
9286: PPUSH
9287: LD_INT 20
9289: PPUSH
9290: NOP4
// AddComMoveXY ( [ Heike , Aviradze , Ralph , Oswald , Sonya , ArSol , FarmerVehicle ] , 93 , 24 ) ;
9294: NOP4
9298: PUSH
9299: NOP4
9303: PUSH
9304: NOP4
9308: PUSH
9309: NOP4
9313: PUSH
9314: NOP4
9318: PUSH
9319: NOP4
9323: PUSH
9324: NOP4
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PPUSH
9338: LD_INT 93
9340: PPUSH
9341: LD_INT 24
9343: PPUSH
9344: NOP4
// AddComMoveXY ( [ Heike , Aviradze , Ralph , Oswald , Sonya , ArSol , FarmerVehicle ] , 90 , 30 ) ;
9348: NOP4
9352: PUSH
9353: NOP4
9357: PUSH
9358: NOP4
9362: PUSH
9363: NOP4
9367: PUSH
9368: NOP4
9372: PUSH
9373: NOP4
9377: PUSH
9378: NOP4
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PPUSH
9392: LD_INT 90
9394: PPUSH
9395: LD_INT 30
9397: PPUSH
9398: NOP4
// AddComMoveXY ( FarmerVehicle , 92 , 37 ) ;
9402: NOP4
9406: PPUSH
9407: LD_INT 92
9409: PPUSH
9410: LD_INT 37
9412: PPUSH
9413: NOP4
// AddComMoveXY ( Heike , 85 , 32 ) ;
9417: NOP4
9421: PPUSH
9422: LD_INT 85
9424: PPUSH
9425: LD_INT 32
9427: PPUSH
9428: NOP4
// AddComTurnUnit ( Heike , Kowalski ) ;
9432: NOP4
9436: PPUSH
9437: NOP4
9441: PPUSH
9442: NOP4
// AddComMoveXY ( Aviradze , 84 , 30 ) ;
9446: NOP4
9450: PPUSH
9451: LD_INT 84
9453: PPUSH
9454: LD_INT 30
9456: PPUSH
9457: NOP4
// AddComTurnUnit ( Aviradze , Kowalski ) ;
9461: NOP4
9465: PPUSH
9466: NOP4
9470: PPUSH
9471: NOP4
// AddComMoveXY ( Ralph , 85 , 31 ) ;
9475: NOP4
9479: PPUSH
9480: LD_INT 85
9482: PPUSH
9483: LD_INT 31
9485: PPUSH
9486: NOP4
// AddComTurnUnit ( Ralph , Kowalski ) ;
9490: NOP4
9494: PPUSH
9495: NOP4
9499: PPUSH
9500: NOP4
// AddComMoveXY ( Oswald , 86 , 32 ) ;
9504: NOP4
9508: PPUSH
9509: LD_INT 86
9511: PPUSH
9512: LD_INT 32
9514: PPUSH
9515: NOP4
// AddComTurnUnit ( Oswald , Kowalski ) ;
9519: NOP4
9523: PPUSH
9524: NOP4
9528: PPUSH
9529: NOP4
// AddComMoveXY ( Sonya , 87 , 33 ) ;
9533: NOP4
9537: PPUSH
9538: LD_INT 87
9540: PPUSH
9541: LD_INT 33
9543: PPUSH
9544: NOP4
// AddComTurnUnit ( Sonya , Kowalski ) ;
9548: NOP4
9552: PPUSH
9553: NOP4
9557: PPUSH
9558: NOP4
// AddComMoveXY ( ArSol , 88 , 34 ) ;
9562: NOP4
9566: PPUSH
9567: LD_INT 88
9569: PPUSH
9570: LD_INT 34
9572: PPUSH
9573: NOP4
// AddComTurnUnit ( ArSol , Kowalski ) ;
9577: NOP4
9581: PPUSH
9582: NOP4
9586: PPUSH
9587: NOP4
// repeat wait ( 0 0$1 ) ;
9591: LD_INT 35
9593: PPUSH
9594: NOP4
// until GetDistUnitXY ( FarmerVehicle , 92 , 37 ) <= 1 ;
9598: NOP4
9602: PPUSH
9603: LD_INT 92
9605: PPUSH
9606: LD_INT 37
9608: PPUSH
9609: NOP4
9613: PUSH
9614: LD_INT 1
9616: LESSEQUAL
9617: IFFALSE 9591
// AddComExitVehicle ( Messenger ) ;
9619: NOP4
9623: PPUSH
9624: NOP4
// wait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: NOP4
// AddComMoveXY ( Messenger , 86 , 33 ) ;
9635: NOP4
9639: PPUSH
9640: LD_INT 86
9642: PPUSH
9643: LD_INT 33
9645: PPUSH
9646: NOP4
// AddComTurnUnit ( Messenger , Kowalski ) ;
9650: NOP4
9654: PPUSH
9655: NOP4
9659: PPUSH
9660: NOP4
// repeat wait ( 0 0$1 ) ;
9664: LD_INT 35
9666: PPUSH
9667: NOP4
// until GetDistUnitXY ( Heike , 85 , 32 ) <= 1 ;
9671: NOP4
9675: PPUSH
9676: LD_INT 85
9678: PPUSH
9679: LD_INT 32
9681: PPUSH
9682: NOP4
9686: PUSH
9687: LD_INT 1
9689: LESSEQUAL
9690: IFFALSE 9664
// CenterNowOnUnits ( [ Heike , Kowalski ] ) ;
9692: NOP4
9696: PUSH
9697: NOP4
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PPUSH
9706: NOP4
// Say ( Messenger , D2Me1 ) ;
9710: NOP4
9714: PPUSH
9715: LD_STRING D2Me1
9717: PPUSH
9718: NOP4
// Say ( Heike , D2H1 ) ;
9722: NOP4
9726: PPUSH
9727: LD_STRING D2H1
9729: PPUSH
9730: NOP4
// Say ( Kowalski , D2Ko1 ) ;
9734: NOP4
9738: PPUSH
9739: LD_STRING D2Ko1
9741: PPUSH
9742: NOP4
// Say ( Heike , D2H2 ) ;
9746: NOP4
9750: PPUSH
9751: LD_STRING D2H2
9753: PPUSH
9754: NOP4
// Say ( Kowalski , D2Ko2 ) ;
9758: NOP4
9762: PPUSH
9763: LD_STRING D2Ko2
9765: PPUSH
9766: NOP4
// Say ( Heike , D2H3 ) ;
9770: NOP4
9774: PPUSH
9775: LD_STRING D2H3
9777: PPUSH
9778: NOP4
// Say ( Kowalski , D2Ko3 ) ;
9782: NOP4
9786: PPUSH
9787: LD_STRING D2Ko3
9789: PPUSH
9790: NOP4
// Say ( Heike , D2H4 ) ;
9794: NOP4
9798: PPUSH
9799: LD_STRING D2H4
9801: PPUSH
9802: NOP4
// ComTurnUnit ( Messenger , Heike ) ;
9806: NOP4
9810: PPUSH
9811: NOP4
9815: PPUSH
9816: NOP4
// Say ( Messenger , D2Me2 ) ;
9820: NOP4
9824: PPUSH
9825: LD_STRING D2Me2
9827: PPUSH
9828: NOP4
// SetSide ( [ Messenger , FarmerVehicle ] , 5 ) ;
9832: NOP4
9836: PUSH
9837: NOP4
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PPUSH
9846: LD_INT 5
9848: PPUSH
9849: NOP4
// ComEnterUnit ( Messenger , FarmerVehicle ) ;
9853: NOP4
9857: PPUSH
9858: NOP4
9862: PPUSH
9863: NOP4
// AddComMoveXY ( Messenger , 87 , 45 ) ;
9867: NOP4
9871: PPUSH
9872: LD_INT 87
9874: PPUSH
9875: LD_INT 45
9877: PPUSH
9878: NOP4
// AddComMoveXY ( Messenger , 92 , 60 ) ;
9882: NOP4
9886: PPUSH
9887: LD_INT 92
9889: PPUSH
9890: LD_INT 60
9892: PPUSH
9893: NOP4
// AddComMoveXY ( Messenger , 107 , 71 ) ;
9897: NOP4
9901: PPUSH
9902: LD_INT 107
9904: PPUSH
9905: LD_INT 71
9907: PPUSH
9908: NOP4
// AddComMoveToArea ( Messenger , FarmerExitArea ) ;
9912: NOP4
9916: PPUSH
9917: NOP4
9921: PPUSH
9922: NOP4
// Say ( Aviradze , D2Av1 ) ;
9926: NOP4
9930: PPUSH
9931: LD_STRING D2Av1
9933: PPUSH
9934: NOP4
// Say ( Heike , D2H5 ) ;
9938: NOP4
9942: PPUSH
9943: LD_STRING D2H5
9945: PPUSH
9946: NOP4
// RevealFogArea ( 2 , HillArea ) ;
9950: LD_INT 2
9952: PPUSH
9953: NOP4
9957: PPUSH
9958: NOP4
// CenterOnXY ( 62 , 39 ) ;
9962: LD_INT 62
9964: PPUSH
9965: LD_INT 39
9967: PPUSH
9968: NOP4
// Say ( Kowalski , D2Ko5 ) ;
9972: NOP4
9976: PPUSH
9977: LD_STRING D2Ko5
9979: PPUSH
9980: NOP4
// CenterNowOnUnits ( [ Heike , Kowalski ] ) ;
9984: NOP4
9988: PUSH
9989: NOP4
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: NOP4
// if Oswald > 0 then
10002: NOP4
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: IFFALSE 10048
// begin Say ( Oswald , D2Os1 ) ;
10012: NOP4
10016: PPUSH
10017: LD_STRING D2Os1
10019: PPUSH
10020: NOP4
// Say ( Heike , D2H6 ) ;
10024: NOP4
10028: PPUSH
10029: LD_STRING D2H6
10031: PPUSH
10032: NOP4
// Say ( Heike , D2H7 ) ;
10036: NOP4
10040: PPUSH
10041: LD_STRING D2H7
10043: PPUSH
10044: NOP4
// end ; repeat wait ( 0 0$1 ) ;
10048: LD_INT 35
10050: PPUSH
10051: NOP4
// until IsInUnit ( Messenger ) ;
10055: NOP4
10059: PPUSH
10060: NOP4
10064: IFFALSE 10048
// InGameOff ;
10066: NOP4
// ChangeMissionObjectives ( M1 ) ;
10070: LD_STRING M1
10072: PPUSH
10073: NOP4
// SaveForQuickRestart ;
10077: NOP4
// AddComMoveToArea ( FarmerVehicle , FarmerExitArea ) ;
10081: NOP4
10085: PPUSH
10086: NOP4
10090: PPUSH
10091: NOP4
// end ;
10095: LD_VAR 0 1
10099: RET
// every 0 0$1 trigger IsInArea ( FarmerVehicle , FarmerExitArea ) do
10100: NOP4
10104: PPUSH
10105: NOP4
10109: PPUSH
10110: NOP4
10114: IFFALSE 10137
10116: GO 10118
10118: DISABLE
// begin RemoveUnit ( FarmerVehicle ) ;
10119: NOP4
10123: PPUSH
10124: NOP4
// RemoveUnit ( Messenger ) ;
10128: NOP4
10132: PPUSH
10133: NOP4
// end ;
10137: END
// every 0 0$1 trigger FilterUnitsInArea ( HillEnterArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 0 and CaptureAmBase = false do
10138: NOP4
10142: PPUSH
10143: LD_INT 22
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 21
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: NOP4
10171: PUSH
10172: LD_INT 0
10174: GREATER
10175: PUSH
10176: NOP4
10180: PUSH
10181: LD_INT 0
10183: EQUAL
10184: AND
10185: IFFALSE 10202
10187: GO 10189
10189: DISABLE
// begin Say ( Heike , D3-H-1 ) ;
10190: NOP4
10194: PPUSH
10195: LD_STRING D3-H-1
10197: PPUSH
10198: NOP4
// end ;
10202: END
// every 0 0$1 trigger FilterUnitsInArea ( SpotArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 0 and Americans_are_evacuating = false do var i ;
10203: NOP4
10207: PPUSH
10208: LD_INT 22
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: NOP4
10236: PUSH
10237: LD_INT 0
10239: GREATER
10240: PUSH
10241: NOP4
10245: PUSH
10246: LD_INT 0
10248: EQUAL
10249: AND
10250: IFFALSE 10684
10252: GO 10254
10254: DISABLE
10255: LD_INT 0
10257: PPUSH
// begin SetAttitude ( 1 , 2 , att_friend , true ) ;
10258: LD_INT 1
10260: PPUSH
10261: LD_INT 2
10263: PPUSH
10264: LD_INT 1
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: NOP4
// InGameOn ;
10274: NOP4
// PlaceSeeing ( 36 , 24 , 2 , - 10 ) ;
10278: LD_INT 36
10280: PPUSH
10281: LD_INT 24
10283: PPUSH
10284: LD_INT 2
10286: PPUSH
10287: LD_INT 10
10289: NEG
10290: PPUSH
10291: NOP4
// CenterOnXY ( 37 , 25 ) ;
10295: LD_INT 37
10297: PPUSH
10298: LD_INT 25
10300: PPUSH
10301: NOP4
// DialogueOn ;
10305: NOP4
// if IsInArea ( Heike , DetectArabUnitsArea ) then
10309: NOP4
10313: PPUSH
10314: NOP4
10318: PPUSH
10319: NOP4
10323: IFFALSE 10337
// Say ( Heike , D3-H-2 ) ;
10325: NOP4
10329: PPUSH
10330: LD_STRING D3-H-2
10332: PPUSH
10333: NOP4
// if Oswald > 0 and IsInArea ( Oswald , DetectArabUnitsArea ) and IsInArea ( Heike , DetectArabUnitsArea ) then
10337: NOP4
10341: PUSH
10342: LD_INT 0
10344: GREATER
10345: PUSH
10346: NOP4
10350: PPUSH
10351: NOP4
10355: PPUSH
10356: NOP4
10360: AND
10361: PUSH
10362: NOP4
10366: PPUSH
10367: NOP4
10371: PPUSH
10372: NOP4
10376: AND
10377: IFFALSE 10391
// Say ( Oswald , D3-Osw-1 ) ;
10379: NOP4
10383: PPUSH
10384: LD_STRING D3-Osw-1
10386: PPUSH
10387: NOP4
// if Oswald > 0 and IsInArea ( Oswald , DetectArabUnitsArea ) and not IsInArea ( Heike , DetectArabUnitsArea ) then
10391: NOP4
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: PUSH
10400: NOP4
10404: PPUSH
10405: NOP4
10409: PPUSH
10410: NOP4
10414: AND
10415: PUSH
10416: NOP4
10420: PPUSH
10421: NOP4
10425: PPUSH
10426: NOP4
10430: NOT
10431: AND
10432: IFFALSE 10446
// Say ( Oswald , D3-Osw-1a ) ;
10434: NOP4
10438: PPUSH
10439: LD_STRING D3-Osw-1a
10441: PPUSH
10442: NOP4
// if Oswald > 0 and not IsInArea ( Oswald , DetectArabUnitsArea ) then
10446: NOP4
10450: PUSH
10451: LD_INT 0
10453: GREATER
10454: PUSH
10455: NOP4
10459: PPUSH
10460: NOP4
10464: PPUSH
10465: NOP4
10469: NOT
10470: AND
10471: IFFALSE 10485
// Say ( Oswald , D3-Osw-1b ) ;
10473: NOP4
10477: PPUSH
10478: LD_STRING D3-Osw-1b
10480: PPUSH
10481: NOP4
// Say ( Heike , D3-H-3 ) ;
10485: NOP4
10489: PPUSH
10490: LD_STRING D3-H-3
10492: PPUSH
10493: NOP4
// Say ( Heike , D3-H-4 ) ;
10497: NOP4
10501: PPUSH
10502: LD_STRING D3-H-4
10504: PPUSH
10505: NOP4
// if Oswald > 0 then
10509: NOP4
10513: PUSH
10514: LD_INT 0
10516: GREATER
10517: IFFALSE 10531
// Say ( Oswald , D3-Osw-2 ) ;
10519: NOP4
10523: PPUSH
10524: LD_STRING D3-Osw-2
10526: PPUSH
10527: NOP4
// if KilledAmSci_02 > 0 and IsOk ( Aviradze ) then
10531: NOP4
10535: PUSH
10536: LD_INT 0
10538: GREATER
10539: PUSH
10540: NOP4
10544: PPUSH
10545: NOP4
10549: AND
10550: IFFALSE 10564
// Say ( Aviradze , D3-Aviradze-1 ) ;
10552: NOP4
10556: PPUSH
10557: LD_STRING D3-Aviradze-1
10559: PPUSH
10560: NOP4
// DialogueOff ;
10564: NOP4
// RemoveSeeing ( 36 , 24 , 2 ) ;
10568: LD_INT 36
10570: PPUSH
10571: LD_INT 24
10573: PPUSH
10574: LD_INT 2
10576: PPUSH
10577: NOP4
// for i in FilterUnitsInArea ( DetectArabUnitsArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
10581: NOP4
10585: PUSH
10586: NOP4
10590: PPUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 21
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: NOP4
10619: PUSH
10620: FOR_IN
10621: IFFALSE 10640
// ComMoveXY ( i , 64 , 41 ) ;
10623: NOP4
10627: PPUSH
10628: LD_INT 64
10630: PPUSH
10631: LD_INT 41
10633: PPUSH
10634: NOP4
10638: GO 10620
10640: POP
10641: POP
// wait ( 0 0$10 ) ;
10642: LD_INT 350
10644: PPUSH
10645: NOP4
// InGameOff ;
10649: NOP4
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
10653: LD_INT 1
10655: PPUSH
10656: LD_INT 2
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: NOP4
// ChangeMissionObjectives ( MRockOut ) ;
10669: LD_STRING MRockOut
10671: PPUSH
10672: NOP4
// SpottedAmericansBase = true ;
10676: NOP4
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// end ;
10684: PPOPN 1
10686: END
// every 0 0$5 do var i , temp , see_list , temp_list , count , string_val ;
10687: GO 10689
10689: DISABLE
10690: LD_INT 0
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
10696: PPUSH
10697: PPUSH
// begin count = 0 ;
10698: NOP4
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
10706: LD_INT 18
10708: PPUSH
10709: NOP4
// see_list = [ ] ;
10713: NOP4
10717: PUSH
10718: EMPTY
10719: ST_TO_ADDR
// if ContactTime ( [ 2 , 1 ] ) < 0 0$2 then
10720: LD_INT 2
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PPUSH
10730: NOP4
10734: PUSH
10735: LD_INT 70
10737: LESS
10738: IFFALSE 10882
// begin count = count + 1 ;
10740: NOP4
10744: PUSH
10745: NOP4
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: ST_TO_ADDR
// if count >= 5 then
10754: NOP4
10758: PUSH
10759: LD_INT 5
10761: GREATEREQUAL
10762: IFFALSE 10880
// begin see_list = FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) ;
10764: NOP4
10768: PUSH
10769: LD_INT 22
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 101
10781: PUSH
10782: LD_INT 2
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PPUSH
10793: NOP4
10797: ST_TO_ADDR
// for i = 1 to see_list do
10798: NOP4
10802: PUSH
10803: DOUBLE
10804: LD_INT 1
10806: DEC
10807: ST_TO_ADDR
10808: NOP4
10812: PUSH
10813: FOR_TO
10814: IFFALSE 10878
// begin temp_list = UnitsInside ( see_list [ i ] ) ;
10816: NOP4
10820: PUSH
10821: NOP4
10825: PUSH
10826: NOP4
10830: ARRAY
10831: PPUSH
10832: NOP4
10836: ST_TO_ADDR
// if temp_list > 0 then
10837: NOP4
10841: PUSH
10842: LD_INT 0
10844: GREATER
10845: IFFALSE 10876
// see_list = Replace ( see_list , i , temp_list [ 1 ] ) ;
10847: NOP4
10851: PUSH
10852: NOP4
10856: PPUSH
10857: NOP4
10861: PPUSH
10862: NOP4
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: PPUSH
10871: NOP4
10875: ST_TO_ADDR
// end ;
10876: GO 10813
10878: POP
10879: POP
// end ; end else
10880: GO 10890
// count = 0 ;
10882: NOP4
10886: PUSH
10887: LD_INT 0
10889: ST_TO_ADDR
// until see_list > 0 ;
10890: NOP4
10894: PUSH
10895: LD_INT 0
10897: GREATER
10898: IFFALSE 10706
// DialogueOn ;
10900: NOP4
// Say ( see_list [ 1 ] , D3AmMale1 ) ;
10904: NOP4
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: PPUSH
10913: LD_STRING D3AmMale1
10915: PPUSH
10916: NOP4
// Say ( Heike , D3H1 ) ;
10920: NOP4
10924: PPUSH
10925: LD_STRING D3H1
10927: PPUSH
10928: NOP4
// DialogueOff ;
10932: NOP4
// if SpottedAmericansBase = false then
10936: NOP4
10940: PUSH
10941: LD_INT 0
10943: EQUAL
10944: IFFALSE 10953
// ChangeMissionObjectives ( MRockDel ) ;
10946: LD_STRING MRockDel
10948: PPUSH
10949: NOP4
// repeat wait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: NOP4
// temp = 0 ;
10960: NOP4
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// for i in start_americans do
10968: NOP4
10972: PUSH
10973: NOP4
10977: PUSH
10978: FOR_IN
10979: IFFALSE 11022
// if GetLives ( i ) < 850 or i = 0 then
10981: NOP4
10985: PPUSH
10986: NOP4
10990: PUSH
10991: LD_INT 850
10993: LESS
10994: PUSH
10995: NOP4
10999: PUSH
11000: LD_INT 0
11002: EQUAL
11003: OR
11004: IFFALSE 11020
// temp = temp + 1 ;
11006: NOP4
11010: PUSH
11011: NOP4
11015: PUSH
11016: LD_INT 1
11018: PLUS
11019: ST_TO_ADDR
11020: GO 10978
11022: POP
11023: POP
// until temp > 2 ;
11024: NOP4
11028: PUSH
11029: LD_INT 2
11031: GREATER
11032: IFFALSE 10953
// see_list = FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] , [ f_ok ] ] ) ;
11034: NOP4
11038: PUSH
11039: LD_INT 22
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 101
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 50
11061: PUSH
11062: EMPTY
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: PPUSH
11070: NOP4
11074: ST_TO_ADDR
// for i = 1 to see_list do
11075: NOP4
11079: PUSH
11080: DOUBLE
11081: LD_INT 1
11083: DEC
11084: ST_TO_ADDR
11085: NOP4
11089: PUSH
11090: FOR_TO
11091: IFFALSE 11155
// begin temp_list = UnitsInside ( see_list [ i ] ) ;
11093: NOP4
11097: PUSH
11098: NOP4
11102: PUSH
11103: NOP4
11107: ARRAY
11108: PPUSH
11109: NOP4
11113: ST_TO_ADDR
// if temp_list > 0 then
11114: NOP4
11118: PUSH
11119: LD_INT 0
11121: GREATER
11122: IFFALSE 11153
// see_list = Replace ( see_list , i , temp_list [ 1 ] ) ;
11124: NOP4
11128: PUSH
11129: NOP4
11133: PPUSH
11134: NOP4
11138: PPUSH
11139: NOP4
11143: PUSH
11144: LD_INT 1
11146: ARRAY
11147: PPUSH
11148: NOP4
11152: ST_TO_ADDR
// end ;
11153: GO 11090
11155: POP
11156: POP
// if GetLives ( dep ) < 1000 then
11157: LD_INT 1
11159: PPUSH
11160: NOP4
11164: PUSH
11165: LD_INT 1000
11167: LESS
11168: IFFALSE 11180
// string_val = D3AmMale2b else
11170: NOP4
11174: PUSH
11175: LD_STRING D3AmMale2b
11177: ST_TO_ADDR
11178: GO 11188
// string_val = D3AmMale2a ;
11180: NOP4
11184: PUSH
11185: LD_STRING D3AmMale2a
11187: ST_TO_ADDR
// wait ( 0 0$5 ) ;
11188: LD_INT 175
11190: PPUSH
11191: NOP4
// DialogueOn ;
11195: NOP4
// if see_list > 0 then
11199: NOP4
11203: PUSH
11204: LD_INT 0
11206: GREATER
11207: IFFALSE 11229
// Say ( see_list [ 1 ] , string_val ) else
11209: NOP4
11213: PUSH
11214: LD_INT 1
11216: ARRAY
11217: PPUSH
11218: NOP4
11222: PPUSH
11223: NOP4
11227: GO 11258
// Say ( UnitFilter ( start_americans , [ f_ok ] ) [ 1 ] , string_val ) ;
11229: NOP4
11233: PPUSH
11234: LD_INT 50
11236: PUSH
11237: EMPTY
11238: LIST
11239: PPUSH
11240: NOP4
11244: PUSH
11245: LD_INT 1
11247: ARRAY
11248: PPUSH
11249: NOP4
11253: PPUSH
11254: NOP4
// DialogueOff ;
11258: NOP4
// americans_are_evacuating = true ;
11262: NOP4
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// for i in start_americans do
11270: NOP4
11274: PUSH
11275: NOP4
11279: PUSH
11280: FOR_IN
11281: IFFALSE 11394
// begin ComExitBuilding ( i ) ;
11283: NOP4
11287: PPUSH
11288: NOP4
// if FilterUnitsInArea ( NorthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > FilterUnitsInArea ( SouthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) then
11292: NOP4
11296: PPUSH
11297: LD_INT 22
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 21
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PPUSH
11321: NOP4
11325: PUSH
11326: NOP4
11330: PPUSH
11331: LD_INT 22
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 21
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PPUSH
11355: NOP4
11359: GREATER
11360: IFFALSE 11378
// AddComMoveToArea ( i , AmEscapeSouthArea ) else
11362: NOP4
11366: PPUSH
11367: NOP4
11371: PPUSH
11372: NOP4
11376: GO 11392
// AddComMoveToArea ( i , AmEscapeNorthArea ) ;
11378: NOP4
11382: PPUSH
11383: NOP4
11387: PPUSH
11388: NOP4
// end ;
11392: GO 11280
11394: POP
11395: POP
// repeat for i in start_americans do
11396: NOP4
11400: PUSH
11401: NOP4
11405: PUSH
11406: FOR_IN
11407: IFFALSE 11490
// if ( IsInArea ( i , AmEscapeNorthArea ) or IsInArea ( i , AmEscapeSouthArea ) ) and IsOk ( i ) then
11409: NOP4
11413: PPUSH
11414: NOP4
11418: PPUSH
11419: NOP4
11423: PUSH
11424: NOP4
11428: PPUSH
11429: NOP4
11433: PPUSH
11434: NOP4
11438: OR
11439: PUSH
11440: NOP4
11444: PPUSH
11445: NOP4
11449: AND
11450: IFFALSE 11488
// begin RemoveUnit ( i ) ;
11452: NOP4
11456: PPUSH
11457: NOP4
// if not americans_got_away then
11461: NOP4
11465: NOT
11466: IFFALSE 11480
// Say ( Heike , D3-H-5 ) ;
11468: NOP4
11472: PPUSH
11473: LD_STRING D3-H-5
11475: PPUSH
11476: NOP4
// americans_got_away = true ;
11480: NOP4
11484: PUSH
11485: LD_INT 1
11487: ST_TO_ADDR
// end ;
11488: GO 11406
11490: POP
11491: POP
// wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: NOP4
// until UnitFilter ( start_americans , [ [ f_ok ] , [ f_placed ] ] ) = 0 ;
11499: NOP4
11503: PPUSH
11504: LD_INT 50
11506: PUSH
11507: EMPTY
11508: LIST
11509: PUSH
11510: LD_INT 52
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: NOP4
11524: PUSH
11525: LD_INT 0
11527: EQUAL
11528: IFFALSE 11396
// americans_have_evacuated = true ;
11530: NOP4
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// if americans_got_away then
11538: NOP4
11542: IFFALSE 11585
// attack_times = Replace ( attack_times , 1 , attack_times [ 1 ] - attack_times [ 1 ] div 7 ) ;
11544: NOP4
11548: PUSH
11549: NOP4
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: NOP4
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PUSH
11566: NOP4
11570: PUSH
11571: LD_INT 1
11573: ARRAY
11574: PUSH
11575: LD_INT 7
11577: DIV
11578: MINUS
11579: PPUSH
11580: NOP4
11584: ST_TO_ADDR
// end ;
11585: PPOPN 6
11587: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) > 0 do var i , eng , sol , temp ;
11588: LD_INT 22
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 30
11600: PUSH
11601: LD_INT 0
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PPUSH
11612: NOP4
11616: PUSH
11617: LD_INT 0
11619: GREATER
11620: IFFALSE 12290
11622: GO 11624
11624: DISABLE
11625: LD_INT 0
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
// begin PrepareFarmerUnits ;
11631: NOP4
// eng = FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_engineer ] ] ) ;
11635: NOP4
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 25
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: NOP4
11668: ST_TO_ADDR
// sol = FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_soldier ] ] ) ;
11669: NOP4
11673: PUSH
11674: LD_INT 22
11676: PUSH
11677: LD_INT 5
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 1
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: NOP4
11702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11703: LD_INT 35
11705: PPUSH
11706: NOP4
// temp = FilterAllUnits ( [ [ f_side , 5 ] , [ f_constructed ] ] ) ;
11710: NOP4
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_INT 5
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 57
11727: PUSH
11728: EMPTY
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PPUSH
11735: NOP4
11739: ST_TO_ADDR
// if temp > 0 then
11740: NOP4
11744: PUSH
11745: LD_INT 0
11747: GREATER
11748: IFFALSE 11815
// for i in sol do
11750: NOP4
11754: PUSH
11755: NOP4
11759: PUSH
11760: FOR_IN
11761: IFFALSE 11813
// SetTaskList ( i , [ [ h , 0 , 0 , temp [ 1 ] , 0 , 0 , 0 ] ] ) ;
11763: NOP4
11767: PPUSH
11768: LD_STRING h
11770: PUSH
11771: LD_INT 0
11773: PUSH
11774: LD_INT 0
11776: PUSH
11777: NOP4
11781: PUSH
11782: LD_INT 1
11784: ARRAY
11785: PUSH
11786: LD_INT 0
11788: PUSH
11789: LD_INT 0
11791: PUSH
11792: LD_INT 0
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: PPUSH
11807: NOP4
11811: GO 11760
11813: POP
11814: POP
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
11815: LD_INT 22
11817: PUSH
11818: LD_INT 5
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 0
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 3
11837: PUSH
11838: LD_INT 57
11840: PUSH
11841: EMPTY
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PPUSH
11853: NOP4
11857: PUSH
11858: LD_INT 0
11860: EQUAL
11861: IFFALSE 11886
// ComBuild ( eng , b_depot , 112 , 65 , 3 ) else
11863: NOP4
11867: PPUSH
11868: LD_INT 0
11870: PPUSH
11871: LD_INT 112
11873: PPUSH
11874: LD_INT 65
11876: PPUSH
11877: LD_INT 3
11879: PPUSH
11880: NOP4
11884: GO 12026
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
11886: LD_INT 22
11888: PUSH
11889: LD_INT 5
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 31
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 3
11908: PUSH
11909: LD_INT 57
11911: PUSH
11912: EMPTY
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: PPUSH
11924: NOP4
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: IFFALSE 11957
// ComBuild ( eng , b_breastwork , 107 , 55 , 2 ) else
11934: NOP4
11938: PPUSH
11939: LD_INT 31
11941: PPUSH
11942: LD_INT 107
11944: PPUSH
11945: LD_INT 55
11947: PPUSH
11948: LD_INT 2
11950: PPUSH
11951: NOP4
11955: GO 12026
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) = 1 then
11957: LD_INT 22
11959: PUSH
11960: LD_INT 5
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 31
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: LD_INT 57
11982: PUSH
11983: EMPTY
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: NOP4
11999: PUSH
12000: LD_INT 1
12002: EQUAL
12003: IFFALSE 12026
// ComBuild ( eng , b_breastwork , 106 , 69 , 1 ) ;
12005: NOP4
12009: PPUSH
12010: LD_INT 31
12012: PPUSH
12013: LD_INT 106
12015: PPUSH
12016: LD_INT 69
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: NOP4
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) = 2 ;
12026: LD_INT 22
12028: PUSH
12029: LD_INT 5
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: LD_INT 57
12051: PUSH
12052: EMPTY
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: PPUSH
12064: NOP4
12068: PUSH
12069: LD_INT 2
12071: EQUAL
12072: IFFALSE 11703
// DialogueOn ;
12074: NOP4
// CenterNowOnXY ( 113 , 65 ) ;
12078: LD_INT 113
12080: PPUSH
12081: LD_INT 65
12083: PPUSH
12084: NOP4
// SayRadio ( Messenger , D5-F-4 ) ;
12088: NOP4
12092: PPUSH
12093: LD_STRING D5-F-4
12095: PPUSH
12096: NOP4
// if Difficulty = 1 then
12100: NOP4
12104: PUSH
12105: LD_INT 1
12107: EQUAL
12108: IFFALSE 12122
// SayRadio ( Messenger , D5-F-5 ) ;
12110: NOP4
12114: PPUSH
12115: LD_STRING D5-F-5
12117: PPUSH
12118: NOP4
// if Difficulty = 2 then
12122: NOP4
12126: PUSH
12127: LD_INT 2
12129: EQUAL
12130: IFFALSE 12144
// SayRadio ( Messenger , D5-F-5a ) ;
12132: NOP4
12136: PPUSH
12137: LD_STRING D5-F-5a
12139: PPUSH
12140: NOP4
// if IsOk ( Kowalski ) then
12144: NOP4
12148: PPUSH
12149: NOP4
12153: IFFALSE 12167
// Say ( Kowalski , D4Ko1 ) ;
12155: NOP4
12159: PPUSH
12160: LD_STRING D4Ko1
12162: PPUSH
12163: NOP4
// DialogueOff ;
12167: NOP4
// GameCounterShow = 1 ;
12171: NOP4
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 5 ] ) diff eng , 2 ) ;
12179: LD_INT 22
12181: PUSH
12182: LD_INT 5
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: NOP4
12193: PUSH
12194: NOP4
12198: DIFF
12199: PPUSH
12200: LD_INT 2
12202: PPUSH
12203: NOP4
// ComMoveToArea ( eng , FarmerExitArea ) ;
12207: NOP4
12211: PPUSH
12212: NOP4
12216: PPUSH
12217: NOP4
// ChangeMissionObjectives ( M2 ) ;
12221: LD_STRING M2
12223: PPUSH
12224: NOP4
// GameCounterShow = true ;
12228: NOP4
12232: PUSH
12233: LD_INT 1
12235: ST_TO_ADDR
// Hint ( CargoPickup ) ;
12236: LD_STRING CargoPickup
12238: PPUSH
12239: NOP4
// Hint ( Transport ) ;
12243: LD_STRING Transport
12245: PPUSH
12246: NOP4
// Query ( Query1 ) ;
12250: LD_STRING Query1
12252: PPUSH
12253: NOP4
// wait ( 0 0$15 ) ;
12257: LD_INT 525
12259: PPUSH
12260: NOP4
// for i in eng do
12264: NOP4
12268: PUSH
12269: NOP4
12273: PUSH
12274: FOR_IN
12275: IFFALSE 12288
// RemoveUnit ( i ) ;
12277: NOP4
12281: PPUSH
12282: NOP4
12286: GO 12274
12288: POP
12289: POP
// end ;
12290: PPOPN 4
12292: END
// every 2 2$0 trigger CaptureAmBase and americans_got_away = false do var i ;
12293: NOP4
12297: PUSH
12298: NOP4
12302: PUSH
12303: LD_INT 0
12305: EQUAL
12306: AND
12307: IFFALSE 12420
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin DialogueOn ;
12315: NOP4
// SayRadio ( Messenger , D5-F-1 ) ;
12319: NOP4
12323: PPUSH
12324: LD_STRING D5-F-1
12326: PPUSH
12327: NOP4
// Say ( Heike , D5-H-1 ) ;
12331: NOP4
12335: PPUSH
12336: LD_STRING D5-H-1
12338: PPUSH
12339: NOP4
// SayRadio ( Messenger , D5-F-2 ) ;
12343: NOP4
12347: PPUSH
12348: LD_STRING D5-F-2
12350: PPUSH
12351: NOP4
// Say ( Heike , D5-H-2 ) ;
12355: NOP4
12359: PPUSH
12360: LD_STRING D5-H-2
12362: PPUSH
12363: NOP4
// SayRadio ( Messenger , D5-F-3 ) ;
12367: NOP4
12371: PPUSH
12372: LD_STRING D5-F-3
12374: PPUSH
12375: NOP4
// Say ( Heike , D5-H-3 ) ;
12379: NOP4
12383: PPUSH
12384: LD_STRING D5-H-3
12386: PPUSH
12387: NOP4
// DialogueOff ;
12391: NOP4
// ChangeMissionObjectives ( M_Convoy ) ;
12395: LD_STRING M_Convoy
12397: PPUSH
12398: NOP4
// wait ( 4 4$0 ) ;
12402: LD_INT 8400
12404: PPUSH
12405: NOP4
// PrepareAmConvoy ;
12409: NOP4
// wait ( 0 0$1 ) ;
12413: LD_INT 35
12415: PPUSH
12416: NOP4
// end ;
12420: PPOPN 1
12422: END
// every 0 0$1 trigger first_shipment_have_been_sent do var i , delayed ;
12423: NOP4
12427: IFFALSE 12758
12429: GO 12431
12431: DISABLE
12432: LD_INT 0
12434: PPUSH
12435: PPUSH
// begin Wait ( 0 0$13 + 0 0$4 * [ 1 / ( 1.44 * 1.44 * 1.44 ) , 1 / ( 1.44 * 1.44 ) , 1 / 1.44 , 1 , 1.44 , 1.44 * 1.44 , 1.44 * 1.44 * 1.44 ] [ game_speed ] ) ;
12436: LD_INT 455
12438: PUSH
12439: LD_INT 140
12441: PUSH
12442: LD_INT 1
12444: PUSH
12445: LD_REAL  1.44000000000000E+0000
12448: PUSH
12449: LD_REAL  1.44000000000000E+0000
12452: MUL
12453: PUSH
12454: LD_REAL  1.44000000000000E+0000
12457: MUL
12458: DIVREAL
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: LD_REAL  1.44000000000000E+0000
12466: PUSH
12467: LD_REAL  1.44000000000000E+0000
12470: MUL
12471: DIVREAL
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: LD_REAL  1.44000000000000E+0000
12479: DIVREAL
12480: PUSH
12481: LD_INT 1
12483: PUSH
12484: LD_REAL  1.44000000000000E+0000
12487: PUSH
12488: LD_REAL  1.44000000000000E+0000
12491: PUSH
12492: LD_REAL  1.44000000000000E+0000
12495: MUL
12496: PUSH
12497: LD_REAL  1.44000000000000E+0000
12500: PUSH
12501: LD_REAL  1.44000000000000E+0000
12504: MUL
12505: PUSH
12506: LD_REAL  1.44000000000000E+0000
12509: MUL
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: PUSH
12520: NOP4
12524: ARRAY
12525: MUL
12526: PLUS
12527: PPUSH
12528: NOP4
// delayed = false ;
12532: NOP4
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// while FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_see , 2 ] ] ) > 0 and americans_attacking and ContactTime ( [ 2 , 1 ] ) < 0 0$10 do
12540: LD_INT 22
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 50
12552: PUSH
12553: EMPTY
12554: LIST
12555: PUSH
12556: LD_INT 101
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: PPUSH
12571: NOP4
12575: PUSH
12576: LD_INT 0
12578: GREATER
12579: PUSH
12580: NOP4
12584: AND
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PPUSH
12596: NOP4
12600: PUSH
12601: LD_INT 350
12603: LESS
12604: AND
12605: IFFALSE 12624
// begin wait ( 0 0$4 ) ;
12607: LD_INT 140
12609: PPUSH
12610: NOP4
// delayed = true ;
12614: NOP4
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// end ;
12622: GO 12540
// if delayed then
12624: NOP4
12628: IFFALSE 12637
// wait ( 0 0$5 ) ;
12630: LD_INT 175
12632: PPUSH
12633: NOP4
// if IsOk ( Kowalski ) then
12637: NOP4
12641: PPUSH
12642: NOP4
12646: IFFALSE 12758
// begin CenterOnUnits ( Heike ) ;
12648: NOP4
12652: PPUSH
12653: NOP4
// DialogueOn ;
12657: NOP4
// if not delayed then
12661: NOP4
12665: NOT
12666: IFFALSE 12682
// Say ( Heike , D5H1a ) else
12668: NOP4
12672: PPUSH
12673: LD_STRING D5H1a
12675: PPUSH
12676: NOP4
12680: GO 12694
// Say ( Heike , D5H1b ) ;
12682: NOP4
12686: PPUSH
12687: LD_STRING D5H1b
12689: PPUSH
12690: NOP4
// Say ( Kowalski , D5Ko1 ) ;
12694: NOP4
12698: PPUSH
12699: LD_STRING D5Ko1
12701: PPUSH
12702: NOP4
// Say ( Heike , D5H2 ) ;
12706: NOP4
12710: PPUSH
12711: LD_STRING D5H2
12713: PPUSH
12714: NOP4
// Say ( Kowalski , D5Ko2 ) ;
12718: NOP4
12722: PPUSH
12723: LD_STRING D5Ko2
12725: PPUSH
12726: NOP4
// Say ( Heike , D5H3 ) ;
12730: NOP4
12734: PPUSH
12735: LD_STRING D5H3
12737: PPUSH
12738: NOP4
// Say ( Kowalski , D5Ko3 ) ;
12742: NOP4
12746: PPUSH
12747: LD_STRING D5Ko3
12749: PPUSH
12750: NOP4
// DialogueOff ;
12754: NOP4
// end ; end ;
12758: PPOPN 2
12760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_arabian ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) > 0 do
12761: LD_INT 22
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 23
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: LD_INT 57
12786: PUSH
12787: EMPTY
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 2
12796: PUSH
12797: LD_INT 30
12799: PUSH
12800: LD_INT 6
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 30
12809: PUSH
12810: LD_INT 7
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: PPUSH
12828: NOP4
12832: PUSH
12833: LD_INT 0
12835: GREATER
12836: IFFALSE 12845
12838: GO 12840
12840: DISABLE
// FirstApeDialogue ;
12841: NOP4
12845: END
// function FirstApeDialogue ; var i , temp ; begin
12846: LD_INT 0
12848: PPUSH
12849: PPUSH
12850: PPUSH
// while not IsOk ( Aviradze ) do
12851: NOP4
12855: PPUSH
12856: NOP4
12860: NOT
12861: IFFALSE 12885
// begin wait ( 0 0$1 ) ;
12863: LD_INT 35
12865: PPUSH
12866: NOP4
// if IsDead ( Aviradze ) then
12870: NOP4
12874: PPUSH
12875: NOP4
12879: IFFALSE 12883
// exit ;
12881: GO 13150
// end ;
12883: GO 12851
// CenterOnUnits ( Aviradze ) ;
12885: NOP4
12889: PPUSH
12890: NOP4
// DialogueOn ;
12894: NOP4
// Say ( Heike , D7H1 ) ;
12898: NOP4
12902: PPUSH
12903: LD_STRING D7H1
12905: PPUSH
12906: NOP4
// Say ( Aviradze , D7Av1 ) ;
12910: NOP4
12914: PPUSH
12915: LD_STRING D7Av1
12917: PPUSH
12918: NOP4
// Say ( Heike , D7H2 ) ;
12922: NOP4
12926: PPUSH
12927: LD_STRING D7H2
12929: PPUSH
12930: NOP4
// Say ( Aviradze , D7Av2 ) ;
12934: NOP4
12938: PPUSH
12939: LD_STRING D7Av2
12941: PPUSH
12942: NOP4
// if IsOk ( Oswald ) then
12946: NOP4
12950: PPUSH
12951: NOP4
12955: IFFALSE 13005
// begin Say ( Oswald , D7Os1 ) ;
12957: NOP4
12961: PPUSH
12962: LD_STRING D7Os1
12964: PPUSH
12965: NOP4
// Say ( Aviradze , D7Av3 ) ;
12969: NOP4
12973: PPUSH
12974: LD_STRING D7Av3
12976: PPUSH
12977: NOP4
// Say ( Oswald , D7Os2 ) ;
12981: NOP4
12985: PPUSH
12986: LD_STRING D7Os2
12988: PPUSH
12989: NOP4
// Say ( Heike , D7H3 ) ;
12993: NOP4
12997: PPUSH
12998: LD_STRING D7H3
13000: PPUSH
13001: NOP4
// end ; Say ( Heike , D7H4 ) ;
13005: NOP4
13009: PPUSH
13010: LD_STRING D7H4
13012: PPUSH
13013: NOP4
// Say ( Aviradze , D7Av4 ) ;
13017: NOP4
13021: PPUSH
13022: LD_STRING D7Av4
13024: PPUSH
13025: NOP4
// Say ( Aviradze , D7Av5 ) ;
13029: NOP4
13033: PPUSH
13034: LD_STRING D7Av5
13036: PPUSH
13037: NOP4
// Say ( Aviradze , D7Av6 ) ;
13041: NOP4
13045: PPUSH
13046: LD_STRING D7Av6
13048: PPUSH
13049: NOP4
// DialogueOff ;
13053: NOP4
// Wait ( 0 0$0.2 ) ;
13057: LD_INT 7
13059: PPUSH
13060: NOP4
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
13064: NOP4
13068: NOT
13069: PUSH
13070: NOP4
13074: NOT
13075: AND
13076: PUSH
13077: NOP4
13081: NOT
13082: AND
13083: PUSH
13084: NOP4
13088: NOT
13089: AND
13090: IFFALSE 13099
// ChangeMissionObjectives ( M_out_build_base ) ;
13092: LD_STRING M_out_build_base
13094: PPUSH
13095: NOP4
// ChangeMissionObjectives ( M_start_plant_gather ) ;
13099: LD_STRING M_start_plant_gather
13101: PPUSH
13102: NOP4
// first_lab = false ;
13106: NOP4
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// SetAreaMapShow ( pink_bedflower_area , 3 ) ;
13114: NOP4
13118: PPUSH
13119: LD_INT 3
13121: PPUSH
13122: NOP4
// SetAreaMapShow ( greenhat_area , 5 ) ;
13126: NOP4
13130: PPUSH
13131: LD_INT 5
13133: PPUSH
13134: NOP4
// SetAreaMapShow ( royal_aphrodite_area , 7 ) ;
13138: NOP4
13142: PPUSH
13143: LD_INT 7
13145: PPUSH
13146: NOP4
// end ;
13150: LD_VAR 0 1
13154: RET
// export break_follow ; every 0 0$0.7 trigger not first_lab and IsLive ( Aviradze ) do var near_ape , first_time , lab_list , lab , temp_unit , temp_list ;
13155: NOP4
13159: NOT
13160: PUSH
13161: NOP4
13165: PPUSH
13166: NOP4
13170: AND
13171: IFFALSE 14160
13173: GO 13175
13175: DISABLE
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
13183: PPUSH
// begin if not HasTask ( Aviradze ) then
13184: NOP4
13188: PPUSH
13189: NOP4
13193: NOT
13194: IFFALSE 13311
// if IsInArea ( Aviradze , pink_bedflower_area ) and aviradze_plant_gathering [ 1 ] > 0 then
13196: NOP4
13200: PPUSH
13201: NOP4
13205: PPUSH
13206: NOP4
13210: PUSH
13211: NOP4
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PUSH
13220: LD_INT 0
13222: GREATER
13223: AND
13224: IFFALSE 13235
// AviradzePlantGatheringFunc ( 1 ) else
13226: LD_INT 1
13228: PPUSH
13229: NOP4
13233: GO 13311
// if IsInArea ( Aviradze , greenhat_area ) and aviradze_plant_gathering [ 2 ] > 0 then
13235: NOP4
13239: PPUSH
13240: NOP4
13244: PPUSH
13245: NOP4
13249: PUSH
13250: NOP4
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: PUSH
13259: LD_INT 0
13261: GREATER
13262: AND
13263: IFFALSE 13274
// AviradzePlantGatheringFunc ( 2 ) else
13265: LD_INT 2
13267: PPUSH
13268: NOP4
13272: GO 13311
// if IsInArea ( Aviradze , royal_aphrodite_area ) and aviradze_plant_gathering [ 3 ] > 0 then
13274: NOP4
13278: PPUSH
13279: NOP4
13283: PPUSH
13284: NOP4
13288: PUSH
13289: NOP4
13293: PUSH
13294: LD_INT 3
13296: ARRAY
13297: PUSH
13298: LD_INT 0
13300: GREATER
13301: AND
13302: IFFALSE 13311
// AviradzePlantGatheringFunc ( 3 ) ;
13304: LD_INT 3
13306: PPUSH
13307: NOP4
// if ( aviradze_plant_gathering diff 0 ) = 0 then
13311: NOP4
13315: PUSH
13316: LD_INT 0
13318: DIFF
13319: PUSH
13320: LD_INT 0
13322: EQUAL
13323: IFFALSE 14159
// begin wait ( 0 0$0.2 ) ;
13325: LD_INT 7
13327: PPUSH
13328: NOP4
// ChangeMissionObjectives ( M_find_ape ) ;
13332: LD_STRING M_find_ape
13334: PPUSH
13335: NOP4
// first_time = true ;
13339: NOP4
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// repeat repeat if UnitFilter ( apes , [ [ f_class , class_apeman ] , [ f_alive ] ] ) = 0 or IsDead ( Aviradze ) then
13347: NOP4
13351: PPUSH
13352: LD_INT 25
13354: PUSH
13355: LD_INT 12
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 51
13364: PUSH
13365: EMPTY
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PPUSH
13372: NOP4
13376: PUSH
13377: LD_INT 0
13379: EQUAL
13380: PUSH
13381: NOP4
13385: PPUSH
13386: NOP4
13390: OR
13391: IFFALSE 13395
// exit ;
13393: GO 14160
// wait ( 0 0$1 ) ;
13395: LD_INT 35
13397: PPUSH
13398: NOP4
// near_ape = NearestUnitToUnit ( UnitFilter ( apes , [ f_ok ] ) , Aviradze ) ;
13402: NOP4
13406: PUSH
13407: NOP4
13411: PPUSH
13412: LD_INT 50
13414: PUSH
13415: EMPTY
13416: LIST
13417: PPUSH
13418: NOP4
13422: PPUSH
13423: NOP4
13427: PPUSH
13428: NOP4
13432: ST_TO_ADDR
// until GetDistUnits ( Aviradze , near_ape ) <= 5 and See ( 2 , near_ape ) ;
13433: NOP4
13437: PPUSH
13438: NOP4
13442: PPUSH
13443: NOP4
13447: PUSH
13448: LD_INT 5
13450: LESSEQUAL
13451: PUSH
13452: LD_INT 2
13454: PPUSH
13455: NOP4
13459: PPUSH
13460: NOP4
13464: AND
13465: IFFALSE 13347
// ComTurnUnit ( Aviradze , near_ape ) ;
13467: NOP4
13471: PPUSH
13472: NOP4
13476: PPUSH
13477: NOP4
// Wait ( 0 0$0.2 ) ;
13481: LD_INT 7
13483: PPUSH
13484: NOP4
// repeat break_follow = false ;
13488: NOP4
13492: PUSH
13493: LD_INT 0
13495: ST_TO_ADDR
// RaiseSailEvent ( near_ape ) ;
13496: NOP4
13500: PPUSH
13501: NOP4
// if first_time then
13505: NOP4
13509: IFFALSE 13531
// begin Say ( Aviradze , D9Av2 ) ;
13511: NOP4
13515: PPUSH
13516: LD_STRING D9Av2
13518: PPUSH
13519: NOP4
// first_time = false ;
13523: NOP4
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// end ; lab = 0 ;
13531: NOP4
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13539: LD_INT 35
13541: PPUSH
13542: NOP4
// temp_unit = IsInUnit ( Aviradze ) ;
13546: NOP4
13550: PUSH
13551: NOP4
13555: PPUSH
13556: NOP4
13560: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_lab , b_lab_half ] then
13561: NOP4
13565: PPUSH
13566: NOP4
13570: PUSH
13571: LD_INT 6
13573: PUSH
13574: LD_INT 7
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: IN
13581: IFFALSE 13595
// begin lab = temp_unit ;
13583: NOP4
13587: PUSH
13588: NOP4
13592: ST_TO_ADDR
// break ;
13593: GO 13660
// end ; if GetDistUnits ( Aviradze , near_ape ) > 7 then
13595: NOP4
13599: PPUSH
13600: NOP4
13604: PPUSH
13605: NOP4
13609: PUSH
13610: LD_INT 7
13612: GREATER
13613: IFFALSE 13626
// begin lab = - 1 ;
13615: NOP4
13619: PUSH
13620: LD_INT 1
13622: NEG
13623: ST_TO_ADDR
// break ;
13624: GO 13660
// end ; until IsDead ( near_ape ) or IsDead ( Aviradze ) or temp_unit <> lab ;
13626: NOP4
13630: PPUSH
13631: NOP4
13635: PUSH
13636: NOP4
13640: PPUSH
13641: NOP4
13645: OR
13646: PUSH
13647: NOP4
13651: PUSH
13652: NOP4
13656: NONEQUAL
13657: OR
13658: IFFALSE 13539
// break_follow = true ;
13660: NOP4
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if IsDead ( near_ape ) or IsDead ( Aviradze ) or temp_unit <> lab then
13668: NOP4
13672: PPUSH
13673: NOP4
13677: PUSH
13678: NOP4
13682: PPUSH
13683: NOP4
13687: OR
13688: PUSH
13689: NOP4
13693: PUSH
13694: NOP4
13698: NONEQUAL
13699: OR
13700: IFFALSE 13704
// break ;
13702: GO 13925
// temp_list = [ ShiftX ( GetX ( lab ) , GetDir ( lab ) , 2 ) , ShiftY ( GetY ( lab ) , GetDir ( lab ) , 2 ) ] ;
13704: NOP4
13708: PUSH
13709: NOP4
13713: PPUSH
13714: NOP4
13718: PPUSH
13719: NOP4
13723: PPUSH
13724: NOP4
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: NOP4
13736: PUSH
13737: NOP4
13741: PPUSH
13742: NOP4
13746: PPUSH
13747: NOP4
13751: PPUSH
13752: NOP4
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: NOP4
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: ST_TO_ADDR
// repeat ComMoveXY ( near_ape , temp_list [ 1 ] , temp_list [ 2 ] ) ;
13769: NOP4
13773: PPUSH
13774: NOP4
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: PPUSH
13783: NOP4
13787: PUSH
13788: LD_INT 2
13790: ARRAY
13791: PPUSH
13792: NOP4
// AddComStand ( near_ape ) ;
13796: NOP4
13800: PPUSH
13801: NOP4
// wait ( 0 0$0.7 ) ;
13805: LD_INT 24
13807: PPUSH
13808: NOP4
// until ( GetDistUnits ( near_ape , lab ) <= 3 and UnitsInside ( lab ) < 6 ) or IsInUnit ( Aviradze ) <> lab or IsDead ( near_ape ) or IsDead ( Aviradze ) ;
13812: NOP4
13816: PPUSH
13817: NOP4
13821: PPUSH
13822: NOP4
13826: PUSH
13827: LD_INT 3
13829: LESSEQUAL
13830: PUSH
13831: NOP4
13835: PPUSH
13836: NOP4
13840: PUSH
13841: LD_INT 6
13843: LESS
13844: AND
13845: PUSH
13846: NOP4
13850: PPUSH
13851: NOP4
13855: PUSH
13856: NOP4
13860: NONEQUAL
13861: OR
13862: PUSH
13863: NOP4
13867: PPUSH
13868: NOP4
13872: OR
13873: PUSH
13874: NOP4
13878: PPUSH
13879: NOP4
13883: OR
13884: IFFALSE 13769
// until IsInUnit ( Aviradze ) = lab or IsDead ( near_ape ) or IsDead ( Aviradze ) ;
13886: NOP4
13890: PPUSH
13891: NOP4
13895: PUSH
13896: NOP4
13900: EQUAL
13901: PUSH
13902: NOP4
13906: PPUSH
13907: NOP4
13911: OR
13912: PUSH
13913: NOP4
13917: PPUSH
13918: NOP4
13922: OR
13923: IFFALSE 13488
// until not IsDead ( near_ape ) and not IsDead ( Aviradze ) and lab > 0 ;
13925: NOP4
13929: PPUSH
13930: NOP4
13934: NOT
13935: PUSH
13936: NOP4
13940: PPUSH
13941: NOP4
13945: NOT
13946: AND
13947: PUSH
13948: NOP4
13952: PUSH
13953: LD_INT 0
13955: GREATER
13956: AND
13957: IFFALSE 13347
// RemoveUnit ( near_ape ) ;
13959: NOP4
13963: PPUSH
13964: NOP4
// SetSide ( near_ape , 2 ) ;
13968: NOP4
13972: PPUSH
13973: LD_INT 2
13975: PPUSH
13976: NOP4
// PlaceHumanInUnit ( near_ape , lab ) ;
13980: NOP4
13984: PPUSH
13985: NOP4
13989: PPUSH
13990: NOP4
// CenterOnUnits ( lab ) ;
13994: NOP4
13998: PPUSH
13999: NOP4
// DialogueOn ;
14003: NOP4
// Say ( Aviradze , D9Av3 ) ;
14007: NOP4
14011: PPUSH
14012: LD_STRING D9Av3
14014: PPUSH
14015: NOP4
// if IsOk ( Sonya ) then
14019: NOP4
14023: PPUSH
14024: NOP4
14028: IFFALSE 14044
// Say ( Sonya , D9So1 ) else
14030: NOP4
14034: PPUSH
14035: LD_STRING D9So1
14037: PPUSH
14038: NOP4
14042: GO 14056
// Say ( Heike , D9H1 ) ;
14044: NOP4
14048: PPUSH
14049: LD_STRING D9H1
14051: PPUSH
14052: NOP4
// if GetSex ( near_ape ) = sex_male then
14056: NOP4
14060: PPUSH
14061: NOP4
14065: PUSH
14066: LD_INT 1
14068: EQUAL
14069: IFFALSE 14085
// Say ( Aviradze , D9Av4a ) else
14071: NOP4
14075: PPUSH
14076: LD_STRING D9Av4a
14078: PPUSH
14079: NOP4
14083: GO 14097
// Say ( Aviradze , D9Av4b ) ;
14085: NOP4
14089: PPUSH
14090: LD_STRING D9Av4b
14092: PPUSH
14093: NOP4
// DialogueOff ;
14097: NOP4
// wait ( 0 0$0.2 ) ;
14101: LD_INT 7
14103: PPUSH
14104: NOP4
// ChangeMissionObjectives ( M_train_apes ) ;
14108: LD_STRING M_train_apes
14110: PPUSH
14111: NOP4
// SetTech ( tech_apelang , 2 , state_enabled ) ;
14115: LD_INT 1
14117: PPUSH
14118: LD_INT 2
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: NOP4
// SetTech ( tech_apeagres , 2 , state_enabled ) ;
14128: LD_INT 11
14130: PPUSH
14131: LD_INT 2
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: NOP4
// tamed_apemen = tamed_apemen ^ near_ape ;
14141: NOP4
14145: PUSH
14146: NOP4
14150: PUSH
14151: NOP4
14155: ADD
14156: ST_TO_ADDR
// end else
14157: GO 14160
// enable ;
14159: ENABLE
// end ;
14160: PPOPN 6
14162: END
// every 0 0$1 trigger ConvoyAmericans_List and AmConvoySeePlayer = false do var i , vehs , cargo ;
14163: NOP4
14167: PUSH
14168: NOP4
14172: PUSH
14173: LD_INT 0
14175: EQUAL
14176: AND
14177: IFFALSE 14421
14179: GO 14181
14181: DISABLE
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
14186: PPUSH
// begin enable ;
14187: ENABLE
// vehs = UnitFilter ( ConvoyAmericans_List , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_weapon , us_machine_gun ] , [ f_weapon , us_gatling_gun ] , [ f_weapon , us_light_gun ] ] ] ) ;
14188: NOP4
14192: PUSH
14193: NOP4
14197: PPUSH
14198: LD_INT 22
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 50
14210: PUSH
14211: EMPTY
14212: LIST
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 34
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 34
14229: PUSH
14230: LD_INT 4
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 34
14239: PUSH
14240: LD_INT 3
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: PPUSH
14258: NOP4
14262: ST_TO_ADDR
// cargo = UnitFilter ( ConvoyAmericans_List , [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_cargo_bay ] ] ) ;
14263: NOP4
14267: PUSH
14268: NOP4
14272: PPUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 50
14285: PUSH
14286: EMPTY
14287: LIST
14288: PUSH
14289: LD_INT 34
14291: PUSH
14292: LD_INT 12
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: PPUSH
14304: NOP4
14308: ST_TO_ADDR
// AddComAgressiveMove ( vehs , 94 , 21 ) ;
14309: NOP4
14313: PPUSH
14314: LD_INT 94
14316: PPUSH
14317: LD_INT 21
14319: PPUSH
14320: NOP4
// AddComAgressiveMove ( vehs , 89 , 39 ) ;
14324: NOP4
14328: PPUSH
14329: LD_INT 89
14331: PPUSH
14332: LD_INT 39
14334: PPUSH
14335: NOP4
// AddComAgressiveMove ( vehs , 85 , 69 ) ;
14339: NOP4
14343: PPUSH
14344: LD_INT 85
14346: PPUSH
14347: LD_INT 69
14349: PPUSH
14350: NOP4
// AddComAgressiveMove ( vehs , 49 , 49 ) ;
14354: NOP4
14358: PPUSH
14359: LD_INT 49
14361: PPUSH
14362: LD_INT 49
14364: PPUSH
14365: NOP4
// AddComAgressiveMove ( vehs , 38 , 30 ) ;
14369: NOP4
14373: PPUSH
14374: LD_INT 38
14376: PPUSH
14377: LD_INT 30
14379: PPUSH
14380: NOP4
// ComMoveXY ( cargo , GetX ( vehs [ 1 ] ) , GetY ( vehs [ 1 ] ) ) ;
14384: NOP4
14388: PPUSH
14389: NOP4
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PPUSH
14398: NOP4
14402: PPUSH
14403: NOP4
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: NOP4
14416: PPUSH
14417: NOP4
// end ;
14421: PPOPN 3
14423: END
// every 0 0$1 trigger AmConvoySeePlayer = false do var i , j , tmp ;
14424: NOP4
14428: PUSH
14429: LD_INT 0
14431: EQUAL
14432: IFFALSE 14651
14434: GO 14436
14436: DISABLE
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin enable ;
14442: ENABLE
// for i in ConvoyAmericans_List do
14443: NOP4
14447: PUSH
14448: NOP4
14452: PUSH
14453: FOR_IN
14454: IFFALSE 14649
// for j in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
14456: NOP4
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 21
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PPUSH
14485: NOP4
14489: PUSH
14490: FOR_IN
14491: IFFALSE 14645
// if See ( 2 , i ) and GetDistUnits ( i , j ) <= 11 then
14493: LD_INT 2
14495: PPUSH
14496: NOP4
14500: PPUSH
14501: NOP4
14505: PUSH
14506: NOP4
14510: PPUSH
14511: NOP4
14515: PPUSH
14516: NOP4
14520: PUSH
14521: LD_INT 11
14523: LESSEQUAL
14524: AND
14525: IFFALSE 14643
// begin AmConvoySeePlayer = true ;
14527: NOP4
14531: PUSH
14532: LD_INT 1
14534: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14535: NOP4
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 21
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 50
14562: PUSH
14563: EMPTY
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PPUSH
14571: NOP4
14575: ST_TO_ADDR
// DialogueOn ;
14576: NOP4
// if GetSex ( tmp [ 1 ] ) = 1 then
14580: NOP4
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PPUSH
14589: NOP4
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: IFFALSE 14617
// Say ( tmp [ 1 ] , D5-AmSol-1 ) else
14599: NOP4
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_STRING D5-AmSol-1
14610: PPUSH
14611: NOP4
14615: GO 14633
// Say ( tmp [ 1 ] , D5-FAmSol-1 ) ;
14617: NOP4
14621: PUSH
14622: LD_INT 1
14624: ARRAY
14625: PPUSH
14626: LD_STRING D5-FAmSol-1
14628: PPUSH
14629: NOP4
// DialogueOff ;
14633: NOP4
// exit ;
14637: POP
14638: POP
14639: POP
14640: POP
14641: GO 14651
// end ;
14643: GO 14490
14645: POP
14646: POP
14647: GO 14453
14649: POP
14650: POP
// end ;
14651: PPOPN 3
14653: END
// every 0 0$10 trigger AmConvoySeePlayer = false do var i , tmp ;
14654: NOP4
14658: PUSH
14659: LD_INT 0
14661: EQUAL
14662: IFFALSE 14827
14664: GO 14666
14666: DISABLE
14667: LD_INT 0
14669: PPUSH
14670: PPUSH
// begin enable ;
14671: ENABLE
// for i in ConvoyAmericans_List do
14672: NOP4
14676: PUSH
14677: NOP4
14681: PUSH
14682: FOR_IN
14683: IFFALSE 14825
// if IsInArea ( i , AmericanBaseArea ) then
14685: NOP4
14689: PPUSH
14690: NOP4
14694: PPUSH
14695: NOP4
14699: IFFALSE 14823
// begin AmConvoySeePlayer = true ;
14701: NOP4
14705: PUSH
14706: LD_INT 1
14708: ST_TO_ADDR
// AmConvoyEscapeFromMap = true ;
14709: NOP4
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14717: NOP4
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 50
14744: PUSH
14745: EMPTY
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: NOP4
14757: ST_TO_ADDR
// DialogueOn ;
14758: NOP4
// if GetSex ( tmp [ 1 ] ) = 1 then
14762: NOP4
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PPUSH
14771: NOP4
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: IFFALSE 14799
// Say ( tmp [ 1 ] , D5-AmSol-1a ) else
14781: NOP4
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: LD_STRING D5-AmSol-1a
14792: PPUSH
14793: NOP4
14797: GO 14815
// Say ( tmp [ 1 ] , D5-FAmSol-1a ) ;
14799: NOP4
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_STRING D5-FAmSol-1a
14810: PPUSH
14811: NOP4
// DialogueOff ;
14815: NOP4
// exit ;
14819: POP
14820: POP
14821: GO 14827
// end ;
14823: GO 14682
14825: POP
14826: POP
// end ;
14827: PPOPN 2
14829: END
// every 0 0$1 trigger AmConvoySeePlayer and AmConvoyEscapeFromMap = false do var i , tmp ;
14830: NOP4
14834: PUSH
14835: NOP4
14839: PUSH
14840: LD_INT 0
14842: EQUAL
14843: AND
14844: IFFALSE 15235
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
// begin enable ;
14853: ENABLE
// if Difficulty = 1 then
14854: NOP4
14858: PUSH
14859: LD_INT 1
14861: EQUAL
14862: IFFALSE 15021
// for i in ConvoyAmericans_List do
14864: NOP4
14868: PUSH
14869: NOP4
14873: PUSH
14874: FOR_IN
14875: IFFALSE 15019
// if GetWeapon ( i ) = us_cargo_bay and GetLives ( i ) <= 700 then
14877: NOP4
14881: PPUSH
14882: NOP4
14886: PUSH
14887: LD_INT 12
14889: EQUAL
14890: PUSH
14891: NOP4
14895: PPUSH
14896: NOP4
14900: PUSH
14901: LD_INT 700
14903: LESSEQUAL
14904: AND
14905: IFFALSE 15017
// begin tmp = i ;
14907: NOP4
14911: PUSH
14912: NOP4
14916: ST_TO_ADDR
// AmConvoyEscapeFromMap = true ;
14917: NOP4
14921: PUSH
14922: LD_INT 1
14924: ST_TO_ADDR
// DialogueOn ;
14925: NOP4
// if GetSex ( UnitsInside ( tmp ) [ 1 ] ) = 1 then
14929: NOP4
14933: PPUSH
14934: NOP4
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: PPUSH
14943: NOP4
14947: PUSH
14948: LD_INT 1
14950: EQUAL
14951: IFFALSE 14976
// Say ( UnitsInside ( tmp ) [ 1 ] , D5-AmSol-2 ) else
14953: NOP4
14957: PPUSH
14958: NOP4
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING D5-AmSol-2
14969: PPUSH
14970: NOP4
14974: GO 14997
// Say ( UnitsInside ( tmp ) [ 1 ] , D5-FAmSol-2 ) ;
14976: NOP4
14980: PPUSH
14981: NOP4
14985: PUSH
14986: LD_INT 1
14988: ARRAY
14989: PPUSH
14990: LD_STRING D5-FAmSol-2
14992: PPUSH
14993: NOP4
// Say ( Heike , D5-H-4 ) ;
14997: NOP4
15001: PPUSH
15002: LD_STRING D5-H-4
15004: PPUSH
15005: NOP4
// DialogueOff ;
15009: NOP4
// exit ;
15013: POP
15014: POP
15015: GO 15235
// end ;
15017: GO 14874
15019: POP
15020: POP
// if UnitFilter ( ConvoyAmericans_List , [ [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) >= 2 then
15021: NOP4
15025: PPUSH
15026: LD_INT 21
15028: PUSH
15029: LD_INT 2
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 3
15038: PUSH
15039: LD_INT 24
15041: PUSH
15042: LD_INT 650
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: NOP4
15061: PUSH
15062: LD_INT 2
15064: GREATEREQUAL
15065: IFFALSE 15235
// begin AmConvoyEscapeFromMap = true ;
15067: NOP4
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// tmp = UnitFilter ( ConvoyAmericans_List , [ [ f_type , unit_human ] , [ f_lives , 251 ] ] ) ;
15075: NOP4
15079: PUSH
15080: NOP4
15084: PPUSH
15085: LD_INT 21
15087: PUSH
15088: LD_INT 1
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 24
15097: PUSH
15098: LD_INT 251
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: NOP4
15113: ST_TO_ADDR
// if tmp > 0 then
15114: NOP4
15118: PUSH
15119: LD_INT 0
15121: GREATER
15122: IFFALSE 15148
// tmp = tmp [ Rand ( 1 , tmp ) ] ;
15124: NOP4
15128: PUSH
15129: NOP4
15133: PUSH
15134: LD_INT 1
15136: PPUSH
15137: NOP4
15141: PPUSH
15142: NOP4
15146: ARRAY
15147: ST_TO_ADDR
// DialogueOn ;
15148: NOP4
// if GetSex ( tmp ) = 1 then
15152: NOP4
15156: PPUSH
15157: NOP4
15161: PUSH
15162: LD_INT 1
15164: EQUAL
15165: IFFALSE 15181
// Say ( tmp , D5-AmSol-3 ) else
15167: NOP4
15171: PPUSH
15172: LD_STRING D5-AmSol-3
15174: PPUSH
15175: NOP4
15179: GO 15193
// Say ( tmp , D5-FAmSol-3 ) ;
15181: NOP4
15185: PPUSH
15186: LD_STRING D5-FAmSol-3
15188: PPUSH
15189: NOP4
// if Difficulty = 1 then
15193: NOP4
15197: PUSH
15198: LD_INT 1
15200: EQUAL
15201: IFFALSE 15217
// Say ( Heike , D5-H-4 ) else
15203: NOP4
15207: PPUSH
15208: LD_STRING D5-H-4
15210: PPUSH
15211: NOP4
15215: GO 15229
// Say ( Heike , D5-H-4a ) ;
15217: NOP4
15221: PPUSH
15222: LD_STRING D5-H-4a
15224: PPUSH
15225: NOP4
// DialogueOff ;
15229: NOP4
// exit ;
15233: GO 15235
// end ; end ;
15235: PPOPN 2
15237: END
// every 0 0$1 trigger AmConvoyEscapeFromMap do var i ;
15238: NOP4
15242: IFFALSE 15330
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
// begin enable ;
15250: ENABLE
// for i in ConvoyAmericans_List do
15251: NOP4
15255: PUSH
15256: NOP4
15260: PUSH
15261: FOR_IN
15262: IFFALSE 15328
// begin ComMoveToArea ( i , AmConvoyEscapeArea ) ;
15264: NOP4
15268: PPUSH
15269: NOP4
15273: PPUSH
15274: NOP4
// if IsInArea ( i , AmConvoyEscapeArea ) and GetSide ( i ) = 1 then
15278: NOP4
15282: PPUSH
15283: NOP4
15287: PPUSH
15288: NOP4
15292: PUSH
15293: NOP4
15297: PPUSH
15298: NOP4
15302: PUSH
15303: LD_INT 1
15305: EQUAL
15306: AND
15307: IFFALSE 15326
// begin RemoveUnit ( i ) ;
15309: NOP4
15313: PPUSH
15314: NOP4
// AmConvoyEscapedFromPlayer = true ;
15318: NOP4
15322: PUSH
15323: LD_INT 1
15325: ST_TO_ADDR
// end ; end ;
15326: GO 15261
15328: POP
15329: POP
// end ;
15330: PPOPN 1
15332: END
// every 0 0$1 trigger americans_have_evacuated do
15333: NOP4
15337: IFFALSE 15459
15339: GO 15341
15341: DISABLE
// begin if americans_got_away then
15342: NOP4
15346: IFFALSE 15358
// begin AmAlarmAttack = true ;
15348: NOP4
15352: PUSH
15353: LD_INT 1
15355: ST_TO_ADDR
// exit ;
15356: GO 15459
// end ; while not ConvoyPlaced do
15358: NOP4
15362: NOT
15363: IFFALSE 15374
// wait ( 0 0$1 ) ;
15365: LD_INT 35
15367: PPUSH
15368: NOP4
15372: GO 15358
// while FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) > 0 do
15374: LD_INT 22
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 50
15386: PUSH
15387: EMPTY
15388: LIST
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: LD_INT 58
15395: PUSH
15396: EMPTY
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PPUSH
15408: NOP4
15412: PUSH
15413: LD_INT 0
15415: GREATER
15416: IFFALSE 15427
// wait ( 0 0$1 ) ;
15418: LD_INT 35
15420: PPUSH
15421: NOP4
15425: GO 15374
// ChangeMissionObjectives ( M_ConvoyDel ) ;
15427: LD_STRING M_ConvoyDel
15429: PPUSH
15430: NOP4
// if AmConvoyEscapedFromPlayer = false then
15434: NOP4
15438: PUSH
15439: LD_INT 0
15441: EQUAL
15442: IFFALSE 15451
// wait ( 5 5$0 ) ;
15444: LD_INT 10500
15446: PPUSH
15447: NOP4
// AmAlarmAttack = true ;
15451: NOP4
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// end ;
15459: END
// every 0 0$1 trigger FilterUnitsInArea ( EnemySpotArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_see , 2 ] ] ) do
15460: NOP4
15464: PPUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 21
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 101
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: PPUSH
15500: NOP4
15504: IFFALSE 15521
15506: GO 15508
15508: DISABLE
// Say ( Heike , D11-H-1 ) ;
15509: NOP4
15513: PPUSH
15514: LD_STRING D11-H-1
15516: PPUSH
15517: NOP4
15521: END
// every 0 0$1 do var i , j ;
15522: GO 15524
15524: DISABLE
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
// begin enable ;
15529: ENABLE
// if waveDialogBlock = 3 then
15530: NOP4
15534: PUSH
15535: LD_INT 3
15537: EQUAL
15538: IFFALSE 15542
// exit ;
15540: GO 15893
// if waveDialog = 1 and waveDialogBlock = 0 then
15542: NOP4
15546: PUSH
15547: LD_INT 1
15549: EQUAL
15550: PUSH
15551: NOP4
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15646
// for i in first_wave do
15562: NOP4
15566: PUSH
15567: NOP4
15571: PUSH
15572: FOR_IN
15573: IFFALSE 15644
// for j in i do
15575: NOP4
15579: PUSH
15580: NOP4
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15640
// if See ( 2 , j ) then
15588: LD_INT 2
15590: PPUSH
15591: NOP4
15595: PPUSH
15596: NOP4
15600: IFFALSE 15638
// begin waveDialogBlock = waveDialogBlock + 1 ;
15602: NOP4
15606: PUSH
15607: NOP4
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: ST_TO_ADDR
// DialogueOn ;
15616: NOP4
// Say ( Heike , D11H1 ) ;
15620: NOP4
15624: PPUSH
15625: LD_STRING D11H1
15627: PPUSH
15628: NOP4
// DialogueOff ;
15632: NOP4
// break ;
15636: GO 15640
// end ;
15638: GO 15585
15640: POP
15641: POP
15642: GO 15572
15644: POP
15645: POP
// if waveDialog = 2 and waveDialogBlock = 1 then
15646: NOP4
15650: PUSH
15651: LD_INT 2
15653: EQUAL
15654: PUSH
15655: NOP4
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: AND
15664: IFFALSE 15750
// for i in second_wave do
15666: NOP4
15670: PUSH
15671: NOP4
15675: PUSH
15676: FOR_IN
15677: IFFALSE 15748
// for j in i do
15679: NOP4
15683: PUSH
15684: NOP4
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15744
// if See ( 2 , j ) then
15692: LD_INT 2
15694: PPUSH
15695: NOP4
15699: PPUSH
15700: NOP4
15704: IFFALSE 15742
// begin waveDialogBlock = waveDialogBlock + 1 ;
15706: NOP4
15710: PUSH
15711: NOP4
15715: PUSH
15716: LD_INT 1
15718: PLUS
15719: ST_TO_ADDR
// DialogueOn ;
15720: NOP4
// Say ( Heike , D11H2 ) ;
15724: NOP4
15728: PPUSH
15729: LD_STRING D11H2
15731: PPUSH
15732: NOP4
// DialogueOff ;
15736: NOP4
// break ;
15740: GO 15744
// end ;
15742: GO 15689
15744: POP
15745: POP
15746: GO 15676
15748: POP
15749: POP
// if waveDialog = 3 and waveDialogBlock = 2 then
15750: NOP4
15754: PUSH
15755: LD_INT 3
15757: EQUAL
15758: PUSH
15759: NOP4
15763: PUSH
15764: LD_INT 2
15766: EQUAL
15767: AND
15768: IFFALSE 15893
// for i in third_wave do
15770: NOP4
15774: PUSH
15775: NOP4
15779: PUSH
15780: FOR_IN
15781: IFFALSE 15891
// for j in i do
15783: NOP4
15787: PUSH
15788: NOP4
15792: PUSH
15793: FOR_IN
15794: IFFALSE 15887
// if See ( 2 , j ) then
15796: LD_INT 2
15798: PPUSH
15799: NOP4
15803: PPUSH
15804: NOP4
15808: IFFALSE 15885
// begin waveDialogBlock = waveDialogBlock + 1 ;
15810: NOP4
15814: PUSH
15815: NOP4
15819: PUSH
15820: LD_INT 1
15822: PLUS
15823: ST_TO_ADDR
// while FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 0 do
15824: LD_INT 22
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 50
15836: PUSH
15837: EMPTY
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: NOP4
15848: PUSH
15849: LD_INT 0
15851: GREATER
15852: IFFALSE 15863
// wait ( 0 0$1 ) ;
15854: LD_INT 35
15856: PPUSH
15857: NOP4
15861: GO 15824
// DialogueOn ;
15863: NOP4
// Say ( Heike , D11H3 ) ;
15867: NOP4
15871: PPUSH
15872: LD_STRING D11H3
15874: PPUSH
15875: NOP4
// DialogueOff ;
15879: NOP4
// break ;
15883: GO 15887
// end ;
15885: GO 15793
15887: POP
15888: POP
15889: GO 15780
15891: POP
15892: POP
// end ;
15893: PPOPN 2
15895: END
// every 0 0$1 do
15896: GO 15898
15898: DISABLE
// begin if GetResourceType ( GetBase ( FarmerDepot ) , mat_cans ) >= secondary_crate_goal and GetResourceType ( GetBase ( FarmerDepot ) , mat_oil ) >= secondary_crate_goal then
15899: NOP4
15903: PPUSH
15904: NOP4
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: NOP4
15916: PUSH
15917: NOP4
15921: GREATEREQUAL
15922: PUSH
15923: NOP4
15927: PPUSH
15928: NOP4
15932: PPUSH
15933: LD_INT 2
15935: PPUSH
15936: NOP4
15940: PUSH
15941: NOP4
15945: GREATEREQUAL
15946: AND
15947: IFFALSE 15958
// begin ChangeMissionObjectives ( M_crate_out ) ;
15949: LD_STRING M_crate_out
15951: PPUSH
15952: NOP4
// exit ;
15956: GO 15959
// end ; enable ;
15958: ENABLE
// end ;
15959: END
// every 0 0$1 do var i ;
15960: GO 15962
15962: DISABLE
15963: LD_INT 0
15965: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
15966: NOP4
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 21
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: NOP4
15999: PUSH
16000: FOR_IN
16001: IFFALSE 16032
// if GetFuel ( i ) < 10 then
16003: NOP4
16007: PPUSH
16008: NOP4
16012: PUSH
16013: LD_INT 10
16015: LESS
16016: IFFALSE 16030
// SetFuel ( i , 10 ) ;
16018: NOP4
16022: PPUSH
16023: LD_INT 10
16025: PPUSH
16026: NOP4
16030: GO 16000
16032: POP
16033: POP
// enable ;
16034: ENABLE
// end ; end_of_file
16035: PPOPN 1
16037: END
// export num_apes , num_tigers , aggressivity , am_skill_lvl ; export depot_initial_crates ; export function PrepareDifficulty ; var fourth_attack_time , i , mean ; begin
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
// num_apes = [ 8 , 6 , 5 ] [ difficulty ] ;
16044: NOP4
16048: PUSH
16049: LD_INT 8
16051: PUSH
16052: LD_INT 6
16054: PUSH
16055: LD_INT 5
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: NOP4
16067: ARRAY
16068: ST_TO_ADDR
// num_tigers = [ 2 , 4 , 6 ] [ difficulty ] ;
16069: NOP4
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 4
16079: PUSH
16080: LD_INT 6
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: NOP4
16092: ARRAY
16093: ST_TO_ADDR
// aggressivity = [ 10 , 30 , 50 ] [ difficulty ] ;
16094: NOP4
16098: PUSH
16099: LD_INT 10
16101: PUSH
16102: LD_INT 30
16104: PUSH
16105: LD_INT 50
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: NOP4
16117: ARRAY
16118: ST_TO_ADDR
// am_skill_lvl = [ 2 , 3 , 4 ] [ difficulty ] ;
16119: NOP4
16123: PUSH
16124: LD_INT 2
16126: PUSH
16127: LD_INT 3
16129: PUSH
16130: LD_INT 4
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: NOP4
16142: ARRAY
16143: ST_TO_ADDR
// fourth_attack_time = secondary_crate_goal / ( [ 1.3 , 1.5 , 2.5 ] [ difficulty ] * 10 ) * 1 1$40 ;
16144: NOP4
16148: PUSH
16149: NOP4
16153: PUSH
16154: LD_REAL  1.30000000000000E+0000
16157: PUSH
16158: LD_REAL  1.50000000000000E+0000
16161: PUSH
16162: LD_REAL  2.50000000000000E+0000
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: PUSH
16171: NOP4
16175: ARRAY
16176: PUSH
16177: LD_INT 10
16179: MUL
16180: DIVREAL
16181: PUSH
16182: LD_INT 3500
16184: MUL
16185: ST_TO_ADDR
// mean = fourth_attack_time / 4 ;
16186: NOP4
16190: PUSH
16191: NOP4
16195: PUSH
16196: LD_INT 4
16198: DIVREAL
16199: ST_TO_ADDR
// attack_times = [ ] ;
16200: NOP4
16204: PUSH
16205: EMPTY
16206: ST_TO_ADDR
// for i = 1 to 3 do
16207: NOP4
16211: PUSH
16212: DOUBLE
16213: LD_INT 1
16215: DEC
16216: ST_TO_ADDR
16217: LD_INT 3
16219: PUSH
16220: FOR_TO
16221: IFFALSE 16283
// attack_times = attack_times ^ Rand ( mean * i - mean div 7 , mean * i + mean div 7 ) ;
16223: NOP4
16227: PUSH
16228: NOP4
16232: PUSH
16233: NOP4
16237: PUSH
16238: NOP4
16242: MUL
16243: PUSH
16244: NOP4
16248: PUSH
16249: LD_INT 7
16251: DIV
16252: MINUS
16253: PPUSH
16254: NOP4
16258: PUSH
16259: NOP4
16263: MUL
16264: PUSH
16265: NOP4
16269: PUSH
16270: LD_INT 7
16272: DIV
16273: PLUS
16274: PPUSH
16275: NOP4
16279: ADD
16280: ST_TO_ADDR
16281: GO 16220
16283: POP
16284: POP
// attack_times = attack_times ^ fourth_attack_time ;
16285: NOP4
16289: PUSH
16290: NOP4
16294: PUSH
16295: NOP4
16299: ADD
16300: ST_TO_ADDR
// depot_initial_crates = [ 590 , 520 , 450 ] [ difficulty ] ;
16301: NOP4
16305: PUSH
16306: LD_INT 590
16308: PUSH
16309: LD_INT 520
16311: PUSH
16312: LD_INT 450
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: PUSH
16320: NOP4
16324: ARRAY
16325: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , depot_initial_crates ) ;
16326: LD_INT 1
16328: PPUSH
16329: NOP4
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: NOP4
16341: PPUSH
16342: NOP4
// end ;
16346: LD_VAR 0 1
16350: RET
// export function AI_GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
16351: LD_INT 0
16353: PPUSH
16354: PPUSH
16355: PPUSH
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
16365: NOP4
16369: PPUSH
16370: NOP4
16374: NOT
16375: PUSH
16376: NOP4
16380: PUSH
16381: LD_INT 1
16383: EQUAL
16384: OR
16385: PUSH
16386: NOP4
16390: PPUSH
16391: NOP4
16395: PPUSH
16396: NOP4
16400: NOT
16401: OR
16402: PUSH
16403: NOP4
16407: PPUSH
16408: NOP4
16412: PPUSH
16413: NOP4
16417: PPUSH
16418: NOP4
16422: PUSH
16423: NOP4
16427: GREATEREQUAL
16428: OR
16429: PUSH
16430: NOP4
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: IN
16445: NOT
16446: OR
16447: IFFALSE 16451
// exit ;
16449: GO 18008
// attempts = 0 ;
16451: NOP4
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// repeat list_nearest = [ ] ;
16459: NOP4
16463: PUSH
16464: EMPTY
16465: ST_TO_ADDR
// list_coords = [ ] ;
16466: NOP4
16470: PUSH
16471: EMPTY
16472: ST_TO_ADDR
// temp_dir = AI_GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
16473: NOP4
16477: PUSH
16478: NOP4
16482: PPUSH
16483: NOP4
16487: PPUSH
16488: NOP4
16492: PPUSH
16493: NOP4
16497: PPUSH
16498: NOP4
16502: PPUSH
16503: NOP4
16507: PPUSH
16508: NOP4
16512: ST_TO_ADDR
// if attempts = 0 then
16513: NOP4
16517: PUSH
16518: LD_INT 0
16520: EQUAL
16521: IFFALSE 16629
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
16523: NOP4
16527: PUSH
16528: NOP4
16532: PUSH
16533: NOP4
16537: PUSH
16538: LD_INT 1
16540: PLUS
16541: PUSH
16542: NOP4
16546: PUSH
16547: LD_INT 1
16549: MINUS
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
16556: NOP4
16560: PUSH
16561: LD_INT 2
16563: ARRAY
16564: PUSH
16565: LD_INT 6
16567: EQUAL
16568: IFFALSE 16591
// dir_list = Replace ( dir_list , 2 , 0 ) ;
16570: NOP4
16574: PUSH
16575: NOP4
16579: PPUSH
16580: LD_INT 2
16582: PPUSH
16583: LD_INT 0
16585: PPUSH
16586: NOP4
16590: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
16591: NOP4
16595: PUSH
16596: LD_INT 3
16598: ARRAY
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: EQUAL
16604: IFFALSE 16627
// dir_list = Replace ( dir_list , 3 , 5 ) ;
16606: NOP4
16610: PUSH
16611: NOP4
16615: PPUSH
16616: LD_INT 3
16618: PPUSH
16619: LD_INT 5
16621: PPUSH
16622: NOP4
16626: ST_TO_ADDR
// end else
16627: GO 16666
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
16629: NOP4
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 3
16645: PUSH
16646: LD_INT 4
16648: PUSH
16649: LD_INT 5
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: NOP4
16664: DIFF
16665: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
16666: NOP4
16670: PUSH
16671: DOUBLE
16672: LD_INT 1
16674: DEC
16675: ST_TO_ADDR
16676: NOP4
16680: PUSH
16681: LD_INT 0
16683: PLUS
16684: PUSH
16685: FOR_TO
16686: IFFALSE 17008
// case dir_list [ c ] of 0 :
16688: NOP4
16692: PUSH
16693: NOP4
16697: ARRAY
16698: PUSH
16699: LD_INT 0
16701: DOUBLE
16702: EQUAL
16703: IFTRUE 16707
16705: GO 16748
16707: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
16708: NOP4
16712: PUSH
16713: NOP4
16717: PPUSH
16718: LD_INT 1
16720: PPUSH
16721: NOP4
16725: PUSH
16726: NOP4
16730: PUSH
16731: NOP4
16735: MINUS
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: NOP4
16745: ST_TO_ADDR
16746: GO 17006
16748: LD_INT 1
16750: DOUBLE
16751: EQUAL
16752: IFTRUE 16756
16754: GO 16797
16756: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
16757: NOP4
16761: PUSH
16762: NOP4
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: NOP4
16774: PUSH
16775: NOP4
16779: PLUS
16780: PUSH
16781: NOP4
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PPUSH
16790: NOP4
16794: ST_TO_ADDR
16795: GO 17006
16797: LD_INT 2
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16852
16805: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
16806: NOP4
16810: PUSH
16811: NOP4
16815: PPUSH
16816: LD_INT 1
16818: PPUSH
16819: NOP4
16823: PUSH
16824: NOP4
16828: PLUS
16829: PUSH
16830: NOP4
16834: PUSH
16835: NOP4
16839: PLUS
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: NOP4
16849: ST_TO_ADDR
16850: GO 17006
16852: LD_INT 3
16854: DOUBLE
16855: EQUAL
16856: IFTRUE 16860
16858: GO 16901
16860: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
16861: NOP4
16865: PUSH
16866: NOP4
16870: PPUSH
16871: LD_INT 1
16873: PPUSH
16874: NOP4
16878: PUSH
16879: NOP4
16883: PUSH
16884: NOP4
16888: PLUS
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PPUSH
16894: NOP4
16898: ST_TO_ADDR
16899: GO 17006
16901: LD_INT 4
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 16950
16909: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
16910: NOP4
16914: PUSH
16915: NOP4
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: NOP4
16927: PUSH
16928: NOP4
16932: MINUS
16933: PUSH
16934: NOP4
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: NOP4
16947: ST_TO_ADDR
16948: GO 17006
16950: LD_INT 5
16952: DOUBLE
16953: EQUAL
16954: IFTRUE 16958
16956: GO 17005
16958: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
16959: NOP4
16963: PUSH
16964: NOP4
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: NOP4
16976: PUSH
16977: NOP4
16981: MINUS
16982: PUSH
16983: NOP4
16987: PUSH
16988: NOP4
16992: MINUS
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PPUSH
16998: NOP4
17002: ST_TO_ADDR
17003: GO 17006
17005: POP
17006: GO 16685
17008: POP
17009: POP
// if dist < 30 then
17010: NOP4
17014: PUSH
17015: LD_INT 30
17017: LESS
17018: IFFALSE 17030
// c = 1 else
17020: NOP4
17024: PUSH
17025: LD_INT 1
17027: ST_TO_ADDR
17028: GO 17038
// c = 2 ;
17030: NOP4
17034: PUSH
17035: LD_INT 2
17037: ST_TO_ADDR
// b = 1 ;
17038: NOP4
17042: PUSH
17043: LD_INT 1
17045: ST_TO_ADDR
// while b <= ( dist - 1 ) do
17046: NOP4
17050: PUSH
17051: NOP4
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: LESSEQUAL
17060: IFFALSE 17488
// begin if 0 in dir_list and 1 in dir_list then
17062: LD_INT 0
17064: PUSH
17065: NOP4
17069: IN
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: NOP4
17078: IN
17079: AND
17080: IFFALSE 17132
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
17082: NOP4
17086: PUSH
17087: NOP4
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: NOP4
17099: PUSH
17100: NOP4
17104: PLUS
17105: PUSH
17106: NOP4
17110: PUSH
17111: NOP4
17115: MINUS
17116: PUSH
17117: NOP4
17121: PLUS
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: NOP4
17131: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
17132: LD_INT 1
17134: PUSH
17135: NOP4
17139: IN
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: NOP4
17148: IN
17149: AND
17150: IFFALSE 17196
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
17152: NOP4
17156: PUSH
17157: NOP4
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: NOP4
17169: PUSH
17170: NOP4
17174: PLUS
17175: PUSH
17176: NOP4
17180: PUSH
17181: NOP4
17185: PLUS
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PPUSH
17191: NOP4
17195: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
17196: LD_INT 2
17198: PUSH
17199: NOP4
17203: IN
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: NOP4
17212: IN
17213: AND
17214: IFFALSE 17266
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
17216: NOP4
17220: PUSH
17221: NOP4
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: NOP4
17233: PUSH
17234: NOP4
17238: PLUS
17239: PUSH
17240: NOP4
17244: MINUS
17245: PUSH
17246: NOP4
17250: PUSH
17251: NOP4
17255: PLUS
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PPUSH
17261: NOP4
17265: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
17266: LD_INT 3
17268: PUSH
17269: NOP4
17273: IN
17274: PUSH
17275: LD_INT 4
17277: PUSH
17278: NOP4
17282: IN
17283: AND
17284: IFFALSE 17336
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
17286: NOP4
17290: PUSH
17291: NOP4
17295: PPUSH
17296: LD_INT 1
17298: PPUSH
17299: NOP4
17303: PUSH
17304: NOP4
17308: MINUS
17309: PUSH
17310: NOP4
17314: PUSH
17315: NOP4
17319: PLUS
17320: PUSH
17321: NOP4
17325: MINUS
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: NOP4
17335: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
17336: LD_INT 4
17338: PUSH
17339: NOP4
17343: IN
17344: PUSH
17345: LD_INT 5
17347: PUSH
17348: NOP4
17352: IN
17353: AND
17354: IFFALSE 17400
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
17356: NOP4
17360: PUSH
17361: NOP4
17365: PPUSH
17366: LD_INT 1
17368: PPUSH
17369: NOP4
17373: PUSH
17374: NOP4
17378: MINUS
17379: PUSH
17380: NOP4
17384: PUSH
17385: NOP4
17389: MINUS
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PPUSH
17395: NOP4
17399: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
17400: LD_INT 5
17402: PUSH
17403: NOP4
17407: IN
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: NOP4
17416: IN
17417: AND
17418: IFFALSE 17470
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
17420: NOP4
17424: PUSH
17425: NOP4
17429: PPUSH
17430: LD_INT 1
17432: PPUSH
17433: NOP4
17437: PUSH
17438: NOP4
17442: MINUS
17443: PUSH
17444: NOP4
17448: PLUS
17449: PUSH
17450: NOP4
17454: PUSH
17455: NOP4
17459: MINUS
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: NOP4
17469: ST_TO_ADDR
// b = b + c end ;
17470: NOP4
17474: PUSH
17475: NOP4
17479: PUSH
17480: NOP4
17484: PLUS
17485: ST_TO_ADDR
17486: GO 17046
// if list_coords = 0 then
17488: NOP4
17492: PUSH
17493: LD_INT 0
17495: EQUAL
17496: IFFALSE 17500
// exit ;
17498: GO 18008
// repeat min_dist = 5000 ;
17500: NOP4
17504: PUSH
17505: LD_INT 5000
17507: ST_TO_ADDR
// for b in list_coords do
17508: NOP4
17512: PUSH
17513: NOP4
17517: PUSH
17518: FOR_IN
17519: IFFALSE 17578
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
17521: NOP4
17525: PUSH
17526: NOP4
17530: PPUSH
17531: NOP4
17535: PUSH
17536: LD_INT 1
17538: ARRAY
17539: PPUSH
17540: NOP4
17544: PUSH
17545: LD_INT 2
17547: ARRAY
17548: PPUSH
17549: NOP4
17553: ST_TO_ADDR
// if temp_dist < min_dist then
17554: NOP4
17558: PUSH
17559: NOP4
17563: LESS
17564: IFFALSE 17576
// min_dist = temp_dist ;
17566: NOP4
17570: PUSH
17571: NOP4
17575: ST_TO_ADDR
// end ;
17576: GO 17518
17578: POP
17579: POP
// c = 0 ;
17580: NOP4
17584: PUSH
17585: LD_INT 0
17587: ST_TO_ADDR
// repeat c = c + 1 ;
17588: NOP4
17592: PUSH
17593: NOP4
17597: PUSH
17598: LD_INT 1
17600: PLUS
17601: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
17602: NOP4
17606: PPUSH
17607: NOP4
17611: PUSH
17612: NOP4
17616: ARRAY
17617: PUSH
17618: LD_INT 1
17620: ARRAY
17621: PPUSH
17622: NOP4
17626: PUSH
17627: NOP4
17631: ARRAY
17632: PUSH
17633: LD_INT 2
17635: ARRAY
17636: PPUSH
17637: NOP4
17641: PUSH
17642: NOP4
17646: EQUAL
17647: IFFALSE 17712
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
17649: NOP4
17653: PUSH
17654: NOP4
17658: PPUSH
17659: LD_INT 1
17661: PPUSH
17662: NOP4
17666: PUSH
17667: NOP4
17671: ARRAY
17672: PPUSH
17673: NOP4
17677: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
17678: NOP4
17682: PUSH
17683: NOP4
17687: PPUSH
17688: NOP4
17692: PPUSH
17693: NOP4
17697: ST_TO_ADDR
// c = c - 1 ;
17698: NOP4
17702: PUSH
17703: NOP4
17707: PUSH
17708: LD_INT 1
17710: MINUS
17711: ST_TO_ADDR
// end ; until c = list_coords ;
17712: NOP4
17716: PUSH
17717: NOP4
17721: EQUAL
17722: IFFALSE 17588
// c = 0 ;
17724: NOP4
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// if list_nearest > 0 then
17732: NOP4
17736: PUSH
17737: LD_INT 0
17739: GREATER
17740: IFFALSE 17882
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
17742: NOP4
17746: PUSH
17747: LD_INT 1
17749: PPUSH
17750: NOP4
17754: PPUSH
17755: NOP4
17759: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
17760: NOP4
17764: PUSH
17765: NOP4
17769: PUSH
17770: NOP4
17774: ARRAY
17775: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
17776: NOP4
17780: PUSH
17781: LD_INT 1
17783: ARRAY
17784: PPUSH
17785: NOP4
17789: PUSH
17790: LD_INT 2
17792: ARRAY
17793: PPUSH
17794: NOP4
17798: PUSH
17799: LD_INT 0
17801: GREATER
17802: PUSH
17803: NOP4
17807: PUSH
17808: LD_INT 1
17810: ARRAY
17811: PPUSH
17812: NOP4
17816: PUSH
17817: LD_INT 2
17819: ARRAY
17820: PPUSH
17821: NOP4
17825: PUSH
17826: LD_INT 0
17828: EQUAL
17829: AND
17830: IFFALSE 17842
// c = 1 else
17832: NOP4
17836: PUSH
17837: LD_INT 1
17839: ST_TO_ADDR
17840: GO 17862
// list_nearest = Delete ( list_nearest , rand_num ) ;
17842: NOP4
17846: PUSH
17847: NOP4
17851: PPUSH
17852: NOP4
17856: PPUSH
17857: NOP4
17861: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
17862: NOP4
17866: PUSH
17867: LD_INT 1
17869: EQUAL
17870: PUSH
17871: NOP4
17875: PUSH
17876: LD_INT 0
17878: EQUAL
17879: OR
17880: IFFALSE 17742
// end ; until c = 1 or list_coords = 0 ;
17882: NOP4
17886: PUSH
17887: LD_INT 1
17889: EQUAL
17890: PUSH
17891: NOP4
17895: PUSH
17896: LD_INT 0
17898: EQUAL
17899: OR
17900: IFFALSE 17500
// attempts = attempts + 1 ;
17902: NOP4
17906: PUSH
17907: NOP4
17911: PUSH
17912: LD_INT 1
17914: PLUS
17915: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
17916: NOP4
17920: PUSH
17921: LD_INT 1
17923: EQUAL
17924: PUSH
17925: NOP4
17929: PUSH
17930: LD_INT 1
17932: GREATER
17933: OR
17934: IFFALSE 16459
// if c = 1 then
17936: NOP4
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: IFFALSE 18008
// if add then
17946: NOP4
17950: IFFALSE 17981
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
17952: NOP4
17956: PPUSH
17957: NOP4
17961: PUSH
17962: LD_INT 1
17964: ARRAY
17965: PPUSH
17966: NOP4
17970: PUSH
17971: LD_INT 2
17973: ARRAY
17974: PPUSH
17975: NOP4
17979: GO 18008
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
17981: NOP4
17985: PPUSH
17986: NOP4
17990: PUSH
17991: LD_INT 1
17993: ARRAY
17994: PPUSH
17995: NOP4
17999: PUSH
18000: LD_INT 2
18002: ARRAY
18003: PPUSH
18004: NOP4
// end ;
18008: LD_VAR 0 6
18012: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
18013: LD_INT 0
18015: PPUSH
18016: PPUSH
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
18021: NOP4
18025: PPUSH
18026: NOP4
18030: PPUSH
18031: NOP4
18035: NOT
18036: PUSH
18037: NOP4
18041: PPUSH
18042: NOP4
18046: PPUSH
18047: NOP4
18051: NOT
18052: OR
18053: IFFALSE 18066
// begin result = - 1 ;
18055: NOP4
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: ST_TO_ADDR
// exit ;
18064: GO 18226
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
18066: NOP4
18070: PUSH
18071: NOP4
18075: PPUSH
18076: NOP4
18080: PPUSH
18081: NOP4
18085: PPUSH
18086: NOP4
18090: PPUSH
18091: NOP4
18095: ST_TO_ADDR
// dist_2 = 99999 ;
18096: NOP4
18100: PUSH
18101: LD_INT 99999
18103: ST_TO_ADDR
// for b = 0 to 5 do
18104: NOP4
18108: PUSH
18109: DOUBLE
18110: LD_INT 0
18112: DEC
18113: ST_TO_ADDR
18114: LD_INT 5
18116: PUSH
18117: FOR_TO
18118: IFFALSE 18214
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
18120: NOP4
18124: PUSH
18125: NOP4
18129: PPUSH
18130: NOP4
18134: PPUSH
18135: NOP4
18139: PPUSH
18140: NOP4
18144: PPUSH
18145: NOP4
18149: PPUSH
18150: NOP4
18154: PPUSH
18155: NOP4
18159: PPUSH
18160: NOP4
18164: PPUSH
18165: NOP4
18169: PPUSH
18170: NOP4
18174: PPUSH
18175: NOP4
18179: ST_TO_ADDR
// if temp_dist < dist_2 then
18180: NOP4
18184: PUSH
18185: NOP4
18189: LESS
18190: IFFALSE 18212
// begin dist_2 = temp_dist ;
18192: NOP4
18196: PUSH
18197: NOP4
18201: ST_TO_ADDR
// dir = b ;
18202: NOP4
18206: PUSH
18207: NOP4
18211: ST_TO_ADDR
// end ; end ;
18212: GO 18117
18214: POP
18215: POP
// result = dir ;
18216: NOP4
18220: PUSH
18221: NOP4
18225: ST_TO_ADDR
// end ;
18226: LD_VAR 0 5
18230: RET
// export function AviradzePlantGatheringFunc ( dialogue_num ) ; var avi_hexes_list , i , temp_list , temp_list_x , temp_list_y , temp_hex , temp_list_2 , destirbed ; begin
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
// if aviradze_plant_gathering [ dialogue_num ] = 2 then
18242: NOP4
18246: PUSH
18247: NOP4
18251: ARRAY
18252: PUSH
18253: LD_INT 2
18255: EQUAL
18256: IFFALSE 18399
// begin CenterOnUnits ( Aviradze ) ;
18258: NOP4
18262: PPUSH
18263: NOP4
// DialogueOn ;
18267: NOP4
// case dialogue_num of 1 :
18271: NOP4
18275: PUSH
18276: LD_INT 1
18278: DOUBLE
18279: EQUAL
18280: IFTRUE 18284
18282: GO 18299
18284: POP
// Say ( Aviradze , D8Av1 ) ; 2 :
18285: NOP4
18289: PPUSH
18290: LD_STRING D8Av1
18292: PPUSH
18293: NOP4
18297: GO 18346
18299: LD_INT 2
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18322
18307: POP
// Say ( Aviradze , D8Av2 ) ; 3 :
18308: NOP4
18312: PPUSH
18313: LD_STRING D8Av2
18315: PPUSH
18316: NOP4
18320: GO 18346
18322: LD_INT 3
18324: DOUBLE
18325: EQUAL
18326: IFTRUE 18330
18328: GO 18345
18330: POP
// Say ( Aviradze , D8Av3 ) ; end ;
18331: NOP4
18335: PPUSH
18336: LD_STRING D8Av3
18338: PPUSH
18339: NOP4
18343: GO 18346
18345: POP
// if ( aviradze_plant_gathering diff 2 ) = 0 then
18346: NOP4
18350: PUSH
18351: LD_INT 2
18353: DIFF
18354: PUSH
18355: LD_INT 0
18357: EQUAL
18358: IFFALSE 18372
// Say ( Aviradze , D8Av4 ) ;
18360: NOP4
18364: PPUSH
18365: LD_STRING D8Av4
18367: PPUSH
18368: NOP4
// DialogueOff ;
18372: NOP4
// aviradze_plant_gathering = Replace ( aviradze_plant_gathering , dialogue_num , 1 ) ;
18376: NOP4
18380: PUSH
18381: NOP4
18385: PPUSH
18386: NOP4
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: NOP4
18398: ST_TO_ADDR
// end ; case dialogue_num of 1 :
18399: NOP4
18403: PUSH
18404: LD_INT 1
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18433
18412: POP
// temp_list = AreaToList ( pink_bedflower_area , false ) ; 2 :
18413: NOP4
18417: PUSH
18418: NOP4
18422: PPUSH
18423: LD_INT 0
18425: PPUSH
18426: NOP4
18430: ST_TO_ADDR
18431: GO 18492
18433: LD_INT 2
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18462
18441: POP
// temp_list = AreaToList ( greenhat_area , false ) ; 3 :
18442: NOP4
18446: PUSH
18447: NOP4
18451: PPUSH
18452: LD_INT 0
18454: PPUSH
18455: NOP4
18459: ST_TO_ADDR
18460: GO 18492
18462: LD_INT 3
18464: DOUBLE
18465: EQUAL
18466: IFTRUE 18470
18468: GO 18491
18470: POP
// temp_list = AreaToList ( royal_aphrodite_area , false ) ; end ;
18471: NOP4
18475: PUSH
18476: NOP4
18480: PPUSH
18481: LD_INT 0
18483: PPUSH
18484: NOP4
18488: ST_TO_ADDR
18489: GO 18492
18491: POP
// temp_list_x = temp_list [ 1 ] ;
18492: NOP4
18496: PUSH
18497: NOP4
18501: PUSH
18502: LD_INT 1
18504: ARRAY
18505: ST_TO_ADDR
// temp_list_y = temp_list [ 2 ] ;
18506: NOP4
18510: PUSH
18511: NOP4
18515: PUSH
18516: LD_INT 2
18518: ARRAY
18519: ST_TO_ADDR
// temp_list = [ ] ;
18520: NOP4
18524: PUSH
18525: EMPTY
18526: ST_TO_ADDR
// temp_hex = [ GetX ( Aviradze ) , GetY ( Aviradze ) ] ;
18527: NOP4
18531: PUSH
18532: NOP4
18536: PPUSH
18537: NOP4
18541: PUSH
18542: NOP4
18546: PPUSH
18547: NOP4
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: ST_TO_ADDR
// for i = 1 to temp_list_x do
18556: NOP4
18560: PUSH
18561: DOUBLE
18562: LD_INT 1
18564: DEC
18565: ST_TO_ADDR
18566: NOP4
18570: PUSH
18571: FOR_TO
18572: IFFALSE 18670
// if GetDistXY ( temp_hex [ 1 ] , temp_hex [ 2 ] , temp_list_x [ i ] , temp_list_y [ i ] ) <= 7 then
18574: NOP4
18578: PUSH
18579: LD_INT 1
18581: ARRAY
18582: PPUSH
18583: NOP4
18587: PUSH
18588: LD_INT 2
18590: ARRAY
18591: PPUSH
18592: NOP4
18596: PUSH
18597: NOP4
18601: ARRAY
18602: PPUSH
18603: NOP4
18607: PUSH
18608: NOP4
18612: ARRAY
18613: PPUSH
18614: NOP4
18618: PUSH
18619: LD_INT 7
18621: LESSEQUAL
18622: IFFALSE 18668
// temp_list = Insert ( temp_list , 1 , [ temp_list_x [ i ] , temp_list_y [ i ] ] ) ;
18624: NOP4
18628: PUSH
18629: NOP4
18633: PPUSH
18634: LD_INT 1
18636: PPUSH
18637: NOP4
18641: PUSH
18642: NOP4
18646: ARRAY
18647: PUSH
18648: NOP4
18652: PUSH
18653: NOP4
18657: ARRAY
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: NOP4
18667: ST_TO_ADDR
18668: GO 18571
18670: POP
18671: POP
// temp_list = temp_list diff [ temp_hex ] ;
18672: NOP4
18676: PUSH
18677: NOP4
18681: PUSH
18682: NOP4
18686: PUSH
18687: EMPTY
18688: LIST
18689: DIFF
18690: ST_TO_ADDR
// avi_hexes_list = [ ] ;
18691: NOP4
18695: PUSH
18696: EMPTY
18697: ST_TO_ADDR
// for i = 1 to 5 do
18698: NOP4
18702: PUSH
18703: DOUBLE
18704: LD_INT 1
18706: DEC
18707: ST_TO_ADDR
18708: LD_INT 5
18710: PUSH
18711: FOR_TO
18712: IFFALSE 18773
// begin temp_list_2 = temp_list ;
18714: NOP4
18718: PUSH
18719: NOP4
18723: ST_TO_ADDR
// avi_hexes_list = Insert ( avi_hexes_list , 1 , temp_list [ Rand ( 1 , temp_list ) ] ) ;
18724: NOP4
18728: PUSH
18729: NOP4
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: NOP4
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: NOP4
18749: PPUSH
18750: NOP4
18754: ARRAY
18755: PPUSH
18756: NOP4
18760: ST_TO_ADDR
// temp_list = temp_list_2 ;
18761: NOP4
18765: PUSH
18766: NOP4
18770: ST_TO_ADDR
// end ;
18771: GO 18711
18773: POP
18774: POP
// ComMoveXY ( Aviradze , avi_hexes_list [ 1 ] [ 1 ] , avi_hexes_list [ 1 ] [ 2 ] ) ;
18775: NOP4
18779: PPUSH
18780: NOP4
18784: PUSH
18785: LD_INT 1
18787: ARRAY
18788: PUSH
18789: LD_INT 1
18791: ARRAY
18792: PPUSH
18793: NOP4
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PUSH
18802: LD_INT 2
18804: ARRAY
18805: PPUSH
18806: NOP4
// AddComWait ( Aviradze , Rand ( 0 0$1 , 0 0$2 ) ) ;
18810: NOP4
18814: PPUSH
18815: LD_INT 35
18817: PPUSH
18818: LD_INT 70
18820: PPUSH
18821: NOP4
18825: PPUSH
18826: NOP4
// for i = 2 to 5 do
18830: NOP4
18834: PUSH
18835: DOUBLE
18836: LD_INT 2
18838: DEC
18839: ST_TO_ADDR
18840: LD_INT 5
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18907
// begin AddComMoveXY ( Aviradze , avi_hexes_list [ i ] [ 1 ] , avi_hexes_list [ i ] [ 2 ] ) ;
18846: NOP4
18850: PPUSH
18851: NOP4
18855: PUSH
18856: NOP4
18860: ARRAY
18861: PUSH
18862: LD_INT 1
18864: ARRAY
18865: PPUSH
18866: NOP4
18870: PUSH
18871: NOP4
18875: ARRAY
18876: PUSH
18877: LD_INT 2
18879: ARRAY
18880: PPUSH
18881: NOP4
// AddComWait ( Aviradze , Rand ( 0 0$1 , 0 0$2 ) ) ;
18885: NOP4
18889: PPUSH
18890: LD_INT 35
18892: PPUSH
18893: LD_INT 70
18895: PPUSH
18896: NOP4
18900: PPUSH
18901: NOP4
// end ;
18905: GO 18843
18907: POP
18908: POP
// destirbed = false ;
18909: NOP4
18913: PUSH
18914: LD_INT 0
18916: ST_TO_ADDR
// repeat Wait ( 0 0$0.3 ) ;
18917: LD_INT 10
18919: PPUSH
18920: NOP4
// temp_list = GetTaskList ( Aviradze ) ;
18924: NOP4
18928: PUSH
18929: NOP4
18933: PPUSH
18934: NOP4
18938: ST_TO_ADDR
// if temp_list > 0 then
18939: NOP4
18943: PUSH
18944: LD_INT 0
18946: GREATER
18947: IFFALSE 18980
// if not temp_list [ temp_list ] [ 1 ] = S then
18949: NOP4
18953: PUSH
18954: NOP4
18958: ARRAY
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PUSH
18964: LD_STRING S
18966: EQUAL
18967: NOT
18968: IFFALSE 18980
// begin destirbed = true ;
18970: NOP4
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// break ;
18978: GO 18990
// end ; until temp_list = 0 ;
18980: NOP4
18984: PUSH
18985: LD_INT 0
18987: EQUAL
18988: IFFALSE 18917
// if not destirbed then
18990: NOP4
18994: NOT
18995: IFFALSE 19242
// begin aviradze_plant_gathering = Replace ( aviradze_plant_gathering , dialogue_num , 0 ) ;
18997: NOP4
19001: PUSH
19002: NOP4
19006: PPUSH
19007: NOP4
19011: PPUSH
19012: LD_INT 0
19014: PPUSH
19015: NOP4
19019: ST_TO_ADDR
// DialogueOn ;
19020: NOP4
// case ( aviradze_plant_gathering diff 0 ) of 2 :
19024: NOP4
19028: PUSH
19029: LD_INT 0
19031: DIFF
19032: PUSH
19033: LD_INT 2
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19056
19041: POP
// Say ( Aviradze , D8Av5 ) ; 1 :
19042: NOP4
19046: PPUSH
19047: LD_STRING D8Av5
19049: PPUSH
19050: NOP4
19054: GO 19103
19056: LD_INT 1
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19079
19064: POP
// Say ( Aviradze , D8Av6 ) ; 0 :
19065: NOP4
19069: PPUSH
19070: LD_STRING D8Av6
19072: PPUSH
19073: NOP4
19077: GO 19103
19079: LD_INT 0
19081: DOUBLE
19082: EQUAL
19083: IFTRUE 19087
19085: GO 19102
19087: POP
// Say ( Aviradze , D9Av1 ) ; end ;
19088: NOP4
19092: PPUSH
19093: LD_STRING D9Av1
19095: PPUSH
19096: NOP4
19100: GO 19103
19102: POP
// DialogueOff ;
19103: NOP4
// case dialogue_num of 1 :
19107: NOP4
19111: PUSH
19112: LD_INT 1
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19130
19120: POP
// ChangeMissionObjectives ( M_out_bedflower ) ; 2 :
19121: LD_STRING M_out_bedflower
19123: PPUSH
19124: NOP4
19128: GO 19167
19130: LD_INT 2
19132: DOUBLE
19133: EQUAL
19134: IFTRUE 19138
19136: GO 19148
19138: POP
// ChangeMissionObjectives ( M_out_greenhat ) ; 3 :
19139: LD_STRING M_out_greenhat
19141: PPUSH
19142: NOP4
19146: GO 19167
19148: LD_INT 3
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19166
19156: POP
// ChangeMissionObjectives ( M_out_royal ) ; end ;
19157: LD_STRING M_out_royal
19159: PPUSH
19160: NOP4
19164: GO 19167
19166: POP
// case dialogue_num of 1 :
19167: NOP4
19171: PUSH
19172: LD_INT 1
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19195
19180: POP
// SetAreaMapShow ( pink_bedflower_area , 0 ) ; 2 :
19181: NOP4
19185: PPUSH
19186: LD_INT 0
19188: PPUSH
19189: NOP4
19193: GO 19242
19195: LD_INT 2
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19218
19203: POP
// SetAreaMapShow ( greenhat_area , 0 ) ; 3 :
19204: NOP4
19208: PPUSH
19209: LD_INT 0
19211: PPUSH
19212: NOP4
19216: GO 19242
19218: LD_INT 3
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19241
19226: POP
// SetAreaMapShow ( royal_aphrodite_area , 0 ) ; end ;
19227: NOP4
19231: PPUSH
19232: LD_INT 0
19234: PPUSH
19235: NOP4
19239: GO 19242
19241: POP
// end ; end ;
19242: LD_VAR 0 2
19246: RET
// export function CreateAmVehicleAndDriver ; begin
19247: LD_INT 0
19249: PPUSH
// InitUc ;
19250: NOP4
// InitVc ;
19254: NOP4
// uc_nation = nation_american ;
19258: LD_ADDR_OWVAR 21
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// uc_side = 1 ;
19266: LD_ADDR_OWVAR 20
19270: PUSH
19271: LD_INT 1
19273: ST_TO_ADDR
// uc_direction = 2 ;
19274: LD_ADDR_OWVAR 24
19278: PUSH
19279: LD_INT 2
19281: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
19282: LD_ADDR_OWVAR 37
19286: PUSH
19287: LD_INT 2
19289: ST_TO_ADDR
// vc_engine = engine_combustion ;
19290: LD_ADDR_OWVAR 39
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// vc_control = control_manual ;
19298: LD_ADDR_OWVAR 38
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if Rand ( 1 , 2 ) = 1 then
19306: LD_INT 1
19308: PPUSH
19309: LD_INT 2
19311: PPUSH
19312: NOP4
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19332
// vc_weapon = us_light_gun else
19322: LD_ADDR_OWVAR 40
19326: PUSH
19327: LD_INT 3
19329: ST_TO_ADDR
19330: GO 19340
// vc_weapon = us_double_gun ;
19332: LD_ADDR_OWVAR 40
19336: PUSH
19337: LD_INT 5
19339: ST_TO_ADDR
// result = [ CreateVehicle ] ;
19340: NOP4
19344: PUSH
19345: NOP4
19349: PUSH
19350: EMPTY
19351: LIST
19352: ST_TO_ADDR
// InitHc ;
19353: NOP4
// PrepareMechanic ( false , am_skill_lvl ) ;
19357: LD_INT 0
19359: PPUSH
19360: NOP4
19364: PPUSH
19365: NOP4
// result = Replace ( result , 2 , CreateHuman ) ;
19369: NOP4
19373: PUSH
19374: NOP4
19378: PPUSH
19379: LD_INT 2
19381: PPUSH
19382: NOP4
19386: PPUSH
19387: NOP4
19391: ST_TO_ADDR
// PlaceHumanInUnit ( result [ 2 ] , result [ 1 ] ) ;
19392: NOP4
19396: PUSH
19397: LD_INT 2
19399: ARRAY
19400: PPUSH
19401: NOP4
19405: PUSH
19406: LD_INT 1
19408: ARRAY
19409: PPUSH
19410: NOP4
// end ;
19414: LD_VAR 0 1
19418: RET
// export function CreateAmSoldier ; begin
19419: LD_INT 0
19421: PPUSH
// InitUc ;
19422: NOP4
// InitHc ;
19426: NOP4
// uc_nation = nation_american ;
19430: LD_ADDR_OWVAR 21
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// uc_side = 1 ;
19438: LD_ADDR_OWVAR 20
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// uc_direction = 2 ;
19446: LD_ADDR_OWVAR 24
19450: PUSH
19451: LD_INT 2
19453: ST_TO_ADDR
// PrepareSoldier ( false , am_skill_lvl ) ;
19454: LD_INT 0
19456: PPUSH
19457: NOP4
19461: PPUSH
19462: NOP4
// result = CreateHuman ;
19466: NOP4
19470: PUSH
19471: NOP4
19475: ST_TO_ADDR
// end ;
19476: LD_VAR 0 1
19480: RET
// export function AmericanEscape ; var i ; begin
19481: LD_INT 0
19483: PPUSH
19484: PPUSH
// DialogueOn ;
19485: NOP4
// Say ( UnitFilter ( start_americans , [ f_ok ] ) [ 1 ] , D3AmMale2b ) ;
19489: NOP4
19493: PPUSH
19494: LD_INT 50
19496: PUSH
19497: EMPTY
19498: LIST
19499: PPUSH
19500: NOP4
19504: PUSH
19505: LD_INT 1
19507: ARRAY
19508: PPUSH
19509: LD_STRING D3AmMale2b
19511: PPUSH
19512: NOP4
// DialogueOff ;
19516: NOP4
// americans_are_evacuating = true ;
19520: NOP4
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// for i in start_americans do
19528: NOP4
19532: PUSH
19533: NOP4
19537: PUSH
19538: FOR_IN
19539: IFFALSE 19836
// begin ComExitBuilding ( i ) ;
19541: NOP4
19545: PPUSH
19546: NOP4
// if FilterUnitsInArea ( NorthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 then
19550: NOP4
19554: PPUSH
19555: LD_INT 22
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: NOP4
19583: PUSH
19584: LD_INT 0
19586: EQUAL
19587: IFFALSE 19603
// AddComMoveToArea ( i , AmEscapeNorthArea ) ;
19589: NOP4
19593: PPUSH
19594: NOP4
19598: PPUSH
19599: NOP4
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 then
19603: NOP4
19607: PPUSH
19608: LD_INT 22
19610: PUSH
19611: LD_INT 2
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 21
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PPUSH
19632: NOP4
19636: PUSH
19637: LD_INT 0
19639: EQUAL
19640: IFFALSE 19656
// AddComMoveToArea ( i , AmEscapeSouthArea ) ;
19642: NOP4
19646: PPUSH
19647: NOP4
19651: PPUSH
19652: NOP4
// if FilterUnitsInArea ( NorthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 0 and FilterUnitsInArea ( SouthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 0 then
19656: NOP4
19660: PPUSH
19661: LD_INT 22
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 21
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PPUSH
19685: NOP4
19689: PUSH
19690: LD_INT 0
19692: GREATER
19693: PUSH
19694: NOP4
19698: PPUSH
19699: LD_INT 22
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 21
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PPUSH
19723: NOP4
19727: PUSH
19728: LD_INT 0
19730: GREATER
19731: AND
19732: IFFALSE 19834
// begin if FilterUnitsInArea ( NorthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > FilterUnitsInArea ( SouthArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) then
19734: NOP4
19738: PPUSH
19739: LD_INT 22
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PPUSH
19763: NOP4
19767: PUSH
19768: NOP4
19772: PPUSH
19773: LD_INT 22
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 21
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PPUSH
19797: NOP4
19801: GREATER
19802: IFFALSE 19820
// AddComMoveToArea ( i , AmEscapeSouthArea ) else
19804: NOP4
19808: PPUSH
19809: NOP4
19813: PPUSH
19814: NOP4
19818: GO 19834
// AddComMoveToArea ( i , AmEscapeSouthArea ) ;
19820: NOP4
19824: PPUSH
19825: NOP4
19829: PPUSH
19830: NOP4
// end ; end ;
19834: GO 19538
19836: POP
19837: POP
// end ; end_of_file
19838: LD_VAR 0 1
19842: RET
// export lastCrates ; every 2 2$0 do var calc , cratesOnMap ;
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
19849: PPUSH
// begin enable ;
19850: ENABLE
// cratesOnMap = GetResourceArea ( crate_spawn_area , 1 ) * 10 ;
19851: NOP4
19855: PUSH
19856: NOP4
19860: PPUSH
19861: LD_INT 1
19863: PPUSH
19864: NOP4
19868: PUSH
19869: LD_INT 10
19871: MUL
19872: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep ) , 1 ) + GetResourceType ( GetBase ( FarmerDepot ) , 1 ) + lastCrates + cratesOnMap < 350 then
19873: LD_INT 1
19875: PPUSH
19876: NOP4
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: NOP4
19888: PUSH
19889: NOP4
19893: PPUSH
19894: NOP4
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: NOP4
19906: PLUS
19907: PUSH
19908: NOP4
19912: PLUS
19913: PUSH
19914: NOP4
19918: PLUS
19919: PUSH
19920: LD_INT 350
19922: LESS
19923: IFFALSE 20185
// begin calc = ( GetResourceType ( GetBase ( dep ) , 1 ) + GetResourceType ( GetBase ( FarmerDepot ) , 1 ) + lastCrates + cratesOnMap ) - 350 ;
19925: NOP4
19929: PUSH
19930: LD_INT 1
19932: PPUSH
19933: NOP4
19937: PPUSH
19938: LD_INT 1
19940: PPUSH
19941: NOP4
19945: PUSH
19946: NOP4
19950: PPUSH
19951: NOP4
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: NOP4
19963: PLUS
19964: PUSH
19965: NOP4
19969: PLUS
19970: PUSH
19971: NOP4
19975: PLUS
19976: PUSH
19977: LD_INT 350
19979: MINUS
19980: ST_TO_ADDR
// case calc of - 10 :
19981: NOP4
19985: PUSH
19986: LD_INT 10
19988: NEG
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20021
19995: POP
// begin CreateCratesArea ( 1 , crate_spawn_area , true ) ;
19996: LD_INT 1
19998: PPUSH
19999: NOP4
20003: PPUSH
20004: LD_INT 1
20006: PPUSH
20007: NOP4
// lastCrates = 10 ;
20011: NOP4
20015: PUSH
20016: LD_INT 10
20018: ST_TO_ADDR
// end ; - 20 :
20019: GO 20185
20021: LD_INT 20
20023: NEG
20024: DOUBLE
20025: EQUAL
20026: IFTRUE 20030
20028: GO 20056
20030: POP
// begin CreateCratesArea ( 2 , crate_spawn_area , true ) ;
20031: LD_INT 2
20033: PPUSH
20034: NOP4
20038: PPUSH
20039: LD_INT 1
20041: PPUSH
20042: NOP4
// lastCrates = 20 ;
20046: NOP4
20050: PUSH
20051: LD_INT 20
20053: ST_TO_ADDR
// end ; - 30 :
20054: GO 20185
20056: LD_INT 30
20058: NEG
20059: DOUBLE
20060: EQUAL
20061: IFTRUE 20065
20063: GO 20091
20065: POP
// begin CreateCratesArea ( 3 , crate_spawn_area , true ) ;
20066: LD_INT 3
20068: PPUSH
20069: NOP4
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: NOP4
// lastCrates = 30 ;
20081: NOP4
20085: PUSH
20086: LD_INT 30
20088: ST_TO_ADDR
// end ; - 40 :
20089: GO 20185
20091: LD_INT 40
20093: NEG
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20126
20100: POP
// begin CreateCratesArea ( 4 , crate_spawn_area , true ) ;
20101: LD_INT 4
20103: PPUSH
20104: NOP4
20108: PPUSH
20109: LD_INT 1
20111: PPUSH
20112: NOP4
// lastCrates = 40 ;
20116: NOP4
20120: PUSH
20121: LD_INT 40
20123: ST_TO_ADDR
// end ; - 50 :
20124: GO 20185
20126: LD_INT 50
20128: NEG
20129: DOUBLE
20130: EQUAL
20131: IFTRUE 20135
20133: GO 20161
20135: POP
// begin CreateCratesArea ( 5 , crate_spawn_area , true ) ;
20136: LD_INT 5
20138: PPUSH
20139: NOP4
20143: PPUSH
20144: LD_INT 1
20146: PPUSH
20147: NOP4
// lastCrates = 50 ;
20151: NOP4
20155: PUSH
20156: LD_INT 50
20158: ST_TO_ADDR
// end ; else
20159: GO 20185
20161: POP
// begin CreateCratesArea ( 5 , crate_spawn_area , true ) ;
20162: LD_INT 5
20164: PPUSH
20165: NOP4
20169: PPUSH
20170: LD_INT 1
20172: PPUSH
20173: NOP4
// lastCrates = 50 ;
20177: NOP4
20181: PUSH
20182: LD_INT 50
20184: ST_TO_ADDR
// end ; end ; end ; end ; end_of_file
20185: PPOPN 2
20187: END
// export apes , tigers ; export function PrepareNature ; var i , spots , num , temp_unit ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
20194: PPUSH
// InitHc ;
20195: NOP4
// InitUc ;
20199: NOP4
// spots = [ [ 29 , 6 ] , [ 38 , 13 ] , [ 49 , 5 ] , [ 64 , 20 ] , [ 67 , 9 ] , [ 73 , 25 ] , [ 83 , 7 ] , [ 110 , 28 ] , [ 125 , 60 ] , [ 71 , 73 ] , [ 59 , 72 ] , [ 43 , 68 ] , [ 28 , 49 ] , [ 52 , 62 ] , [ 73 , 4 ] , [ 61 , 7 ] , [ 40 , 5 ] , [ 89 , 76 ] , [ 63 , 68 ] , [ 44 , 65 ] ] ;
20203: NOP4
20207: PUSH
20208: LD_INT 29
20210: PUSH
20211: LD_INT 6
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 38
20220: PUSH
20221: LD_INT 13
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 49
20230: PUSH
20231: LD_INT 5
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 64
20240: PUSH
20241: LD_INT 20
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 67
20250: PUSH
20251: LD_INT 9
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 73
20260: PUSH
20261: LD_INT 25
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 83
20270: PUSH
20271: LD_INT 7
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 110
20280: PUSH
20281: LD_INT 28
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 125
20290: PUSH
20291: LD_INT 60
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 71
20300: PUSH
20301: LD_INT 73
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 59
20310: PUSH
20311: LD_INT 72
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 43
20320: PUSH
20321: LD_INT 68
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 28
20330: PUSH
20331: LD_INT 49
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 52
20340: PUSH
20341: LD_INT 62
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 73
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 61
20360: PUSH
20361: LD_INT 7
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 40
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 89
20380: PUSH
20381: LD_INT 76
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 63
20390: PUSH
20391: LD_INT 68
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 44
20400: PUSH
20401: LD_INT 65
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
// uc_nation = nation_nature ;
20430: LD_ADDR_OWVAR 21
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// uc_side = 0 ;
20438: LD_ADDR_OWVAR 20
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// hc_class = class_apeman ;
20446: LD_ADDR_OWVAR 28
20450: PUSH
20451: LD_INT 12
20453: ST_TO_ADDR
// apes = [ ] ;
20454: NOP4
20458: PUSH
20459: EMPTY
20460: ST_TO_ADDR
// for i = 1 to num_apes do
20461: NOP4
20465: PUSH
20466: DOUBLE
20467: LD_INT 1
20469: DEC
20470: ST_TO_ADDR
20471: NOP4
20475: PUSH
20476: FOR_TO
20477: IFFALSE 20713
// begin if spots = 0 then
20479: NOP4
20483: PUSH
20484: LD_INT 0
20486: EQUAL
20487: IFFALSE 20493
// exit ;
20489: POP
20490: POP
20491: GO 21227
// uc_direction = Rand ( 0 , 5 ) ;
20493: LD_ADDR_OWVAR 24
20497: PUSH
20498: LD_INT 0
20500: PPUSH
20501: LD_INT 5
20503: PPUSH
20504: NOP4
20508: ST_TO_ADDR
// hc_agressivity = Rand ( - aggressivity , 0 ) ;
20509: LD_ADDR_OWVAR 35
20513: PUSH
20514: NOP4
20518: NEG
20519: PPUSH
20520: LD_INT 0
20522: PPUSH
20523: NOP4
20527: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
20528: LD_ADDR_OWVAR 29
20532: PUSH
20533: LD_INT 11
20535: PPUSH
20536: LD_INT 13
20538: PPUSH
20539: NOP4
20543: PUSH
20544: LD_INT 10
20546: PPUSH
20547: LD_INT 11
20549: PPUSH
20550: NOP4
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
20559: LD_ADDR_OWVAR 27
20563: PUSH
20564: LD_INT 1
20566: PPUSH
20567: LD_INT 2
20569: PPUSH
20570: NOP4
20574: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , 0 , 0 , 0 ] ;
20575: LD_ADDR_OWVAR 31
20579: PUSH
20580: LD_INT 0
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: NOP4
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: ST_TO_ADDR
// apes = apes ^ CreateHuman ;
20606: NOP4
20610: PUSH
20611: NOP4
20615: PUSH
20616: NOP4
20620: ADD
20621: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
20622: NOP4
20626: PUSH
20627: LD_INT 1
20629: PPUSH
20630: NOP4
20634: PPUSH
20635: NOP4
20639: ST_TO_ADDR
// PlaceUnitXYR ( apes [ i ] , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
20640: NOP4
20644: PUSH
20645: NOP4
20649: ARRAY
20650: PPUSH
20651: NOP4
20655: PUSH
20656: NOP4
20660: ARRAY
20661: PUSH
20662: LD_INT 1
20664: ARRAY
20665: PPUSH
20666: NOP4
20670: PUSH
20671: NOP4
20675: ARRAY
20676: PUSH
20677: LD_INT 2
20679: ARRAY
20680: PPUSH
20681: LD_INT 5
20683: PPUSH
20684: LD_INT 0
20686: PPUSH
20687: NOP4
// spots = Delete ( spots , num ) ;
20691: NOP4
20695: PUSH
20696: NOP4
20700: PPUSH
20701: NOP4
20705: PPUSH
20706: NOP4
20710: ST_TO_ADDR
// end ;
20711: GO 20476
20713: POP
20714: POP
// hc_class = class_tiger ;
20715: LD_ADDR_OWVAR 28
20719: PUSH
20720: LD_INT 14
20722: ST_TO_ADDR
// hc_sex = sex_male ;
20723: LD_ADDR_OWVAR 27
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// hc_gallery = nature_foreg ;
20731: LD_ADDR_OWVAR 33
20735: PUSH
20736: LD_STRING nature_foreg
20738: ST_TO_ADDR
// hc_face_number = 3 ;
20739: LD_ADDR_OWVAR 34
20743: PUSH
20744: LD_INT 3
20746: ST_TO_ADDR
// tigers = [ ] ;
20747: NOP4
20751: PUSH
20752: EMPTY
20753: ST_TO_ADDR
// for i = 1 to num_tigers do
20754: NOP4
20758: PUSH
20759: DOUBLE
20760: LD_INT 1
20762: DEC
20763: ST_TO_ADDR
20764: NOP4
20768: PUSH
20769: FOR_TO
20770: IFFALSE 21005
// begin if spots = 0 then
20772: NOP4
20776: PUSH
20777: LD_INT 0
20779: EQUAL
20780: IFFALSE 20786
// exit ;
20782: POP
20783: POP
20784: GO 21227
// uc_direction = Rand ( 0 , 5 ) ;
20786: LD_ADDR_OWVAR 24
20790: PUSH
20791: LD_INT 0
20793: PPUSH
20794: LD_INT 5
20796: PPUSH
20797: NOP4
20801: ST_TO_ADDR
// hc_agressivity = Rand ( aggressivity - 10 , aggressivity + 10 ) ;
20802: LD_ADDR_OWVAR 35
20806: PUSH
20807: NOP4
20811: PUSH
20812: LD_INT 10
20814: MINUS
20815: PPUSH
20816: NOP4
20820: PUSH
20821: LD_INT 10
20823: PLUS
20824: PPUSH
20825: NOP4
20829: ST_TO_ADDR
// hc_attr = [ Rand ( 10 , 12 ) , Rand ( 10 , 11 ) ] ;
20830: LD_ADDR_OWVAR 29
20834: PUSH
20835: LD_INT 10
20837: PPUSH
20838: LD_INT 12
20840: PPUSH
20841: NOP4
20845: PUSH
20846: LD_INT 10
20848: PPUSH
20849: LD_INT 11
20851: PPUSH
20852: NOP4
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , difficulty - 1 ) , 0 , 0 , 0 ] ;
20861: LD_ADDR_OWVAR 31
20865: PUSH
20866: LD_INT 0
20868: PPUSH
20869: NOP4
20873: PUSH
20874: LD_INT 1
20876: MINUS
20877: PPUSH
20878: NOP4
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: ST_TO_ADDR
// tigers = tigers ^ CreateHuman ;
20898: NOP4
20902: PUSH
20903: NOP4
20907: PUSH
20908: NOP4
20912: ADD
20913: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
20914: NOP4
20918: PUSH
20919: LD_INT 1
20921: PPUSH
20922: NOP4
20926: PPUSH
20927: NOP4
20931: ST_TO_ADDR
// PlaceUnitXYR ( tigers [ i ] , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
20932: NOP4
20936: PUSH
20937: NOP4
20941: ARRAY
20942: PPUSH
20943: NOP4
20947: PUSH
20948: NOP4
20952: ARRAY
20953: PUSH
20954: LD_INT 1
20956: ARRAY
20957: PPUSH
20958: NOP4
20962: PUSH
20963: NOP4
20967: ARRAY
20968: PUSH
20969: LD_INT 2
20971: ARRAY
20972: PPUSH
20973: LD_INT 5
20975: PPUSH
20976: LD_INT 0
20978: PPUSH
20979: NOP4
// spots = Delete ( spots , num ) ;
20983: NOP4
20987: PUSH
20988: NOP4
20992: PPUSH
20993: NOP4
20997: PPUSH
20998: NOP4
21002: ST_TO_ADDR
// end ;
21003: GO 20769
21005: POP
21006: POP
// hc_class = class_phororhacos ;
21007: LD_ADDR_OWVAR 28
21011: PUSH
21012: LD_INT 18
21014: ST_TO_ADDR
// hc_face_number = 1 ;
21015: LD_ADDR_OWVAR 34
21019: PUSH
21020: LD_INT 1
21022: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
21023: LD_ADDR_OWVAR 31
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: ST_TO_ADDR
// for i = 1 to 5 do
21046: NOP4
21050: PUSH
21051: DOUBLE
21052: LD_INT 1
21054: DEC
21055: ST_TO_ADDR
21056: LD_INT 5
21058: PUSH
21059: FOR_TO
21060: IFFALSE 21225
// begin if spots = 0 then
21062: NOP4
21066: PUSH
21067: LD_INT 0
21069: EQUAL
21070: IFFALSE 21076
// exit ;
21072: POP
21073: POP
21074: GO 21227
// uc_direction = Rand ( 0 , 5 ) ;
21076: LD_ADDR_OWVAR 24
21080: PUSH
21081: LD_INT 0
21083: PPUSH
21084: LD_INT 5
21086: PPUSH
21087: NOP4
21091: ST_TO_ADDR
// hc_agressivity = Rand ( - 30 , 0 ) ;
21092: LD_ADDR_OWVAR 35
21096: PUSH
21097: LD_INT 30
21099: NEG
21100: PPUSH
21101: LD_INT 0
21103: PPUSH
21104: NOP4
21108: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 10 ) , Rand ( 11 , 12 ) ] ;
21109: LD_ADDR_OWVAR 29
21113: PUSH
21114: LD_INT 9
21116: PPUSH
21117: LD_INT 10
21119: PPUSH
21120: NOP4
21124: PUSH
21125: LD_INT 11
21127: PPUSH
21128: LD_INT 12
21130: PPUSH
21131: NOP4
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
21140: NOP4
21144: PUSH
21145: LD_INT 1
21147: PPUSH
21148: NOP4
21152: PPUSH
21153: NOP4
21157: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
21158: NOP4
21162: PPUSH
21163: NOP4
21167: PUSH
21168: NOP4
21172: ARRAY
21173: PUSH
21174: LD_INT 1
21176: ARRAY
21177: PPUSH
21178: NOP4
21182: PUSH
21183: NOP4
21187: ARRAY
21188: PUSH
21189: LD_INT 2
21191: ARRAY
21192: PPUSH
21193: LD_INT 5
21195: PPUSH
21196: LD_INT 0
21198: PPUSH
21199: NOP4
// spots = Delete ( spots , num ) ;
21203: NOP4
21207: PUSH
21208: NOP4
21212: PPUSH
21213: NOP4
21217: PPUSH
21218: NOP4
21222: ST_TO_ADDR
// end ;
21223: GO 21059
21225: POP
21226: POP
// end ;
21227: LD_VAR 0 1
21231: RET
// every 0 0$1 do var i ;
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
// begin enable ;
21238: ENABLE
// for i in apes ^ tigers do
21239: NOP4
21243: PUSH
21244: NOP4
21248: PUSH
21249: NOP4
21253: ADD
21254: PUSH
21255: FOR_IN
21256: IFFALSE 21317
// begin if GetSide ( i ) = 0 then
21258: NOP4
21262: PPUSH
21263: NOP4
21267: PUSH
21268: LD_INT 0
21270: EQUAL
21271: IFFALSE 21315
// begin AI_GetAwayFromXY ( i , 87 , 33 , 10 , false ) ;
21273: NOP4
21277: PPUSH
21278: LD_INT 87
21280: PPUSH
21281: LD_INT 33
21283: PPUSH
21284: LD_INT 10
21286: PPUSH
21287: LD_INT 0
21289: PPUSH
21290: NOP4
// AI_GetAwayFromXY ( i , 111 , 65 , 20 , false ) ;
21294: NOP4
21298: PPUSH
21299: LD_INT 111
21301: PPUSH
21302: LD_INT 65
21304: PPUSH
21305: LD_INT 20
21307: PPUSH
21308: LD_INT 0
21310: PPUSH
21311: NOP4
// end ; end ;
21315: GO 21255
21317: POP
21318: POP
// end ; end_of_file
21319: PPOPN 1
21321: END
// on BuildingCaptured ( building , former_side , capturing_unit ) do begin if GetBType ( building ) in [ b_lab , b_lab_half ] and former_side = 1 and IsOk ( Aviradze ) then
21322: NOP4
21326: PPUSH
21327: NOP4
21331: PUSH
21332: LD_INT 6
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: IN
21342: PUSH
21343: NOP4
21347: PUSH
21348: LD_INT 1
21350: EQUAL
21351: AND
21352: PUSH
21353: NOP4
21357: PPUSH
21358: NOP4
21362: AND
21363: IFFALSE 21407
// begin DialogueOn ;
21365: NOP4
// Say ( Aviradze , D7Av0 ) ;
21369: NOP4
21373: PPUSH
21374: LD_STRING D7Av0
21376: PPUSH
21377: NOP4
// DialogueOff ;
21381: NOP4
// if not OtherTechHint then
21385: NOP4
21389: NOT
21390: IFFALSE 21407
// begin OtherTechHint = 1 ;
21392: NOP4
21396: PUSH
21397: LD_INT 1
21399: ST_TO_ADDR
// Hint ( OtherNationTech ) ;
21400: LD_STRING OtherNationTech
21402: PPUSH
21403: NOP4
// end ; end ; if GetBType ( building ) = b_armoury and former_side = 1 then
21407: NOP4
21411: PPUSH
21412: NOP4
21416: PUSH
21417: LD_INT 4
21419: EQUAL
21420: PUSH
21421: NOP4
21425: PUSH
21426: LD_INT 1
21428: EQUAL
21429: AND
21430: IFFALSE 21475
// begin first_armoury = false ;
21432: NOP4
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
21440: NOP4
21444: NOT
21445: PUSH
21446: NOP4
21450: NOT
21451: AND
21452: PUSH
21453: NOP4
21457: NOT
21458: AND
21459: PUSH
21460: NOP4
21464: NOT
21465: AND
21466: IFFALSE 21475
// ChangeMissionObjectives ( M_out_build_base ) ;
21468: LD_STRING M_out_build_base
21470: PPUSH
21471: NOP4
// end ; if GetBType ( building ) = b_oil_mine and former_side = 1 then
21475: NOP4
21479: PPUSH
21480: NOP4
21484: PUSH
21485: LD_INT 29
21487: EQUAL
21488: PUSH
21489: NOP4
21493: PUSH
21494: LD_INT 1
21496: EQUAL
21497: AND
21498: IFFALSE 21543
// begin first_oil_mine = false ;
21500: NOP4
21504: PUSH
21505: LD_INT 0
21507: ST_TO_ADDR
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
21508: NOP4
21512: NOT
21513: PUSH
21514: NOP4
21518: NOT
21519: AND
21520: PUSH
21521: NOP4
21525: NOT
21526: AND
21527: PUSH
21528: NOP4
21532: NOT
21533: AND
21534: IFFALSE 21543
// ChangeMissionObjectives ( M_out_build_base ) ;
21536: LD_STRING M_out_build_base
21538: PPUSH
21539: NOP4
// end ; if GetBType ( building ) in [ b_workshop , b_factory ] and former_side = 1 then
21543: NOP4
21547: PPUSH
21548: NOP4
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: IN
21563: PUSH
21564: NOP4
21568: PUSH
21569: LD_INT 1
21571: EQUAL
21572: AND
21573: IFFALSE 21642
// begin DialogueOn ;
21575: NOP4
// if IsOk ( Willard ) then
21579: NOP4
21583: PPUSH
21584: NOP4
21588: IFFALSE 21604
// Say ( Willard , D6Wi0 ) else
21590: NOP4
21594: PPUSH
21595: LD_STRING D6Wi0
21597: PPUSH
21598: NOP4
21602: GO 21616
// Say ( Willard , D6H0 ) ;
21604: NOP4
21608: PPUSH
21609: LD_STRING D6H0
21611: PPUSH
21612: NOP4
// if not OtherTechHint then
21616: NOP4
21620: NOT
21621: IFFALSE 21638
// begin OtherTechHint = 1 ;
21623: NOP4
21627: PUSH
21628: LD_INT 1
21630: ST_TO_ADDR
// Hint ( OtherNationTech ) ;
21631: LD_STRING OtherNationTech
21633: PPUSH
21634: NOP4
// end ; DialogueOff ;
21638: NOP4
// end ; if building = dep and former_side = 1 then
21642: NOP4
21646: PUSH
21647: LD_INT 1
21649: EQUAL
21650: PUSH
21651: NOP4
21655: PUSH
21656: LD_INT 1
21658: EQUAL
21659: AND
21660: IFFALSE 22062
// begin SetResourceType ( GetBase ( dep ) , mat_cans , depot_initial_crates ) ;
21662: LD_INT 1
21664: PPUSH
21665: NOP4
21669: PPUSH
21670: LD_INT 1
21672: PPUSH
21673: NOP4
21677: PPUSH
21678: NOP4
// while not americans_have_evacuated do
21682: NOP4
21686: NOT
21687: IFFALSE 21698
// Wait ( 0 0$1 ) ;
21689: LD_INT 35
21691: PPUSH
21692: NOP4
21696: GO 21682
// CaptureAmBase = true ;
21698: NOP4
21702: PUSH
21703: LD_INT 1
21705: ST_TO_ADDR
// DialogueOn ;
21706: NOP4
// Say ( ArEngi , D4EnMale1 ) ;
21710: NOP4
21714: PPUSH
21715: LD_STRING D4EnMale1
21717: PPUSH
21718: NOP4
// Say ( Heike , D4-H-1 ) ;
21722: NOP4
21726: PPUSH
21727: LD_STRING D4-H-1
21729: PPUSH
21730: NOP4
// SayRadio ( Messenger , D4-F-1 ) ;
21734: NOP4
21738: PPUSH
21739: LD_STRING D4-F-1
21741: PPUSH
21742: NOP4
// SayRadio ( Messenger , D4-F-2 ) ;
21746: NOP4
21750: PPUSH
21751: LD_STRING D4-F-2
21753: PPUSH
21754: NOP4
// if GetResourceVisibility ( 28 , 3 , 2 ) = 0 then
21758: LD_INT 28
21760: PPUSH
21761: LD_INT 3
21763: PPUSH
21764: LD_INT 2
21766: PPUSH
21767: NOP4
21771: PUSH
21772: LD_INT 0
21774: EQUAL
21775: IFFALSE 21801
// begin Say ( Heike , D4-H-2 ) ;
21777: NOP4
21781: PPUSH
21782: LD_STRING D4-H-2
21784: PPUSH
21785: NOP4
// SayRadio ( Messenger , D4-F-3 ) ;
21789: NOP4
21793: PPUSH
21794: LD_STRING D4-F-3
21796: PPUSH
21797: NOP4
// end ; Say ( Heike , D4-H-3 ) ;
21801: NOP4
21805: PPUSH
21806: LD_STRING D4-H-3
21808: PPUSH
21809: NOP4
// SayRadio ( Messenger , D4-F-4 ) ;
21813: NOP4
21817: PPUSH
21818: LD_STRING D4-F-4
21820: PPUSH
21821: NOP4
// SayRadio ( Messenger , D4-F-5 ) ;
21825: NOP4
21829: PPUSH
21830: LD_STRING D4-F-5
21832: PPUSH
21833: NOP4
// Say ( Heike , D4-H-4 ) ;
21837: NOP4
21841: PPUSH
21842: LD_STRING D4-H-4
21844: PPUSH
21845: NOP4
// SayRadio ( Messenger , D4-F-6 ) ;
21849: NOP4
21853: PPUSH
21854: LD_STRING D4-F-6
21856: PPUSH
21857: NOP4
// Say ( Heike , D4-H-5 ) ;
21861: NOP4
21865: PPUSH
21866: LD_STRING D4-H-5
21868: PPUSH
21869: NOP4
// if americans_got_away then
21873: NOP4
21877: IFFALSE 21893
// Say ( Heike , D4H1a ) else
21879: NOP4
21883: PPUSH
21884: LD_STRING D4H1a
21886: PPUSH
21887: NOP4
21891: GO 21905
// Say ( Heike , D4H1b ) ;
21893: NOP4
21897: PPUSH
21898: LD_STRING D4H1b
21900: PPUSH
21901: NOP4
// Say ( Aviradze , D4Av1 ) ;
21905: NOP4
21909: PPUSH
21910: LD_STRING D4Av1
21912: PPUSH
21913: NOP4
// if FilterAllUnits ( [ [ f_btype , b_solar_power ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
21917: LD_INT 30
21919: PUSH
21920: LD_INT 27
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 3
21929: PUSH
21930: LD_INT 57
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PPUSH
21944: NOP4
21948: PUSH
21949: LD_INT 0
21951: EQUAL
21952: IFFALSE 21968
// Say ( Willard , D4Wil1 ) else
21954: NOP4
21958: PPUSH
21959: LD_STRING D4Wil1
21961: PPUSH
21962: NOP4
21966: GO 21980
// Say ( Willard , D4Wil2 ) ;
21968: NOP4
21972: PPUSH
21973: LD_STRING D4Wil2
21975: PPUSH
21976: NOP4
// Say ( Heike , D4H2 ) ;
21980: NOP4
21984: PPUSH
21985: LD_STRING D4H2
21987: PPUSH
21988: NOP4
// DialogueOff ;
21992: NOP4
// wait ( 0 0$0.2 ) ;
21996: LD_INT 7
21998: PPUSH
21999: NOP4
// ChangeMissionObjectives ( M2New ) ;
22003: LD_STRING M2New
22005: PPUSH
22006: NOP4
// Hint ( Dismantle ) ;
22010: LD_STRING Dismantle
22012: PPUSH
22013: NOP4
// wait ( 0 0$30 ) ;
22017: LD_INT 1050
22019: PPUSH
22020: NOP4
// CreateCratesArea ( Rand ( 1 , 5 ) , crate_spawn_area , true ) ;
22024: LD_INT 1
22026: PPUSH
22027: LD_INT 5
22029: PPUSH
22030: NOP4
22034: PPUSH
22035: NOP4
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: NOP4
// wait ( 0 0$1 ) ;
22047: LD_INT 35
22049: PPUSH
22050: NOP4
// first_shipment_have_been_sent = true ;
22054: NOP4
22058: PUSH
22059: LD_INT 1
22061: ST_TO_ADDR
// end ; if building = FarmerDepot then
22062: NOP4
22066: PUSH
22067: NOP4
22071: EQUAL
22072: IFFALSE 22086
// SetSide ( building , 5 ) ;
22074: NOP4
22078: PPUSH
22079: LD_INT 5
22081: PPUSH
22082: NOP4
// end ;
22086: PPOPN 3
22088: END
// on BuildingComplete ( building ) do var temp_list , temp_list_2 , speaker , temp_unit , tmpEng ;
22089: LD_INT 0
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
// begin if GetSide ( building ) = 2 then
22096: NOP4
22100: PPUSH
22101: NOP4
22105: PUSH
22106: LD_INT 2
22108: EQUAL
22109: IFFALSE 22653
// begin case GetBType ( building ) of b_armoury :
22111: NOP4
22115: PPUSH
22116: NOP4
22120: PUSH
22121: LD_INT 4
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22181
22129: POP
// if first_armoury then
22130: NOP4
22134: IFFALSE 22179
// begin first_armoury = false ;
22136: NOP4
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
22144: NOP4
22148: NOT
22149: PUSH
22150: NOP4
22154: NOT
22155: AND
22156: PUSH
22157: NOP4
22161: NOT
22162: AND
22163: PUSH
22164: NOP4
22168: NOT
22169: AND
22170: IFFALSE 22179
// ChangeMissionObjectives ( M_out_build_base ) ;
22172: LD_STRING M_out_build_base
22174: PPUSH
22175: NOP4
// end ; b_workshop :
22179: GO 22653
22181: LD_INT 2
22183: DOUBLE
22184: EQUAL
22185: IFTRUE 22189
22187: GO 22598
22189: POP
// if first_workshop then
22190: NOP4
22194: IFFALSE 22596
// begin CenterOnUnits ( building ) ;
22196: NOP4
22200: PPUSH
22201: NOP4
// first_workshop = false ;
22205: NOP4
22209: PUSH
22210: LD_INT 0
22212: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) ;
22213: NOP4
22217: PUSH
22218: LD_INT 21
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 22
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 50
22240: PUSH
22241: EMPTY
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: PPUSH
22249: NOP4
22253: ST_TO_ADDR
// if ( temp_list diff Heike ) = 0 then
22254: NOP4
22258: PUSH
22259: NOP4
22263: DIFF
22264: PUSH
22265: LD_INT 0
22267: EQUAL
22268: IFFALSE 22282
// speaker = Heike else
22270: NOP4
22274: PUSH
22275: NOP4
22279: ST_TO_ADDR
22280: GO 22303
// if IsOk ( Willard ) then
22282: NOP4
22286: PPUSH
22287: NOP4
22291: IFFALSE 22303
// speaker = Willard ;
22293: NOP4
22297: PUSH
22298: NOP4
22302: ST_TO_ADDR
// DialogueOn ;
22303: NOP4
// if speaker = Heike then
22307: NOP4
22311: PUSH
22312: NOP4
22316: EQUAL
22317: IFFALSE 22378
// begin Say ( Heike , D6H1b ) ;
22319: NOP4
22323: PPUSH
22324: LD_STRING D6H1b
22326: PPUSH
22327: NOP4
// Say ( Heike , D6H2b ) ;
22331: NOP4
22335: PPUSH
22336: LD_STRING D6H2b
22338: PPUSH
22339: NOP4
// if not first_lab then
22343: NOP4
22347: NOT
22348: IFFALSE 22364
// Say ( Heike , D6H3ba ) else
22350: NOP4
22354: PPUSH
22355: LD_STRING D6H3ba
22357: PPUSH
22358: NOP4
22362: GO 22376
// Say ( Heike , D6H3bb ) ;
22364: NOP4
22368: PPUSH
22369: LD_STRING D6H3bb
22371: PPUSH
22372: NOP4
// end else
22376: GO 22543
// begin Say ( speaker , D6Wi1 ) ;
22378: NOP4
22382: PPUSH
22383: LD_STRING D6Wi1
22385: PPUSH
22386: NOP4
// Say ( Heike , D6H1 ) ;
22390: NOP4
22394: PPUSH
22395: LD_STRING D6H1
22397: PPUSH
22398: NOP4
// Say ( speaker , D6Wi2 ) ;
22402: NOP4
22406: PPUSH
22407: LD_STRING D6Wi2
22409: PPUSH
22410: NOP4
// if speaker = Ralph or not IsOk ( Ralph ) then
22414: NOP4
22418: PUSH
22419: NOP4
22423: EQUAL
22424: PUSH
22425: NOP4
22429: PPUSH
22430: NOP4
22434: NOT
22435: OR
22436: IFFALSE 22452
// Say ( Heike , D6H2 ) else
22438: NOP4
22442: PPUSH
22443: LD_STRING D6H2
22445: PPUSH
22446: NOP4
22450: GO 22488
// begin Say ( Ralph , D6Ra1 ) ;
22452: NOP4
22456: PPUSH
22457: LD_STRING D6Ra1
22459: PPUSH
22460: NOP4
// Say ( Aviradze , D6Av1 ) ;
22464: NOP4
22468: PPUSH
22469: LD_STRING D6Av1
22471: PPUSH
22472: NOP4
// Say ( Sonya , D6So1 ) ;
22476: NOP4
22480: PPUSH
22481: LD_STRING D6So1
22483: PPUSH
22484: NOP4
// end ; temp_unit = Sonya ;
22488: NOP4
22492: PUSH
22493: NOP4
22497: ST_TO_ADDR
// Say ( temp_unit , D6So2 ) ;
22498: NOP4
22502: PPUSH
22503: LD_STRING D6So2
22505: PPUSH
22506: NOP4
// if not first_lab then
22510: NOP4
22514: NOT
22515: IFFALSE 22531
// Say ( temp_unit , D6So3a ) else
22517: NOP4
22521: PPUSH
22522: LD_STRING D6So3a
22524: PPUSH
22525: NOP4
22529: GO 22543
// Say ( temp_unit , D6So3b ) ;
22531: NOP4
22535: PPUSH
22536: LD_STRING D6So3b
22538: PPUSH
22539: NOP4
// end ; DialogueOff ;
22543: NOP4
// Wait ( 0 0$0.2 ) ;
22547: LD_INT 7
22549: PPUSH
22550: NOP4
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
22554: NOP4
22558: NOT
22559: PUSH
22560: NOP4
22564: NOT
22565: AND
22566: PUSH
22567: NOP4
22571: NOT
22572: AND
22573: PUSH
22574: NOP4
22578: NOT
22579: AND
22580: IFFALSE 22589
// ChangeMissionObjectives ( M_out_build_base ) ;
22582: LD_STRING M_out_build_base
22584: PPUSH
22585: NOP4
// ChangeMissionObjectives ( M_add_build_vehicle ) ;
22589: LD_STRING M_add_build_vehicle
22591: PPUSH
22592: NOP4
// end ; b_oil_mine :
22596: GO 22653
22598: LD_INT 29
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22652
22606: POP
// begin first_oil_mine = false ;
22607: NOP4
22611: PUSH
22612: LD_INT 0
22614: ST_TO_ADDR
// if not first_armoury and not first_workshop and not first_lab and not first_oil_mine then
22615: NOP4
22619: NOT
22620: PUSH
22621: NOP4
22625: NOT
22626: AND
22627: PUSH
22628: NOP4
22632: NOT
22633: AND
22634: PUSH
22635: NOP4
22639: NOT
22640: AND
22641: IFFALSE 22650
// ChangeMissionObjectives ( M_out_build_base ) ;
22643: LD_STRING M_out_build_base
22645: PPUSH
22646: NOP4
// end ; end ;
22650: GO 22653
22652: POP
// end ; if GetSide ( building ) = 5 and GetBType ( building ) = b_depot then
22653: NOP4
22657: PPUSH
22658: NOP4
22662: PUSH
22663: LD_INT 5
22665: EQUAL
22666: PUSH
22667: NOP4
22671: PPUSH
22672: NOP4
22676: PUSH
22677: LD_INT 0
22679: EQUAL
22680: AND
22681: IFFALSE 22713
// begin FarmerDepot = building ;
22683: NOP4
22687: PUSH
22688: NOP4
22692: ST_TO_ADDR
// SetResourceType ( GetBase ( building ) , mat_cans , 20 ) ;
22693: NOP4
22697: PPUSH
22698: NOP4
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: LD_INT 20
22708: PPUSH
22709: NOP4
// end ; if GetSide ( building ) = 1 then
22713: NOP4
22717: PPUSH
22718: NOP4
22722: PUSH
22723: LD_INT 1
22725: EQUAL
22726: IFFALSE 22742
// AmBuildCount = AmBuildCount + 1 ;
22728: NOP4
22732: PUSH
22733: NOP4
22737: PUSH
22738: LD_INT 1
22740: PLUS
22741: ST_TO_ADDR
// end ;
22742: PPOPN 6
22744: END
// on UpgradeComplete ( building ) do begin if GetSide ( building ) = 1 then
22745: NOP4
22749: PPUSH
22750: NOP4
22754: PUSH
22755: LD_INT 1
22757: EQUAL
22758: IFFALSE 22774
// AmBuildCount = AmBuildCount + 1 ;
22760: NOP4
22764: PUSH
22765: NOP4
22769: PUSH
22770: LD_INT 1
22772: PLUS
22773: ST_TO_ADDR
// end ;
22774: PPOPN 1
22776: END
// on LeaveBuilding ( building , un ) do begin if not Researched ( 2 , tech_apelang ) then
22777: LD_INT 2
22779: PPUSH
22780: LD_INT 1
22782: PPUSH
22783: NOP4
22787: NOT
22788: IFFALSE 22819
// if GetClass ( un ) = class_apeman then
22790: NOP4
22794: PPUSH
22795: NOP4
22799: PUSH
22800: LD_INT 12
22802: EQUAL
22803: IFFALSE 22819
// ComEnterUnit ( un , building ) ;
22805: NOP4
22809: PPUSH
22810: NOP4
22814: PPUSH
22815: NOP4
// end ;
22819: PPOPN 2
22821: END
// on SailEvent ( info ) do begin while not break_follow do
22822: NOP4
22826: NOT
22827: IFFALSE 22871
// begin ComMoveXY ( info [ 1 ] , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
22829: NOP4
22833: PUSH
22834: LD_INT 1
22836: ARRAY
22837: PPUSH
22838: NOP4
22842: PPUSH
22843: NOP4
22847: PPUSH
22848: NOP4
22852: PPUSH
22853: NOP4
22857: PPUSH
22858: NOP4
// wait ( 0 0$0.5 ) ;
22862: LD_INT 18
22864: PPUSH
22865: NOP4
// end ;
22869: GO 22822
// end ;
22871: PPOPN 1
22873: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_apeagres then
22874: NOP4
22878: PUSH
22879: LD_INT 11
22881: EQUAL
22882: IFFALSE 23011
// begin DialogueOn ;
22884: NOP4
// Say ( Aviradze , D10Av1 ) ;
22888: NOP4
22892: PPUSH
22893: LD_STRING D10Av1
22895: PPUSH
22896: NOP4
// if IsOk ( Oswald ) then
22900: NOP4
22904: PPUSH
22905: NOP4
22909: IFFALSE 23007
// begin Say ( Aviradze , D10Av2 ) ;
22911: NOP4
22915: PPUSH
22916: LD_STRING D10Av2
22918: PPUSH
22919: NOP4
// Say ( Oswald , D10Os1 ) ;
22923: NOP4
22927: PPUSH
22928: LD_STRING D10Os1
22930: PPUSH
22931: NOP4
// Say ( Aviradze , D10Av3 ) ;
22935: NOP4
22939: PPUSH
22940: LD_STRING D10Av3
22942: PPUSH
22943: NOP4
// Say ( Oswald , D10Os2 ) ;
22947: NOP4
22951: PPUSH
22952: LD_STRING D10Os2
22954: PPUSH
22955: NOP4
// Say ( Heike , D10H1 ) ;
22959: NOP4
22963: PPUSH
22964: LD_STRING D10H1
22966: PPUSH
22967: NOP4
// Say ( Oswald , D10Os3 ) ;
22971: NOP4
22975: PPUSH
22976: LD_STRING D10Os3
22978: PPUSH
22979: NOP4
// Say ( Heike , D10H2 ) ;
22983: NOP4
22987: PPUSH
22988: LD_STRING D10H2
22990: PPUSH
22991: NOP4
// Say ( Aviradze , D10Av4 ) ;
22995: NOP4
22999: PPUSH
23000: LD_STRING D10Av4
23002: PPUSH
23003: NOP4
// end ; DialogueOff ;
23007: NOP4
// end ; end ;
23011: PPOPN 2
23013: END
// on ApemanTamed ( ape , tamer ) do begin tamed_apemen = tamed_apemen ^ ape ;
23014: NOP4
23018: PUSH
23019: NOP4
23023: PUSH
23024: NOP4
23028: ADD
23029: ST_TO_ADDR
// end ;
23030: PPOPN 2
23032: END
// every 0 0$1 + 0 0$0.4 do var i ;
23033: GO 23035
23035: DISABLE
23036: LD_INT 0
23038: PPUSH
// begin tamed_apemen = UnitFilter ( tamed_apemen , [ f_alive ] ) ;
23039: NOP4
23043: PUSH
23044: NOP4
23048: PPUSH
23049: LD_INT 51
23051: PUSH
23052: EMPTY
23053: LIST
23054: PPUSH
23055: NOP4
23059: ST_TO_ADDR
// for i in tamed_apemen do
23060: NOP4
23064: PUSH
23065: NOP4
23069: PUSH
23070: FOR_IN
23071: IFFALSE 23137
// if GetClass ( i ) = class_apeman_soldier then
23073: NOP4
23077: PPUSH
23078: NOP4
23082: PUSH
23083: LD_INT 15
23085: EQUAL
23086: IFFALSE 23135
// begin num_apeman_soldiers = num_apeman_soldiers + 1 ;
23088: NOP4
23092: PUSH
23093: NOP4
23097: PUSH
23098: LD_INT 1
23100: PLUS
23101: ST_TO_ADDR
// tamed_apemen = tamed_apemen diff i ;
23102: NOP4
23106: PUSH
23107: NOP4
23111: PUSH
23112: NOP4
23116: DIFF
23117: ST_TO_ADDR
// if num_apeman_soldiers = 5 then
23118: NOP4
23122: PUSH
23123: LD_INT 5
23125: EQUAL
23126: IFFALSE 23135
// ChangeMissionObjectives ( M_out_train_apes ) ;
23128: LD_STRING M_out_train_apes
23130: PPUSH
23131: NOP4
// end ;
23135: GO 23070
23137: POP
23138: POP
// enable ;
23139: ENABLE
// end ;
23140: PPOPN 1
23142: END
// every 0 0$1 + 0 0$0.4 do var i ;
23143: GO 23145
23145: DISABLE
23146: LD_INT 0
23148: PPUSH
// begin tamed_apemen = UnitFilter ( tamed_apemen , [ f_alive ] ) ;
23149: NOP4
23153: PUSH
23154: NOP4
23158: PPUSH
23159: LD_INT 51
23161: PUSH
23162: EMPTY
23163: LIST
23164: PPUSH
23165: NOP4
23169: ST_TO_ADDR
// for i in tamed_apemen do
23170: NOP4
23174: PUSH
23175: NOP4
23179: PUSH
23180: FOR_IN
23181: IFFALSE 23247
// if GetClass ( i ) = class_apeman_soldier then
23183: NOP4
23187: PPUSH
23188: NOP4
23192: PUSH
23193: LD_INT 15
23195: EQUAL
23196: IFFALSE 23245
// begin num_apeman_soldiers = num_apeman_soldiers + 1 ;
23198: NOP4
23202: PUSH
23203: NOP4
23207: PUSH
23208: LD_INT 1
23210: PLUS
23211: ST_TO_ADDR
// tamed_apemen = tamed_apemen diff i ;
23212: NOP4
23216: PUSH
23217: NOP4
23221: PUSH
23222: NOP4
23226: DIFF
23227: ST_TO_ADDR
// if num_apeman_soldiers = 5 then
23228: NOP4
23232: PUSH
23233: LD_INT 5
23235: EQUAL
23236: IFFALSE 23245
// ChangeMissionObjectives ( M_out_train_apes ) ;
23238: LD_STRING M_out_train_apes
23240: PPUSH
23241: NOP4
// end ;
23245: GO 23180
23247: POP
23248: POP
// enable ;
23249: ENABLE
// end ;
23250: PPOPN 1
23252: END
// on VehicleConstructed ( vehicle , factory ) do begin if first_vehicle then
23253: NOP4
23257: IFFALSE 23274
// begin first_vehicle = false ;
23259: NOP4
23263: PUSH
23264: LD_INT 0
23266: ST_TO_ADDR
// ChangeMissionObjectives ( M_out_build_vehicle ) ;
23267: LD_STRING M_out_build_vehicle
23269: PPUSH
23270: NOP4
// end ; end ;
23274: PPOPN 2
23276: END
// on UnitDestroyed ( un ) do begin if un = Heike then
23277: NOP4
23281: PUSH
23282: NOP4
23286: EQUAL
23287: IFFALSE 23311
// begin ExclusiveOn ;
23289: NOP4
// wait ( 0 0$1 ) ;
23293: LD_INT 35
23295: PPUSH
23296: NOP4
// YouLost ( HeikeDead ) ;
23300: LD_STRING HeikeDead
23302: PPUSH
23303: NOP4
// ExclusiveOff ;
23307: NOP4
// end ; if un = dep or un = farmerdepot then
23311: NOP4
23315: PUSH
23316: LD_INT 1
23318: EQUAL
23319: PUSH
23320: NOP4
23324: PUSH
23325: NOP4
23329: EQUAL
23330: OR
23331: IFFALSE 23355
// begin ExclusiveOn ;
23333: NOP4
// wait ( 0 0$1 ) ;
23337: LD_INT 35
23339: PPUSH
23340: NOP4
// YouLost ( DepDestroyed ) ;
23344: LD_STRING DepDestroyed
23346: PPUSH
23347: NOP4
// ExclusiveOff ;
23351: NOP4
// end ; if not CaptureAmBase and GetClass ( un ) = class_engineer and GetSide ( un ) = 2 then
23355: NOP4
23359: NOT
23360: PUSH
23361: NOP4
23365: PPUSH
23366: NOP4
23370: PUSH
23371: LD_INT 2
23373: EQUAL
23374: AND
23375: PUSH
23376: NOP4
23380: PPUSH
23381: NOP4
23385: PUSH
23386: LD_INT 2
23388: EQUAL
23389: AND
23390: IFFALSE 23399
// YouLost ( NoEng ) ;
23392: LD_STRING NoEng
23394: PPUSH
23395: NOP4
// end ;
23399: PPOPN 1
23401: END
// on Contact ( side1 , side2 ) do begin if side1 = 2 and side2 = 5 then
23402: NOP4
23406: PUSH
23407: LD_INT 2
23409: EQUAL
23410: PUSH
23411: NOP4
23415: PUSH
23416: LD_INT 5
23418: EQUAL
23419: AND
23420: IFFALSE 23429
// YouLost ( SojAttack ) ;
23422: LD_STRING SojAttack
23424: PPUSH
23425: NOP4
// end ;
23429: PPOPN 2
23431: END
// on Command ( com ) do var i , j , temp ;
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
23436: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
23437: NOP4
23441: PUSH
23442: LD_INT 22
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 21
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: NOP4
23470: PUSH
23471: FOR_IN
23472: IFFALSE 23581
// if GetTaskList ( i ) > 0 then
23474: NOP4
23478: PPUSH
23479: NOP4
23483: PUSH
23484: LD_INT 0
23486: GREATER
23487: IFFALSE 23579
// for j = 1 to GetTaskList ( i ) do
23489: NOP4
23493: PUSH
23494: DOUBLE
23495: LD_INT 1
23497: DEC
23498: ST_TO_ADDR
23499: NOP4
23503: PPUSH
23504: NOP4
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23577
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
23512: NOP4
23516: PUSH
23517: NOP4
23521: PPUSH
23522: NOP4
23526: PUSH
23527: NOP4
23531: ARRAY
23532: PUSH
23533: LD_INT 4
23535: ARRAY
23536: ST_TO_ADDR
// if temp = FarmerDepot and GetSide ( temp ) = 5 then
23537: NOP4
23541: PUSH
23542: NOP4
23546: EQUAL
23547: PUSH
23548: NOP4
23552: PPUSH
23553: NOP4
23557: PUSH
23558: LD_INT 5
23560: EQUAL
23561: AND
23562: IFFALSE 23575
// SetTaskList ( i , [ ] ) ;
23564: NOP4
23568: PPUSH
23569: EMPTY
23570: PPUSH
23571: NOP4
// end ;
23575: GO 23509
23577: POP
23578: POP
23579: GO 23471
23581: POP
23582: POP
// end ; end_of_file
23583: PPOPN 4
23585: END
// export Timer ; every 0 0$01 trigger AmAlarmAttack do
23586: NOP4
23590: IFFALSE 23958
23592: GO 23594
23594: DISABLE
// begin enable ;
23595: ENABLE
// Timer = Timer + 0 0$01 ;
23596: NOP4
23600: PUSH
23601: NOP4
23605: PUSH
23606: LD_INT 35
23608: PLUS
23609: ST_TO_ADDR
// if attacksCounter = 1 and Timer >= attack_times [ 1 ] then
23610: NOP4
23614: PUSH
23615: LD_INT 1
23617: EQUAL
23618: PUSH
23619: NOP4
23623: PUSH
23624: NOP4
23628: PUSH
23629: LD_INT 1
23631: ARRAY
23632: GREATEREQUAL
23633: AND
23634: IFFALSE 23697
// begin attacksCounter = attacksCounter + 1 ;
23636: NOP4
23640: PUSH
23641: NOP4
23645: PUSH
23646: LD_INT 1
23648: PLUS
23649: ST_TO_ADDR
// waveDialog = waveDialog + 1 ;
23650: NOP4
23654: PUSH
23655: NOP4
23659: PUSH
23660: LD_INT 1
23662: PLUS
23663: ST_TO_ADDR
// SpawnAttack ( 1 , [ AmNorthSpawnArea , AmSouthSpawnArea ] [ Rand ( 1 , 2 ) ] ) ;
23664: LD_INT 1
23666: PPUSH
23667: NOP4
23671: PUSH
23672: NOP4
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PPUSH
23684: LD_INT 2
23686: PPUSH
23687: NOP4
23691: ARRAY
23692: PPUSH
23693: NOP4
// end ; if attacksCounter = 2 and Timer >= attack_times [ 2 ] then
23697: NOP4
23701: PUSH
23702: LD_INT 2
23704: EQUAL
23705: PUSH
23706: NOP4
23710: PUSH
23711: NOP4
23715: PUSH
23716: LD_INT 2
23718: ARRAY
23719: GREATEREQUAL
23720: AND
23721: IFFALSE 23784
// begin attacksCounter = attacksCounter + 1 ;
23723: NOP4
23727: PUSH
23728: NOP4
23732: PUSH
23733: LD_INT 1
23735: PLUS
23736: ST_TO_ADDR
// waveDialog = waveDialog + 1 ;
23737: NOP4
23741: PUSH
23742: NOP4
23746: PUSH
23747: LD_INT 1
23749: PLUS
23750: ST_TO_ADDR
// SpawnAttack ( 2 , [ AmNorthSpawnArea , AmSouthSpawnArea ] [ Rand ( 1 , 2 ) ] ) ;
23751: LD_INT 2
23753: PPUSH
23754: NOP4
23758: PUSH
23759: NOP4
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PPUSH
23771: LD_INT 2
23773: PPUSH
23774: NOP4
23778: ARRAY
23779: PPUSH
23780: NOP4
// end ; if attacksCounter = 3 and Timer >= attack_times [ 3 ] then
23784: NOP4
23788: PUSH
23789: LD_INT 3
23791: EQUAL
23792: PUSH
23793: NOP4
23797: PUSH
23798: NOP4
23802: PUSH
23803: LD_INT 3
23805: ARRAY
23806: GREATEREQUAL
23807: AND
23808: IFFALSE 23871
// begin attacksCounter = attacksCounter + 1 ;
23810: NOP4
23814: PUSH
23815: NOP4
23819: PUSH
23820: LD_INT 1
23822: PLUS
23823: ST_TO_ADDR
// waveDialog = waveDialog + 1 ;
23824: NOP4
23828: PUSH
23829: NOP4
23833: PUSH
23834: LD_INT 1
23836: PLUS
23837: ST_TO_ADDR
// SpawnAttack ( 3 , [ AmNorthSpawnArea , AmSouthSpawnArea ] [ Rand ( 1 , 2 ) ] ) ;
23838: LD_INT 3
23840: PPUSH
23841: NOP4
23845: PUSH
23846: NOP4
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PPUSH
23858: LD_INT 2
23860: PPUSH
23861: NOP4
23865: ARRAY
23866: PPUSH
23867: NOP4
// end ; if attacksCounter = 4 and Timer >= attack_times [ 4 ] then
23871: NOP4
23875: PUSH
23876: LD_INT 4
23878: EQUAL
23879: PUSH
23880: NOP4
23884: PUSH
23885: NOP4
23889: PUSH
23890: LD_INT 4
23892: ARRAY
23893: GREATEREQUAL
23894: AND
23895: IFFALSE 23958
// begin attacksCounter = attacksCounter + 1 ;
23897: NOP4
23901: PUSH
23902: NOP4
23906: PUSH
23907: LD_INT 1
23909: PLUS
23910: ST_TO_ADDR
// waveDialog = waveDialog + 1 ;
23911: NOP4
23915: PUSH
23916: NOP4
23920: PUSH
23921: LD_INT 1
23923: PLUS
23924: ST_TO_ADDR
// SpawnAttack ( 4 , [ AmNorthSpawnArea , AmSouthSpawnArea ] [ Rand ( 1 , 2 ) ] ) ;
23925: LD_INT 4
23927: PPUSH
23928: NOP4
23932: PUSH
23933: NOP4
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PPUSH
23945: LD_INT 2
23947: PPUSH
23948: NOP4
23952: ARRAY
23953: PPUSH
23954: NOP4
// end ; end ; end_of_file
23958: END
// export function ShowTimer ; var AllStrings ; begin
23959: LD_INT 0
23961: PPUSH
23962: PPUSH
// AllStrings := [ #Ar03-CrateCount , GetResourceType ( GetBase ( FarmerDepot ) , 1 ) , #Ar03-OilCount , GetResourceType ( GetBase ( FarmerDepot ) , 2 ) ] ;
23963: NOP4
23967: PUSH
23968: LD_STRING #Ar03-CrateCount
23970: PUSH
23971: NOP4
23975: PPUSH
23976: NOP4
23980: PPUSH
23981: LD_INT 1
23983: PPUSH
23984: NOP4
23988: PUSH
23989: LD_STRING #Ar03-OilCount
23991: PUSH
23992: NOP4
23996: PPUSH
23997: NOP4
24001: PPUSH
24002: LD_INT 2
24004: PPUSH
24005: NOP4
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// Display_Strings := AllStrings ;
24016: LD_ADDR_OWVAR 47
24020: PUSH
24021: NOP4
24025: ST_TO_ADDR
// end ;
24026: LD_VAR 0 1
24030: RET
// every 0 0$1 trigger GameCounterShow do
24031: NOP4
24035: IFFALSE 24045
24037: GO 24039
24039: DISABLE
// begin ShowTimer ;
24040: NOP4
// enable ;
24044: ENABLE
// end ; end_of_file
24045: END
// every 0 0$03 trigger GameCounterShow do var answer , i , un , c ;
24046: NOP4
24050: IFFALSE 24357
24052: GO 24054
24054: DISABLE
24055: LD_INT 0
24057: PPUSH
24058: PPUSH
24059: PPUSH
24060: PPUSH
// begin repeat wait ( 0 0$8 ) ;
24061: LD_INT 280
24063: PPUSH
24064: NOP4
// c = 0 ;
24068: NOP4
24072: PUSH
24073: LD_INT 0
24075: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
24076: NOP4
24080: PUSH
24081: LD_INT 22
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PPUSH
24105: NOP4
24109: PUSH
24110: FOR_IN
24111: IFFALSE 24180
// begin if IsInUnit ( i ) then
24113: NOP4
24117: PPUSH
24118: NOP4
24122: IFFALSE 24141
// un = IsInUnit ( i ) else
24124: NOP4
24128: PUSH
24129: NOP4
24133: PPUSH
24134: NOP4
24138: ST_TO_ADDR
24139: GO 24151
// un = i ;
24141: NOP4
24145: PUSH
24146: NOP4
24150: ST_TO_ADDR
// if not IsInArea ( un , FarmerBaseArea ) then
24151: NOP4
24155: PPUSH
24156: NOP4
24160: PPUSH
24161: NOP4
24165: NOT
24166: IFFALSE 24178
// begin c = 1 ;
24168: NOP4
24172: PUSH
24173: LD_INT 1
24175: ST_TO_ADDR
// break ;
24176: GO 24180
// end ; end ;
24178: GO 24110
24180: POP
24181: POP
// if c then
24182: NOP4
24186: IFFALSE 24190
// continue ;
24188: GO 24061
// if GetResourceType ( GetBase ( FarmerDepot ) , 1 ) < 350 or GetResourceType ( GetBase ( FarmerDepot ) , 2 ) < 350 then
24190: NOP4
24194: PPUSH
24195: NOP4
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: NOP4
24207: PUSH
24208: LD_INT 350
24210: LESS
24211: PUSH
24212: NOP4
24216: PPUSH
24217: NOP4
24221: PPUSH
24222: LD_INT 2
24224: PPUSH
24225: NOP4
24229: PUSH
24230: LD_INT 350
24232: LESS
24233: OR
24234: IFFALSE 24273
// begin answer = Query ( Q_leave_not_enough_mat ) ;
24236: NOP4
24240: PUSH
24241: LD_STRING Q_leave_not_enough_mat
24243: PPUSH
24244: NOP4
24248: ST_TO_ADDR
// case answer of 1 :
24249: NOP4
24253: PUSH
24254: LD_INT 1
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24272
24262: POP
// YouLost ( LowGather ) ; end ;
24263: LD_STRING LowGather
24265: PPUSH
24266: NOP4
24270: GO 24273
24272: POP
// end ; if GetResourceType ( GetBase ( FarmerDepot ) , 1 ) >= 350 or GetResourceType ( GetBase ( FarmerDepot ) , 2 ) >= 350 then
24273: NOP4
24277: PPUSH
24278: NOP4
24282: PPUSH
24283: LD_INT 1
24285: PPUSH
24286: NOP4
24290: PUSH
24291: LD_INT 350
24293: GREATEREQUAL
24294: PUSH
24295: NOP4
24299: PPUSH
24300: NOP4
24304: PPUSH
24305: LD_INT 2
24307: PPUSH
24308: NOP4
24312: PUSH
24313: LD_INT 350
24315: GREATEREQUAL
24316: OR
24317: IFFALSE 24353
// begin answer = Query ( Q_leave_enough_mat ) ;
24319: NOP4
24323: PUSH
24324: LD_STRING Q_leave_enough_mat
24326: PPUSH
24327: NOP4
24331: ST_TO_ADDR
// case answer of 1 :
24332: NOP4
24336: PUSH
24337: LD_INT 1
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24352
24345: POP
// EndMission ; end ;
24346: NOP4
24350: GO 24353
24352: POP
// end ; until false ;
24353: LD_INT 0
24355: IFFALSE 24061
// end ;
24357: PPOPN 4
24359: END
// function EndMission ; var num , list , un_list , name_list ; begin
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
// DialogueOn ;
24367: NOP4
// Say ( Heike , D12H1 ) ;
24371: NOP4
24375: PPUSH
24376: LD_STRING D12H1
24378: PPUSH
24379: NOP4
// DialogueOff ;
24383: NOP4
// if GetResourceType ( GetBase ( FarmerDepot ) , mat_cans ) >= secondary_crate_goal and GetResourceType ( GetBase ( FarmerDepot ) , mat_oil ) >= secondary_crate_goal then
24387: NOP4
24391: PPUSH
24392: NOP4
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: NOP4
24404: PUSH
24405: NOP4
24409: GREATEREQUAL
24410: PUSH
24411: NOP4
24415: PPUSH
24416: NOP4
24420: PPUSH
24421: LD_INT 2
24423: PPUSH
24424: NOP4
24428: PUSH
24429: NOP4
24433: GREATEREQUAL
24434: AND
24435: IFFALSE 24447
// num = 1 else
24437: NOP4
24441: PUSH
24442: LD_INT 1
24444: ST_TO_ADDR
24445: GO 24456
// num = - 1 ;
24447: NOP4
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: ST_TO_ADDR
// AddMedal ( ExtraCrates , num ) ;
24456: LD_STRING ExtraCrates
24458: PPUSH
24459: NOP4
24463: PPUSH
24464: NOP4
// if num_apeman_soldiers >= 5 then
24468: NOP4
24472: PUSH
24473: LD_INT 5
24475: GREATEREQUAL
24476: IFFALSE 24488
// num = 1 else
24478: NOP4
24482: PUSH
24483: LD_INT 1
24485: ST_TO_ADDR
24486: GO 24592
// if first_lab then
24488: NOP4
24492: IFFALSE 24527
// begin if IsDead ( Aviradze ) then
24494: NOP4
24498: PPUSH
24499: NOP4
24503: IFFALSE 24516
// num = - 5 else
24505: NOP4
24509: PUSH
24510: LD_INT 5
24512: NEG
24513: ST_TO_ADDR
24514: GO 24525
// num = - 4 ;
24516: NOP4
24520: PUSH
24521: LD_INT 4
24523: NEG
24524: ST_TO_ADDR
// end else
24525: GO 24592
// if ( aviradze_plant_gathering diff 0 ) > 0 then
24527: NOP4
24531: PUSH
24532: LD_INT 0
24534: DIFF
24535: PUSH
24536: LD_INT 0
24538: GREATER
24539: IFFALSE 24552
// num = - 3 else
24541: NOP4
24545: PUSH
24546: LD_INT 3
24548: NEG
24549: ST_TO_ADDR
24550: GO 24592
// if num_apeman_soldiers = 0 and tamed_apemen = 0 then
24552: NOP4
24556: PUSH
24557: LD_INT 0
24559: EQUAL
24560: PUSH
24561: NOP4
24565: PUSH
24566: LD_INT 0
24568: EQUAL
24569: AND
24570: IFFALSE 24583
// num = - 2 else
24572: NOP4
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: ST_TO_ADDR
24581: GO 24592
// num = - 1 ;
24583: NOP4
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: ST_TO_ADDR
// AddMedal ( Apes , num ) ;
24592: LD_STRING Apes
24594: PPUSH
24595: NOP4
24599: PPUSH
24600: NOP4
// if not first_vehicle then
24604: NOP4
24608: NOT
24609: IFFALSE 24621
// num = 1 else
24611: NOP4
24615: PUSH
24616: LD_INT 1
24618: ST_TO_ADDR
24619: GO 24647
// if first_workshop then
24621: NOP4
24625: IFFALSE 24638
// num = - 2 else
24627: NOP4
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: ST_TO_ADDR
24636: GO 24647
// num = - 1 ;
24638: NOP4
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: ST_TO_ADDR
// AddMedal ( SolarVehicle , num ) ;
24647: LD_STRING SolarVehicle
24649: PPUSH
24650: NOP4
24654: PPUSH
24655: NOP4
// GiveMedals ( Medals ) ;
24659: LD_STRING Medals
24661: PPUSH
24662: NOP4
// list = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_soldier ] ] , [ f_not , [ f_class , class_apeman_kamikaze ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ;
24666: NOP4
24670: PUSH
24671: LD_INT 22
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 21
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 25
24696: PUSH
24697: LD_INT 12
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: LD_INT 25
24713: PUSH
24714: LD_INT 15
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 25
24730: PUSH
24731: LD_INT 17
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: PUSH
24745: LD_INT 25
24747: PUSH
24748: LD_INT 16
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: PPUSH
24767: NOP4
24771: ST_TO_ADDR
// RewardPeople ( list ) ;
24772: NOP4
24776: PPUSH
24777: NOP4
// SaveCharacters ( Heike , Heike_03_cont ) ;
24781: NOP4
24785: PPUSH
24786: LD_STRING Heike_03_cont
24788: PPUSH
24789: NOP4
// un_list = [ Sonya , Oswald , Ralph , Aviradze , Kowalski , Willard ] ;
24793: NOP4
24797: PUSH
24798: NOP4
24802: PUSH
24803: NOP4
24807: PUSH
24808: NOP4
24812: PUSH
24813: NOP4
24817: PUSH
24818: NOP4
24822: PUSH
24823: NOP4
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Aviradze , Kowalski , Willard ] ;
24836: NOP4
24840: PUSH
24841: LD_STRING Sonya
24843: PUSH
24844: LD_STRING Oswald
24846: PUSH
24847: LD_STRING Ralph
24849: PUSH
24850: LD_STRING Aviradze
24852: PUSH
24853: LD_STRING Kowalski
24855: PUSH
24856: LD_STRING Willard
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// for num = 1 to un_list do
24867: NOP4
24871: PUSH
24872: DOUBLE
24873: LD_INT 1
24875: DEC
24876: ST_TO_ADDR
24877: NOP4
24881: PUSH
24882: FOR_TO
24883: IFFALSE 24935
// if un_list [ num ] in list then
24885: NOP4
24889: PUSH
24890: NOP4
24894: ARRAY
24895: PUSH
24896: NOP4
24900: IN
24901: IFFALSE 24933
// SaveCharacters ( un_list [ num ] , name_list [ num ] & _03_cont ) ;
24903: NOP4
24907: PUSH
24908: NOP4
24912: ARRAY
24913: PPUSH
24914: NOP4
24918: PUSH
24919: NOP4
24923: ARRAY
24924: PUSH
24925: LD_STRING _03_cont
24927: STR
24928: PPUSH
24929: NOP4
24933: GO 24882
24935: POP
24936: POP
// SaveCharacters ( list diff ( Heike ^ un_list ) , Others_03_cont ) ;
24937: NOP4
24941: PUSH
24942: NOP4
24946: PUSH
24947: NOP4
24951: ADD
24952: DIFF
24953: PPUSH
24954: LD_STRING Others_03_cont
24956: PPUSH
24957: NOP4
// SaveVariable ( GetResourceType ( GetBase ( FarmerDepot ) , 1 ) >= secondary_crate_goal , Extra_crates_collected_03_cont ) ;
24961: NOP4
24965: PPUSH
24966: NOP4
24970: PPUSH
24971: LD_INT 1
24973: PPUSH
24974: NOP4
24978: PUSH
24979: NOP4
24983: GREATEREQUAL
24984: PPUSH
24985: LD_STRING Extra_crates_collected_03_cont
24987: PPUSH
24988: NOP4
// SaveVariable ( GetResourceType ( GetBase ( FarmerDepot ) , 2 ) >= secondary_crate_goal , Extra_oil_collected_03_cont ) ;
24992: NOP4
24996: PPUSH
24997: NOP4
25001: PPUSH
25002: LD_INT 2
25004: PPUSH
25005: NOP4
25009: PUSH
25010: NOP4
25014: GREATEREQUAL
25015: PPUSH
25016: LD_STRING Extra_oil_collected_03_cont
25018: PPUSH
25019: NOP4
// SaveVariable ( num_apeman_soldiers >= 5 , Apemen_soldiers_trained_03_cont ) ;
25023: NOP4
25027: PUSH
25028: LD_INT 5
25030: GREATEREQUAL
25031: PPUSH
25032: LD_STRING Apemen_soldiers_trained_03_cont
25034: PPUSH
25035: NOP4
// YouWin ;
25039: NOP4
// end ;
25043: LD_VAR 0 1
25047: RET
